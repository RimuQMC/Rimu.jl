name: Run tests

on:
  push

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1', 'nightly']
        julia-arch: [x64]
        os: [ubuntu-latest]
      fail-fast: false
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Setup Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: "Load cache"
        uses: julia-actions/cache@v2
      - name: "Build"
        uses: julia-actions/julia-buildpkg@v1
      - name: "Run tests"
        run: |
          julia --color=yes --project=@. -t2 -e "using Pkg; Pkg.test(\"Rimu\"; coverage=true);"

      - name: "Run MPI tests"
        run: |
          export JULIA_PROJECT=@.
          export JULIA_MPIEXEC=mpiexecjl
          export JULIA_NUM_THREADS=1

          # We run MPI tests from the test project (Rimu/test/Project.toml) as that has
          # access to KrylovKit. Because the test project does not include Rimu, we add it
          # with Pkg.develop(path="."). using Rimu, KrylovKit, StaticArrays at the end
          # ensures everything is precompiled before the MPI job starts.
          julia --color=yes --project=test -e "using Pkg; Pkg.instantiate(); Pkg.develop(path=\".\"); Pkg.add(\"MPI\"); Pkg.build(); using MPI; MPI.install_mpiexecjl(); using Rimu, KrylovKit, StaticArrays"
          export PATH=$PATH:/home/runner/.julia/bin

          mpiexecjl -n 2 julia --code-coverage=user --depwarn=yes --project=test test/mpi_runtests.jl

      - name: "Process coverage"
        uses: julia-actions/julia-processcoverage@v1
      - name: "Coveralls"
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: ./lcov.info
        if: ${{ matrix.julia-version == '1' }}
