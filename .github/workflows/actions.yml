name: Run tests

on:
  push:
    branches:
      - master
      - develop
      - 'feature/**'
      - 'bugfix/**'
    # tags: '*'
  pull_request:
    branches:
      - master
      - develop
      - feature/github-actions

jobs:
  testNewVersion:
    runs-on: ${{ matrix.os }}
    # env:
    #   ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    strategy:
      matrix:
        julia-version: [1.5]
        # julia-arch: [x64, x86]
        julia-arch: [x64]
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]
        # 32-bit Julia binaries are not available on macOS
        # exclude:
        #   - os: macOS-latest
        #     julia-arch: x86

    steps:
      - uses: actions/checkout@v2
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: "Install MPI"
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin libopenmpi-dev
      - name: "Run tests"
        run: |
          export JULIA_PROJECT=@.
          export JULIA_MPIEXEC=mpirun
          echo -e '#!/bin/bash\nmpiexec --allow-run-as-root $@' > $JULIA_MPIEXEC
          chmod +x $JULIA_MPIEXEC
          export JULIA_NUM_THREADS=1
          mpirun echo "hello"
          export JULIA_MPI_BINARY=system
          julia --project -e 'ENV["JULIA_MPI_BINARY"]="system"; using Pkg; Pkg.add("MPI"); Pkg.build("MPI"; verbose=true)'
          julia --project=@. -e "using InteractiveUtils; versioninfo(verbose=true)"
          julia --project=@. -e "using Pkg; Pkg.instantiate(); Pkg.build()"
          mpirun -np 2 julia --project=@. test/script_mpi_minimum.jl
          OUTPUT_FILE=mpi_df.arrow
          if [ -f "$OUTPUT_FILE" ]; then
              echo "$FILE exists."
          elif [ -f "test/$OUTPUT_FILE" ]; then
              echo "$FILE exists under /test/."
          else
              echo "$FILE does not exist."
          fi
          julia --project=@. -e "using Pkg; Pkg.test(\"Rimu\"; coverage=true);"

      - uses: julia-actions/julia-processcoverage@latest
      - uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: ./lcov.info
