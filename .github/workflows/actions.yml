
name: Run tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [1.4.1]
        # julia-arch: [x64, x86]
        julia-arch: [x64]
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]
        # 32-bit Julia binaries are not available on macOS
        # exclude:
        #   - os: macOS-latest
        #     julia-arch: x86

    steps:
      - uses: actions/checkout@v1.0.0
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v0.2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: "Install MPI"
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin libopenmpi-dev
      - name: "Run tests"
        run: |
          export JULIA_PROJECT=@.
          export JULIA_MPIEXEC=/tmp/mpiexecwrapper
          echo -e '#!/bin/bash\nmpiexec --allow-run-as-root $@' > $JULIA_MPIEXEC
          chmod +x $JULIA_MPIEXEC
          export JULIA_NUM_THREADS=1
          mpirun echo "hello"
          julia --project=@. -e "using InteractiveUtils; versioninfo(verbose=true)"
          julia --project=@. -e "using Pkg; Pkg.instantiate(); Pkg.build()"
          julia --project=@. -e "using Pkg; Pkg.test(\"Rimu\");"


name: Documentation

on:
  push:
    branches:
      - master
      - feature/github-actions
    tags: '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@latest
        with:
          version: '1.4.1'
      - name: Install dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
      - name: Build and deploy
        run: julia --project=docs/ docs/make.jl
