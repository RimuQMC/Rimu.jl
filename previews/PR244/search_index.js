var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation, and DataFrames for output","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\naIni = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we define the operators for the observables we wish to calculate","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ([G2RealCorrelator(d) for d in dvals]...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, which are subtyped to AbstractHamiltonian, but with less functionality than a full Hamiltonian. It calculates the two-body correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables are calculated using the \"replica trick\" whereby several copies or \"replicas\" of the model are run simultaneously. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one. For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the necessary FCIQMC variables are calculated for each replica, (e.g. shift, norm etc.), this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_reps = 3\nreplica = AllOverlaps(num_reps; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We need a reasonable number of timesteps to get good statistics, and we are running multiple replicas, so we will only use a small number of walkers:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies are the same as before","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dτ = 0.001\nsvec = DVec(aIni => 1)\nRandom.seed!(17);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we run the main FCIQMC loop:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(H, svec;\n            dτ,\n            laststep = steps_equilibrate + steps_measure,\n            targetwalkers,\n            replica,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult using MonteCarloMeasurements. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we can calculate the correlation function for each value of d","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_reps replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21613155078119725 ± 0.01085821157566204\n   G2(1) = 0.9169697523770443 ± 0.0038806082210552633\n   G2(2) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(3) = 0.9850696504200039 ± 0.0021126795728271214\n   G2(4) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(5) = 0.9169697523770443 ± 0.0038806082210552633\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is highest at d=3 which is the longest possible separation with periodic boundary conditions.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_reps replicas:\")\nfor i in 1:num_reps\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.822539185245795 ± 0.22458214092101125\n   Replica 2: -4.0952774782992565 ± 0.20113200040556367\n   Replica 3: -4.003586035974758 ± 0.20727140414134074\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Finished!","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots # for plotting","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now we define the physical problem: Generating a configuration where 6 particles are evenly distributed in 6 lattice sites:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"aIni = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"where BoseFS is used to create a bosonic Fock state. The Hamiltonian is defined by specifying the model and the parameters. Here we use the Bose Hubbard model in one dimension and real space:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Ĥ = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"It is good practice to equilibrate the time series before taking statistics.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The appropriate size of the time step is problem dependent.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dτ = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here we use the function default_starting_vector to generate a vector with only a single occupied configuration, the same vector that we will use as starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"svec = default_starting_vector(aIni; style=IsStochasticInteger())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|1 1 1 1 1 1⟩\" => 10","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use (while it is irrelevant for the projected energy).","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables are passed into the lomc! function with the post_step keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step = ProjectedEnergy(Ĥ, svec)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}[fs\"|1 1 1 1 1 1⟩\" => 10]), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}[fs\"|1 1 1 1 2 0⟩\" => -14.142135623730951, fs\"|0 2 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 1 0 2⟩\" => -14.142135623730951, fs\"|1 2 0 1 1 1⟩\" => -14.142135623730951, fs\"|2 0 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 2 0 1⟩\" => -14.142135623730951, fs\"|1 1 2 0 1 1⟩\" => -14.142135623730951, fs\"|1 1 0 2 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 0 2 1⟩\" => -14.142135623730951, fs\"|1 0 2 1 1 1⟩\" => -14.142135623730951, fs\"|2 1 1 1 1 0⟩\" => -14.142135623730951, fs\"|0 1 1 1 1 2⟩\" => -14.142135623730951]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Seeding the random number generator is sometimes useful in order to get reproducible results","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Random\nRandom.seed!(17);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finally, we can start the main FCIQMC loop:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df, state = lomc!(Ĥ, svec;\n            laststep = steps_equilibrate + steps_measure, # total number of steps\n            dτ,\n            targetwalkers,\n            post_step,\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df is a DataFrame containing the time series data.","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline([targetwalkers], label=\"targetwalkers\", color=:red, linestyle=:dash)\nplot!(df.steps, df.norm, label=\"norm\", ylabel=\"norm\", xlabel=\"steps\")","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip070\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip070)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip071\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip070)\" d=\"M262.551 1423.18 L2352.76 1423.18 L2352.76 47.2441 L262.551 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip072\">\n    <rect x=\"262\" y=\"47\" width=\"2091\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"321.05,1423.18 321.05,47.2441 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"978.567,1423.18 978.567,47.2441 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1636.08,1423.18 1636.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2293.6,1423.18 2293.6,47.2441 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.05,1423.18 321.05,1404.28 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"978.567,1423.18 978.567,1404.28 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1636.08,1423.18 1636.08,1404.28 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2293.6,1423.18 2293.6,1404.28 \"/>\n<path clip-path=\"url(#clip070)\" d=\"M321.05 1454.1 Q317.439 1454.1 315.611 1457.66 Q313.805 1461.2 313.805 1468.33 Q313.805 1475.44 315.611 1479.01 Q317.439 1482.55 321.05 1482.55 Q324.685 1482.55 326.49 1479.01 Q328.319 1475.44 328.319 1468.33 Q328.319 1461.2 326.49 1457.66 Q324.685 1454.1 321.05 1454.1 M321.05 1450.39 Q326.861 1450.39 329.916 1455 Q332.995 1459.58 332.995 1468.33 Q332.995 1477.06 329.916 1481.67 Q326.861 1486.25 321.05 1486.25 Q315.24 1486.25 312.162 1481.67 Q309.106 1477.06 309.106 1468.33 Q309.106 1459.58 312.162 1455 Q315.24 1450.39 321.05 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M923.092 1481.64 L930.731 1481.64 L930.731 1455.28 L922.421 1456.95 L922.421 1452.69 L930.685 1451.02 L935.361 1451.02 L935.361 1481.64 L943 1481.64 L943 1485.58 L923.092 1485.58 L923.092 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M962.444 1454.1 Q958.833 1454.1 957.004 1457.66 Q955.199 1461.2 955.199 1468.33 Q955.199 1475.44 957.004 1479.01 Q958.833 1482.55 962.444 1482.55 Q966.078 1482.55 967.884 1479.01 Q969.713 1475.44 969.713 1468.33 Q969.713 1461.2 967.884 1457.66 Q966.078 1454.1 962.444 1454.1 M962.444 1450.39 Q968.254 1450.39 971.31 1455 Q974.388 1459.58 974.388 1468.33 Q974.388 1477.06 971.31 1481.67 Q968.254 1486.25 962.444 1486.25 Q956.634 1486.25 953.555 1481.67 Q950.5 1477.06 950.5 1468.33 Q950.5 1459.58 953.555 1455 Q956.634 1450.39 962.444 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M992.606 1454.1 Q988.995 1454.1 987.166 1457.66 Q985.361 1461.2 985.361 1468.33 Q985.361 1475.44 987.166 1479.01 Q988.995 1482.55 992.606 1482.55 Q996.24 1482.55 998.046 1479.01 Q999.874 1475.44 999.874 1468.33 Q999.874 1461.2 998.046 1457.66 Q996.24 1454.1 992.606 1454.1 M992.606 1450.39 Q998.416 1450.39 1001.47 1455 Q1004.55 1459.58 1004.55 1468.33 Q1004.55 1477.06 1001.47 1481.67 Q998.416 1486.25 992.606 1486.25 Q986.796 1486.25 983.717 1481.67 Q980.662 1477.06 980.662 1468.33 Q980.662 1459.58 983.717 1455 Q986.796 1450.39 992.606 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1022.77 1454.1 Q1019.16 1454.1 1017.33 1457.66 Q1015.52 1461.2 1015.52 1468.33 Q1015.52 1475.44 1017.33 1479.01 Q1019.16 1482.55 1022.77 1482.55 Q1026.4 1482.55 1028.21 1479.01 Q1030.04 1475.44 1030.04 1468.33 Q1030.04 1461.2 1028.21 1457.66 Q1026.4 1454.1 1022.77 1454.1 M1022.77 1450.39 Q1028.58 1450.39 1031.63 1455 Q1034.71 1459.58 1034.71 1468.33 Q1034.71 1477.06 1031.63 1481.67 Q1028.58 1486.25 1022.77 1486.25 Q1016.96 1486.25 1013.88 1481.67 Q1010.82 1477.06 1010.82 1468.33 Q1010.82 1459.58 1013.88 1455 Q1016.96 1450.39 1022.77 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1584.69 1481.64 L1601.01 1481.64 L1601.01 1485.58 L1579.07 1485.58 L1579.07 1481.64 Q1581.73 1478.89 1586.31 1474.26 Q1590.92 1469.61 1592.1 1468.27 Q1594.35 1465.74 1595.23 1464.01 Q1596.13 1462.25 1596.13 1460.56 Q1596.13 1457.8 1594.19 1456.07 Q1592.26 1454.33 1589.16 1454.33 Q1586.96 1454.33 1584.51 1455.09 Q1582.08 1455.86 1579.3 1457.41 L1579.3 1452.69 Q1582.12 1451.55 1584.58 1450.97 Q1587.03 1450.39 1589.07 1450.39 Q1594.44 1450.39 1597.63 1453.08 Q1600.83 1455.77 1600.83 1460.26 Q1600.83 1462.39 1600.02 1464.31 Q1599.23 1466.2 1597.12 1468.8 Q1596.55 1469.47 1593.44 1472.69 Q1590.34 1475.88 1584.69 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1620.83 1454.1 Q1617.22 1454.1 1615.39 1457.66 Q1613.58 1461.2 1613.58 1468.33 Q1613.58 1475.44 1615.39 1479.01 Q1617.22 1482.55 1620.83 1482.55 Q1624.46 1482.55 1626.27 1479.01 Q1628.1 1475.44 1628.1 1468.33 Q1628.1 1461.2 1626.27 1457.66 Q1624.46 1454.1 1620.83 1454.1 M1620.83 1450.39 Q1626.64 1450.39 1629.69 1455 Q1632.77 1459.58 1632.77 1468.33 Q1632.77 1477.06 1629.69 1481.67 Q1626.64 1486.25 1620.83 1486.25 Q1615.02 1486.25 1611.94 1481.67 Q1608.88 1477.06 1608.88 1468.33 Q1608.88 1459.58 1611.94 1455 Q1615.02 1450.39 1620.83 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1650.99 1454.1 Q1647.38 1454.1 1645.55 1457.66 Q1643.74 1461.2 1643.74 1468.33 Q1643.74 1475.44 1645.55 1479.01 Q1647.38 1482.55 1650.99 1482.55 Q1654.62 1482.55 1656.43 1479.01 Q1658.26 1475.44 1658.26 1468.33 Q1658.26 1461.2 1656.43 1457.66 Q1654.62 1454.1 1650.99 1454.1 M1650.99 1450.39 Q1656.8 1450.39 1659.86 1455 Q1662.93 1459.58 1662.93 1468.33 Q1662.93 1477.06 1659.86 1481.67 Q1656.8 1486.25 1650.99 1486.25 Q1645.18 1486.25 1642.1 1481.67 Q1639.05 1477.06 1639.05 1468.33 Q1639.05 1459.58 1642.1 1455 Q1645.18 1450.39 1650.99 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1681.15 1454.1 Q1677.54 1454.1 1675.71 1457.66 Q1673.91 1461.2 1673.91 1468.33 Q1673.91 1475.44 1675.71 1479.01 Q1677.54 1482.55 1681.15 1482.55 Q1684.79 1482.55 1686.59 1479.01 Q1688.42 1475.44 1688.42 1468.33 Q1688.42 1461.2 1686.59 1457.66 Q1684.79 1454.1 1681.15 1454.1 M1681.15 1450.39 Q1686.96 1450.39 1690.02 1455 Q1693.1 1459.58 1693.1 1468.33 Q1693.1 1477.06 1690.02 1481.67 Q1686.96 1486.25 1681.15 1486.25 Q1675.34 1486.25 1672.26 1481.67 Q1669.21 1477.06 1669.21 1468.33 Q1669.21 1459.58 1672.26 1455 Q1675.34 1450.39 1681.15 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2252.28 1466.95 Q2255.64 1467.66 2257.51 1469.93 Q2259.41 1472.2 2259.41 1475.53 Q2259.41 1480.65 2255.89 1483.45 Q2252.37 1486.25 2245.89 1486.25 Q2243.72 1486.25 2241.4 1485.81 Q2239.11 1485.39 2236.66 1484.54 L2236.66 1480.02 Q2238.6 1481.16 2240.91 1481.74 Q2243.23 1482.32 2245.75 1482.32 Q2250.15 1482.32 2252.44 1480.58 Q2254.76 1478.84 2254.76 1475.53 Q2254.76 1472.48 2252.6 1470.77 Q2250.47 1469.03 2246.65 1469.03 L2242.63 1469.03 L2242.63 1465.19 L2246.84 1465.19 Q2250.29 1465.19 2252.12 1463.82 Q2253.95 1462.43 2253.95 1459.84 Q2253.95 1457.18 2252.05 1455.77 Q2250.17 1454.33 2246.65 1454.33 Q2244.73 1454.33 2242.53 1454.75 Q2240.34 1455.16 2237.7 1456.04 L2237.7 1451.88 Q2240.36 1451.14 2242.67 1450.77 Q2245.01 1450.39 2247.07 1450.39 Q2252.4 1450.39 2255.5 1452.83 Q2258.6 1455.23 2258.6 1459.35 Q2258.6 1462.22 2256.96 1464.21 Q2255.31 1466.18 2252.28 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2278.28 1454.1 Q2274.66 1454.1 2272.84 1457.66 Q2271.03 1461.2 2271.03 1468.33 Q2271.03 1475.44 2272.84 1479.01 Q2274.66 1482.55 2278.28 1482.55 Q2281.91 1482.55 2283.71 1479.01 Q2285.54 1475.44 2285.54 1468.33 Q2285.54 1461.2 2283.71 1457.66 Q2281.91 1454.1 2278.28 1454.1 M2278.28 1450.39 Q2284.09 1450.39 2287.14 1455 Q2290.22 1459.58 2290.22 1468.33 Q2290.22 1477.06 2287.14 1481.67 Q2284.09 1486.25 2278.28 1486.25 Q2272.47 1486.25 2269.39 1481.67 Q2266.33 1477.06 2266.33 1468.33 Q2266.33 1459.58 2269.39 1455 Q2272.47 1450.39 2278.28 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2308.44 1454.1 Q2304.83 1454.1 2303 1457.66 Q2301.19 1461.2 2301.19 1468.33 Q2301.19 1475.44 2303 1479.01 Q2304.83 1482.55 2308.44 1482.55 Q2312.07 1482.55 2313.88 1479.01 Q2315.71 1475.44 2315.71 1468.33 Q2315.71 1461.2 2313.88 1457.66 Q2312.07 1454.1 2308.44 1454.1 M2308.44 1450.39 Q2314.25 1450.39 2317.3 1455 Q2320.38 1459.58 2320.38 1468.33 Q2320.38 1477.06 2317.3 1481.67 Q2314.25 1486.25 2308.44 1486.25 Q2302.63 1486.25 2299.55 1481.67 Q2296.49 1477.06 2296.49 1468.33 Q2296.49 1459.58 2299.55 1455 Q2302.63 1450.39 2308.44 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2338.6 1454.1 Q2334.99 1454.1 2333.16 1457.66 Q2331.35 1461.2 2331.35 1468.33 Q2331.35 1475.44 2333.16 1479.01 Q2334.99 1482.55 2338.6 1482.55 Q2342.23 1482.55 2344.04 1479.01 Q2345.87 1475.44 2345.87 1468.33 Q2345.87 1461.2 2344.04 1457.66 Q2342.23 1454.1 2338.6 1454.1 M2338.6 1450.39 Q2344.41 1450.39 2347.46 1455 Q2350.54 1459.58 2350.54 1468.33 Q2350.54 1477.06 2347.46 1481.67 Q2344.41 1486.25 2338.6 1486.25 Q2332.79 1486.25 2329.71 1481.67 Q2326.65 1477.06 2326.65 1468.33 Q2326.65 1459.58 2329.71 1455 Q2332.79 1450.39 2338.6 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1248.87 1533.45 L1248.87 1538.98 Q1246.38 1537.71 1243.71 1537.07 Q1241.04 1536.44 1238.17 1536.44 Q1233.81 1536.44 1231.62 1537.77 Q1229.45 1539.11 1229.45 1541.79 Q1229.45 1543.82 1231.01 1545 Q1232.57 1546.15 1237.28 1547.2 L1239.29 1547.64 Q1245.52 1548.98 1248.13 1551.43 Q1250.78 1553.85 1250.78 1558.21 Q1250.78 1563.17 1246.83 1566.07 Q1242.91 1568.97 1236.04 1568.97 Q1233.17 1568.97 1230.06 1568.39 Q1226.97 1567.85 1223.53 1566.74 L1223.53 1560.69 Q1226.78 1562.38 1229.93 1563.24 Q1233.08 1564.07 1236.17 1564.07 Q1240.3 1564.07 1242.53 1562.66 Q1244.76 1561.23 1244.76 1558.65 Q1244.76 1556.27 1243.14 1554.99 Q1241.55 1553.72 1236.1 1552.54 L1234.07 1552.07 Q1228.62 1550.92 1226.2 1548.56 Q1223.79 1546.18 1223.79 1542.04 Q1223.79 1537.01 1227.35 1534.27 Q1230.91 1531.54 1237.47 1531.54 Q1240.72 1531.54 1243.58 1532.01 Q1246.45 1532.49 1248.87 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1265.89 1522.27 L1265.89 1532.4 L1277.96 1532.4 L1277.96 1536.95 L1265.89 1536.95 L1265.89 1556.3 Q1265.89 1560.66 1267.07 1561.9 Q1268.28 1563.14 1271.94 1563.14 L1277.96 1563.14 L1277.96 1568.04 L1271.94 1568.04 Q1265.16 1568.04 1262.58 1565.53 Q1260.01 1562.98 1260.01 1556.3 L1260.01 1536.95 L1255.71 1536.95 L1255.71 1532.4 L1260.01 1532.4 L1260.01 1522.27 L1265.89 1522.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1316.15 1548.76 L1316.15 1551.62 L1289.22 1551.62 Q1289.61 1557.67 1292.85 1560.85 Q1296.13 1564 1301.96 1564 Q1305.33 1564 1308.48 1563.17 Q1311.66 1562.35 1314.78 1560.69 L1314.78 1566.23 Q1311.63 1567.57 1308.32 1568.27 Q1305.01 1568.97 1301.61 1568.97 Q1293.08 1568.97 1288.08 1564 Q1283.11 1559.04 1283.11 1550.57 Q1283.11 1541.82 1287.82 1536.69 Q1292.57 1531.54 1300.59 1531.54 Q1307.78 1531.54 1311.95 1536.18 Q1316.15 1540.8 1316.15 1548.76 M1310.3 1547.04 Q1310.23 1542.23 1307.59 1539.37 Q1304.98 1536.5 1300.65 1536.5 Q1295.75 1536.5 1292.79 1539.27 Q1289.86 1542.04 1289.42 1547.07 L1310.3 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1331.43 1562.7 L1331.43 1581.6 L1325.54 1581.6 L1325.54 1532.4 L1331.43 1532.4 L1331.43 1537.81 Q1333.28 1534.62 1336.08 1533.1 Q1338.91 1531.54 1342.82 1531.54 Q1349.32 1531.54 1353.36 1536.69 Q1357.43 1541.85 1357.43 1550.25 Q1357.43 1558.65 1353.36 1563.81 Q1349.32 1568.97 1342.82 1568.97 Q1338.91 1568.97 1336.08 1567.44 Q1333.28 1565.88 1331.43 1562.7 M1351.35 1550.25 Q1351.35 1543.79 1348.68 1540.13 Q1346.04 1536.44 1341.39 1536.44 Q1336.74 1536.44 1334.07 1540.13 Q1331.43 1543.79 1331.43 1550.25 Q1331.43 1556.71 1334.07 1560.4 Q1336.74 1564.07 1341.39 1564.07 Q1346.04 1564.07 1348.68 1560.4 Q1351.35 1556.71 1351.35 1550.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1389.87 1533.45 L1389.87 1538.98 Q1387.38 1537.71 1384.71 1537.07 Q1382.04 1536.44 1379.17 1536.44 Q1374.81 1536.44 1372.62 1537.77 Q1370.45 1539.11 1370.45 1541.79 Q1370.45 1543.82 1372.01 1545 Q1373.57 1546.15 1378.28 1547.2 L1380.29 1547.64 Q1386.52 1548.98 1389.13 1551.43 Q1391.78 1553.85 1391.78 1558.21 Q1391.78 1563.17 1387.83 1566.07 Q1383.91 1568.97 1377.04 1568.97 Q1374.18 1568.97 1371.06 1568.39 Q1367.97 1567.85 1364.53 1566.74 L1364.53 1560.69 Q1367.78 1562.38 1370.93 1563.24 Q1374.08 1564.07 1377.17 1564.07 Q1381.3 1564.07 1383.53 1562.66 Q1385.76 1561.23 1385.76 1558.65 Q1385.76 1556.27 1384.14 1554.99 Q1382.55 1553.72 1377.1 1552.54 L1375.07 1552.07 Q1369.62 1550.92 1367.2 1548.56 Q1364.79 1546.18 1364.79 1542.04 Q1364.79 1537.01 1368.35 1534.27 Q1371.92 1531.54 1378.47 1531.54 Q1381.72 1531.54 1384.58 1532.01 Q1387.45 1532.49 1389.87 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1396.89 2352.76,1396.89 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,1080.6 2352.76,1080.6 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,764.311 2352.76,764.311 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,448.021 2352.76,448.021 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"262.551,131.731 2352.76,131.731 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1423.18 262.551,47.2441 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1396.89 281.449,1396.89 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,1080.6 281.449,1080.6 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,764.311 281.449,764.311 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,448.021 281.449,448.021 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"262.551,131.731 281.449,131.731 \"/>\n<path clip-path=\"url(#clip070)\" d=\"M214.607 1382.69 Q210.996 1382.69 209.167 1386.25 Q207.362 1389.79 207.362 1396.92 Q207.362 1404.03 209.167 1407.6 Q210.996 1411.14 214.607 1411.14 Q218.241 1411.14 220.047 1407.6 Q221.875 1404.03 221.875 1396.92 Q221.875 1389.79 220.047 1386.25 Q218.241 1382.69 214.607 1382.69 M214.607 1378.98 Q220.417 1378.98 223.473 1383.59 Q226.551 1388.17 226.551 1396.92 Q226.551 1405.65 223.473 1410.26 Q220.417 1414.84 214.607 1414.84 Q208.797 1414.84 205.718 1410.26 Q202.662 1405.65 202.662 1396.92 Q202.662 1388.17 205.718 1383.59 Q208.797 1378.98 214.607 1378.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M148.311 1093.95 L164.63 1093.95 L164.63 1097.88 L142.686 1097.88 L142.686 1093.95 Q145.348 1091.19 149.931 1086.56 Q154.538 1081.91 155.718 1080.57 Q157.964 1078.04 158.843 1076.31 Q159.746 1074.55 159.746 1072.86 Q159.746 1070.1 157.802 1068.37 Q155.88 1066.63 152.778 1066.63 Q150.579 1066.63 148.126 1067.39 Q145.695 1068.16 142.917 1069.71 L142.917 1064.99 Q145.741 1063.85 148.195 1063.27 Q150.649 1062.7 152.686 1062.7 Q158.056 1062.7 161.251 1065.38 Q164.445 1068.07 164.445 1072.56 Q164.445 1074.69 163.635 1076.61 Q162.848 1078.51 160.741 1081.1 Q160.163 1081.77 157.061 1084.99 Q153.959 1088.18 148.311 1093.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M174.491 1063.32 L192.848 1063.32 L192.848 1067.26 L178.774 1067.26 L178.774 1075.73 Q179.792 1075.38 180.811 1075.22 Q181.829 1075.03 182.848 1075.03 Q188.635 1075.03 192.014 1078.2 Q195.394 1081.38 195.394 1086.79 Q195.394 1092.37 191.922 1095.47 Q188.45 1098.55 182.13 1098.55 Q179.954 1098.55 177.686 1098.18 Q175.44 1097.81 173.033 1097.07 L173.033 1092.37 Q175.116 1093.51 177.339 1094.06 Q179.561 1094.62 182.038 1094.62 Q186.042 1094.62 188.38 1092.51 Q190.718 1090.4 190.718 1086.79 Q190.718 1083.18 188.38 1081.07 Q186.042 1078.97 182.038 1078.97 Q180.163 1078.97 178.288 1079.38 Q176.436 1079.8 174.491 1080.68 L174.491 1063.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M214.607 1066.4 Q210.996 1066.4 209.167 1069.96 Q207.362 1073.51 207.362 1080.63 Q207.362 1087.74 209.167 1091.31 Q210.996 1094.85 214.607 1094.85 Q218.241 1094.85 220.047 1091.31 Q221.875 1087.74 221.875 1080.63 Q221.875 1073.51 220.047 1069.96 Q218.241 1066.4 214.607 1066.4 M214.607 1062.7 Q220.417 1062.7 223.473 1067.3 Q226.551 1071.89 226.551 1080.63 Q226.551 1089.36 223.473 1093.97 Q220.417 1098.55 214.607 1098.55 Q208.797 1098.55 205.718 1093.97 Q202.662 1089.36 202.662 1080.63 Q202.662 1071.89 205.718 1067.3 Q208.797 1062.7 214.607 1062.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M144.329 747.031 L162.686 747.031 L162.686 750.966 L148.612 750.966 L148.612 759.438 Q149.63 759.091 150.649 758.929 Q151.667 758.744 152.686 758.744 Q158.473 758.744 161.852 761.915 Q165.232 765.086 165.232 770.503 Q165.232 776.081 161.76 779.183 Q158.288 782.262 151.968 782.262 Q149.792 782.262 147.524 781.892 Q145.279 781.521 142.871 780.78 L142.871 776.081 Q144.954 777.216 147.177 777.771 Q149.399 778.327 151.876 778.327 Q155.88 778.327 158.218 776.22 Q160.556 774.114 160.556 770.503 Q160.556 766.892 158.218 764.785 Q155.88 762.679 151.876 762.679 Q150.001 762.679 148.126 763.095 Q146.274 763.512 144.329 764.392 L144.329 747.031 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M184.445 750.109 Q180.834 750.109 179.005 753.674 Q177.2 757.216 177.2 764.345 Q177.2 771.452 179.005 775.017 Q180.834 778.558 184.445 778.558 Q188.079 778.558 189.885 775.017 Q191.713 771.452 191.713 764.345 Q191.713 757.216 189.885 753.674 Q188.079 750.109 184.445 750.109 M184.445 746.406 Q190.255 746.406 193.311 751.012 Q196.389 755.595 196.389 764.345 Q196.389 773.072 193.311 777.679 Q190.255 782.262 184.445 782.262 Q178.635 782.262 175.556 777.679 Q172.501 773.072 172.501 764.345 Q172.501 755.595 175.556 751.012 Q178.635 746.406 184.445 746.406 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M214.607 750.109 Q210.996 750.109 209.167 753.674 Q207.362 757.216 207.362 764.345 Q207.362 771.452 209.167 775.017 Q210.996 778.558 214.607 778.558 Q218.241 778.558 220.047 775.017 Q221.875 771.452 221.875 764.345 Q221.875 757.216 220.047 753.674 Q218.241 750.109 214.607 750.109 M214.607 746.406 Q220.417 746.406 223.473 751.012 Q226.551 755.595 226.551 764.345 Q226.551 773.072 223.473 777.679 Q220.417 782.262 214.607 782.262 Q208.797 782.262 205.718 777.679 Q202.662 773.072 202.662 764.345 Q202.662 755.595 205.718 751.012 Q208.797 746.406 214.607 746.406 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M143.103 430.741 L165.325 430.741 L165.325 432.732 L152.778 465.301 L147.894 465.301 L159.7 434.676 L143.103 434.676 L143.103 430.741 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M174.491 430.741 L192.848 430.741 L192.848 434.676 L178.774 434.676 L178.774 443.148 Q179.792 442.801 180.811 442.639 Q181.829 442.454 182.848 442.454 Q188.635 442.454 192.014 445.625 Q195.394 448.796 195.394 454.213 Q195.394 459.792 191.922 462.894 Q188.45 465.972 182.13 465.972 Q179.954 465.972 177.686 465.602 Q175.44 465.232 173.033 464.491 L173.033 459.792 Q175.116 460.926 177.339 461.482 Q179.561 462.037 182.038 462.037 Q186.042 462.037 188.38 459.931 Q190.718 457.824 190.718 454.213 Q190.718 450.602 188.38 448.496 Q186.042 446.389 182.038 446.389 Q180.163 446.389 178.288 446.806 Q176.436 447.222 174.491 448.102 L174.491 430.741 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M214.607 433.82 Q210.996 433.82 209.167 437.384 Q207.362 440.926 207.362 448.056 Q207.362 455.162 209.167 458.727 Q210.996 462.269 214.607 462.269 Q218.241 462.269 220.047 458.727 Q221.875 455.162 221.875 448.056 Q221.875 440.926 220.047 437.384 Q218.241 433.82 214.607 433.82 M214.607 430.116 Q220.417 430.116 223.473 434.722 Q226.551 439.306 226.551 448.056 Q226.551 456.783 223.473 461.389 Q220.417 465.972 214.607 465.972 Q208.797 465.972 205.718 461.389 Q202.662 456.783 202.662 448.056 Q202.662 439.306 205.718 434.722 Q208.797 430.116 214.607 430.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M114.931 145.076 L122.57 145.076 L122.57 118.711 L114.26 120.377 L114.26 116.118 L122.524 114.451 L127.2 114.451 L127.2 145.076 L134.839 145.076 L134.839 149.011 L114.931 149.011 L114.931 145.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M154.283 117.53 Q150.672 117.53 148.843 121.095 Q147.038 124.637 147.038 131.766 Q147.038 138.873 148.843 142.437 Q150.672 145.979 154.283 145.979 Q157.917 145.979 159.723 142.437 Q161.552 138.873 161.552 131.766 Q161.552 124.637 159.723 121.095 Q157.917 117.53 154.283 117.53 M154.283 113.826 Q160.093 113.826 163.149 118.433 Q166.227 123.016 166.227 131.766 Q166.227 140.493 163.149 145.099 Q160.093 149.683 154.283 149.683 Q148.473 149.683 145.394 145.099 Q142.339 140.493 142.339 131.766 Q142.339 123.016 145.394 118.433 Q148.473 113.826 154.283 113.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M184.445 117.53 Q180.834 117.53 179.005 121.095 Q177.2 124.637 177.2 131.766 Q177.2 138.873 179.005 142.437 Q180.834 145.979 184.445 145.979 Q188.079 145.979 189.885 142.437 Q191.713 138.873 191.713 131.766 Q191.713 124.637 189.885 121.095 Q188.079 117.53 184.445 117.53 M184.445 113.826 Q190.255 113.826 193.311 118.433 Q196.389 123.016 196.389 131.766 Q196.389 140.493 193.311 145.099 Q190.255 149.683 184.445 149.683 Q178.635 149.683 175.556 145.099 Q172.501 140.493 172.501 131.766 Q172.501 123.016 175.556 118.433 Q178.635 113.826 184.445 113.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M214.607 117.53 Q210.996 117.53 209.167 121.095 Q207.362 124.637 207.362 131.766 Q207.362 138.873 209.167 142.437 Q210.996 145.979 214.607 145.979 Q218.241 145.979 220.047 142.437 Q221.875 138.873 221.875 131.766 Q221.875 124.637 220.047 121.095 Q218.241 117.53 214.607 117.53 M214.607 113.826 Q220.417 113.826 223.473 118.433 Q226.551 123.016 226.551 131.766 Q226.551 140.493 223.473 145.099 Q220.417 149.683 214.607 149.683 Q208.797 149.683 205.718 145.099 Q202.662 140.493 202.662 131.766 Q202.662 123.016 205.718 118.433 Q208.797 113.826 214.607 113.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M42.4881 784.801 L64.0042 784.801 L64.0042 790.657 L42.679 790.657 Q37.6183 790.657 35.1038 792.631 Q32.5894 794.604 32.5894 798.551 Q32.5894 803.293 35.6131 806.03 Q38.6368 808.768 43.8567 808.768 L64.0042 808.768 L64.0042 814.656 L28.3562 814.656 L28.3562 808.768 L33.8944 808.768 Q30.6797 806.667 29.0883 803.834 Q27.4968 800.97 27.4968 797.246 Q27.4968 791.103 31.3163 787.952 Q35.1038 784.801 42.4881 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M32.4621 759.306 Q32.4621 764.017 36.1542 766.754 Q39.8145 769.491 46.212 769.491 Q52.6095 769.491 56.3017 766.786 Q59.9619 764.049 59.9619 759.306 Q59.9619 754.627 56.2698 751.89 Q52.5777 749.153 46.212 749.153 Q39.8781 749.153 36.186 751.89 Q32.4621 754.627 32.4621 759.306 M27.4968 759.306 Q27.4968 751.667 32.4621 747.307 Q37.4273 742.946 46.212 742.946 Q54.9649 742.946 59.9619 747.307 Q64.9272 751.667 64.9272 759.306 Q64.9272 766.977 59.9619 771.337 Q54.9649 775.666 46.212 775.666 Q37.4273 775.666 32.4621 771.337 Q27.4968 766.977 27.4968 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M33.8307 712.582 Q33.2578 713.569 33.0032 714.746 Q32.7167 715.892 32.7167 717.293 Q32.7167 722.258 35.9632 724.931 Q39.1779 727.573 45.2253 727.573 L64.0042 727.573 L64.0042 733.461 L28.3562 733.461 L28.3562 727.573 L33.8944 727.573 Q30.6479 725.727 29.0883 722.767 Q27.4968 719.807 27.4968 715.574 Q27.4968 714.969 27.5923 714.237 Q27.656 713.505 27.8151 712.614 L33.8307 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M35.1993 679.83 Q31.2526 677.634 29.3747 674.579 Q27.4968 671.523 27.4968 667.385 Q27.4968 661.815 31.4117 658.792 Q35.2948 655.768 42.4881 655.768 L64.0042 655.768 L64.0042 661.656 L42.679 661.656 Q37.5546 661.656 35.072 663.47 Q32.5894 665.285 32.5894 669.009 Q32.5894 673.56 35.6131 676.202 Q38.6368 678.844 43.8567 678.844 L64.0042 678.844 L64.0042 684.732 L42.679 684.732 Q37.5228 684.732 35.072 686.546 Q32.5894 688.36 32.5894 692.148 Q32.5894 696.636 35.6449 699.278 Q38.6686 701.919 43.8567 701.919 L64.0042 701.919 L64.0042 707.808 L28.3562 707.808 L28.3562 701.919 L33.8944 701.919 Q30.616 699.914 29.0564 697.113 Q27.4968 694.312 27.4968 690.461 Q27.4968 686.578 29.4702 683.873 Q31.4436 681.135 35.1993 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip072)\" style=\"stroke:#ff0000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1827.65,131.731 4442.96,131.731 \"/>\n<polyline clip-path=\"url(#clip072)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"321.708,1384.24 322.365,1384.24 323.023,1384.24 323.681,1381.71 324.338,1381.71 324.996,1381.71 325.653,1380.44 326.311,1379.18 326.968,1379.18 327.626,1377.91 328.283,1377.91 328.941,1377.91 329.598,1377.91 330.256,1375.38 330.913,1374.12 331.571,1372.85 332.228,1371.59 332.886,1370.32 333.543,1369.06 334.201,1365.26 334.858,1364 335.516,1362.73 336.173,1361.47 336.831,1358.94 337.488,1356.4 338.146,1352.61 338.803,1350.08 339.461,1347.55 340.118,1345.02 340.776,1341.22 341.433,1336.16 342.091,1331.1 342.748,1328.57 343.406,1322.25 344.064,1317.18 344.721,1313.39 345.379,1308.33 346.036,1299.47 346.694,1290.62 347.351,1284.29 348.009,1277.96 348.666,1265.31 349.324,1257.72 349.981,1250.13 350.639,1237.48 351.296,1226.09 351.954,1215.97 352.611,1208.38 353.269,1199.53 353.926,1188.14 354.584,1176.75 355.241,1161.57 355.899,1147.65 356.556,1133.74 357.214,1113.49 357.871,1102.11 358.529,1091.99 359.186,1073.01 359.844,1057.83 360.501,1041.38 361.159,1029.99 361.816,1014.81 362.474,997.1 363.131,986.979 363.789,978.122 364.447,968.001 365.104,960.41 365.762,952.819 366.419,938.902 367.077,924.986 367.734,911.069 368.392,894.622 369.049,879.44 369.707,866.788 370.364,855.402 371.022,844.016 371.679,832.629 372.337,823.773 372.994,807.326 373.652,794.674 374.309,785.818 374.967,761.78 375.624,749.129 376.282,741.538 376.939,737.742 377.597,720.03 378.254,709.909 378.912,698.522 379.569,683.34 380.227,668.159 380.884,649.181 381.542,637.795 382.199,632.734 382.857,618.817 383.514,608.696 384.172,594.779 384.83,582.128 385.487,570.741 386.145,555.559 386.802,547.969 387.46,535.317 388.117,528.991 388.775,523.931 389.432,515.074 390.09,510.014 390.747,503.688 391.405,497.362 392.062,483.445 392.72,473.324 393.377,475.854 394.035,472.059 394.692,458.142 395.35,454.347 396.007,441.695 396.665,429.044 397.322,416.392 397.98,411.331 398.637,402.475 399.295,398.68 399.952,380.968 400.61,374.642 401.267,369.581 401.925,354.399 402.582,353.134 403.24,353.134 403.897,345.543 404.555,336.687 405.213,336.687 405.87,326.566 406.528,322.77 407.185,322.77 407.843,321.505 408.5,316.445 409.158,313.914 409.815,308.854 410.473,313.914 411.13,312.649 411.788,305.058 412.445,302.528 413.103,293.672 413.76,283.55 414.418,279.755 415.075,273.429 415.733,267.103 416.39,267.103 417.048,273.429 417.705,268.368 418.363,272.164 419.02,269.634 419.678,269.634 420.335,260.778 420.993,253.187 421.65,254.452 422.308,248.126 422.965,246.861 423.623,248.126 424.28,245.596 424.938,229.149 425.596,222.823 426.253,229.149 426.911,232.944 427.568,229.149 428.226,224.088 428.883,217.762 429.541,217.762 430.198,222.823 430.856,212.702 431.513,208.906 432.171,205.111 432.828,198.785 433.486,200.05 434.143,197.52 434.801,192.459 435.458,181.073 436.116,182.338 436.773,182.338 437.431,183.603 438.088,187.398 438.746,188.664 439.403,181.073 440.061,170.951 440.718,170.951 441.376,170.951 442.033,164.625 442.691,179.807 443.348,174.747 444.006,174.747 444.663,170.951 445.321,164.625 445.979,165.891 446.636,168.421 447.294,173.482 447.951,172.216 448.609,172.216 449.266,168.421 449.924,168.421 450.581,174.747 451.239,167.156 451.896,173.482 452.554,167.156 453.211,167.156 453.869,155.769 454.526,153.239 455.184,144.383 455.841,144.383 456.499,158.3 457.156,170.951 457.814,168.421 458.471,160.83 459.129,154.504 459.786,155.769 460.444,146.913 461.101,144.383 461.759,143.118 462.416,146.913 463.074,144.383 463.731,140.587 464.389,131.731 465.046,125.406 465.704,126.671 466.362,117.815 467.019,124.14 467.677,120.345 468.334,119.08 468.992,134.262 469.649,141.853 470.307,144.383 470.964,136.792 471.622,140.587 472.279,126.671 472.937,115.284 473.594,126.671 474.252,124.14 474.909,120.345 475.567,119.08 476.224,121.61 476.882,124.14 477.539,119.08 478.197,135.527 478.854,136.792 479.512,131.731 480.169,135.527 480.827,132.997 481.484,153.239 482.142,151.974 482.799,159.565 483.457,155.769 484.114,157.035 484.772,157.035 485.43,165.891 486.087,172.216 486.745,168.421 487.402,151.974 488.06,169.686 488.717,167.156 489.375,169.686 490.032,160.83 490.69,159.565 491.347,162.095 492.005,155.769 492.662,157.035 493.32,160.83 493.977,157.035 494.635,154.504 495.292,157.035 495.95,159.565 496.607,159.565 497.265,168.421 497.922,169.686 498.58,162.095 499.237,154.504 499.895,151.974 500.552,154.504 501.21,145.648 501.867,150.709 502.525,155.769 503.182,143.118 503.84,151.974 504.497,149.444 505.155,157.035 505.813,163.36 506.47,154.504 507.128,154.504 507.785,158.3 508.443,155.769 509.1,160.83 509.758,155.769 510.415,145.648 511.073,146.913 511.73,155.769 512.388,150.709 513.045,146.913 513.703,160.83 514.36,150.709 515.018,148.178 515.675,153.239 516.333,148.178 516.99,150.709 517.648,151.974 518.305,145.648 518.963,148.178 519.62,141.853 520.278,132.997 520.935,127.936 521.593,126.671 522.25,119.08 522.908,111.489 523.565,110.224 524.223,112.754 524.88,121.61 525.538,124.14 526.196,130.466 526.853,141.853 527.511,159.565 528.168,167.156 528.826,167.156 529.483,162.095 530.141,159.565 530.798,150.709 531.456,164.625 532.113,170.951 532.771,162.095 533.428,160.83 534.086,164.625 534.743,163.36 535.401,169.686 536.058,164.625 536.716,157.035 537.373,159.565 538.031,167.156 538.688,160.83 539.346,157.035 540.003,155.769 540.661,148.178 541.318,150.709 541.976,141.853 542.633,136.792 543.291,149.444 543.948,140.587 544.606,138.057 545.263,135.527 545.921,135.527 546.579,122.875 547.236,126.671 547.894,132.997 548.551,124.14 549.209,129.201 549.866,122.875 550.524,129.201 551.181,139.322 551.839,138.057 552.496,140.587 553.154,149.444 553.811,151.974 554.469,151.974 555.126,151.974 555.784,146.913 556.441,140.587 557.099,136.792 557.756,135.527 558.414,148.178 559.071,149.444 559.729,146.913 560.386,136.792 561.044,146.913 561.701,148.178 562.359,150.709 563.016,146.913 563.674,145.648 564.331,140.587 564.989,129.201 565.646,130.466 566.304,130.466 566.962,130.466 567.619,138.057 568.277,144.383 568.934,140.587 569.592,135.527 570.249,129.201 570.907,134.262 571.564,146.913 572.222,148.178 572.879,146.913 573.537,150.709 574.194,151.974 574.852,151.974 575.509,155.769 576.167,163.36 576.824,160.83 577.482,163.36 578.139,160.83 578.797,172.216 579.454,170.951 580.112,160.83 580.769,164.625 581.427,170.951 582.084,170.951 582.742,170.951 583.399,164.625 584.057,160.83 584.714,163.36 585.372,154.504 586.029,154.504 586.687,154.504 587.345,146.913 588.002,146.913 588.66,135.527 589.317,140.587 589.975,136.792 590.632,138.057 591.29,143.118 591.947,132.997 592.605,129.201 593.262,119.08 593.92,121.61 594.577,129.201 595.235,136.792 595.892,122.875 596.55,121.61 597.207,120.345 597.865,124.14 598.522,120.345 599.18,112.754 599.837,115.284 600.495,120.345 601.152,114.019 601.81,108.959 602.467,106.428 603.125,110.224 603.782,106.428 604.44,115.284 605.097,115.284 605.755,124.14 606.412,141.853 607.07,150.709 607.728,148.178 608.385,150.709 609.043,151.974 609.7,149.444 610.358,155.769 611.015,149.444 611.673,144.383 612.33,151.974 612.988,163.36 613.645,159.565 614.303,150.709 614.96,145.648 615.618,150.709 616.275,134.262 616.933,136.792 617.59,120.345 618.248,116.549 618.905,112.754 619.563,110.224 620.22,111.489 620.878,112.754 621.535,106.428 622.193,107.693 622.85,106.428 623.508,103.898 624.165,112.754 624.823,129.201 625.48,125.406 626.138,119.08 626.795,116.549 627.453,127.936 628.111,132.997 628.768,127.936 629.426,127.936 630.083,126.671 630.741,129.201 631.398,131.731 632.056,127.936 632.713,131.731 633.371,136.792 634.028,136.792 634.686,136.792 635.343,130.466 636.001,119.08 636.658,120.345 637.316,120.345 637.973,114.019 638.631,114.019 639.288,111.489 639.946,106.428 640.603,102.633 641.261,108.959 641.918,121.61 642.576,114.019 643.233,110.224 643.891,110.224 644.548,112.754 645.206,115.284 645.863,105.163 646.521,95.0418 647.178,97.5721 647.836,110.224 648.494,126.671 649.151,136.792 649.809,136.792 650.466,135.527 651.124,130.466 651.781,136.792 652.439,145.648 653.096,145.648 653.754,138.057 654.411,134.262 655.069,126.671 655.726,131.731 656.384,129.201 657.041,129.201 657.699,126.671 658.356,130.466 659.014,124.14 659.671,121.61 660.329,122.875 660.986,130.466 661.644,134.262 662.301,125.406 662.959,131.731 663.616,135.527 664.274,139.322 664.931,150.709 665.589,159.565 666.246,159.565 666.904,151.974 667.562,141.853 668.219,144.383 668.877,145.648 669.534,149.444 670.192,141.853 670.849,148.178 671.507,136.792 672.164,129.201 672.822,131.731 673.479,130.466 674.137,129.201 674.794,114.019 675.452,116.549 676.109,107.693 676.767,102.633 677.424,91.2463 678.082,93.7766 678.739,103.898 679.397,114.019 680.054,112.754 680.712,97.5721 681.369,115.284 682.027,116.549 682.684,120.345 683.342,112.754 683.999,119.08 684.657,121.61 685.314,127.936 685.972,131.731 686.629,140.587 687.287,135.527 687.945,134.262 688.602,132.997 689.26,138.057 689.917,145.648 690.575,141.853 691.232,150.709 691.89,154.504 692.547,154.504 693.205,138.057 693.862,140.587 694.52,141.853 695.177,145.648 695.835,140.587 696.492,139.322 697.15,136.792 697.807,143.118 698.465,144.383 699.122,139.322 699.78,146.913 700.437,148.178 701.095,146.913 701.752,150.709 702.41,143.118 703.067,141.853 703.725,134.262 704.382,130.466 705.04,136.792 705.697,130.466 706.355,145.648 707.012,135.527 707.67,127.936 708.328,129.201 708.985,127.936 709.643,129.201 710.3,138.057 710.958,144.383 711.615,141.853 712.273,136.792 712.93,145.648 713.588,136.792 714.245,114.019 714.903,112.754 715.56,124.14 716.218,126.671 716.875,124.14 717.533,124.14 718.19,130.466 718.848,124.14 719.505,124.14 720.163,122.875 720.82,126.671 721.478,135.527 722.135,146.913 722.793,135.527 723.45,131.731 724.108,138.057 724.765,135.527 725.423,149.444 726.08,144.383 726.738,141.853 727.395,146.913 728.053,150.709 728.711,149.444 729.368,143.118 730.026,145.648 730.683,138.057 731.341,130.466 731.998,122.875 732.656,120.345 733.313,124.14 733.971,134.262 734.628,136.792 735.286,139.322 735.943,129.201 736.601,143.118 737.258,144.383 737.916,149.444 738.573,143.118 739.231,153.239 739.888,151.974 740.546,146.913 741.203,136.792 741.861,143.118 742.518,139.322 743.176,146.913 743.833,145.648 744.491,136.792 745.148,141.853 745.806,129.201 746.463,130.466 747.121,135.527 747.778,129.201 748.436,134.262 749.094,129.201 749.751,126.671 750.409,125.406 751.066,114.019 751.724,111.489 752.381,117.815 753.039,121.61 753.696,124.14 754.354,134.262 755.011,134.262 755.669,138.057 756.326,148.178 756.984,149.444 757.641,155.769 758.299,155.769 758.956,151.974 759.614,145.648 760.271,148.178 760.929,139.322 761.586,148.178 762.244,151.974 762.901,140.587 763.559,129.201 764.216,132.997 764.874,124.14 765.531,129.201 766.189,135.527 766.846,138.057 767.504,151.974 768.161,146.913 768.819,141.853 769.477,130.466 770.134,124.14 770.792,129.201 771.449,130.466 772.107,130.466 772.764,126.671 773.422,132.997 774.079,135.527 774.737,131.731 775.394,138.057 776.052,141.853 776.709,134.262 777.367,127.936 778.024,127.936 778.682,124.14 779.339,122.875 779.997,117.815 780.654,111.489 781.312,117.815 781.969,122.875 782.627,119.08 783.284,117.815 783.942,117.815 784.599,114.019 785.257,114.019 785.914,121.61 786.572,117.815 787.229,122.875 787.887,116.549 788.544,111.489 789.202,124.14 789.86,125.406 790.517,119.08 791.175,119.08 791.832,119.08 792.49,114.019 793.147,120.345 793.805,124.14 794.462,132.997 795.12,131.731 795.777,129.201 796.435,127.936 797.092,122.875 797.75,129.201 798.407,119.08 799.065,125.406 799.722,141.853 800.38,132.997 801.037,131.731 801.695,138.057 802.352,141.853 803.01,149.444 803.667,144.383 804.325,136.792 804.982,141.853 805.64,139.322 806.297,146.913 806.955,135.527 807.612,135.527 808.27,132.997 808.927,129.201 809.585,127.936 810.243,130.466 810.9,129.201 811.558,127.936 812.215,138.057 812.873,130.466 813.53,129.201 814.188,134.262 814.845,131.731 815.503,130.466 816.16,129.201 816.818,122.875 817.475,126.671 818.133,130.466 818.79,125.406 819.448,124.14 820.105,119.08 820.763,117.815 821.42,124.14 822.078,127.936 822.735,132.997 823.393,124.14 824.05,130.466 824.708,122.875 825.365,127.936 826.023,120.345 826.68,120.345 827.338,114.019 827.995,111.489 828.653,120.345 829.31,120.345 829.968,119.08 830.626,134.262 831.283,135.527 831.941,132.997 832.598,145.648 833.256,151.974 833.913,160.83 834.571,158.3 835.228,153.239 835.886,148.178 836.543,148.178 837.201,143.118 837.858,143.118 838.516,132.997 839.173,120.345 839.831,131.731 840.488,126.671 841.146,129.201 841.803,125.406 842.461,122.875 843.118,125.406 843.776,124.14 844.433,122.875 845.091,131.731 845.748,135.527 846.406,127.936 847.063,135.527 847.721,134.262 848.378,134.262 849.036,140.587 849.694,139.322 850.351,144.383 851.009,149.444 851.666,149.444 852.324,154.504 852.981,153.239 853.639,149.444 854.296,149.444 854.954,155.769 855.611,144.383 856.269,134.262 856.926,122.875 857.584,119.08 858.241,129.201 858.899,127.936 859.556,126.671 860.214,116.549 860.871,122.875 861.529,130.466 862.186,120.345 862.844,127.936 863.501,131.731 864.159,121.61 864.816,119.08 865.474,124.14 866.131,135.527 866.789,134.262 867.446,130.466 868.104,124.14 868.761,120.345 869.419,120.345 870.077,112.754 870.734,110.224 871.392,112.754 872.049,124.14 872.707,125.406 873.364,129.201 874.022,125.406 874.679,130.466 875.337,134.262 875.994,126.671 876.652,127.936 877.309,126.671 877.967,129.201 878.624,131.731 879.282,129.201 879.939,131.731 880.597,134.262 881.254,139.322 881.912,140.587 882.569,136.792 883.227,131.731 883.884,126.671 884.542,131.731 885.199,129.201 885.857,135.527 886.514,132.997 887.172,134.262 887.829,131.731 888.487,130.466 889.144,134.262 889.802,135.527 890.46,139.322 891.117,132.997 891.775,138.057 892.432,139.322 893.09,132.997 893.747,138.057 894.405,139.322 895.062,136.792 895.72,140.587 896.377,141.853 897.035,138.057 897.692,146.913 898.35,151.974 899.007,153.239 899.665,162.095 900.322,154.504 900.98,157.035 901.637,162.095 902.295,162.095 902.952,145.648 903.61,154.504 904.267,164.625 904.925,164.625 905.582,155.769 906.24,140.587 906.897,146.913 907.555,159.565 908.212,163.36 908.87,158.3 909.527,154.504 910.185,159.565 910.843,157.035 911.5,148.178 912.158,148.178 912.815,141.853 913.473,151.974 914.13,143.118 914.788,148.178 915.445,146.913 916.103,149.444 916.76,144.383 917.418,146.913 918.075,145.648 918.733,143.118 919.39,145.648 920.048,153.239 920.705,162.095 921.363,164.625 922.02,153.239 922.678,145.648 923.335,139.322 923.993,125.406 924.65,124.14 925.308,121.61 925.965,121.61 926.623,126.671 927.28,130.466 927.938,139.322 928.595,127.936 929.253,141.853 929.91,135.527 930.568,134.262 931.226,130.466 931.883,135.527 932.541,134.262 933.198,136.792 933.856,132.997 934.513,134.262 935.171,131.731 935.828,135.527 936.486,138.057 937.143,130.466 937.801,135.527 938.458,132.997 939.116,144.383 939.773,132.997 940.431,144.383 941.088,136.792 941.746,138.057 942.403,148.178 943.061,150.709 943.718,141.853 944.376,134.262 945.033,121.61 945.691,130.466 946.348,121.61 947.006,135.527 947.663,143.118 948.321,126.671 948.978,127.936 949.636,136.792 950.293,150.709 950.951,143.118 951.609,146.913 952.266,150.709 952.924,159.565 953.581,150.709 954.239,158.3 954.896,160.83 955.554,157.035 956.211,153.239 956.869,148.178 957.526,150.709 958.184,148.178 958.841,145.648 959.499,149.444 960.156,146.913 960.814,143.118 961.471,140.587 962.129,134.262 962.786,143.118 963.444,139.322 964.101,140.587 964.759,140.587 965.416,146.913 966.074,150.709 966.731,157.035 967.389,153.239 968.046,134.262 968.704,132.997 969.361,138.057 970.019,138.057 970.676,136.792 971.334,134.262 971.992,121.61 972.649,129.201 973.307,116.549 973.964,117.815 974.622,121.61 975.279,115.284 975.937,119.08 976.594,111.489 977.252,120.345 977.909,117.815 978.567,130.466 979.224,144.383 979.882,149.444 980.539,146.913 981.197,139.322 981.854,134.262 982.512,122.875 983.169,116.549 983.827,107.693 984.484,111.489 985.142,110.224 985.799,121.61 986.457,120.345 987.114,119.08 987.772,117.815 988.429,117.815 989.087,114.019 989.744,125.406 990.402,119.08 991.059,103.898 991.717,107.693 992.375,114.019 993.032,98.8373 993.69,102.633 994.347,106.428 995.005,108.959 995.662,98.8373 996.32,101.368 996.977,97.5721 997.635,105.163 998.292,98.8373 998.95,92.5115 999.607,101.368 1000.26,97.5721 1000.92,105.163 1001.58,111.489 1002.24,126.671 1002.89,125.406 1003.55,132.997 1004.21,126.671 1004.87,122.875 1005.52,122.875 1006.18,124.14 1006.84,124.14 1007.5,121.61 1008.15,115.284 1008.81,111.489 1009.47,125.406 1010.13,124.14 1010.78,119.08 1011.44,125.406 1012.1,122.875 1012.76,126.671 1013.42,130.466 1014.07,134.262 1014.73,138.057 1015.39,143.118 1016.05,145.648 1016.7,145.648 1017.36,144.383 1018.02,141.853 1018.68,134.262 1019.33,135.527 1019.99,132.997 1020.65,126.671 1021.31,131.731 1021.96,125.406 1022.62,115.284 1023.28,116.549 1023.94,120.345 1024.59,124.14 1025.25,120.345 1025.91,132.997 1026.57,140.587 1027.22,141.853 1027.88,141.853 1028.54,144.383 1029.2,143.118 1029.85,134.262 1030.51,125.406 1031.17,117.815 1031.83,112.754 1032.48,119.08 1033.14,119.08 1033.8,115.284 1034.46,126.671 1035.11,126.671 1035.77,134.262 1036.43,135.527 1037.09,132.997 1037.74,136.792 1038.4,126.671 1039.06,125.406 1039.72,131.731 1040.37,127.936 1041.03,131.731 1041.69,141.853 1042.35,140.587 1043,140.587 1043.66,140.587 1044.32,143.118 1044.98,149.444 1045.63,144.383 1046.29,139.322 1046.95,149.444 1047.61,143.118 1048.26,140.587 1048.92,144.383 1049.58,145.648 1050.24,145.648 1050.89,135.527 1051.55,144.383 1052.21,143.118 1052.87,158.3 1053.52,154.504 1054.18,153.239 1054.84,153.239 1055.5,150.709 1056.15,154.504 1056.81,153.239 1057.47,155.769 1058.13,148.178 1058.78,140.587 1059.44,139.322 1060.1,144.383 1060.76,148.178 1061.41,141.853 1062.07,138.057 1062.73,139.322 1063.39,126.671 1064.04,114.019 1064.7,116.549 1065.36,112.754 1066.02,105.163 1066.67,107.693 1067.33,117.815 1067.99,126.671 1068.65,127.936 1069.3,121.61 1069.96,131.731 1070.62,119.08 1071.28,112.754 1071.93,121.61 1072.59,134.262 1073.25,138.057 1073.91,130.466 1074.56,138.057 1075.22,138.057 1075.88,131.731 1076.54,136.792 1077.19,141.853 1077.85,144.383 1078.51,143.118 1079.17,139.322 1079.82,140.587 1080.48,151.974 1081.14,150.709 1081.8,153.239 1082.45,157.035 1083.11,150.709 1083.77,155.769 1084.43,157.035 1085.08,153.239 1085.74,144.383 1086.4,145.648 1087.06,144.383 1087.71,135.527 1088.37,136.792 1089.03,143.118 1089.69,143.118 1090.34,141.853 1091,135.527 1091.66,134.262 1092.32,139.322 1092.97,134.262 1093.63,135.527 1094.29,131.731 1094.95,125.406 1095.6,125.406 1096.26,132.997 1096.92,129.201 1097.58,125.406 1098.23,115.284 1098.89,117.815 1099.55,122.875 1100.21,130.466 1100.86,138.057 1101.52,141.853 1102.18,146.913 1102.84,149.444 1103.49,141.853 1104.15,134.262 1104.81,132.997 1105.47,122.875 1106.12,126.671 1106.78,126.671 1107.44,126.671 1108.1,131.731 1108.75,134.262 1109.41,136.792 1110.07,129.201 1110.73,132.997 1111.38,122.875 1112.04,126.671 1112.7,125.406 1113.36,121.61 1114.02,122.875 1114.67,121.61 1115.33,121.61 1115.99,112.754 1116.65,103.898 1117.3,111.489 1117.96,115.284 1118.62,111.489 1119.28,120.345 1119.93,138.057 1120.59,135.527 1121.25,139.322 1121.91,143.118 1122.56,136.792 1123.22,129.201 1123.88,120.345 1124.54,115.284 1125.19,112.754 1125.85,108.959 1126.51,115.284 1127.17,125.406 1127.82,129.201 1128.48,130.466 1129.14,129.201 1129.8,119.08 1130.45,117.815 1131.11,121.61 1131.77,130.466 1132.43,132.997 1133.08,132.997 1133.74,129.201 1134.4,115.284 1135.06,116.549 1135.71,105.163 1136.37,106.428 1137.03,110.224 1137.69,103.898 1138.34,103.898 1139,88.716 1139.66,98.8373 1140.32,102.633 1140.97,96.3069 1141.63,105.163 1142.29,116.549 1142.95,106.428 1143.6,107.693 1144.26,115.284 1144.92,117.815 1145.58,116.549 1146.23,114.019 1146.89,127.936 1147.55,140.587 1148.21,132.997 1148.86,138.057 1149.52,141.853 1150.18,143.118 1150.84,127.936 1151.49,124.14 1152.15,132.997 1152.81,141.853 1153.47,146.913 1154.12,134.262 1154.78,116.549 1155.44,119.08 1156.1,125.406 1156.75,120.345 1157.41,125.406 1158.07,119.08 1158.73,112.754 1159.38,127.936 1160.04,130.466 1160.7,140.587 1161.36,140.587 1162.01,143.118 1162.67,139.322 1163.33,141.853 1163.99,134.262 1164.64,132.997 1165.3,132.997 1165.96,132.997 1166.62,121.61 1167.27,126.671 1167.93,135.527 1168.59,139.322 1169.25,154.504 1169.9,157.035 1170.56,150.709 1171.22,148.178 1171.88,151.974 1172.53,153.239 1173.19,145.648 1173.85,138.057 1174.51,145.648 1175.16,145.648 1175.82,146.913 1176.48,141.853 1177.14,132.997 1177.79,131.731 1178.45,126.671 1179.11,131.731 1179.77,134.262 1180.42,130.466 1181.08,127.936 1181.74,126.671 1182.4,124.14 1183.05,125.406 1183.71,124.14 1184.37,135.527 1185.03,135.527 1185.68,134.262 1186.34,139.322 1187,140.587 1187.66,130.466 1188.31,132.997 1188.97,126.671 1189.63,143.118 1190.29,140.587 1190.94,130.466 1191.6,129.201 1192.26,124.14 1192.92,130.466 1193.57,132.997 1194.23,129.201 1194.89,135.527 1195.55,138.057 1196.2,139.322 1196.86,131.731 1197.52,136.792 1198.18,129.201 1198.83,130.466 1199.49,114.019 1200.15,121.61 1200.81,124.14 1201.46,125.406 1202.12,124.14 1202.78,124.14 1203.44,124.14 1204.09,130.466 1204.75,125.406 1205.41,127.936 1206.07,125.406 1206.72,129.201 1207.38,134.262 1208.04,140.587 1208.7,130.466 1209.35,131.731 1210.01,136.792 1210.67,141.853 1211.33,136.792 1211.98,138.057 1212.64,139.322 1213.3,129.201 1213.96,124.14 1214.62,114.019 1215.27,122.875 1215.93,130.466 1216.59,149.444 1217.25,149.444 1217.9,139.322 1218.56,140.587 1219.22,134.262 1219.88,126.671 1220.53,132.997 1221.19,121.61 1221.85,120.345 1222.51,107.693 1223.16,105.163 1223.82,105.163 1224.48,106.428 1225.14,116.549 1225.79,122.875 1226.45,121.61 1227.11,124.14 1227.77,134.262 1228.42,130.466 1229.08,139.322 1229.74,134.262 1230.4,138.057 1231.05,135.527 1231.71,129.201 1232.37,131.731 1233.03,131.731 1233.68,127.936 1234.34,132.997 1235,145.648 1235.66,154.504 1236.31,146.913 1236.97,143.118 1237.63,153.239 1238.29,157.035 1238.94,150.709 1239.6,162.095 1240.26,158.3 1240.92,160.83 1241.57,159.565 1242.23,164.625 1242.89,151.974 1243.55,153.239 1244.2,151.974 1244.86,148.178 1245.52,151.974 1246.18,157.035 1246.83,162.095 1247.49,153.239 1248.15,141.853 1248.81,146.913 1249.46,139.322 1250.12,144.383 1250.78,148.178 1251.44,143.118 1252.09,143.118 1252.75,138.057 1253.41,141.853 1254.07,136.792 1254.72,121.61 1255.38,117.815 1256.04,111.489 1256.7,116.549 1257.35,124.14 1258.01,124.14 1258.67,132.997 1259.33,138.057 1259.98,140.587 1260.64,138.057 1261.3,136.792 1261.96,136.792 1262.61,126.671 1263.27,126.671 1263.93,126.671 1264.59,115.284 1265.24,111.489 1265.9,112.754 1266.56,100.102 1267.22,93.7766 1267.87,95.0418 1268.53,98.8373 1269.19,86.1857 1269.85,101.368 1270.5,108.959 1271.16,107.693 1271.82,110.224 1272.48,119.08 1273.13,126.671 1273.79,121.61 1274.45,125.406 1275.11,120.345 1275.76,117.815 1276.42,114.019 1277.08,121.61 1277.74,130.466 1278.39,126.671 1279.05,121.61 1279.71,124.14 1280.37,131.731 1281.02,134.262 1281.68,140.587 1282.34,136.792 1283,144.383 1283.65,150.709 1284.31,141.853 1284.97,132.997 1285.63,131.731 1286.28,131.731 1286.94,141.853 1287.6,143.118 1288.26,136.792 1288.91,132.997 1289.57,129.201 1290.23,121.61 1290.89,110.224 1291.54,111.489 1292.2,121.61 1292.86,143.118 1293.52,144.383 1294.17,140.587 1294.83,151.974 1295.49,159.565 1296.15,151.974 1296.8,151.974 1297.46,134.262 1298.12,132.997 1298.78,141.853 1299.43,146.913 1300.09,145.648 1300.75,135.527 1301.41,144.383 1302.06,143.118 1302.72,146.913 1303.38,138.057 1304.04,138.057 1304.69,121.61 1305.35,103.898 1306.01,114.019 1306.67,121.61 1307.32,129.201 1307.98,127.936 1308.64,125.406 1309.3,131.731 1309.95,135.527 1310.61,127.936 1311.27,125.406 1311.93,115.284 1312.58,106.428 1313.24,114.019 1313.9,110.224 1314.56,111.489 1315.22,112.754 1315.87,107.693 1316.53,108.959 1317.19,101.368 1317.85,111.489 1318.5,115.284 1319.16,126.671 1319.82,131.731 1320.48,140.587 1321.13,141.853 1321.79,135.527 1322.45,144.383 1323.11,149.444 1323.76,155.769 1324.42,154.504 1325.08,163.36 1325.74,163.36 1326.39,154.504 1327.05,148.178 1327.71,154.504 1328.37,141.853 1329.02,138.057 1329.68,120.345 1330.34,122.875 1331,124.14 1331.65,129.201 1332.31,129.201 1332.97,124.14 1333.63,116.549 1334.28,124.14 1334.94,129.201 1335.6,127.936 1336.26,124.14 1336.91,120.345 1337.57,122.875 1338.23,132.997 1338.89,126.671 1339.54,134.262 1340.2,126.671 1340.86,135.527 1341.52,144.383 1342.17,141.853 1342.83,141.853 1343.49,143.118 1344.15,143.118 1344.8,145.648 1345.46,143.118 1346.12,144.383 1346.78,145.648 1347.43,148.178 1348.09,140.587 1348.75,132.997 1349.41,136.792 1350.06,135.527 1350.72,134.262 1351.38,129.201 1352.04,124.14 1352.69,119.08 1353.35,111.489 1354.01,121.61 1354.67,131.731 1355.32,130.466 1355.98,132.997 1356.64,136.792 1357.3,139.322 1357.95,130.466 1358.61,129.201 1359.27,138.057 1359.93,131.731 1360.58,127.936 1361.24,129.201 1361.9,140.587 1362.56,140.587 1363.21,140.587 1363.87,130.466 1364.53,129.201 1365.19,122.875 1365.84,125.406 1366.5,125.406 1367.16,130.466 1367.82,136.792 1368.47,132.997 1369.13,141.853 1369.79,120.345 1370.45,116.549 1371.1,122.875 1371.76,134.262 1372.42,136.792 1373.08,136.792 1373.73,140.587 1374.39,143.118 1375.05,146.913 1375.71,143.118 1376.36,136.792 1377.02,129.201 1377.68,126.671 1378.34,124.14 1378.99,125.406 1379.65,120.345 1380.31,120.345 1380.97,127.936 1381.62,122.875 1382.28,120.345 1382.94,125.406 1383.6,127.936 1384.25,132.997 1384.91,140.587 1385.57,139.322 1386.23,136.792 1386.88,135.527 1387.54,127.936 1388.2,130.466 1388.86,138.057 1389.51,129.201 1390.17,138.057 1390.83,135.527 1391.49,127.936 1392.14,131.731 1392.8,135.527 1393.46,136.792 1394.12,143.118 1394.77,143.118 1395.43,144.383 1396.09,145.648 1396.75,138.057 1397.4,132.997 1398.06,124.14 1398.72,130.466 1399.38,124.14 1400.03,117.815 1400.69,120.345 1401.35,129.201 1402.01,120.345 1402.66,111.489 1403.32,111.489 1403.98,110.224 1404.64,114.019 1405.29,105.163 1405.95,107.693 1406.61,116.549 1407.27,122.875 1407.92,117.815 1408.58,110.224 1409.24,110.224 1409.9,107.693 1410.55,95.0418 1411.21,108.959 1411.87,101.368 1412.53,98.8373 1413.18,105.163 1413.84,115.284 1414.5,125.406 1415.16,127.936 1415.81,119.08 1416.47,124.14 1417.13,129.201 1417.79,130.466 1418.45,139.322 1419.1,138.057 1419.76,132.997 1420.42,134.262 1421.08,134.262 1421.73,129.201 1422.39,124.14 1423.05,122.875 1423.71,119.08 1424.36,112.754 1425.02,122.875 1425.68,121.61 1426.34,117.815 1426.99,119.08 1427.65,115.284 1428.31,125.406 1428.97,129.201 1429.62,131.731 1430.28,130.466 1430.94,124.14 1431.6,125.406 1432.25,129.201 1432.91,122.875 1433.57,126.671 1434.23,127.936 1434.88,112.754 1435.54,111.489 1436.2,125.406 1436.86,119.08 1437.51,124.14 1438.17,127.936 1438.83,130.466 1439.49,127.936 1440.14,127.936 1440.8,127.936 1441.46,134.262 1442.12,125.406 1442.77,124.14 1443.43,121.61 1444.09,106.428 1444.75,102.633 1445.4,98.8373 1446.06,102.633 1446.72,112.754 1447.38,116.549 1448.03,115.284 1448.69,114.019 1449.35,115.284 1450.01,119.08 1450.66,131.731 1451.32,129.201 1451.98,132.997 1452.64,127.936 1453.29,125.406 1453.95,117.815 1454.61,127.936 1455.27,134.262 1455.92,130.466 1456.58,127.936 1457.24,127.936 1457.9,122.875 1458.55,116.549 1459.21,124.14 1459.87,121.61 1460.53,124.14 1461.18,121.61 1461.84,120.345 1462.5,138.057 1463.16,135.527 1463.81,135.527 1464.47,130.466 1465.13,131.731 1465.79,125.406 1466.44,130.466 1467.1,144.383 1467.76,138.057 1468.42,132.997 1469.07,132.997 1469.73,143.118 1470.39,146.913 1471.05,143.118 1471.7,144.383 1472.36,141.853 1473.02,143.118 1473.68,150.709 1474.33,162.095 1474.99,164.625 1475.65,163.36 1476.31,167.156 1476.96,168.421 1477.62,172.216 1478.28,167.156 1478.94,169.686 1479.59,176.012 1480.25,172.216 1480.91,174.747 1481.57,168.421 1482.22,164.625 1482.88,162.095 1483.54,165.891 1484.2,167.156 1484.85,157.035 1485.51,162.095 1486.17,163.36 1486.83,172.216 1487.48,170.951 1488.14,169.686 1488.8,160.83 1489.46,154.504 1490.11,150.709 1490.77,146.913 1491.43,144.383 1492.09,136.792 1492.74,139.322 1493.4,144.383 1494.06,143.118 1494.72,139.322 1495.37,135.527 1496.03,129.201 1496.69,127.936 1497.35,121.61 1498,130.466 1498.66,134.262 1499.32,130.466 1499.98,132.997 1500.63,132.997 1501.29,127.936 1501.95,126.671 1502.61,124.14 1503.26,124.14 1503.92,127.936 1504.58,126.671 1505.24,135.527 1505.89,125.406 1506.55,135.527 1507.21,132.997 1507.87,138.057 1508.52,130.466 1509.18,130.466 1509.84,115.284 1510.5,114.019 1511.15,116.549 1511.81,121.61 1512.47,121.61 1513.13,127.936 1513.78,125.406 1514.44,122.875 1515.1,125.406 1515.76,131.731 1516.41,138.057 1517.07,130.466 1517.73,127.936 1518.39,125.406 1519.05,131.731 1519.7,130.466 1520.36,135.527 1521.02,132.997 1521.68,138.057 1522.33,140.587 1522.99,136.792 1523.65,135.527 1524.31,129.201 1524.96,130.466 1525.62,132.997 1526.28,135.527 1526.94,138.057 1527.59,135.527 1528.25,140.587 1528.91,143.118 1529.57,132.997 1530.22,134.262 1530.88,140.587 1531.54,130.466 1532.2,135.527 1532.85,132.997 1533.51,136.792 1534.17,131.731 1534.83,134.262 1535.48,138.057 1536.14,132.997 1536.8,135.527 1537.46,141.853 1538.11,148.178 1538.77,144.383 1539.43,146.913 1540.09,159.565 1540.74,155.769 1541.4,155.769 1542.06,158.3 1542.72,150.709 1543.37,154.504 1544.03,154.504 1544.69,154.504 1545.35,157.035 1546,157.035 1546.66,159.565 1547.32,155.769 1547.98,155.769 1548.63,151.974 1549.29,145.648 1549.95,153.239 1550.61,157.035 1551.26,154.504 1551.92,151.974 1552.58,158.3 1553.24,154.504 1553.89,146.913 1554.55,153.239 1555.21,149.444 1555.87,151.974 1556.52,144.383 1557.18,144.383 1557.84,138.057 1558.5,134.262 1559.15,141.853 1559.81,132.997 1560.47,124.14 1561.13,111.489 1561.78,110.224 1562.44,110.224 1563.1,114.019 1563.76,125.406 1564.41,127.936 1565.07,130.466 1565.73,134.262 1566.39,127.936 1567.04,119.08 1567.7,121.61 1568.36,139.322 1569.02,141.853 1569.67,148.178 1570.33,141.853 1570.99,138.057 1571.65,138.057 1572.3,139.322 1572.96,143.118 1573.62,143.118 1574.28,145.648 1574.93,144.383 1575.59,145.648 1576.25,145.648 1576.91,149.444 1577.56,138.057 1578.22,131.731 1578.88,138.057 1579.54,144.383 1580.19,145.648 1580.85,151.974 1581.51,154.504 1582.17,144.383 1582.82,139.322 1583.48,134.262 1584.14,138.057 1584.8,143.118 1585.45,143.118 1586.11,135.527 1586.77,146.913 1587.43,148.178 1588.08,153.239 1588.74,143.118 1589.4,134.262 1590.06,127.936 1590.71,119.08 1591.37,125.406 1592.03,132.997 1592.69,127.936 1593.34,117.815 1594,116.549 1594.66,114.019 1595.32,114.019 1595.97,116.549 1596.63,116.549 1597.29,111.489 1597.95,114.019 1598.6,103.898 1599.26,112.754 1599.92,119.08 1600.58,126.671 1601.23,126.671 1601.89,122.875 1602.55,124.14 1603.21,120.345 1603.86,124.14 1604.52,124.14 1605.18,125.406 1605.84,124.14 1606.49,110.224 1607.15,112.754 1607.81,117.815 1608.47,115.284 1609.12,121.61 1609.78,121.61 1610.44,122.875 1611.1,131.731 1611.75,135.527 1612.41,124.14 1613.07,119.08 1613.73,124.14 1614.38,126.671 1615.04,126.671 1615.7,130.466 1616.36,121.61 1617.01,129.201 1617.67,124.14 1618.33,121.61 1618.99,121.61 1619.65,119.08 1620.3,110.224 1620.96,119.08 1621.62,121.61 1622.28,122.875 1622.93,129.201 1623.59,134.262 1624.25,126.671 1624.91,127.936 1625.56,132.997 1626.22,114.019 1626.88,110.224 1627.54,110.224 1628.19,103.898 1628.85,103.898 1629.51,111.489 1630.17,103.898 1630.82,107.693 1631.48,106.428 1632.14,112.754 1632.8,130.466 1633.45,126.671 1634.11,122.875 1634.77,124.14 1635.43,130.466 1636.08,139.322 1636.74,141.853 1637.4,140.587 1638.06,132.997 1638.71,122.875 1639.37,125.406 1640.03,115.284 1640.69,124.14 1641.34,110.224 1642,107.693 1642.66,115.284 1643.32,124.14 1643.97,121.61 1644.63,120.345 1645.29,117.815 1645.95,112.754 1646.6,119.08 1647.26,119.08 1647.92,126.671 1648.58,121.61 1649.23,111.489 1649.89,114.019 1650.55,103.898 1651.21,120.345 1651.86,116.549 1652.52,100.102 1653.18,108.959 1653.84,102.633 1654.49,114.019 1655.15,119.08 1655.81,126.671 1656.47,126.671 1657.12,127.936 1657.78,131.731 1658.44,135.527 1659.1,131.731 1659.75,122.875 1660.41,127.936 1661.07,131.731 1661.73,125.406 1662.38,125.406 1663.04,122.875 1663.7,139.322 1664.36,138.057 1665.01,138.057 1665.67,134.262 1666.33,140.587 1666.99,145.648 1667.64,155.769 1668.3,165.891 1668.96,163.36 1669.62,157.035 1670.27,163.36 1670.93,163.36 1671.59,164.625 1672.25,162.095 1672.9,159.565 1673.56,155.769 1674.22,149.444 1674.88,157.035 1675.53,155.769 1676.19,159.565 1676.85,158.3 1677.51,162.095 1678.16,164.625 1678.82,160.83 1679.48,154.504 1680.14,157.035 1680.79,153.239 1681.45,146.913 1682.11,151.974 1682.77,154.504 1683.42,148.178 1684.08,136.792 1684.74,129.201 1685.4,132.997 1686.05,132.997 1686.71,130.466 1687.37,127.936 1688.03,130.466 1688.68,129.201 1689.34,134.262 1690,143.118 1690.66,136.792 1691.31,148.178 1691.97,151.974 1692.63,148.178 1693.29,138.057 1693.94,140.587 1694.6,144.383 1695.26,135.527 1695.92,125.406 1696.57,130.466 1697.23,129.201 1697.89,131.731 1698.55,124.14 1699.2,126.671 1699.86,122.875 1700.52,127.936 1701.18,115.284 1701.83,111.489 1702.49,121.61 1703.15,115.284 1703.81,121.61 1704.46,126.671 1705.12,125.406 1705.78,127.936 1706.44,139.322 1707.09,126.671 1707.75,130.466 1708.41,126.671 1709.07,130.466 1709.72,134.262 1710.38,134.262 1711.04,129.201 1711.7,130.466 1712.35,135.527 1713.01,139.322 1713.67,136.792 1714.33,130.466 1714.98,125.406 1715.64,131.731 1716.3,136.792 1716.96,140.587 1717.61,129.201 1718.27,143.118 1718.93,141.853 1719.59,132.997 1720.25,138.057 1720.9,144.383 1721.56,143.118 1722.22,138.057 1722.88,134.262 1723.53,140.587 1724.19,129.201 1724.85,131.731 1725.51,131.731 1726.16,130.466 1726.82,127.936 1727.48,131.731 1728.14,124.14 1728.79,116.549 1729.45,115.284 1730.11,114.019 1730.77,122.875 1731.42,122.875 1732.08,127.936 1732.74,121.61 1733.4,122.875 1734.05,119.08 1734.71,114.019 1735.37,122.875 1736.03,125.406 1736.68,122.875 1737.34,126.671 1738,112.754 1738.66,111.489 1739.31,103.898 1739.97,106.428 1740.63,102.633 1741.29,101.368 1741.94,103.898 1742.6,106.428 1743.26,117.815 1743.92,126.671 1744.57,136.792 1745.23,132.997 1745.89,141.853 1746.55,146.913 1747.2,145.648 1747.86,151.974 1748.52,149.444 1749.18,141.853 1749.83,149.444 1750.49,141.853 1751.15,136.792 1751.81,138.057 1752.46,138.057 1753.12,141.853 1753.78,134.262 1754.44,132.997 1755.09,129.201 1755.75,126.671 1756.41,131.731 1757.07,129.201 1757.72,127.936 1758.38,111.489 1759.04,110.224 1759.7,120.345 1760.35,114.019 1761.01,110.224 1761.67,107.693 1762.33,111.489 1762.98,120.345 1763.64,121.61 1764.3,115.284 1764.96,116.549 1765.61,106.428 1766.27,107.693 1766.93,102.633 1767.59,102.633 1768.24,97.5721 1768.9,96.3069 1769.56,91.2463 1770.22,97.5721 1770.87,106.428 1771.53,122.875 1772.19,121.61 1772.85,119.08 1773.5,120.345 1774.16,130.466 1774.82,136.792 1775.48,135.527 1776.13,129.201 1776.79,131.731 1777.45,126.671 1778.11,122.875 1778.76,116.549 1779.42,125.406 1780.08,121.61 1780.74,112.754 1781.39,116.549 1782.05,125.406 1782.71,129.201 1783.37,134.262 1784.02,132.997 1784.68,145.648 1785.34,151.974 1786,162.095 1786.65,158.3 1787.31,149.444 1787.97,151.974 1788.63,153.239 1789.28,145.648 1789.94,143.118 1790.6,144.383 1791.26,146.913 1791.91,151.974 1792.57,149.444 1793.23,153.239 1793.89,148.178 1794.54,140.587 1795.2,136.792 1795.86,141.853 1796.52,157.035 1797.17,162.095 1797.83,158.3 1798.49,168.421 1799.15,173.482 1799.8,170.951 1800.46,169.686 1801.12,167.156 1801.78,160.83 1802.43,158.3 1803.09,165.891 1803.75,159.565 1804.41,157.035 1805.06,158.3 1805.72,140.587 1806.38,138.057 1807.04,141.853 1807.69,145.648 1808.35,136.792 1809.01,112.754 1809.67,116.549 1810.32,124.14 1810.98,132.997 1811.64,146.913 1812.3,144.383 1812.95,134.262 1813.61,126.671 1814.27,125.406 1814.93,135.527 1815.58,149.444 1816.24,149.444 1816.9,144.383 1817.56,135.527 1818.21,124.14 1818.87,114.019 1819.53,122.875 1820.19,110.224 1820.84,115.284 1821.5,112.754 1822.16,110.224 1822.82,102.633 1823.48,106.428 1824.13,105.163 1824.79,100.102 1825.45,114.019 1826.11,112.754 1826.76,110.224 1827.42,110.224 1828.08,117.815 1828.74,108.959 1829.39,117.815 1830.05,108.959 1830.71,108.959 1831.37,108.959 1832.02,114.019 1832.68,119.08 1833.34,111.489 1834,125.406 1834.65,129.201 1835.31,120.345 1835.97,119.08 1836.63,127.936 1837.28,135.527 1837.94,125.406 1838.6,130.466 1839.26,129.201 1839.91,131.731 1840.57,127.936 1841.23,121.61 1841.89,114.019 1842.54,117.815 1843.2,124.14 1843.86,117.815 1844.52,112.754 1845.17,122.875 1845.83,131.731 1846.49,120.345 1847.15,120.345 1847.8,122.875 1848.46,126.671 1849.12,139.322 1849.78,134.262 1850.43,140.587 1851.09,139.322 1851.75,138.057 1852.41,141.853 1853.06,139.322 1853.72,146.913 1854.38,135.527 1855.04,145.648 1855.69,148.178 1856.35,149.444 1857.01,148.178 1857.67,143.118 1858.32,140.587 1858.98,138.057 1859.64,138.057 1860.3,143.118 1860.95,139.322 1861.61,149.444 1862.27,140.587 1862.93,131.731 1863.58,141.853 1864.24,141.853 1864.9,149.444 1865.56,149.444 1866.21,146.913 1866.87,143.118 1867.53,139.322 1868.19,150.709 1868.84,154.504 1869.5,148.178 1870.16,146.913 1870.82,138.057 1871.47,131.731 1872.13,135.527 1872.79,122.875 1873.45,125.406 1874.1,125.406 1874.76,131.731 1875.42,124.14 1876.08,134.262 1876.73,122.875 1877.39,110.224 1878.05,120.345 1878.71,121.61 1879.36,125.406 1880.02,127.936 1880.68,124.14 1881.34,130.466 1881.99,131.731 1882.65,130.466 1883.31,151.974 1883.97,138.057 1884.62,126.671 1885.28,127.936 1885.94,135.527 1886.6,145.648 1887.25,163.36 1887.91,174.747 1888.57,170.951 1889.23,162.095 1889.88,165.891 1890.54,163.36 1891.2,162.095 1891.86,150.709 1892.51,151.974 1893.17,146.913 1893.83,135.527 1894.49,127.936 1895.14,129.201 1895.8,134.262 1896.46,132.997 1897.12,140.587 1897.77,134.262 1898.43,127.936 1899.09,121.61 1899.75,124.14 1900.4,119.08 1901.06,121.61 1901.72,129.201 1902.38,125.406 1903.03,124.14 1903.69,122.875 1904.35,130.466 1905.01,120.345 1905.66,119.08 1906.32,122.875 1906.98,130.466 1907.64,129.201 1908.29,122.875 1908.95,119.08 1909.61,114.019 1910.27,127.936 1910.92,129.201 1911.58,139.322 1912.24,134.262 1912.9,125.406 1913.55,130.466 1914.21,125.406 1914.87,124.14 1915.53,126.671 1916.18,119.08 1916.84,127.936 1917.5,130.466 1918.16,126.671 1918.81,131.731 1919.47,126.671 1920.13,130.466 1920.79,131.731 1921.44,134.262 1922.1,126.671 1922.76,117.815 1923.42,129.201 1924.08,132.997 1924.73,143.118 1925.39,149.444 1926.05,157.035 1926.71,154.504 1927.36,150.709 1928.02,148.178 1928.68,146.913 1929.34,141.853 1929.99,139.322 1930.65,144.383 1931.31,139.322 1931.97,149.444 1932.62,140.587 1933.28,143.118 1933.94,149.444 1934.6,143.118 1935.25,131.731 1935.91,131.731 1936.57,130.466 1937.23,136.792 1937.88,145.648 1938.54,138.057 1939.2,130.466 1939.86,127.936 1940.51,127.936 1941.17,126.671 1941.83,138.057 1942.49,135.527 1943.14,149.444 1943.8,164.625 1944.46,165.891 1945.12,162.095 1945.77,162.095 1946.43,153.239 1947.09,144.383 1947.75,139.322 1948.4,130.466 1949.06,130.466 1949.72,130.466 1950.38,126.671 1951.03,126.671 1951.69,125.406 1952.35,129.201 1953.01,129.201 1953.66,136.792 1954.32,144.383 1954.98,146.913 1955.64,144.383 1956.29,135.527 1956.95,134.262 1957.61,127.936 1958.27,120.345 1958.92,121.61 1959.58,121.61 1960.24,117.815 1960.9,103.898 1961.55,97.5721 1962.21,91.2463 1962.87,92.5115 1963.53,91.2463 1964.18,102.633 1964.84,107.693 1965.5,107.693 1966.16,105.163 1966.81,112.754 1967.47,101.368 1968.13,101.368 1968.79,96.3069 1969.44,91.2463 1970.1,98.8373 1970.76,97.5721 1971.42,91.2463 1972.07,95.0418 1972.73,98.8373 1973.39,112.754 1974.05,106.428 1974.7,111.489 1975.36,117.815 1976.02,120.345 1976.68,127.936 1977.33,144.383 1977.99,138.057 1978.65,139.322 1979.31,134.262 1979.96,134.262 1980.62,132.997 1981.28,132.997 1981.94,131.731 1982.59,130.466 1983.25,121.61 1983.91,122.875 1984.57,110.224 1985.22,120.345 1985.88,126.671 1986.54,121.61 1987.2,131.731 1987.85,135.527 1988.51,140.587 1989.17,146.913 1989.83,143.118 1990.48,145.648 1991.14,141.853 1991.8,139.322 1992.46,136.792 1993.11,141.853 1993.77,149.444 1994.43,140.587 1995.09,153.239 1995.74,149.444 1996.4,151.974 1997.06,144.383 1997.72,141.853 1998.37,129.201 1999.03,129.201 1999.69,120.345 2000.35,114.019 2001,129.201 2001.66,126.671 2002.32,125.406 2002.98,122.875 2003.63,129.201 2004.29,127.936 2004.95,126.671 2005.61,124.14 2006.26,136.792 2006.92,134.262 2007.58,140.587 2008.24,132.997 2008.89,132.997 2009.55,130.466 2010.21,121.61 2010.87,122.875 2011.52,130.466 2012.18,122.875 2012.84,126.671 2013.5,130.466 2014.15,145.648 2014.81,134.262 2015.47,134.262 2016.13,132.997 2016.78,124.14 2017.44,130.466 2018.1,135.527 2018.76,132.997 2019.41,131.731 2020.07,134.262 2020.73,134.262 2021.39,122.875 2022.04,125.406 2022.7,122.875 2023.36,121.61 2024.02,120.345 2024.68,122.875 2025.33,119.08 2025.99,124.14 2026.65,130.466 2027.31,134.262 2027.96,130.466 2028.62,134.262 2029.28,138.057 2029.94,138.057 2030.59,129.201 2031.25,124.14 2031.91,116.549 2032.57,117.815 2033.22,125.406 2033.88,129.201 2034.54,122.875 2035.2,121.61 2035.85,121.61 2036.51,132.997 2037.17,135.527 2037.83,135.527 2038.48,134.262 2039.14,131.731 2039.8,132.997 2040.46,138.057 2041.11,135.527 2041.77,135.527 2042.43,136.792 2043.09,132.997 2043.74,131.731 2044.4,138.057 2045.06,136.792 2045.72,130.466 2046.37,127.936 2047.03,124.14 2047.69,127.936 2048.35,132.997 2049,134.262 2049.66,140.587 2050.32,143.118 2050.98,140.587 2051.63,132.997 2052.29,141.853 2052.95,148.178 2053.61,140.587 2054.26,138.057 2054.92,129.201 2055.58,127.936 2056.24,129.201 2056.89,125.406 2057.55,122.875 2058.21,131.731 2058.87,127.936 2059.52,134.262 2060.18,138.057 2060.84,151.974 2061.5,144.383 2062.15,150.709 2062.81,151.974 2063.47,149.444 2064.13,148.178 2064.78,141.853 2065.44,145.648 2066.1,146.913 2066.76,136.792 2067.41,136.792 2068.07,140.587 2068.73,148.178 2069.39,148.178 2070.04,165.891 2070.7,167.156 2071.36,170.951 2072.02,163.36 2072.67,158.3 2073.33,153.239 2073.99,159.565 2074.65,165.891 2075.3,165.891 2075.96,150.709 2076.62,153.239 2077.28,148.178 2077.93,148.178 2078.59,141.853 2079.25,145.648 2079.91,151.974 2080.56,165.891 2081.22,176.012 2081.88,169.686 2082.54,169.686 2083.19,162.095 2083.85,159.565 2084.51,170.951 2085.17,168.421 2085.82,167.156 2086.48,164.625 2087.14,164.625 2087.8,159.565 2088.45,154.504 2089.11,146.913 2089.77,139.322 2090.43,130.466 2091.08,136.792 2091.74,132.997 2092.4,139.322 2093.06,134.262 2093.71,126.671 2094.37,134.262 2095.03,144.383 2095.69,135.527 2096.34,129.201 2097,131.731 2097.66,124.14 2098.32,130.466 2098.97,120.345 2099.63,129.201 2100.29,132.997 2100.95,116.549 2101.6,122.875 2102.26,121.61 2102.92,112.754 2103.58,116.549 2104.23,112.754 2104.89,125.406 2105.55,117.815 2106.21,132.997 2106.86,129.201 2107.52,134.262 2108.18,139.322 2108.84,144.383 2109.49,145.648 2110.15,145.648 2110.81,143.118 2111.47,146.913 2112.12,141.853 2112.78,143.118 2113.44,144.383 2114.1,141.853 2114.75,143.118 2115.41,143.118 2116.07,141.853 2116.73,143.118 2117.38,143.118 2118.04,146.913 2118.7,141.853 2119.36,153.239 2120.01,149.444 2120.67,143.118 2121.33,140.587 2121.99,121.61 2122.64,116.549 2123.3,115.284 2123.96,119.08 2124.62,122.875 2125.28,121.61 2125.93,120.345 2126.59,129.201 2127.25,136.792 2127.91,138.057 2128.56,135.527 2129.22,131.731 2129.88,130.466 2130.54,112.754 2131.19,107.693 2131.85,115.284 2132.51,115.284 2133.17,106.428 2133.82,100.102 2134.48,89.9811 2135.14,97.5721 2135.8,95.0418 2136.45,98.8373 2137.11,103.898 2137.77,96.3069 2138.43,100.102 2139.08,111.489 2139.74,114.019 2140.4,117.815 2141.06,107.693 2141.71,111.489 2142.37,108.959 2143.03,116.549 2143.69,115.284 2144.34,117.815 2145,122.875 2145.66,120.345 2146.32,126.671 2146.97,122.875 2147.63,122.875 2148.29,120.345 2148.95,117.815 2149.6,125.406 2150.26,132.997 2150.92,127.936 2151.58,135.527 2152.23,140.587 2152.89,136.792 2153.55,131.731 2154.21,115.284 2154.86,119.08 2155.52,117.815 2156.18,119.08 2156.84,114.019 2157.49,108.959 2158.15,106.428 2158.81,117.815 2159.47,126.671 2160.12,132.997 2160.78,132.997 2161.44,136.792 2162.1,139.322 2162.75,141.853 2163.41,140.587 2164.07,146.913 2164.73,149.444 2165.38,149.444 2166.04,148.178 2166.7,143.118 2167.36,138.057 2168.01,130.466 2168.67,129.201 2169.33,126.671 2169.99,131.731 2170.64,139.322 2171.3,139.322 2171.96,140.587 2172.62,138.057 2173.27,130.466 2173.93,129.201 2174.59,130.466 2175.25,135.527 2175.9,131.731 2176.56,134.262 2177.22,129.201 2177.88,122.875 2178.53,129.201 2179.19,112.754 2179.85,116.549 2180.51,124.14 2181.16,122.875 2181.82,126.671 2182.48,131.731 2183.14,127.936 2183.79,130.466 2184.45,124.14 2185.11,115.284 2185.77,122.875 2186.42,119.08 2187.08,120.345 2187.74,125.406 2188.4,120.345 2189.05,122.875 2189.71,115.284 2190.37,117.815 2191.03,126.671 2191.68,120.345 2192.34,120.345 2193,121.61 2193.66,132.997 2194.31,134.262 2194.97,140.587 2195.63,145.648 2196.29,145.648 2196.94,143.118 2197.6,134.262 2198.26,138.057 2198.92,141.853 2199.57,140.587 2200.23,138.057 2200.89,132.997 2201.55,119.08 2202.2,119.08 2202.86,121.61 2203.52,117.815 2204.18,117.815 2204.83,106.428 2205.49,100.102 2206.15,92.5115 2206.81,96.3069 2207.46,101.368 2208.12,88.716 2208.78,103.898 2209.44,110.224 2210.09,130.466 2210.75,136.792 2211.41,124.14 2212.07,124.14 2212.72,124.14 2213.38,116.549 2214.04,119.08 2214.7,125.406 2215.35,124.14 2216.01,124.14 2216.67,120.345 2217.33,122.875 2217.98,131.731 2218.64,130.466 2219.3,129.201 2219.96,138.057 2220.61,132.997 2221.27,136.792 2221.93,135.527 2222.59,131.731 2223.24,124.14 2223.9,124.14 2224.56,135.527 2225.22,129.201 2225.87,134.262 2226.53,144.383 2227.19,138.057 2227.85,131.731 2228.51,131.731 2229.16,139.322 2229.82,122.875 2230.48,124.14 2231.14,121.61 2231.79,125.406 2232.45,124.14 2233.11,126.671 2233.77,127.936 2234.42,120.345 2235.08,122.875 2235.74,122.875 2236.4,122.875 2237.05,121.61 2237.71,121.61 2238.37,131.731 2239.03,129.201 2239.68,129.201 2240.34,120.345 2241,122.875 2241.66,134.262 2242.31,132.997 2242.97,139.322 2243.63,136.792 2244.29,132.997 2244.94,131.731 2245.6,139.322 2246.26,132.997 2246.92,132.997 2247.57,136.792 2248.23,135.527 2248.89,127.936 2249.55,135.527 2250.2,148.178 2250.86,151.974 2251.52,151.974 2252.18,151.974 2252.83,155.769 2253.49,163.36 2254.15,157.035 2254.81,145.648 2255.46,144.383 2256.12,135.527 2256.78,138.057 2257.44,130.466 2258.09,126.671 2258.75,122.875 2259.41,117.815 2260.07,126.671 2260.72,121.61 2261.38,132.997 2262.04,134.262 2262.7,125.406 2263.35,124.14 2264.01,124.14 2264.67,115.284 2265.33,119.08 2265.98,117.815 2266.64,110.224 2267.3,122.875 2267.96,122.875 2268.61,130.466 2269.27,126.671 2269.93,125.406 2270.59,129.201 2271.24,124.14 2271.9,129.201 2272.56,127.936 2273.22,121.61 2273.87,127.936 2274.53,125.406 2275.19,126.671 2275.85,119.08 2276.5,115.284 2277.16,119.08 2277.82,105.163 2278.48,89.9811 2279.13,105.163 2279.79,101.368 2280.45,95.0418 2281.11,101.368 2281.76,98.8373 2282.42,101.368 2283.08,107.693 2283.74,112.754 2284.39,114.019 2285.05,111.489 2285.71,114.019 2286.37,117.815 2287.02,116.549 2287.68,115.284 2288.34,125.406 2289,125.406 2289.65,121.61 2290.31,122.875 2290.97,124.14 2291.63,125.406 2292.28,125.406 2292.94,127.936 2293.6,140.587 \"/>\n<path clip-path=\"url(#clip070)\" d=\"M1753.39 1377.32 L2283.08 1377.32 L2283.08 1221.8 L1753.39 1221.8  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1753.39,1377.32 2283.08,1377.32 2283.08,1221.8 1753.39,1221.8 1753.39,1377.32 \"/>\n<polyline clip-path=\"url(#clip070)\" style=\"stroke:#ff0000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1776.62,1273.64 1915.96,1273.64 \"/>\n<path clip-path=\"url(#clip070)\" d=\"M1946.6 1257.63 L1946.6 1264.99 L1955.37 1264.99 L1955.37 1268.3 L1946.6 1268.3 L1946.6 1282.37 Q1946.6 1285.54 1947.45 1286.45 Q1948.33 1287.35 1950.99 1287.35 L1955.37 1287.35 L1955.37 1290.92 L1950.99 1290.92 Q1946.06 1290.92 1944.19 1289.09 Q1942.31 1287.23 1942.31 1282.37 L1942.31 1268.3 L1939.19 1268.3 L1939.19 1264.99 L1942.31 1264.99 L1942.31 1257.63 L1946.6 1257.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1972.75 1277.88 Q1967.59 1277.88 1965.6 1279.06 Q1963.61 1280.24 1963.61 1283.09 Q1963.61 1285.36 1965.09 1286.7 Q1966.6 1288.02 1969.17 1288.02 Q1972.71 1288.02 1974.84 1285.52 Q1976.99 1283 1976.99 1278.83 L1976.99 1277.88 L1972.75 1277.88 M1981.25 1276.12 L1981.25 1290.92 L1976.99 1290.92 L1976.99 1286.98 Q1975.53 1289.34 1973.35 1290.48 Q1971.18 1291.59 1968.03 1291.59 Q1964.05 1291.59 1961.69 1289.36 Q1959.35 1287.12 1959.35 1283.37 Q1959.35 1278.99 1962.27 1276.77 Q1965.21 1274.55 1971.02 1274.55 L1976.99 1274.55 L1976.99 1274.13 Q1976.99 1271.19 1975.04 1269.6 Q1973.12 1267.98 1969.63 1267.98 Q1967.41 1267.98 1965.3 1268.51 Q1963.19 1269.04 1961.25 1270.11 L1961.25 1266.17 Q1963.59 1265.27 1965.79 1264.83 Q1967.98 1264.36 1970.07 1264.36 Q1975.69 1264.36 1978.47 1267.28 Q1981.25 1270.2 1981.25 1276.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2005.04 1268.97 Q2004.33 1268.55 2003.47 1268.37 Q2002.64 1268.16 2001.62 1268.16 Q1998.01 1268.16 1996.06 1270.52 Q1994.14 1272.86 1994.14 1277.26 L1994.14 1290.92 L1989.86 1290.92 L1989.86 1264.99 L1994.14 1264.99 L1994.14 1269.02 Q1995.48 1266.66 1997.64 1265.52 Q1999.79 1264.36 2002.87 1264.36 Q2003.31 1264.36 2003.84 1264.43 Q2004.37 1264.48 2005.02 1264.6 L2005.04 1268.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2025.74 1277.65 Q2025.74 1273.02 2023.82 1270.48 Q2021.92 1267.93 2018.47 1267.93 Q2015.04 1267.93 2013.12 1270.48 Q2011.22 1273.02 2011.22 1277.65 Q2011.22 1282.26 2013.12 1284.8 Q2015.04 1287.35 2018.47 1287.35 Q2021.92 1287.35 2023.82 1284.8 Q2025.74 1282.26 2025.74 1277.65 M2030 1287.7 Q2030 1294.32 2027.06 1297.54 Q2024.12 1300.78 2018.05 1300.78 Q2015.81 1300.78 2013.82 1300.43 Q2011.83 1300.11 2009.95 1299.41 L2009.95 1295.27 Q2011.83 1296.29 2013.66 1296.77 Q2015.48 1297.26 2017.38 1297.26 Q2021.57 1297.26 2023.66 1295.06 Q2025.74 1292.88 2025.74 1288.46 L2025.74 1286.36 Q2024.42 1288.65 2022.36 1289.78 Q2020.3 1290.92 2017.43 1290.92 Q2012.66 1290.92 2009.74 1287.28 Q2006.83 1283.65 2006.83 1277.65 Q2006.83 1271.63 2009.74 1268 Q2012.66 1264.36 2017.43 1264.36 Q2020.3 1264.36 2022.36 1265.5 Q2024.42 1266.63 2025.74 1268.92 L2025.74 1264.99 L2030 1264.99 L2030 1287.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2060.95 1276.89 L2060.95 1278.97 L2041.36 1278.97 Q2041.64 1283.37 2044 1285.68 Q2046.39 1287.98 2050.62 1287.98 Q2053.08 1287.98 2055.37 1287.37 Q2057.68 1286.77 2059.95 1285.57 L2059.95 1289.6 Q2057.66 1290.57 2055.25 1291.08 Q2052.85 1291.59 2050.37 1291.59 Q2044.16 1291.59 2040.53 1287.98 Q2036.92 1284.36 2036.92 1278.21 Q2036.92 1271.84 2040.35 1268.11 Q2043.79 1264.36 2049.63 1264.36 Q2054.86 1264.36 2057.89 1267.74 Q2060.95 1271.1 2060.95 1276.89 M2056.69 1275.64 Q2056.64 1272.14 2054.72 1270.06 Q2052.82 1267.98 2049.67 1267.98 Q2046.11 1267.98 2043.96 1269.99 Q2041.83 1272 2041.5 1275.66 L2056.69 1275.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2072.15 1257.63 L2072.15 1264.99 L2080.92 1264.99 L2080.92 1268.3 L2072.15 1268.3 L2072.15 1282.37 Q2072.15 1285.54 2073.01 1286.45 Q2073.89 1287.35 2076.55 1287.35 L2080.92 1287.35 L2080.92 1290.92 L2076.55 1290.92 Q2071.62 1290.92 2069.74 1289.09 Q2067.87 1287.23 2067.87 1282.37 L2067.87 1268.3 L2064.74 1268.3 L2064.74 1264.99 L2067.87 1264.99 L2067.87 1257.63 L2072.15 1257.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2084.05 1264.99 L2088.31 1264.99 L2093.63 1285.22 L2098.93 1264.99 L2103.96 1264.99 L2109.28 1285.22 L2114.58 1264.99 L2118.84 1264.99 L2112.06 1290.92 L2107.03 1290.92 L2101.46 1269.67 L2095.85 1290.92 L2090.83 1290.92 L2084.05 1264.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2137.08 1277.88 Q2131.92 1277.88 2129.93 1279.06 Q2127.94 1280.24 2127.94 1283.09 Q2127.94 1285.36 2129.42 1286.7 Q2130.92 1288.02 2133.49 1288.02 Q2137.03 1288.02 2139.16 1285.52 Q2141.32 1283 2141.32 1278.83 L2141.32 1277.88 L2137.08 1277.88 M2145.58 1276.12 L2145.58 1290.92 L2141.32 1290.92 L2141.32 1286.98 Q2139.86 1289.34 2137.68 1290.48 Q2135.51 1291.59 2132.36 1291.59 Q2128.38 1291.59 2126.02 1289.36 Q2123.68 1287.12 2123.68 1283.37 Q2123.68 1278.99 2126.59 1276.77 Q2129.53 1274.55 2135.34 1274.55 L2141.32 1274.55 L2141.32 1274.13 Q2141.32 1271.19 2139.37 1269.6 Q2137.45 1267.98 2133.96 1267.98 Q2131.73 1267.98 2129.63 1268.51 Q2127.52 1269.04 2125.58 1270.11 L2125.58 1266.17 Q2127.91 1265.27 2130.11 1264.83 Q2132.31 1264.36 2134.4 1264.36 Q2140.02 1264.36 2142.8 1267.28 Q2145.58 1270.2 2145.58 1276.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2154.35 1254.9 L2158.61 1254.9 L2158.61 1290.92 L2154.35 1290.92 L2154.35 1254.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2167.36 1254.9 L2171.64 1254.9 L2171.64 1276.17 L2184.35 1264.99 L2189.79 1264.99 L2176.04 1277.12 L2190.37 1290.92 L2184.81 1290.92 L2171.64 1278.25 L2171.64 1290.92 L2167.36 1290.92 L2167.36 1254.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2215.46 1276.89 L2215.46 1278.97 L2195.88 1278.97 Q2196.15 1283.37 2198.52 1285.68 Q2200.9 1287.98 2205.14 1287.98 Q2207.59 1287.98 2209.88 1287.37 Q2212.2 1286.77 2214.46 1285.57 L2214.46 1289.6 Q2212.17 1290.57 2209.77 1291.08 Q2207.36 1291.59 2204.88 1291.59 Q2198.68 1291.59 2195.04 1287.98 Q2191.43 1284.36 2191.43 1278.21 Q2191.43 1271.84 2194.86 1268.11 Q2198.31 1264.36 2204.14 1264.36 Q2209.37 1264.36 2212.4 1267.74 Q2215.46 1271.1 2215.46 1276.89 M2211.2 1275.64 Q2211.15 1272.14 2209.23 1270.06 Q2207.34 1267.98 2204.19 1267.98 Q2200.62 1267.98 2198.47 1269.99 Q2196.34 1272 2196.02 1275.66 L2211.2 1275.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2237.47 1268.97 Q2236.76 1268.55 2235.9 1268.37 Q2235.07 1268.16 2234.05 1268.16 Q2230.44 1268.16 2228.49 1270.52 Q2226.57 1272.86 2226.57 1277.26 L2226.57 1290.92 L2222.29 1290.92 L2222.29 1264.99 L2226.57 1264.99 L2226.57 1269.02 Q2227.91 1266.66 2230.07 1265.52 Q2232.22 1264.36 2235.3 1264.36 Q2235.74 1264.36 2236.27 1264.43 Q2236.8 1264.48 2237.45 1264.6 L2237.47 1268.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2258.47 1265.75 L2258.47 1269.78 Q2256.66 1268.86 2254.72 1268.39 Q2252.77 1267.93 2250.69 1267.93 Q2247.52 1267.93 2245.92 1268.9 Q2244.35 1269.87 2244.35 1271.82 Q2244.35 1273.3 2245.48 1274.16 Q2246.62 1274.99 2250.04 1275.75 L2251.5 1276.08 Q2256.04 1277.05 2257.94 1278.83 Q2259.86 1280.59 2259.86 1283.76 Q2259.86 1287.37 2256.99 1289.48 Q2254.14 1291.59 2249.14 1291.59 Q2247.06 1291.59 2244.79 1291.17 Q2242.54 1290.78 2240.04 1289.97 L2240.04 1285.57 Q2242.4 1286.79 2244.7 1287.42 Q2246.99 1288.02 2249.23 1288.02 Q2252.24 1288.02 2253.86 1287 Q2255.48 1285.96 2255.48 1284.09 Q2255.48 1282.35 2254.3 1281.42 Q2253.14 1280.5 2249.19 1279.64 L2247.71 1279.3 Q2243.75 1278.46 2241.99 1276.75 Q2240.23 1275.01 2240.23 1272 Q2240.23 1268.35 2242.82 1266.36 Q2245.41 1264.36 2250.18 1264.36 Q2252.54 1264.36 2254.63 1264.71 Q2256.71 1265.06 2258.47 1265.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip070)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1776.62,1325.48 1915.96,1325.48 \"/>\n<path clip-path=\"url(#clip070)\" d=\"M1960.9 1327.11 L1960.9 1342.76 L1956.64 1342.76 L1956.64 1327.25 Q1956.64 1323.57 1955.21 1321.74 Q1953.77 1319.91 1950.9 1319.91 Q1947.45 1319.91 1945.46 1322.11 Q1943.47 1324.31 1943.47 1328.1 L1943.47 1342.76 L1939.19 1342.76 L1939.19 1316.83 L1943.47 1316.83 L1943.47 1320.86 Q1945 1318.52 1947.06 1317.36 Q1949.14 1316.2 1951.85 1316.2 Q1956.32 1316.2 1958.61 1318.98 Q1960.9 1321.74 1960.9 1327.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M1979.44 1319.82 Q1976.02 1319.82 1974.03 1322.5 Q1972.04 1325.16 1972.04 1329.82 Q1972.04 1334.47 1974 1337.15 Q1975.99 1339.82 1979.44 1339.82 Q1982.85 1339.82 1984.84 1337.13 Q1986.83 1334.45 1986.83 1329.82 Q1986.83 1325.21 1984.84 1322.52 Q1982.85 1319.82 1979.44 1319.82 M1979.44 1316.2 Q1985 1316.2 1988.17 1319.82 Q1991.34 1323.43 1991.34 1329.82 Q1991.34 1336.18 1988.17 1339.82 Q1985 1343.43 1979.44 1343.43 Q1973.86 1343.43 1970.69 1339.82 Q1967.54 1336.18 1967.54 1329.82 Q1967.54 1323.43 1970.69 1319.82 Q1973.86 1316.2 1979.44 1316.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2013.42 1320.81 Q2012.71 1320.39 2011.85 1320.21 Q2011.02 1320 2010 1320 Q2006.39 1320 2004.44 1322.36 Q2002.52 1324.7 2002.52 1329.1 L2002.52 1342.76 L1998.24 1342.76 L1998.24 1316.83 L2002.52 1316.83 L2002.52 1320.86 Q2003.86 1318.5 2006.02 1317.36 Q2008.17 1316.2 2011.25 1316.2 Q2011.69 1316.2 2012.22 1316.27 Q2012.75 1316.32 2013.4 1316.44 L2013.42 1320.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip070)\" d=\"M2037.24 1321.81 Q2038.84 1318.94 2041.06 1317.57 Q2043.29 1316.2 2046.29 1316.2 Q2050.35 1316.2 2052.54 1319.05 Q2054.74 1321.88 2054.74 1327.11 L2054.74 1342.76 L2050.46 1342.76 L2050.46 1327.25 Q2050.46 1323.52 2049.14 1321.71 Q2047.82 1319.91 2045.11 1319.91 Q2041.8 1319.91 2039.88 1322.11 Q2037.96 1324.31 2037.96 1328.1 L2037.96 1342.76 L2033.68 1342.76 L2033.68 1327.25 Q2033.68 1323.5 2032.36 1321.71 Q2031.04 1319.91 2028.29 1319.91 Q2025.02 1319.91 2023.1 1322.13 Q2021.18 1324.33 2021.18 1328.1 L2021.18 1342.76 L2016.9 1342.76 L2016.9 1316.83 L2021.18 1316.83 L2021.18 1320.86 Q2022.64 1318.47 2024.67 1317.34 Q2026.71 1316.2 2029.51 1316.2 Q2032.34 1316.2 2034.3 1317.64 Q2036.29 1319.07 2037.24 1321.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After some equilibriation steps, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's look at estimating the energy from the shift. The mean of the shift is a useful estimator of the shift. Calculating the error bars is a bit more involved as correlations have to be removed from the time series. The following code does that with blocking transformations:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -3.815 ± 0.099\n  with uncertainty of ± 0.008970614342568576\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"For the projected energy, it a bit more complicated as it's a ratio of fluctuationg quantities:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.1774 ± (0.0474639, 0.051944) (MC)\n  95% confidence interval: [-4.28066, -4.07921]) (MC)\n  linear error propagation: -4.1726 ± 0.049528\n  |δ_y| = |0.00975764| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. Let's get its median and lower and upper error bars for a 95% confidence interval","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.177400207765482, val_l = 0.1032568959464415, val_u = 0.09819112324625667)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\")\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected_energy\",\n)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip100\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip101\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M205.121 1423.18 L2352.76 1423.18 L2352.76 47.2441 L205.121 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip102\">\n    <rect x=\"205\" y=\"47\" width=\"2149\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"265.228,1423.18 265.228,47.2441 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"940.81,1423.18 940.81,47.2441 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1616.39,1423.18 1616.39,47.2441 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2291.97,1423.18 2291.97,47.2441 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"265.228,1423.18 265.228,1404.28 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"940.81,1423.18 940.81,1404.28 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1616.39,1423.18 1616.39,1404.28 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2291.97,1423.18 2291.97,1404.28 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M265.228 1454.1 Q261.616 1454.1 259.788 1457.66 Q257.982 1461.2 257.982 1468.33 Q257.982 1475.44 259.788 1479.01 Q261.616 1482.55 265.228 1482.55 Q268.862 1482.55 270.667 1479.01 Q272.496 1475.44 272.496 1468.33 Q272.496 1461.2 270.667 1457.66 Q268.862 1454.1 265.228 1454.1 M265.228 1450.39 Q271.038 1450.39 274.093 1455 Q277.172 1459.58 277.172 1468.33 Q277.172 1477.06 274.093 1481.67 Q271.038 1486.25 265.228 1486.25 Q259.417 1486.25 256.339 1481.67 Q253.283 1477.06 253.283 1468.33 Q253.283 1459.58 256.339 1455 Q259.417 1450.39 265.228 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M885.335 1481.64 L892.974 1481.64 L892.974 1455.28 L884.664 1456.95 L884.664 1452.69 L892.928 1451.02 L897.604 1451.02 L897.604 1481.64 L905.243 1481.64 L905.243 1485.58 L885.335 1485.58 L885.335 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M924.687 1454.1 Q921.076 1454.1 919.247 1457.66 Q917.442 1461.2 917.442 1468.33 Q917.442 1475.44 919.247 1479.01 Q921.076 1482.55 924.687 1482.55 Q928.321 1482.55 930.127 1479.01 Q931.955 1475.44 931.955 1468.33 Q931.955 1461.2 930.127 1457.66 Q928.321 1454.1 924.687 1454.1 M924.687 1450.39 Q930.497 1450.39 933.553 1455 Q936.631 1459.58 936.631 1468.33 Q936.631 1477.06 933.553 1481.67 Q930.497 1486.25 924.687 1486.25 Q918.877 1486.25 915.798 1481.67 Q912.743 1477.06 912.743 1468.33 Q912.743 1459.58 915.798 1455 Q918.877 1450.39 924.687 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M954.849 1454.1 Q951.238 1454.1 949.409 1457.66 Q947.604 1461.2 947.604 1468.33 Q947.604 1475.44 949.409 1479.01 Q951.238 1482.55 954.849 1482.55 Q958.483 1482.55 960.289 1479.01 Q962.117 1475.44 962.117 1468.33 Q962.117 1461.2 960.289 1457.66 Q958.483 1454.1 954.849 1454.1 M954.849 1450.39 Q960.659 1450.39 963.715 1455 Q966.793 1459.58 966.793 1468.33 Q966.793 1477.06 963.715 1481.67 Q960.659 1486.25 954.849 1486.25 Q949.039 1486.25 945.96 1481.67 Q942.904 1477.06 942.904 1468.33 Q942.904 1459.58 945.96 1455 Q949.039 1450.39 954.849 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M985.011 1454.1 Q981.4 1454.1 979.571 1457.66 Q977.765 1461.2 977.765 1468.33 Q977.765 1475.44 979.571 1479.01 Q981.4 1482.55 985.011 1482.55 Q988.645 1482.55 990.451 1479.01 Q992.279 1475.44 992.279 1468.33 Q992.279 1461.2 990.451 1457.66 Q988.645 1454.1 985.011 1454.1 M985.011 1450.39 Q990.821 1450.39 993.876 1455 Q996.955 1459.58 996.955 1468.33 Q996.955 1477.06 993.876 1481.67 Q990.821 1486.25 985.011 1486.25 Q979.201 1486.25 976.122 1481.67 Q973.066 1477.06 973.066 1468.33 Q973.066 1459.58 976.122 1455 Q979.201 1450.39 985.011 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1565 1481.64 L1581.32 1481.64 L1581.32 1485.58 L1559.38 1485.58 L1559.38 1481.64 Q1562.04 1478.89 1566.62 1474.26 Q1571.23 1469.61 1572.41 1468.27 Q1574.66 1465.74 1575.54 1464.01 Q1576.44 1462.25 1576.44 1460.56 Q1576.44 1457.8 1574.49 1456.07 Q1572.57 1454.33 1569.47 1454.33 Q1567.27 1454.33 1564.82 1455.09 Q1562.39 1455.86 1559.61 1457.41 L1559.61 1452.69 Q1562.43 1451.55 1564.89 1450.97 Q1567.34 1450.39 1569.38 1450.39 Q1574.75 1450.39 1577.94 1453.08 Q1581.14 1455.77 1581.14 1460.26 Q1581.14 1462.39 1580.33 1464.31 Q1579.54 1466.2 1577.43 1468.8 Q1576.85 1469.47 1573.75 1472.69 Q1570.65 1475.88 1565 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1601.14 1454.1 Q1597.53 1454.1 1595.7 1457.66 Q1593.89 1461.2 1593.89 1468.33 Q1593.89 1475.44 1595.7 1479.01 Q1597.53 1482.55 1601.14 1482.55 Q1604.77 1482.55 1606.58 1479.01 Q1608.41 1475.44 1608.41 1468.33 Q1608.41 1461.2 1606.58 1457.66 Q1604.77 1454.1 1601.14 1454.1 M1601.14 1450.39 Q1606.95 1450.39 1610 1455 Q1613.08 1459.58 1613.08 1468.33 Q1613.08 1477.06 1610 1481.67 Q1606.95 1486.25 1601.14 1486.25 Q1595.33 1486.25 1592.25 1481.67 Q1589.19 1477.06 1589.19 1468.33 Q1589.19 1459.58 1592.25 1455 Q1595.33 1450.39 1601.14 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1631.3 1454.1 Q1627.69 1454.1 1625.86 1457.66 Q1624.05 1461.2 1624.05 1468.33 Q1624.05 1475.44 1625.86 1479.01 Q1627.69 1482.55 1631.3 1482.55 Q1634.93 1482.55 1636.74 1479.01 Q1638.57 1475.44 1638.57 1468.33 Q1638.57 1461.2 1636.74 1457.66 Q1634.93 1454.1 1631.3 1454.1 M1631.3 1450.39 Q1637.11 1450.39 1640.16 1455 Q1643.24 1459.58 1643.24 1468.33 Q1643.24 1477.06 1640.16 1481.67 Q1637.11 1486.25 1631.3 1486.25 Q1625.49 1486.25 1622.41 1481.67 Q1619.35 1477.06 1619.35 1468.33 Q1619.35 1459.58 1622.41 1455 Q1625.49 1450.39 1631.3 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1661.46 1454.1 Q1657.85 1454.1 1656.02 1457.66 Q1654.22 1461.2 1654.22 1468.33 Q1654.22 1475.44 1656.02 1479.01 Q1657.85 1482.55 1661.46 1482.55 Q1665.1 1482.55 1666.9 1479.01 Q1668.73 1475.44 1668.73 1468.33 Q1668.73 1461.2 1666.9 1457.66 Q1665.1 1454.1 1661.46 1454.1 M1661.46 1450.39 Q1667.27 1450.39 1670.33 1455 Q1673.41 1459.58 1673.41 1468.33 Q1673.41 1477.06 1670.33 1481.67 Q1667.27 1486.25 1661.46 1486.25 Q1655.65 1486.25 1652.57 1481.67 Q1649.52 1477.06 1649.52 1468.33 Q1649.52 1459.58 1652.57 1455 Q1655.65 1450.39 1661.46 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2250.65 1466.95 Q2254.01 1467.66 2255.89 1469.93 Q2257.78 1472.2 2257.78 1475.53 Q2257.78 1480.65 2254.27 1483.45 Q2250.75 1486.25 2244.27 1486.25 Q2242.09 1486.25 2239.77 1485.81 Q2237.48 1485.39 2235.03 1484.54 L2235.03 1480.02 Q2236.97 1481.16 2239.29 1481.74 Q2241.6 1482.32 2244.13 1482.32 Q2248.52 1482.32 2250.82 1480.58 Q2253.13 1478.84 2253.13 1475.53 Q2253.13 1472.48 2250.98 1470.77 Q2248.85 1469.03 2245.03 1469.03 L2241 1469.03 L2241 1465.19 L2245.21 1465.19 Q2248.66 1465.19 2250.49 1463.82 Q2252.32 1462.43 2252.32 1459.84 Q2252.32 1457.18 2250.42 1455.77 Q2248.55 1454.33 2245.03 1454.33 Q2243.11 1454.33 2240.91 1454.75 Q2238.71 1455.16 2236.07 1456.04 L2236.07 1451.88 Q2238.73 1451.14 2241.05 1450.77 Q2243.39 1450.39 2245.45 1450.39 Q2250.77 1450.39 2253.87 1452.83 Q2256.97 1455.23 2256.97 1459.35 Q2256.97 1462.22 2255.33 1464.21 Q2253.69 1466.18 2250.65 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2276.65 1454.1 Q2273.04 1454.1 2271.21 1457.66 Q2269.4 1461.2 2269.4 1468.33 Q2269.4 1475.44 2271.21 1479.01 Q2273.04 1482.55 2276.65 1482.55 Q2280.28 1482.55 2282.09 1479.01 Q2283.92 1475.44 2283.92 1468.33 Q2283.92 1461.2 2282.09 1457.66 Q2280.28 1454.1 2276.65 1454.1 M2276.65 1450.39 Q2282.46 1450.39 2285.52 1455 Q2288.59 1459.58 2288.59 1468.33 Q2288.59 1477.06 2285.52 1481.67 Q2282.46 1486.25 2276.65 1486.25 Q2270.84 1486.25 2267.76 1481.67 Q2264.71 1477.06 2264.71 1468.33 Q2264.71 1459.58 2267.76 1455 Q2270.84 1450.39 2276.65 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2306.81 1454.1 Q2303.2 1454.1 2301.37 1457.66 Q2299.57 1461.2 2299.57 1468.33 Q2299.57 1475.44 2301.37 1479.01 Q2303.2 1482.55 2306.81 1482.55 Q2310.45 1482.55 2312.25 1479.01 Q2314.08 1475.44 2314.08 1468.33 Q2314.08 1461.2 2312.25 1457.66 Q2310.45 1454.1 2306.81 1454.1 M2306.81 1450.39 Q2312.62 1450.39 2315.68 1455 Q2318.76 1459.58 2318.76 1468.33 Q2318.76 1477.06 2315.68 1481.67 Q2312.62 1486.25 2306.81 1486.25 Q2301 1486.25 2297.92 1481.67 Q2294.87 1477.06 2294.87 1468.33 Q2294.87 1459.58 2297.92 1455 Q2301 1450.39 2306.81 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2336.97 1454.1 Q2333.36 1454.1 2331.53 1457.66 Q2329.73 1461.2 2329.73 1468.33 Q2329.73 1475.44 2331.53 1479.01 Q2333.36 1482.55 2336.97 1482.55 Q2340.61 1482.55 2342.41 1479.01 Q2344.24 1475.44 2344.24 1468.33 Q2344.24 1461.2 2342.41 1457.66 Q2340.61 1454.1 2336.97 1454.1 M2336.97 1450.39 Q2342.78 1450.39 2345.84 1455 Q2348.92 1459.58 2348.92 1468.33 Q2348.92 1477.06 2345.84 1481.67 Q2342.78 1486.25 2336.97 1486.25 Q2331.16 1486.25 2328.08 1481.67 Q2325.03 1477.06 2325.03 1468.33 Q2325.03 1459.58 2328.08 1455 Q2331.16 1450.39 2336.97 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1220.15 1533.45 L1220.15 1538.98 Q1217.67 1537.71 1214.99 1537.07 Q1212.32 1536.44 1209.46 1536.44 Q1205.1 1536.44 1202.9 1537.77 Q1200.74 1539.11 1200.74 1541.79 Q1200.74 1543.82 1202.3 1545 Q1203.85 1546.15 1208.57 1547.2 L1210.57 1547.64 Q1216.81 1548.98 1219.42 1551.43 Q1222.06 1553.85 1222.06 1558.21 Q1222.06 1563.17 1218.11 1566.07 Q1214.2 1568.97 1207.32 1568.97 Q1204.46 1568.97 1201.34 1568.39 Q1198.25 1567.85 1194.82 1566.74 L1194.82 1560.69 Q1198.06 1562.38 1201.21 1563.24 Q1204.36 1564.07 1207.45 1564.07 Q1211.59 1564.07 1213.82 1562.66 Q1216.05 1561.23 1216.05 1558.65 Q1216.05 1556.27 1214.42 1554.99 Q1212.83 1553.72 1207.39 1552.54 L1205.35 1552.07 Q1199.91 1550.92 1197.49 1548.56 Q1195.07 1546.18 1195.07 1542.04 Q1195.07 1537.01 1198.64 1534.27 Q1202.2 1531.54 1208.76 1531.54 Q1212 1531.54 1214.87 1532.01 Q1217.73 1532.49 1220.15 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1237.18 1522.27 L1237.18 1532.4 L1249.24 1532.4 L1249.24 1536.95 L1237.18 1536.95 L1237.18 1556.3 Q1237.18 1560.66 1238.36 1561.9 Q1239.57 1563.14 1243.23 1563.14 L1249.24 1563.14 L1249.24 1568.04 L1243.23 1568.04 Q1236.45 1568.04 1233.87 1565.53 Q1231.29 1562.98 1231.29 1556.3 L1231.29 1536.95 L1226.99 1536.95 L1226.99 1532.4 L1231.29 1532.4 L1231.29 1522.27 L1237.18 1522.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1287.44 1548.76 L1287.44 1551.62 L1260.51 1551.62 Q1260.89 1557.67 1264.14 1560.85 Q1267.42 1564 1273.24 1564 Q1276.61 1564 1279.77 1563.17 Q1282.95 1562.35 1286.07 1560.69 L1286.07 1566.23 Q1282.92 1567.57 1279.61 1568.27 Q1276.3 1568.97 1272.89 1568.97 Q1264.36 1568.97 1259.36 1564 Q1254.4 1559.04 1254.4 1550.57 Q1254.4 1541.82 1259.11 1536.69 Q1263.85 1531.54 1271.87 1531.54 Q1279.07 1531.54 1283.24 1536.18 Q1287.44 1540.8 1287.44 1548.76 M1281.58 1547.04 Q1281.52 1542.23 1278.87 1539.37 Q1276.26 1536.5 1271.94 1536.5 Q1267.03 1536.5 1264.07 1539.27 Q1261.15 1542.04 1260.7 1547.07 L1281.58 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1302.71 1562.7 L1302.71 1581.6 L1296.83 1581.6 L1296.83 1532.4 L1302.71 1532.4 L1302.71 1537.81 Q1304.56 1534.62 1307.36 1533.1 Q1310.19 1531.54 1314.11 1531.54 Q1320.6 1531.54 1324.64 1536.69 Q1328.72 1541.85 1328.72 1550.25 Q1328.72 1558.65 1324.64 1563.81 Q1320.6 1568.97 1314.11 1568.97 Q1310.19 1568.97 1307.36 1567.44 Q1304.56 1565.88 1302.71 1562.7 M1322.64 1550.25 Q1322.64 1543.79 1319.97 1540.13 Q1317.32 1536.44 1312.68 1536.44 Q1308.03 1536.44 1305.36 1540.13 Q1302.71 1543.79 1302.71 1550.25 Q1302.71 1556.71 1305.36 1560.4 Q1308.03 1564.07 1312.68 1564.07 Q1317.32 1564.07 1319.97 1560.4 Q1322.64 1556.71 1322.64 1550.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1361.15 1533.45 L1361.15 1538.98 Q1358.67 1537.71 1356 1537.07 Q1353.32 1536.44 1350.46 1536.44 Q1346.1 1536.44 1343.9 1537.77 Q1341.74 1539.11 1341.74 1541.79 Q1341.74 1543.82 1343.3 1545 Q1344.86 1546.15 1349.57 1547.2 L1351.57 1547.64 Q1357.81 1548.98 1360.42 1551.43 Q1363.06 1553.85 1363.06 1558.21 Q1363.06 1563.17 1359.11 1566.07 Q1355.2 1568.97 1348.32 1568.97 Q1345.46 1568.97 1342.34 1568.39 Q1339.25 1567.85 1335.82 1566.74 L1335.82 1560.69 Q1339.06 1562.38 1342.21 1563.24 Q1345.36 1564.07 1348.45 1564.07 Q1352.59 1564.07 1354.82 1562.66 Q1357.05 1561.23 1357.05 1558.65 Q1357.05 1556.27 1355.42 1554.99 Q1353.83 1553.72 1348.39 1552.54 L1346.35 1552.07 Q1340.91 1550.92 1338.49 1548.56 Q1336.07 1546.18 1336.07 1542.04 Q1336.07 1537.01 1339.64 1534.27 Q1343.2 1531.54 1349.76 1531.54 Q1353 1531.54 1355.87 1532.01 Q1358.73 1532.49 1361.15 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"205.121,1233.67 2352.76,1233.67 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"205.121,910.782 2352.76,910.782 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"205.121,587.899 2352.76,587.899 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"205.121,265.015 2352.76,265.015 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,1423.18 205.121,47.2441 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,1233.67 224.019,1233.67 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,910.782 224.019,910.782 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,587.899 224.019,587.899 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"205.121,265.015 224.019,265.015 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M157.177 1219.46 Q153.566 1219.46 151.737 1223.03 Q149.931 1226.57 149.931 1233.7 Q149.931 1240.81 151.737 1244.37 Q153.566 1247.91 157.177 1247.91 Q160.811 1247.91 162.616 1244.37 Q164.445 1240.81 164.445 1233.7 Q164.445 1226.57 162.616 1223.03 Q160.811 1219.46 157.177 1219.46 M157.177 1215.76 Q162.987 1215.76 166.042 1220.37 Q169.121 1224.95 169.121 1233.7 Q169.121 1242.43 166.042 1247.03 Q162.987 1251.62 157.177 1251.62 Q151.366 1251.62 148.288 1247.03 Q145.232 1242.43 145.232 1233.7 Q145.232 1224.95 148.288 1220.37 Q151.366 1215.76 157.177 1215.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M121.043 924.127 L137.362 924.127 L137.362 928.062 L115.418 928.062 L115.418 924.127 Q118.08 921.373 122.663 916.743 Q127.269 912.09 128.45 910.748 Q130.695 908.225 131.575 906.489 Q132.478 904.729 132.478 903.039 Q132.478 900.285 130.533 898.549 Q128.612 896.813 125.51 896.813 Q123.311 896.813 120.857 897.577 Q118.427 898.34 115.649 899.891 L115.649 895.169 Q118.473 894.035 120.927 893.456 Q123.38 892.877 125.418 892.877 Q130.788 892.877 133.982 895.563 Q137.177 898.248 137.177 902.739 Q137.177 904.868 136.367 906.789 Q135.579 908.688 133.473 911.28 Q132.894 911.951 129.792 915.169 Q126.691 918.363 121.043 924.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M157.177 896.581 Q153.566 896.581 151.737 900.146 Q149.931 903.688 149.931 910.817 Q149.931 917.924 151.737 921.488 Q153.566 925.03 157.177 925.03 Q160.811 925.03 162.616 921.488 Q164.445 917.924 164.445 910.817 Q164.445 903.688 162.616 900.146 Q160.811 896.581 157.177 896.581 M157.177 892.877 Q162.987 892.877 166.042 897.484 Q169.121 902.067 169.121 910.817 Q169.121 919.544 166.042 924.15 Q162.987 928.734 157.177 928.734 Q151.366 928.734 148.288 924.15 Q145.232 919.544 145.232 910.817 Q145.232 902.067 148.288 897.484 Q151.366 892.877 157.177 892.877 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M129.862 574.693 L118.056 593.142 L129.862 593.142 L129.862 574.693 M128.635 570.619 L134.515 570.619 L134.515 593.142 L139.445 593.142 L139.445 597.031 L134.515 597.031 L134.515 605.179 L129.862 605.179 L129.862 597.031 L114.26 597.031 L114.26 592.517 L128.635 570.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M157.177 573.698 Q153.566 573.698 151.737 577.262 Q149.931 580.804 149.931 587.934 Q149.931 595.04 151.737 598.605 Q153.566 602.147 157.177 602.147 Q160.811 602.147 162.616 598.605 Q164.445 595.04 164.445 587.934 Q164.445 580.804 162.616 577.262 Q160.811 573.698 157.177 573.698 M157.177 569.994 Q162.987 569.994 166.042 574.6 Q169.121 579.184 169.121 587.934 Q169.121 596.66 166.042 601.267 Q162.987 605.85 157.177 605.85 Q151.366 605.85 148.288 601.267 Q145.232 596.66 145.232 587.934 Q145.232 579.184 148.288 574.6 Q151.366 569.994 157.177 569.994 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M127.593 263.152 Q124.445 263.152 122.593 265.305 Q120.765 267.457 120.765 271.207 Q120.765 274.934 122.593 277.11 Q124.445 279.263 127.593 279.263 Q130.742 279.263 132.57 277.11 Q134.422 274.934 134.422 271.207 Q134.422 267.457 132.57 265.305 Q130.742 263.152 127.593 263.152 M136.876 248.499 L136.876 252.758 Q135.117 251.925 133.311 251.485 Q131.529 251.045 129.769 251.045 Q125.14 251.045 122.686 254.17 Q120.255 257.295 119.908 263.615 Q121.274 261.601 123.334 260.536 Q125.394 259.448 127.871 259.448 Q133.08 259.448 136.089 262.619 Q139.121 265.768 139.121 271.207 Q139.121 276.531 135.973 279.749 Q132.825 282.967 127.593 282.967 Q121.598 282.967 118.427 278.383 Q115.256 273.777 115.256 265.05 Q115.256 256.856 119.144 251.995 Q123.033 247.11 129.584 247.11 Q131.343 247.11 133.126 247.458 Q134.931 247.805 136.876 248.499 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M157.177 250.814 Q153.566 250.814 151.737 254.379 Q149.931 257.92 149.931 265.05 Q149.931 272.156 151.737 275.721 Q153.566 279.263 157.177 279.263 Q160.811 279.263 162.616 275.721 Q164.445 272.156 164.445 265.05 Q164.445 257.92 162.616 254.379 Q160.811 250.814 157.177 250.814 M157.177 247.11 Q162.987 247.11 166.042 251.717 Q169.121 256.3 169.121 265.05 Q169.121 273.777 166.042 278.383 Q162.987 282.967 157.177 282.967 Q151.366 282.967 148.288 278.383 Q145.232 273.777 145.232 265.05 Q145.232 256.3 148.288 251.717 Q151.366 247.11 157.177 247.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M44.7161 812.969 L47.5806 812.969 L47.5806 839.896 Q53.6281 839.514 56.8109 836.268 Q59.9619 832.989 59.9619 827.165 Q59.9619 823.791 59.1344 820.64 Q58.3069 817.457 56.6518 814.338 L62.1899 814.338 Q63.5267 817.489 64.227 820.799 Q64.9272 824.109 64.9272 827.515 Q64.9272 836.045 59.9619 841.042 Q54.9967 846.007 46.5303 846.007 Q37.7774 846.007 32.6531 841.296 Q27.4968 836.554 27.4968 828.533 Q27.4968 821.34 32.1438 817.17 Q36.7589 812.969 44.7161 812.969 M42.9973 818.826 Q38.1912 818.889 35.3266 821.531 Q32.4621 824.141 32.4621 828.47 Q32.4621 833.371 35.2312 836.331 Q38.0002 839.259 43.0292 839.705 L42.9973 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M42.4881 773.724 L64.0042 773.724 L64.0042 779.581 L42.679 779.581 Q37.6183 779.581 35.1038 781.554 Q32.5894 783.528 32.5894 787.474 Q32.5894 792.217 35.6131 794.954 Q38.6368 797.691 43.8567 797.691 L64.0042 797.691 L64.0042 803.58 L28.3562 803.58 L28.3562 797.691 L33.8944 797.691 Q30.6797 795.591 29.0883 792.758 Q27.4968 789.893 27.4968 786.169 Q27.4968 780.027 31.3163 776.876 Q35.1038 773.724 42.4881 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M44.7161 731.552 L47.5806 731.552 L47.5806 758.479 Q53.6281 758.097 56.8109 754.85 Q59.9619 751.572 59.9619 745.747 Q59.9619 742.373 59.1344 739.222 Q58.3069 736.04 56.6518 732.92 L62.1899 732.92 Q63.5267 736.071 64.227 739.382 Q64.9272 742.692 64.9272 746.097 Q64.9272 754.627 59.9619 759.624 Q54.9967 764.59 46.5303 764.59 Q37.7774 764.59 32.6531 759.879 Q27.4968 755.137 27.4968 747.116 Q27.4968 739.923 32.1438 735.753 Q36.7589 731.552 44.7161 731.552 M42.9973 737.408 Q38.1912 737.472 35.3266 740.114 Q32.4621 742.724 32.4621 747.052 Q32.4621 751.954 35.2312 754.914 Q38.0002 757.842 43.0292 758.288 L42.9973 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M33.8307 701.283 Q33.2578 702.269 33.0032 703.447 Q32.7167 704.593 32.7167 705.993 Q32.7167 710.959 35.9632 713.632 Q39.1779 716.274 45.2253 716.274 L64.0042 716.274 L64.0042 722.162 L28.3562 722.162 L28.3562 716.274 L33.8944 716.274 Q30.6479 714.428 29.0883 711.468 Q27.4968 708.508 27.4968 704.275 Q27.4968 703.67 27.5923 702.938 Q27.656 702.206 27.8151 701.315 L33.8307 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M45.7664 672.828 Q39.4007 672.828 35.8996 675.47 Q32.3984 678.08 32.3984 682.822 Q32.3984 687.533 35.8996 690.175 Q39.4007 692.785 45.7664 692.785 Q52.1003 692.785 55.6014 690.175 Q59.1026 687.533 59.1026 682.822 Q59.1026 678.08 55.6014 675.47 Q52.1003 672.828 45.7664 672.828 M59.58 666.972 Q68.683 666.972 73.1071 671.014 Q77.5631 675.056 77.5631 683.395 Q77.5631 686.482 77.0857 689.22 Q76.6401 691.957 75.6852 694.535 L69.9879 694.535 Q71.3884 691.957 72.0568 689.443 Q72.7252 686.928 72.7252 684.318 Q72.7252 678.557 69.7015 675.693 Q66.7096 672.828 60.6303 672.828 L57.7339 672.828 Q60.885 674.642 62.4446 677.475 Q64.0042 680.308 64.0042 684.254 Q64.0042 690.811 59.0071 694.822 Q54.01 698.832 45.7664 698.832 Q37.491 698.832 32.4939 694.822 Q27.4968 690.811 27.4968 684.254 Q27.4968 680.308 29.0564 677.475 Q30.616 674.642 33.7671 672.828 L28.3562 672.828 L28.3562 666.972 L59.58 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M67.3143 640.076 Q73.68 642.559 75.6216 644.914 Q77.5631 647.27 77.5631 651.216 L77.5631 655.895 L72.6615 655.895 L72.6615 652.458 Q72.6615 650.039 71.5157 648.702 Q70.3699 647.365 66.1048 645.742 L63.4312 644.692 L28.3562 659.11 L28.3562 652.903 L56.238 641.763 L28.3562 630.623 L28.3562 624.417 L67.3143 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip102)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"265.903,1114.71 266.579,995.757 267.254,876.802 267.93,998.031 268.605,883.786 269.281,769.541 269.957,760.741 270.632,746.191 271.308,635.927 271.983,616.553 272.659,508.071 273.334,399.59 274.01,291.109 274.686,347.513 275.361,317.563 276.037,285.018 276.712,250.215 277.388,213.439 278.064,174.933 278.739,244.748 279.415,201.129 280.09,156.574 280.766,111.185 281.441,109.715 282.117,104.159 282.793,133.301 283.468,119.912 284.144,104.103 284.819,86.1857 285.495,96.7068 286.171,130.649 286.846,157.658 287.522,131.007 288.197,172.27 288.873,185.579 289.548,175.451 290.224,182.755 290.9,239.623 291.575,288.02 292.251,300.209 292.926,309.726 293.602,381.831 294.278,397.257 294.953,410.207 295.629,463.498 296.304,500.879 296.98,524.995 297.655,528.902 298.331,540.205 299.007,566.105 299.682,589.528 300.358,632.215 301.033,664.459 301.709,694.074 302.385,751.141 303.06,764.39 303.736,771.234 304.411,814.021 305.087,839.173 305.762,867.56 306.438,876.303 307.114,897.741 307.789,926.51 308.465,929.689 309.14,928.736 309.816,931.637 310.492,926.807 311.167,922.032 311.843,935.639 312.518,948.826 313.194,961.641 313.869,980.778 314.545,996.145 315.221,1004.87 315.896,1010.4 316.572,1015.89 317.247,1021.37 317.923,1021.03 318.598,1037.84 319.274,1046.09 319.95,1046.15 320.625,1078.18 321.301,1086.36 321.976,1084.42 322.652,1075.03 323.328,1093.12 324.003,1096.52 324.679,1102.4 325.354,1115.39 326.03,1128.33 326.705,1147.95 327.381,1154.27 328.057,1149.83 328.732,1160.58 329.408,1165.05 330.083,1175.88 330.759,1184.73 331.435,1191.64 332.11,1204.63 332.786,1205.92 333.461,1215.1 334.137,1214.82 334.812,1212.74 335.488,1216.45 336.164,1214.67 336.839,1214.85 337.515,1215.16 338.19,1226.57 338.866,1232.67 339.542,1220.93 340.217,1218.15 340.893,1229.73 341.568,1227.34 342.244,1237.3 342.919,1247.37 343.595,1257.56 344.271,1257.76 344.946,1263.09 345.622,1261.89 346.297,1278.94 346.973,1281.45 347.649,1282.45 348.324,1296.4 349,1292.99 349.675,1288.03 350.351,1292.6 351.026,1298.87 351.702,1294.31 352.378,1302.26 353.053,1302.6 353.729,1298.37 354.404,1295.69 355.08,1297.68 355.756,1296.69 356.431,1298.81 357.107,1288.77 357.782,1286.3 358.458,1291.5 359.133,1290.74 359.809,1297.62 360.485,1306.11 361.16,1307.29 361.836,1311.52 362.511,1315.84 363.187,1312.92 363.862,1302.6 364.538,1305.45 365.214,1298.06 365.889,1297.98 366.565,1295 367.24,1302.33 367.916,1308.32 368.592,1304.26 369.267,1308.9 369.943,1307.86 370.618,1303.94 371.294,1304.35 371.969,1320.6 372.645,1325.64 373.321,1316.6 373.996,1310.24 374.672,1312.37 375.347,1316 376.023,1321.13 376.699,1319.31 377.374,1311.82 378.05,1321.2 378.725,1323.71 379.401,1326.29 380.076,1331.72 380.752,1328.92 381.428,1330.27 382.103,1334.43 382.779,1345.56 383.454,1343.16 384.13,1342.1 384.806,1339.68 385.481,1334.47 386.157,1331.93 386.832,1338.99 387.508,1348.88 388.183,1348.07 388.859,1347.26 389.535,1353.22 390.21,1336.21 390.886,1340.68 391.561,1339.78 392.237,1342.97 392.913,1348.94 393.588,1346.91 394.264,1343.49 394.939,1337.29 395.615,1337.79 396.29,1336.95 396.966,1340.18 397.642,1339.42 398.317,1331.86 398.993,1339.12 399.668,1331.6 400.344,1337.52 401.02,1336.79 401.695,1348.2 402.371,1350.39 403.046,1359.29 403.722,1359.03 404.397,1344.05 405.073,1329.98 405.749,1331.88 406.424,1339.24 407.1,1345.36 407.775,1343.55 408.451,1352.42 409.126,1354.77 409.802,1355.84 410.478,1351.61 411.153,1353.97 411.829,1357.69 412.504,1366.77 413.18,1373.34 413.856,1372.15 414.531,1381.41 415.207,1375.16 415.882,1379.24 416.558,1380.77 417.233,1365.29 417.909,1357.29 418.585,1354.42 419.26,1362.12 419.936,1358.05 420.611,1372.38 421.287,1384.24 421.963,1372.82 422.638,1375.54 423.314,1379.62 423.989,1381.15 424.665,1378.8 425.34,1376.39 426.016,1381.77 426.692,1364.96 427.367,1363.56 428.043,1368.74 428.718,1364.78 429.394,1367.34 430.07,1346.05 430.745,1346.94 431.421,1338.47 432.096,1341.93 432.772,1340.09 433.447,1339.57 434.123,1329.6 434.799,1322.11 435.474,1325.35 436.15,1342.11 436.825,1322.81 437.501,1324.74 438.177,1321.29 438.852,1329.98 439.528,1330.72 440.203,1327.45 440.879,1333.56 441.554,1331.72 442.23,1327.16 442.906,1330.6 443.581,1332.76 444.257,1329.6 444.932,1326.39 445.608,1325.82 446.284,1315.78 446.959,1313.66 447.635,1321 448.31,1328.44 448.986,1330.66 449.661,1327.56 450.337,1336.45 451.013,1330.82 451.688,1325.07 452.364,1337.94 453.039,1328.36 453.715,1330.62 454.39,1322.22 455.066,1314.96 455.742,1323.73 456.417,1323.26 457.093,1318.76 457.768,1320.9 458.444,1315.02 459.12,1319.8 459.795,1330.01 460.471,1328.39 461.146,1318.71 461.822,1323.57 462.497,1327.19 463.173,1312.13 463.849,1322.27 464.524,1324.55 465.2,1318.86 465.875,1323.77 466.551,1320.76 467.227,1319.03 467.902,1325.29 468.578,1322.34 469.253,1328.66 469.929,1337.72 470.604,1342.95 471.28,1344.34 471.956,1352.3 472.631,1360.36 473.307,1362.06 473.982,1359.9 474.658,1351.17 475.334,1348.76 476.009,1342.35 476.685,1330.48 477.36,1311.55 478.036,1302.87 478.711,1302.13 479.387,1306.81 480.063,1308.88 480.738,1317.7 481.414,1302.52 482.089,1295.05 482.765,1303.72 483.441,1304.44 484.116,1299.79 484.792,1300.46 485.467,1293.04 486.143,1297.67 486.818,1305.08 487.494,1301.87 488.17,1293.19 488.845,1299.21 489.521,1302.65 490.196,1303.47 490.872,1311.01 491.548,1308 492.223,1316.94 492.899,1322.03 493.574,1308.63 494.25,1317.59 494.925,1320.06 495.601,1322.57 496.277,1322.5 496.952,1335.57 497.628,1331.82 498.303,1325.34 498.979,1334.52 499.654,1329.42 500.33,1336.03 501.006,1329.65 501.681,1319.14 502.357,1320.31 503.032,1317.53 503.708,1308.03 504.384,1304.99 505.059,1304.58 505.735,1304.16 506.41,1309.09 507.086,1315.43 507.761,1319.22 508.437,1320.44 509.113,1307.08 509.788,1305.41 510.464,1307.71 511.139,1318.02 511.815,1307.3 512.491,1305.65 513.166,1302.64 513.842,1306.26 514.517,1307.28 515.193,1312.31 515.868,1324.01 516.544,1322.75 517.22,1322.78 517.895,1322.8 518.571,1314.91 519.246,1308.14 519.922,1311.87 520.598,1316.98 521.273,1323.49 521.949,1318.28 522.624,1304.96 523.3,1303.31 523.975,1304.31 524.651,1299.99 525.327,1298.26 526.002,1297.84 526.678,1293.41 527.353,1284.83 528.029,1286.87 528.705,1283.57 529.38,1285.62 530.056,1272.83 530.731,1273.35 531.407,1283.36 532.082,1278.71 532.758,1271.25 533.434,1270.44 534.109,1269.62 534.785,1275.59 535.46,1278.96 536.136,1275.66 536.812,1284.43 537.487,1283.96 538.163,1283.49 538.838,1291.05 539.514,1290.74 540.189,1302.37 540.865,1297 541.541,1300.79 542.216,1299.36 542.892,1293.93 543.567,1304.29 544.243,1308.21 544.918,1318.74 545.594,1316.38 546.27,1308.72 546.945,1300.86 547.621,1315.23 548.296,1316.72 548.972,1318.23 549.648,1314.54 550.323,1318.62 550.999,1326.66 551.674,1324.44 552.35,1319.56 553.025,1326.31 553.701,1331.85 554.377,1334.9 555.052,1331.53 555.728,1335.85 556.403,1327.29 557.079,1327.62 557.755,1318.82 558.43,1300.51 559.106,1290.98 559.781,1293.26 560.457,1290.25 561.132,1288.52 561.808,1290.78 562.484,1283.72 563.159,1289.92 563.835,1294.89 564.51,1286.62 565.186,1274.1 565.862,1277.49 566.537,1286.31 567.213,1291.26 567.888,1285.64 568.564,1302.52 569.239,1299.82 569.915,1316.8 570.591,1320.95 571.266,1325.15 571.942,1328.13 572.617,1327.27 573.293,1326.38 573.969,1333.24 574.644,1332.46 575.32,1334.24 575.995,1337.33 576.671,1328.84 577.346,1312.24 578.022,1316.23 578.698,1322.9 579.373,1325.76 580.049,1314.3 580.724,1309.11 581.4,1314.35 582.076,1314.43 582.751,1315.82 583.427,1313.3 584.102,1310.72 584.778,1314.66 585.453,1310.79 586.129,1305.51 586.805,1305.41 587.48,1305.31 588.156,1311.8 588.831,1323.62 589.507,1322.57 590.182,1322.8 590.858,1329.54 591.534,1329.9 592.209,1332.86 592.885,1338.44 593.56,1342.82 594.236,1336.96 594.912,1324.41 595.587,1332.44 596.263,1336.69 596.938,1337.12 597.614,1334.97 598.289,1332.75 598.965,1343.45 599.641,1354.27 600.316,1352.44 600.992,1340.24 601.667,1323.73 602.343,1313.29 603.019,1313.19 603.694,1314.41 604.37,1319.61 605.045,1313.03 605.721,1303.64 606.396,1303.35 607.072,1311.04 607.748,1314.87 608.423,1322.72 609.099,1317.56 609.774,1320.19 610.45,1320.24 611.126,1322.92 611.801,1319.08 612.477,1325.67 613.152,1328.44 613.828,1327.34 614.503,1319.65 615.179,1315.72 615.855,1324.88 616.53,1318.44 617.206,1314.48 617.881,1310.43 618.557,1298.29 619.233,1288.51 619.908,1287.93 620.584,1295.42 621.259,1305.67 621.935,1302.8 622.61,1301.21 623.286,1296.92 623.962,1304.55 624.637,1297.68 625.313,1309.3 625.988,1317.11 626.664,1314.53 627.34,1315.85 628.015,1317.19 628.691,1332.93 629.366,1330.68 630.042,1340.07 630.717,1345.72 631.393,1357.85 632.069,1356.1 632.744,1346.6 633.42,1336.81 634.095,1338.46 634.771,1354.33 635.446,1336.94 636.122,1335.97 636.798,1332.37 637.473,1340.41 638.149,1334.29 638.824,1331.93 639.5,1325.59 640.176,1321.72 640.851,1312.47 641.527,1317.58 642.202,1318.82 642.878,1320.09 643.553,1314.78 644.229,1306.68 644.905,1310.39 645.58,1300.85 646.256,1296.44 646.931,1295.97 647.607,1312.83 648.283,1310.05 648.958,1308.54 649.634,1304.34 650.309,1309.37 650.985,1310.52 651.66,1313.01 652.336,1306.28 653.012,1304.71 653.687,1309.77 654.363,1301.64 655.038,1299.99 655.714,1300.99 656.39,1296.67 657.065,1304.28 657.741,1305.37 658.416,1313.11 659.092,1317.01 659.767,1310.44 660.443,1316.93 661.119,1301.07 661.794,1311.4 662.47,1319.23 663.145,1317.99 663.821,1319.35 664.497,1318.12 665.172,1308.93 665.848,1302.17 666.523,1304.57 667.199,1309.66 667.874,1300.27 668.55,1309.27 669.226,1332.76 669.901,1334.42 670.577,1323.07 671.252,1320.61 671.928,1323.33 672.604,1323.48 673.279,1317.07 673.955,1323.66 674.63,1323.82 675.306,1325.28 675.981,1321.53 676.657,1312.42 677.333,1300.39 678.008,1312.03 678.684,1315.91 679.359,1309.31 680.035,1311.82 680.71,1297.13 681.386,1302.1 682.062,1304.5 682.737,1298.97 683.413,1294.65 684.088,1295.6 684.764,1301.89 685.44,1299 686.115,1306.68 686.791,1314.47 687.466,1322.37 688.142,1325.17 688.817,1321.47 689.493,1311.11 690.169,1308.42 690.844,1305.66 691.52,1316.07 692.195,1301.58 692.871,1300.02 693.547,1294.42 694.222,1300.72 694.898,1289.81 695.573,1290.71 696.249,1295.63 696.924,1305.95 697.6,1299.21 698.276,1302.96 698.951,1294.83 699.627,1295.85 700.302,1304.86 700.978,1299.45 701.654,1312.46 702.329,1311.19 703.005,1305.94 703.68,1312.46 704.356,1307.24 705.031,1312.46 705.707,1315.14 706.383,1316.55 707.058,1328.42 707.734,1331.38 708.409,1325.29 709.085,1321.66 709.761,1319.25 710.436,1308.88 711.112,1308.83 711.787,1304.81 712.463,1294.05 713.138,1292.38 713.814,1285.31 714.49,1284.82 715.165,1288.35 715.841,1294.61 716.516,1291.65 717.192,1300.63 717.868,1291.16 718.543,1286.81 719.219,1298.39 719.894,1310.09 720.57,1306.2 721.245,1315.37 721.921,1310.28 722.597,1303.74 723.272,1301.01 723.948,1286.24 724.623,1291.17 725.299,1296.18 725.974,1307.87 726.65,1314.46 727.326,1309.36 728.001,1308.1 728.677,1308.13 729.352,1312.09 730.028,1305.62 730.704,1302.95 731.379,1306.83 732.055,1300.23 732.73,1296.12 733.406,1303.86 734.081,1310.39 734.757,1310.47 735.433,1314.48 736.108,1315.94 736.784,1321.35 737.459,1328.13 738.135,1322.04 738.811,1317.1 739.486,1321.2 740.162,1322.76 740.837,1323.04 741.513,1327.23 742.188,1327.59 742.864,1320.13 743.54,1324.25 744.215,1319.31 744.891,1326.01 745.566,1331.52 746.242,1318.9 746.918,1317.74 747.593,1324.41 748.269,1324.67 748.944,1324.92 749.62,1330.39 750.295,1324.24 750.971,1320.54 751.647,1311.5 752.322,1312.79 752.998,1315.42 753.673,1316.79 754.349,1322.11 755.025,1315.73 755.7,1326.26 756.376,1319.98 757.051,1302.96 757.727,1312.01 758.402,1313.31 759.078,1306.7 759.754,1302.59 760.429,1294.39 761.105,1299.36 761.78,1307.06 762.456,1301.66 763.132,1304.11 763.807,1295.97 764.483,1307.61 765.158,1307.53 765.834,1310.09 766.509,1314.02 767.185,1315.38 767.861,1312.83 768.536,1314.17 769.212,1315.54 769.887,1305.07 770.563,1312.86 771.238,1314.2 771.914,1308.98 772.59,1311.57 773.265,1312.88 773.941,1314.22 774.616,1320.83 775.292,1317.08 775.968,1313.24 776.643,1318.52 777.319,1319.96 777.994,1325.34 778.67,1326.9 779.345,1320.66 780.021,1316.88 780.697,1311.69 781.372,1320.86 782.048,1314.45 782.723,1322.35 783.399,1317.29 784.075,1325.22 784.75,1325.45 785.426,1332.2 786.101,1335.15 786.777,1326.45 787.452,1326.69 788.128,1328.22 788.804,1312.73 789.479,1311.36 790.155,1313.92 790.83,1300.64 791.506,1293.68 792.182,1283.86 792.857,1285.95 793.533,1290.78 794.208,1295.68 794.884,1295.34 795.559,1300.33 796.235,1300.1 796.911,1310.46 797.586,1323.56 798.262,1311.98 798.937,1317.24 799.613,1314.72 800.289,1318.71 800.964,1321.46 801.64,1319.02 802.315,1320.46 802.991,1321.92 803.666,1312.91 804.342,1308.95 805.018,1316.78 805.693,1308.95 806.369,1310.2 807.044,1310.14 807.72,1303.48 808.396,1304.62 809.071,1299.15 809.747,1293.56 810.422,1293.2 811.098,1287.48 811.773,1288.35 812.449,1291.92 813.125,1291.55 813.8,1284.49 814.476,1296.03 815.151,1306.37 815.827,1318.15 816.502,1322.25 817.178,1312.03 817.854,1313.39 818.529,1314.78 819.205,1325.34 819.88,1319.12 820.556,1311.43 821.232,1321.94 821.907,1314.32 822.583,1310.45 823.258,1320.95 823.934,1323.76 824.609,1318.79 825.285,1307.11 825.961,1308.35 826.636,1312.25 827.312,1318.84 827.987,1322.92 828.663,1323.15 829.339,1331.19 830.014,1334.17 830.69,1332.01 831.365,1320.67 832.041,1319.51 832.716,1315.7 833.392,1319.69 834.068,1314.57 834.743,1310.64 835.419,1318.48 836.094,1317.27 836.77,1318.66 837.446,1316.14 838.121,1313.56 838.797,1316.19 839.472,1313.61 840.148,1310.97 840.823,1305.63 841.499,1304.15 842.175,1307.94 842.85,1313.12 843.526,1318.38 844.201,1313.22 844.877,1315.85 845.553,1309.31 846.228,1311.88 846.904,1310.53 847.579,1313.12 848.255,1314.43 848.93,1310.51 849.606,1309.13 850.282,1305.09 850.957,1311.54 851.633,1306.23 852.308,1304.78 852.984,1311.23 853.66,1305.92 854.335,1304.46 855.011,1306.96 855.686,1302.88 856.362,1301.37 857.037,1305.14 857.713,1295.71 858.389,1290.05 859.064,1288.3 859.74,1278.44 860.415,1285.89 861.091,1282.73 861.766,1276.82 862.442,1276.2 863.118,1293 863.793,1283.36 864.469,1272.11 865.144,1271.43 865.82,1280.18 866.496,1295.7 867.171,1288.87 867.847,1275.16 868.522,1270.54 869.198,1275.28 869.873,1278.76 870.549,1272.91 871.225,1275.03 871.9,1283.88 872.576,1283.55 873.251,1289.87 873.927,1278.99 874.603,1287.91 875.278,1282.35 875.954,1283.35 876.629,1280.37 877.305,1285.34 877.98,1282.41 878.656,1283.43 879.332,1285.81 880.007,1282.91 880.683,1274.61 881.358,1264.75 882.034,1261.42 882.71,1272.86 883.385,1280.43 884.061,1286.79 884.736,1301.13 885.412,1302.57 886.087,1305.34 886.763,1305.55 887.439,1300.52 888.114,1296.68 888.79,1287.46 889.465,1299.18 890.141,1284.73 890.817,1291.14 891.492,1292.39 892.168,1296.29 892.843,1291.04 893.519,1292.28 894.194,1289.59 894.87,1293.45 895.546,1292.1 896.221,1294.69 896.897,1290.73 897.572,1288.01 898.248,1295.8 898.924,1290.55 899.599,1293.11 900.275,1281.16 900.95,1292.83 901.626,1280.88 902.301,1288.58 902.977,1287.15 903.653,1276.39 904.328,1273.38 905.004,1282.32 905.679,1290.05 906.355,1303.14 907.03,1294.16 907.706,1303.37 908.382,1289.12 909.057,1281.09 909.733,1298.02 910.408,1296.81 911.084,1287.66 911.76,1272.93 912.435,1280.54 913.111,1276.31 913.786,1272 914.462,1262.21 915.137,1271.03 915.813,1262.59 916.489,1259.35 917.164,1262.79 917.84,1266.29 918.515,1271.2 919.191,1268.19 919.867,1270.47 920.542,1272.8 921.218,1268.51 921.893,1270.82 922.569,1274.5 923.244,1276.92 923.92,1283.36 924.596,1274.03 925.271,1277.78 925.947,1276.3 926.622,1276.12 927.298,1269.29 927.974,1264.97 928.649,1257.87 929.325,1261.38 930,1280.89 930.676,1282.15 931.351,1276.84 932.027,1276.71 932.703,1277.91 933.378,1280.45 934.054,1293.53 934.729,1285.87 935.405,1299 936.081,1298.01 936.756,1294.38 937.432,1301.1 938.107,1297.53 938.783,1305.59 939.458,1296.89 940.134,1299.73 940.81,1286.92 941.485,1272.39 942.161,1266.79 942.836,1269.1 943.512,1276.76 944.188,1281.9 944.863,1293.67 945.539,1300.38 946.214,1309.77 946.89,1306.37 947.565,1308.07 948.241,1296.8 948.917,1298.31 949.592,1299.85 950.268,1301.41 950.943,1301.69 951.619,1305.88 952.294,1294.49 952.97,1301.16 953.646,1316.97 954.321,1313.66 954.997,1307.67 955.672,1323.53 956.348,1320.33 957.024,1317.05 957.699,1314.98 958.375,1325.75 959.05,1323.84 959.726,1328.31 960.401,1321.28 961.077,1328.25 961.753,1335.32 962.428,1327.13 963.104,1331.6 963.779,1324.57 964.455,1318.64 965.131,1303.4 965.806,1304.81 966.482,1297.05 967.157,1303.6 967.833,1307.64 968.508,1307.82 969.184,1306.69 969.86,1306.84 970.535,1309.61 971.211,1316.34 971.886,1320.57 972.562,1306.64 973.238,1308.07 973.913,1313.46 974.589,1307.18 975.264,1309.92 975.94,1306.17 976.615,1302.33 977.291,1298.41 977.967,1294.39 978.642,1288.95 979.318,1286.06 979.993,1285.77 980.669,1286.82 981.345,1289.22 982.02,1296.95 982.696,1295.58 983.371,1298.14 984.047,1304.69 984.722,1299.54 985.398,1306.11 986.074,1316.68 986.749,1315.71 987.425,1312.11 988.1,1308.42 988.776,1312.5 989.452,1299.61 990.127,1291.65 990.803,1290.14 991.478,1289.93 992.154,1287.06 992.829,1288.13 993.505,1297.17 994.181,1306.33 994.856,1314.3 995.532,1319.78 996.207,1313.66 996.883,1313.92 997.558,1318.08 998.234,1306.66 998.91,1306.76 999.585,1298.97 1000.26,1297.6 1000.94,1300.16 1001.61,1296.17 1002.29,1306.61 1002.96,1308.02 1003.64,1301.58 1004.31,1305.53 1004.99,1301.66 1005.67,1291.08 1006.34,1292.2 1007.02,1292.02 1007.69,1291.84 1008.37,1289 1009.04,1282.1 1009.72,1287.07 1010.39,1292.12 1011.07,1281.32 1011.75,1287.62 1012.42,1290.04 1013.1,1285.88 1013.77,1284.28 1014.45,1284 1015.12,1294.33 1015.8,1284.97 1016.47,1286.04 1017.15,1269.75 1017.83,1273.24 1018.5,1274.11 1019.18,1273.67 1019.85,1275.9 1020.53,1271.49 1021.2,1272.36 1021.88,1269.24 1022.56,1276.77 1023.23,1284.42 1023.91,1285.57 1024.58,1280.1 1025.26,1275.84 1025.93,1282.16 1026.61,1285.93 1027.28,1284.48 1027.96,1297.51 1028.64,1310.67 1029.31,1308.42 1029.99,1312.63 1030.66,1320.78 1031.34,1318.73 1032.01,1308.84 1032.69,1299.97 1033.36,1298.76 1034.04,1305.39 1034.72,1295.09 1035.39,1308.2 1036.07,1314.97 1036.74,1306.23 1037.42,1293.3 1038.09,1289.29 1038.77,1297.08 1039.44,1289.18 1040.12,1289.05 1040.8,1295.53 1041.47,1290.25 1042.15,1284.84 1042.82,1281.98 1043.5,1283.05 1044.17,1286.8 1044.85,1285.31 1045.52,1273.14 1046.2,1274.06 1046.88,1270.99 1047.55,1266.52 1048.23,1272.7 1048.9,1266.95 1049.58,1265.11 1050.25,1268.62 1050.93,1277.52 1051.61,1275.93 1052.28,1276.98 1052.96,1286 1053.63,1284.6 1054.31,1277.87 1054.98,1277.63 1055.66,1278.73 1056.33,1285.15 1057.01,1286.39 1057.69,1281.05 1058.36,1286.18 1059.04,1284.81 1059.71,1288.69 1060.39,1295.26 1061.06,1295.39 1061.74,1287.63 1062.41,1291.55 1063.09,1295.54 1063.77,1306.12 1064.44,1303.85 1065.12,1298.91 1065.79,1291.21 1066.47,1283.32 1067.14,1279.21 1067.82,1273.68 1068.49,1270.7 1069.17,1278.33 1069.85,1286.07 1070.52,1287.33 1071.2,1297.82 1071.87,1294.07 1072.55,1294.17 1073.22,1294.27 1073.9,1289.12 1074.57,1286.48 1075.25,1283.78 1075.93,1291.59 1076.6,1287.69 1077.28,1298.18 1077.95,1294.43 1078.63,1295.84 1079.3,1299.9 1079.98,1298.79 1080.66,1300.28 1081.33,1300.49 1082.01,1309.81 1082.68,1319.25 1083.36,1312.05 1084.03,1308.57 1084.71,1312.8 1085.38,1304.1 1086.06,1285.92 1086.74,1288.44 1087.41,1284.39 1088.09,1280.26 1088.76,1286.65 1089.44,1294.46 1090.11,1303.68 1090.79,1309.13 1091.46,1312.06 1092.14,1316.33 1092.82,1310.31 1093.49,1300.19 1094.17,1296.38 1094.84,1295.12 1095.52,1296.46 1096.19,1306.99 1096.87,1308.55 1097.54,1304.92 1098.22,1295.94 1098.9,1293.33 1099.57,1293.31 1100.25,1297.23 1100.92,1311.67 1101.6,1310.7 1102.27,1322.67 1102.95,1321.92 1103.62,1318.55 1104.3,1325.45 1104.98,1326.01 1105.65,1341.95 1106.33,1332.58 1107,1329.39 1107.68,1336.4 1108.35,1328.11 1109.03,1316.98 1109.71,1327.66 1110.38,1326.88 1111.06,1319.59 1111.73,1317.32 1112.41,1318.9 1113.08,1321.81 1113.76,1307.8 1114.43,1294.68 1115.11,1302.43 1115.79,1297.12 1116.46,1293.02 1117.14,1291.48 1117.81,1307.1 1118.49,1311.11 1119.16,1302.07 1119.84,1292.78 1120.51,1287.25 1121.19,1300.21 1121.87,1318.5 1122.54,1316.21 1123.22,1309.93 1123.89,1315.29 1124.57,1310.29 1125.24,1316.95 1125.92,1323.72 1126.59,1308.43 1127.27,1305.88 1127.95,1295.34 1128.62,1295.15 1129.3,1292.32 1129.97,1296.07 1130.65,1293.26 1131.32,1300.99 1132,1302.26 1132.67,1302.23 1133.35,1302.21 1134.03,1314 1134.7,1308.97 1135.38,1299.85 1136.05,1295.8 1136.73,1279.65 1137.4,1276.49 1138.08,1282.68 1138.76,1284.96 1139.43,1280.61 1140.11,1278.85 1140.78,1286.43 1141.46,1294.11 1142.13,1286.01 1142.81,1285.73 1143.48,1284.11 1144.16,1289.12 1144.84,1298.17 1145.51,1299.47 1146.19,1304.73 1146.86,1299.57 1147.54,1296.93 1148.21,1300.83 1148.89,1303.49 1149.56,1304.88 1150.24,1307.6 1150.92,1306.45 1151.59,1307.89 1152.27,1296.2 1152.94,1296.13 1153.62,1297.37 1154.29,1292.03 1154.97,1290.55 1155.64,1300.93 1156.32,1298.33 1157,1304.88 1157.67,1287.81 1158.35,1290.23 1159.02,1300.62 1159.7,1301.96 1160.37,1307.26 1161.05,1300.85 1161.72,1298.25 1162.4,1302.17 1163.08,1295.63 1163.75,1292.91 1164.43,1291.45 1165.1,1299.23 1165.78,1293.95 1166.45,1301.76 1167.13,1300.49 1167.81,1317.52 1168.48,1310.06 1169.16,1307.65 1169.83,1306.49 1170.51,1307.93 1171.18,1308.08 1171.86,1308.24 1172.53,1301.83 1173.21,1307.11 1173.89,1304.61 1174.56,1307.32 1175.24,1303.51 1175.91,1298.29 1176.59,1291.62 1177.26,1302.01 1177.94,1300.72 1178.61,1295.44 1179.29,1290.03 1179.97,1295.13 1180.64,1293.7 1181.32,1292.25 1181.99,1302.65 1182.67,1307.95 1183.34,1318.54 1184.02,1309.77 1184.69,1302.08 1185.37,1282.22 1186.05,1281.85 1186.72,1292.13 1187.4,1290.65 1188.07,1297.09 1188.75,1304.93 1189.42,1298.46 1190.1,1310.25 1190.77,1311.76 1191.45,1324.98 1192.13,1328.05 1192.8,1328.59 1193.48,1327.83 1194.15,1317.97 1194.83,1311.76 1195.5,1313.24 1196.18,1310.83 1196.86,1300.47 1197.53,1304.37 1198.21,1295.15 1198.88,1300.29 1199.56,1296.27 1200.23,1298.79 1200.91,1305.3 1201.58,1302.72 1202.26,1302.72 1202.94,1306.66 1203.61,1301.48 1204.29,1288.2 1204.96,1278.56 1205.64,1286.11 1206.31,1289.79 1206.99,1278.88 1207.66,1274.41 1208.34,1280.6 1209.02,1268.11 1209.69,1271.53 1210.37,1268.29 1211.04,1269.03 1211.72,1263.06 1212.39,1275.83 1213.07,1274.08 1213.74,1274.98 1214.42,1278.57 1215.1,1274.22 1215.77,1268.44 1216.45,1262.53 1217.12,1271.32 1217.8,1282.88 1218.47,1277.35 1219.15,1285.01 1219.83,1279.55 1220.5,1275.29 1221.18,1280.28 1221.85,1280.04 1222.53,1285.12 1223.2,1281.01 1223.88,1286.1 1224.55,1301.78 1225.23,1305.9 1225.91,1312.68 1226.58,1307.89 1227.26,1300.37 1227.93,1300.52 1228.61,1291.48 1229.28,1286.17 1229.96,1283.39 1230.63,1285.86 1231.31,1287.05 1231.99,1286.95 1232.66,1297.38 1233.34,1297.48 1234.01,1297.59 1234.69,1309.45 1235.36,1313.68 1236.04,1312.79 1236.71,1326.09 1237.39,1333.14 1238.07,1332.62 1238.74,1329.51 1239.42,1342.95 1240.09,1328.52 1240.77,1321.39 1241.44,1323.14 1242.12,1321.04 1242.79,1312.38 1243.47,1304.79 1244.15,1310.13 1244.82,1306.41 1245.5,1311.77 1246.17,1314.61 1246.85,1318.8 1247.52,1311.34 1248.2,1302.36 1248.88,1306.33 1249.55,1311.67 1250.23,1309.26 1250.9,1301.53 1251.58,1298.9 1252.25,1292.23 1252.93,1296.02 1253.6,1287.96 1254.28,1281.03 1254.96,1289.97 1255.63,1299.02 1256.31,1300.31 1256.98,1300.31 1257.66,1289.73 1258.33,1288.2 1259.01,1294.59 1259.68,1298.45 1260.36,1302.38 1261.04,1310.29 1261.71,1322.21 1262.39,1321.35 1263.06,1311.34 1263.74,1289.14 1264.41,1287.58 1265.09,1291.31 1265.76,1279.13 1266.44,1270.66 1267.12,1278.14 1267.79,1277.72 1268.47,1295.92 1269.14,1297.18 1269.82,1287.89 1270.49,1282.36 1271.17,1283.39 1271.84,1293.71 1272.52,1284.35 1273.2,1285.42 1273.87,1281.2 1274.55,1290.19 1275.22,1290.06 1275.9,1307.03 1276.57,1325.4 1277.25,1315.61 1277.93,1308.15 1278.6,1300.49 1279.28,1301.86 1279.95,1304.56 1280.63,1298.12 1281.3,1294.16 1281.98,1301.99 1282.65,1304.69 1283.33,1315.26 1284.01,1324.67 1284.68,1317.41 1285.36,1321.66 1286.03,1320.8 1286.71,1319.91 1287.38,1325.48 1288.06,1324.67 1288.73,1332.87 1289.41,1323.15 1290.09,1319.67 1290.76,1308.25 1291.44,1303.09 1292.11,1293.84 1292.79,1292.33 1293.46,1298.74 1294.14,1289.38 1294.81,1283.79 1295.49,1276.73 1296.17,1277.58 1296.84,1267.68 1297.52,1267.03 1298.19,1275.8 1298.87,1282.02 1299.54,1274.99 1300.22,1287.87 1300.89,1291.64 1301.57,1309.92 1302.25,1307.53 1302.92,1306.41 1303.6,1301.31 1304.27,1301.36 1304.95,1306.66 1305.62,1314.65 1306.3,1307.13 1306.98,1302.03 1307.65,1303.4 1308.33,1307.41 1309,1311.49 1309.68,1309.1 1310.35,1298.78 1311.03,1305.33 1311.7,1297.53 1312.38,1305.38 1313.06,1296.27 1313.73,1286.91 1314.41,1289.3 1315.08,1289.1 1315.76,1287.56 1316.43,1287.33 1317.11,1284.43 1317.78,1286.81 1318.46,1285.25 1319.14,1283.65 1319.81,1280.7 1320.49,1288.35 1321.16,1296.1 1321.84,1292.11 1322.51,1293.33 1323.19,1294.58 1323.86,1299.79 1324.54,1305.09 1325.22,1310.48 1325.89,1318.54 1326.57,1308.53 1327.24,1298.24 1327.92,1299.56 1328.59,1296.95 1329.27,1292.96 1329.94,1290.21 1330.62,1299.3 1331.3,1300.64 1331.97,1291.46 1332.65,1297.93 1333.32,1301.88 1334,1300.64 1334.67,1288.8 1335.35,1288.62 1336.03,1288.44 1336.7,1298.83 1337.38,1300.17 1338.05,1306.78 1338.73,1304.34 1339.4,1304.47 1340.08,1299.35 1340.75,1292.78 1341.43,1296.63 1342.11,1287.34 1342.78,1309.52 1343.46,1313.66 1344.13,1307.45 1344.81,1295.8 1345.48,1293.11 1346.16,1293 1346.83,1288.93 1347.51,1286.09 1348.19,1281.86 1348.86,1285.54 1349.54,1291.94 1350.21,1299.75 1350.89,1302.43 1351.56,1305.15 1352.24,1304 1352.91,1309.36 1353.59,1309.59 1354.27,1301.96 1354.94,1307.28 1355.62,1310.08 1356.29,1305.08 1356.97,1302.58 1357.64,1297.39 1358.32,1289.43 1358.99,1290.58 1359.67,1293.07 1360.35,1294.29 1361.02,1302.11 1361.7,1299.56 1362.37,1291.67 1363.05,1300.77 1363.72,1291.59 1364.4,1294.11 1365.08,1301.93 1365.75,1298.06 1366.43,1294.11 1367.1,1292.71 1367.78,1285.97 1368.45,1285.74 1369.13,1284.18 1369.8,1282.58 1370.48,1290.27 1371.16,1295.42 1371.83,1304.6 1372.51,1298.19 1373.18,1304.78 1373.86,1311.46 1374.53,1309.14 1375.21,1300.2 1375.88,1309.42 1376.56,1318.76 1377.24,1319.17 1377.91,1320.87 1378.59,1317.42 1379.26,1326.84 1379.94,1324.79 1380.61,1316.2 1381.29,1309.98 1381.96,1315.38 1382.64,1323.46 1383.32,1323.9 1383.99,1326.92 1384.67,1340.27 1385.34,1326.85 1386.02,1335.05 1386.69,1338.24 1387.37,1332.47 1388.04,1322.64 1388.72,1312.53 1389.4,1310.03 1390.07,1319.27 1390.75,1314.3 1391.42,1309.21 1392.1,1307.94 1392.77,1298.72 1393.45,1299.89 1394.13,1305.05 1394.8,1303.7 1395.48,1303.65 1396.15,1308.87 1396.83,1314.17 1397.5,1315.63 1398.18,1319.73 1398.85,1326.5 1399.53,1316.46 1400.21,1317.94 1400.88,1322.06 1401.56,1321.04 1402.23,1325.21 1402.91,1315.1 1403.58,1311.29 1404.26,1308.71 1404.93,1310.02 1405.61,1316.61 1406.29,1315.46 1406.96,1311.65 1407.64,1318.26 1408.31,1314.51 1408.99,1313.3 1409.66,1329.04 1410.34,1330.72 1411.01,1316.79 1411.69,1323.46 1412.37,1318.49 1413.04,1314.71 1413.72,1312.16 1414.39,1314.81 1415.07,1314.89 1415.74,1314.97 1416.42,1308.46 1417.09,1317.62 1417.77,1319.06 1418.45,1321.83 1419.12,1337.62 1419.8,1342 1420.47,1346.45 1421.15,1343.25 1421.82,1333.5 1422.5,1329.98 1423.18,1331.59 1423.85,1333.23 1424.53,1332.29 1425.2,1328.71 1425.88,1315.86 1426.55,1318.49 1427.23,1314.59 1427.9,1319.83 1428.58,1322.53 1429.26,1330.5 1429.93,1320.32 1430.61,1313.82 1431.28,1317.72 1431.96,1320.37 1432.63,1320.45 1433.31,1325.77 1433.98,1332.48 1434.66,1324.95 1435.34,1327.72 1436.01,1325.31 1436.69,1328.08 1437.36,1329.59 1438.04,1311.42 1438.71,1313.93 1439.39,1313.86 1440.06,1319.05 1440.74,1317.76 1441.42,1324.33 1442.09,1319.21 1442.77,1304.68 1443.44,1311.05 1444.12,1316.21 1444.79,1316.18 1445.47,1305.57 1446.15,1301.34 1446.82,1305.02 1447.5,1303.46 1448.17,1305.86 1448.85,1304.32 1449.52,1296.09 1450.2,1283.6 1450.87,1280.27 1451.55,1280.95 1452.23,1276.23 1452.9,1274.14 1453.58,1269.31 1454.25,1273.9 1454.93,1270.45 1455.6,1262.86 1456.28,1266.03 1456.95,1262.46 1457.63,1268.37 1458.31,1271.67 1458.98,1273.69 1459.66,1269.01 1460.33,1266.95 1461.01,1277.01 1461.68,1271.1 1462.36,1269.13 1463.03,1258.98 1463.71,1259.5 1464.39,1260.05 1465.06,1268.73 1465.74,1274.85 1466.41,1278.4 1467.09,1282.02 1467.76,1284.37 1468.44,1292.07 1469.11,1289.32 1469.79,1283.85 1470.47,1284.92 1471.14,1288.67 1471.82,1292.49 1472.49,1299 1473.17,1300.37 1473.84,1306.99 1474.52,1298.02 1475.2,1294.09 1475.87,1297.99 1476.55,1295.38 1477.22,1295.36 1477.9,1300.6 1478.57,1301.99 1479.25,1304.71 1479.92,1304.87 1480.6,1301.09 1481.28,1302.48 1481.95,1293.36 1482.63,1303.81 1483.3,1293.41 1483.98,1295.98 1484.65,1290.66 1485.33,1298.46 1486,1298.48 1486.68,1314.21 1487.36,1315.84 1488.03,1313.6 1488.71,1308.69 1489.38,1308.89 1490.06,1302.55 1490.73,1305.25 1491.41,1308 1492.08,1305.56 1492.76,1299.12 1493.44,1292.51 1494.11,1300.31 1494.79,1302.96 1495.46,1305.66 1496.14,1299.22 1496.81,1300.54 1497.49,1295.29 1498.16,1297.85 1498.84,1292.54 1499.52,1289.76 1500.19,1293.55 1500.87,1294.77 1501.54,1301.28 1502.22,1300.02 1502.89,1297.41 1503.57,1294.74 1504.25,1292.02 1504.92,1294.54 1505.6,1289.16 1506.27,1286.33 1506.95,1296.68 1507.62,1295.34 1508.3,1288.67 1508.97,1299.06 1509.65,1293.81 1510.33,1296.37 1511,1292.39 1511.68,1297.56 1512.35,1294.93 1513.03,1290.91 1513.7,1296.06 1514.38,1293.4 1515.05,1286.7 1515.73,1279.83 1516.41,1283.49 1517.08,1280.57 1517.76,1266.86 1518.43,1270.32 1519.11,1269.82 1519.78,1266.64 1520.46,1274.14 1521.13,1269.73 1521.81,1269.26 1522.49,1268.79 1523.16,1265.63 1523.84,1265.11 1524.51,1261.9 1525.19,1265.36 1525.86,1264.86 1526.54,1268.39 1527.21,1274.65 1527.89,1266.35 1528.57,1261.88 1529.24,1264.04 1529.92,1266.26 1530.59,1259.13 1531.27,1262.61 1531.94,1270.17 1532.62,1263.17 1533.3,1266.74 1533.97,1263.7 1534.65,1271.29 1535.32,1271.03 1536,1277.41 1536.67,1281.25 1537.35,1273.25 1538.02,1282.31 1538.7,1291.48 1539.38,1304.67 1540.05,1306.37 1540.73,1306.81 1541.4,1303.35 1542.08,1291.97 1542.75,1289.47 1543.43,1286.92 1544.1,1282.99 1544.78,1289.52 1545.46,1298.76 1546.13,1296.41 1546.81,1278.19 1547.48,1275.38 1548.16,1268.51 1548.83,1274.83 1549.51,1278.6 1550.18,1278.47 1550.86,1277.02 1551.54,1272.88 1552.21,1272.65 1552.89,1269.75 1553.56,1270.8 1554.24,1269.21 1554.91,1268.92 1555.59,1264.64 1556.26,1276.24 1556.94,1282.72 1557.62,1276.11 1558.29,1269.35 1558.97,1267.75 1559.64,1260.79 1560.32,1257.7 1560.99,1267.91 1561.67,1272.97 1562.35,1278.1 1563.02,1274.08 1563.7,1268.65 1564.37,1268.41 1565.05,1276.13 1565.72,1264.11 1566.4,1262.46 1567.07,1256.78 1567.75,1267.01 1568.43,1276.05 1569.1,1282.58 1569.78,1291.82 1570.45,1285.54 1571.13,1277.78 1571.8,1283.02 1572.48,1293.56 1573.15,1295.15 1573.83,1298.06 1574.51,1298.42 1575.18,1296.17 1575.86,1296.48 1576.53,1301.99 1577.21,1299.8 1577.88,1310.51 1578.56,1302.02 1579.23,1295.9 1579.91,1288.31 1580.59,1288.41 1581.26,1292.44 1581.94,1291.32 1582.61,1295.39 1583.29,1291.7 1583.96,1291.86 1584.64,1290.7 1585.31,1292.14 1585.99,1306.62 1586.67,1304.46 1587.34,1299.65 1588.02,1302.53 1588.69,1296.35 1589.37,1296.55 1590.04,1295.45 1590.72,1286.44 1591.4,1282.48 1592.07,1294.24 1592.75,1299.63 1593.42,1294.66 1594.1,1292.19 1594.77,1292.29 1595.45,1288.45 1596.12,1297.66 1596.8,1290 1597.48,1295.3 1598.15,1298.07 1598.83,1298.28 1599.5,1301.09 1600.18,1310.45 1600.85,1301.79 1601.53,1299.43 1602.2,1298.33 1602.88,1291.95 1603.56,1286.74 1604.23,1294.58 1604.91,1293.37 1605.58,1288.18 1606.26,1307.79 1606.93,1312.04 1607.61,1312.48 1608.28,1319.37 1608.96,1319.94 1609.64,1312.74 1610.31,1320.91 1610.99,1317.6 1611.66,1319.38 1612.34,1313.41 1613.01,1295.5 1613.69,1299.47 1614.36,1303.5 1615.04,1302.37 1615.72,1295.96 1616.39,1286.75 1617.07,1283.94 1617.74,1285.06 1618.42,1292.81 1619.09,1303.29 1619.77,1300.85 1620.45,1311.43 1621.12,1302.63 1621.8,1317.11 1622.47,1320.13 1623.15,1312.84 1623.82,1304.04 1624.5,1306.81 1625.17,1308.32 1625.85,1311.16 1626.53,1316.64 1627.2,1310.52 1627.88,1310.78 1628.55,1303.19 1629.23,1308.53 1629.9,1319.15 1630.58,1316.96 1631.25,1327.67 1631.93,1311.37 1632.61,1315.51 1633.28,1332.64 1633.96,1324.25 1634.63,1331.16 1635.31,1320.11 1635.98,1315.26 1636.66,1307.67 1637.33,1307.77 1638.01,1306.56 1638.69,1302.69 1639.36,1298.74 1640.04,1302.62 1640.71,1311.81 1641.39,1306.74 1642.06,1302.87 1642.74,1309.44 1643.41,1309.57 1644.09,1312.32 1644.77,1295.38 1645.44,1296.55 1646.12,1296.42 1646.79,1300.26 1647.47,1293.59 1648.14,1288.09 1648.82,1277.11 1649.5,1265.83 1650.17,1267.82 1650.85,1273.91 1651.52,1266.65 1652.2,1265.99 1652.87,1263.99 1653.55,1266.01 1654.22,1268.08 1654.9,1271.54 1655.58,1277.74 1656.25,1269.34 1656.93,1270.16 1657.6,1265.63 1658.28,1266.4 1658.95,1261.81 1659.63,1258.48 1660.3,1261.85 1660.98,1267.97 1661.66,1264.82 1662.33,1268.32 1663.01,1274.56 1663.68,1268.91 1664.36,1265.81 1665.03,1272.03 1665.71,1283.65 1666.38,1291.46 1667.06,1287.56 1667.74,1287.54 1668.41,1290.14 1669.09,1292.8 1669.76,1290.25 1670.44,1291.59 1671.11,1286.37 1671.79,1277.05 1672.47,1283.44 1673.14,1271.38 1673.82,1267.03 1674.49,1270.63 1675.17,1280.92 1675.84,1278.14 1676.52,1273.98 1677.19,1283 1677.87,1293.45 1678.55,1288.32 1679.22,1289.67 1679.9,1287.08 1680.57,1294.97 1681.25,1292.5 1681.92,1296.53 1682.6,1291.47 1683.27,1304.62 1683.95,1308.84 1684.63,1298.84 1685.3,1305.57 1685.98,1299.38 1686.65,1294.35 1687.33,1295.76 1688,1293.27 1688.68,1281.47 1689.35,1294.5 1690.03,1290.66 1690.71,1294.63 1691.38,1290.79 1692.06,1286.86 1692.73,1286.81 1693.41,1292.03 1694.08,1290.77 1694.76,1285.52 1695.43,1281.47 1696.11,1283.96 1696.79,1290.45 1697.46,1295.73 1698.14,1289.29 1698.81,1284.01 1699.49,1279.94 1700.16,1291.64 1700.84,1277.15 1701.52,1278.24 1702.19,1287.3 1702.87,1281.99 1703.54,1275.22 1704.22,1276.29 1704.89,1281.37 1705.57,1285.2 1706.24,1278.53 1706.92,1290.24 1707.6,1287.66 1708.27,1287.66 1708.95,1288.98 1709.62,1291.63 1710.3,1287.76 1710.97,1295.64 1711.65,1303.63 1712.32,1305.24 1713,1306.87 1713.68,1298.11 1714.35,1298.29 1715.03,1293.22 1715.7,1299.85 1716.38,1298.75 1717.05,1302.85 1717.73,1308.31 1718.4,1299.55 1719.08,1297.11 1719.76,1299.86 1720.43,1296.11 1721.11,1310.56 1721.78,1312.25 1722.46,1320.41 1723.13,1318.39 1723.81,1322.77 1724.48,1324.65 1725.16,1322.69 1725.84,1320.67 1726.51,1309.5 1727.19,1300.63 1727.86,1290.2 1728.54,1294.06 1729.21,1284.77 1729.89,1279.24 1730.57,1280.26 1731.24,1273.29 1731.92,1275.55 1732.59,1283.18 1733.27,1274.98 1733.94,1282.61 1734.62,1287.7 1735.29,1286.28 1735.97,1286.15 1736.65,1282.04 1737.32,1289.78 1738,1291.04 1738.67,1294.97 1739.35,1297.65 1740.02,1292.49 1740.7,1295.12 1741.37,1296.49 1742.05,1313.53 1742.73,1315.24 1743.4,1305.27 1744.08,1312.01 1744.75,1316.26 1745.43,1319.29 1746.1,1315.89 1746.78,1307.19 1747.45,1306.12 1748.13,1312.84 1748.81,1311.87 1749.48,1322.55 1750.16,1321.77 1750.83,1327.42 1751.51,1328.01 1752.18,1333.74 1752.86,1335.71 1753.53,1341.54 1754.21,1335.95 1754.89,1327.63 1755.56,1311.24 1756.24,1312.73 1756.91,1315.55 1757.59,1314.5 1758.26,1304.24 1758.94,1297.67 1759.62,1298.89 1760.29,1305.4 1760.97,1302.82 1761.64,1308.08 1762.32,1312.12 1762.99,1318.82 1763.67,1309.99 1764.34,1314.04 1765.02,1323.36 1765.7,1319.85 1766.37,1311.01 1767.05,1307.2 1767.72,1301.99 1768.4,1303.25 1769.07,1289.97 1769.75,1283.01 1770.42,1271.84 1771.1,1275.26 1771.78,1284.09 1772.45,1281.06 1773.13,1279.3 1773.8,1286.87 1774.48,1289.25 1775.15,1287.68 1775.83,1284.76 1776.5,1279.1 1777.18,1281.36 1777.86,1276.98 1778.53,1281.89 1779.21,1289.54 1779.88,1293.33 1780.56,1287.93 1781.23,1271.68 1781.91,1265.77 1782.58,1269.19 1783.26,1257.83 1783.94,1251.63 1784.61,1253.49 1785.29,1254.04 1785.96,1255.96 1786.64,1261.99 1787.31,1264.08 1787.99,1255.43 1788.67,1261.48 1789.34,1263.6 1790.02,1261.73 1790.69,1279.89 1791.37,1282.35 1792.04,1278.25 1792.72,1274.05 1793.39,1283.06 1794.07,1307.85 1794.75,1304.33 1795.42,1296.81 1796.1,1287.76 1796.77,1273.15 1797.45,1275.5 1798.12,1285.84 1798.8,1293.69 1799.47,1295.1 1800.15,1284.7 1800.83,1270.01 1801.5,1269.65 1802.18,1274.62 1802.85,1283.64 1803.53,1295.4 1804.2,1305.99 1804.88,1297.22 1805.55,1310.42 1806.23,1305.66 1806.91,1308.6 1807.58,1311.57 1808.26,1319.76 1808.93,1316.48 1809.61,1318.28 1810.28,1323.97 1810.96,1310.39 1811.63,1312.05 1812.31,1315.03 1812.99,1315.46 1813.66,1308.1 1814.34,1317.47 1815.01,1308.85 1815.69,1318.22 1816.36,1318.68 1817.04,1319.14 1817.72,1314.41 1818.39,1309.57 1819.07,1317.63 1819.74,1303.7 1820.42,1299.89 1821.09,1309.11 1821.77,1310.64 1822.44,1301.74 1823.12,1293.91 1823.8,1304.36 1824.47,1299.24 1825.15,1300.58 1825.82,1298 1826.5,1301.95 1827.17,1308.57 1827.85,1316.6 1828.52,1313.05 1829.2,1306.81 1829.88,1313.49 1830.55,1318.98 1831.23,1308.94 1831.9,1299.93 1832.58,1311.73 1833.25,1311.96 1833.93,1309.58 1834.6,1305.83 1835.28,1292.74 1835.96,1297.88 1836.63,1291.21 1837.31,1292.36 1837.98,1293.53 1838.66,1289.42 1839.33,1291.86 1840.01,1283.73 1840.68,1295.37 1841.36,1284.68 1842.04,1281.72 1842.71,1280.05 1843.39,1281.02 1844.06,1286.01 1844.74,1288.43 1845.41,1290.9 1846.09,1290.77 1846.77,1285.34 1847.44,1289.09 1848.12,1278.28 1848.79,1287.24 1849.47,1296.31 1850.14,1285.73 1850.82,1285.52 1851.49,1277.32 1852.17,1276.96 1852.85,1279.26 1853.52,1282.95 1854.2,1286.7 1854.87,1274.56 1855.55,1270.15 1856.22,1276.37 1856.9,1277.37 1857.57,1286.36 1858.25,1292.83 1858.93,1288.87 1859.6,1301.94 1860.28,1299.5 1860.95,1299.63 1861.63,1293.19 1862.3,1301.07 1862.98,1290.71 1863.65,1302.48 1864.33,1315.68 1865.01,1305.71 1865.68,1304.64 1866.36,1300.92 1867.03,1298.42 1867.71,1302.43 1868.38,1296.02 1869.06,1294.73 1869.73,1296.05 1870.41,1273.51 1871.09,1287.74 1871.76,1299.47 1872.44,1298.26 1873.11,1290.43 1873.79,1279.74 1874.46,1260.68 1875.14,1247.8 1875.82,1251 1876.49,1259.67 1877.17,1254.98 1877.84,1256.98 1878.52,1257.68 1879.19,1269.14 1879.87,1267.41 1880.54,1272.34 1881.22,1283.97 1881.9,1291.8 1882.57,1290.56 1883.25,1285.35 1883.92,1286.61 1884.6,1278.65 1885.27,1285.09 1885.95,1291.62 1886.62,1298.25 1887.3,1295.84 1887.98,1301.22 1888.65,1298.87 1889.33,1291.21 1890,1295.2 1890.68,1296.63 1891.35,1298.1 1892.03,1290.41 1892.7,1300.92 1893.38,1302.45 1894.06,1298.79 1894.73,1291.1 1895.41,1292.44 1896.08,1299.05 1896.76,1303.15 1897.43,1308.61 1898.11,1294.6 1898.79,1293.37 1899.46,1282.86 1900.14,1287.99 1900.81,1297.15 1901.49,1292.02 1902.16,1297.3 1902.84,1298.74 1903.51,1296.28 1904.19,1304.23 1904.87,1295.32 1905.54,1292.77 1906.22,1296.74 1906.89,1291.58 1907.57,1296.84 1908.24,1293 1908.92,1291.71 1909.59,1289.08 1910.27,1296.92 1910.95,1306.18 1911.62,1294.68 1912.3,1290.78 1912.97,1280.16 1913.65,1273.27 1914.32,1264.86 1915,1267.02 1915.67,1270.57 1916.35,1272.86 1917.03,1273.85 1917.7,1278.86 1918.38,1281.31 1919.05,1275.84 1919.73,1280.89 1920.4,1270.09 1921.08,1279.05 1921.75,1276.21 1922.43,1269.31 1923.11,1275.61 1923.78,1287.29 1924.46,1287.29 1925.13,1288.61 1925.81,1282.03 1926.48,1272.64 1927.16,1280.32 1927.84,1288.11 1928.51,1290.77 1929.19,1290.84 1929.86,1292.23 1930.54,1280.48 1931.21,1282.99 1931.89,1268.3 1932.56,1251.8 1933.24,1249.77 1933.92,1253.12 1934.59,1252.49 1935.27,1261.28 1935.94,1270.18 1936.62,1275.23 1937.29,1284.32 1937.97,1284.35 1938.64,1284.38 1939.32,1288.34 1940,1288.45 1940.67,1289.86 1941.35,1286.05 1942.02,1286.1 1942.7,1278.24 1943.37,1270.18 1944.05,1267.26 1944.72,1269.61 1945.4,1278.63 1946.08,1279.87 1946.75,1286.41 1947.43,1294.34 1948.1,1293.27 1948.78,1293.47 1949.45,1297.59 1950.13,1312.13 1950.8,1319.12 1951.48,1326.21 1952.16,1325.74 1952.83,1327.81 1953.51,1317.08 1954.18,1312.51 1954.86,1313 1955.53,1316.07 1956.21,1308.84 1956.89,1320.85 1957.56,1321.47 1958.24,1327.21 1958.91,1333.04 1959.59,1326.18 1960.26,1328.12 1960.94,1335.21 1961.61,1332.19 1962.29,1329.08 1962.97,1315.54 1963.64,1322.4 1964.32,1317.74 1964.99,1311.65 1965.67,1309.32 1966.34,1301.69 1967.02,1284.59 1967.69,1290.96 1968.37,1289.51 1969.05,1294.64 1969.72,1294.59 1970.4,1295.86 1971.07,1295.83 1971.75,1297.13 1972.42,1298.44 1973.1,1307.65 1973.77,1306.55 1974.45,1319.74 1975.13,1309.78 1975.8,1303.46 1976.48,1308.8 1977.15,1298.51 1977.83,1294.56 1978.5,1289.18 1979.18,1282.35 1979.85,1286.03 1980.53,1283.14 1981.21,1286.84 1981.88,1289.29 1982.56,1291.78 1983.23,1286.38 1983.91,1278.18 1984.58,1287.13 1985.26,1273.62 1985.94,1277.19 1986.61,1274.15 1987.29,1281.74 1987.96,1284.14 1988.64,1297.15 1989.31,1297.2 1989.99,1306.42 1990.66,1313.16 1991.34,1297.84 1992.02,1300.52 1992.69,1301.93 1993.37,1304.68 1994.04,1298.3 1994.72,1299.67 1995.39,1301.06 1996.07,1303.78 1996.74,1290.78 1997.42,1293.32 1998.1,1286.65 1998.77,1294.4 1999.45,1294.38 2000.12,1296.99 2000.8,1306.19 2001.47,1305.09 2002.15,1297.4 2002.82,1305.3 2003.5,1301.55 2004.18,1297.71 2004.85,1281.84 2005.53,1293.49 2006.2,1293.44 2006.88,1294.71 2007.55,1303.88 2008.23,1297.47 2008.9,1292.22 2009.58,1294.79 2010.26,1296.08 2010.93,1293.44 2011.61,1293.39 2012.28,1305.16 2012.96,1302.72 2013.63,1305.47 2014.31,1306.96 2014.99,1308.47 2015.66,1306.09 2016.34,1310.19 2017.01,1305.22 2017.69,1298.81 2018.36,1294.88 2019.04,1298.78 2019.71,1294.85 2020.39,1290.84 2021.07,1290.71 2021.74,1299.81 2022.42,1305.11 2023.09,1313.1 2023.77,1312.11 2024.44,1304.55 2025.12,1300.74 2025.79,1307.35 2026.47,1308.84 2027.15,1309.04 2027.82,1297.43 2028.5,1294.77 2029.17,1294.69 2029.85,1295.93 2030.52,1298.52 2031.2,1297.2 2031.87,1291.89 2032.55,1294.4 2033.23,1294.33 2033.9,1292.93 2034.58,1296.79 2035.25,1298.08 2035.93,1291.47 2036.6,1292.67 2037.28,1299.16 2037.95,1301.82 2038.63,1305.83 2039.31,1302.05 2039.98,1296.86 2040.66,1295.52 2041.33,1288.85 2042.01,1286.01 2042.68,1288.43 2043.36,1296.19 2044.04,1286.9 2044.71,1280.03 2045.39,1287.68 2046.06,1290.15 2046.74,1299.26 2047.41,1300.62 2048.09,1299.38 2048.76,1303.37 2049.44,1306.12 2050.12,1297.11 2050.79,1301.06 2051.47,1294.55 2052.14,1290.54 2052.82,1275.76 2053.49,1283.35 2054.17,1276.42 2054.84,1274.69 2055.52,1276.95 2056.2,1277.92 2056.87,1284.24 2057.55,1280.05 2058.22,1278.43 2058.9,1288.74 2059.57,1288.64 2060.25,1284.56 2060.92,1276.39 2061.6,1276.05 2062.28,1256.9 2062.95,1254.84 2063.63,1250.03 2064.3,1257.35 2064.98,1262.09 2065.65,1266.91 2066.33,1259.75 2067,1252.42 2067.68,1251.72 2068.36,1267.16 2069.03,1264.09 2069.71,1269 2070.38,1268.66 2071.06,1274.98 2071.73,1270.78 2072.41,1263.82 2073.09,1248.59 2073.76,1237.01 2074.44,1242.89 2075.11,1242.11 2075.79,1249.44 2076.46,1251.51 2077.14,1238.76 2077.81,1240.66 2078.49,1241.26 2079.17,1243.23 2079.84,1242.55 2080.52,1247.27 2081.19,1252.07 2081.87,1259.63 2082.54,1267.29 2083.22,1276.38 2083.89,1269.81 2084.57,1273.67 2085.25,1267.03 2085.92,1272.17 2086.6,1280.01 2087.27,1272.22 2087.95,1261.57 2088.62,1270.59 2089.3,1277.1 2089.97,1274.52 2090.65,1282.4 2091.33,1275.99 2092,1286.5 2092.68,1277.56 2093.35,1273.67 2094.03,1290.67 2094.7,1284.46 2095.38,1285.94 2096.05,1295.27 2096.73,1291.75 2097.41,1295.96 2098.08,1283.3 2098.76,1291.27 2099.43,1275.82 2100.11,1279.75 2100.78,1274.53 2101.46,1269.19 2102.14,1263.72 2102.81,1262.13 2103.49,1261.84 2104.16,1264.22 2104.84,1259.99 2105.51,1265 2106.19,1263.47 2106.86,1261.9 2107.54,1264.3 2108.22,1262.77 2108.89,1262.53 2109.57,1263.63 2110.24,1262.09 2110.92,1261.86 2111.59,1257.63 2112.27,1262.64 2112.94,1250.43 2113.62,1254 2114.3,1260.3 2114.97,1262.72 2115.65,1282.29 2116.32,1287.71 2117,1289.32 2117.67,1285.75 2118.35,1282.09 2119.02,1283.57 2119.7,1285.09 2120.38,1276.15 2121.05,1268.29 2121.73,1266.86 2122.4,1269.37 2123.08,1273.26 2123.75,1274.57 2124.43,1292.89 2125.11,1298.46 2125.78,1291.17 2126.46,1291.5 2127.13,1300.91 2127.81,1307.86 2128.48,1318.74 2129.16,1311.9 2129.83,1315.16 2130.51,1312.05 2131.19,1307.56 2131.86,1315.84 2132.54,1312.7 2133.21,1301.72 2133.89,1299.54 2134.56,1295.99 2135.24,1306.66 2135.91,1303.26 2136.59,1306.26 2137.27,1298.93 2137.94,1300.54 2138.62,1298.27 2139.29,1293.33 2139.97,1296.13 2140.64,1289.81 2141.32,1293.85 2141.99,1294.03 2142.67,1296.82 2143.35,1299.66 2144.02,1292.1 2144.7,1284.34 2145.37,1289.58 2146.05,1281.75 2146.72,1276.38 2147.4,1280.17 2148.07,1285.35 2148.75,1302.37 2149.43,1298.79 2150.1,1300.35 2150.78,1299.33 2151.45,1304.8 2152.13,1310.34 2152.8,1313.39 2153.48,1302.22 2154.16,1293.35 2154.83,1286.88 2155.51,1286.85 2156.18,1282.87 2156.86,1280.11 2157.53,1277.31 2158.21,1278.43 2158.88,1271.59 2159.56,1268.61 2160.24,1268.25 2160.91,1269.22 2161.59,1274.21 2162.26,1279.28 2162.94,1287.07 2163.61,1288.41 2164.29,1291.09 2164.96,1285.94 2165.64,1278.01 2166.32,1277.85 2166.99,1276.37 2167.67,1278.84 2168.34,1286.63 2169.02,1287.97 2169.69,1286.71 2170.37,1281.46 2171.04,1285.34 2171.72,1282.7 2172.4,1287.92 2173.07,1294.53 2173.75,1288.15 2174.42,1305.19 2175.1,1301.67 2175.77,1294.15 2176.45,1295.61 2177.12,1291.86 2177.8,1286.7 2178.48,1290.65 2179.15,1288.1 2179.83,1294.69 2180.5,1303.98 2181.18,1296.48 2181.85,1300.58 2182.53,1299.53 2183.21,1294.53 2183.88,1299.9 2184.56,1297.51 2185.23,1305.52 2185.91,1303.25 2186.58,1294.38 2187.26,1301.03 2187.93,1301.26 2188.61,1300.18 2189.29,1288.57 2189.96,1287.23 2190.64,1280.56 2191.31,1275.06 2191.99,1274.78 2192.66,1277.15 2193.34,1286.19 2194.01,1282.17 2194.69,1278.07 2195.37,1279.18 2196.04,1281.65 2196.72,1286.81 2197.39,1301.21 2198.07,1301.47 2198.74,1299.11 2199.42,1303.23 2200.09,1303.52 2200.77,1315.47 2201.45,1322.43 2202.12,1330.75 2202.8,1327.7 2203.47,1323.28 2204.15,1336.7 2204.82,1322.18 2205.5,1316.28 2206.17,1295.83 2206.85,1289.26 2207.53,1302.32 2208.2,1302.47 2208.88,1302.62 2209.55,1310.61 2210.23,1308.31 2210.9,1302.03 2211.58,1303.47 2212.26,1303.63 2212.93,1307.7 2213.61,1305.32 2214.28,1296.31 2214.96,1297.63 2215.63,1298.97 2216.31,1289.79 2216.98,1294.94 2217.66,1290.95 2218.34,1292.17 2219.01,1296.05 2219.69,1303.93 2220.36,1304.09 2221.04,1292.4 2221.71,1298.92 2222.39,1293.7 2223.06,1283.05 2223.74,1289.42 2224.42,1295.9 2225.09,1295.9 2225.77,1287.97 2226.44,1304.93 2227.12,1303.8 2227.79,1306.57 2228.47,1302.85 2229.14,1304.29 2229.82,1301.82 2230.5,1300.61 2231.17,1308.55 2231.85,1306.17 2232.52,1306.35 2233.2,1306.53 2233.87,1308.01 2234.55,1308.22 2235.22,1297.93 2235.9,1300.56 2236.58,1300.61 2237.25,1309.83 2237.93,1307.45 2238.6,1295.81 2239.28,1297.07 2239.95,1290.44 2240.63,1292.93 2241.31,1296.79 2241.98,1298.08 2242.66,1290.15 2243.33,1296.61 2244.01,1296.58 2244.68,1292.59 2245.36,1293.81 2246.03,1301.64 2246.71,1293.81 2247.39,1280.45 2248.06,1276.11 2248.74,1275.69 2249.41,1275.27 2250.09,1270.83 2250.76,1262.26 2251.44,1268.34 2252.11,1279.86 2252.79,1280.91 2253.47,1289.93 2254.14,1287.21 2254.82,1295 2255.49,1298.97 2256.17,1303 2256.84,1308.4 2257.52,1299.53 2258.19,1304.87 2258.87,1293.26 2259.55,1291.92 2260.22,1301.07 2260.9,1302.51 2261.57,1302.67 2262.25,1311.96 2262.92,1308.38 2263.6,1309.94 2264.27,1318.02 2264.95,1305.44 2265.63,1305.62 2266.3,1297.93 2266.98,1301.9 2267.65,1303.31 2268.33,1299.5 2269,1304.8 2269.68,1299.71 2270.36,1301.07 2271.03,1307.7 2271.71,1301.36 2272.38,1304.06 2273.06,1302.87 2273.73,1310.83 2274.41,1314.99 2275.08,1311.42 2275.76,1325.94 2276.44,1341.87 2277.11,1327.32 2277.79,1331.72 2278.46,1338.75 2279.14,1333.07 2279.81,1336.26 2280.49,1334.35 2281.16,1328.51 2281.84,1323.82 2282.52,1322.9 2283.19,1325.86 2283.87,1323.67 2284.54,1320.13 2285.22,1321.71 2285.89,1323.32 2286.57,1313.21 2287.24,1313.34 2287.92,1317.4 2288.6,1316.29 2289.27,1315.17 2289.95,1314.01 2290.62,1314.14 2291.3,1311.64 2291.97,1298.52 \"/>\n<path clip-path=\"url(#clip102)\" d=\"M941.485 1296.85 L942.161 1296.85 L942.836 1296.85 L943.512 1296.85 L944.188 1296.85 L944.863 1296.85 L945.539 1296.85 L946.214 1296.85 L946.89 1296.85 L947.565 1296.85 L948.241 1296.85 L948.917 1296.85 L949.592 1296.85 L950.268 1296.85 L950.943 1296.85 L951.619 1296.85 L952.294 1296.85 L952.97 1296.85 L953.646 1296.85 L954.321 1296.85 L954.997 1296.85 L955.672 1296.85 L956.348 1296.85 L957.024 1296.85 L957.699 1296.85 L958.375 1296.85 L959.05 1296.85 L959.726 1296.85 L960.401 1296.85 L961.077 1296.85 L961.753 1296.85 L962.428 1296.85 L963.104 1296.85 L963.779 1296.85 L964.455 1296.85 L965.131 1296.85 L965.806 1296.85 L966.482 1296.85 L967.157 1296.85 L967.833 1296.85 L968.508 1296.85 L969.184 1296.85 L969.86 1296.85 L970.535 1296.85 L971.211 1296.85 L971.886 1296.85 L972.562 1296.85 L973.238 1296.85 L973.913 1296.85 L974.589 1296.85 L975.264 1296.85 L975.94 1296.85 L976.615 1296.85 L977.291 1296.85 L977.967 1296.85 L978.642 1296.85 L979.318 1296.85 L979.993 1296.85 L980.669 1296.85 L981.345 1296.85 L982.02 1296.85 L982.696 1296.85 L983.371 1296.85 L984.047 1296.85 L984.722 1296.85 L985.398 1296.85 L986.074 1296.85 L986.749 1296.85 L987.425 1296.85 L988.1 1296.85 L988.776 1296.85 L989.452 1296.85 L990.127 1296.85 L990.803 1296.85 L991.478 1296.85 L992.154 1296.85 L992.829 1296.85 L993.505 1296.85 L994.181 1296.85 L994.856 1296.85 L995.532 1296.85 L996.207 1296.85 L996.883 1296.85 L997.558 1296.85 L998.234 1296.85 L998.91 1296.85 L999.585 1296.85 L1000.26 1296.85 L1000.94 1296.85 L1001.61 1296.85 L1002.29 1296.85 L1002.96 1296.85 L1003.64 1296.85 L1004.31 1296.85 L1004.99 1296.85 L1005.67 1296.85 L1006.34 1296.85 L1007.02 1296.85 L1007.69 1296.85 L1008.37 1296.85 L1009.04 1296.85 L1009.72 1296.85 L1010.39 1296.85 L1011.07 1296.85 L1011.75 1296.85 L1012.42 1296.85 L1013.1 1296.85 L1013.77 1296.85 L1014.45 1296.85 L1015.12 1296.85 L1015.8 1296.85 L1016.47 1296.85 L1017.15 1296.85 L1017.83 1296.85 L1018.5 1296.85 L1019.18 1296.85 L1019.85 1296.85 L1020.53 1296.85 L1021.2 1296.85 L1021.88 1296.85 L1022.56 1296.85 L1023.23 1296.85 L1023.91 1296.85 L1024.58 1296.85 L1025.26 1296.85 L1025.93 1296.85 L1026.61 1296.85 L1027.28 1296.85 L1027.96 1296.85 L1028.64 1296.85 L1029.31 1296.85 L1029.99 1296.85 L1030.66 1296.85 L1031.34 1296.85 L1032.01 1296.85 L1032.69 1296.85 L1033.36 1296.85 L1034.04 1296.85 L1034.72 1296.85 L1035.39 1296.85 L1036.07 1296.85 L1036.74 1296.85 L1037.42 1296.85 L1038.09 1296.85 L1038.77 1296.85 L1039.44 1296.85 L1040.12 1296.85 L1040.8 1296.85 L1041.47 1296.85 L1042.15 1296.85 L1042.82 1296.85 L1043.5 1296.85 L1044.17 1296.85 L1044.85 1296.85 L1045.52 1296.85 L1046.2 1296.85 L1046.88 1296.85 L1047.55 1296.85 L1048.23 1296.85 L1048.9 1296.85 L1049.58 1296.85 L1050.25 1296.85 L1050.93 1296.85 L1051.61 1296.85 L1052.28 1296.85 L1052.96 1296.85 L1053.63 1296.85 L1054.31 1296.85 L1054.98 1296.85 L1055.66 1296.85 L1056.33 1296.85 L1057.01 1296.85 L1057.69 1296.85 L1058.36 1296.85 L1059.04 1296.85 L1059.71 1296.85 L1060.39 1296.85 L1061.06 1296.85 L1061.74 1296.85 L1062.41 1296.85 L1063.09 1296.85 L1063.77 1296.85 L1064.44 1296.85 L1065.12 1296.85 L1065.79 1296.85 L1066.47 1296.85 L1067.14 1296.85 L1067.82 1296.85 L1068.49 1296.85 L1069.17 1296.85 L1069.85 1296.85 L1070.52 1296.85 L1071.2 1296.85 L1071.87 1296.85 L1072.55 1296.85 L1073.22 1296.85 L1073.9 1296.85 L1074.57 1296.85 L1075.25 1296.85 L1075.93 1296.85 L1076.6 1296.85 L1077.28 1296.85 L1077.95 1296.85 L1078.63 1296.85 L1079.3 1296.85 L1079.98 1296.85 L1080.66 1296.85 L1081.33 1296.85 L1082.01 1296.85 L1082.68 1296.85 L1083.36 1296.85 L1084.03 1296.85 L1084.71 1296.85 L1085.38 1296.85 L1086.06 1296.85 L1086.74 1296.85 L1087.41 1296.85 L1088.09 1296.85 L1088.76 1296.85 L1089.44 1296.85 L1090.11 1296.85 L1090.79 1296.85 L1091.46 1296.85 L1092.14 1296.85 L1092.82 1296.85 L1093.49 1296.85 L1094.17 1296.85 L1094.84 1296.85 L1095.52 1296.85 L1096.19 1296.85 L1096.87 1296.85 L1097.54 1296.85 L1098.22 1296.85 L1098.9 1296.85 L1099.57 1296.85 L1100.25 1296.85 L1100.92 1296.85 L1101.6 1296.85 L1102.27 1296.85 L1102.95 1296.85 L1103.62 1296.85 L1104.3 1296.85 L1104.98 1296.85 L1105.65 1296.85 L1106.33 1296.85 L1107 1296.85 L1107.68 1296.85 L1108.35 1296.85 L1109.03 1296.85 L1109.71 1296.85 L1110.38 1296.85 L1111.06 1296.85 L1111.73 1296.85 L1112.41 1296.85 L1113.08 1296.85 L1113.76 1296.85 L1114.43 1296.85 L1115.11 1296.85 L1115.79 1296.85 L1116.46 1296.85 L1117.14 1296.85 L1117.81 1296.85 L1118.49 1296.85 L1119.16 1296.85 L1119.84 1296.85 L1120.51 1296.85 L1121.19 1296.85 L1121.87 1296.85 L1122.54 1296.85 L1123.22 1296.85 L1123.89 1296.85 L1124.57 1296.85 L1125.24 1296.85 L1125.92 1296.85 L1126.59 1296.85 L1127.27 1296.85 L1127.95 1296.85 L1128.62 1296.85 L1129.3 1296.85 L1129.97 1296.85 L1130.65 1296.85 L1131.32 1296.85 L1132 1296.85 L1132.67 1296.85 L1133.35 1296.85 L1134.03 1296.85 L1134.7 1296.85 L1135.38 1296.85 L1136.05 1296.85 L1136.73 1296.85 L1137.4 1296.85 L1138.08 1296.85 L1138.76 1296.85 L1139.43 1296.85 L1140.11 1296.85 L1140.78 1296.85 L1141.46 1296.85 L1142.13 1296.85 L1142.81 1296.85 L1143.48 1296.85 L1144.16 1296.85 L1144.84 1296.85 L1145.51 1296.85 L1146.19 1296.85 L1146.86 1296.85 L1147.54 1296.85 L1148.21 1296.85 L1148.89 1296.85 L1149.56 1296.85 L1150.24 1296.85 L1150.92 1296.85 L1151.59 1296.85 L1152.27 1296.85 L1152.94 1296.85 L1153.62 1296.85 L1154.29 1296.85 L1154.97 1296.85 L1155.64 1296.85 L1156.32 1296.85 L1157 1296.85 L1157.67 1296.85 L1158.35 1296.85 L1159.02 1296.85 L1159.7 1296.85 L1160.37 1296.85 L1161.05 1296.85 L1161.72 1296.85 L1162.4 1296.85 L1163.08 1296.85 L1163.75 1296.85 L1164.43 1296.85 L1165.1 1296.85 L1165.78 1296.85 L1166.45 1296.85 L1167.13 1296.85 L1167.81 1296.85 L1168.48 1296.85 L1169.16 1296.85 L1169.83 1296.85 L1170.51 1296.85 L1171.18 1296.85 L1171.86 1296.85 L1172.53 1296.85 L1173.21 1296.85 L1173.89 1296.85 L1174.56 1296.85 L1175.24 1296.85 L1175.91 1296.85 L1176.59 1296.85 L1177.26 1296.85 L1177.94 1296.85 L1178.61 1296.85 L1179.29 1296.85 L1179.97 1296.85 L1180.64 1296.85 L1181.32 1296.85 L1181.99 1296.85 L1182.67 1296.85 L1183.34 1296.85 L1184.02 1296.85 L1184.69 1296.85 L1185.37 1296.85 L1186.05 1296.85 L1186.72 1296.85 L1187.4 1296.85 L1188.07 1296.85 L1188.75 1296.85 L1189.42 1296.85 L1190.1 1296.85 L1190.77 1296.85 L1191.45 1296.85 L1192.13 1296.85 L1192.8 1296.85 L1193.48 1296.85 L1194.15 1296.85 L1194.83 1296.85 L1195.5 1296.85 L1196.18 1296.85 L1196.86 1296.85 L1197.53 1296.85 L1198.21 1296.85 L1198.88 1296.85 L1199.56 1296.85 L1200.23 1296.85 L1200.91 1296.85 L1201.58 1296.85 L1202.26 1296.85 L1202.94 1296.85 L1203.61 1296.85 L1204.29 1296.85 L1204.96 1296.85 L1205.64 1296.85 L1206.31 1296.85 L1206.99 1296.85 L1207.66 1296.85 L1208.34 1296.85 L1209.02 1296.85 L1209.69 1296.85 L1210.37 1296.85 L1211.04 1296.85 L1211.72 1296.85 L1212.39 1296.85 L1213.07 1296.85 L1213.74 1296.85 L1214.42 1296.85 L1215.1 1296.85 L1215.77 1296.85 L1216.45 1296.85 L1217.12 1296.85 L1217.8 1296.85 L1218.47 1296.85 L1219.15 1296.85 L1219.83 1296.85 L1220.5 1296.85 L1221.18 1296.85 L1221.85 1296.85 L1222.53 1296.85 L1223.2 1296.85 L1223.88 1296.85 L1224.55 1296.85 L1225.23 1296.85 L1225.91 1296.85 L1226.58 1296.85 L1227.26 1296.85 L1227.93 1296.85 L1228.61 1296.85 L1229.28 1296.85 L1229.96 1296.85 L1230.63 1296.85 L1231.31 1296.85 L1231.99 1296.85 L1232.66 1296.85 L1233.34 1296.85 L1234.01 1296.85 L1234.69 1296.85 L1235.36 1296.85 L1236.04 1296.85 L1236.71 1296.85 L1237.39 1296.85 L1238.07 1296.85 L1238.74 1296.85 L1239.42 1296.85 L1240.09 1296.85 L1240.77 1296.85 L1241.44 1296.85 L1242.12 1296.85 L1242.79 1296.85 L1243.47 1296.85 L1244.15 1296.85 L1244.82 1296.85 L1245.5 1296.85 L1246.17 1296.85 L1246.85 1296.85 L1247.52 1296.85 L1248.2 1296.85 L1248.88 1296.85 L1249.55 1296.85 L1250.23 1296.85 L1250.9 1296.85 L1251.58 1296.85 L1252.25 1296.85 L1252.93 1296.85 L1253.6 1296.85 L1254.28 1296.85 L1254.96 1296.85 L1255.63 1296.85 L1256.31 1296.85 L1256.98 1296.85 L1257.66 1296.85 L1258.33 1296.85 L1259.01 1296.85 L1259.68 1296.85 L1260.36 1296.85 L1261.04 1296.85 L1261.71 1296.85 L1262.39 1296.85 L1263.06 1296.85 L1263.74 1296.85 L1264.41 1296.85 L1265.09 1296.85 L1265.76 1296.85 L1266.44 1296.85 L1267.12 1296.85 L1267.79 1296.85 L1268.47 1296.85 L1269.14 1296.85 L1269.82 1296.85 L1270.49 1296.85 L1271.17 1296.85 L1271.84 1296.85 L1272.52 1296.85 L1273.2 1296.85 L1273.87 1296.85 L1274.55 1296.85 L1275.22 1296.85 L1275.9 1296.85 L1276.57 1296.85 L1277.25 1296.85 L1277.93 1296.85 L1278.6 1296.85 L1279.28 1296.85 L1279.95 1296.85 L1280.63 1296.85 L1281.3 1296.85 L1281.98 1296.85 L1282.65 1296.85 L1283.33 1296.85 L1284.01 1296.85 L1284.68 1296.85 L1285.36 1296.85 L1286.03 1296.85 L1286.71 1296.85 L1287.38 1296.85 L1288.06 1296.85 L1288.73 1296.85 L1289.41 1296.85 L1290.09 1296.85 L1290.76 1296.85 L1291.44 1296.85 L1292.11 1296.85 L1292.79 1296.85 L1293.46 1296.85 L1294.14 1296.85 L1294.81 1296.85 L1295.49 1296.85 L1296.17 1296.85 L1296.84 1296.85 L1297.52 1296.85 L1298.19 1296.85 L1298.87 1296.85 L1299.54 1296.85 L1300.22 1296.85 L1300.89 1296.85 L1301.57 1296.85 L1302.25 1296.85 L1302.92 1296.85 L1303.6 1296.85 L1304.27 1296.85 L1304.95 1296.85 L1305.62 1296.85 L1306.3 1296.85 L1306.98 1296.85 L1307.65 1296.85 L1308.33 1296.85 L1309 1296.85 L1309.68 1296.85 L1310.35 1296.85 L1311.03 1296.85 L1311.7 1296.85 L1312.38 1296.85 L1313.06 1296.85 L1313.73 1296.85 L1314.41 1296.85 L1315.08 1296.85 L1315.76 1296.85 L1316.43 1296.85 L1317.11 1296.85 L1317.78 1296.85 L1318.46 1296.85 L1319.14 1296.85 L1319.81 1296.85 L1320.49 1296.85 L1321.16 1296.85 L1321.84 1296.85 L1322.51 1296.85 L1323.19 1296.85 L1323.86 1296.85 L1324.54 1296.85 L1325.22 1296.85 L1325.89 1296.85 L1326.57 1296.85 L1327.24 1296.85 L1327.92 1296.85 L1328.59 1296.85 L1329.27 1296.85 L1329.94 1296.85 L1330.62 1296.85 L1331.3 1296.85 L1331.97 1296.85 L1332.65 1296.85 L1333.32 1296.85 L1334 1296.85 L1334.67 1296.85 L1335.35 1296.85 L1336.03 1296.85 L1336.7 1296.85 L1337.38 1296.85 L1338.05 1296.85 L1338.73 1296.85 L1339.4 1296.85 L1340.08 1296.85 L1340.75 1296.85 L1341.43 1296.85 L1342.11 1296.85 L1342.78 1296.85 L1343.46 1296.85 L1344.13 1296.85 L1344.81 1296.85 L1345.48 1296.85 L1346.16 1296.85 L1346.83 1296.85 L1347.51 1296.85 L1348.19 1296.85 L1348.86 1296.85 L1349.54 1296.85 L1350.21 1296.85 L1350.89 1296.85 L1351.56 1296.85 L1352.24 1296.85 L1352.91 1296.85 L1353.59 1296.85 L1354.27 1296.85 L1354.94 1296.85 L1355.62 1296.85 L1356.29 1296.85 L1356.97 1296.85 L1357.64 1296.85 L1358.32 1296.85 L1358.99 1296.85 L1359.67 1296.85 L1360.35 1296.85 L1361.02 1296.85 L1361.7 1296.85 L1362.37 1296.85 L1363.05 1296.85 L1363.72 1296.85 L1364.4 1296.85 L1365.08 1296.85 L1365.75 1296.85 L1366.43 1296.85 L1367.1 1296.85 L1367.78 1296.85 L1368.45 1296.85 L1369.13 1296.85 L1369.8 1296.85 L1370.48 1296.85 L1371.16 1296.85 L1371.83 1296.85 L1372.51 1296.85 L1373.18 1296.85 L1373.86 1296.85 L1374.53 1296.85 L1375.21 1296.85 L1375.88 1296.85 L1376.56 1296.85 L1377.24 1296.85 L1377.91 1296.85 L1378.59 1296.85 L1379.26 1296.85 L1379.94 1296.85 L1380.61 1296.85 L1381.29 1296.85 L1381.96 1296.85 L1382.64 1296.85 L1383.32 1296.85 L1383.99 1296.85 L1384.67 1296.85 L1385.34 1296.85 L1386.02 1296.85 L1386.69 1296.85 L1387.37 1296.85 L1388.04 1296.85 L1388.72 1296.85 L1389.4 1296.85 L1390.07 1296.85 L1390.75 1296.85 L1391.42 1296.85 L1392.1 1296.85 L1392.77 1296.85 L1393.45 1296.85 L1394.13 1296.85 L1394.8 1296.85 L1395.48 1296.85 L1396.15 1296.85 L1396.83 1296.85 L1397.5 1296.85 L1398.18 1296.85 L1398.85 1296.85 L1399.53 1296.85 L1400.21 1296.85 L1400.88 1296.85 L1401.56 1296.85 L1402.23 1296.85 L1402.91 1296.85 L1403.58 1296.85 L1404.26 1296.85 L1404.93 1296.85 L1405.61 1296.85 L1406.29 1296.85 L1406.96 1296.85 L1407.64 1296.85 L1408.31 1296.85 L1408.99 1296.85 L1409.66 1296.85 L1410.34 1296.85 L1411.01 1296.85 L1411.69 1296.85 L1412.37 1296.85 L1413.04 1296.85 L1413.72 1296.85 L1414.39 1296.85 L1415.07 1296.85 L1415.74 1296.85 L1416.42 1296.85 L1417.09 1296.85 L1417.77 1296.85 L1418.45 1296.85 L1419.12 1296.85 L1419.8 1296.85 L1420.47 1296.85 L1421.15 1296.85 L1421.82 1296.85 L1422.5 1296.85 L1423.18 1296.85 L1423.85 1296.85 L1424.53 1296.85 L1425.2 1296.85 L1425.88 1296.85 L1426.55 1296.85 L1427.23 1296.85 L1427.9 1296.85 L1428.58 1296.85 L1429.26 1296.85 L1429.93 1296.85 L1430.61 1296.85 L1431.28 1296.85 L1431.96 1296.85 L1432.63 1296.85 L1433.31 1296.85 L1433.98 1296.85 L1434.66 1296.85 L1435.34 1296.85 L1436.01 1296.85 L1436.69 1296.85 L1437.36 1296.85 L1438.04 1296.85 L1438.71 1296.85 L1439.39 1296.85 L1440.06 1296.85 L1440.74 1296.85 L1441.42 1296.85 L1442.09 1296.85 L1442.77 1296.85 L1443.44 1296.85 L1444.12 1296.85 L1444.79 1296.85 L1445.47 1296.85 L1446.15 1296.85 L1446.82 1296.85 L1447.5 1296.85 L1448.17 1296.85 L1448.85 1296.85 L1449.52 1296.85 L1450.2 1296.85 L1450.87 1296.85 L1451.55 1296.85 L1452.23 1296.85 L1452.9 1296.85 L1453.58 1296.85 L1454.25 1296.85 L1454.93 1296.85 L1455.6 1296.85 L1456.28 1296.85 L1456.95 1296.85 L1457.63 1296.85 L1458.31 1296.85 L1458.98 1296.85 L1459.66 1296.85 L1460.33 1296.85 L1461.01 1296.85 L1461.68 1296.85 L1462.36 1296.85 L1463.03 1296.85 L1463.71 1296.85 L1464.39 1296.85 L1465.06 1296.85 L1465.74 1296.85 L1466.41 1296.85 L1467.09 1296.85 L1467.76 1296.85 L1468.44 1296.85 L1469.11 1296.85 L1469.79 1296.85 L1470.47 1296.85 L1471.14 1296.85 L1471.82 1296.85 L1472.49 1296.85 L1473.17 1296.85 L1473.84 1296.85 L1474.52 1296.85 L1475.2 1296.85 L1475.87 1296.85 L1476.55 1296.85 L1477.22 1296.85 L1477.9 1296.85 L1478.57 1296.85 L1479.25 1296.85 L1479.92 1296.85 L1480.6 1296.85 L1481.28 1296.85 L1481.95 1296.85 L1482.63 1296.85 L1483.3 1296.85 L1483.98 1296.85 L1484.65 1296.85 L1485.33 1296.85 L1486 1296.85 L1486.68 1296.85 L1487.36 1296.85 L1488.03 1296.85 L1488.71 1296.85 L1489.38 1296.85 L1490.06 1296.85 L1490.73 1296.85 L1491.41 1296.85 L1492.08 1296.85 L1492.76 1296.85 L1493.44 1296.85 L1494.11 1296.85 L1494.79 1296.85 L1495.46 1296.85 L1496.14 1296.85 L1496.81 1296.85 L1497.49 1296.85 L1498.16 1296.85 L1498.84 1296.85 L1499.52 1296.85 L1500.19 1296.85 L1500.87 1296.85 L1501.54 1296.85 L1502.22 1296.85 L1502.89 1296.85 L1503.57 1296.85 L1504.25 1296.85 L1504.92 1296.85 L1505.6 1296.85 L1506.27 1296.85 L1506.95 1296.85 L1507.62 1296.85 L1508.3 1296.85 L1508.97 1296.85 L1509.65 1296.85 L1510.33 1296.85 L1511 1296.85 L1511.68 1296.85 L1512.35 1296.85 L1513.03 1296.85 L1513.7 1296.85 L1514.38 1296.85 L1515.05 1296.85 L1515.73 1296.85 L1516.41 1296.85 L1517.08 1296.85 L1517.76 1296.85 L1518.43 1296.85 L1519.11 1296.85 L1519.78 1296.85 L1520.46 1296.85 L1521.13 1296.85 L1521.81 1296.85 L1522.49 1296.85 L1523.16 1296.85 L1523.84 1296.85 L1524.51 1296.85 L1525.19 1296.85 L1525.86 1296.85 L1526.54 1296.85 L1527.21 1296.85 L1527.89 1296.85 L1528.57 1296.85 L1529.24 1296.85 L1529.92 1296.85 L1530.59 1296.85 L1531.27 1296.85 L1531.94 1296.85 L1532.62 1296.85 L1533.3 1296.85 L1533.97 1296.85 L1534.65 1296.85 L1535.32 1296.85 L1536 1296.85 L1536.67 1296.85 L1537.35 1296.85 L1538.02 1296.85 L1538.7 1296.85 L1539.38 1296.85 L1540.05 1296.85 L1540.73 1296.85 L1541.4 1296.85 L1542.08 1296.85 L1542.75 1296.85 L1543.43 1296.85 L1544.1 1296.85 L1544.78 1296.85 L1545.46 1296.85 L1546.13 1296.85 L1546.81 1296.85 L1547.48 1296.85 L1548.16 1296.85 L1548.83 1296.85 L1549.51 1296.85 L1550.18 1296.85 L1550.86 1296.85 L1551.54 1296.85 L1552.21 1296.85 L1552.89 1296.85 L1553.56 1296.85 L1554.24 1296.85 L1554.91 1296.85 L1555.59 1296.85 L1556.26 1296.85 L1556.94 1296.85 L1557.62 1296.85 L1558.29 1296.85 L1558.97 1296.85 L1559.64 1296.85 L1560.32 1296.85 L1560.99 1296.85 L1561.67 1296.85 L1562.35 1296.85 L1563.02 1296.85 L1563.7 1296.85 L1564.37 1296.85 L1565.05 1296.85 L1565.72 1296.85 L1566.4 1296.85 L1567.07 1296.85 L1567.75 1296.85 L1568.43 1296.85 L1569.1 1296.85 L1569.78 1296.85 L1570.45 1296.85 L1571.13 1296.85 L1571.8 1296.85 L1572.48 1296.85 L1573.15 1296.85 L1573.83 1296.85 L1574.51 1296.85 L1575.18 1296.85 L1575.86 1296.85 L1576.53 1296.85 L1577.21 1296.85 L1577.88 1296.85 L1578.56 1296.85 L1579.23 1296.85 L1579.91 1296.85 L1580.59 1296.85 L1581.26 1296.85 L1581.94 1296.85 L1582.61 1296.85 L1583.29 1296.85 L1583.96 1296.85 L1584.64 1296.85 L1585.31 1296.85 L1585.99 1296.85 L1586.67 1296.85 L1587.34 1296.85 L1588.02 1296.85 L1588.69 1296.85 L1589.37 1296.85 L1590.04 1296.85 L1590.72 1296.85 L1591.4 1296.85 L1592.07 1296.85 L1592.75 1296.85 L1593.42 1296.85 L1594.1 1296.85 L1594.77 1296.85 L1595.45 1296.85 L1596.12 1296.85 L1596.8 1296.85 L1597.48 1296.85 L1598.15 1296.85 L1598.83 1296.85 L1599.5 1296.85 L1600.18 1296.85 L1600.85 1296.85 L1601.53 1296.85 L1602.2 1296.85 L1602.88 1296.85 L1603.56 1296.85 L1604.23 1296.85 L1604.91 1296.85 L1605.58 1296.85 L1606.26 1296.85 L1606.93 1296.85 L1607.61 1296.85 L1608.28 1296.85 L1608.96 1296.85 L1609.64 1296.85 L1610.31 1296.85 L1610.99 1296.85 L1611.66 1296.85 L1612.34 1296.85 L1613.01 1296.85 L1613.69 1296.85 L1614.36 1296.85 L1615.04 1296.85 L1615.72 1296.85 L1616.39 1296.85 L1617.07 1296.85 L1617.74 1296.85 L1618.42 1296.85 L1619.09 1296.85 L1619.77 1296.85 L1620.45 1296.85 L1621.12 1296.85 L1621.8 1296.85 L1622.47 1296.85 L1623.15 1296.85 L1623.82 1296.85 L1624.5 1296.85 L1625.17 1296.85 L1625.85 1296.85 L1626.53 1296.85 L1627.2 1296.85 L1627.88 1296.85 L1628.55 1296.85 L1629.23 1296.85 L1629.9 1296.85 L1630.58 1296.85 L1631.25 1296.85 L1631.93 1296.85 L1632.61 1296.85 L1633.28 1296.85 L1633.96 1296.85 L1634.63 1296.85 L1635.31 1296.85 L1635.98 1296.85 L1636.66 1296.85 L1637.33 1296.85 L1638.01 1296.85 L1638.69 1296.85 L1639.36 1296.85 L1640.04 1296.85 L1640.71 1296.85 L1641.39 1296.85 L1642.06 1296.85 L1642.74 1296.85 L1643.41 1296.85 L1644.09 1296.85 L1644.77 1296.85 L1645.44 1296.85 L1646.12 1296.85 L1646.79 1296.85 L1647.47 1296.85 L1648.14 1296.85 L1648.82 1296.85 L1649.5 1296.85 L1650.17 1296.85 L1650.85 1296.85 L1651.52 1296.85 L1652.2 1296.85 L1652.87 1296.85 L1653.55 1296.85 L1654.22 1296.85 L1654.9 1296.85 L1655.58 1296.85 L1656.25 1296.85 L1656.93 1296.85 L1657.6 1296.85 L1658.28 1296.85 L1658.95 1296.85 L1659.63 1296.85 L1660.3 1296.85 L1660.98 1296.85 L1661.66 1296.85 L1662.33 1296.85 L1663.01 1296.85 L1663.68 1296.85 L1664.36 1296.85 L1665.03 1296.85 L1665.71 1296.85 L1666.38 1296.85 L1667.06 1296.85 L1667.74 1296.85 L1668.41 1296.85 L1669.09 1296.85 L1669.76 1296.85 L1670.44 1296.85 L1671.11 1296.85 L1671.79 1296.85 L1672.47 1296.85 L1673.14 1296.85 L1673.82 1296.85 L1674.49 1296.85 L1675.17 1296.85 L1675.84 1296.85 L1676.52 1296.85 L1677.19 1296.85 L1677.87 1296.85 L1678.55 1296.85 L1679.22 1296.85 L1679.9 1296.85 L1680.57 1296.85 L1681.25 1296.85 L1681.92 1296.85 L1682.6 1296.85 L1683.27 1296.85 L1683.95 1296.85 L1684.63 1296.85 L1685.3 1296.85 L1685.98 1296.85 L1686.65 1296.85 L1687.33 1296.85 L1688 1296.85 L1688.68 1296.85 L1689.35 1296.85 L1690.03 1296.85 L1690.71 1296.85 L1691.38 1296.85 L1692.06 1296.85 L1692.73 1296.85 L1693.41 1296.85 L1694.08 1296.85 L1694.76 1296.85 L1695.43 1296.85 L1696.11 1296.85 L1696.79 1296.85 L1697.46 1296.85 L1698.14 1296.85 L1698.81 1296.85 L1699.49 1296.85 L1700.16 1296.85 L1700.84 1296.85 L1701.52 1296.85 L1702.19 1296.85 L1702.87 1296.85 L1703.54 1296.85 L1704.22 1296.85 L1704.89 1296.85 L1705.57 1296.85 L1706.24 1296.85 L1706.92 1296.85 L1707.6 1296.85 L1708.27 1296.85 L1708.95 1296.85 L1709.62 1296.85 L1710.3 1296.85 L1710.97 1296.85 L1711.65 1296.85 L1712.32 1296.85 L1713 1296.85 L1713.68 1296.85 L1714.35 1296.85 L1715.03 1296.85 L1715.7 1296.85 L1716.38 1296.85 L1717.05 1296.85 L1717.73 1296.85 L1718.4 1296.85 L1719.08 1296.85 L1719.76 1296.85 L1720.43 1296.85 L1721.11 1296.85 L1721.78 1296.85 L1722.46 1296.85 L1723.13 1296.85 L1723.81 1296.85 L1724.48 1296.85 L1725.16 1296.85 L1725.84 1296.85 L1726.51 1296.85 L1727.19 1296.85 L1727.86 1296.85 L1728.54 1296.85 L1729.21 1296.85 L1729.89 1296.85 L1730.57 1296.85 L1731.24 1296.85 L1731.92 1296.85 L1732.59 1296.85 L1733.27 1296.85 L1733.94 1296.85 L1734.62 1296.85 L1735.29 1296.85 L1735.97 1296.85 L1736.65 1296.85 L1737.32 1296.85 L1738 1296.85 L1738.67 1296.85 L1739.35 1296.85 L1740.02 1296.85 L1740.7 1296.85 L1741.37 1296.85 L1742.05 1296.85 L1742.73 1296.85 L1743.4 1296.85 L1744.08 1296.85 L1744.75 1296.85 L1745.43 1296.85 L1746.1 1296.85 L1746.78 1296.85 L1747.45 1296.85 L1748.13 1296.85 L1748.81 1296.85 L1749.48 1296.85 L1750.16 1296.85 L1750.83 1296.85 L1751.51 1296.85 L1752.18 1296.85 L1752.86 1296.85 L1753.53 1296.85 L1754.21 1296.85 L1754.89 1296.85 L1755.56 1296.85 L1756.24 1296.85 L1756.91 1296.85 L1757.59 1296.85 L1758.26 1296.85 L1758.94 1296.85 L1759.62 1296.85 L1760.29 1296.85 L1760.97 1296.85 L1761.64 1296.85 L1762.32 1296.85 L1762.99 1296.85 L1763.67 1296.85 L1764.34 1296.85 L1765.02 1296.85 L1765.7 1296.85 L1766.37 1296.85 L1767.05 1296.85 L1767.72 1296.85 L1768.4 1296.85 L1769.07 1296.85 L1769.75 1296.85 L1770.42 1296.85 L1771.1 1296.85 L1771.78 1296.85 L1772.45 1296.85 L1773.13 1296.85 L1773.8 1296.85 L1774.48 1296.85 L1775.15 1296.85 L1775.83 1296.85 L1776.5 1296.85 L1777.18 1296.85 L1777.86 1296.85 L1778.53 1296.85 L1779.21 1296.85 L1779.88 1296.85 L1780.56 1296.85 L1781.23 1296.85 L1781.91 1296.85 L1782.58 1296.85 L1783.26 1296.85 L1783.94 1296.85 L1784.61 1296.85 L1785.29 1296.85 L1785.96 1296.85 L1786.64 1296.85 L1787.31 1296.85 L1787.99 1296.85 L1788.67 1296.85 L1789.34 1296.85 L1790.02 1296.85 L1790.69 1296.85 L1791.37 1296.85 L1792.04 1296.85 L1792.72 1296.85 L1793.39 1296.85 L1794.07 1296.85 L1794.75 1296.85 L1795.42 1296.85 L1796.1 1296.85 L1796.77 1296.85 L1797.45 1296.85 L1798.12 1296.85 L1798.8 1296.85 L1799.47 1296.85 L1800.15 1296.85 L1800.83 1296.85 L1801.5 1296.85 L1802.18 1296.85 L1802.85 1296.85 L1803.53 1296.85 L1804.2 1296.85 L1804.88 1296.85 L1805.55 1296.85 L1806.23 1296.85 L1806.91 1296.85 L1807.58 1296.85 L1808.26 1296.85 L1808.93 1296.85 L1809.61 1296.85 L1810.28 1296.85 L1810.96 1296.85 L1811.63 1296.85 L1812.31 1296.85 L1812.99 1296.85 L1813.66 1296.85 L1814.34 1296.85 L1815.01 1296.85 L1815.69 1296.85 L1816.36 1296.85 L1817.04 1296.85 L1817.72 1296.85 L1818.39 1296.85 L1819.07 1296.85 L1819.74 1296.85 L1820.42 1296.85 L1821.09 1296.85 L1821.77 1296.85 L1822.44 1296.85 L1823.12 1296.85 L1823.8 1296.85 L1824.47 1296.85 L1825.15 1296.85 L1825.82 1296.85 L1826.5 1296.85 L1827.17 1296.85 L1827.85 1296.85 L1828.52 1296.85 L1829.2 1296.85 L1829.88 1296.85 L1830.55 1296.85 L1831.23 1296.85 L1831.9 1296.85 L1832.58 1296.85 L1833.25 1296.85 L1833.93 1296.85 L1834.6 1296.85 L1835.28 1296.85 L1835.96 1296.85 L1836.63 1296.85 L1837.31 1296.85 L1837.98 1296.85 L1838.66 1296.85 L1839.33 1296.85 L1840.01 1296.85 L1840.68 1296.85 L1841.36 1296.85 L1842.04 1296.85 L1842.71 1296.85 L1843.39 1296.85 L1844.06 1296.85 L1844.74 1296.85 L1845.41 1296.85 L1846.09 1296.85 L1846.77 1296.85 L1847.44 1296.85 L1848.12 1296.85 L1848.79 1296.85 L1849.47 1296.85 L1850.14 1296.85 L1850.82 1296.85 L1851.49 1296.85 L1852.17 1296.85 L1852.85 1296.85 L1853.52 1296.85 L1854.2 1296.85 L1854.87 1296.85 L1855.55 1296.85 L1856.22 1296.85 L1856.9 1296.85 L1857.57 1296.85 L1858.25 1296.85 L1858.93 1296.85 L1859.6 1296.85 L1860.28 1296.85 L1860.95 1296.85 L1861.63 1296.85 L1862.3 1296.85 L1862.98 1296.85 L1863.65 1296.85 L1864.33 1296.85 L1865.01 1296.85 L1865.68 1296.85 L1866.36 1296.85 L1867.03 1296.85 L1867.71 1296.85 L1868.38 1296.85 L1869.06 1296.85 L1869.73 1296.85 L1870.41 1296.85 L1871.09 1296.85 L1871.76 1296.85 L1872.44 1296.85 L1873.11 1296.85 L1873.79 1296.85 L1874.46 1296.85 L1875.14 1296.85 L1875.82 1296.85 L1876.49 1296.85 L1877.17 1296.85 L1877.84 1296.85 L1878.52 1296.85 L1879.19 1296.85 L1879.87 1296.85 L1880.54 1296.85 L1881.22 1296.85 L1881.9 1296.85 L1882.57 1296.85 L1883.25 1296.85 L1883.92 1296.85 L1884.6 1296.85 L1885.27 1296.85 L1885.95 1296.85 L1886.62 1296.85 L1887.3 1296.85 L1887.98 1296.85 L1888.65 1296.85 L1889.33 1296.85 L1890 1296.85 L1890.68 1296.85 L1891.35 1296.85 L1892.03 1296.85 L1892.7 1296.85 L1893.38 1296.85 L1894.06 1296.85 L1894.73 1296.85 L1895.41 1296.85 L1896.08 1296.85 L1896.76 1296.85 L1897.43 1296.85 L1898.11 1296.85 L1898.79 1296.85 L1899.46 1296.85 L1900.14 1296.85 L1900.81 1296.85 L1901.49 1296.85 L1902.16 1296.85 L1902.84 1296.85 L1903.51 1296.85 L1904.19 1296.85 L1904.87 1296.85 L1905.54 1296.85 L1906.22 1296.85 L1906.89 1296.85 L1907.57 1296.85 L1908.24 1296.85 L1908.92 1296.85 L1909.59 1296.85 L1910.27 1296.85 L1910.95 1296.85 L1911.62 1296.85 L1912.3 1296.85 L1912.97 1296.85 L1913.65 1296.85 L1914.32 1296.85 L1915 1296.85 L1915.67 1296.85 L1916.35 1296.85 L1917.03 1296.85 L1917.7 1296.85 L1918.38 1296.85 L1919.05 1296.85 L1919.73 1296.85 L1920.4 1296.85 L1921.08 1296.85 L1921.75 1296.85 L1922.43 1296.85 L1923.11 1296.85 L1923.78 1296.85 L1924.46 1296.85 L1925.13 1296.85 L1925.81 1296.85 L1926.48 1296.85 L1927.16 1296.85 L1927.84 1296.85 L1928.51 1296.85 L1929.19 1296.85 L1929.86 1296.85 L1930.54 1296.85 L1931.21 1296.85 L1931.89 1296.85 L1932.56 1296.85 L1933.24 1296.85 L1933.92 1296.85 L1934.59 1296.85 L1935.27 1296.85 L1935.94 1296.85 L1936.62 1296.85 L1937.29 1296.85 L1937.97 1296.85 L1938.64 1296.85 L1939.32 1296.85 L1940 1296.85 L1940.67 1296.85 L1941.35 1296.85 L1942.02 1296.85 L1942.7 1296.85 L1943.37 1296.85 L1944.05 1296.85 L1944.72 1296.85 L1945.4 1296.85 L1946.08 1296.85 L1946.75 1296.85 L1947.43 1296.85 L1948.1 1296.85 L1948.78 1296.85 L1949.45 1296.85 L1950.13 1296.85 L1950.8 1296.85 L1951.48 1296.85 L1952.16 1296.85 L1952.83 1296.85 L1953.51 1296.85 L1954.18 1296.85 L1954.86 1296.85 L1955.53 1296.85 L1956.21 1296.85 L1956.89 1296.85 L1957.56 1296.85 L1958.24 1296.85 L1958.91 1296.85 L1959.59 1296.85 L1960.26 1296.85 L1960.94 1296.85 L1961.61 1296.85 L1962.29 1296.85 L1962.97 1296.85 L1963.64 1296.85 L1964.32 1296.85 L1964.99 1296.85 L1965.67 1296.85 L1966.34 1296.85 L1967.02 1296.85 L1967.69 1296.85 L1968.37 1296.85 L1969.05 1296.85 L1969.72 1296.85 L1970.4 1296.85 L1971.07 1296.85 L1971.75 1296.85 L1972.42 1296.85 L1973.1 1296.85 L1973.77 1296.85 L1974.45 1296.85 L1975.13 1296.85 L1975.8 1296.85 L1976.48 1296.85 L1977.15 1296.85 L1977.83 1296.85 L1978.5 1296.85 L1979.18 1296.85 L1979.85 1296.85 L1980.53 1296.85 L1981.21 1296.85 L1981.88 1296.85 L1982.56 1296.85 L1983.23 1296.85 L1983.91 1296.85 L1984.58 1296.85 L1985.26 1296.85 L1985.94 1296.85 L1986.61 1296.85 L1987.29 1296.85 L1987.96 1296.85 L1988.64 1296.85 L1989.31 1296.85 L1989.99 1296.85 L1990.66 1296.85 L1991.34 1296.85 L1992.02 1296.85 L1992.69 1296.85 L1993.37 1296.85 L1994.04 1296.85 L1994.72 1296.85 L1995.39 1296.85 L1996.07 1296.85 L1996.74 1296.85 L1997.42 1296.85 L1998.1 1296.85 L1998.77 1296.85 L1999.45 1296.85 L2000.12 1296.85 L2000.8 1296.85 L2001.47 1296.85 L2002.15 1296.85 L2002.82 1296.85 L2003.5 1296.85 L2004.18 1296.85 L2004.85 1296.85 L2005.53 1296.85 L2006.2 1296.85 L2006.88 1296.85 L2007.55 1296.85 L2008.23 1296.85 L2008.9 1296.85 L2009.58 1296.85 L2010.26 1296.85 L2010.93 1296.85 L2011.61 1296.85 L2012.28 1296.85 L2012.96 1296.85 L2013.63 1296.85 L2014.31 1296.85 L2014.99 1296.85 L2015.66 1296.85 L2016.34 1296.85 L2017.01 1296.85 L2017.69 1296.85 L2018.36 1296.85 L2019.04 1296.85 L2019.71 1296.85 L2020.39 1296.85 L2021.07 1296.85 L2021.74 1296.85 L2022.42 1296.85 L2023.09 1296.85 L2023.77 1296.85 L2024.44 1296.85 L2025.12 1296.85 L2025.79 1296.85 L2026.47 1296.85 L2027.15 1296.85 L2027.82 1296.85 L2028.5 1296.85 L2029.17 1296.85 L2029.85 1296.85 L2030.52 1296.85 L2031.2 1296.85 L2031.87 1296.85 L2032.55 1296.85 L2033.23 1296.85 L2033.9 1296.85 L2034.58 1296.85 L2035.25 1296.85 L2035.93 1296.85 L2036.6 1296.85 L2037.28 1296.85 L2037.95 1296.85 L2038.63 1296.85 L2039.31 1296.85 L2039.98 1296.85 L2040.66 1296.85 L2041.33 1296.85 L2042.01 1296.85 L2042.68 1296.85 L2043.36 1296.85 L2044.04 1296.85 L2044.71 1296.85 L2045.39 1296.85 L2046.06 1296.85 L2046.74 1296.85 L2047.41 1296.85 L2048.09 1296.85 L2048.76 1296.85 L2049.44 1296.85 L2050.12 1296.85 L2050.79 1296.85 L2051.47 1296.85 L2052.14 1296.85 L2052.82 1296.85 L2053.49 1296.85 L2054.17 1296.85 L2054.84 1296.85 L2055.52 1296.85 L2056.2 1296.85 L2056.87 1296.85 L2057.55 1296.85 L2058.22 1296.85 L2058.9 1296.85 L2059.57 1296.85 L2060.25 1296.85 L2060.92 1296.85 L2061.6 1296.85 L2062.28 1296.85 L2062.95 1296.85 L2063.63 1296.85 L2064.3 1296.85 L2064.98 1296.85 L2065.65 1296.85 L2066.33 1296.85 L2067 1296.85 L2067.68 1296.85 L2068.36 1296.85 L2069.03 1296.85 L2069.71 1296.85 L2070.38 1296.85 L2071.06 1296.85 L2071.73 1296.85 L2072.41 1296.85 L2073.09 1296.85 L2073.76 1296.85 L2074.44 1296.85 L2075.11 1296.85 L2075.79 1296.85 L2076.46 1296.85 L2077.14 1296.85 L2077.81 1296.85 L2078.49 1296.85 L2079.17 1296.85 L2079.84 1296.85 L2080.52 1296.85 L2081.19 1296.85 L2081.87 1296.85 L2082.54 1296.85 L2083.22 1296.85 L2083.89 1296.85 L2084.57 1296.85 L2085.25 1296.85 L2085.92 1296.85 L2086.6 1296.85 L2087.27 1296.85 L2087.95 1296.85 L2088.62 1296.85 L2089.3 1296.85 L2089.97 1296.85 L2090.65 1296.85 L2091.33 1296.85 L2092 1296.85 L2092.68 1296.85 L2093.35 1296.85 L2094.03 1296.85 L2094.7 1296.85 L2095.38 1296.85 L2096.05 1296.85 L2096.73 1296.85 L2097.41 1296.85 L2098.08 1296.85 L2098.76 1296.85 L2099.43 1296.85 L2100.11 1296.85 L2100.78 1296.85 L2101.46 1296.85 L2102.14 1296.85 L2102.81 1296.85 L2103.49 1296.85 L2104.16 1296.85 L2104.84 1296.85 L2105.51 1296.85 L2106.19 1296.85 L2106.86 1296.85 L2107.54 1296.85 L2108.22 1296.85 L2108.89 1296.85 L2109.57 1296.85 L2110.24 1296.85 L2110.92 1296.85 L2111.59 1296.85 L2112.27 1296.85 L2112.94 1296.85 L2113.62 1296.85 L2114.3 1296.85 L2114.97 1296.85 L2115.65 1296.85 L2116.32 1296.85 L2117 1296.85 L2117.67 1296.85 L2118.35 1296.85 L2119.02 1296.85 L2119.7 1296.85 L2120.38 1296.85 L2121.05 1296.85 L2121.73 1296.85 L2122.4 1296.85 L2123.08 1296.85 L2123.75 1296.85 L2124.43 1296.85 L2125.11 1296.85 L2125.78 1296.85 L2126.46 1296.85 L2127.13 1296.85 L2127.81 1296.85 L2128.48 1296.85 L2129.16 1296.85 L2129.83 1296.85 L2130.51 1296.85 L2131.19 1296.85 L2131.86 1296.85 L2132.54 1296.85 L2133.21 1296.85 L2133.89 1296.85 L2134.56 1296.85 L2135.24 1296.85 L2135.91 1296.85 L2136.59 1296.85 L2137.27 1296.85 L2137.94 1296.85 L2138.62 1296.85 L2139.29 1296.85 L2139.97 1296.85 L2140.64 1296.85 L2141.32 1296.85 L2141.99 1296.85 L2142.67 1296.85 L2143.35 1296.85 L2144.02 1296.85 L2144.7 1296.85 L2145.37 1296.85 L2146.05 1296.85 L2146.72 1296.85 L2147.4 1296.85 L2148.07 1296.85 L2148.75 1296.85 L2149.43 1296.85 L2150.1 1296.85 L2150.78 1296.85 L2151.45 1296.85 L2152.13 1296.85 L2152.8 1296.85 L2153.48 1296.85 L2154.16 1296.85 L2154.83 1296.85 L2155.51 1296.85 L2156.18 1296.85 L2156.86 1296.85 L2157.53 1296.85 L2158.21 1296.85 L2158.88 1296.85 L2159.56 1296.85 L2160.24 1296.85 L2160.91 1296.85 L2161.59 1296.85 L2162.26 1296.85 L2162.94 1296.85 L2163.61 1296.85 L2164.29 1296.85 L2164.96 1296.85 L2165.64 1296.85 L2166.32 1296.85 L2166.99 1296.85 L2167.67 1296.85 L2168.34 1296.85 L2169.02 1296.85 L2169.69 1296.85 L2170.37 1296.85 L2171.04 1296.85 L2171.72 1296.85 L2172.4 1296.85 L2173.07 1296.85 L2173.75 1296.85 L2174.42 1296.85 L2175.1 1296.85 L2175.77 1296.85 L2176.45 1296.85 L2177.12 1296.85 L2177.8 1296.85 L2178.48 1296.85 L2179.15 1296.85 L2179.83 1296.85 L2180.5 1296.85 L2181.18 1296.85 L2181.85 1296.85 L2182.53 1296.85 L2183.21 1296.85 L2183.88 1296.85 L2184.56 1296.85 L2185.23 1296.85 L2185.91 1296.85 L2186.58 1296.85 L2187.26 1296.85 L2187.93 1296.85 L2188.61 1296.85 L2189.29 1296.85 L2189.96 1296.85 L2190.64 1296.85 L2191.31 1296.85 L2191.99 1296.85 L2192.66 1296.85 L2193.34 1296.85 L2194.01 1296.85 L2194.69 1296.85 L2195.37 1296.85 L2196.04 1296.85 L2196.72 1296.85 L2197.39 1296.85 L2198.07 1296.85 L2198.74 1296.85 L2199.42 1296.85 L2200.09 1296.85 L2200.77 1296.85 L2201.45 1296.85 L2202.12 1296.85 L2202.8 1296.85 L2203.47 1296.85 L2204.15 1296.85 L2204.82 1296.85 L2205.5 1296.85 L2206.17 1296.85 L2206.85 1296.85 L2207.53 1296.85 L2208.2 1296.85 L2208.88 1296.85 L2209.55 1296.85 L2210.23 1296.85 L2210.9 1296.85 L2211.58 1296.85 L2212.26 1296.85 L2212.93 1296.85 L2213.61 1296.85 L2214.28 1296.85 L2214.96 1296.85 L2215.63 1296.85 L2216.31 1296.85 L2216.98 1296.85 L2217.66 1296.85 L2218.34 1296.85 L2219.01 1296.85 L2219.69 1296.85 L2220.36 1296.85 L2221.04 1296.85 L2221.71 1296.85 L2222.39 1296.85 L2223.06 1296.85 L2223.74 1296.85 L2224.42 1296.85 L2225.09 1296.85 L2225.77 1296.85 L2226.44 1296.85 L2227.12 1296.85 L2227.79 1296.85 L2228.47 1296.85 L2229.14 1296.85 L2229.82 1296.85 L2230.5 1296.85 L2231.17 1296.85 L2231.85 1296.85 L2232.52 1296.85 L2233.2 1296.85 L2233.87 1296.85 L2234.55 1296.85 L2235.22 1296.85 L2235.9 1296.85 L2236.58 1296.85 L2237.25 1296.85 L2237.93 1296.85 L2238.6 1296.85 L2239.28 1296.85 L2239.95 1296.85 L2240.63 1296.85 L2241.31 1296.85 L2241.98 1296.85 L2242.66 1296.85 L2243.33 1296.85 L2244.01 1296.85 L2244.68 1296.85 L2245.36 1296.85 L2246.03 1296.85 L2246.71 1296.85 L2247.39 1296.85 L2248.06 1296.85 L2248.74 1296.85 L2249.41 1296.85 L2250.09 1296.85 L2250.76 1296.85 L2251.44 1296.85 L2252.11 1296.85 L2252.79 1296.85 L2253.47 1296.85 L2254.14 1296.85 L2254.82 1296.85 L2255.49 1296.85 L2256.17 1296.85 L2256.84 1296.85 L2257.52 1296.85 L2258.19 1296.85 L2258.87 1296.85 L2259.55 1296.85 L2260.22 1296.85 L2260.9 1296.85 L2261.57 1296.85 L2262.25 1296.85 L2262.92 1296.85 L2263.6 1296.85 L2264.27 1296.85 L2264.95 1296.85 L2265.63 1296.85 L2266.3 1296.85 L2266.98 1296.85 L2267.65 1296.85 L2268.33 1296.85 L2269 1296.85 L2269.68 1296.85 L2270.36 1296.85 L2271.03 1296.85 L2271.71 1296.85 L2272.38 1296.85 L2273.06 1296.85 L2273.73 1296.85 L2274.41 1296.85 L2275.08 1296.85 L2275.76 1296.85 L2276.44 1296.85 L2277.11 1296.85 L2277.79 1296.85 L2278.46 1296.85 L2279.14 1296.85 L2279.81 1296.85 L2280.49 1296.85 L2281.16 1296.85 L2281.84 1296.85 L2282.52 1296.85 L2283.19 1296.85 L2283.87 1296.85 L2284.54 1296.85 L2285.22 1296.85 L2285.89 1296.85 L2286.57 1296.85 L2287.24 1296.85 L2287.92 1296.85 L2288.6 1296.85 L2289.27 1296.85 L2289.95 1296.85 L2290.62 1296.85 L2291.3 1296.85 L2291.97 1296.85 L2291.97 1293.65 L2291.3 1293.65 L2290.62 1293.65 L2289.95 1293.65 L2289.27 1293.65 L2288.6 1293.65 L2287.92 1293.65 L2287.24 1293.65 L2286.57 1293.65 L2285.89 1293.65 L2285.22 1293.65 L2284.54 1293.65 L2283.87 1293.65 L2283.19 1293.65 L2282.52 1293.65 L2281.84 1293.65 L2281.16 1293.65 L2280.49 1293.65 L2279.81 1293.65 L2279.14 1293.65 L2278.46 1293.65 L2277.79 1293.65 L2277.11 1293.65 L2276.44 1293.65 L2275.76 1293.65 L2275.08 1293.65 L2274.41 1293.65 L2273.73 1293.65 L2273.06 1293.65 L2272.38 1293.65 L2271.71 1293.65 L2271.03 1293.65 L2270.36 1293.65 L2269.68 1293.65 L2269 1293.65 L2268.33 1293.65 L2267.65 1293.65 L2266.98 1293.65 L2266.3 1293.65 L2265.63 1293.65 L2264.95 1293.65 L2264.27 1293.65 L2263.6 1293.65 L2262.92 1293.65 L2262.25 1293.65 L2261.57 1293.65 L2260.9 1293.65 L2260.22 1293.65 L2259.55 1293.65 L2258.87 1293.65 L2258.19 1293.65 L2257.52 1293.65 L2256.84 1293.65 L2256.17 1293.65 L2255.49 1293.65 L2254.82 1293.65 L2254.14 1293.65 L2253.47 1293.65 L2252.79 1293.65 L2252.11 1293.65 L2251.44 1293.65 L2250.76 1293.65 L2250.09 1293.65 L2249.41 1293.65 L2248.74 1293.65 L2248.06 1293.65 L2247.39 1293.65 L2246.71 1293.65 L2246.03 1293.65 L2245.36 1293.65 L2244.68 1293.65 L2244.01 1293.65 L2243.33 1293.65 L2242.66 1293.65 L2241.98 1293.65 L2241.31 1293.65 L2240.63 1293.65 L2239.95 1293.65 L2239.28 1293.65 L2238.6 1293.65 L2237.93 1293.65 L2237.25 1293.65 L2236.58 1293.65 L2235.9 1293.65 L2235.22 1293.65 L2234.55 1293.65 L2233.87 1293.65 L2233.2 1293.65 L2232.52 1293.65 L2231.85 1293.65 L2231.17 1293.65 L2230.5 1293.65 L2229.82 1293.65 L2229.14 1293.65 L2228.47 1293.65 L2227.79 1293.65 L2227.12 1293.65 L2226.44 1293.65 L2225.77 1293.65 L2225.09 1293.65 L2224.42 1293.65 L2223.74 1293.65 L2223.06 1293.65 L2222.39 1293.65 L2221.71 1293.65 L2221.04 1293.65 L2220.36 1293.65 L2219.69 1293.65 L2219.01 1293.65 L2218.34 1293.65 L2217.66 1293.65 L2216.98 1293.65 L2216.31 1293.65 L2215.63 1293.65 L2214.96 1293.65 L2214.28 1293.65 L2213.61 1293.65 L2212.93 1293.65 L2212.26 1293.65 L2211.58 1293.65 L2210.9 1293.65 L2210.23 1293.65 L2209.55 1293.65 L2208.88 1293.65 L2208.2 1293.65 L2207.53 1293.65 L2206.85 1293.65 L2206.17 1293.65 L2205.5 1293.65 L2204.82 1293.65 L2204.15 1293.65 L2203.47 1293.65 L2202.8 1293.65 L2202.12 1293.65 L2201.45 1293.65 L2200.77 1293.65 L2200.09 1293.65 L2199.42 1293.65 L2198.74 1293.65 L2198.07 1293.65 L2197.39 1293.65 L2196.72 1293.65 L2196.04 1293.65 L2195.37 1293.65 L2194.69 1293.65 L2194.01 1293.65 L2193.34 1293.65 L2192.66 1293.65 L2191.99 1293.65 L2191.31 1293.65 L2190.64 1293.65 L2189.96 1293.65 L2189.29 1293.65 L2188.61 1293.65 L2187.93 1293.65 L2187.26 1293.65 L2186.58 1293.65 L2185.91 1293.65 L2185.23 1293.65 L2184.56 1293.65 L2183.88 1293.65 L2183.21 1293.65 L2182.53 1293.65 L2181.85 1293.65 L2181.18 1293.65 L2180.5 1293.65 L2179.83 1293.65 L2179.15 1293.65 L2178.48 1293.65 L2177.8 1293.65 L2177.12 1293.65 L2176.45 1293.65 L2175.77 1293.65 L2175.1 1293.65 L2174.42 1293.65 L2173.75 1293.65 L2173.07 1293.65 L2172.4 1293.65 L2171.72 1293.65 L2171.04 1293.65 L2170.37 1293.65 L2169.69 1293.65 L2169.02 1293.65 L2168.34 1293.65 L2167.67 1293.65 L2166.99 1293.65 L2166.32 1293.65 L2165.64 1293.65 L2164.96 1293.65 L2164.29 1293.65 L2163.61 1293.65 L2162.94 1293.65 L2162.26 1293.65 L2161.59 1293.65 L2160.91 1293.65 L2160.24 1293.65 L2159.56 1293.65 L2158.88 1293.65 L2158.21 1293.65 L2157.53 1293.65 L2156.86 1293.65 L2156.18 1293.65 L2155.51 1293.65 L2154.83 1293.65 L2154.16 1293.65 L2153.48 1293.65 L2152.8 1293.65 L2152.13 1293.65 L2151.45 1293.65 L2150.78 1293.65 L2150.1 1293.65 L2149.43 1293.65 L2148.75 1293.65 L2148.07 1293.65 L2147.4 1293.65 L2146.72 1293.65 L2146.05 1293.65 L2145.37 1293.65 L2144.7 1293.65 L2144.02 1293.65 L2143.35 1293.65 L2142.67 1293.65 L2141.99 1293.65 L2141.32 1293.65 L2140.64 1293.65 L2139.97 1293.65 L2139.29 1293.65 L2138.62 1293.65 L2137.94 1293.65 L2137.27 1293.65 L2136.59 1293.65 L2135.91 1293.65 L2135.24 1293.65 L2134.56 1293.65 L2133.89 1293.65 L2133.21 1293.65 L2132.54 1293.65 L2131.86 1293.65 L2131.19 1293.65 L2130.51 1293.65 L2129.83 1293.65 L2129.16 1293.65 L2128.48 1293.65 L2127.81 1293.65 L2127.13 1293.65 L2126.46 1293.65 L2125.78 1293.65 L2125.11 1293.65 L2124.43 1293.65 L2123.75 1293.65 L2123.08 1293.65 L2122.4 1293.65 L2121.73 1293.65 L2121.05 1293.65 L2120.38 1293.65 L2119.7 1293.65 L2119.02 1293.65 L2118.35 1293.65 L2117.67 1293.65 L2117 1293.65 L2116.32 1293.65 L2115.65 1293.65 L2114.97 1293.65 L2114.3 1293.65 L2113.62 1293.65 L2112.94 1293.65 L2112.27 1293.65 L2111.59 1293.65 L2110.92 1293.65 L2110.24 1293.65 L2109.57 1293.65 L2108.89 1293.65 L2108.22 1293.65 L2107.54 1293.65 L2106.86 1293.65 L2106.19 1293.65 L2105.51 1293.65 L2104.84 1293.65 L2104.16 1293.65 L2103.49 1293.65 L2102.81 1293.65 L2102.14 1293.65 L2101.46 1293.65 L2100.78 1293.65 L2100.11 1293.65 L2099.43 1293.65 L2098.76 1293.65 L2098.08 1293.65 L2097.41 1293.65 L2096.73 1293.65 L2096.05 1293.65 L2095.38 1293.65 L2094.7 1293.65 L2094.03 1293.65 L2093.35 1293.65 L2092.68 1293.65 L2092 1293.65 L2091.33 1293.65 L2090.65 1293.65 L2089.97 1293.65 L2089.3 1293.65 L2088.62 1293.65 L2087.95 1293.65 L2087.27 1293.65 L2086.6 1293.65 L2085.92 1293.65 L2085.25 1293.65 L2084.57 1293.65 L2083.89 1293.65 L2083.22 1293.65 L2082.54 1293.65 L2081.87 1293.65 L2081.19 1293.65 L2080.52 1293.65 L2079.84 1293.65 L2079.17 1293.65 L2078.49 1293.65 L2077.81 1293.65 L2077.14 1293.65 L2076.46 1293.65 L2075.79 1293.65 L2075.11 1293.65 L2074.44 1293.65 L2073.76 1293.65 L2073.09 1293.65 L2072.41 1293.65 L2071.73 1293.65 L2071.06 1293.65 L2070.38 1293.65 L2069.71 1293.65 L2069.03 1293.65 L2068.36 1293.65 L2067.68 1293.65 L2067 1293.65 L2066.33 1293.65 L2065.65 1293.65 L2064.98 1293.65 L2064.3 1293.65 L2063.63 1293.65 L2062.95 1293.65 L2062.28 1293.65 L2061.6 1293.65 L2060.92 1293.65 L2060.25 1293.65 L2059.57 1293.65 L2058.9 1293.65 L2058.22 1293.65 L2057.55 1293.65 L2056.87 1293.65 L2056.2 1293.65 L2055.52 1293.65 L2054.84 1293.65 L2054.17 1293.65 L2053.49 1293.65 L2052.82 1293.65 L2052.14 1293.65 L2051.47 1293.65 L2050.79 1293.65 L2050.12 1293.65 L2049.44 1293.65 L2048.76 1293.65 L2048.09 1293.65 L2047.41 1293.65 L2046.74 1293.65 L2046.06 1293.65 L2045.39 1293.65 L2044.71 1293.65 L2044.04 1293.65 L2043.36 1293.65 L2042.68 1293.65 L2042.01 1293.65 L2041.33 1293.65 L2040.66 1293.65 L2039.98 1293.65 L2039.31 1293.65 L2038.63 1293.65 L2037.95 1293.65 L2037.28 1293.65 L2036.6 1293.65 L2035.93 1293.65 L2035.25 1293.65 L2034.58 1293.65 L2033.9 1293.65 L2033.23 1293.65 L2032.55 1293.65 L2031.87 1293.65 L2031.2 1293.65 L2030.52 1293.65 L2029.85 1293.65 L2029.17 1293.65 L2028.5 1293.65 L2027.82 1293.65 L2027.15 1293.65 L2026.47 1293.65 L2025.79 1293.65 L2025.12 1293.65 L2024.44 1293.65 L2023.77 1293.65 L2023.09 1293.65 L2022.42 1293.65 L2021.74 1293.65 L2021.07 1293.65 L2020.39 1293.65 L2019.71 1293.65 L2019.04 1293.65 L2018.36 1293.65 L2017.69 1293.65 L2017.01 1293.65 L2016.34 1293.65 L2015.66 1293.65 L2014.99 1293.65 L2014.31 1293.65 L2013.63 1293.65 L2012.96 1293.65 L2012.28 1293.65 L2011.61 1293.65 L2010.93 1293.65 L2010.26 1293.65 L2009.58 1293.65 L2008.9 1293.65 L2008.23 1293.65 L2007.55 1293.65 L2006.88 1293.65 L2006.2 1293.65 L2005.53 1293.65 L2004.85 1293.65 L2004.18 1293.65 L2003.5 1293.65 L2002.82 1293.65 L2002.15 1293.65 L2001.47 1293.65 L2000.8 1293.65 L2000.12 1293.65 L1999.45 1293.65 L1998.77 1293.65 L1998.1 1293.65 L1997.42 1293.65 L1996.74 1293.65 L1996.07 1293.65 L1995.39 1293.65 L1994.72 1293.65 L1994.04 1293.65 L1993.37 1293.65 L1992.69 1293.65 L1992.02 1293.65 L1991.34 1293.65 L1990.66 1293.65 L1989.99 1293.65 L1989.31 1293.65 L1988.64 1293.65 L1987.96 1293.65 L1987.29 1293.65 L1986.61 1293.65 L1985.94 1293.65 L1985.26 1293.65 L1984.58 1293.65 L1983.91 1293.65 L1983.23 1293.65 L1982.56 1293.65 L1981.88 1293.65 L1981.21 1293.65 L1980.53 1293.65 L1979.85 1293.65 L1979.18 1293.65 L1978.5 1293.65 L1977.83 1293.65 L1977.15 1293.65 L1976.48 1293.65 L1975.8 1293.65 L1975.13 1293.65 L1974.45 1293.65 L1973.77 1293.65 L1973.1 1293.65 L1972.42 1293.65 L1971.75 1293.65 L1971.07 1293.65 L1970.4 1293.65 L1969.72 1293.65 L1969.05 1293.65 L1968.37 1293.65 L1967.69 1293.65 L1967.02 1293.65 L1966.34 1293.65 L1965.67 1293.65 L1964.99 1293.65 L1964.32 1293.65 L1963.64 1293.65 L1962.97 1293.65 L1962.29 1293.65 L1961.61 1293.65 L1960.94 1293.65 L1960.26 1293.65 L1959.59 1293.65 L1958.91 1293.65 L1958.24 1293.65 L1957.56 1293.65 L1956.89 1293.65 L1956.21 1293.65 L1955.53 1293.65 L1954.86 1293.65 L1954.18 1293.65 L1953.51 1293.65 L1952.83 1293.65 L1952.16 1293.65 L1951.48 1293.65 L1950.8 1293.65 L1950.13 1293.65 L1949.45 1293.65 L1948.78 1293.65 L1948.1 1293.65 L1947.43 1293.65 L1946.75 1293.65 L1946.08 1293.65 L1945.4 1293.65 L1944.72 1293.65 L1944.05 1293.65 L1943.37 1293.65 L1942.7 1293.65 L1942.02 1293.65 L1941.35 1293.65 L1940.67 1293.65 L1940 1293.65 L1939.32 1293.65 L1938.64 1293.65 L1937.97 1293.65 L1937.29 1293.65 L1936.62 1293.65 L1935.94 1293.65 L1935.27 1293.65 L1934.59 1293.65 L1933.92 1293.65 L1933.24 1293.65 L1932.56 1293.65 L1931.89 1293.65 L1931.21 1293.65 L1930.54 1293.65 L1929.86 1293.65 L1929.19 1293.65 L1928.51 1293.65 L1927.84 1293.65 L1927.16 1293.65 L1926.48 1293.65 L1925.81 1293.65 L1925.13 1293.65 L1924.46 1293.65 L1923.78 1293.65 L1923.11 1293.65 L1922.43 1293.65 L1921.75 1293.65 L1921.08 1293.65 L1920.4 1293.65 L1919.73 1293.65 L1919.05 1293.65 L1918.38 1293.65 L1917.7 1293.65 L1917.03 1293.65 L1916.35 1293.65 L1915.67 1293.65 L1915 1293.65 L1914.32 1293.65 L1913.65 1293.65 L1912.97 1293.65 L1912.3 1293.65 L1911.62 1293.65 L1910.95 1293.65 L1910.27 1293.65 L1909.59 1293.65 L1908.92 1293.65 L1908.24 1293.65 L1907.57 1293.65 L1906.89 1293.65 L1906.22 1293.65 L1905.54 1293.65 L1904.87 1293.65 L1904.19 1293.65 L1903.51 1293.65 L1902.84 1293.65 L1902.16 1293.65 L1901.49 1293.65 L1900.81 1293.65 L1900.14 1293.65 L1899.46 1293.65 L1898.79 1293.65 L1898.11 1293.65 L1897.43 1293.65 L1896.76 1293.65 L1896.08 1293.65 L1895.41 1293.65 L1894.73 1293.65 L1894.06 1293.65 L1893.38 1293.65 L1892.7 1293.65 L1892.03 1293.65 L1891.35 1293.65 L1890.68 1293.65 L1890 1293.65 L1889.33 1293.65 L1888.65 1293.65 L1887.98 1293.65 L1887.3 1293.65 L1886.62 1293.65 L1885.95 1293.65 L1885.27 1293.65 L1884.6 1293.65 L1883.92 1293.65 L1883.25 1293.65 L1882.57 1293.65 L1881.9 1293.65 L1881.22 1293.65 L1880.54 1293.65 L1879.87 1293.65 L1879.19 1293.65 L1878.52 1293.65 L1877.84 1293.65 L1877.17 1293.65 L1876.49 1293.65 L1875.82 1293.65 L1875.14 1293.65 L1874.46 1293.65 L1873.79 1293.65 L1873.11 1293.65 L1872.44 1293.65 L1871.76 1293.65 L1871.09 1293.65 L1870.41 1293.65 L1869.73 1293.65 L1869.06 1293.65 L1868.38 1293.65 L1867.71 1293.65 L1867.03 1293.65 L1866.36 1293.65 L1865.68 1293.65 L1865.01 1293.65 L1864.33 1293.65 L1863.65 1293.65 L1862.98 1293.65 L1862.3 1293.65 L1861.63 1293.65 L1860.95 1293.65 L1860.28 1293.65 L1859.6 1293.65 L1858.93 1293.65 L1858.25 1293.65 L1857.57 1293.65 L1856.9 1293.65 L1856.22 1293.65 L1855.55 1293.65 L1854.87 1293.65 L1854.2 1293.65 L1853.52 1293.65 L1852.85 1293.65 L1852.17 1293.65 L1851.49 1293.65 L1850.82 1293.65 L1850.14 1293.65 L1849.47 1293.65 L1848.79 1293.65 L1848.12 1293.65 L1847.44 1293.65 L1846.77 1293.65 L1846.09 1293.65 L1845.41 1293.65 L1844.74 1293.65 L1844.06 1293.65 L1843.39 1293.65 L1842.71 1293.65 L1842.04 1293.65 L1841.36 1293.65 L1840.68 1293.65 L1840.01 1293.65 L1839.33 1293.65 L1838.66 1293.65 L1837.98 1293.65 L1837.31 1293.65 L1836.63 1293.65 L1835.96 1293.65 L1835.28 1293.65 L1834.6 1293.65 L1833.93 1293.65 L1833.25 1293.65 L1832.58 1293.65 L1831.9 1293.65 L1831.23 1293.65 L1830.55 1293.65 L1829.88 1293.65 L1829.2 1293.65 L1828.52 1293.65 L1827.85 1293.65 L1827.17 1293.65 L1826.5 1293.65 L1825.82 1293.65 L1825.15 1293.65 L1824.47 1293.65 L1823.8 1293.65 L1823.12 1293.65 L1822.44 1293.65 L1821.77 1293.65 L1821.09 1293.65 L1820.42 1293.65 L1819.74 1293.65 L1819.07 1293.65 L1818.39 1293.65 L1817.72 1293.65 L1817.04 1293.65 L1816.36 1293.65 L1815.69 1293.65 L1815.01 1293.65 L1814.34 1293.65 L1813.66 1293.65 L1812.99 1293.65 L1812.31 1293.65 L1811.63 1293.65 L1810.96 1293.65 L1810.28 1293.65 L1809.61 1293.65 L1808.93 1293.65 L1808.26 1293.65 L1807.58 1293.65 L1806.91 1293.65 L1806.23 1293.65 L1805.55 1293.65 L1804.88 1293.65 L1804.2 1293.65 L1803.53 1293.65 L1802.85 1293.65 L1802.18 1293.65 L1801.5 1293.65 L1800.83 1293.65 L1800.15 1293.65 L1799.47 1293.65 L1798.8 1293.65 L1798.12 1293.65 L1797.45 1293.65 L1796.77 1293.65 L1796.1 1293.65 L1795.42 1293.65 L1794.75 1293.65 L1794.07 1293.65 L1793.39 1293.65 L1792.72 1293.65 L1792.04 1293.65 L1791.37 1293.65 L1790.69 1293.65 L1790.02 1293.65 L1789.34 1293.65 L1788.67 1293.65 L1787.99 1293.65 L1787.31 1293.65 L1786.64 1293.65 L1785.96 1293.65 L1785.29 1293.65 L1784.61 1293.65 L1783.94 1293.65 L1783.26 1293.65 L1782.58 1293.65 L1781.91 1293.65 L1781.23 1293.65 L1780.56 1293.65 L1779.88 1293.65 L1779.21 1293.65 L1778.53 1293.65 L1777.86 1293.65 L1777.18 1293.65 L1776.5 1293.65 L1775.83 1293.65 L1775.15 1293.65 L1774.48 1293.65 L1773.8 1293.65 L1773.13 1293.65 L1772.45 1293.65 L1771.78 1293.65 L1771.1 1293.65 L1770.42 1293.65 L1769.75 1293.65 L1769.07 1293.65 L1768.4 1293.65 L1767.72 1293.65 L1767.05 1293.65 L1766.37 1293.65 L1765.7 1293.65 L1765.02 1293.65 L1764.34 1293.65 L1763.67 1293.65 L1762.99 1293.65 L1762.32 1293.65 L1761.64 1293.65 L1760.97 1293.65 L1760.29 1293.65 L1759.62 1293.65 L1758.94 1293.65 L1758.26 1293.65 L1757.59 1293.65 L1756.91 1293.65 L1756.24 1293.65 L1755.56 1293.65 L1754.89 1293.65 L1754.21 1293.65 L1753.53 1293.65 L1752.86 1293.65 L1752.18 1293.65 L1751.51 1293.65 L1750.83 1293.65 L1750.16 1293.65 L1749.48 1293.65 L1748.81 1293.65 L1748.13 1293.65 L1747.45 1293.65 L1746.78 1293.65 L1746.1 1293.65 L1745.43 1293.65 L1744.75 1293.65 L1744.08 1293.65 L1743.4 1293.65 L1742.73 1293.65 L1742.05 1293.65 L1741.37 1293.65 L1740.7 1293.65 L1740.02 1293.65 L1739.35 1293.65 L1738.67 1293.65 L1738 1293.65 L1737.32 1293.65 L1736.65 1293.65 L1735.97 1293.65 L1735.29 1293.65 L1734.62 1293.65 L1733.94 1293.65 L1733.27 1293.65 L1732.59 1293.65 L1731.92 1293.65 L1731.24 1293.65 L1730.57 1293.65 L1729.89 1293.65 L1729.21 1293.65 L1728.54 1293.65 L1727.86 1293.65 L1727.19 1293.65 L1726.51 1293.65 L1725.84 1293.65 L1725.16 1293.65 L1724.48 1293.65 L1723.81 1293.65 L1723.13 1293.65 L1722.46 1293.65 L1721.78 1293.65 L1721.11 1293.65 L1720.43 1293.65 L1719.76 1293.65 L1719.08 1293.65 L1718.4 1293.65 L1717.73 1293.65 L1717.05 1293.65 L1716.38 1293.65 L1715.7 1293.65 L1715.03 1293.65 L1714.35 1293.65 L1713.68 1293.65 L1713 1293.65 L1712.32 1293.65 L1711.65 1293.65 L1710.97 1293.65 L1710.3 1293.65 L1709.62 1293.65 L1708.95 1293.65 L1708.27 1293.65 L1707.6 1293.65 L1706.92 1293.65 L1706.24 1293.65 L1705.57 1293.65 L1704.89 1293.65 L1704.22 1293.65 L1703.54 1293.65 L1702.87 1293.65 L1702.19 1293.65 L1701.52 1293.65 L1700.84 1293.65 L1700.16 1293.65 L1699.49 1293.65 L1698.81 1293.65 L1698.14 1293.65 L1697.46 1293.65 L1696.79 1293.65 L1696.11 1293.65 L1695.43 1293.65 L1694.76 1293.65 L1694.08 1293.65 L1693.41 1293.65 L1692.73 1293.65 L1692.06 1293.65 L1691.38 1293.65 L1690.71 1293.65 L1690.03 1293.65 L1689.35 1293.65 L1688.68 1293.65 L1688 1293.65 L1687.33 1293.65 L1686.65 1293.65 L1685.98 1293.65 L1685.3 1293.65 L1684.63 1293.65 L1683.95 1293.65 L1683.27 1293.65 L1682.6 1293.65 L1681.92 1293.65 L1681.25 1293.65 L1680.57 1293.65 L1679.9 1293.65 L1679.22 1293.65 L1678.55 1293.65 L1677.87 1293.65 L1677.19 1293.65 L1676.52 1293.65 L1675.84 1293.65 L1675.17 1293.65 L1674.49 1293.65 L1673.82 1293.65 L1673.14 1293.65 L1672.47 1293.65 L1671.79 1293.65 L1671.11 1293.65 L1670.44 1293.65 L1669.76 1293.65 L1669.09 1293.65 L1668.41 1293.65 L1667.74 1293.65 L1667.06 1293.65 L1666.38 1293.65 L1665.71 1293.65 L1665.03 1293.65 L1664.36 1293.65 L1663.68 1293.65 L1663.01 1293.65 L1662.33 1293.65 L1661.66 1293.65 L1660.98 1293.65 L1660.3 1293.65 L1659.63 1293.65 L1658.95 1293.65 L1658.28 1293.65 L1657.6 1293.65 L1656.93 1293.65 L1656.25 1293.65 L1655.58 1293.65 L1654.9 1293.65 L1654.22 1293.65 L1653.55 1293.65 L1652.87 1293.65 L1652.2 1293.65 L1651.52 1293.65 L1650.85 1293.65 L1650.17 1293.65 L1649.5 1293.65 L1648.82 1293.65 L1648.14 1293.65 L1647.47 1293.65 L1646.79 1293.65 L1646.12 1293.65 L1645.44 1293.65 L1644.77 1293.65 L1644.09 1293.65 L1643.41 1293.65 L1642.74 1293.65 L1642.06 1293.65 L1641.39 1293.65 L1640.71 1293.65 L1640.04 1293.65 L1639.36 1293.65 L1638.69 1293.65 L1638.01 1293.65 L1637.33 1293.65 L1636.66 1293.65 L1635.98 1293.65 L1635.31 1293.65 L1634.63 1293.65 L1633.96 1293.65 L1633.28 1293.65 L1632.61 1293.65 L1631.93 1293.65 L1631.25 1293.65 L1630.58 1293.65 L1629.9 1293.65 L1629.23 1293.65 L1628.55 1293.65 L1627.88 1293.65 L1627.2 1293.65 L1626.53 1293.65 L1625.85 1293.65 L1625.17 1293.65 L1624.5 1293.65 L1623.82 1293.65 L1623.15 1293.65 L1622.47 1293.65 L1621.8 1293.65 L1621.12 1293.65 L1620.45 1293.65 L1619.77 1293.65 L1619.09 1293.65 L1618.42 1293.65 L1617.74 1293.65 L1617.07 1293.65 L1616.39 1293.65 L1615.72 1293.65 L1615.04 1293.65 L1614.36 1293.65 L1613.69 1293.65 L1613.01 1293.65 L1612.34 1293.65 L1611.66 1293.65 L1610.99 1293.65 L1610.31 1293.65 L1609.64 1293.65 L1608.96 1293.65 L1608.28 1293.65 L1607.61 1293.65 L1606.93 1293.65 L1606.26 1293.65 L1605.58 1293.65 L1604.91 1293.65 L1604.23 1293.65 L1603.56 1293.65 L1602.88 1293.65 L1602.2 1293.65 L1601.53 1293.65 L1600.85 1293.65 L1600.18 1293.65 L1599.5 1293.65 L1598.83 1293.65 L1598.15 1293.65 L1597.48 1293.65 L1596.8 1293.65 L1596.12 1293.65 L1595.45 1293.65 L1594.77 1293.65 L1594.1 1293.65 L1593.42 1293.65 L1592.75 1293.65 L1592.07 1293.65 L1591.4 1293.65 L1590.72 1293.65 L1590.04 1293.65 L1589.37 1293.65 L1588.69 1293.65 L1588.02 1293.65 L1587.34 1293.65 L1586.67 1293.65 L1585.99 1293.65 L1585.31 1293.65 L1584.64 1293.65 L1583.96 1293.65 L1583.29 1293.65 L1582.61 1293.65 L1581.94 1293.65 L1581.26 1293.65 L1580.59 1293.65 L1579.91 1293.65 L1579.23 1293.65 L1578.56 1293.65 L1577.88 1293.65 L1577.21 1293.65 L1576.53 1293.65 L1575.86 1293.65 L1575.18 1293.65 L1574.51 1293.65 L1573.83 1293.65 L1573.15 1293.65 L1572.48 1293.65 L1571.8 1293.65 L1571.13 1293.65 L1570.45 1293.65 L1569.78 1293.65 L1569.1 1293.65 L1568.43 1293.65 L1567.75 1293.65 L1567.07 1293.65 L1566.4 1293.65 L1565.72 1293.65 L1565.05 1293.65 L1564.37 1293.65 L1563.7 1293.65 L1563.02 1293.65 L1562.35 1293.65 L1561.67 1293.65 L1560.99 1293.65 L1560.32 1293.65 L1559.64 1293.65 L1558.97 1293.65 L1558.29 1293.65 L1557.62 1293.65 L1556.94 1293.65 L1556.26 1293.65 L1555.59 1293.65 L1554.91 1293.65 L1554.24 1293.65 L1553.56 1293.65 L1552.89 1293.65 L1552.21 1293.65 L1551.54 1293.65 L1550.86 1293.65 L1550.18 1293.65 L1549.51 1293.65 L1548.83 1293.65 L1548.16 1293.65 L1547.48 1293.65 L1546.81 1293.65 L1546.13 1293.65 L1545.46 1293.65 L1544.78 1293.65 L1544.1 1293.65 L1543.43 1293.65 L1542.75 1293.65 L1542.08 1293.65 L1541.4 1293.65 L1540.73 1293.65 L1540.05 1293.65 L1539.38 1293.65 L1538.7 1293.65 L1538.02 1293.65 L1537.35 1293.65 L1536.67 1293.65 L1536 1293.65 L1535.32 1293.65 L1534.65 1293.65 L1533.97 1293.65 L1533.3 1293.65 L1532.62 1293.65 L1531.94 1293.65 L1531.27 1293.65 L1530.59 1293.65 L1529.92 1293.65 L1529.24 1293.65 L1528.57 1293.65 L1527.89 1293.65 L1527.21 1293.65 L1526.54 1293.65 L1525.86 1293.65 L1525.19 1293.65 L1524.51 1293.65 L1523.84 1293.65 L1523.16 1293.65 L1522.49 1293.65 L1521.81 1293.65 L1521.13 1293.65 L1520.46 1293.65 L1519.78 1293.65 L1519.11 1293.65 L1518.43 1293.65 L1517.76 1293.65 L1517.08 1293.65 L1516.41 1293.65 L1515.73 1293.65 L1515.05 1293.65 L1514.38 1293.65 L1513.7 1293.65 L1513.03 1293.65 L1512.35 1293.65 L1511.68 1293.65 L1511 1293.65 L1510.33 1293.65 L1509.65 1293.65 L1508.97 1293.65 L1508.3 1293.65 L1507.62 1293.65 L1506.95 1293.65 L1506.27 1293.65 L1505.6 1293.65 L1504.92 1293.65 L1504.25 1293.65 L1503.57 1293.65 L1502.89 1293.65 L1502.22 1293.65 L1501.54 1293.65 L1500.87 1293.65 L1500.19 1293.65 L1499.52 1293.65 L1498.84 1293.65 L1498.16 1293.65 L1497.49 1293.65 L1496.81 1293.65 L1496.14 1293.65 L1495.46 1293.65 L1494.79 1293.65 L1494.11 1293.65 L1493.44 1293.65 L1492.76 1293.65 L1492.08 1293.65 L1491.41 1293.65 L1490.73 1293.65 L1490.06 1293.65 L1489.38 1293.65 L1488.71 1293.65 L1488.03 1293.65 L1487.36 1293.65 L1486.68 1293.65 L1486 1293.65 L1485.33 1293.65 L1484.65 1293.65 L1483.98 1293.65 L1483.3 1293.65 L1482.63 1293.65 L1481.95 1293.65 L1481.28 1293.65 L1480.6 1293.65 L1479.92 1293.65 L1479.25 1293.65 L1478.57 1293.65 L1477.9 1293.65 L1477.22 1293.65 L1476.55 1293.65 L1475.87 1293.65 L1475.2 1293.65 L1474.52 1293.65 L1473.84 1293.65 L1473.17 1293.65 L1472.49 1293.65 L1471.82 1293.65 L1471.14 1293.65 L1470.47 1293.65 L1469.79 1293.65 L1469.11 1293.65 L1468.44 1293.65 L1467.76 1293.65 L1467.09 1293.65 L1466.41 1293.65 L1465.74 1293.65 L1465.06 1293.65 L1464.39 1293.65 L1463.71 1293.65 L1463.03 1293.65 L1462.36 1293.65 L1461.68 1293.65 L1461.01 1293.65 L1460.33 1293.65 L1459.66 1293.65 L1458.98 1293.65 L1458.31 1293.65 L1457.63 1293.65 L1456.95 1293.65 L1456.28 1293.65 L1455.6 1293.65 L1454.93 1293.65 L1454.25 1293.65 L1453.58 1293.65 L1452.9 1293.65 L1452.23 1293.65 L1451.55 1293.65 L1450.87 1293.65 L1450.2 1293.65 L1449.52 1293.65 L1448.85 1293.65 L1448.17 1293.65 L1447.5 1293.65 L1446.82 1293.65 L1446.15 1293.65 L1445.47 1293.65 L1444.79 1293.65 L1444.12 1293.65 L1443.44 1293.65 L1442.77 1293.65 L1442.09 1293.65 L1441.42 1293.65 L1440.74 1293.65 L1440.06 1293.65 L1439.39 1293.65 L1438.71 1293.65 L1438.04 1293.65 L1437.36 1293.65 L1436.69 1293.65 L1436.01 1293.65 L1435.34 1293.65 L1434.66 1293.65 L1433.98 1293.65 L1433.31 1293.65 L1432.63 1293.65 L1431.96 1293.65 L1431.28 1293.65 L1430.61 1293.65 L1429.93 1293.65 L1429.26 1293.65 L1428.58 1293.65 L1427.9 1293.65 L1427.23 1293.65 L1426.55 1293.65 L1425.88 1293.65 L1425.2 1293.65 L1424.53 1293.65 L1423.85 1293.65 L1423.18 1293.65 L1422.5 1293.65 L1421.82 1293.65 L1421.15 1293.65 L1420.47 1293.65 L1419.8 1293.65 L1419.12 1293.65 L1418.45 1293.65 L1417.77 1293.65 L1417.09 1293.65 L1416.42 1293.65 L1415.74 1293.65 L1415.07 1293.65 L1414.39 1293.65 L1413.72 1293.65 L1413.04 1293.65 L1412.37 1293.65 L1411.69 1293.65 L1411.01 1293.65 L1410.34 1293.65 L1409.66 1293.65 L1408.99 1293.65 L1408.31 1293.65 L1407.64 1293.65 L1406.96 1293.65 L1406.29 1293.65 L1405.61 1293.65 L1404.93 1293.65 L1404.26 1293.65 L1403.58 1293.65 L1402.91 1293.65 L1402.23 1293.65 L1401.56 1293.65 L1400.88 1293.65 L1400.21 1293.65 L1399.53 1293.65 L1398.85 1293.65 L1398.18 1293.65 L1397.5 1293.65 L1396.83 1293.65 L1396.15 1293.65 L1395.48 1293.65 L1394.8 1293.65 L1394.13 1293.65 L1393.45 1293.65 L1392.77 1293.65 L1392.1 1293.65 L1391.42 1293.65 L1390.75 1293.65 L1390.07 1293.65 L1389.4 1293.65 L1388.72 1293.65 L1388.04 1293.65 L1387.37 1293.65 L1386.69 1293.65 L1386.02 1293.65 L1385.34 1293.65 L1384.67 1293.65 L1383.99 1293.65 L1383.32 1293.65 L1382.64 1293.65 L1381.96 1293.65 L1381.29 1293.65 L1380.61 1293.65 L1379.94 1293.65 L1379.26 1293.65 L1378.59 1293.65 L1377.91 1293.65 L1377.24 1293.65 L1376.56 1293.65 L1375.88 1293.65 L1375.21 1293.65 L1374.53 1293.65 L1373.86 1293.65 L1373.18 1293.65 L1372.51 1293.65 L1371.83 1293.65 L1371.16 1293.65 L1370.48 1293.65 L1369.8 1293.65 L1369.13 1293.65 L1368.45 1293.65 L1367.78 1293.65 L1367.1 1293.65 L1366.43 1293.65 L1365.75 1293.65 L1365.08 1293.65 L1364.4 1293.65 L1363.72 1293.65 L1363.05 1293.65 L1362.37 1293.65 L1361.7 1293.65 L1361.02 1293.65 L1360.35 1293.65 L1359.67 1293.65 L1358.99 1293.65 L1358.32 1293.65 L1357.64 1293.65 L1356.97 1293.65 L1356.29 1293.65 L1355.62 1293.65 L1354.94 1293.65 L1354.27 1293.65 L1353.59 1293.65 L1352.91 1293.65 L1352.24 1293.65 L1351.56 1293.65 L1350.89 1293.65 L1350.21 1293.65 L1349.54 1293.65 L1348.86 1293.65 L1348.19 1293.65 L1347.51 1293.65 L1346.83 1293.65 L1346.16 1293.65 L1345.48 1293.65 L1344.81 1293.65 L1344.13 1293.65 L1343.46 1293.65 L1342.78 1293.65 L1342.11 1293.65 L1341.43 1293.65 L1340.75 1293.65 L1340.08 1293.65 L1339.4 1293.65 L1338.73 1293.65 L1338.05 1293.65 L1337.38 1293.65 L1336.7 1293.65 L1336.03 1293.65 L1335.35 1293.65 L1334.67 1293.65 L1334 1293.65 L1333.32 1293.65 L1332.65 1293.65 L1331.97 1293.65 L1331.3 1293.65 L1330.62 1293.65 L1329.94 1293.65 L1329.27 1293.65 L1328.59 1293.65 L1327.92 1293.65 L1327.24 1293.65 L1326.57 1293.65 L1325.89 1293.65 L1325.22 1293.65 L1324.54 1293.65 L1323.86 1293.65 L1323.19 1293.65 L1322.51 1293.65 L1321.84 1293.65 L1321.16 1293.65 L1320.49 1293.65 L1319.81 1293.65 L1319.14 1293.65 L1318.46 1293.65 L1317.78 1293.65 L1317.11 1293.65 L1316.43 1293.65 L1315.76 1293.65 L1315.08 1293.65 L1314.41 1293.65 L1313.73 1293.65 L1313.06 1293.65 L1312.38 1293.65 L1311.7 1293.65 L1311.03 1293.65 L1310.35 1293.65 L1309.68 1293.65 L1309 1293.65 L1308.33 1293.65 L1307.65 1293.65 L1306.98 1293.65 L1306.3 1293.65 L1305.62 1293.65 L1304.95 1293.65 L1304.27 1293.65 L1303.6 1293.65 L1302.92 1293.65 L1302.25 1293.65 L1301.57 1293.65 L1300.89 1293.65 L1300.22 1293.65 L1299.54 1293.65 L1298.87 1293.65 L1298.19 1293.65 L1297.52 1293.65 L1296.84 1293.65 L1296.17 1293.65 L1295.49 1293.65 L1294.81 1293.65 L1294.14 1293.65 L1293.46 1293.65 L1292.79 1293.65 L1292.11 1293.65 L1291.44 1293.65 L1290.76 1293.65 L1290.09 1293.65 L1289.41 1293.65 L1288.73 1293.65 L1288.06 1293.65 L1287.38 1293.65 L1286.71 1293.65 L1286.03 1293.65 L1285.36 1293.65 L1284.68 1293.65 L1284.01 1293.65 L1283.33 1293.65 L1282.65 1293.65 L1281.98 1293.65 L1281.3 1293.65 L1280.63 1293.65 L1279.95 1293.65 L1279.28 1293.65 L1278.6 1293.65 L1277.93 1293.65 L1277.25 1293.65 L1276.57 1293.65 L1275.9 1293.65 L1275.22 1293.65 L1274.55 1293.65 L1273.87 1293.65 L1273.2 1293.65 L1272.52 1293.65 L1271.84 1293.65 L1271.17 1293.65 L1270.49 1293.65 L1269.82 1293.65 L1269.14 1293.65 L1268.47 1293.65 L1267.79 1293.65 L1267.12 1293.65 L1266.44 1293.65 L1265.76 1293.65 L1265.09 1293.65 L1264.41 1293.65 L1263.74 1293.65 L1263.06 1293.65 L1262.39 1293.65 L1261.71 1293.65 L1261.04 1293.65 L1260.36 1293.65 L1259.68 1293.65 L1259.01 1293.65 L1258.33 1293.65 L1257.66 1293.65 L1256.98 1293.65 L1256.31 1293.65 L1255.63 1293.65 L1254.96 1293.65 L1254.28 1293.65 L1253.6 1293.65 L1252.93 1293.65 L1252.25 1293.65 L1251.58 1293.65 L1250.9 1293.65 L1250.23 1293.65 L1249.55 1293.65 L1248.88 1293.65 L1248.2 1293.65 L1247.52 1293.65 L1246.85 1293.65 L1246.17 1293.65 L1245.5 1293.65 L1244.82 1293.65 L1244.15 1293.65 L1243.47 1293.65 L1242.79 1293.65 L1242.12 1293.65 L1241.44 1293.65 L1240.77 1293.65 L1240.09 1293.65 L1239.42 1293.65 L1238.74 1293.65 L1238.07 1293.65 L1237.39 1293.65 L1236.71 1293.65 L1236.04 1293.65 L1235.36 1293.65 L1234.69 1293.65 L1234.01 1293.65 L1233.34 1293.65 L1232.66 1293.65 L1231.99 1293.65 L1231.31 1293.65 L1230.63 1293.65 L1229.96 1293.65 L1229.28 1293.65 L1228.61 1293.65 L1227.93 1293.65 L1227.26 1293.65 L1226.58 1293.65 L1225.91 1293.65 L1225.23 1293.65 L1224.55 1293.65 L1223.88 1293.65 L1223.2 1293.65 L1222.53 1293.65 L1221.85 1293.65 L1221.18 1293.65 L1220.5 1293.65 L1219.83 1293.65 L1219.15 1293.65 L1218.47 1293.65 L1217.8 1293.65 L1217.12 1293.65 L1216.45 1293.65 L1215.77 1293.65 L1215.1 1293.65 L1214.42 1293.65 L1213.74 1293.65 L1213.07 1293.65 L1212.39 1293.65 L1211.72 1293.65 L1211.04 1293.65 L1210.37 1293.65 L1209.69 1293.65 L1209.02 1293.65 L1208.34 1293.65 L1207.66 1293.65 L1206.99 1293.65 L1206.31 1293.65 L1205.64 1293.65 L1204.96 1293.65 L1204.29 1293.65 L1203.61 1293.65 L1202.94 1293.65 L1202.26 1293.65 L1201.58 1293.65 L1200.91 1293.65 L1200.23 1293.65 L1199.56 1293.65 L1198.88 1293.65 L1198.21 1293.65 L1197.53 1293.65 L1196.86 1293.65 L1196.18 1293.65 L1195.5 1293.65 L1194.83 1293.65 L1194.15 1293.65 L1193.48 1293.65 L1192.8 1293.65 L1192.13 1293.65 L1191.45 1293.65 L1190.77 1293.65 L1190.1 1293.65 L1189.42 1293.65 L1188.75 1293.65 L1188.07 1293.65 L1187.4 1293.65 L1186.72 1293.65 L1186.05 1293.65 L1185.37 1293.65 L1184.69 1293.65 L1184.02 1293.65 L1183.34 1293.65 L1182.67 1293.65 L1181.99 1293.65 L1181.32 1293.65 L1180.64 1293.65 L1179.97 1293.65 L1179.29 1293.65 L1178.61 1293.65 L1177.94 1293.65 L1177.26 1293.65 L1176.59 1293.65 L1175.91 1293.65 L1175.24 1293.65 L1174.56 1293.65 L1173.89 1293.65 L1173.21 1293.65 L1172.53 1293.65 L1171.86 1293.65 L1171.18 1293.65 L1170.51 1293.65 L1169.83 1293.65 L1169.16 1293.65 L1168.48 1293.65 L1167.81 1293.65 L1167.13 1293.65 L1166.45 1293.65 L1165.78 1293.65 L1165.1 1293.65 L1164.43 1293.65 L1163.75 1293.65 L1163.08 1293.65 L1162.4 1293.65 L1161.72 1293.65 L1161.05 1293.65 L1160.37 1293.65 L1159.7 1293.65 L1159.02 1293.65 L1158.35 1293.65 L1157.67 1293.65 L1157 1293.65 L1156.32 1293.65 L1155.64 1293.65 L1154.97 1293.65 L1154.29 1293.65 L1153.62 1293.65 L1152.94 1293.65 L1152.27 1293.65 L1151.59 1293.65 L1150.92 1293.65 L1150.24 1293.65 L1149.56 1293.65 L1148.89 1293.65 L1148.21 1293.65 L1147.54 1293.65 L1146.86 1293.65 L1146.19 1293.65 L1145.51 1293.65 L1144.84 1293.65 L1144.16 1293.65 L1143.48 1293.65 L1142.81 1293.65 L1142.13 1293.65 L1141.46 1293.65 L1140.78 1293.65 L1140.11 1293.65 L1139.43 1293.65 L1138.76 1293.65 L1138.08 1293.65 L1137.4 1293.65 L1136.73 1293.65 L1136.05 1293.65 L1135.38 1293.65 L1134.7 1293.65 L1134.03 1293.65 L1133.35 1293.65 L1132.67 1293.65 L1132 1293.65 L1131.32 1293.65 L1130.65 1293.65 L1129.97 1293.65 L1129.3 1293.65 L1128.62 1293.65 L1127.95 1293.65 L1127.27 1293.65 L1126.59 1293.65 L1125.92 1293.65 L1125.24 1293.65 L1124.57 1293.65 L1123.89 1293.65 L1123.22 1293.65 L1122.54 1293.65 L1121.87 1293.65 L1121.19 1293.65 L1120.51 1293.65 L1119.84 1293.65 L1119.16 1293.65 L1118.49 1293.65 L1117.81 1293.65 L1117.14 1293.65 L1116.46 1293.65 L1115.79 1293.65 L1115.11 1293.65 L1114.43 1293.65 L1113.76 1293.65 L1113.08 1293.65 L1112.41 1293.65 L1111.73 1293.65 L1111.06 1293.65 L1110.38 1293.65 L1109.71 1293.65 L1109.03 1293.65 L1108.35 1293.65 L1107.68 1293.65 L1107 1293.65 L1106.33 1293.65 L1105.65 1293.65 L1104.98 1293.65 L1104.3 1293.65 L1103.62 1293.65 L1102.95 1293.65 L1102.27 1293.65 L1101.6 1293.65 L1100.92 1293.65 L1100.25 1293.65 L1099.57 1293.65 L1098.9 1293.65 L1098.22 1293.65 L1097.54 1293.65 L1096.87 1293.65 L1096.19 1293.65 L1095.52 1293.65 L1094.84 1293.65 L1094.17 1293.65 L1093.49 1293.65 L1092.82 1293.65 L1092.14 1293.65 L1091.46 1293.65 L1090.79 1293.65 L1090.11 1293.65 L1089.44 1293.65 L1088.76 1293.65 L1088.09 1293.65 L1087.41 1293.65 L1086.74 1293.65 L1086.06 1293.65 L1085.38 1293.65 L1084.71 1293.65 L1084.03 1293.65 L1083.36 1293.65 L1082.68 1293.65 L1082.01 1293.65 L1081.33 1293.65 L1080.66 1293.65 L1079.98 1293.65 L1079.3 1293.65 L1078.63 1293.65 L1077.95 1293.65 L1077.28 1293.65 L1076.6 1293.65 L1075.93 1293.65 L1075.25 1293.65 L1074.57 1293.65 L1073.9 1293.65 L1073.22 1293.65 L1072.55 1293.65 L1071.87 1293.65 L1071.2 1293.65 L1070.52 1293.65 L1069.85 1293.65 L1069.17 1293.65 L1068.49 1293.65 L1067.82 1293.65 L1067.14 1293.65 L1066.47 1293.65 L1065.79 1293.65 L1065.12 1293.65 L1064.44 1293.65 L1063.77 1293.65 L1063.09 1293.65 L1062.41 1293.65 L1061.74 1293.65 L1061.06 1293.65 L1060.39 1293.65 L1059.71 1293.65 L1059.04 1293.65 L1058.36 1293.65 L1057.69 1293.65 L1057.01 1293.65 L1056.33 1293.65 L1055.66 1293.65 L1054.98 1293.65 L1054.31 1293.65 L1053.63 1293.65 L1052.96 1293.65 L1052.28 1293.65 L1051.61 1293.65 L1050.93 1293.65 L1050.25 1293.65 L1049.58 1293.65 L1048.9 1293.65 L1048.23 1293.65 L1047.55 1293.65 L1046.88 1293.65 L1046.2 1293.65 L1045.52 1293.65 L1044.85 1293.65 L1044.17 1293.65 L1043.5 1293.65 L1042.82 1293.65 L1042.15 1293.65 L1041.47 1293.65 L1040.8 1293.65 L1040.12 1293.65 L1039.44 1293.65 L1038.77 1293.65 L1038.09 1293.65 L1037.42 1293.65 L1036.74 1293.65 L1036.07 1293.65 L1035.39 1293.65 L1034.72 1293.65 L1034.04 1293.65 L1033.36 1293.65 L1032.69 1293.65 L1032.01 1293.65 L1031.34 1293.65 L1030.66 1293.65 L1029.99 1293.65 L1029.31 1293.65 L1028.64 1293.65 L1027.96 1293.65 L1027.28 1293.65 L1026.61 1293.65 L1025.93 1293.65 L1025.26 1293.65 L1024.58 1293.65 L1023.91 1293.65 L1023.23 1293.65 L1022.56 1293.65 L1021.88 1293.65 L1021.2 1293.65 L1020.53 1293.65 L1019.85 1293.65 L1019.18 1293.65 L1018.5 1293.65 L1017.83 1293.65 L1017.15 1293.65 L1016.47 1293.65 L1015.8 1293.65 L1015.12 1293.65 L1014.45 1293.65 L1013.77 1293.65 L1013.1 1293.65 L1012.42 1293.65 L1011.75 1293.65 L1011.07 1293.65 L1010.39 1293.65 L1009.72 1293.65 L1009.04 1293.65 L1008.37 1293.65 L1007.69 1293.65 L1007.02 1293.65 L1006.34 1293.65 L1005.67 1293.65 L1004.99 1293.65 L1004.31 1293.65 L1003.64 1293.65 L1002.96 1293.65 L1002.29 1293.65 L1001.61 1293.65 L1000.94 1293.65 L1000.26 1293.65 L999.585 1293.65 L998.91 1293.65 L998.234 1293.65 L997.558 1293.65 L996.883 1293.65 L996.207 1293.65 L995.532 1293.65 L994.856 1293.65 L994.181 1293.65 L993.505 1293.65 L992.829 1293.65 L992.154 1293.65 L991.478 1293.65 L990.803 1293.65 L990.127 1293.65 L989.452 1293.65 L988.776 1293.65 L988.1 1293.65 L987.425 1293.65 L986.749 1293.65 L986.074 1293.65 L985.398 1293.65 L984.722 1293.65 L984.047 1293.65 L983.371 1293.65 L982.696 1293.65 L982.02 1293.65 L981.345 1293.65 L980.669 1293.65 L979.993 1293.65 L979.318 1293.65 L978.642 1293.65 L977.967 1293.65 L977.291 1293.65 L976.615 1293.65 L975.94 1293.65 L975.264 1293.65 L974.589 1293.65 L973.913 1293.65 L973.238 1293.65 L972.562 1293.65 L971.886 1293.65 L971.211 1293.65 L970.535 1293.65 L969.86 1293.65 L969.184 1293.65 L968.508 1293.65 L967.833 1293.65 L967.157 1293.65 L966.482 1293.65 L965.806 1293.65 L965.131 1293.65 L964.455 1293.65 L963.779 1293.65 L963.104 1293.65 L962.428 1293.65 L961.753 1293.65 L961.077 1293.65 L960.401 1293.65 L959.726 1293.65 L959.05 1293.65 L958.375 1293.65 L957.699 1293.65 L957.024 1293.65 L956.348 1293.65 L955.672 1293.65 L954.997 1293.65 L954.321 1293.65 L953.646 1293.65 L952.97 1293.65 L952.294 1293.65 L951.619 1293.65 L950.943 1293.65 L950.268 1293.65 L949.592 1293.65 L948.917 1293.65 L948.241 1293.65 L947.565 1293.65 L946.89 1293.65 L946.214 1293.65 L945.539 1293.65 L944.863 1293.65 L944.188 1293.65 L943.512 1293.65 L942.836 1293.65 L942.161 1293.65 L941.485 1293.65  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"941.485,1295.25 942.161,1295.25 942.836,1295.25 943.512,1295.25 944.188,1295.25 944.863,1295.25 945.539,1295.25 946.214,1295.25 946.89,1295.25 947.565,1295.25 948.241,1295.25 948.917,1295.25 949.592,1295.25 950.268,1295.25 950.943,1295.25 951.619,1295.25 952.294,1295.25 952.97,1295.25 953.646,1295.25 954.321,1295.25 954.997,1295.25 955.672,1295.25 956.348,1295.25 957.024,1295.25 957.699,1295.25 958.375,1295.25 959.05,1295.25 959.726,1295.25 960.401,1295.25 961.077,1295.25 961.753,1295.25 962.428,1295.25 963.104,1295.25 963.779,1295.25 964.455,1295.25 965.131,1295.25 965.806,1295.25 966.482,1295.25 967.157,1295.25 967.833,1295.25 968.508,1295.25 969.184,1295.25 969.86,1295.25 970.535,1295.25 971.211,1295.25 971.886,1295.25 972.562,1295.25 973.238,1295.25 973.913,1295.25 974.589,1295.25 975.264,1295.25 975.94,1295.25 976.615,1295.25 977.291,1295.25 977.967,1295.25 978.642,1295.25 979.318,1295.25 979.993,1295.25 980.669,1295.25 981.345,1295.25 982.02,1295.25 982.696,1295.25 983.371,1295.25 984.047,1295.25 984.722,1295.25 985.398,1295.25 986.074,1295.25 986.749,1295.25 987.425,1295.25 988.1,1295.25 988.776,1295.25 989.452,1295.25 990.127,1295.25 990.803,1295.25 991.478,1295.25 992.154,1295.25 992.829,1295.25 993.505,1295.25 994.181,1295.25 994.856,1295.25 995.532,1295.25 996.207,1295.25 996.883,1295.25 997.558,1295.25 998.234,1295.25 998.91,1295.25 999.585,1295.25 1000.26,1295.25 1000.94,1295.25 1001.61,1295.25 1002.29,1295.25 1002.96,1295.25 1003.64,1295.25 1004.31,1295.25 1004.99,1295.25 1005.67,1295.25 1006.34,1295.25 1007.02,1295.25 1007.69,1295.25 1008.37,1295.25 1009.04,1295.25 1009.72,1295.25 1010.39,1295.25 1011.07,1295.25 1011.75,1295.25 1012.42,1295.25 1013.1,1295.25 1013.77,1295.25 1014.45,1295.25 1015.12,1295.25 1015.8,1295.25 1016.47,1295.25 1017.15,1295.25 1017.83,1295.25 1018.5,1295.25 1019.18,1295.25 1019.85,1295.25 1020.53,1295.25 1021.2,1295.25 1021.88,1295.25 1022.56,1295.25 1023.23,1295.25 1023.91,1295.25 1024.58,1295.25 1025.26,1295.25 1025.93,1295.25 1026.61,1295.25 1027.28,1295.25 1027.96,1295.25 1028.64,1295.25 1029.31,1295.25 1029.99,1295.25 1030.66,1295.25 1031.34,1295.25 1032.01,1295.25 1032.69,1295.25 1033.36,1295.25 1034.04,1295.25 1034.72,1295.25 1035.39,1295.25 1036.07,1295.25 1036.74,1295.25 1037.42,1295.25 1038.09,1295.25 1038.77,1295.25 1039.44,1295.25 1040.12,1295.25 1040.8,1295.25 1041.47,1295.25 1042.15,1295.25 1042.82,1295.25 1043.5,1295.25 1044.17,1295.25 1044.85,1295.25 1045.52,1295.25 1046.2,1295.25 1046.88,1295.25 1047.55,1295.25 1048.23,1295.25 1048.9,1295.25 1049.58,1295.25 1050.25,1295.25 1050.93,1295.25 1051.61,1295.25 1052.28,1295.25 1052.96,1295.25 1053.63,1295.25 1054.31,1295.25 1054.98,1295.25 1055.66,1295.25 1056.33,1295.25 1057.01,1295.25 1057.69,1295.25 1058.36,1295.25 1059.04,1295.25 1059.71,1295.25 1060.39,1295.25 1061.06,1295.25 1061.74,1295.25 1062.41,1295.25 1063.09,1295.25 1063.77,1295.25 1064.44,1295.25 1065.12,1295.25 1065.79,1295.25 1066.47,1295.25 1067.14,1295.25 1067.82,1295.25 1068.49,1295.25 1069.17,1295.25 1069.85,1295.25 1070.52,1295.25 1071.2,1295.25 1071.87,1295.25 1072.55,1295.25 1073.22,1295.25 1073.9,1295.25 1074.57,1295.25 1075.25,1295.25 1075.93,1295.25 1076.6,1295.25 1077.28,1295.25 1077.95,1295.25 1078.63,1295.25 1079.3,1295.25 1079.98,1295.25 1080.66,1295.25 1081.33,1295.25 1082.01,1295.25 1082.68,1295.25 1083.36,1295.25 1084.03,1295.25 1084.71,1295.25 1085.38,1295.25 1086.06,1295.25 1086.74,1295.25 1087.41,1295.25 1088.09,1295.25 1088.76,1295.25 1089.44,1295.25 1090.11,1295.25 1090.79,1295.25 1091.46,1295.25 1092.14,1295.25 1092.82,1295.25 1093.49,1295.25 1094.17,1295.25 1094.84,1295.25 1095.52,1295.25 1096.19,1295.25 1096.87,1295.25 1097.54,1295.25 1098.22,1295.25 1098.9,1295.25 1099.57,1295.25 1100.25,1295.25 1100.92,1295.25 1101.6,1295.25 1102.27,1295.25 1102.95,1295.25 1103.62,1295.25 1104.3,1295.25 1104.98,1295.25 1105.65,1295.25 1106.33,1295.25 1107,1295.25 1107.68,1295.25 1108.35,1295.25 1109.03,1295.25 1109.71,1295.25 1110.38,1295.25 1111.06,1295.25 1111.73,1295.25 1112.41,1295.25 1113.08,1295.25 1113.76,1295.25 1114.43,1295.25 1115.11,1295.25 1115.79,1295.25 1116.46,1295.25 1117.14,1295.25 1117.81,1295.25 1118.49,1295.25 1119.16,1295.25 1119.84,1295.25 1120.51,1295.25 1121.19,1295.25 1121.87,1295.25 1122.54,1295.25 1123.22,1295.25 1123.89,1295.25 1124.57,1295.25 1125.24,1295.25 1125.92,1295.25 1126.59,1295.25 1127.27,1295.25 1127.95,1295.25 1128.62,1295.25 1129.3,1295.25 1129.97,1295.25 1130.65,1295.25 1131.32,1295.25 1132,1295.25 1132.67,1295.25 1133.35,1295.25 1134.03,1295.25 1134.7,1295.25 1135.38,1295.25 1136.05,1295.25 1136.73,1295.25 1137.4,1295.25 1138.08,1295.25 1138.76,1295.25 1139.43,1295.25 1140.11,1295.25 1140.78,1295.25 1141.46,1295.25 1142.13,1295.25 1142.81,1295.25 1143.48,1295.25 1144.16,1295.25 1144.84,1295.25 1145.51,1295.25 1146.19,1295.25 1146.86,1295.25 1147.54,1295.25 1148.21,1295.25 1148.89,1295.25 1149.56,1295.25 1150.24,1295.25 1150.92,1295.25 1151.59,1295.25 1152.27,1295.25 1152.94,1295.25 1153.62,1295.25 1154.29,1295.25 1154.97,1295.25 1155.64,1295.25 1156.32,1295.25 1157,1295.25 1157.67,1295.25 1158.35,1295.25 1159.02,1295.25 1159.7,1295.25 1160.37,1295.25 1161.05,1295.25 1161.72,1295.25 1162.4,1295.25 1163.08,1295.25 1163.75,1295.25 1164.43,1295.25 1165.1,1295.25 1165.78,1295.25 1166.45,1295.25 1167.13,1295.25 1167.81,1295.25 1168.48,1295.25 1169.16,1295.25 1169.83,1295.25 1170.51,1295.25 1171.18,1295.25 1171.86,1295.25 1172.53,1295.25 1173.21,1295.25 1173.89,1295.25 1174.56,1295.25 1175.24,1295.25 1175.91,1295.25 1176.59,1295.25 1177.26,1295.25 1177.94,1295.25 1178.61,1295.25 1179.29,1295.25 1179.97,1295.25 1180.64,1295.25 1181.32,1295.25 1181.99,1295.25 1182.67,1295.25 1183.34,1295.25 1184.02,1295.25 1184.69,1295.25 1185.37,1295.25 1186.05,1295.25 1186.72,1295.25 1187.4,1295.25 1188.07,1295.25 1188.75,1295.25 1189.42,1295.25 1190.1,1295.25 1190.77,1295.25 1191.45,1295.25 1192.13,1295.25 1192.8,1295.25 1193.48,1295.25 1194.15,1295.25 1194.83,1295.25 1195.5,1295.25 1196.18,1295.25 1196.86,1295.25 1197.53,1295.25 1198.21,1295.25 1198.88,1295.25 1199.56,1295.25 1200.23,1295.25 1200.91,1295.25 1201.58,1295.25 1202.26,1295.25 1202.94,1295.25 1203.61,1295.25 1204.29,1295.25 1204.96,1295.25 1205.64,1295.25 1206.31,1295.25 1206.99,1295.25 1207.66,1295.25 1208.34,1295.25 1209.02,1295.25 1209.69,1295.25 1210.37,1295.25 1211.04,1295.25 1211.72,1295.25 1212.39,1295.25 1213.07,1295.25 1213.74,1295.25 1214.42,1295.25 1215.1,1295.25 1215.77,1295.25 1216.45,1295.25 1217.12,1295.25 1217.8,1295.25 1218.47,1295.25 1219.15,1295.25 1219.83,1295.25 1220.5,1295.25 1221.18,1295.25 1221.85,1295.25 1222.53,1295.25 1223.2,1295.25 1223.88,1295.25 1224.55,1295.25 1225.23,1295.25 1225.91,1295.25 1226.58,1295.25 1227.26,1295.25 1227.93,1295.25 1228.61,1295.25 1229.28,1295.25 1229.96,1295.25 1230.63,1295.25 1231.31,1295.25 1231.99,1295.25 1232.66,1295.25 1233.34,1295.25 1234.01,1295.25 1234.69,1295.25 1235.36,1295.25 1236.04,1295.25 1236.71,1295.25 1237.39,1295.25 1238.07,1295.25 1238.74,1295.25 1239.42,1295.25 1240.09,1295.25 1240.77,1295.25 1241.44,1295.25 1242.12,1295.25 1242.79,1295.25 1243.47,1295.25 1244.15,1295.25 1244.82,1295.25 1245.5,1295.25 1246.17,1295.25 1246.85,1295.25 1247.52,1295.25 1248.2,1295.25 1248.88,1295.25 1249.55,1295.25 1250.23,1295.25 1250.9,1295.25 1251.58,1295.25 1252.25,1295.25 1252.93,1295.25 1253.6,1295.25 1254.28,1295.25 1254.96,1295.25 1255.63,1295.25 1256.31,1295.25 1256.98,1295.25 1257.66,1295.25 1258.33,1295.25 1259.01,1295.25 1259.68,1295.25 1260.36,1295.25 1261.04,1295.25 1261.71,1295.25 1262.39,1295.25 1263.06,1295.25 1263.74,1295.25 1264.41,1295.25 1265.09,1295.25 1265.76,1295.25 1266.44,1295.25 1267.12,1295.25 1267.79,1295.25 1268.47,1295.25 1269.14,1295.25 1269.82,1295.25 1270.49,1295.25 1271.17,1295.25 1271.84,1295.25 1272.52,1295.25 1273.2,1295.25 1273.87,1295.25 1274.55,1295.25 1275.22,1295.25 1275.9,1295.25 1276.57,1295.25 1277.25,1295.25 1277.93,1295.25 1278.6,1295.25 1279.28,1295.25 1279.95,1295.25 1280.63,1295.25 1281.3,1295.25 1281.98,1295.25 1282.65,1295.25 1283.33,1295.25 1284.01,1295.25 1284.68,1295.25 1285.36,1295.25 1286.03,1295.25 1286.71,1295.25 1287.38,1295.25 1288.06,1295.25 1288.73,1295.25 1289.41,1295.25 1290.09,1295.25 1290.76,1295.25 1291.44,1295.25 1292.11,1295.25 1292.79,1295.25 1293.46,1295.25 1294.14,1295.25 1294.81,1295.25 1295.49,1295.25 1296.17,1295.25 1296.84,1295.25 1297.52,1295.25 1298.19,1295.25 1298.87,1295.25 1299.54,1295.25 1300.22,1295.25 1300.89,1295.25 1301.57,1295.25 1302.25,1295.25 1302.92,1295.25 1303.6,1295.25 1304.27,1295.25 1304.95,1295.25 1305.62,1295.25 1306.3,1295.25 1306.98,1295.25 1307.65,1295.25 1308.33,1295.25 1309,1295.25 1309.68,1295.25 1310.35,1295.25 1311.03,1295.25 1311.7,1295.25 1312.38,1295.25 1313.06,1295.25 1313.73,1295.25 1314.41,1295.25 1315.08,1295.25 1315.76,1295.25 1316.43,1295.25 1317.11,1295.25 1317.78,1295.25 1318.46,1295.25 1319.14,1295.25 1319.81,1295.25 1320.49,1295.25 1321.16,1295.25 1321.84,1295.25 1322.51,1295.25 1323.19,1295.25 1323.86,1295.25 1324.54,1295.25 1325.22,1295.25 1325.89,1295.25 1326.57,1295.25 1327.24,1295.25 1327.92,1295.25 1328.59,1295.25 1329.27,1295.25 1329.94,1295.25 1330.62,1295.25 1331.3,1295.25 1331.97,1295.25 1332.65,1295.25 1333.32,1295.25 1334,1295.25 1334.67,1295.25 1335.35,1295.25 1336.03,1295.25 1336.7,1295.25 1337.38,1295.25 1338.05,1295.25 1338.73,1295.25 1339.4,1295.25 1340.08,1295.25 1340.75,1295.25 1341.43,1295.25 1342.11,1295.25 1342.78,1295.25 1343.46,1295.25 1344.13,1295.25 1344.81,1295.25 1345.48,1295.25 1346.16,1295.25 1346.83,1295.25 1347.51,1295.25 1348.19,1295.25 1348.86,1295.25 1349.54,1295.25 1350.21,1295.25 1350.89,1295.25 1351.56,1295.25 1352.24,1295.25 1352.91,1295.25 1353.59,1295.25 1354.27,1295.25 1354.94,1295.25 1355.62,1295.25 1356.29,1295.25 1356.97,1295.25 1357.64,1295.25 1358.32,1295.25 1358.99,1295.25 1359.67,1295.25 1360.35,1295.25 1361.02,1295.25 1361.7,1295.25 1362.37,1295.25 1363.05,1295.25 1363.72,1295.25 1364.4,1295.25 1365.08,1295.25 1365.75,1295.25 1366.43,1295.25 1367.1,1295.25 1367.78,1295.25 1368.45,1295.25 1369.13,1295.25 1369.8,1295.25 1370.48,1295.25 1371.16,1295.25 1371.83,1295.25 1372.51,1295.25 1373.18,1295.25 1373.86,1295.25 1374.53,1295.25 1375.21,1295.25 1375.88,1295.25 1376.56,1295.25 1377.24,1295.25 1377.91,1295.25 1378.59,1295.25 1379.26,1295.25 1379.94,1295.25 1380.61,1295.25 1381.29,1295.25 1381.96,1295.25 1382.64,1295.25 1383.32,1295.25 1383.99,1295.25 1384.67,1295.25 1385.34,1295.25 1386.02,1295.25 1386.69,1295.25 1387.37,1295.25 1388.04,1295.25 1388.72,1295.25 1389.4,1295.25 1390.07,1295.25 1390.75,1295.25 1391.42,1295.25 1392.1,1295.25 1392.77,1295.25 1393.45,1295.25 1394.13,1295.25 1394.8,1295.25 1395.48,1295.25 1396.15,1295.25 1396.83,1295.25 1397.5,1295.25 1398.18,1295.25 1398.85,1295.25 1399.53,1295.25 1400.21,1295.25 1400.88,1295.25 1401.56,1295.25 1402.23,1295.25 1402.91,1295.25 1403.58,1295.25 1404.26,1295.25 1404.93,1295.25 1405.61,1295.25 1406.29,1295.25 1406.96,1295.25 1407.64,1295.25 1408.31,1295.25 1408.99,1295.25 1409.66,1295.25 1410.34,1295.25 1411.01,1295.25 1411.69,1295.25 1412.37,1295.25 1413.04,1295.25 1413.72,1295.25 1414.39,1295.25 1415.07,1295.25 1415.74,1295.25 1416.42,1295.25 1417.09,1295.25 1417.77,1295.25 1418.45,1295.25 1419.12,1295.25 1419.8,1295.25 1420.47,1295.25 1421.15,1295.25 1421.82,1295.25 1422.5,1295.25 1423.18,1295.25 1423.85,1295.25 1424.53,1295.25 1425.2,1295.25 1425.88,1295.25 1426.55,1295.25 1427.23,1295.25 1427.9,1295.25 1428.58,1295.25 1429.26,1295.25 1429.93,1295.25 1430.61,1295.25 1431.28,1295.25 1431.96,1295.25 1432.63,1295.25 1433.31,1295.25 1433.98,1295.25 1434.66,1295.25 1435.34,1295.25 1436.01,1295.25 1436.69,1295.25 1437.36,1295.25 1438.04,1295.25 1438.71,1295.25 1439.39,1295.25 1440.06,1295.25 1440.74,1295.25 1441.42,1295.25 1442.09,1295.25 1442.77,1295.25 1443.44,1295.25 1444.12,1295.25 1444.79,1295.25 1445.47,1295.25 1446.15,1295.25 1446.82,1295.25 1447.5,1295.25 1448.17,1295.25 1448.85,1295.25 1449.52,1295.25 1450.2,1295.25 1450.87,1295.25 1451.55,1295.25 1452.23,1295.25 1452.9,1295.25 1453.58,1295.25 1454.25,1295.25 1454.93,1295.25 1455.6,1295.25 1456.28,1295.25 1456.95,1295.25 1457.63,1295.25 1458.31,1295.25 1458.98,1295.25 1459.66,1295.25 1460.33,1295.25 1461.01,1295.25 1461.68,1295.25 1462.36,1295.25 1463.03,1295.25 1463.71,1295.25 1464.39,1295.25 1465.06,1295.25 1465.74,1295.25 1466.41,1295.25 1467.09,1295.25 1467.76,1295.25 1468.44,1295.25 1469.11,1295.25 1469.79,1295.25 1470.47,1295.25 1471.14,1295.25 1471.82,1295.25 1472.49,1295.25 1473.17,1295.25 1473.84,1295.25 1474.52,1295.25 1475.2,1295.25 1475.87,1295.25 1476.55,1295.25 1477.22,1295.25 1477.9,1295.25 1478.57,1295.25 1479.25,1295.25 1479.92,1295.25 1480.6,1295.25 1481.28,1295.25 1481.95,1295.25 1482.63,1295.25 1483.3,1295.25 1483.98,1295.25 1484.65,1295.25 1485.33,1295.25 1486,1295.25 1486.68,1295.25 1487.36,1295.25 1488.03,1295.25 1488.71,1295.25 1489.38,1295.25 1490.06,1295.25 1490.73,1295.25 1491.41,1295.25 1492.08,1295.25 1492.76,1295.25 1493.44,1295.25 1494.11,1295.25 1494.79,1295.25 1495.46,1295.25 1496.14,1295.25 1496.81,1295.25 1497.49,1295.25 1498.16,1295.25 1498.84,1295.25 1499.52,1295.25 1500.19,1295.25 1500.87,1295.25 1501.54,1295.25 1502.22,1295.25 1502.89,1295.25 1503.57,1295.25 1504.25,1295.25 1504.92,1295.25 1505.6,1295.25 1506.27,1295.25 1506.95,1295.25 1507.62,1295.25 1508.3,1295.25 1508.97,1295.25 1509.65,1295.25 1510.33,1295.25 1511,1295.25 1511.68,1295.25 1512.35,1295.25 1513.03,1295.25 1513.7,1295.25 1514.38,1295.25 1515.05,1295.25 1515.73,1295.25 1516.41,1295.25 1517.08,1295.25 1517.76,1295.25 1518.43,1295.25 1519.11,1295.25 1519.78,1295.25 1520.46,1295.25 1521.13,1295.25 1521.81,1295.25 1522.49,1295.25 1523.16,1295.25 1523.84,1295.25 1524.51,1295.25 1525.19,1295.25 1525.86,1295.25 1526.54,1295.25 1527.21,1295.25 1527.89,1295.25 1528.57,1295.25 1529.24,1295.25 1529.92,1295.25 1530.59,1295.25 1531.27,1295.25 1531.94,1295.25 1532.62,1295.25 1533.3,1295.25 1533.97,1295.25 1534.65,1295.25 1535.32,1295.25 1536,1295.25 1536.67,1295.25 1537.35,1295.25 1538.02,1295.25 1538.7,1295.25 1539.38,1295.25 1540.05,1295.25 1540.73,1295.25 1541.4,1295.25 1542.08,1295.25 1542.75,1295.25 1543.43,1295.25 1544.1,1295.25 1544.78,1295.25 1545.46,1295.25 1546.13,1295.25 1546.81,1295.25 1547.48,1295.25 1548.16,1295.25 1548.83,1295.25 1549.51,1295.25 1550.18,1295.25 1550.86,1295.25 1551.54,1295.25 1552.21,1295.25 1552.89,1295.25 1553.56,1295.25 1554.24,1295.25 1554.91,1295.25 1555.59,1295.25 1556.26,1295.25 1556.94,1295.25 1557.62,1295.25 1558.29,1295.25 1558.97,1295.25 1559.64,1295.25 1560.32,1295.25 1560.99,1295.25 1561.67,1295.25 1562.35,1295.25 1563.02,1295.25 1563.7,1295.25 1564.37,1295.25 1565.05,1295.25 1565.72,1295.25 1566.4,1295.25 1567.07,1295.25 1567.75,1295.25 1568.43,1295.25 1569.1,1295.25 1569.78,1295.25 1570.45,1295.25 1571.13,1295.25 1571.8,1295.25 1572.48,1295.25 1573.15,1295.25 1573.83,1295.25 1574.51,1295.25 1575.18,1295.25 1575.86,1295.25 1576.53,1295.25 1577.21,1295.25 1577.88,1295.25 1578.56,1295.25 1579.23,1295.25 1579.91,1295.25 1580.59,1295.25 1581.26,1295.25 1581.94,1295.25 1582.61,1295.25 1583.29,1295.25 1583.96,1295.25 1584.64,1295.25 1585.31,1295.25 1585.99,1295.25 1586.67,1295.25 1587.34,1295.25 1588.02,1295.25 1588.69,1295.25 1589.37,1295.25 1590.04,1295.25 1590.72,1295.25 1591.4,1295.25 1592.07,1295.25 1592.75,1295.25 1593.42,1295.25 1594.1,1295.25 1594.77,1295.25 1595.45,1295.25 1596.12,1295.25 1596.8,1295.25 1597.48,1295.25 1598.15,1295.25 1598.83,1295.25 1599.5,1295.25 1600.18,1295.25 1600.85,1295.25 1601.53,1295.25 1602.2,1295.25 1602.88,1295.25 1603.56,1295.25 1604.23,1295.25 1604.91,1295.25 1605.58,1295.25 1606.26,1295.25 1606.93,1295.25 1607.61,1295.25 1608.28,1295.25 1608.96,1295.25 1609.64,1295.25 1610.31,1295.25 1610.99,1295.25 1611.66,1295.25 1612.34,1295.25 1613.01,1295.25 1613.69,1295.25 1614.36,1295.25 1615.04,1295.25 1615.72,1295.25 1616.39,1295.25 1617.07,1295.25 1617.74,1295.25 1618.42,1295.25 1619.09,1295.25 1619.77,1295.25 1620.45,1295.25 1621.12,1295.25 1621.8,1295.25 1622.47,1295.25 1623.15,1295.25 1623.82,1295.25 1624.5,1295.25 1625.17,1295.25 1625.85,1295.25 1626.53,1295.25 1627.2,1295.25 1627.88,1295.25 1628.55,1295.25 1629.23,1295.25 1629.9,1295.25 1630.58,1295.25 1631.25,1295.25 1631.93,1295.25 1632.61,1295.25 1633.28,1295.25 1633.96,1295.25 1634.63,1295.25 1635.31,1295.25 1635.98,1295.25 1636.66,1295.25 1637.33,1295.25 1638.01,1295.25 1638.69,1295.25 1639.36,1295.25 1640.04,1295.25 1640.71,1295.25 1641.39,1295.25 1642.06,1295.25 1642.74,1295.25 1643.41,1295.25 1644.09,1295.25 1644.77,1295.25 1645.44,1295.25 1646.12,1295.25 1646.79,1295.25 1647.47,1295.25 1648.14,1295.25 1648.82,1295.25 1649.5,1295.25 1650.17,1295.25 1650.85,1295.25 1651.52,1295.25 1652.2,1295.25 1652.87,1295.25 1653.55,1295.25 1654.22,1295.25 1654.9,1295.25 1655.58,1295.25 1656.25,1295.25 1656.93,1295.25 1657.6,1295.25 1658.28,1295.25 1658.95,1295.25 1659.63,1295.25 1660.3,1295.25 1660.98,1295.25 1661.66,1295.25 1662.33,1295.25 1663.01,1295.25 1663.68,1295.25 1664.36,1295.25 1665.03,1295.25 1665.71,1295.25 1666.38,1295.25 1667.06,1295.25 1667.74,1295.25 1668.41,1295.25 1669.09,1295.25 1669.76,1295.25 1670.44,1295.25 1671.11,1295.25 1671.79,1295.25 1672.47,1295.25 1673.14,1295.25 1673.82,1295.25 1674.49,1295.25 1675.17,1295.25 1675.84,1295.25 1676.52,1295.25 1677.19,1295.25 1677.87,1295.25 1678.55,1295.25 1679.22,1295.25 1679.9,1295.25 1680.57,1295.25 1681.25,1295.25 1681.92,1295.25 1682.6,1295.25 1683.27,1295.25 1683.95,1295.25 1684.63,1295.25 1685.3,1295.25 1685.98,1295.25 1686.65,1295.25 1687.33,1295.25 1688,1295.25 1688.68,1295.25 1689.35,1295.25 1690.03,1295.25 1690.71,1295.25 1691.38,1295.25 1692.06,1295.25 1692.73,1295.25 1693.41,1295.25 1694.08,1295.25 1694.76,1295.25 1695.43,1295.25 1696.11,1295.25 1696.79,1295.25 1697.46,1295.25 1698.14,1295.25 1698.81,1295.25 1699.49,1295.25 1700.16,1295.25 1700.84,1295.25 1701.52,1295.25 1702.19,1295.25 1702.87,1295.25 1703.54,1295.25 1704.22,1295.25 1704.89,1295.25 1705.57,1295.25 1706.24,1295.25 1706.92,1295.25 1707.6,1295.25 1708.27,1295.25 1708.95,1295.25 1709.62,1295.25 1710.3,1295.25 1710.97,1295.25 1711.65,1295.25 1712.32,1295.25 1713,1295.25 1713.68,1295.25 1714.35,1295.25 1715.03,1295.25 1715.7,1295.25 1716.38,1295.25 1717.05,1295.25 1717.73,1295.25 1718.4,1295.25 1719.08,1295.25 1719.76,1295.25 1720.43,1295.25 1721.11,1295.25 1721.78,1295.25 1722.46,1295.25 1723.13,1295.25 1723.81,1295.25 1724.48,1295.25 1725.16,1295.25 1725.84,1295.25 1726.51,1295.25 1727.19,1295.25 1727.86,1295.25 1728.54,1295.25 1729.21,1295.25 1729.89,1295.25 1730.57,1295.25 1731.24,1295.25 1731.92,1295.25 1732.59,1295.25 1733.27,1295.25 1733.94,1295.25 1734.62,1295.25 1735.29,1295.25 1735.97,1295.25 1736.65,1295.25 1737.32,1295.25 1738,1295.25 1738.67,1295.25 1739.35,1295.25 1740.02,1295.25 1740.7,1295.25 1741.37,1295.25 1742.05,1295.25 1742.73,1295.25 1743.4,1295.25 1744.08,1295.25 1744.75,1295.25 1745.43,1295.25 1746.1,1295.25 1746.78,1295.25 1747.45,1295.25 1748.13,1295.25 1748.81,1295.25 1749.48,1295.25 1750.16,1295.25 1750.83,1295.25 1751.51,1295.25 1752.18,1295.25 1752.86,1295.25 1753.53,1295.25 1754.21,1295.25 1754.89,1295.25 1755.56,1295.25 1756.24,1295.25 1756.91,1295.25 1757.59,1295.25 1758.26,1295.25 1758.94,1295.25 1759.62,1295.25 1760.29,1295.25 1760.97,1295.25 1761.64,1295.25 1762.32,1295.25 1762.99,1295.25 1763.67,1295.25 1764.34,1295.25 1765.02,1295.25 1765.7,1295.25 1766.37,1295.25 1767.05,1295.25 1767.72,1295.25 1768.4,1295.25 1769.07,1295.25 1769.75,1295.25 1770.42,1295.25 1771.1,1295.25 1771.78,1295.25 1772.45,1295.25 1773.13,1295.25 1773.8,1295.25 1774.48,1295.25 1775.15,1295.25 1775.83,1295.25 1776.5,1295.25 1777.18,1295.25 1777.86,1295.25 1778.53,1295.25 1779.21,1295.25 1779.88,1295.25 1780.56,1295.25 1781.23,1295.25 1781.91,1295.25 1782.58,1295.25 1783.26,1295.25 1783.94,1295.25 1784.61,1295.25 1785.29,1295.25 1785.96,1295.25 1786.64,1295.25 1787.31,1295.25 1787.99,1295.25 1788.67,1295.25 1789.34,1295.25 1790.02,1295.25 1790.69,1295.25 1791.37,1295.25 1792.04,1295.25 1792.72,1295.25 1793.39,1295.25 1794.07,1295.25 1794.75,1295.25 1795.42,1295.25 1796.1,1295.25 1796.77,1295.25 1797.45,1295.25 1798.12,1295.25 1798.8,1295.25 1799.47,1295.25 1800.15,1295.25 1800.83,1295.25 1801.5,1295.25 1802.18,1295.25 1802.85,1295.25 1803.53,1295.25 1804.2,1295.25 1804.88,1295.25 1805.55,1295.25 1806.23,1295.25 1806.91,1295.25 1807.58,1295.25 1808.26,1295.25 1808.93,1295.25 1809.61,1295.25 1810.28,1295.25 1810.96,1295.25 1811.63,1295.25 1812.31,1295.25 1812.99,1295.25 1813.66,1295.25 1814.34,1295.25 1815.01,1295.25 1815.69,1295.25 1816.36,1295.25 1817.04,1295.25 1817.72,1295.25 1818.39,1295.25 1819.07,1295.25 1819.74,1295.25 1820.42,1295.25 1821.09,1295.25 1821.77,1295.25 1822.44,1295.25 1823.12,1295.25 1823.8,1295.25 1824.47,1295.25 1825.15,1295.25 1825.82,1295.25 1826.5,1295.25 1827.17,1295.25 1827.85,1295.25 1828.52,1295.25 1829.2,1295.25 1829.88,1295.25 1830.55,1295.25 1831.23,1295.25 1831.9,1295.25 1832.58,1295.25 1833.25,1295.25 1833.93,1295.25 1834.6,1295.25 1835.28,1295.25 1835.96,1295.25 1836.63,1295.25 1837.31,1295.25 1837.98,1295.25 1838.66,1295.25 1839.33,1295.25 1840.01,1295.25 1840.68,1295.25 1841.36,1295.25 1842.04,1295.25 1842.71,1295.25 1843.39,1295.25 1844.06,1295.25 1844.74,1295.25 1845.41,1295.25 1846.09,1295.25 1846.77,1295.25 1847.44,1295.25 1848.12,1295.25 1848.79,1295.25 1849.47,1295.25 1850.14,1295.25 1850.82,1295.25 1851.49,1295.25 1852.17,1295.25 1852.85,1295.25 1853.52,1295.25 1854.2,1295.25 1854.87,1295.25 1855.55,1295.25 1856.22,1295.25 1856.9,1295.25 1857.57,1295.25 1858.25,1295.25 1858.93,1295.25 1859.6,1295.25 1860.28,1295.25 1860.95,1295.25 1861.63,1295.25 1862.3,1295.25 1862.98,1295.25 1863.65,1295.25 1864.33,1295.25 1865.01,1295.25 1865.68,1295.25 1866.36,1295.25 1867.03,1295.25 1867.71,1295.25 1868.38,1295.25 1869.06,1295.25 1869.73,1295.25 1870.41,1295.25 1871.09,1295.25 1871.76,1295.25 1872.44,1295.25 1873.11,1295.25 1873.79,1295.25 1874.46,1295.25 1875.14,1295.25 1875.82,1295.25 1876.49,1295.25 1877.17,1295.25 1877.84,1295.25 1878.52,1295.25 1879.19,1295.25 1879.87,1295.25 1880.54,1295.25 1881.22,1295.25 1881.9,1295.25 1882.57,1295.25 1883.25,1295.25 1883.92,1295.25 1884.6,1295.25 1885.27,1295.25 1885.95,1295.25 1886.62,1295.25 1887.3,1295.25 1887.98,1295.25 1888.65,1295.25 1889.33,1295.25 1890,1295.25 1890.68,1295.25 1891.35,1295.25 1892.03,1295.25 1892.7,1295.25 1893.38,1295.25 1894.06,1295.25 1894.73,1295.25 1895.41,1295.25 1896.08,1295.25 1896.76,1295.25 1897.43,1295.25 1898.11,1295.25 1898.79,1295.25 1899.46,1295.25 1900.14,1295.25 1900.81,1295.25 1901.49,1295.25 1902.16,1295.25 1902.84,1295.25 1903.51,1295.25 1904.19,1295.25 1904.87,1295.25 1905.54,1295.25 1906.22,1295.25 1906.89,1295.25 1907.57,1295.25 1908.24,1295.25 1908.92,1295.25 1909.59,1295.25 1910.27,1295.25 1910.95,1295.25 1911.62,1295.25 1912.3,1295.25 1912.97,1295.25 1913.65,1295.25 1914.32,1295.25 1915,1295.25 1915.67,1295.25 1916.35,1295.25 1917.03,1295.25 1917.7,1295.25 1918.38,1295.25 1919.05,1295.25 1919.73,1295.25 1920.4,1295.25 1921.08,1295.25 1921.75,1295.25 1922.43,1295.25 1923.11,1295.25 1923.78,1295.25 1924.46,1295.25 1925.13,1295.25 1925.81,1295.25 1926.48,1295.25 1927.16,1295.25 1927.84,1295.25 1928.51,1295.25 1929.19,1295.25 1929.86,1295.25 1930.54,1295.25 1931.21,1295.25 1931.89,1295.25 1932.56,1295.25 1933.24,1295.25 1933.92,1295.25 1934.59,1295.25 1935.27,1295.25 1935.94,1295.25 1936.62,1295.25 1937.29,1295.25 1937.97,1295.25 1938.64,1295.25 1939.32,1295.25 1940,1295.25 1940.67,1295.25 1941.35,1295.25 1942.02,1295.25 1942.7,1295.25 1943.37,1295.25 1944.05,1295.25 1944.72,1295.25 1945.4,1295.25 1946.08,1295.25 1946.75,1295.25 1947.43,1295.25 1948.1,1295.25 1948.78,1295.25 1949.45,1295.25 1950.13,1295.25 1950.8,1295.25 1951.48,1295.25 1952.16,1295.25 1952.83,1295.25 1953.51,1295.25 1954.18,1295.25 1954.86,1295.25 1955.53,1295.25 1956.21,1295.25 1956.89,1295.25 1957.56,1295.25 1958.24,1295.25 1958.91,1295.25 1959.59,1295.25 1960.26,1295.25 1960.94,1295.25 1961.61,1295.25 1962.29,1295.25 1962.97,1295.25 1963.64,1295.25 1964.32,1295.25 1964.99,1295.25 1965.67,1295.25 1966.34,1295.25 1967.02,1295.25 1967.69,1295.25 1968.37,1295.25 1969.05,1295.25 1969.72,1295.25 1970.4,1295.25 1971.07,1295.25 1971.75,1295.25 1972.42,1295.25 1973.1,1295.25 1973.77,1295.25 1974.45,1295.25 1975.13,1295.25 1975.8,1295.25 1976.48,1295.25 1977.15,1295.25 1977.83,1295.25 1978.5,1295.25 1979.18,1295.25 1979.85,1295.25 1980.53,1295.25 1981.21,1295.25 1981.88,1295.25 1982.56,1295.25 1983.23,1295.25 1983.91,1295.25 1984.58,1295.25 1985.26,1295.25 1985.94,1295.25 1986.61,1295.25 1987.29,1295.25 1987.96,1295.25 1988.64,1295.25 1989.31,1295.25 1989.99,1295.25 1990.66,1295.25 1991.34,1295.25 1992.02,1295.25 1992.69,1295.25 1993.37,1295.25 1994.04,1295.25 1994.72,1295.25 1995.39,1295.25 1996.07,1295.25 1996.74,1295.25 1997.42,1295.25 1998.1,1295.25 1998.77,1295.25 1999.45,1295.25 2000.12,1295.25 2000.8,1295.25 2001.47,1295.25 2002.15,1295.25 2002.82,1295.25 2003.5,1295.25 2004.18,1295.25 2004.85,1295.25 2005.53,1295.25 2006.2,1295.25 2006.88,1295.25 2007.55,1295.25 2008.23,1295.25 2008.9,1295.25 2009.58,1295.25 2010.26,1295.25 2010.93,1295.25 2011.61,1295.25 2012.28,1295.25 2012.96,1295.25 2013.63,1295.25 2014.31,1295.25 2014.99,1295.25 2015.66,1295.25 2016.34,1295.25 2017.01,1295.25 2017.69,1295.25 2018.36,1295.25 2019.04,1295.25 2019.71,1295.25 2020.39,1295.25 2021.07,1295.25 2021.74,1295.25 2022.42,1295.25 2023.09,1295.25 2023.77,1295.25 2024.44,1295.25 2025.12,1295.25 2025.79,1295.25 2026.47,1295.25 2027.15,1295.25 2027.82,1295.25 2028.5,1295.25 2029.17,1295.25 2029.85,1295.25 2030.52,1295.25 2031.2,1295.25 2031.87,1295.25 2032.55,1295.25 2033.23,1295.25 2033.9,1295.25 2034.58,1295.25 2035.25,1295.25 2035.93,1295.25 2036.6,1295.25 2037.28,1295.25 2037.95,1295.25 2038.63,1295.25 2039.31,1295.25 2039.98,1295.25 2040.66,1295.25 2041.33,1295.25 2042.01,1295.25 2042.68,1295.25 2043.36,1295.25 2044.04,1295.25 2044.71,1295.25 2045.39,1295.25 2046.06,1295.25 2046.74,1295.25 2047.41,1295.25 2048.09,1295.25 2048.76,1295.25 2049.44,1295.25 2050.12,1295.25 2050.79,1295.25 2051.47,1295.25 2052.14,1295.25 2052.82,1295.25 2053.49,1295.25 2054.17,1295.25 2054.84,1295.25 2055.52,1295.25 2056.2,1295.25 2056.87,1295.25 2057.55,1295.25 2058.22,1295.25 2058.9,1295.25 2059.57,1295.25 2060.25,1295.25 2060.92,1295.25 2061.6,1295.25 2062.28,1295.25 2062.95,1295.25 2063.63,1295.25 2064.3,1295.25 2064.98,1295.25 2065.65,1295.25 2066.33,1295.25 2067,1295.25 2067.68,1295.25 2068.36,1295.25 2069.03,1295.25 2069.71,1295.25 2070.38,1295.25 2071.06,1295.25 2071.73,1295.25 2072.41,1295.25 2073.09,1295.25 2073.76,1295.25 2074.44,1295.25 2075.11,1295.25 2075.79,1295.25 2076.46,1295.25 2077.14,1295.25 2077.81,1295.25 2078.49,1295.25 2079.17,1295.25 2079.84,1295.25 2080.52,1295.25 2081.19,1295.25 2081.87,1295.25 2082.54,1295.25 2083.22,1295.25 2083.89,1295.25 2084.57,1295.25 2085.25,1295.25 2085.92,1295.25 2086.6,1295.25 2087.27,1295.25 2087.95,1295.25 2088.62,1295.25 2089.3,1295.25 2089.97,1295.25 2090.65,1295.25 2091.33,1295.25 2092,1295.25 2092.68,1295.25 2093.35,1295.25 2094.03,1295.25 2094.7,1295.25 2095.38,1295.25 2096.05,1295.25 2096.73,1295.25 2097.41,1295.25 2098.08,1295.25 2098.76,1295.25 2099.43,1295.25 2100.11,1295.25 2100.78,1295.25 2101.46,1295.25 2102.14,1295.25 2102.81,1295.25 2103.49,1295.25 2104.16,1295.25 2104.84,1295.25 2105.51,1295.25 2106.19,1295.25 2106.86,1295.25 2107.54,1295.25 2108.22,1295.25 2108.89,1295.25 2109.57,1295.25 2110.24,1295.25 2110.92,1295.25 2111.59,1295.25 2112.27,1295.25 2112.94,1295.25 2113.62,1295.25 2114.3,1295.25 2114.97,1295.25 2115.65,1295.25 2116.32,1295.25 2117,1295.25 2117.67,1295.25 2118.35,1295.25 2119.02,1295.25 2119.7,1295.25 2120.38,1295.25 2121.05,1295.25 2121.73,1295.25 2122.4,1295.25 2123.08,1295.25 2123.75,1295.25 2124.43,1295.25 2125.11,1295.25 2125.78,1295.25 2126.46,1295.25 2127.13,1295.25 2127.81,1295.25 2128.48,1295.25 2129.16,1295.25 2129.83,1295.25 2130.51,1295.25 2131.19,1295.25 2131.86,1295.25 2132.54,1295.25 2133.21,1295.25 2133.89,1295.25 2134.56,1295.25 2135.24,1295.25 2135.91,1295.25 2136.59,1295.25 2137.27,1295.25 2137.94,1295.25 2138.62,1295.25 2139.29,1295.25 2139.97,1295.25 2140.64,1295.25 2141.32,1295.25 2141.99,1295.25 2142.67,1295.25 2143.35,1295.25 2144.02,1295.25 2144.7,1295.25 2145.37,1295.25 2146.05,1295.25 2146.72,1295.25 2147.4,1295.25 2148.07,1295.25 2148.75,1295.25 2149.43,1295.25 2150.1,1295.25 2150.78,1295.25 2151.45,1295.25 2152.13,1295.25 2152.8,1295.25 2153.48,1295.25 2154.16,1295.25 2154.83,1295.25 2155.51,1295.25 2156.18,1295.25 2156.86,1295.25 2157.53,1295.25 2158.21,1295.25 2158.88,1295.25 2159.56,1295.25 2160.24,1295.25 2160.91,1295.25 2161.59,1295.25 2162.26,1295.25 2162.94,1295.25 2163.61,1295.25 2164.29,1295.25 2164.96,1295.25 2165.64,1295.25 2166.32,1295.25 2166.99,1295.25 2167.67,1295.25 2168.34,1295.25 2169.02,1295.25 2169.69,1295.25 2170.37,1295.25 2171.04,1295.25 2171.72,1295.25 2172.4,1295.25 2173.07,1295.25 2173.75,1295.25 2174.42,1295.25 2175.1,1295.25 2175.77,1295.25 2176.45,1295.25 2177.12,1295.25 2177.8,1295.25 2178.48,1295.25 2179.15,1295.25 2179.83,1295.25 2180.5,1295.25 2181.18,1295.25 2181.85,1295.25 2182.53,1295.25 2183.21,1295.25 2183.88,1295.25 2184.56,1295.25 2185.23,1295.25 2185.91,1295.25 2186.58,1295.25 2187.26,1295.25 2187.93,1295.25 2188.61,1295.25 2189.29,1295.25 2189.96,1295.25 2190.64,1295.25 2191.31,1295.25 2191.99,1295.25 2192.66,1295.25 2193.34,1295.25 2194.01,1295.25 2194.69,1295.25 2195.37,1295.25 2196.04,1295.25 2196.72,1295.25 2197.39,1295.25 2198.07,1295.25 2198.74,1295.25 2199.42,1295.25 2200.09,1295.25 2200.77,1295.25 2201.45,1295.25 2202.12,1295.25 2202.8,1295.25 2203.47,1295.25 2204.15,1295.25 2204.82,1295.25 2205.5,1295.25 2206.17,1295.25 2206.85,1295.25 2207.53,1295.25 2208.2,1295.25 2208.88,1295.25 2209.55,1295.25 2210.23,1295.25 2210.9,1295.25 2211.58,1295.25 2212.26,1295.25 2212.93,1295.25 2213.61,1295.25 2214.28,1295.25 2214.96,1295.25 2215.63,1295.25 2216.31,1295.25 2216.98,1295.25 2217.66,1295.25 2218.34,1295.25 2219.01,1295.25 2219.69,1295.25 2220.36,1295.25 2221.04,1295.25 2221.71,1295.25 2222.39,1295.25 2223.06,1295.25 2223.74,1295.25 2224.42,1295.25 2225.09,1295.25 2225.77,1295.25 2226.44,1295.25 2227.12,1295.25 2227.79,1295.25 2228.47,1295.25 2229.14,1295.25 2229.82,1295.25 2230.5,1295.25 2231.17,1295.25 2231.85,1295.25 2232.52,1295.25 2233.2,1295.25 2233.87,1295.25 2234.55,1295.25 2235.22,1295.25 2235.9,1295.25 2236.58,1295.25 2237.25,1295.25 2237.93,1295.25 2238.6,1295.25 2239.28,1295.25 2239.95,1295.25 2240.63,1295.25 2241.31,1295.25 2241.98,1295.25 2242.66,1295.25 2243.33,1295.25 2244.01,1295.25 2244.68,1295.25 2245.36,1295.25 2246.03,1295.25 2246.71,1295.25 2247.39,1295.25 2248.06,1295.25 2248.74,1295.25 2249.41,1295.25 2250.09,1295.25 2250.76,1295.25 2251.44,1295.25 2252.11,1295.25 2252.79,1295.25 2253.47,1295.25 2254.14,1295.25 2254.82,1295.25 2255.49,1295.25 2256.17,1295.25 2256.84,1295.25 2257.52,1295.25 2258.19,1295.25 2258.87,1295.25 2259.55,1295.25 2260.22,1295.25 2260.9,1295.25 2261.57,1295.25 2262.25,1295.25 2262.92,1295.25 2263.6,1295.25 2264.27,1295.25 2264.95,1295.25 2265.63,1295.25 2266.3,1295.25 2266.98,1295.25 2267.65,1295.25 2268.33,1295.25 2269,1295.25 2269.68,1295.25 2270.36,1295.25 2271.03,1295.25 2271.71,1295.25 2272.38,1295.25 2273.06,1295.25 2273.73,1295.25 2274.41,1295.25 2275.08,1295.25 2275.76,1295.25 2276.44,1295.25 2277.11,1295.25 2277.79,1295.25 2278.46,1295.25 2279.14,1295.25 2279.81,1295.25 2280.49,1295.25 2281.16,1295.25 2281.84,1295.25 2282.52,1295.25 2283.19,1295.25 2283.87,1295.25 2284.54,1295.25 2285.22,1295.25 2285.89,1295.25 2286.57,1295.25 2287.24,1295.25 2287.92,1295.25 2288.6,1295.25 2289.27,1295.25 2289.95,1295.25 2290.62,1295.25 2291.3,1295.25 2291.97,1295.25 \"/>\n<path clip-path=\"url(#clip102)\" d=\"M941.485 1302.77 L942.161 1302.77 L942.836 1302.77 L943.512 1302.77 L944.188 1302.77 L944.863 1302.77 L945.539 1302.77 L946.214 1302.77 L946.89 1302.77 L947.565 1302.77 L948.241 1302.77 L948.917 1302.77 L949.592 1302.77 L950.268 1302.77 L950.943 1302.77 L951.619 1302.77 L952.294 1302.77 L952.97 1302.77 L953.646 1302.77 L954.321 1302.77 L954.997 1302.77 L955.672 1302.77 L956.348 1302.77 L957.024 1302.77 L957.699 1302.77 L958.375 1302.77 L959.05 1302.77 L959.726 1302.77 L960.401 1302.77 L961.077 1302.77 L961.753 1302.77 L962.428 1302.77 L963.104 1302.77 L963.779 1302.77 L964.455 1302.77 L965.131 1302.77 L965.806 1302.77 L966.482 1302.77 L967.157 1302.77 L967.833 1302.77 L968.508 1302.77 L969.184 1302.77 L969.86 1302.77 L970.535 1302.77 L971.211 1302.77 L971.886 1302.77 L972.562 1302.77 L973.238 1302.77 L973.913 1302.77 L974.589 1302.77 L975.264 1302.77 L975.94 1302.77 L976.615 1302.77 L977.291 1302.77 L977.967 1302.77 L978.642 1302.77 L979.318 1302.77 L979.993 1302.77 L980.669 1302.77 L981.345 1302.77 L982.02 1302.77 L982.696 1302.77 L983.371 1302.77 L984.047 1302.77 L984.722 1302.77 L985.398 1302.77 L986.074 1302.77 L986.749 1302.77 L987.425 1302.77 L988.1 1302.77 L988.776 1302.77 L989.452 1302.77 L990.127 1302.77 L990.803 1302.77 L991.478 1302.77 L992.154 1302.77 L992.829 1302.77 L993.505 1302.77 L994.181 1302.77 L994.856 1302.77 L995.532 1302.77 L996.207 1302.77 L996.883 1302.77 L997.558 1302.77 L998.234 1302.77 L998.91 1302.77 L999.585 1302.77 L1000.26 1302.77 L1000.94 1302.77 L1001.61 1302.77 L1002.29 1302.77 L1002.96 1302.77 L1003.64 1302.77 L1004.31 1302.77 L1004.99 1302.77 L1005.67 1302.77 L1006.34 1302.77 L1007.02 1302.77 L1007.69 1302.77 L1008.37 1302.77 L1009.04 1302.77 L1009.72 1302.77 L1010.39 1302.77 L1011.07 1302.77 L1011.75 1302.77 L1012.42 1302.77 L1013.1 1302.77 L1013.77 1302.77 L1014.45 1302.77 L1015.12 1302.77 L1015.8 1302.77 L1016.47 1302.77 L1017.15 1302.77 L1017.83 1302.77 L1018.5 1302.77 L1019.18 1302.77 L1019.85 1302.77 L1020.53 1302.77 L1021.2 1302.77 L1021.88 1302.77 L1022.56 1302.77 L1023.23 1302.77 L1023.91 1302.77 L1024.58 1302.77 L1025.26 1302.77 L1025.93 1302.77 L1026.61 1302.77 L1027.28 1302.77 L1027.96 1302.77 L1028.64 1302.77 L1029.31 1302.77 L1029.99 1302.77 L1030.66 1302.77 L1031.34 1302.77 L1032.01 1302.77 L1032.69 1302.77 L1033.36 1302.77 L1034.04 1302.77 L1034.72 1302.77 L1035.39 1302.77 L1036.07 1302.77 L1036.74 1302.77 L1037.42 1302.77 L1038.09 1302.77 L1038.77 1302.77 L1039.44 1302.77 L1040.12 1302.77 L1040.8 1302.77 L1041.47 1302.77 L1042.15 1302.77 L1042.82 1302.77 L1043.5 1302.77 L1044.17 1302.77 L1044.85 1302.77 L1045.52 1302.77 L1046.2 1302.77 L1046.88 1302.77 L1047.55 1302.77 L1048.23 1302.77 L1048.9 1302.77 L1049.58 1302.77 L1050.25 1302.77 L1050.93 1302.77 L1051.61 1302.77 L1052.28 1302.77 L1052.96 1302.77 L1053.63 1302.77 L1054.31 1302.77 L1054.98 1302.77 L1055.66 1302.77 L1056.33 1302.77 L1057.01 1302.77 L1057.69 1302.77 L1058.36 1302.77 L1059.04 1302.77 L1059.71 1302.77 L1060.39 1302.77 L1061.06 1302.77 L1061.74 1302.77 L1062.41 1302.77 L1063.09 1302.77 L1063.77 1302.77 L1064.44 1302.77 L1065.12 1302.77 L1065.79 1302.77 L1066.47 1302.77 L1067.14 1302.77 L1067.82 1302.77 L1068.49 1302.77 L1069.17 1302.77 L1069.85 1302.77 L1070.52 1302.77 L1071.2 1302.77 L1071.87 1302.77 L1072.55 1302.77 L1073.22 1302.77 L1073.9 1302.77 L1074.57 1302.77 L1075.25 1302.77 L1075.93 1302.77 L1076.6 1302.77 L1077.28 1302.77 L1077.95 1302.77 L1078.63 1302.77 L1079.3 1302.77 L1079.98 1302.77 L1080.66 1302.77 L1081.33 1302.77 L1082.01 1302.77 L1082.68 1302.77 L1083.36 1302.77 L1084.03 1302.77 L1084.71 1302.77 L1085.38 1302.77 L1086.06 1302.77 L1086.74 1302.77 L1087.41 1302.77 L1088.09 1302.77 L1088.76 1302.77 L1089.44 1302.77 L1090.11 1302.77 L1090.79 1302.77 L1091.46 1302.77 L1092.14 1302.77 L1092.82 1302.77 L1093.49 1302.77 L1094.17 1302.77 L1094.84 1302.77 L1095.52 1302.77 L1096.19 1302.77 L1096.87 1302.77 L1097.54 1302.77 L1098.22 1302.77 L1098.9 1302.77 L1099.57 1302.77 L1100.25 1302.77 L1100.92 1302.77 L1101.6 1302.77 L1102.27 1302.77 L1102.95 1302.77 L1103.62 1302.77 L1104.3 1302.77 L1104.98 1302.77 L1105.65 1302.77 L1106.33 1302.77 L1107 1302.77 L1107.68 1302.77 L1108.35 1302.77 L1109.03 1302.77 L1109.71 1302.77 L1110.38 1302.77 L1111.06 1302.77 L1111.73 1302.77 L1112.41 1302.77 L1113.08 1302.77 L1113.76 1302.77 L1114.43 1302.77 L1115.11 1302.77 L1115.79 1302.77 L1116.46 1302.77 L1117.14 1302.77 L1117.81 1302.77 L1118.49 1302.77 L1119.16 1302.77 L1119.84 1302.77 L1120.51 1302.77 L1121.19 1302.77 L1121.87 1302.77 L1122.54 1302.77 L1123.22 1302.77 L1123.89 1302.77 L1124.57 1302.77 L1125.24 1302.77 L1125.92 1302.77 L1126.59 1302.77 L1127.27 1302.77 L1127.95 1302.77 L1128.62 1302.77 L1129.3 1302.77 L1129.97 1302.77 L1130.65 1302.77 L1131.32 1302.77 L1132 1302.77 L1132.67 1302.77 L1133.35 1302.77 L1134.03 1302.77 L1134.7 1302.77 L1135.38 1302.77 L1136.05 1302.77 L1136.73 1302.77 L1137.4 1302.77 L1138.08 1302.77 L1138.76 1302.77 L1139.43 1302.77 L1140.11 1302.77 L1140.78 1302.77 L1141.46 1302.77 L1142.13 1302.77 L1142.81 1302.77 L1143.48 1302.77 L1144.16 1302.77 L1144.84 1302.77 L1145.51 1302.77 L1146.19 1302.77 L1146.86 1302.77 L1147.54 1302.77 L1148.21 1302.77 L1148.89 1302.77 L1149.56 1302.77 L1150.24 1302.77 L1150.92 1302.77 L1151.59 1302.77 L1152.27 1302.77 L1152.94 1302.77 L1153.62 1302.77 L1154.29 1302.77 L1154.97 1302.77 L1155.64 1302.77 L1156.32 1302.77 L1157 1302.77 L1157.67 1302.77 L1158.35 1302.77 L1159.02 1302.77 L1159.7 1302.77 L1160.37 1302.77 L1161.05 1302.77 L1161.72 1302.77 L1162.4 1302.77 L1163.08 1302.77 L1163.75 1302.77 L1164.43 1302.77 L1165.1 1302.77 L1165.78 1302.77 L1166.45 1302.77 L1167.13 1302.77 L1167.81 1302.77 L1168.48 1302.77 L1169.16 1302.77 L1169.83 1302.77 L1170.51 1302.77 L1171.18 1302.77 L1171.86 1302.77 L1172.53 1302.77 L1173.21 1302.77 L1173.89 1302.77 L1174.56 1302.77 L1175.24 1302.77 L1175.91 1302.77 L1176.59 1302.77 L1177.26 1302.77 L1177.94 1302.77 L1178.61 1302.77 L1179.29 1302.77 L1179.97 1302.77 L1180.64 1302.77 L1181.32 1302.77 L1181.99 1302.77 L1182.67 1302.77 L1183.34 1302.77 L1184.02 1302.77 L1184.69 1302.77 L1185.37 1302.77 L1186.05 1302.77 L1186.72 1302.77 L1187.4 1302.77 L1188.07 1302.77 L1188.75 1302.77 L1189.42 1302.77 L1190.1 1302.77 L1190.77 1302.77 L1191.45 1302.77 L1192.13 1302.77 L1192.8 1302.77 L1193.48 1302.77 L1194.15 1302.77 L1194.83 1302.77 L1195.5 1302.77 L1196.18 1302.77 L1196.86 1302.77 L1197.53 1302.77 L1198.21 1302.77 L1198.88 1302.77 L1199.56 1302.77 L1200.23 1302.77 L1200.91 1302.77 L1201.58 1302.77 L1202.26 1302.77 L1202.94 1302.77 L1203.61 1302.77 L1204.29 1302.77 L1204.96 1302.77 L1205.64 1302.77 L1206.31 1302.77 L1206.99 1302.77 L1207.66 1302.77 L1208.34 1302.77 L1209.02 1302.77 L1209.69 1302.77 L1210.37 1302.77 L1211.04 1302.77 L1211.72 1302.77 L1212.39 1302.77 L1213.07 1302.77 L1213.74 1302.77 L1214.42 1302.77 L1215.1 1302.77 L1215.77 1302.77 L1216.45 1302.77 L1217.12 1302.77 L1217.8 1302.77 L1218.47 1302.77 L1219.15 1302.77 L1219.83 1302.77 L1220.5 1302.77 L1221.18 1302.77 L1221.85 1302.77 L1222.53 1302.77 L1223.2 1302.77 L1223.88 1302.77 L1224.55 1302.77 L1225.23 1302.77 L1225.91 1302.77 L1226.58 1302.77 L1227.26 1302.77 L1227.93 1302.77 L1228.61 1302.77 L1229.28 1302.77 L1229.96 1302.77 L1230.63 1302.77 L1231.31 1302.77 L1231.99 1302.77 L1232.66 1302.77 L1233.34 1302.77 L1234.01 1302.77 L1234.69 1302.77 L1235.36 1302.77 L1236.04 1302.77 L1236.71 1302.77 L1237.39 1302.77 L1238.07 1302.77 L1238.74 1302.77 L1239.42 1302.77 L1240.09 1302.77 L1240.77 1302.77 L1241.44 1302.77 L1242.12 1302.77 L1242.79 1302.77 L1243.47 1302.77 L1244.15 1302.77 L1244.82 1302.77 L1245.5 1302.77 L1246.17 1302.77 L1246.85 1302.77 L1247.52 1302.77 L1248.2 1302.77 L1248.88 1302.77 L1249.55 1302.77 L1250.23 1302.77 L1250.9 1302.77 L1251.58 1302.77 L1252.25 1302.77 L1252.93 1302.77 L1253.6 1302.77 L1254.28 1302.77 L1254.96 1302.77 L1255.63 1302.77 L1256.31 1302.77 L1256.98 1302.77 L1257.66 1302.77 L1258.33 1302.77 L1259.01 1302.77 L1259.68 1302.77 L1260.36 1302.77 L1261.04 1302.77 L1261.71 1302.77 L1262.39 1302.77 L1263.06 1302.77 L1263.74 1302.77 L1264.41 1302.77 L1265.09 1302.77 L1265.76 1302.77 L1266.44 1302.77 L1267.12 1302.77 L1267.79 1302.77 L1268.47 1302.77 L1269.14 1302.77 L1269.82 1302.77 L1270.49 1302.77 L1271.17 1302.77 L1271.84 1302.77 L1272.52 1302.77 L1273.2 1302.77 L1273.87 1302.77 L1274.55 1302.77 L1275.22 1302.77 L1275.9 1302.77 L1276.57 1302.77 L1277.25 1302.77 L1277.93 1302.77 L1278.6 1302.77 L1279.28 1302.77 L1279.95 1302.77 L1280.63 1302.77 L1281.3 1302.77 L1281.98 1302.77 L1282.65 1302.77 L1283.33 1302.77 L1284.01 1302.77 L1284.68 1302.77 L1285.36 1302.77 L1286.03 1302.77 L1286.71 1302.77 L1287.38 1302.77 L1288.06 1302.77 L1288.73 1302.77 L1289.41 1302.77 L1290.09 1302.77 L1290.76 1302.77 L1291.44 1302.77 L1292.11 1302.77 L1292.79 1302.77 L1293.46 1302.77 L1294.14 1302.77 L1294.81 1302.77 L1295.49 1302.77 L1296.17 1302.77 L1296.84 1302.77 L1297.52 1302.77 L1298.19 1302.77 L1298.87 1302.77 L1299.54 1302.77 L1300.22 1302.77 L1300.89 1302.77 L1301.57 1302.77 L1302.25 1302.77 L1302.92 1302.77 L1303.6 1302.77 L1304.27 1302.77 L1304.95 1302.77 L1305.62 1302.77 L1306.3 1302.77 L1306.98 1302.77 L1307.65 1302.77 L1308.33 1302.77 L1309 1302.77 L1309.68 1302.77 L1310.35 1302.77 L1311.03 1302.77 L1311.7 1302.77 L1312.38 1302.77 L1313.06 1302.77 L1313.73 1302.77 L1314.41 1302.77 L1315.08 1302.77 L1315.76 1302.77 L1316.43 1302.77 L1317.11 1302.77 L1317.78 1302.77 L1318.46 1302.77 L1319.14 1302.77 L1319.81 1302.77 L1320.49 1302.77 L1321.16 1302.77 L1321.84 1302.77 L1322.51 1302.77 L1323.19 1302.77 L1323.86 1302.77 L1324.54 1302.77 L1325.22 1302.77 L1325.89 1302.77 L1326.57 1302.77 L1327.24 1302.77 L1327.92 1302.77 L1328.59 1302.77 L1329.27 1302.77 L1329.94 1302.77 L1330.62 1302.77 L1331.3 1302.77 L1331.97 1302.77 L1332.65 1302.77 L1333.32 1302.77 L1334 1302.77 L1334.67 1302.77 L1335.35 1302.77 L1336.03 1302.77 L1336.7 1302.77 L1337.38 1302.77 L1338.05 1302.77 L1338.73 1302.77 L1339.4 1302.77 L1340.08 1302.77 L1340.75 1302.77 L1341.43 1302.77 L1342.11 1302.77 L1342.78 1302.77 L1343.46 1302.77 L1344.13 1302.77 L1344.81 1302.77 L1345.48 1302.77 L1346.16 1302.77 L1346.83 1302.77 L1347.51 1302.77 L1348.19 1302.77 L1348.86 1302.77 L1349.54 1302.77 L1350.21 1302.77 L1350.89 1302.77 L1351.56 1302.77 L1352.24 1302.77 L1352.91 1302.77 L1353.59 1302.77 L1354.27 1302.77 L1354.94 1302.77 L1355.62 1302.77 L1356.29 1302.77 L1356.97 1302.77 L1357.64 1302.77 L1358.32 1302.77 L1358.99 1302.77 L1359.67 1302.77 L1360.35 1302.77 L1361.02 1302.77 L1361.7 1302.77 L1362.37 1302.77 L1363.05 1302.77 L1363.72 1302.77 L1364.4 1302.77 L1365.08 1302.77 L1365.75 1302.77 L1366.43 1302.77 L1367.1 1302.77 L1367.78 1302.77 L1368.45 1302.77 L1369.13 1302.77 L1369.8 1302.77 L1370.48 1302.77 L1371.16 1302.77 L1371.83 1302.77 L1372.51 1302.77 L1373.18 1302.77 L1373.86 1302.77 L1374.53 1302.77 L1375.21 1302.77 L1375.88 1302.77 L1376.56 1302.77 L1377.24 1302.77 L1377.91 1302.77 L1378.59 1302.77 L1379.26 1302.77 L1379.94 1302.77 L1380.61 1302.77 L1381.29 1302.77 L1381.96 1302.77 L1382.64 1302.77 L1383.32 1302.77 L1383.99 1302.77 L1384.67 1302.77 L1385.34 1302.77 L1386.02 1302.77 L1386.69 1302.77 L1387.37 1302.77 L1388.04 1302.77 L1388.72 1302.77 L1389.4 1302.77 L1390.07 1302.77 L1390.75 1302.77 L1391.42 1302.77 L1392.1 1302.77 L1392.77 1302.77 L1393.45 1302.77 L1394.13 1302.77 L1394.8 1302.77 L1395.48 1302.77 L1396.15 1302.77 L1396.83 1302.77 L1397.5 1302.77 L1398.18 1302.77 L1398.85 1302.77 L1399.53 1302.77 L1400.21 1302.77 L1400.88 1302.77 L1401.56 1302.77 L1402.23 1302.77 L1402.91 1302.77 L1403.58 1302.77 L1404.26 1302.77 L1404.93 1302.77 L1405.61 1302.77 L1406.29 1302.77 L1406.96 1302.77 L1407.64 1302.77 L1408.31 1302.77 L1408.99 1302.77 L1409.66 1302.77 L1410.34 1302.77 L1411.01 1302.77 L1411.69 1302.77 L1412.37 1302.77 L1413.04 1302.77 L1413.72 1302.77 L1414.39 1302.77 L1415.07 1302.77 L1415.74 1302.77 L1416.42 1302.77 L1417.09 1302.77 L1417.77 1302.77 L1418.45 1302.77 L1419.12 1302.77 L1419.8 1302.77 L1420.47 1302.77 L1421.15 1302.77 L1421.82 1302.77 L1422.5 1302.77 L1423.18 1302.77 L1423.85 1302.77 L1424.53 1302.77 L1425.2 1302.77 L1425.88 1302.77 L1426.55 1302.77 L1427.23 1302.77 L1427.9 1302.77 L1428.58 1302.77 L1429.26 1302.77 L1429.93 1302.77 L1430.61 1302.77 L1431.28 1302.77 L1431.96 1302.77 L1432.63 1302.77 L1433.31 1302.77 L1433.98 1302.77 L1434.66 1302.77 L1435.34 1302.77 L1436.01 1302.77 L1436.69 1302.77 L1437.36 1302.77 L1438.04 1302.77 L1438.71 1302.77 L1439.39 1302.77 L1440.06 1302.77 L1440.74 1302.77 L1441.42 1302.77 L1442.09 1302.77 L1442.77 1302.77 L1443.44 1302.77 L1444.12 1302.77 L1444.79 1302.77 L1445.47 1302.77 L1446.15 1302.77 L1446.82 1302.77 L1447.5 1302.77 L1448.17 1302.77 L1448.85 1302.77 L1449.52 1302.77 L1450.2 1302.77 L1450.87 1302.77 L1451.55 1302.77 L1452.23 1302.77 L1452.9 1302.77 L1453.58 1302.77 L1454.25 1302.77 L1454.93 1302.77 L1455.6 1302.77 L1456.28 1302.77 L1456.95 1302.77 L1457.63 1302.77 L1458.31 1302.77 L1458.98 1302.77 L1459.66 1302.77 L1460.33 1302.77 L1461.01 1302.77 L1461.68 1302.77 L1462.36 1302.77 L1463.03 1302.77 L1463.71 1302.77 L1464.39 1302.77 L1465.06 1302.77 L1465.74 1302.77 L1466.41 1302.77 L1467.09 1302.77 L1467.76 1302.77 L1468.44 1302.77 L1469.11 1302.77 L1469.79 1302.77 L1470.47 1302.77 L1471.14 1302.77 L1471.82 1302.77 L1472.49 1302.77 L1473.17 1302.77 L1473.84 1302.77 L1474.52 1302.77 L1475.2 1302.77 L1475.87 1302.77 L1476.55 1302.77 L1477.22 1302.77 L1477.9 1302.77 L1478.57 1302.77 L1479.25 1302.77 L1479.92 1302.77 L1480.6 1302.77 L1481.28 1302.77 L1481.95 1302.77 L1482.63 1302.77 L1483.3 1302.77 L1483.98 1302.77 L1484.65 1302.77 L1485.33 1302.77 L1486 1302.77 L1486.68 1302.77 L1487.36 1302.77 L1488.03 1302.77 L1488.71 1302.77 L1489.38 1302.77 L1490.06 1302.77 L1490.73 1302.77 L1491.41 1302.77 L1492.08 1302.77 L1492.76 1302.77 L1493.44 1302.77 L1494.11 1302.77 L1494.79 1302.77 L1495.46 1302.77 L1496.14 1302.77 L1496.81 1302.77 L1497.49 1302.77 L1498.16 1302.77 L1498.84 1302.77 L1499.52 1302.77 L1500.19 1302.77 L1500.87 1302.77 L1501.54 1302.77 L1502.22 1302.77 L1502.89 1302.77 L1503.57 1302.77 L1504.25 1302.77 L1504.92 1302.77 L1505.6 1302.77 L1506.27 1302.77 L1506.95 1302.77 L1507.62 1302.77 L1508.3 1302.77 L1508.97 1302.77 L1509.65 1302.77 L1510.33 1302.77 L1511 1302.77 L1511.68 1302.77 L1512.35 1302.77 L1513.03 1302.77 L1513.7 1302.77 L1514.38 1302.77 L1515.05 1302.77 L1515.73 1302.77 L1516.41 1302.77 L1517.08 1302.77 L1517.76 1302.77 L1518.43 1302.77 L1519.11 1302.77 L1519.78 1302.77 L1520.46 1302.77 L1521.13 1302.77 L1521.81 1302.77 L1522.49 1302.77 L1523.16 1302.77 L1523.84 1302.77 L1524.51 1302.77 L1525.19 1302.77 L1525.86 1302.77 L1526.54 1302.77 L1527.21 1302.77 L1527.89 1302.77 L1528.57 1302.77 L1529.24 1302.77 L1529.92 1302.77 L1530.59 1302.77 L1531.27 1302.77 L1531.94 1302.77 L1532.62 1302.77 L1533.3 1302.77 L1533.97 1302.77 L1534.65 1302.77 L1535.32 1302.77 L1536 1302.77 L1536.67 1302.77 L1537.35 1302.77 L1538.02 1302.77 L1538.7 1302.77 L1539.38 1302.77 L1540.05 1302.77 L1540.73 1302.77 L1541.4 1302.77 L1542.08 1302.77 L1542.75 1302.77 L1543.43 1302.77 L1544.1 1302.77 L1544.78 1302.77 L1545.46 1302.77 L1546.13 1302.77 L1546.81 1302.77 L1547.48 1302.77 L1548.16 1302.77 L1548.83 1302.77 L1549.51 1302.77 L1550.18 1302.77 L1550.86 1302.77 L1551.54 1302.77 L1552.21 1302.77 L1552.89 1302.77 L1553.56 1302.77 L1554.24 1302.77 L1554.91 1302.77 L1555.59 1302.77 L1556.26 1302.77 L1556.94 1302.77 L1557.62 1302.77 L1558.29 1302.77 L1558.97 1302.77 L1559.64 1302.77 L1560.32 1302.77 L1560.99 1302.77 L1561.67 1302.77 L1562.35 1302.77 L1563.02 1302.77 L1563.7 1302.77 L1564.37 1302.77 L1565.05 1302.77 L1565.72 1302.77 L1566.4 1302.77 L1567.07 1302.77 L1567.75 1302.77 L1568.43 1302.77 L1569.1 1302.77 L1569.78 1302.77 L1570.45 1302.77 L1571.13 1302.77 L1571.8 1302.77 L1572.48 1302.77 L1573.15 1302.77 L1573.83 1302.77 L1574.51 1302.77 L1575.18 1302.77 L1575.86 1302.77 L1576.53 1302.77 L1577.21 1302.77 L1577.88 1302.77 L1578.56 1302.77 L1579.23 1302.77 L1579.91 1302.77 L1580.59 1302.77 L1581.26 1302.77 L1581.94 1302.77 L1582.61 1302.77 L1583.29 1302.77 L1583.96 1302.77 L1584.64 1302.77 L1585.31 1302.77 L1585.99 1302.77 L1586.67 1302.77 L1587.34 1302.77 L1588.02 1302.77 L1588.69 1302.77 L1589.37 1302.77 L1590.04 1302.77 L1590.72 1302.77 L1591.4 1302.77 L1592.07 1302.77 L1592.75 1302.77 L1593.42 1302.77 L1594.1 1302.77 L1594.77 1302.77 L1595.45 1302.77 L1596.12 1302.77 L1596.8 1302.77 L1597.48 1302.77 L1598.15 1302.77 L1598.83 1302.77 L1599.5 1302.77 L1600.18 1302.77 L1600.85 1302.77 L1601.53 1302.77 L1602.2 1302.77 L1602.88 1302.77 L1603.56 1302.77 L1604.23 1302.77 L1604.91 1302.77 L1605.58 1302.77 L1606.26 1302.77 L1606.93 1302.77 L1607.61 1302.77 L1608.28 1302.77 L1608.96 1302.77 L1609.64 1302.77 L1610.31 1302.77 L1610.99 1302.77 L1611.66 1302.77 L1612.34 1302.77 L1613.01 1302.77 L1613.69 1302.77 L1614.36 1302.77 L1615.04 1302.77 L1615.72 1302.77 L1616.39 1302.77 L1617.07 1302.77 L1617.74 1302.77 L1618.42 1302.77 L1619.09 1302.77 L1619.77 1302.77 L1620.45 1302.77 L1621.12 1302.77 L1621.8 1302.77 L1622.47 1302.77 L1623.15 1302.77 L1623.82 1302.77 L1624.5 1302.77 L1625.17 1302.77 L1625.85 1302.77 L1626.53 1302.77 L1627.2 1302.77 L1627.88 1302.77 L1628.55 1302.77 L1629.23 1302.77 L1629.9 1302.77 L1630.58 1302.77 L1631.25 1302.77 L1631.93 1302.77 L1632.61 1302.77 L1633.28 1302.77 L1633.96 1302.77 L1634.63 1302.77 L1635.31 1302.77 L1635.98 1302.77 L1636.66 1302.77 L1637.33 1302.77 L1638.01 1302.77 L1638.69 1302.77 L1639.36 1302.77 L1640.04 1302.77 L1640.71 1302.77 L1641.39 1302.77 L1642.06 1302.77 L1642.74 1302.77 L1643.41 1302.77 L1644.09 1302.77 L1644.77 1302.77 L1645.44 1302.77 L1646.12 1302.77 L1646.79 1302.77 L1647.47 1302.77 L1648.14 1302.77 L1648.82 1302.77 L1649.5 1302.77 L1650.17 1302.77 L1650.85 1302.77 L1651.52 1302.77 L1652.2 1302.77 L1652.87 1302.77 L1653.55 1302.77 L1654.22 1302.77 L1654.9 1302.77 L1655.58 1302.77 L1656.25 1302.77 L1656.93 1302.77 L1657.6 1302.77 L1658.28 1302.77 L1658.95 1302.77 L1659.63 1302.77 L1660.3 1302.77 L1660.98 1302.77 L1661.66 1302.77 L1662.33 1302.77 L1663.01 1302.77 L1663.68 1302.77 L1664.36 1302.77 L1665.03 1302.77 L1665.71 1302.77 L1666.38 1302.77 L1667.06 1302.77 L1667.74 1302.77 L1668.41 1302.77 L1669.09 1302.77 L1669.76 1302.77 L1670.44 1302.77 L1671.11 1302.77 L1671.79 1302.77 L1672.47 1302.77 L1673.14 1302.77 L1673.82 1302.77 L1674.49 1302.77 L1675.17 1302.77 L1675.84 1302.77 L1676.52 1302.77 L1677.19 1302.77 L1677.87 1302.77 L1678.55 1302.77 L1679.22 1302.77 L1679.9 1302.77 L1680.57 1302.77 L1681.25 1302.77 L1681.92 1302.77 L1682.6 1302.77 L1683.27 1302.77 L1683.95 1302.77 L1684.63 1302.77 L1685.3 1302.77 L1685.98 1302.77 L1686.65 1302.77 L1687.33 1302.77 L1688 1302.77 L1688.68 1302.77 L1689.35 1302.77 L1690.03 1302.77 L1690.71 1302.77 L1691.38 1302.77 L1692.06 1302.77 L1692.73 1302.77 L1693.41 1302.77 L1694.08 1302.77 L1694.76 1302.77 L1695.43 1302.77 L1696.11 1302.77 L1696.79 1302.77 L1697.46 1302.77 L1698.14 1302.77 L1698.81 1302.77 L1699.49 1302.77 L1700.16 1302.77 L1700.84 1302.77 L1701.52 1302.77 L1702.19 1302.77 L1702.87 1302.77 L1703.54 1302.77 L1704.22 1302.77 L1704.89 1302.77 L1705.57 1302.77 L1706.24 1302.77 L1706.92 1302.77 L1707.6 1302.77 L1708.27 1302.77 L1708.95 1302.77 L1709.62 1302.77 L1710.3 1302.77 L1710.97 1302.77 L1711.65 1302.77 L1712.32 1302.77 L1713 1302.77 L1713.68 1302.77 L1714.35 1302.77 L1715.03 1302.77 L1715.7 1302.77 L1716.38 1302.77 L1717.05 1302.77 L1717.73 1302.77 L1718.4 1302.77 L1719.08 1302.77 L1719.76 1302.77 L1720.43 1302.77 L1721.11 1302.77 L1721.78 1302.77 L1722.46 1302.77 L1723.13 1302.77 L1723.81 1302.77 L1724.48 1302.77 L1725.16 1302.77 L1725.84 1302.77 L1726.51 1302.77 L1727.19 1302.77 L1727.86 1302.77 L1728.54 1302.77 L1729.21 1302.77 L1729.89 1302.77 L1730.57 1302.77 L1731.24 1302.77 L1731.92 1302.77 L1732.59 1302.77 L1733.27 1302.77 L1733.94 1302.77 L1734.62 1302.77 L1735.29 1302.77 L1735.97 1302.77 L1736.65 1302.77 L1737.32 1302.77 L1738 1302.77 L1738.67 1302.77 L1739.35 1302.77 L1740.02 1302.77 L1740.7 1302.77 L1741.37 1302.77 L1742.05 1302.77 L1742.73 1302.77 L1743.4 1302.77 L1744.08 1302.77 L1744.75 1302.77 L1745.43 1302.77 L1746.1 1302.77 L1746.78 1302.77 L1747.45 1302.77 L1748.13 1302.77 L1748.81 1302.77 L1749.48 1302.77 L1750.16 1302.77 L1750.83 1302.77 L1751.51 1302.77 L1752.18 1302.77 L1752.86 1302.77 L1753.53 1302.77 L1754.21 1302.77 L1754.89 1302.77 L1755.56 1302.77 L1756.24 1302.77 L1756.91 1302.77 L1757.59 1302.77 L1758.26 1302.77 L1758.94 1302.77 L1759.62 1302.77 L1760.29 1302.77 L1760.97 1302.77 L1761.64 1302.77 L1762.32 1302.77 L1762.99 1302.77 L1763.67 1302.77 L1764.34 1302.77 L1765.02 1302.77 L1765.7 1302.77 L1766.37 1302.77 L1767.05 1302.77 L1767.72 1302.77 L1768.4 1302.77 L1769.07 1302.77 L1769.75 1302.77 L1770.42 1302.77 L1771.1 1302.77 L1771.78 1302.77 L1772.45 1302.77 L1773.13 1302.77 L1773.8 1302.77 L1774.48 1302.77 L1775.15 1302.77 L1775.83 1302.77 L1776.5 1302.77 L1777.18 1302.77 L1777.86 1302.77 L1778.53 1302.77 L1779.21 1302.77 L1779.88 1302.77 L1780.56 1302.77 L1781.23 1302.77 L1781.91 1302.77 L1782.58 1302.77 L1783.26 1302.77 L1783.94 1302.77 L1784.61 1302.77 L1785.29 1302.77 L1785.96 1302.77 L1786.64 1302.77 L1787.31 1302.77 L1787.99 1302.77 L1788.67 1302.77 L1789.34 1302.77 L1790.02 1302.77 L1790.69 1302.77 L1791.37 1302.77 L1792.04 1302.77 L1792.72 1302.77 L1793.39 1302.77 L1794.07 1302.77 L1794.75 1302.77 L1795.42 1302.77 L1796.1 1302.77 L1796.77 1302.77 L1797.45 1302.77 L1798.12 1302.77 L1798.8 1302.77 L1799.47 1302.77 L1800.15 1302.77 L1800.83 1302.77 L1801.5 1302.77 L1802.18 1302.77 L1802.85 1302.77 L1803.53 1302.77 L1804.2 1302.77 L1804.88 1302.77 L1805.55 1302.77 L1806.23 1302.77 L1806.91 1302.77 L1807.58 1302.77 L1808.26 1302.77 L1808.93 1302.77 L1809.61 1302.77 L1810.28 1302.77 L1810.96 1302.77 L1811.63 1302.77 L1812.31 1302.77 L1812.99 1302.77 L1813.66 1302.77 L1814.34 1302.77 L1815.01 1302.77 L1815.69 1302.77 L1816.36 1302.77 L1817.04 1302.77 L1817.72 1302.77 L1818.39 1302.77 L1819.07 1302.77 L1819.74 1302.77 L1820.42 1302.77 L1821.09 1302.77 L1821.77 1302.77 L1822.44 1302.77 L1823.12 1302.77 L1823.8 1302.77 L1824.47 1302.77 L1825.15 1302.77 L1825.82 1302.77 L1826.5 1302.77 L1827.17 1302.77 L1827.85 1302.77 L1828.52 1302.77 L1829.2 1302.77 L1829.88 1302.77 L1830.55 1302.77 L1831.23 1302.77 L1831.9 1302.77 L1832.58 1302.77 L1833.25 1302.77 L1833.93 1302.77 L1834.6 1302.77 L1835.28 1302.77 L1835.96 1302.77 L1836.63 1302.77 L1837.31 1302.77 L1837.98 1302.77 L1838.66 1302.77 L1839.33 1302.77 L1840.01 1302.77 L1840.68 1302.77 L1841.36 1302.77 L1842.04 1302.77 L1842.71 1302.77 L1843.39 1302.77 L1844.06 1302.77 L1844.74 1302.77 L1845.41 1302.77 L1846.09 1302.77 L1846.77 1302.77 L1847.44 1302.77 L1848.12 1302.77 L1848.79 1302.77 L1849.47 1302.77 L1850.14 1302.77 L1850.82 1302.77 L1851.49 1302.77 L1852.17 1302.77 L1852.85 1302.77 L1853.52 1302.77 L1854.2 1302.77 L1854.87 1302.77 L1855.55 1302.77 L1856.22 1302.77 L1856.9 1302.77 L1857.57 1302.77 L1858.25 1302.77 L1858.93 1302.77 L1859.6 1302.77 L1860.28 1302.77 L1860.95 1302.77 L1861.63 1302.77 L1862.3 1302.77 L1862.98 1302.77 L1863.65 1302.77 L1864.33 1302.77 L1865.01 1302.77 L1865.68 1302.77 L1866.36 1302.77 L1867.03 1302.77 L1867.71 1302.77 L1868.38 1302.77 L1869.06 1302.77 L1869.73 1302.77 L1870.41 1302.77 L1871.09 1302.77 L1871.76 1302.77 L1872.44 1302.77 L1873.11 1302.77 L1873.79 1302.77 L1874.46 1302.77 L1875.14 1302.77 L1875.82 1302.77 L1876.49 1302.77 L1877.17 1302.77 L1877.84 1302.77 L1878.52 1302.77 L1879.19 1302.77 L1879.87 1302.77 L1880.54 1302.77 L1881.22 1302.77 L1881.9 1302.77 L1882.57 1302.77 L1883.25 1302.77 L1883.92 1302.77 L1884.6 1302.77 L1885.27 1302.77 L1885.95 1302.77 L1886.62 1302.77 L1887.3 1302.77 L1887.98 1302.77 L1888.65 1302.77 L1889.33 1302.77 L1890 1302.77 L1890.68 1302.77 L1891.35 1302.77 L1892.03 1302.77 L1892.7 1302.77 L1893.38 1302.77 L1894.06 1302.77 L1894.73 1302.77 L1895.41 1302.77 L1896.08 1302.77 L1896.76 1302.77 L1897.43 1302.77 L1898.11 1302.77 L1898.79 1302.77 L1899.46 1302.77 L1900.14 1302.77 L1900.81 1302.77 L1901.49 1302.77 L1902.16 1302.77 L1902.84 1302.77 L1903.51 1302.77 L1904.19 1302.77 L1904.87 1302.77 L1905.54 1302.77 L1906.22 1302.77 L1906.89 1302.77 L1907.57 1302.77 L1908.24 1302.77 L1908.92 1302.77 L1909.59 1302.77 L1910.27 1302.77 L1910.95 1302.77 L1911.62 1302.77 L1912.3 1302.77 L1912.97 1302.77 L1913.65 1302.77 L1914.32 1302.77 L1915 1302.77 L1915.67 1302.77 L1916.35 1302.77 L1917.03 1302.77 L1917.7 1302.77 L1918.38 1302.77 L1919.05 1302.77 L1919.73 1302.77 L1920.4 1302.77 L1921.08 1302.77 L1921.75 1302.77 L1922.43 1302.77 L1923.11 1302.77 L1923.78 1302.77 L1924.46 1302.77 L1925.13 1302.77 L1925.81 1302.77 L1926.48 1302.77 L1927.16 1302.77 L1927.84 1302.77 L1928.51 1302.77 L1929.19 1302.77 L1929.86 1302.77 L1930.54 1302.77 L1931.21 1302.77 L1931.89 1302.77 L1932.56 1302.77 L1933.24 1302.77 L1933.92 1302.77 L1934.59 1302.77 L1935.27 1302.77 L1935.94 1302.77 L1936.62 1302.77 L1937.29 1302.77 L1937.97 1302.77 L1938.64 1302.77 L1939.32 1302.77 L1940 1302.77 L1940.67 1302.77 L1941.35 1302.77 L1942.02 1302.77 L1942.7 1302.77 L1943.37 1302.77 L1944.05 1302.77 L1944.72 1302.77 L1945.4 1302.77 L1946.08 1302.77 L1946.75 1302.77 L1947.43 1302.77 L1948.1 1302.77 L1948.78 1302.77 L1949.45 1302.77 L1950.13 1302.77 L1950.8 1302.77 L1951.48 1302.77 L1952.16 1302.77 L1952.83 1302.77 L1953.51 1302.77 L1954.18 1302.77 L1954.86 1302.77 L1955.53 1302.77 L1956.21 1302.77 L1956.89 1302.77 L1957.56 1302.77 L1958.24 1302.77 L1958.91 1302.77 L1959.59 1302.77 L1960.26 1302.77 L1960.94 1302.77 L1961.61 1302.77 L1962.29 1302.77 L1962.97 1302.77 L1963.64 1302.77 L1964.32 1302.77 L1964.99 1302.77 L1965.67 1302.77 L1966.34 1302.77 L1967.02 1302.77 L1967.69 1302.77 L1968.37 1302.77 L1969.05 1302.77 L1969.72 1302.77 L1970.4 1302.77 L1971.07 1302.77 L1971.75 1302.77 L1972.42 1302.77 L1973.1 1302.77 L1973.77 1302.77 L1974.45 1302.77 L1975.13 1302.77 L1975.8 1302.77 L1976.48 1302.77 L1977.15 1302.77 L1977.83 1302.77 L1978.5 1302.77 L1979.18 1302.77 L1979.85 1302.77 L1980.53 1302.77 L1981.21 1302.77 L1981.88 1302.77 L1982.56 1302.77 L1983.23 1302.77 L1983.91 1302.77 L1984.58 1302.77 L1985.26 1302.77 L1985.94 1302.77 L1986.61 1302.77 L1987.29 1302.77 L1987.96 1302.77 L1988.64 1302.77 L1989.31 1302.77 L1989.99 1302.77 L1990.66 1302.77 L1991.34 1302.77 L1992.02 1302.77 L1992.69 1302.77 L1993.37 1302.77 L1994.04 1302.77 L1994.72 1302.77 L1995.39 1302.77 L1996.07 1302.77 L1996.74 1302.77 L1997.42 1302.77 L1998.1 1302.77 L1998.77 1302.77 L1999.45 1302.77 L2000.12 1302.77 L2000.8 1302.77 L2001.47 1302.77 L2002.15 1302.77 L2002.82 1302.77 L2003.5 1302.77 L2004.18 1302.77 L2004.85 1302.77 L2005.53 1302.77 L2006.2 1302.77 L2006.88 1302.77 L2007.55 1302.77 L2008.23 1302.77 L2008.9 1302.77 L2009.58 1302.77 L2010.26 1302.77 L2010.93 1302.77 L2011.61 1302.77 L2012.28 1302.77 L2012.96 1302.77 L2013.63 1302.77 L2014.31 1302.77 L2014.99 1302.77 L2015.66 1302.77 L2016.34 1302.77 L2017.01 1302.77 L2017.69 1302.77 L2018.36 1302.77 L2019.04 1302.77 L2019.71 1302.77 L2020.39 1302.77 L2021.07 1302.77 L2021.74 1302.77 L2022.42 1302.77 L2023.09 1302.77 L2023.77 1302.77 L2024.44 1302.77 L2025.12 1302.77 L2025.79 1302.77 L2026.47 1302.77 L2027.15 1302.77 L2027.82 1302.77 L2028.5 1302.77 L2029.17 1302.77 L2029.85 1302.77 L2030.52 1302.77 L2031.2 1302.77 L2031.87 1302.77 L2032.55 1302.77 L2033.23 1302.77 L2033.9 1302.77 L2034.58 1302.77 L2035.25 1302.77 L2035.93 1302.77 L2036.6 1302.77 L2037.28 1302.77 L2037.95 1302.77 L2038.63 1302.77 L2039.31 1302.77 L2039.98 1302.77 L2040.66 1302.77 L2041.33 1302.77 L2042.01 1302.77 L2042.68 1302.77 L2043.36 1302.77 L2044.04 1302.77 L2044.71 1302.77 L2045.39 1302.77 L2046.06 1302.77 L2046.74 1302.77 L2047.41 1302.77 L2048.09 1302.77 L2048.76 1302.77 L2049.44 1302.77 L2050.12 1302.77 L2050.79 1302.77 L2051.47 1302.77 L2052.14 1302.77 L2052.82 1302.77 L2053.49 1302.77 L2054.17 1302.77 L2054.84 1302.77 L2055.52 1302.77 L2056.2 1302.77 L2056.87 1302.77 L2057.55 1302.77 L2058.22 1302.77 L2058.9 1302.77 L2059.57 1302.77 L2060.25 1302.77 L2060.92 1302.77 L2061.6 1302.77 L2062.28 1302.77 L2062.95 1302.77 L2063.63 1302.77 L2064.3 1302.77 L2064.98 1302.77 L2065.65 1302.77 L2066.33 1302.77 L2067 1302.77 L2067.68 1302.77 L2068.36 1302.77 L2069.03 1302.77 L2069.71 1302.77 L2070.38 1302.77 L2071.06 1302.77 L2071.73 1302.77 L2072.41 1302.77 L2073.09 1302.77 L2073.76 1302.77 L2074.44 1302.77 L2075.11 1302.77 L2075.79 1302.77 L2076.46 1302.77 L2077.14 1302.77 L2077.81 1302.77 L2078.49 1302.77 L2079.17 1302.77 L2079.84 1302.77 L2080.52 1302.77 L2081.19 1302.77 L2081.87 1302.77 L2082.54 1302.77 L2083.22 1302.77 L2083.89 1302.77 L2084.57 1302.77 L2085.25 1302.77 L2085.92 1302.77 L2086.6 1302.77 L2087.27 1302.77 L2087.95 1302.77 L2088.62 1302.77 L2089.3 1302.77 L2089.97 1302.77 L2090.65 1302.77 L2091.33 1302.77 L2092 1302.77 L2092.68 1302.77 L2093.35 1302.77 L2094.03 1302.77 L2094.7 1302.77 L2095.38 1302.77 L2096.05 1302.77 L2096.73 1302.77 L2097.41 1302.77 L2098.08 1302.77 L2098.76 1302.77 L2099.43 1302.77 L2100.11 1302.77 L2100.78 1302.77 L2101.46 1302.77 L2102.14 1302.77 L2102.81 1302.77 L2103.49 1302.77 L2104.16 1302.77 L2104.84 1302.77 L2105.51 1302.77 L2106.19 1302.77 L2106.86 1302.77 L2107.54 1302.77 L2108.22 1302.77 L2108.89 1302.77 L2109.57 1302.77 L2110.24 1302.77 L2110.92 1302.77 L2111.59 1302.77 L2112.27 1302.77 L2112.94 1302.77 L2113.62 1302.77 L2114.3 1302.77 L2114.97 1302.77 L2115.65 1302.77 L2116.32 1302.77 L2117 1302.77 L2117.67 1302.77 L2118.35 1302.77 L2119.02 1302.77 L2119.7 1302.77 L2120.38 1302.77 L2121.05 1302.77 L2121.73 1302.77 L2122.4 1302.77 L2123.08 1302.77 L2123.75 1302.77 L2124.43 1302.77 L2125.11 1302.77 L2125.78 1302.77 L2126.46 1302.77 L2127.13 1302.77 L2127.81 1302.77 L2128.48 1302.77 L2129.16 1302.77 L2129.83 1302.77 L2130.51 1302.77 L2131.19 1302.77 L2131.86 1302.77 L2132.54 1302.77 L2133.21 1302.77 L2133.89 1302.77 L2134.56 1302.77 L2135.24 1302.77 L2135.91 1302.77 L2136.59 1302.77 L2137.27 1302.77 L2137.94 1302.77 L2138.62 1302.77 L2139.29 1302.77 L2139.97 1302.77 L2140.64 1302.77 L2141.32 1302.77 L2141.99 1302.77 L2142.67 1302.77 L2143.35 1302.77 L2144.02 1302.77 L2144.7 1302.77 L2145.37 1302.77 L2146.05 1302.77 L2146.72 1302.77 L2147.4 1302.77 L2148.07 1302.77 L2148.75 1302.77 L2149.43 1302.77 L2150.1 1302.77 L2150.78 1302.77 L2151.45 1302.77 L2152.13 1302.77 L2152.8 1302.77 L2153.48 1302.77 L2154.16 1302.77 L2154.83 1302.77 L2155.51 1302.77 L2156.18 1302.77 L2156.86 1302.77 L2157.53 1302.77 L2158.21 1302.77 L2158.88 1302.77 L2159.56 1302.77 L2160.24 1302.77 L2160.91 1302.77 L2161.59 1302.77 L2162.26 1302.77 L2162.94 1302.77 L2163.61 1302.77 L2164.29 1302.77 L2164.96 1302.77 L2165.64 1302.77 L2166.32 1302.77 L2166.99 1302.77 L2167.67 1302.77 L2168.34 1302.77 L2169.02 1302.77 L2169.69 1302.77 L2170.37 1302.77 L2171.04 1302.77 L2171.72 1302.77 L2172.4 1302.77 L2173.07 1302.77 L2173.75 1302.77 L2174.42 1302.77 L2175.1 1302.77 L2175.77 1302.77 L2176.45 1302.77 L2177.12 1302.77 L2177.8 1302.77 L2178.48 1302.77 L2179.15 1302.77 L2179.83 1302.77 L2180.5 1302.77 L2181.18 1302.77 L2181.85 1302.77 L2182.53 1302.77 L2183.21 1302.77 L2183.88 1302.77 L2184.56 1302.77 L2185.23 1302.77 L2185.91 1302.77 L2186.58 1302.77 L2187.26 1302.77 L2187.93 1302.77 L2188.61 1302.77 L2189.29 1302.77 L2189.96 1302.77 L2190.64 1302.77 L2191.31 1302.77 L2191.99 1302.77 L2192.66 1302.77 L2193.34 1302.77 L2194.01 1302.77 L2194.69 1302.77 L2195.37 1302.77 L2196.04 1302.77 L2196.72 1302.77 L2197.39 1302.77 L2198.07 1302.77 L2198.74 1302.77 L2199.42 1302.77 L2200.09 1302.77 L2200.77 1302.77 L2201.45 1302.77 L2202.12 1302.77 L2202.8 1302.77 L2203.47 1302.77 L2204.15 1302.77 L2204.82 1302.77 L2205.5 1302.77 L2206.17 1302.77 L2206.85 1302.77 L2207.53 1302.77 L2208.2 1302.77 L2208.88 1302.77 L2209.55 1302.77 L2210.23 1302.77 L2210.9 1302.77 L2211.58 1302.77 L2212.26 1302.77 L2212.93 1302.77 L2213.61 1302.77 L2214.28 1302.77 L2214.96 1302.77 L2215.63 1302.77 L2216.31 1302.77 L2216.98 1302.77 L2217.66 1302.77 L2218.34 1302.77 L2219.01 1302.77 L2219.69 1302.77 L2220.36 1302.77 L2221.04 1302.77 L2221.71 1302.77 L2222.39 1302.77 L2223.06 1302.77 L2223.74 1302.77 L2224.42 1302.77 L2225.09 1302.77 L2225.77 1302.77 L2226.44 1302.77 L2227.12 1302.77 L2227.79 1302.77 L2228.47 1302.77 L2229.14 1302.77 L2229.82 1302.77 L2230.5 1302.77 L2231.17 1302.77 L2231.85 1302.77 L2232.52 1302.77 L2233.2 1302.77 L2233.87 1302.77 L2234.55 1302.77 L2235.22 1302.77 L2235.9 1302.77 L2236.58 1302.77 L2237.25 1302.77 L2237.93 1302.77 L2238.6 1302.77 L2239.28 1302.77 L2239.95 1302.77 L2240.63 1302.77 L2241.31 1302.77 L2241.98 1302.77 L2242.66 1302.77 L2243.33 1302.77 L2244.01 1302.77 L2244.68 1302.77 L2245.36 1302.77 L2246.03 1302.77 L2246.71 1302.77 L2247.39 1302.77 L2248.06 1302.77 L2248.74 1302.77 L2249.41 1302.77 L2250.09 1302.77 L2250.76 1302.77 L2251.44 1302.77 L2252.11 1302.77 L2252.79 1302.77 L2253.47 1302.77 L2254.14 1302.77 L2254.82 1302.77 L2255.49 1302.77 L2256.17 1302.77 L2256.84 1302.77 L2257.52 1302.77 L2258.19 1302.77 L2258.87 1302.77 L2259.55 1302.77 L2260.22 1302.77 L2260.9 1302.77 L2261.57 1302.77 L2262.25 1302.77 L2262.92 1302.77 L2263.6 1302.77 L2264.27 1302.77 L2264.95 1302.77 L2265.63 1302.77 L2266.3 1302.77 L2266.98 1302.77 L2267.65 1302.77 L2268.33 1302.77 L2269 1302.77 L2269.68 1302.77 L2270.36 1302.77 L2271.03 1302.77 L2271.71 1302.77 L2272.38 1302.77 L2273.06 1302.77 L2273.73 1302.77 L2274.41 1302.77 L2275.08 1302.77 L2275.76 1302.77 L2276.44 1302.77 L2277.11 1302.77 L2277.79 1302.77 L2278.46 1302.77 L2279.14 1302.77 L2279.81 1302.77 L2280.49 1302.77 L2281.16 1302.77 L2281.84 1302.77 L2282.52 1302.77 L2283.19 1302.77 L2283.87 1302.77 L2284.54 1302.77 L2285.22 1302.77 L2285.89 1302.77 L2286.57 1302.77 L2287.24 1302.77 L2287.92 1302.77 L2288.6 1302.77 L2289.27 1302.77 L2289.95 1302.77 L2290.62 1302.77 L2291.3 1302.77 L2291.97 1302.77 L2291.97 1299.52 L2291.3 1299.52 L2290.62 1299.52 L2289.95 1299.52 L2289.27 1299.52 L2288.6 1299.52 L2287.92 1299.52 L2287.24 1299.52 L2286.57 1299.52 L2285.89 1299.52 L2285.22 1299.52 L2284.54 1299.52 L2283.87 1299.52 L2283.19 1299.52 L2282.52 1299.52 L2281.84 1299.52 L2281.16 1299.52 L2280.49 1299.52 L2279.81 1299.52 L2279.14 1299.52 L2278.46 1299.52 L2277.79 1299.52 L2277.11 1299.52 L2276.44 1299.52 L2275.76 1299.52 L2275.08 1299.52 L2274.41 1299.52 L2273.73 1299.52 L2273.06 1299.52 L2272.38 1299.52 L2271.71 1299.52 L2271.03 1299.52 L2270.36 1299.52 L2269.68 1299.52 L2269 1299.52 L2268.33 1299.52 L2267.65 1299.52 L2266.98 1299.52 L2266.3 1299.52 L2265.63 1299.52 L2264.95 1299.52 L2264.27 1299.52 L2263.6 1299.52 L2262.92 1299.52 L2262.25 1299.52 L2261.57 1299.52 L2260.9 1299.52 L2260.22 1299.52 L2259.55 1299.52 L2258.87 1299.52 L2258.19 1299.52 L2257.52 1299.52 L2256.84 1299.52 L2256.17 1299.52 L2255.49 1299.52 L2254.82 1299.52 L2254.14 1299.52 L2253.47 1299.52 L2252.79 1299.52 L2252.11 1299.52 L2251.44 1299.52 L2250.76 1299.52 L2250.09 1299.52 L2249.41 1299.52 L2248.74 1299.52 L2248.06 1299.52 L2247.39 1299.52 L2246.71 1299.52 L2246.03 1299.52 L2245.36 1299.52 L2244.68 1299.52 L2244.01 1299.52 L2243.33 1299.52 L2242.66 1299.52 L2241.98 1299.52 L2241.31 1299.52 L2240.63 1299.52 L2239.95 1299.52 L2239.28 1299.52 L2238.6 1299.52 L2237.93 1299.52 L2237.25 1299.52 L2236.58 1299.52 L2235.9 1299.52 L2235.22 1299.52 L2234.55 1299.52 L2233.87 1299.52 L2233.2 1299.52 L2232.52 1299.52 L2231.85 1299.52 L2231.17 1299.52 L2230.5 1299.52 L2229.82 1299.52 L2229.14 1299.52 L2228.47 1299.52 L2227.79 1299.52 L2227.12 1299.52 L2226.44 1299.52 L2225.77 1299.52 L2225.09 1299.52 L2224.42 1299.52 L2223.74 1299.52 L2223.06 1299.52 L2222.39 1299.52 L2221.71 1299.52 L2221.04 1299.52 L2220.36 1299.52 L2219.69 1299.52 L2219.01 1299.52 L2218.34 1299.52 L2217.66 1299.52 L2216.98 1299.52 L2216.31 1299.52 L2215.63 1299.52 L2214.96 1299.52 L2214.28 1299.52 L2213.61 1299.52 L2212.93 1299.52 L2212.26 1299.52 L2211.58 1299.52 L2210.9 1299.52 L2210.23 1299.52 L2209.55 1299.52 L2208.88 1299.52 L2208.2 1299.52 L2207.53 1299.52 L2206.85 1299.52 L2206.17 1299.52 L2205.5 1299.52 L2204.82 1299.52 L2204.15 1299.52 L2203.47 1299.52 L2202.8 1299.52 L2202.12 1299.52 L2201.45 1299.52 L2200.77 1299.52 L2200.09 1299.52 L2199.42 1299.52 L2198.74 1299.52 L2198.07 1299.52 L2197.39 1299.52 L2196.72 1299.52 L2196.04 1299.52 L2195.37 1299.52 L2194.69 1299.52 L2194.01 1299.52 L2193.34 1299.52 L2192.66 1299.52 L2191.99 1299.52 L2191.31 1299.52 L2190.64 1299.52 L2189.96 1299.52 L2189.29 1299.52 L2188.61 1299.52 L2187.93 1299.52 L2187.26 1299.52 L2186.58 1299.52 L2185.91 1299.52 L2185.23 1299.52 L2184.56 1299.52 L2183.88 1299.52 L2183.21 1299.52 L2182.53 1299.52 L2181.85 1299.52 L2181.18 1299.52 L2180.5 1299.52 L2179.83 1299.52 L2179.15 1299.52 L2178.48 1299.52 L2177.8 1299.52 L2177.12 1299.52 L2176.45 1299.52 L2175.77 1299.52 L2175.1 1299.52 L2174.42 1299.52 L2173.75 1299.52 L2173.07 1299.52 L2172.4 1299.52 L2171.72 1299.52 L2171.04 1299.52 L2170.37 1299.52 L2169.69 1299.52 L2169.02 1299.52 L2168.34 1299.52 L2167.67 1299.52 L2166.99 1299.52 L2166.32 1299.52 L2165.64 1299.52 L2164.96 1299.52 L2164.29 1299.52 L2163.61 1299.52 L2162.94 1299.52 L2162.26 1299.52 L2161.59 1299.52 L2160.91 1299.52 L2160.24 1299.52 L2159.56 1299.52 L2158.88 1299.52 L2158.21 1299.52 L2157.53 1299.52 L2156.86 1299.52 L2156.18 1299.52 L2155.51 1299.52 L2154.83 1299.52 L2154.16 1299.52 L2153.48 1299.52 L2152.8 1299.52 L2152.13 1299.52 L2151.45 1299.52 L2150.78 1299.52 L2150.1 1299.52 L2149.43 1299.52 L2148.75 1299.52 L2148.07 1299.52 L2147.4 1299.52 L2146.72 1299.52 L2146.05 1299.52 L2145.37 1299.52 L2144.7 1299.52 L2144.02 1299.52 L2143.35 1299.52 L2142.67 1299.52 L2141.99 1299.52 L2141.32 1299.52 L2140.64 1299.52 L2139.97 1299.52 L2139.29 1299.52 L2138.62 1299.52 L2137.94 1299.52 L2137.27 1299.52 L2136.59 1299.52 L2135.91 1299.52 L2135.24 1299.52 L2134.56 1299.52 L2133.89 1299.52 L2133.21 1299.52 L2132.54 1299.52 L2131.86 1299.52 L2131.19 1299.52 L2130.51 1299.52 L2129.83 1299.52 L2129.16 1299.52 L2128.48 1299.52 L2127.81 1299.52 L2127.13 1299.52 L2126.46 1299.52 L2125.78 1299.52 L2125.11 1299.52 L2124.43 1299.52 L2123.75 1299.52 L2123.08 1299.52 L2122.4 1299.52 L2121.73 1299.52 L2121.05 1299.52 L2120.38 1299.52 L2119.7 1299.52 L2119.02 1299.52 L2118.35 1299.52 L2117.67 1299.52 L2117 1299.52 L2116.32 1299.52 L2115.65 1299.52 L2114.97 1299.52 L2114.3 1299.52 L2113.62 1299.52 L2112.94 1299.52 L2112.27 1299.52 L2111.59 1299.52 L2110.92 1299.52 L2110.24 1299.52 L2109.57 1299.52 L2108.89 1299.52 L2108.22 1299.52 L2107.54 1299.52 L2106.86 1299.52 L2106.19 1299.52 L2105.51 1299.52 L2104.84 1299.52 L2104.16 1299.52 L2103.49 1299.52 L2102.81 1299.52 L2102.14 1299.52 L2101.46 1299.52 L2100.78 1299.52 L2100.11 1299.52 L2099.43 1299.52 L2098.76 1299.52 L2098.08 1299.52 L2097.41 1299.52 L2096.73 1299.52 L2096.05 1299.52 L2095.38 1299.52 L2094.7 1299.52 L2094.03 1299.52 L2093.35 1299.52 L2092.68 1299.52 L2092 1299.52 L2091.33 1299.52 L2090.65 1299.52 L2089.97 1299.52 L2089.3 1299.52 L2088.62 1299.52 L2087.95 1299.52 L2087.27 1299.52 L2086.6 1299.52 L2085.92 1299.52 L2085.25 1299.52 L2084.57 1299.52 L2083.89 1299.52 L2083.22 1299.52 L2082.54 1299.52 L2081.87 1299.52 L2081.19 1299.52 L2080.52 1299.52 L2079.84 1299.52 L2079.17 1299.52 L2078.49 1299.52 L2077.81 1299.52 L2077.14 1299.52 L2076.46 1299.52 L2075.79 1299.52 L2075.11 1299.52 L2074.44 1299.52 L2073.76 1299.52 L2073.09 1299.52 L2072.41 1299.52 L2071.73 1299.52 L2071.06 1299.52 L2070.38 1299.52 L2069.71 1299.52 L2069.03 1299.52 L2068.36 1299.52 L2067.68 1299.52 L2067 1299.52 L2066.33 1299.52 L2065.65 1299.52 L2064.98 1299.52 L2064.3 1299.52 L2063.63 1299.52 L2062.95 1299.52 L2062.28 1299.52 L2061.6 1299.52 L2060.92 1299.52 L2060.25 1299.52 L2059.57 1299.52 L2058.9 1299.52 L2058.22 1299.52 L2057.55 1299.52 L2056.87 1299.52 L2056.2 1299.52 L2055.52 1299.52 L2054.84 1299.52 L2054.17 1299.52 L2053.49 1299.52 L2052.82 1299.52 L2052.14 1299.52 L2051.47 1299.52 L2050.79 1299.52 L2050.12 1299.52 L2049.44 1299.52 L2048.76 1299.52 L2048.09 1299.52 L2047.41 1299.52 L2046.74 1299.52 L2046.06 1299.52 L2045.39 1299.52 L2044.71 1299.52 L2044.04 1299.52 L2043.36 1299.52 L2042.68 1299.52 L2042.01 1299.52 L2041.33 1299.52 L2040.66 1299.52 L2039.98 1299.52 L2039.31 1299.52 L2038.63 1299.52 L2037.95 1299.52 L2037.28 1299.52 L2036.6 1299.52 L2035.93 1299.52 L2035.25 1299.52 L2034.58 1299.52 L2033.9 1299.52 L2033.23 1299.52 L2032.55 1299.52 L2031.87 1299.52 L2031.2 1299.52 L2030.52 1299.52 L2029.85 1299.52 L2029.17 1299.52 L2028.5 1299.52 L2027.82 1299.52 L2027.15 1299.52 L2026.47 1299.52 L2025.79 1299.52 L2025.12 1299.52 L2024.44 1299.52 L2023.77 1299.52 L2023.09 1299.52 L2022.42 1299.52 L2021.74 1299.52 L2021.07 1299.52 L2020.39 1299.52 L2019.71 1299.52 L2019.04 1299.52 L2018.36 1299.52 L2017.69 1299.52 L2017.01 1299.52 L2016.34 1299.52 L2015.66 1299.52 L2014.99 1299.52 L2014.31 1299.52 L2013.63 1299.52 L2012.96 1299.52 L2012.28 1299.52 L2011.61 1299.52 L2010.93 1299.52 L2010.26 1299.52 L2009.58 1299.52 L2008.9 1299.52 L2008.23 1299.52 L2007.55 1299.52 L2006.88 1299.52 L2006.2 1299.52 L2005.53 1299.52 L2004.85 1299.52 L2004.18 1299.52 L2003.5 1299.52 L2002.82 1299.52 L2002.15 1299.52 L2001.47 1299.52 L2000.8 1299.52 L2000.12 1299.52 L1999.45 1299.52 L1998.77 1299.52 L1998.1 1299.52 L1997.42 1299.52 L1996.74 1299.52 L1996.07 1299.52 L1995.39 1299.52 L1994.72 1299.52 L1994.04 1299.52 L1993.37 1299.52 L1992.69 1299.52 L1992.02 1299.52 L1991.34 1299.52 L1990.66 1299.52 L1989.99 1299.52 L1989.31 1299.52 L1988.64 1299.52 L1987.96 1299.52 L1987.29 1299.52 L1986.61 1299.52 L1985.94 1299.52 L1985.26 1299.52 L1984.58 1299.52 L1983.91 1299.52 L1983.23 1299.52 L1982.56 1299.52 L1981.88 1299.52 L1981.21 1299.52 L1980.53 1299.52 L1979.85 1299.52 L1979.18 1299.52 L1978.5 1299.52 L1977.83 1299.52 L1977.15 1299.52 L1976.48 1299.52 L1975.8 1299.52 L1975.13 1299.52 L1974.45 1299.52 L1973.77 1299.52 L1973.1 1299.52 L1972.42 1299.52 L1971.75 1299.52 L1971.07 1299.52 L1970.4 1299.52 L1969.72 1299.52 L1969.05 1299.52 L1968.37 1299.52 L1967.69 1299.52 L1967.02 1299.52 L1966.34 1299.52 L1965.67 1299.52 L1964.99 1299.52 L1964.32 1299.52 L1963.64 1299.52 L1962.97 1299.52 L1962.29 1299.52 L1961.61 1299.52 L1960.94 1299.52 L1960.26 1299.52 L1959.59 1299.52 L1958.91 1299.52 L1958.24 1299.52 L1957.56 1299.52 L1956.89 1299.52 L1956.21 1299.52 L1955.53 1299.52 L1954.86 1299.52 L1954.18 1299.52 L1953.51 1299.52 L1952.83 1299.52 L1952.16 1299.52 L1951.48 1299.52 L1950.8 1299.52 L1950.13 1299.52 L1949.45 1299.52 L1948.78 1299.52 L1948.1 1299.52 L1947.43 1299.52 L1946.75 1299.52 L1946.08 1299.52 L1945.4 1299.52 L1944.72 1299.52 L1944.05 1299.52 L1943.37 1299.52 L1942.7 1299.52 L1942.02 1299.52 L1941.35 1299.52 L1940.67 1299.52 L1940 1299.52 L1939.32 1299.52 L1938.64 1299.52 L1937.97 1299.52 L1937.29 1299.52 L1936.62 1299.52 L1935.94 1299.52 L1935.27 1299.52 L1934.59 1299.52 L1933.92 1299.52 L1933.24 1299.52 L1932.56 1299.52 L1931.89 1299.52 L1931.21 1299.52 L1930.54 1299.52 L1929.86 1299.52 L1929.19 1299.52 L1928.51 1299.52 L1927.84 1299.52 L1927.16 1299.52 L1926.48 1299.52 L1925.81 1299.52 L1925.13 1299.52 L1924.46 1299.52 L1923.78 1299.52 L1923.11 1299.52 L1922.43 1299.52 L1921.75 1299.52 L1921.08 1299.52 L1920.4 1299.52 L1919.73 1299.52 L1919.05 1299.52 L1918.38 1299.52 L1917.7 1299.52 L1917.03 1299.52 L1916.35 1299.52 L1915.67 1299.52 L1915 1299.52 L1914.32 1299.52 L1913.65 1299.52 L1912.97 1299.52 L1912.3 1299.52 L1911.62 1299.52 L1910.95 1299.52 L1910.27 1299.52 L1909.59 1299.52 L1908.92 1299.52 L1908.24 1299.52 L1907.57 1299.52 L1906.89 1299.52 L1906.22 1299.52 L1905.54 1299.52 L1904.87 1299.52 L1904.19 1299.52 L1903.51 1299.52 L1902.84 1299.52 L1902.16 1299.52 L1901.49 1299.52 L1900.81 1299.52 L1900.14 1299.52 L1899.46 1299.52 L1898.79 1299.52 L1898.11 1299.52 L1897.43 1299.52 L1896.76 1299.52 L1896.08 1299.52 L1895.41 1299.52 L1894.73 1299.52 L1894.06 1299.52 L1893.38 1299.52 L1892.7 1299.52 L1892.03 1299.52 L1891.35 1299.52 L1890.68 1299.52 L1890 1299.52 L1889.33 1299.52 L1888.65 1299.52 L1887.98 1299.52 L1887.3 1299.52 L1886.62 1299.52 L1885.95 1299.52 L1885.27 1299.52 L1884.6 1299.52 L1883.92 1299.52 L1883.25 1299.52 L1882.57 1299.52 L1881.9 1299.52 L1881.22 1299.52 L1880.54 1299.52 L1879.87 1299.52 L1879.19 1299.52 L1878.52 1299.52 L1877.84 1299.52 L1877.17 1299.52 L1876.49 1299.52 L1875.82 1299.52 L1875.14 1299.52 L1874.46 1299.52 L1873.79 1299.52 L1873.11 1299.52 L1872.44 1299.52 L1871.76 1299.52 L1871.09 1299.52 L1870.41 1299.52 L1869.73 1299.52 L1869.06 1299.52 L1868.38 1299.52 L1867.71 1299.52 L1867.03 1299.52 L1866.36 1299.52 L1865.68 1299.52 L1865.01 1299.52 L1864.33 1299.52 L1863.65 1299.52 L1862.98 1299.52 L1862.3 1299.52 L1861.63 1299.52 L1860.95 1299.52 L1860.28 1299.52 L1859.6 1299.52 L1858.93 1299.52 L1858.25 1299.52 L1857.57 1299.52 L1856.9 1299.52 L1856.22 1299.52 L1855.55 1299.52 L1854.87 1299.52 L1854.2 1299.52 L1853.52 1299.52 L1852.85 1299.52 L1852.17 1299.52 L1851.49 1299.52 L1850.82 1299.52 L1850.14 1299.52 L1849.47 1299.52 L1848.79 1299.52 L1848.12 1299.52 L1847.44 1299.52 L1846.77 1299.52 L1846.09 1299.52 L1845.41 1299.52 L1844.74 1299.52 L1844.06 1299.52 L1843.39 1299.52 L1842.71 1299.52 L1842.04 1299.52 L1841.36 1299.52 L1840.68 1299.52 L1840.01 1299.52 L1839.33 1299.52 L1838.66 1299.52 L1837.98 1299.52 L1837.31 1299.52 L1836.63 1299.52 L1835.96 1299.52 L1835.28 1299.52 L1834.6 1299.52 L1833.93 1299.52 L1833.25 1299.52 L1832.58 1299.52 L1831.9 1299.52 L1831.23 1299.52 L1830.55 1299.52 L1829.88 1299.52 L1829.2 1299.52 L1828.52 1299.52 L1827.85 1299.52 L1827.17 1299.52 L1826.5 1299.52 L1825.82 1299.52 L1825.15 1299.52 L1824.47 1299.52 L1823.8 1299.52 L1823.12 1299.52 L1822.44 1299.52 L1821.77 1299.52 L1821.09 1299.52 L1820.42 1299.52 L1819.74 1299.52 L1819.07 1299.52 L1818.39 1299.52 L1817.72 1299.52 L1817.04 1299.52 L1816.36 1299.52 L1815.69 1299.52 L1815.01 1299.52 L1814.34 1299.52 L1813.66 1299.52 L1812.99 1299.52 L1812.31 1299.52 L1811.63 1299.52 L1810.96 1299.52 L1810.28 1299.52 L1809.61 1299.52 L1808.93 1299.52 L1808.26 1299.52 L1807.58 1299.52 L1806.91 1299.52 L1806.23 1299.52 L1805.55 1299.52 L1804.88 1299.52 L1804.2 1299.52 L1803.53 1299.52 L1802.85 1299.52 L1802.18 1299.52 L1801.5 1299.52 L1800.83 1299.52 L1800.15 1299.52 L1799.47 1299.52 L1798.8 1299.52 L1798.12 1299.52 L1797.45 1299.52 L1796.77 1299.52 L1796.1 1299.52 L1795.42 1299.52 L1794.75 1299.52 L1794.07 1299.52 L1793.39 1299.52 L1792.72 1299.52 L1792.04 1299.52 L1791.37 1299.52 L1790.69 1299.52 L1790.02 1299.52 L1789.34 1299.52 L1788.67 1299.52 L1787.99 1299.52 L1787.31 1299.52 L1786.64 1299.52 L1785.96 1299.52 L1785.29 1299.52 L1784.61 1299.52 L1783.94 1299.52 L1783.26 1299.52 L1782.58 1299.52 L1781.91 1299.52 L1781.23 1299.52 L1780.56 1299.52 L1779.88 1299.52 L1779.21 1299.52 L1778.53 1299.52 L1777.86 1299.52 L1777.18 1299.52 L1776.5 1299.52 L1775.83 1299.52 L1775.15 1299.52 L1774.48 1299.52 L1773.8 1299.52 L1773.13 1299.52 L1772.45 1299.52 L1771.78 1299.52 L1771.1 1299.52 L1770.42 1299.52 L1769.75 1299.52 L1769.07 1299.52 L1768.4 1299.52 L1767.72 1299.52 L1767.05 1299.52 L1766.37 1299.52 L1765.7 1299.52 L1765.02 1299.52 L1764.34 1299.52 L1763.67 1299.52 L1762.99 1299.52 L1762.32 1299.52 L1761.64 1299.52 L1760.97 1299.52 L1760.29 1299.52 L1759.62 1299.52 L1758.94 1299.52 L1758.26 1299.52 L1757.59 1299.52 L1756.91 1299.52 L1756.24 1299.52 L1755.56 1299.52 L1754.89 1299.52 L1754.21 1299.52 L1753.53 1299.52 L1752.86 1299.52 L1752.18 1299.52 L1751.51 1299.52 L1750.83 1299.52 L1750.16 1299.52 L1749.48 1299.52 L1748.81 1299.52 L1748.13 1299.52 L1747.45 1299.52 L1746.78 1299.52 L1746.1 1299.52 L1745.43 1299.52 L1744.75 1299.52 L1744.08 1299.52 L1743.4 1299.52 L1742.73 1299.52 L1742.05 1299.52 L1741.37 1299.52 L1740.7 1299.52 L1740.02 1299.52 L1739.35 1299.52 L1738.67 1299.52 L1738 1299.52 L1737.32 1299.52 L1736.65 1299.52 L1735.97 1299.52 L1735.29 1299.52 L1734.62 1299.52 L1733.94 1299.52 L1733.27 1299.52 L1732.59 1299.52 L1731.92 1299.52 L1731.24 1299.52 L1730.57 1299.52 L1729.89 1299.52 L1729.21 1299.52 L1728.54 1299.52 L1727.86 1299.52 L1727.19 1299.52 L1726.51 1299.52 L1725.84 1299.52 L1725.16 1299.52 L1724.48 1299.52 L1723.81 1299.52 L1723.13 1299.52 L1722.46 1299.52 L1721.78 1299.52 L1721.11 1299.52 L1720.43 1299.52 L1719.76 1299.52 L1719.08 1299.52 L1718.4 1299.52 L1717.73 1299.52 L1717.05 1299.52 L1716.38 1299.52 L1715.7 1299.52 L1715.03 1299.52 L1714.35 1299.52 L1713.68 1299.52 L1713 1299.52 L1712.32 1299.52 L1711.65 1299.52 L1710.97 1299.52 L1710.3 1299.52 L1709.62 1299.52 L1708.95 1299.52 L1708.27 1299.52 L1707.6 1299.52 L1706.92 1299.52 L1706.24 1299.52 L1705.57 1299.52 L1704.89 1299.52 L1704.22 1299.52 L1703.54 1299.52 L1702.87 1299.52 L1702.19 1299.52 L1701.52 1299.52 L1700.84 1299.52 L1700.16 1299.52 L1699.49 1299.52 L1698.81 1299.52 L1698.14 1299.52 L1697.46 1299.52 L1696.79 1299.52 L1696.11 1299.52 L1695.43 1299.52 L1694.76 1299.52 L1694.08 1299.52 L1693.41 1299.52 L1692.73 1299.52 L1692.06 1299.52 L1691.38 1299.52 L1690.71 1299.52 L1690.03 1299.52 L1689.35 1299.52 L1688.68 1299.52 L1688 1299.52 L1687.33 1299.52 L1686.65 1299.52 L1685.98 1299.52 L1685.3 1299.52 L1684.63 1299.52 L1683.95 1299.52 L1683.27 1299.52 L1682.6 1299.52 L1681.92 1299.52 L1681.25 1299.52 L1680.57 1299.52 L1679.9 1299.52 L1679.22 1299.52 L1678.55 1299.52 L1677.87 1299.52 L1677.19 1299.52 L1676.52 1299.52 L1675.84 1299.52 L1675.17 1299.52 L1674.49 1299.52 L1673.82 1299.52 L1673.14 1299.52 L1672.47 1299.52 L1671.79 1299.52 L1671.11 1299.52 L1670.44 1299.52 L1669.76 1299.52 L1669.09 1299.52 L1668.41 1299.52 L1667.74 1299.52 L1667.06 1299.52 L1666.38 1299.52 L1665.71 1299.52 L1665.03 1299.52 L1664.36 1299.52 L1663.68 1299.52 L1663.01 1299.52 L1662.33 1299.52 L1661.66 1299.52 L1660.98 1299.52 L1660.3 1299.52 L1659.63 1299.52 L1658.95 1299.52 L1658.28 1299.52 L1657.6 1299.52 L1656.93 1299.52 L1656.25 1299.52 L1655.58 1299.52 L1654.9 1299.52 L1654.22 1299.52 L1653.55 1299.52 L1652.87 1299.52 L1652.2 1299.52 L1651.52 1299.52 L1650.85 1299.52 L1650.17 1299.52 L1649.5 1299.52 L1648.82 1299.52 L1648.14 1299.52 L1647.47 1299.52 L1646.79 1299.52 L1646.12 1299.52 L1645.44 1299.52 L1644.77 1299.52 L1644.09 1299.52 L1643.41 1299.52 L1642.74 1299.52 L1642.06 1299.52 L1641.39 1299.52 L1640.71 1299.52 L1640.04 1299.52 L1639.36 1299.52 L1638.69 1299.52 L1638.01 1299.52 L1637.33 1299.52 L1636.66 1299.52 L1635.98 1299.52 L1635.31 1299.52 L1634.63 1299.52 L1633.96 1299.52 L1633.28 1299.52 L1632.61 1299.52 L1631.93 1299.52 L1631.25 1299.52 L1630.58 1299.52 L1629.9 1299.52 L1629.23 1299.52 L1628.55 1299.52 L1627.88 1299.52 L1627.2 1299.52 L1626.53 1299.52 L1625.85 1299.52 L1625.17 1299.52 L1624.5 1299.52 L1623.82 1299.52 L1623.15 1299.52 L1622.47 1299.52 L1621.8 1299.52 L1621.12 1299.52 L1620.45 1299.52 L1619.77 1299.52 L1619.09 1299.52 L1618.42 1299.52 L1617.74 1299.52 L1617.07 1299.52 L1616.39 1299.52 L1615.72 1299.52 L1615.04 1299.52 L1614.36 1299.52 L1613.69 1299.52 L1613.01 1299.52 L1612.34 1299.52 L1611.66 1299.52 L1610.99 1299.52 L1610.31 1299.52 L1609.64 1299.52 L1608.96 1299.52 L1608.28 1299.52 L1607.61 1299.52 L1606.93 1299.52 L1606.26 1299.52 L1605.58 1299.52 L1604.91 1299.52 L1604.23 1299.52 L1603.56 1299.52 L1602.88 1299.52 L1602.2 1299.52 L1601.53 1299.52 L1600.85 1299.52 L1600.18 1299.52 L1599.5 1299.52 L1598.83 1299.52 L1598.15 1299.52 L1597.48 1299.52 L1596.8 1299.52 L1596.12 1299.52 L1595.45 1299.52 L1594.77 1299.52 L1594.1 1299.52 L1593.42 1299.52 L1592.75 1299.52 L1592.07 1299.52 L1591.4 1299.52 L1590.72 1299.52 L1590.04 1299.52 L1589.37 1299.52 L1588.69 1299.52 L1588.02 1299.52 L1587.34 1299.52 L1586.67 1299.52 L1585.99 1299.52 L1585.31 1299.52 L1584.64 1299.52 L1583.96 1299.52 L1583.29 1299.52 L1582.61 1299.52 L1581.94 1299.52 L1581.26 1299.52 L1580.59 1299.52 L1579.91 1299.52 L1579.23 1299.52 L1578.56 1299.52 L1577.88 1299.52 L1577.21 1299.52 L1576.53 1299.52 L1575.86 1299.52 L1575.18 1299.52 L1574.51 1299.52 L1573.83 1299.52 L1573.15 1299.52 L1572.48 1299.52 L1571.8 1299.52 L1571.13 1299.52 L1570.45 1299.52 L1569.78 1299.52 L1569.1 1299.52 L1568.43 1299.52 L1567.75 1299.52 L1567.07 1299.52 L1566.4 1299.52 L1565.72 1299.52 L1565.05 1299.52 L1564.37 1299.52 L1563.7 1299.52 L1563.02 1299.52 L1562.35 1299.52 L1561.67 1299.52 L1560.99 1299.52 L1560.32 1299.52 L1559.64 1299.52 L1558.97 1299.52 L1558.29 1299.52 L1557.62 1299.52 L1556.94 1299.52 L1556.26 1299.52 L1555.59 1299.52 L1554.91 1299.52 L1554.24 1299.52 L1553.56 1299.52 L1552.89 1299.52 L1552.21 1299.52 L1551.54 1299.52 L1550.86 1299.52 L1550.18 1299.52 L1549.51 1299.52 L1548.83 1299.52 L1548.16 1299.52 L1547.48 1299.52 L1546.81 1299.52 L1546.13 1299.52 L1545.46 1299.52 L1544.78 1299.52 L1544.1 1299.52 L1543.43 1299.52 L1542.75 1299.52 L1542.08 1299.52 L1541.4 1299.52 L1540.73 1299.52 L1540.05 1299.52 L1539.38 1299.52 L1538.7 1299.52 L1538.02 1299.52 L1537.35 1299.52 L1536.67 1299.52 L1536 1299.52 L1535.32 1299.52 L1534.65 1299.52 L1533.97 1299.52 L1533.3 1299.52 L1532.62 1299.52 L1531.94 1299.52 L1531.27 1299.52 L1530.59 1299.52 L1529.92 1299.52 L1529.24 1299.52 L1528.57 1299.52 L1527.89 1299.52 L1527.21 1299.52 L1526.54 1299.52 L1525.86 1299.52 L1525.19 1299.52 L1524.51 1299.52 L1523.84 1299.52 L1523.16 1299.52 L1522.49 1299.52 L1521.81 1299.52 L1521.13 1299.52 L1520.46 1299.52 L1519.78 1299.52 L1519.11 1299.52 L1518.43 1299.52 L1517.76 1299.52 L1517.08 1299.52 L1516.41 1299.52 L1515.73 1299.52 L1515.05 1299.52 L1514.38 1299.52 L1513.7 1299.52 L1513.03 1299.52 L1512.35 1299.52 L1511.68 1299.52 L1511 1299.52 L1510.33 1299.52 L1509.65 1299.52 L1508.97 1299.52 L1508.3 1299.52 L1507.62 1299.52 L1506.95 1299.52 L1506.27 1299.52 L1505.6 1299.52 L1504.92 1299.52 L1504.25 1299.52 L1503.57 1299.52 L1502.89 1299.52 L1502.22 1299.52 L1501.54 1299.52 L1500.87 1299.52 L1500.19 1299.52 L1499.52 1299.52 L1498.84 1299.52 L1498.16 1299.52 L1497.49 1299.52 L1496.81 1299.52 L1496.14 1299.52 L1495.46 1299.52 L1494.79 1299.52 L1494.11 1299.52 L1493.44 1299.52 L1492.76 1299.52 L1492.08 1299.52 L1491.41 1299.52 L1490.73 1299.52 L1490.06 1299.52 L1489.38 1299.52 L1488.71 1299.52 L1488.03 1299.52 L1487.36 1299.52 L1486.68 1299.52 L1486 1299.52 L1485.33 1299.52 L1484.65 1299.52 L1483.98 1299.52 L1483.3 1299.52 L1482.63 1299.52 L1481.95 1299.52 L1481.28 1299.52 L1480.6 1299.52 L1479.92 1299.52 L1479.25 1299.52 L1478.57 1299.52 L1477.9 1299.52 L1477.22 1299.52 L1476.55 1299.52 L1475.87 1299.52 L1475.2 1299.52 L1474.52 1299.52 L1473.84 1299.52 L1473.17 1299.52 L1472.49 1299.52 L1471.82 1299.52 L1471.14 1299.52 L1470.47 1299.52 L1469.79 1299.52 L1469.11 1299.52 L1468.44 1299.52 L1467.76 1299.52 L1467.09 1299.52 L1466.41 1299.52 L1465.74 1299.52 L1465.06 1299.52 L1464.39 1299.52 L1463.71 1299.52 L1463.03 1299.52 L1462.36 1299.52 L1461.68 1299.52 L1461.01 1299.52 L1460.33 1299.52 L1459.66 1299.52 L1458.98 1299.52 L1458.31 1299.52 L1457.63 1299.52 L1456.95 1299.52 L1456.28 1299.52 L1455.6 1299.52 L1454.93 1299.52 L1454.25 1299.52 L1453.58 1299.52 L1452.9 1299.52 L1452.23 1299.52 L1451.55 1299.52 L1450.87 1299.52 L1450.2 1299.52 L1449.52 1299.52 L1448.85 1299.52 L1448.17 1299.52 L1447.5 1299.52 L1446.82 1299.52 L1446.15 1299.52 L1445.47 1299.52 L1444.79 1299.52 L1444.12 1299.52 L1443.44 1299.52 L1442.77 1299.52 L1442.09 1299.52 L1441.42 1299.52 L1440.74 1299.52 L1440.06 1299.52 L1439.39 1299.52 L1438.71 1299.52 L1438.04 1299.52 L1437.36 1299.52 L1436.69 1299.52 L1436.01 1299.52 L1435.34 1299.52 L1434.66 1299.52 L1433.98 1299.52 L1433.31 1299.52 L1432.63 1299.52 L1431.96 1299.52 L1431.28 1299.52 L1430.61 1299.52 L1429.93 1299.52 L1429.26 1299.52 L1428.58 1299.52 L1427.9 1299.52 L1427.23 1299.52 L1426.55 1299.52 L1425.88 1299.52 L1425.2 1299.52 L1424.53 1299.52 L1423.85 1299.52 L1423.18 1299.52 L1422.5 1299.52 L1421.82 1299.52 L1421.15 1299.52 L1420.47 1299.52 L1419.8 1299.52 L1419.12 1299.52 L1418.45 1299.52 L1417.77 1299.52 L1417.09 1299.52 L1416.42 1299.52 L1415.74 1299.52 L1415.07 1299.52 L1414.39 1299.52 L1413.72 1299.52 L1413.04 1299.52 L1412.37 1299.52 L1411.69 1299.52 L1411.01 1299.52 L1410.34 1299.52 L1409.66 1299.52 L1408.99 1299.52 L1408.31 1299.52 L1407.64 1299.52 L1406.96 1299.52 L1406.29 1299.52 L1405.61 1299.52 L1404.93 1299.52 L1404.26 1299.52 L1403.58 1299.52 L1402.91 1299.52 L1402.23 1299.52 L1401.56 1299.52 L1400.88 1299.52 L1400.21 1299.52 L1399.53 1299.52 L1398.85 1299.52 L1398.18 1299.52 L1397.5 1299.52 L1396.83 1299.52 L1396.15 1299.52 L1395.48 1299.52 L1394.8 1299.52 L1394.13 1299.52 L1393.45 1299.52 L1392.77 1299.52 L1392.1 1299.52 L1391.42 1299.52 L1390.75 1299.52 L1390.07 1299.52 L1389.4 1299.52 L1388.72 1299.52 L1388.04 1299.52 L1387.37 1299.52 L1386.69 1299.52 L1386.02 1299.52 L1385.34 1299.52 L1384.67 1299.52 L1383.99 1299.52 L1383.32 1299.52 L1382.64 1299.52 L1381.96 1299.52 L1381.29 1299.52 L1380.61 1299.52 L1379.94 1299.52 L1379.26 1299.52 L1378.59 1299.52 L1377.91 1299.52 L1377.24 1299.52 L1376.56 1299.52 L1375.88 1299.52 L1375.21 1299.52 L1374.53 1299.52 L1373.86 1299.52 L1373.18 1299.52 L1372.51 1299.52 L1371.83 1299.52 L1371.16 1299.52 L1370.48 1299.52 L1369.8 1299.52 L1369.13 1299.52 L1368.45 1299.52 L1367.78 1299.52 L1367.1 1299.52 L1366.43 1299.52 L1365.75 1299.52 L1365.08 1299.52 L1364.4 1299.52 L1363.72 1299.52 L1363.05 1299.52 L1362.37 1299.52 L1361.7 1299.52 L1361.02 1299.52 L1360.35 1299.52 L1359.67 1299.52 L1358.99 1299.52 L1358.32 1299.52 L1357.64 1299.52 L1356.97 1299.52 L1356.29 1299.52 L1355.62 1299.52 L1354.94 1299.52 L1354.27 1299.52 L1353.59 1299.52 L1352.91 1299.52 L1352.24 1299.52 L1351.56 1299.52 L1350.89 1299.52 L1350.21 1299.52 L1349.54 1299.52 L1348.86 1299.52 L1348.19 1299.52 L1347.51 1299.52 L1346.83 1299.52 L1346.16 1299.52 L1345.48 1299.52 L1344.81 1299.52 L1344.13 1299.52 L1343.46 1299.52 L1342.78 1299.52 L1342.11 1299.52 L1341.43 1299.52 L1340.75 1299.52 L1340.08 1299.52 L1339.4 1299.52 L1338.73 1299.52 L1338.05 1299.52 L1337.38 1299.52 L1336.7 1299.52 L1336.03 1299.52 L1335.35 1299.52 L1334.67 1299.52 L1334 1299.52 L1333.32 1299.52 L1332.65 1299.52 L1331.97 1299.52 L1331.3 1299.52 L1330.62 1299.52 L1329.94 1299.52 L1329.27 1299.52 L1328.59 1299.52 L1327.92 1299.52 L1327.24 1299.52 L1326.57 1299.52 L1325.89 1299.52 L1325.22 1299.52 L1324.54 1299.52 L1323.86 1299.52 L1323.19 1299.52 L1322.51 1299.52 L1321.84 1299.52 L1321.16 1299.52 L1320.49 1299.52 L1319.81 1299.52 L1319.14 1299.52 L1318.46 1299.52 L1317.78 1299.52 L1317.11 1299.52 L1316.43 1299.52 L1315.76 1299.52 L1315.08 1299.52 L1314.41 1299.52 L1313.73 1299.52 L1313.06 1299.52 L1312.38 1299.52 L1311.7 1299.52 L1311.03 1299.52 L1310.35 1299.52 L1309.68 1299.52 L1309 1299.52 L1308.33 1299.52 L1307.65 1299.52 L1306.98 1299.52 L1306.3 1299.52 L1305.62 1299.52 L1304.95 1299.52 L1304.27 1299.52 L1303.6 1299.52 L1302.92 1299.52 L1302.25 1299.52 L1301.57 1299.52 L1300.89 1299.52 L1300.22 1299.52 L1299.54 1299.52 L1298.87 1299.52 L1298.19 1299.52 L1297.52 1299.52 L1296.84 1299.52 L1296.17 1299.52 L1295.49 1299.52 L1294.81 1299.52 L1294.14 1299.52 L1293.46 1299.52 L1292.79 1299.52 L1292.11 1299.52 L1291.44 1299.52 L1290.76 1299.52 L1290.09 1299.52 L1289.41 1299.52 L1288.73 1299.52 L1288.06 1299.52 L1287.38 1299.52 L1286.71 1299.52 L1286.03 1299.52 L1285.36 1299.52 L1284.68 1299.52 L1284.01 1299.52 L1283.33 1299.52 L1282.65 1299.52 L1281.98 1299.52 L1281.3 1299.52 L1280.63 1299.52 L1279.95 1299.52 L1279.28 1299.52 L1278.6 1299.52 L1277.93 1299.52 L1277.25 1299.52 L1276.57 1299.52 L1275.9 1299.52 L1275.22 1299.52 L1274.55 1299.52 L1273.87 1299.52 L1273.2 1299.52 L1272.52 1299.52 L1271.84 1299.52 L1271.17 1299.52 L1270.49 1299.52 L1269.82 1299.52 L1269.14 1299.52 L1268.47 1299.52 L1267.79 1299.52 L1267.12 1299.52 L1266.44 1299.52 L1265.76 1299.52 L1265.09 1299.52 L1264.41 1299.52 L1263.74 1299.52 L1263.06 1299.52 L1262.39 1299.52 L1261.71 1299.52 L1261.04 1299.52 L1260.36 1299.52 L1259.68 1299.52 L1259.01 1299.52 L1258.33 1299.52 L1257.66 1299.52 L1256.98 1299.52 L1256.31 1299.52 L1255.63 1299.52 L1254.96 1299.52 L1254.28 1299.52 L1253.6 1299.52 L1252.93 1299.52 L1252.25 1299.52 L1251.58 1299.52 L1250.9 1299.52 L1250.23 1299.52 L1249.55 1299.52 L1248.88 1299.52 L1248.2 1299.52 L1247.52 1299.52 L1246.85 1299.52 L1246.17 1299.52 L1245.5 1299.52 L1244.82 1299.52 L1244.15 1299.52 L1243.47 1299.52 L1242.79 1299.52 L1242.12 1299.52 L1241.44 1299.52 L1240.77 1299.52 L1240.09 1299.52 L1239.42 1299.52 L1238.74 1299.52 L1238.07 1299.52 L1237.39 1299.52 L1236.71 1299.52 L1236.04 1299.52 L1235.36 1299.52 L1234.69 1299.52 L1234.01 1299.52 L1233.34 1299.52 L1232.66 1299.52 L1231.99 1299.52 L1231.31 1299.52 L1230.63 1299.52 L1229.96 1299.52 L1229.28 1299.52 L1228.61 1299.52 L1227.93 1299.52 L1227.26 1299.52 L1226.58 1299.52 L1225.91 1299.52 L1225.23 1299.52 L1224.55 1299.52 L1223.88 1299.52 L1223.2 1299.52 L1222.53 1299.52 L1221.85 1299.52 L1221.18 1299.52 L1220.5 1299.52 L1219.83 1299.52 L1219.15 1299.52 L1218.47 1299.52 L1217.8 1299.52 L1217.12 1299.52 L1216.45 1299.52 L1215.77 1299.52 L1215.1 1299.52 L1214.42 1299.52 L1213.74 1299.52 L1213.07 1299.52 L1212.39 1299.52 L1211.72 1299.52 L1211.04 1299.52 L1210.37 1299.52 L1209.69 1299.52 L1209.02 1299.52 L1208.34 1299.52 L1207.66 1299.52 L1206.99 1299.52 L1206.31 1299.52 L1205.64 1299.52 L1204.96 1299.52 L1204.29 1299.52 L1203.61 1299.52 L1202.94 1299.52 L1202.26 1299.52 L1201.58 1299.52 L1200.91 1299.52 L1200.23 1299.52 L1199.56 1299.52 L1198.88 1299.52 L1198.21 1299.52 L1197.53 1299.52 L1196.86 1299.52 L1196.18 1299.52 L1195.5 1299.52 L1194.83 1299.52 L1194.15 1299.52 L1193.48 1299.52 L1192.8 1299.52 L1192.13 1299.52 L1191.45 1299.52 L1190.77 1299.52 L1190.1 1299.52 L1189.42 1299.52 L1188.75 1299.52 L1188.07 1299.52 L1187.4 1299.52 L1186.72 1299.52 L1186.05 1299.52 L1185.37 1299.52 L1184.69 1299.52 L1184.02 1299.52 L1183.34 1299.52 L1182.67 1299.52 L1181.99 1299.52 L1181.32 1299.52 L1180.64 1299.52 L1179.97 1299.52 L1179.29 1299.52 L1178.61 1299.52 L1177.94 1299.52 L1177.26 1299.52 L1176.59 1299.52 L1175.91 1299.52 L1175.24 1299.52 L1174.56 1299.52 L1173.89 1299.52 L1173.21 1299.52 L1172.53 1299.52 L1171.86 1299.52 L1171.18 1299.52 L1170.51 1299.52 L1169.83 1299.52 L1169.16 1299.52 L1168.48 1299.52 L1167.81 1299.52 L1167.13 1299.52 L1166.45 1299.52 L1165.78 1299.52 L1165.1 1299.52 L1164.43 1299.52 L1163.75 1299.52 L1163.08 1299.52 L1162.4 1299.52 L1161.72 1299.52 L1161.05 1299.52 L1160.37 1299.52 L1159.7 1299.52 L1159.02 1299.52 L1158.35 1299.52 L1157.67 1299.52 L1157 1299.52 L1156.32 1299.52 L1155.64 1299.52 L1154.97 1299.52 L1154.29 1299.52 L1153.62 1299.52 L1152.94 1299.52 L1152.27 1299.52 L1151.59 1299.52 L1150.92 1299.52 L1150.24 1299.52 L1149.56 1299.52 L1148.89 1299.52 L1148.21 1299.52 L1147.54 1299.52 L1146.86 1299.52 L1146.19 1299.52 L1145.51 1299.52 L1144.84 1299.52 L1144.16 1299.52 L1143.48 1299.52 L1142.81 1299.52 L1142.13 1299.52 L1141.46 1299.52 L1140.78 1299.52 L1140.11 1299.52 L1139.43 1299.52 L1138.76 1299.52 L1138.08 1299.52 L1137.4 1299.52 L1136.73 1299.52 L1136.05 1299.52 L1135.38 1299.52 L1134.7 1299.52 L1134.03 1299.52 L1133.35 1299.52 L1132.67 1299.52 L1132 1299.52 L1131.32 1299.52 L1130.65 1299.52 L1129.97 1299.52 L1129.3 1299.52 L1128.62 1299.52 L1127.95 1299.52 L1127.27 1299.52 L1126.59 1299.52 L1125.92 1299.52 L1125.24 1299.52 L1124.57 1299.52 L1123.89 1299.52 L1123.22 1299.52 L1122.54 1299.52 L1121.87 1299.52 L1121.19 1299.52 L1120.51 1299.52 L1119.84 1299.52 L1119.16 1299.52 L1118.49 1299.52 L1117.81 1299.52 L1117.14 1299.52 L1116.46 1299.52 L1115.79 1299.52 L1115.11 1299.52 L1114.43 1299.52 L1113.76 1299.52 L1113.08 1299.52 L1112.41 1299.52 L1111.73 1299.52 L1111.06 1299.52 L1110.38 1299.52 L1109.71 1299.52 L1109.03 1299.52 L1108.35 1299.52 L1107.68 1299.52 L1107 1299.52 L1106.33 1299.52 L1105.65 1299.52 L1104.98 1299.52 L1104.3 1299.52 L1103.62 1299.52 L1102.95 1299.52 L1102.27 1299.52 L1101.6 1299.52 L1100.92 1299.52 L1100.25 1299.52 L1099.57 1299.52 L1098.9 1299.52 L1098.22 1299.52 L1097.54 1299.52 L1096.87 1299.52 L1096.19 1299.52 L1095.52 1299.52 L1094.84 1299.52 L1094.17 1299.52 L1093.49 1299.52 L1092.82 1299.52 L1092.14 1299.52 L1091.46 1299.52 L1090.79 1299.52 L1090.11 1299.52 L1089.44 1299.52 L1088.76 1299.52 L1088.09 1299.52 L1087.41 1299.52 L1086.74 1299.52 L1086.06 1299.52 L1085.38 1299.52 L1084.71 1299.52 L1084.03 1299.52 L1083.36 1299.52 L1082.68 1299.52 L1082.01 1299.52 L1081.33 1299.52 L1080.66 1299.52 L1079.98 1299.52 L1079.3 1299.52 L1078.63 1299.52 L1077.95 1299.52 L1077.28 1299.52 L1076.6 1299.52 L1075.93 1299.52 L1075.25 1299.52 L1074.57 1299.52 L1073.9 1299.52 L1073.22 1299.52 L1072.55 1299.52 L1071.87 1299.52 L1071.2 1299.52 L1070.52 1299.52 L1069.85 1299.52 L1069.17 1299.52 L1068.49 1299.52 L1067.82 1299.52 L1067.14 1299.52 L1066.47 1299.52 L1065.79 1299.52 L1065.12 1299.52 L1064.44 1299.52 L1063.77 1299.52 L1063.09 1299.52 L1062.41 1299.52 L1061.74 1299.52 L1061.06 1299.52 L1060.39 1299.52 L1059.71 1299.52 L1059.04 1299.52 L1058.36 1299.52 L1057.69 1299.52 L1057.01 1299.52 L1056.33 1299.52 L1055.66 1299.52 L1054.98 1299.52 L1054.31 1299.52 L1053.63 1299.52 L1052.96 1299.52 L1052.28 1299.52 L1051.61 1299.52 L1050.93 1299.52 L1050.25 1299.52 L1049.58 1299.52 L1048.9 1299.52 L1048.23 1299.52 L1047.55 1299.52 L1046.88 1299.52 L1046.2 1299.52 L1045.52 1299.52 L1044.85 1299.52 L1044.17 1299.52 L1043.5 1299.52 L1042.82 1299.52 L1042.15 1299.52 L1041.47 1299.52 L1040.8 1299.52 L1040.12 1299.52 L1039.44 1299.52 L1038.77 1299.52 L1038.09 1299.52 L1037.42 1299.52 L1036.74 1299.52 L1036.07 1299.52 L1035.39 1299.52 L1034.72 1299.52 L1034.04 1299.52 L1033.36 1299.52 L1032.69 1299.52 L1032.01 1299.52 L1031.34 1299.52 L1030.66 1299.52 L1029.99 1299.52 L1029.31 1299.52 L1028.64 1299.52 L1027.96 1299.52 L1027.28 1299.52 L1026.61 1299.52 L1025.93 1299.52 L1025.26 1299.52 L1024.58 1299.52 L1023.91 1299.52 L1023.23 1299.52 L1022.56 1299.52 L1021.88 1299.52 L1021.2 1299.52 L1020.53 1299.52 L1019.85 1299.52 L1019.18 1299.52 L1018.5 1299.52 L1017.83 1299.52 L1017.15 1299.52 L1016.47 1299.52 L1015.8 1299.52 L1015.12 1299.52 L1014.45 1299.52 L1013.77 1299.52 L1013.1 1299.52 L1012.42 1299.52 L1011.75 1299.52 L1011.07 1299.52 L1010.39 1299.52 L1009.72 1299.52 L1009.04 1299.52 L1008.37 1299.52 L1007.69 1299.52 L1007.02 1299.52 L1006.34 1299.52 L1005.67 1299.52 L1004.99 1299.52 L1004.31 1299.52 L1003.64 1299.52 L1002.96 1299.52 L1002.29 1299.52 L1001.61 1299.52 L1000.94 1299.52 L1000.26 1299.52 L999.585 1299.52 L998.91 1299.52 L998.234 1299.52 L997.558 1299.52 L996.883 1299.52 L996.207 1299.52 L995.532 1299.52 L994.856 1299.52 L994.181 1299.52 L993.505 1299.52 L992.829 1299.52 L992.154 1299.52 L991.478 1299.52 L990.803 1299.52 L990.127 1299.52 L989.452 1299.52 L988.776 1299.52 L988.1 1299.52 L987.425 1299.52 L986.749 1299.52 L986.074 1299.52 L985.398 1299.52 L984.722 1299.52 L984.047 1299.52 L983.371 1299.52 L982.696 1299.52 L982.02 1299.52 L981.345 1299.52 L980.669 1299.52 L979.993 1299.52 L979.318 1299.52 L978.642 1299.52 L977.967 1299.52 L977.291 1299.52 L976.615 1299.52 L975.94 1299.52 L975.264 1299.52 L974.589 1299.52 L973.913 1299.52 L973.238 1299.52 L972.562 1299.52 L971.886 1299.52 L971.211 1299.52 L970.535 1299.52 L969.86 1299.52 L969.184 1299.52 L968.508 1299.52 L967.833 1299.52 L967.157 1299.52 L966.482 1299.52 L965.806 1299.52 L965.131 1299.52 L964.455 1299.52 L963.779 1299.52 L963.104 1299.52 L962.428 1299.52 L961.753 1299.52 L961.077 1299.52 L960.401 1299.52 L959.726 1299.52 L959.05 1299.52 L958.375 1299.52 L957.699 1299.52 L957.024 1299.52 L956.348 1299.52 L955.672 1299.52 L954.997 1299.52 L954.321 1299.52 L953.646 1299.52 L952.97 1299.52 L952.294 1299.52 L951.619 1299.52 L950.943 1299.52 L950.268 1299.52 L949.592 1299.52 L948.917 1299.52 L948.241 1299.52 L947.565 1299.52 L946.89 1299.52 L946.214 1299.52 L945.539 1299.52 L944.863 1299.52 L944.188 1299.52 L943.512 1299.52 L942.836 1299.52 L942.161 1299.52 L941.485 1299.52  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"941.485,1301.11 942.161,1301.11 942.836,1301.11 943.512,1301.11 944.188,1301.11 944.863,1301.11 945.539,1301.11 946.214,1301.11 946.89,1301.11 947.565,1301.11 948.241,1301.11 948.917,1301.11 949.592,1301.11 950.268,1301.11 950.943,1301.11 951.619,1301.11 952.294,1301.11 952.97,1301.11 953.646,1301.11 954.321,1301.11 954.997,1301.11 955.672,1301.11 956.348,1301.11 957.024,1301.11 957.699,1301.11 958.375,1301.11 959.05,1301.11 959.726,1301.11 960.401,1301.11 961.077,1301.11 961.753,1301.11 962.428,1301.11 963.104,1301.11 963.779,1301.11 964.455,1301.11 965.131,1301.11 965.806,1301.11 966.482,1301.11 967.157,1301.11 967.833,1301.11 968.508,1301.11 969.184,1301.11 969.86,1301.11 970.535,1301.11 971.211,1301.11 971.886,1301.11 972.562,1301.11 973.238,1301.11 973.913,1301.11 974.589,1301.11 975.264,1301.11 975.94,1301.11 976.615,1301.11 977.291,1301.11 977.967,1301.11 978.642,1301.11 979.318,1301.11 979.993,1301.11 980.669,1301.11 981.345,1301.11 982.02,1301.11 982.696,1301.11 983.371,1301.11 984.047,1301.11 984.722,1301.11 985.398,1301.11 986.074,1301.11 986.749,1301.11 987.425,1301.11 988.1,1301.11 988.776,1301.11 989.452,1301.11 990.127,1301.11 990.803,1301.11 991.478,1301.11 992.154,1301.11 992.829,1301.11 993.505,1301.11 994.181,1301.11 994.856,1301.11 995.532,1301.11 996.207,1301.11 996.883,1301.11 997.558,1301.11 998.234,1301.11 998.91,1301.11 999.585,1301.11 1000.26,1301.11 1000.94,1301.11 1001.61,1301.11 1002.29,1301.11 1002.96,1301.11 1003.64,1301.11 1004.31,1301.11 1004.99,1301.11 1005.67,1301.11 1006.34,1301.11 1007.02,1301.11 1007.69,1301.11 1008.37,1301.11 1009.04,1301.11 1009.72,1301.11 1010.39,1301.11 1011.07,1301.11 1011.75,1301.11 1012.42,1301.11 1013.1,1301.11 1013.77,1301.11 1014.45,1301.11 1015.12,1301.11 1015.8,1301.11 1016.47,1301.11 1017.15,1301.11 1017.83,1301.11 1018.5,1301.11 1019.18,1301.11 1019.85,1301.11 1020.53,1301.11 1021.2,1301.11 1021.88,1301.11 1022.56,1301.11 1023.23,1301.11 1023.91,1301.11 1024.58,1301.11 1025.26,1301.11 1025.93,1301.11 1026.61,1301.11 1027.28,1301.11 1027.96,1301.11 1028.64,1301.11 1029.31,1301.11 1029.99,1301.11 1030.66,1301.11 1031.34,1301.11 1032.01,1301.11 1032.69,1301.11 1033.36,1301.11 1034.04,1301.11 1034.72,1301.11 1035.39,1301.11 1036.07,1301.11 1036.74,1301.11 1037.42,1301.11 1038.09,1301.11 1038.77,1301.11 1039.44,1301.11 1040.12,1301.11 1040.8,1301.11 1041.47,1301.11 1042.15,1301.11 1042.82,1301.11 1043.5,1301.11 1044.17,1301.11 1044.85,1301.11 1045.52,1301.11 1046.2,1301.11 1046.88,1301.11 1047.55,1301.11 1048.23,1301.11 1048.9,1301.11 1049.58,1301.11 1050.25,1301.11 1050.93,1301.11 1051.61,1301.11 1052.28,1301.11 1052.96,1301.11 1053.63,1301.11 1054.31,1301.11 1054.98,1301.11 1055.66,1301.11 1056.33,1301.11 1057.01,1301.11 1057.69,1301.11 1058.36,1301.11 1059.04,1301.11 1059.71,1301.11 1060.39,1301.11 1061.06,1301.11 1061.74,1301.11 1062.41,1301.11 1063.09,1301.11 1063.77,1301.11 1064.44,1301.11 1065.12,1301.11 1065.79,1301.11 1066.47,1301.11 1067.14,1301.11 1067.82,1301.11 1068.49,1301.11 1069.17,1301.11 1069.85,1301.11 1070.52,1301.11 1071.2,1301.11 1071.87,1301.11 1072.55,1301.11 1073.22,1301.11 1073.9,1301.11 1074.57,1301.11 1075.25,1301.11 1075.93,1301.11 1076.6,1301.11 1077.28,1301.11 1077.95,1301.11 1078.63,1301.11 1079.3,1301.11 1079.98,1301.11 1080.66,1301.11 1081.33,1301.11 1082.01,1301.11 1082.68,1301.11 1083.36,1301.11 1084.03,1301.11 1084.71,1301.11 1085.38,1301.11 1086.06,1301.11 1086.74,1301.11 1087.41,1301.11 1088.09,1301.11 1088.76,1301.11 1089.44,1301.11 1090.11,1301.11 1090.79,1301.11 1091.46,1301.11 1092.14,1301.11 1092.82,1301.11 1093.49,1301.11 1094.17,1301.11 1094.84,1301.11 1095.52,1301.11 1096.19,1301.11 1096.87,1301.11 1097.54,1301.11 1098.22,1301.11 1098.9,1301.11 1099.57,1301.11 1100.25,1301.11 1100.92,1301.11 1101.6,1301.11 1102.27,1301.11 1102.95,1301.11 1103.62,1301.11 1104.3,1301.11 1104.98,1301.11 1105.65,1301.11 1106.33,1301.11 1107,1301.11 1107.68,1301.11 1108.35,1301.11 1109.03,1301.11 1109.71,1301.11 1110.38,1301.11 1111.06,1301.11 1111.73,1301.11 1112.41,1301.11 1113.08,1301.11 1113.76,1301.11 1114.43,1301.11 1115.11,1301.11 1115.79,1301.11 1116.46,1301.11 1117.14,1301.11 1117.81,1301.11 1118.49,1301.11 1119.16,1301.11 1119.84,1301.11 1120.51,1301.11 1121.19,1301.11 1121.87,1301.11 1122.54,1301.11 1123.22,1301.11 1123.89,1301.11 1124.57,1301.11 1125.24,1301.11 1125.92,1301.11 1126.59,1301.11 1127.27,1301.11 1127.95,1301.11 1128.62,1301.11 1129.3,1301.11 1129.97,1301.11 1130.65,1301.11 1131.32,1301.11 1132,1301.11 1132.67,1301.11 1133.35,1301.11 1134.03,1301.11 1134.7,1301.11 1135.38,1301.11 1136.05,1301.11 1136.73,1301.11 1137.4,1301.11 1138.08,1301.11 1138.76,1301.11 1139.43,1301.11 1140.11,1301.11 1140.78,1301.11 1141.46,1301.11 1142.13,1301.11 1142.81,1301.11 1143.48,1301.11 1144.16,1301.11 1144.84,1301.11 1145.51,1301.11 1146.19,1301.11 1146.86,1301.11 1147.54,1301.11 1148.21,1301.11 1148.89,1301.11 1149.56,1301.11 1150.24,1301.11 1150.92,1301.11 1151.59,1301.11 1152.27,1301.11 1152.94,1301.11 1153.62,1301.11 1154.29,1301.11 1154.97,1301.11 1155.64,1301.11 1156.32,1301.11 1157,1301.11 1157.67,1301.11 1158.35,1301.11 1159.02,1301.11 1159.7,1301.11 1160.37,1301.11 1161.05,1301.11 1161.72,1301.11 1162.4,1301.11 1163.08,1301.11 1163.75,1301.11 1164.43,1301.11 1165.1,1301.11 1165.78,1301.11 1166.45,1301.11 1167.13,1301.11 1167.81,1301.11 1168.48,1301.11 1169.16,1301.11 1169.83,1301.11 1170.51,1301.11 1171.18,1301.11 1171.86,1301.11 1172.53,1301.11 1173.21,1301.11 1173.89,1301.11 1174.56,1301.11 1175.24,1301.11 1175.91,1301.11 1176.59,1301.11 1177.26,1301.11 1177.94,1301.11 1178.61,1301.11 1179.29,1301.11 1179.97,1301.11 1180.64,1301.11 1181.32,1301.11 1181.99,1301.11 1182.67,1301.11 1183.34,1301.11 1184.02,1301.11 1184.69,1301.11 1185.37,1301.11 1186.05,1301.11 1186.72,1301.11 1187.4,1301.11 1188.07,1301.11 1188.75,1301.11 1189.42,1301.11 1190.1,1301.11 1190.77,1301.11 1191.45,1301.11 1192.13,1301.11 1192.8,1301.11 1193.48,1301.11 1194.15,1301.11 1194.83,1301.11 1195.5,1301.11 1196.18,1301.11 1196.86,1301.11 1197.53,1301.11 1198.21,1301.11 1198.88,1301.11 1199.56,1301.11 1200.23,1301.11 1200.91,1301.11 1201.58,1301.11 1202.26,1301.11 1202.94,1301.11 1203.61,1301.11 1204.29,1301.11 1204.96,1301.11 1205.64,1301.11 1206.31,1301.11 1206.99,1301.11 1207.66,1301.11 1208.34,1301.11 1209.02,1301.11 1209.69,1301.11 1210.37,1301.11 1211.04,1301.11 1211.72,1301.11 1212.39,1301.11 1213.07,1301.11 1213.74,1301.11 1214.42,1301.11 1215.1,1301.11 1215.77,1301.11 1216.45,1301.11 1217.12,1301.11 1217.8,1301.11 1218.47,1301.11 1219.15,1301.11 1219.83,1301.11 1220.5,1301.11 1221.18,1301.11 1221.85,1301.11 1222.53,1301.11 1223.2,1301.11 1223.88,1301.11 1224.55,1301.11 1225.23,1301.11 1225.91,1301.11 1226.58,1301.11 1227.26,1301.11 1227.93,1301.11 1228.61,1301.11 1229.28,1301.11 1229.96,1301.11 1230.63,1301.11 1231.31,1301.11 1231.99,1301.11 1232.66,1301.11 1233.34,1301.11 1234.01,1301.11 1234.69,1301.11 1235.36,1301.11 1236.04,1301.11 1236.71,1301.11 1237.39,1301.11 1238.07,1301.11 1238.74,1301.11 1239.42,1301.11 1240.09,1301.11 1240.77,1301.11 1241.44,1301.11 1242.12,1301.11 1242.79,1301.11 1243.47,1301.11 1244.15,1301.11 1244.82,1301.11 1245.5,1301.11 1246.17,1301.11 1246.85,1301.11 1247.52,1301.11 1248.2,1301.11 1248.88,1301.11 1249.55,1301.11 1250.23,1301.11 1250.9,1301.11 1251.58,1301.11 1252.25,1301.11 1252.93,1301.11 1253.6,1301.11 1254.28,1301.11 1254.96,1301.11 1255.63,1301.11 1256.31,1301.11 1256.98,1301.11 1257.66,1301.11 1258.33,1301.11 1259.01,1301.11 1259.68,1301.11 1260.36,1301.11 1261.04,1301.11 1261.71,1301.11 1262.39,1301.11 1263.06,1301.11 1263.74,1301.11 1264.41,1301.11 1265.09,1301.11 1265.76,1301.11 1266.44,1301.11 1267.12,1301.11 1267.79,1301.11 1268.47,1301.11 1269.14,1301.11 1269.82,1301.11 1270.49,1301.11 1271.17,1301.11 1271.84,1301.11 1272.52,1301.11 1273.2,1301.11 1273.87,1301.11 1274.55,1301.11 1275.22,1301.11 1275.9,1301.11 1276.57,1301.11 1277.25,1301.11 1277.93,1301.11 1278.6,1301.11 1279.28,1301.11 1279.95,1301.11 1280.63,1301.11 1281.3,1301.11 1281.98,1301.11 1282.65,1301.11 1283.33,1301.11 1284.01,1301.11 1284.68,1301.11 1285.36,1301.11 1286.03,1301.11 1286.71,1301.11 1287.38,1301.11 1288.06,1301.11 1288.73,1301.11 1289.41,1301.11 1290.09,1301.11 1290.76,1301.11 1291.44,1301.11 1292.11,1301.11 1292.79,1301.11 1293.46,1301.11 1294.14,1301.11 1294.81,1301.11 1295.49,1301.11 1296.17,1301.11 1296.84,1301.11 1297.52,1301.11 1298.19,1301.11 1298.87,1301.11 1299.54,1301.11 1300.22,1301.11 1300.89,1301.11 1301.57,1301.11 1302.25,1301.11 1302.92,1301.11 1303.6,1301.11 1304.27,1301.11 1304.95,1301.11 1305.62,1301.11 1306.3,1301.11 1306.98,1301.11 1307.65,1301.11 1308.33,1301.11 1309,1301.11 1309.68,1301.11 1310.35,1301.11 1311.03,1301.11 1311.7,1301.11 1312.38,1301.11 1313.06,1301.11 1313.73,1301.11 1314.41,1301.11 1315.08,1301.11 1315.76,1301.11 1316.43,1301.11 1317.11,1301.11 1317.78,1301.11 1318.46,1301.11 1319.14,1301.11 1319.81,1301.11 1320.49,1301.11 1321.16,1301.11 1321.84,1301.11 1322.51,1301.11 1323.19,1301.11 1323.86,1301.11 1324.54,1301.11 1325.22,1301.11 1325.89,1301.11 1326.57,1301.11 1327.24,1301.11 1327.92,1301.11 1328.59,1301.11 1329.27,1301.11 1329.94,1301.11 1330.62,1301.11 1331.3,1301.11 1331.97,1301.11 1332.65,1301.11 1333.32,1301.11 1334,1301.11 1334.67,1301.11 1335.35,1301.11 1336.03,1301.11 1336.7,1301.11 1337.38,1301.11 1338.05,1301.11 1338.73,1301.11 1339.4,1301.11 1340.08,1301.11 1340.75,1301.11 1341.43,1301.11 1342.11,1301.11 1342.78,1301.11 1343.46,1301.11 1344.13,1301.11 1344.81,1301.11 1345.48,1301.11 1346.16,1301.11 1346.83,1301.11 1347.51,1301.11 1348.19,1301.11 1348.86,1301.11 1349.54,1301.11 1350.21,1301.11 1350.89,1301.11 1351.56,1301.11 1352.24,1301.11 1352.91,1301.11 1353.59,1301.11 1354.27,1301.11 1354.94,1301.11 1355.62,1301.11 1356.29,1301.11 1356.97,1301.11 1357.64,1301.11 1358.32,1301.11 1358.99,1301.11 1359.67,1301.11 1360.35,1301.11 1361.02,1301.11 1361.7,1301.11 1362.37,1301.11 1363.05,1301.11 1363.72,1301.11 1364.4,1301.11 1365.08,1301.11 1365.75,1301.11 1366.43,1301.11 1367.1,1301.11 1367.78,1301.11 1368.45,1301.11 1369.13,1301.11 1369.8,1301.11 1370.48,1301.11 1371.16,1301.11 1371.83,1301.11 1372.51,1301.11 1373.18,1301.11 1373.86,1301.11 1374.53,1301.11 1375.21,1301.11 1375.88,1301.11 1376.56,1301.11 1377.24,1301.11 1377.91,1301.11 1378.59,1301.11 1379.26,1301.11 1379.94,1301.11 1380.61,1301.11 1381.29,1301.11 1381.96,1301.11 1382.64,1301.11 1383.32,1301.11 1383.99,1301.11 1384.67,1301.11 1385.34,1301.11 1386.02,1301.11 1386.69,1301.11 1387.37,1301.11 1388.04,1301.11 1388.72,1301.11 1389.4,1301.11 1390.07,1301.11 1390.75,1301.11 1391.42,1301.11 1392.1,1301.11 1392.77,1301.11 1393.45,1301.11 1394.13,1301.11 1394.8,1301.11 1395.48,1301.11 1396.15,1301.11 1396.83,1301.11 1397.5,1301.11 1398.18,1301.11 1398.85,1301.11 1399.53,1301.11 1400.21,1301.11 1400.88,1301.11 1401.56,1301.11 1402.23,1301.11 1402.91,1301.11 1403.58,1301.11 1404.26,1301.11 1404.93,1301.11 1405.61,1301.11 1406.29,1301.11 1406.96,1301.11 1407.64,1301.11 1408.31,1301.11 1408.99,1301.11 1409.66,1301.11 1410.34,1301.11 1411.01,1301.11 1411.69,1301.11 1412.37,1301.11 1413.04,1301.11 1413.72,1301.11 1414.39,1301.11 1415.07,1301.11 1415.74,1301.11 1416.42,1301.11 1417.09,1301.11 1417.77,1301.11 1418.45,1301.11 1419.12,1301.11 1419.8,1301.11 1420.47,1301.11 1421.15,1301.11 1421.82,1301.11 1422.5,1301.11 1423.18,1301.11 1423.85,1301.11 1424.53,1301.11 1425.2,1301.11 1425.88,1301.11 1426.55,1301.11 1427.23,1301.11 1427.9,1301.11 1428.58,1301.11 1429.26,1301.11 1429.93,1301.11 1430.61,1301.11 1431.28,1301.11 1431.96,1301.11 1432.63,1301.11 1433.31,1301.11 1433.98,1301.11 1434.66,1301.11 1435.34,1301.11 1436.01,1301.11 1436.69,1301.11 1437.36,1301.11 1438.04,1301.11 1438.71,1301.11 1439.39,1301.11 1440.06,1301.11 1440.74,1301.11 1441.42,1301.11 1442.09,1301.11 1442.77,1301.11 1443.44,1301.11 1444.12,1301.11 1444.79,1301.11 1445.47,1301.11 1446.15,1301.11 1446.82,1301.11 1447.5,1301.11 1448.17,1301.11 1448.85,1301.11 1449.52,1301.11 1450.2,1301.11 1450.87,1301.11 1451.55,1301.11 1452.23,1301.11 1452.9,1301.11 1453.58,1301.11 1454.25,1301.11 1454.93,1301.11 1455.6,1301.11 1456.28,1301.11 1456.95,1301.11 1457.63,1301.11 1458.31,1301.11 1458.98,1301.11 1459.66,1301.11 1460.33,1301.11 1461.01,1301.11 1461.68,1301.11 1462.36,1301.11 1463.03,1301.11 1463.71,1301.11 1464.39,1301.11 1465.06,1301.11 1465.74,1301.11 1466.41,1301.11 1467.09,1301.11 1467.76,1301.11 1468.44,1301.11 1469.11,1301.11 1469.79,1301.11 1470.47,1301.11 1471.14,1301.11 1471.82,1301.11 1472.49,1301.11 1473.17,1301.11 1473.84,1301.11 1474.52,1301.11 1475.2,1301.11 1475.87,1301.11 1476.55,1301.11 1477.22,1301.11 1477.9,1301.11 1478.57,1301.11 1479.25,1301.11 1479.92,1301.11 1480.6,1301.11 1481.28,1301.11 1481.95,1301.11 1482.63,1301.11 1483.3,1301.11 1483.98,1301.11 1484.65,1301.11 1485.33,1301.11 1486,1301.11 1486.68,1301.11 1487.36,1301.11 1488.03,1301.11 1488.71,1301.11 1489.38,1301.11 1490.06,1301.11 1490.73,1301.11 1491.41,1301.11 1492.08,1301.11 1492.76,1301.11 1493.44,1301.11 1494.11,1301.11 1494.79,1301.11 1495.46,1301.11 1496.14,1301.11 1496.81,1301.11 1497.49,1301.11 1498.16,1301.11 1498.84,1301.11 1499.52,1301.11 1500.19,1301.11 1500.87,1301.11 1501.54,1301.11 1502.22,1301.11 1502.89,1301.11 1503.57,1301.11 1504.25,1301.11 1504.92,1301.11 1505.6,1301.11 1506.27,1301.11 1506.95,1301.11 1507.62,1301.11 1508.3,1301.11 1508.97,1301.11 1509.65,1301.11 1510.33,1301.11 1511,1301.11 1511.68,1301.11 1512.35,1301.11 1513.03,1301.11 1513.7,1301.11 1514.38,1301.11 1515.05,1301.11 1515.73,1301.11 1516.41,1301.11 1517.08,1301.11 1517.76,1301.11 1518.43,1301.11 1519.11,1301.11 1519.78,1301.11 1520.46,1301.11 1521.13,1301.11 1521.81,1301.11 1522.49,1301.11 1523.16,1301.11 1523.84,1301.11 1524.51,1301.11 1525.19,1301.11 1525.86,1301.11 1526.54,1301.11 1527.21,1301.11 1527.89,1301.11 1528.57,1301.11 1529.24,1301.11 1529.92,1301.11 1530.59,1301.11 1531.27,1301.11 1531.94,1301.11 1532.62,1301.11 1533.3,1301.11 1533.97,1301.11 1534.65,1301.11 1535.32,1301.11 1536,1301.11 1536.67,1301.11 1537.35,1301.11 1538.02,1301.11 1538.7,1301.11 1539.38,1301.11 1540.05,1301.11 1540.73,1301.11 1541.4,1301.11 1542.08,1301.11 1542.75,1301.11 1543.43,1301.11 1544.1,1301.11 1544.78,1301.11 1545.46,1301.11 1546.13,1301.11 1546.81,1301.11 1547.48,1301.11 1548.16,1301.11 1548.83,1301.11 1549.51,1301.11 1550.18,1301.11 1550.86,1301.11 1551.54,1301.11 1552.21,1301.11 1552.89,1301.11 1553.56,1301.11 1554.24,1301.11 1554.91,1301.11 1555.59,1301.11 1556.26,1301.11 1556.94,1301.11 1557.62,1301.11 1558.29,1301.11 1558.97,1301.11 1559.64,1301.11 1560.32,1301.11 1560.99,1301.11 1561.67,1301.11 1562.35,1301.11 1563.02,1301.11 1563.7,1301.11 1564.37,1301.11 1565.05,1301.11 1565.72,1301.11 1566.4,1301.11 1567.07,1301.11 1567.75,1301.11 1568.43,1301.11 1569.1,1301.11 1569.78,1301.11 1570.45,1301.11 1571.13,1301.11 1571.8,1301.11 1572.48,1301.11 1573.15,1301.11 1573.83,1301.11 1574.51,1301.11 1575.18,1301.11 1575.86,1301.11 1576.53,1301.11 1577.21,1301.11 1577.88,1301.11 1578.56,1301.11 1579.23,1301.11 1579.91,1301.11 1580.59,1301.11 1581.26,1301.11 1581.94,1301.11 1582.61,1301.11 1583.29,1301.11 1583.96,1301.11 1584.64,1301.11 1585.31,1301.11 1585.99,1301.11 1586.67,1301.11 1587.34,1301.11 1588.02,1301.11 1588.69,1301.11 1589.37,1301.11 1590.04,1301.11 1590.72,1301.11 1591.4,1301.11 1592.07,1301.11 1592.75,1301.11 1593.42,1301.11 1594.1,1301.11 1594.77,1301.11 1595.45,1301.11 1596.12,1301.11 1596.8,1301.11 1597.48,1301.11 1598.15,1301.11 1598.83,1301.11 1599.5,1301.11 1600.18,1301.11 1600.85,1301.11 1601.53,1301.11 1602.2,1301.11 1602.88,1301.11 1603.56,1301.11 1604.23,1301.11 1604.91,1301.11 1605.58,1301.11 1606.26,1301.11 1606.93,1301.11 1607.61,1301.11 1608.28,1301.11 1608.96,1301.11 1609.64,1301.11 1610.31,1301.11 1610.99,1301.11 1611.66,1301.11 1612.34,1301.11 1613.01,1301.11 1613.69,1301.11 1614.36,1301.11 1615.04,1301.11 1615.72,1301.11 1616.39,1301.11 1617.07,1301.11 1617.74,1301.11 1618.42,1301.11 1619.09,1301.11 1619.77,1301.11 1620.45,1301.11 1621.12,1301.11 1621.8,1301.11 1622.47,1301.11 1623.15,1301.11 1623.82,1301.11 1624.5,1301.11 1625.17,1301.11 1625.85,1301.11 1626.53,1301.11 1627.2,1301.11 1627.88,1301.11 1628.55,1301.11 1629.23,1301.11 1629.9,1301.11 1630.58,1301.11 1631.25,1301.11 1631.93,1301.11 1632.61,1301.11 1633.28,1301.11 1633.96,1301.11 1634.63,1301.11 1635.31,1301.11 1635.98,1301.11 1636.66,1301.11 1637.33,1301.11 1638.01,1301.11 1638.69,1301.11 1639.36,1301.11 1640.04,1301.11 1640.71,1301.11 1641.39,1301.11 1642.06,1301.11 1642.74,1301.11 1643.41,1301.11 1644.09,1301.11 1644.77,1301.11 1645.44,1301.11 1646.12,1301.11 1646.79,1301.11 1647.47,1301.11 1648.14,1301.11 1648.82,1301.11 1649.5,1301.11 1650.17,1301.11 1650.85,1301.11 1651.52,1301.11 1652.2,1301.11 1652.87,1301.11 1653.55,1301.11 1654.22,1301.11 1654.9,1301.11 1655.58,1301.11 1656.25,1301.11 1656.93,1301.11 1657.6,1301.11 1658.28,1301.11 1658.95,1301.11 1659.63,1301.11 1660.3,1301.11 1660.98,1301.11 1661.66,1301.11 1662.33,1301.11 1663.01,1301.11 1663.68,1301.11 1664.36,1301.11 1665.03,1301.11 1665.71,1301.11 1666.38,1301.11 1667.06,1301.11 1667.74,1301.11 1668.41,1301.11 1669.09,1301.11 1669.76,1301.11 1670.44,1301.11 1671.11,1301.11 1671.79,1301.11 1672.47,1301.11 1673.14,1301.11 1673.82,1301.11 1674.49,1301.11 1675.17,1301.11 1675.84,1301.11 1676.52,1301.11 1677.19,1301.11 1677.87,1301.11 1678.55,1301.11 1679.22,1301.11 1679.9,1301.11 1680.57,1301.11 1681.25,1301.11 1681.92,1301.11 1682.6,1301.11 1683.27,1301.11 1683.95,1301.11 1684.63,1301.11 1685.3,1301.11 1685.98,1301.11 1686.65,1301.11 1687.33,1301.11 1688,1301.11 1688.68,1301.11 1689.35,1301.11 1690.03,1301.11 1690.71,1301.11 1691.38,1301.11 1692.06,1301.11 1692.73,1301.11 1693.41,1301.11 1694.08,1301.11 1694.76,1301.11 1695.43,1301.11 1696.11,1301.11 1696.79,1301.11 1697.46,1301.11 1698.14,1301.11 1698.81,1301.11 1699.49,1301.11 1700.16,1301.11 1700.84,1301.11 1701.52,1301.11 1702.19,1301.11 1702.87,1301.11 1703.54,1301.11 1704.22,1301.11 1704.89,1301.11 1705.57,1301.11 1706.24,1301.11 1706.92,1301.11 1707.6,1301.11 1708.27,1301.11 1708.95,1301.11 1709.62,1301.11 1710.3,1301.11 1710.97,1301.11 1711.65,1301.11 1712.32,1301.11 1713,1301.11 1713.68,1301.11 1714.35,1301.11 1715.03,1301.11 1715.7,1301.11 1716.38,1301.11 1717.05,1301.11 1717.73,1301.11 1718.4,1301.11 1719.08,1301.11 1719.76,1301.11 1720.43,1301.11 1721.11,1301.11 1721.78,1301.11 1722.46,1301.11 1723.13,1301.11 1723.81,1301.11 1724.48,1301.11 1725.16,1301.11 1725.84,1301.11 1726.51,1301.11 1727.19,1301.11 1727.86,1301.11 1728.54,1301.11 1729.21,1301.11 1729.89,1301.11 1730.57,1301.11 1731.24,1301.11 1731.92,1301.11 1732.59,1301.11 1733.27,1301.11 1733.94,1301.11 1734.62,1301.11 1735.29,1301.11 1735.97,1301.11 1736.65,1301.11 1737.32,1301.11 1738,1301.11 1738.67,1301.11 1739.35,1301.11 1740.02,1301.11 1740.7,1301.11 1741.37,1301.11 1742.05,1301.11 1742.73,1301.11 1743.4,1301.11 1744.08,1301.11 1744.75,1301.11 1745.43,1301.11 1746.1,1301.11 1746.78,1301.11 1747.45,1301.11 1748.13,1301.11 1748.81,1301.11 1749.48,1301.11 1750.16,1301.11 1750.83,1301.11 1751.51,1301.11 1752.18,1301.11 1752.86,1301.11 1753.53,1301.11 1754.21,1301.11 1754.89,1301.11 1755.56,1301.11 1756.24,1301.11 1756.91,1301.11 1757.59,1301.11 1758.26,1301.11 1758.94,1301.11 1759.62,1301.11 1760.29,1301.11 1760.97,1301.11 1761.64,1301.11 1762.32,1301.11 1762.99,1301.11 1763.67,1301.11 1764.34,1301.11 1765.02,1301.11 1765.7,1301.11 1766.37,1301.11 1767.05,1301.11 1767.72,1301.11 1768.4,1301.11 1769.07,1301.11 1769.75,1301.11 1770.42,1301.11 1771.1,1301.11 1771.78,1301.11 1772.45,1301.11 1773.13,1301.11 1773.8,1301.11 1774.48,1301.11 1775.15,1301.11 1775.83,1301.11 1776.5,1301.11 1777.18,1301.11 1777.86,1301.11 1778.53,1301.11 1779.21,1301.11 1779.88,1301.11 1780.56,1301.11 1781.23,1301.11 1781.91,1301.11 1782.58,1301.11 1783.26,1301.11 1783.94,1301.11 1784.61,1301.11 1785.29,1301.11 1785.96,1301.11 1786.64,1301.11 1787.31,1301.11 1787.99,1301.11 1788.67,1301.11 1789.34,1301.11 1790.02,1301.11 1790.69,1301.11 1791.37,1301.11 1792.04,1301.11 1792.72,1301.11 1793.39,1301.11 1794.07,1301.11 1794.75,1301.11 1795.42,1301.11 1796.1,1301.11 1796.77,1301.11 1797.45,1301.11 1798.12,1301.11 1798.8,1301.11 1799.47,1301.11 1800.15,1301.11 1800.83,1301.11 1801.5,1301.11 1802.18,1301.11 1802.85,1301.11 1803.53,1301.11 1804.2,1301.11 1804.88,1301.11 1805.55,1301.11 1806.23,1301.11 1806.91,1301.11 1807.58,1301.11 1808.26,1301.11 1808.93,1301.11 1809.61,1301.11 1810.28,1301.11 1810.96,1301.11 1811.63,1301.11 1812.31,1301.11 1812.99,1301.11 1813.66,1301.11 1814.34,1301.11 1815.01,1301.11 1815.69,1301.11 1816.36,1301.11 1817.04,1301.11 1817.72,1301.11 1818.39,1301.11 1819.07,1301.11 1819.74,1301.11 1820.42,1301.11 1821.09,1301.11 1821.77,1301.11 1822.44,1301.11 1823.12,1301.11 1823.8,1301.11 1824.47,1301.11 1825.15,1301.11 1825.82,1301.11 1826.5,1301.11 1827.17,1301.11 1827.85,1301.11 1828.52,1301.11 1829.2,1301.11 1829.88,1301.11 1830.55,1301.11 1831.23,1301.11 1831.9,1301.11 1832.58,1301.11 1833.25,1301.11 1833.93,1301.11 1834.6,1301.11 1835.28,1301.11 1835.96,1301.11 1836.63,1301.11 1837.31,1301.11 1837.98,1301.11 1838.66,1301.11 1839.33,1301.11 1840.01,1301.11 1840.68,1301.11 1841.36,1301.11 1842.04,1301.11 1842.71,1301.11 1843.39,1301.11 1844.06,1301.11 1844.74,1301.11 1845.41,1301.11 1846.09,1301.11 1846.77,1301.11 1847.44,1301.11 1848.12,1301.11 1848.79,1301.11 1849.47,1301.11 1850.14,1301.11 1850.82,1301.11 1851.49,1301.11 1852.17,1301.11 1852.85,1301.11 1853.52,1301.11 1854.2,1301.11 1854.87,1301.11 1855.55,1301.11 1856.22,1301.11 1856.9,1301.11 1857.57,1301.11 1858.25,1301.11 1858.93,1301.11 1859.6,1301.11 1860.28,1301.11 1860.95,1301.11 1861.63,1301.11 1862.3,1301.11 1862.98,1301.11 1863.65,1301.11 1864.33,1301.11 1865.01,1301.11 1865.68,1301.11 1866.36,1301.11 1867.03,1301.11 1867.71,1301.11 1868.38,1301.11 1869.06,1301.11 1869.73,1301.11 1870.41,1301.11 1871.09,1301.11 1871.76,1301.11 1872.44,1301.11 1873.11,1301.11 1873.79,1301.11 1874.46,1301.11 1875.14,1301.11 1875.82,1301.11 1876.49,1301.11 1877.17,1301.11 1877.84,1301.11 1878.52,1301.11 1879.19,1301.11 1879.87,1301.11 1880.54,1301.11 1881.22,1301.11 1881.9,1301.11 1882.57,1301.11 1883.25,1301.11 1883.92,1301.11 1884.6,1301.11 1885.27,1301.11 1885.95,1301.11 1886.62,1301.11 1887.3,1301.11 1887.98,1301.11 1888.65,1301.11 1889.33,1301.11 1890,1301.11 1890.68,1301.11 1891.35,1301.11 1892.03,1301.11 1892.7,1301.11 1893.38,1301.11 1894.06,1301.11 1894.73,1301.11 1895.41,1301.11 1896.08,1301.11 1896.76,1301.11 1897.43,1301.11 1898.11,1301.11 1898.79,1301.11 1899.46,1301.11 1900.14,1301.11 1900.81,1301.11 1901.49,1301.11 1902.16,1301.11 1902.84,1301.11 1903.51,1301.11 1904.19,1301.11 1904.87,1301.11 1905.54,1301.11 1906.22,1301.11 1906.89,1301.11 1907.57,1301.11 1908.24,1301.11 1908.92,1301.11 1909.59,1301.11 1910.27,1301.11 1910.95,1301.11 1911.62,1301.11 1912.3,1301.11 1912.97,1301.11 1913.65,1301.11 1914.32,1301.11 1915,1301.11 1915.67,1301.11 1916.35,1301.11 1917.03,1301.11 1917.7,1301.11 1918.38,1301.11 1919.05,1301.11 1919.73,1301.11 1920.4,1301.11 1921.08,1301.11 1921.75,1301.11 1922.43,1301.11 1923.11,1301.11 1923.78,1301.11 1924.46,1301.11 1925.13,1301.11 1925.81,1301.11 1926.48,1301.11 1927.16,1301.11 1927.84,1301.11 1928.51,1301.11 1929.19,1301.11 1929.86,1301.11 1930.54,1301.11 1931.21,1301.11 1931.89,1301.11 1932.56,1301.11 1933.24,1301.11 1933.92,1301.11 1934.59,1301.11 1935.27,1301.11 1935.94,1301.11 1936.62,1301.11 1937.29,1301.11 1937.97,1301.11 1938.64,1301.11 1939.32,1301.11 1940,1301.11 1940.67,1301.11 1941.35,1301.11 1942.02,1301.11 1942.7,1301.11 1943.37,1301.11 1944.05,1301.11 1944.72,1301.11 1945.4,1301.11 1946.08,1301.11 1946.75,1301.11 1947.43,1301.11 1948.1,1301.11 1948.78,1301.11 1949.45,1301.11 1950.13,1301.11 1950.8,1301.11 1951.48,1301.11 1952.16,1301.11 1952.83,1301.11 1953.51,1301.11 1954.18,1301.11 1954.86,1301.11 1955.53,1301.11 1956.21,1301.11 1956.89,1301.11 1957.56,1301.11 1958.24,1301.11 1958.91,1301.11 1959.59,1301.11 1960.26,1301.11 1960.94,1301.11 1961.61,1301.11 1962.29,1301.11 1962.97,1301.11 1963.64,1301.11 1964.32,1301.11 1964.99,1301.11 1965.67,1301.11 1966.34,1301.11 1967.02,1301.11 1967.69,1301.11 1968.37,1301.11 1969.05,1301.11 1969.72,1301.11 1970.4,1301.11 1971.07,1301.11 1971.75,1301.11 1972.42,1301.11 1973.1,1301.11 1973.77,1301.11 1974.45,1301.11 1975.13,1301.11 1975.8,1301.11 1976.48,1301.11 1977.15,1301.11 1977.83,1301.11 1978.5,1301.11 1979.18,1301.11 1979.85,1301.11 1980.53,1301.11 1981.21,1301.11 1981.88,1301.11 1982.56,1301.11 1983.23,1301.11 1983.91,1301.11 1984.58,1301.11 1985.26,1301.11 1985.94,1301.11 1986.61,1301.11 1987.29,1301.11 1987.96,1301.11 1988.64,1301.11 1989.31,1301.11 1989.99,1301.11 1990.66,1301.11 1991.34,1301.11 1992.02,1301.11 1992.69,1301.11 1993.37,1301.11 1994.04,1301.11 1994.72,1301.11 1995.39,1301.11 1996.07,1301.11 1996.74,1301.11 1997.42,1301.11 1998.1,1301.11 1998.77,1301.11 1999.45,1301.11 2000.12,1301.11 2000.8,1301.11 2001.47,1301.11 2002.15,1301.11 2002.82,1301.11 2003.5,1301.11 2004.18,1301.11 2004.85,1301.11 2005.53,1301.11 2006.2,1301.11 2006.88,1301.11 2007.55,1301.11 2008.23,1301.11 2008.9,1301.11 2009.58,1301.11 2010.26,1301.11 2010.93,1301.11 2011.61,1301.11 2012.28,1301.11 2012.96,1301.11 2013.63,1301.11 2014.31,1301.11 2014.99,1301.11 2015.66,1301.11 2016.34,1301.11 2017.01,1301.11 2017.69,1301.11 2018.36,1301.11 2019.04,1301.11 2019.71,1301.11 2020.39,1301.11 2021.07,1301.11 2021.74,1301.11 2022.42,1301.11 2023.09,1301.11 2023.77,1301.11 2024.44,1301.11 2025.12,1301.11 2025.79,1301.11 2026.47,1301.11 2027.15,1301.11 2027.82,1301.11 2028.5,1301.11 2029.17,1301.11 2029.85,1301.11 2030.52,1301.11 2031.2,1301.11 2031.87,1301.11 2032.55,1301.11 2033.23,1301.11 2033.9,1301.11 2034.58,1301.11 2035.25,1301.11 2035.93,1301.11 2036.6,1301.11 2037.28,1301.11 2037.95,1301.11 2038.63,1301.11 2039.31,1301.11 2039.98,1301.11 2040.66,1301.11 2041.33,1301.11 2042.01,1301.11 2042.68,1301.11 2043.36,1301.11 2044.04,1301.11 2044.71,1301.11 2045.39,1301.11 2046.06,1301.11 2046.74,1301.11 2047.41,1301.11 2048.09,1301.11 2048.76,1301.11 2049.44,1301.11 2050.12,1301.11 2050.79,1301.11 2051.47,1301.11 2052.14,1301.11 2052.82,1301.11 2053.49,1301.11 2054.17,1301.11 2054.84,1301.11 2055.52,1301.11 2056.2,1301.11 2056.87,1301.11 2057.55,1301.11 2058.22,1301.11 2058.9,1301.11 2059.57,1301.11 2060.25,1301.11 2060.92,1301.11 2061.6,1301.11 2062.28,1301.11 2062.95,1301.11 2063.63,1301.11 2064.3,1301.11 2064.98,1301.11 2065.65,1301.11 2066.33,1301.11 2067,1301.11 2067.68,1301.11 2068.36,1301.11 2069.03,1301.11 2069.71,1301.11 2070.38,1301.11 2071.06,1301.11 2071.73,1301.11 2072.41,1301.11 2073.09,1301.11 2073.76,1301.11 2074.44,1301.11 2075.11,1301.11 2075.79,1301.11 2076.46,1301.11 2077.14,1301.11 2077.81,1301.11 2078.49,1301.11 2079.17,1301.11 2079.84,1301.11 2080.52,1301.11 2081.19,1301.11 2081.87,1301.11 2082.54,1301.11 2083.22,1301.11 2083.89,1301.11 2084.57,1301.11 2085.25,1301.11 2085.92,1301.11 2086.6,1301.11 2087.27,1301.11 2087.95,1301.11 2088.62,1301.11 2089.3,1301.11 2089.97,1301.11 2090.65,1301.11 2091.33,1301.11 2092,1301.11 2092.68,1301.11 2093.35,1301.11 2094.03,1301.11 2094.7,1301.11 2095.38,1301.11 2096.05,1301.11 2096.73,1301.11 2097.41,1301.11 2098.08,1301.11 2098.76,1301.11 2099.43,1301.11 2100.11,1301.11 2100.78,1301.11 2101.46,1301.11 2102.14,1301.11 2102.81,1301.11 2103.49,1301.11 2104.16,1301.11 2104.84,1301.11 2105.51,1301.11 2106.19,1301.11 2106.86,1301.11 2107.54,1301.11 2108.22,1301.11 2108.89,1301.11 2109.57,1301.11 2110.24,1301.11 2110.92,1301.11 2111.59,1301.11 2112.27,1301.11 2112.94,1301.11 2113.62,1301.11 2114.3,1301.11 2114.97,1301.11 2115.65,1301.11 2116.32,1301.11 2117,1301.11 2117.67,1301.11 2118.35,1301.11 2119.02,1301.11 2119.7,1301.11 2120.38,1301.11 2121.05,1301.11 2121.73,1301.11 2122.4,1301.11 2123.08,1301.11 2123.75,1301.11 2124.43,1301.11 2125.11,1301.11 2125.78,1301.11 2126.46,1301.11 2127.13,1301.11 2127.81,1301.11 2128.48,1301.11 2129.16,1301.11 2129.83,1301.11 2130.51,1301.11 2131.19,1301.11 2131.86,1301.11 2132.54,1301.11 2133.21,1301.11 2133.89,1301.11 2134.56,1301.11 2135.24,1301.11 2135.91,1301.11 2136.59,1301.11 2137.27,1301.11 2137.94,1301.11 2138.62,1301.11 2139.29,1301.11 2139.97,1301.11 2140.64,1301.11 2141.32,1301.11 2141.99,1301.11 2142.67,1301.11 2143.35,1301.11 2144.02,1301.11 2144.7,1301.11 2145.37,1301.11 2146.05,1301.11 2146.72,1301.11 2147.4,1301.11 2148.07,1301.11 2148.75,1301.11 2149.43,1301.11 2150.1,1301.11 2150.78,1301.11 2151.45,1301.11 2152.13,1301.11 2152.8,1301.11 2153.48,1301.11 2154.16,1301.11 2154.83,1301.11 2155.51,1301.11 2156.18,1301.11 2156.86,1301.11 2157.53,1301.11 2158.21,1301.11 2158.88,1301.11 2159.56,1301.11 2160.24,1301.11 2160.91,1301.11 2161.59,1301.11 2162.26,1301.11 2162.94,1301.11 2163.61,1301.11 2164.29,1301.11 2164.96,1301.11 2165.64,1301.11 2166.32,1301.11 2166.99,1301.11 2167.67,1301.11 2168.34,1301.11 2169.02,1301.11 2169.69,1301.11 2170.37,1301.11 2171.04,1301.11 2171.72,1301.11 2172.4,1301.11 2173.07,1301.11 2173.75,1301.11 2174.42,1301.11 2175.1,1301.11 2175.77,1301.11 2176.45,1301.11 2177.12,1301.11 2177.8,1301.11 2178.48,1301.11 2179.15,1301.11 2179.83,1301.11 2180.5,1301.11 2181.18,1301.11 2181.85,1301.11 2182.53,1301.11 2183.21,1301.11 2183.88,1301.11 2184.56,1301.11 2185.23,1301.11 2185.91,1301.11 2186.58,1301.11 2187.26,1301.11 2187.93,1301.11 2188.61,1301.11 2189.29,1301.11 2189.96,1301.11 2190.64,1301.11 2191.31,1301.11 2191.99,1301.11 2192.66,1301.11 2193.34,1301.11 2194.01,1301.11 2194.69,1301.11 2195.37,1301.11 2196.04,1301.11 2196.72,1301.11 2197.39,1301.11 2198.07,1301.11 2198.74,1301.11 2199.42,1301.11 2200.09,1301.11 2200.77,1301.11 2201.45,1301.11 2202.12,1301.11 2202.8,1301.11 2203.47,1301.11 2204.15,1301.11 2204.82,1301.11 2205.5,1301.11 2206.17,1301.11 2206.85,1301.11 2207.53,1301.11 2208.2,1301.11 2208.88,1301.11 2209.55,1301.11 2210.23,1301.11 2210.9,1301.11 2211.58,1301.11 2212.26,1301.11 2212.93,1301.11 2213.61,1301.11 2214.28,1301.11 2214.96,1301.11 2215.63,1301.11 2216.31,1301.11 2216.98,1301.11 2217.66,1301.11 2218.34,1301.11 2219.01,1301.11 2219.69,1301.11 2220.36,1301.11 2221.04,1301.11 2221.71,1301.11 2222.39,1301.11 2223.06,1301.11 2223.74,1301.11 2224.42,1301.11 2225.09,1301.11 2225.77,1301.11 2226.44,1301.11 2227.12,1301.11 2227.79,1301.11 2228.47,1301.11 2229.14,1301.11 2229.82,1301.11 2230.5,1301.11 2231.17,1301.11 2231.85,1301.11 2232.52,1301.11 2233.2,1301.11 2233.87,1301.11 2234.55,1301.11 2235.22,1301.11 2235.9,1301.11 2236.58,1301.11 2237.25,1301.11 2237.93,1301.11 2238.6,1301.11 2239.28,1301.11 2239.95,1301.11 2240.63,1301.11 2241.31,1301.11 2241.98,1301.11 2242.66,1301.11 2243.33,1301.11 2244.01,1301.11 2244.68,1301.11 2245.36,1301.11 2246.03,1301.11 2246.71,1301.11 2247.39,1301.11 2248.06,1301.11 2248.74,1301.11 2249.41,1301.11 2250.09,1301.11 2250.76,1301.11 2251.44,1301.11 2252.11,1301.11 2252.79,1301.11 2253.47,1301.11 2254.14,1301.11 2254.82,1301.11 2255.49,1301.11 2256.17,1301.11 2256.84,1301.11 2257.52,1301.11 2258.19,1301.11 2258.87,1301.11 2259.55,1301.11 2260.22,1301.11 2260.9,1301.11 2261.57,1301.11 2262.25,1301.11 2262.92,1301.11 2263.6,1301.11 2264.27,1301.11 2264.95,1301.11 2265.63,1301.11 2266.3,1301.11 2266.98,1301.11 2267.65,1301.11 2268.33,1301.11 2269,1301.11 2269.68,1301.11 2270.36,1301.11 2271.03,1301.11 2271.71,1301.11 2272.38,1301.11 2273.06,1301.11 2273.73,1301.11 2274.41,1301.11 2275.08,1301.11 2275.76,1301.11 2276.44,1301.11 2277.11,1301.11 2277.79,1301.11 2278.46,1301.11 2279.14,1301.11 2279.81,1301.11 2280.49,1301.11 2281.16,1301.11 2281.84,1301.11 2282.52,1301.11 2283.19,1301.11 2283.87,1301.11 2284.54,1301.11 2285.22,1301.11 2285.89,1301.11 2286.57,1301.11 2287.24,1301.11 2287.92,1301.11 2288.6,1301.11 2289.27,1301.11 2289.95,1301.11 2290.62,1301.11 2291.3,1301.11 2291.97,1301.11 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1659.44 300.469 L2281.17 300.469 L2281.17 93.1086 L1659.44 93.1086  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1659.44,300.469 2281.17,300.469 2281.17,93.1086 1659.44,93.1086 1659.44,300.469 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1683.3,144.949 1826.48,144.949 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1868.77 137.067 L1868.77 141.094 Q1866.96 140.169 1865.02 139.706 Q1863.07 139.243 1860.99 139.243 Q1857.82 139.243 1856.22 140.215 Q1854.65 141.187 1854.65 143.131 Q1854.65 144.613 1855.78 145.469 Q1856.91 146.303 1860.34 147.067 L1861.8 147.391 Q1866.34 148.363 1868.23 150.145 Q1870.15 151.905 1870.15 155.076 Q1870.15 158.687 1867.28 160.793 Q1864.44 162.9 1859.44 162.9 Q1857.35 162.9 1855.09 162.483 Q1852.84 162.09 1850.34 161.28 L1850.34 156.881 Q1852.7 158.108 1854.99 158.733 Q1857.28 159.335 1859.53 159.335 Q1862.54 159.335 1864.16 158.317 Q1865.78 157.275 1865.78 155.4 Q1865.78 153.664 1864.6 152.738 Q1863.44 151.812 1859.48 150.956 L1858 150.608 Q1854.04 149.775 1852.28 148.062 Q1850.53 146.326 1850.53 143.317 Q1850.53 139.659 1853.12 137.669 Q1855.71 135.678 1860.48 135.678 Q1862.84 135.678 1864.92 136.025 Q1867.01 136.372 1868.77 137.067 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1898.49 146.581 L1898.49 162.229 L1894.23 162.229 L1894.23 146.719 Q1894.23 143.039 1892.79 141.21 Q1891.36 139.382 1888.49 139.382 Q1885.04 139.382 1883.05 141.581 Q1881.06 143.78 1881.06 147.576 L1881.06 162.229 L1876.78 162.229 L1876.78 126.21 L1881.06 126.21 L1881.06 140.331 Q1882.59 137.993 1884.65 136.835 Q1886.73 135.678 1889.44 135.678 Q1893.9 135.678 1896.2 138.456 Q1898.49 141.21 1898.49 146.581 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1906.98 136.303 L1911.24 136.303 L1911.24 162.229 L1906.98 162.229 L1906.98 136.303 M1906.98 126.21 L1911.24 126.21 L1911.24 131.604 L1906.98 131.604 L1906.98 126.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1933.28 126.21 L1933.28 129.752 L1929.21 129.752 Q1926.91 129.752 1926.01 130.678 Q1925.13 131.604 1925.13 134.011 L1925.13 136.303 L1932.15 136.303 L1932.15 139.613 L1925.13 139.613 L1925.13 162.229 L1920.85 162.229 L1920.85 139.613 L1916.77 139.613 L1916.77 136.303 L1920.85 136.303 L1920.85 134.497 Q1920.85 130.169 1922.86 128.201 Q1924.88 126.21 1929.25 126.21 L1933.28 126.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1940.22 128.942 L1940.22 136.303 L1949 136.303 L1949 139.613 L1940.22 139.613 L1940.22 153.687 Q1940.22 156.858 1941.08 157.761 Q1941.96 158.664 1944.62 158.664 L1949 158.664 L1949 162.229 L1944.62 162.229 Q1939.69 162.229 1937.82 160.4 Q1935.94 158.548 1935.94 153.687 L1935.94 139.613 L1932.82 139.613 L1932.82 136.303 L1935.94 136.303 L1935.94 128.942 L1940.22 128.942 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1683.3,196.789 1826.48,196.789 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1868.77 188.907 L1868.77 192.934 Q1866.96 192.009 1865.02 191.546 Q1863.07 191.083 1860.99 191.083 Q1857.82 191.083 1856.22 192.055 Q1854.65 193.027 1854.65 194.971 Q1854.65 196.453 1855.78 197.309 Q1856.91 198.143 1860.34 198.907 L1861.8 199.231 Q1866.34 200.203 1868.23 201.985 Q1870.15 203.745 1870.15 206.916 Q1870.15 210.527 1867.28 212.633 Q1864.44 214.74 1859.44 214.74 Q1857.35 214.74 1855.09 214.323 Q1852.84 213.93 1850.34 213.12 L1850.34 208.721 Q1852.7 209.948 1854.99 210.573 Q1857.28 211.175 1859.53 211.175 Q1862.54 211.175 1864.16 210.157 Q1865.78 209.115 1865.78 207.24 Q1865.78 205.504 1864.6 204.578 Q1863.44 203.652 1859.48 202.796 L1858 202.448 Q1854.04 201.615 1852.28 199.902 Q1850.53 198.166 1850.53 195.157 Q1850.53 191.499 1853.12 189.509 Q1855.71 187.518 1860.48 187.518 Q1862.84 187.518 1864.92 187.865 Q1867.01 188.212 1868.77 188.907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1898.49 198.421 L1898.49 214.069 L1894.23 214.069 L1894.23 198.559 Q1894.23 194.879 1892.79 193.05 Q1891.36 191.222 1888.49 191.222 Q1885.04 191.222 1883.05 193.421 Q1881.06 195.62 1881.06 199.416 L1881.06 214.069 L1876.78 214.069 L1876.78 178.05 L1881.06 178.05 L1881.06 192.171 Q1882.59 189.833 1884.65 188.675 Q1886.73 187.518 1889.44 187.518 Q1893.9 187.518 1896.2 190.296 Q1898.49 193.05 1898.49 198.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1906.98 188.143 L1911.24 188.143 L1911.24 214.069 L1906.98 214.069 L1906.98 188.143 M1906.98 178.05 L1911.24 178.05 L1911.24 183.444 L1906.98 183.444 L1906.98 178.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1933.28 178.05 L1933.28 181.592 L1929.21 181.592 Q1926.91 181.592 1926.01 182.518 Q1925.13 183.444 1925.13 185.851 L1925.13 188.143 L1932.15 188.143 L1932.15 191.453 L1925.13 191.453 L1925.13 214.069 L1920.85 214.069 L1920.85 191.453 L1916.77 191.453 L1916.77 188.143 L1920.85 188.143 L1920.85 186.337 Q1920.85 182.009 1922.86 180.041 Q1924.88 178.05 1929.25 178.05 L1933.28 178.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1940.22 180.782 L1940.22 188.143 L1949 188.143 L1949 191.453 L1940.22 191.453 L1940.22 205.527 Q1940.22 208.698 1941.08 209.601 Q1941.96 210.504 1944.62 210.504 L1949 210.504 L1949 214.069 L1944.62 214.069 Q1939.69 214.069 1937.82 212.24 Q1935.94 210.388 1935.94 205.527 L1935.94 191.453 L1932.82 191.453 L1932.82 188.143 L1935.94 188.143 L1935.94 180.782 L1940.22 180.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1989.85 193.12 Q1991.45 190.249 1993.67 188.884 Q1995.89 187.518 1998.9 187.518 Q2002.95 187.518 2005.15 190.365 Q2007.35 193.189 2007.35 198.421 L2007.35 214.069 L2003.07 214.069 L2003.07 198.559 Q2003.07 194.833 2001.75 193.027 Q2000.43 191.222 1997.72 191.222 Q1994.41 191.222 1992.49 193.421 Q1990.57 195.62 1990.57 199.416 L1990.57 214.069 L1986.29 214.069 L1986.29 198.559 Q1986.29 194.809 1984.97 193.027 Q1983.65 191.222 1980.89 191.222 Q1977.63 191.222 1975.71 193.444 Q1973.79 195.643 1973.79 199.416 L1973.79 214.069 L1969.51 214.069 L1969.51 188.143 L1973.79 188.143 L1973.79 192.171 Q1975.25 189.786 1977.28 188.652 Q1979.32 187.518 1982.12 187.518 Q1984.95 187.518 1986.91 188.953 Q1988.9 190.388 1989.85 193.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2038.02 200.041 L2038.02 202.124 L2018.44 202.124 Q2018.72 206.522 2021.08 208.837 Q2023.46 211.129 2027.7 211.129 Q2030.15 211.129 2032.45 210.527 Q2034.76 209.925 2037.03 208.721 L2037.03 212.749 Q2034.74 213.721 2032.33 214.231 Q2029.92 214.74 2027.45 214.74 Q2021.24 214.74 2017.61 211.129 Q2014 207.518 2014 201.36 Q2014 194.995 2017.42 191.268 Q2020.87 187.518 2026.7 187.518 Q2031.94 187.518 2034.97 190.897 Q2038.02 194.254 2038.02 200.041 M2033.76 198.791 Q2033.72 195.296 2031.8 193.212 Q2029.9 191.129 2026.75 191.129 Q2023.19 191.129 2021.03 193.143 Q2018.9 195.157 2018.58 198.814 L2033.76 198.791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2056.8 201.036 Q2051.64 201.036 2049.64 202.217 Q2047.65 203.397 2047.65 206.245 Q2047.65 208.513 2049.14 209.856 Q2050.64 211.175 2053.21 211.175 Q2056.75 211.175 2058.88 208.675 Q2061.03 206.152 2061.03 201.985 L2061.03 201.036 L2056.8 201.036 M2065.29 199.277 L2065.29 214.069 L2061.03 214.069 L2061.03 210.133 Q2059.58 212.495 2057.4 213.629 Q2055.22 214.74 2052.08 214.74 Q2048.09 214.74 2045.73 212.518 Q2043.39 210.272 2043.39 206.522 Q2043.39 202.147 2046.31 199.925 Q2049.25 197.703 2055.06 197.703 L2061.03 197.703 L2061.03 197.286 Q2061.03 194.347 2059.09 192.749 Q2057.17 191.129 2053.67 191.129 Q2051.45 191.129 2049.34 191.661 Q2047.24 192.194 2045.29 193.259 L2045.29 189.323 Q2047.63 188.421 2049.83 187.981 Q2052.03 187.518 2054.11 187.518 Q2059.74 187.518 2062.51 190.434 Q2065.29 193.351 2065.29 199.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2095.62 198.421 L2095.62 214.069 L2091.36 214.069 L2091.36 198.559 Q2091.36 194.879 2089.92 193.05 Q2088.49 191.222 2085.62 191.222 Q2082.17 191.222 2080.18 193.421 Q2078.19 195.62 2078.19 199.416 L2078.19 214.069 L2073.9 214.069 L2073.9 188.143 L2078.19 188.143 L2078.19 192.171 Q2079.71 189.833 2081.77 188.675 Q2083.86 187.518 2086.57 187.518 Q2091.03 187.518 2093.32 190.296 Q2095.62 193.05 2095.62 198.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1683.3,248.629 1826.48,248.629 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1854.62 262.02 L1854.62 275.77 L1850.34 275.77 L1850.34 239.983 L1854.62 239.983 L1854.62 243.918 Q1855.97 241.603 1858 240.492 Q1860.06 239.358 1862.91 239.358 Q1867.63 239.358 1870.57 243.108 Q1873.53 246.858 1873.53 252.969 Q1873.53 259.08 1870.57 262.83 Q1867.63 266.58 1862.91 266.58 Q1860.06 266.58 1858 265.469 Q1855.97 264.335 1854.62 262.02 M1869.11 252.969 Q1869.11 248.27 1867.17 245.608 Q1865.25 242.923 1861.87 242.923 Q1858.49 242.923 1856.54 245.608 Q1854.62 248.27 1854.62 252.969 Q1854.62 257.668 1856.54 260.353 Q1858.49 263.015 1861.87 263.015 Q1865.25 263.015 1867.17 260.353 Q1869.11 257.668 1869.11 252.969 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1895.62 243.964 Q1894.9 243.548 1894.04 243.362 Q1893.21 243.154 1892.19 243.154 Q1888.58 243.154 1886.64 245.515 Q1884.71 247.853 1884.71 252.251 L1884.71 265.909 L1880.43 265.909 L1880.43 239.983 L1884.71 239.983 L1884.71 244.011 Q1886.06 241.649 1888.21 240.515 Q1890.36 239.358 1893.44 239.358 Q1893.88 239.358 1894.41 239.427 Q1894.95 239.474 1895.59 239.589 L1895.62 243.964 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1909.09 242.969 Q1905.66 242.969 1903.67 245.654 Q1901.68 248.316 1901.68 252.969 Q1901.68 257.622 1903.65 260.307 Q1905.64 262.969 1909.09 262.969 Q1912.49 262.969 1914.48 260.284 Q1916.47 257.598 1916.47 252.969 Q1916.47 248.362 1914.48 245.677 Q1912.49 242.969 1909.09 242.969 M1909.09 239.358 Q1914.65 239.358 1917.82 242.969 Q1920.99 246.58 1920.99 252.969 Q1920.99 259.335 1917.82 262.969 Q1914.65 266.58 1909.09 266.58 Q1903.51 266.58 1900.34 262.969 Q1897.19 259.335 1897.19 252.969 Q1897.19 246.58 1900.34 242.969 Q1903.51 239.358 1909.09 239.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1928.05 239.983 L1932.31 239.983 L1932.31 266.372 Q1932.31 271.325 1930.41 273.547 Q1928.53 275.77 1924.34 275.77 L1922.72 275.77 L1922.72 272.159 L1923.86 272.159 Q1926.29 272.159 1927.17 271.024 Q1928.05 269.913 1928.05 266.372 L1928.05 239.983 M1928.05 229.89 L1932.31 229.89 L1932.31 235.284 L1928.05 235.284 L1928.05 229.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1963.4 251.881 L1963.4 253.964 L1943.81 253.964 Q1944.09 258.362 1946.45 260.677 Q1948.83 262.969 1953.07 262.969 Q1955.52 262.969 1957.82 262.367 Q1960.13 261.765 1962.4 260.561 L1962.4 264.589 Q1960.11 265.561 1957.7 266.071 Q1955.29 266.58 1952.82 266.58 Q1946.61 266.58 1942.98 262.969 Q1939.37 259.358 1939.37 253.2 Q1939.37 246.835 1942.79 243.108 Q1946.24 239.358 1952.08 239.358 Q1957.31 239.358 1960.34 242.737 Q1963.4 246.094 1963.4 251.881 M1959.14 250.631 Q1959.09 247.136 1957.17 245.052 Q1955.27 242.969 1952.12 242.969 Q1948.56 242.969 1946.4 244.983 Q1944.27 246.997 1943.95 250.654 L1959.14 250.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1989.04 240.978 L1989.04 244.96 Q1987.24 243.964 1985.41 243.478 Q1983.6 242.969 1981.75 242.969 Q1977.61 242.969 1975.32 245.608 Q1973.02 248.224 1973.02 252.969 Q1973.02 257.714 1975.32 260.353 Q1977.61 262.969 1981.75 262.969 Q1983.6 262.969 1985.41 262.483 Q1987.24 261.973 1989.04 260.978 L1989.04 264.913 Q1987.26 265.747 1985.34 266.163 Q1983.44 266.58 1981.29 266.58 Q1975.43 266.58 1971.98 262.899 Q1968.53 259.219 1968.53 252.969 Q1968.53 246.626 1972.01 242.992 Q1975.5 239.358 1981.57 239.358 Q1983.53 239.358 1985.41 239.775 Q1987.28 240.168 1989.04 240.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2000.66 232.622 L2000.66 239.983 L2009.44 239.983 L2009.44 243.293 L2000.66 243.293 L2000.66 257.367 Q2000.66 260.538 2001.52 261.441 Q2002.4 262.344 2005.06 262.344 L2009.44 262.344 L2009.44 265.909 L2005.06 265.909 Q2000.13 265.909 1998.26 264.08 Q1996.38 262.228 1996.38 257.367 L1996.38 243.293 L1993.26 243.293 L1993.26 239.983 L1996.38 239.983 L1996.38 232.622 L2000.66 232.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2037.21 251.881 L2037.21 253.964 L2017.63 253.964 Q2017.91 258.362 2020.27 260.677 Q2022.65 262.969 2026.89 262.969 Q2029.34 262.969 2031.64 262.367 Q2033.95 261.765 2036.22 260.561 L2036.22 264.589 Q2033.93 265.561 2031.52 266.071 Q2029.11 266.58 2026.64 266.58 Q2020.43 266.58 2016.8 262.969 Q2013.19 259.358 2013.19 253.2 Q2013.19 246.835 2016.61 243.108 Q2020.06 239.358 2025.89 239.358 Q2031.13 239.358 2034.16 242.737 Q2037.21 246.094 2037.21 251.881 M2032.95 250.631 Q2032.91 247.136 2030.99 245.052 Q2029.09 242.969 2025.94 242.969 Q2022.38 242.969 2020.22 244.983 Q2018.09 246.997 2017.77 250.654 L2032.95 250.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2061.26 243.918 L2061.26 229.89 L2065.52 229.89 L2065.52 265.909 L2061.26 265.909 L2061.26 262.02 Q2059.92 264.335 2057.86 265.469 Q2055.83 266.58 2052.95 266.58 Q2048.26 266.58 2045.29 262.83 Q2042.35 259.08 2042.35 252.969 Q2042.35 246.858 2045.29 243.108 Q2048.26 239.358 2052.95 239.358 Q2055.83 239.358 2057.86 240.492 Q2059.92 241.603 2061.26 243.918 M2046.75 252.969 Q2046.75 257.668 2048.67 260.353 Q2050.62 263.015 2054 263.015 Q2057.38 263.015 2059.32 260.353 Q2061.26 257.668 2061.26 252.969 Q2061.26 248.27 2059.32 245.608 Q2057.38 242.923 2054 242.923 Q2050.62 242.923 2048.67 245.608 Q2046.75 248.27 2046.75 252.969 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2094 273.779 L2094 277.089 L2069.37 277.089 L2069.37 273.779 L2094 273.779 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2120.18 251.881 L2120.18 253.964 L2100.59 253.964 Q2100.87 258.362 2103.23 260.677 Q2105.62 262.969 2109.85 262.969 Q2112.31 262.969 2114.6 262.367 Q2116.91 261.765 2119.18 260.561 L2119.18 264.589 Q2116.89 265.561 2114.48 266.071 Q2112.07 266.58 2109.6 266.58 Q2103.39 266.58 2099.76 262.969 Q2096.15 259.358 2096.15 253.2 Q2096.15 246.835 2099.57 243.108 Q2103.02 239.358 2108.86 239.358 Q2114.09 239.358 2117.12 242.737 Q2120.18 246.094 2120.18 251.881 M2115.92 250.631 Q2115.87 247.136 2113.95 245.052 Q2112.05 242.969 2108.9 242.969 Q2105.34 242.969 2103.19 244.983 Q2101.06 246.997 2100.73 250.654 L2115.92 250.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2148.72 250.261 L2148.72 265.909 L2144.46 265.909 L2144.46 250.399 Q2144.46 246.719 2143.02 244.89 Q2141.59 243.062 2138.72 243.062 Q2135.27 243.062 2133.28 245.261 Q2131.29 247.46 2131.29 251.256 L2131.29 265.909 L2127.01 265.909 L2127.01 239.983 L2131.29 239.983 L2131.29 244.011 Q2132.82 241.673 2134.88 240.515 Q2136.96 239.358 2139.67 239.358 Q2144.13 239.358 2146.43 242.136 Q2148.72 244.89 2148.72 250.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2179.39 251.881 L2179.39 253.964 L2159.81 253.964 Q2160.08 258.362 2162.44 260.677 Q2164.83 262.969 2169.07 262.969 Q2171.52 262.969 2173.81 262.367 Q2176.13 261.765 2178.39 260.561 L2178.39 264.589 Q2176.1 265.561 2173.69 266.071 Q2171.29 266.58 2168.81 266.58 Q2162.61 266.58 2158.97 262.969 Q2155.36 259.358 2155.36 253.2 Q2155.36 246.835 2158.79 243.108 Q2162.24 239.358 2168.07 239.358 Q2173.3 239.358 2176.33 242.737 Q2179.39 246.094 2179.39 251.881 M2175.13 250.631 Q2175.08 247.136 2173.16 245.052 Q2171.26 242.969 2168.12 242.969 Q2164.55 242.969 2162.4 244.983 Q2160.27 246.997 2159.94 250.654 L2175.13 250.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2201.4 243.964 Q2200.69 243.548 2199.83 243.362 Q2199 243.154 2197.98 243.154 Q2194.37 243.154 2192.42 245.515 Q2190.5 247.853 2190.5 252.251 L2190.5 265.909 L2186.22 265.909 L2186.22 239.983 L2190.5 239.983 L2190.5 244.011 Q2191.84 241.649 2194 240.515 Q2196.15 239.358 2199.23 239.358 Q2199.67 239.358 2200.2 239.427 Q2200.73 239.474 2201.38 239.589 L2201.4 243.964 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2222.1 252.645 Q2222.1 248.015 2220.18 245.469 Q2218.28 242.923 2214.83 242.923 Q2211.4 242.923 2209.48 245.469 Q2207.58 248.015 2207.58 252.645 Q2207.58 257.251 2209.48 259.798 Q2211.4 262.344 2214.83 262.344 Q2218.28 262.344 2220.18 259.798 Q2222.1 257.251 2222.1 252.645 M2226.36 262.691 Q2226.36 269.311 2223.42 272.529 Q2220.48 275.77 2214.41 275.77 Q2212.17 275.77 2210.18 275.422 Q2208.19 275.098 2206.31 274.404 L2206.31 270.26 Q2208.19 271.279 2210.01 271.765 Q2211.84 272.251 2213.74 272.251 Q2217.93 272.251 2220.01 270.052 Q2222.1 267.876 2222.1 263.455 L2222.1 261.348 Q2220.78 263.64 2218.72 264.774 Q2216.66 265.909 2213.79 265.909 Q2209.02 265.909 2206.1 262.274 Q2203.19 258.64 2203.19 252.645 Q2203.19 246.626 2206.1 242.992 Q2209.02 239.358 2213.79 239.358 Q2216.66 239.358 2218.72 240.492 Q2220.78 241.626 2222.1 243.918 L2222.1 239.983 L2226.36 239.983 L2226.36 262.691 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2245.92 268.316 Q2244.11 272.946 2242.4 274.358 Q2240.69 275.77 2237.81 275.77 L2234.41 275.77 L2234.41 272.205 L2236.91 272.205 Q2238.67 272.205 2239.64 271.372 Q2240.62 270.538 2241.8 267.436 L2242.56 265.492 L2232.07 239.983 L2236.59 239.983 L2244.69 260.261 L2252.79 239.983 L2257.31 239.983 L2245.92 268.316 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other an the error bars are hard to see on this scale.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(Ĥ)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case is easy (and more efficient) to calculate the exact ground state energy using standard linear algebra:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using LinearAlgebra\nexact_energy = eigvals(Matrix(Ĥ))[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906392","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Read more about Rimu.jls capabilities for exact diagonalisation in the example \"Exact diagonalisation\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Comparing our results for the energy:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\"Energy from $steps_measure steps with $targetwalkers walkers:\n         Shift: $(se.mean) ± $(se.err)\n         Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n         Exact Energy: $exact_energy\")\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\n         Shift: -3.814556830153461 ± 0.09908367395962789\n         Projected Energy: -4.177400207765482 ± (0.1032568959464415, 0.09819112324625667)\n         Exact Energy: -4.021502406906392\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-Rimu/StatsTools","page":"StatsTools","title":"Module Rimu/StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module Rimu/StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h; \n    shift_name=:shift, \n    norm_name=:norm, \n    dτ=df.dτ[end], \n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names  of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj, \n    vproj_name=:vproj, \n    shift_name=:shift, \n    dτ=df.dτ[end], \n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame  returned by lomc!. The keyword arguments hproj_name, vproj_name, and  shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\", \n    vec_name=\"dot\", \n    h=0,\n    skip=0, \n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)  \n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas. \n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n)  and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector  holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector  holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by  lomc!. The keyword arguments shift_name, op_name and vec_name can be used to  change the names of the relevant columns, see AllOverlaps for default  formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific  reweighting depth can be set with keyword argument h. The default is h = 0 which  calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique  described in Umrigar et al. (1993).  Reweighting is done over h time steps and length(shift) - skip time steps are used  for the blocking analysis done with ratio_of_means().  dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ... \nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed modules.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"4","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"(4, 4)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"where the numbering of the modes folds in the two spatial dimensions. Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use a dummy groundstate address to build the Hamiltonian","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"HOCartesianContactInteractions(BoseFS{2,16}(2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); S=(4, 4), η=(1.0, 1.0), g=1.0, interaction_only=false)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then a utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.39646</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5198e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.688e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.358e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.073e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.765e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.935e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity so both blocks are required. First combine the bases of each block and convert to DVecs","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999989\n -0.9999999999999982\n -0.9999999999999973\n  1.0\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.526707-0.23646im       2.77556e-17-0.204124im             0.0+0.0im          0.526707+0.23646im       2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.372438+0.167202im              0.0-0.288675im             0.0+0.0im         -0.372438-0.167202im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+2.77556e-17im   -1.2326e-32+2.77556e-17im          0.0+0.353553im          0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      1.11022e-16+1.66533e-16im           0.0-0.612372im             0.0+0.0im       5.55112e-17+2.77556e-17im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   1.11022e-16-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im          0.0-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im               0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im               0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.167202-0.372438im         0.288675-1.95105e-16im          0.0+0.0im         -0.167202+0.372438im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im       0.23646+0.526707im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.23646-0.526707im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im               0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 7.155734338400866e-18\n 2.7755575615628883e-17\n 0.15915494309189537\n 0.15915494309189543\n 0.15915494309189548","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finished!","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalisation","page":"Exact diagonalisation","title":"Example 4: Exact diagonalisation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When working with smaller systems, or when multiple eigenvalues of a system are required, one can use an exact diagonalisation method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalisation","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Before performing exact diagonalisation, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalisation and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRep","page":"Exact diagonalisation","title":"The BasisSetRep","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRep under the hood. The BasisSetRep, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system and its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRep only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr = BasisSetRep(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To access the matrix or basis, access the sm and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.sm","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalisation","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalisation","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770728\n  0.1358418221962303\n  0.15789998694609153\n  0.8767114411781431\n  1.5305929970973349\n  1.583573261186749\n  3.072870330325868\n  3.1256726539518525\n  4.862107221562181\n  6.260694850380592\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -5.46153e-15  -0.0221221  -0.0697193   3.30753e-15  -0.0314466   -3.25591e-16  -0.0360987   -0.0161557  -1.08119e-16  -0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     5.97476e-14   0.225254   -0.132826   -3.44233e-17   0.00292026  -2.22083e-15  -0.0861158   -0.0907789  -2.63831e-16  -0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -1.1734e-13   -0.447424   -0.63969     4.40954e-14  -0.383444    -7.21042e-15  -0.431051    -0.181167   -5.40614e-16  -0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166     -0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166     -0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     2.5354e-14    0.1111     -0.172508   -2.60229e-14   0.207974     2.57978e-15   0.0848902   -0.149153   -5.57509e-16  -0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -2.14419e-14  -0.0847116   0.082999    3.13063e-14  -0.274424     5.10554e-15   0.575786    -0.61385    -1.11262e-15  -0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   1.10167e-14   0.0427486   0.0110863  -7.64953e-15   0.0663108    1.04296e-15   0.00167015   0.0832916   1.47632e-15   0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536   -0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046     -0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046     -0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536   -0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalisation","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Arpack\n\nnum_eigvals = 3\n\nsm = sparse(ham)\nvals_ar, vecs_ar = eigs(sm; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613358\n -0.759019192277075","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sm, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133637\n -0.7590191922770888\n  0.1358418221962161\n  0.1578999869460862\n  0.8767114411781414\n  1.530592997097334\n  1.583573261186733\n  3.0728703303258573\n  3.1256726539518374\n  4.862107221562171\n  6.260694850380592\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If diagonalisation takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalisation","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To use this method, you first need a starting DVec:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = DVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"DVec{BoseFS{4, 5, BitString{8, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Then, pass that vector and the Hamiltonian to eigsolve. Since the function has no way of knowing the Hamiltonian is Hermitian, we have to provide that information through the issymmetric or ishermitian keyword arguments. Make sure to only pass this argument when the Hamiltonian is actually symmetric. To check that, look at the LOStructure trait:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"LOStructure(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"IsHermitian()","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133406\n -0.7590191922770728\n  0.15789998694608443\n  0.8767114411781503\n  1.5835732611867428\n  3.125672653951841\n  4.862107221562172\n  6.402671211183111\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"1-element Vector{Float64}:\n -3.363124291613361","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalisation","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The Hamiltonian presented in this example is compatible with the ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.97986399832162\n -3.363124291613361\n -0.7590191922770769\n  0.15789998694608018\n  0.8767114411781443\n  1.5835732611867421\n  3.125672653951844\n  4.862107221562177\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to it. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"4-element Vector{Float64}:\n 0.13584182219621782\n 1.5305929970973278\n 3.0728703303258604\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalisation","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The idea here is to construct a DVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = DVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"DVec{BoseFS{4, 5, BitString{8, 1, UInt8}},Float64} with 14 entries, style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"5-element Vector{Float64}:\n 0.006686138945087796\n 0.03307039977204168\n 3.920486922565741\n 0.03307039977204166\n 0.006686138945087849","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_dvec(filename, dv) Save dict vector in BSON format.\nRimuIO.load_dvec(filename) Load BSON file into dict vector.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_dvec-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_dvec","text":"RimuIO.load_dvec(filename) -> AbstractDVec\n\nLoad AbstractDVec stored in BSON.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrames.DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_dvec-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_dvec","text":"RimuIO.save_dvec(filename, dvec)\n\nSave dvec in BSON format.\n\nNotes\n\nOnly the localpart is saved. You may need to re-wrap the result in MPIData if using MPI.\nWhen using this function with MPI, make sure to save the vectors from different ranks to different files, e.g. by saving as RimuIO.save_dvec(\"filename-$(mpi_rank()).bson\", dvec).\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"module Hamiltonians\n\nThis module defines Hamiltonian types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nG2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Usage-with-FCIQMC-and-exact-diagonalisation","page":"Hamiltonians","title":"Usage with FCIQMC and exact diagonalisation","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"In order to define a specific model Hamiltonian with relevant parameters for the model, instantiate the model like this in the input file:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"hubb = HubbardReal1D(BoseFS((1,2,0,3)); u=1.0, t=1.0)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian hubb is now ready to be used for FCIQMC in lomc! and for exact diagonalisation with KrylovKit.jl directly, or after transforming into a sparse matrix first with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using SparseArrays\nsh = sparse(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"or into a full matrix with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using LinearAlgebra\nfh = Matrix(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This functionality relies on","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.BasisSetRep\nsparse\nMatrix","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BasisSetRep","page":"Hamiltonians","title":"Rimu.Hamiltonians.BasisSetRep","text":"BasisSetRep(\n    h::AbstractHamiltonian, addr=starting_address(h);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRep(h::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator h with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsm: sparse matrix representing h in the basis basis\nbasis: vector of addresses\nh: the Hamiltonian\n\nExample\n\njulia> h = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRep(h)\nBasisSetRep(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRep(h, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRep(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#SparseArrays.sparse","page":"Hamiltonians","title":"SparseArrays.sparse","text":"sparse(h::AbstractHamiltonian, addr=starting_address(h); kwargs...)\nsparse(bsr::BasisSetRep)\n\nReturn a sparse matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.Matrix","page":"Hamiltonians","title":"Base.Matrix","text":"Matrix(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4, kwargs...)\nMatrix(bsr::BasisSetRep)\n\nReturn a dense matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"If only the basis is required and not the matrix representation it is more efficient to use","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.build_basis","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.build_basis","page":"Hamiltonians","title":"Rimu.Hamiltonians.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRep.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented LatticeGeometrys for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"G2MomCorrelator\nG2RealCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with  AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see  G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice  separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling  number and barn = NM is the mean filling number of lattice sites with N particles and  M lattice sites (or modes). \n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nMethods that need to be implemented:\n\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer)\ndiagonal_element(::AbstractHamiltonian, address)\nstarting_address(::AbstractHamiltonian)\n\nOptional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRep: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\ndot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"LatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nnum_dimensions\nneighbour_site","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LatticeGeometry","page":"Hamiltonians","title":"Rimu.Hamiltonians.LatticeGeometry","text":"abstract type LatticeGeometry{D}\n\nA LatticeGeometry controls which sites in an AbstractFockAddress are considered to be neighbours.\n\nCurrently only supported by HubbardRealSpace.\n\nAvailable implementations\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nInterface to implement\n\nBase.size: return the lattice size.\nneighbour_site(::LatticeGeometry, ::Int, ::Int)\nnum_dimensions(::LatticeGeometry)\nnum_neighbours(::LatticeGeometry)\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(size...) <: LatticeGeometry\n\nRectangular lattice with periodic boundary conditions of size size.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nThis is the default geometry used by HubbardRealSpace.\n\nExample\n\njulia> lattice = PeriodicBoundaries(5, 4) # 2D lattice of size 5 × 4\nPeriodicBoundaries(5, 4)\n\njulia> num_neighbours(lattice)\n4\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n5\n\njulia> neighbour_site(lattice, 1, 3)\n6\n\njulia> neighbour_site(lattice, 1, 4)\n16\n\nSee also\n\nLatticeGeometry\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nneighbour_site\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries\n\nRectangular lattice with hard wall boundary conditions of size size. neighbour_site() will return 0 for some neighbours of boundary sites.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nExample\n\njulia> lattice = HardwallBoundaries(5) # 1D lattice of size 5\nHardwallBoundaries(5)\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n0\n\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nLadderBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(size...; subgeometry=PeriodicBoundaries) <: LatticeGeometry\n\nLattice geometry where the first dimension is of size 2 and has hardwall boundary conditions. Using this geometry is more efficient than using HardwallBoundaries with a size of 2, as it does not generate rejected neighbours.\n\nIn other dimensions, it behaves like its subgeometry, which can be any LatticeGeometry.\n\nExample\n\njulia> lattice = LadderBoundaries(2, 3, 4) # 3D lattice of size 2 × 3 × 4\nLadderBoundaries(2, 3, 4)\n\njulia> num_neighbours(lattice)\n5\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n3\n\njulia> neighbour_site(lattice, 1, 3)\n5\n\njulia> neighbour_site(lattice, 1, 4)\n7\n\njulia> neighbour_site(lattice, 1, 5)\n19\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_neighbours","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_neighbours","text":"num_neighbours(geom::LatticeGeometry)\n\nReturn the number of neighbours each lattice site has in this geometry.\n\nNote that for efficiency reasons, all sites are expected to have the same number of neighbours. If some of the neighbours are invalid, this is handled by having neighbour_site return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_dimensions","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_dimensions","text":"num_dimensions(geom::LatticeGeometry)\n\nReturn the number of dimensions of the lattice in this geometry.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbour_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbour_site","text":"neighbour_site(geom::LatticeGeometry, site, i)\n\nFind the i-th neighbour of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions  and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Modifying-the-Project.toml-file","page":"Code testing","title":"Modifying the Project.toml file","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"In order for the testing code to be able to run on the cloud server, external packages that are accessed in the code with using or import need to be installed first. This is done in the script actions.yml via the package manager, based on the information contained in the file test/Project.toml. More packages can be added to this file using the package manager in the following way: Say we want to install the package DelimitedFiles. At the Julia REPL, type the following:","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"julia> cd(\"test\")\njulia> ]\n(v1.0) pkg> activate .\n(test) pkg> add DelimitedFiles","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"This will a new line to the file Project.toml with the name of the package and the corresponding uuid. When Pipelines now runs the commands in yml script, it will install the package DelimitedFiles before running the runtest.jl script.","category":"page"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s11\"}} where var\"#s11\", Tuple{Vararg{Int64, var\"#s10\"}} where var\"#s10\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.11.1-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (\\hat{A}_1, ..., \\hat{A}_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a replica after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step(::PostStepStrategy, ::ReplicaState).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.QMCState","page":"API","title":"Rimu.QMCState","text":"QMCState\n\nHolds all information needed to run lomc!, except the dataframe. Holds an NTuple of ReplicaStates, the Hamiltonian, and various strategies that control the algorithm. Constructed and returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState(v, wm, pnorm, params, id)\n\nStruct that holds all information needed for an independent run of the algorithm.\n\nCan be advanced a step forward with advance!.\n\nFields\n\nhamiltonian: the model Hamiltonian.\nv: vector.\npv: vector from the previous step.\nwm: working memory.\npnorm: previous walker number (see walkernumber).\nparams: the FciqmcRunStrategy.\nid: string ID appended to reported column names.\n\nSee also QMCState, ReplicaStrategy, replica_stats, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\n\nInternal structure that holds the temporary reported values as well as metadata.\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_r_strat\nreport!\nreport_after_step\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"Abstract type for defining the strategy for updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TripleLogUpdate","page":"API","title":"Rimu.TripleLogUpdate","text":"TripleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, η = 0.01) <: ShiftStrategy\n\nStrategy for updating the shift according to the extended log formula with damping parameters ζ, ξ, and η.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n- fracηdτlnleft(fracℜ(Ψ^n+1)_1^2 + ℑ(Ψ^n+1)_1^2\nℜ(Ψ^n)_1^2 + ℑ(Ψ^n)_1^2right)\n\nwhere N_mathrmw is the walkernumber(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, s_strat)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{Any, Rimu.QMCState, Rimu.ReplicaState}","page":"API","title":"Rimu.advance!","text":"advance!(report::Report, state::QMCState, replica::ReplicaState)\n\nAdvance the replica by one step. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsStochasticInteger(),\n    initiator=NonInitiator(),\n    threading=nothing\n)\n\nReturn a default starting vector for lomc!. The default choice for the starting vector is\n\nv = PDVec(address => 10; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => 10; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => 10; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and [InitiatorRule].\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::QMCState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a QMCState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nreplica::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy.\nr_strat::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a QMCState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 11)\n\njulia> size(df2)\n(200, 11)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nparams::FciqmcRunStrategy = RunTillLastStep(laststep = 100, dτ = 0.01, shift = diagonal_element(ham, address) - basic parameters of simulation state, see FciqmcRunStrategy. Parameter values are overridden by explicit keyword arguments laststep, dτ, shift; is mutated.\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step","page":"API","title":"Rimu.post_step","text":"post_step(::PostStepStrategy, ::ReplicaState) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_r_strat-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_r_strat","text":"refine_r_strat(r_strat::ReportingStrategy) -> r_strat\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, replicas::NTuple{N,ReplicaState}) -> (names, values)\n\nReturn the names and values of statistics related to N replicas consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also ReplicaState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step-Tuple{ReportingStrategy, Vararg{Any}}","page":"API","title":"Rimu.report_after_step","text":"report_after_step(::ReportingStrategy, step, report, state)\n\nThis function is called at the very end of a step, after reporting_interval steps. For example, it can be used to print some information to stdout.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nThrows an error if key already exists.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift","page":"API","title":"Rimu.update_shift","text":"update_shift(s <: ShiftStrategy, shift, shiftMode, tnorm, pnorm, dτ, step, df, v_new, v_old)\n\nUpdate the shift according to strategy s. See ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Rimu/StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground-state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"hamiltonian = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"dvec = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"r_strat = ReportToFile(filename=\"result.arrow\", save_if=is_mpi_root(), reporting_interval = 1, chunk_size=1000, io=devnull)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step = ProjectedEnergy(hamiltonian, dvec)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|1 0 0 0 8 0 0 0 1 0⟩\" => 5.692099788303083, fs\"|0 0 0 0 8 0 0 0 0 2⟩\" => 4.024922359499621, fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 7.0, fs\"|0 0 1 0 8 0 1 0 0 0⟩\" => 5.692099788303083, fs\"|0 0 0 1 8 1 0 0 0 0⟩\" => 5.692099788303083, fs\"|0 1 0 0 8 0 0 1 0 0⟩\" => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(hamiltonian, dvec; r_strat, s_strat, post_step, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\nwalkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
