var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2162309672286114 ± 0.0016392552437429382\n   G2(1) = 0.9159476878911498 ± 0.0007126104718328323\n   G2(2) = 0.981528225160517 ± 0.0007299695424004876\n   G2(3) = 0.9888172066680556 ± 0.0010028935321622536\n   G2(4) = 0.981528225160517 ± 0.0007299695424004876\n   G2(5) = 0.9159476878911498 ± 0.0007126104718328323\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.073074244591073 ± 0.15936146470373527\n   Replica 2: -3.9822558036797493 ± 0.12646304986473145\n   Replica 3: -3.9852816580307526 ± 0.12320542388618405\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.8 2211.02,1260.8 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.06 2211.02,1004.06 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.316 2211.02,747.316 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.576 2211.02,490.576 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.835 2211.02,233.835 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.8 423.181,1260.8 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.06 423.181,1004.06 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.316 423.181,747.316 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.576 423.181,490.576 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.835 423.181,233.835 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M356.339 1246.6 Q352.728 1246.6 350.899 1250.16 Q349.094 1253.7 349.094 1260.83 Q349.094 1267.94 350.899 1271.5 Q352.728 1275.05 356.339 1275.05 Q359.973 1275.05 361.779 1271.5 Q363.608 1267.94 363.608 1260.83 Q363.608 1253.7 361.779 1250.16 Q359.973 1246.6 356.339 1246.6 M356.339 1242.89 Q362.149 1242.89 365.205 1247.5 Q368.284 1252.08 368.284 1260.83 Q368.284 1269.56 365.205 1274.17 Q362.149 1278.75 356.339 1278.75 Q350.529 1278.75 347.45 1274.17 Q344.395 1269.56 344.395 1260.83 Q344.395 1252.08 347.45 1247.5 Q350.529 1242.89 356.339 1242.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M290.043 1017.4 L306.363 1017.4 L306.363 1021.34 L284.418 1021.34 L284.418 1017.4 Q287.08 1014.65 291.664 1010.02 Q296.27 1005.37 297.451 1004.02 Q299.696 1001.5 300.576 999.763 Q301.478 998.004 301.478 996.314 Q301.478 993.56 299.534 991.824 Q297.613 990.088 294.511 990.088 Q292.312 990.088 289.858 990.851 Q287.427 991.615 284.65 993.166 L284.65 988.444 Q287.474 987.31 289.927 986.731 Q292.381 986.152 294.418 986.152 Q299.789 986.152 302.983 988.838 Q306.177 991.523 306.177 996.013 Q306.177 998.143 305.367 1000.06 Q304.58 1001.96 302.474 1004.56 Q301.895 1005.23 298.793 1008.44 Q295.691 1011.64 290.043 1017.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M316.224 986.777 L334.58 986.777 L334.58 990.713 L320.506 990.713 L320.506 999.185 Q321.524 998.837 322.543 998.675 Q323.562 998.49 324.58 998.49 Q330.367 998.49 333.747 1001.66 Q337.126 1004.83 337.126 1010.25 Q337.126 1015.83 333.654 1018.93 Q330.182 1022.01 323.862 1022.01 Q321.687 1022.01 319.418 1021.64 Q317.173 1021.27 314.765 1020.53 L314.765 1015.83 Q316.849 1016.96 319.071 1017.52 Q321.293 1018.07 323.77 1018.07 Q327.774 1018.07 330.112 1015.97 Q332.45 1013.86 332.45 1010.25 Q332.45 1006.64 330.112 1004.53 Q327.774 1002.43 323.77 1002.43 Q321.895 1002.43 320.02 1002.84 Q318.168 1003.26 316.224 1004.14 L316.224 986.777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 989.856 Q352.728 989.856 350.899 993.421 Q349.094 996.962 349.094 1004.09 Q349.094 1011.2 350.899 1014.76 Q352.728 1018.3 356.339 1018.3 Q359.973 1018.3 361.779 1014.76 Q363.608 1011.2 363.608 1004.09 Q363.608 996.962 361.779 993.421 Q359.973 989.856 356.339 989.856 M356.339 986.152 Q362.149 986.152 365.205 990.759 Q368.284 995.342 368.284 1004.09 Q368.284 1012.82 365.205 1017.43 Q362.149 1022.01 356.339 1022.01 Q350.529 1022.01 347.45 1017.43 Q344.395 1012.82 344.395 1004.09 Q344.395 995.342 347.45 990.759 Q350.529 986.152 356.339 986.152 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M286.062 730.036 L304.418 730.036 L304.418 733.972 L290.344 733.972 L290.344 742.444 Q291.363 742.097 292.381 741.935 Q293.4 741.749 294.418 741.749 Q300.205 741.749 303.585 744.921 Q306.964 748.092 306.964 753.509 Q306.964 759.087 303.492 762.189 Q300.02 765.268 293.701 765.268 Q291.525 765.268 289.256 764.897 Q287.011 764.527 284.603 763.786 L284.603 759.087 Q286.687 760.221 288.909 760.777 Q291.131 761.333 293.608 761.333 Q297.613 761.333 299.951 759.226 Q302.288 757.12 302.288 753.509 Q302.288 749.897 299.951 747.791 Q297.613 745.685 293.608 745.685 Q291.733 745.685 289.858 746.101 Q288.006 746.518 286.062 747.397 L286.062 730.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M326.177 733.115 Q322.566 733.115 320.737 736.68 Q318.932 740.222 318.932 747.351 Q318.932 754.458 320.737 758.022 Q322.566 761.564 326.177 761.564 Q329.811 761.564 331.617 758.022 Q333.446 754.458 333.446 747.351 Q333.446 740.222 331.617 736.68 Q329.811 733.115 326.177 733.115 M326.177 729.411 Q331.987 729.411 335.043 734.018 Q338.122 738.601 338.122 747.351 Q338.122 756.078 335.043 760.684 Q331.987 765.268 326.177 765.268 Q320.367 765.268 317.288 760.684 Q314.233 756.078 314.233 747.351 Q314.233 738.601 317.288 734.018 Q320.367 729.411 326.177 729.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 733.115 Q352.728 733.115 350.899 736.68 Q349.094 740.222 349.094 747.351 Q349.094 754.458 350.899 758.022 Q352.728 761.564 356.339 761.564 Q359.973 761.564 361.779 758.022 Q363.608 754.458 363.608 747.351 Q363.608 740.222 361.779 736.68 Q359.973 733.115 356.339 733.115 M356.339 729.411 Q362.149 729.411 365.205 734.018 Q368.284 738.601 368.284 747.351 Q368.284 756.078 365.205 760.684 Q362.149 765.268 356.339 765.268 Q350.529 765.268 347.45 760.684 Q344.395 756.078 344.395 747.351 Q344.395 738.601 347.45 734.018 Q350.529 729.411 356.339 729.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M284.835 473.296 L307.057 473.296 L307.057 475.286 L294.511 507.856 L289.627 507.856 L301.432 477.231 L284.835 477.231 L284.835 473.296 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M316.224 473.296 L334.58 473.296 L334.58 477.231 L320.506 477.231 L320.506 485.703 Q321.524 485.356 322.543 485.194 Q323.562 485.009 324.58 485.009 Q330.367 485.009 333.747 488.18 Q337.126 491.351 337.126 496.768 Q337.126 502.346 333.654 505.448 Q330.182 508.527 323.862 508.527 Q321.687 508.527 319.418 508.157 Q317.173 507.786 314.765 507.045 L314.765 502.346 Q316.849 503.481 319.071 504.036 Q321.293 504.592 323.77 504.592 Q327.774 504.592 330.112 502.485 Q332.45 500.379 332.45 496.768 Q332.45 493.157 330.112 491.05 Q327.774 488.944 323.77 488.944 Q321.895 488.944 320.02 489.36 Q318.168 489.777 316.224 490.657 L316.224 473.296 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 476.374 Q352.728 476.374 350.899 479.939 Q349.094 483.481 349.094 490.61 Q349.094 497.717 350.899 501.282 Q352.728 504.823 356.339 504.823 Q359.973 504.823 361.779 501.282 Q363.608 497.717 363.608 490.61 Q363.608 483.481 361.779 479.939 Q359.973 476.374 356.339 476.374 M356.339 472.671 Q362.149 472.671 365.205 477.277 Q368.284 481.86 368.284 490.61 Q368.284 499.337 365.205 503.944 Q362.149 508.527 356.339 508.527 Q350.529 508.527 347.45 503.944 Q344.395 499.337 344.395 490.61 Q344.395 481.86 347.45 477.277 Q350.529 472.671 356.339 472.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M256.664 247.18 L264.303 247.18 L264.303 220.814 L255.992 222.481 L255.992 218.221 L264.256 216.555 L268.932 216.555 L268.932 247.18 L276.571 247.18 L276.571 251.115 L256.664 251.115 L256.664 247.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M296.015 219.633 Q292.404 219.633 290.576 223.198 Q288.77 226.74 288.77 233.869 Q288.77 240.976 290.576 244.541 Q292.404 248.082 296.015 248.082 Q299.65 248.082 301.455 244.541 Q303.284 240.976 303.284 233.869 Q303.284 226.74 301.455 223.198 Q299.65 219.633 296.015 219.633 M296.015 215.93 Q301.826 215.93 304.881 220.536 Q307.96 225.12 307.96 233.869 Q307.96 242.596 304.881 247.203 Q301.826 251.786 296.015 251.786 Q290.205 251.786 287.127 247.203 Q284.071 242.596 284.071 233.869 Q284.071 225.12 287.127 220.536 Q290.205 215.93 296.015 215.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M326.177 219.633 Q322.566 219.633 320.737 223.198 Q318.932 226.74 318.932 233.869 Q318.932 240.976 320.737 244.541 Q322.566 248.082 326.177 248.082 Q329.811 248.082 331.617 244.541 Q333.446 240.976 333.446 233.869 Q333.446 226.74 331.617 223.198 Q329.811 219.633 326.177 219.633 M326.177 215.93 Q331.987 215.93 335.043 220.536 Q338.122 225.12 338.122 233.869 Q338.122 242.596 335.043 247.203 Q331.987 251.786 326.177 251.786 Q320.367 251.786 317.288 247.203 Q314.233 242.596 314.233 233.869 Q314.233 225.12 317.288 220.536 Q320.367 215.93 326.177 215.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 219.633 Q352.728 219.633 350.899 223.198 Q349.094 226.74 349.094 233.869 Q349.094 240.976 350.899 244.541 Q352.728 248.082 356.339 248.082 Q359.973 248.082 361.779 244.541 Q363.608 240.976 363.608 233.869 Q363.608 226.74 361.779 223.198 Q359.973 219.633 356.339 219.633 M356.339 215.93 Q362.149 215.93 365.205 220.536 Q368.284 225.12 368.284 233.869 Q368.284 242.596 365.205 247.203 Q362.149 251.786 356.339 251.786 Q350.529 251.786 347.45 247.203 Q344.395 242.596 344.395 233.869 Q344.395 225.12 347.45 220.536 Q350.529 215.93 356.339 215.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.835 4017.76,233.835 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.43 456.554,1249.34 457.123,1249.18 457.691,1248.95 458.259,1248.63 458.828,1248.26 459.396,1245.76 459.964,1245.33 460.533,1244.77 461.101,1243.15 461.669,1242.52 462.238,1240.75 462.806,1239.96 463.375,1238.04 463.943,1237.07 464.511,1235.99 465.08,1234.81 465.648,1232.5 466.216,1231.08 466.785,1229.59 467.353,1227.97 467.921,1226.21 468.49,1224.27 469.058,1221.21 469.626,1219.05 470.195,1216.71 470.763,1214.24 471.331,1211.65 471.9,1208.81 472.468,1204.8 473.036,1201.65 473.605,1198.3 474.173,1194.79 474.741,1190.02 475.31,1186.06 475.878,1181.92 476.446,1177.57 477.015,1172.96 477.583,1167.15 478.152,1161.14 478.72,1155.95 479.288,1148.54 479.857,1142.89 480.425,1136.03 480.993,1130.02 481.562,1121.66 482.13,1112.04 482.698,1104.16 483.267,1095.2 483.835,1088.05 484.403,1079.65 484.972,1072.17 485.54,1062.42 486.108,1053.64 486.677,1042.67 487.245,1034.76 487.813,1025.6 488.382,1014.19 488.95,1004.81 489.518,996.433 490.087,986.803 490.655,974.945 491.224,963.134 491.792,954.248 492.36,943.392 492.929,933.646 493.497,922.587 494.065,912.696 494.634,903.599 495.202,893.45 495.77,883.277 496.339,873.197 496.907,862.029 497.475,850.878 498.044,838.74 498.612,828.517 499.18,817.37 499.749,805.177 500.317,795.369 500.885,785.427 501.454,776.549 502.022,766.656 502.59,757.755 503.159,746.862 503.727,736.998 504.295,727.355 504.864,716.468 505.432,706.842 506.001,696.172 506.569,684.661 507.137,675.422 507.706,667.227 508.274,657.213 508.842,649.198 509.411,639.189 509.979,629.363 510.547,618.798 511.116,611.437 511.684,603.131 512.252,595.985 512.821,588.641 513.389,579.536 513.957,572.515 514.526,564.474 515.094,556.756 515.662,548.089 516.231,541.737 516.799,533.424 517.367,526.285 517.936,518.318 518.504,512.362 519.072,503.505 519.641,495.994 520.209,489.814 520.778,482.753 521.346,477.668 521.914,470.592 522.483,462.51 523.051,456.96 523.619,451.404 524.188,445.936 524.756,441.556 525.324,436.207 525.893,428.977 526.461,423.026 527.029,418.323 527.598,414.818 528.166,411.261 528.734,405.614 529.303,403.444 529.871,399.075 530.439,393.764 531.008,390.545 531.576,386.329 532.144,380.438 532.713,376.851 533.281,372.014 533.85,367.589 534.418,366.192 534.986,362.754 535.555,359.622 536.123,356.461 536.691,354.341 537.26,350.998 537.828,348.918 538.396,344.557 538.965,342.557 539.533,337.492 540.101,332.618 540.67,330.113 541.238,326.636 541.806,323.263 542.375,319.268 542.943,319.275 543.511,316.451 544.08,313.558 544.648,310.559 545.216,309.84 545.785,307.912 546.353,308.126 546.921,307.571 547.49,307.719 548.058,304.881 548.627,303.942 549.195,302.848 549.763,300.053 550.332,298.269 550.9,295.664 551.468,295.174 552.037,294.616 552.605,295.207 553.173,291.389 553.742,289.701 554.31,289.371 554.878,289.733 555.447,288.897 556.015,288.286 556.583,287.491 557.152,284.741 557.72,283.226 558.288,281.726 558.857,281.166 559.425,278.775 559.993,279.247 560.562,279.715 561.13,280.076 561.698,278.654 562.267,279.233 562.835,277.756 563.404,277.147 563.972,276.778 564.54,275.375 565.109,273.748 565.677,272.306 566.245,270.972 566.814,272.63 567.382,272.098 567.95,268.688 568.519,268.625 569.087,267.35 569.655,267.315 570.224,266.869 570.792,266.58 571.36,266.216 571.929,264.784 572.497,263.596 573.065,263.55 573.634,264.32 574.202,263.231 574.77,262.085 575.339,261.676 575.907,262.554 576.476,261.22 577.044,259.065 577.612,261.039 578.181,259.679 578.749,258.213 579.317,256.018 579.886,257.066 580.454,256.841 581.022,257.781 581.591,256.7 582.159,257.441 582.727,256.243 583.296,256.191 583.864,257.01 584.432,256.752 585.001,257.473 585.569,254.946 586.137,252.632 586.706,252.448 587.274,251.601 587.842,250.466 588.411,250.592 588.979,249.682 589.547,250.093 590.116,248.969 590.684,250.416 591.253,250.174 591.821,249.983 592.389,248.86 592.958,250.798 593.526,249.598 594.094,250.568 594.663,250.31 595.231,248.981 595.799,249.905 596.368,250.981 596.936,250.496 597.504,250.275 598.073,248.959 598.641,248.745 599.209,246.689 599.778,244.682 600.346,246.037 600.914,247.006 601.483,243.893 602.051,242.13 602.619,241.599 603.188,242.753 603.756,243.898 604.325,242.889 604.893,243.24 605.461,243.535 606.03,243.548 606.598,244.604 607.166,244.468 607.735,245.561 608.303,245.605 608.871,244.579 609.44,245.755 610.008,247.813 610.576,245.624 611.145,244.516 611.713,245.596 612.281,245.65 612.85,246.625 613.418,246.376 613.986,244.218 614.555,244.175 615.123,246.314 615.691,247.12 616.26,244.883 616.828,244.607 617.396,244.469 617.965,242.401 618.533,242.345 619.102,243.193 619.67,243.263 620.238,243.017 620.807,243.223 621.375,242.138 621.943,241.068 622.512,239.275 623.08,239.567 623.648,238.774 624.217,239.13 624.785,238.385 625.353,237.712 625.922,238.051 626.49,236.199 627.058,235.756 627.627,235.139 628.195,234.661 628.763,235.347 629.332,236.895 629.9,237.433 630.468,237.834 631.037,239.299 631.605,239.52 632.173,239.818 632.742,239.044 633.31,237.302 633.879,236.746 634.447,237.114 635.015,238.475 635.584,237.799 636.152,237.007 636.72,236.317 637.289,234.885 637.857,235.146 638.425,233.627 638.994,232.137 639.562,236.175 640.13,236.626 640.699,236.977 641.267,237.287 641.835,239.574 642.404,238.758 642.972,240.126 643.54,240.276 644.109,240.424 644.677,239.493 645.245,238.573 645.814,239.89 646.382,238.832 646.951,238.984 647.519,239.357 648.087,236.73 648.656,240.337 649.224,240.632 649.792,239.741 650.361,236.667 650.929,240.071 651.497,240.013 652.066,242.265 652.634,243.353 653.202,241.031 653.771,240.783 654.339,241.814 654.907,242.631 655.476,242.512 656.044,242.381 656.612,242.088 657.181,241.039 657.749,243.109 658.317,242.02 658.886,241.846 659.454,240.785 660.022,237.818 660.591,238.932 661.159,239.954 661.728,240.145 662.296,238.171 662.864,239.423 663.433,238.405 664.001,240.531 664.569,241.518 665.138,243.331 665.706,244.032 666.274,244.944 666.843,244.734 667.411,244.273 667.979,243.953 668.548,244.824 669.116,244.594 669.684,244.251 670.253,244.798 670.821,244.435 671.389,242.771 671.958,240.598 672.526,241.469 673.094,241.174 673.663,238.818 674.231,238.803 674.799,238.748 675.368,239.879 675.936,239.831 676.505,237.511 677.073,236.532 677.641,236.667 678.21,235.71 678.778,234.869 679.346,235.151 679.915,235.615 680.483,235.843 681.051,237.138 681.62,239.413 682.188,239.185 682.756,238.054 683.325,236.024 683.893,233.122 684.461,233.17 685.03,233.516 685.598,233.809 686.166,234.153 686.735,235.48 687.303,234.876 687.871,235.978 688.44,236.017 689.008,234.16 689.577,235.593 690.145,236.712 690.713,238.606 691.282,238.468 691.85,238.346 692.418,238.248 692.987,237.222 693.555,237.16 694.123,235.049 694.692,235.327 695.26,235.529 695.828,235.563 696.397,236.682 696.965,237.677 697.533,236.664 698.102,233.773 698.67,234.093 699.238,233.625 699.807,234.858 700.375,234.945 700.943,236.067 701.512,234.126 702.08,235.374 702.648,236.537 703.217,236.879 703.785,236.676 704.354,232.702 704.922,233.919 705.49,235.211 706.059,237.433 706.627,237.274 707.195,237.373 707.764,236.291 708.332,236.4 708.9,235.263 709.469,235.447 710.037,236.671 710.605,235.971 711.174,233.889 711.742,234.061 712.31,234.356 712.879,235.599 713.447,235.874 714.015,239.168 714.584,238.942 715.152,238.71 715.72,237.626 716.289,237.736 716.857,236.777 717.425,234.782 717.994,234.888 718.562,237.963 719.131,237.969 719.699,238.769 720.267,239.562 720.836,238.364 721.404,236.085 721.972,234.283 722.541,235.597 723.109,236.725 723.677,236.633 724.246,235.658 724.814,235.809 725.382,234.761 725.951,234.926 726.519,238.078 727.087,237.884 727.656,237.652 728.224,237.307 728.792,238.434 729.361,239.402 729.929,239.212 730.497,237.16 731.066,238.25 731.634,239.26 732.203,239.128 732.771,238.798 733.339,238.632 733.908,238.432 734.476,238.347 735.044,238.169 735.613,239.161 736.181,236.799 736.749,236.619 737.318,238.559 737.886,236.354 738.454,237.372 739.023,237.136 739.591,237.074 740.159,236.937 740.728,237.888 741.296,237.641 741.864,240.528 742.433,241.049 743.001,240.471 743.569,238.328 744.138,238.175 744.706,236.813 745.274,236.534 745.843,236.407 746.411,237.183 746.98,238.06 747.548,236.8 748.116,236.774 748.685,235.613 749.253,234.537 749.821,232.683 750.39,231.908 750.958,232.338 751.526,234.919 752.095,234.703 752.663,235.809 753.231,234.843 753.8,232.68 754.368,232.748 754.936,232.961 755.505,232.934 756.073,232.157 756.641,232.383 757.21,233.403 757.778,233.413 758.346,232.578 758.915,231.719 759.483,229.928 760.052,230.369 760.62,230.05 761.188,230.292 761.757,229.342 762.325,229.615 762.893,226.919 763.462,228.592 764.03,229.98 764.598,230.288 765.167,233.78 765.735,233.857 766.303,232.947 766.872,232.335 767.44,230.347 768.008,229.855 768.577,232.239 769.145,235.459 769.713,234.393 770.282,235.571 770.85,235.723 771.418,235.7 771.987,233.768 772.555,233.004 773.123,232.407 773.692,232.626 774.26,232.75 774.829,232.88 775.397,234.018 775.965,234.19 776.534,237.474 777.102,237.524 777.67,236.554 778.239,236.549 778.807,233.453 779.375,233.664 779.944,232.729 780.512,232.331 781.08,230.365 781.649,233.985 782.217,233.204 782.785,235.336 783.354,234.618 783.922,233.665 784.49,235.22 785.059,234.278 785.627,235.37 786.195,234.609 786.764,230.619 787.332,229.794 787.9,231.664 788.469,228.891 789.037,228.503 789.606,229.067 790.174,229.502 790.742,230.153 791.311,231.762 791.879,233.273 792.447,233.448 793.016,236.677 793.584,237.569 794.152,237.655 794.721,236.611 795.289,235.647 795.857,234.744 796.426,234.107 796.994,234.301 797.562,236.374 798.131,236.3 798.699,236.423 799.267,237.542 799.836,236.523 800.404,237.863 800.972,240.011 801.541,240.905 802.109,241.551 802.678,242.071 803.246,242.666 803.814,241.163 804.383,240.533 804.951,240.397 805.519,238.96 806.088,236.456 806.656,235.389 807.224,232.459 807.793,233.764 808.361,232.983 808.929,232.133 809.498,233.343 810.066,232.188 810.634,232.247 811.203,232.361 811.771,233.746 812.339,232.727 812.908,234 813.476,232.247 814.044,232.538 814.613,232.686 815.181,233.92 815.749,233.963 816.318,233.258 816.886,233.533 817.455,237.814 818.023,236.686 818.591,239.74 819.16,237.414 819.728,237.445 820.296,236.143 820.865,237.212 821.433,233.899 822.001,235.813 822.57,234.543 823.138,230.569 823.706,229.765 824.275,230.1 824.843,230.417 825.411,231.883 825.98,231.218 826.548,229.535 827.116,230.242 827.685,229.67 828.253,232.078 828.821,233.24 829.39,235.577 829.958,234.719 830.526,234.836 831.095,235.729 831.663,234.648 832.232,234.835 832.8,234.953 833.368,234.056 833.937,234.105 834.505,232.177 835.073,234.514 835.642,232.444 836.21,232.586 836.778,230.865 837.347,233.552 837.915,234.509 838.483,237.432 839.052,237.154 839.62,237.183 840.188,237.975 840.757,236.876 841.325,235.869 841.893,235.35 842.462,235.382 843.03,234.354 843.598,232.396 844.167,233.77 844.735,232.817 845.304,233.007 845.872,233.28 846.44,234.423 847.009,237.564 847.577,236.551 848.145,236.458 848.714,237.38 849.282,240.301 849.85,242.894 850.419,243.551 850.987,244.002 851.555,243.209 852.124,242.658 852.692,239.993 853.26,240.595 853.829,240.155 854.397,241.824 854.965,241.489 855.534,238.952 856.102,237.478 856.67,238.297 857.239,236.965 857.807,236.479 858.375,234.081 858.944,233.026 859.512,231.192 860.081,233.488 860.649,234.643 861.217,234.437 861.786,234.378 862.354,236.372 862.922,235.219 863.491,234.126 864.059,234.243 864.627,234.228 865.196,233.319 865.764,235.508 866.332,236.587 866.901,239.35 867.469,238.887 868.037,236.502 868.606,235.375 869.174,236.283 869.742,234.872 870.311,233.821 870.879,231.633 871.447,232.992 872.016,234.076 872.584,232.089 873.152,231.168 873.721,229.37 874.289,229.823 874.858,231.188 875.426,232.428 875.994,232.46 876.563,231.64 877.131,231.927 877.699,233.985 878.268,235.063 878.836,236.087 879.404,236.023 879.973,237.983 880.541,237.743 881.109,237.559 881.678,239.407 882.246,238.044 882.814,239.715 883.383,238.367 883.951,239.099 884.519,238.666 885.088,238.291 885.656,237.964 886.224,238.704 886.793,238.398 887.361,239.242 887.93,240.952 888.498,238.174 889.066,236.48 889.635,238.411 890.203,237.111 890.771,237.797 891.34,236.273 891.908,236.025 892.476,235.802 893.045,236.785 893.613,238.56 894.181,238.193 894.75,238.894 895.318,237.284 895.886,235.859 896.455,235.571 897.023,233.246 897.591,232.032 898.16,233.177 898.728,231.886 899.296,232.072 899.865,232.276 900.433,232.223 901.001,232.307 901.57,231.367 902.138,231.622 902.707,229.621 903.275,229.819 903.843,229.815 904.412,230.101 904.98,230.418 905.548,227.634 906.117,225.91 906.685,225.286 907.253,226.783 907.822,229.392 908.39,228.672 908.958,228.109 909.527,229.557 910.095,229.728 910.663,232.215 911.232,233.464 911.8,235.607 912.368,232.676 912.937,233.821 913.505,231.954 914.073,230.128 914.642,229.338 915.21,229.844 915.779,228.892 916.347,229.3 916.915,232.847 917.484,231.818 918.052,229.931 918.62,230.088 919.189,230.49 919.757,229.888 920.325,230.332 920.894,230.731 921.462,230.141 922.03,228.588 922.599,227 923.167,228.672 923.735,231.215 924.304,232.615 924.872,234.799 925.44,235.879 926.009,235.782 926.577,233.718 927.145,233.953 927.714,234.924 928.282,233.025 928.85,234.287 929.419,233.332 929.987,234.537 930.556,235.438 931.124,234.373 931.692,232.361 932.261,232.538 932.829,232.916 933.397,229.17 933.966,230.695 934.534,231.168 935.102,231.386 935.671,230.637 936.239,231.049 936.807,232.385 937.376,228.789 937.944,228.184 938.512,229.649 939.081,231.027 939.649,232.382 940.217,232.648 940.786,229.945 941.354,229.214 941.922,228.705 942.491,227.292 943.059,227.993 943.627,227.405 944.196,228.189 944.764,230.024 945.333,230.263 945.901,230.729 946.469,232.192 947.038,231.691 947.606,233.12 948.174,235.365 948.743,234.528 949.311,236.785 949.879,237.058 950.448,237.099 951.016,235.212 951.584,236.247 952.153,238.308 952.721,238.15 953.289,236.973 953.858,237.053 954.426,237.887 954.994,237.836 955.563,237.981 956.131,236.77 956.699,239.826 957.268,239.826 957.836,241.799 958.405,240.178 958.973,239.59 959.541,238.515 960.11,237.452 960.678,236.486 961.246,236.525 961.815,236.774 962.383,235.714 962.951,238.683 963.52,238.393 964.088,239.203 964.656,238.905 965.225,238.563 965.793,236.185 966.361,237.848 966.93,236.631 967.498,236.598 968.066,236.332 968.635,236.308 969.203,235.179 969.771,234.92 970.34,233.923 970.908,236.171 971.476,236.995 972.045,237.907 972.613,236.566 973.182,236.417 973.75,236.38 974.318,235.104 974.887,237.167 975.455,234.917 976.023,235.972 976.592,232.922 977.16,232.837 977.728,231.961 978.297,231.182 978.865,230.589 979.433,231.279 980.002,231.576 980.57,230.965 981.138,232.344 981.707,233.507 982.275,234.652 982.843,235.702 983.412,234.481 983.98,235.627 984.548,233.587 985.117,232.846 985.685,232.996 986.253,234.082 986.822,233.011 987.39,233.191 987.959,232.562 988.527,232.597 989.095,231.705 989.664,231.851 990.232,234.328 990.8,235.458 991.369,234.601 991.937,234.442 992.505,233.581 993.074,230.362 993.642,231.72 994.21,231.911 994.779,231.082 995.347,232.157 995.915,231.365 996.484,234.869 997.052,234.785 997.62,234.738 998.189,232.504 998.757,230.782 999.325,233.325 999.894,234.416 1000.46,236.516 1001.03,240.563 1001.6,239.058 1002.17,238.603 1002.74,238.362 1003.3,237.993 1003.87,237.599 1004.44,239.393 1005.01,237.774 1005.58,238.637 1006.15,238.283 1006.71,236.057 1007.28,237.867 1007.85,238.507 1008.42,238.073 1008.99,236.705 1009.56,234.358 1010.12,235.392 1010.69,234.293 1011.26,233.333 1011.83,231.34 1012.4,231.57 1012.97,233.674 1013.53,234.885 1014.1,231.794 1014.67,233.983 1015.24,231.872 1015.81,232.202 1016.38,231.572 1016.94,233.819 1017.51,233.751 1018.08,234.761 1018.65,235.616 1019.22,239.436 1019.79,240.092 1020.35,242.735 1020.92,242.142 1021.49,239.471 1022.06,238.86 1022.63,237.25 1023.2,236.945 1023.76,237.848 1024.33,238.683 1024.9,239.367 1025.47,240.127 1026.04,241.632 1026.61,241.07 1027.17,239.453 1027.74,237.823 1028.31,237.466 1028.88,237.104 1029.45,235.627 1030.02,235.304 1030.58,234.09 1031.15,234.106 1031.72,235.021 1032.29,233.899 1032.86,233.737 1033.43,233.647 1033.99,233.692 1034.56,233.704 1035.13,234.818 1035.7,234.911 1036.27,235.751 1036.84,236.4 1037.4,236.966 1037.97,237.491 1038.54,236.943 1039.11,237.42 1039.68,239.297 1040.25,236.984 1040.81,236.756 1041.38,238.535 1041.95,237.185 1042.52,235.864 1043.09,234.609 1043.66,234.351 1044.22,235.074 1044.79,234.905 1045.36,232.25 1045.93,232.157 1046.5,231.948 1047.07,232.861 1047.63,232.861 1048.2,231.835 1048.77,232.954 1049.34,232.829 1049.91,232.904 1050.48,231.495 1051.05,233.563 1051.61,235.595 1052.18,235.418 1052.75,235.287 1053.32,236.083 1053.89,236.744 1054.46,235.277 1055.02,235.207 1055.59,232.054 1056.16,230.848 1056.73,230.128 1057.3,230.472 1057.87,231.38 1058.43,230.427 1059,228.581 1059.57,227.815 1060.14,225.776 1060.71,227.357 1061.28,227.848 1061.84,229.976 1062.41,231.06 1062.98,229.243 1063.55,228.291 1064.12,226.617 1064.69,227.233 1065.25,226.728 1065.82,227.205 1066.39,226.73 1066.96,228.042 1067.53,227.538 1068.1,225.964 1068.66,226.348 1069.23,227.114 1069.8,226.784 1070.37,229.344 1070.94,229.829 1071.51,230.115 1072.07,230.36 1072.64,230.54 1073.21,231.78 1073.78,231.001 1074.35,232.094 1074.92,232.213 1075.48,234.54 1076.05,234.449 1076.62,233.508 1077.19,233.54 1077.76,232.502 1078.33,235.812 1078.89,233.702 1079.46,234.754 1080.03,232.688 1080.6,232.834 1081.17,232.038 1081.74,232.386 1082.3,232.468 1082.87,232.562 1083.44,233.459 1084.01,235.492 1084.58,235.548 1085.15,233.404 1085.71,233.391 1086.28,234.571 1086.85,233.535 1087.42,233.476 1087.99,234.505 1088.56,236.687 1089.12,234.382 1089.69,233.297 1090.26,234.349 1090.83,234.291 1091.4,233.162 1091.97,234.378 1092.53,235.454 1093.1,234.599 1093.67,234.698 1094.24,234.706 1094.81,235.639 1095.38,235.791 1095.94,234.567 1096.51,237.64 1097.08,237.38 1097.65,239.445 1098.22,241.107 1098.79,239.669 1099.35,239.341 1099.92,237.979 1100.49,236.589 1101.06,236.57 1101.63,237.454 1102.2,237.109 1102.76,239.973 1103.33,238.55 1103.9,239.278 1104.47,238.028 1105.04,238.602 1105.61,237.251 1106.17,236.051 1106.74,235.904 1107.31,236.887 1107.88,236.783 1108.45,236.411 1109.02,236.131 1109.58,237.963 1110.15,236.7 1110.72,236.602 1111.29,236.324 1111.86,234.094 1112.43,236.027 1112.99,235.816 1113.56,234.506 1114.13,233.31 1114.7,233.172 1115.27,234.164 1115.84,233.794 1116.4,234.761 1116.97,235.528 1117.54,237.088 1118.11,236.049 1118.68,237.908 1119.25,238.482 1119.81,238.193 1120.38,236.772 1120.95,235.609 1121.52,235.465 1122.09,233.279 1122.66,233.379 1123.23,233.303 1123.79,233.394 1124.36,233.268 1124.93,233.026 1125.5,231.991 1126.07,231.112 1126.64,232.287 1127.2,231.527 1127.77,230.472 1128.34,229.635 1128.91,229.8 1129.48,229.1 1130.05,230.526 1130.61,231.543 1131.18,232.701 1131.75,230.653 1132.32,229.686 1132.89,228.988 1133.46,228.166 1134.02,228.54 1134.59,229.037 1135.16,227.433 1135.73,224.916 1136.3,224.64 1136.87,221.149 1137.43,222.221 1138,222.006 1138.57,219.895 1139.14,220.97 1139.71,222.922 1140.28,221.899 1140.84,224.99 1141.41,228.911 1141.98,229.41 1142.55,228.829 1143.12,230.294 1143.69,230.875 1144.25,230.143 1144.82,232.426 1145.39,232.795 1145.96,230.178 1146.53,230.428 1147.1,229.801 1147.66,230.421 1148.23,230.96 1148.8,231.354 1149.37,231.58 1149.94,234.009 1150.51,234.109 1151.07,233.197 1151.64,232.517 1152.21,233.874 1152.78,234.861 1153.35,235.125 1153.92,234.287 1154.48,234.534 1155.05,236.789 1155.62,236.607 1156.19,237.531 1156.76,235.37 1157.33,235.595 1157.89,233.686 1158.46,231.909 1159.03,230.245 1159.6,231.681 1160.17,231.886 1160.74,233.238 1161.3,234.441 1161.87,236.737 1162.44,236.983 1163.01,235.64 1163.58,237.554 1164.15,236.731 1164.71,236.738 1165.28,237.745 1165.85,239.526 1166.42,241.096 1166.99,240.683 1167.56,240.372 1168.12,239.042 1168.69,239.834 1169.26,240.459 1169.83,238.262 1170.4,241.004 1170.97,240.649 1171.53,240.107 1172.1,239.727 1172.67,241.128 1173.24,242.76 1173.81,242.042 1174.38,241.562 1174.94,242.121 1175.51,241.764 1176.08,242.223 1176.65,244.597 1177.22,244.876 1177.79,241.099 1178.35,240.255 1178.92,237.809 1179.49,239.402 1180.06,243.274 1180.63,242.765 1181.2,243.387 1181.76,242.61 1182.33,241.003 1182.9,240.251 1183.47,239.772 1184.04,239.335 1184.61,239.757 1185.17,239.121 1185.74,237.485 1186.31,238.08 1186.88,236.447 1187.45,234.933 1188.02,233.529 1188.58,232.287 1189.15,231.125 1189.72,231.311 1190.29,230.243 1190.86,231.531 1191.43,230.637 1192,230.835 1192.56,227.747 1193.13,228.177 1193.7,229.461 1194.27,230.734 1194.84,227.712 1195.41,228.115 1195.97,227.173 1196.54,227.755 1197.11,228.162 1197.68,229.302 1198.25,230.567 1198.82,230.734 1199.38,230.857 1199.95,229.944 1200.52,229.128 1201.09,231.24 1201.66,230.448 1202.23,230.695 1202.79,231.943 1203.36,232.369 1203.93,233.414 1204.5,233.497 1205.07,234.246 1205.64,231.436 1206.2,231.681 1206.77,232.804 1207.34,232.892 1207.91,234.078 1208.48,233.971 1209.05,234.793 1209.61,235.766 1210.18,234.56 1210.75,231.316 1211.32,231.625 1211.89,231.768 1212.46,229.694 1213.02,229.92 1213.59,231.103 1214.16,230.324 1214.73,231.524 1215.3,232.876 1215.87,231.211 1216.43,232.3 1217,232.525 1217.57,232.528 1218.14,231.662 1218.71,230.653 1219.28,230.901 1219.84,229.99 1220.41,231.377 1220.98,229.309 1221.55,230.712 1222.12,233.737 1222.69,234.841 1223.25,235.93 1223.82,237.706 1224.39,236.451 1224.96,236.124 1225.53,236.94 1226.1,235.991 1226.66,236.951 1227.23,237.732 1227.8,237.577 1228.37,237.393 1228.94,238.079 1229.51,237.895 1230.07,239.62 1230.64,237.18 1231.21,236.933 1231.78,238.747 1232.35,239.126 1232.92,241.743 1233.48,241.215 1234.05,238.688 1234.62,238.498 1235.19,238.13 1235.76,237.805 1236.33,235.336 1236.89,236.034 1237.46,232.729 1238.03,234.678 1238.6,232.413 1239.17,232.382 1239.74,231.674 1240.3,228.597 1240.87,226.849 1241.44,227.424 1242.01,225.891 1242.58,226.534 1243.15,226.883 1243.71,229.364 1244.28,229.699 1244.85,228.804 1245.42,228.221 1245.99,228.66 1246.56,229.301 1247.12,230.828 1247.69,234.138 1248.26,231.168 1248.83,230.363 1249.4,231.589 1249.97,232.681 1250.53,233.913 1251.1,234.979 1251.67,234.778 1252.24,234.852 1252.81,234.762 1253.38,234.805 1253.94,235.644 1254.51,233.588 1255.08,235.696 1255.65,233.692 1256.22,234.744 1256.79,232.627 1257.35,233.692 1257.92,235.792 1258.49,235.613 1259.06,234.621 1259.63,238.718 1260.2,239.585 1260.76,238.165 1261.33,236.484 1261.9,237.32 1262.47,238.058 1263.04,235.589 1263.61,234.406 1264.18,233.178 1264.74,234.393 1265.31,234.447 1265.88,237.416 1266.45,237.261 1267.02,234.998 1267.59,233.762 1268.15,232.544 1268.72,233.69 1269.29,233.886 1269.86,233.959 1270.43,232.909 1271,232.927 1271.56,231.087 1272.13,232.326 1272.7,231.222 1273.27,231.527 1273.84,230.667 1274.41,232.015 1274.97,230.845 1275.54,230.093 1276.11,227.185 1276.68,226.579 1277.25,223.941 1277.82,222.649 1278.38,222.673 1278.95,224.438 1279.52,224.197 1280.09,225.013 1280.66,225.702 1281.23,225.336 1281.79,225.068 1282.36,227.724 1282.93,226.392 1283.5,226.929 1284.07,230.742 1284.64,233.401 1285.2,232.621 1285.77,232.822 1286.34,231.84 1286.91,235.251 1287.48,235.273 1288.05,234.437 1288.61,236.601 1289.18,236.414 1289.75,236.257 1290.32,238.297 1290.89,239.163 1291.46,238.669 1292.02,239.314 1292.59,240.157 1293.16,238.774 1293.73,239.426 1294.3,237.977 1294.87,236.695 1295.43,235.476 1296,236.274 1296.57,236.094 1297.14,233.94 1297.71,234.141 1298.28,232.92 1298.84,234.224 1299.41,236.447 1299.98,237.341 1300.55,238.075 1301.12,235.675 1301.69,235.628 1302.25,235.561 1302.82,238.509 1303.39,237.341 1303.96,237.015 1304.53,236.925 1305.1,240.006 1305.66,238.368 1306.23,237.223 1306.8,238.92 1307.37,237.606 1307.94,238.605 1308.51,238.435 1309.07,239.088 1309.64,237.613 1310.21,238.329 1310.78,237.937 1311.35,236.462 1311.92,236.128 1312.48,235.109 1313.05,231.875 1313.62,233.939 1314.19,233.022 1314.76,233.94 1315.33,232.616 1315.89,232.676 1316.46,233.749 1317.03,233.839 1317.6,233.898 1318.17,234.051 1318.74,235.929 1319.3,235.639 1319.87,235.429 1320.44,235.355 1321.01,235.303 1321.58,234.037 1322.15,236.011 1322.71,234.878 1323.28,235.741 1323.85,236.712 1324.42,237.389 1324.99,238.044 1325.56,235.496 1326.12,237.182 1326.69,235.763 1327.26,235.535 1327.83,234.041 1328.4,235.195 1328.97,233.042 1329.53,231.848 1330.1,232.149 1330.67,231.099 1331.24,231.279 1331.81,230.424 1332.38,230.605 1332.94,229.739 1333.51,231.226 1334.08,230.425 1334.65,230.519 1335.22,231.778 1335.79,232.035 1336.36,232.075 1336.92,231.182 1337.49,231.391 1338.06,230.513 1338.63,232.71 1339.2,232.809 1339.77,230.99 1340.33,230.268 1340.9,228.495 1341.47,228.802 1342.04,229.219 1342.61,231.615 1343.18,231.694 1343.74,230.788 1344.31,230.003 1344.88,229.163 1345.45,228.599 1346.02,230.233 1346.59,231.41 1347.15,231.761 1347.72,232.95 1348.29,232.018 1348.86,234.047 1349.43,235.423 1350,235.399 1350.56,238.241 1351.13,238.913 1351.7,238.576 1352.27,238.333 1352.84,238.961 1353.41,239.625 1353.97,240.263 1354.54,239.914 1355.11,240.614 1355.68,240.393 1356.25,240.966 1356.82,243.408 1357.38,244.852 1357.95,243.821 1358.52,240.973 1359.09,241.364 1359.66,240.705 1360.23,241.607 1360.79,243.921 1361.36,244.025 1361.93,243.022 1362.5,244.083 1363.07,245.164 1363.64,244.163 1364.2,240.873 1364.77,241.384 1365.34,239.858 1365.91,238.146 1366.48,237.734 1367.05,238.325 1367.61,236.897 1368.18,234.458 1368.75,234.376 1369.32,235.363 1369.89,233.904 1370.46,233.837 1371.02,234.711 1371.59,233.538 1372.16,232.384 1372.73,233.532 1373.3,233.623 1373.87,230.176 1374.43,228.248 1375,227.251 1375.57,227.739 1376.14,228.023 1376.71,227.13 1377.28,226.524 1377.84,227.996 1378.41,227.52 1378.98,227.927 1379.55,226.471 1380.12,227.696 1380.69,230.008 1381.25,230.313 1381.82,232.693 1382.39,233.736 1382.96,233.675 1383.53,233.64 1384.1,234.675 1384.66,235.511 1385.23,235.192 1385.8,233.682 1386.37,233.396 1386.94,232.396 1387.51,231.189 1388.07,232.59 1388.64,232.709 1389.21,233.514 1389.78,233.381 1390.35,233.235 1390.92,231.23 1391.48,231.017 1392.05,231.007 1392.62,231.122 1393.19,233.314 1393.76,232.325 1394.33,233.291 1394.89,234.519 1395.46,232.392 1396.03,230.435 1396.6,230.611 1397.17,229.484 1397.74,228.762 1398.3,230.032 1398.87,231.321 1399.44,231.368 1400.01,231.713 1400.58,229.917 1401.15,226.932 1401.71,227.373 1402.28,226.9 1402.85,227.57 1403.42,229.076 1403.99,230.329 1404.56,229.474 1405.13,230.825 1405.69,230.909 1406.26,232.16 1406.83,232.422 1407.4,231.582 1407.97,232.958 1408.54,232.103 1409.1,232.339 1409.67,232.417 1410.24,233.58 1410.81,232.692 1411.38,235.616 1411.95,236.38 1412.51,235.019 1413.08,239.052 1413.65,237.567 1414.22,236.234 1414.79,237.233 1415.36,239.036 1415.92,238.754 1416.49,237.298 1417.06,237.025 1417.63,237.861 1418.2,236.758 1418.77,236.508 1419.33,236.333 1419.9,236.206 1420.47,237.037 1421.04,236.803 1421.61,236.353 1422.18,239.349 1422.74,237.142 1423.31,236.976 1423.88,234.599 1424.45,234.463 1425.02,236.479 1425.59,237.233 1426.15,236.896 1426.72,234.526 1427.29,235.531 1427.86,234.262 1428.43,234.972 1429,234.699 1429.56,230.33 1430.13,228.328 1430.7,228.876 1431.27,228.144 1431.84,227.527 1432.41,227.605 1432.97,227.877 1433.54,229.172 1434.11,229.572 1434.68,226.659 1435.25,227.033 1435.82,227.497 1436.38,228.79 1436.95,229.218 1437.52,231.622 1438.09,230.619 1438.66,232.838 1439.23,233.907 1439.79,234.87 1440.36,235.663 1440.93,235.49 1441.5,234.456 1442.07,233.33 1442.64,233.458 1443.2,233.419 1443.77,235.529 1444.34,237.503 1444.91,237.309 1445.48,238.015 1446.05,238.768 1446.61,238.595 1447.18,236.348 1447.75,237.019 1448.32,234.711 1448.89,234.518 1449.46,233.447 1450.02,234.469 1450.59,234.365 1451.16,234.995 1451.73,234.755 1452.3,234.577 1452.87,234.622 1453.43,232.677 1454,234.699 1454.57,232.722 1455.14,231.813 1455.71,230.819 1456.28,230.068 1456.84,230.268 1457.41,231.525 1457.98,231.495 1458.55,232.715 1459.12,233.706 1459.69,232.642 1460.25,232.64 1460.82,233.627 1461.39,233.661 1461.96,235.753 1462.53,232.675 1463.1,232.566 1463.66,234.556 1464.23,234.438 1464.8,233.397 1465.37,233.28 1465.94,235.373 1466.51,234.456 1467.07,235.363 1467.64,237.237 1468.21,236.067 1468.78,234.803 1469.35,234.624 1469.92,234.383 1470.48,236.462 1471.05,236.121 1471.62,236.87 1472.19,235.621 1472.76,233.522 1473.33,233.446 1473.89,233.549 1474.46,233.574 1475.03,233.391 1475.6,233.231 1476.17,233.257 1476.74,233.423 1477.31,233.277 1477.87,233.484 1478.44,233.549 1479.01,233.501 1479.58,233.499 1480.15,233.73 1480.72,231.701 1481.28,228.816 1481.85,229.223 1482.42,230.577 1482.99,229.607 1483.56,228.855 1484.13,228.112 1484.69,228.456 1485.26,228.957 1485.83,230.495 1486.4,229.615 1486.97,227.945 1487.54,229.429 1488.1,230.758 1488.67,229.996 1489.24,229.142 1489.81,228.693 1490.38,228.071 1490.95,230.678 1491.51,232.022 1492.08,233.316 1492.65,236.761 1493.22,237.66 1493.79,237.732 1494.36,236.672 1494.92,235.53 1495.49,235.442 1496.06,234.513 1496.63,235.616 1497.2,236.465 1497.77,234.224 1498.33,237.408 1498.9,236.319 1499.47,236.093 1500.04,238.18 1500.61,236.831 1501.18,232.702 1501.74,231.766 1502.31,232.079 1502.88,234.346 1503.45,232.459 1504.02,231.675 1504.59,233.859 1505.15,231.13 1505.72,230.425 1506.29,230.725 1506.86,231.994 1507.43,232.176 1508,231.599 1508.56,229.91 1509.13,232.196 1509.7,231.43 1510.27,231.565 1510.84,230.675 1511.41,229.955 1511.97,229.469 1512.54,228.787 1513.11,229.235 1513.68,229.685 1514.25,230.17 1514.82,232.399 1515.38,232.649 1515.95,232.759 1516.52,234.821 1517.09,234.867 1517.66,233.005 1518.23,232.915 1518.79,232.263 1519.36,232.355 1519.93,230.698 1520.5,232.144 1521.07,237.381 1521.64,239.222 1522.2,238.917 1522.77,239.43 1523.34,238.147 1523.91,236.929 1524.48,236.562 1525.05,238.624 1525.61,238.392 1526.18,238.861 1526.75,237.478 1527.32,238.344 1527.89,237.127 1528.46,240.111 1529.02,238.678 1529.59,238.5 1530.16,238.206 1530.73,239.943 1531.3,240.453 1531.87,239.826 1532.43,238.484 1533,237.15 1533.57,237.064 1534.14,236.749 1534.71,234.521 1535.28,233.409 1535.84,233.432 1536.41,233.574 1536.98,233.588 1537.55,233.589 1538.12,231.394 1538.69,230.306 1539.25,230.486 1539.82,234.96 1540.39,236.909 1540.96,235.762 1541.53,236.66 1542.1,233.479 1542.66,236.698 1543.23,231.338 1543.8,231.706 1544.37,230.75 1544.94,229.853 1545.51,230.317 1546.08,230.777 1546.64,229.875 1547.21,230.28 1547.78,230.663 1548.35,229.65 1548.92,228.764 1549.49,230.327 1550.05,230.451 1550.62,231.597 1551.19,232.751 1551.76,231.977 1552.33,235.252 1552.9,236.188 1553.46,237.241 1554.03,237.866 1554.6,238.794 1555.17,238.41 1555.74,238.07 1556.31,235.82 1556.87,235.728 1557.44,234.553 1558.01,233.643 1558.58,233.648 1559.15,234.724 1559.72,234.847 1560.28,234.654 1560.85,234.693 1561.42,234.469 1561.99,232.233 1562.56,234.43 1563.13,233.333 1563.69,235.562 1564.26,237.368 1564.83,236.232 1565.4,236.033 1565.97,234.638 1566.54,238.747 1567.1,235.295 1567.67,234.438 1568.24,233.513 1568.81,232.761 1569.38,232.927 1569.95,235.128 1570.51,231.678 1571.08,231.798 1571.65,234.135 1572.22,231.801 1572.79,230.881 1573.36,229.935 1573.92,230.157 1574.49,229.34 1575.06,228.763 1575.63,232.234 1576.2,233.334 1576.77,232.182 1577.33,233.427 1577.9,230.469 1578.47,232.61 1579.04,233.639 1579.61,232.548 1580.18,232.61 1580.74,234.772 1581.31,233.563 1581.88,234.554 1582.45,233.776 1583.02,235.099 1583.59,233.015 1584.15,233.909 1584.72,233.92 1585.29,233.992 1585.86,232.999 1586.43,231.859 1587,231.837 1587.56,234.028 1588.13,231.903 1588.7,229.999 1589.27,232.429 1589.84,232.646 1590.41,233.873 1590.97,231.823 1591.54,232.147 1592.11,232.292 1592.68,231.659 1593.25,230.974 1593.82,232.408 1594.38,234.559 1594.95,235.306 1595.52,236.177 1596.09,233.966 1596.66,234.198 1597.23,234.242 1597.79,233.496 1598.36,234.768 1598.93,234.779 1599.5,235.878 1600.07,235.01 1600.64,236.065 1601.2,235.912 1601.77,235.678 1602.34,235.251 1602.91,236.138 1603.48,235.016 1604.05,234.864 1604.61,234.883 1605.18,235.832 1605.75,235.365 1606.32,235.423 1606.89,236.564 1607.46,237.753 1608.02,239.659 1608.59,241.157 1609.16,237.635 1609.73,237.427 1610.3,237.147 1610.87,238.925 1611.43,237.434 1612,236.079 1612.57,235.868 1613.14,236.769 1613.71,236.657 1614.28,235.51 1614.84,234.307 1615.41,233.301 1615.98,232.327 1616.55,233.575 1617.12,232.567 1617.69,232.649 1618.26,232.633 1618.82,234.917 1619.39,233.592 1619.96,233.434 1620.53,234.378 1621.1,233.148 1621.67,232.238 1622.23,232.325 1622.8,231.113 1623.37,230.203 1623.94,230.445 1624.51,230.531 1625.08,229.464 1625.64,230.131 1626.21,229.36 1626.78,229.725 1627.35,230.998 1627.92,231.076 1628.49,231.117 1629.05,233.186 1629.62,233.312 1630.19,234.478 1630.76,234.489 1631.33,237.412 1631.9,237.226 1632.46,236.008 1633.03,234.999 1633.6,234.081 1634.17,232.007 1634.74,232.113 1635.31,231.161 1635.87,230.329 1636.44,230.489 1637.01,232.001 1637.58,229.867 1638.15,232.067 1638.72,233.238 1639.28,232.34 1639.85,232.456 1640.42,231.576 1640.99,232.913 1641.56,232.97 1642.13,233.16 1642.69,231.233 1643.26,231.534 1643.83,231.72 1644.4,234.991 1644.97,233.851 1645.54,237.069 1646.1,236.192 1646.67,237.187 1647.24,238.062 1647.81,239.106 1648.38,240.693 1648.95,241.248 1649.51,240.773 1650.08,238.182 1650.65,234.746 1651.22,234.702 1651.79,233.698 1652.36,235.978 1652.92,234.79 1653.49,236.952 1654.06,237.925 1654.63,236.613 1655.2,236.398 1655.77,237.366 1656.33,238.211 1656.9,237.873 1657.47,235.342 1658.04,235.041 1658.61,233.939 1659.18,233.047 1659.74,232.977 1660.31,232.009 1660.88,233.177 1661.45,234.077 1662.02,232.876 1662.59,233.835 1663.15,231.758 1663.72,231.833 1664.29,232.05 1664.86,230.877 1665.43,233.097 1666,233.132 1666.56,231.245 1667.13,229.423 1667.7,230.495 1668.27,230.837 1668.84,234.086 1669.41,235.051 1669.97,233.823 1670.54,235.752 1671.11,235.658 1671.68,235.564 1672.25,232.399 1672.82,232.46 1673.38,232.531 1673.95,232.574 1674.52,232.558 1675.09,232.621 1675.66,233.65 1676.23,235.873 1676.79,234.606 1677.36,234.325 1677.93,234.472 1678.5,236.753 1679.07,235.342 1679.64,234.929 1680.2,234.655 1680.77,235.906 1681.34,237.009 1681.91,235.556 1682.48,232.352 1683.05,233.251 1683.61,233.291 1684.18,232.488 1684.75,233.452 1685.32,234.629 1685.89,234.212 1686.46,233.252 1687.02,234.377 1687.59,233.38 1688.16,237.372 1688.73,237.107 1689.3,237.859 1689.87,237.688 1690.44,239.373 1691,240.903 1691.57,242.211 1692.14,241.507 1692.71,241.983 1693.28,241.478 1693.85,239.841 1694.41,238.932 1694.98,238.125 1695.55,238.692 1696.12,239.439 1696.69,239.766 1697.26,239.222 1697.82,236.405 1698.39,235.788 1698.96,236.57 1699.53,235.309 1700.1,235.339 1700.67,235.102 1701.23,235.927 1701.8,235.533 1702.37,237.234 1702.94,237.748 1703.51,238.239 1704.08,234.898 1704.64,233.52 1705.21,230.29 1705.78,228.967 1706.35,229.261 1706.92,228.33 1707.49,227.318 1708.05,228.648 1708.62,230.767 1709.19,229.968 1709.76,232.003 1710.33,231.072 1710.9,233.503 1711.46,234.565 1712.03,233.325 1712.6,233.281 1713.17,233.342 1713.74,230.373 1714.31,230.313 1714.87,230.252 1715.44,231.416 1716.01,231.594 1716.58,230.72 1717.15,231.957 1717.72,231.994 1718.28,231.98 1718.85,230.974 1719.42,230.972 1719.99,228.101 1720.56,226.352 1721.13,226.657 1721.69,228.154 1722.26,227.667 1722.83,230.079 1723.4,229.336 1723.97,229.715 1724.54,230.168 1725.1,232.476 1725.67,231.638 1726.24,229.778 1726.81,228.136 1727.38,229.755 1727.95,228.087 1728.51,230.621 1729.08,231.018 1729.65,232.389 1730.22,229.249 1730.79,230.615 1731.36,231.904 1731.92,232.326 1732.49,233.533 1733.06,235.731 1733.63,233.795 1734.2,232.808 1734.77,233.04 1735.33,232.009 1735.9,233.046 1736.47,232.993 1737.04,235.051 1737.61,235.783 1738.18,236.783 1738.74,235.803 1739.31,235.736 1739.88,236.741 1740.45,236.609 1741.02,236.524 1741.59,235.321 1742.15,233.106 1742.72,233.165 1743.29,233.567 1743.86,234.674 1744.43,233.802 1745,235.849 1745.56,235.645 1746.13,234.653 1746.7,235.561 1747.27,235.256 1747.84,234.062 1748.41,233.018 1748.97,230.08 1749.54,231.531 1750.11,232.692 1750.68,230.57 1751.25,230.841 1751.82,230.851 1752.38,231.08 1752.95,230.271 1753.52,231.491 1754.09,230.432 1754.66,230.64 1755.23,230.827 1755.79,232.168 1756.36,233.324 1756.93,233.223 1757.5,234.274 1758.07,234.432 1758.64,234.525 1759.21,234.478 1759.77,235.529 1760.34,234.444 1760.91,233.642 1761.48,233.781 1762.05,233.808 1762.62,233.997 1763.18,235.035 1763.75,235.007 1764.32,233.832 1764.89,231.778 1765.46,232.01 1766.03,233.273 1766.59,235.252 1767.16,235.035 1767.73,235.19 1768.3,234.821 1768.87,235.757 1769.44,235.516 1770,234.649 1770.57,235.492 1771.14,232.417 1771.71,230.722 1772.28,228.829 1772.85,230.074 1773.41,231.528 1773.98,233.653 1774.55,235.936 1775.12,237.706 1775.69,236.392 1776.26,237.462 1776.82,236.082 1777.39,233.994 1777.96,231.125 1778.53,231.401 1779.1,231.641 1779.67,233.917 1780.23,233.928 1780.8,232.766 1781.37,232.689 1781.94,231.793 1782.51,231.029 1783.08,233.313 1783.64,233.595 1784.21,233.66 1784.78,233.581 1785.35,233.603 1785.92,235.866 1786.49,235.831 1787.05,235.782 1787.62,235.761 1788.19,235.774 1788.76,233.687 1789.33,234.615 1789.9,234.464 1790.46,235.266 1791.03,234.056 1791.6,235.088 1792.17,237.029 1792.74,236.793 1793.31,234.554 1793.87,235.476 1794.44,238.35 1795.01,239.993 1795.58,238.68 1796.15,240.469 1796.72,238.965 1797.28,239.412 1797.85,240.126 1798.42,237.468 1798.99,236.229 1799.56,237.043 1800.13,237.619 1800.69,236.455 1801.26,236.184 1801.83,235.891 1802.4,235.821 1802.97,234.71 1803.54,232.529 1804.1,231.787 1804.67,234.009 1805.24,233.12 1805.81,233.086 1806.38,232.047 1806.95,233.138 1807.51,231.974 1808.08,233.018 1808.65,233.121 1809.22,233.184 1809.79,233.051 1810.36,231.983 1810.92,231.082 1811.49,231.373 1812.06,230.535 1812.63,231.686 1813.2,231.929 1813.77,233.139 1814.33,234.059 1814.9,235.001 1815.47,234.952 1816.04,234.747 1816.61,233.487 1817.18,233.467 1817.74,231.454 1818.31,231.355 1818.88,230.365 1819.45,228.513 1820.02,227.757 1820.59,228.183 1821.15,228.594 1821.72,230.024 1822.29,228.32 1822.86,226.814 1823.43,227.476 1824,228.983 1824.56,229.216 1825.13,231.632 1825.7,235.104 1826.27,236.053 1826.84,236.805 1827.41,235.715 1827.97,237.768 1828.54,238.732 1829.11,236.375 1829.68,236.001 1830.25,235.829 1830.82,234.735 1831.39,233.575 1831.95,232.507 1832.52,231.704 1833.09,232.131 1833.66,230.324 1834.23,232.652 1834.8,234.071 1835.36,233.094 1835.93,233.201 1836.5,233.527 1837.07,234.456 1837.64,234.445 1838.21,232.563 1838.77,232.659 1839.34,232.695 1839.91,234.742 1840.48,234.606 1841.05,232.356 1841.62,233.604 1842.18,233.926 1842.75,234.913 1843.32,234.679 1843.89,235.846 1844.46,235.73 1845.03,238.633 1845.59,237.08 1846.16,235.754 1846.73,233.777 1847.3,232.702 1847.87,230.91 1848.44,230.242 1849,229.626 1849.57,229.945 1850.14,230.386 1850.71,229.464 1851.28,229.835 1851.85,230.092 1852.41,229.678 1852.98,230.941 1853.55,230.04 1854.12,230.469 1854.69,232.877 1855.26,232.974 1855.82,234.352 1856.39,234.562 1856.96,234.474 1857.53,234.578 1858.1,237.708 1858.67,237.456 1859.23,237.272 1859.8,236.991 1860.37,237.916 1860.94,236.753 1861.51,232.611 1862.08,231.938 1862.64,231.196 1863.21,231.485 1863.78,231.745 1864.35,230.75 1864.92,231.04 1865.49,231.201 1866.05,230.465 1866.62,229.641 1867.19,229.192 1867.76,230.685 1868.33,230.931 1868.9,232.182 1869.46,233.321 1870.03,232.454 1870.6,233.549 1871.17,234.839 1871.74,233.802 1872.31,233.964 1872.87,234.036 1873.44,235.083 1874.01,237.864 1874.58,235.584 1875.15,237.574 1875.72,235.412 1876.28,233.354 1876.85,232.239 1877.42,231.154 1877.99,230.181 1878.56,230.728 1879.13,231.232 1879.69,233.544 1880.26,236.826 1880.83,237.706 1881.4,239.607 1881.97,240.177 1882.54,238.836 1883.1,238.485 1883.67,238.925 1884.24,237.228 1884.81,237.076 1885.38,236.98 1885.95,236.654 1886.51,236.631 1887.08,236.526 1887.65,235.248 1888.22,232.062 1888.79,229.383 1889.36,229.819 1889.92,230.023 1890.49,230.224 1891.06,230.706 1891.63,233.92 1892.2,234.76 1892.77,234.935 1893.33,236.217 1893.9,235.134 1894.47,234.033 1895.04,234.022 1895.61,232.842 1896.18,234.006 1896.74,234.982 1897.31,235.038 1897.88,234.681 1898.45,232.791 1899.02,233.901 1899.59,233.983 1900.16,237.188 1900.72,238.038 1901.29,238.978 1901.86,238.781 1902.43,241.531 1903,238.98 1903.57,238.734 1904.13,237.193 1904.7,238.883 1905.27,237.415 1905.84,236.156 1906.41,234.716 1906.98,234.641 1907.54,235.727 1908.11,234.537 1908.68,233.341 1909.25,234.527 1909.82,234.473 1910.39,235.49 1910.95,234.289 1911.52,235.122 1912.09,234.091 1912.66,233.828 1913.23,233.654 1913.8,229.437 1914.36,231.897 1914.93,232.072 1915.5,234.001 1916.07,233.872 1916.64,232.585 1917.21,232.666 1917.77,233.881 1918.34,234.805 1918.91,233.606 1919.48,233.493 1920.05,234.587 1920.62,233.505 1921.18,233.585 1921.75,234.896 1922.32,232.889 1922.89,235.846 1923.46,234.653 1924.03,233.643 1924.59,230.575 1925.16,230.775 1925.73,231.14 1926.3,233.375 1926.87,233.452 1927.44,231.496 1928,230.638 1928.57,229.98 1929.14,229.146 1929.71,228.362 1930.28,229.798 1930.85,228.833 1931.41,229.22 1931.98,228.561 1932.55,229.964 1933.12,230.497 1933.69,233.759 1934.26,233.857 1934.82,235.946 1935.39,235.005 1935.96,237.09 1936.53,237.981 1937.1,237.745 1937.67,237.315 1938.23,237.166 1938.8,234.75 1939.37,233.392 1939.94,232.524 1940.51,233.824 1941.08,235.033 1941.64,234.071 1942.21,234.339 1942.78,234.461 1943.35,235.318 1943.92,235.418 1944.49,233.138 1945.05,232.229 1945.62,231.521 1946.19,231.506 1946.76,233.547 1947.33,234.717 1947.9,233.766 1948.46,234.968 1949.03,235.798 1949.6,233.513 1950.17,233.475 1950.74,232.581 1951.31,231.831 1951.87,233.156 1952.44,232.088 1953.01,232.998 1953.58,234.132 1954.15,234.359 1954.72,236.635 1955.28,235.526 1955.85,237.59 1956.42,238.409 1956.99,237.19 1957.56,238.856 1958.13,238.564 1958.69,237.226 1959.26,238.019 1959.83,237.8 1960.4,238.766 1960.97,236.459 1961.54,236.109 1962.1,235.006 1962.67,234.84 1963.24,235.64 1963.81,235.486 1964.38,236.27 1964.95,236.101 1965.51,234.876 1966.08,235.918 1966.65,234.935 1967.22,234.606 1967.79,236.461 1968.36,240.138 1968.92,240.595 1969.49,239.879 1970.06,240.518 1970.63,239.058 1971.2,239.589 1971.77,239.003 1972.34,238.548 1972.9,238.276 1973.47,237.793 1974.04,240.658 1974.61,236.963 1975.18,235.678 1975.75,238.201 1976.31,238.894 1976.88,238.578 1977.45,238.163 1978.02,238.738 1978.59,238.229 1979.16,236.711 1979.72,234.356 1980.29,235.179 1980.86,231.794 1981.43,232.714 1982,234.655 1982.57,234.426 1983.13,233.339 1983.7,232.334 1984.27,233.409 1984.84,234.209 1985.41,233.919 1985.98,233.809 1986.54,232.503 1987.11,232.539 1987.68,229.403 1988.25,227.457 1988.82,227.831 1989.39,229.058 1989.95,231.494 1990.52,231.37 1991.09,231.418 1991.66,230.421 1992.23,229.694 1992.8,229.909 1993.36,229.989 1993.93,231.282 1994.5,231.427 1995.07,233.562 1995.64,233.453 1996.21,232.158 1996.77,233.205 1997.34,232.327 1997.91,232.262 1998.48,231.178 1999.05,233.511 1999.62,233.422 2000.18,231.348 2000.75,233.396 2001.32,234.372 2001.89,233.349 2002.46,231.055 2003.03,231.184 2003.59,231.504 2004.16,231.529 2004.73,232.467 2005.3,233.417 2005.87,233.238 2006.44,234.339 2007,234.338 2007.57,234.087 2008.14,234.048 2008.71,233.788 2009.28,233.681 2009.85,235.989 2010.41,231.785 2010.98,229.858 2011.55,231.081 2012.12,231.304 2012.69,232.336 2013.26,229.221 2013.82,227.563 2014.39,226.804 2014.96,228.48 2015.53,228.838 2016.1,229.291 2016.67,229.556 2017.23,228.887 2017.8,230.216 2018.37,231.295 2018.94,232.334 2019.51,233.606 2020.08,233.57 2020.64,232.862 2021.21,232.13 2021.78,233.342 2022.35,230.316 2022.92,230.539 2023.49,230.853 2024.05,231.979 2024.62,232.01 2025.19,233.198 2025.76,233.418 2026.33,231.444 2026.9,232.81 2027.46,234.157 2028.03,233.093 2028.6,232.042 2029.17,232.119 2029.74,233.128 2030.31,233.229 2030.87,233.428 2031.44,232.659 2032.01,232.664 2032.58,232.925 2033.15,233.898 2033.72,235.1 2034.28,234.852 2034.85,231.6 2035.42,230.704 2035.99,232.913 2036.56,234.871 2037.13,235.852 2037.69,235.438 2038.26,235.464 2038.83,235.183 2039.4,233.178 2039.97,235.315 2040.54,234.127 2041.11,235.884 2041.67,236.782 2042.24,237.769 2042.81,237.445 2043.38,237.148 2043.95,236.882 2044.52,235.817 2045.08,234.475 2045.65,234.455 2046.22,235.512 2046.79,236.331 2047.36,236.891 2047.93,234.838 2048.49,233.507 2049.06,233.594 2049.63,236.63 2050.2,236.575 2050.77,238.44 2051.34,239.024 2051.9,236.519 2052.47,236.232 2053.04,236.893 2053.61,238.562 2054.18,236.124 2054.75,235.714 2055.31,235.336 2055.88,235.044 2056.45,234.949 2057.02,234.984 2057.59,232.698 2058.16,232.803 2058.72,232.659 2059.29,230.859 2059.86,231.2 2060.43,230.483 2061,229.716 2061.57,231.878 2062.13,229.968 2062.7,230.203 2063.27,228.557 2063.84,229.869 2064.41,231.144 2064.98,230.323 2065.54,229.428 2066.11,230.915 2066.68,231.132 2067.25,232.247 2067.82,233.325 2068.39,234.474 2068.95,236.445 2069.52,237.302 2070.09,237.413 2070.66,238.065 2071.23,237.891 2071.8,236.539 2072.36,236.338 2072.93,236.174 2073.5,236.263 2074.07,235.12 2074.64,236.137 2075.21,236.08 2075.77,236.194 2076.34,235.875 2076.91,235.78 2077.48,235.477 2078.05,235.523 2078.62,233.408 2079.18,234.493 2079.75,234.718 2080.32,232.497 2080.89,233.81 2081.46,233.808 2082.03,232.715 2082.59,231.779 2083.16,232.002 2083.73,234.115 2084.3,235.26 2084.87,235.077 2085.44,235.857 2086,238.002 2086.57,239.747 2087.14,238.351 2087.71,238.969 2088.28,238.441 2088.85,236.97 2089.41,237.837 2089.98,237.597 2090.55,236.276 2091.12,233.978 2091.69,233.16 2092.26,232.046 2092.82,232.248 2093.39,230.143 2093.96,228.469 2094.53,227.634 2095.1,230.228 2095.67,229.557 2096.23,229.728 2096.8,231.067 2097.37,234.136 2097.94,234.061 2098.51,233.972 2099.08,233.98 2099.64,231.952 2100.21,231.067 2100.78,230.182 2101.35,230.271 2101.92,232.601 2102.49,232.468 2103.05,230.67 2103.62,230.967 2104.19,232.256 2104.76,233.406 2105.33,235.44 2105.9,237.287 2106.46,233.8 2107.03,233.824 2107.6,232.841 2108.17,233.919 2108.74,231.974 2109.31,231.952 2109.87,232.974 2110.44,233.291 2111.01,233.196 2111.58,233.395 2112.15,235.199 2112.72,236.279 2113.29,236.058 2113.85,236.78 2114.42,237.442 2114.99,239.085 2115.56,238.79 2116.13,238.48 2116.7,238.358 2117.26,236.161 2117.83,235.116 2118.4,235.924 2118.97,235.913 2119.54,234.964 2120.11,233.582 2120.67,232.582 2121.24,234.748 2121.81,233.603 2122.38,233.459 2122.95,235.466 2123.52,230.159 2124.08,230.347 2124.65,230.577 2125.22,231.713 2125.79,230.905 2126.36,229.941 2126.93,229.222 2127.49,229.393 2128.06,230.63 2128.63,230.892 2129.2,232.141 2129.77,230.126 2130.34,228.106 2130.9,227.378 2131.47,226.938 2132.04,228.509 2132.61,227.954 2133.18,228.481 2133.75,229.106 2134.31,228.631 2134.88,228.038 2135.45,228.437 2136.02,228.808 2136.59,227.239 2137.16,227.814 2137.72,227.228 2138.29,228.002 2138.86,229.497 2139.43,230.727 2140,231.019 2140.57,233.381 2141.13,234.479 2141.7,235.51 2142.27,235.547 2142.84,235.552 2143.41,235.639 2143.98,235.638 2144.54,235.598 2145.11,235.618 2145.68,234.529 2146.25,235.789 2146.82,236.812 2147.39,233.488 2147.95,235.61 2148.52,234.44 2149.09,235.529 2149.66,235.563 2150.23,232.578 2150.8,232.684 2151.36,231.659 2151.93,231.908 2152.5,233.145 2153.07,233.148 2153.64,237.163 2154.21,237.226 2154.77,237.027 2155.34,240.012 2155.91,238.534 2156.48,237.097 2157.05,238.746 2157.62,238.469 2158.18,237.288 2158.75,234.913 2159.32,233.869 2159.89,233.847 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.026\n  with uncertainty of ± 0.0023349830888083553\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01658 ± (0.00216811, 0.00205398) (MC)\n  95% confidence interval: [-4.02084, -4.01265] (MC)\n  linear error propagation: -4.01651 ± 0.00203918\n  |δ_y| = |0.001471| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016578080846446, val_l = 0.004266463370454332, val_u = 0.003923732752350695)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip530\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip531\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip532\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.9 2211.02,1147.9 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,973.715 2211.02,973.715 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,799.532 2211.02,799.532 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,625.35 2211.02,625.35 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,451.167 2211.02,451.167 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,276.984 2211.02,276.984 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.9 365.751,1147.9 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,973.715 365.751,973.715 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,799.532 365.751,799.532 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,625.35 365.751,625.35 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,451.167 365.751,451.167 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,276.984 365.751,276.984 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M298.909 1133.7 Q295.298 1133.7 293.469 1137.26 Q291.664 1140.8 291.664 1147.93 Q291.664 1155.04 293.469 1158.6 Q295.298 1162.15 298.909 1162.15 Q302.543 1162.15 304.349 1158.6 Q306.177 1155.04 306.177 1147.93 Q306.177 1140.8 304.349 1137.26 Q302.543 1133.7 298.909 1133.7 M298.909 1129.99 Q304.719 1129.99 307.775 1134.6 Q310.853 1139.18 310.853 1147.93 Q310.853 1156.66 307.775 1161.27 Q304.719 1165.85 298.909 1165.85 Q293.099 1165.85 290.02 1161.27 Q286.964 1156.66 286.964 1147.93 Q286.964 1139.18 290.02 1134.6 Q293.099 1129.99 298.909 1129.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M259.557 987.06 L267.196 987.06 L267.196 960.695 L258.886 962.361 L258.886 958.102 L267.15 956.435 L271.826 956.435 L271.826 987.06 L279.465 987.06 L279.465 990.995 L259.557 990.995 L259.557 987.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 959.514 Q295.298 959.514 293.469 963.079 Q291.664 966.62 291.664 973.75 Q291.664 980.856 293.469 984.421 Q295.298 987.963 298.909 987.963 Q302.543 987.963 304.349 984.421 Q306.177 980.856 306.177 973.75 Q306.177 966.62 304.349 963.079 Q302.543 959.514 298.909 959.514 M298.909 955.81 Q304.719 955.81 307.775 960.417 Q310.853 965 310.853 973.75 Q310.853 982.477 307.775 987.083 Q304.719 991.667 298.909 991.667 Q293.099 991.667 290.02 987.083 Q286.964 982.477 286.964 973.75 Q286.964 965 290.02 960.417 Q293.099 955.81 298.909 955.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M262.775 812.877 L279.094 812.877 L279.094 816.812 L257.15 816.812 L257.15 812.877 Q259.812 810.123 264.395 805.493 Q269.002 800.84 270.182 799.498 Q272.428 796.975 273.307 795.239 Q274.21 793.479 274.21 791.789 Q274.21 789.035 272.266 787.299 Q270.344 785.563 267.242 785.563 Q265.043 785.563 262.59 786.327 Q260.159 787.09 257.381 788.641 L257.381 783.919 Q260.205 782.785 262.659 782.206 Q265.113 781.627 267.15 781.627 Q272.52 781.627 275.715 784.313 Q278.909 786.998 278.909 791.489 Q278.909 793.618 278.099 795.539 Q277.312 797.438 275.205 800.03 Q274.627 800.701 271.525 803.919 Q268.423 807.113 262.775 812.877 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 785.331 Q295.298 785.331 293.469 788.896 Q291.664 792.438 291.664 799.567 Q291.664 806.674 293.469 810.238 Q295.298 813.78 298.909 813.78 Q302.543 813.78 304.349 810.238 Q306.177 806.674 306.177 799.567 Q306.177 792.438 304.349 788.896 Q302.543 785.331 298.909 785.331 M298.909 781.627 Q304.719 781.627 307.775 786.234 Q310.853 790.817 310.853 799.567 Q310.853 808.294 307.775 812.9 Q304.719 817.484 298.909 817.484 Q293.099 817.484 290.02 812.9 Q286.964 808.294 286.964 799.567 Q286.964 790.817 290.02 786.234 Q293.099 781.627 298.909 781.627 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M272.914 623.995 Q276.27 624.713 278.145 626.982 Q280.043 629.25 280.043 632.583 Q280.043 637.699 276.525 640.5 Q273.006 643.301 266.525 643.301 Q264.349 643.301 262.034 642.861 Q259.742 642.444 257.289 641.588 L257.289 637.074 Q259.233 638.208 261.548 638.787 Q263.863 639.366 266.386 639.366 Q270.784 639.366 273.076 637.63 Q275.39 635.894 275.39 632.583 Q275.39 629.528 273.238 627.815 Q271.108 626.079 267.289 626.079 L263.261 626.079 L263.261 622.236 L267.474 622.236 Q270.923 622.236 272.752 620.87 Q274.58 619.482 274.58 616.889 Q274.58 614.227 272.682 612.815 Q270.807 611.38 267.289 611.38 Q265.367 611.38 263.168 611.796 Q260.969 612.213 258.33 613.093 L258.33 608.926 Q260.992 608.185 263.307 607.815 Q265.645 607.445 267.705 607.445 Q273.029 607.445 276.131 609.875 Q279.233 612.283 279.233 616.403 Q279.233 619.273 277.59 621.264 Q275.946 623.232 272.914 623.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 611.148 Q295.298 611.148 293.469 614.713 Q291.664 618.255 291.664 625.384 Q291.664 632.491 293.469 636.056 Q295.298 639.597 298.909 639.597 Q302.543 639.597 304.349 636.056 Q306.177 632.491 306.177 625.384 Q306.177 618.255 304.349 614.713 Q302.543 611.148 298.909 611.148 M298.909 607.445 Q304.719 607.445 307.775 612.051 Q310.853 616.634 310.853 625.384 Q310.853 634.111 307.775 638.718 Q304.719 643.301 298.909 643.301 Q293.099 643.301 290.02 638.718 Q286.964 634.111 286.964 625.384 Q286.964 616.634 290.02 612.051 Q293.099 607.445 298.909 607.445 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M271.594 437.961 L259.789 456.41 L271.594 456.41 L271.594 437.961 M270.367 433.887 L276.247 433.887 L276.247 456.41 L281.177 456.41 L281.177 460.299 L276.247 460.299 L276.247 468.447 L271.594 468.447 L271.594 460.299 L255.992 460.299 L255.992 455.785 L270.367 433.887 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 436.965 Q295.298 436.965 293.469 440.53 Q291.664 444.072 291.664 451.201 Q291.664 458.308 293.469 461.873 Q295.298 465.414 298.909 465.414 Q302.543 465.414 304.349 461.873 Q306.177 458.308 306.177 451.201 Q306.177 444.072 304.349 440.53 Q302.543 436.965 298.909 436.965 M298.909 433.262 Q304.719 433.262 307.775 437.868 Q310.853 442.451 310.853 451.201 Q310.853 459.928 307.775 464.535 Q304.719 469.118 298.909 469.118 Q293.099 469.118 290.02 464.535 Q286.964 459.928 286.964 451.201 Q286.964 442.451 290.02 437.868 Q293.099 433.262 298.909 433.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M258.793 259.704 L277.15 259.704 L277.15 263.639 L263.076 263.639 L263.076 272.111 Q264.094 271.764 265.113 271.602 Q266.131 271.417 267.15 271.417 Q272.937 271.417 276.316 274.588 Q279.696 277.759 279.696 283.176 Q279.696 288.755 276.224 291.856 Q272.752 294.935 266.432 294.935 Q264.256 294.935 261.988 294.565 Q259.742 294.194 257.335 293.454 L257.335 288.755 Q259.418 289.889 261.641 290.444 Q263.863 291 266.34 291 Q270.344 291 272.682 288.894 Q275.02 286.787 275.02 283.176 Q275.02 279.565 272.682 277.458 Q270.344 275.352 266.34 275.352 Q264.465 275.352 262.59 275.769 Q260.738 276.185 258.793 277.065 L258.793 259.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 262.783 Q295.298 262.783 293.469 266.347 Q291.664 269.889 291.664 277.019 Q291.664 284.125 293.469 287.69 Q295.298 291.231 298.909 291.231 Q302.543 291.231 304.349 287.69 Q306.177 284.125 306.177 277.019 Q306.177 269.889 304.349 266.347 Q302.543 262.783 298.909 262.783 M298.909 259.079 Q304.719 259.079 307.775 263.685 Q310.853 268.269 310.853 277.019 Q310.853 285.745 307.775 290.352 Q304.719 294.935 298.909 294.935 Q293.099 294.935 290.02 290.352 Q286.964 285.745 286.964 277.019 Q286.964 268.269 290.02 263.685 Q293.099 259.079 298.909 259.079 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip532)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1019.56 400.199,1036.17 400.786,921.171 401.372,815.654 401.958,718.98 402.545,632.695 403.131,551.589 403.718,686.577 404.304,608.865 404.891,543.078 405.477,563.576 406.063,500.673 406.65,519.662 407.236,464.463 407.823,481.457 408.409,434.592 408.995,392.735 409.582,354.942 410.168,373.8 410.755,343.205 411.341,313.955 411.927,288.289 412.514,266.636 413.1,249.645 413.687,271.147 414.273,255.811 414.86,244.285 415.446,233.883 416.032,224.717 416.619,219.895 417.205,242.356 417.792,238.898 418.378,237.64 418.964,237.415 419.551,260.071 420.137,262.979 420.724,266.535 421.31,271.236 421.896,277.813 422.483,300.394 423.069,321.982 423.656,329.224 424.242,362.653 424.829,370.731 425.415,390.861 426.001,398.902 426.588,429.553 427.174,468.915 427.761,488.452 428.347,515.056 428.933,524.272 429.52,542.082 430.106,551.259 430.693,575.631 431.279,591.386 431.865,620.109 432.452,627.56 433.038,641.833 433.625,668.132 434.211,681.415 434.798,688.456 435.384,701.493 435.97,724.89 436.557,746.793 437.143,754.092 437.73,769.861 438.316,780.124 438.902,795.493 439.489,805.51 440.075,812.028 440.662,822.414 441.248,832.592 441.835,842.153 442.421,855.372 443.007,868.207 443.594,884.089 444.18,893.323 444.767,905.397 445.353,920.544 445.939,928.168 446.526,936.153 447.112,940.984 447.699,948.779 448.285,953.766 448.871,964.326 449.458,972.055 450.044,979.22 450.631,989.68 451.217,996.903 451.804,1006.82 452.39,1018.83 452.976,1025.34 453.563,1029.43 454.149,1037.93 454.736,1041.87 455.322,1050.5 455.908,1058.8 456.495,1068.83 457.081,1071.94 457.668,1077.23 458.254,1080.17 458.84,1083.67 459.427,1090.98 460.013,1094.11 460.6,1099.47 461.186,1104.31 461.773,1111.18 462.359,1113.61 462.945,1120.01 463.532,1124.28 464.118,1130.27 464.705,1132.59 465.291,1140.49 465.877,1146.03 466.464,1149.26 467.05,1154.23 467.637,1155.75 468.223,1160.98 468.809,1168.14 469.396,1170.97 469.982,1173.93 470.569,1176.86 471.155,1178.04 471.742,1180.99 472.328,1187.28 472.914,1191.54 473.501,1193.82 474.087,1194.2 474.674,1194.76 475.26,1198.89 475.846,1197.39 476.433,1199.59 477.019,1203.43 477.606,1203.98 478.192,1206.24 478.778,1211.3 479.365,1212.79 479.951,1216.36 480.538,1219.39 481.124,1217.73 481.711,1219.33 482.297,1220.54 482.883,1221.88 483.47,1221.66 484.056,1223.42 484.643,1223.29 485.229,1226.76 485.815,1226.68 486.402,1231.37 486.988,1235.89 487.575,1236.91 488.161,1239.46 488.748,1241.94 489.334,1245.45 489.92,1243.02 490.507,1244.85 491.093,1246.86 491.68,1249.11 492.266,1248.02 492.852,1248.75 493.439,1246.35 494.025,1245.08 494.612,1242.78 495.198,1244.93 495.784,1244.33 496.371,1243.98 496.957,1246.18 497.544,1246.96 498.13,1249 498.717,1247.99 499.303,1247.09 499.889,1244.52 500.476,1248.42 501.062,1249.28 501.649,1248.2 502.235,1246.13 502.821,1245.79 503.408,1245.15 503.994,1244.79 504.581,1247.3 505.167,1248.09 505.753,1248.9 506.34,1248.38 506.926,1250.53 507.513,1248.6 508.099,1246.66 508.686,1244.86 509.272,1245.64 509.858,1243.56 510.445,1244.43 511.031,1244.1 511.618,1243.43 512.204,1244.26 512.79,1245.46 513.377,1246.43 513.963,1247.28 514.55,1243.87 515.136,1243.56 515.722,1247.4 516.309,1246.53 516.895,1247.39 517.482,1246.52 518.068,1246.23 518.655,1245.73 519.241,1245.35 519.827,1246.5 520.414,1247.34 521,1246.59 521.587,1244.67 522.173,1245.39 522.759,1246.21 523.346,1246.01 523.932,1244 524.519,1245.1 525.105,1247.41 525.691,1243.92 526.278,1245.1 526.864,1246.47 527.451,1248.91 528.037,1246.82 528.624,1246.5 529.21,1244.53 529.796,1245.41 530.383,1243.73 530.969,1244.78 531.556,1244.24 532.142,1242.47 532.728,1242.19 533.315,1240.54 533.901,1243.47 534.488,1246.16 535.074,1245.9 535.661,1246.59 536.247,1247.7 536.833,1247.06 537.42,1247.89 538.006,1246.87 538.593,1248.01 539.179,1245.56 539.765,1245.45 540.352,1245.27 540.938,1246.41 541.525,1243.27 542.111,1244.49 542.697,1242.7 543.284,1242.6 543.87,1244.02 544.457,1242.31 545.043,1240.36 545.63,1240.57 546.216,1240.42 546.802,1241.82 547.389,1241.71 547.975,1244.19 548.562,1246.65 549.148,1244.45 549.734,1242.76 550.321,1246.76 550.907,1248.95 551.494,1249.46 552.08,1247.64 552.666,1245.8 553.253,1246.93 553.839,1246.2 554.426,1245.53 555.012,1245.25 555.599,1243.51 556.185,1243.4 556.771,1241.58 557.358,1241.2 557.944,1242.32 558.531,1240.38 559.117,1237.17 559.703,1239.85 560.29,1241.08 560.876,1239.28 561.463,1238.88 562.049,1237.19 562.635,1237.19 563.222,1239.87 563.808,1239.65 564.395,1236.37 564.981,1234.9 565.568,1237.67 566.154,1237.76 566.74,1237.66 567.327,1240.26 567.913,1240.1 568.5,1238.68 569.086,1238.33 569.672,1238.42 570.259,1237.88 570.845,1239.14 571.432,1240.4 572.018,1242.7 572.605,1242.15 573.191,1243.1 573.777,1242.47 574.364,1243.36 574.95,1244.17 575.537,1243.6 576.123,1246.05 576.709,1246.6 577.296,1247.4 577.882,1248.03 578.469,1247.06 579.055,1244.87 579.641,1244.04 580.228,1243.39 580.814,1241.24 581.401,1240.78 581.987,1240.21 582.574,1241.13 583.16,1243.41 583.746,1244.08 584.333,1243.5 584.919,1241.52 585.506,1242.33 586.092,1243.32 586.678,1244.19 587.265,1246.11 587.851,1245.72 588.438,1247.79 589.024,1249.85 589.61,1244.31 590.197,1243.62 590.783,1243.06 591.37,1242.54 591.956,1239.27 592.543,1240.25 593.129,1238.21 593.715,1237.83 594.302,1237.45 594.888,1238.56 595.475,1239.69 596.061,1237.73 596.647,1239.04 597.234,1238.69 597.82,1238.03 598.407,1241.53 598.993,1236.44 599.579,1235.85 600.166,1236.91 600.752,1241.02 601.339,1236.21 601.925,1236.12 602.512,1232.81 603.098,1231.06 603.684,1234.04 604.271,1234.19 604.857,1232.57 605.444,1231.21 606.03,1231.14 606.616,1231.08 607.203,1231.26 607.789,1232.5 608.376,1229.41 608.962,1230.68 609.548,1230.7 610.135,1231.96 610.721,1235.9 611.308,1234.24 611.894,1232.68 612.481,1232.25 613.067,1234.82 613.653,1232.96 614.24,1234.23 614.826,1231.14 615.413,1229.59 615.999,1226.85 616.585,1225.61 617.172,1224.05 617.758,1224.04 618.345,1224.39 618.931,1224.55 619.518,1223.06 620.104,1223.08 620.69,1223.27 621.277,1222.22 621.863,1222.43 622.45,1224.46 623.036,1227.25 623.622,1225.85 624.209,1226.06 624.795,1229.14 625.382,1229.02 625.968,1228.96 626.554,1227.26 627.141,1227.16 627.727,1230.22 628.314,1231.48 628.9,1231.22 629.487,1232.47 630.073,1233.59 630.659,1233.17 631.246,1232.49 631.832,1232.12 632.419,1230.27 633.005,1227.02 633.591,1227.19 634.178,1228.61 634.764,1231.32 635.351,1235.28 635.937,1235.23 636.523,1234.77 637.11,1234.37 637.696,1233.9 638.283,1232.05 638.869,1232.84 639.456,1231.29 640.042,1231.17 640.628,1233.69 641.215,1231.69 641.801,1230.09 642.388,1227.38 642.974,1227.45 643.56,1227.49 644.147,1227.5 644.733,1228.81 645.32,1228.8 645.906,1231.64 646.492,1231.22 647.079,1230.9 647.665,1230.81 648.252,1229.21 648.838,1227.75 649.425,1229.05 650.011,1232.98 650.597,1232.54 651.184,1233.18 651.77,1231.48 652.357,1231.33 652.943,1229.75 653.529,1232.37 654.116,1230.64 654.702,1228.98 655.289,1228.44 655.875,1228.63 656.462,1234.06 657.048,1232.41 657.634,1230.62 658.221,1227.5 658.807,1227.62 659.394,1227.39 659.98,1228.79 660.566,1228.58 661.153,1230.08 661.739,1229.79 662.326,1228.05 662.912,1228.94 663.498,1231.77 664.085,1231.53 664.671,1231.11 665.258,1229.38 665.844,1228.95 666.431,1224.32 667.017,1224.49 667.603,1224.67 668.19,1226.05 668.776,1225.79 669.363,1227.02 669.949,1229.7 670.535,1229.53 671.122,1225.23 671.708,1225.11 672.295,1223.89 672.881,1222.65 673.467,1224.16 674.054,1227.2 674.64,1229.64 675.227,1227.81 675.813,1226.19 676.4,1226.24 676.986,1227.52 677.572,1227.26 678.159,1228.66 678.745,1228.41 679.332,1224 679.918,1224.16 680.504,1224.37 681.091,1224.75 681.677,1223.08 682.264,1221.61 682.85,1221.72 683.436,1224.43 684.023,1222.83 684.609,1221.3 685.196,1221.34 685.782,1221.65 686.369,1221.75 686.955,1221.9 687.541,1221.89 688.128,1222.01 688.714,1220.52 689.301,1223.65 689.887,1223.82 690.473,1221.05 691.06,1223.99 691.646,1222.51 692.233,1222.74 692.819,1222.73 693.405,1222.84 693.992,1221.43 694.578,1221.66 695.165,1217.54 695.751,1216.64 696.338,1217.24 696.924,1220.05 697.51,1220.14 698.097,1221.91 698.683,1222.22 699.27,1222.32 699.856,1221.17 700.442,1219.86 701.029,1221.5 701.615,1221.45 702.202,1222.98 702.788,1224.43 703.375,1226.97 703.961,1228.08 704.547,1227.53 705.134,1224 705.72,1224.27 706.307,1222.72 706.893,1224 707.479,1226.97 708.066,1226.91 708.652,1226.64 709.239,1226.7 709.825,1227.8 710.411,1227.53 710.998,1226.16 711.584,1226.16 712.171,1227.33 712.757,1228.55 713.344,1231.08 713.93,1230.57 714.516,1231.11 715.103,1230.88 715.689,1232.28 716.276,1232.03 716.862,1235.85 717.448,1233.74 718.035,1231.97 718.621,1231.65 719.208,1226.92 719.794,1226.81 720.38,1228.07 720.967,1228.94 721.553,1231.73 722.14,1232.5 722.726,1229.32 723.313,1224.9 723.899,1226.34 724.485,1224.69 725.072,1224.43 725.658,1224.41 726.245,1227.04 726.831,1228.1 727.417,1228.94 728.004,1228.68 728.59,1228.54 729.177,1228.39 729.763,1226.84 730.349,1226.6 730.936,1222.04 731.522,1221.87 732.109,1223.11 732.695,1223.05 733.282,1227.26 733.868,1226.98 734.454,1228.28 735.041,1228.86 735.627,1231.61 736.214,1226.71 736.8,1227.78 737.386,1224.85 737.973,1225.8 738.559,1227.1 739.146,1224.95 739.732,1226.22 740.318,1224.69 740.905,1225.71 741.491,1231.2 742.078,1232.43 742.664,1229.95 743.251,1233.84 743.837,1234.51 744.423,1233.88 745.01,1233.4 745.596,1232.62 746.183,1230.5 746.769,1228.47 747.355,1228.24 747.942,1223.78 748.528,1222.46 749.115,1222.24 749.701,1223.59 750.288,1224.85 750.874,1226.05 751.46,1226.91 752.047,1226.64 752.633,1223.75 753.22,1223.78 753.806,1223.54 754.392,1221.92 754.979,1223.24 755.565,1221.3 756.152,1218.2 756.738,1216.79 757.324,1215.7 757.911,1214.76 758.497,1213.71 759.084,1215.56 759.67,1216.24 760.257,1216.25 760.843,1218.07 761.429,1221.41 762.016,1222.82 762.602,1226.83 763.189,1225.06 763.775,1226.15 764.361,1227.34 764.948,1225.72 765.534,1227.33 766.121,1227.29 766.707,1227.18 767.293,1225.3 767.88,1226.71 768.466,1224.98 769.053,1227.4 769.639,1227.04 770.226,1226.87 770.812,1225.2 771.398,1225.14 771.985,1226.11 772.571,1225.74 773.158,1219.82 773.744,1221.27 774.33,1216.95 774.917,1220.02 775.503,1219.88 776.09,1221.59 776.676,1220.05 777.262,1224.55 777.849,1221.89 778.435,1223.6 779.022,1229.08 779.608,1230.27 780.195,1229.92 780.781,1229.58 781.367,1227.65 781.954,1228.62 782.54,1231.02 783.127,1230.16 783.713,1231.04 784.299,1227.83 784.886,1226.28 785.472,1223.06 786.059,1224.2 786.645,1224.01 787.232,1222.75 787.818,1224.19 788.404,1223.91 788.991,1223.72 789.577,1224.93 790.164,1224.86 790.75,1227.52 791.336,1224.33 791.923,1227.18 792.509,1227.02 793.096,1229.43 793.682,1225.8 794.268,1224.48 794.855,1220.41 795.441,1220.69 796.028,1220.56 796.614,1219.37 797.201,1220.79 797.787,1222.1 798.373,1222.77 798.96,1222.68 799.546,1224.06 800.133,1226.76 800.719,1224.9 801.305,1226.22 801.892,1225.98 802.478,1225.63 803.065,1224.06 803.651,1219.69 804.237,1220.99 804.824,1221.05 805.41,1219.7 805.997,1215.54 806.583,1211.74 807.17,1210.58 807.756,1209.68 808.342,1210.52 808.929,1211.03 809.515,1214.5 810.102,1213.5 810.688,1213.93 811.274,1211.43 811.861,1211.68 812.447,1215 813.034,1216.91 813.62,1215.68 814.206,1217.4 814.793,1217.99 815.379,1221.25 815.966,1222.7 816.552,1225.25 817.139,1222.15 817.725,1220.56 818.311,1220.83 818.898,1220.89 819.484,1218.11 820.071,1219.64 820.657,1221.12 821.243,1220.95 821.83,1220.96 822.416,1222.21 823.003,1219.19 823.589,1217.65 824.175,1213.73 824.762,1214.23 825.348,1217.4 825.935,1218.89 826.521,1217.59 827.108,1219.48 827.694,1220.91 828.28,1223.93 828.867,1222.12 829.453,1220.64 830.04,1223.38 830.626,1224.7 831.212,1227.25 831.799,1226.75 832.385,1224.97 832.972,1223.33 833.558,1223.33 834.145,1224.5 834.731,1224.16 835.317,1221.37 835.904,1219.87 836.49,1218.42 837.077,1218.44 837.663,1215.66 838.249,1215.88 838.836,1216.03 839.422,1213.36 840.009,1215.11 840.595,1212.67 841.181,1214.38 841.768,1213.24 842.354,1213.7 842.941,1214.09 843.527,1214.42 844.114,1213.28 844.7,1213.58 845.286,1212.28 845.873,1209.75 846.459,1213.42 847.046,1215.66 847.632,1212.9 848.218,1214.59 848.805,1213.54 849.391,1215.55 849.978,1215.83 850.564,1216.08 851.15,1214.66 851.737,1212.12 852.323,1212.5 852.91,1211.4 853.496,1213.5 854.083,1215.39 854.669,1215.73 855.255,1218.91 855.842,1220.6 856.428,1219.07 857.015,1220.87 857.601,1220.66 858.187,1220.43 858.774,1220.54 859.36,1220.47 859.947,1221.81 860.533,1221.53 861.119,1224.35 861.706,1224.19 862.292,1224.3 862.879,1224.02 863.465,1223.68 864.052,1227.61 864.638,1230.15 865.224,1231.22 865.811,1229.39 866.397,1225.99 866.984,1227.1 867.57,1228.02 868.156,1226.18 868.743,1226.06 869.329,1222.74 869.916,1221.06 870.502,1218.1 871.089,1222.11 871.675,1220.56 872.261,1223.14 872.848,1225.71 873.434,1226.9 874.021,1226.32 874.607,1227.74 875.193,1227.31 875.78,1222.54 876.366,1223.99 876.953,1226.65 877.539,1226.54 878.125,1226.08 878.712,1227.01 879.298,1226.5 879.885,1226.05 880.471,1226.94 881.058,1229.18 881.644,1231.51 882.23,1229.39 882.817,1226.03 883.403,1224.16 883.99,1221.18 884.576,1219.65 885.162,1219.73 885.749,1222.54 886.335,1222.22 886.922,1220.87 887.508,1223.47 888.094,1221.74 888.681,1223.05 889.267,1221.4 889.854,1220.13 890.44,1221.56 891.027,1224.33 891.613,1224.13 892.199,1223.64 892.786,1228.83 893.372,1226.86 893.959,1226.29 894.545,1226.06 895.131,1227.16 895.718,1226.68 896.304,1224.91 896.891,1229.91 897.477,1230.88 898.063,1229.02 898.65,1227.23 899.236,1225.43 899.823,1225.1 900.409,1228.87 900.996,1229.98 901.582,1230.81 902.168,1232.89 902.755,1232.1 903.341,1233.07 903.928,1232.17 904.514,1229.79 905.1,1229.56 905.687,1229.02 906.273,1227.08 906.86,1227.82 907.446,1225.9 908.032,1222.81 908.619,1223.93 909.205,1220.78 909.792,1220.32 910.378,1220.18 910.965,1222.71 911.551,1221.24 912.137,1218.31 912.724,1218.41 913.31,1219.92 913.897,1219.73 914.483,1218.48 915.069,1218.44 915.656,1218.13 916.242,1219.7 916.829,1215.37 917.415,1215.21 918.002,1212.3 918.588,1214.34 919.174,1214.98 919.761,1216.32 920.347,1217.67 920.934,1218.92 921.52,1218.79 922.106,1218.37 922.693,1219.76 923.279,1215.59 923.866,1215.86 924.452,1214.61 925.038,1214.88 925.625,1215.22 926.211,1218.39 926.798,1216.02 927.384,1217.6 927.971,1217.57 928.557,1217.86 929.143,1217.83 929.73,1219.33 930.316,1219.65 930.903,1221 931.489,1217.88 932.075,1216.68 932.662,1215.32 933.248,1217.07 933.835,1217.21 934.421,1217.19 935.007,1218.89 935.594,1215.99 936.18,1219.02 936.767,1217.53 937.353,1221.7 937.94,1221.84 938.526,1223.08 939.112,1224.2 939.699,1225.09 940.285,1224.23 940.872,1223.89 941.458,1224.79 942.044,1222.97 942.631,1221.4 943.217,1219.82 943.804,1218.34 944.39,1219.99 944.976,1218.38 945.563,1221.16 946.149,1222.19 946.736,1222.01 947.322,1220.53 947.909,1222 948.495,1221.78 949.081,1222.66 949.668,1222.65 950.254,1223.92 950.841,1223.77 951.427,1220.4 952.013,1218.82 952.6,1219.96 953.186,1220.16 953.773,1221.34 954.359,1225.79 954.945,1224.01 955.532,1223.81 956.118,1225 956.705,1223.59 957.291,1224.73 957.878,1219.95 958.464,1220.04 959.05,1220.08 959.637,1223.15 960.223,1225.56 960.81,1222.13 961.396,1220.63 961.982,1217.71 962.569,1212.01 963.155,1213.92 963.742,1214.41 964.328,1214.62 964.915,1215.01 965.501,1215.44 966.087,1212.84 966.674,1214.94 967.26,1213.64 967.847,1214 968.433,1216.97 969.019,1214.4 969.606,1213.4 970.192,1213.87 970.779,1215.66 971.365,1218.83 971.951,1217.39 972.538,1218.87 973.124,1220.18 973.711,1222.95 974.297,1222.7 974.884,1219.85 975.47,1218.18 976.056,1222.43 976.643,1219.46 977.229,1222.37 977.816,1221.97 978.402,1222.88 978.988,1219.84 979.575,1219.93 980.161,1218.54 980.748,1217.33 981.334,1211.97 981.92,1210.91 982.507,1207.05 983.093,1207.64 983.68,1211.13 984.266,1211.83 984.853,1213.93 985.439,1214.26 986.025,1212.92 986.612,1211.65 987.198,1210.57 987.785,1209.36 988.371,1207.09 988.957,1207.66 989.544,1209.72 990.13,1211.83 990.717,1212.22 991.303,1212.62 991.889,1214.58 992.476,1214.98 993.062,1216.62 993.649,1216.6 994.235,1215.32 994.822,1216.84 995.408,1217.06 995.994,1217.19 996.581,1217.13 997.167,1217.12 997.754,1215.58 998.34,1215.43 998.926,1214.23 999.513,1213.28 1000.1,1212.43 1000.69,1211.61 1001.27,1212.27 1001.86,1211.53 1002.44,1208.82 1003.03,1211.89 1003.62,1212.12 1004.2,1209.57 1004.79,1211.31 1005.38,1213.06 1005.96,1214.74 1006.55,1215.08 1007.14,1214.06 1007.72,1214.26 1008.31,1217.91 1008.9,1218.08 1009.48,1218.41 1010.07,1217.2 1010.65,1217.23 1011.24,1218.67 1011.83,1217.18 1012.41,1217.38 1013,1217.3 1013.59,1219.27 1014.17,1216.48 1014.76,1213.67 1015.35,1213.87 1015.93,1214.01 1016.52,1212.86 1017.11,1211.88 1017.69,1213.84 1018.28,1213.9 1018.86,1218.22 1019.45,1219.94 1020.04,1221.01 1020.62,1220.64 1021.21,1219.48 1021.8,1220.86 1022.38,1223.49 1022.97,1224.69 1023.56,1227.66 1024.14,1225.7 1024.73,1225.2 1025.32,1222.43 1025.9,1221.04 1026.49,1223.62 1027.07,1225.06 1027.66,1227.51 1028.25,1226.86 1028.83,1227.73 1029.42,1227.27 1030.01,1228.1 1030.59,1226.49 1031.18,1227.34 1031.77,1229.67 1032.35,1229.36 1032.94,1228.51 1033.52,1229.14 1034.11,1225.81 1034.7,1225.26 1035.28,1224.98 1035.87,1224.74 1036.46,1224.58 1037.04,1222.96 1037.63,1224.09 1038.22,1222.66 1038.8,1222.54 1039.39,1219.37 1039.98,1219.48 1040.56,1220.76 1041.15,1220.73 1041.73,1222.17 1042.32,1217.62 1042.91,1220.49 1043.49,1219.04 1044.08,1221.87 1044.67,1221.7 1045.25,1222.83 1045.84,1222.4 1046.43,1222.32 1047.01,1222.23 1047.6,1221.02 1048.19,1218.22 1048.77,1218.1 1049.36,1221.02 1049.94,1221.05 1050.53,1219.43 1051.12,1220.84 1051.7,1220.93 1052.29,1219.52 1052.88,1216.47 1053.46,1219.59 1054.05,1221.08 1054.64,1219.64 1055.22,1219.7 1055.81,1221.25 1056.39,1219.59 1056.98,1218.08 1057.57,1219.22 1058.15,1219.07 1058.74,1219.03 1059.33,1217.72 1059.91,1217.46 1060.5,1219.1 1061.09,1214.82 1061.67,1215.07 1062.26,1212.11 1062.85,1209.64 1063.43,1211.44 1064.02,1211.74 1064.6,1213.49 1065.19,1215.3 1065.78,1215.26 1066.36,1213.95 1066.95,1214.33 1067.54,1210.26 1068.12,1212.08 1068.71,1210.94 1069.3,1212.53 1069.88,1211.61 1070.47,1213.36 1071.06,1214.93 1071.64,1215.08 1072.23,1213.66 1072.81,1213.72 1073.4,1214.16 1073.99,1214.47 1074.57,1211.87 1075.16,1213.51 1075.75,1213.57 1076.33,1213.88 1076.92,1216.9 1077.51,1214.22 1078.09,1214.45 1078.68,1216.21 1079.26,1217.85 1079.85,1218.05 1080.44,1216.7 1081.02,1217.2 1081.61,1215.86 1082.2,1214.78 1082.78,1212.56 1083.37,1213.92 1083.96,1211.28 1084.54,1210.37 1085.13,1210.64 1085.72,1212.5 1086.3,1214.03 1086.89,1214.18 1087.47,1217.17 1088.06,1217.04 1088.65,1217.16 1089.23,1217.05 1089.82,1217.24 1090.41,1217.59 1090.99,1219.04 1091.58,1220.3 1092.17,1218.75 1092.75,1219.84 1093.34,1221.36 1093.93,1222.61 1094.51,1222.49 1095.1,1223.57 1095.68,1221.73 1096.27,1220.42 1096.86,1218.88 1097.44,1221.74 1098.03,1223.16 1098.62,1224.23 1099.2,1225.5 1099.79,1225.14 1100.38,1224.59 1100.96,1226.93 1101.55,1230.56 1102.14,1231.18 1102.72,1236.21 1103.31,1235.09 1103.89,1235.69 1104.48,1238.9 1105.07,1237.81 1105.65,1235.48 1106.24,1237.18 1106.83,1233.26 1107.41,1228.11 1108,1227.56 1108.59,1228.48 1109.17,1226.59 1109.76,1225.89 1110.34,1226.98 1110.93,1223.93 1111.52,1223.46 1112.1,1227.1 1112.69,1226.85 1113.28,1227.81 1113.86,1227.06 1114.45,1226.41 1115.04,1225.95 1115.62,1225.7 1116.21,1222.4 1116.8,1222.26 1117.38,1223.51 1117.97,1224.47 1118.55,1222.63 1119.14,1221.26 1119.73,1220.87 1120.31,1222 1120.9,1221.64 1121.49,1218.5 1122.07,1218.67 1122.66,1217.31 1123.25,1220.21 1123.83,1219.85 1124.42,1222.45 1125.01,1224.91 1125.59,1227.26 1126.18,1225.38 1126.76,1225.15 1127.35,1223.34 1127.94,1221.69 1128.52,1218.49 1129.11,1218.07 1129.7,1219.84 1130.28,1217.14 1130.87,1218.18 1131.46,1218.09 1132.04,1216.61 1132.63,1214.03 1133.21,1211.69 1133.8,1212.07 1134.39,1212.32 1134.97,1213.99 1135.56,1212.74 1136.15,1211.71 1136.73,1214.59 1137.32,1210.65 1137.91,1210.95 1138.49,1211.52 1139.08,1211.88 1139.67,1209.77 1140.25,1207.29 1140.84,1208.05 1141.42,1208.49 1142.01,1207.51 1142.6,1207.78 1143.18,1206.92 1143.77,1203.38 1144.36,1202.69 1144.94,1207.67 1145.53,1208.64 1146.12,1211.87 1146.7,1209.55 1147.29,1204 1147.88,1204.45 1148.46,1203.34 1149.05,1204.16 1149.63,1206.17 1150.22,1207.02 1150.81,1207.51 1151.39,1207.96 1151.98,1207.22 1152.57,1207.94 1153.15,1210.08 1153.74,1209.15 1154.33,1211.3 1154.91,1213.33 1155.5,1215.24 1156.09,1216.97 1156.67,1218.62 1157.26,1218.43 1157.84,1219.98 1158.43,1218.3 1159.02,1219.59 1159.6,1219.4 1160.19,1223.74 1160.78,1223.31 1161.36,1221.7 1161.95,1220.06 1162.54,1224.31 1163.12,1223.92 1163.71,1225.37 1164.29,1224.75 1164.88,1224.36 1165.47,1222.94 1166.05,1221.32 1166.64,1221.18 1167.23,1221.09 1167.81,1222.43 1168.4,1223.66 1168.99,1220.88 1169.57,1222.04 1170.16,1221.79 1170.75,1220.15 1171.33,1219.61 1171.92,1218.21 1172.5,1218.11 1173.09,1217.08 1173.68,1220.95 1174.26,1220.68 1174.85,1219.19 1175.44,1219.09 1176.02,1217.48 1176.61,1217.62 1177.2,1216.48 1177.78,1215.1 1178.37,1216.72 1178.96,1221.19 1179.54,1220.83 1180.13,1220.69 1180.71,1223.61 1181.3,1223.41 1181.89,1221.88 1182.47,1223.03 1183.06,1221.47 1183.65,1219.66 1184.23,1221.99 1184.82,1220.56 1185.41,1220.29 1185.99,1220.32 1186.58,1221.55 1187.16,1223 1187.75,1222.75 1188.34,1224.08 1188.92,1222.27 1189.51,1225.19 1190.1,1223.38 1190.68,1219.29 1191.27,1217.76 1191.86,1216.22 1192.44,1213.7 1193.03,1215.34 1193.62,1215.72 1194.2,1214.53 1194.79,1215.76 1195.37,1214.37 1195.96,1213.2 1196.55,1213.31 1197.13,1213.46 1197.72,1212.41 1198.31,1212.55 1198.89,1210.04 1199.48,1213.28 1200.07,1213.53 1200.65,1210.93 1201.24,1210.27 1201.83,1206.47 1202.41,1207 1203,1210.31 1203.58,1210.45 1204.17,1210.83 1204.76,1211.16 1205.34,1214.48 1205.93,1213.47 1206.52,1217.99 1207.1,1215.32 1207.69,1218.44 1208.28,1218.52 1208.86,1219.53 1209.45,1223.84 1210.03,1226.38 1210.62,1225.78 1211.21,1228.06 1211.79,1227.39 1212.38,1227.11 1212.97,1223.88 1213.55,1223.54 1214.14,1224.89 1214.73,1225.83 1215.31,1225.38 1215.9,1224.63 1216.49,1222.65 1217.07,1218.16 1217.66,1222.25 1218.24,1223.44 1218.83,1221.84 1219.42,1220.39 1220,1218.72 1220.59,1217.24 1221.18,1217.49 1221.76,1217.36 1222.35,1217.45 1222.94,1217.37 1223.52,1216.18 1224.11,1218.98 1224.7,1216.07 1225.28,1218.79 1225.87,1217.34 1226.45,1220.24 1227.04,1218.8 1227.63,1215.9 1228.21,1216.09 1228.8,1217.42 1229.39,1211.71 1229.97,1210.37 1230.56,1212.19 1231.15,1214.41 1231.73,1213.18 1232.32,1212.06 1232.91,1215.37 1233.49,1216.96 1234.08,1218.64 1234.66,1216.98 1235.25,1216.89 1235.84,1212.76 1236.42,1212.88 1237.01,1215.92 1237.6,1217.6 1238.18,1219.29 1238.77,1217.74 1239.36,1217.47 1239.94,1217.37 1240.53,1218.82 1241.11,1218.82 1241.7,1221.38 1242.29,1219.75 1242.87,1221.31 1243.46,1220.96 1244.05,1222.21 1244.63,1220.44 1245.22,1222.1 1245.81,1223.22 1246.39,1227.33 1246.98,1228.34 1247.57,1232.16 1248.15,1234.19 1248.74,1234.46 1249.32,1232.35 1249.91,1232.93 1250.5,1232.07 1251.08,1231.36 1251.67,1232.09 1252.26,1232.68 1252.84,1229.27 1253.43,1231.27 1254.02,1230.73 1254.6,1225.67 1255.19,1222.07 1255.78,1223.17 1256.36,1222.92 1256.95,1224.31 1257.53,1219.64 1258.12,1219.57 1258.71,1220.69 1259.29,1217.67 1259.88,1217.86 1260.47,1218.01 1261.05,1215.11 1261.64,1213.78 1262.23,1214.32 1262.81,1213.29 1263.4,1211.97 1263.98,1213.72 1264.57,1212.68 1265.16,1214.55 1265.74,1216.21 1266.33,1217.83 1266.92,1216.68 1267.5,1216.86 1268.09,1219.78 1268.68,1219.5 1269.26,1221.18 1269.85,1219.4 1270.44,1216.31 1271.02,1215 1271.61,1213.88 1272.19,1217.1 1272.78,1217.12 1273.37,1217.16 1273.95,1213.02 1274.54,1214.52 1275.13,1214.87 1275.71,1214.91 1276.3,1210.54 1276.89,1212.65 1277.47,1214.12 1278.06,1211.67 1278.65,1213.36 1279.23,1211.87 1279.82,1211.98 1280.4,1210.94 1280.99,1212.85 1281.58,1211.75 1282.16,1212.18 1282.75,1214.11 1283.34,1214.5 1283.92,1215.85 1284.51,1220.29 1285.1,1217.49 1285.68,1218.76 1286.27,1217.51 1286.86,1219.34 1287.44,1219.29 1288.03,1217.84 1288.61,1217.72 1289.2,1217.63 1289.79,1217.42 1290.37,1214.81 1290.96,1215.16 1291.55,1215.4 1292.13,1215.46 1292.72,1215.49 1293.31,1217.2 1293.89,1214.46 1294.48,1215.97 1295.06,1214.75 1295.65,1213.35 1296.24,1212.33 1296.82,1211.33 1297.41,1214.75 1298,1212.36 1298.58,1214.24 1299.17,1214.5 1299.76,1216.53 1300.34,1214.92 1300.93,1217.87 1301.52,1219.54 1302.1,1219.18 1302.69,1220.67 1303.27,1220.5 1303.86,1221.75 1304.45,1221.59 1305.03,1222.87 1305.62,1220.93 1306.21,1222.11 1306.79,1222.07 1307.38,1220.42 1307.97,1220.12 1308.55,1220.12 1309.14,1221.4 1309.73,1221.18 1310.31,1222.46 1310.9,1219.52 1311.48,1219.41 1312.07,1221.95 1312.66,1223.02 1313.24,1225.56 1313.83,1225.28 1314.42,1224.85 1315,1221.67 1315.59,1221.62 1316.18,1222.93 1316.76,1224.09 1317.35,1225.35 1317.93,1226.26 1318.52,1224.15 1319.11,1222.62 1319.69,1222.2 1320.28,1220.61 1320.87,1221.93 1321.45,1219.17 1322.04,1217.26 1322.63,1217.25 1323.21,1213.26 1323.8,1212.21 1324.39,1212.54 1324.97,1212.75 1325.56,1211.75 1326.14,1210.69 1326.73,1209.64 1327.32,1209.95 1327.9,1208.81 1328.49,1208.93 1329.08,1207.96 1329.66,1204.36 1330.25,1202.08 1330.84,1203.22 1331.42,1206.92 1332.01,1206.18 1332.6,1206.89 1333.18,1205.45 1333.77,1202.01 1334.35,1201.59 1334.94,1202.71 1335.53,1200.98 1336.11,1199.19 1336.7,1200.28 1337.29,1204.59 1337.87,1203.68 1338.46,1205.6 1339.05,1207.82 1339.63,1208.28 1340.22,1207.35 1340.8,1209.21 1341.39,1212.51 1341.98,1212.61 1342.56,1211.22 1343.15,1213.2 1343.74,1213.29 1344.32,1212.08 1344.91,1213.68 1345.5,1215.29 1346.08,1213.74 1346.67,1213.62 1347.26,1218.39 1347.84,1221.14 1348.43,1222.67 1349.01,1222.17 1349.6,1221.95 1350.19,1223.33 1350.77,1224.35 1351.36,1222.52 1351.95,1223.33 1352.53,1222.95 1353.12,1225.11 1353.71,1223.62 1354.29,1220.6 1354.88,1220.29 1355.47,1217.1 1356.05,1215.68 1356.64,1215.77 1357.22,1215.82 1357.81,1214.4 1358.4,1213.22 1358.98,1213.61 1359.57,1215.67 1360.16,1216.07 1360.74,1217.46 1361.33,1219.17 1361.92,1217.3 1362.5,1217.17 1363.09,1216.09 1363.68,1216.28 1364.26,1216.5 1364.85,1219.28 1365.43,1219.65 1366.02,1219.74 1366.61,1219.66 1367.19,1216.7 1367.78,1218.08 1368.37,1216.79 1368.95,1215.1 1369.54,1218.03 1370.13,1220.77 1370.71,1220.62 1371.3,1222.26 1371.88,1223.37 1372.47,1221.76 1373.06,1220.08 1373.64,1220.09 1374.23,1219.68 1374.82,1222.21 1375.4,1226.43 1375.99,1226.01 1376.58,1226.83 1377.16,1226.1 1377.75,1224.2 1378.34,1222.6 1378.92,1223.87 1379.51,1222.13 1380.09,1222.09 1380.68,1220.44 1381.27,1220.13 1381.85,1221.33 1382.44,1219.49 1383.03,1220.69 1383.61,1220.41 1384.2,1220.34 1384.79,1218.78 1385.37,1220.01 1385.96,1215.99 1386.55,1214.88 1387.13,1216.7 1387.72,1211.07 1388.3,1212.99 1388.89,1214.74 1389.48,1213.29 1390.06,1210.69 1390.65,1210.94 1391.24,1212.83 1391.82,1213.12 1392.41,1211.87 1393,1213.29 1393.58,1213.56 1394.17,1213.73 1394.75,1213.84 1395.34,1212.62 1395.93,1212.86 1396.51,1213.4 1397.1,1209.17 1397.69,1212.09 1398.27,1212.23 1398.86,1215.44 1399.45,1215.61 1400.03,1212.8 1400.62,1211.68 1401.21,1212.05 1401.79,1215.26 1402.38,1213.85 1402.96,1215.56 1403.55,1214.56 1404.14,1214.91 1404.72,1220.93 1405.31,1223.78 1405.9,1223.17 1406.48,1224.32 1407.07,1225.32 1407.66,1225.38 1408.24,1225.18 1408.83,1223.55 1409.42,1223.13 1410,1227.25 1410.59,1226.93 1411.17,1226.48 1411.76,1224.87 1412.35,1224.42 1412.93,1221.23 1413.52,1222.67 1414.11,1219.69 1414.69,1218.24 1415.28,1216.91 1415.87,1215.78 1416.45,1215.97 1417.04,1217.36 1417.63,1218.9 1418.21,1218.74 1418.8,1218.8 1419.38,1215.89 1419.97,1213.1 1420.56,1213.27 1421.14,1212.2 1421.73,1211.04 1422.32,1211.15 1422.9,1214.14 1423.49,1213.14 1424.08,1216.25 1424.66,1216.49 1425.25,1217.96 1425.83,1216.55 1426.42,1216.68 1427.01,1215.79 1427.59,1216.09 1428.18,1216.32 1428.77,1216.23 1429.35,1218.9 1429.94,1216.14 1430.53,1218.85 1431.11,1220.14 1431.7,1221.56 1432.29,1222.68 1432.87,1222.51 1433.46,1220.87 1434.04,1220.97 1434.63,1219.35 1435.22,1218.01 1435.8,1219.49 1436.39,1219.52 1436.98,1218.19 1437.56,1218.15 1438.15,1215.25 1438.74,1219.46 1439.32,1219.64 1439.91,1216.93 1440.5,1217.07 1441.08,1218.49 1441.67,1218.67 1442.25,1215.78 1442.84,1217.01 1443.43,1215.74 1444.01,1213.1 1444.6,1214.63 1445.19,1216.32 1445.77,1216.54 1446.36,1216.85 1446.95,1213.96 1447.53,1214.36 1448.12,1213.26 1448.7,1214.91 1449.29,1217.77 1449.88,1217.88 1450.46,1217.75 1451.05,1217.72 1451.64,1217.98 1452.22,1218.22 1452.81,1218.2 1453.4,1217.98 1453.98,1218.2 1454.57,1217.92 1455.16,1217.84 1455.74,1217.92 1456.33,1217.93 1456.91,1217.62 1457.5,1220.43 1458.09,1224.46 1458.67,1224.04 1459.26,1222.3 1459.85,1223.72 1460.43,1224.87 1461.02,1226.03 1461.61,1225.71 1462.19,1225.17 1462.78,1223.18 1463.37,1224.48 1463.95,1226.9 1464.54,1225.01 1465.12,1223.3 1465.71,1224.44 1466.3,1225.72 1466.88,1226.46 1467.47,1227.46 1468.06,1224.02 1468.64,1222.25 1469.23,1220.51 1469.82,1215.75 1470.4,1214.42 1470.99,1214.22 1471.57,1215.59 1472.16,1217.09 1472.75,1217.17 1473.33,1218.41 1473.92,1216.87 1474.51,1215.64 1475.09,1218.67 1475.68,1214.25 1476.27,1215.66 1476.85,1215.91 1477.44,1212.95 1478.03,1214.71 1478.61,1220.34 1479.2,1221.67 1479.78,1221.29 1480.37,1218.2 1480.96,1220.8 1481.54,1221.92 1482.13,1218.96 1482.72,1222.73 1483.3,1223.78 1483.89,1223.46 1484.48,1221.79 1485.06,1221.59 1485.65,1222.43 1486.24,1224.82 1486.82,1221.77 1487.41,1222.87 1487.99,1222.75 1488.58,1224.04 1489.17,1225.12 1489.75,1225.9 1490.34,1226.95 1490.93,1226.47 1491.51,1225.98 1492.1,1225.42 1492.69,1222.44 1493.27,1222.14 1493.86,1222.02 1494.45,1219.19 1495.03,1219.1 1495.62,1221.65 1496.2,1221.8 1496.79,1222.72 1497.38,1222.64 1497.96,1224.97 1498.55,1223.06 1499.14,1215.85 1499.72,1213.19 1500.31,1213.47 1500.9,1212.62 1501.48,1214.25 1502.07,1215.82 1502.65,1216.25 1503.24,1213.31 1503.83,1213.5 1504.41,1212.73 1505,1214.51 1505.59,1213.21 1506.17,1214.78 1506.76,1210.54 1507.35,1212.36 1507.93,1212.48 1508.52,1212.76 1509.11,1210.23 1509.69,1209.35 1510.28,1210.04 1510.86,1211.75 1511.45,1213.47 1512.04,1213.5 1512.62,1213.85 1513.21,1216.86 1513.8,1218.38 1514.38,1218.36 1514.97,1218.18 1515.56,1218.16 1516.14,1218.17 1516.73,1221.21 1517.32,1222.78 1517.9,1222.62 1518.49,1216.53 1519.07,1213.8 1519.66,1215.3 1520.25,1214.01 1520.83,1218.34 1521.42,1213.89 1522.01,1221.23 1522.59,1220.79 1523.18,1222.17 1523.77,1223.49 1524.35,1222.95 1524.94,1222.41 1525.52,1223.74 1526.11,1223.29 1526.7,1222.86 1527.28,1224.34 1527.87,1225.68 1528.46,1223.66 1529.04,1223.58 1529.63,1222.09 1530.22,1220.56 1530.8,1221.66 1531.39,1217.18 1531.98,1215.84 1532.56,1214.32 1533.15,1213.35 1533.73,1211.95 1534.32,1212.35 1534.91,1212.7 1535.49,1215.71 1536.08,1215.78 1536.67,1217.36 1537.25,1218.6 1537.84,1218.6 1538.43,1217.11 1539.01,1216.92 1539.6,1217.16 1540.19,1217.08 1540.77,1217.37 1541.36,1220.45 1541.94,1217.45 1542.53,1218.95 1543.12,1215.88 1543.7,1213.33 1544.29,1214.81 1544.88,1215.02 1545.46,1216.89 1546.05,1211.17 1546.64,1215.83 1547.22,1216.97 1547.81,1218.24 1548.4,1219.29 1548.98,1219.09 1549.57,1216.06 1550.15,1220.8 1550.74,1220.69 1551.33,1217.52 1551.91,1220.74 1552.5,1222.06 1553.09,1223.45 1553.67,1223.25 1554.26,1224.47 1554.85,1225.39 1555.43,1220.74 1556.02,1219.26 1556.6,1220.87 1557.19,1219.19 1557.78,1223.29 1558.36,1220.42 1558.95,1219.03 1559.54,1220.55 1560.12,1220.5 1560.71,1217.54 1561.3,1219.19 1561.88,1217.82 1562.47,1218.88 1563.06,1217.05 1563.64,1219.9 1564.23,1218.68 1564.81,1218.67 1565.4,1218.57 1565.99,1219.94 1566.57,1221.53 1567.16,1221.62 1567.75,1218.64 1568.33,1221.58 1568.92,1224.26 1569.51,1221.01 1570.09,1220.74 1570.68,1219.08 1571.27,1221.91 1571.85,1221.52 1572.44,1221.36 1573.02,1222.28 1573.61,1223.28 1574.2,1221.38 1574.78,1218.44 1575.37,1217.39 1575.96,1216.14 1576.54,1219.14 1577.13,1218.82 1577.72,1218.75 1578.3,1219.77 1578.89,1218.02 1579.47,1217.98 1580.06,1216.43 1580.65,1217.57 1581.23,1216.08 1581.82,1216.23 1582.41,1216.5 1582.99,1217.04 1583.58,1215.77 1584.17,1217.27 1584.75,1217.44 1585.34,1217.39 1585.93,1216.05 1586.51,1216.64 1587.1,1216.52 1587.68,1214.89 1588.27,1213.17 1588.86,1210.41 1589.44,1208.16 1590.03,1212.87 1590.62,1213.05 1591.2,1213.34 1591.79,1210.78 1592.38,1212.72 1592.96,1214.5 1593.55,1214.73 1594.14,1213.43 1594.72,1213.5 1595.31,1215.02 1595.89,1216.64 1596.48,1218.02 1597.07,1219.38 1597.65,1217.69 1598.24,1219.09 1598.83,1219.01 1599.41,1219.07 1600,1215.94 1600.59,1217.75 1601.17,1217.97 1601.76,1216.68 1602.34,1218.36 1602.93,1219.64 1603.52,1219.56 1604.1,1221.28 1604.69,1222.61 1605.28,1222.37 1605.86,1222.34 1606.45,1223.9 1607.04,1223.1 1607.62,1224.27 1608.21,1223.89 1608.8,1222.24 1609.38,1222.21 1609.97,1222.23 1610.55,1219.44 1611.14,1219.29 1611.73,1217.69 1612.31,1217.65 1612.9,1213.58 1613.49,1213.74 1614.07,1215.34 1614.66,1216.68 1615.25,1217.92 1615.83,1220.78 1616.42,1220.69 1617.01,1222.05 1617.59,1223.27 1618.18,1223.14 1618.76,1221.14 1619.35,1224.14 1619.94,1221.21 1620.52,1219.64 1621.11,1220.9 1621.7,1220.78 1622.28,1222.03 1622.87,1220.25 1623.46,1220.19 1624.04,1219.95 1624.63,1222.63 1625.22,1222.29 1625.8,1222.09 1626.39,1217.63 1626.97,1219.17 1627.56,1214.71 1628.15,1215.84 1628.73,1214.4 1629.32,1213.09 1629.91,1211.52 1630.49,1209.17 1631.08,1208.21 1631.67,1208.67 1632.25,1212.09 1632.84,1216.74 1633.42,1216.77 1634.01,1218.14 1634.6,1214.98 1635.18,1216.57 1635.77,1213.55 1636.36,1212.11 1636.94,1213.82 1637.53,1214.05 1638.12,1212.63 1638.7,1211.36 1639.29,1211.71 1639.88,1215.12 1640.46,1215.49 1641.05,1216.99 1641.63,1218.22 1642.22,1218.34 1642.81,1219.7 1643.39,1218.13 1643.98,1216.9 1644.57,1218.56 1645.15,1217.26 1645.74,1220.13 1646.33,1220.08 1646.91,1219.84 1647.5,1221.51 1648.09,1218.52 1648.67,1218.49 1649.26,1221.12 1649.84,1223.7 1650.43,1222.34 1651.02,1221.96 1651.6,1217.55 1652.19,1216.21 1652.78,1217.87 1653.36,1215.2 1653.95,1215.28 1654.54,1215.36 1655.12,1219.7 1655.71,1219.65 1656.29,1219.59 1656.88,1219.57 1657.47,1219.62 1658.05,1219.57 1658.64,1218.18 1659.23,1215.1 1659.81,1216.8 1660.4,1217.17 1660.99,1216.96 1661.57,1213.78 1662.16,1215.65 1662.75,1216.19 1663.33,1216.54 1663.92,1214.78 1664.5,1213.19 1665.09,1215.12 1665.68,1219.51 1666.26,1218.31 1666.85,1218.27 1667.44,1219.39 1668.02,1218.1 1668.61,1216.48 1669.2,1217.03 1669.78,1218.35 1670.37,1216.81 1670.96,1218.18 1671.54,1212.66 1672.13,1212.93 1672.71,1211.79 1673.3,1211.92 1673.89,1209.47 1674.47,1207.19 1675.06,1205.18 1675.65,1205.93 1676.23,1205.06 1676.82,1205.54 1677.41,1207.61 1677.99,1208.71 1678.58,1209.7 1679.17,1208.79 1679.75,1207.62 1680.34,1207.01 1680.92,1207.61 1681.51,1211.38 1682.1,1212.16 1682.68,1211.02 1683.27,1212.7 1683.86,1212.62 1684.44,1212.9 1685.03,1211.73 1685.62,1212.22 1686.2,1209.81 1686.79,1209 1687.37,1208.21 1687.96,1212.73 1688.55,1214.61 1689.13,1219.08 1689.72,1221 1690.31,1220.73 1690.89,1222.13 1691.48,1223.67 1692.07,1222.02 1692.65,1219.24 1693.24,1220.43 1693.83,1217.72 1694.41,1219.06 1695,1215.77 1695.58,1214.31 1696.17,1216.01 1696.76,1216.08 1697.34,1216.01 1697.93,1220.13 1698.52,1220.3 1699.1,1220.48 1699.69,1218.97 1700.28,1218.79 1700.86,1220.06 1701.45,1218.44 1702.04,1218.44 1702.62,1218.51 1703.21,1219.95 1703.79,1220.03 1704.38,1224.06 1704.97,1226.62 1705.55,1226.4 1706.14,1224.54 1706.73,1225.36 1707.31,1222.21 1707.9,1223.33 1708.49,1222.93 1709.07,1222.42 1709.66,1219.33 1710.24,1220.53 1710.83,1223.15 1711.42,1225.53 1712,1223.45 1712.59,1225.86 1713.18,1222.52 1713.76,1222.06 1714.35,1220.24 1714.94,1224.62 1715.52,1222.86 1716.11,1221.16 1716.7,1220.63 1717.28,1219.01 1717.87,1215.97 1718.45,1218.6 1719.04,1219.97 1719.63,1219.67 1720.21,1221.12 1720.8,1219.74 1721.39,1219.83 1721.97,1217 1722.56,1215.96 1723.15,1214.52 1723.73,1215.8 1724.32,1215.84 1724.91,1214.39 1725.49,1214.49 1726.08,1214.54 1726.66,1216.13 1727.25,1219.16 1727.84,1219.1 1728.42,1218.56 1729.01,1217.03 1729.6,1218.22 1730.18,1215.38 1730.77,1215.61 1731.36,1216.94 1731.94,1215.66 1732.53,1216.03 1733.11,1217.65 1733.7,1219.09 1734.29,1223.17 1734.87,1221.26 1735.46,1219.72 1736.05,1222.68 1736.63,1222.4 1737.22,1222.47 1737.81,1222.23 1738.39,1223.42 1738.98,1221.83 1739.57,1223.36 1740.15,1223.17 1740.74,1222.99 1741.32,1221.22 1741.91,1219.67 1742.5,1219.82 1743.08,1218.39 1743.67,1218.15 1744.26,1218.01 1744.84,1218.06 1745.43,1216.58 1746.02,1218.04 1746.6,1219.13 1747.19,1218.95 1747.78,1218.91 1748.36,1218.65 1748.95,1217.21 1749.53,1217.21 1750.12,1218.81 1750.71,1221.65 1751.29,1221.39 1751.88,1219.69 1752.47,1216.96 1753.05,1217.23 1753.64,1216.98 1754.23,1217.45 1754.81,1216.13 1755.4,1216.41 1755.99,1217.57 1756.57,1216.38 1757.16,1220.59 1757.74,1222.97 1758.33,1225.66 1758.92,1224.08 1759.5,1222.18 1760.09,1219.3 1760.68,1216.14 1761.26,1213.63 1761.85,1215.35 1762.44,1213.79 1763.02,1215.61 1763.61,1218.44 1764.19,1222.4 1764.78,1222.1 1765.37,1221.83 1765.95,1218.74 1766.54,1218.73 1767.13,1220.33 1767.71,1220.47 1768.3,1221.74 1768.89,1222.85 1769.47,1219.77 1770.06,1219.39 1770.65,1219.31 1771.23,1219.42 1771.82,1219.4 1772.4,1216.27 1772.99,1216.26 1773.58,1216.28 1774.16,1216.25 1774.75,1216.18 1775.34,1219.02 1775.92,1217.74 1776.51,1217.93 1777.1,1216.8 1777.68,1218.44 1778.27,1217 1778.86,1214.27 1779.44,1214.51 1780.03,1217.54 1780.61,1216.24 1781.2,1212.21 1781.79,1209.8 1782.37,1211.46 1782.96,1208.84 1783.55,1210.75 1784.13,1209.99 1784.72,1208.84 1785.31,1212.37 1785.89,1213.99 1786.48,1212.79 1787.06,1211.91 1787.65,1213.42 1788.24,1213.73 1788.82,1214.07 1789.41,1214.11 1790,1215.59 1790.58,1218.59 1791.17,1219.65 1791.76,1216.63 1792.34,1217.86 1792.93,1217.92 1793.52,1219.38 1794.1,1217.92 1794.69,1219.55 1795.27,1218.16 1795.86,1218.04 1796.45,1217.97 1797.03,1218.17 1797.62,1219.67 1798.21,1220.96 1798.79,1220.64 1799.38,1221.86 1799.97,1220.36 1800.55,1220.08 1801.14,1218.46 1801.73,1217.21 1802.31,1215.9 1802.9,1215.93 1803.48,1216.19 1804.07,1217.91 1804.66,1217.94 1805.24,1220.74 1805.83,1220.94 1806.42,1222.37 1807,1225.02 1807.59,1226.2 1808.18,1225.78 1808.76,1225.37 1809.35,1223.54 1809.94,1225.99 1810.52,1228.21 1811.11,1227.49 1811.69,1225.59 1812.28,1225.4 1812.87,1222.19 1813.45,1217.44 1814.04,1216.09 1814.63,1214.99 1815.21,1216.42 1815.8,1213.52 1816.39,1212.08 1816.97,1215.22 1817.56,1215.67 1818.14,1215.85 1818.73,1217.31 1819.32,1218.89 1819.9,1220.37 1820.49,1221.52 1821.08,1220.99 1821.66,1223.53 1822.25,1220.41 1822.84,1218.48 1823.42,1219.82 1824.01,1219.69 1824.6,1219.26 1825.18,1217.98 1825.77,1217.98 1826.35,1220.57 1826.94,1220.47 1827.53,1220.45 1828.11,1217.65 1828.7,1217.81 1829.29,1220.91 1829.87,1219.22 1830.46,1218.78 1831.05,1217.41 1831.63,1217.71 1832.22,1216.07 1832.81,1216.17 1833.39,1212.09 1833.98,1214.12 1834.56,1215.87 1835.15,1218.56 1835.74,1220.04 1836.32,1222.55 1836.91,1223.55 1837.5,1224.5 1838.08,1224.17 1838.67,1223.67 1839.26,1225.03 1839.84,1224.64 1840.43,1224.39 1841.01,1225.07 1841.6,1223.44 1842.19,1224.76 1842.77,1224.27 1843.36,1221.04 1843.95,1220.93 1844.53,1219.04 1845.12,1218.74 1845.71,1218.84 1846.29,1218.68 1846.88,1214.32 1847.47,1214.56 1848.05,1214.72 1848.64,1215.02 1849.22,1213.65 1849.81,1215.15 1850.4,1220.81 1850.98,1221.77 1851.57,1222.85 1852.16,1222.52 1852.74,1222.22 1853.33,1223.65 1853.92,1223.34 1854.5,1223.19 1855.09,1224.28 1855.68,1225.51 1856.26,1226.24 1856.85,1224.31 1857.43,1224.05 1858.02,1222.4 1858.61,1220.87 1859.19,1222.09 1859.78,1220.61 1860.37,1218.83 1860.95,1220.24 1861.54,1220.02 1862.13,1219.91 1862.71,1218.46 1863.3,1214.57 1863.88,1217.62 1864.47,1214.81 1865.06,1217.71 1865.64,1220.52 1866.23,1222.07 1866.82,1223.61 1867.4,1225.03 1867.99,1224.37 1868.58,1223.76 1869.16,1220.64 1869.75,1216.1 1870.34,1214.79 1870.92,1212.04 1871.51,1211.09 1872.09,1212.79 1872.68,1213.14 1873.27,1212.4 1873.85,1214.62 1874.44,1214.74 1875.03,1214.78 1875.61,1215.15 1876.2,1215.11 1876.79,1215.18 1877.37,1216.88 1877.96,1221.25 1878.55,1224.99 1879.13,1224.51 1879.72,1224.34 1880.3,1224.16 1880.89,1223.6 1881.48,1219.24 1882.06,1218.07 1882.65,1217.81 1883.24,1216 1883.82,1217.44 1884.41,1218.92 1885,1218.94 1885.58,1220.56 1886.17,1218.98 1886.76,1217.62 1887.34,1217.51 1887.93,1217.98 1888.51,1220.57 1889.1,1219.06 1889.69,1218.95 1890.27,1214.5 1890.86,1213.23 1891.45,1211.81 1892.03,1211.94 1892.62,1207.98 1893.21,1211.32 1893.79,1211.52 1894.38,1213.53 1894.96,1211.09 1895.55,1212.99 1896.14,1214.64 1896.72,1216.57 1897.31,1216.66 1897.9,1215.13 1898.48,1216.73 1899.07,1218.36 1899.66,1216.73 1900.24,1216.79 1900.83,1215.36 1901.42,1216.98 1902,1215.82 1902.59,1217.21 1903.17,1217.57 1903.76,1217.81 1904.35,1223.64 1904.93,1220.36 1905.52,1220.17 1906.11,1217.55 1906.69,1217.73 1907.28,1219.5 1907.87,1219.43 1908.45,1217.78 1909.04,1216.5 1909.63,1218.13 1910.21,1218.29 1910.8,1216.79 1911.38,1218.27 1911.97,1218.16 1912.56,1216.36 1913.14,1219.1 1913.73,1215.04 1914.32,1216.63 1914.9,1218.01 1915.49,1222.26 1916.08,1222.07 1916.66,1221.65 1917.25,1218.63 1917.83,1218.54 1918.42,1221.25 1919.01,1222.5 1919.59,1223.49 1920.18,1224.75 1920.77,1225.95 1921.35,1224.12 1921.94,1225.56 1922.53,1225.16 1923.11,1226.2 1923.7,1224.41 1924.29,1223.78 1924.87,1219.36 1925.46,1219.23 1926.04,1216.33 1926.63,1217.58 1927.22,1214.65 1927.8,1213.33 1928.39,1213.54 1928.98,1214.03 1929.56,1214.15 1930.15,1217.41 1930.74,1219.26 1931.32,1220.47 1931.91,1218.71 1932.5,1217.04 1933.08,1218.34 1933.67,1217.96 1934.25,1217.78 1934.84,1216.57 1935.43,1216.39 1936.01,1219.51 1936.6,1220.78 1937.19,1221.81 1937.77,1221.89 1938.36,1219.13 1938.95,1217.52 1939.53,1218.81 1940.12,1217.15 1940.71,1215.97 1941.29,1219.08 1941.88,1219.14 1942.46,1220.39 1943.05,1221.46 1943.64,1219.68 1944.22,1221.18 1944.81,1219.96 1945.4,1218.42 1945.98,1218.1 1946.57,1214.93 1947.16,1216.39 1947.74,1213.48 1948.33,1212.24 1948.91,1213.81 1949.5,1211.4 1950.09,1211.67 1950.67,1213.4 1951.26,1212.21 1951.85,1212.4 1952.43,1210.95 1953.02,1214.02 1953.61,1214.43 1954.19,1215.9 1954.78,1216.1 1955.37,1214.96 1955.95,1215.13 1956.54,1213.99 1957.12,1214.16 1957.71,1215.8 1958.3,1214.33 1958.88,1215.63 1959.47,1216.06 1960.06,1213.47 1960.64,1208.28 1961.23,1207.47 1961.82,1208.29 1962.4,1207.23 1962.99,1209.08 1963.58,1208.2 1964.16,1208.86 1964.75,1209.35 1965.33,1209.6 1965.92,1210.15 1966.51,1206.06 1967.09,1211.01 1967.68,1212.71 1968.27,1209.16 1968.85,1208.08 1969.44,1208.38 1970.03,1208.83 1970.61,1207.91 1971.2,1208.48 1971.78,1210.47 1972.37,1213.66 1972.96,1212.51 1973.54,1217.15 1974.13,1215.94 1974.72,1213.28 1975.3,1213.58 1975.89,1215.06 1976.48,1216.47 1977.06,1215.02 1977.65,1213.92 1978.24,1214.32 1978.82,1214.47 1979.41,1216.27 1979.99,1216.26 1980.58,1220.62 1981.17,1223.42 1981.75,1223.08 1982.34,1221.55 1982.93,1218.32 1983.51,1218.56 1984.1,1218.56 1984.69,1220 1985.27,1221.09 1985.86,1220.91 1986.45,1220.91 1987.03,1219.23 1987.62,1219.09 1988.2,1216.21 1988.79,1216.37 1989.38,1218.17 1989.96,1216.77 1990.55,1218 1991.14,1218.13 1991.72,1219.67 1992.31,1216.52 1992.9,1216.65 1993.48,1219.53 1994.07,1216.76 1994.65,1215.42 1995.24,1216.82 1995.83,1220.01 1996.41,1219.91 1997,1219.54 1997.59,1219.56 1998.17,1218.33 1998.76,1217.05 1999.35,1217.31 1999.93,1215.8 2000.52,1215.79 2001.11,1216.13 2001.69,1216.17 2002.28,1216.53 2002.86,1216.68 2003.45,1213.48 2004.04,1219.24 2004.62,1221.96 2005.21,1220.38 2005.8,1220.15 2006.38,1218.79 2006.97,1223.13 2007.56,1225.54 2008.14,1226.75 2008.73,1224.63 2009.32,1224.29 2009.9,1223.8 2010.49,1223.55 2011.07,1224.59 2011.66,1222.89 2012.25,1221.5 2012.83,1220.14 2013.42,1218.42 2014.01,1218.47 2014.59,1219.46 2015.18,1220.5 2015.77,1218.87 2016.35,1223.06 2016.94,1222.85 2017.53,1222.51 2018.11,1221.03 2018.7,1221.04 2019.28,1219.45 2019.87,1219.16 2020.46,1221.9 2021.04,1220.08 2021.63,1218.24 2022.22,1219.71 2022.8,1221.18 2023.39,1221.12 2023.98,1219.77 2024.56,1219.65 2025.15,1219.39 2025.73,1220.47 2026.32,1220.49 2026.91,1220.16 2027.49,1218.84 2028.08,1217.18 2028.67,1217.49 2029.25,1221.96 2029.84,1223.25 2030.43,1220.29 2031.01,1217.6 2031.6,1216.21 2032.19,1216.73 2032.77,1216.65 2033.36,1217 2033.94,1219.74 2034.53,1216.8 2035.12,1218.4 2035.7,1215.96 2036.29,1214.66 2036.88,1213.21 2037.46,1213.55 2038.05,1213.87 2038.64,1214.14 2039.22,1215.54 2039.81,1217.34 2040.4,1217.35 2040.98,1215.87 2041.57,1214.69 2042.15,1213.85 2042.74,1216.61 2043.33,1218.43 2043.91,1218.32 2044.5,1214.11 2045.09,1214.12 2045.67,1211.45 2046.26,1210.51 2046.85,1213.85 2047.43,1214.18 2048.02,1213.2 2048.6,1210.79 2049.19,1214.05 2049.78,1214.56 2050.36,1215.03 2050.95,1215.39 2051.54,1215.49 2052.12,1215.41 2052.71,1218.55 2053.3,1218.43 2053.88,1218.66 2054.47,1221.18 2055.06,1220.79 2055.64,1221.85 2056.23,1223 2056.81,1220.12 2057.4,1222.81 2057.99,1222.59 2058.57,1224.96 2059.16,1223.3 2059.75,1221.65 2060.33,1222.85 2060.92,1224.18 2061.51,1222.25 2062.09,1222.03 2062.68,1220.56 2063.27,1219.11 2063.85,1217.54 2064.44,1214.79 2065.02,1213.53 2065.61,1213.28 2066.2,1212.28 2066.78,1212.4 2067.37,1214.17 2067.96,1214.38 2068.54,1214.53 2069.13,1214.35 2069.72,1215.87 2070.3,1214.42 2070.89,1214.44 2071.48,1214.22 2072.06,1214.6 2072.65,1214.67 2073.23,1215.04 2073.82,1214.93 2074.41,1217.82 2074.99,1216.32 2075.58,1216 2076.17,1219.04 2076.75,1217.27 2077.34,1217.27 2077.93,1218.78 2078.51,1220.1 2079.1,1219.85 2079.68,1216.98 2080.27,1215.39 2080.86,1215.6 2081.44,1214.49 2082.03,1211.45 2082.62,1208.91 2083.2,1210.69 2083.79,1209.71 2084.38,1210.31 2084.96,1212.22 2085.55,1210.94 2086.14,1211.16 2086.72,1212.89 2087.31,1216.01 2087.89,1217.14 2088.48,1218.7 2089.07,1218.47 2089.65,1221.41 2090.24,1223.82 2090.83,1225.12 2091.41,1221.71 2092,1222.73 2092.59,1222.61 2093.17,1220.88 2093.76,1216.71 2094.35,1216.81 2094.93,1216.92 2095.52,1216.91 2096.1,1219.71 2096.69,1220.98 2097.28,1222.28 2097.86,1222.25 2098.45,1219.13 2099.04,1219.35 2099.62,1221.87 2100.21,1221.55 2100.8,1219.84 2101.38,1218.3 2101.97,1215.49 2102.55,1212.88 2103.14,1217.63 2103.73,1217.59 2104.31,1218.95 2104.9,1217.49 2105.49,1220.18 2106.07,1220.26 2106.66,1218.9 2107.25,1218.48 2107.83,1218.63 2108.42,1218.37 2109.01,1215.88 2109.59,1214.35 2110.18,1214.59 2110.76,1213.53 2111.35,1212.53 2111.94,1210.15 2112.52,1210.41 2113.11,1210.71 2113.7,1210.75 2114.28,1213.68 2114.87,1215.07 2115.46,1213.91 2116.04,1213.87 2116.63,1215.13 2117.22,1217.01 2117.8,1218.4 2118.39,1215.44 2118.97,1217 2119.56,1217.2 2120.15,1214.43 2120.73,1221.73 2121.32,1221.57 2121.91,1221.35 2122.49,1219.87 2123.08,1221.04 2123.67,1222.45 2124.25,1223.54 2124.84,1223.43 2125.42,1221.85 2126.01,1221.57 2126.6,1219.93 2127.18,1222.76 2127.77,1225.64 2128.36,1226.8 2128.94,1227.57 2129.53,1225.6 2130.12,1226.51 2130.7,1225.94 2131.29,1225.23 2131.88,1226.01 2132.46,1226.97 2133.05,1226.57 2133.63,1226.21 2134.22,1228.5 2134.81,1227.89 2135.39,1228.86 2135.98,1227.97 2136.57,1226.07 2137.15,1224.5 2137.74,1224.18 2138.33,1220.99 2138.91,1219.48 2139.5,1218.04 2140.09,1217.94 2140.67,1217.88 2141.26,1217.72 2141.84,1217.67 2142.43,1217.68 2143.02,1217.6 2143.6,1219.06 2144.19,1217.3 2144.78,1215.82 2145.36,1220.35 2145.95,1217.42 2146.54,1218.99 2147.12,1217.47 2147.71,1217.37 2148.3,1221.46 2148.88,1221.35 2149.47,1222.8 2150.05,1222.51 2150.64,1220.85 2151.23,1220.87 2151.81,1215.32 2152.4,1215.14 2152.99,1215.33 2153.57,1211.09 2154.16,1212.98 2154.75,1214.85 2155.33,1212.47 2155.92,1212.72 2156.5,1214.23 2157.09,1217.43 2157.68,1218.85 2158.26,1218.88 \"/>\n<path clip-path=\"url(#clip532)\" d=\"M986.025 1218.5 L986.612 1218.5 L987.198 1218.5 L987.785 1218.5 L988.371 1218.5 L988.957 1218.5 L989.544 1218.5 L990.13 1218.5 L990.717 1218.5 L991.303 1218.5 L991.889 1218.5 L992.476 1218.5 L993.062 1218.5 L993.649 1218.5 L994.235 1218.5 L994.822 1218.5 L995.408 1218.5 L995.994 1218.5 L996.581 1218.5 L997.167 1218.5 L997.754 1218.5 L998.34 1218.5 L998.926 1218.5 L999.513 1218.5 L1000.1 1218.5 L1000.69 1218.5 L1001.27 1218.5 L1001.86 1218.5 L1002.44 1218.5 L1003.03 1218.5 L1003.62 1218.5 L1004.2 1218.5 L1004.79 1218.5 L1005.38 1218.5 L1005.96 1218.5 L1006.55 1218.5 L1007.14 1218.5 L1007.72 1218.5 L1008.31 1218.5 L1008.9 1218.5 L1009.48 1218.5 L1010.07 1218.5 L1010.65 1218.5 L1011.24 1218.5 L1011.83 1218.5 L1012.41 1218.5 L1013 1218.5 L1013.59 1218.5 L1014.17 1218.5 L1014.76 1218.5 L1015.35 1218.5 L1015.93 1218.5 L1016.52 1218.5 L1017.11 1218.5 L1017.69 1218.5 L1018.28 1218.5 L1018.86 1218.5 L1019.45 1218.5 L1020.04 1218.5 L1020.62 1218.5 L1021.21 1218.5 L1021.8 1218.5 L1022.38 1218.5 L1022.97 1218.5 L1023.56 1218.5 L1024.14 1218.5 L1024.73 1218.5 L1025.32 1218.5 L1025.9 1218.5 L1026.49 1218.5 L1027.07 1218.5 L1027.66 1218.5 L1028.25 1218.5 L1028.83 1218.5 L1029.42 1218.5 L1030.01 1218.5 L1030.59 1218.5 L1031.18 1218.5 L1031.77 1218.5 L1032.35 1218.5 L1032.94 1218.5 L1033.52 1218.5 L1034.11 1218.5 L1034.7 1218.5 L1035.28 1218.5 L1035.87 1218.5 L1036.46 1218.5 L1037.04 1218.5 L1037.63 1218.5 L1038.22 1218.5 L1038.8 1218.5 L1039.39 1218.5 L1039.98 1218.5 L1040.56 1218.5 L1041.15 1218.5 L1041.73 1218.5 L1042.32 1218.5 L1042.91 1218.5 L1043.49 1218.5 L1044.08 1218.5 L1044.67 1218.5 L1045.25 1218.5 L1045.84 1218.5 L1046.43 1218.5 L1047.01 1218.5 L1047.6 1218.5 L1048.19 1218.5 L1048.77 1218.5 L1049.36 1218.5 L1049.94 1218.5 L1050.53 1218.5 L1051.12 1218.5 L1051.7 1218.5 L1052.29 1218.5 L1052.88 1218.5 L1053.46 1218.5 L1054.05 1218.5 L1054.64 1218.5 L1055.22 1218.5 L1055.81 1218.5 L1056.39 1218.5 L1056.98 1218.5 L1057.57 1218.5 L1058.15 1218.5 L1058.74 1218.5 L1059.33 1218.5 L1059.91 1218.5 L1060.5 1218.5 L1061.09 1218.5 L1061.67 1218.5 L1062.26 1218.5 L1062.85 1218.5 L1063.43 1218.5 L1064.02 1218.5 L1064.6 1218.5 L1065.19 1218.5 L1065.78 1218.5 L1066.36 1218.5 L1066.95 1218.5 L1067.54 1218.5 L1068.12 1218.5 L1068.71 1218.5 L1069.3 1218.5 L1069.88 1218.5 L1070.47 1218.5 L1071.06 1218.5 L1071.64 1218.5 L1072.23 1218.5 L1072.81 1218.5 L1073.4 1218.5 L1073.99 1218.5 L1074.57 1218.5 L1075.16 1218.5 L1075.75 1218.5 L1076.33 1218.5 L1076.92 1218.5 L1077.51 1218.5 L1078.09 1218.5 L1078.68 1218.5 L1079.26 1218.5 L1079.85 1218.5 L1080.44 1218.5 L1081.02 1218.5 L1081.61 1218.5 L1082.2 1218.5 L1082.78 1218.5 L1083.37 1218.5 L1083.96 1218.5 L1084.54 1218.5 L1085.13 1218.5 L1085.72 1218.5 L1086.3 1218.5 L1086.89 1218.5 L1087.47 1218.5 L1088.06 1218.5 L1088.65 1218.5 L1089.23 1218.5 L1089.82 1218.5 L1090.41 1218.5 L1090.99 1218.5 L1091.58 1218.5 L1092.17 1218.5 L1092.75 1218.5 L1093.34 1218.5 L1093.93 1218.5 L1094.51 1218.5 L1095.1 1218.5 L1095.68 1218.5 L1096.27 1218.5 L1096.86 1218.5 L1097.44 1218.5 L1098.03 1218.5 L1098.62 1218.5 L1099.2 1218.5 L1099.79 1218.5 L1100.38 1218.5 L1100.96 1218.5 L1101.55 1218.5 L1102.14 1218.5 L1102.72 1218.5 L1103.31 1218.5 L1103.89 1218.5 L1104.48 1218.5 L1105.07 1218.5 L1105.65 1218.5 L1106.24 1218.5 L1106.83 1218.5 L1107.41 1218.5 L1108 1218.5 L1108.59 1218.5 L1109.17 1218.5 L1109.76 1218.5 L1110.34 1218.5 L1110.93 1218.5 L1111.52 1218.5 L1112.1 1218.5 L1112.69 1218.5 L1113.28 1218.5 L1113.86 1218.5 L1114.45 1218.5 L1115.04 1218.5 L1115.62 1218.5 L1116.21 1218.5 L1116.8 1218.5 L1117.38 1218.5 L1117.97 1218.5 L1118.55 1218.5 L1119.14 1218.5 L1119.73 1218.5 L1120.31 1218.5 L1120.9 1218.5 L1121.49 1218.5 L1122.07 1218.5 L1122.66 1218.5 L1123.25 1218.5 L1123.83 1218.5 L1124.42 1218.5 L1125.01 1218.5 L1125.59 1218.5 L1126.18 1218.5 L1126.76 1218.5 L1127.35 1218.5 L1127.94 1218.5 L1128.52 1218.5 L1129.11 1218.5 L1129.7 1218.5 L1130.28 1218.5 L1130.87 1218.5 L1131.46 1218.5 L1132.04 1218.5 L1132.63 1218.5 L1133.21 1218.5 L1133.8 1218.5 L1134.39 1218.5 L1134.97 1218.5 L1135.56 1218.5 L1136.15 1218.5 L1136.73 1218.5 L1137.32 1218.5 L1137.91 1218.5 L1138.49 1218.5 L1139.08 1218.5 L1139.67 1218.5 L1140.25 1218.5 L1140.84 1218.5 L1141.42 1218.5 L1142.01 1218.5 L1142.6 1218.5 L1143.18 1218.5 L1143.77 1218.5 L1144.36 1218.5 L1144.94 1218.5 L1145.53 1218.5 L1146.12 1218.5 L1146.7 1218.5 L1147.29 1218.5 L1147.88 1218.5 L1148.46 1218.5 L1149.05 1218.5 L1149.63 1218.5 L1150.22 1218.5 L1150.81 1218.5 L1151.39 1218.5 L1151.98 1218.5 L1152.57 1218.5 L1153.15 1218.5 L1153.74 1218.5 L1154.33 1218.5 L1154.91 1218.5 L1155.5 1218.5 L1156.09 1218.5 L1156.67 1218.5 L1157.26 1218.5 L1157.84 1218.5 L1158.43 1218.5 L1159.02 1218.5 L1159.6 1218.5 L1160.19 1218.5 L1160.78 1218.5 L1161.36 1218.5 L1161.95 1218.5 L1162.54 1218.5 L1163.12 1218.5 L1163.71 1218.5 L1164.29 1218.5 L1164.88 1218.5 L1165.47 1218.5 L1166.05 1218.5 L1166.64 1218.5 L1167.23 1218.5 L1167.81 1218.5 L1168.4 1218.5 L1168.99 1218.5 L1169.57 1218.5 L1170.16 1218.5 L1170.75 1218.5 L1171.33 1218.5 L1171.92 1218.5 L1172.5 1218.5 L1173.09 1218.5 L1173.68 1218.5 L1174.26 1218.5 L1174.85 1218.5 L1175.44 1218.5 L1176.02 1218.5 L1176.61 1218.5 L1177.2 1218.5 L1177.78 1218.5 L1178.37 1218.5 L1178.96 1218.5 L1179.54 1218.5 L1180.13 1218.5 L1180.71 1218.5 L1181.3 1218.5 L1181.89 1218.5 L1182.47 1218.5 L1183.06 1218.5 L1183.65 1218.5 L1184.23 1218.5 L1184.82 1218.5 L1185.41 1218.5 L1185.99 1218.5 L1186.58 1218.5 L1187.16 1218.5 L1187.75 1218.5 L1188.34 1218.5 L1188.92 1218.5 L1189.51 1218.5 L1190.1 1218.5 L1190.68 1218.5 L1191.27 1218.5 L1191.86 1218.5 L1192.44 1218.5 L1193.03 1218.5 L1193.62 1218.5 L1194.2 1218.5 L1194.79 1218.5 L1195.37 1218.5 L1195.96 1218.5 L1196.55 1218.5 L1197.13 1218.5 L1197.72 1218.5 L1198.31 1218.5 L1198.89 1218.5 L1199.48 1218.5 L1200.07 1218.5 L1200.65 1218.5 L1201.24 1218.5 L1201.83 1218.5 L1202.41 1218.5 L1203 1218.5 L1203.58 1218.5 L1204.17 1218.5 L1204.76 1218.5 L1205.34 1218.5 L1205.93 1218.5 L1206.52 1218.5 L1207.1 1218.5 L1207.69 1218.5 L1208.28 1218.5 L1208.86 1218.5 L1209.45 1218.5 L1210.03 1218.5 L1210.62 1218.5 L1211.21 1218.5 L1211.79 1218.5 L1212.38 1218.5 L1212.97 1218.5 L1213.55 1218.5 L1214.14 1218.5 L1214.73 1218.5 L1215.31 1218.5 L1215.9 1218.5 L1216.49 1218.5 L1217.07 1218.5 L1217.66 1218.5 L1218.24 1218.5 L1218.83 1218.5 L1219.42 1218.5 L1220 1218.5 L1220.59 1218.5 L1221.18 1218.5 L1221.76 1218.5 L1222.35 1218.5 L1222.94 1218.5 L1223.52 1218.5 L1224.11 1218.5 L1224.7 1218.5 L1225.28 1218.5 L1225.87 1218.5 L1226.45 1218.5 L1227.04 1218.5 L1227.63 1218.5 L1228.21 1218.5 L1228.8 1218.5 L1229.39 1218.5 L1229.97 1218.5 L1230.56 1218.5 L1231.15 1218.5 L1231.73 1218.5 L1232.32 1218.5 L1232.91 1218.5 L1233.49 1218.5 L1234.08 1218.5 L1234.66 1218.5 L1235.25 1218.5 L1235.84 1218.5 L1236.42 1218.5 L1237.01 1218.5 L1237.6 1218.5 L1238.18 1218.5 L1238.77 1218.5 L1239.36 1218.5 L1239.94 1218.5 L1240.53 1218.5 L1241.11 1218.5 L1241.7 1218.5 L1242.29 1218.5 L1242.87 1218.5 L1243.46 1218.5 L1244.05 1218.5 L1244.63 1218.5 L1245.22 1218.5 L1245.81 1218.5 L1246.39 1218.5 L1246.98 1218.5 L1247.57 1218.5 L1248.15 1218.5 L1248.74 1218.5 L1249.32 1218.5 L1249.91 1218.5 L1250.5 1218.5 L1251.08 1218.5 L1251.67 1218.5 L1252.26 1218.5 L1252.84 1218.5 L1253.43 1218.5 L1254.02 1218.5 L1254.6 1218.5 L1255.19 1218.5 L1255.78 1218.5 L1256.36 1218.5 L1256.95 1218.5 L1257.53 1218.5 L1258.12 1218.5 L1258.71 1218.5 L1259.29 1218.5 L1259.88 1218.5 L1260.47 1218.5 L1261.05 1218.5 L1261.64 1218.5 L1262.23 1218.5 L1262.81 1218.5 L1263.4 1218.5 L1263.98 1218.5 L1264.57 1218.5 L1265.16 1218.5 L1265.74 1218.5 L1266.33 1218.5 L1266.92 1218.5 L1267.5 1218.5 L1268.09 1218.5 L1268.68 1218.5 L1269.26 1218.5 L1269.85 1218.5 L1270.44 1218.5 L1271.02 1218.5 L1271.61 1218.5 L1272.19 1218.5 L1272.78 1218.5 L1273.37 1218.5 L1273.95 1218.5 L1274.54 1218.5 L1275.13 1218.5 L1275.71 1218.5 L1276.3 1218.5 L1276.89 1218.5 L1277.47 1218.5 L1278.06 1218.5 L1278.65 1218.5 L1279.23 1218.5 L1279.82 1218.5 L1280.4 1218.5 L1280.99 1218.5 L1281.58 1218.5 L1282.16 1218.5 L1282.75 1218.5 L1283.34 1218.5 L1283.92 1218.5 L1284.51 1218.5 L1285.1 1218.5 L1285.68 1218.5 L1286.27 1218.5 L1286.86 1218.5 L1287.44 1218.5 L1288.03 1218.5 L1288.61 1218.5 L1289.2 1218.5 L1289.79 1218.5 L1290.37 1218.5 L1290.96 1218.5 L1291.55 1218.5 L1292.13 1218.5 L1292.72 1218.5 L1293.31 1218.5 L1293.89 1218.5 L1294.48 1218.5 L1295.06 1218.5 L1295.65 1218.5 L1296.24 1218.5 L1296.82 1218.5 L1297.41 1218.5 L1298 1218.5 L1298.58 1218.5 L1299.17 1218.5 L1299.76 1218.5 L1300.34 1218.5 L1300.93 1218.5 L1301.52 1218.5 L1302.1 1218.5 L1302.69 1218.5 L1303.27 1218.5 L1303.86 1218.5 L1304.45 1218.5 L1305.03 1218.5 L1305.62 1218.5 L1306.21 1218.5 L1306.79 1218.5 L1307.38 1218.5 L1307.97 1218.5 L1308.55 1218.5 L1309.14 1218.5 L1309.73 1218.5 L1310.31 1218.5 L1310.9 1218.5 L1311.48 1218.5 L1312.07 1218.5 L1312.66 1218.5 L1313.24 1218.5 L1313.83 1218.5 L1314.42 1218.5 L1315 1218.5 L1315.59 1218.5 L1316.18 1218.5 L1316.76 1218.5 L1317.35 1218.5 L1317.93 1218.5 L1318.52 1218.5 L1319.11 1218.5 L1319.69 1218.5 L1320.28 1218.5 L1320.87 1218.5 L1321.45 1218.5 L1322.04 1218.5 L1322.63 1218.5 L1323.21 1218.5 L1323.8 1218.5 L1324.39 1218.5 L1324.97 1218.5 L1325.56 1218.5 L1326.14 1218.5 L1326.73 1218.5 L1327.32 1218.5 L1327.9 1218.5 L1328.49 1218.5 L1329.08 1218.5 L1329.66 1218.5 L1330.25 1218.5 L1330.84 1218.5 L1331.42 1218.5 L1332.01 1218.5 L1332.6 1218.5 L1333.18 1218.5 L1333.77 1218.5 L1334.35 1218.5 L1334.94 1218.5 L1335.53 1218.5 L1336.11 1218.5 L1336.7 1218.5 L1337.29 1218.5 L1337.87 1218.5 L1338.46 1218.5 L1339.05 1218.5 L1339.63 1218.5 L1340.22 1218.5 L1340.8 1218.5 L1341.39 1218.5 L1341.98 1218.5 L1342.56 1218.5 L1343.15 1218.5 L1343.74 1218.5 L1344.32 1218.5 L1344.91 1218.5 L1345.5 1218.5 L1346.08 1218.5 L1346.67 1218.5 L1347.26 1218.5 L1347.84 1218.5 L1348.43 1218.5 L1349.01 1218.5 L1349.6 1218.5 L1350.19 1218.5 L1350.77 1218.5 L1351.36 1218.5 L1351.95 1218.5 L1352.53 1218.5 L1353.12 1218.5 L1353.71 1218.5 L1354.29 1218.5 L1354.88 1218.5 L1355.47 1218.5 L1356.05 1218.5 L1356.64 1218.5 L1357.22 1218.5 L1357.81 1218.5 L1358.4 1218.5 L1358.98 1218.5 L1359.57 1218.5 L1360.16 1218.5 L1360.74 1218.5 L1361.33 1218.5 L1361.92 1218.5 L1362.5 1218.5 L1363.09 1218.5 L1363.68 1218.5 L1364.26 1218.5 L1364.85 1218.5 L1365.43 1218.5 L1366.02 1218.5 L1366.61 1218.5 L1367.19 1218.5 L1367.78 1218.5 L1368.37 1218.5 L1368.95 1218.5 L1369.54 1218.5 L1370.13 1218.5 L1370.71 1218.5 L1371.3 1218.5 L1371.88 1218.5 L1372.47 1218.5 L1373.06 1218.5 L1373.64 1218.5 L1374.23 1218.5 L1374.82 1218.5 L1375.4 1218.5 L1375.99 1218.5 L1376.58 1218.5 L1377.16 1218.5 L1377.75 1218.5 L1378.34 1218.5 L1378.92 1218.5 L1379.51 1218.5 L1380.09 1218.5 L1380.68 1218.5 L1381.27 1218.5 L1381.85 1218.5 L1382.44 1218.5 L1383.03 1218.5 L1383.61 1218.5 L1384.2 1218.5 L1384.79 1218.5 L1385.37 1218.5 L1385.96 1218.5 L1386.55 1218.5 L1387.13 1218.5 L1387.72 1218.5 L1388.3 1218.5 L1388.89 1218.5 L1389.48 1218.5 L1390.06 1218.5 L1390.65 1218.5 L1391.24 1218.5 L1391.82 1218.5 L1392.41 1218.5 L1393 1218.5 L1393.58 1218.5 L1394.17 1218.5 L1394.75 1218.5 L1395.34 1218.5 L1395.93 1218.5 L1396.51 1218.5 L1397.1 1218.5 L1397.69 1218.5 L1398.27 1218.5 L1398.86 1218.5 L1399.45 1218.5 L1400.03 1218.5 L1400.62 1218.5 L1401.21 1218.5 L1401.79 1218.5 L1402.38 1218.5 L1402.96 1218.5 L1403.55 1218.5 L1404.14 1218.5 L1404.72 1218.5 L1405.31 1218.5 L1405.9 1218.5 L1406.48 1218.5 L1407.07 1218.5 L1407.66 1218.5 L1408.24 1218.5 L1408.83 1218.5 L1409.42 1218.5 L1410 1218.5 L1410.59 1218.5 L1411.17 1218.5 L1411.76 1218.5 L1412.35 1218.5 L1412.93 1218.5 L1413.52 1218.5 L1414.11 1218.5 L1414.69 1218.5 L1415.28 1218.5 L1415.87 1218.5 L1416.45 1218.5 L1417.04 1218.5 L1417.63 1218.5 L1418.21 1218.5 L1418.8 1218.5 L1419.38 1218.5 L1419.97 1218.5 L1420.56 1218.5 L1421.14 1218.5 L1421.73 1218.5 L1422.32 1218.5 L1422.9 1218.5 L1423.49 1218.5 L1424.08 1218.5 L1424.66 1218.5 L1425.25 1218.5 L1425.83 1218.5 L1426.42 1218.5 L1427.01 1218.5 L1427.59 1218.5 L1428.18 1218.5 L1428.77 1218.5 L1429.35 1218.5 L1429.94 1218.5 L1430.53 1218.5 L1431.11 1218.5 L1431.7 1218.5 L1432.29 1218.5 L1432.87 1218.5 L1433.46 1218.5 L1434.04 1218.5 L1434.63 1218.5 L1435.22 1218.5 L1435.8 1218.5 L1436.39 1218.5 L1436.98 1218.5 L1437.56 1218.5 L1438.15 1218.5 L1438.74 1218.5 L1439.32 1218.5 L1439.91 1218.5 L1440.5 1218.5 L1441.08 1218.5 L1441.67 1218.5 L1442.25 1218.5 L1442.84 1218.5 L1443.43 1218.5 L1444.01 1218.5 L1444.6 1218.5 L1445.19 1218.5 L1445.77 1218.5 L1446.36 1218.5 L1446.95 1218.5 L1447.53 1218.5 L1448.12 1218.5 L1448.7 1218.5 L1449.29 1218.5 L1449.88 1218.5 L1450.46 1218.5 L1451.05 1218.5 L1451.64 1218.5 L1452.22 1218.5 L1452.81 1218.5 L1453.4 1218.5 L1453.98 1218.5 L1454.57 1218.5 L1455.16 1218.5 L1455.74 1218.5 L1456.33 1218.5 L1456.91 1218.5 L1457.5 1218.5 L1458.09 1218.5 L1458.67 1218.5 L1459.26 1218.5 L1459.85 1218.5 L1460.43 1218.5 L1461.02 1218.5 L1461.61 1218.5 L1462.19 1218.5 L1462.78 1218.5 L1463.37 1218.5 L1463.95 1218.5 L1464.54 1218.5 L1465.12 1218.5 L1465.71 1218.5 L1466.3 1218.5 L1466.88 1218.5 L1467.47 1218.5 L1468.06 1218.5 L1468.64 1218.5 L1469.23 1218.5 L1469.82 1218.5 L1470.4 1218.5 L1470.99 1218.5 L1471.57 1218.5 L1472.16 1218.5 L1472.75 1218.5 L1473.33 1218.5 L1473.92 1218.5 L1474.51 1218.5 L1475.09 1218.5 L1475.68 1218.5 L1476.27 1218.5 L1476.85 1218.5 L1477.44 1218.5 L1478.03 1218.5 L1478.61 1218.5 L1479.2 1218.5 L1479.78 1218.5 L1480.37 1218.5 L1480.96 1218.5 L1481.54 1218.5 L1482.13 1218.5 L1482.72 1218.5 L1483.3 1218.5 L1483.89 1218.5 L1484.48 1218.5 L1485.06 1218.5 L1485.65 1218.5 L1486.24 1218.5 L1486.82 1218.5 L1487.41 1218.5 L1487.99 1218.5 L1488.58 1218.5 L1489.17 1218.5 L1489.75 1218.5 L1490.34 1218.5 L1490.93 1218.5 L1491.51 1218.5 L1492.1 1218.5 L1492.69 1218.5 L1493.27 1218.5 L1493.86 1218.5 L1494.45 1218.5 L1495.03 1218.5 L1495.62 1218.5 L1496.2 1218.5 L1496.79 1218.5 L1497.38 1218.5 L1497.96 1218.5 L1498.55 1218.5 L1499.14 1218.5 L1499.72 1218.5 L1500.31 1218.5 L1500.9 1218.5 L1501.48 1218.5 L1502.07 1218.5 L1502.65 1218.5 L1503.24 1218.5 L1503.83 1218.5 L1504.41 1218.5 L1505 1218.5 L1505.59 1218.5 L1506.17 1218.5 L1506.76 1218.5 L1507.35 1218.5 L1507.93 1218.5 L1508.52 1218.5 L1509.11 1218.5 L1509.69 1218.5 L1510.28 1218.5 L1510.86 1218.5 L1511.45 1218.5 L1512.04 1218.5 L1512.62 1218.5 L1513.21 1218.5 L1513.8 1218.5 L1514.38 1218.5 L1514.97 1218.5 L1515.56 1218.5 L1516.14 1218.5 L1516.73 1218.5 L1517.32 1218.5 L1517.9 1218.5 L1518.49 1218.5 L1519.07 1218.5 L1519.66 1218.5 L1520.25 1218.5 L1520.83 1218.5 L1521.42 1218.5 L1522.01 1218.5 L1522.59 1218.5 L1523.18 1218.5 L1523.77 1218.5 L1524.35 1218.5 L1524.94 1218.5 L1525.52 1218.5 L1526.11 1218.5 L1526.7 1218.5 L1527.28 1218.5 L1527.87 1218.5 L1528.46 1218.5 L1529.04 1218.5 L1529.63 1218.5 L1530.22 1218.5 L1530.8 1218.5 L1531.39 1218.5 L1531.98 1218.5 L1532.56 1218.5 L1533.15 1218.5 L1533.73 1218.5 L1534.32 1218.5 L1534.91 1218.5 L1535.49 1218.5 L1536.08 1218.5 L1536.67 1218.5 L1537.25 1218.5 L1537.84 1218.5 L1538.43 1218.5 L1539.01 1218.5 L1539.6 1218.5 L1540.19 1218.5 L1540.77 1218.5 L1541.36 1218.5 L1541.94 1218.5 L1542.53 1218.5 L1543.12 1218.5 L1543.7 1218.5 L1544.29 1218.5 L1544.88 1218.5 L1545.46 1218.5 L1546.05 1218.5 L1546.64 1218.5 L1547.22 1218.5 L1547.81 1218.5 L1548.4 1218.5 L1548.98 1218.5 L1549.57 1218.5 L1550.15 1218.5 L1550.74 1218.5 L1551.33 1218.5 L1551.91 1218.5 L1552.5 1218.5 L1553.09 1218.5 L1553.67 1218.5 L1554.26 1218.5 L1554.85 1218.5 L1555.43 1218.5 L1556.02 1218.5 L1556.6 1218.5 L1557.19 1218.5 L1557.78 1218.5 L1558.36 1218.5 L1558.95 1218.5 L1559.54 1218.5 L1560.12 1218.5 L1560.71 1218.5 L1561.3 1218.5 L1561.88 1218.5 L1562.47 1218.5 L1563.06 1218.5 L1563.64 1218.5 L1564.23 1218.5 L1564.81 1218.5 L1565.4 1218.5 L1565.99 1218.5 L1566.57 1218.5 L1567.16 1218.5 L1567.75 1218.5 L1568.33 1218.5 L1568.92 1218.5 L1569.51 1218.5 L1570.09 1218.5 L1570.68 1218.5 L1571.27 1218.5 L1571.85 1218.5 L1572.44 1218.5 L1573.02 1218.5 L1573.61 1218.5 L1574.2 1218.5 L1574.78 1218.5 L1575.37 1218.5 L1575.96 1218.5 L1576.54 1218.5 L1577.13 1218.5 L1577.72 1218.5 L1578.3 1218.5 L1578.89 1218.5 L1579.47 1218.5 L1580.06 1218.5 L1580.65 1218.5 L1581.23 1218.5 L1581.82 1218.5 L1582.41 1218.5 L1582.99 1218.5 L1583.58 1218.5 L1584.17 1218.5 L1584.75 1218.5 L1585.34 1218.5 L1585.93 1218.5 L1586.51 1218.5 L1587.1 1218.5 L1587.68 1218.5 L1588.27 1218.5 L1588.86 1218.5 L1589.44 1218.5 L1590.03 1218.5 L1590.62 1218.5 L1591.2 1218.5 L1591.79 1218.5 L1592.38 1218.5 L1592.96 1218.5 L1593.55 1218.5 L1594.14 1218.5 L1594.72 1218.5 L1595.31 1218.5 L1595.89 1218.5 L1596.48 1218.5 L1597.07 1218.5 L1597.65 1218.5 L1598.24 1218.5 L1598.83 1218.5 L1599.41 1218.5 L1600 1218.5 L1600.59 1218.5 L1601.17 1218.5 L1601.76 1218.5 L1602.34 1218.5 L1602.93 1218.5 L1603.52 1218.5 L1604.1 1218.5 L1604.69 1218.5 L1605.28 1218.5 L1605.86 1218.5 L1606.45 1218.5 L1607.04 1218.5 L1607.62 1218.5 L1608.21 1218.5 L1608.8 1218.5 L1609.38 1218.5 L1609.97 1218.5 L1610.55 1218.5 L1611.14 1218.5 L1611.73 1218.5 L1612.31 1218.5 L1612.9 1218.5 L1613.49 1218.5 L1614.07 1218.5 L1614.66 1218.5 L1615.25 1218.5 L1615.83 1218.5 L1616.42 1218.5 L1617.01 1218.5 L1617.59 1218.5 L1618.18 1218.5 L1618.76 1218.5 L1619.35 1218.5 L1619.94 1218.5 L1620.52 1218.5 L1621.11 1218.5 L1621.7 1218.5 L1622.28 1218.5 L1622.87 1218.5 L1623.46 1218.5 L1624.04 1218.5 L1624.63 1218.5 L1625.22 1218.5 L1625.8 1218.5 L1626.39 1218.5 L1626.97 1218.5 L1627.56 1218.5 L1628.15 1218.5 L1628.73 1218.5 L1629.32 1218.5 L1629.91 1218.5 L1630.49 1218.5 L1631.08 1218.5 L1631.67 1218.5 L1632.25 1218.5 L1632.84 1218.5 L1633.42 1218.5 L1634.01 1218.5 L1634.6 1218.5 L1635.18 1218.5 L1635.77 1218.5 L1636.36 1218.5 L1636.94 1218.5 L1637.53 1218.5 L1638.12 1218.5 L1638.7 1218.5 L1639.29 1218.5 L1639.88 1218.5 L1640.46 1218.5 L1641.05 1218.5 L1641.63 1218.5 L1642.22 1218.5 L1642.81 1218.5 L1643.39 1218.5 L1643.98 1218.5 L1644.57 1218.5 L1645.15 1218.5 L1645.74 1218.5 L1646.33 1218.5 L1646.91 1218.5 L1647.5 1218.5 L1648.09 1218.5 L1648.67 1218.5 L1649.26 1218.5 L1649.84 1218.5 L1650.43 1218.5 L1651.02 1218.5 L1651.6 1218.5 L1652.19 1218.5 L1652.78 1218.5 L1653.36 1218.5 L1653.95 1218.5 L1654.54 1218.5 L1655.12 1218.5 L1655.71 1218.5 L1656.29 1218.5 L1656.88 1218.5 L1657.47 1218.5 L1658.05 1218.5 L1658.64 1218.5 L1659.23 1218.5 L1659.81 1218.5 L1660.4 1218.5 L1660.99 1218.5 L1661.57 1218.5 L1662.16 1218.5 L1662.75 1218.5 L1663.33 1218.5 L1663.92 1218.5 L1664.5 1218.5 L1665.09 1218.5 L1665.68 1218.5 L1666.26 1218.5 L1666.85 1218.5 L1667.44 1218.5 L1668.02 1218.5 L1668.61 1218.5 L1669.2 1218.5 L1669.78 1218.5 L1670.37 1218.5 L1670.96 1218.5 L1671.54 1218.5 L1672.13 1218.5 L1672.71 1218.5 L1673.3 1218.5 L1673.89 1218.5 L1674.47 1218.5 L1675.06 1218.5 L1675.65 1218.5 L1676.23 1218.5 L1676.82 1218.5 L1677.41 1218.5 L1677.99 1218.5 L1678.58 1218.5 L1679.17 1218.5 L1679.75 1218.5 L1680.34 1218.5 L1680.92 1218.5 L1681.51 1218.5 L1682.1 1218.5 L1682.68 1218.5 L1683.27 1218.5 L1683.86 1218.5 L1684.44 1218.5 L1685.03 1218.5 L1685.62 1218.5 L1686.2 1218.5 L1686.79 1218.5 L1687.37 1218.5 L1687.96 1218.5 L1688.55 1218.5 L1689.13 1218.5 L1689.72 1218.5 L1690.31 1218.5 L1690.89 1218.5 L1691.48 1218.5 L1692.07 1218.5 L1692.65 1218.5 L1693.24 1218.5 L1693.83 1218.5 L1694.41 1218.5 L1695 1218.5 L1695.58 1218.5 L1696.17 1218.5 L1696.76 1218.5 L1697.34 1218.5 L1697.93 1218.5 L1698.52 1218.5 L1699.1 1218.5 L1699.69 1218.5 L1700.28 1218.5 L1700.86 1218.5 L1701.45 1218.5 L1702.04 1218.5 L1702.62 1218.5 L1703.21 1218.5 L1703.79 1218.5 L1704.38 1218.5 L1704.97 1218.5 L1705.55 1218.5 L1706.14 1218.5 L1706.73 1218.5 L1707.31 1218.5 L1707.9 1218.5 L1708.49 1218.5 L1709.07 1218.5 L1709.66 1218.5 L1710.24 1218.5 L1710.83 1218.5 L1711.42 1218.5 L1712 1218.5 L1712.59 1218.5 L1713.18 1218.5 L1713.76 1218.5 L1714.35 1218.5 L1714.94 1218.5 L1715.52 1218.5 L1716.11 1218.5 L1716.7 1218.5 L1717.28 1218.5 L1717.87 1218.5 L1718.45 1218.5 L1719.04 1218.5 L1719.63 1218.5 L1720.21 1218.5 L1720.8 1218.5 L1721.39 1218.5 L1721.97 1218.5 L1722.56 1218.5 L1723.15 1218.5 L1723.73 1218.5 L1724.32 1218.5 L1724.91 1218.5 L1725.49 1218.5 L1726.08 1218.5 L1726.66 1218.5 L1727.25 1218.5 L1727.84 1218.5 L1728.42 1218.5 L1729.01 1218.5 L1729.6 1218.5 L1730.18 1218.5 L1730.77 1218.5 L1731.36 1218.5 L1731.94 1218.5 L1732.53 1218.5 L1733.11 1218.5 L1733.7 1218.5 L1734.29 1218.5 L1734.87 1218.5 L1735.46 1218.5 L1736.05 1218.5 L1736.63 1218.5 L1737.22 1218.5 L1737.81 1218.5 L1738.39 1218.5 L1738.98 1218.5 L1739.57 1218.5 L1740.15 1218.5 L1740.74 1218.5 L1741.32 1218.5 L1741.91 1218.5 L1742.5 1218.5 L1743.08 1218.5 L1743.67 1218.5 L1744.26 1218.5 L1744.84 1218.5 L1745.43 1218.5 L1746.02 1218.5 L1746.6 1218.5 L1747.19 1218.5 L1747.78 1218.5 L1748.36 1218.5 L1748.95 1218.5 L1749.53 1218.5 L1750.12 1218.5 L1750.71 1218.5 L1751.29 1218.5 L1751.88 1218.5 L1752.47 1218.5 L1753.05 1218.5 L1753.64 1218.5 L1754.23 1218.5 L1754.81 1218.5 L1755.4 1218.5 L1755.99 1218.5 L1756.57 1218.5 L1757.16 1218.5 L1757.74 1218.5 L1758.33 1218.5 L1758.92 1218.5 L1759.5 1218.5 L1760.09 1218.5 L1760.68 1218.5 L1761.26 1218.5 L1761.85 1218.5 L1762.44 1218.5 L1763.02 1218.5 L1763.61 1218.5 L1764.19 1218.5 L1764.78 1218.5 L1765.37 1218.5 L1765.95 1218.5 L1766.54 1218.5 L1767.13 1218.5 L1767.71 1218.5 L1768.3 1218.5 L1768.89 1218.5 L1769.47 1218.5 L1770.06 1218.5 L1770.65 1218.5 L1771.23 1218.5 L1771.82 1218.5 L1772.4 1218.5 L1772.99 1218.5 L1773.58 1218.5 L1774.16 1218.5 L1774.75 1218.5 L1775.34 1218.5 L1775.92 1218.5 L1776.51 1218.5 L1777.1 1218.5 L1777.68 1218.5 L1778.27 1218.5 L1778.86 1218.5 L1779.44 1218.5 L1780.03 1218.5 L1780.61 1218.5 L1781.2 1218.5 L1781.79 1218.5 L1782.37 1218.5 L1782.96 1218.5 L1783.55 1218.5 L1784.13 1218.5 L1784.72 1218.5 L1785.31 1218.5 L1785.89 1218.5 L1786.48 1218.5 L1787.06 1218.5 L1787.65 1218.5 L1788.24 1218.5 L1788.82 1218.5 L1789.41 1218.5 L1790 1218.5 L1790.58 1218.5 L1791.17 1218.5 L1791.76 1218.5 L1792.34 1218.5 L1792.93 1218.5 L1793.52 1218.5 L1794.1 1218.5 L1794.69 1218.5 L1795.27 1218.5 L1795.86 1218.5 L1796.45 1218.5 L1797.03 1218.5 L1797.62 1218.5 L1798.21 1218.5 L1798.79 1218.5 L1799.38 1218.5 L1799.97 1218.5 L1800.55 1218.5 L1801.14 1218.5 L1801.73 1218.5 L1802.31 1218.5 L1802.9 1218.5 L1803.48 1218.5 L1804.07 1218.5 L1804.66 1218.5 L1805.24 1218.5 L1805.83 1218.5 L1806.42 1218.5 L1807 1218.5 L1807.59 1218.5 L1808.18 1218.5 L1808.76 1218.5 L1809.35 1218.5 L1809.94 1218.5 L1810.52 1218.5 L1811.11 1218.5 L1811.69 1218.5 L1812.28 1218.5 L1812.87 1218.5 L1813.45 1218.5 L1814.04 1218.5 L1814.63 1218.5 L1815.21 1218.5 L1815.8 1218.5 L1816.39 1218.5 L1816.97 1218.5 L1817.56 1218.5 L1818.14 1218.5 L1818.73 1218.5 L1819.32 1218.5 L1819.9 1218.5 L1820.49 1218.5 L1821.08 1218.5 L1821.66 1218.5 L1822.25 1218.5 L1822.84 1218.5 L1823.42 1218.5 L1824.01 1218.5 L1824.6 1218.5 L1825.18 1218.5 L1825.77 1218.5 L1826.35 1218.5 L1826.94 1218.5 L1827.53 1218.5 L1828.11 1218.5 L1828.7 1218.5 L1829.29 1218.5 L1829.87 1218.5 L1830.46 1218.5 L1831.05 1218.5 L1831.63 1218.5 L1832.22 1218.5 L1832.81 1218.5 L1833.39 1218.5 L1833.98 1218.5 L1834.56 1218.5 L1835.15 1218.5 L1835.74 1218.5 L1836.32 1218.5 L1836.91 1218.5 L1837.5 1218.5 L1838.08 1218.5 L1838.67 1218.5 L1839.26 1218.5 L1839.84 1218.5 L1840.43 1218.5 L1841.01 1218.5 L1841.6 1218.5 L1842.19 1218.5 L1842.77 1218.5 L1843.36 1218.5 L1843.95 1218.5 L1844.53 1218.5 L1845.12 1218.5 L1845.71 1218.5 L1846.29 1218.5 L1846.88 1218.5 L1847.47 1218.5 L1848.05 1218.5 L1848.64 1218.5 L1849.22 1218.5 L1849.81 1218.5 L1850.4 1218.5 L1850.98 1218.5 L1851.57 1218.5 L1852.16 1218.5 L1852.74 1218.5 L1853.33 1218.5 L1853.92 1218.5 L1854.5 1218.5 L1855.09 1218.5 L1855.68 1218.5 L1856.26 1218.5 L1856.85 1218.5 L1857.43 1218.5 L1858.02 1218.5 L1858.61 1218.5 L1859.19 1218.5 L1859.78 1218.5 L1860.37 1218.5 L1860.95 1218.5 L1861.54 1218.5 L1862.13 1218.5 L1862.71 1218.5 L1863.3 1218.5 L1863.88 1218.5 L1864.47 1218.5 L1865.06 1218.5 L1865.64 1218.5 L1866.23 1218.5 L1866.82 1218.5 L1867.4 1218.5 L1867.99 1218.5 L1868.58 1218.5 L1869.16 1218.5 L1869.75 1218.5 L1870.34 1218.5 L1870.92 1218.5 L1871.51 1218.5 L1872.09 1218.5 L1872.68 1218.5 L1873.27 1218.5 L1873.85 1218.5 L1874.44 1218.5 L1875.03 1218.5 L1875.61 1218.5 L1876.2 1218.5 L1876.79 1218.5 L1877.37 1218.5 L1877.96 1218.5 L1878.55 1218.5 L1879.13 1218.5 L1879.72 1218.5 L1880.3 1218.5 L1880.89 1218.5 L1881.48 1218.5 L1882.06 1218.5 L1882.65 1218.5 L1883.24 1218.5 L1883.82 1218.5 L1884.41 1218.5 L1885 1218.5 L1885.58 1218.5 L1886.17 1218.5 L1886.76 1218.5 L1887.34 1218.5 L1887.93 1218.5 L1888.51 1218.5 L1889.1 1218.5 L1889.69 1218.5 L1890.27 1218.5 L1890.86 1218.5 L1891.45 1218.5 L1892.03 1218.5 L1892.62 1218.5 L1893.21 1218.5 L1893.79 1218.5 L1894.38 1218.5 L1894.96 1218.5 L1895.55 1218.5 L1896.14 1218.5 L1896.72 1218.5 L1897.31 1218.5 L1897.9 1218.5 L1898.48 1218.5 L1899.07 1218.5 L1899.66 1218.5 L1900.24 1218.5 L1900.83 1218.5 L1901.42 1218.5 L1902 1218.5 L1902.59 1218.5 L1903.17 1218.5 L1903.76 1218.5 L1904.35 1218.5 L1904.93 1218.5 L1905.52 1218.5 L1906.11 1218.5 L1906.69 1218.5 L1907.28 1218.5 L1907.87 1218.5 L1908.45 1218.5 L1909.04 1218.5 L1909.63 1218.5 L1910.21 1218.5 L1910.8 1218.5 L1911.38 1218.5 L1911.97 1218.5 L1912.56 1218.5 L1913.14 1218.5 L1913.73 1218.5 L1914.32 1218.5 L1914.9 1218.5 L1915.49 1218.5 L1916.08 1218.5 L1916.66 1218.5 L1917.25 1218.5 L1917.83 1218.5 L1918.42 1218.5 L1919.01 1218.5 L1919.59 1218.5 L1920.18 1218.5 L1920.77 1218.5 L1921.35 1218.5 L1921.94 1218.5 L1922.53 1218.5 L1923.11 1218.5 L1923.7 1218.5 L1924.29 1218.5 L1924.87 1218.5 L1925.46 1218.5 L1926.04 1218.5 L1926.63 1218.5 L1927.22 1218.5 L1927.8 1218.5 L1928.39 1218.5 L1928.98 1218.5 L1929.56 1218.5 L1930.15 1218.5 L1930.74 1218.5 L1931.32 1218.5 L1931.91 1218.5 L1932.5 1218.5 L1933.08 1218.5 L1933.67 1218.5 L1934.25 1218.5 L1934.84 1218.5 L1935.43 1218.5 L1936.01 1218.5 L1936.6 1218.5 L1937.19 1218.5 L1937.77 1218.5 L1938.36 1218.5 L1938.95 1218.5 L1939.53 1218.5 L1940.12 1218.5 L1940.71 1218.5 L1941.29 1218.5 L1941.88 1218.5 L1942.46 1218.5 L1943.05 1218.5 L1943.64 1218.5 L1944.22 1218.5 L1944.81 1218.5 L1945.4 1218.5 L1945.98 1218.5 L1946.57 1218.5 L1947.16 1218.5 L1947.74 1218.5 L1948.33 1218.5 L1948.91 1218.5 L1949.5 1218.5 L1950.09 1218.5 L1950.67 1218.5 L1951.26 1218.5 L1951.85 1218.5 L1952.43 1218.5 L1953.02 1218.5 L1953.61 1218.5 L1954.19 1218.5 L1954.78 1218.5 L1955.37 1218.5 L1955.95 1218.5 L1956.54 1218.5 L1957.12 1218.5 L1957.71 1218.5 L1958.3 1218.5 L1958.88 1218.5 L1959.47 1218.5 L1960.06 1218.5 L1960.64 1218.5 L1961.23 1218.5 L1961.82 1218.5 L1962.4 1218.5 L1962.99 1218.5 L1963.58 1218.5 L1964.16 1218.5 L1964.75 1218.5 L1965.33 1218.5 L1965.92 1218.5 L1966.51 1218.5 L1967.09 1218.5 L1967.68 1218.5 L1968.27 1218.5 L1968.85 1218.5 L1969.44 1218.5 L1970.03 1218.5 L1970.61 1218.5 L1971.2 1218.5 L1971.78 1218.5 L1972.37 1218.5 L1972.96 1218.5 L1973.54 1218.5 L1974.13 1218.5 L1974.72 1218.5 L1975.3 1218.5 L1975.89 1218.5 L1976.48 1218.5 L1977.06 1218.5 L1977.65 1218.5 L1978.24 1218.5 L1978.82 1218.5 L1979.41 1218.5 L1979.99 1218.5 L1980.58 1218.5 L1981.17 1218.5 L1981.75 1218.5 L1982.34 1218.5 L1982.93 1218.5 L1983.51 1218.5 L1984.1 1218.5 L1984.69 1218.5 L1985.27 1218.5 L1985.86 1218.5 L1986.45 1218.5 L1987.03 1218.5 L1987.62 1218.5 L1988.2 1218.5 L1988.79 1218.5 L1989.38 1218.5 L1989.96 1218.5 L1990.55 1218.5 L1991.14 1218.5 L1991.72 1218.5 L1992.31 1218.5 L1992.9 1218.5 L1993.48 1218.5 L1994.07 1218.5 L1994.65 1218.5 L1995.24 1218.5 L1995.83 1218.5 L1996.41 1218.5 L1997 1218.5 L1997.59 1218.5 L1998.17 1218.5 L1998.76 1218.5 L1999.35 1218.5 L1999.93 1218.5 L2000.52 1218.5 L2001.11 1218.5 L2001.69 1218.5 L2002.28 1218.5 L2002.86 1218.5 L2003.45 1218.5 L2004.04 1218.5 L2004.62 1218.5 L2005.21 1218.5 L2005.8 1218.5 L2006.38 1218.5 L2006.97 1218.5 L2007.56 1218.5 L2008.14 1218.5 L2008.73 1218.5 L2009.32 1218.5 L2009.9 1218.5 L2010.49 1218.5 L2011.07 1218.5 L2011.66 1218.5 L2012.25 1218.5 L2012.83 1218.5 L2013.42 1218.5 L2014.01 1218.5 L2014.59 1218.5 L2015.18 1218.5 L2015.77 1218.5 L2016.35 1218.5 L2016.94 1218.5 L2017.53 1218.5 L2018.11 1218.5 L2018.7 1218.5 L2019.28 1218.5 L2019.87 1218.5 L2020.46 1218.5 L2021.04 1218.5 L2021.63 1218.5 L2022.22 1218.5 L2022.8 1218.5 L2023.39 1218.5 L2023.98 1218.5 L2024.56 1218.5 L2025.15 1218.5 L2025.73 1218.5 L2026.32 1218.5 L2026.91 1218.5 L2027.49 1218.5 L2028.08 1218.5 L2028.67 1218.5 L2029.25 1218.5 L2029.84 1218.5 L2030.43 1218.5 L2031.01 1218.5 L2031.6 1218.5 L2032.19 1218.5 L2032.77 1218.5 L2033.36 1218.5 L2033.94 1218.5 L2034.53 1218.5 L2035.12 1218.5 L2035.7 1218.5 L2036.29 1218.5 L2036.88 1218.5 L2037.46 1218.5 L2038.05 1218.5 L2038.64 1218.5 L2039.22 1218.5 L2039.81 1218.5 L2040.4 1218.5 L2040.98 1218.5 L2041.57 1218.5 L2042.15 1218.5 L2042.74 1218.5 L2043.33 1218.5 L2043.91 1218.5 L2044.5 1218.5 L2045.09 1218.5 L2045.67 1218.5 L2046.26 1218.5 L2046.85 1218.5 L2047.43 1218.5 L2048.02 1218.5 L2048.6 1218.5 L2049.19 1218.5 L2049.78 1218.5 L2050.36 1218.5 L2050.95 1218.5 L2051.54 1218.5 L2052.12 1218.5 L2052.71 1218.5 L2053.3 1218.5 L2053.88 1218.5 L2054.47 1218.5 L2055.06 1218.5 L2055.64 1218.5 L2056.23 1218.5 L2056.81 1218.5 L2057.4 1218.5 L2057.99 1218.5 L2058.57 1218.5 L2059.16 1218.5 L2059.75 1218.5 L2060.33 1218.5 L2060.92 1218.5 L2061.51 1218.5 L2062.09 1218.5 L2062.68 1218.5 L2063.27 1218.5 L2063.85 1218.5 L2064.44 1218.5 L2065.02 1218.5 L2065.61 1218.5 L2066.2 1218.5 L2066.78 1218.5 L2067.37 1218.5 L2067.96 1218.5 L2068.54 1218.5 L2069.13 1218.5 L2069.72 1218.5 L2070.3 1218.5 L2070.89 1218.5 L2071.48 1218.5 L2072.06 1218.5 L2072.65 1218.5 L2073.23 1218.5 L2073.82 1218.5 L2074.41 1218.5 L2074.99 1218.5 L2075.58 1218.5 L2076.17 1218.5 L2076.75 1218.5 L2077.34 1218.5 L2077.93 1218.5 L2078.51 1218.5 L2079.1 1218.5 L2079.68 1218.5 L2080.27 1218.5 L2080.86 1218.5 L2081.44 1218.5 L2082.03 1218.5 L2082.62 1218.5 L2083.2 1218.5 L2083.79 1218.5 L2084.38 1218.5 L2084.96 1218.5 L2085.55 1218.5 L2086.14 1218.5 L2086.72 1218.5 L2087.31 1218.5 L2087.89 1218.5 L2088.48 1218.5 L2089.07 1218.5 L2089.65 1218.5 L2090.24 1218.5 L2090.83 1218.5 L2091.41 1218.5 L2092 1218.5 L2092.59 1218.5 L2093.17 1218.5 L2093.76 1218.5 L2094.35 1218.5 L2094.93 1218.5 L2095.52 1218.5 L2096.1 1218.5 L2096.69 1218.5 L2097.28 1218.5 L2097.86 1218.5 L2098.45 1218.5 L2099.04 1218.5 L2099.62 1218.5 L2100.21 1218.5 L2100.8 1218.5 L2101.38 1218.5 L2101.97 1218.5 L2102.55 1218.5 L2103.14 1218.5 L2103.73 1218.5 L2104.31 1218.5 L2104.9 1218.5 L2105.49 1218.5 L2106.07 1218.5 L2106.66 1218.5 L2107.25 1218.5 L2107.83 1218.5 L2108.42 1218.5 L2109.01 1218.5 L2109.59 1218.5 L2110.18 1218.5 L2110.76 1218.5 L2111.35 1218.5 L2111.94 1218.5 L2112.52 1218.5 L2113.11 1218.5 L2113.7 1218.5 L2114.28 1218.5 L2114.87 1218.5 L2115.46 1218.5 L2116.04 1218.5 L2116.63 1218.5 L2117.22 1218.5 L2117.8 1218.5 L2118.39 1218.5 L2118.97 1218.5 L2119.56 1218.5 L2120.15 1218.5 L2120.73 1218.5 L2121.32 1218.5 L2121.91 1218.5 L2122.49 1218.5 L2123.08 1218.5 L2123.67 1218.5 L2124.25 1218.5 L2124.84 1218.5 L2125.42 1218.5 L2126.01 1218.5 L2126.6 1218.5 L2127.18 1218.5 L2127.77 1218.5 L2128.36 1218.5 L2128.94 1218.5 L2129.53 1218.5 L2130.12 1218.5 L2130.7 1218.5 L2131.29 1218.5 L2131.88 1218.5 L2132.46 1218.5 L2133.05 1218.5 L2133.63 1218.5 L2134.22 1218.5 L2134.81 1218.5 L2135.39 1218.5 L2135.98 1218.5 L2136.57 1218.5 L2137.15 1218.5 L2137.74 1218.5 L2138.33 1218.5 L2138.91 1218.5 L2139.5 1218.5 L2140.09 1218.5 L2140.67 1218.5 L2141.26 1218.5 L2141.84 1218.5 L2142.43 1218.5 L2143.02 1218.5 L2143.6 1218.5 L2144.19 1218.5 L2144.78 1218.5 L2145.36 1218.5 L2145.95 1218.5 L2146.54 1218.5 L2147.12 1218.5 L2147.71 1218.5 L2148.3 1218.5 L2148.88 1218.5 L2149.47 1218.5 L2150.05 1218.5 L2150.64 1218.5 L2151.23 1218.5 L2151.81 1218.5 L2152.4 1218.5 L2152.99 1218.5 L2153.57 1218.5 L2154.16 1218.5 L2154.75 1218.5 L2155.33 1218.5 L2155.92 1218.5 L2156.5 1218.5 L2157.09 1218.5 L2157.68 1218.5 L2158.26 1218.5 L2158.26 1217.6 L2157.68 1217.6 L2157.09 1217.6 L2156.5 1217.6 L2155.92 1217.6 L2155.33 1217.6 L2154.75 1217.6 L2154.16 1217.6 L2153.57 1217.6 L2152.99 1217.6 L2152.4 1217.6 L2151.81 1217.6 L2151.23 1217.6 L2150.64 1217.6 L2150.05 1217.6 L2149.47 1217.6 L2148.88 1217.6 L2148.3 1217.6 L2147.71 1217.6 L2147.12 1217.6 L2146.54 1217.6 L2145.95 1217.6 L2145.36 1217.6 L2144.78 1217.6 L2144.19 1217.6 L2143.6 1217.6 L2143.02 1217.6 L2142.43 1217.6 L2141.84 1217.6 L2141.26 1217.6 L2140.67 1217.6 L2140.09 1217.6 L2139.5 1217.6 L2138.91 1217.6 L2138.33 1217.6 L2137.74 1217.6 L2137.15 1217.6 L2136.57 1217.6 L2135.98 1217.6 L2135.39 1217.6 L2134.81 1217.6 L2134.22 1217.6 L2133.63 1217.6 L2133.05 1217.6 L2132.46 1217.6 L2131.88 1217.6 L2131.29 1217.6 L2130.7 1217.6 L2130.12 1217.6 L2129.53 1217.6 L2128.94 1217.6 L2128.36 1217.6 L2127.77 1217.6 L2127.18 1217.6 L2126.6 1217.6 L2126.01 1217.6 L2125.42 1217.6 L2124.84 1217.6 L2124.25 1217.6 L2123.67 1217.6 L2123.08 1217.6 L2122.49 1217.6 L2121.91 1217.6 L2121.32 1217.6 L2120.73 1217.6 L2120.15 1217.6 L2119.56 1217.6 L2118.97 1217.6 L2118.39 1217.6 L2117.8 1217.6 L2117.22 1217.6 L2116.63 1217.6 L2116.04 1217.6 L2115.46 1217.6 L2114.87 1217.6 L2114.28 1217.6 L2113.7 1217.6 L2113.11 1217.6 L2112.52 1217.6 L2111.94 1217.6 L2111.35 1217.6 L2110.76 1217.6 L2110.18 1217.6 L2109.59 1217.6 L2109.01 1217.6 L2108.42 1217.6 L2107.83 1217.6 L2107.25 1217.6 L2106.66 1217.6 L2106.07 1217.6 L2105.49 1217.6 L2104.9 1217.6 L2104.31 1217.6 L2103.73 1217.6 L2103.14 1217.6 L2102.55 1217.6 L2101.97 1217.6 L2101.38 1217.6 L2100.8 1217.6 L2100.21 1217.6 L2099.62 1217.6 L2099.04 1217.6 L2098.45 1217.6 L2097.86 1217.6 L2097.28 1217.6 L2096.69 1217.6 L2096.1 1217.6 L2095.52 1217.6 L2094.93 1217.6 L2094.35 1217.6 L2093.76 1217.6 L2093.17 1217.6 L2092.59 1217.6 L2092 1217.6 L2091.41 1217.6 L2090.83 1217.6 L2090.24 1217.6 L2089.65 1217.6 L2089.07 1217.6 L2088.48 1217.6 L2087.89 1217.6 L2087.31 1217.6 L2086.72 1217.6 L2086.14 1217.6 L2085.55 1217.6 L2084.96 1217.6 L2084.38 1217.6 L2083.79 1217.6 L2083.2 1217.6 L2082.62 1217.6 L2082.03 1217.6 L2081.44 1217.6 L2080.86 1217.6 L2080.27 1217.6 L2079.68 1217.6 L2079.1 1217.6 L2078.51 1217.6 L2077.93 1217.6 L2077.34 1217.6 L2076.75 1217.6 L2076.17 1217.6 L2075.58 1217.6 L2074.99 1217.6 L2074.41 1217.6 L2073.82 1217.6 L2073.23 1217.6 L2072.65 1217.6 L2072.06 1217.6 L2071.48 1217.6 L2070.89 1217.6 L2070.3 1217.6 L2069.72 1217.6 L2069.13 1217.6 L2068.54 1217.6 L2067.96 1217.6 L2067.37 1217.6 L2066.78 1217.6 L2066.2 1217.6 L2065.61 1217.6 L2065.02 1217.6 L2064.44 1217.6 L2063.85 1217.6 L2063.27 1217.6 L2062.68 1217.6 L2062.09 1217.6 L2061.51 1217.6 L2060.92 1217.6 L2060.33 1217.6 L2059.75 1217.6 L2059.16 1217.6 L2058.57 1217.6 L2057.99 1217.6 L2057.4 1217.6 L2056.81 1217.6 L2056.23 1217.6 L2055.64 1217.6 L2055.06 1217.6 L2054.47 1217.6 L2053.88 1217.6 L2053.3 1217.6 L2052.71 1217.6 L2052.12 1217.6 L2051.54 1217.6 L2050.95 1217.6 L2050.36 1217.6 L2049.78 1217.6 L2049.19 1217.6 L2048.6 1217.6 L2048.02 1217.6 L2047.43 1217.6 L2046.85 1217.6 L2046.26 1217.6 L2045.67 1217.6 L2045.09 1217.6 L2044.5 1217.6 L2043.91 1217.6 L2043.33 1217.6 L2042.74 1217.6 L2042.15 1217.6 L2041.57 1217.6 L2040.98 1217.6 L2040.4 1217.6 L2039.81 1217.6 L2039.22 1217.6 L2038.64 1217.6 L2038.05 1217.6 L2037.46 1217.6 L2036.88 1217.6 L2036.29 1217.6 L2035.7 1217.6 L2035.12 1217.6 L2034.53 1217.6 L2033.94 1217.6 L2033.36 1217.6 L2032.77 1217.6 L2032.19 1217.6 L2031.6 1217.6 L2031.01 1217.6 L2030.43 1217.6 L2029.84 1217.6 L2029.25 1217.6 L2028.67 1217.6 L2028.08 1217.6 L2027.49 1217.6 L2026.91 1217.6 L2026.32 1217.6 L2025.73 1217.6 L2025.15 1217.6 L2024.56 1217.6 L2023.98 1217.6 L2023.39 1217.6 L2022.8 1217.6 L2022.22 1217.6 L2021.63 1217.6 L2021.04 1217.6 L2020.46 1217.6 L2019.87 1217.6 L2019.28 1217.6 L2018.7 1217.6 L2018.11 1217.6 L2017.53 1217.6 L2016.94 1217.6 L2016.35 1217.6 L2015.77 1217.6 L2015.18 1217.6 L2014.59 1217.6 L2014.01 1217.6 L2013.42 1217.6 L2012.83 1217.6 L2012.25 1217.6 L2011.66 1217.6 L2011.07 1217.6 L2010.49 1217.6 L2009.9 1217.6 L2009.32 1217.6 L2008.73 1217.6 L2008.14 1217.6 L2007.56 1217.6 L2006.97 1217.6 L2006.38 1217.6 L2005.8 1217.6 L2005.21 1217.6 L2004.62 1217.6 L2004.04 1217.6 L2003.45 1217.6 L2002.86 1217.6 L2002.28 1217.6 L2001.69 1217.6 L2001.11 1217.6 L2000.52 1217.6 L1999.93 1217.6 L1999.35 1217.6 L1998.76 1217.6 L1998.17 1217.6 L1997.59 1217.6 L1997 1217.6 L1996.41 1217.6 L1995.83 1217.6 L1995.24 1217.6 L1994.65 1217.6 L1994.07 1217.6 L1993.48 1217.6 L1992.9 1217.6 L1992.31 1217.6 L1991.72 1217.6 L1991.14 1217.6 L1990.55 1217.6 L1989.96 1217.6 L1989.38 1217.6 L1988.79 1217.6 L1988.2 1217.6 L1987.62 1217.6 L1987.03 1217.6 L1986.45 1217.6 L1985.86 1217.6 L1985.27 1217.6 L1984.69 1217.6 L1984.1 1217.6 L1983.51 1217.6 L1982.93 1217.6 L1982.34 1217.6 L1981.75 1217.6 L1981.17 1217.6 L1980.58 1217.6 L1979.99 1217.6 L1979.41 1217.6 L1978.82 1217.6 L1978.24 1217.6 L1977.65 1217.6 L1977.06 1217.6 L1976.48 1217.6 L1975.89 1217.6 L1975.3 1217.6 L1974.72 1217.6 L1974.13 1217.6 L1973.54 1217.6 L1972.96 1217.6 L1972.37 1217.6 L1971.78 1217.6 L1971.2 1217.6 L1970.61 1217.6 L1970.03 1217.6 L1969.44 1217.6 L1968.85 1217.6 L1968.27 1217.6 L1967.68 1217.6 L1967.09 1217.6 L1966.51 1217.6 L1965.92 1217.6 L1965.33 1217.6 L1964.75 1217.6 L1964.16 1217.6 L1963.58 1217.6 L1962.99 1217.6 L1962.4 1217.6 L1961.82 1217.6 L1961.23 1217.6 L1960.64 1217.6 L1960.06 1217.6 L1959.47 1217.6 L1958.88 1217.6 L1958.3 1217.6 L1957.71 1217.6 L1957.12 1217.6 L1956.54 1217.6 L1955.95 1217.6 L1955.37 1217.6 L1954.78 1217.6 L1954.19 1217.6 L1953.61 1217.6 L1953.02 1217.6 L1952.43 1217.6 L1951.85 1217.6 L1951.26 1217.6 L1950.67 1217.6 L1950.09 1217.6 L1949.5 1217.6 L1948.91 1217.6 L1948.33 1217.6 L1947.74 1217.6 L1947.16 1217.6 L1946.57 1217.6 L1945.98 1217.6 L1945.4 1217.6 L1944.81 1217.6 L1944.22 1217.6 L1943.64 1217.6 L1943.05 1217.6 L1942.46 1217.6 L1941.88 1217.6 L1941.29 1217.6 L1940.71 1217.6 L1940.12 1217.6 L1939.53 1217.6 L1938.95 1217.6 L1938.36 1217.6 L1937.77 1217.6 L1937.19 1217.6 L1936.6 1217.6 L1936.01 1217.6 L1935.43 1217.6 L1934.84 1217.6 L1934.25 1217.6 L1933.67 1217.6 L1933.08 1217.6 L1932.5 1217.6 L1931.91 1217.6 L1931.32 1217.6 L1930.74 1217.6 L1930.15 1217.6 L1929.56 1217.6 L1928.98 1217.6 L1928.39 1217.6 L1927.8 1217.6 L1927.22 1217.6 L1926.63 1217.6 L1926.04 1217.6 L1925.46 1217.6 L1924.87 1217.6 L1924.29 1217.6 L1923.7 1217.6 L1923.11 1217.6 L1922.53 1217.6 L1921.94 1217.6 L1921.35 1217.6 L1920.77 1217.6 L1920.18 1217.6 L1919.59 1217.6 L1919.01 1217.6 L1918.42 1217.6 L1917.83 1217.6 L1917.25 1217.6 L1916.66 1217.6 L1916.08 1217.6 L1915.49 1217.6 L1914.9 1217.6 L1914.32 1217.6 L1913.73 1217.6 L1913.14 1217.6 L1912.56 1217.6 L1911.97 1217.6 L1911.38 1217.6 L1910.8 1217.6 L1910.21 1217.6 L1909.63 1217.6 L1909.04 1217.6 L1908.45 1217.6 L1907.87 1217.6 L1907.28 1217.6 L1906.69 1217.6 L1906.11 1217.6 L1905.52 1217.6 L1904.93 1217.6 L1904.35 1217.6 L1903.76 1217.6 L1903.17 1217.6 L1902.59 1217.6 L1902 1217.6 L1901.42 1217.6 L1900.83 1217.6 L1900.24 1217.6 L1899.66 1217.6 L1899.07 1217.6 L1898.48 1217.6 L1897.9 1217.6 L1897.31 1217.6 L1896.72 1217.6 L1896.14 1217.6 L1895.55 1217.6 L1894.96 1217.6 L1894.38 1217.6 L1893.79 1217.6 L1893.21 1217.6 L1892.62 1217.6 L1892.03 1217.6 L1891.45 1217.6 L1890.86 1217.6 L1890.27 1217.6 L1889.69 1217.6 L1889.1 1217.6 L1888.51 1217.6 L1887.93 1217.6 L1887.34 1217.6 L1886.76 1217.6 L1886.17 1217.6 L1885.58 1217.6 L1885 1217.6 L1884.41 1217.6 L1883.82 1217.6 L1883.24 1217.6 L1882.65 1217.6 L1882.06 1217.6 L1881.48 1217.6 L1880.89 1217.6 L1880.3 1217.6 L1879.72 1217.6 L1879.13 1217.6 L1878.55 1217.6 L1877.96 1217.6 L1877.37 1217.6 L1876.79 1217.6 L1876.2 1217.6 L1875.61 1217.6 L1875.03 1217.6 L1874.44 1217.6 L1873.85 1217.6 L1873.27 1217.6 L1872.68 1217.6 L1872.09 1217.6 L1871.51 1217.6 L1870.92 1217.6 L1870.34 1217.6 L1869.75 1217.6 L1869.16 1217.6 L1868.58 1217.6 L1867.99 1217.6 L1867.4 1217.6 L1866.82 1217.6 L1866.23 1217.6 L1865.64 1217.6 L1865.06 1217.6 L1864.47 1217.6 L1863.88 1217.6 L1863.3 1217.6 L1862.71 1217.6 L1862.13 1217.6 L1861.54 1217.6 L1860.95 1217.6 L1860.37 1217.6 L1859.78 1217.6 L1859.19 1217.6 L1858.61 1217.6 L1858.02 1217.6 L1857.43 1217.6 L1856.85 1217.6 L1856.26 1217.6 L1855.68 1217.6 L1855.09 1217.6 L1854.5 1217.6 L1853.92 1217.6 L1853.33 1217.6 L1852.74 1217.6 L1852.16 1217.6 L1851.57 1217.6 L1850.98 1217.6 L1850.4 1217.6 L1849.81 1217.6 L1849.22 1217.6 L1848.64 1217.6 L1848.05 1217.6 L1847.47 1217.6 L1846.88 1217.6 L1846.29 1217.6 L1845.71 1217.6 L1845.12 1217.6 L1844.53 1217.6 L1843.95 1217.6 L1843.36 1217.6 L1842.77 1217.6 L1842.19 1217.6 L1841.6 1217.6 L1841.01 1217.6 L1840.43 1217.6 L1839.84 1217.6 L1839.26 1217.6 L1838.67 1217.6 L1838.08 1217.6 L1837.5 1217.6 L1836.91 1217.6 L1836.32 1217.6 L1835.74 1217.6 L1835.15 1217.6 L1834.56 1217.6 L1833.98 1217.6 L1833.39 1217.6 L1832.81 1217.6 L1832.22 1217.6 L1831.63 1217.6 L1831.05 1217.6 L1830.46 1217.6 L1829.87 1217.6 L1829.29 1217.6 L1828.7 1217.6 L1828.11 1217.6 L1827.53 1217.6 L1826.94 1217.6 L1826.35 1217.6 L1825.77 1217.6 L1825.18 1217.6 L1824.6 1217.6 L1824.01 1217.6 L1823.42 1217.6 L1822.84 1217.6 L1822.25 1217.6 L1821.66 1217.6 L1821.08 1217.6 L1820.49 1217.6 L1819.9 1217.6 L1819.32 1217.6 L1818.73 1217.6 L1818.14 1217.6 L1817.56 1217.6 L1816.97 1217.6 L1816.39 1217.6 L1815.8 1217.6 L1815.21 1217.6 L1814.63 1217.6 L1814.04 1217.6 L1813.45 1217.6 L1812.87 1217.6 L1812.28 1217.6 L1811.69 1217.6 L1811.11 1217.6 L1810.52 1217.6 L1809.94 1217.6 L1809.35 1217.6 L1808.76 1217.6 L1808.18 1217.6 L1807.59 1217.6 L1807 1217.6 L1806.42 1217.6 L1805.83 1217.6 L1805.24 1217.6 L1804.66 1217.6 L1804.07 1217.6 L1803.48 1217.6 L1802.9 1217.6 L1802.31 1217.6 L1801.73 1217.6 L1801.14 1217.6 L1800.55 1217.6 L1799.97 1217.6 L1799.38 1217.6 L1798.79 1217.6 L1798.21 1217.6 L1797.62 1217.6 L1797.03 1217.6 L1796.45 1217.6 L1795.86 1217.6 L1795.27 1217.6 L1794.69 1217.6 L1794.1 1217.6 L1793.52 1217.6 L1792.93 1217.6 L1792.34 1217.6 L1791.76 1217.6 L1791.17 1217.6 L1790.58 1217.6 L1790 1217.6 L1789.41 1217.6 L1788.82 1217.6 L1788.24 1217.6 L1787.65 1217.6 L1787.06 1217.6 L1786.48 1217.6 L1785.89 1217.6 L1785.31 1217.6 L1784.72 1217.6 L1784.13 1217.6 L1783.55 1217.6 L1782.96 1217.6 L1782.37 1217.6 L1781.79 1217.6 L1781.2 1217.6 L1780.61 1217.6 L1780.03 1217.6 L1779.44 1217.6 L1778.86 1217.6 L1778.27 1217.6 L1777.68 1217.6 L1777.1 1217.6 L1776.51 1217.6 L1775.92 1217.6 L1775.34 1217.6 L1774.75 1217.6 L1774.16 1217.6 L1773.58 1217.6 L1772.99 1217.6 L1772.4 1217.6 L1771.82 1217.6 L1771.23 1217.6 L1770.65 1217.6 L1770.06 1217.6 L1769.47 1217.6 L1768.89 1217.6 L1768.3 1217.6 L1767.71 1217.6 L1767.13 1217.6 L1766.54 1217.6 L1765.95 1217.6 L1765.37 1217.6 L1764.78 1217.6 L1764.19 1217.6 L1763.61 1217.6 L1763.02 1217.6 L1762.44 1217.6 L1761.85 1217.6 L1761.26 1217.6 L1760.68 1217.6 L1760.09 1217.6 L1759.5 1217.6 L1758.92 1217.6 L1758.33 1217.6 L1757.74 1217.6 L1757.16 1217.6 L1756.57 1217.6 L1755.99 1217.6 L1755.4 1217.6 L1754.81 1217.6 L1754.23 1217.6 L1753.64 1217.6 L1753.05 1217.6 L1752.47 1217.6 L1751.88 1217.6 L1751.29 1217.6 L1750.71 1217.6 L1750.12 1217.6 L1749.53 1217.6 L1748.95 1217.6 L1748.36 1217.6 L1747.78 1217.6 L1747.19 1217.6 L1746.6 1217.6 L1746.02 1217.6 L1745.43 1217.6 L1744.84 1217.6 L1744.26 1217.6 L1743.67 1217.6 L1743.08 1217.6 L1742.5 1217.6 L1741.91 1217.6 L1741.32 1217.6 L1740.74 1217.6 L1740.15 1217.6 L1739.57 1217.6 L1738.98 1217.6 L1738.39 1217.6 L1737.81 1217.6 L1737.22 1217.6 L1736.63 1217.6 L1736.05 1217.6 L1735.46 1217.6 L1734.87 1217.6 L1734.29 1217.6 L1733.7 1217.6 L1733.11 1217.6 L1732.53 1217.6 L1731.94 1217.6 L1731.36 1217.6 L1730.77 1217.6 L1730.18 1217.6 L1729.6 1217.6 L1729.01 1217.6 L1728.42 1217.6 L1727.84 1217.6 L1727.25 1217.6 L1726.66 1217.6 L1726.08 1217.6 L1725.49 1217.6 L1724.91 1217.6 L1724.32 1217.6 L1723.73 1217.6 L1723.15 1217.6 L1722.56 1217.6 L1721.97 1217.6 L1721.39 1217.6 L1720.8 1217.6 L1720.21 1217.6 L1719.63 1217.6 L1719.04 1217.6 L1718.45 1217.6 L1717.87 1217.6 L1717.28 1217.6 L1716.7 1217.6 L1716.11 1217.6 L1715.52 1217.6 L1714.94 1217.6 L1714.35 1217.6 L1713.76 1217.6 L1713.18 1217.6 L1712.59 1217.6 L1712 1217.6 L1711.42 1217.6 L1710.83 1217.6 L1710.24 1217.6 L1709.66 1217.6 L1709.07 1217.6 L1708.49 1217.6 L1707.9 1217.6 L1707.31 1217.6 L1706.73 1217.6 L1706.14 1217.6 L1705.55 1217.6 L1704.97 1217.6 L1704.38 1217.6 L1703.79 1217.6 L1703.21 1217.6 L1702.62 1217.6 L1702.04 1217.6 L1701.45 1217.6 L1700.86 1217.6 L1700.28 1217.6 L1699.69 1217.6 L1699.1 1217.6 L1698.52 1217.6 L1697.93 1217.6 L1697.34 1217.6 L1696.76 1217.6 L1696.17 1217.6 L1695.58 1217.6 L1695 1217.6 L1694.41 1217.6 L1693.83 1217.6 L1693.24 1217.6 L1692.65 1217.6 L1692.07 1217.6 L1691.48 1217.6 L1690.89 1217.6 L1690.31 1217.6 L1689.72 1217.6 L1689.13 1217.6 L1688.55 1217.6 L1687.96 1217.6 L1687.37 1217.6 L1686.79 1217.6 L1686.2 1217.6 L1685.62 1217.6 L1685.03 1217.6 L1684.44 1217.6 L1683.86 1217.6 L1683.27 1217.6 L1682.68 1217.6 L1682.1 1217.6 L1681.51 1217.6 L1680.92 1217.6 L1680.34 1217.6 L1679.75 1217.6 L1679.17 1217.6 L1678.58 1217.6 L1677.99 1217.6 L1677.41 1217.6 L1676.82 1217.6 L1676.23 1217.6 L1675.65 1217.6 L1675.06 1217.6 L1674.47 1217.6 L1673.89 1217.6 L1673.3 1217.6 L1672.71 1217.6 L1672.13 1217.6 L1671.54 1217.6 L1670.96 1217.6 L1670.37 1217.6 L1669.78 1217.6 L1669.2 1217.6 L1668.61 1217.6 L1668.02 1217.6 L1667.44 1217.6 L1666.85 1217.6 L1666.26 1217.6 L1665.68 1217.6 L1665.09 1217.6 L1664.5 1217.6 L1663.92 1217.6 L1663.33 1217.6 L1662.75 1217.6 L1662.16 1217.6 L1661.57 1217.6 L1660.99 1217.6 L1660.4 1217.6 L1659.81 1217.6 L1659.23 1217.6 L1658.64 1217.6 L1658.05 1217.6 L1657.47 1217.6 L1656.88 1217.6 L1656.29 1217.6 L1655.71 1217.6 L1655.12 1217.6 L1654.54 1217.6 L1653.95 1217.6 L1653.36 1217.6 L1652.78 1217.6 L1652.19 1217.6 L1651.6 1217.6 L1651.02 1217.6 L1650.43 1217.6 L1649.84 1217.6 L1649.26 1217.6 L1648.67 1217.6 L1648.09 1217.6 L1647.5 1217.6 L1646.91 1217.6 L1646.33 1217.6 L1645.74 1217.6 L1645.15 1217.6 L1644.57 1217.6 L1643.98 1217.6 L1643.39 1217.6 L1642.81 1217.6 L1642.22 1217.6 L1641.63 1217.6 L1641.05 1217.6 L1640.46 1217.6 L1639.88 1217.6 L1639.29 1217.6 L1638.7 1217.6 L1638.12 1217.6 L1637.53 1217.6 L1636.94 1217.6 L1636.36 1217.6 L1635.77 1217.6 L1635.18 1217.6 L1634.6 1217.6 L1634.01 1217.6 L1633.42 1217.6 L1632.84 1217.6 L1632.25 1217.6 L1631.67 1217.6 L1631.08 1217.6 L1630.49 1217.6 L1629.91 1217.6 L1629.32 1217.6 L1628.73 1217.6 L1628.15 1217.6 L1627.56 1217.6 L1626.97 1217.6 L1626.39 1217.6 L1625.8 1217.6 L1625.22 1217.6 L1624.63 1217.6 L1624.04 1217.6 L1623.46 1217.6 L1622.87 1217.6 L1622.28 1217.6 L1621.7 1217.6 L1621.11 1217.6 L1620.52 1217.6 L1619.94 1217.6 L1619.35 1217.6 L1618.76 1217.6 L1618.18 1217.6 L1617.59 1217.6 L1617.01 1217.6 L1616.42 1217.6 L1615.83 1217.6 L1615.25 1217.6 L1614.66 1217.6 L1614.07 1217.6 L1613.49 1217.6 L1612.9 1217.6 L1612.31 1217.6 L1611.73 1217.6 L1611.14 1217.6 L1610.55 1217.6 L1609.97 1217.6 L1609.38 1217.6 L1608.8 1217.6 L1608.21 1217.6 L1607.62 1217.6 L1607.04 1217.6 L1606.45 1217.6 L1605.86 1217.6 L1605.28 1217.6 L1604.69 1217.6 L1604.1 1217.6 L1603.52 1217.6 L1602.93 1217.6 L1602.34 1217.6 L1601.76 1217.6 L1601.17 1217.6 L1600.59 1217.6 L1600 1217.6 L1599.41 1217.6 L1598.83 1217.6 L1598.24 1217.6 L1597.65 1217.6 L1597.07 1217.6 L1596.48 1217.6 L1595.89 1217.6 L1595.31 1217.6 L1594.72 1217.6 L1594.14 1217.6 L1593.55 1217.6 L1592.96 1217.6 L1592.38 1217.6 L1591.79 1217.6 L1591.2 1217.6 L1590.62 1217.6 L1590.03 1217.6 L1589.44 1217.6 L1588.86 1217.6 L1588.27 1217.6 L1587.68 1217.6 L1587.1 1217.6 L1586.51 1217.6 L1585.93 1217.6 L1585.34 1217.6 L1584.75 1217.6 L1584.17 1217.6 L1583.58 1217.6 L1582.99 1217.6 L1582.41 1217.6 L1581.82 1217.6 L1581.23 1217.6 L1580.65 1217.6 L1580.06 1217.6 L1579.47 1217.6 L1578.89 1217.6 L1578.3 1217.6 L1577.72 1217.6 L1577.13 1217.6 L1576.54 1217.6 L1575.96 1217.6 L1575.37 1217.6 L1574.78 1217.6 L1574.2 1217.6 L1573.61 1217.6 L1573.02 1217.6 L1572.44 1217.6 L1571.85 1217.6 L1571.27 1217.6 L1570.68 1217.6 L1570.09 1217.6 L1569.51 1217.6 L1568.92 1217.6 L1568.33 1217.6 L1567.75 1217.6 L1567.16 1217.6 L1566.57 1217.6 L1565.99 1217.6 L1565.4 1217.6 L1564.81 1217.6 L1564.23 1217.6 L1563.64 1217.6 L1563.06 1217.6 L1562.47 1217.6 L1561.88 1217.6 L1561.3 1217.6 L1560.71 1217.6 L1560.12 1217.6 L1559.54 1217.6 L1558.95 1217.6 L1558.36 1217.6 L1557.78 1217.6 L1557.19 1217.6 L1556.6 1217.6 L1556.02 1217.6 L1555.43 1217.6 L1554.85 1217.6 L1554.26 1217.6 L1553.67 1217.6 L1553.09 1217.6 L1552.5 1217.6 L1551.91 1217.6 L1551.33 1217.6 L1550.74 1217.6 L1550.15 1217.6 L1549.57 1217.6 L1548.98 1217.6 L1548.4 1217.6 L1547.81 1217.6 L1547.22 1217.6 L1546.64 1217.6 L1546.05 1217.6 L1545.46 1217.6 L1544.88 1217.6 L1544.29 1217.6 L1543.7 1217.6 L1543.12 1217.6 L1542.53 1217.6 L1541.94 1217.6 L1541.36 1217.6 L1540.77 1217.6 L1540.19 1217.6 L1539.6 1217.6 L1539.01 1217.6 L1538.43 1217.6 L1537.84 1217.6 L1537.25 1217.6 L1536.67 1217.6 L1536.08 1217.6 L1535.49 1217.6 L1534.91 1217.6 L1534.32 1217.6 L1533.73 1217.6 L1533.15 1217.6 L1532.56 1217.6 L1531.98 1217.6 L1531.39 1217.6 L1530.8 1217.6 L1530.22 1217.6 L1529.63 1217.6 L1529.04 1217.6 L1528.46 1217.6 L1527.87 1217.6 L1527.28 1217.6 L1526.7 1217.6 L1526.11 1217.6 L1525.52 1217.6 L1524.94 1217.6 L1524.35 1217.6 L1523.77 1217.6 L1523.18 1217.6 L1522.59 1217.6 L1522.01 1217.6 L1521.42 1217.6 L1520.83 1217.6 L1520.25 1217.6 L1519.66 1217.6 L1519.07 1217.6 L1518.49 1217.6 L1517.9 1217.6 L1517.32 1217.6 L1516.73 1217.6 L1516.14 1217.6 L1515.56 1217.6 L1514.97 1217.6 L1514.38 1217.6 L1513.8 1217.6 L1513.21 1217.6 L1512.62 1217.6 L1512.04 1217.6 L1511.45 1217.6 L1510.86 1217.6 L1510.28 1217.6 L1509.69 1217.6 L1509.11 1217.6 L1508.52 1217.6 L1507.93 1217.6 L1507.35 1217.6 L1506.76 1217.6 L1506.17 1217.6 L1505.59 1217.6 L1505 1217.6 L1504.41 1217.6 L1503.83 1217.6 L1503.24 1217.6 L1502.65 1217.6 L1502.07 1217.6 L1501.48 1217.6 L1500.9 1217.6 L1500.31 1217.6 L1499.72 1217.6 L1499.14 1217.6 L1498.55 1217.6 L1497.96 1217.6 L1497.38 1217.6 L1496.79 1217.6 L1496.2 1217.6 L1495.62 1217.6 L1495.03 1217.6 L1494.45 1217.6 L1493.86 1217.6 L1493.27 1217.6 L1492.69 1217.6 L1492.1 1217.6 L1491.51 1217.6 L1490.93 1217.6 L1490.34 1217.6 L1489.75 1217.6 L1489.17 1217.6 L1488.58 1217.6 L1487.99 1217.6 L1487.41 1217.6 L1486.82 1217.6 L1486.24 1217.6 L1485.65 1217.6 L1485.06 1217.6 L1484.48 1217.6 L1483.89 1217.6 L1483.3 1217.6 L1482.72 1217.6 L1482.13 1217.6 L1481.54 1217.6 L1480.96 1217.6 L1480.37 1217.6 L1479.78 1217.6 L1479.2 1217.6 L1478.61 1217.6 L1478.03 1217.6 L1477.44 1217.6 L1476.85 1217.6 L1476.27 1217.6 L1475.68 1217.6 L1475.09 1217.6 L1474.51 1217.6 L1473.92 1217.6 L1473.33 1217.6 L1472.75 1217.6 L1472.16 1217.6 L1471.57 1217.6 L1470.99 1217.6 L1470.4 1217.6 L1469.82 1217.6 L1469.23 1217.6 L1468.64 1217.6 L1468.06 1217.6 L1467.47 1217.6 L1466.88 1217.6 L1466.3 1217.6 L1465.71 1217.6 L1465.12 1217.6 L1464.54 1217.6 L1463.95 1217.6 L1463.37 1217.6 L1462.78 1217.6 L1462.19 1217.6 L1461.61 1217.6 L1461.02 1217.6 L1460.43 1217.6 L1459.85 1217.6 L1459.26 1217.6 L1458.67 1217.6 L1458.09 1217.6 L1457.5 1217.6 L1456.91 1217.6 L1456.33 1217.6 L1455.74 1217.6 L1455.16 1217.6 L1454.57 1217.6 L1453.98 1217.6 L1453.4 1217.6 L1452.81 1217.6 L1452.22 1217.6 L1451.64 1217.6 L1451.05 1217.6 L1450.46 1217.6 L1449.88 1217.6 L1449.29 1217.6 L1448.7 1217.6 L1448.12 1217.6 L1447.53 1217.6 L1446.95 1217.6 L1446.36 1217.6 L1445.77 1217.6 L1445.19 1217.6 L1444.6 1217.6 L1444.01 1217.6 L1443.43 1217.6 L1442.84 1217.6 L1442.25 1217.6 L1441.67 1217.6 L1441.08 1217.6 L1440.5 1217.6 L1439.91 1217.6 L1439.32 1217.6 L1438.74 1217.6 L1438.15 1217.6 L1437.56 1217.6 L1436.98 1217.6 L1436.39 1217.6 L1435.8 1217.6 L1435.22 1217.6 L1434.63 1217.6 L1434.04 1217.6 L1433.46 1217.6 L1432.87 1217.6 L1432.29 1217.6 L1431.7 1217.6 L1431.11 1217.6 L1430.53 1217.6 L1429.94 1217.6 L1429.35 1217.6 L1428.77 1217.6 L1428.18 1217.6 L1427.59 1217.6 L1427.01 1217.6 L1426.42 1217.6 L1425.83 1217.6 L1425.25 1217.6 L1424.66 1217.6 L1424.08 1217.6 L1423.49 1217.6 L1422.9 1217.6 L1422.32 1217.6 L1421.73 1217.6 L1421.14 1217.6 L1420.56 1217.6 L1419.97 1217.6 L1419.38 1217.6 L1418.8 1217.6 L1418.21 1217.6 L1417.63 1217.6 L1417.04 1217.6 L1416.45 1217.6 L1415.87 1217.6 L1415.28 1217.6 L1414.69 1217.6 L1414.11 1217.6 L1413.52 1217.6 L1412.93 1217.6 L1412.35 1217.6 L1411.76 1217.6 L1411.17 1217.6 L1410.59 1217.6 L1410 1217.6 L1409.42 1217.6 L1408.83 1217.6 L1408.24 1217.6 L1407.66 1217.6 L1407.07 1217.6 L1406.48 1217.6 L1405.9 1217.6 L1405.31 1217.6 L1404.72 1217.6 L1404.14 1217.6 L1403.55 1217.6 L1402.96 1217.6 L1402.38 1217.6 L1401.79 1217.6 L1401.21 1217.6 L1400.62 1217.6 L1400.03 1217.6 L1399.45 1217.6 L1398.86 1217.6 L1398.27 1217.6 L1397.69 1217.6 L1397.1 1217.6 L1396.51 1217.6 L1395.93 1217.6 L1395.34 1217.6 L1394.75 1217.6 L1394.17 1217.6 L1393.58 1217.6 L1393 1217.6 L1392.41 1217.6 L1391.82 1217.6 L1391.24 1217.6 L1390.65 1217.6 L1390.06 1217.6 L1389.48 1217.6 L1388.89 1217.6 L1388.3 1217.6 L1387.72 1217.6 L1387.13 1217.6 L1386.55 1217.6 L1385.96 1217.6 L1385.37 1217.6 L1384.79 1217.6 L1384.2 1217.6 L1383.61 1217.6 L1383.03 1217.6 L1382.44 1217.6 L1381.85 1217.6 L1381.27 1217.6 L1380.68 1217.6 L1380.09 1217.6 L1379.51 1217.6 L1378.92 1217.6 L1378.34 1217.6 L1377.75 1217.6 L1377.16 1217.6 L1376.58 1217.6 L1375.99 1217.6 L1375.4 1217.6 L1374.82 1217.6 L1374.23 1217.6 L1373.64 1217.6 L1373.06 1217.6 L1372.47 1217.6 L1371.88 1217.6 L1371.3 1217.6 L1370.71 1217.6 L1370.13 1217.6 L1369.54 1217.6 L1368.95 1217.6 L1368.37 1217.6 L1367.78 1217.6 L1367.19 1217.6 L1366.61 1217.6 L1366.02 1217.6 L1365.43 1217.6 L1364.85 1217.6 L1364.26 1217.6 L1363.68 1217.6 L1363.09 1217.6 L1362.5 1217.6 L1361.92 1217.6 L1361.33 1217.6 L1360.74 1217.6 L1360.16 1217.6 L1359.57 1217.6 L1358.98 1217.6 L1358.4 1217.6 L1357.81 1217.6 L1357.22 1217.6 L1356.64 1217.6 L1356.05 1217.6 L1355.47 1217.6 L1354.88 1217.6 L1354.29 1217.6 L1353.71 1217.6 L1353.12 1217.6 L1352.53 1217.6 L1351.95 1217.6 L1351.36 1217.6 L1350.77 1217.6 L1350.19 1217.6 L1349.6 1217.6 L1349.01 1217.6 L1348.43 1217.6 L1347.84 1217.6 L1347.26 1217.6 L1346.67 1217.6 L1346.08 1217.6 L1345.5 1217.6 L1344.91 1217.6 L1344.32 1217.6 L1343.74 1217.6 L1343.15 1217.6 L1342.56 1217.6 L1341.98 1217.6 L1341.39 1217.6 L1340.8 1217.6 L1340.22 1217.6 L1339.63 1217.6 L1339.05 1217.6 L1338.46 1217.6 L1337.87 1217.6 L1337.29 1217.6 L1336.7 1217.6 L1336.11 1217.6 L1335.53 1217.6 L1334.94 1217.6 L1334.35 1217.6 L1333.77 1217.6 L1333.18 1217.6 L1332.6 1217.6 L1332.01 1217.6 L1331.42 1217.6 L1330.84 1217.6 L1330.25 1217.6 L1329.66 1217.6 L1329.08 1217.6 L1328.49 1217.6 L1327.9 1217.6 L1327.32 1217.6 L1326.73 1217.6 L1326.14 1217.6 L1325.56 1217.6 L1324.97 1217.6 L1324.39 1217.6 L1323.8 1217.6 L1323.21 1217.6 L1322.63 1217.6 L1322.04 1217.6 L1321.45 1217.6 L1320.87 1217.6 L1320.28 1217.6 L1319.69 1217.6 L1319.11 1217.6 L1318.52 1217.6 L1317.93 1217.6 L1317.35 1217.6 L1316.76 1217.6 L1316.18 1217.6 L1315.59 1217.6 L1315 1217.6 L1314.42 1217.6 L1313.83 1217.6 L1313.24 1217.6 L1312.66 1217.6 L1312.07 1217.6 L1311.48 1217.6 L1310.9 1217.6 L1310.31 1217.6 L1309.73 1217.6 L1309.14 1217.6 L1308.55 1217.6 L1307.97 1217.6 L1307.38 1217.6 L1306.79 1217.6 L1306.21 1217.6 L1305.62 1217.6 L1305.03 1217.6 L1304.45 1217.6 L1303.86 1217.6 L1303.27 1217.6 L1302.69 1217.6 L1302.1 1217.6 L1301.52 1217.6 L1300.93 1217.6 L1300.34 1217.6 L1299.76 1217.6 L1299.17 1217.6 L1298.58 1217.6 L1298 1217.6 L1297.41 1217.6 L1296.82 1217.6 L1296.24 1217.6 L1295.65 1217.6 L1295.06 1217.6 L1294.48 1217.6 L1293.89 1217.6 L1293.31 1217.6 L1292.72 1217.6 L1292.13 1217.6 L1291.55 1217.6 L1290.96 1217.6 L1290.37 1217.6 L1289.79 1217.6 L1289.2 1217.6 L1288.61 1217.6 L1288.03 1217.6 L1287.44 1217.6 L1286.86 1217.6 L1286.27 1217.6 L1285.68 1217.6 L1285.1 1217.6 L1284.51 1217.6 L1283.92 1217.6 L1283.34 1217.6 L1282.75 1217.6 L1282.16 1217.6 L1281.58 1217.6 L1280.99 1217.6 L1280.4 1217.6 L1279.82 1217.6 L1279.23 1217.6 L1278.65 1217.6 L1278.06 1217.6 L1277.47 1217.6 L1276.89 1217.6 L1276.3 1217.6 L1275.71 1217.6 L1275.13 1217.6 L1274.54 1217.6 L1273.95 1217.6 L1273.37 1217.6 L1272.78 1217.6 L1272.19 1217.6 L1271.61 1217.6 L1271.02 1217.6 L1270.44 1217.6 L1269.85 1217.6 L1269.26 1217.6 L1268.68 1217.6 L1268.09 1217.6 L1267.5 1217.6 L1266.92 1217.6 L1266.33 1217.6 L1265.74 1217.6 L1265.16 1217.6 L1264.57 1217.6 L1263.98 1217.6 L1263.4 1217.6 L1262.81 1217.6 L1262.23 1217.6 L1261.64 1217.6 L1261.05 1217.6 L1260.47 1217.6 L1259.88 1217.6 L1259.29 1217.6 L1258.71 1217.6 L1258.12 1217.6 L1257.53 1217.6 L1256.95 1217.6 L1256.36 1217.6 L1255.78 1217.6 L1255.19 1217.6 L1254.6 1217.6 L1254.02 1217.6 L1253.43 1217.6 L1252.84 1217.6 L1252.26 1217.6 L1251.67 1217.6 L1251.08 1217.6 L1250.5 1217.6 L1249.91 1217.6 L1249.32 1217.6 L1248.74 1217.6 L1248.15 1217.6 L1247.57 1217.6 L1246.98 1217.6 L1246.39 1217.6 L1245.81 1217.6 L1245.22 1217.6 L1244.63 1217.6 L1244.05 1217.6 L1243.46 1217.6 L1242.87 1217.6 L1242.29 1217.6 L1241.7 1217.6 L1241.11 1217.6 L1240.53 1217.6 L1239.94 1217.6 L1239.36 1217.6 L1238.77 1217.6 L1238.18 1217.6 L1237.6 1217.6 L1237.01 1217.6 L1236.42 1217.6 L1235.84 1217.6 L1235.25 1217.6 L1234.66 1217.6 L1234.08 1217.6 L1233.49 1217.6 L1232.91 1217.6 L1232.32 1217.6 L1231.73 1217.6 L1231.15 1217.6 L1230.56 1217.6 L1229.97 1217.6 L1229.39 1217.6 L1228.8 1217.6 L1228.21 1217.6 L1227.63 1217.6 L1227.04 1217.6 L1226.45 1217.6 L1225.87 1217.6 L1225.28 1217.6 L1224.7 1217.6 L1224.11 1217.6 L1223.52 1217.6 L1222.94 1217.6 L1222.35 1217.6 L1221.76 1217.6 L1221.18 1217.6 L1220.59 1217.6 L1220 1217.6 L1219.42 1217.6 L1218.83 1217.6 L1218.24 1217.6 L1217.66 1217.6 L1217.07 1217.6 L1216.49 1217.6 L1215.9 1217.6 L1215.31 1217.6 L1214.73 1217.6 L1214.14 1217.6 L1213.55 1217.6 L1212.97 1217.6 L1212.38 1217.6 L1211.79 1217.6 L1211.21 1217.6 L1210.62 1217.6 L1210.03 1217.6 L1209.45 1217.6 L1208.86 1217.6 L1208.28 1217.6 L1207.69 1217.6 L1207.1 1217.6 L1206.52 1217.6 L1205.93 1217.6 L1205.34 1217.6 L1204.76 1217.6 L1204.17 1217.6 L1203.58 1217.6 L1203 1217.6 L1202.41 1217.6 L1201.83 1217.6 L1201.24 1217.6 L1200.65 1217.6 L1200.07 1217.6 L1199.48 1217.6 L1198.89 1217.6 L1198.31 1217.6 L1197.72 1217.6 L1197.13 1217.6 L1196.55 1217.6 L1195.96 1217.6 L1195.37 1217.6 L1194.79 1217.6 L1194.2 1217.6 L1193.62 1217.6 L1193.03 1217.6 L1192.44 1217.6 L1191.86 1217.6 L1191.27 1217.6 L1190.68 1217.6 L1190.1 1217.6 L1189.51 1217.6 L1188.92 1217.6 L1188.34 1217.6 L1187.75 1217.6 L1187.16 1217.6 L1186.58 1217.6 L1185.99 1217.6 L1185.41 1217.6 L1184.82 1217.6 L1184.23 1217.6 L1183.65 1217.6 L1183.06 1217.6 L1182.47 1217.6 L1181.89 1217.6 L1181.3 1217.6 L1180.71 1217.6 L1180.13 1217.6 L1179.54 1217.6 L1178.96 1217.6 L1178.37 1217.6 L1177.78 1217.6 L1177.2 1217.6 L1176.61 1217.6 L1176.02 1217.6 L1175.44 1217.6 L1174.85 1217.6 L1174.26 1217.6 L1173.68 1217.6 L1173.09 1217.6 L1172.5 1217.6 L1171.92 1217.6 L1171.33 1217.6 L1170.75 1217.6 L1170.16 1217.6 L1169.57 1217.6 L1168.99 1217.6 L1168.4 1217.6 L1167.81 1217.6 L1167.23 1217.6 L1166.64 1217.6 L1166.05 1217.6 L1165.47 1217.6 L1164.88 1217.6 L1164.29 1217.6 L1163.71 1217.6 L1163.12 1217.6 L1162.54 1217.6 L1161.95 1217.6 L1161.36 1217.6 L1160.78 1217.6 L1160.19 1217.6 L1159.6 1217.6 L1159.02 1217.6 L1158.43 1217.6 L1157.84 1217.6 L1157.26 1217.6 L1156.67 1217.6 L1156.09 1217.6 L1155.5 1217.6 L1154.91 1217.6 L1154.33 1217.6 L1153.74 1217.6 L1153.15 1217.6 L1152.57 1217.6 L1151.98 1217.6 L1151.39 1217.6 L1150.81 1217.6 L1150.22 1217.6 L1149.63 1217.6 L1149.05 1217.6 L1148.46 1217.6 L1147.88 1217.6 L1147.29 1217.6 L1146.7 1217.6 L1146.12 1217.6 L1145.53 1217.6 L1144.94 1217.6 L1144.36 1217.6 L1143.77 1217.6 L1143.18 1217.6 L1142.6 1217.6 L1142.01 1217.6 L1141.42 1217.6 L1140.84 1217.6 L1140.25 1217.6 L1139.67 1217.6 L1139.08 1217.6 L1138.49 1217.6 L1137.91 1217.6 L1137.32 1217.6 L1136.73 1217.6 L1136.15 1217.6 L1135.56 1217.6 L1134.97 1217.6 L1134.39 1217.6 L1133.8 1217.6 L1133.21 1217.6 L1132.63 1217.6 L1132.04 1217.6 L1131.46 1217.6 L1130.87 1217.6 L1130.28 1217.6 L1129.7 1217.6 L1129.11 1217.6 L1128.52 1217.6 L1127.94 1217.6 L1127.35 1217.6 L1126.76 1217.6 L1126.18 1217.6 L1125.59 1217.6 L1125.01 1217.6 L1124.42 1217.6 L1123.83 1217.6 L1123.25 1217.6 L1122.66 1217.6 L1122.07 1217.6 L1121.49 1217.6 L1120.9 1217.6 L1120.31 1217.6 L1119.73 1217.6 L1119.14 1217.6 L1118.55 1217.6 L1117.97 1217.6 L1117.38 1217.6 L1116.8 1217.6 L1116.21 1217.6 L1115.62 1217.6 L1115.04 1217.6 L1114.45 1217.6 L1113.86 1217.6 L1113.28 1217.6 L1112.69 1217.6 L1112.1 1217.6 L1111.52 1217.6 L1110.93 1217.6 L1110.34 1217.6 L1109.76 1217.6 L1109.17 1217.6 L1108.59 1217.6 L1108 1217.6 L1107.41 1217.6 L1106.83 1217.6 L1106.24 1217.6 L1105.65 1217.6 L1105.07 1217.6 L1104.48 1217.6 L1103.89 1217.6 L1103.31 1217.6 L1102.72 1217.6 L1102.14 1217.6 L1101.55 1217.6 L1100.96 1217.6 L1100.38 1217.6 L1099.79 1217.6 L1099.2 1217.6 L1098.62 1217.6 L1098.03 1217.6 L1097.44 1217.6 L1096.86 1217.6 L1096.27 1217.6 L1095.68 1217.6 L1095.1 1217.6 L1094.51 1217.6 L1093.93 1217.6 L1093.34 1217.6 L1092.75 1217.6 L1092.17 1217.6 L1091.58 1217.6 L1090.99 1217.6 L1090.41 1217.6 L1089.82 1217.6 L1089.23 1217.6 L1088.65 1217.6 L1088.06 1217.6 L1087.47 1217.6 L1086.89 1217.6 L1086.3 1217.6 L1085.72 1217.6 L1085.13 1217.6 L1084.54 1217.6 L1083.96 1217.6 L1083.37 1217.6 L1082.78 1217.6 L1082.2 1217.6 L1081.61 1217.6 L1081.02 1217.6 L1080.44 1217.6 L1079.85 1217.6 L1079.26 1217.6 L1078.68 1217.6 L1078.09 1217.6 L1077.51 1217.6 L1076.92 1217.6 L1076.33 1217.6 L1075.75 1217.6 L1075.16 1217.6 L1074.57 1217.6 L1073.99 1217.6 L1073.4 1217.6 L1072.81 1217.6 L1072.23 1217.6 L1071.64 1217.6 L1071.06 1217.6 L1070.47 1217.6 L1069.88 1217.6 L1069.3 1217.6 L1068.71 1217.6 L1068.12 1217.6 L1067.54 1217.6 L1066.95 1217.6 L1066.36 1217.6 L1065.78 1217.6 L1065.19 1217.6 L1064.6 1217.6 L1064.02 1217.6 L1063.43 1217.6 L1062.85 1217.6 L1062.26 1217.6 L1061.67 1217.6 L1061.09 1217.6 L1060.5 1217.6 L1059.91 1217.6 L1059.33 1217.6 L1058.74 1217.6 L1058.15 1217.6 L1057.57 1217.6 L1056.98 1217.6 L1056.39 1217.6 L1055.81 1217.6 L1055.22 1217.6 L1054.64 1217.6 L1054.05 1217.6 L1053.46 1217.6 L1052.88 1217.6 L1052.29 1217.6 L1051.7 1217.6 L1051.12 1217.6 L1050.53 1217.6 L1049.94 1217.6 L1049.36 1217.6 L1048.77 1217.6 L1048.19 1217.6 L1047.6 1217.6 L1047.01 1217.6 L1046.43 1217.6 L1045.84 1217.6 L1045.25 1217.6 L1044.67 1217.6 L1044.08 1217.6 L1043.49 1217.6 L1042.91 1217.6 L1042.32 1217.6 L1041.73 1217.6 L1041.15 1217.6 L1040.56 1217.6 L1039.98 1217.6 L1039.39 1217.6 L1038.8 1217.6 L1038.22 1217.6 L1037.63 1217.6 L1037.04 1217.6 L1036.46 1217.6 L1035.87 1217.6 L1035.28 1217.6 L1034.7 1217.6 L1034.11 1217.6 L1033.52 1217.6 L1032.94 1217.6 L1032.35 1217.6 L1031.77 1217.6 L1031.18 1217.6 L1030.59 1217.6 L1030.01 1217.6 L1029.42 1217.6 L1028.83 1217.6 L1028.25 1217.6 L1027.66 1217.6 L1027.07 1217.6 L1026.49 1217.6 L1025.9 1217.6 L1025.32 1217.6 L1024.73 1217.6 L1024.14 1217.6 L1023.56 1217.6 L1022.97 1217.6 L1022.38 1217.6 L1021.8 1217.6 L1021.21 1217.6 L1020.62 1217.6 L1020.04 1217.6 L1019.45 1217.6 L1018.86 1217.6 L1018.28 1217.6 L1017.69 1217.6 L1017.11 1217.6 L1016.52 1217.6 L1015.93 1217.6 L1015.35 1217.6 L1014.76 1217.6 L1014.17 1217.6 L1013.59 1217.6 L1013 1217.6 L1012.41 1217.6 L1011.83 1217.6 L1011.24 1217.6 L1010.65 1217.6 L1010.07 1217.6 L1009.48 1217.6 L1008.9 1217.6 L1008.31 1217.6 L1007.72 1217.6 L1007.14 1217.6 L1006.55 1217.6 L1005.96 1217.6 L1005.38 1217.6 L1004.79 1217.6 L1004.2 1217.6 L1003.62 1217.6 L1003.03 1217.6 L1002.44 1217.6 L1001.86 1217.6 L1001.27 1217.6 L1000.69 1217.6 L1000.1 1217.6 L999.513 1217.6 L998.926 1217.6 L998.34 1217.6 L997.754 1217.6 L997.167 1217.6 L996.581 1217.6 L995.994 1217.6 L995.408 1217.6 L994.822 1217.6 L994.235 1217.6 L993.649 1217.6 L993.062 1217.6 L992.476 1217.6 L991.889 1217.6 L991.303 1217.6 L990.717 1217.6 L990.13 1217.6 L989.544 1217.6 L988.957 1217.6 L988.371 1217.6 L987.785 1217.6 L987.198 1217.6 L986.612 1217.6 L986.025 1217.6  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.05 986.612,1218.05 987.198,1218.05 987.785,1218.05 988.371,1218.05 988.957,1218.05 989.544,1218.05 990.13,1218.05 990.717,1218.05 991.303,1218.05 991.889,1218.05 992.476,1218.05 993.062,1218.05 993.649,1218.05 994.235,1218.05 994.822,1218.05 995.408,1218.05 995.994,1218.05 996.581,1218.05 997.167,1218.05 997.754,1218.05 998.34,1218.05 998.926,1218.05 999.513,1218.05 1000.1,1218.05 1000.69,1218.05 1001.27,1218.05 1001.86,1218.05 1002.44,1218.05 1003.03,1218.05 1003.62,1218.05 1004.2,1218.05 1004.79,1218.05 1005.38,1218.05 1005.96,1218.05 1006.55,1218.05 1007.14,1218.05 1007.72,1218.05 1008.31,1218.05 1008.9,1218.05 1009.48,1218.05 1010.07,1218.05 1010.65,1218.05 1011.24,1218.05 1011.83,1218.05 1012.41,1218.05 1013,1218.05 1013.59,1218.05 1014.17,1218.05 1014.76,1218.05 1015.35,1218.05 1015.93,1218.05 1016.52,1218.05 1017.11,1218.05 1017.69,1218.05 1018.28,1218.05 1018.86,1218.05 1019.45,1218.05 1020.04,1218.05 1020.62,1218.05 1021.21,1218.05 1021.8,1218.05 1022.38,1218.05 1022.97,1218.05 1023.56,1218.05 1024.14,1218.05 1024.73,1218.05 1025.32,1218.05 1025.9,1218.05 1026.49,1218.05 1027.07,1218.05 1027.66,1218.05 1028.25,1218.05 1028.83,1218.05 1029.42,1218.05 1030.01,1218.05 1030.59,1218.05 1031.18,1218.05 1031.77,1218.05 1032.35,1218.05 1032.94,1218.05 1033.52,1218.05 1034.11,1218.05 1034.7,1218.05 1035.28,1218.05 1035.87,1218.05 1036.46,1218.05 1037.04,1218.05 1037.63,1218.05 1038.22,1218.05 1038.8,1218.05 1039.39,1218.05 1039.98,1218.05 1040.56,1218.05 1041.15,1218.05 1041.73,1218.05 1042.32,1218.05 1042.91,1218.05 1043.49,1218.05 1044.08,1218.05 1044.67,1218.05 1045.25,1218.05 1045.84,1218.05 1046.43,1218.05 1047.01,1218.05 1047.6,1218.05 1048.19,1218.05 1048.77,1218.05 1049.36,1218.05 1049.94,1218.05 1050.53,1218.05 1051.12,1218.05 1051.7,1218.05 1052.29,1218.05 1052.88,1218.05 1053.46,1218.05 1054.05,1218.05 1054.64,1218.05 1055.22,1218.05 1055.81,1218.05 1056.39,1218.05 1056.98,1218.05 1057.57,1218.05 1058.15,1218.05 1058.74,1218.05 1059.33,1218.05 1059.91,1218.05 1060.5,1218.05 1061.09,1218.05 1061.67,1218.05 1062.26,1218.05 1062.85,1218.05 1063.43,1218.05 1064.02,1218.05 1064.6,1218.05 1065.19,1218.05 1065.78,1218.05 1066.36,1218.05 1066.95,1218.05 1067.54,1218.05 1068.12,1218.05 1068.71,1218.05 1069.3,1218.05 1069.88,1218.05 1070.47,1218.05 1071.06,1218.05 1071.64,1218.05 1072.23,1218.05 1072.81,1218.05 1073.4,1218.05 1073.99,1218.05 1074.57,1218.05 1075.16,1218.05 1075.75,1218.05 1076.33,1218.05 1076.92,1218.05 1077.51,1218.05 1078.09,1218.05 1078.68,1218.05 1079.26,1218.05 1079.85,1218.05 1080.44,1218.05 1081.02,1218.05 1081.61,1218.05 1082.2,1218.05 1082.78,1218.05 1083.37,1218.05 1083.96,1218.05 1084.54,1218.05 1085.13,1218.05 1085.72,1218.05 1086.3,1218.05 1086.89,1218.05 1087.47,1218.05 1088.06,1218.05 1088.65,1218.05 1089.23,1218.05 1089.82,1218.05 1090.41,1218.05 1090.99,1218.05 1091.58,1218.05 1092.17,1218.05 1092.75,1218.05 1093.34,1218.05 1093.93,1218.05 1094.51,1218.05 1095.1,1218.05 1095.68,1218.05 1096.27,1218.05 1096.86,1218.05 1097.44,1218.05 1098.03,1218.05 1098.62,1218.05 1099.2,1218.05 1099.79,1218.05 1100.38,1218.05 1100.96,1218.05 1101.55,1218.05 1102.14,1218.05 1102.72,1218.05 1103.31,1218.05 1103.89,1218.05 1104.48,1218.05 1105.07,1218.05 1105.65,1218.05 1106.24,1218.05 1106.83,1218.05 1107.41,1218.05 1108,1218.05 1108.59,1218.05 1109.17,1218.05 1109.76,1218.05 1110.34,1218.05 1110.93,1218.05 1111.52,1218.05 1112.1,1218.05 1112.69,1218.05 1113.28,1218.05 1113.86,1218.05 1114.45,1218.05 1115.04,1218.05 1115.62,1218.05 1116.21,1218.05 1116.8,1218.05 1117.38,1218.05 1117.97,1218.05 1118.55,1218.05 1119.14,1218.05 1119.73,1218.05 1120.31,1218.05 1120.9,1218.05 1121.49,1218.05 1122.07,1218.05 1122.66,1218.05 1123.25,1218.05 1123.83,1218.05 1124.42,1218.05 1125.01,1218.05 1125.59,1218.05 1126.18,1218.05 1126.76,1218.05 1127.35,1218.05 1127.94,1218.05 1128.52,1218.05 1129.11,1218.05 1129.7,1218.05 1130.28,1218.05 1130.87,1218.05 1131.46,1218.05 1132.04,1218.05 1132.63,1218.05 1133.21,1218.05 1133.8,1218.05 1134.39,1218.05 1134.97,1218.05 1135.56,1218.05 1136.15,1218.05 1136.73,1218.05 1137.32,1218.05 1137.91,1218.05 1138.49,1218.05 1139.08,1218.05 1139.67,1218.05 1140.25,1218.05 1140.84,1218.05 1141.42,1218.05 1142.01,1218.05 1142.6,1218.05 1143.18,1218.05 1143.77,1218.05 1144.36,1218.05 1144.94,1218.05 1145.53,1218.05 1146.12,1218.05 1146.7,1218.05 1147.29,1218.05 1147.88,1218.05 1148.46,1218.05 1149.05,1218.05 1149.63,1218.05 1150.22,1218.05 1150.81,1218.05 1151.39,1218.05 1151.98,1218.05 1152.57,1218.05 1153.15,1218.05 1153.74,1218.05 1154.33,1218.05 1154.91,1218.05 1155.5,1218.05 1156.09,1218.05 1156.67,1218.05 1157.26,1218.05 1157.84,1218.05 1158.43,1218.05 1159.02,1218.05 1159.6,1218.05 1160.19,1218.05 1160.78,1218.05 1161.36,1218.05 1161.95,1218.05 1162.54,1218.05 1163.12,1218.05 1163.71,1218.05 1164.29,1218.05 1164.88,1218.05 1165.47,1218.05 1166.05,1218.05 1166.64,1218.05 1167.23,1218.05 1167.81,1218.05 1168.4,1218.05 1168.99,1218.05 1169.57,1218.05 1170.16,1218.05 1170.75,1218.05 1171.33,1218.05 1171.92,1218.05 1172.5,1218.05 1173.09,1218.05 1173.68,1218.05 1174.26,1218.05 1174.85,1218.05 1175.44,1218.05 1176.02,1218.05 1176.61,1218.05 1177.2,1218.05 1177.78,1218.05 1178.37,1218.05 1178.96,1218.05 1179.54,1218.05 1180.13,1218.05 1180.71,1218.05 1181.3,1218.05 1181.89,1218.05 1182.47,1218.05 1183.06,1218.05 1183.65,1218.05 1184.23,1218.05 1184.82,1218.05 1185.41,1218.05 1185.99,1218.05 1186.58,1218.05 1187.16,1218.05 1187.75,1218.05 1188.34,1218.05 1188.92,1218.05 1189.51,1218.05 1190.1,1218.05 1190.68,1218.05 1191.27,1218.05 1191.86,1218.05 1192.44,1218.05 1193.03,1218.05 1193.62,1218.05 1194.2,1218.05 1194.79,1218.05 1195.37,1218.05 1195.96,1218.05 1196.55,1218.05 1197.13,1218.05 1197.72,1218.05 1198.31,1218.05 1198.89,1218.05 1199.48,1218.05 1200.07,1218.05 1200.65,1218.05 1201.24,1218.05 1201.83,1218.05 1202.41,1218.05 1203,1218.05 1203.58,1218.05 1204.17,1218.05 1204.76,1218.05 1205.34,1218.05 1205.93,1218.05 1206.52,1218.05 1207.1,1218.05 1207.69,1218.05 1208.28,1218.05 1208.86,1218.05 1209.45,1218.05 1210.03,1218.05 1210.62,1218.05 1211.21,1218.05 1211.79,1218.05 1212.38,1218.05 1212.97,1218.05 1213.55,1218.05 1214.14,1218.05 1214.73,1218.05 1215.31,1218.05 1215.9,1218.05 1216.49,1218.05 1217.07,1218.05 1217.66,1218.05 1218.24,1218.05 1218.83,1218.05 1219.42,1218.05 1220,1218.05 1220.59,1218.05 1221.18,1218.05 1221.76,1218.05 1222.35,1218.05 1222.94,1218.05 1223.52,1218.05 1224.11,1218.05 1224.7,1218.05 1225.28,1218.05 1225.87,1218.05 1226.45,1218.05 1227.04,1218.05 1227.63,1218.05 1228.21,1218.05 1228.8,1218.05 1229.39,1218.05 1229.97,1218.05 1230.56,1218.05 1231.15,1218.05 1231.73,1218.05 1232.32,1218.05 1232.91,1218.05 1233.49,1218.05 1234.08,1218.05 1234.66,1218.05 1235.25,1218.05 1235.84,1218.05 1236.42,1218.05 1237.01,1218.05 1237.6,1218.05 1238.18,1218.05 1238.77,1218.05 1239.36,1218.05 1239.94,1218.05 1240.53,1218.05 1241.11,1218.05 1241.7,1218.05 1242.29,1218.05 1242.87,1218.05 1243.46,1218.05 1244.05,1218.05 1244.63,1218.05 1245.22,1218.05 1245.81,1218.05 1246.39,1218.05 1246.98,1218.05 1247.57,1218.05 1248.15,1218.05 1248.74,1218.05 1249.32,1218.05 1249.91,1218.05 1250.5,1218.05 1251.08,1218.05 1251.67,1218.05 1252.26,1218.05 1252.84,1218.05 1253.43,1218.05 1254.02,1218.05 1254.6,1218.05 1255.19,1218.05 1255.78,1218.05 1256.36,1218.05 1256.95,1218.05 1257.53,1218.05 1258.12,1218.05 1258.71,1218.05 1259.29,1218.05 1259.88,1218.05 1260.47,1218.05 1261.05,1218.05 1261.64,1218.05 1262.23,1218.05 1262.81,1218.05 1263.4,1218.05 1263.98,1218.05 1264.57,1218.05 1265.16,1218.05 1265.74,1218.05 1266.33,1218.05 1266.92,1218.05 1267.5,1218.05 1268.09,1218.05 1268.68,1218.05 1269.26,1218.05 1269.85,1218.05 1270.44,1218.05 1271.02,1218.05 1271.61,1218.05 1272.19,1218.05 1272.78,1218.05 1273.37,1218.05 1273.95,1218.05 1274.54,1218.05 1275.13,1218.05 1275.71,1218.05 1276.3,1218.05 1276.89,1218.05 1277.47,1218.05 1278.06,1218.05 1278.65,1218.05 1279.23,1218.05 1279.82,1218.05 1280.4,1218.05 1280.99,1218.05 1281.58,1218.05 1282.16,1218.05 1282.75,1218.05 1283.34,1218.05 1283.92,1218.05 1284.51,1218.05 1285.1,1218.05 1285.68,1218.05 1286.27,1218.05 1286.86,1218.05 1287.44,1218.05 1288.03,1218.05 1288.61,1218.05 1289.2,1218.05 1289.79,1218.05 1290.37,1218.05 1290.96,1218.05 1291.55,1218.05 1292.13,1218.05 1292.72,1218.05 1293.31,1218.05 1293.89,1218.05 1294.48,1218.05 1295.06,1218.05 1295.65,1218.05 1296.24,1218.05 1296.82,1218.05 1297.41,1218.05 1298,1218.05 1298.58,1218.05 1299.17,1218.05 1299.76,1218.05 1300.34,1218.05 1300.93,1218.05 1301.52,1218.05 1302.1,1218.05 1302.69,1218.05 1303.27,1218.05 1303.86,1218.05 1304.45,1218.05 1305.03,1218.05 1305.62,1218.05 1306.21,1218.05 1306.79,1218.05 1307.38,1218.05 1307.97,1218.05 1308.55,1218.05 1309.14,1218.05 1309.73,1218.05 1310.31,1218.05 1310.9,1218.05 1311.48,1218.05 1312.07,1218.05 1312.66,1218.05 1313.24,1218.05 1313.83,1218.05 1314.42,1218.05 1315,1218.05 1315.59,1218.05 1316.18,1218.05 1316.76,1218.05 1317.35,1218.05 1317.93,1218.05 1318.52,1218.05 1319.11,1218.05 1319.69,1218.05 1320.28,1218.05 1320.87,1218.05 1321.45,1218.05 1322.04,1218.05 1322.63,1218.05 1323.21,1218.05 1323.8,1218.05 1324.39,1218.05 1324.97,1218.05 1325.56,1218.05 1326.14,1218.05 1326.73,1218.05 1327.32,1218.05 1327.9,1218.05 1328.49,1218.05 1329.08,1218.05 1329.66,1218.05 1330.25,1218.05 1330.84,1218.05 1331.42,1218.05 1332.01,1218.05 1332.6,1218.05 1333.18,1218.05 1333.77,1218.05 1334.35,1218.05 1334.94,1218.05 1335.53,1218.05 1336.11,1218.05 1336.7,1218.05 1337.29,1218.05 1337.87,1218.05 1338.46,1218.05 1339.05,1218.05 1339.63,1218.05 1340.22,1218.05 1340.8,1218.05 1341.39,1218.05 1341.98,1218.05 1342.56,1218.05 1343.15,1218.05 1343.74,1218.05 1344.32,1218.05 1344.91,1218.05 1345.5,1218.05 1346.08,1218.05 1346.67,1218.05 1347.26,1218.05 1347.84,1218.05 1348.43,1218.05 1349.01,1218.05 1349.6,1218.05 1350.19,1218.05 1350.77,1218.05 1351.36,1218.05 1351.95,1218.05 1352.53,1218.05 1353.12,1218.05 1353.71,1218.05 1354.29,1218.05 1354.88,1218.05 1355.47,1218.05 1356.05,1218.05 1356.64,1218.05 1357.22,1218.05 1357.81,1218.05 1358.4,1218.05 1358.98,1218.05 1359.57,1218.05 1360.16,1218.05 1360.74,1218.05 1361.33,1218.05 1361.92,1218.05 1362.5,1218.05 1363.09,1218.05 1363.68,1218.05 1364.26,1218.05 1364.85,1218.05 1365.43,1218.05 1366.02,1218.05 1366.61,1218.05 1367.19,1218.05 1367.78,1218.05 1368.37,1218.05 1368.95,1218.05 1369.54,1218.05 1370.13,1218.05 1370.71,1218.05 1371.3,1218.05 1371.88,1218.05 1372.47,1218.05 1373.06,1218.05 1373.64,1218.05 1374.23,1218.05 1374.82,1218.05 1375.4,1218.05 1375.99,1218.05 1376.58,1218.05 1377.16,1218.05 1377.75,1218.05 1378.34,1218.05 1378.92,1218.05 1379.51,1218.05 1380.09,1218.05 1380.68,1218.05 1381.27,1218.05 1381.85,1218.05 1382.44,1218.05 1383.03,1218.05 1383.61,1218.05 1384.2,1218.05 1384.79,1218.05 1385.37,1218.05 1385.96,1218.05 1386.55,1218.05 1387.13,1218.05 1387.72,1218.05 1388.3,1218.05 1388.89,1218.05 1389.48,1218.05 1390.06,1218.05 1390.65,1218.05 1391.24,1218.05 1391.82,1218.05 1392.41,1218.05 1393,1218.05 1393.58,1218.05 1394.17,1218.05 1394.75,1218.05 1395.34,1218.05 1395.93,1218.05 1396.51,1218.05 1397.1,1218.05 1397.69,1218.05 1398.27,1218.05 1398.86,1218.05 1399.45,1218.05 1400.03,1218.05 1400.62,1218.05 1401.21,1218.05 1401.79,1218.05 1402.38,1218.05 1402.96,1218.05 1403.55,1218.05 1404.14,1218.05 1404.72,1218.05 1405.31,1218.05 1405.9,1218.05 1406.48,1218.05 1407.07,1218.05 1407.66,1218.05 1408.24,1218.05 1408.83,1218.05 1409.42,1218.05 1410,1218.05 1410.59,1218.05 1411.17,1218.05 1411.76,1218.05 1412.35,1218.05 1412.93,1218.05 1413.52,1218.05 1414.11,1218.05 1414.69,1218.05 1415.28,1218.05 1415.87,1218.05 1416.45,1218.05 1417.04,1218.05 1417.63,1218.05 1418.21,1218.05 1418.8,1218.05 1419.38,1218.05 1419.97,1218.05 1420.56,1218.05 1421.14,1218.05 1421.73,1218.05 1422.32,1218.05 1422.9,1218.05 1423.49,1218.05 1424.08,1218.05 1424.66,1218.05 1425.25,1218.05 1425.83,1218.05 1426.42,1218.05 1427.01,1218.05 1427.59,1218.05 1428.18,1218.05 1428.77,1218.05 1429.35,1218.05 1429.94,1218.05 1430.53,1218.05 1431.11,1218.05 1431.7,1218.05 1432.29,1218.05 1432.87,1218.05 1433.46,1218.05 1434.04,1218.05 1434.63,1218.05 1435.22,1218.05 1435.8,1218.05 1436.39,1218.05 1436.98,1218.05 1437.56,1218.05 1438.15,1218.05 1438.74,1218.05 1439.32,1218.05 1439.91,1218.05 1440.5,1218.05 1441.08,1218.05 1441.67,1218.05 1442.25,1218.05 1442.84,1218.05 1443.43,1218.05 1444.01,1218.05 1444.6,1218.05 1445.19,1218.05 1445.77,1218.05 1446.36,1218.05 1446.95,1218.05 1447.53,1218.05 1448.12,1218.05 1448.7,1218.05 1449.29,1218.05 1449.88,1218.05 1450.46,1218.05 1451.05,1218.05 1451.64,1218.05 1452.22,1218.05 1452.81,1218.05 1453.4,1218.05 1453.98,1218.05 1454.57,1218.05 1455.16,1218.05 1455.74,1218.05 1456.33,1218.05 1456.91,1218.05 1457.5,1218.05 1458.09,1218.05 1458.67,1218.05 1459.26,1218.05 1459.85,1218.05 1460.43,1218.05 1461.02,1218.05 1461.61,1218.05 1462.19,1218.05 1462.78,1218.05 1463.37,1218.05 1463.95,1218.05 1464.54,1218.05 1465.12,1218.05 1465.71,1218.05 1466.3,1218.05 1466.88,1218.05 1467.47,1218.05 1468.06,1218.05 1468.64,1218.05 1469.23,1218.05 1469.82,1218.05 1470.4,1218.05 1470.99,1218.05 1471.57,1218.05 1472.16,1218.05 1472.75,1218.05 1473.33,1218.05 1473.92,1218.05 1474.51,1218.05 1475.09,1218.05 1475.68,1218.05 1476.27,1218.05 1476.85,1218.05 1477.44,1218.05 1478.03,1218.05 1478.61,1218.05 1479.2,1218.05 1479.78,1218.05 1480.37,1218.05 1480.96,1218.05 1481.54,1218.05 1482.13,1218.05 1482.72,1218.05 1483.3,1218.05 1483.89,1218.05 1484.48,1218.05 1485.06,1218.05 1485.65,1218.05 1486.24,1218.05 1486.82,1218.05 1487.41,1218.05 1487.99,1218.05 1488.58,1218.05 1489.17,1218.05 1489.75,1218.05 1490.34,1218.05 1490.93,1218.05 1491.51,1218.05 1492.1,1218.05 1492.69,1218.05 1493.27,1218.05 1493.86,1218.05 1494.45,1218.05 1495.03,1218.05 1495.62,1218.05 1496.2,1218.05 1496.79,1218.05 1497.38,1218.05 1497.96,1218.05 1498.55,1218.05 1499.14,1218.05 1499.72,1218.05 1500.31,1218.05 1500.9,1218.05 1501.48,1218.05 1502.07,1218.05 1502.65,1218.05 1503.24,1218.05 1503.83,1218.05 1504.41,1218.05 1505,1218.05 1505.59,1218.05 1506.17,1218.05 1506.76,1218.05 1507.35,1218.05 1507.93,1218.05 1508.52,1218.05 1509.11,1218.05 1509.69,1218.05 1510.28,1218.05 1510.86,1218.05 1511.45,1218.05 1512.04,1218.05 1512.62,1218.05 1513.21,1218.05 1513.8,1218.05 1514.38,1218.05 1514.97,1218.05 1515.56,1218.05 1516.14,1218.05 1516.73,1218.05 1517.32,1218.05 1517.9,1218.05 1518.49,1218.05 1519.07,1218.05 1519.66,1218.05 1520.25,1218.05 1520.83,1218.05 1521.42,1218.05 1522.01,1218.05 1522.59,1218.05 1523.18,1218.05 1523.77,1218.05 1524.35,1218.05 1524.94,1218.05 1525.52,1218.05 1526.11,1218.05 1526.7,1218.05 1527.28,1218.05 1527.87,1218.05 1528.46,1218.05 1529.04,1218.05 1529.63,1218.05 1530.22,1218.05 1530.8,1218.05 1531.39,1218.05 1531.98,1218.05 1532.56,1218.05 1533.15,1218.05 1533.73,1218.05 1534.32,1218.05 1534.91,1218.05 1535.49,1218.05 1536.08,1218.05 1536.67,1218.05 1537.25,1218.05 1537.84,1218.05 1538.43,1218.05 1539.01,1218.05 1539.6,1218.05 1540.19,1218.05 1540.77,1218.05 1541.36,1218.05 1541.94,1218.05 1542.53,1218.05 1543.12,1218.05 1543.7,1218.05 1544.29,1218.05 1544.88,1218.05 1545.46,1218.05 1546.05,1218.05 1546.64,1218.05 1547.22,1218.05 1547.81,1218.05 1548.4,1218.05 1548.98,1218.05 1549.57,1218.05 1550.15,1218.05 1550.74,1218.05 1551.33,1218.05 1551.91,1218.05 1552.5,1218.05 1553.09,1218.05 1553.67,1218.05 1554.26,1218.05 1554.85,1218.05 1555.43,1218.05 1556.02,1218.05 1556.6,1218.05 1557.19,1218.05 1557.78,1218.05 1558.36,1218.05 1558.95,1218.05 1559.54,1218.05 1560.12,1218.05 1560.71,1218.05 1561.3,1218.05 1561.88,1218.05 1562.47,1218.05 1563.06,1218.05 1563.64,1218.05 1564.23,1218.05 1564.81,1218.05 1565.4,1218.05 1565.99,1218.05 1566.57,1218.05 1567.16,1218.05 1567.75,1218.05 1568.33,1218.05 1568.92,1218.05 1569.51,1218.05 1570.09,1218.05 1570.68,1218.05 1571.27,1218.05 1571.85,1218.05 1572.44,1218.05 1573.02,1218.05 1573.61,1218.05 1574.2,1218.05 1574.78,1218.05 1575.37,1218.05 1575.96,1218.05 1576.54,1218.05 1577.13,1218.05 1577.72,1218.05 1578.3,1218.05 1578.89,1218.05 1579.47,1218.05 1580.06,1218.05 1580.65,1218.05 1581.23,1218.05 1581.82,1218.05 1582.41,1218.05 1582.99,1218.05 1583.58,1218.05 1584.17,1218.05 1584.75,1218.05 1585.34,1218.05 1585.93,1218.05 1586.51,1218.05 1587.1,1218.05 1587.68,1218.05 1588.27,1218.05 1588.86,1218.05 1589.44,1218.05 1590.03,1218.05 1590.62,1218.05 1591.2,1218.05 1591.79,1218.05 1592.38,1218.05 1592.96,1218.05 1593.55,1218.05 1594.14,1218.05 1594.72,1218.05 1595.31,1218.05 1595.89,1218.05 1596.48,1218.05 1597.07,1218.05 1597.65,1218.05 1598.24,1218.05 1598.83,1218.05 1599.41,1218.05 1600,1218.05 1600.59,1218.05 1601.17,1218.05 1601.76,1218.05 1602.34,1218.05 1602.93,1218.05 1603.52,1218.05 1604.1,1218.05 1604.69,1218.05 1605.28,1218.05 1605.86,1218.05 1606.45,1218.05 1607.04,1218.05 1607.62,1218.05 1608.21,1218.05 1608.8,1218.05 1609.38,1218.05 1609.97,1218.05 1610.55,1218.05 1611.14,1218.05 1611.73,1218.05 1612.31,1218.05 1612.9,1218.05 1613.49,1218.05 1614.07,1218.05 1614.66,1218.05 1615.25,1218.05 1615.83,1218.05 1616.42,1218.05 1617.01,1218.05 1617.59,1218.05 1618.18,1218.05 1618.76,1218.05 1619.35,1218.05 1619.94,1218.05 1620.52,1218.05 1621.11,1218.05 1621.7,1218.05 1622.28,1218.05 1622.87,1218.05 1623.46,1218.05 1624.04,1218.05 1624.63,1218.05 1625.22,1218.05 1625.8,1218.05 1626.39,1218.05 1626.97,1218.05 1627.56,1218.05 1628.15,1218.05 1628.73,1218.05 1629.32,1218.05 1629.91,1218.05 1630.49,1218.05 1631.08,1218.05 1631.67,1218.05 1632.25,1218.05 1632.84,1218.05 1633.42,1218.05 1634.01,1218.05 1634.6,1218.05 1635.18,1218.05 1635.77,1218.05 1636.36,1218.05 1636.94,1218.05 1637.53,1218.05 1638.12,1218.05 1638.7,1218.05 1639.29,1218.05 1639.88,1218.05 1640.46,1218.05 1641.05,1218.05 1641.63,1218.05 1642.22,1218.05 1642.81,1218.05 1643.39,1218.05 1643.98,1218.05 1644.57,1218.05 1645.15,1218.05 1645.74,1218.05 1646.33,1218.05 1646.91,1218.05 1647.5,1218.05 1648.09,1218.05 1648.67,1218.05 1649.26,1218.05 1649.84,1218.05 1650.43,1218.05 1651.02,1218.05 1651.6,1218.05 1652.19,1218.05 1652.78,1218.05 1653.36,1218.05 1653.95,1218.05 1654.54,1218.05 1655.12,1218.05 1655.71,1218.05 1656.29,1218.05 1656.88,1218.05 1657.47,1218.05 1658.05,1218.05 1658.64,1218.05 1659.23,1218.05 1659.81,1218.05 1660.4,1218.05 1660.99,1218.05 1661.57,1218.05 1662.16,1218.05 1662.75,1218.05 1663.33,1218.05 1663.92,1218.05 1664.5,1218.05 1665.09,1218.05 1665.68,1218.05 1666.26,1218.05 1666.85,1218.05 1667.44,1218.05 1668.02,1218.05 1668.61,1218.05 1669.2,1218.05 1669.78,1218.05 1670.37,1218.05 1670.96,1218.05 1671.54,1218.05 1672.13,1218.05 1672.71,1218.05 1673.3,1218.05 1673.89,1218.05 1674.47,1218.05 1675.06,1218.05 1675.65,1218.05 1676.23,1218.05 1676.82,1218.05 1677.41,1218.05 1677.99,1218.05 1678.58,1218.05 1679.17,1218.05 1679.75,1218.05 1680.34,1218.05 1680.92,1218.05 1681.51,1218.05 1682.1,1218.05 1682.68,1218.05 1683.27,1218.05 1683.86,1218.05 1684.44,1218.05 1685.03,1218.05 1685.62,1218.05 1686.2,1218.05 1686.79,1218.05 1687.37,1218.05 1687.96,1218.05 1688.55,1218.05 1689.13,1218.05 1689.72,1218.05 1690.31,1218.05 1690.89,1218.05 1691.48,1218.05 1692.07,1218.05 1692.65,1218.05 1693.24,1218.05 1693.83,1218.05 1694.41,1218.05 1695,1218.05 1695.58,1218.05 1696.17,1218.05 1696.76,1218.05 1697.34,1218.05 1697.93,1218.05 1698.52,1218.05 1699.1,1218.05 1699.69,1218.05 1700.28,1218.05 1700.86,1218.05 1701.45,1218.05 1702.04,1218.05 1702.62,1218.05 1703.21,1218.05 1703.79,1218.05 1704.38,1218.05 1704.97,1218.05 1705.55,1218.05 1706.14,1218.05 1706.73,1218.05 1707.31,1218.05 1707.9,1218.05 1708.49,1218.05 1709.07,1218.05 1709.66,1218.05 1710.24,1218.05 1710.83,1218.05 1711.42,1218.05 1712,1218.05 1712.59,1218.05 1713.18,1218.05 1713.76,1218.05 1714.35,1218.05 1714.94,1218.05 1715.52,1218.05 1716.11,1218.05 1716.7,1218.05 1717.28,1218.05 1717.87,1218.05 1718.45,1218.05 1719.04,1218.05 1719.63,1218.05 1720.21,1218.05 1720.8,1218.05 1721.39,1218.05 1721.97,1218.05 1722.56,1218.05 1723.15,1218.05 1723.73,1218.05 1724.32,1218.05 1724.91,1218.05 1725.49,1218.05 1726.08,1218.05 1726.66,1218.05 1727.25,1218.05 1727.84,1218.05 1728.42,1218.05 1729.01,1218.05 1729.6,1218.05 1730.18,1218.05 1730.77,1218.05 1731.36,1218.05 1731.94,1218.05 1732.53,1218.05 1733.11,1218.05 1733.7,1218.05 1734.29,1218.05 1734.87,1218.05 1735.46,1218.05 1736.05,1218.05 1736.63,1218.05 1737.22,1218.05 1737.81,1218.05 1738.39,1218.05 1738.98,1218.05 1739.57,1218.05 1740.15,1218.05 1740.74,1218.05 1741.32,1218.05 1741.91,1218.05 1742.5,1218.05 1743.08,1218.05 1743.67,1218.05 1744.26,1218.05 1744.84,1218.05 1745.43,1218.05 1746.02,1218.05 1746.6,1218.05 1747.19,1218.05 1747.78,1218.05 1748.36,1218.05 1748.95,1218.05 1749.53,1218.05 1750.12,1218.05 1750.71,1218.05 1751.29,1218.05 1751.88,1218.05 1752.47,1218.05 1753.05,1218.05 1753.64,1218.05 1754.23,1218.05 1754.81,1218.05 1755.4,1218.05 1755.99,1218.05 1756.57,1218.05 1757.16,1218.05 1757.74,1218.05 1758.33,1218.05 1758.92,1218.05 1759.5,1218.05 1760.09,1218.05 1760.68,1218.05 1761.26,1218.05 1761.85,1218.05 1762.44,1218.05 1763.02,1218.05 1763.61,1218.05 1764.19,1218.05 1764.78,1218.05 1765.37,1218.05 1765.95,1218.05 1766.54,1218.05 1767.13,1218.05 1767.71,1218.05 1768.3,1218.05 1768.89,1218.05 1769.47,1218.05 1770.06,1218.05 1770.65,1218.05 1771.23,1218.05 1771.82,1218.05 1772.4,1218.05 1772.99,1218.05 1773.58,1218.05 1774.16,1218.05 1774.75,1218.05 1775.34,1218.05 1775.92,1218.05 1776.51,1218.05 1777.1,1218.05 1777.68,1218.05 1778.27,1218.05 1778.86,1218.05 1779.44,1218.05 1780.03,1218.05 1780.61,1218.05 1781.2,1218.05 1781.79,1218.05 1782.37,1218.05 1782.96,1218.05 1783.55,1218.05 1784.13,1218.05 1784.72,1218.05 1785.31,1218.05 1785.89,1218.05 1786.48,1218.05 1787.06,1218.05 1787.65,1218.05 1788.24,1218.05 1788.82,1218.05 1789.41,1218.05 1790,1218.05 1790.58,1218.05 1791.17,1218.05 1791.76,1218.05 1792.34,1218.05 1792.93,1218.05 1793.52,1218.05 1794.1,1218.05 1794.69,1218.05 1795.27,1218.05 1795.86,1218.05 1796.45,1218.05 1797.03,1218.05 1797.62,1218.05 1798.21,1218.05 1798.79,1218.05 1799.38,1218.05 1799.97,1218.05 1800.55,1218.05 1801.14,1218.05 1801.73,1218.05 1802.31,1218.05 1802.9,1218.05 1803.48,1218.05 1804.07,1218.05 1804.66,1218.05 1805.24,1218.05 1805.83,1218.05 1806.42,1218.05 1807,1218.05 1807.59,1218.05 1808.18,1218.05 1808.76,1218.05 1809.35,1218.05 1809.94,1218.05 1810.52,1218.05 1811.11,1218.05 1811.69,1218.05 1812.28,1218.05 1812.87,1218.05 1813.45,1218.05 1814.04,1218.05 1814.63,1218.05 1815.21,1218.05 1815.8,1218.05 1816.39,1218.05 1816.97,1218.05 1817.56,1218.05 1818.14,1218.05 1818.73,1218.05 1819.32,1218.05 1819.9,1218.05 1820.49,1218.05 1821.08,1218.05 1821.66,1218.05 1822.25,1218.05 1822.84,1218.05 1823.42,1218.05 1824.01,1218.05 1824.6,1218.05 1825.18,1218.05 1825.77,1218.05 1826.35,1218.05 1826.94,1218.05 1827.53,1218.05 1828.11,1218.05 1828.7,1218.05 1829.29,1218.05 1829.87,1218.05 1830.46,1218.05 1831.05,1218.05 1831.63,1218.05 1832.22,1218.05 1832.81,1218.05 1833.39,1218.05 1833.98,1218.05 1834.56,1218.05 1835.15,1218.05 1835.74,1218.05 1836.32,1218.05 1836.91,1218.05 1837.5,1218.05 1838.08,1218.05 1838.67,1218.05 1839.26,1218.05 1839.84,1218.05 1840.43,1218.05 1841.01,1218.05 1841.6,1218.05 1842.19,1218.05 1842.77,1218.05 1843.36,1218.05 1843.95,1218.05 1844.53,1218.05 1845.12,1218.05 1845.71,1218.05 1846.29,1218.05 1846.88,1218.05 1847.47,1218.05 1848.05,1218.05 1848.64,1218.05 1849.22,1218.05 1849.81,1218.05 1850.4,1218.05 1850.98,1218.05 1851.57,1218.05 1852.16,1218.05 1852.74,1218.05 1853.33,1218.05 1853.92,1218.05 1854.5,1218.05 1855.09,1218.05 1855.68,1218.05 1856.26,1218.05 1856.85,1218.05 1857.43,1218.05 1858.02,1218.05 1858.61,1218.05 1859.19,1218.05 1859.78,1218.05 1860.37,1218.05 1860.95,1218.05 1861.54,1218.05 1862.13,1218.05 1862.71,1218.05 1863.3,1218.05 1863.88,1218.05 1864.47,1218.05 1865.06,1218.05 1865.64,1218.05 1866.23,1218.05 1866.82,1218.05 1867.4,1218.05 1867.99,1218.05 1868.58,1218.05 1869.16,1218.05 1869.75,1218.05 1870.34,1218.05 1870.92,1218.05 1871.51,1218.05 1872.09,1218.05 1872.68,1218.05 1873.27,1218.05 1873.85,1218.05 1874.44,1218.05 1875.03,1218.05 1875.61,1218.05 1876.2,1218.05 1876.79,1218.05 1877.37,1218.05 1877.96,1218.05 1878.55,1218.05 1879.13,1218.05 1879.72,1218.05 1880.3,1218.05 1880.89,1218.05 1881.48,1218.05 1882.06,1218.05 1882.65,1218.05 1883.24,1218.05 1883.82,1218.05 1884.41,1218.05 1885,1218.05 1885.58,1218.05 1886.17,1218.05 1886.76,1218.05 1887.34,1218.05 1887.93,1218.05 1888.51,1218.05 1889.1,1218.05 1889.69,1218.05 1890.27,1218.05 1890.86,1218.05 1891.45,1218.05 1892.03,1218.05 1892.62,1218.05 1893.21,1218.05 1893.79,1218.05 1894.38,1218.05 1894.96,1218.05 1895.55,1218.05 1896.14,1218.05 1896.72,1218.05 1897.31,1218.05 1897.9,1218.05 1898.48,1218.05 1899.07,1218.05 1899.66,1218.05 1900.24,1218.05 1900.83,1218.05 1901.42,1218.05 1902,1218.05 1902.59,1218.05 1903.17,1218.05 1903.76,1218.05 1904.35,1218.05 1904.93,1218.05 1905.52,1218.05 1906.11,1218.05 1906.69,1218.05 1907.28,1218.05 1907.87,1218.05 1908.45,1218.05 1909.04,1218.05 1909.63,1218.05 1910.21,1218.05 1910.8,1218.05 1911.38,1218.05 1911.97,1218.05 1912.56,1218.05 1913.14,1218.05 1913.73,1218.05 1914.32,1218.05 1914.9,1218.05 1915.49,1218.05 1916.08,1218.05 1916.66,1218.05 1917.25,1218.05 1917.83,1218.05 1918.42,1218.05 1919.01,1218.05 1919.59,1218.05 1920.18,1218.05 1920.77,1218.05 1921.35,1218.05 1921.94,1218.05 1922.53,1218.05 1923.11,1218.05 1923.7,1218.05 1924.29,1218.05 1924.87,1218.05 1925.46,1218.05 1926.04,1218.05 1926.63,1218.05 1927.22,1218.05 1927.8,1218.05 1928.39,1218.05 1928.98,1218.05 1929.56,1218.05 1930.15,1218.05 1930.74,1218.05 1931.32,1218.05 1931.91,1218.05 1932.5,1218.05 1933.08,1218.05 1933.67,1218.05 1934.25,1218.05 1934.84,1218.05 1935.43,1218.05 1936.01,1218.05 1936.6,1218.05 1937.19,1218.05 1937.77,1218.05 1938.36,1218.05 1938.95,1218.05 1939.53,1218.05 1940.12,1218.05 1940.71,1218.05 1941.29,1218.05 1941.88,1218.05 1942.46,1218.05 1943.05,1218.05 1943.64,1218.05 1944.22,1218.05 1944.81,1218.05 1945.4,1218.05 1945.98,1218.05 1946.57,1218.05 1947.16,1218.05 1947.74,1218.05 1948.33,1218.05 1948.91,1218.05 1949.5,1218.05 1950.09,1218.05 1950.67,1218.05 1951.26,1218.05 1951.85,1218.05 1952.43,1218.05 1953.02,1218.05 1953.61,1218.05 1954.19,1218.05 1954.78,1218.05 1955.37,1218.05 1955.95,1218.05 1956.54,1218.05 1957.12,1218.05 1957.71,1218.05 1958.3,1218.05 1958.88,1218.05 1959.47,1218.05 1960.06,1218.05 1960.64,1218.05 1961.23,1218.05 1961.82,1218.05 1962.4,1218.05 1962.99,1218.05 1963.58,1218.05 1964.16,1218.05 1964.75,1218.05 1965.33,1218.05 1965.92,1218.05 1966.51,1218.05 1967.09,1218.05 1967.68,1218.05 1968.27,1218.05 1968.85,1218.05 1969.44,1218.05 1970.03,1218.05 1970.61,1218.05 1971.2,1218.05 1971.78,1218.05 1972.37,1218.05 1972.96,1218.05 1973.54,1218.05 1974.13,1218.05 1974.72,1218.05 1975.3,1218.05 1975.89,1218.05 1976.48,1218.05 1977.06,1218.05 1977.65,1218.05 1978.24,1218.05 1978.82,1218.05 1979.41,1218.05 1979.99,1218.05 1980.58,1218.05 1981.17,1218.05 1981.75,1218.05 1982.34,1218.05 1982.93,1218.05 1983.51,1218.05 1984.1,1218.05 1984.69,1218.05 1985.27,1218.05 1985.86,1218.05 1986.45,1218.05 1987.03,1218.05 1987.62,1218.05 1988.2,1218.05 1988.79,1218.05 1989.38,1218.05 1989.96,1218.05 1990.55,1218.05 1991.14,1218.05 1991.72,1218.05 1992.31,1218.05 1992.9,1218.05 1993.48,1218.05 1994.07,1218.05 1994.65,1218.05 1995.24,1218.05 1995.83,1218.05 1996.41,1218.05 1997,1218.05 1997.59,1218.05 1998.17,1218.05 1998.76,1218.05 1999.35,1218.05 1999.93,1218.05 2000.52,1218.05 2001.11,1218.05 2001.69,1218.05 2002.28,1218.05 2002.86,1218.05 2003.45,1218.05 2004.04,1218.05 2004.62,1218.05 2005.21,1218.05 2005.8,1218.05 2006.38,1218.05 2006.97,1218.05 2007.56,1218.05 2008.14,1218.05 2008.73,1218.05 2009.32,1218.05 2009.9,1218.05 2010.49,1218.05 2011.07,1218.05 2011.66,1218.05 2012.25,1218.05 2012.83,1218.05 2013.42,1218.05 2014.01,1218.05 2014.59,1218.05 2015.18,1218.05 2015.77,1218.05 2016.35,1218.05 2016.94,1218.05 2017.53,1218.05 2018.11,1218.05 2018.7,1218.05 2019.28,1218.05 2019.87,1218.05 2020.46,1218.05 2021.04,1218.05 2021.63,1218.05 2022.22,1218.05 2022.8,1218.05 2023.39,1218.05 2023.98,1218.05 2024.56,1218.05 2025.15,1218.05 2025.73,1218.05 2026.32,1218.05 2026.91,1218.05 2027.49,1218.05 2028.08,1218.05 2028.67,1218.05 2029.25,1218.05 2029.84,1218.05 2030.43,1218.05 2031.01,1218.05 2031.6,1218.05 2032.19,1218.05 2032.77,1218.05 2033.36,1218.05 2033.94,1218.05 2034.53,1218.05 2035.12,1218.05 2035.7,1218.05 2036.29,1218.05 2036.88,1218.05 2037.46,1218.05 2038.05,1218.05 2038.64,1218.05 2039.22,1218.05 2039.81,1218.05 2040.4,1218.05 2040.98,1218.05 2041.57,1218.05 2042.15,1218.05 2042.74,1218.05 2043.33,1218.05 2043.91,1218.05 2044.5,1218.05 2045.09,1218.05 2045.67,1218.05 2046.26,1218.05 2046.85,1218.05 2047.43,1218.05 2048.02,1218.05 2048.6,1218.05 2049.19,1218.05 2049.78,1218.05 2050.36,1218.05 2050.95,1218.05 2051.54,1218.05 2052.12,1218.05 2052.71,1218.05 2053.3,1218.05 2053.88,1218.05 2054.47,1218.05 2055.06,1218.05 2055.64,1218.05 2056.23,1218.05 2056.81,1218.05 2057.4,1218.05 2057.99,1218.05 2058.57,1218.05 2059.16,1218.05 2059.75,1218.05 2060.33,1218.05 2060.92,1218.05 2061.51,1218.05 2062.09,1218.05 2062.68,1218.05 2063.27,1218.05 2063.85,1218.05 2064.44,1218.05 2065.02,1218.05 2065.61,1218.05 2066.2,1218.05 2066.78,1218.05 2067.37,1218.05 2067.96,1218.05 2068.54,1218.05 2069.13,1218.05 2069.72,1218.05 2070.3,1218.05 2070.89,1218.05 2071.48,1218.05 2072.06,1218.05 2072.65,1218.05 2073.23,1218.05 2073.82,1218.05 2074.41,1218.05 2074.99,1218.05 2075.58,1218.05 2076.17,1218.05 2076.75,1218.05 2077.34,1218.05 2077.93,1218.05 2078.51,1218.05 2079.1,1218.05 2079.68,1218.05 2080.27,1218.05 2080.86,1218.05 2081.44,1218.05 2082.03,1218.05 2082.62,1218.05 2083.2,1218.05 2083.79,1218.05 2084.38,1218.05 2084.96,1218.05 2085.55,1218.05 2086.14,1218.05 2086.72,1218.05 2087.31,1218.05 2087.89,1218.05 2088.48,1218.05 2089.07,1218.05 2089.65,1218.05 2090.24,1218.05 2090.83,1218.05 2091.41,1218.05 2092,1218.05 2092.59,1218.05 2093.17,1218.05 2093.76,1218.05 2094.35,1218.05 2094.93,1218.05 2095.52,1218.05 2096.1,1218.05 2096.69,1218.05 2097.28,1218.05 2097.86,1218.05 2098.45,1218.05 2099.04,1218.05 2099.62,1218.05 2100.21,1218.05 2100.8,1218.05 2101.38,1218.05 2101.97,1218.05 2102.55,1218.05 2103.14,1218.05 2103.73,1218.05 2104.31,1218.05 2104.9,1218.05 2105.49,1218.05 2106.07,1218.05 2106.66,1218.05 2107.25,1218.05 2107.83,1218.05 2108.42,1218.05 2109.01,1218.05 2109.59,1218.05 2110.18,1218.05 2110.76,1218.05 2111.35,1218.05 2111.94,1218.05 2112.52,1218.05 2113.11,1218.05 2113.7,1218.05 2114.28,1218.05 2114.87,1218.05 2115.46,1218.05 2116.04,1218.05 2116.63,1218.05 2117.22,1218.05 2117.8,1218.05 2118.39,1218.05 2118.97,1218.05 2119.56,1218.05 2120.15,1218.05 2120.73,1218.05 2121.32,1218.05 2121.91,1218.05 2122.49,1218.05 2123.08,1218.05 2123.67,1218.05 2124.25,1218.05 2124.84,1218.05 2125.42,1218.05 2126.01,1218.05 2126.6,1218.05 2127.18,1218.05 2127.77,1218.05 2128.36,1218.05 2128.94,1218.05 2129.53,1218.05 2130.12,1218.05 2130.7,1218.05 2131.29,1218.05 2131.88,1218.05 2132.46,1218.05 2133.05,1218.05 2133.63,1218.05 2134.22,1218.05 2134.81,1218.05 2135.39,1218.05 2135.98,1218.05 2136.57,1218.05 2137.15,1218.05 2137.74,1218.05 2138.33,1218.05 2138.91,1218.05 2139.5,1218.05 2140.09,1218.05 2140.67,1218.05 2141.26,1218.05 2141.84,1218.05 2142.43,1218.05 2143.02,1218.05 2143.6,1218.05 2144.19,1218.05 2144.78,1218.05 2145.36,1218.05 2145.95,1218.05 2146.54,1218.05 2147.12,1218.05 2147.71,1218.05 2148.3,1218.05 2148.88,1218.05 2149.47,1218.05 2150.05,1218.05 2150.64,1218.05 2151.23,1218.05 2151.81,1218.05 2152.4,1218.05 2152.99,1218.05 2153.57,1218.05 2154.16,1218.05 2154.75,1218.05 2155.33,1218.05 2155.92,1218.05 2156.5,1218.05 2157.09,1218.05 2157.68,1218.05 2158.26,1218.05 \"/>\n<path clip-path=\"url(#clip532)\" d=\"M986.025 1217.93 L986.612 1217.93 L987.198 1217.93 L987.785 1217.93 L988.371 1217.93 L988.957 1217.93 L989.544 1217.93 L990.13 1217.93 L990.717 1217.93 L991.303 1217.93 L991.889 1217.93 L992.476 1217.93 L993.062 1217.93 L993.649 1217.93 L994.235 1217.93 L994.822 1217.93 L995.408 1217.93 L995.994 1217.93 L996.581 1217.93 L997.167 1217.93 L997.754 1217.93 L998.34 1217.93 L998.926 1217.93 L999.513 1217.93 L1000.1 1217.93 L1000.69 1217.93 L1001.27 1217.93 L1001.86 1217.93 L1002.44 1217.93 L1003.03 1217.93 L1003.62 1217.93 L1004.2 1217.93 L1004.79 1217.93 L1005.38 1217.93 L1005.96 1217.93 L1006.55 1217.93 L1007.14 1217.93 L1007.72 1217.93 L1008.31 1217.93 L1008.9 1217.93 L1009.48 1217.93 L1010.07 1217.93 L1010.65 1217.93 L1011.24 1217.93 L1011.83 1217.93 L1012.41 1217.93 L1013 1217.93 L1013.59 1217.93 L1014.17 1217.93 L1014.76 1217.93 L1015.35 1217.93 L1015.93 1217.93 L1016.52 1217.93 L1017.11 1217.93 L1017.69 1217.93 L1018.28 1217.93 L1018.86 1217.93 L1019.45 1217.93 L1020.04 1217.93 L1020.62 1217.93 L1021.21 1217.93 L1021.8 1217.93 L1022.38 1217.93 L1022.97 1217.93 L1023.56 1217.93 L1024.14 1217.93 L1024.73 1217.93 L1025.32 1217.93 L1025.9 1217.93 L1026.49 1217.93 L1027.07 1217.93 L1027.66 1217.93 L1028.25 1217.93 L1028.83 1217.93 L1029.42 1217.93 L1030.01 1217.93 L1030.59 1217.93 L1031.18 1217.93 L1031.77 1217.93 L1032.35 1217.93 L1032.94 1217.93 L1033.52 1217.93 L1034.11 1217.93 L1034.7 1217.93 L1035.28 1217.93 L1035.87 1217.93 L1036.46 1217.93 L1037.04 1217.93 L1037.63 1217.93 L1038.22 1217.93 L1038.8 1217.93 L1039.39 1217.93 L1039.98 1217.93 L1040.56 1217.93 L1041.15 1217.93 L1041.73 1217.93 L1042.32 1217.93 L1042.91 1217.93 L1043.49 1217.93 L1044.08 1217.93 L1044.67 1217.93 L1045.25 1217.93 L1045.84 1217.93 L1046.43 1217.93 L1047.01 1217.93 L1047.6 1217.93 L1048.19 1217.93 L1048.77 1217.93 L1049.36 1217.93 L1049.94 1217.93 L1050.53 1217.93 L1051.12 1217.93 L1051.7 1217.93 L1052.29 1217.93 L1052.88 1217.93 L1053.46 1217.93 L1054.05 1217.93 L1054.64 1217.93 L1055.22 1217.93 L1055.81 1217.93 L1056.39 1217.93 L1056.98 1217.93 L1057.57 1217.93 L1058.15 1217.93 L1058.74 1217.93 L1059.33 1217.93 L1059.91 1217.93 L1060.5 1217.93 L1061.09 1217.93 L1061.67 1217.93 L1062.26 1217.93 L1062.85 1217.93 L1063.43 1217.93 L1064.02 1217.93 L1064.6 1217.93 L1065.19 1217.93 L1065.78 1217.93 L1066.36 1217.93 L1066.95 1217.93 L1067.54 1217.93 L1068.12 1217.93 L1068.71 1217.93 L1069.3 1217.93 L1069.88 1217.93 L1070.47 1217.93 L1071.06 1217.93 L1071.64 1217.93 L1072.23 1217.93 L1072.81 1217.93 L1073.4 1217.93 L1073.99 1217.93 L1074.57 1217.93 L1075.16 1217.93 L1075.75 1217.93 L1076.33 1217.93 L1076.92 1217.93 L1077.51 1217.93 L1078.09 1217.93 L1078.68 1217.93 L1079.26 1217.93 L1079.85 1217.93 L1080.44 1217.93 L1081.02 1217.93 L1081.61 1217.93 L1082.2 1217.93 L1082.78 1217.93 L1083.37 1217.93 L1083.96 1217.93 L1084.54 1217.93 L1085.13 1217.93 L1085.72 1217.93 L1086.3 1217.93 L1086.89 1217.93 L1087.47 1217.93 L1088.06 1217.93 L1088.65 1217.93 L1089.23 1217.93 L1089.82 1217.93 L1090.41 1217.93 L1090.99 1217.93 L1091.58 1217.93 L1092.17 1217.93 L1092.75 1217.93 L1093.34 1217.93 L1093.93 1217.93 L1094.51 1217.93 L1095.1 1217.93 L1095.68 1217.93 L1096.27 1217.93 L1096.86 1217.93 L1097.44 1217.93 L1098.03 1217.93 L1098.62 1217.93 L1099.2 1217.93 L1099.79 1217.93 L1100.38 1217.93 L1100.96 1217.93 L1101.55 1217.93 L1102.14 1217.93 L1102.72 1217.93 L1103.31 1217.93 L1103.89 1217.93 L1104.48 1217.93 L1105.07 1217.93 L1105.65 1217.93 L1106.24 1217.93 L1106.83 1217.93 L1107.41 1217.93 L1108 1217.93 L1108.59 1217.93 L1109.17 1217.93 L1109.76 1217.93 L1110.34 1217.93 L1110.93 1217.93 L1111.52 1217.93 L1112.1 1217.93 L1112.69 1217.93 L1113.28 1217.93 L1113.86 1217.93 L1114.45 1217.93 L1115.04 1217.93 L1115.62 1217.93 L1116.21 1217.93 L1116.8 1217.93 L1117.38 1217.93 L1117.97 1217.93 L1118.55 1217.93 L1119.14 1217.93 L1119.73 1217.93 L1120.31 1217.93 L1120.9 1217.93 L1121.49 1217.93 L1122.07 1217.93 L1122.66 1217.93 L1123.25 1217.93 L1123.83 1217.93 L1124.42 1217.93 L1125.01 1217.93 L1125.59 1217.93 L1126.18 1217.93 L1126.76 1217.93 L1127.35 1217.93 L1127.94 1217.93 L1128.52 1217.93 L1129.11 1217.93 L1129.7 1217.93 L1130.28 1217.93 L1130.87 1217.93 L1131.46 1217.93 L1132.04 1217.93 L1132.63 1217.93 L1133.21 1217.93 L1133.8 1217.93 L1134.39 1217.93 L1134.97 1217.93 L1135.56 1217.93 L1136.15 1217.93 L1136.73 1217.93 L1137.32 1217.93 L1137.91 1217.93 L1138.49 1217.93 L1139.08 1217.93 L1139.67 1217.93 L1140.25 1217.93 L1140.84 1217.93 L1141.42 1217.93 L1142.01 1217.93 L1142.6 1217.93 L1143.18 1217.93 L1143.77 1217.93 L1144.36 1217.93 L1144.94 1217.93 L1145.53 1217.93 L1146.12 1217.93 L1146.7 1217.93 L1147.29 1217.93 L1147.88 1217.93 L1148.46 1217.93 L1149.05 1217.93 L1149.63 1217.93 L1150.22 1217.93 L1150.81 1217.93 L1151.39 1217.93 L1151.98 1217.93 L1152.57 1217.93 L1153.15 1217.93 L1153.74 1217.93 L1154.33 1217.93 L1154.91 1217.93 L1155.5 1217.93 L1156.09 1217.93 L1156.67 1217.93 L1157.26 1217.93 L1157.84 1217.93 L1158.43 1217.93 L1159.02 1217.93 L1159.6 1217.93 L1160.19 1217.93 L1160.78 1217.93 L1161.36 1217.93 L1161.95 1217.93 L1162.54 1217.93 L1163.12 1217.93 L1163.71 1217.93 L1164.29 1217.93 L1164.88 1217.93 L1165.47 1217.93 L1166.05 1217.93 L1166.64 1217.93 L1167.23 1217.93 L1167.81 1217.93 L1168.4 1217.93 L1168.99 1217.93 L1169.57 1217.93 L1170.16 1217.93 L1170.75 1217.93 L1171.33 1217.93 L1171.92 1217.93 L1172.5 1217.93 L1173.09 1217.93 L1173.68 1217.93 L1174.26 1217.93 L1174.85 1217.93 L1175.44 1217.93 L1176.02 1217.93 L1176.61 1217.93 L1177.2 1217.93 L1177.78 1217.93 L1178.37 1217.93 L1178.96 1217.93 L1179.54 1217.93 L1180.13 1217.93 L1180.71 1217.93 L1181.3 1217.93 L1181.89 1217.93 L1182.47 1217.93 L1183.06 1217.93 L1183.65 1217.93 L1184.23 1217.93 L1184.82 1217.93 L1185.41 1217.93 L1185.99 1217.93 L1186.58 1217.93 L1187.16 1217.93 L1187.75 1217.93 L1188.34 1217.93 L1188.92 1217.93 L1189.51 1217.93 L1190.1 1217.93 L1190.68 1217.93 L1191.27 1217.93 L1191.86 1217.93 L1192.44 1217.93 L1193.03 1217.93 L1193.62 1217.93 L1194.2 1217.93 L1194.79 1217.93 L1195.37 1217.93 L1195.96 1217.93 L1196.55 1217.93 L1197.13 1217.93 L1197.72 1217.93 L1198.31 1217.93 L1198.89 1217.93 L1199.48 1217.93 L1200.07 1217.93 L1200.65 1217.93 L1201.24 1217.93 L1201.83 1217.93 L1202.41 1217.93 L1203 1217.93 L1203.58 1217.93 L1204.17 1217.93 L1204.76 1217.93 L1205.34 1217.93 L1205.93 1217.93 L1206.52 1217.93 L1207.1 1217.93 L1207.69 1217.93 L1208.28 1217.93 L1208.86 1217.93 L1209.45 1217.93 L1210.03 1217.93 L1210.62 1217.93 L1211.21 1217.93 L1211.79 1217.93 L1212.38 1217.93 L1212.97 1217.93 L1213.55 1217.93 L1214.14 1217.93 L1214.73 1217.93 L1215.31 1217.93 L1215.9 1217.93 L1216.49 1217.93 L1217.07 1217.93 L1217.66 1217.93 L1218.24 1217.93 L1218.83 1217.93 L1219.42 1217.93 L1220 1217.93 L1220.59 1217.93 L1221.18 1217.93 L1221.76 1217.93 L1222.35 1217.93 L1222.94 1217.93 L1223.52 1217.93 L1224.11 1217.93 L1224.7 1217.93 L1225.28 1217.93 L1225.87 1217.93 L1226.45 1217.93 L1227.04 1217.93 L1227.63 1217.93 L1228.21 1217.93 L1228.8 1217.93 L1229.39 1217.93 L1229.97 1217.93 L1230.56 1217.93 L1231.15 1217.93 L1231.73 1217.93 L1232.32 1217.93 L1232.91 1217.93 L1233.49 1217.93 L1234.08 1217.93 L1234.66 1217.93 L1235.25 1217.93 L1235.84 1217.93 L1236.42 1217.93 L1237.01 1217.93 L1237.6 1217.93 L1238.18 1217.93 L1238.77 1217.93 L1239.36 1217.93 L1239.94 1217.93 L1240.53 1217.93 L1241.11 1217.93 L1241.7 1217.93 L1242.29 1217.93 L1242.87 1217.93 L1243.46 1217.93 L1244.05 1217.93 L1244.63 1217.93 L1245.22 1217.93 L1245.81 1217.93 L1246.39 1217.93 L1246.98 1217.93 L1247.57 1217.93 L1248.15 1217.93 L1248.74 1217.93 L1249.32 1217.93 L1249.91 1217.93 L1250.5 1217.93 L1251.08 1217.93 L1251.67 1217.93 L1252.26 1217.93 L1252.84 1217.93 L1253.43 1217.93 L1254.02 1217.93 L1254.6 1217.93 L1255.19 1217.93 L1255.78 1217.93 L1256.36 1217.93 L1256.95 1217.93 L1257.53 1217.93 L1258.12 1217.93 L1258.71 1217.93 L1259.29 1217.93 L1259.88 1217.93 L1260.47 1217.93 L1261.05 1217.93 L1261.64 1217.93 L1262.23 1217.93 L1262.81 1217.93 L1263.4 1217.93 L1263.98 1217.93 L1264.57 1217.93 L1265.16 1217.93 L1265.74 1217.93 L1266.33 1217.93 L1266.92 1217.93 L1267.5 1217.93 L1268.09 1217.93 L1268.68 1217.93 L1269.26 1217.93 L1269.85 1217.93 L1270.44 1217.93 L1271.02 1217.93 L1271.61 1217.93 L1272.19 1217.93 L1272.78 1217.93 L1273.37 1217.93 L1273.95 1217.93 L1274.54 1217.93 L1275.13 1217.93 L1275.71 1217.93 L1276.3 1217.93 L1276.89 1217.93 L1277.47 1217.93 L1278.06 1217.93 L1278.65 1217.93 L1279.23 1217.93 L1279.82 1217.93 L1280.4 1217.93 L1280.99 1217.93 L1281.58 1217.93 L1282.16 1217.93 L1282.75 1217.93 L1283.34 1217.93 L1283.92 1217.93 L1284.51 1217.93 L1285.1 1217.93 L1285.68 1217.93 L1286.27 1217.93 L1286.86 1217.93 L1287.44 1217.93 L1288.03 1217.93 L1288.61 1217.93 L1289.2 1217.93 L1289.79 1217.93 L1290.37 1217.93 L1290.96 1217.93 L1291.55 1217.93 L1292.13 1217.93 L1292.72 1217.93 L1293.31 1217.93 L1293.89 1217.93 L1294.48 1217.93 L1295.06 1217.93 L1295.65 1217.93 L1296.24 1217.93 L1296.82 1217.93 L1297.41 1217.93 L1298 1217.93 L1298.58 1217.93 L1299.17 1217.93 L1299.76 1217.93 L1300.34 1217.93 L1300.93 1217.93 L1301.52 1217.93 L1302.1 1217.93 L1302.69 1217.93 L1303.27 1217.93 L1303.86 1217.93 L1304.45 1217.93 L1305.03 1217.93 L1305.62 1217.93 L1306.21 1217.93 L1306.79 1217.93 L1307.38 1217.93 L1307.97 1217.93 L1308.55 1217.93 L1309.14 1217.93 L1309.73 1217.93 L1310.31 1217.93 L1310.9 1217.93 L1311.48 1217.93 L1312.07 1217.93 L1312.66 1217.93 L1313.24 1217.93 L1313.83 1217.93 L1314.42 1217.93 L1315 1217.93 L1315.59 1217.93 L1316.18 1217.93 L1316.76 1217.93 L1317.35 1217.93 L1317.93 1217.93 L1318.52 1217.93 L1319.11 1217.93 L1319.69 1217.93 L1320.28 1217.93 L1320.87 1217.93 L1321.45 1217.93 L1322.04 1217.93 L1322.63 1217.93 L1323.21 1217.93 L1323.8 1217.93 L1324.39 1217.93 L1324.97 1217.93 L1325.56 1217.93 L1326.14 1217.93 L1326.73 1217.93 L1327.32 1217.93 L1327.9 1217.93 L1328.49 1217.93 L1329.08 1217.93 L1329.66 1217.93 L1330.25 1217.93 L1330.84 1217.93 L1331.42 1217.93 L1332.01 1217.93 L1332.6 1217.93 L1333.18 1217.93 L1333.77 1217.93 L1334.35 1217.93 L1334.94 1217.93 L1335.53 1217.93 L1336.11 1217.93 L1336.7 1217.93 L1337.29 1217.93 L1337.87 1217.93 L1338.46 1217.93 L1339.05 1217.93 L1339.63 1217.93 L1340.22 1217.93 L1340.8 1217.93 L1341.39 1217.93 L1341.98 1217.93 L1342.56 1217.93 L1343.15 1217.93 L1343.74 1217.93 L1344.32 1217.93 L1344.91 1217.93 L1345.5 1217.93 L1346.08 1217.93 L1346.67 1217.93 L1347.26 1217.93 L1347.84 1217.93 L1348.43 1217.93 L1349.01 1217.93 L1349.6 1217.93 L1350.19 1217.93 L1350.77 1217.93 L1351.36 1217.93 L1351.95 1217.93 L1352.53 1217.93 L1353.12 1217.93 L1353.71 1217.93 L1354.29 1217.93 L1354.88 1217.93 L1355.47 1217.93 L1356.05 1217.93 L1356.64 1217.93 L1357.22 1217.93 L1357.81 1217.93 L1358.4 1217.93 L1358.98 1217.93 L1359.57 1217.93 L1360.16 1217.93 L1360.74 1217.93 L1361.33 1217.93 L1361.92 1217.93 L1362.5 1217.93 L1363.09 1217.93 L1363.68 1217.93 L1364.26 1217.93 L1364.85 1217.93 L1365.43 1217.93 L1366.02 1217.93 L1366.61 1217.93 L1367.19 1217.93 L1367.78 1217.93 L1368.37 1217.93 L1368.95 1217.93 L1369.54 1217.93 L1370.13 1217.93 L1370.71 1217.93 L1371.3 1217.93 L1371.88 1217.93 L1372.47 1217.93 L1373.06 1217.93 L1373.64 1217.93 L1374.23 1217.93 L1374.82 1217.93 L1375.4 1217.93 L1375.99 1217.93 L1376.58 1217.93 L1377.16 1217.93 L1377.75 1217.93 L1378.34 1217.93 L1378.92 1217.93 L1379.51 1217.93 L1380.09 1217.93 L1380.68 1217.93 L1381.27 1217.93 L1381.85 1217.93 L1382.44 1217.93 L1383.03 1217.93 L1383.61 1217.93 L1384.2 1217.93 L1384.79 1217.93 L1385.37 1217.93 L1385.96 1217.93 L1386.55 1217.93 L1387.13 1217.93 L1387.72 1217.93 L1388.3 1217.93 L1388.89 1217.93 L1389.48 1217.93 L1390.06 1217.93 L1390.65 1217.93 L1391.24 1217.93 L1391.82 1217.93 L1392.41 1217.93 L1393 1217.93 L1393.58 1217.93 L1394.17 1217.93 L1394.75 1217.93 L1395.34 1217.93 L1395.93 1217.93 L1396.51 1217.93 L1397.1 1217.93 L1397.69 1217.93 L1398.27 1217.93 L1398.86 1217.93 L1399.45 1217.93 L1400.03 1217.93 L1400.62 1217.93 L1401.21 1217.93 L1401.79 1217.93 L1402.38 1217.93 L1402.96 1217.93 L1403.55 1217.93 L1404.14 1217.93 L1404.72 1217.93 L1405.31 1217.93 L1405.9 1217.93 L1406.48 1217.93 L1407.07 1217.93 L1407.66 1217.93 L1408.24 1217.93 L1408.83 1217.93 L1409.42 1217.93 L1410 1217.93 L1410.59 1217.93 L1411.17 1217.93 L1411.76 1217.93 L1412.35 1217.93 L1412.93 1217.93 L1413.52 1217.93 L1414.11 1217.93 L1414.69 1217.93 L1415.28 1217.93 L1415.87 1217.93 L1416.45 1217.93 L1417.04 1217.93 L1417.63 1217.93 L1418.21 1217.93 L1418.8 1217.93 L1419.38 1217.93 L1419.97 1217.93 L1420.56 1217.93 L1421.14 1217.93 L1421.73 1217.93 L1422.32 1217.93 L1422.9 1217.93 L1423.49 1217.93 L1424.08 1217.93 L1424.66 1217.93 L1425.25 1217.93 L1425.83 1217.93 L1426.42 1217.93 L1427.01 1217.93 L1427.59 1217.93 L1428.18 1217.93 L1428.77 1217.93 L1429.35 1217.93 L1429.94 1217.93 L1430.53 1217.93 L1431.11 1217.93 L1431.7 1217.93 L1432.29 1217.93 L1432.87 1217.93 L1433.46 1217.93 L1434.04 1217.93 L1434.63 1217.93 L1435.22 1217.93 L1435.8 1217.93 L1436.39 1217.93 L1436.98 1217.93 L1437.56 1217.93 L1438.15 1217.93 L1438.74 1217.93 L1439.32 1217.93 L1439.91 1217.93 L1440.5 1217.93 L1441.08 1217.93 L1441.67 1217.93 L1442.25 1217.93 L1442.84 1217.93 L1443.43 1217.93 L1444.01 1217.93 L1444.6 1217.93 L1445.19 1217.93 L1445.77 1217.93 L1446.36 1217.93 L1446.95 1217.93 L1447.53 1217.93 L1448.12 1217.93 L1448.7 1217.93 L1449.29 1217.93 L1449.88 1217.93 L1450.46 1217.93 L1451.05 1217.93 L1451.64 1217.93 L1452.22 1217.93 L1452.81 1217.93 L1453.4 1217.93 L1453.98 1217.93 L1454.57 1217.93 L1455.16 1217.93 L1455.74 1217.93 L1456.33 1217.93 L1456.91 1217.93 L1457.5 1217.93 L1458.09 1217.93 L1458.67 1217.93 L1459.26 1217.93 L1459.85 1217.93 L1460.43 1217.93 L1461.02 1217.93 L1461.61 1217.93 L1462.19 1217.93 L1462.78 1217.93 L1463.37 1217.93 L1463.95 1217.93 L1464.54 1217.93 L1465.12 1217.93 L1465.71 1217.93 L1466.3 1217.93 L1466.88 1217.93 L1467.47 1217.93 L1468.06 1217.93 L1468.64 1217.93 L1469.23 1217.93 L1469.82 1217.93 L1470.4 1217.93 L1470.99 1217.93 L1471.57 1217.93 L1472.16 1217.93 L1472.75 1217.93 L1473.33 1217.93 L1473.92 1217.93 L1474.51 1217.93 L1475.09 1217.93 L1475.68 1217.93 L1476.27 1217.93 L1476.85 1217.93 L1477.44 1217.93 L1478.03 1217.93 L1478.61 1217.93 L1479.2 1217.93 L1479.78 1217.93 L1480.37 1217.93 L1480.96 1217.93 L1481.54 1217.93 L1482.13 1217.93 L1482.72 1217.93 L1483.3 1217.93 L1483.89 1217.93 L1484.48 1217.93 L1485.06 1217.93 L1485.65 1217.93 L1486.24 1217.93 L1486.82 1217.93 L1487.41 1217.93 L1487.99 1217.93 L1488.58 1217.93 L1489.17 1217.93 L1489.75 1217.93 L1490.34 1217.93 L1490.93 1217.93 L1491.51 1217.93 L1492.1 1217.93 L1492.69 1217.93 L1493.27 1217.93 L1493.86 1217.93 L1494.45 1217.93 L1495.03 1217.93 L1495.62 1217.93 L1496.2 1217.93 L1496.79 1217.93 L1497.38 1217.93 L1497.96 1217.93 L1498.55 1217.93 L1499.14 1217.93 L1499.72 1217.93 L1500.31 1217.93 L1500.9 1217.93 L1501.48 1217.93 L1502.07 1217.93 L1502.65 1217.93 L1503.24 1217.93 L1503.83 1217.93 L1504.41 1217.93 L1505 1217.93 L1505.59 1217.93 L1506.17 1217.93 L1506.76 1217.93 L1507.35 1217.93 L1507.93 1217.93 L1508.52 1217.93 L1509.11 1217.93 L1509.69 1217.93 L1510.28 1217.93 L1510.86 1217.93 L1511.45 1217.93 L1512.04 1217.93 L1512.62 1217.93 L1513.21 1217.93 L1513.8 1217.93 L1514.38 1217.93 L1514.97 1217.93 L1515.56 1217.93 L1516.14 1217.93 L1516.73 1217.93 L1517.32 1217.93 L1517.9 1217.93 L1518.49 1217.93 L1519.07 1217.93 L1519.66 1217.93 L1520.25 1217.93 L1520.83 1217.93 L1521.42 1217.93 L1522.01 1217.93 L1522.59 1217.93 L1523.18 1217.93 L1523.77 1217.93 L1524.35 1217.93 L1524.94 1217.93 L1525.52 1217.93 L1526.11 1217.93 L1526.7 1217.93 L1527.28 1217.93 L1527.87 1217.93 L1528.46 1217.93 L1529.04 1217.93 L1529.63 1217.93 L1530.22 1217.93 L1530.8 1217.93 L1531.39 1217.93 L1531.98 1217.93 L1532.56 1217.93 L1533.15 1217.93 L1533.73 1217.93 L1534.32 1217.93 L1534.91 1217.93 L1535.49 1217.93 L1536.08 1217.93 L1536.67 1217.93 L1537.25 1217.93 L1537.84 1217.93 L1538.43 1217.93 L1539.01 1217.93 L1539.6 1217.93 L1540.19 1217.93 L1540.77 1217.93 L1541.36 1217.93 L1541.94 1217.93 L1542.53 1217.93 L1543.12 1217.93 L1543.7 1217.93 L1544.29 1217.93 L1544.88 1217.93 L1545.46 1217.93 L1546.05 1217.93 L1546.64 1217.93 L1547.22 1217.93 L1547.81 1217.93 L1548.4 1217.93 L1548.98 1217.93 L1549.57 1217.93 L1550.15 1217.93 L1550.74 1217.93 L1551.33 1217.93 L1551.91 1217.93 L1552.5 1217.93 L1553.09 1217.93 L1553.67 1217.93 L1554.26 1217.93 L1554.85 1217.93 L1555.43 1217.93 L1556.02 1217.93 L1556.6 1217.93 L1557.19 1217.93 L1557.78 1217.93 L1558.36 1217.93 L1558.95 1217.93 L1559.54 1217.93 L1560.12 1217.93 L1560.71 1217.93 L1561.3 1217.93 L1561.88 1217.93 L1562.47 1217.93 L1563.06 1217.93 L1563.64 1217.93 L1564.23 1217.93 L1564.81 1217.93 L1565.4 1217.93 L1565.99 1217.93 L1566.57 1217.93 L1567.16 1217.93 L1567.75 1217.93 L1568.33 1217.93 L1568.92 1217.93 L1569.51 1217.93 L1570.09 1217.93 L1570.68 1217.93 L1571.27 1217.93 L1571.85 1217.93 L1572.44 1217.93 L1573.02 1217.93 L1573.61 1217.93 L1574.2 1217.93 L1574.78 1217.93 L1575.37 1217.93 L1575.96 1217.93 L1576.54 1217.93 L1577.13 1217.93 L1577.72 1217.93 L1578.3 1217.93 L1578.89 1217.93 L1579.47 1217.93 L1580.06 1217.93 L1580.65 1217.93 L1581.23 1217.93 L1581.82 1217.93 L1582.41 1217.93 L1582.99 1217.93 L1583.58 1217.93 L1584.17 1217.93 L1584.75 1217.93 L1585.34 1217.93 L1585.93 1217.93 L1586.51 1217.93 L1587.1 1217.93 L1587.68 1217.93 L1588.27 1217.93 L1588.86 1217.93 L1589.44 1217.93 L1590.03 1217.93 L1590.62 1217.93 L1591.2 1217.93 L1591.79 1217.93 L1592.38 1217.93 L1592.96 1217.93 L1593.55 1217.93 L1594.14 1217.93 L1594.72 1217.93 L1595.31 1217.93 L1595.89 1217.93 L1596.48 1217.93 L1597.07 1217.93 L1597.65 1217.93 L1598.24 1217.93 L1598.83 1217.93 L1599.41 1217.93 L1600 1217.93 L1600.59 1217.93 L1601.17 1217.93 L1601.76 1217.93 L1602.34 1217.93 L1602.93 1217.93 L1603.52 1217.93 L1604.1 1217.93 L1604.69 1217.93 L1605.28 1217.93 L1605.86 1217.93 L1606.45 1217.93 L1607.04 1217.93 L1607.62 1217.93 L1608.21 1217.93 L1608.8 1217.93 L1609.38 1217.93 L1609.97 1217.93 L1610.55 1217.93 L1611.14 1217.93 L1611.73 1217.93 L1612.31 1217.93 L1612.9 1217.93 L1613.49 1217.93 L1614.07 1217.93 L1614.66 1217.93 L1615.25 1217.93 L1615.83 1217.93 L1616.42 1217.93 L1617.01 1217.93 L1617.59 1217.93 L1618.18 1217.93 L1618.76 1217.93 L1619.35 1217.93 L1619.94 1217.93 L1620.52 1217.93 L1621.11 1217.93 L1621.7 1217.93 L1622.28 1217.93 L1622.87 1217.93 L1623.46 1217.93 L1624.04 1217.93 L1624.63 1217.93 L1625.22 1217.93 L1625.8 1217.93 L1626.39 1217.93 L1626.97 1217.93 L1627.56 1217.93 L1628.15 1217.93 L1628.73 1217.93 L1629.32 1217.93 L1629.91 1217.93 L1630.49 1217.93 L1631.08 1217.93 L1631.67 1217.93 L1632.25 1217.93 L1632.84 1217.93 L1633.42 1217.93 L1634.01 1217.93 L1634.6 1217.93 L1635.18 1217.93 L1635.77 1217.93 L1636.36 1217.93 L1636.94 1217.93 L1637.53 1217.93 L1638.12 1217.93 L1638.7 1217.93 L1639.29 1217.93 L1639.88 1217.93 L1640.46 1217.93 L1641.05 1217.93 L1641.63 1217.93 L1642.22 1217.93 L1642.81 1217.93 L1643.39 1217.93 L1643.98 1217.93 L1644.57 1217.93 L1645.15 1217.93 L1645.74 1217.93 L1646.33 1217.93 L1646.91 1217.93 L1647.5 1217.93 L1648.09 1217.93 L1648.67 1217.93 L1649.26 1217.93 L1649.84 1217.93 L1650.43 1217.93 L1651.02 1217.93 L1651.6 1217.93 L1652.19 1217.93 L1652.78 1217.93 L1653.36 1217.93 L1653.95 1217.93 L1654.54 1217.93 L1655.12 1217.93 L1655.71 1217.93 L1656.29 1217.93 L1656.88 1217.93 L1657.47 1217.93 L1658.05 1217.93 L1658.64 1217.93 L1659.23 1217.93 L1659.81 1217.93 L1660.4 1217.93 L1660.99 1217.93 L1661.57 1217.93 L1662.16 1217.93 L1662.75 1217.93 L1663.33 1217.93 L1663.92 1217.93 L1664.5 1217.93 L1665.09 1217.93 L1665.68 1217.93 L1666.26 1217.93 L1666.85 1217.93 L1667.44 1217.93 L1668.02 1217.93 L1668.61 1217.93 L1669.2 1217.93 L1669.78 1217.93 L1670.37 1217.93 L1670.96 1217.93 L1671.54 1217.93 L1672.13 1217.93 L1672.71 1217.93 L1673.3 1217.93 L1673.89 1217.93 L1674.47 1217.93 L1675.06 1217.93 L1675.65 1217.93 L1676.23 1217.93 L1676.82 1217.93 L1677.41 1217.93 L1677.99 1217.93 L1678.58 1217.93 L1679.17 1217.93 L1679.75 1217.93 L1680.34 1217.93 L1680.92 1217.93 L1681.51 1217.93 L1682.1 1217.93 L1682.68 1217.93 L1683.27 1217.93 L1683.86 1217.93 L1684.44 1217.93 L1685.03 1217.93 L1685.62 1217.93 L1686.2 1217.93 L1686.79 1217.93 L1687.37 1217.93 L1687.96 1217.93 L1688.55 1217.93 L1689.13 1217.93 L1689.72 1217.93 L1690.31 1217.93 L1690.89 1217.93 L1691.48 1217.93 L1692.07 1217.93 L1692.65 1217.93 L1693.24 1217.93 L1693.83 1217.93 L1694.41 1217.93 L1695 1217.93 L1695.58 1217.93 L1696.17 1217.93 L1696.76 1217.93 L1697.34 1217.93 L1697.93 1217.93 L1698.52 1217.93 L1699.1 1217.93 L1699.69 1217.93 L1700.28 1217.93 L1700.86 1217.93 L1701.45 1217.93 L1702.04 1217.93 L1702.62 1217.93 L1703.21 1217.93 L1703.79 1217.93 L1704.38 1217.93 L1704.97 1217.93 L1705.55 1217.93 L1706.14 1217.93 L1706.73 1217.93 L1707.31 1217.93 L1707.9 1217.93 L1708.49 1217.93 L1709.07 1217.93 L1709.66 1217.93 L1710.24 1217.93 L1710.83 1217.93 L1711.42 1217.93 L1712 1217.93 L1712.59 1217.93 L1713.18 1217.93 L1713.76 1217.93 L1714.35 1217.93 L1714.94 1217.93 L1715.52 1217.93 L1716.11 1217.93 L1716.7 1217.93 L1717.28 1217.93 L1717.87 1217.93 L1718.45 1217.93 L1719.04 1217.93 L1719.63 1217.93 L1720.21 1217.93 L1720.8 1217.93 L1721.39 1217.93 L1721.97 1217.93 L1722.56 1217.93 L1723.15 1217.93 L1723.73 1217.93 L1724.32 1217.93 L1724.91 1217.93 L1725.49 1217.93 L1726.08 1217.93 L1726.66 1217.93 L1727.25 1217.93 L1727.84 1217.93 L1728.42 1217.93 L1729.01 1217.93 L1729.6 1217.93 L1730.18 1217.93 L1730.77 1217.93 L1731.36 1217.93 L1731.94 1217.93 L1732.53 1217.93 L1733.11 1217.93 L1733.7 1217.93 L1734.29 1217.93 L1734.87 1217.93 L1735.46 1217.93 L1736.05 1217.93 L1736.63 1217.93 L1737.22 1217.93 L1737.81 1217.93 L1738.39 1217.93 L1738.98 1217.93 L1739.57 1217.93 L1740.15 1217.93 L1740.74 1217.93 L1741.32 1217.93 L1741.91 1217.93 L1742.5 1217.93 L1743.08 1217.93 L1743.67 1217.93 L1744.26 1217.93 L1744.84 1217.93 L1745.43 1217.93 L1746.02 1217.93 L1746.6 1217.93 L1747.19 1217.93 L1747.78 1217.93 L1748.36 1217.93 L1748.95 1217.93 L1749.53 1217.93 L1750.12 1217.93 L1750.71 1217.93 L1751.29 1217.93 L1751.88 1217.93 L1752.47 1217.93 L1753.05 1217.93 L1753.64 1217.93 L1754.23 1217.93 L1754.81 1217.93 L1755.4 1217.93 L1755.99 1217.93 L1756.57 1217.93 L1757.16 1217.93 L1757.74 1217.93 L1758.33 1217.93 L1758.92 1217.93 L1759.5 1217.93 L1760.09 1217.93 L1760.68 1217.93 L1761.26 1217.93 L1761.85 1217.93 L1762.44 1217.93 L1763.02 1217.93 L1763.61 1217.93 L1764.19 1217.93 L1764.78 1217.93 L1765.37 1217.93 L1765.95 1217.93 L1766.54 1217.93 L1767.13 1217.93 L1767.71 1217.93 L1768.3 1217.93 L1768.89 1217.93 L1769.47 1217.93 L1770.06 1217.93 L1770.65 1217.93 L1771.23 1217.93 L1771.82 1217.93 L1772.4 1217.93 L1772.99 1217.93 L1773.58 1217.93 L1774.16 1217.93 L1774.75 1217.93 L1775.34 1217.93 L1775.92 1217.93 L1776.51 1217.93 L1777.1 1217.93 L1777.68 1217.93 L1778.27 1217.93 L1778.86 1217.93 L1779.44 1217.93 L1780.03 1217.93 L1780.61 1217.93 L1781.2 1217.93 L1781.79 1217.93 L1782.37 1217.93 L1782.96 1217.93 L1783.55 1217.93 L1784.13 1217.93 L1784.72 1217.93 L1785.31 1217.93 L1785.89 1217.93 L1786.48 1217.93 L1787.06 1217.93 L1787.65 1217.93 L1788.24 1217.93 L1788.82 1217.93 L1789.41 1217.93 L1790 1217.93 L1790.58 1217.93 L1791.17 1217.93 L1791.76 1217.93 L1792.34 1217.93 L1792.93 1217.93 L1793.52 1217.93 L1794.1 1217.93 L1794.69 1217.93 L1795.27 1217.93 L1795.86 1217.93 L1796.45 1217.93 L1797.03 1217.93 L1797.62 1217.93 L1798.21 1217.93 L1798.79 1217.93 L1799.38 1217.93 L1799.97 1217.93 L1800.55 1217.93 L1801.14 1217.93 L1801.73 1217.93 L1802.31 1217.93 L1802.9 1217.93 L1803.48 1217.93 L1804.07 1217.93 L1804.66 1217.93 L1805.24 1217.93 L1805.83 1217.93 L1806.42 1217.93 L1807 1217.93 L1807.59 1217.93 L1808.18 1217.93 L1808.76 1217.93 L1809.35 1217.93 L1809.94 1217.93 L1810.52 1217.93 L1811.11 1217.93 L1811.69 1217.93 L1812.28 1217.93 L1812.87 1217.93 L1813.45 1217.93 L1814.04 1217.93 L1814.63 1217.93 L1815.21 1217.93 L1815.8 1217.93 L1816.39 1217.93 L1816.97 1217.93 L1817.56 1217.93 L1818.14 1217.93 L1818.73 1217.93 L1819.32 1217.93 L1819.9 1217.93 L1820.49 1217.93 L1821.08 1217.93 L1821.66 1217.93 L1822.25 1217.93 L1822.84 1217.93 L1823.42 1217.93 L1824.01 1217.93 L1824.6 1217.93 L1825.18 1217.93 L1825.77 1217.93 L1826.35 1217.93 L1826.94 1217.93 L1827.53 1217.93 L1828.11 1217.93 L1828.7 1217.93 L1829.29 1217.93 L1829.87 1217.93 L1830.46 1217.93 L1831.05 1217.93 L1831.63 1217.93 L1832.22 1217.93 L1832.81 1217.93 L1833.39 1217.93 L1833.98 1217.93 L1834.56 1217.93 L1835.15 1217.93 L1835.74 1217.93 L1836.32 1217.93 L1836.91 1217.93 L1837.5 1217.93 L1838.08 1217.93 L1838.67 1217.93 L1839.26 1217.93 L1839.84 1217.93 L1840.43 1217.93 L1841.01 1217.93 L1841.6 1217.93 L1842.19 1217.93 L1842.77 1217.93 L1843.36 1217.93 L1843.95 1217.93 L1844.53 1217.93 L1845.12 1217.93 L1845.71 1217.93 L1846.29 1217.93 L1846.88 1217.93 L1847.47 1217.93 L1848.05 1217.93 L1848.64 1217.93 L1849.22 1217.93 L1849.81 1217.93 L1850.4 1217.93 L1850.98 1217.93 L1851.57 1217.93 L1852.16 1217.93 L1852.74 1217.93 L1853.33 1217.93 L1853.92 1217.93 L1854.5 1217.93 L1855.09 1217.93 L1855.68 1217.93 L1856.26 1217.93 L1856.85 1217.93 L1857.43 1217.93 L1858.02 1217.93 L1858.61 1217.93 L1859.19 1217.93 L1859.78 1217.93 L1860.37 1217.93 L1860.95 1217.93 L1861.54 1217.93 L1862.13 1217.93 L1862.71 1217.93 L1863.3 1217.93 L1863.88 1217.93 L1864.47 1217.93 L1865.06 1217.93 L1865.64 1217.93 L1866.23 1217.93 L1866.82 1217.93 L1867.4 1217.93 L1867.99 1217.93 L1868.58 1217.93 L1869.16 1217.93 L1869.75 1217.93 L1870.34 1217.93 L1870.92 1217.93 L1871.51 1217.93 L1872.09 1217.93 L1872.68 1217.93 L1873.27 1217.93 L1873.85 1217.93 L1874.44 1217.93 L1875.03 1217.93 L1875.61 1217.93 L1876.2 1217.93 L1876.79 1217.93 L1877.37 1217.93 L1877.96 1217.93 L1878.55 1217.93 L1879.13 1217.93 L1879.72 1217.93 L1880.3 1217.93 L1880.89 1217.93 L1881.48 1217.93 L1882.06 1217.93 L1882.65 1217.93 L1883.24 1217.93 L1883.82 1217.93 L1884.41 1217.93 L1885 1217.93 L1885.58 1217.93 L1886.17 1217.93 L1886.76 1217.93 L1887.34 1217.93 L1887.93 1217.93 L1888.51 1217.93 L1889.1 1217.93 L1889.69 1217.93 L1890.27 1217.93 L1890.86 1217.93 L1891.45 1217.93 L1892.03 1217.93 L1892.62 1217.93 L1893.21 1217.93 L1893.79 1217.93 L1894.38 1217.93 L1894.96 1217.93 L1895.55 1217.93 L1896.14 1217.93 L1896.72 1217.93 L1897.31 1217.93 L1897.9 1217.93 L1898.48 1217.93 L1899.07 1217.93 L1899.66 1217.93 L1900.24 1217.93 L1900.83 1217.93 L1901.42 1217.93 L1902 1217.93 L1902.59 1217.93 L1903.17 1217.93 L1903.76 1217.93 L1904.35 1217.93 L1904.93 1217.93 L1905.52 1217.93 L1906.11 1217.93 L1906.69 1217.93 L1907.28 1217.93 L1907.87 1217.93 L1908.45 1217.93 L1909.04 1217.93 L1909.63 1217.93 L1910.21 1217.93 L1910.8 1217.93 L1911.38 1217.93 L1911.97 1217.93 L1912.56 1217.93 L1913.14 1217.93 L1913.73 1217.93 L1914.32 1217.93 L1914.9 1217.93 L1915.49 1217.93 L1916.08 1217.93 L1916.66 1217.93 L1917.25 1217.93 L1917.83 1217.93 L1918.42 1217.93 L1919.01 1217.93 L1919.59 1217.93 L1920.18 1217.93 L1920.77 1217.93 L1921.35 1217.93 L1921.94 1217.93 L1922.53 1217.93 L1923.11 1217.93 L1923.7 1217.93 L1924.29 1217.93 L1924.87 1217.93 L1925.46 1217.93 L1926.04 1217.93 L1926.63 1217.93 L1927.22 1217.93 L1927.8 1217.93 L1928.39 1217.93 L1928.98 1217.93 L1929.56 1217.93 L1930.15 1217.93 L1930.74 1217.93 L1931.32 1217.93 L1931.91 1217.93 L1932.5 1217.93 L1933.08 1217.93 L1933.67 1217.93 L1934.25 1217.93 L1934.84 1217.93 L1935.43 1217.93 L1936.01 1217.93 L1936.6 1217.93 L1937.19 1217.93 L1937.77 1217.93 L1938.36 1217.93 L1938.95 1217.93 L1939.53 1217.93 L1940.12 1217.93 L1940.71 1217.93 L1941.29 1217.93 L1941.88 1217.93 L1942.46 1217.93 L1943.05 1217.93 L1943.64 1217.93 L1944.22 1217.93 L1944.81 1217.93 L1945.4 1217.93 L1945.98 1217.93 L1946.57 1217.93 L1947.16 1217.93 L1947.74 1217.93 L1948.33 1217.93 L1948.91 1217.93 L1949.5 1217.93 L1950.09 1217.93 L1950.67 1217.93 L1951.26 1217.93 L1951.85 1217.93 L1952.43 1217.93 L1953.02 1217.93 L1953.61 1217.93 L1954.19 1217.93 L1954.78 1217.93 L1955.37 1217.93 L1955.95 1217.93 L1956.54 1217.93 L1957.12 1217.93 L1957.71 1217.93 L1958.3 1217.93 L1958.88 1217.93 L1959.47 1217.93 L1960.06 1217.93 L1960.64 1217.93 L1961.23 1217.93 L1961.82 1217.93 L1962.4 1217.93 L1962.99 1217.93 L1963.58 1217.93 L1964.16 1217.93 L1964.75 1217.93 L1965.33 1217.93 L1965.92 1217.93 L1966.51 1217.93 L1967.09 1217.93 L1967.68 1217.93 L1968.27 1217.93 L1968.85 1217.93 L1969.44 1217.93 L1970.03 1217.93 L1970.61 1217.93 L1971.2 1217.93 L1971.78 1217.93 L1972.37 1217.93 L1972.96 1217.93 L1973.54 1217.93 L1974.13 1217.93 L1974.72 1217.93 L1975.3 1217.93 L1975.89 1217.93 L1976.48 1217.93 L1977.06 1217.93 L1977.65 1217.93 L1978.24 1217.93 L1978.82 1217.93 L1979.41 1217.93 L1979.99 1217.93 L1980.58 1217.93 L1981.17 1217.93 L1981.75 1217.93 L1982.34 1217.93 L1982.93 1217.93 L1983.51 1217.93 L1984.1 1217.93 L1984.69 1217.93 L1985.27 1217.93 L1985.86 1217.93 L1986.45 1217.93 L1987.03 1217.93 L1987.62 1217.93 L1988.2 1217.93 L1988.79 1217.93 L1989.38 1217.93 L1989.96 1217.93 L1990.55 1217.93 L1991.14 1217.93 L1991.72 1217.93 L1992.31 1217.93 L1992.9 1217.93 L1993.48 1217.93 L1994.07 1217.93 L1994.65 1217.93 L1995.24 1217.93 L1995.83 1217.93 L1996.41 1217.93 L1997 1217.93 L1997.59 1217.93 L1998.17 1217.93 L1998.76 1217.93 L1999.35 1217.93 L1999.93 1217.93 L2000.52 1217.93 L2001.11 1217.93 L2001.69 1217.93 L2002.28 1217.93 L2002.86 1217.93 L2003.45 1217.93 L2004.04 1217.93 L2004.62 1217.93 L2005.21 1217.93 L2005.8 1217.93 L2006.38 1217.93 L2006.97 1217.93 L2007.56 1217.93 L2008.14 1217.93 L2008.73 1217.93 L2009.32 1217.93 L2009.9 1217.93 L2010.49 1217.93 L2011.07 1217.93 L2011.66 1217.93 L2012.25 1217.93 L2012.83 1217.93 L2013.42 1217.93 L2014.01 1217.93 L2014.59 1217.93 L2015.18 1217.93 L2015.77 1217.93 L2016.35 1217.93 L2016.94 1217.93 L2017.53 1217.93 L2018.11 1217.93 L2018.7 1217.93 L2019.28 1217.93 L2019.87 1217.93 L2020.46 1217.93 L2021.04 1217.93 L2021.63 1217.93 L2022.22 1217.93 L2022.8 1217.93 L2023.39 1217.93 L2023.98 1217.93 L2024.56 1217.93 L2025.15 1217.93 L2025.73 1217.93 L2026.32 1217.93 L2026.91 1217.93 L2027.49 1217.93 L2028.08 1217.93 L2028.67 1217.93 L2029.25 1217.93 L2029.84 1217.93 L2030.43 1217.93 L2031.01 1217.93 L2031.6 1217.93 L2032.19 1217.93 L2032.77 1217.93 L2033.36 1217.93 L2033.94 1217.93 L2034.53 1217.93 L2035.12 1217.93 L2035.7 1217.93 L2036.29 1217.93 L2036.88 1217.93 L2037.46 1217.93 L2038.05 1217.93 L2038.64 1217.93 L2039.22 1217.93 L2039.81 1217.93 L2040.4 1217.93 L2040.98 1217.93 L2041.57 1217.93 L2042.15 1217.93 L2042.74 1217.93 L2043.33 1217.93 L2043.91 1217.93 L2044.5 1217.93 L2045.09 1217.93 L2045.67 1217.93 L2046.26 1217.93 L2046.85 1217.93 L2047.43 1217.93 L2048.02 1217.93 L2048.6 1217.93 L2049.19 1217.93 L2049.78 1217.93 L2050.36 1217.93 L2050.95 1217.93 L2051.54 1217.93 L2052.12 1217.93 L2052.71 1217.93 L2053.3 1217.93 L2053.88 1217.93 L2054.47 1217.93 L2055.06 1217.93 L2055.64 1217.93 L2056.23 1217.93 L2056.81 1217.93 L2057.4 1217.93 L2057.99 1217.93 L2058.57 1217.93 L2059.16 1217.93 L2059.75 1217.93 L2060.33 1217.93 L2060.92 1217.93 L2061.51 1217.93 L2062.09 1217.93 L2062.68 1217.93 L2063.27 1217.93 L2063.85 1217.93 L2064.44 1217.93 L2065.02 1217.93 L2065.61 1217.93 L2066.2 1217.93 L2066.78 1217.93 L2067.37 1217.93 L2067.96 1217.93 L2068.54 1217.93 L2069.13 1217.93 L2069.72 1217.93 L2070.3 1217.93 L2070.89 1217.93 L2071.48 1217.93 L2072.06 1217.93 L2072.65 1217.93 L2073.23 1217.93 L2073.82 1217.93 L2074.41 1217.93 L2074.99 1217.93 L2075.58 1217.93 L2076.17 1217.93 L2076.75 1217.93 L2077.34 1217.93 L2077.93 1217.93 L2078.51 1217.93 L2079.1 1217.93 L2079.68 1217.93 L2080.27 1217.93 L2080.86 1217.93 L2081.44 1217.93 L2082.03 1217.93 L2082.62 1217.93 L2083.2 1217.93 L2083.79 1217.93 L2084.38 1217.93 L2084.96 1217.93 L2085.55 1217.93 L2086.14 1217.93 L2086.72 1217.93 L2087.31 1217.93 L2087.89 1217.93 L2088.48 1217.93 L2089.07 1217.93 L2089.65 1217.93 L2090.24 1217.93 L2090.83 1217.93 L2091.41 1217.93 L2092 1217.93 L2092.59 1217.93 L2093.17 1217.93 L2093.76 1217.93 L2094.35 1217.93 L2094.93 1217.93 L2095.52 1217.93 L2096.1 1217.93 L2096.69 1217.93 L2097.28 1217.93 L2097.86 1217.93 L2098.45 1217.93 L2099.04 1217.93 L2099.62 1217.93 L2100.21 1217.93 L2100.8 1217.93 L2101.38 1217.93 L2101.97 1217.93 L2102.55 1217.93 L2103.14 1217.93 L2103.73 1217.93 L2104.31 1217.93 L2104.9 1217.93 L2105.49 1217.93 L2106.07 1217.93 L2106.66 1217.93 L2107.25 1217.93 L2107.83 1217.93 L2108.42 1217.93 L2109.01 1217.93 L2109.59 1217.93 L2110.18 1217.93 L2110.76 1217.93 L2111.35 1217.93 L2111.94 1217.93 L2112.52 1217.93 L2113.11 1217.93 L2113.7 1217.93 L2114.28 1217.93 L2114.87 1217.93 L2115.46 1217.93 L2116.04 1217.93 L2116.63 1217.93 L2117.22 1217.93 L2117.8 1217.93 L2118.39 1217.93 L2118.97 1217.93 L2119.56 1217.93 L2120.15 1217.93 L2120.73 1217.93 L2121.32 1217.93 L2121.91 1217.93 L2122.49 1217.93 L2123.08 1217.93 L2123.67 1217.93 L2124.25 1217.93 L2124.84 1217.93 L2125.42 1217.93 L2126.01 1217.93 L2126.6 1217.93 L2127.18 1217.93 L2127.77 1217.93 L2128.36 1217.93 L2128.94 1217.93 L2129.53 1217.93 L2130.12 1217.93 L2130.7 1217.93 L2131.29 1217.93 L2131.88 1217.93 L2132.46 1217.93 L2133.05 1217.93 L2133.63 1217.93 L2134.22 1217.93 L2134.81 1217.93 L2135.39 1217.93 L2135.98 1217.93 L2136.57 1217.93 L2137.15 1217.93 L2137.74 1217.93 L2138.33 1217.93 L2138.91 1217.93 L2139.5 1217.93 L2140.09 1217.93 L2140.67 1217.93 L2141.26 1217.93 L2141.84 1217.93 L2142.43 1217.93 L2143.02 1217.93 L2143.6 1217.93 L2144.19 1217.93 L2144.78 1217.93 L2145.36 1217.93 L2145.95 1217.93 L2146.54 1217.93 L2147.12 1217.93 L2147.71 1217.93 L2148.3 1217.93 L2148.88 1217.93 L2149.47 1217.93 L2150.05 1217.93 L2150.64 1217.93 L2151.23 1217.93 L2151.81 1217.93 L2152.4 1217.93 L2152.99 1217.93 L2153.57 1217.93 L2154.16 1217.93 L2154.75 1217.93 L2155.33 1217.93 L2155.92 1217.93 L2156.5 1217.93 L2157.09 1217.93 L2157.68 1217.93 L2158.26 1217.93 L2158.26 1217.79 L2157.68 1217.79 L2157.09 1217.79 L2156.5 1217.79 L2155.92 1217.79 L2155.33 1217.79 L2154.75 1217.79 L2154.16 1217.79 L2153.57 1217.79 L2152.99 1217.79 L2152.4 1217.79 L2151.81 1217.79 L2151.23 1217.79 L2150.64 1217.79 L2150.05 1217.79 L2149.47 1217.79 L2148.88 1217.79 L2148.3 1217.79 L2147.71 1217.79 L2147.12 1217.79 L2146.54 1217.79 L2145.95 1217.79 L2145.36 1217.79 L2144.78 1217.79 L2144.19 1217.79 L2143.6 1217.79 L2143.02 1217.79 L2142.43 1217.79 L2141.84 1217.79 L2141.26 1217.79 L2140.67 1217.79 L2140.09 1217.79 L2139.5 1217.79 L2138.91 1217.79 L2138.33 1217.79 L2137.74 1217.79 L2137.15 1217.79 L2136.57 1217.79 L2135.98 1217.79 L2135.39 1217.79 L2134.81 1217.79 L2134.22 1217.79 L2133.63 1217.79 L2133.05 1217.79 L2132.46 1217.79 L2131.88 1217.79 L2131.29 1217.79 L2130.7 1217.79 L2130.12 1217.79 L2129.53 1217.79 L2128.94 1217.79 L2128.36 1217.79 L2127.77 1217.79 L2127.18 1217.79 L2126.6 1217.79 L2126.01 1217.79 L2125.42 1217.79 L2124.84 1217.79 L2124.25 1217.79 L2123.67 1217.79 L2123.08 1217.79 L2122.49 1217.79 L2121.91 1217.79 L2121.32 1217.79 L2120.73 1217.79 L2120.15 1217.79 L2119.56 1217.79 L2118.97 1217.79 L2118.39 1217.79 L2117.8 1217.79 L2117.22 1217.79 L2116.63 1217.79 L2116.04 1217.79 L2115.46 1217.79 L2114.87 1217.79 L2114.28 1217.79 L2113.7 1217.79 L2113.11 1217.79 L2112.52 1217.79 L2111.94 1217.79 L2111.35 1217.79 L2110.76 1217.79 L2110.18 1217.79 L2109.59 1217.79 L2109.01 1217.79 L2108.42 1217.79 L2107.83 1217.79 L2107.25 1217.79 L2106.66 1217.79 L2106.07 1217.79 L2105.49 1217.79 L2104.9 1217.79 L2104.31 1217.79 L2103.73 1217.79 L2103.14 1217.79 L2102.55 1217.79 L2101.97 1217.79 L2101.38 1217.79 L2100.8 1217.79 L2100.21 1217.79 L2099.62 1217.79 L2099.04 1217.79 L2098.45 1217.79 L2097.86 1217.79 L2097.28 1217.79 L2096.69 1217.79 L2096.1 1217.79 L2095.52 1217.79 L2094.93 1217.79 L2094.35 1217.79 L2093.76 1217.79 L2093.17 1217.79 L2092.59 1217.79 L2092 1217.79 L2091.41 1217.79 L2090.83 1217.79 L2090.24 1217.79 L2089.65 1217.79 L2089.07 1217.79 L2088.48 1217.79 L2087.89 1217.79 L2087.31 1217.79 L2086.72 1217.79 L2086.14 1217.79 L2085.55 1217.79 L2084.96 1217.79 L2084.38 1217.79 L2083.79 1217.79 L2083.2 1217.79 L2082.62 1217.79 L2082.03 1217.79 L2081.44 1217.79 L2080.86 1217.79 L2080.27 1217.79 L2079.68 1217.79 L2079.1 1217.79 L2078.51 1217.79 L2077.93 1217.79 L2077.34 1217.79 L2076.75 1217.79 L2076.17 1217.79 L2075.58 1217.79 L2074.99 1217.79 L2074.41 1217.79 L2073.82 1217.79 L2073.23 1217.79 L2072.65 1217.79 L2072.06 1217.79 L2071.48 1217.79 L2070.89 1217.79 L2070.3 1217.79 L2069.72 1217.79 L2069.13 1217.79 L2068.54 1217.79 L2067.96 1217.79 L2067.37 1217.79 L2066.78 1217.79 L2066.2 1217.79 L2065.61 1217.79 L2065.02 1217.79 L2064.44 1217.79 L2063.85 1217.79 L2063.27 1217.79 L2062.68 1217.79 L2062.09 1217.79 L2061.51 1217.79 L2060.92 1217.79 L2060.33 1217.79 L2059.75 1217.79 L2059.16 1217.79 L2058.57 1217.79 L2057.99 1217.79 L2057.4 1217.79 L2056.81 1217.79 L2056.23 1217.79 L2055.64 1217.79 L2055.06 1217.79 L2054.47 1217.79 L2053.88 1217.79 L2053.3 1217.79 L2052.71 1217.79 L2052.12 1217.79 L2051.54 1217.79 L2050.95 1217.79 L2050.36 1217.79 L2049.78 1217.79 L2049.19 1217.79 L2048.6 1217.79 L2048.02 1217.79 L2047.43 1217.79 L2046.85 1217.79 L2046.26 1217.79 L2045.67 1217.79 L2045.09 1217.79 L2044.5 1217.79 L2043.91 1217.79 L2043.33 1217.79 L2042.74 1217.79 L2042.15 1217.79 L2041.57 1217.79 L2040.98 1217.79 L2040.4 1217.79 L2039.81 1217.79 L2039.22 1217.79 L2038.64 1217.79 L2038.05 1217.79 L2037.46 1217.79 L2036.88 1217.79 L2036.29 1217.79 L2035.7 1217.79 L2035.12 1217.79 L2034.53 1217.79 L2033.94 1217.79 L2033.36 1217.79 L2032.77 1217.79 L2032.19 1217.79 L2031.6 1217.79 L2031.01 1217.79 L2030.43 1217.79 L2029.84 1217.79 L2029.25 1217.79 L2028.67 1217.79 L2028.08 1217.79 L2027.49 1217.79 L2026.91 1217.79 L2026.32 1217.79 L2025.73 1217.79 L2025.15 1217.79 L2024.56 1217.79 L2023.98 1217.79 L2023.39 1217.79 L2022.8 1217.79 L2022.22 1217.79 L2021.63 1217.79 L2021.04 1217.79 L2020.46 1217.79 L2019.87 1217.79 L2019.28 1217.79 L2018.7 1217.79 L2018.11 1217.79 L2017.53 1217.79 L2016.94 1217.79 L2016.35 1217.79 L2015.77 1217.79 L2015.18 1217.79 L2014.59 1217.79 L2014.01 1217.79 L2013.42 1217.79 L2012.83 1217.79 L2012.25 1217.79 L2011.66 1217.79 L2011.07 1217.79 L2010.49 1217.79 L2009.9 1217.79 L2009.32 1217.79 L2008.73 1217.79 L2008.14 1217.79 L2007.56 1217.79 L2006.97 1217.79 L2006.38 1217.79 L2005.8 1217.79 L2005.21 1217.79 L2004.62 1217.79 L2004.04 1217.79 L2003.45 1217.79 L2002.86 1217.79 L2002.28 1217.79 L2001.69 1217.79 L2001.11 1217.79 L2000.52 1217.79 L1999.93 1217.79 L1999.35 1217.79 L1998.76 1217.79 L1998.17 1217.79 L1997.59 1217.79 L1997 1217.79 L1996.41 1217.79 L1995.83 1217.79 L1995.24 1217.79 L1994.65 1217.79 L1994.07 1217.79 L1993.48 1217.79 L1992.9 1217.79 L1992.31 1217.79 L1991.72 1217.79 L1991.14 1217.79 L1990.55 1217.79 L1989.96 1217.79 L1989.38 1217.79 L1988.79 1217.79 L1988.2 1217.79 L1987.62 1217.79 L1987.03 1217.79 L1986.45 1217.79 L1985.86 1217.79 L1985.27 1217.79 L1984.69 1217.79 L1984.1 1217.79 L1983.51 1217.79 L1982.93 1217.79 L1982.34 1217.79 L1981.75 1217.79 L1981.17 1217.79 L1980.58 1217.79 L1979.99 1217.79 L1979.41 1217.79 L1978.82 1217.79 L1978.24 1217.79 L1977.65 1217.79 L1977.06 1217.79 L1976.48 1217.79 L1975.89 1217.79 L1975.3 1217.79 L1974.72 1217.79 L1974.13 1217.79 L1973.54 1217.79 L1972.96 1217.79 L1972.37 1217.79 L1971.78 1217.79 L1971.2 1217.79 L1970.61 1217.79 L1970.03 1217.79 L1969.44 1217.79 L1968.85 1217.79 L1968.27 1217.79 L1967.68 1217.79 L1967.09 1217.79 L1966.51 1217.79 L1965.92 1217.79 L1965.33 1217.79 L1964.75 1217.79 L1964.16 1217.79 L1963.58 1217.79 L1962.99 1217.79 L1962.4 1217.79 L1961.82 1217.79 L1961.23 1217.79 L1960.64 1217.79 L1960.06 1217.79 L1959.47 1217.79 L1958.88 1217.79 L1958.3 1217.79 L1957.71 1217.79 L1957.12 1217.79 L1956.54 1217.79 L1955.95 1217.79 L1955.37 1217.79 L1954.78 1217.79 L1954.19 1217.79 L1953.61 1217.79 L1953.02 1217.79 L1952.43 1217.79 L1951.85 1217.79 L1951.26 1217.79 L1950.67 1217.79 L1950.09 1217.79 L1949.5 1217.79 L1948.91 1217.79 L1948.33 1217.79 L1947.74 1217.79 L1947.16 1217.79 L1946.57 1217.79 L1945.98 1217.79 L1945.4 1217.79 L1944.81 1217.79 L1944.22 1217.79 L1943.64 1217.79 L1943.05 1217.79 L1942.46 1217.79 L1941.88 1217.79 L1941.29 1217.79 L1940.71 1217.79 L1940.12 1217.79 L1939.53 1217.79 L1938.95 1217.79 L1938.36 1217.79 L1937.77 1217.79 L1937.19 1217.79 L1936.6 1217.79 L1936.01 1217.79 L1935.43 1217.79 L1934.84 1217.79 L1934.25 1217.79 L1933.67 1217.79 L1933.08 1217.79 L1932.5 1217.79 L1931.91 1217.79 L1931.32 1217.79 L1930.74 1217.79 L1930.15 1217.79 L1929.56 1217.79 L1928.98 1217.79 L1928.39 1217.79 L1927.8 1217.79 L1927.22 1217.79 L1926.63 1217.79 L1926.04 1217.79 L1925.46 1217.79 L1924.87 1217.79 L1924.29 1217.79 L1923.7 1217.79 L1923.11 1217.79 L1922.53 1217.79 L1921.94 1217.79 L1921.35 1217.79 L1920.77 1217.79 L1920.18 1217.79 L1919.59 1217.79 L1919.01 1217.79 L1918.42 1217.79 L1917.83 1217.79 L1917.25 1217.79 L1916.66 1217.79 L1916.08 1217.79 L1915.49 1217.79 L1914.9 1217.79 L1914.32 1217.79 L1913.73 1217.79 L1913.14 1217.79 L1912.56 1217.79 L1911.97 1217.79 L1911.38 1217.79 L1910.8 1217.79 L1910.21 1217.79 L1909.63 1217.79 L1909.04 1217.79 L1908.45 1217.79 L1907.87 1217.79 L1907.28 1217.79 L1906.69 1217.79 L1906.11 1217.79 L1905.52 1217.79 L1904.93 1217.79 L1904.35 1217.79 L1903.76 1217.79 L1903.17 1217.79 L1902.59 1217.79 L1902 1217.79 L1901.42 1217.79 L1900.83 1217.79 L1900.24 1217.79 L1899.66 1217.79 L1899.07 1217.79 L1898.48 1217.79 L1897.9 1217.79 L1897.31 1217.79 L1896.72 1217.79 L1896.14 1217.79 L1895.55 1217.79 L1894.96 1217.79 L1894.38 1217.79 L1893.79 1217.79 L1893.21 1217.79 L1892.62 1217.79 L1892.03 1217.79 L1891.45 1217.79 L1890.86 1217.79 L1890.27 1217.79 L1889.69 1217.79 L1889.1 1217.79 L1888.51 1217.79 L1887.93 1217.79 L1887.34 1217.79 L1886.76 1217.79 L1886.17 1217.79 L1885.58 1217.79 L1885 1217.79 L1884.41 1217.79 L1883.82 1217.79 L1883.24 1217.79 L1882.65 1217.79 L1882.06 1217.79 L1881.48 1217.79 L1880.89 1217.79 L1880.3 1217.79 L1879.72 1217.79 L1879.13 1217.79 L1878.55 1217.79 L1877.96 1217.79 L1877.37 1217.79 L1876.79 1217.79 L1876.2 1217.79 L1875.61 1217.79 L1875.03 1217.79 L1874.44 1217.79 L1873.85 1217.79 L1873.27 1217.79 L1872.68 1217.79 L1872.09 1217.79 L1871.51 1217.79 L1870.92 1217.79 L1870.34 1217.79 L1869.75 1217.79 L1869.16 1217.79 L1868.58 1217.79 L1867.99 1217.79 L1867.4 1217.79 L1866.82 1217.79 L1866.23 1217.79 L1865.64 1217.79 L1865.06 1217.79 L1864.47 1217.79 L1863.88 1217.79 L1863.3 1217.79 L1862.71 1217.79 L1862.13 1217.79 L1861.54 1217.79 L1860.95 1217.79 L1860.37 1217.79 L1859.78 1217.79 L1859.19 1217.79 L1858.61 1217.79 L1858.02 1217.79 L1857.43 1217.79 L1856.85 1217.79 L1856.26 1217.79 L1855.68 1217.79 L1855.09 1217.79 L1854.5 1217.79 L1853.92 1217.79 L1853.33 1217.79 L1852.74 1217.79 L1852.16 1217.79 L1851.57 1217.79 L1850.98 1217.79 L1850.4 1217.79 L1849.81 1217.79 L1849.22 1217.79 L1848.64 1217.79 L1848.05 1217.79 L1847.47 1217.79 L1846.88 1217.79 L1846.29 1217.79 L1845.71 1217.79 L1845.12 1217.79 L1844.53 1217.79 L1843.95 1217.79 L1843.36 1217.79 L1842.77 1217.79 L1842.19 1217.79 L1841.6 1217.79 L1841.01 1217.79 L1840.43 1217.79 L1839.84 1217.79 L1839.26 1217.79 L1838.67 1217.79 L1838.08 1217.79 L1837.5 1217.79 L1836.91 1217.79 L1836.32 1217.79 L1835.74 1217.79 L1835.15 1217.79 L1834.56 1217.79 L1833.98 1217.79 L1833.39 1217.79 L1832.81 1217.79 L1832.22 1217.79 L1831.63 1217.79 L1831.05 1217.79 L1830.46 1217.79 L1829.87 1217.79 L1829.29 1217.79 L1828.7 1217.79 L1828.11 1217.79 L1827.53 1217.79 L1826.94 1217.79 L1826.35 1217.79 L1825.77 1217.79 L1825.18 1217.79 L1824.6 1217.79 L1824.01 1217.79 L1823.42 1217.79 L1822.84 1217.79 L1822.25 1217.79 L1821.66 1217.79 L1821.08 1217.79 L1820.49 1217.79 L1819.9 1217.79 L1819.32 1217.79 L1818.73 1217.79 L1818.14 1217.79 L1817.56 1217.79 L1816.97 1217.79 L1816.39 1217.79 L1815.8 1217.79 L1815.21 1217.79 L1814.63 1217.79 L1814.04 1217.79 L1813.45 1217.79 L1812.87 1217.79 L1812.28 1217.79 L1811.69 1217.79 L1811.11 1217.79 L1810.52 1217.79 L1809.94 1217.79 L1809.35 1217.79 L1808.76 1217.79 L1808.18 1217.79 L1807.59 1217.79 L1807 1217.79 L1806.42 1217.79 L1805.83 1217.79 L1805.24 1217.79 L1804.66 1217.79 L1804.07 1217.79 L1803.48 1217.79 L1802.9 1217.79 L1802.31 1217.79 L1801.73 1217.79 L1801.14 1217.79 L1800.55 1217.79 L1799.97 1217.79 L1799.38 1217.79 L1798.79 1217.79 L1798.21 1217.79 L1797.62 1217.79 L1797.03 1217.79 L1796.45 1217.79 L1795.86 1217.79 L1795.27 1217.79 L1794.69 1217.79 L1794.1 1217.79 L1793.52 1217.79 L1792.93 1217.79 L1792.34 1217.79 L1791.76 1217.79 L1791.17 1217.79 L1790.58 1217.79 L1790 1217.79 L1789.41 1217.79 L1788.82 1217.79 L1788.24 1217.79 L1787.65 1217.79 L1787.06 1217.79 L1786.48 1217.79 L1785.89 1217.79 L1785.31 1217.79 L1784.72 1217.79 L1784.13 1217.79 L1783.55 1217.79 L1782.96 1217.79 L1782.37 1217.79 L1781.79 1217.79 L1781.2 1217.79 L1780.61 1217.79 L1780.03 1217.79 L1779.44 1217.79 L1778.86 1217.79 L1778.27 1217.79 L1777.68 1217.79 L1777.1 1217.79 L1776.51 1217.79 L1775.92 1217.79 L1775.34 1217.79 L1774.75 1217.79 L1774.16 1217.79 L1773.58 1217.79 L1772.99 1217.79 L1772.4 1217.79 L1771.82 1217.79 L1771.23 1217.79 L1770.65 1217.79 L1770.06 1217.79 L1769.47 1217.79 L1768.89 1217.79 L1768.3 1217.79 L1767.71 1217.79 L1767.13 1217.79 L1766.54 1217.79 L1765.95 1217.79 L1765.37 1217.79 L1764.78 1217.79 L1764.19 1217.79 L1763.61 1217.79 L1763.02 1217.79 L1762.44 1217.79 L1761.85 1217.79 L1761.26 1217.79 L1760.68 1217.79 L1760.09 1217.79 L1759.5 1217.79 L1758.92 1217.79 L1758.33 1217.79 L1757.74 1217.79 L1757.16 1217.79 L1756.57 1217.79 L1755.99 1217.79 L1755.4 1217.79 L1754.81 1217.79 L1754.23 1217.79 L1753.64 1217.79 L1753.05 1217.79 L1752.47 1217.79 L1751.88 1217.79 L1751.29 1217.79 L1750.71 1217.79 L1750.12 1217.79 L1749.53 1217.79 L1748.95 1217.79 L1748.36 1217.79 L1747.78 1217.79 L1747.19 1217.79 L1746.6 1217.79 L1746.02 1217.79 L1745.43 1217.79 L1744.84 1217.79 L1744.26 1217.79 L1743.67 1217.79 L1743.08 1217.79 L1742.5 1217.79 L1741.91 1217.79 L1741.32 1217.79 L1740.74 1217.79 L1740.15 1217.79 L1739.57 1217.79 L1738.98 1217.79 L1738.39 1217.79 L1737.81 1217.79 L1737.22 1217.79 L1736.63 1217.79 L1736.05 1217.79 L1735.46 1217.79 L1734.87 1217.79 L1734.29 1217.79 L1733.7 1217.79 L1733.11 1217.79 L1732.53 1217.79 L1731.94 1217.79 L1731.36 1217.79 L1730.77 1217.79 L1730.18 1217.79 L1729.6 1217.79 L1729.01 1217.79 L1728.42 1217.79 L1727.84 1217.79 L1727.25 1217.79 L1726.66 1217.79 L1726.08 1217.79 L1725.49 1217.79 L1724.91 1217.79 L1724.32 1217.79 L1723.73 1217.79 L1723.15 1217.79 L1722.56 1217.79 L1721.97 1217.79 L1721.39 1217.79 L1720.8 1217.79 L1720.21 1217.79 L1719.63 1217.79 L1719.04 1217.79 L1718.45 1217.79 L1717.87 1217.79 L1717.28 1217.79 L1716.7 1217.79 L1716.11 1217.79 L1715.52 1217.79 L1714.94 1217.79 L1714.35 1217.79 L1713.76 1217.79 L1713.18 1217.79 L1712.59 1217.79 L1712 1217.79 L1711.42 1217.79 L1710.83 1217.79 L1710.24 1217.79 L1709.66 1217.79 L1709.07 1217.79 L1708.49 1217.79 L1707.9 1217.79 L1707.31 1217.79 L1706.73 1217.79 L1706.14 1217.79 L1705.55 1217.79 L1704.97 1217.79 L1704.38 1217.79 L1703.79 1217.79 L1703.21 1217.79 L1702.62 1217.79 L1702.04 1217.79 L1701.45 1217.79 L1700.86 1217.79 L1700.28 1217.79 L1699.69 1217.79 L1699.1 1217.79 L1698.52 1217.79 L1697.93 1217.79 L1697.34 1217.79 L1696.76 1217.79 L1696.17 1217.79 L1695.58 1217.79 L1695 1217.79 L1694.41 1217.79 L1693.83 1217.79 L1693.24 1217.79 L1692.65 1217.79 L1692.07 1217.79 L1691.48 1217.79 L1690.89 1217.79 L1690.31 1217.79 L1689.72 1217.79 L1689.13 1217.79 L1688.55 1217.79 L1687.96 1217.79 L1687.37 1217.79 L1686.79 1217.79 L1686.2 1217.79 L1685.62 1217.79 L1685.03 1217.79 L1684.44 1217.79 L1683.86 1217.79 L1683.27 1217.79 L1682.68 1217.79 L1682.1 1217.79 L1681.51 1217.79 L1680.92 1217.79 L1680.34 1217.79 L1679.75 1217.79 L1679.17 1217.79 L1678.58 1217.79 L1677.99 1217.79 L1677.41 1217.79 L1676.82 1217.79 L1676.23 1217.79 L1675.65 1217.79 L1675.06 1217.79 L1674.47 1217.79 L1673.89 1217.79 L1673.3 1217.79 L1672.71 1217.79 L1672.13 1217.79 L1671.54 1217.79 L1670.96 1217.79 L1670.37 1217.79 L1669.78 1217.79 L1669.2 1217.79 L1668.61 1217.79 L1668.02 1217.79 L1667.44 1217.79 L1666.85 1217.79 L1666.26 1217.79 L1665.68 1217.79 L1665.09 1217.79 L1664.5 1217.79 L1663.92 1217.79 L1663.33 1217.79 L1662.75 1217.79 L1662.16 1217.79 L1661.57 1217.79 L1660.99 1217.79 L1660.4 1217.79 L1659.81 1217.79 L1659.23 1217.79 L1658.64 1217.79 L1658.05 1217.79 L1657.47 1217.79 L1656.88 1217.79 L1656.29 1217.79 L1655.71 1217.79 L1655.12 1217.79 L1654.54 1217.79 L1653.95 1217.79 L1653.36 1217.79 L1652.78 1217.79 L1652.19 1217.79 L1651.6 1217.79 L1651.02 1217.79 L1650.43 1217.79 L1649.84 1217.79 L1649.26 1217.79 L1648.67 1217.79 L1648.09 1217.79 L1647.5 1217.79 L1646.91 1217.79 L1646.33 1217.79 L1645.74 1217.79 L1645.15 1217.79 L1644.57 1217.79 L1643.98 1217.79 L1643.39 1217.79 L1642.81 1217.79 L1642.22 1217.79 L1641.63 1217.79 L1641.05 1217.79 L1640.46 1217.79 L1639.88 1217.79 L1639.29 1217.79 L1638.7 1217.79 L1638.12 1217.79 L1637.53 1217.79 L1636.94 1217.79 L1636.36 1217.79 L1635.77 1217.79 L1635.18 1217.79 L1634.6 1217.79 L1634.01 1217.79 L1633.42 1217.79 L1632.84 1217.79 L1632.25 1217.79 L1631.67 1217.79 L1631.08 1217.79 L1630.49 1217.79 L1629.91 1217.79 L1629.32 1217.79 L1628.73 1217.79 L1628.15 1217.79 L1627.56 1217.79 L1626.97 1217.79 L1626.39 1217.79 L1625.8 1217.79 L1625.22 1217.79 L1624.63 1217.79 L1624.04 1217.79 L1623.46 1217.79 L1622.87 1217.79 L1622.28 1217.79 L1621.7 1217.79 L1621.11 1217.79 L1620.52 1217.79 L1619.94 1217.79 L1619.35 1217.79 L1618.76 1217.79 L1618.18 1217.79 L1617.59 1217.79 L1617.01 1217.79 L1616.42 1217.79 L1615.83 1217.79 L1615.25 1217.79 L1614.66 1217.79 L1614.07 1217.79 L1613.49 1217.79 L1612.9 1217.79 L1612.31 1217.79 L1611.73 1217.79 L1611.14 1217.79 L1610.55 1217.79 L1609.97 1217.79 L1609.38 1217.79 L1608.8 1217.79 L1608.21 1217.79 L1607.62 1217.79 L1607.04 1217.79 L1606.45 1217.79 L1605.86 1217.79 L1605.28 1217.79 L1604.69 1217.79 L1604.1 1217.79 L1603.52 1217.79 L1602.93 1217.79 L1602.34 1217.79 L1601.76 1217.79 L1601.17 1217.79 L1600.59 1217.79 L1600 1217.79 L1599.41 1217.79 L1598.83 1217.79 L1598.24 1217.79 L1597.65 1217.79 L1597.07 1217.79 L1596.48 1217.79 L1595.89 1217.79 L1595.31 1217.79 L1594.72 1217.79 L1594.14 1217.79 L1593.55 1217.79 L1592.96 1217.79 L1592.38 1217.79 L1591.79 1217.79 L1591.2 1217.79 L1590.62 1217.79 L1590.03 1217.79 L1589.44 1217.79 L1588.86 1217.79 L1588.27 1217.79 L1587.68 1217.79 L1587.1 1217.79 L1586.51 1217.79 L1585.93 1217.79 L1585.34 1217.79 L1584.75 1217.79 L1584.17 1217.79 L1583.58 1217.79 L1582.99 1217.79 L1582.41 1217.79 L1581.82 1217.79 L1581.23 1217.79 L1580.65 1217.79 L1580.06 1217.79 L1579.47 1217.79 L1578.89 1217.79 L1578.3 1217.79 L1577.72 1217.79 L1577.13 1217.79 L1576.54 1217.79 L1575.96 1217.79 L1575.37 1217.79 L1574.78 1217.79 L1574.2 1217.79 L1573.61 1217.79 L1573.02 1217.79 L1572.44 1217.79 L1571.85 1217.79 L1571.27 1217.79 L1570.68 1217.79 L1570.09 1217.79 L1569.51 1217.79 L1568.92 1217.79 L1568.33 1217.79 L1567.75 1217.79 L1567.16 1217.79 L1566.57 1217.79 L1565.99 1217.79 L1565.4 1217.79 L1564.81 1217.79 L1564.23 1217.79 L1563.64 1217.79 L1563.06 1217.79 L1562.47 1217.79 L1561.88 1217.79 L1561.3 1217.79 L1560.71 1217.79 L1560.12 1217.79 L1559.54 1217.79 L1558.95 1217.79 L1558.36 1217.79 L1557.78 1217.79 L1557.19 1217.79 L1556.6 1217.79 L1556.02 1217.79 L1555.43 1217.79 L1554.85 1217.79 L1554.26 1217.79 L1553.67 1217.79 L1553.09 1217.79 L1552.5 1217.79 L1551.91 1217.79 L1551.33 1217.79 L1550.74 1217.79 L1550.15 1217.79 L1549.57 1217.79 L1548.98 1217.79 L1548.4 1217.79 L1547.81 1217.79 L1547.22 1217.79 L1546.64 1217.79 L1546.05 1217.79 L1545.46 1217.79 L1544.88 1217.79 L1544.29 1217.79 L1543.7 1217.79 L1543.12 1217.79 L1542.53 1217.79 L1541.94 1217.79 L1541.36 1217.79 L1540.77 1217.79 L1540.19 1217.79 L1539.6 1217.79 L1539.01 1217.79 L1538.43 1217.79 L1537.84 1217.79 L1537.25 1217.79 L1536.67 1217.79 L1536.08 1217.79 L1535.49 1217.79 L1534.91 1217.79 L1534.32 1217.79 L1533.73 1217.79 L1533.15 1217.79 L1532.56 1217.79 L1531.98 1217.79 L1531.39 1217.79 L1530.8 1217.79 L1530.22 1217.79 L1529.63 1217.79 L1529.04 1217.79 L1528.46 1217.79 L1527.87 1217.79 L1527.28 1217.79 L1526.7 1217.79 L1526.11 1217.79 L1525.52 1217.79 L1524.94 1217.79 L1524.35 1217.79 L1523.77 1217.79 L1523.18 1217.79 L1522.59 1217.79 L1522.01 1217.79 L1521.42 1217.79 L1520.83 1217.79 L1520.25 1217.79 L1519.66 1217.79 L1519.07 1217.79 L1518.49 1217.79 L1517.9 1217.79 L1517.32 1217.79 L1516.73 1217.79 L1516.14 1217.79 L1515.56 1217.79 L1514.97 1217.79 L1514.38 1217.79 L1513.8 1217.79 L1513.21 1217.79 L1512.62 1217.79 L1512.04 1217.79 L1511.45 1217.79 L1510.86 1217.79 L1510.28 1217.79 L1509.69 1217.79 L1509.11 1217.79 L1508.52 1217.79 L1507.93 1217.79 L1507.35 1217.79 L1506.76 1217.79 L1506.17 1217.79 L1505.59 1217.79 L1505 1217.79 L1504.41 1217.79 L1503.83 1217.79 L1503.24 1217.79 L1502.65 1217.79 L1502.07 1217.79 L1501.48 1217.79 L1500.9 1217.79 L1500.31 1217.79 L1499.72 1217.79 L1499.14 1217.79 L1498.55 1217.79 L1497.96 1217.79 L1497.38 1217.79 L1496.79 1217.79 L1496.2 1217.79 L1495.62 1217.79 L1495.03 1217.79 L1494.45 1217.79 L1493.86 1217.79 L1493.27 1217.79 L1492.69 1217.79 L1492.1 1217.79 L1491.51 1217.79 L1490.93 1217.79 L1490.34 1217.79 L1489.75 1217.79 L1489.17 1217.79 L1488.58 1217.79 L1487.99 1217.79 L1487.41 1217.79 L1486.82 1217.79 L1486.24 1217.79 L1485.65 1217.79 L1485.06 1217.79 L1484.48 1217.79 L1483.89 1217.79 L1483.3 1217.79 L1482.72 1217.79 L1482.13 1217.79 L1481.54 1217.79 L1480.96 1217.79 L1480.37 1217.79 L1479.78 1217.79 L1479.2 1217.79 L1478.61 1217.79 L1478.03 1217.79 L1477.44 1217.79 L1476.85 1217.79 L1476.27 1217.79 L1475.68 1217.79 L1475.09 1217.79 L1474.51 1217.79 L1473.92 1217.79 L1473.33 1217.79 L1472.75 1217.79 L1472.16 1217.79 L1471.57 1217.79 L1470.99 1217.79 L1470.4 1217.79 L1469.82 1217.79 L1469.23 1217.79 L1468.64 1217.79 L1468.06 1217.79 L1467.47 1217.79 L1466.88 1217.79 L1466.3 1217.79 L1465.71 1217.79 L1465.12 1217.79 L1464.54 1217.79 L1463.95 1217.79 L1463.37 1217.79 L1462.78 1217.79 L1462.19 1217.79 L1461.61 1217.79 L1461.02 1217.79 L1460.43 1217.79 L1459.85 1217.79 L1459.26 1217.79 L1458.67 1217.79 L1458.09 1217.79 L1457.5 1217.79 L1456.91 1217.79 L1456.33 1217.79 L1455.74 1217.79 L1455.16 1217.79 L1454.57 1217.79 L1453.98 1217.79 L1453.4 1217.79 L1452.81 1217.79 L1452.22 1217.79 L1451.64 1217.79 L1451.05 1217.79 L1450.46 1217.79 L1449.88 1217.79 L1449.29 1217.79 L1448.7 1217.79 L1448.12 1217.79 L1447.53 1217.79 L1446.95 1217.79 L1446.36 1217.79 L1445.77 1217.79 L1445.19 1217.79 L1444.6 1217.79 L1444.01 1217.79 L1443.43 1217.79 L1442.84 1217.79 L1442.25 1217.79 L1441.67 1217.79 L1441.08 1217.79 L1440.5 1217.79 L1439.91 1217.79 L1439.32 1217.79 L1438.74 1217.79 L1438.15 1217.79 L1437.56 1217.79 L1436.98 1217.79 L1436.39 1217.79 L1435.8 1217.79 L1435.22 1217.79 L1434.63 1217.79 L1434.04 1217.79 L1433.46 1217.79 L1432.87 1217.79 L1432.29 1217.79 L1431.7 1217.79 L1431.11 1217.79 L1430.53 1217.79 L1429.94 1217.79 L1429.35 1217.79 L1428.77 1217.79 L1428.18 1217.79 L1427.59 1217.79 L1427.01 1217.79 L1426.42 1217.79 L1425.83 1217.79 L1425.25 1217.79 L1424.66 1217.79 L1424.08 1217.79 L1423.49 1217.79 L1422.9 1217.79 L1422.32 1217.79 L1421.73 1217.79 L1421.14 1217.79 L1420.56 1217.79 L1419.97 1217.79 L1419.38 1217.79 L1418.8 1217.79 L1418.21 1217.79 L1417.63 1217.79 L1417.04 1217.79 L1416.45 1217.79 L1415.87 1217.79 L1415.28 1217.79 L1414.69 1217.79 L1414.11 1217.79 L1413.52 1217.79 L1412.93 1217.79 L1412.35 1217.79 L1411.76 1217.79 L1411.17 1217.79 L1410.59 1217.79 L1410 1217.79 L1409.42 1217.79 L1408.83 1217.79 L1408.24 1217.79 L1407.66 1217.79 L1407.07 1217.79 L1406.48 1217.79 L1405.9 1217.79 L1405.31 1217.79 L1404.72 1217.79 L1404.14 1217.79 L1403.55 1217.79 L1402.96 1217.79 L1402.38 1217.79 L1401.79 1217.79 L1401.21 1217.79 L1400.62 1217.79 L1400.03 1217.79 L1399.45 1217.79 L1398.86 1217.79 L1398.27 1217.79 L1397.69 1217.79 L1397.1 1217.79 L1396.51 1217.79 L1395.93 1217.79 L1395.34 1217.79 L1394.75 1217.79 L1394.17 1217.79 L1393.58 1217.79 L1393 1217.79 L1392.41 1217.79 L1391.82 1217.79 L1391.24 1217.79 L1390.65 1217.79 L1390.06 1217.79 L1389.48 1217.79 L1388.89 1217.79 L1388.3 1217.79 L1387.72 1217.79 L1387.13 1217.79 L1386.55 1217.79 L1385.96 1217.79 L1385.37 1217.79 L1384.79 1217.79 L1384.2 1217.79 L1383.61 1217.79 L1383.03 1217.79 L1382.44 1217.79 L1381.85 1217.79 L1381.27 1217.79 L1380.68 1217.79 L1380.09 1217.79 L1379.51 1217.79 L1378.92 1217.79 L1378.34 1217.79 L1377.75 1217.79 L1377.16 1217.79 L1376.58 1217.79 L1375.99 1217.79 L1375.4 1217.79 L1374.82 1217.79 L1374.23 1217.79 L1373.64 1217.79 L1373.06 1217.79 L1372.47 1217.79 L1371.88 1217.79 L1371.3 1217.79 L1370.71 1217.79 L1370.13 1217.79 L1369.54 1217.79 L1368.95 1217.79 L1368.37 1217.79 L1367.78 1217.79 L1367.19 1217.79 L1366.61 1217.79 L1366.02 1217.79 L1365.43 1217.79 L1364.85 1217.79 L1364.26 1217.79 L1363.68 1217.79 L1363.09 1217.79 L1362.5 1217.79 L1361.92 1217.79 L1361.33 1217.79 L1360.74 1217.79 L1360.16 1217.79 L1359.57 1217.79 L1358.98 1217.79 L1358.4 1217.79 L1357.81 1217.79 L1357.22 1217.79 L1356.64 1217.79 L1356.05 1217.79 L1355.47 1217.79 L1354.88 1217.79 L1354.29 1217.79 L1353.71 1217.79 L1353.12 1217.79 L1352.53 1217.79 L1351.95 1217.79 L1351.36 1217.79 L1350.77 1217.79 L1350.19 1217.79 L1349.6 1217.79 L1349.01 1217.79 L1348.43 1217.79 L1347.84 1217.79 L1347.26 1217.79 L1346.67 1217.79 L1346.08 1217.79 L1345.5 1217.79 L1344.91 1217.79 L1344.32 1217.79 L1343.74 1217.79 L1343.15 1217.79 L1342.56 1217.79 L1341.98 1217.79 L1341.39 1217.79 L1340.8 1217.79 L1340.22 1217.79 L1339.63 1217.79 L1339.05 1217.79 L1338.46 1217.79 L1337.87 1217.79 L1337.29 1217.79 L1336.7 1217.79 L1336.11 1217.79 L1335.53 1217.79 L1334.94 1217.79 L1334.35 1217.79 L1333.77 1217.79 L1333.18 1217.79 L1332.6 1217.79 L1332.01 1217.79 L1331.42 1217.79 L1330.84 1217.79 L1330.25 1217.79 L1329.66 1217.79 L1329.08 1217.79 L1328.49 1217.79 L1327.9 1217.79 L1327.32 1217.79 L1326.73 1217.79 L1326.14 1217.79 L1325.56 1217.79 L1324.97 1217.79 L1324.39 1217.79 L1323.8 1217.79 L1323.21 1217.79 L1322.63 1217.79 L1322.04 1217.79 L1321.45 1217.79 L1320.87 1217.79 L1320.28 1217.79 L1319.69 1217.79 L1319.11 1217.79 L1318.52 1217.79 L1317.93 1217.79 L1317.35 1217.79 L1316.76 1217.79 L1316.18 1217.79 L1315.59 1217.79 L1315 1217.79 L1314.42 1217.79 L1313.83 1217.79 L1313.24 1217.79 L1312.66 1217.79 L1312.07 1217.79 L1311.48 1217.79 L1310.9 1217.79 L1310.31 1217.79 L1309.73 1217.79 L1309.14 1217.79 L1308.55 1217.79 L1307.97 1217.79 L1307.38 1217.79 L1306.79 1217.79 L1306.21 1217.79 L1305.62 1217.79 L1305.03 1217.79 L1304.45 1217.79 L1303.86 1217.79 L1303.27 1217.79 L1302.69 1217.79 L1302.1 1217.79 L1301.52 1217.79 L1300.93 1217.79 L1300.34 1217.79 L1299.76 1217.79 L1299.17 1217.79 L1298.58 1217.79 L1298 1217.79 L1297.41 1217.79 L1296.82 1217.79 L1296.24 1217.79 L1295.65 1217.79 L1295.06 1217.79 L1294.48 1217.79 L1293.89 1217.79 L1293.31 1217.79 L1292.72 1217.79 L1292.13 1217.79 L1291.55 1217.79 L1290.96 1217.79 L1290.37 1217.79 L1289.79 1217.79 L1289.2 1217.79 L1288.61 1217.79 L1288.03 1217.79 L1287.44 1217.79 L1286.86 1217.79 L1286.27 1217.79 L1285.68 1217.79 L1285.1 1217.79 L1284.51 1217.79 L1283.92 1217.79 L1283.34 1217.79 L1282.75 1217.79 L1282.16 1217.79 L1281.58 1217.79 L1280.99 1217.79 L1280.4 1217.79 L1279.82 1217.79 L1279.23 1217.79 L1278.65 1217.79 L1278.06 1217.79 L1277.47 1217.79 L1276.89 1217.79 L1276.3 1217.79 L1275.71 1217.79 L1275.13 1217.79 L1274.54 1217.79 L1273.95 1217.79 L1273.37 1217.79 L1272.78 1217.79 L1272.19 1217.79 L1271.61 1217.79 L1271.02 1217.79 L1270.44 1217.79 L1269.85 1217.79 L1269.26 1217.79 L1268.68 1217.79 L1268.09 1217.79 L1267.5 1217.79 L1266.92 1217.79 L1266.33 1217.79 L1265.74 1217.79 L1265.16 1217.79 L1264.57 1217.79 L1263.98 1217.79 L1263.4 1217.79 L1262.81 1217.79 L1262.23 1217.79 L1261.64 1217.79 L1261.05 1217.79 L1260.47 1217.79 L1259.88 1217.79 L1259.29 1217.79 L1258.71 1217.79 L1258.12 1217.79 L1257.53 1217.79 L1256.95 1217.79 L1256.36 1217.79 L1255.78 1217.79 L1255.19 1217.79 L1254.6 1217.79 L1254.02 1217.79 L1253.43 1217.79 L1252.84 1217.79 L1252.26 1217.79 L1251.67 1217.79 L1251.08 1217.79 L1250.5 1217.79 L1249.91 1217.79 L1249.32 1217.79 L1248.74 1217.79 L1248.15 1217.79 L1247.57 1217.79 L1246.98 1217.79 L1246.39 1217.79 L1245.81 1217.79 L1245.22 1217.79 L1244.63 1217.79 L1244.05 1217.79 L1243.46 1217.79 L1242.87 1217.79 L1242.29 1217.79 L1241.7 1217.79 L1241.11 1217.79 L1240.53 1217.79 L1239.94 1217.79 L1239.36 1217.79 L1238.77 1217.79 L1238.18 1217.79 L1237.6 1217.79 L1237.01 1217.79 L1236.42 1217.79 L1235.84 1217.79 L1235.25 1217.79 L1234.66 1217.79 L1234.08 1217.79 L1233.49 1217.79 L1232.91 1217.79 L1232.32 1217.79 L1231.73 1217.79 L1231.15 1217.79 L1230.56 1217.79 L1229.97 1217.79 L1229.39 1217.79 L1228.8 1217.79 L1228.21 1217.79 L1227.63 1217.79 L1227.04 1217.79 L1226.45 1217.79 L1225.87 1217.79 L1225.28 1217.79 L1224.7 1217.79 L1224.11 1217.79 L1223.52 1217.79 L1222.94 1217.79 L1222.35 1217.79 L1221.76 1217.79 L1221.18 1217.79 L1220.59 1217.79 L1220 1217.79 L1219.42 1217.79 L1218.83 1217.79 L1218.24 1217.79 L1217.66 1217.79 L1217.07 1217.79 L1216.49 1217.79 L1215.9 1217.79 L1215.31 1217.79 L1214.73 1217.79 L1214.14 1217.79 L1213.55 1217.79 L1212.97 1217.79 L1212.38 1217.79 L1211.79 1217.79 L1211.21 1217.79 L1210.62 1217.79 L1210.03 1217.79 L1209.45 1217.79 L1208.86 1217.79 L1208.28 1217.79 L1207.69 1217.79 L1207.1 1217.79 L1206.52 1217.79 L1205.93 1217.79 L1205.34 1217.79 L1204.76 1217.79 L1204.17 1217.79 L1203.58 1217.79 L1203 1217.79 L1202.41 1217.79 L1201.83 1217.79 L1201.24 1217.79 L1200.65 1217.79 L1200.07 1217.79 L1199.48 1217.79 L1198.89 1217.79 L1198.31 1217.79 L1197.72 1217.79 L1197.13 1217.79 L1196.55 1217.79 L1195.96 1217.79 L1195.37 1217.79 L1194.79 1217.79 L1194.2 1217.79 L1193.62 1217.79 L1193.03 1217.79 L1192.44 1217.79 L1191.86 1217.79 L1191.27 1217.79 L1190.68 1217.79 L1190.1 1217.79 L1189.51 1217.79 L1188.92 1217.79 L1188.34 1217.79 L1187.75 1217.79 L1187.16 1217.79 L1186.58 1217.79 L1185.99 1217.79 L1185.41 1217.79 L1184.82 1217.79 L1184.23 1217.79 L1183.65 1217.79 L1183.06 1217.79 L1182.47 1217.79 L1181.89 1217.79 L1181.3 1217.79 L1180.71 1217.79 L1180.13 1217.79 L1179.54 1217.79 L1178.96 1217.79 L1178.37 1217.79 L1177.78 1217.79 L1177.2 1217.79 L1176.61 1217.79 L1176.02 1217.79 L1175.44 1217.79 L1174.85 1217.79 L1174.26 1217.79 L1173.68 1217.79 L1173.09 1217.79 L1172.5 1217.79 L1171.92 1217.79 L1171.33 1217.79 L1170.75 1217.79 L1170.16 1217.79 L1169.57 1217.79 L1168.99 1217.79 L1168.4 1217.79 L1167.81 1217.79 L1167.23 1217.79 L1166.64 1217.79 L1166.05 1217.79 L1165.47 1217.79 L1164.88 1217.79 L1164.29 1217.79 L1163.71 1217.79 L1163.12 1217.79 L1162.54 1217.79 L1161.95 1217.79 L1161.36 1217.79 L1160.78 1217.79 L1160.19 1217.79 L1159.6 1217.79 L1159.02 1217.79 L1158.43 1217.79 L1157.84 1217.79 L1157.26 1217.79 L1156.67 1217.79 L1156.09 1217.79 L1155.5 1217.79 L1154.91 1217.79 L1154.33 1217.79 L1153.74 1217.79 L1153.15 1217.79 L1152.57 1217.79 L1151.98 1217.79 L1151.39 1217.79 L1150.81 1217.79 L1150.22 1217.79 L1149.63 1217.79 L1149.05 1217.79 L1148.46 1217.79 L1147.88 1217.79 L1147.29 1217.79 L1146.7 1217.79 L1146.12 1217.79 L1145.53 1217.79 L1144.94 1217.79 L1144.36 1217.79 L1143.77 1217.79 L1143.18 1217.79 L1142.6 1217.79 L1142.01 1217.79 L1141.42 1217.79 L1140.84 1217.79 L1140.25 1217.79 L1139.67 1217.79 L1139.08 1217.79 L1138.49 1217.79 L1137.91 1217.79 L1137.32 1217.79 L1136.73 1217.79 L1136.15 1217.79 L1135.56 1217.79 L1134.97 1217.79 L1134.39 1217.79 L1133.8 1217.79 L1133.21 1217.79 L1132.63 1217.79 L1132.04 1217.79 L1131.46 1217.79 L1130.87 1217.79 L1130.28 1217.79 L1129.7 1217.79 L1129.11 1217.79 L1128.52 1217.79 L1127.94 1217.79 L1127.35 1217.79 L1126.76 1217.79 L1126.18 1217.79 L1125.59 1217.79 L1125.01 1217.79 L1124.42 1217.79 L1123.83 1217.79 L1123.25 1217.79 L1122.66 1217.79 L1122.07 1217.79 L1121.49 1217.79 L1120.9 1217.79 L1120.31 1217.79 L1119.73 1217.79 L1119.14 1217.79 L1118.55 1217.79 L1117.97 1217.79 L1117.38 1217.79 L1116.8 1217.79 L1116.21 1217.79 L1115.62 1217.79 L1115.04 1217.79 L1114.45 1217.79 L1113.86 1217.79 L1113.28 1217.79 L1112.69 1217.79 L1112.1 1217.79 L1111.52 1217.79 L1110.93 1217.79 L1110.34 1217.79 L1109.76 1217.79 L1109.17 1217.79 L1108.59 1217.79 L1108 1217.79 L1107.41 1217.79 L1106.83 1217.79 L1106.24 1217.79 L1105.65 1217.79 L1105.07 1217.79 L1104.48 1217.79 L1103.89 1217.79 L1103.31 1217.79 L1102.72 1217.79 L1102.14 1217.79 L1101.55 1217.79 L1100.96 1217.79 L1100.38 1217.79 L1099.79 1217.79 L1099.2 1217.79 L1098.62 1217.79 L1098.03 1217.79 L1097.44 1217.79 L1096.86 1217.79 L1096.27 1217.79 L1095.68 1217.79 L1095.1 1217.79 L1094.51 1217.79 L1093.93 1217.79 L1093.34 1217.79 L1092.75 1217.79 L1092.17 1217.79 L1091.58 1217.79 L1090.99 1217.79 L1090.41 1217.79 L1089.82 1217.79 L1089.23 1217.79 L1088.65 1217.79 L1088.06 1217.79 L1087.47 1217.79 L1086.89 1217.79 L1086.3 1217.79 L1085.72 1217.79 L1085.13 1217.79 L1084.54 1217.79 L1083.96 1217.79 L1083.37 1217.79 L1082.78 1217.79 L1082.2 1217.79 L1081.61 1217.79 L1081.02 1217.79 L1080.44 1217.79 L1079.85 1217.79 L1079.26 1217.79 L1078.68 1217.79 L1078.09 1217.79 L1077.51 1217.79 L1076.92 1217.79 L1076.33 1217.79 L1075.75 1217.79 L1075.16 1217.79 L1074.57 1217.79 L1073.99 1217.79 L1073.4 1217.79 L1072.81 1217.79 L1072.23 1217.79 L1071.64 1217.79 L1071.06 1217.79 L1070.47 1217.79 L1069.88 1217.79 L1069.3 1217.79 L1068.71 1217.79 L1068.12 1217.79 L1067.54 1217.79 L1066.95 1217.79 L1066.36 1217.79 L1065.78 1217.79 L1065.19 1217.79 L1064.6 1217.79 L1064.02 1217.79 L1063.43 1217.79 L1062.85 1217.79 L1062.26 1217.79 L1061.67 1217.79 L1061.09 1217.79 L1060.5 1217.79 L1059.91 1217.79 L1059.33 1217.79 L1058.74 1217.79 L1058.15 1217.79 L1057.57 1217.79 L1056.98 1217.79 L1056.39 1217.79 L1055.81 1217.79 L1055.22 1217.79 L1054.64 1217.79 L1054.05 1217.79 L1053.46 1217.79 L1052.88 1217.79 L1052.29 1217.79 L1051.7 1217.79 L1051.12 1217.79 L1050.53 1217.79 L1049.94 1217.79 L1049.36 1217.79 L1048.77 1217.79 L1048.19 1217.79 L1047.6 1217.79 L1047.01 1217.79 L1046.43 1217.79 L1045.84 1217.79 L1045.25 1217.79 L1044.67 1217.79 L1044.08 1217.79 L1043.49 1217.79 L1042.91 1217.79 L1042.32 1217.79 L1041.73 1217.79 L1041.15 1217.79 L1040.56 1217.79 L1039.98 1217.79 L1039.39 1217.79 L1038.8 1217.79 L1038.22 1217.79 L1037.63 1217.79 L1037.04 1217.79 L1036.46 1217.79 L1035.87 1217.79 L1035.28 1217.79 L1034.7 1217.79 L1034.11 1217.79 L1033.52 1217.79 L1032.94 1217.79 L1032.35 1217.79 L1031.77 1217.79 L1031.18 1217.79 L1030.59 1217.79 L1030.01 1217.79 L1029.42 1217.79 L1028.83 1217.79 L1028.25 1217.79 L1027.66 1217.79 L1027.07 1217.79 L1026.49 1217.79 L1025.9 1217.79 L1025.32 1217.79 L1024.73 1217.79 L1024.14 1217.79 L1023.56 1217.79 L1022.97 1217.79 L1022.38 1217.79 L1021.8 1217.79 L1021.21 1217.79 L1020.62 1217.79 L1020.04 1217.79 L1019.45 1217.79 L1018.86 1217.79 L1018.28 1217.79 L1017.69 1217.79 L1017.11 1217.79 L1016.52 1217.79 L1015.93 1217.79 L1015.35 1217.79 L1014.76 1217.79 L1014.17 1217.79 L1013.59 1217.79 L1013 1217.79 L1012.41 1217.79 L1011.83 1217.79 L1011.24 1217.79 L1010.65 1217.79 L1010.07 1217.79 L1009.48 1217.79 L1008.9 1217.79 L1008.31 1217.79 L1007.72 1217.79 L1007.14 1217.79 L1006.55 1217.79 L1005.96 1217.79 L1005.38 1217.79 L1004.79 1217.79 L1004.2 1217.79 L1003.62 1217.79 L1003.03 1217.79 L1002.44 1217.79 L1001.86 1217.79 L1001.27 1217.79 L1000.69 1217.79 L1000.1 1217.79 L999.513 1217.79 L998.926 1217.79 L998.34 1217.79 L997.754 1217.79 L997.167 1217.79 L996.581 1217.79 L995.994 1217.79 L995.408 1217.79 L994.822 1217.79 L994.235 1217.79 L993.649 1217.79 L993.062 1217.79 L992.476 1217.79 L991.889 1217.79 L991.303 1217.79 L990.717 1217.79 L990.13 1217.79 L989.544 1217.79 L988.957 1217.79 L988.371 1217.79 L987.785 1217.79 L987.198 1217.79 L986.612 1217.79 L986.025 1217.79  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1217.86 986.612,1217.86 987.198,1217.86 987.785,1217.86 988.371,1217.86 988.957,1217.86 989.544,1217.86 990.13,1217.86 990.717,1217.86 991.303,1217.86 991.889,1217.86 992.476,1217.86 993.062,1217.86 993.649,1217.86 994.235,1217.86 994.822,1217.86 995.408,1217.86 995.994,1217.86 996.581,1217.86 997.167,1217.86 997.754,1217.86 998.34,1217.86 998.926,1217.86 999.513,1217.86 1000.1,1217.86 1000.69,1217.86 1001.27,1217.86 1001.86,1217.86 1002.44,1217.86 1003.03,1217.86 1003.62,1217.86 1004.2,1217.86 1004.79,1217.86 1005.38,1217.86 1005.96,1217.86 1006.55,1217.86 1007.14,1217.86 1007.72,1217.86 1008.31,1217.86 1008.9,1217.86 1009.48,1217.86 1010.07,1217.86 1010.65,1217.86 1011.24,1217.86 1011.83,1217.86 1012.41,1217.86 1013,1217.86 1013.59,1217.86 1014.17,1217.86 1014.76,1217.86 1015.35,1217.86 1015.93,1217.86 1016.52,1217.86 1017.11,1217.86 1017.69,1217.86 1018.28,1217.86 1018.86,1217.86 1019.45,1217.86 1020.04,1217.86 1020.62,1217.86 1021.21,1217.86 1021.8,1217.86 1022.38,1217.86 1022.97,1217.86 1023.56,1217.86 1024.14,1217.86 1024.73,1217.86 1025.32,1217.86 1025.9,1217.86 1026.49,1217.86 1027.07,1217.86 1027.66,1217.86 1028.25,1217.86 1028.83,1217.86 1029.42,1217.86 1030.01,1217.86 1030.59,1217.86 1031.18,1217.86 1031.77,1217.86 1032.35,1217.86 1032.94,1217.86 1033.52,1217.86 1034.11,1217.86 1034.7,1217.86 1035.28,1217.86 1035.87,1217.86 1036.46,1217.86 1037.04,1217.86 1037.63,1217.86 1038.22,1217.86 1038.8,1217.86 1039.39,1217.86 1039.98,1217.86 1040.56,1217.86 1041.15,1217.86 1041.73,1217.86 1042.32,1217.86 1042.91,1217.86 1043.49,1217.86 1044.08,1217.86 1044.67,1217.86 1045.25,1217.86 1045.84,1217.86 1046.43,1217.86 1047.01,1217.86 1047.6,1217.86 1048.19,1217.86 1048.77,1217.86 1049.36,1217.86 1049.94,1217.86 1050.53,1217.86 1051.12,1217.86 1051.7,1217.86 1052.29,1217.86 1052.88,1217.86 1053.46,1217.86 1054.05,1217.86 1054.64,1217.86 1055.22,1217.86 1055.81,1217.86 1056.39,1217.86 1056.98,1217.86 1057.57,1217.86 1058.15,1217.86 1058.74,1217.86 1059.33,1217.86 1059.91,1217.86 1060.5,1217.86 1061.09,1217.86 1061.67,1217.86 1062.26,1217.86 1062.85,1217.86 1063.43,1217.86 1064.02,1217.86 1064.6,1217.86 1065.19,1217.86 1065.78,1217.86 1066.36,1217.86 1066.95,1217.86 1067.54,1217.86 1068.12,1217.86 1068.71,1217.86 1069.3,1217.86 1069.88,1217.86 1070.47,1217.86 1071.06,1217.86 1071.64,1217.86 1072.23,1217.86 1072.81,1217.86 1073.4,1217.86 1073.99,1217.86 1074.57,1217.86 1075.16,1217.86 1075.75,1217.86 1076.33,1217.86 1076.92,1217.86 1077.51,1217.86 1078.09,1217.86 1078.68,1217.86 1079.26,1217.86 1079.85,1217.86 1080.44,1217.86 1081.02,1217.86 1081.61,1217.86 1082.2,1217.86 1082.78,1217.86 1083.37,1217.86 1083.96,1217.86 1084.54,1217.86 1085.13,1217.86 1085.72,1217.86 1086.3,1217.86 1086.89,1217.86 1087.47,1217.86 1088.06,1217.86 1088.65,1217.86 1089.23,1217.86 1089.82,1217.86 1090.41,1217.86 1090.99,1217.86 1091.58,1217.86 1092.17,1217.86 1092.75,1217.86 1093.34,1217.86 1093.93,1217.86 1094.51,1217.86 1095.1,1217.86 1095.68,1217.86 1096.27,1217.86 1096.86,1217.86 1097.44,1217.86 1098.03,1217.86 1098.62,1217.86 1099.2,1217.86 1099.79,1217.86 1100.38,1217.86 1100.96,1217.86 1101.55,1217.86 1102.14,1217.86 1102.72,1217.86 1103.31,1217.86 1103.89,1217.86 1104.48,1217.86 1105.07,1217.86 1105.65,1217.86 1106.24,1217.86 1106.83,1217.86 1107.41,1217.86 1108,1217.86 1108.59,1217.86 1109.17,1217.86 1109.76,1217.86 1110.34,1217.86 1110.93,1217.86 1111.52,1217.86 1112.1,1217.86 1112.69,1217.86 1113.28,1217.86 1113.86,1217.86 1114.45,1217.86 1115.04,1217.86 1115.62,1217.86 1116.21,1217.86 1116.8,1217.86 1117.38,1217.86 1117.97,1217.86 1118.55,1217.86 1119.14,1217.86 1119.73,1217.86 1120.31,1217.86 1120.9,1217.86 1121.49,1217.86 1122.07,1217.86 1122.66,1217.86 1123.25,1217.86 1123.83,1217.86 1124.42,1217.86 1125.01,1217.86 1125.59,1217.86 1126.18,1217.86 1126.76,1217.86 1127.35,1217.86 1127.94,1217.86 1128.52,1217.86 1129.11,1217.86 1129.7,1217.86 1130.28,1217.86 1130.87,1217.86 1131.46,1217.86 1132.04,1217.86 1132.63,1217.86 1133.21,1217.86 1133.8,1217.86 1134.39,1217.86 1134.97,1217.86 1135.56,1217.86 1136.15,1217.86 1136.73,1217.86 1137.32,1217.86 1137.91,1217.86 1138.49,1217.86 1139.08,1217.86 1139.67,1217.86 1140.25,1217.86 1140.84,1217.86 1141.42,1217.86 1142.01,1217.86 1142.6,1217.86 1143.18,1217.86 1143.77,1217.86 1144.36,1217.86 1144.94,1217.86 1145.53,1217.86 1146.12,1217.86 1146.7,1217.86 1147.29,1217.86 1147.88,1217.86 1148.46,1217.86 1149.05,1217.86 1149.63,1217.86 1150.22,1217.86 1150.81,1217.86 1151.39,1217.86 1151.98,1217.86 1152.57,1217.86 1153.15,1217.86 1153.74,1217.86 1154.33,1217.86 1154.91,1217.86 1155.5,1217.86 1156.09,1217.86 1156.67,1217.86 1157.26,1217.86 1157.84,1217.86 1158.43,1217.86 1159.02,1217.86 1159.6,1217.86 1160.19,1217.86 1160.78,1217.86 1161.36,1217.86 1161.95,1217.86 1162.54,1217.86 1163.12,1217.86 1163.71,1217.86 1164.29,1217.86 1164.88,1217.86 1165.47,1217.86 1166.05,1217.86 1166.64,1217.86 1167.23,1217.86 1167.81,1217.86 1168.4,1217.86 1168.99,1217.86 1169.57,1217.86 1170.16,1217.86 1170.75,1217.86 1171.33,1217.86 1171.92,1217.86 1172.5,1217.86 1173.09,1217.86 1173.68,1217.86 1174.26,1217.86 1174.85,1217.86 1175.44,1217.86 1176.02,1217.86 1176.61,1217.86 1177.2,1217.86 1177.78,1217.86 1178.37,1217.86 1178.96,1217.86 1179.54,1217.86 1180.13,1217.86 1180.71,1217.86 1181.3,1217.86 1181.89,1217.86 1182.47,1217.86 1183.06,1217.86 1183.65,1217.86 1184.23,1217.86 1184.82,1217.86 1185.41,1217.86 1185.99,1217.86 1186.58,1217.86 1187.16,1217.86 1187.75,1217.86 1188.34,1217.86 1188.92,1217.86 1189.51,1217.86 1190.1,1217.86 1190.68,1217.86 1191.27,1217.86 1191.86,1217.86 1192.44,1217.86 1193.03,1217.86 1193.62,1217.86 1194.2,1217.86 1194.79,1217.86 1195.37,1217.86 1195.96,1217.86 1196.55,1217.86 1197.13,1217.86 1197.72,1217.86 1198.31,1217.86 1198.89,1217.86 1199.48,1217.86 1200.07,1217.86 1200.65,1217.86 1201.24,1217.86 1201.83,1217.86 1202.41,1217.86 1203,1217.86 1203.58,1217.86 1204.17,1217.86 1204.76,1217.86 1205.34,1217.86 1205.93,1217.86 1206.52,1217.86 1207.1,1217.86 1207.69,1217.86 1208.28,1217.86 1208.86,1217.86 1209.45,1217.86 1210.03,1217.86 1210.62,1217.86 1211.21,1217.86 1211.79,1217.86 1212.38,1217.86 1212.97,1217.86 1213.55,1217.86 1214.14,1217.86 1214.73,1217.86 1215.31,1217.86 1215.9,1217.86 1216.49,1217.86 1217.07,1217.86 1217.66,1217.86 1218.24,1217.86 1218.83,1217.86 1219.42,1217.86 1220,1217.86 1220.59,1217.86 1221.18,1217.86 1221.76,1217.86 1222.35,1217.86 1222.94,1217.86 1223.52,1217.86 1224.11,1217.86 1224.7,1217.86 1225.28,1217.86 1225.87,1217.86 1226.45,1217.86 1227.04,1217.86 1227.63,1217.86 1228.21,1217.86 1228.8,1217.86 1229.39,1217.86 1229.97,1217.86 1230.56,1217.86 1231.15,1217.86 1231.73,1217.86 1232.32,1217.86 1232.91,1217.86 1233.49,1217.86 1234.08,1217.86 1234.66,1217.86 1235.25,1217.86 1235.84,1217.86 1236.42,1217.86 1237.01,1217.86 1237.6,1217.86 1238.18,1217.86 1238.77,1217.86 1239.36,1217.86 1239.94,1217.86 1240.53,1217.86 1241.11,1217.86 1241.7,1217.86 1242.29,1217.86 1242.87,1217.86 1243.46,1217.86 1244.05,1217.86 1244.63,1217.86 1245.22,1217.86 1245.81,1217.86 1246.39,1217.86 1246.98,1217.86 1247.57,1217.86 1248.15,1217.86 1248.74,1217.86 1249.32,1217.86 1249.91,1217.86 1250.5,1217.86 1251.08,1217.86 1251.67,1217.86 1252.26,1217.86 1252.84,1217.86 1253.43,1217.86 1254.02,1217.86 1254.6,1217.86 1255.19,1217.86 1255.78,1217.86 1256.36,1217.86 1256.95,1217.86 1257.53,1217.86 1258.12,1217.86 1258.71,1217.86 1259.29,1217.86 1259.88,1217.86 1260.47,1217.86 1261.05,1217.86 1261.64,1217.86 1262.23,1217.86 1262.81,1217.86 1263.4,1217.86 1263.98,1217.86 1264.57,1217.86 1265.16,1217.86 1265.74,1217.86 1266.33,1217.86 1266.92,1217.86 1267.5,1217.86 1268.09,1217.86 1268.68,1217.86 1269.26,1217.86 1269.85,1217.86 1270.44,1217.86 1271.02,1217.86 1271.61,1217.86 1272.19,1217.86 1272.78,1217.86 1273.37,1217.86 1273.95,1217.86 1274.54,1217.86 1275.13,1217.86 1275.71,1217.86 1276.3,1217.86 1276.89,1217.86 1277.47,1217.86 1278.06,1217.86 1278.65,1217.86 1279.23,1217.86 1279.82,1217.86 1280.4,1217.86 1280.99,1217.86 1281.58,1217.86 1282.16,1217.86 1282.75,1217.86 1283.34,1217.86 1283.92,1217.86 1284.51,1217.86 1285.1,1217.86 1285.68,1217.86 1286.27,1217.86 1286.86,1217.86 1287.44,1217.86 1288.03,1217.86 1288.61,1217.86 1289.2,1217.86 1289.79,1217.86 1290.37,1217.86 1290.96,1217.86 1291.55,1217.86 1292.13,1217.86 1292.72,1217.86 1293.31,1217.86 1293.89,1217.86 1294.48,1217.86 1295.06,1217.86 1295.65,1217.86 1296.24,1217.86 1296.82,1217.86 1297.41,1217.86 1298,1217.86 1298.58,1217.86 1299.17,1217.86 1299.76,1217.86 1300.34,1217.86 1300.93,1217.86 1301.52,1217.86 1302.1,1217.86 1302.69,1217.86 1303.27,1217.86 1303.86,1217.86 1304.45,1217.86 1305.03,1217.86 1305.62,1217.86 1306.21,1217.86 1306.79,1217.86 1307.38,1217.86 1307.97,1217.86 1308.55,1217.86 1309.14,1217.86 1309.73,1217.86 1310.31,1217.86 1310.9,1217.86 1311.48,1217.86 1312.07,1217.86 1312.66,1217.86 1313.24,1217.86 1313.83,1217.86 1314.42,1217.86 1315,1217.86 1315.59,1217.86 1316.18,1217.86 1316.76,1217.86 1317.35,1217.86 1317.93,1217.86 1318.52,1217.86 1319.11,1217.86 1319.69,1217.86 1320.28,1217.86 1320.87,1217.86 1321.45,1217.86 1322.04,1217.86 1322.63,1217.86 1323.21,1217.86 1323.8,1217.86 1324.39,1217.86 1324.97,1217.86 1325.56,1217.86 1326.14,1217.86 1326.73,1217.86 1327.32,1217.86 1327.9,1217.86 1328.49,1217.86 1329.08,1217.86 1329.66,1217.86 1330.25,1217.86 1330.84,1217.86 1331.42,1217.86 1332.01,1217.86 1332.6,1217.86 1333.18,1217.86 1333.77,1217.86 1334.35,1217.86 1334.94,1217.86 1335.53,1217.86 1336.11,1217.86 1336.7,1217.86 1337.29,1217.86 1337.87,1217.86 1338.46,1217.86 1339.05,1217.86 1339.63,1217.86 1340.22,1217.86 1340.8,1217.86 1341.39,1217.86 1341.98,1217.86 1342.56,1217.86 1343.15,1217.86 1343.74,1217.86 1344.32,1217.86 1344.91,1217.86 1345.5,1217.86 1346.08,1217.86 1346.67,1217.86 1347.26,1217.86 1347.84,1217.86 1348.43,1217.86 1349.01,1217.86 1349.6,1217.86 1350.19,1217.86 1350.77,1217.86 1351.36,1217.86 1351.95,1217.86 1352.53,1217.86 1353.12,1217.86 1353.71,1217.86 1354.29,1217.86 1354.88,1217.86 1355.47,1217.86 1356.05,1217.86 1356.64,1217.86 1357.22,1217.86 1357.81,1217.86 1358.4,1217.86 1358.98,1217.86 1359.57,1217.86 1360.16,1217.86 1360.74,1217.86 1361.33,1217.86 1361.92,1217.86 1362.5,1217.86 1363.09,1217.86 1363.68,1217.86 1364.26,1217.86 1364.85,1217.86 1365.43,1217.86 1366.02,1217.86 1366.61,1217.86 1367.19,1217.86 1367.78,1217.86 1368.37,1217.86 1368.95,1217.86 1369.54,1217.86 1370.13,1217.86 1370.71,1217.86 1371.3,1217.86 1371.88,1217.86 1372.47,1217.86 1373.06,1217.86 1373.64,1217.86 1374.23,1217.86 1374.82,1217.86 1375.4,1217.86 1375.99,1217.86 1376.58,1217.86 1377.16,1217.86 1377.75,1217.86 1378.34,1217.86 1378.92,1217.86 1379.51,1217.86 1380.09,1217.86 1380.68,1217.86 1381.27,1217.86 1381.85,1217.86 1382.44,1217.86 1383.03,1217.86 1383.61,1217.86 1384.2,1217.86 1384.79,1217.86 1385.37,1217.86 1385.96,1217.86 1386.55,1217.86 1387.13,1217.86 1387.72,1217.86 1388.3,1217.86 1388.89,1217.86 1389.48,1217.86 1390.06,1217.86 1390.65,1217.86 1391.24,1217.86 1391.82,1217.86 1392.41,1217.86 1393,1217.86 1393.58,1217.86 1394.17,1217.86 1394.75,1217.86 1395.34,1217.86 1395.93,1217.86 1396.51,1217.86 1397.1,1217.86 1397.69,1217.86 1398.27,1217.86 1398.86,1217.86 1399.45,1217.86 1400.03,1217.86 1400.62,1217.86 1401.21,1217.86 1401.79,1217.86 1402.38,1217.86 1402.96,1217.86 1403.55,1217.86 1404.14,1217.86 1404.72,1217.86 1405.31,1217.86 1405.9,1217.86 1406.48,1217.86 1407.07,1217.86 1407.66,1217.86 1408.24,1217.86 1408.83,1217.86 1409.42,1217.86 1410,1217.86 1410.59,1217.86 1411.17,1217.86 1411.76,1217.86 1412.35,1217.86 1412.93,1217.86 1413.52,1217.86 1414.11,1217.86 1414.69,1217.86 1415.28,1217.86 1415.87,1217.86 1416.45,1217.86 1417.04,1217.86 1417.63,1217.86 1418.21,1217.86 1418.8,1217.86 1419.38,1217.86 1419.97,1217.86 1420.56,1217.86 1421.14,1217.86 1421.73,1217.86 1422.32,1217.86 1422.9,1217.86 1423.49,1217.86 1424.08,1217.86 1424.66,1217.86 1425.25,1217.86 1425.83,1217.86 1426.42,1217.86 1427.01,1217.86 1427.59,1217.86 1428.18,1217.86 1428.77,1217.86 1429.35,1217.86 1429.94,1217.86 1430.53,1217.86 1431.11,1217.86 1431.7,1217.86 1432.29,1217.86 1432.87,1217.86 1433.46,1217.86 1434.04,1217.86 1434.63,1217.86 1435.22,1217.86 1435.8,1217.86 1436.39,1217.86 1436.98,1217.86 1437.56,1217.86 1438.15,1217.86 1438.74,1217.86 1439.32,1217.86 1439.91,1217.86 1440.5,1217.86 1441.08,1217.86 1441.67,1217.86 1442.25,1217.86 1442.84,1217.86 1443.43,1217.86 1444.01,1217.86 1444.6,1217.86 1445.19,1217.86 1445.77,1217.86 1446.36,1217.86 1446.95,1217.86 1447.53,1217.86 1448.12,1217.86 1448.7,1217.86 1449.29,1217.86 1449.88,1217.86 1450.46,1217.86 1451.05,1217.86 1451.64,1217.86 1452.22,1217.86 1452.81,1217.86 1453.4,1217.86 1453.98,1217.86 1454.57,1217.86 1455.16,1217.86 1455.74,1217.86 1456.33,1217.86 1456.91,1217.86 1457.5,1217.86 1458.09,1217.86 1458.67,1217.86 1459.26,1217.86 1459.85,1217.86 1460.43,1217.86 1461.02,1217.86 1461.61,1217.86 1462.19,1217.86 1462.78,1217.86 1463.37,1217.86 1463.95,1217.86 1464.54,1217.86 1465.12,1217.86 1465.71,1217.86 1466.3,1217.86 1466.88,1217.86 1467.47,1217.86 1468.06,1217.86 1468.64,1217.86 1469.23,1217.86 1469.82,1217.86 1470.4,1217.86 1470.99,1217.86 1471.57,1217.86 1472.16,1217.86 1472.75,1217.86 1473.33,1217.86 1473.92,1217.86 1474.51,1217.86 1475.09,1217.86 1475.68,1217.86 1476.27,1217.86 1476.85,1217.86 1477.44,1217.86 1478.03,1217.86 1478.61,1217.86 1479.2,1217.86 1479.78,1217.86 1480.37,1217.86 1480.96,1217.86 1481.54,1217.86 1482.13,1217.86 1482.72,1217.86 1483.3,1217.86 1483.89,1217.86 1484.48,1217.86 1485.06,1217.86 1485.65,1217.86 1486.24,1217.86 1486.82,1217.86 1487.41,1217.86 1487.99,1217.86 1488.58,1217.86 1489.17,1217.86 1489.75,1217.86 1490.34,1217.86 1490.93,1217.86 1491.51,1217.86 1492.1,1217.86 1492.69,1217.86 1493.27,1217.86 1493.86,1217.86 1494.45,1217.86 1495.03,1217.86 1495.62,1217.86 1496.2,1217.86 1496.79,1217.86 1497.38,1217.86 1497.96,1217.86 1498.55,1217.86 1499.14,1217.86 1499.72,1217.86 1500.31,1217.86 1500.9,1217.86 1501.48,1217.86 1502.07,1217.86 1502.65,1217.86 1503.24,1217.86 1503.83,1217.86 1504.41,1217.86 1505,1217.86 1505.59,1217.86 1506.17,1217.86 1506.76,1217.86 1507.35,1217.86 1507.93,1217.86 1508.52,1217.86 1509.11,1217.86 1509.69,1217.86 1510.28,1217.86 1510.86,1217.86 1511.45,1217.86 1512.04,1217.86 1512.62,1217.86 1513.21,1217.86 1513.8,1217.86 1514.38,1217.86 1514.97,1217.86 1515.56,1217.86 1516.14,1217.86 1516.73,1217.86 1517.32,1217.86 1517.9,1217.86 1518.49,1217.86 1519.07,1217.86 1519.66,1217.86 1520.25,1217.86 1520.83,1217.86 1521.42,1217.86 1522.01,1217.86 1522.59,1217.86 1523.18,1217.86 1523.77,1217.86 1524.35,1217.86 1524.94,1217.86 1525.52,1217.86 1526.11,1217.86 1526.7,1217.86 1527.28,1217.86 1527.87,1217.86 1528.46,1217.86 1529.04,1217.86 1529.63,1217.86 1530.22,1217.86 1530.8,1217.86 1531.39,1217.86 1531.98,1217.86 1532.56,1217.86 1533.15,1217.86 1533.73,1217.86 1534.32,1217.86 1534.91,1217.86 1535.49,1217.86 1536.08,1217.86 1536.67,1217.86 1537.25,1217.86 1537.84,1217.86 1538.43,1217.86 1539.01,1217.86 1539.6,1217.86 1540.19,1217.86 1540.77,1217.86 1541.36,1217.86 1541.94,1217.86 1542.53,1217.86 1543.12,1217.86 1543.7,1217.86 1544.29,1217.86 1544.88,1217.86 1545.46,1217.86 1546.05,1217.86 1546.64,1217.86 1547.22,1217.86 1547.81,1217.86 1548.4,1217.86 1548.98,1217.86 1549.57,1217.86 1550.15,1217.86 1550.74,1217.86 1551.33,1217.86 1551.91,1217.86 1552.5,1217.86 1553.09,1217.86 1553.67,1217.86 1554.26,1217.86 1554.85,1217.86 1555.43,1217.86 1556.02,1217.86 1556.6,1217.86 1557.19,1217.86 1557.78,1217.86 1558.36,1217.86 1558.95,1217.86 1559.54,1217.86 1560.12,1217.86 1560.71,1217.86 1561.3,1217.86 1561.88,1217.86 1562.47,1217.86 1563.06,1217.86 1563.64,1217.86 1564.23,1217.86 1564.81,1217.86 1565.4,1217.86 1565.99,1217.86 1566.57,1217.86 1567.16,1217.86 1567.75,1217.86 1568.33,1217.86 1568.92,1217.86 1569.51,1217.86 1570.09,1217.86 1570.68,1217.86 1571.27,1217.86 1571.85,1217.86 1572.44,1217.86 1573.02,1217.86 1573.61,1217.86 1574.2,1217.86 1574.78,1217.86 1575.37,1217.86 1575.96,1217.86 1576.54,1217.86 1577.13,1217.86 1577.72,1217.86 1578.3,1217.86 1578.89,1217.86 1579.47,1217.86 1580.06,1217.86 1580.65,1217.86 1581.23,1217.86 1581.82,1217.86 1582.41,1217.86 1582.99,1217.86 1583.58,1217.86 1584.17,1217.86 1584.75,1217.86 1585.34,1217.86 1585.93,1217.86 1586.51,1217.86 1587.1,1217.86 1587.68,1217.86 1588.27,1217.86 1588.86,1217.86 1589.44,1217.86 1590.03,1217.86 1590.62,1217.86 1591.2,1217.86 1591.79,1217.86 1592.38,1217.86 1592.96,1217.86 1593.55,1217.86 1594.14,1217.86 1594.72,1217.86 1595.31,1217.86 1595.89,1217.86 1596.48,1217.86 1597.07,1217.86 1597.65,1217.86 1598.24,1217.86 1598.83,1217.86 1599.41,1217.86 1600,1217.86 1600.59,1217.86 1601.17,1217.86 1601.76,1217.86 1602.34,1217.86 1602.93,1217.86 1603.52,1217.86 1604.1,1217.86 1604.69,1217.86 1605.28,1217.86 1605.86,1217.86 1606.45,1217.86 1607.04,1217.86 1607.62,1217.86 1608.21,1217.86 1608.8,1217.86 1609.38,1217.86 1609.97,1217.86 1610.55,1217.86 1611.14,1217.86 1611.73,1217.86 1612.31,1217.86 1612.9,1217.86 1613.49,1217.86 1614.07,1217.86 1614.66,1217.86 1615.25,1217.86 1615.83,1217.86 1616.42,1217.86 1617.01,1217.86 1617.59,1217.86 1618.18,1217.86 1618.76,1217.86 1619.35,1217.86 1619.94,1217.86 1620.52,1217.86 1621.11,1217.86 1621.7,1217.86 1622.28,1217.86 1622.87,1217.86 1623.46,1217.86 1624.04,1217.86 1624.63,1217.86 1625.22,1217.86 1625.8,1217.86 1626.39,1217.86 1626.97,1217.86 1627.56,1217.86 1628.15,1217.86 1628.73,1217.86 1629.32,1217.86 1629.91,1217.86 1630.49,1217.86 1631.08,1217.86 1631.67,1217.86 1632.25,1217.86 1632.84,1217.86 1633.42,1217.86 1634.01,1217.86 1634.6,1217.86 1635.18,1217.86 1635.77,1217.86 1636.36,1217.86 1636.94,1217.86 1637.53,1217.86 1638.12,1217.86 1638.7,1217.86 1639.29,1217.86 1639.88,1217.86 1640.46,1217.86 1641.05,1217.86 1641.63,1217.86 1642.22,1217.86 1642.81,1217.86 1643.39,1217.86 1643.98,1217.86 1644.57,1217.86 1645.15,1217.86 1645.74,1217.86 1646.33,1217.86 1646.91,1217.86 1647.5,1217.86 1648.09,1217.86 1648.67,1217.86 1649.26,1217.86 1649.84,1217.86 1650.43,1217.86 1651.02,1217.86 1651.6,1217.86 1652.19,1217.86 1652.78,1217.86 1653.36,1217.86 1653.95,1217.86 1654.54,1217.86 1655.12,1217.86 1655.71,1217.86 1656.29,1217.86 1656.88,1217.86 1657.47,1217.86 1658.05,1217.86 1658.64,1217.86 1659.23,1217.86 1659.81,1217.86 1660.4,1217.86 1660.99,1217.86 1661.57,1217.86 1662.16,1217.86 1662.75,1217.86 1663.33,1217.86 1663.92,1217.86 1664.5,1217.86 1665.09,1217.86 1665.68,1217.86 1666.26,1217.86 1666.85,1217.86 1667.44,1217.86 1668.02,1217.86 1668.61,1217.86 1669.2,1217.86 1669.78,1217.86 1670.37,1217.86 1670.96,1217.86 1671.54,1217.86 1672.13,1217.86 1672.71,1217.86 1673.3,1217.86 1673.89,1217.86 1674.47,1217.86 1675.06,1217.86 1675.65,1217.86 1676.23,1217.86 1676.82,1217.86 1677.41,1217.86 1677.99,1217.86 1678.58,1217.86 1679.17,1217.86 1679.75,1217.86 1680.34,1217.86 1680.92,1217.86 1681.51,1217.86 1682.1,1217.86 1682.68,1217.86 1683.27,1217.86 1683.86,1217.86 1684.44,1217.86 1685.03,1217.86 1685.62,1217.86 1686.2,1217.86 1686.79,1217.86 1687.37,1217.86 1687.96,1217.86 1688.55,1217.86 1689.13,1217.86 1689.72,1217.86 1690.31,1217.86 1690.89,1217.86 1691.48,1217.86 1692.07,1217.86 1692.65,1217.86 1693.24,1217.86 1693.83,1217.86 1694.41,1217.86 1695,1217.86 1695.58,1217.86 1696.17,1217.86 1696.76,1217.86 1697.34,1217.86 1697.93,1217.86 1698.52,1217.86 1699.1,1217.86 1699.69,1217.86 1700.28,1217.86 1700.86,1217.86 1701.45,1217.86 1702.04,1217.86 1702.62,1217.86 1703.21,1217.86 1703.79,1217.86 1704.38,1217.86 1704.97,1217.86 1705.55,1217.86 1706.14,1217.86 1706.73,1217.86 1707.31,1217.86 1707.9,1217.86 1708.49,1217.86 1709.07,1217.86 1709.66,1217.86 1710.24,1217.86 1710.83,1217.86 1711.42,1217.86 1712,1217.86 1712.59,1217.86 1713.18,1217.86 1713.76,1217.86 1714.35,1217.86 1714.94,1217.86 1715.52,1217.86 1716.11,1217.86 1716.7,1217.86 1717.28,1217.86 1717.87,1217.86 1718.45,1217.86 1719.04,1217.86 1719.63,1217.86 1720.21,1217.86 1720.8,1217.86 1721.39,1217.86 1721.97,1217.86 1722.56,1217.86 1723.15,1217.86 1723.73,1217.86 1724.32,1217.86 1724.91,1217.86 1725.49,1217.86 1726.08,1217.86 1726.66,1217.86 1727.25,1217.86 1727.84,1217.86 1728.42,1217.86 1729.01,1217.86 1729.6,1217.86 1730.18,1217.86 1730.77,1217.86 1731.36,1217.86 1731.94,1217.86 1732.53,1217.86 1733.11,1217.86 1733.7,1217.86 1734.29,1217.86 1734.87,1217.86 1735.46,1217.86 1736.05,1217.86 1736.63,1217.86 1737.22,1217.86 1737.81,1217.86 1738.39,1217.86 1738.98,1217.86 1739.57,1217.86 1740.15,1217.86 1740.74,1217.86 1741.32,1217.86 1741.91,1217.86 1742.5,1217.86 1743.08,1217.86 1743.67,1217.86 1744.26,1217.86 1744.84,1217.86 1745.43,1217.86 1746.02,1217.86 1746.6,1217.86 1747.19,1217.86 1747.78,1217.86 1748.36,1217.86 1748.95,1217.86 1749.53,1217.86 1750.12,1217.86 1750.71,1217.86 1751.29,1217.86 1751.88,1217.86 1752.47,1217.86 1753.05,1217.86 1753.64,1217.86 1754.23,1217.86 1754.81,1217.86 1755.4,1217.86 1755.99,1217.86 1756.57,1217.86 1757.16,1217.86 1757.74,1217.86 1758.33,1217.86 1758.92,1217.86 1759.5,1217.86 1760.09,1217.86 1760.68,1217.86 1761.26,1217.86 1761.85,1217.86 1762.44,1217.86 1763.02,1217.86 1763.61,1217.86 1764.19,1217.86 1764.78,1217.86 1765.37,1217.86 1765.95,1217.86 1766.54,1217.86 1767.13,1217.86 1767.71,1217.86 1768.3,1217.86 1768.89,1217.86 1769.47,1217.86 1770.06,1217.86 1770.65,1217.86 1771.23,1217.86 1771.82,1217.86 1772.4,1217.86 1772.99,1217.86 1773.58,1217.86 1774.16,1217.86 1774.75,1217.86 1775.34,1217.86 1775.92,1217.86 1776.51,1217.86 1777.1,1217.86 1777.68,1217.86 1778.27,1217.86 1778.86,1217.86 1779.44,1217.86 1780.03,1217.86 1780.61,1217.86 1781.2,1217.86 1781.79,1217.86 1782.37,1217.86 1782.96,1217.86 1783.55,1217.86 1784.13,1217.86 1784.72,1217.86 1785.31,1217.86 1785.89,1217.86 1786.48,1217.86 1787.06,1217.86 1787.65,1217.86 1788.24,1217.86 1788.82,1217.86 1789.41,1217.86 1790,1217.86 1790.58,1217.86 1791.17,1217.86 1791.76,1217.86 1792.34,1217.86 1792.93,1217.86 1793.52,1217.86 1794.1,1217.86 1794.69,1217.86 1795.27,1217.86 1795.86,1217.86 1796.45,1217.86 1797.03,1217.86 1797.62,1217.86 1798.21,1217.86 1798.79,1217.86 1799.38,1217.86 1799.97,1217.86 1800.55,1217.86 1801.14,1217.86 1801.73,1217.86 1802.31,1217.86 1802.9,1217.86 1803.48,1217.86 1804.07,1217.86 1804.66,1217.86 1805.24,1217.86 1805.83,1217.86 1806.42,1217.86 1807,1217.86 1807.59,1217.86 1808.18,1217.86 1808.76,1217.86 1809.35,1217.86 1809.94,1217.86 1810.52,1217.86 1811.11,1217.86 1811.69,1217.86 1812.28,1217.86 1812.87,1217.86 1813.45,1217.86 1814.04,1217.86 1814.63,1217.86 1815.21,1217.86 1815.8,1217.86 1816.39,1217.86 1816.97,1217.86 1817.56,1217.86 1818.14,1217.86 1818.73,1217.86 1819.32,1217.86 1819.9,1217.86 1820.49,1217.86 1821.08,1217.86 1821.66,1217.86 1822.25,1217.86 1822.84,1217.86 1823.42,1217.86 1824.01,1217.86 1824.6,1217.86 1825.18,1217.86 1825.77,1217.86 1826.35,1217.86 1826.94,1217.86 1827.53,1217.86 1828.11,1217.86 1828.7,1217.86 1829.29,1217.86 1829.87,1217.86 1830.46,1217.86 1831.05,1217.86 1831.63,1217.86 1832.22,1217.86 1832.81,1217.86 1833.39,1217.86 1833.98,1217.86 1834.56,1217.86 1835.15,1217.86 1835.74,1217.86 1836.32,1217.86 1836.91,1217.86 1837.5,1217.86 1838.08,1217.86 1838.67,1217.86 1839.26,1217.86 1839.84,1217.86 1840.43,1217.86 1841.01,1217.86 1841.6,1217.86 1842.19,1217.86 1842.77,1217.86 1843.36,1217.86 1843.95,1217.86 1844.53,1217.86 1845.12,1217.86 1845.71,1217.86 1846.29,1217.86 1846.88,1217.86 1847.47,1217.86 1848.05,1217.86 1848.64,1217.86 1849.22,1217.86 1849.81,1217.86 1850.4,1217.86 1850.98,1217.86 1851.57,1217.86 1852.16,1217.86 1852.74,1217.86 1853.33,1217.86 1853.92,1217.86 1854.5,1217.86 1855.09,1217.86 1855.68,1217.86 1856.26,1217.86 1856.85,1217.86 1857.43,1217.86 1858.02,1217.86 1858.61,1217.86 1859.19,1217.86 1859.78,1217.86 1860.37,1217.86 1860.95,1217.86 1861.54,1217.86 1862.13,1217.86 1862.71,1217.86 1863.3,1217.86 1863.88,1217.86 1864.47,1217.86 1865.06,1217.86 1865.64,1217.86 1866.23,1217.86 1866.82,1217.86 1867.4,1217.86 1867.99,1217.86 1868.58,1217.86 1869.16,1217.86 1869.75,1217.86 1870.34,1217.86 1870.92,1217.86 1871.51,1217.86 1872.09,1217.86 1872.68,1217.86 1873.27,1217.86 1873.85,1217.86 1874.44,1217.86 1875.03,1217.86 1875.61,1217.86 1876.2,1217.86 1876.79,1217.86 1877.37,1217.86 1877.96,1217.86 1878.55,1217.86 1879.13,1217.86 1879.72,1217.86 1880.3,1217.86 1880.89,1217.86 1881.48,1217.86 1882.06,1217.86 1882.65,1217.86 1883.24,1217.86 1883.82,1217.86 1884.41,1217.86 1885,1217.86 1885.58,1217.86 1886.17,1217.86 1886.76,1217.86 1887.34,1217.86 1887.93,1217.86 1888.51,1217.86 1889.1,1217.86 1889.69,1217.86 1890.27,1217.86 1890.86,1217.86 1891.45,1217.86 1892.03,1217.86 1892.62,1217.86 1893.21,1217.86 1893.79,1217.86 1894.38,1217.86 1894.96,1217.86 1895.55,1217.86 1896.14,1217.86 1896.72,1217.86 1897.31,1217.86 1897.9,1217.86 1898.48,1217.86 1899.07,1217.86 1899.66,1217.86 1900.24,1217.86 1900.83,1217.86 1901.42,1217.86 1902,1217.86 1902.59,1217.86 1903.17,1217.86 1903.76,1217.86 1904.35,1217.86 1904.93,1217.86 1905.52,1217.86 1906.11,1217.86 1906.69,1217.86 1907.28,1217.86 1907.87,1217.86 1908.45,1217.86 1909.04,1217.86 1909.63,1217.86 1910.21,1217.86 1910.8,1217.86 1911.38,1217.86 1911.97,1217.86 1912.56,1217.86 1913.14,1217.86 1913.73,1217.86 1914.32,1217.86 1914.9,1217.86 1915.49,1217.86 1916.08,1217.86 1916.66,1217.86 1917.25,1217.86 1917.83,1217.86 1918.42,1217.86 1919.01,1217.86 1919.59,1217.86 1920.18,1217.86 1920.77,1217.86 1921.35,1217.86 1921.94,1217.86 1922.53,1217.86 1923.11,1217.86 1923.7,1217.86 1924.29,1217.86 1924.87,1217.86 1925.46,1217.86 1926.04,1217.86 1926.63,1217.86 1927.22,1217.86 1927.8,1217.86 1928.39,1217.86 1928.98,1217.86 1929.56,1217.86 1930.15,1217.86 1930.74,1217.86 1931.32,1217.86 1931.91,1217.86 1932.5,1217.86 1933.08,1217.86 1933.67,1217.86 1934.25,1217.86 1934.84,1217.86 1935.43,1217.86 1936.01,1217.86 1936.6,1217.86 1937.19,1217.86 1937.77,1217.86 1938.36,1217.86 1938.95,1217.86 1939.53,1217.86 1940.12,1217.86 1940.71,1217.86 1941.29,1217.86 1941.88,1217.86 1942.46,1217.86 1943.05,1217.86 1943.64,1217.86 1944.22,1217.86 1944.81,1217.86 1945.4,1217.86 1945.98,1217.86 1946.57,1217.86 1947.16,1217.86 1947.74,1217.86 1948.33,1217.86 1948.91,1217.86 1949.5,1217.86 1950.09,1217.86 1950.67,1217.86 1951.26,1217.86 1951.85,1217.86 1952.43,1217.86 1953.02,1217.86 1953.61,1217.86 1954.19,1217.86 1954.78,1217.86 1955.37,1217.86 1955.95,1217.86 1956.54,1217.86 1957.12,1217.86 1957.71,1217.86 1958.3,1217.86 1958.88,1217.86 1959.47,1217.86 1960.06,1217.86 1960.64,1217.86 1961.23,1217.86 1961.82,1217.86 1962.4,1217.86 1962.99,1217.86 1963.58,1217.86 1964.16,1217.86 1964.75,1217.86 1965.33,1217.86 1965.92,1217.86 1966.51,1217.86 1967.09,1217.86 1967.68,1217.86 1968.27,1217.86 1968.85,1217.86 1969.44,1217.86 1970.03,1217.86 1970.61,1217.86 1971.2,1217.86 1971.78,1217.86 1972.37,1217.86 1972.96,1217.86 1973.54,1217.86 1974.13,1217.86 1974.72,1217.86 1975.3,1217.86 1975.89,1217.86 1976.48,1217.86 1977.06,1217.86 1977.65,1217.86 1978.24,1217.86 1978.82,1217.86 1979.41,1217.86 1979.99,1217.86 1980.58,1217.86 1981.17,1217.86 1981.75,1217.86 1982.34,1217.86 1982.93,1217.86 1983.51,1217.86 1984.1,1217.86 1984.69,1217.86 1985.27,1217.86 1985.86,1217.86 1986.45,1217.86 1987.03,1217.86 1987.62,1217.86 1988.2,1217.86 1988.79,1217.86 1989.38,1217.86 1989.96,1217.86 1990.55,1217.86 1991.14,1217.86 1991.72,1217.86 1992.31,1217.86 1992.9,1217.86 1993.48,1217.86 1994.07,1217.86 1994.65,1217.86 1995.24,1217.86 1995.83,1217.86 1996.41,1217.86 1997,1217.86 1997.59,1217.86 1998.17,1217.86 1998.76,1217.86 1999.35,1217.86 1999.93,1217.86 2000.52,1217.86 2001.11,1217.86 2001.69,1217.86 2002.28,1217.86 2002.86,1217.86 2003.45,1217.86 2004.04,1217.86 2004.62,1217.86 2005.21,1217.86 2005.8,1217.86 2006.38,1217.86 2006.97,1217.86 2007.56,1217.86 2008.14,1217.86 2008.73,1217.86 2009.32,1217.86 2009.9,1217.86 2010.49,1217.86 2011.07,1217.86 2011.66,1217.86 2012.25,1217.86 2012.83,1217.86 2013.42,1217.86 2014.01,1217.86 2014.59,1217.86 2015.18,1217.86 2015.77,1217.86 2016.35,1217.86 2016.94,1217.86 2017.53,1217.86 2018.11,1217.86 2018.7,1217.86 2019.28,1217.86 2019.87,1217.86 2020.46,1217.86 2021.04,1217.86 2021.63,1217.86 2022.22,1217.86 2022.8,1217.86 2023.39,1217.86 2023.98,1217.86 2024.56,1217.86 2025.15,1217.86 2025.73,1217.86 2026.32,1217.86 2026.91,1217.86 2027.49,1217.86 2028.08,1217.86 2028.67,1217.86 2029.25,1217.86 2029.84,1217.86 2030.43,1217.86 2031.01,1217.86 2031.6,1217.86 2032.19,1217.86 2032.77,1217.86 2033.36,1217.86 2033.94,1217.86 2034.53,1217.86 2035.12,1217.86 2035.7,1217.86 2036.29,1217.86 2036.88,1217.86 2037.46,1217.86 2038.05,1217.86 2038.64,1217.86 2039.22,1217.86 2039.81,1217.86 2040.4,1217.86 2040.98,1217.86 2041.57,1217.86 2042.15,1217.86 2042.74,1217.86 2043.33,1217.86 2043.91,1217.86 2044.5,1217.86 2045.09,1217.86 2045.67,1217.86 2046.26,1217.86 2046.85,1217.86 2047.43,1217.86 2048.02,1217.86 2048.6,1217.86 2049.19,1217.86 2049.78,1217.86 2050.36,1217.86 2050.95,1217.86 2051.54,1217.86 2052.12,1217.86 2052.71,1217.86 2053.3,1217.86 2053.88,1217.86 2054.47,1217.86 2055.06,1217.86 2055.64,1217.86 2056.23,1217.86 2056.81,1217.86 2057.4,1217.86 2057.99,1217.86 2058.57,1217.86 2059.16,1217.86 2059.75,1217.86 2060.33,1217.86 2060.92,1217.86 2061.51,1217.86 2062.09,1217.86 2062.68,1217.86 2063.27,1217.86 2063.85,1217.86 2064.44,1217.86 2065.02,1217.86 2065.61,1217.86 2066.2,1217.86 2066.78,1217.86 2067.37,1217.86 2067.96,1217.86 2068.54,1217.86 2069.13,1217.86 2069.72,1217.86 2070.3,1217.86 2070.89,1217.86 2071.48,1217.86 2072.06,1217.86 2072.65,1217.86 2073.23,1217.86 2073.82,1217.86 2074.41,1217.86 2074.99,1217.86 2075.58,1217.86 2076.17,1217.86 2076.75,1217.86 2077.34,1217.86 2077.93,1217.86 2078.51,1217.86 2079.1,1217.86 2079.68,1217.86 2080.27,1217.86 2080.86,1217.86 2081.44,1217.86 2082.03,1217.86 2082.62,1217.86 2083.2,1217.86 2083.79,1217.86 2084.38,1217.86 2084.96,1217.86 2085.55,1217.86 2086.14,1217.86 2086.72,1217.86 2087.31,1217.86 2087.89,1217.86 2088.48,1217.86 2089.07,1217.86 2089.65,1217.86 2090.24,1217.86 2090.83,1217.86 2091.41,1217.86 2092,1217.86 2092.59,1217.86 2093.17,1217.86 2093.76,1217.86 2094.35,1217.86 2094.93,1217.86 2095.52,1217.86 2096.1,1217.86 2096.69,1217.86 2097.28,1217.86 2097.86,1217.86 2098.45,1217.86 2099.04,1217.86 2099.62,1217.86 2100.21,1217.86 2100.8,1217.86 2101.38,1217.86 2101.97,1217.86 2102.55,1217.86 2103.14,1217.86 2103.73,1217.86 2104.31,1217.86 2104.9,1217.86 2105.49,1217.86 2106.07,1217.86 2106.66,1217.86 2107.25,1217.86 2107.83,1217.86 2108.42,1217.86 2109.01,1217.86 2109.59,1217.86 2110.18,1217.86 2110.76,1217.86 2111.35,1217.86 2111.94,1217.86 2112.52,1217.86 2113.11,1217.86 2113.7,1217.86 2114.28,1217.86 2114.87,1217.86 2115.46,1217.86 2116.04,1217.86 2116.63,1217.86 2117.22,1217.86 2117.8,1217.86 2118.39,1217.86 2118.97,1217.86 2119.56,1217.86 2120.15,1217.86 2120.73,1217.86 2121.32,1217.86 2121.91,1217.86 2122.49,1217.86 2123.08,1217.86 2123.67,1217.86 2124.25,1217.86 2124.84,1217.86 2125.42,1217.86 2126.01,1217.86 2126.6,1217.86 2127.18,1217.86 2127.77,1217.86 2128.36,1217.86 2128.94,1217.86 2129.53,1217.86 2130.12,1217.86 2130.7,1217.86 2131.29,1217.86 2131.88,1217.86 2132.46,1217.86 2133.05,1217.86 2133.63,1217.86 2134.22,1217.86 2134.81,1217.86 2135.39,1217.86 2135.98,1217.86 2136.57,1217.86 2137.15,1217.86 2137.74,1217.86 2138.33,1217.86 2138.91,1217.86 2139.5,1217.86 2140.09,1217.86 2140.67,1217.86 2141.26,1217.86 2141.84,1217.86 2142.43,1217.86 2143.02,1217.86 2143.6,1217.86 2144.19,1217.86 2144.78,1217.86 2145.36,1217.86 2145.95,1217.86 2146.54,1217.86 2147.12,1217.86 2147.71,1217.86 2148.3,1217.86 2148.88,1217.86 2149.47,1217.86 2150.05,1217.86 2150.64,1217.86 2151.23,1217.86 2151.81,1217.86 2152.4,1217.86 2152.99,1217.86 2153.57,1217.86 2154.16,1217.86 2154.75,1217.86 2155.33,1217.86 2155.92,1217.86 2156.5,1217.86 2157.09,1217.86 2157.68,1217.86 2158.26,1217.86 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.4,1198.41 1398.12,899.083 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1236.73 985.439,1198.41 2158.26,1198.41 2158.26,1236.73 985.439,1236.73 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip533\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip533)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3902.72 163.232,-5005.14 163.792,-5989.1 164.351,-6914 164.91,-5374.66 165.469,-6260.86 166.029,-7011.06 166.588,-6777.31 167.147,-7494.63 167.706,-7278.09 168.266,-7907.55 168.825,-7713.76 169.384,-8248.19 169.943,-8725.51 170.503,-9156.49 171.062,-8941.44 171.621,-9290.33 172.18,-9623.89 172.74,-9916.57 173.299,-10163.5 173.858,-10357.2 174.417,-10112.1 174.977,-10286.9 175.536,-10418.4 176.095,-10537 176.655,-10641.5 177.214,-10696.5 177.773,-10440.4 178.332,-10479.8 178.892,-10494.2 179.451,-10496.7 180.01,-10238.4 180.569,-10205.2 181.129,-10164.6 181.688,-10111 182.247,-10036 182.806,-9778.53 183.366,-9532.36 183.925,-9449.77 184.484,-9068.56 185.043,-8976.44 185.603,-8746.89 186.162,-8655.18 186.721,-8305.66 187.28,-7856.79 187.84,-7633.99 188.399,-7330.62 188.958,-7225.52 189.517,-7022.42 190.077,-6917.77 190.636,-6639.84 191.195,-6460.18 191.754,-6132.63 192.314,-6047.66 192.873,-5884.9 193.432,-5584.99 193.991,-5433.52 194.551,-5353.23 195.11,-5204.56 195.669,-4937.75 196.228,-4687.98 196.788,-4604.74 197.347,-4424.92 197.906,-4307.88 198.465,-4132.63 199.025,-4018.39 199.584,-3944.07 200.143,-3825.63 200.702,-3709.56 201.262,-3600.53 201.821,-3449.79 202.38,-3303.42 202.939,-3122.31 203.499,-3017.01 204.058,-2879.33 204.617,-2706.59 205.176,-2619.65 205.736,-2528.6 206.295,-2473.5 206.854,-2384.61 207.413,-2327.74 207.973,-2207.32 208.532,-2119.19 209.091,-2037.48 209.65,-1918.2 210.21,-1835.82 210.769,-1722.74 211.328,-1585.75 211.887,-1511.59 212.447,-1464.91 213.006,-1367.96 213.565,-1323.05 214.124,-1224.67 214.684,-1130.02 215.243,-1015.65 215.802,-980.147 216.361,-919.823 216.921,-886.287 217.48,-846.424 218.039,-763.049 218.598,-727.301 219.158,-666.212 219.717,-611.037 220.276,-532.704 220.835,-504.995 221.395,-431.943 221.954,-383.265 222.513,-314.927 223.072,-288.501 223.632,-198.371 224.191,-135.215 224.75,-98.4484 225.309,-41.7815 225.869,-24.4184 226.428,35.2165 226.987,116.872 227.546,149.116 228.106,182.898 228.665,216.368 229.224,229.735 229.783,263.394 230.343,335.141 230.902,383.721 231.461,409.735 232.02,414.099 232.58,420.499 233.139,467.587 233.698,450.487 234.257,475.508 234.817,519.343 235.376,525.624 235.935,551.334 236.494,609.067 237.054,626.02 237.613,666.8 238.172,701.375 238.731,682.365 239.291,700.678 239.85,714.473 240.409,729.699 240.968,727.242 241.528,747.234 242.087,745.75 242.646,785.318 243.205,784.407 243.765,837.989 244.324,889.522 244.883,901.067 245.442,930.214 246.002,958.529 246.561,998.491 247.12,970.771 247.679,991.715 248.239,1014.63 248.798,1040.19 249.357,1027.76 249.916,1036.16 250.476,1008.73 251.035,994.304 251.594,968.097 252.153,992.577 252.713,985.7 253.272,981.744 253.831,1006.86 254.39,1015.75 254.95,1038.97 255.509,1027.45 256.068,1017.25 256.627,987.942 257.187,1032.32 257.746,1042.18 258.305,1029.92 258.864,1006.2 259.424,1002.37 259.983,995.046 260.542,990.97 261.101,1019.65 261.661,1028.62 262.22,1037.82 262.779,1031.91 263.338,1056.42 263.898,1034.4 264.457,1012.31 265.016,991.805 265.575,1000.65 266.135,976.92 266.694,986.917 267.253,983.066 267.812,975.453 268.372,984.964 268.931,998.578 269.49,1009.64 270.049,1019.37 270.609,980.497 271.168,976.98 271.727,1020.71 272.286,1010.78 272.846,1020.63 273.405,1010.66 273.964,1007.41 274.523,1001.72 275.083,997.357 275.642,1010.5 276.201,1020.09 276.76,1011.49 277.32,989.647 277.879,997.766 278.438,1007.15 278.997,1004.92 279.557,981.937 280.116,994.569 280.675,1020.88 281.234,981.006 281.794,994.508 282.353,1010.12 282.912,1037.93 283.471,1014.08 284.031,1010.44 284.59,988.059 285.149,998.012 285.708,978.892 286.268,990.842 286.827,984.681 287.386,964.467 287.945,961.371 288.505,942.56 289.064,975.923 289.623,1006.57 290.182,1003.66 290.742,1011.45 291.301,1024.13 291.86,1016.92 292.419,1026.28 292.979,1014.75 293.538,1027.7 294.097,999.772 294.656,998.488 295.216,996.453 295.775,1009.41 296.334,973.652 296.893,987.61 297.453,967.144 298.012,966.049 298.571,982.212 299.13,962.693 299.69,940.42 300.249,942.848 300.808,941.187 301.368,957.162 301.927,955.866 302.486,984.115 303.045,1012.16 303.605,987.159 304.164,967.88 304.723,1013.47 305.282,1038.41 305.842,1044.28 306.401,1023.5 306.96,1002.49 307.519,1015.44 308.079,1007.04 308.638,999.419 309.197,996.184 309.756,976.329 310.316,975.15 310.875,954.403 311.434,950.057 311.993,962.759 312.553,940.652 313.112,904.045 313.671,934.673 314.23,948.69 314.79,928.131 315.349,923.616 315.908,904.362 316.467,904.36 317.027,934.899 317.586,932.344 318.145,895.001 318.704,878.222 319.264,909.824 319.823,910.778 320.382,909.636 320.941,939.264 321.501,937.493 322.06,921.346 322.619,917.325 323.178,918.314 323.738,912.178 324.297,926.534 324.856,940.969 325.415,967.192 325.975,960.875 326.534,971.674 327.093,964.496 327.652,974.667 328.212,983.933 328.771,977.354 329.33,1005.37 329.889,1011.64 330.449,1020.8 331.008,1027.95 331.567,1016.85 332.126,991.901 332.686,982.436 333.245,974.961 333.804,950.49 334.363,945.287 334.923,938.796 335.482,949.22 336.041,975.216 336.6,982.939 337.16,976.218 337.719,953.633 338.278,962.912 338.837,974.232 339.397,984.17 339.956,1006.03 340.515,1001.58 341.074,1025.17 341.634,1048.73 342.193,985.493 342.752,977.631 343.311,971.223 343.871,965.331 344.43,928.009 344.989,939.177 345.548,915.939 346.108,911.594 346.667,907.248 347.226,919.987 347.785,932.824 348.345,910.461 348.904,925.373 349.463,921.399 350.022,913.891 350.582,953.806 351.141,895.724 351.7,889.011 352.259,901.063 352.819,947.944 353.378,893.112 353.937,892.09 354.496,854.381 355.056,834.431 355.615,868.422 356.174,870.128 356.733,851.586 357.293,836.098 357.852,835.267 358.411,834.65 358.97,836.659 359.53,850.778 360.089,815.609 360.648,830.052 361.207,830.272 361.767,844.659 362.326,889.578 362.885,870.687 363.444,852.879 364.004,847.945 364.563,877.312 365.122,856.105 365.681,870.514 366.241,835.372 366.8,817.605 367.359,786.353 367.918,772.229 368.478,754.51 369.037,754.407 369.596,758.373 370.155,760.227 370.715,743.194 371.274,743.443 371.833,745.555 372.392,733.602 372.952,735.975 373.511,759.193 374.07,790.983 374.629,775.026 375.189,777.357 375.748,812.48 376.307,811.176 376.866,810.509 377.426,791.036 377.985,789.916 378.544,824.856 379.103,839.214 379.663,836.23 380.222,850.494 380.781,863.211 381.34,858.437 381.9,850.685 382.459,846.53 383.018,825.424 383.577,788.335 384.137,790.219 384.696,806.502 385.255,837.326 385.814,882.478 386.374,881.949 386.933,876.699 387.492,872.162 388.051,866.742 388.611,845.683 389.17,854.716 389.729,836.977 390.288,835.7 390.848,864.365 391.407,841.625 391.966,823.373 392.525,792.485 393.085,793.19 393.644,793.686 394.203,793.844 394.762,808.732 395.322,808.658 395.881,841.022 396.44,836.249 396.999,832.604 397.559,831.531 398.118,813.302 398.677,796.669 399.236,811.509 399.796,856.317 400.355,851.292 400.914,858.6 401.473,839.193 402.033,837.5 402.592,819.424 403.151,849.403 403.71,829.596 404.27,810.73 404.829,804.476 405.388,806.742 405.947,868.633 406.507,849.791 407.066,829.361 407.625,793.776 408.184,795.184 408.744,792.556 409.303,808.578 409.862,806.096 410.421,823.27 410.981,819.928 411.54,800.07 412.099,810.269 412.658,842.496 413.218,839.771 413.777,835.033 414.336,815.233 414.895,810.344 415.455,757.53 416.014,759.47 416.573,761.567 417.132,777.221 417.692,774.311 418.251,788.294 418.81,818.917 419.369,816.952 419.929,767.965 420.488,766.596 421.047,752.632 421.606,738.524 422.166,755.751 422.725,790.438 423.284,818.218 423.843,797.318 424.403,778.916 424.962,779.482 425.521,794.039 426.08,791.089 426.64,807.033 427.199,804.14 427.758,753.934 428.318,755.686 428.877,758.111 429.436,762.397 429.995,743.449 430.555,726.67 431.114,727.955 431.673,758.815 432.232,740.52 432.792,723.131 433.351,723.539 433.91,727.131 434.469,728.229 435.029,729.909 435.588,729.825 436.147,731.248 436.706,714.18 437.266,749.964 437.825,751.888 438.384,720.294 438.943,753.76 439.503,736.852 440.062,739.492 440.621,739.45 441.18,740.615 441.74,724.598 442.299,727.253 442.858,680.275 443.417,669.914 443.977,676.865 444.536,708.815 445.095,709.84 445.654,730.067 446.214,733.553 446.773,734.728 447.332,721.648 447.891,706.727 448.451,725.365 449.01,724.863 449.569,742.311 450.128,758.772 450.688,787.81 451.247,800.38 451.806,794.191 452.365,753.931 452.925,757.008 453.484,739.256 454.043,753.911 454.602,787.736 455.162,787.028 455.721,783.999 456.28,784.702 456.839,797.229 457.399,794.174 457.958,778.541 458.517,778.529 459.076,791.817 459.636,805.739 460.195,834.587 460.754,828.853 461.313,834.937 461.873,832.311 462.432,848.338 462.991,845.427 463.55,889.06 464.11,864.941 464.669,844.753 465.228,841.1 465.787,787.177 466.347,785.971 466.906,800.333 467.465,810.244 468.024,842.019 468.584,850.82 469.143,814.53 469.702,764.204 470.261,780.548 470.821,761.751 471.38,758.82 471.939,758.588 472.498,788.529 473.058,800.614 473.617,810.271 474.176,807.268 474.735,805.686 475.295,803.973 475.854,786.316 476.413,783.542 476.972,731.502 477.532,729.579 478.091,743.799 478.65,743.025 479.209,791.114 479.769,787.891 480.328,802.704 480.887,809.315 481.446,840.73 482.006,784.757 482.565,797.045 483.124,763.564 483.683,774.449 484.243,789.255 484.802,764.747 485.361,779.198 485.92,761.819 486.48,773.354 487.039,836.025 487.598,849.993 488.157,821.806 488.717,866.101 489.276,873.724 489.835,866.512 490.394,861.143 490.954,852.245 491.513,828.056 492.072,804.88 492.631,802.296 493.191,751.39 493.75,736.391 494.309,733.871 494.868,749.212 495.428,763.601 495.987,777.312 496.546,787.085 497.105,783.947 497.665,751.024 498.224,751.421 498.783,748.699 499.342,730.195 499.902,745.179 500.461,723.121 501.02,687.801 501.579,671.684 502.139,659.215 502.698,648.547 503.257,636.527 503.816,657.683 504.376,665.416 504.935,665.504 505.494,686.273 506.053,724.35 506.613,740.412 507.172,786.185 507.731,766.025 508.29,778.368 508.85,792.038 509.409,773.479 509.968,791.844 510.527,791.426 511.087,790.123 511.646,768.723 512.205,784.828 512.764,765.086 513.324,792.693 513.883,788.585 514.442,786.665 515.001,767.557 515.561,766.849 516.12,777.929 516.679,773.762 517.238,706.183 517.798,722.811 518.357,673.509 518.916,708.559 519.475,706.954 520.035,726.445 520.594,708.824 521.153,760.139 521.712,729.884 522.272,749.349 522.831,811.773 523.39,825.426 523.949,821.407 524.509,817.578 525.068,795.564 525.627,806.637 526.186,833.912 526.746,824.135 527.305,834.227 527.864,797.619 528.423,779.844 528.983,743.124 529.542,756.153 530.101,754.029 530.66,739.608 531.22,756.099 531.779,752.887 532.338,750.712 532.897,764.544 533.457,763.693 534.016,794.028 534.575,757.658 535.134,790.108 535.694,788.304 536.253,815.796 536.812,774.372 537.371,759.358 537.931,712.924 538.49,716.207 539.049,714.721 539.608,701.132 540.168,717.261 540.727,732.251 541.286,739.816 541.845,738.848 542.405,754.607 542.964,785.341 543.523,764.111 544.082,779.166 544.642,776.477 545.201,772.44 545.76,754.567 546.319,704.699 546.879,719.592 547.438,720.223 547.997,704.81 548.556,657.376 549.116,614.142 549.675,600.862 550.234,590.65 550.793,600.125 551.353,605.99 551.912,645.615 552.471,634.137 553.031,639.03 553.59,610.537 554.149,613.379 554.708,651.292 555.268,673.08 555.827,658.975 556.386,678.68 556.945,685.413 557.505,722.493 558.064,739.053 558.623,768.202 559.182,732.84 559.742,714.705 560.301,717.72 560.86,718.467 561.419,686.777 561.979,704.225 562.538,721.052 563.097,719.112 563.656,719.221 564.216,733.458 564.775,699.049 565.334,681.461 565.893,636.825 566.453,642.454 567.012,678.667 567.571,695.676 568.13,680.832 568.69,702.385 569.249,718.657 569.808,753.155 570.367,732.416 570.927,715.577 571.486,746.845 572.045,761.89 572.604,790.99 573.164,785.253 573.723,765.008 574.282,746.3 574.841,746.238 575.401,759.577 575.96,755.728 576.519,723.865 577.078,706.805 577.638,690.223 578.197,690.541 578.756,658.842 579.315,661.354 579.875,663.047 580.434,632.605 580.993,652.48 581.552,624.671 582.112,644.234 582.671,631.224 583.23,636.464 583.789,640.906 584.349,644.7 584.908,631.687 585.467,635.031 586.026,620.239 586.586,591.397 587.145,633.277 587.704,658.77 588.263,627.353 588.823,646.539 589.382,634.656 589.941,657.551 590.5,660.725 591.06,663.572 591.619,647.414 592.178,618.377 592.737,622.725 593.297,610.258 593.856,634.209 594.415,655.692 594.974,659.609 595.534,695.8 596.093,715.107 596.652,697.622 597.211,718.177 597.771,715.855 598.33,713.175 598.889,714.495 599.448,713.666 600.008,728.945 600.567,725.694 601.126,757.858 601.685,756.058 602.245,757.353 602.804,754.099 603.363,750.265 603.922,795.053 604.482,823.998 605.041,836.209 605.6,815.394 606.159,776.624 606.719,789.302 607.278,799.736 607.837,778.765 608.396,777.399 608.956,739.521 609.515,720.328 610.074,686.596 610.633,732.312 611.193,714.617 611.752,744.054 612.311,773.386 612.87,786.945 613.43,780.377 613.989,796.578 614.548,791.69 615.107,737.263 615.667,753.789 616.226,784.107 616.785,782.847 617.344,777.672 617.904,788.175 618.463,782.416 619.022,777.224 619.581,787.456 620.141,812.998 620.7,839.538 621.259,815.419 621.818,777.017 622.378,755.774 622.937,721.69 623.496,704.32 624.055,705.225 624.615,737.219 625.174,733.545 625.733,718.173 626.292,747.822 626.852,728.145 627.411,743.084 627.97,724.214 628.529,709.769 629.089,726.094 629.648,757.676 630.207,755.338 630.766,749.775 631.326,809.017 631.885,786.484 632.444,780.016 633.003,777.403 633.563,789.953 634.122,784.447 634.681,764.274 635.24,821.29 635.8,832.354 636.359,811.091 636.918,790.706 637.477,770.238 638.037,766.485 638.596,809.407 639.155,822.106 639.714,831.524 640.274,855.279 640.833,846.298 641.392,857.331 641.951,847.014 642.511,819.919 643.07,817.337 643.629,811.117 644.188,789.039 644.748,797.442 645.307,775.587 645.866,740.362 646.425,753.111 646.985,717.204 647.544,711.965 648.103,710.322 648.662,739.168 649.222,722.369 649.781,688.982 650.34,690.108 650.899,707.399 651.459,705.163 652.018,690.964 652.577,690.511 653.136,686.979 653.696,704.861 654.255,655.514 654.814,653.653 655.373,620.447 655.933,643.73 656.492,651.092 657.051,666.368 657.61,681.765 658.17,695.925 658.729,694.485 659.288,689.722 659.847,705.575 660.407,657.982 660.966,661.072 661.525,646.821 662.084,649.873 662.644,653.721 663.203,689.924 663.762,662.866 664.321,680.884 664.881,680.545 665.44,683.901 665.999,683.511 666.558,700.596 667.118,704.263 667.677,719.67 668.236,684.126 668.795,670.368 669.355,654.938 669.914,674.911 670.473,676.43 671.032,676.214 671.592,695.6 672.151,662.576 672.71,697.119 673.269,680.108 673.829,727.621 674.388,729.233 674.947,743.354 675.506,756.205 676.066,766.349 676.625,756.502 677.184,752.611 677.743,762.928 678.303,742.102 678.862,724.214 679.421,706.246 679.981,689.392 680.54,708.118 681.099,689.807 681.658,721.471 682.218,733.239 682.777,731.179 683.336,714.307 683.895,731.131 684.455,728.538 685.014,738.662 685.573,738.493 686.132,752.943 686.692,751.293 687.251,712.837 687.81,694.83 688.369,707.871 688.929,710.151 689.488,723.558 690.047,774.337 690.606,754.048 691.166,751.681 691.725,765.344 692.284,749.253 692.843,762.246 693.403,707.751 693.962,708.752 694.521,709.202 695.08,744.181 695.64,771.709 696.199,732.58 696.758,715.523 697.317,682.147 697.877,617.152 698.436,638.947 698.995,644.544 699.554,646.898 700.114,651.335 700.673,656.28 701.232,626.671 701.791,650.629 702.351,635.723 702.91,639.842 703.469,673.707 704.028,644.374 704.588,632.978 705.147,638.412 705.706,658.766 706.265,694.978 706.825,678.471 707.384,695.361 707.943,710.364 708.502,741.929 709.062,739.079 709.621,706.611 710.18,687.54 710.739,735.976 711.299,702.085 711.858,735.339 712.417,730.735 712.976,741.164 713.536,706.442 714.095,707.527 714.654,691.599 715.213,677.801 715.773,616.736 716.332,604.583 716.891,560.616 717.45,567.291 718.01,607.15 718.569,615.108 719.128,639.055 719.687,642.83 720.247,627.564 720.806,613.09 721.365,600.726 721.924,586.954 722.484,561.075 723.043,567.59 723.602,591.021 724.161,615.121 724.721,619.555 725.28,624.152 725.839,646.51 726.398,651.066 726.958,669.78 727.517,669.455 728.076,654.92 728.635,672.262 729.195,674.808 729.754,676.259 730.313,675.609 730.872,675.452 731.432,657.916 731.991,656.136 732.55,642.524 733.109,631.673 733.669,621.909 734.228,612.634 734.787,620.176 735.346,611.657 735.906,580.794 736.465,615.749 737.024,618.38 737.583,589.293 738.143,609.227 738.702,629.095 739.261,648.3 739.82,652.132 740.38,640.556 740.939,642.84 741.498,684.398 742.057,686.364 742.617,690.17 743.176,676.365 743.735,676.664 744.294,693.132 744.854,676.117 745.413,678.363 745.972,677.491 746.531,699.986 747.091,668.111 747.65,636.103 748.209,638.345 748.768,639.931 749.328,626.896 749.887,615.734 750.446,638.042 751.005,638.696 751.565,688.028 752.124,707.575 752.683,719.816 753.242,715.551 753.802,702.302 754.361,718.065 754.92,748.126 755.479,761.769 756.039,795.584 756.598,773.305 757.157,767.6 757.716,736.01 758.276,720.155 758.835,749.592 759.394,765.953 759.953,793.93 760.513,786.489 761.072,796.444 761.631,791.164 762.19,800.647 762.75,782.263 763.309,791.961 763.868,818.579 764.427,814.979 764.987,805.294 765.546,812.54 766.105,774.537 766.664,768.288 767.224,765.027 767.783,762.322 768.342,760.567 768.901,742.063 769.461,754.963 770.02,738.638 770.579,737.301 771.138,701.093 771.698,702.302 772.257,716.978 772.816,716.573 773.375,733.034 773.935,681.185 774.494,713.908 775.053,697.338 775.612,729.647 776.172,727.704 776.731,740.559 777.29,735.631 777.849,734.795 778.409,733.735 778.968,719.97 779.527,687.987 780.086,686.589 780.646,719.92 781.205,720.261 781.764,701.766 782.323,717.897 782.883,718.914 783.442,702.791 784.001,668.076 784.56,703.631 785.12,720.584 785.679,704.156 786.238,704.912 786.797,722.593 787.357,703.606 787.916,686.432 788.475,699.445 789.034,697.651 789.594,697.247 790.153,682.233 790.712,679.278 791.271,698.017 791.831,649.173 792.39,652.113 792.949,618.282 793.508,590.14 794.068,610.718 794.627,614.125 795.186,634.011 795.745,654.737 796.305,654.185 796.864,639.342 797.423,643.676 797.982,597.258 798.542,617.934 799.101,604.924 799.66,623.047 800.219,612.658 800.779,632.582 801.338,650.52 801.897,652.153 802.456,635.962 803.016,636.657 803.575,641.633 804.134,645.258 804.693,615.543 805.253,634.273 805.812,634.934 806.371,638.469 806.931,672.939 807.49,642.318 808.049,644.983 808.608,665.072 809.168,683.732 809.727,686.074 810.286,670.622 810.845,676.371 811.405,661.111 811.964,648.702 812.523,623.497 813.082,638.932 813.642,608.81 814.201,598.45 814.76,601.588 815.319,622.743 815.879,640.232 816.438,641.964 816.997,675.981 817.556,674.578 818.116,675.908 818.675,674.64 819.234,676.77 819.793,680.752 820.353,697.319 820.912,711.739 821.471,694.073 822.03,706.513 822.59,723.844 823.149,738.038 823.708,736.735 824.267,748.981 824.827,728.037 825.386,713.042 825.945,695.516 826.504,728.109 827.064,744.299 827.623,756.549 828.182,770.962 828.741,766.844 829.301,760.67 829.86,787.332 830.419,828.736 830.978,835.801 831.538,893.146 832.097,880.332 832.656,887.251 833.215,923.795 833.775,911.336 834.334,884.832 834.893,904.173 835.452,859.539 836.012,800.795 836.571,794.473 837.13,804.971 837.689,783.482 838.249,775.437 838.808,787.867 839.367,753.072 839.926,747.69 840.486,789.225 841.045,786.421 841.604,797.335 842.163,788.821 842.723,781.398 843.282,776.088 843.841,773.296 844.4,735.687 844.96,734.069 845.519,748.36 846.078,759.294 846.637,738.296 847.197,722.693 847.756,718.204 848.315,731.043 848.874,727.004 849.434,691.134 849.993,693.089 850.552,677.607 851.111,710.653 851.671,706.63 852.23,736.232 852.789,764.296 853.348,791.076 853.908,769.598 854.467,767.021 855.026,746.321 855.585,727.52 856.145,691.03 856.704,686.242 857.263,706.511 857.822,675.662 858.382,687.544 858.941,686.525 859.5,669.679 860.059,640.229 860.619,613.524 861.178,617.838 861.737,620.648 862.296,639.732 862.856,625.548 863.415,613.761 863.974,646.558 864.533,601.665 865.093,605.089 865.652,611.58 866.211,615.67 866.77,591.575 867.33,563.362 867.889,572.004 868.448,577.085 869.007,565.796 869.567,568.899 870.126,559.142 870.685,518.712 871.244,510.918 871.804,567.631 872.363,578.783 872.922,615.586 873.481,589.1 874.041,525.804 874.6,530.979 875.159,518.291 875.718,527.702 876.278,550.53 876.837,560.259 877.396,565.863 877.955,570.956 878.515,562.556 879.074,570.813 879.633,595.112 880.192,584.553 880.752,609.084 881.311,632.226 881.87,654.048 882.429,673.723 882.989,692.51 883.548,690.416 884.107,708.003 884.666,688.845 885.226,703.63 885.785,701.494 886.344,750.946 886.903,746.081 887.463,727.663 888.022,708.988 888.581,757.427 889.14,752.998 889.7,769.533 890.259,762.461 890.818,757.95 891.377,741.794 891.937,723.305 892.496,721.7 893.055,720.717 893.614,735.998 894.174,750.016 894.733,718.262 895.292,731.521 895.851,728.69 896.411,710.009 896.97,703.875 897.529,687.863 898.088,686.679 898.648,674.959 899.207,719.134 899.766,716.028 900.325,698.995 900.885,697.918 901.444,679.508 902.003,681.114 902.562,668.091 903.122,652.424 903.681,670.878 904.24,721.807 904.799,717.73 905.359,716.148 905.918,749.42 906.477,747.158 907.036,729.754 907.596,742.854 908.155,725.06 908.714,704.459 909.273,730.986 909.833,714.65 910.392,711.571 910.951,711.937 911.51,725.992 912.07,742.542 912.629,739.624 913.188,754.862 913.747,734.22 914.307,767.508 914.866,746.841 915.425,700.149 915.984,682.735 916.544,665.213 917.103,636.457 917.662,655.125 918.221,659.488 918.781,645.868 919.34,659.913 919.899,644.064 920.458,630.726 921.018,631.968 921.577,633.726 922.136,621.764 922.695,623.36 923.255,594.735 923.814,631.622 924.373,634.503 924.932,604.805 925.492,597.271 926.051,554.048 926.61,559.992 927.169,597.822 927.729,599.332 928.288,603.711 928.847,607.526 929.406,645.381 929.966,633.875 930.525,685.373 931.084,654.96 931.644,690.44 932.203,691.376 932.762,702.979 933.321,752.027 933.881,781.074 934.44,774.22 934.999,800.22 935.558,792.592 936.118,789.378 936.677,752.575 937.236,748.685 937.795,764.035 938.355,774.743 938.914,769.582 939.473,761.108 940.032,738.504 940.592,687.245 941.151,733.972 941.71,747.472 942.269,729.245 942.829,712.742 943.388,693.655 943.947,676.795 944.506,679.627 945.066,678.153 945.625,679.261 946.184,678.301 946.743,664.745 947.303,696.648 947.862,663.431 948.421,694.516 948.98,677.951 949.54,711.065 950.099,694.647 950.658,661.517 951.217,663.747 951.777,678.871 952.336,613.784 952.895,598.519 953.454,619.247 954.014,644.527 954.573,630.479 955.132,617.7 955.691,655.48 956.251,673.629 956.81,692.832 957.369,673.857 957.928,672.83 958.488,625.681 959.047,627.037 959.606,661.765 960.165,680.92 960.725,700.152 961.284,682.477 961.843,679.436 962.402,678.259 962.962,694.798 963.521,694.794 964.08,724.057 964.639,705.405 965.199,723.247 965.758,719.253 966.317,733.515 966.876,713.271 967.436,732.25 967.995,745.011 968.554,791.829 969.113,803.376 969.673,846.906 970.232,870.131 970.791,873.206 971.35,849.065 971.91,855.723 972.469,845.927 973.028,837.853 973.587,846.098 974.147,852.905 974.706,813.99 975.265,836.766 975.824,830.644 976.384,772.888 976.943,731.943 977.502,744.378 978.061,741.583 978.621,757.379 979.18,704.168 979.739,703.388 980.298,716.157 980.858,681.747 981.417,683.861 981.976,685.538 982.535,652.482 983.095,637.368 983.654,643.546 984.213,631.812 984.772,616.729 985.332,636.722 985.891,624.847 986.45,646.091 987.009,665.102 987.569,683.501 988.128,670.369 988.687,672.463 989.246,705.796 989.806,702.597 990.365,721.76 990.924,701.479 991.483,666.215 992.043,651.253 992.602,638.54 993.161,675.211 993.72,675.396 994.28,675.897 994.839,628.681 995.398,645.747 995.957,649.816 996.517,650.255 997.076,600.446 997.635,624.522 998.194,641.267 998.754,613.32 999.313,632.566 999.872,615.56 1000.43,616.776 1000.99,604.996 1001.55,626.755 1002.11,614.224 1002.67,619.058 1003.23,641.131 1003.79,645.603 1004.35,661.002 1004.91,711.633 1005.46,679.695 1006.02,694.128 1006.58,679.904 1007.14,700.743 1007.7,700.189 1008.26,683.618 1008.82,682.228 1009.38,681.292 1009.94,678.856 1010.5,649.112 1011.06,653.046 1011.62,655.809 1012.18,656.485 1012.73,656.84 1013.29,676.381 1013.85,645.12 1014.41,662.358 1014.97,648.394 1015.53,632.449 1016.09,620.839 1016.65,609.367 1017.21,648.385 1017.77,621.192 1018.33,642.608 1018.89,645.613 1019.45,668.687 1020.01,650.405 1020.56,683.974 1021.12,703.042 1021.68,698.912 1022.24,715.959 1022.8,713.974 1023.36,728.225 1023.92,726.43 1024.48,741.04 1025.04,718.92 1025.6,732.333 1026.16,731.907 1026.72,713.117 1027.28,709.704 1027.83,709.626 1028.39,724.225 1028.95,721.762 1029.51,736.334 1030.07,702.757 1030.63,701.544 1031.19,730.514 1031.75,742.757 1032.31,771.719 1032.87,768.551 1033.43,763.547 1033.99,727.293 1034.55,726.724 1035.1,741.655 1035.66,754.941 1036.22,769.334 1036.78,779.638 1037.34,755.575 1037.9,738.155 1038.46,733.389 1039.02,715.282 1039.58,730.255 1040.14,698.811 1040.7,677.013 1041.26,676.905 1041.82,631.435 1042.38,619.408 1042.93,623.179 1043.49,625.558 1044.05,614.204 1044.61,602.082 1045.17,590.152 1045.73,593.694 1046.29,580.698 1046.85,582.102 1047.41,570.955 1047.97,529.882 1048.53,503.884 1049.09,516.904 1049.65,559.116 1050.2,550.692 1050.76,558.826 1051.32,542.362 1051.88,503.094 1052.44,498.308 1053,511.122 1053.56,491.363 1054.12,470.919 1054.68,483.368 1055.24,532.526 1055.8,522.209 1056.36,544.108 1056.92,569.402 1057.48,574.586 1058.03,564.011 1058.59,585.252 1059.15,622.859 1059.71,623.957 1060.27,608.201 1060.83,630.77 1061.39,631.806 1061.95,618.012 1062.51,636.255 1063.07,654.543 1063.63,636.886 1064.19,635.54 1064.75,689.911 1065.3,721.331 1065.86,738.709 1066.42,733.078 1066.98,730.505 1067.54,746.313 1068.1,757.872 1068.66,737.043 1069.22,746.315 1069.78,741.87 1070.34,766.537 1070.9,749.595 1071.46,715.179 1072.02,711.56 1072.57,675.167 1073.13,659.067 1073.69,660.07 1074.25,660.663 1074.81,644.392 1075.37,630.925 1075.93,635.447 1076.49,658.871 1077.05,663.426 1077.61,679.327 1078.17,698.788 1078.73,677.538 1079.29,676.038 1079.85,663.695 1080.4,665.896 1080.96,668.334 1081.52,700.116 1082.08,704.279 1082.64,705.298 1083.2,704.362 1083.76,670.658 1084.32,686.413 1084.88,671.661 1085.44,652.446 1086,685.793 1086.56,717.05 1087.12,715.332 1087.67,734.053 1088.23,746.74 1088.79,728.346 1089.35,709.235 1089.91,709.272 1090.47,704.598 1091.03,733.523 1091.59,781.592 1092.15,776.809 1092.71,786.216 1093.27,777.857 1093.83,756.144 1094.39,737.917 1094.94,752.447 1095.5,732.54 1096.06,732.152 1096.62,713.354 1097.18,709.748 1097.74,723.413 1098.3,702.425 1098.86,716.175 1099.42,712.995 1099.98,712.217 1100.54,694.319 1101.1,708.403 1101.66,662.601 1102.22,649.954 1102.77,670.688 1103.33,606.48 1103.89,628.393 1104.45,648.34 1105.01,631.789 1105.57,602.163 1106.13,605.022 1106.69,626.557 1107.25,629.809 1107.81,615.581 1108.37,631.796 1108.93,634.849 1109.49,636.787 1110.04,638.019 1110.6,624.146 1111.16,626.851 1111.72,633.055 1112.28,584.809 1112.84,618.072 1113.4,619.685 1113.96,656.285 1114.52,658.199 1115.08,626.139 1115.64,613.381 1116.2,617.674 1116.76,654.189 1117.31,638.102 1117.87,657.629 1118.43,646.275 1118.99,650.237 1119.55,718.84 1120.11,751.372 1120.67,744.473 1121.23,757.497 1121.79,768.934 1122.35,769.662 1122.91,767.304 1123.47,748.809 1124.03,743.965 1124.59,791.012 1125.14,787.363 1125.7,782.172 1126.26,763.845 1126.82,758.67 1127.38,722.28 1127.94,738.746 1128.5,704.793 1129.06,688.241 1129.62,673.019 1130.18,660.157 1130.74,662.322 1131.3,678.153 1131.86,695.732 1132.41,693.874 1132.97,694.607 1133.53,661.409 1134.09,629.651 1134.65,631.589 1135.21,619.316 1135.77,606.092 1136.33,607.306 1136.89,641.418 1137.45,630.016 1138.01,665.524 1138.57,668.303 1139.13,684.997 1139.68,668.989 1140.24,670.433 1140.8,660.31 1141.36,663.752 1141.92,666.273 1142.48,665.336 1143.04,695.784 1143.6,664.23 1144.16,695.158 1144.72,709.838 1145.28,726.111 1145.84,738.859 1146.4,736.864 1146.96,718.186 1147.51,719.385 1148.07,700.886 1148.63,685.596 1149.19,702.415 1149.75,702.811 1150.31,687.622 1150.87,687.145 1151.43,654.154 1151.99,702.164 1152.55,704.229 1153.11,673.224 1153.67,674.861 1154.23,691.106 1154.78,693.092 1155.34,660.215 1155.9,674.227 1156.46,659.703 1157.02,629.583 1157.58,647.038 1158.14,666.335 1158.7,668.863 1159.26,672.416 1159.82,639.397 1160.38,643.969 1160.94,631.416 1161.5,650.231 1162.05,682.821 1162.61,684.13 1163.17,682.62 1163.73,682.313 1164.29,685.28 1164.85,687.945 1165.41,687.723 1165.97,685.285 1166.53,687.714 1167.09,684.617 1167.65,683.706 1168.21,684.54 1168.77,684.684 1169.33,681.137 1169.88,713.155 1170.44,759.196 1171,754.344 1171.56,734.481 1172.12,750.747 1172.68,763.863 1173.24,777.066 1173.8,773.444 1174.36,767.236 1174.92,744.562 1175.48,759.426 1176.04,786.964 1176.6,765.469 1177.15,745.935 1177.71,758.864 1178.27,773.483 1178.83,781.984 1179.39,793.335 1179.95,754.151 1180.51,733.958 1181.07,714.12 1181.63,659.846 1182.19,644.709 1182.75,642.374 1183.31,657.958 1183.87,675.13 1184.43,676.005 1184.98,690.185 1185.54,672.538 1186.1,658.557 1186.66,693.173 1187.22,642.702 1187.78,658.826 1188.34,661.63 1188.9,627.899 1189.46,647.918 1190.02,712.213 1190.58,727.31 1191.14,723.014 1191.7,687.801 1192.25,717.409 1192.81,730.188 1193.37,696.428 1193.93,739.432 1194.49,751.363 1195.05,747.7 1195.61,728.673 1196.17,726.373 1196.73,735.976 1197.29,763.251 1197.85,728.482 1198.41,741.059 1198.97,739.675 1199.52,754.388 1200.08,766.679 1200.64,775.523 1201.2,787.585 1201.76,782.101 1202.32,776.459 1202.88,770.116 1203.44,736.149 1204,732.657 1204.56,731.277 1205.12,699.076 1205.68,698.048 1206.24,727.11 1206.8,728.785 1207.35,739.352 1207.91,738.382 1208.47,764.939 1209.03,743.143 1209.59,660.928 1210.15,630.647 1210.71,633.81 1211.27,624.095 1211.83,642.719 1212.39,660.665 1212.95,665.521 1213.51,632.003 1214.07,634.199 1214.62,625.346 1215.18,645.708 1215.74,630.857 1216.3,648.749 1216.86,600.414 1217.42,621.204 1217.98,622.511 1218.54,625.734 1219.1,596.823 1219.66,586.822 1220.22,594.733 1220.78,614.165 1221.34,633.85 1221.89,634.192 1222.45,638.171 1223.01,672.501 1223.57,689.84 1224.13,689.607 1224.69,687.483 1225.25,687.343 1225.81,687.416 1226.37,722.08 1226.93,739.954 1227.49,738.214 1228.05,668.717 1228.61,637.548 1229.17,654.738 1229.72,639.94 1230.28,689.326 1230.84,638.562 1231.4,722.289 1231.96,717.273 1232.52,732.985 1233.08,748.034 1233.64,741.972 1234.2,735.818 1234.76,750.96 1235.32,745.811 1235.88,740.888 1236.44,757.79 1236.99,773.006 1237.55,750.003 1238.11,749.134 1238.67,732.143 1239.23,714.656 1239.79,727.193 1240.35,676.085 1240.91,660.852 1241.47,643.459 1242.03,632.492 1242.59,616.53 1243.15,621.085 1243.71,625.055 1244.26,659.364 1244.82,660.193 1245.38,678.185 1245.94,692.333 1246.5,692.306 1247.06,675.372 1247.62,673.16 1248.18,675.886 1248.74,675.026 1249.3,678.294 1249.86,713.374 1250.42,679.204 1250.98,696.346 1251.54,661.288 1252.09,632.179 1252.65,649.068 1253.21,651.48 1253.77,672.841 1254.33,607.557 1254.89,660.697 1255.45,673.771 1256.01,688.193 1256.57,700.15 1257.13,697.864 1257.69,663.4 1258.25,717.43 1258.81,716.206 1259.36,679.983 1259.92,716.688 1260.48,731.804 1261.04,747.604 1261.6,745.311 1262.16,759.297 1262.72,769.753 1263.28,716.708 1263.84,699.857 1264.4,718.173 1264.96,699.059 1265.52,745.781 1266.08,713.111 1266.63,697.256 1267.19,714.529 1267.75,713.951 1268.31,680.201 1268.87,699.002 1269.43,683.45 1269.99,695.499 1270.55,674.631 1271.11,707.143 1271.67,693.28 1272.23,693.084 1272.79,691.925 1273.35,707.546 1273.91,725.773 1274.46,726.726 1275.02,692.804 1275.58,726.249 1276.14,756.808 1276.7,719.748 1277.26,716.76 1277.82,697.776 1278.38,730.084 1278.94,725.592 1279.5,723.832 1280.06,734.278 1280.62,745.738 1281.18,724.038 1281.73,690.537 1282.29,678.519 1282.85,664.286 1283.41,698.502 1283.97,694.8 1284.53,693.992 1285.09,705.644 1285.65,685.661 1286.21,685.198 1286.77,667.535 1287.33,680.626 1287.89,663.58 1288.45,665.313 1289,668.367 1289.56,674.548 1290.12,660.085 1290.68,677.113 1291.24,679.141 1291.8,678.533 1292.36,663.197 1292.92,669.965 1293.48,668.569 1294.04,650.034 1294.6,630.367 1295.16,598.933 1295.72,573.322 1296.28,626.935 1296.83,629.051 1297.39,632.382 1297.95,603.177 1298.51,625.231 1299.07,645.562 1299.63,648.19 1300.19,633.314 1300.75,634.168 1301.31,651.442 1301.87,669.933 1302.43,685.663 1302.99,701.185 1303.55,681.978 1304.1,697.953 1304.66,697.042 1305.22,697.66 1305.78,661.999 1306.34,682.584 1306.9,685.143 1307.46,670.376 1308.02,689.619 1308.58,704.175 1309.14,703.297 1309.7,722.844 1310.26,738.014 1310.82,735.32 1311.38,735.017 1311.93,752.815 1312.49,743.678 1313.05,756.942 1313.61,752.59 1314.17,733.839 1314.73,733.485 1315.29,733.687 1315.85,701.931 1316.41,700.153 1316.97,681.899 1317.53,681.524 1318.09,635.094 1318.65,636.942 1319.2,655.165 1319.76,670.437 1320.32,684.572 1320.88,717.204 1321.44,716.1 1322,731.63 1322.56,745.555 1323.12,744.111 1323.68,721.338 1324.24,755.503 1324.8,722.096 1325.36,704.186 1325.92,718.527 1326.47,717.161 1327.03,731.456 1327.59,711.083 1328.15,710.469 1328.71,707.742 1329.27,738.31 1329.83,734.371 1330.39,732.153 1330.95,681.214 1331.51,698.85 1332.07,647.975 1332.63,660.852 1333.19,644.385 1333.75,629.478 1334.3,611.621 1334.86,584.783 1335.42,573.831 1335.98,579.076 1336.54,618.039 1337.1,671.072 1337.66,671.48 1338.22,687.063 1338.78,651.089 1339.34,669.203 1339.9,634.705 1340.46,618.34 1341.02,637.849 1341.57,640.386 1342.13,624.27 1342.69,609.792 1343.25,613.791 1343.81,652.584 1344.37,656.882 1344.93,673.908 1345.49,687.951 1346.05,689.297 1346.61,704.825 1347.17,686.969 1347.73,672.977 1348.29,691.843 1348.84,677.019 1349.4,709.758 1349.96,709.222 1350.52,706.418 1351.08,725.45 1351.64,691.379 1352.2,691.066 1352.76,721.009 1353.32,750.474 1353.88,734.984 1354.44,730.626 1355,680.338 1355.56,665.027 1356.12,684.048 1356.67,653.573 1357.23,654.459 1357.79,655.392 1358.35,704.807 1358.91,704.289 1359.47,703.597 1360.03,703.329 1360.59,703.975 1361.15,703.364 1361.71,687.517 1362.27,652.454 1362.83,671.847 1363.39,676.042 1363.94,673.566 1364.5,637.31 1365.06,658.724 1365.62,664.78 1366.18,668.78 1366.74,648.744 1367.3,630.653 1367.86,652.651 1368.42,702.692 1368.98,688.976 1369.54,688.528 1370.1,701.366 1370.66,686.574 1371.21,668.117 1371.77,674.453 1372.33,689.492 1372.89,671.919 1373.45,687.488 1374.01,624.53 1374.57,627.626 1375.13,614.692 1375.69,616.161 1376.25,588.248 1376.81,562.233 1377.37,539.239 1377.93,547.832 1378.49,537.876 1379.04,543.385 1379.6,567.015 1380.16,579.579 1380.72,590.792 1381.28,580.467 1381.84,567.106 1382.4,560.188 1382.96,566.983 1383.52,609.94 1384.08,618.897 1384.64,605.933 1385.2,625.028 1385.76,624.083 1386.31,627.373 1386.87,613.94 1387.43,619.511 1387.99,592.074 1388.55,582.877 1389.11,573.887 1389.67,625.389 1390.23,646.814 1390.79,697.803 1391.35,719.685 1391.91,716.571 1392.47,732.614 1393.03,750.187 1393.58,731.334 1394.14,699.618 1394.7,713.138 1395.26,682.295 1395.82,697.519 1396.38,660.066 1396.94,643.413 1397.5,662.751 1398.06,663.608 1398.62,662.812 1399.18,709.744 1399.74,711.75 1400.3,713.795 1400.86,696.591 1401.41,694.531 1401.97,708.983 1402.53,690.461 1403.09,690.459 1403.65,691.259 1404.21,707.662 1404.77,708.593 1405.33,754.59 1405.89,783.789 1406.45,781.311 1407.01,760.056 1407.57,769.453 1408.13,733.466 1408.68,746.312 1409.24,741.735 1409.8,735.884 1410.36,700.687 1410.92,714.298 1411.48,744.248 1412.04,771.297 1412.6,747.624 1413.16,775.088 1413.72,737.044 1414.28,731.781 1414.84,711.066 1415.4,760.917 1415.95,740.858 1416.51,721.566 1417.07,715.517 1417.63,696.946 1418.19,662.317 1418.75,692.31 1419.31,707.893 1419.87,704.553 1420.43,721.046 1420.99,705.268 1421.55,706.348 1422.11,674.127 1422.67,662.174 1423.23,645.756 1423.78,660.338 1424.34,660.795 1424.9,644.313 1425.46,645.497 1426.02,645.979 1426.58,664.173 1427.14,698.682 1427.7,697.973 1428.26,691.851 1428.82,674.457 1429.38,687.965 1429.94,655.634 1430.5,658.233 1431.05,673.353 1431.61,658.742 1432.17,663.04 1432.73,681.454 1433.29,697.86 1433.85,744.377 1434.41,722.698 1434.97,705.126 1435.53,738.893 1436.09,735.639 1436.65,736.398 1437.21,733.723 1437.77,747.302 1438.33,729.204 1438.88,746.599 1439.44,744.382 1440,742.422 1440.56,722.228 1441.12,704.529 1441.68,706.276 1442.24,689.874 1442.8,687.241 1443.36,685.599 1443.92,686.121 1444.48,669.318 1445.04,685.938 1445.6,698.403 1446.15,696.273 1446.71,695.861 1447.27,692.893 1447.83,676.451 1448.39,676.516 1448.95,694.714 1449.51,727.092 1450.07,724.079 1450.63,704.725 1451.19,673.658 1451.75,676.641 1452.31,673.821 1452.87,679.238 1453.42,664.133 1453.98,667.357 1454.54,680.536 1455.1,666.954 1455.66,714.986 1456.22,742.114 1456.78,772.832 1457.34,754.812 1457.9,733.093 1458.46,700.317 1459.02,664.294 1459.58,635.632 1460.14,655.239 1460.7,637.499 1461.25,658.226 1461.81,690.526 1462.37,735.701 1462.93,732.189 1463.49,729.166 1464.05,693.958 1464.61,693.756 1465.17,712.062 1465.73,713.597 1466.29,728.081 1466.85,740.744 1467.41,705.621 1467.97,701.328 1468.52,700.38 1469.08,701.674 1469.64,701.416 1470.2,665.729 1470.76,665.653 1471.32,665.806 1471.88,665.535 1472.44,664.736 1473,697.105 1473.56,682.499 1474.12,684.64 1474.68,671.777 1475.24,690.442 1475.79,674.079 1476.35,642.986 1476.91,645.732 1477.47,680.222 1478.03,665.422 1478.59,619.43 1479.15,591.953 1479.71,610.882 1480.27,580.991 1480.83,602.799 1481.39,594.122 1481.95,581.052 1482.51,621.254 1483.07,639.735 1483.62,626.105 1484.18,615.998 1484.74,633.248 1485.3,636.727 1485.86,640.632 1486.42,641.099 1486.98,658.05 1487.54,692.186 1488.1,704.295 1488.66,669.877 1489.22,683.862 1489.78,684.614 1490.34,701.217 1490.89,684.572 1491.45,703.138 1492.01,687.268 1492.57,685.896 1493.13,685.124 1493.69,687.423 1494.25,704.498 1494.81,719.255 1495.37,715.531 1495.93,729.48 1496.49,712.375 1497.05,709.208 1497.61,690.726 1498.16,676.434 1498.72,661.476 1499.28,661.895 1499.84,664.784 1500.4,684.401 1500.96,684.82 1501.52,716.666 1502.08,718.958 1502.64,735.303 1503.2,765.478 1503.76,778.982 1504.32,774.171 1504.88,769.47 1505.44,748.618 1505.99,776.566 1506.55,801.89 1507.11,793.682 1507.67,771.988 1508.23,769.821 1508.79,733.241 1509.35,679.147 1509.91,663.749 1510.47,651.169 1511.03,667.489 1511.59,634.42 1512.15,617.916 1512.71,653.727 1513.26,658.868 1513.82,660.91 1514.38,677.582 1514.94,695.617 1515.5,712.546 1516.06,725.597 1516.62,719.528 1517.18,748.508 1517.74,712.929 1518.3,690.918 1518.86,706.253 1519.42,704.801 1519.98,699.851 1520.53,685.284 1521.09,685.265 1521.65,714.768 1522.21,713.648 1522.77,713.44 1523.33,681.497 1523.89,683.361 1524.45,718.617 1525.01,699.401 1525.57,694.396 1526.13,678.779 1526.69,682.141 1527.25,663.429 1527.81,664.641 1528.36,618.091 1528.92,641.202 1529.48,661.186 1530.04,691.821 1530.6,708.795 1531.16,737.378 1531.72,748.792 1532.28,759.576 1532.84,755.87 1533.4,750.13 1533.96,765.686 1534.52,761.209 1535.08,758.401 1535.63,766.074 1536.19,747.49 1536.75,762.563 1537.31,756.987 1537.87,720.091 1538.43,718.865 1538.99,697.381 1539.55,693.911 1540.11,695.07 1540.67,693.24 1541.23,643.49 1541.79,646.287 1542.35,648.079 1542.9,651.46 1543.46,635.83 1544.02,652.985 1544.58,717.509 1545.14,728.487 1545.7,740.757 1546.26,737.022 1546.82,733.652 1547.38,749.962 1547.94,746.359 1548.5,744.69 1549.06,757.075 1549.62,771.083 1550.18,779.432 1550.73,757.389 1551.29,754.49 1551.85,735.689 1552.41,718.237 1552.97,732.066 1553.53,715.223 1554.09,694.957 1554.65,711.011 1555.21,708.475 1555.77,707.287 1556.33,690.691 1556.89,646.307 1557.45,681.142 1558,649.102 1558.56,682.151 1559.12,714.17 1559.68,731.89 1560.24,749.473 1560.8,765.618 1561.36,758.132 1561.92,751.164 1562.48,715.535 1563.04,663.755 1563.6,648.894 1564.16,617.545 1564.72,606.713 1565.28,626.018 1565.83,630.037 1566.39,621.623 1566.95,646.929 1567.51,648.287 1568.07,648.799 1568.63,652.984 1569.19,652.472 1569.75,653.273 1570.31,672.649 1570.87,722.485 1571.43,765.182 1571.99,759.711 1572.55,757.739 1573.1,755.759 1573.66,749.29 1574.22,699.602 1574.78,686.325 1575.34,683.266 1575.9,662.662 1576.46,679.049 1577.02,696.023 1577.58,696.144 1578.14,714.698 1578.7,696.648 1579.26,681.179 1579.82,679.937 1580.37,685.21 1580.93,714.768 1581.49,697.574 1582.05,696.273 1582.61,645.555 1583.17,631.049 1583.73,614.841 1584.29,616.366 1584.85,571.162 1585.41,609.293 1585.97,611.587 1586.53,634.487 1587.09,606.663 1587.65,628.369 1588.2,647.185 1588.76,669.225 1589.32,670.143 1589.88,652.724 1590.44,670.952 1591,689.61 1591.56,671.04 1592.12,671.686 1592.68,655.415 1593.24,673.87 1593.8,660.576 1594.36,676.464 1594.92,680.535 1595.47,683.278 1596.03,749.75 1596.59,712.403 1597.15,710.243 1597.71,680.363 1598.27,682.349 1598.83,702.634 1599.39,701.743 1599.95,682.943 1600.51,668.342 1601.07,686.968 1601.63,688.826 1602.19,671.656 1602.74,688.501 1603.3,687.341 1603.86,666.729 1604.42,698.074 1604.98,651.679 1605.54,669.905 1606.1,685.59 1606.66,734 1607.22,731.862 1607.78,727.05 1608.34,692.662 1608.9,691.596 1609.46,722.55 1610.02,736.769 1610.57,748.104 1611.13,762.408 1611.69,776.175 1612.25,755.299 1612.81,771.712 1613.37,767.169 1613.93,778.948 1614.49,758.532 1615.05,751.349 1615.61,700.985 1616.17,699.463 1616.73,666.444 1617.29,680.668 1617.84,647.329 1618.4,632.198 1618.96,634.654 1619.52,640.257 1620.08,641.539 1620.64,678.716 1621.2,699.862 1621.76,713.688 1622.32,693.591 1622.88,674.498 1623.44,689.332 1624,685.02 1624.56,682.935 1625.11,669.201 1625.67,667.169 1626.23,702.678 1626.79,717.216 1627.35,728.874 1627.91,729.823 1628.47,698.379 1629.03,679.982 1629.59,694.733 1630.15,675.769 1630.71,662.307 1631.27,697.79 1631.83,698.479 1632.39,712.691 1632.94,724.901 1633.5,704.642 1634.06,721.689 1634.62,707.88 1635.18,690.242 1635.74,686.566 1636.3,650.422 1636.86,667.104 1637.42,633.915 1637.98,619.778 1638.54,637.668 1639.1,610.231 1639.66,613.296 1640.21,633.031 1640.77,619.411 1641.33,621.584 1641.89,605.053 1642.45,640.067 1643.01,644.795 1643.57,661.515 1644.13,663.776 1644.69,650.829 1645.25,652.709 1645.81,639.798 1646.37,641.704 1646.93,660.374 1647.48,643.58 1648.04,658.475 1648.6,663.328 1649.16,633.765 1649.72,574.667 1650.28,565.443 1650.84,574.715 1651.4,562.691 1651.96,583.797 1652.52,573.749 1653.08,581.261 1653.64,586.883 1654.2,589.734 1654.76,596.003 1655.31,549.319 1655.87,605.808 1656.43,625.167 1656.99,584.659 1657.55,572.314 1658.11,575.752 1658.67,580.864 1659.23,570.41 1659.79,576.956 1660.35,599.634 1660.91,635.965 1661.47,622.815 1662.03,675.797 1662.58,661.935 1663.14,631.652 1663.7,635.016 1664.26,651.988 1664.82,667.99 1665.38,651.492 1665.94,638.997 1666.5,643.461 1667.06,645.184 1667.62,665.781 1668.18,665.633 1668.74,715.384 1669.3,747.303 1669.85,743.4 1670.41,725.991 1670.97,689.155 1671.53,691.829 1672.09,691.833 1672.65,708.274 1673.21,720.767 1673.77,718.654 1674.33,718.62 1674.89,699.458 1675.45,697.962 1676.01,665.052 1676.57,666.866 1677.13,687.393 1677.68,671.409 1678.24,685.45 1678.8,686.939 1679.36,704.491 1679.92,668.559 1680.48,670.052 1681.04,702.877 1681.6,671.359 1682.16,656.1 1682.72,672.076 1683.28,708.37 1683.84,707.203 1684.4,702.986 1684.95,703.314 1685.51,689.236 1686.07,674.693 1686.63,677.64 1687.19,660.441 1687.75,660.307 1688.31,664.108 1688.87,664.658 1689.43,668.69 1689.99,670.391 1690.55,633.986 1691.11,699.662 1691.67,730.617 1692.23,712.614 1692.78,709.951 1693.34,694.475 1693.9,743.955 1694.46,771.421 1695.02,785.249 1695.58,761.12 1696.14,757.163 1696.7,751.583 1697.26,748.815 1697.82,760.65 1698.38,741.292 1698.94,725.434 1699.5,709.847 1700.05,690.254 1700.61,690.892 1701.17,702.15 1701.73,713.98 1702.29,695.41 1702.85,743.216 1703.41,740.794 1703.97,736.87 1704.53,720.064 1705.09,720.147 1705.65,701.985 1706.21,698.711 1706.77,729.953 1707.32,709.177 1707.88,688.246 1708.44,704.922 1709,721.725 1709.56,721.063 1710.12,705.698 1710.68,704.31 1711.24,701.372 1711.8,713.62 1712.36,713.901 1712.92,710.152 1713.48,695.086 1714.04,676.083 1714.6,679.606 1715.15,730.58 1715.71,745.377 1716.27,711.555 1716.83,680.937 1717.39,665.114 1717.95,671.024 1718.51,670.121 1719.07,674.064 1719.63,705.29 1720.19,671.758 1720.75,690.067 1721.31,662.207 1721.87,647.365 1722.42,630.823 1722.98,634.732 1723.54,638.324 1724.1,641.51 1724.66,657.417 1725.22,678.007 1725.78,678.117 1726.34,661.224 1726.9,647.752 1727.46,638.115 1728.02,669.649 1728.58,690.337 1729.14,689.07 1729.69,641.171 1730.25,641.175 1730.81,610.786 1731.37,600.098 1731.93,638.177 1732.49,641.888 1733.05,630.687 1733.61,603.286 1734.17,640.442 1734.73,646.217 1735.29,651.6 1735.85,655.759 1736.41,656.88 1736.97,655.986 1737.52,691.703 1738.08,690.4 1738.64,692.993 1739.2,721.71 1739.76,717.256 1740.32,729.358 1740.88,742.452 1741.44,709.702 1742,740.372 1742.56,737.873 1743.12,764.863 1743.68,745.871 1744.24,727.046 1744.79,740.782 1745.35,755.941 1745.91,733.926 1746.47,731.405 1747.03,714.679 1747.59,698.177 1748.15,680.194 1748.71,648.843 1749.27,634.474 1749.83,631.636 1750.39,620.197 1750.95,621.646 1751.51,641.795 1752.06,644.141 1752.62,645.955 1753.18,643.824 1753.74,661.141 1754.3,644.664 1754.86,644.861 1755.42,642.356 1755.98,646.67 1756.54,647.538 1757.1,651.729 1757.66,650.495 1758.22,683.374 1758.78,666.37 1759.34,662.613 1759.89,697.392 1760.45,677.099 1761.01,677.132 1761.57,694.388 1762.13,709.481 1762.69,706.61 1763.25,673.843 1763.81,655.673 1764.37,658.126 1764.93,645.41 1765.49,610.829 1766.05,581.85 1766.61,602.17 1767.16,590.961 1767.72,597.751 1768.28,619.618 1768.84,604.911 1769.4,607.477 1769.96,627.224 1770.52,662.786 1771.08,675.639 1771.64,693.42 1772.2,690.782 1772.76,724.412 1773.32,751.86 1773.88,766.614 1774.43,727.785 1774.99,739.447 1775.55,738.091 1776.11,718.285 1776.67,670.763 1777.23,671.862 1777.79,673.189 1778.35,673.027 1778.91,704.955 1779.47,719.469 1780.03,734.258 1780.59,733.988 1781.15,698.393 1781.71,700.869 1782.26,729.613 1782.82,725.914 1783.38,706.509 1783.94,688.863 1784.5,656.872 1785.06,627.147 1785.62,681.203 1786.18,680.839 1786.74,696.351 1787.3,679.653 1787.86,710.291 1788.42,711.212 1788.98,695.692 1789.53,690.954 1790.09,692.631 1790.65,689.679 1791.21,661.334 1791.77,643.833 1792.33,646.579 1792.89,634.46 1793.45,623.061 1794.01,595.906 1794.57,598.952 1795.13,602.33 1795.69,602.824 1796.25,636.22 1796.8,652.009 1797.36,638.843 1797.92,638.371 1798.48,652.726 1799.04,674.208 1799.6,690.056 1800.16,656.26 1800.72,674.05 1801.28,676.402 1801.84,644.814 1802.4,727.996 1802.96,726.169 1803.52,723.628 1804.08,706.746 1804.63,720.13 1805.19,736.204 1805.75,748.706 1806.31,747.435 1806.87,729.358 1807.43,726.225 1807.99,707.461 1808.55,739.706 1809.11,772.586 1809.67,785.773 1810.23,794.664 1810.79,772.151 1811.35,782.504 1811.9,776.045 1812.46,767.879 1813.02,776.809 1813.58,787.728 1814.14,783.255 1814.7,779.087 1815.26,805.258 1815.82,798.281 1816.38,809.335 1816.94,799.224 1817.5,777.553 1818.06,759.549 1818.62,755.908 1819.18,719.557 1819.73,702.37 1820.29,685.882 1820.85,684.779 1821.41,684.16 1821.97,682.258 1822.53,681.711 1823.09,681.781 1823.65,680.926 1824.21,697.575 1824.77,677.45 1825.33,660.66 1825.89,712.264 1826.45,678.859 1827,696.795 1827.56,679.411 1828.12,678.338 1828.68,724.935 1829.24,723.643 1829.8,740.162 1830.36,736.906 1830.92,718.002 1831.48,718.177 1832.04,654.93 1832.6,652.907 1833.16,654.999 1833.72,606.694 1834.27,628.217 1834.83,649.529 1835.39,622.39 1835.95,625.252 1836.51,642.527 1837.07,679.03 1837.63,695.179 1838.19,695.512 \"/>\n<path clip-path=\"url(#clip533)\" d=\"M720.247 691.123 L720.806 691.123 L721.365 691.123 L721.924 691.123 L722.484 691.123 L723.043 691.123 L723.602 691.123 L724.161 691.123 L724.721 691.123 L725.28 691.123 L725.839 691.123 L726.398 691.123 L726.958 691.123 L727.517 691.123 L728.076 691.123 L728.635 691.123 L729.195 691.123 L729.754 691.123 L730.313 691.123 L730.872 691.123 L731.432 691.123 L731.991 691.123 L732.55 691.123 L733.109 691.123 L733.669 691.123 L734.228 691.123 L734.787 691.123 L735.346 691.123 L735.906 691.123 L736.465 691.123 L737.024 691.123 L737.583 691.123 L738.143 691.123 L738.702 691.123 L739.261 691.123 L739.82 691.123 L740.38 691.123 L740.939 691.123 L741.498 691.123 L742.057 691.123 L742.617 691.123 L743.176 691.123 L743.735 691.123 L744.294 691.123 L744.854 691.123 L745.413 691.123 L745.972 691.123 L746.531 691.123 L747.091 691.123 L747.65 691.123 L748.209 691.123 L748.768 691.123 L749.328 691.123 L749.887 691.123 L750.446 691.123 L751.005 691.123 L751.565 691.123 L752.124 691.123 L752.683 691.123 L753.242 691.123 L753.802 691.123 L754.361 691.123 L754.92 691.123 L755.479 691.123 L756.039 691.123 L756.598 691.123 L757.157 691.123 L757.716 691.123 L758.276 691.123 L758.835 691.123 L759.394 691.123 L759.953 691.123 L760.513 691.123 L761.072 691.123 L761.631 691.123 L762.19 691.123 L762.75 691.123 L763.309 691.123 L763.868 691.123 L764.427 691.123 L764.987 691.123 L765.546 691.123 L766.105 691.123 L766.664 691.123 L767.224 691.123 L767.783 691.123 L768.342 691.123 L768.901 691.123 L769.461 691.123 L770.02 691.123 L770.579 691.123 L771.138 691.123 L771.698 691.123 L772.257 691.123 L772.816 691.123 L773.375 691.123 L773.935 691.123 L774.494 691.123 L775.053 691.123 L775.612 691.123 L776.172 691.123 L776.731 691.123 L777.29 691.123 L777.849 691.123 L778.409 691.123 L778.968 691.123 L779.527 691.123 L780.086 691.123 L780.646 691.123 L781.205 691.123 L781.764 691.123 L782.323 691.123 L782.883 691.123 L783.442 691.123 L784.001 691.123 L784.56 691.123 L785.12 691.123 L785.679 691.123 L786.238 691.123 L786.797 691.123 L787.357 691.123 L787.916 691.123 L788.475 691.123 L789.034 691.123 L789.594 691.123 L790.153 691.123 L790.712 691.123 L791.271 691.123 L791.831 691.123 L792.39 691.123 L792.949 691.123 L793.508 691.123 L794.068 691.123 L794.627 691.123 L795.186 691.123 L795.745 691.123 L796.305 691.123 L796.864 691.123 L797.423 691.123 L797.982 691.123 L798.542 691.123 L799.101 691.123 L799.66 691.123 L800.219 691.123 L800.779 691.123 L801.338 691.123 L801.897 691.123 L802.456 691.123 L803.016 691.123 L803.575 691.123 L804.134 691.123 L804.693 691.123 L805.253 691.123 L805.812 691.123 L806.371 691.123 L806.931 691.123 L807.49 691.123 L808.049 691.123 L808.608 691.123 L809.168 691.123 L809.727 691.123 L810.286 691.123 L810.845 691.123 L811.405 691.123 L811.964 691.123 L812.523 691.123 L813.082 691.123 L813.642 691.123 L814.201 691.123 L814.76 691.123 L815.319 691.123 L815.879 691.123 L816.438 691.123 L816.997 691.123 L817.556 691.123 L818.116 691.123 L818.675 691.123 L819.234 691.123 L819.793 691.123 L820.353 691.123 L820.912 691.123 L821.471 691.123 L822.03 691.123 L822.59 691.123 L823.149 691.123 L823.708 691.123 L824.267 691.123 L824.827 691.123 L825.386 691.123 L825.945 691.123 L826.504 691.123 L827.064 691.123 L827.623 691.123 L828.182 691.123 L828.741 691.123 L829.301 691.123 L829.86 691.123 L830.419 691.123 L830.978 691.123 L831.538 691.123 L832.097 691.123 L832.656 691.123 L833.215 691.123 L833.775 691.123 L834.334 691.123 L834.893 691.123 L835.452 691.123 L836.012 691.123 L836.571 691.123 L837.13 691.123 L837.689 691.123 L838.249 691.123 L838.808 691.123 L839.367 691.123 L839.926 691.123 L840.486 691.123 L841.045 691.123 L841.604 691.123 L842.163 691.123 L842.723 691.123 L843.282 691.123 L843.841 691.123 L844.4 691.123 L844.96 691.123 L845.519 691.123 L846.078 691.123 L846.637 691.123 L847.197 691.123 L847.756 691.123 L848.315 691.123 L848.874 691.123 L849.434 691.123 L849.993 691.123 L850.552 691.123 L851.111 691.123 L851.671 691.123 L852.23 691.123 L852.789 691.123 L853.348 691.123 L853.908 691.123 L854.467 691.123 L855.026 691.123 L855.585 691.123 L856.145 691.123 L856.704 691.123 L857.263 691.123 L857.822 691.123 L858.382 691.123 L858.941 691.123 L859.5 691.123 L860.059 691.123 L860.619 691.123 L861.178 691.123 L861.737 691.123 L862.296 691.123 L862.856 691.123 L863.415 691.123 L863.974 691.123 L864.533 691.123 L865.093 691.123 L865.652 691.123 L866.211 691.123 L866.77 691.123 L867.33 691.123 L867.889 691.123 L868.448 691.123 L869.007 691.123 L869.567 691.123 L870.126 691.123 L870.685 691.123 L871.244 691.123 L871.804 691.123 L872.363 691.123 L872.922 691.123 L873.481 691.123 L874.041 691.123 L874.6 691.123 L875.159 691.123 L875.718 691.123 L876.278 691.123 L876.837 691.123 L877.396 691.123 L877.955 691.123 L878.515 691.123 L879.074 691.123 L879.633 691.123 L880.192 691.123 L880.752 691.123 L881.311 691.123 L881.87 691.123 L882.429 691.123 L882.989 691.123 L883.548 691.123 L884.107 691.123 L884.666 691.123 L885.226 691.123 L885.785 691.123 L886.344 691.123 L886.903 691.123 L887.463 691.123 L888.022 691.123 L888.581 691.123 L889.14 691.123 L889.7 691.123 L890.259 691.123 L890.818 691.123 L891.377 691.123 L891.937 691.123 L892.496 691.123 L893.055 691.123 L893.614 691.123 L894.174 691.123 L894.733 691.123 L895.292 691.123 L895.851 691.123 L896.411 691.123 L896.97 691.123 L897.529 691.123 L898.088 691.123 L898.648 691.123 L899.207 691.123 L899.766 691.123 L900.325 691.123 L900.885 691.123 L901.444 691.123 L902.003 691.123 L902.562 691.123 L903.122 691.123 L903.681 691.123 L904.24 691.123 L904.799 691.123 L905.359 691.123 L905.918 691.123 L906.477 691.123 L907.036 691.123 L907.596 691.123 L908.155 691.123 L908.714 691.123 L909.273 691.123 L909.833 691.123 L910.392 691.123 L910.951 691.123 L911.51 691.123 L912.07 691.123 L912.629 691.123 L913.188 691.123 L913.747 691.123 L914.307 691.123 L914.866 691.123 L915.425 691.123 L915.984 691.123 L916.544 691.123 L917.103 691.123 L917.662 691.123 L918.221 691.123 L918.781 691.123 L919.34 691.123 L919.899 691.123 L920.458 691.123 L921.018 691.123 L921.577 691.123 L922.136 691.123 L922.695 691.123 L923.255 691.123 L923.814 691.123 L924.373 691.123 L924.932 691.123 L925.492 691.123 L926.051 691.123 L926.61 691.123 L927.169 691.123 L927.729 691.123 L928.288 691.123 L928.847 691.123 L929.406 691.123 L929.966 691.123 L930.525 691.123 L931.084 691.123 L931.644 691.123 L932.203 691.123 L932.762 691.123 L933.321 691.123 L933.881 691.123 L934.44 691.123 L934.999 691.123 L935.558 691.123 L936.118 691.123 L936.677 691.123 L937.236 691.123 L937.795 691.123 L938.355 691.123 L938.914 691.123 L939.473 691.123 L940.032 691.123 L940.592 691.123 L941.151 691.123 L941.71 691.123 L942.269 691.123 L942.829 691.123 L943.388 691.123 L943.947 691.123 L944.506 691.123 L945.066 691.123 L945.625 691.123 L946.184 691.123 L946.743 691.123 L947.303 691.123 L947.862 691.123 L948.421 691.123 L948.98 691.123 L949.54 691.123 L950.099 691.123 L950.658 691.123 L951.217 691.123 L951.777 691.123 L952.336 691.123 L952.895 691.123 L953.454 691.123 L954.014 691.123 L954.573 691.123 L955.132 691.123 L955.691 691.123 L956.251 691.123 L956.81 691.123 L957.369 691.123 L957.928 691.123 L958.488 691.123 L959.047 691.123 L959.606 691.123 L960.165 691.123 L960.725 691.123 L961.284 691.123 L961.843 691.123 L962.402 691.123 L962.962 691.123 L963.521 691.123 L964.08 691.123 L964.639 691.123 L965.199 691.123 L965.758 691.123 L966.317 691.123 L966.876 691.123 L967.436 691.123 L967.995 691.123 L968.554 691.123 L969.113 691.123 L969.673 691.123 L970.232 691.123 L970.791 691.123 L971.35 691.123 L971.91 691.123 L972.469 691.123 L973.028 691.123 L973.587 691.123 L974.147 691.123 L974.706 691.123 L975.265 691.123 L975.824 691.123 L976.384 691.123 L976.943 691.123 L977.502 691.123 L978.061 691.123 L978.621 691.123 L979.18 691.123 L979.739 691.123 L980.298 691.123 L980.858 691.123 L981.417 691.123 L981.976 691.123 L982.535 691.123 L983.095 691.123 L983.654 691.123 L984.213 691.123 L984.772 691.123 L985.332 691.123 L985.891 691.123 L986.45 691.123 L987.009 691.123 L987.569 691.123 L988.128 691.123 L988.687 691.123 L989.246 691.123 L989.806 691.123 L990.365 691.123 L990.924 691.123 L991.483 691.123 L992.043 691.123 L992.602 691.123 L993.161 691.123 L993.72 691.123 L994.28 691.123 L994.839 691.123 L995.398 691.123 L995.957 691.123 L996.517 691.123 L997.076 691.123 L997.635 691.123 L998.194 691.123 L998.754 691.123 L999.313 691.123 L999.872 691.123 L1000.43 691.123 L1000.99 691.123 L1001.55 691.123 L1002.11 691.123 L1002.67 691.123 L1003.23 691.123 L1003.79 691.123 L1004.35 691.123 L1004.91 691.123 L1005.46 691.123 L1006.02 691.123 L1006.58 691.123 L1007.14 691.123 L1007.7 691.123 L1008.26 691.123 L1008.82 691.123 L1009.38 691.123 L1009.94 691.123 L1010.5 691.123 L1011.06 691.123 L1011.62 691.123 L1012.18 691.123 L1012.73 691.123 L1013.29 691.123 L1013.85 691.123 L1014.41 691.123 L1014.97 691.123 L1015.53 691.123 L1016.09 691.123 L1016.65 691.123 L1017.21 691.123 L1017.77 691.123 L1018.33 691.123 L1018.89 691.123 L1019.45 691.123 L1020.01 691.123 L1020.56 691.123 L1021.12 691.123 L1021.68 691.123 L1022.24 691.123 L1022.8 691.123 L1023.36 691.123 L1023.92 691.123 L1024.48 691.123 L1025.04 691.123 L1025.6 691.123 L1026.16 691.123 L1026.72 691.123 L1027.28 691.123 L1027.83 691.123 L1028.39 691.123 L1028.95 691.123 L1029.51 691.123 L1030.07 691.123 L1030.63 691.123 L1031.19 691.123 L1031.75 691.123 L1032.31 691.123 L1032.87 691.123 L1033.43 691.123 L1033.99 691.123 L1034.55 691.123 L1035.1 691.123 L1035.66 691.123 L1036.22 691.123 L1036.78 691.123 L1037.34 691.123 L1037.9 691.123 L1038.46 691.123 L1039.02 691.123 L1039.58 691.123 L1040.14 691.123 L1040.7 691.123 L1041.26 691.123 L1041.82 691.123 L1042.38 691.123 L1042.93 691.123 L1043.49 691.123 L1044.05 691.123 L1044.61 691.123 L1045.17 691.123 L1045.73 691.123 L1046.29 691.123 L1046.85 691.123 L1047.41 691.123 L1047.97 691.123 L1048.53 691.123 L1049.09 691.123 L1049.65 691.123 L1050.2 691.123 L1050.76 691.123 L1051.32 691.123 L1051.88 691.123 L1052.44 691.123 L1053 691.123 L1053.56 691.123 L1054.12 691.123 L1054.68 691.123 L1055.24 691.123 L1055.8 691.123 L1056.36 691.123 L1056.92 691.123 L1057.48 691.123 L1058.03 691.123 L1058.59 691.123 L1059.15 691.123 L1059.71 691.123 L1060.27 691.123 L1060.83 691.123 L1061.39 691.123 L1061.95 691.123 L1062.51 691.123 L1063.07 691.123 L1063.63 691.123 L1064.19 691.123 L1064.75 691.123 L1065.3 691.123 L1065.86 691.123 L1066.42 691.123 L1066.98 691.123 L1067.54 691.123 L1068.1 691.123 L1068.66 691.123 L1069.22 691.123 L1069.78 691.123 L1070.34 691.123 L1070.9 691.123 L1071.46 691.123 L1072.02 691.123 L1072.57 691.123 L1073.13 691.123 L1073.69 691.123 L1074.25 691.123 L1074.81 691.123 L1075.37 691.123 L1075.93 691.123 L1076.49 691.123 L1077.05 691.123 L1077.61 691.123 L1078.17 691.123 L1078.73 691.123 L1079.29 691.123 L1079.85 691.123 L1080.4 691.123 L1080.96 691.123 L1081.52 691.123 L1082.08 691.123 L1082.64 691.123 L1083.2 691.123 L1083.76 691.123 L1084.32 691.123 L1084.88 691.123 L1085.44 691.123 L1086 691.123 L1086.56 691.123 L1087.12 691.123 L1087.67 691.123 L1088.23 691.123 L1088.79 691.123 L1089.35 691.123 L1089.91 691.123 L1090.47 691.123 L1091.03 691.123 L1091.59 691.123 L1092.15 691.123 L1092.71 691.123 L1093.27 691.123 L1093.83 691.123 L1094.39 691.123 L1094.94 691.123 L1095.5 691.123 L1096.06 691.123 L1096.62 691.123 L1097.18 691.123 L1097.74 691.123 L1098.3 691.123 L1098.86 691.123 L1099.42 691.123 L1099.98 691.123 L1100.54 691.123 L1101.1 691.123 L1101.66 691.123 L1102.22 691.123 L1102.77 691.123 L1103.33 691.123 L1103.89 691.123 L1104.45 691.123 L1105.01 691.123 L1105.57 691.123 L1106.13 691.123 L1106.69 691.123 L1107.25 691.123 L1107.81 691.123 L1108.37 691.123 L1108.93 691.123 L1109.49 691.123 L1110.04 691.123 L1110.6 691.123 L1111.16 691.123 L1111.72 691.123 L1112.28 691.123 L1112.84 691.123 L1113.4 691.123 L1113.96 691.123 L1114.52 691.123 L1115.08 691.123 L1115.64 691.123 L1116.2 691.123 L1116.76 691.123 L1117.31 691.123 L1117.87 691.123 L1118.43 691.123 L1118.99 691.123 L1119.55 691.123 L1120.11 691.123 L1120.67 691.123 L1121.23 691.123 L1121.79 691.123 L1122.35 691.123 L1122.91 691.123 L1123.47 691.123 L1124.03 691.123 L1124.59 691.123 L1125.14 691.123 L1125.7 691.123 L1126.26 691.123 L1126.82 691.123 L1127.38 691.123 L1127.94 691.123 L1128.5 691.123 L1129.06 691.123 L1129.62 691.123 L1130.18 691.123 L1130.74 691.123 L1131.3 691.123 L1131.86 691.123 L1132.41 691.123 L1132.97 691.123 L1133.53 691.123 L1134.09 691.123 L1134.65 691.123 L1135.21 691.123 L1135.77 691.123 L1136.33 691.123 L1136.89 691.123 L1137.45 691.123 L1138.01 691.123 L1138.57 691.123 L1139.13 691.123 L1139.68 691.123 L1140.24 691.123 L1140.8 691.123 L1141.36 691.123 L1141.92 691.123 L1142.48 691.123 L1143.04 691.123 L1143.6 691.123 L1144.16 691.123 L1144.72 691.123 L1145.28 691.123 L1145.84 691.123 L1146.4 691.123 L1146.96 691.123 L1147.51 691.123 L1148.07 691.123 L1148.63 691.123 L1149.19 691.123 L1149.75 691.123 L1150.31 691.123 L1150.87 691.123 L1151.43 691.123 L1151.99 691.123 L1152.55 691.123 L1153.11 691.123 L1153.67 691.123 L1154.23 691.123 L1154.78 691.123 L1155.34 691.123 L1155.9 691.123 L1156.46 691.123 L1157.02 691.123 L1157.58 691.123 L1158.14 691.123 L1158.7 691.123 L1159.26 691.123 L1159.82 691.123 L1160.38 691.123 L1160.94 691.123 L1161.5 691.123 L1162.05 691.123 L1162.61 691.123 L1163.17 691.123 L1163.73 691.123 L1164.29 691.123 L1164.85 691.123 L1165.41 691.123 L1165.97 691.123 L1166.53 691.123 L1167.09 691.123 L1167.65 691.123 L1168.21 691.123 L1168.77 691.123 L1169.33 691.123 L1169.88 691.123 L1170.44 691.123 L1171 691.123 L1171.56 691.123 L1172.12 691.123 L1172.68 691.123 L1173.24 691.123 L1173.8 691.123 L1174.36 691.123 L1174.92 691.123 L1175.48 691.123 L1176.04 691.123 L1176.6 691.123 L1177.15 691.123 L1177.71 691.123 L1178.27 691.123 L1178.83 691.123 L1179.39 691.123 L1179.95 691.123 L1180.51 691.123 L1181.07 691.123 L1181.63 691.123 L1182.19 691.123 L1182.75 691.123 L1183.31 691.123 L1183.87 691.123 L1184.43 691.123 L1184.98 691.123 L1185.54 691.123 L1186.1 691.123 L1186.66 691.123 L1187.22 691.123 L1187.78 691.123 L1188.34 691.123 L1188.9 691.123 L1189.46 691.123 L1190.02 691.123 L1190.58 691.123 L1191.14 691.123 L1191.7 691.123 L1192.25 691.123 L1192.81 691.123 L1193.37 691.123 L1193.93 691.123 L1194.49 691.123 L1195.05 691.123 L1195.61 691.123 L1196.17 691.123 L1196.73 691.123 L1197.29 691.123 L1197.85 691.123 L1198.41 691.123 L1198.97 691.123 L1199.52 691.123 L1200.08 691.123 L1200.64 691.123 L1201.2 691.123 L1201.76 691.123 L1202.32 691.123 L1202.88 691.123 L1203.44 691.123 L1204 691.123 L1204.56 691.123 L1205.12 691.123 L1205.68 691.123 L1206.24 691.123 L1206.8 691.123 L1207.35 691.123 L1207.91 691.123 L1208.47 691.123 L1209.03 691.123 L1209.59 691.123 L1210.15 691.123 L1210.71 691.123 L1211.27 691.123 L1211.83 691.123 L1212.39 691.123 L1212.95 691.123 L1213.51 691.123 L1214.07 691.123 L1214.62 691.123 L1215.18 691.123 L1215.74 691.123 L1216.3 691.123 L1216.86 691.123 L1217.42 691.123 L1217.98 691.123 L1218.54 691.123 L1219.1 691.123 L1219.66 691.123 L1220.22 691.123 L1220.78 691.123 L1221.34 691.123 L1221.89 691.123 L1222.45 691.123 L1223.01 691.123 L1223.57 691.123 L1224.13 691.123 L1224.69 691.123 L1225.25 691.123 L1225.81 691.123 L1226.37 691.123 L1226.93 691.123 L1227.49 691.123 L1228.05 691.123 L1228.61 691.123 L1229.17 691.123 L1229.72 691.123 L1230.28 691.123 L1230.84 691.123 L1231.4 691.123 L1231.96 691.123 L1232.52 691.123 L1233.08 691.123 L1233.64 691.123 L1234.2 691.123 L1234.76 691.123 L1235.32 691.123 L1235.88 691.123 L1236.44 691.123 L1236.99 691.123 L1237.55 691.123 L1238.11 691.123 L1238.67 691.123 L1239.23 691.123 L1239.79 691.123 L1240.35 691.123 L1240.91 691.123 L1241.47 691.123 L1242.03 691.123 L1242.59 691.123 L1243.15 691.123 L1243.71 691.123 L1244.26 691.123 L1244.82 691.123 L1245.38 691.123 L1245.94 691.123 L1246.5 691.123 L1247.06 691.123 L1247.62 691.123 L1248.18 691.123 L1248.74 691.123 L1249.3 691.123 L1249.86 691.123 L1250.42 691.123 L1250.98 691.123 L1251.54 691.123 L1252.09 691.123 L1252.65 691.123 L1253.21 691.123 L1253.77 691.123 L1254.33 691.123 L1254.89 691.123 L1255.45 691.123 L1256.01 691.123 L1256.57 691.123 L1257.13 691.123 L1257.69 691.123 L1258.25 691.123 L1258.81 691.123 L1259.36 691.123 L1259.92 691.123 L1260.48 691.123 L1261.04 691.123 L1261.6 691.123 L1262.16 691.123 L1262.72 691.123 L1263.28 691.123 L1263.84 691.123 L1264.4 691.123 L1264.96 691.123 L1265.52 691.123 L1266.08 691.123 L1266.63 691.123 L1267.19 691.123 L1267.75 691.123 L1268.31 691.123 L1268.87 691.123 L1269.43 691.123 L1269.99 691.123 L1270.55 691.123 L1271.11 691.123 L1271.67 691.123 L1272.23 691.123 L1272.79 691.123 L1273.35 691.123 L1273.91 691.123 L1274.46 691.123 L1275.02 691.123 L1275.58 691.123 L1276.14 691.123 L1276.7 691.123 L1277.26 691.123 L1277.82 691.123 L1278.38 691.123 L1278.94 691.123 L1279.5 691.123 L1280.06 691.123 L1280.62 691.123 L1281.18 691.123 L1281.73 691.123 L1282.29 691.123 L1282.85 691.123 L1283.41 691.123 L1283.97 691.123 L1284.53 691.123 L1285.09 691.123 L1285.65 691.123 L1286.21 691.123 L1286.77 691.123 L1287.33 691.123 L1287.89 691.123 L1288.45 691.123 L1289 691.123 L1289.56 691.123 L1290.12 691.123 L1290.68 691.123 L1291.24 691.123 L1291.8 691.123 L1292.36 691.123 L1292.92 691.123 L1293.48 691.123 L1294.04 691.123 L1294.6 691.123 L1295.16 691.123 L1295.72 691.123 L1296.28 691.123 L1296.83 691.123 L1297.39 691.123 L1297.95 691.123 L1298.51 691.123 L1299.07 691.123 L1299.63 691.123 L1300.19 691.123 L1300.75 691.123 L1301.31 691.123 L1301.87 691.123 L1302.43 691.123 L1302.99 691.123 L1303.55 691.123 L1304.1 691.123 L1304.66 691.123 L1305.22 691.123 L1305.78 691.123 L1306.34 691.123 L1306.9 691.123 L1307.46 691.123 L1308.02 691.123 L1308.58 691.123 L1309.14 691.123 L1309.7 691.123 L1310.26 691.123 L1310.82 691.123 L1311.38 691.123 L1311.93 691.123 L1312.49 691.123 L1313.05 691.123 L1313.61 691.123 L1314.17 691.123 L1314.73 691.123 L1315.29 691.123 L1315.85 691.123 L1316.41 691.123 L1316.97 691.123 L1317.53 691.123 L1318.09 691.123 L1318.65 691.123 L1319.2 691.123 L1319.76 691.123 L1320.32 691.123 L1320.88 691.123 L1321.44 691.123 L1322 691.123 L1322.56 691.123 L1323.12 691.123 L1323.68 691.123 L1324.24 691.123 L1324.8 691.123 L1325.36 691.123 L1325.92 691.123 L1326.47 691.123 L1327.03 691.123 L1327.59 691.123 L1328.15 691.123 L1328.71 691.123 L1329.27 691.123 L1329.83 691.123 L1330.39 691.123 L1330.95 691.123 L1331.51 691.123 L1332.07 691.123 L1332.63 691.123 L1333.19 691.123 L1333.75 691.123 L1334.3 691.123 L1334.86 691.123 L1335.42 691.123 L1335.98 691.123 L1336.54 691.123 L1337.1 691.123 L1337.66 691.123 L1338.22 691.123 L1338.78 691.123 L1339.34 691.123 L1339.9 691.123 L1340.46 691.123 L1341.02 691.123 L1341.57 691.123 L1342.13 691.123 L1342.69 691.123 L1343.25 691.123 L1343.81 691.123 L1344.37 691.123 L1344.93 691.123 L1345.49 691.123 L1346.05 691.123 L1346.61 691.123 L1347.17 691.123 L1347.73 691.123 L1348.29 691.123 L1348.84 691.123 L1349.4 691.123 L1349.96 691.123 L1350.52 691.123 L1351.08 691.123 L1351.64 691.123 L1352.2 691.123 L1352.76 691.123 L1353.32 691.123 L1353.88 691.123 L1354.44 691.123 L1355 691.123 L1355.56 691.123 L1356.12 691.123 L1356.67 691.123 L1357.23 691.123 L1357.79 691.123 L1358.35 691.123 L1358.91 691.123 L1359.47 691.123 L1360.03 691.123 L1360.59 691.123 L1361.15 691.123 L1361.71 691.123 L1362.27 691.123 L1362.83 691.123 L1363.39 691.123 L1363.94 691.123 L1364.5 691.123 L1365.06 691.123 L1365.62 691.123 L1366.18 691.123 L1366.74 691.123 L1367.3 691.123 L1367.86 691.123 L1368.42 691.123 L1368.98 691.123 L1369.54 691.123 L1370.1 691.123 L1370.66 691.123 L1371.21 691.123 L1371.77 691.123 L1372.33 691.123 L1372.89 691.123 L1373.45 691.123 L1374.01 691.123 L1374.57 691.123 L1375.13 691.123 L1375.69 691.123 L1376.25 691.123 L1376.81 691.123 L1377.37 691.123 L1377.93 691.123 L1378.49 691.123 L1379.04 691.123 L1379.6 691.123 L1380.16 691.123 L1380.72 691.123 L1381.28 691.123 L1381.84 691.123 L1382.4 691.123 L1382.96 691.123 L1383.52 691.123 L1384.08 691.123 L1384.64 691.123 L1385.2 691.123 L1385.76 691.123 L1386.31 691.123 L1386.87 691.123 L1387.43 691.123 L1387.99 691.123 L1388.55 691.123 L1389.11 691.123 L1389.67 691.123 L1390.23 691.123 L1390.79 691.123 L1391.35 691.123 L1391.91 691.123 L1392.47 691.123 L1393.03 691.123 L1393.58 691.123 L1394.14 691.123 L1394.7 691.123 L1395.26 691.123 L1395.82 691.123 L1396.38 691.123 L1396.94 691.123 L1397.5 691.123 L1398.06 691.123 L1398.62 691.123 L1399.18 691.123 L1399.74 691.123 L1400.3 691.123 L1400.86 691.123 L1401.41 691.123 L1401.97 691.123 L1402.53 691.123 L1403.09 691.123 L1403.65 691.123 L1404.21 691.123 L1404.77 691.123 L1405.33 691.123 L1405.89 691.123 L1406.45 691.123 L1407.01 691.123 L1407.57 691.123 L1408.13 691.123 L1408.68 691.123 L1409.24 691.123 L1409.8 691.123 L1410.36 691.123 L1410.92 691.123 L1411.48 691.123 L1412.04 691.123 L1412.6 691.123 L1413.16 691.123 L1413.72 691.123 L1414.28 691.123 L1414.84 691.123 L1415.4 691.123 L1415.95 691.123 L1416.51 691.123 L1417.07 691.123 L1417.63 691.123 L1418.19 691.123 L1418.75 691.123 L1419.31 691.123 L1419.87 691.123 L1420.43 691.123 L1420.99 691.123 L1421.55 691.123 L1422.11 691.123 L1422.67 691.123 L1423.23 691.123 L1423.78 691.123 L1424.34 691.123 L1424.9 691.123 L1425.46 691.123 L1426.02 691.123 L1426.58 691.123 L1427.14 691.123 L1427.7 691.123 L1428.26 691.123 L1428.82 691.123 L1429.38 691.123 L1429.94 691.123 L1430.5 691.123 L1431.05 691.123 L1431.61 691.123 L1432.17 691.123 L1432.73 691.123 L1433.29 691.123 L1433.85 691.123 L1434.41 691.123 L1434.97 691.123 L1435.53 691.123 L1436.09 691.123 L1436.65 691.123 L1437.21 691.123 L1437.77 691.123 L1438.33 691.123 L1438.88 691.123 L1439.44 691.123 L1440 691.123 L1440.56 691.123 L1441.12 691.123 L1441.68 691.123 L1442.24 691.123 L1442.8 691.123 L1443.36 691.123 L1443.92 691.123 L1444.48 691.123 L1445.04 691.123 L1445.6 691.123 L1446.15 691.123 L1446.71 691.123 L1447.27 691.123 L1447.83 691.123 L1448.39 691.123 L1448.95 691.123 L1449.51 691.123 L1450.07 691.123 L1450.63 691.123 L1451.19 691.123 L1451.75 691.123 L1452.31 691.123 L1452.87 691.123 L1453.42 691.123 L1453.98 691.123 L1454.54 691.123 L1455.1 691.123 L1455.66 691.123 L1456.22 691.123 L1456.78 691.123 L1457.34 691.123 L1457.9 691.123 L1458.46 691.123 L1459.02 691.123 L1459.58 691.123 L1460.14 691.123 L1460.7 691.123 L1461.25 691.123 L1461.81 691.123 L1462.37 691.123 L1462.93 691.123 L1463.49 691.123 L1464.05 691.123 L1464.61 691.123 L1465.17 691.123 L1465.73 691.123 L1466.29 691.123 L1466.85 691.123 L1467.41 691.123 L1467.97 691.123 L1468.52 691.123 L1469.08 691.123 L1469.64 691.123 L1470.2 691.123 L1470.76 691.123 L1471.32 691.123 L1471.88 691.123 L1472.44 691.123 L1473 691.123 L1473.56 691.123 L1474.12 691.123 L1474.68 691.123 L1475.24 691.123 L1475.79 691.123 L1476.35 691.123 L1476.91 691.123 L1477.47 691.123 L1478.03 691.123 L1478.59 691.123 L1479.15 691.123 L1479.71 691.123 L1480.27 691.123 L1480.83 691.123 L1481.39 691.123 L1481.95 691.123 L1482.51 691.123 L1483.07 691.123 L1483.62 691.123 L1484.18 691.123 L1484.74 691.123 L1485.3 691.123 L1485.86 691.123 L1486.42 691.123 L1486.98 691.123 L1487.54 691.123 L1488.1 691.123 L1488.66 691.123 L1489.22 691.123 L1489.78 691.123 L1490.34 691.123 L1490.89 691.123 L1491.45 691.123 L1492.01 691.123 L1492.57 691.123 L1493.13 691.123 L1493.69 691.123 L1494.25 691.123 L1494.81 691.123 L1495.37 691.123 L1495.93 691.123 L1496.49 691.123 L1497.05 691.123 L1497.61 691.123 L1498.16 691.123 L1498.72 691.123 L1499.28 691.123 L1499.84 691.123 L1500.4 691.123 L1500.96 691.123 L1501.52 691.123 L1502.08 691.123 L1502.64 691.123 L1503.2 691.123 L1503.76 691.123 L1504.32 691.123 L1504.88 691.123 L1505.44 691.123 L1505.99 691.123 L1506.55 691.123 L1507.11 691.123 L1507.67 691.123 L1508.23 691.123 L1508.79 691.123 L1509.35 691.123 L1509.91 691.123 L1510.47 691.123 L1511.03 691.123 L1511.59 691.123 L1512.15 691.123 L1512.71 691.123 L1513.26 691.123 L1513.82 691.123 L1514.38 691.123 L1514.94 691.123 L1515.5 691.123 L1516.06 691.123 L1516.62 691.123 L1517.18 691.123 L1517.74 691.123 L1518.3 691.123 L1518.86 691.123 L1519.42 691.123 L1519.98 691.123 L1520.53 691.123 L1521.09 691.123 L1521.65 691.123 L1522.21 691.123 L1522.77 691.123 L1523.33 691.123 L1523.89 691.123 L1524.45 691.123 L1525.01 691.123 L1525.57 691.123 L1526.13 691.123 L1526.69 691.123 L1527.25 691.123 L1527.81 691.123 L1528.36 691.123 L1528.92 691.123 L1529.48 691.123 L1530.04 691.123 L1530.6 691.123 L1531.16 691.123 L1531.72 691.123 L1532.28 691.123 L1532.84 691.123 L1533.4 691.123 L1533.96 691.123 L1534.52 691.123 L1535.08 691.123 L1535.63 691.123 L1536.19 691.123 L1536.75 691.123 L1537.31 691.123 L1537.87 691.123 L1538.43 691.123 L1538.99 691.123 L1539.55 691.123 L1540.11 691.123 L1540.67 691.123 L1541.23 691.123 L1541.79 691.123 L1542.35 691.123 L1542.9 691.123 L1543.46 691.123 L1544.02 691.123 L1544.58 691.123 L1545.14 691.123 L1545.7 691.123 L1546.26 691.123 L1546.82 691.123 L1547.38 691.123 L1547.94 691.123 L1548.5 691.123 L1549.06 691.123 L1549.62 691.123 L1550.18 691.123 L1550.73 691.123 L1551.29 691.123 L1551.85 691.123 L1552.41 691.123 L1552.97 691.123 L1553.53 691.123 L1554.09 691.123 L1554.65 691.123 L1555.21 691.123 L1555.77 691.123 L1556.33 691.123 L1556.89 691.123 L1557.45 691.123 L1558 691.123 L1558.56 691.123 L1559.12 691.123 L1559.68 691.123 L1560.24 691.123 L1560.8 691.123 L1561.36 691.123 L1561.92 691.123 L1562.48 691.123 L1563.04 691.123 L1563.6 691.123 L1564.16 691.123 L1564.72 691.123 L1565.28 691.123 L1565.83 691.123 L1566.39 691.123 L1566.95 691.123 L1567.51 691.123 L1568.07 691.123 L1568.63 691.123 L1569.19 691.123 L1569.75 691.123 L1570.31 691.123 L1570.87 691.123 L1571.43 691.123 L1571.99 691.123 L1572.55 691.123 L1573.1 691.123 L1573.66 691.123 L1574.22 691.123 L1574.78 691.123 L1575.34 691.123 L1575.9 691.123 L1576.46 691.123 L1577.02 691.123 L1577.58 691.123 L1578.14 691.123 L1578.7 691.123 L1579.26 691.123 L1579.82 691.123 L1580.37 691.123 L1580.93 691.123 L1581.49 691.123 L1582.05 691.123 L1582.61 691.123 L1583.17 691.123 L1583.73 691.123 L1584.29 691.123 L1584.85 691.123 L1585.41 691.123 L1585.97 691.123 L1586.53 691.123 L1587.09 691.123 L1587.65 691.123 L1588.2 691.123 L1588.76 691.123 L1589.32 691.123 L1589.88 691.123 L1590.44 691.123 L1591 691.123 L1591.56 691.123 L1592.12 691.123 L1592.68 691.123 L1593.24 691.123 L1593.8 691.123 L1594.36 691.123 L1594.92 691.123 L1595.47 691.123 L1596.03 691.123 L1596.59 691.123 L1597.15 691.123 L1597.71 691.123 L1598.27 691.123 L1598.83 691.123 L1599.39 691.123 L1599.95 691.123 L1600.51 691.123 L1601.07 691.123 L1601.63 691.123 L1602.19 691.123 L1602.74 691.123 L1603.3 691.123 L1603.86 691.123 L1604.42 691.123 L1604.98 691.123 L1605.54 691.123 L1606.1 691.123 L1606.66 691.123 L1607.22 691.123 L1607.78 691.123 L1608.34 691.123 L1608.9 691.123 L1609.46 691.123 L1610.02 691.123 L1610.57 691.123 L1611.13 691.123 L1611.69 691.123 L1612.25 691.123 L1612.81 691.123 L1613.37 691.123 L1613.93 691.123 L1614.49 691.123 L1615.05 691.123 L1615.61 691.123 L1616.17 691.123 L1616.73 691.123 L1617.29 691.123 L1617.84 691.123 L1618.4 691.123 L1618.96 691.123 L1619.52 691.123 L1620.08 691.123 L1620.64 691.123 L1621.2 691.123 L1621.76 691.123 L1622.32 691.123 L1622.88 691.123 L1623.44 691.123 L1624 691.123 L1624.56 691.123 L1625.11 691.123 L1625.67 691.123 L1626.23 691.123 L1626.79 691.123 L1627.35 691.123 L1627.91 691.123 L1628.47 691.123 L1629.03 691.123 L1629.59 691.123 L1630.15 691.123 L1630.71 691.123 L1631.27 691.123 L1631.83 691.123 L1632.39 691.123 L1632.94 691.123 L1633.5 691.123 L1634.06 691.123 L1634.62 691.123 L1635.18 691.123 L1635.74 691.123 L1636.3 691.123 L1636.86 691.123 L1637.42 691.123 L1637.98 691.123 L1638.54 691.123 L1639.1 691.123 L1639.66 691.123 L1640.21 691.123 L1640.77 691.123 L1641.33 691.123 L1641.89 691.123 L1642.45 691.123 L1643.01 691.123 L1643.57 691.123 L1644.13 691.123 L1644.69 691.123 L1645.25 691.123 L1645.81 691.123 L1646.37 691.123 L1646.93 691.123 L1647.48 691.123 L1648.04 691.123 L1648.6 691.123 L1649.16 691.123 L1649.72 691.123 L1650.28 691.123 L1650.84 691.123 L1651.4 691.123 L1651.96 691.123 L1652.52 691.123 L1653.08 691.123 L1653.64 691.123 L1654.2 691.123 L1654.76 691.123 L1655.31 691.123 L1655.87 691.123 L1656.43 691.123 L1656.99 691.123 L1657.55 691.123 L1658.11 691.123 L1658.67 691.123 L1659.23 691.123 L1659.79 691.123 L1660.35 691.123 L1660.91 691.123 L1661.47 691.123 L1662.03 691.123 L1662.58 691.123 L1663.14 691.123 L1663.7 691.123 L1664.26 691.123 L1664.82 691.123 L1665.38 691.123 L1665.94 691.123 L1666.5 691.123 L1667.06 691.123 L1667.62 691.123 L1668.18 691.123 L1668.74 691.123 L1669.3 691.123 L1669.85 691.123 L1670.41 691.123 L1670.97 691.123 L1671.53 691.123 L1672.09 691.123 L1672.65 691.123 L1673.21 691.123 L1673.77 691.123 L1674.33 691.123 L1674.89 691.123 L1675.45 691.123 L1676.01 691.123 L1676.57 691.123 L1677.13 691.123 L1677.68 691.123 L1678.24 691.123 L1678.8 691.123 L1679.36 691.123 L1679.92 691.123 L1680.48 691.123 L1681.04 691.123 L1681.6 691.123 L1682.16 691.123 L1682.72 691.123 L1683.28 691.123 L1683.84 691.123 L1684.4 691.123 L1684.95 691.123 L1685.51 691.123 L1686.07 691.123 L1686.63 691.123 L1687.19 691.123 L1687.75 691.123 L1688.31 691.123 L1688.87 691.123 L1689.43 691.123 L1689.99 691.123 L1690.55 691.123 L1691.11 691.123 L1691.67 691.123 L1692.23 691.123 L1692.78 691.123 L1693.34 691.123 L1693.9 691.123 L1694.46 691.123 L1695.02 691.123 L1695.58 691.123 L1696.14 691.123 L1696.7 691.123 L1697.26 691.123 L1697.82 691.123 L1698.38 691.123 L1698.94 691.123 L1699.5 691.123 L1700.05 691.123 L1700.61 691.123 L1701.17 691.123 L1701.73 691.123 L1702.29 691.123 L1702.85 691.123 L1703.41 691.123 L1703.97 691.123 L1704.53 691.123 L1705.09 691.123 L1705.65 691.123 L1706.21 691.123 L1706.77 691.123 L1707.32 691.123 L1707.88 691.123 L1708.44 691.123 L1709 691.123 L1709.56 691.123 L1710.12 691.123 L1710.68 691.123 L1711.24 691.123 L1711.8 691.123 L1712.36 691.123 L1712.92 691.123 L1713.48 691.123 L1714.04 691.123 L1714.6 691.123 L1715.15 691.123 L1715.71 691.123 L1716.27 691.123 L1716.83 691.123 L1717.39 691.123 L1717.95 691.123 L1718.51 691.123 L1719.07 691.123 L1719.63 691.123 L1720.19 691.123 L1720.75 691.123 L1721.31 691.123 L1721.87 691.123 L1722.42 691.123 L1722.98 691.123 L1723.54 691.123 L1724.1 691.123 L1724.66 691.123 L1725.22 691.123 L1725.78 691.123 L1726.34 691.123 L1726.9 691.123 L1727.46 691.123 L1728.02 691.123 L1728.58 691.123 L1729.14 691.123 L1729.69 691.123 L1730.25 691.123 L1730.81 691.123 L1731.37 691.123 L1731.93 691.123 L1732.49 691.123 L1733.05 691.123 L1733.61 691.123 L1734.17 691.123 L1734.73 691.123 L1735.29 691.123 L1735.85 691.123 L1736.41 691.123 L1736.97 691.123 L1737.52 691.123 L1738.08 691.123 L1738.64 691.123 L1739.2 691.123 L1739.76 691.123 L1740.32 691.123 L1740.88 691.123 L1741.44 691.123 L1742 691.123 L1742.56 691.123 L1743.12 691.123 L1743.68 691.123 L1744.24 691.123 L1744.79 691.123 L1745.35 691.123 L1745.91 691.123 L1746.47 691.123 L1747.03 691.123 L1747.59 691.123 L1748.15 691.123 L1748.71 691.123 L1749.27 691.123 L1749.83 691.123 L1750.39 691.123 L1750.95 691.123 L1751.51 691.123 L1752.06 691.123 L1752.62 691.123 L1753.18 691.123 L1753.74 691.123 L1754.3 691.123 L1754.86 691.123 L1755.42 691.123 L1755.98 691.123 L1756.54 691.123 L1757.1 691.123 L1757.66 691.123 L1758.22 691.123 L1758.78 691.123 L1759.34 691.123 L1759.89 691.123 L1760.45 691.123 L1761.01 691.123 L1761.57 691.123 L1762.13 691.123 L1762.69 691.123 L1763.25 691.123 L1763.81 691.123 L1764.37 691.123 L1764.93 691.123 L1765.49 691.123 L1766.05 691.123 L1766.61 691.123 L1767.16 691.123 L1767.72 691.123 L1768.28 691.123 L1768.84 691.123 L1769.4 691.123 L1769.96 691.123 L1770.52 691.123 L1771.08 691.123 L1771.64 691.123 L1772.2 691.123 L1772.76 691.123 L1773.32 691.123 L1773.88 691.123 L1774.43 691.123 L1774.99 691.123 L1775.55 691.123 L1776.11 691.123 L1776.67 691.123 L1777.23 691.123 L1777.79 691.123 L1778.35 691.123 L1778.91 691.123 L1779.47 691.123 L1780.03 691.123 L1780.59 691.123 L1781.15 691.123 L1781.71 691.123 L1782.26 691.123 L1782.82 691.123 L1783.38 691.123 L1783.94 691.123 L1784.5 691.123 L1785.06 691.123 L1785.62 691.123 L1786.18 691.123 L1786.74 691.123 L1787.3 691.123 L1787.86 691.123 L1788.42 691.123 L1788.98 691.123 L1789.53 691.123 L1790.09 691.123 L1790.65 691.123 L1791.21 691.123 L1791.77 691.123 L1792.33 691.123 L1792.89 691.123 L1793.45 691.123 L1794.01 691.123 L1794.57 691.123 L1795.13 691.123 L1795.69 691.123 L1796.25 691.123 L1796.8 691.123 L1797.36 691.123 L1797.92 691.123 L1798.48 691.123 L1799.04 691.123 L1799.6 691.123 L1800.16 691.123 L1800.72 691.123 L1801.28 691.123 L1801.84 691.123 L1802.4 691.123 L1802.96 691.123 L1803.52 691.123 L1804.08 691.123 L1804.63 691.123 L1805.19 691.123 L1805.75 691.123 L1806.31 691.123 L1806.87 691.123 L1807.43 691.123 L1807.99 691.123 L1808.55 691.123 L1809.11 691.123 L1809.67 691.123 L1810.23 691.123 L1810.79 691.123 L1811.35 691.123 L1811.9 691.123 L1812.46 691.123 L1813.02 691.123 L1813.58 691.123 L1814.14 691.123 L1814.7 691.123 L1815.26 691.123 L1815.82 691.123 L1816.38 691.123 L1816.94 691.123 L1817.5 691.123 L1818.06 691.123 L1818.62 691.123 L1819.18 691.123 L1819.73 691.123 L1820.29 691.123 L1820.85 691.123 L1821.41 691.123 L1821.97 691.123 L1822.53 691.123 L1823.09 691.123 L1823.65 691.123 L1824.21 691.123 L1824.77 691.123 L1825.33 691.123 L1825.89 691.123 L1826.45 691.123 L1827 691.123 L1827.56 691.123 L1828.12 691.123 L1828.68 691.123 L1829.24 691.123 L1829.8 691.123 L1830.36 691.123 L1830.92 691.123 L1831.48 691.123 L1832.04 691.123 L1832.6 691.123 L1833.16 691.123 L1833.72 691.123 L1834.27 691.123 L1834.83 691.123 L1835.39 691.123 L1835.95 691.123 L1836.51 691.123 L1837.07 691.123 L1837.63 691.123 L1838.19 691.123 L1838.19 680.877 L1837.63 680.877 L1837.07 680.877 L1836.51 680.877 L1835.95 680.877 L1835.39 680.877 L1834.83 680.877 L1834.27 680.877 L1833.72 680.877 L1833.16 680.877 L1832.6 680.877 L1832.04 680.877 L1831.48 680.877 L1830.92 680.877 L1830.36 680.877 L1829.8 680.877 L1829.24 680.877 L1828.68 680.877 L1828.12 680.877 L1827.56 680.877 L1827 680.877 L1826.45 680.877 L1825.89 680.877 L1825.33 680.877 L1824.77 680.877 L1824.21 680.877 L1823.65 680.877 L1823.09 680.877 L1822.53 680.877 L1821.97 680.877 L1821.41 680.877 L1820.85 680.877 L1820.29 680.877 L1819.73 680.877 L1819.18 680.877 L1818.62 680.877 L1818.06 680.877 L1817.5 680.877 L1816.94 680.877 L1816.38 680.877 L1815.82 680.877 L1815.26 680.877 L1814.7 680.877 L1814.14 680.877 L1813.58 680.877 L1813.02 680.877 L1812.46 680.877 L1811.9 680.877 L1811.35 680.877 L1810.79 680.877 L1810.23 680.877 L1809.67 680.877 L1809.11 680.877 L1808.55 680.877 L1807.99 680.877 L1807.43 680.877 L1806.87 680.877 L1806.31 680.877 L1805.75 680.877 L1805.19 680.877 L1804.63 680.877 L1804.08 680.877 L1803.52 680.877 L1802.96 680.877 L1802.4 680.877 L1801.84 680.877 L1801.28 680.877 L1800.72 680.877 L1800.16 680.877 L1799.6 680.877 L1799.04 680.877 L1798.48 680.877 L1797.92 680.877 L1797.36 680.877 L1796.8 680.877 L1796.25 680.877 L1795.69 680.877 L1795.13 680.877 L1794.57 680.877 L1794.01 680.877 L1793.45 680.877 L1792.89 680.877 L1792.33 680.877 L1791.77 680.877 L1791.21 680.877 L1790.65 680.877 L1790.09 680.877 L1789.53 680.877 L1788.98 680.877 L1788.42 680.877 L1787.86 680.877 L1787.3 680.877 L1786.74 680.877 L1786.18 680.877 L1785.62 680.877 L1785.06 680.877 L1784.5 680.877 L1783.94 680.877 L1783.38 680.877 L1782.82 680.877 L1782.26 680.877 L1781.71 680.877 L1781.15 680.877 L1780.59 680.877 L1780.03 680.877 L1779.47 680.877 L1778.91 680.877 L1778.35 680.877 L1777.79 680.877 L1777.23 680.877 L1776.67 680.877 L1776.11 680.877 L1775.55 680.877 L1774.99 680.877 L1774.43 680.877 L1773.88 680.877 L1773.32 680.877 L1772.76 680.877 L1772.2 680.877 L1771.64 680.877 L1771.08 680.877 L1770.52 680.877 L1769.96 680.877 L1769.4 680.877 L1768.84 680.877 L1768.28 680.877 L1767.72 680.877 L1767.16 680.877 L1766.61 680.877 L1766.05 680.877 L1765.49 680.877 L1764.93 680.877 L1764.37 680.877 L1763.81 680.877 L1763.25 680.877 L1762.69 680.877 L1762.13 680.877 L1761.57 680.877 L1761.01 680.877 L1760.45 680.877 L1759.89 680.877 L1759.34 680.877 L1758.78 680.877 L1758.22 680.877 L1757.66 680.877 L1757.1 680.877 L1756.54 680.877 L1755.98 680.877 L1755.42 680.877 L1754.86 680.877 L1754.3 680.877 L1753.74 680.877 L1753.18 680.877 L1752.62 680.877 L1752.06 680.877 L1751.51 680.877 L1750.95 680.877 L1750.39 680.877 L1749.83 680.877 L1749.27 680.877 L1748.71 680.877 L1748.15 680.877 L1747.59 680.877 L1747.03 680.877 L1746.47 680.877 L1745.91 680.877 L1745.35 680.877 L1744.79 680.877 L1744.24 680.877 L1743.68 680.877 L1743.12 680.877 L1742.56 680.877 L1742 680.877 L1741.44 680.877 L1740.88 680.877 L1740.32 680.877 L1739.76 680.877 L1739.2 680.877 L1738.64 680.877 L1738.08 680.877 L1737.52 680.877 L1736.97 680.877 L1736.41 680.877 L1735.85 680.877 L1735.29 680.877 L1734.73 680.877 L1734.17 680.877 L1733.61 680.877 L1733.05 680.877 L1732.49 680.877 L1731.93 680.877 L1731.37 680.877 L1730.81 680.877 L1730.25 680.877 L1729.69 680.877 L1729.14 680.877 L1728.58 680.877 L1728.02 680.877 L1727.46 680.877 L1726.9 680.877 L1726.34 680.877 L1725.78 680.877 L1725.22 680.877 L1724.66 680.877 L1724.1 680.877 L1723.54 680.877 L1722.98 680.877 L1722.42 680.877 L1721.87 680.877 L1721.31 680.877 L1720.75 680.877 L1720.19 680.877 L1719.63 680.877 L1719.07 680.877 L1718.51 680.877 L1717.95 680.877 L1717.39 680.877 L1716.83 680.877 L1716.27 680.877 L1715.71 680.877 L1715.15 680.877 L1714.6 680.877 L1714.04 680.877 L1713.48 680.877 L1712.92 680.877 L1712.36 680.877 L1711.8 680.877 L1711.24 680.877 L1710.68 680.877 L1710.12 680.877 L1709.56 680.877 L1709 680.877 L1708.44 680.877 L1707.88 680.877 L1707.32 680.877 L1706.77 680.877 L1706.21 680.877 L1705.65 680.877 L1705.09 680.877 L1704.53 680.877 L1703.97 680.877 L1703.41 680.877 L1702.85 680.877 L1702.29 680.877 L1701.73 680.877 L1701.17 680.877 L1700.61 680.877 L1700.05 680.877 L1699.5 680.877 L1698.94 680.877 L1698.38 680.877 L1697.82 680.877 L1697.26 680.877 L1696.7 680.877 L1696.14 680.877 L1695.58 680.877 L1695.02 680.877 L1694.46 680.877 L1693.9 680.877 L1693.34 680.877 L1692.78 680.877 L1692.23 680.877 L1691.67 680.877 L1691.11 680.877 L1690.55 680.877 L1689.99 680.877 L1689.43 680.877 L1688.87 680.877 L1688.31 680.877 L1687.75 680.877 L1687.19 680.877 L1686.63 680.877 L1686.07 680.877 L1685.51 680.877 L1684.95 680.877 L1684.4 680.877 L1683.84 680.877 L1683.28 680.877 L1682.72 680.877 L1682.16 680.877 L1681.6 680.877 L1681.04 680.877 L1680.48 680.877 L1679.92 680.877 L1679.36 680.877 L1678.8 680.877 L1678.24 680.877 L1677.68 680.877 L1677.13 680.877 L1676.57 680.877 L1676.01 680.877 L1675.45 680.877 L1674.89 680.877 L1674.33 680.877 L1673.77 680.877 L1673.21 680.877 L1672.65 680.877 L1672.09 680.877 L1671.53 680.877 L1670.97 680.877 L1670.41 680.877 L1669.85 680.877 L1669.3 680.877 L1668.74 680.877 L1668.18 680.877 L1667.62 680.877 L1667.06 680.877 L1666.5 680.877 L1665.94 680.877 L1665.38 680.877 L1664.82 680.877 L1664.26 680.877 L1663.7 680.877 L1663.14 680.877 L1662.58 680.877 L1662.03 680.877 L1661.47 680.877 L1660.91 680.877 L1660.35 680.877 L1659.79 680.877 L1659.23 680.877 L1658.67 680.877 L1658.11 680.877 L1657.55 680.877 L1656.99 680.877 L1656.43 680.877 L1655.87 680.877 L1655.31 680.877 L1654.76 680.877 L1654.2 680.877 L1653.64 680.877 L1653.08 680.877 L1652.52 680.877 L1651.96 680.877 L1651.4 680.877 L1650.84 680.877 L1650.28 680.877 L1649.72 680.877 L1649.16 680.877 L1648.6 680.877 L1648.04 680.877 L1647.48 680.877 L1646.93 680.877 L1646.37 680.877 L1645.81 680.877 L1645.25 680.877 L1644.69 680.877 L1644.13 680.877 L1643.57 680.877 L1643.01 680.877 L1642.45 680.877 L1641.89 680.877 L1641.33 680.877 L1640.77 680.877 L1640.21 680.877 L1639.66 680.877 L1639.1 680.877 L1638.54 680.877 L1637.98 680.877 L1637.42 680.877 L1636.86 680.877 L1636.3 680.877 L1635.74 680.877 L1635.18 680.877 L1634.62 680.877 L1634.06 680.877 L1633.5 680.877 L1632.94 680.877 L1632.39 680.877 L1631.83 680.877 L1631.27 680.877 L1630.71 680.877 L1630.15 680.877 L1629.59 680.877 L1629.03 680.877 L1628.47 680.877 L1627.91 680.877 L1627.35 680.877 L1626.79 680.877 L1626.23 680.877 L1625.67 680.877 L1625.11 680.877 L1624.56 680.877 L1624 680.877 L1623.44 680.877 L1622.88 680.877 L1622.32 680.877 L1621.76 680.877 L1621.2 680.877 L1620.64 680.877 L1620.08 680.877 L1619.52 680.877 L1618.96 680.877 L1618.4 680.877 L1617.84 680.877 L1617.29 680.877 L1616.73 680.877 L1616.17 680.877 L1615.61 680.877 L1615.05 680.877 L1614.49 680.877 L1613.93 680.877 L1613.37 680.877 L1612.81 680.877 L1612.25 680.877 L1611.69 680.877 L1611.13 680.877 L1610.57 680.877 L1610.02 680.877 L1609.46 680.877 L1608.9 680.877 L1608.34 680.877 L1607.78 680.877 L1607.22 680.877 L1606.66 680.877 L1606.1 680.877 L1605.54 680.877 L1604.98 680.877 L1604.42 680.877 L1603.86 680.877 L1603.3 680.877 L1602.74 680.877 L1602.19 680.877 L1601.63 680.877 L1601.07 680.877 L1600.51 680.877 L1599.95 680.877 L1599.39 680.877 L1598.83 680.877 L1598.27 680.877 L1597.71 680.877 L1597.15 680.877 L1596.59 680.877 L1596.03 680.877 L1595.47 680.877 L1594.92 680.877 L1594.36 680.877 L1593.8 680.877 L1593.24 680.877 L1592.68 680.877 L1592.12 680.877 L1591.56 680.877 L1591 680.877 L1590.44 680.877 L1589.88 680.877 L1589.32 680.877 L1588.76 680.877 L1588.2 680.877 L1587.65 680.877 L1587.09 680.877 L1586.53 680.877 L1585.97 680.877 L1585.41 680.877 L1584.85 680.877 L1584.29 680.877 L1583.73 680.877 L1583.17 680.877 L1582.61 680.877 L1582.05 680.877 L1581.49 680.877 L1580.93 680.877 L1580.37 680.877 L1579.82 680.877 L1579.26 680.877 L1578.7 680.877 L1578.14 680.877 L1577.58 680.877 L1577.02 680.877 L1576.46 680.877 L1575.9 680.877 L1575.34 680.877 L1574.78 680.877 L1574.22 680.877 L1573.66 680.877 L1573.1 680.877 L1572.55 680.877 L1571.99 680.877 L1571.43 680.877 L1570.87 680.877 L1570.31 680.877 L1569.75 680.877 L1569.19 680.877 L1568.63 680.877 L1568.07 680.877 L1567.51 680.877 L1566.95 680.877 L1566.39 680.877 L1565.83 680.877 L1565.28 680.877 L1564.72 680.877 L1564.16 680.877 L1563.6 680.877 L1563.04 680.877 L1562.48 680.877 L1561.92 680.877 L1561.36 680.877 L1560.8 680.877 L1560.24 680.877 L1559.68 680.877 L1559.12 680.877 L1558.56 680.877 L1558 680.877 L1557.45 680.877 L1556.89 680.877 L1556.33 680.877 L1555.77 680.877 L1555.21 680.877 L1554.65 680.877 L1554.09 680.877 L1553.53 680.877 L1552.97 680.877 L1552.41 680.877 L1551.85 680.877 L1551.29 680.877 L1550.73 680.877 L1550.18 680.877 L1549.62 680.877 L1549.06 680.877 L1548.5 680.877 L1547.94 680.877 L1547.38 680.877 L1546.82 680.877 L1546.26 680.877 L1545.7 680.877 L1545.14 680.877 L1544.58 680.877 L1544.02 680.877 L1543.46 680.877 L1542.9 680.877 L1542.35 680.877 L1541.79 680.877 L1541.23 680.877 L1540.67 680.877 L1540.11 680.877 L1539.55 680.877 L1538.99 680.877 L1538.43 680.877 L1537.87 680.877 L1537.31 680.877 L1536.75 680.877 L1536.19 680.877 L1535.63 680.877 L1535.08 680.877 L1534.52 680.877 L1533.96 680.877 L1533.4 680.877 L1532.84 680.877 L1532.28 680.877 L1531.72 680.877 L1531.16 680.877 L1530.6 680.877 L1530.04 680.877 L1529.48 680.877 L1528.92 680.877 L1528.36 680.877 L1527.81 680.877 L1527.25 680.877 L1526.69 680.877 L1526.13 680.877 L1525.57 680.877 L1525.01 680.877 L1524.45 680.877 L1523.89 680.877 L1523.33 680.877 L1522.77 680.877 L1522.21 680.877 L1521.65 680.877 L1521.09 680.877 L1520.53 680.877 L1519.98 680.877 L1519.42 680.877 L1518.86 680.877 L1518.3 680.877 L1517.74 680.877 L1517.18 680.877 L1516.62 680.877 L1516.06 680.877 L1515.5 680.877 L1514.94 680.877 L1514.38 680.877 L1513.82 680.877 L1513.26 680.877 L1512.71 680.877 L1512.15 680.877 L1511.59 680.877 L1511.03 680.877 L1510.47 680.877 L1509.91 680.877 L1509.35 680.877 L1508.79 680.877 L1508.23 680.877 L1507.67 680.877 L1507.11 680.877 L1506.55 680.877 L1505.99 680.877 L1505.44 680.877 L1504.88 680.877 L1504.32 680.877 L1503.76 680.877 L1503.2 680.877 L1502.64 680.877 L1502.08 680.877 L1501.52 680.877 L1500.96 680.877 L1500.4 680.877 L1499.84 680.877 L1499.28 680.877 L1498.72 680.877 L1498.16 680.877 L1497.61 680.877 L1497.05 680.877 L1496.49 680.877 L1495.93 680.877 L1495.37 680.877 L1494.81 680.877 L1494.25 680.877 L1493.69 680.877 L1493.13 680.877 L1492.57 680.877 L1492.01 680.877 L1491.45 680.877 L1490.89 680.877 L1490.34 680.877 L1489.78 680.877 L1489.22 680.877 L1488.66 680.877 L1488.1 680.877 L1487.54 680.877 L1486.98 680.877 L1486.42 680.877 L1485.86 680.877 L1485.3 680.877 L1484.74 680.877 L1484.18 680.877 L1483.62 680.877 L1483.07 680.877 L1482.51 680.877 L1481.95 680.877 L1481.39 680.877 L1480.83 680.877 L1480.27 680.877 L1479.71 680.877 L1479.15 680.877 L1478.59 680.877 L1478.03 680.877 L1477.47 680.877 L1476.91 680.877 L1476.35 680.877 L1475.79 680.877 L1475.24 680.877 L1474.68 680.877 L1474.12 680.877 L1473.56 680.877 L1473 680.877 L1472.44 680.877 L1471.88 680.877 L1471.32 680.877 L1470.76 680.877 L1470.2 680.877 L1469.64 680.877 L1469.08 680.877 L1468.52 680.877 L1467.97 680.877 L1467.41 680.877 L1466.85 680.877 L1466.29 680.877 L1465.73 680.877 L1465.17 680.877 L1464.61 680.877 L1464.05 680.877 L1463.49 680.877 L1462.93 680.877 L1462.37 680.877 L1461.81 680.877 L1461.25 680.877 L1460.7 680.877 L1460.14 680.877 L1459.58 680.877 L1459.02 680.877 L1458.46 680.877 L1457.9 680.877 L1457.34 680.877 L1456.78 680.877 L1456.22 680.877 L1455.66 680.877 L1455.1 680.877 L1454.54 680.877 L1453.98 680.877 L1453.42 680.877 L1452.87 680.877 L1452.31 680.877 L1451.75 680.877 L1451.19 680.877 L1450.63 680.877 L1450.07 680.877 L1449.51 680.877 L1448.95 680.877 L1448.39 680.877 L1447.83 680.877 L1447.27 680.877 L1446.71 680.877 L1446.15 680.877 L1445.6 680.877 L1445.04 680.877 L1444.48 680.877 L1443.92 680.877 L1443.36 680.877 L1442.8 680.877 L1442.24 680.877 L1441.68 680.877 L1441.12 680.877 L1440.56 680.877 L1440 680.877 L1439.44 680.877 L1438.88 680.877 L1438.33 680.877 L1437.77 680.877 L1437.21 680.877 L1436.65 680.877 L1436.09 680.877 L1435.53 680.877 L1434.97 680.877 L1434.41 680.877 L1433.85 680.877 L1433.29 680.877 L1432.73 680.877 L1432.17 680.877 L1431.61 680.877 L1431.05 680.877 L1430.5 680.877 L1429.94 680.877 L1429.38 680.877 L1428.82 680.877 L1428.26 680.877 L1427.7 680.877 L1427.14 680.877 L1426.58 680.877 L1426.02 680.877 L1425.46 680.877 L1424.9 680.877 L1424.34 680.877 L1423.78 680.877 L1423.23 680.877 L1422.67 680.877 L1422.11 680.877 L1421.55 680.877 L1420.99 680.877 L1420.43 680.877 L1419.87 680.877 L1419.31 680.877 L1418.75 680.877 L1418.19 680.877 L1417.63 680.877 L1417.07 680.877 L1416.51 680.877 L1415.95 680.877 L1415.4 680.877 L1414.84 680.877 L1414.28 680.877 L1413.72 680.877 L1413.16 680.877 L1412.6 680.877 L1412.04 680.877 L1411.48 680.877 L1410.92 680.877 L1410.36 680.877 L1409.8 680.877 L1409.24 680.877 L1408.68 680.877 L1408.13 680.877 L1407.57 680.877 L1407.01 680.877 L1406.45 680.877 L1405.89 680.877 L1405.33 680.877 L1404.77 680.877 L1404.21 680.877 L1403.65 680.877 L1403.09 680.877 L1402.53 680.877 L1401.97 680.877 L1401.41 680.877 L1400.86 680.877 L1400.3 680.877 L1399.74 680.877 L1399.18 680.877 L1398.62 680.877 L1398.06 680.877 L1397.5 680.877 L1396.94 680.877 L1396.38 680.877 L1395.82 680.877 L1395.26 680.877 L1394.7 680.877 L1394.14 680.877 L1393.58 680.877 L1393.03 680.877 L1392.47 680.877 L1391.91 680.877 L1391.35 680.877 L1390.79 680.877 L1390.23 680.877 L1389.67 680.877 L1389.11 680.877 L1388.55 680.877 L1387.99 680.877 L1387.43 680.877 L1386.87 680.877 L1386.31 680.877 L1385.76 680.877 L1385.2 680.877 L1384.64 680.877 L1384.08 680.877 L1383.52 680.877 L1382.96 680.877 L1382.4 680.877 L1381.84 680.877 L1381.28 680.877 L1380.72 680.877 L1380.16 680.877 L1379.6 680.877 L1379.04 680.877 L1378.49 680.877 L1377.93 680.877 L1377.37 680.877 L1376.81 680.877 L1376.25 680.877 L1375.69 680.877 L1375.13 680.877 L1374.57 680.877 L1374.01 680.877 L1373.45 680.877 L1372.89 680.877 L1372.33 680.877 L1371.77 680.877 L1371.21 680.877 L1370.66 680.877 L1370.1 680.877 L1369.54 680.877 L1368.98 680.877 L1368.42 680.877 L1367.86 680.877 L1367.3 680.877 L1366.74 680.877 L1366.18 680.877 L1365.62 680.877 L1365.06 680.877 L1364.5 680.877 L1363.94 680.877 L1363.39 680.877 L1362.83 680.877 L1362.27 680.877 L1361.71 680.877 L1361.15 680.877 L1360.59 680.877 L1360.03 680.877 L1359.47 680.877 L1358.91 680.877 L1358.35 680.877 L1357.79 680.877 L1357.23 680.877 L1356.67 680.877 L1356.12 680.877 L1355.56 680.877 L1355 680.877 L1354.44 680.877 L1353.88 680.877 L1353.32 680.877 L1352.76 680.877 L1352.2 680.877 L1351.64 680.877 L1351.08 680.877 L1350.52 680.877 L1349.96 680.877 L1349.4 680.877 L1348.84 680.877 L1348.29 680.877 L1347.73 680.877 L1347.17 680.877 L1346.61 680.877 L1346.05 680.877 L1345.49 680.877 L1344.93 680.877 L1344.37 680.877 L1343.81 680.877 L1343.25 680.877 L1342.69 680.877 L1342.13 680.877 L1341.57 680.877 L1341.02 680.877 L1340.46 680.877 L1339.9 680.877 L1339.34 680.877 L1338.78 680.877 L1338.22 680.877 L1337.66 680.877 L1337.1 680.877 L1336.54 680.877 L1335.98 680.877 L1335.42 680.877 L1334.86 680.877 L1334.3 680.877 L1333.75 680.877 L1333.19 680.877 L1332.63 680.877 L1332.07 680.877 L1331.51 680.877 L1330.95 680.877 L1330.39 680.877 L1329.83 680.877 L1329.27 680.877 L1328.71 680.877 L1328.15 680.877 L1327.59 680.877 L1327.03 680.877 L1326.47 680.877 L1325.92 680.877 L1325.36 680.877 L1324.8 680.877 L1324.24 680.877 L1323.68 680.877 L1323.12 680.877 L1322.56 680.877 L1322 680.877 L1321.44 680.877 L1320.88 680.877 L1320.32 680.877 L1319.76 680.877 L1319.2 680.877 L1318.65 680.877 L1318.09 680.877 L1317.53 680.877 L1316.97 680.877 L1316.41 680.877 L1315.85 680.877 L1315.29 680.877 L1314.73 680.877 L1314.17 680.877 L1313.61 680.877 L1313.05 680.877 L1312.49 680.877 L1311.93 680.877 L1311.38 680.877 L1310.82 680.877 L1310.26 680.877 L1309.7 680.877 L1309.14 680.877 L1308.58 680.877 L1308.02 680.877 L1307.46 680.877 L1306.9 680.877 L1306.34 680.877 L1305.78 680.877 L1305.22 680.877 L1304.66 680.877 L1304.1 680.877 L1303.55 680.877 L1302.99 680.877 L1302.43 680.877 L1301.87 680.877 L1301.31 680.877 L1300.75 680.877 L1300.19 680.877 L1299.63 680.877 L1299.07 680.877 L1298.51 680.877 L1297.95 680.877 L1297.39 680.877 L1296.83 680.877 L1296.28 680.877 L1295.72 680.877 L1295.16 680.877 L1294.6 680.877 L1294.04 680.877 L1293.48 680.877 L1292.92 680.877 L1292.36 680.877 L1291.8 680.877 L1291.24 680.877 L1290.68 680.877 L1290.12 680.877 L1289.56 680.877 L1289 680.877 L1288.45 680.877 L1287.89 680.877 L1287.33 680.877 L1286.77 680.877 L1286.21 680.877 L1285.65 680.877 L1285.09 680.877 L1284.53 680.877 L1283.97 680.877 L1283.41 680.877 L1282.85 680.877 L1282.29 680.877 L1281.73 680.877 L1281.18 680.877 L1280.62 680.877 L1280.06 680.877 L1279.5 680.877 L1278.94 680.877 L1278.38 680.877 L1277.82 680.877 L1277.26 680.877 L1276.7 680.877 L1276.14 680.877 L1275.58 680.877 L1275.02 680.877 L1274.46 680.877 L1273.91 680.877 L1273.35 680.877 L1272.79 680.877 L1272.23 680.877 L1271.67 680.877 L1271.11 680.877 L1270.55 680.877 L1269.99 680.877 L1269.43 680.877 L1268.87 680.877 L1268.31 680.877 L1267.75 680.877 L1267.19 680.877 L1266.63 680.877 L1266.08 680.877 L1265.52 680.877 L1264.96 680.877 L1264.4 680.877 L1263.84 680.877 L1263.28 680.877 L1262.72 680.877 L1262.16 680.877 L1261.6 680.877 L1261.04 680.877 L1260.48 680.877 L1259.92 680.877 L1259.36 680.877 L1258.81 680.877 L1258.25 680.877 L1257.69 680.877 L1257.13 680.877 L1256.57 680.877 L1256.01 680.877 L1255.45 680.877 L1254.89 680.877 L1254.33 680.877 L1253.77 680.877 L1253.21 680.877 L1252.65 680.877 L1252.09 680.877 L1251.54 680.877 L1250.98 680.877 L1250.42 680.877 L1249.86 680.877 L1249.3 680.877 L1248.74 680.877 L1248.18 680.877 L1247.62 680.877 L1247.06 680.877 L1246.5 680.877 L1245.94 680.877 L1245.38 680.877 L1244.82 680.877 L1244.26 680.877 L1243.71 680.877 L1243.15 680.877 L1242.59 680.877 L1242.03 680.877 L1241.47 680.877 L1240.91 680.877 L1240.35 680.877 L1239.79 680.877 L1239.23 680.877 L1238.67 680.877 L1238.11 680.877 L1237.55 680.877 L1236.99 680.877 L1236.44 680.877 L1235.88 680.877 L1235.32 680.877 L1234.76 680.877 L1234.2 680.877 L1233.64 680.877 L1233.08 680.877 L1232.52 680.877 L1231.96 680.877 L1231.4 680.877 L1230.84 680.877 L1230.28 680.877 L1229.72 680.877 L1229.17 680.877 L1228.61 680.877 L1228.05 680.877 L1227.49 680.877 L1226.93 680.877 L1226.37 680.877 L1225.81 680.877 L1225.25 680.877 L1224.69 680.877 L1224.13 680.877 L1223.57 680.877 L1223.01 680.877 L1222.45 680.877 L1221.89 680.877 L1221.34 680.877 L1220.78 680.877 L1220.22 680.877 L1219.66 680.877 L1219.1 680.877 L1218.54 680.877 L1217.98 680.877 L1217.42 680.877 L1216.86 680.877 L1216.3 680.877 L1215.74 680.877 L1215.18 680.877 L1214.62 680.877 L1214.07 680.877 L1213.51 680.877 L1212.95 680.877 L1212.39 680.877 L1211.83 680.877 L1211.27 680.877 L1210.71 680.877 L1210.15 680.877 L1209.59 680.877 L1209.03 680.877 L1208.47 680.877 L1207.91 680.877 L1207.35 680.877 L1206.8 680.877 L1206.24 680.877 L1205.68 680.877 L1205.12 680.877 L1204.56 680.877 L1204 680.877 L1203.44 680.877 L1202.88 680.877 L1202.32 680.877 L1201.76 680.877 L1201.2 680.877 L1200.64 680.877 L1200.08 680.877 L1199.52 680.877 L1198.97 680.877 L1198.41 680.877 L1197.85 680.877 L1197.29 680.877 L1196.73 680.877 L1196.17 680.877 L1195.61 680.877 L1195.05 680.877 L1194.49 680.877 L1193.93 680.877 L1193.37 680.877 L1192.81 680.877 L1192.25 680.877 L1191.7 680.877 L1191.14 680.877 L1190.58 680.877 L1190.02 680.877 L1189.46 680.877 L1188.9 680.877 L1188.34 680.877 L1187.78 680.877 L1187.22 680.877 L1186.66 680.877 L1186.1 680.877 L1185.54 680.877 L1184.98 680.877 L1184.43 680.877 L1183.87 680.877 L1183.31 680.877 L1182.75 680.877 L1182.19 680.877 L1181.63 680.877 L1181.07 680.877 L1180.51 680.877 L1179.95 680.877 L1179.39 680.877 L1178.83 680.877 L1178.27 680.877 L1177.71 680.877 L1177.15 680.877 L1176.6 680.877 L1176.04 680.877 L1175.48 680.877 L1174.92 680.877 L1174.36 680.877 L1173.8 680.877 L1173.24 680.877 L1172.68 680.877 L1172.12 680.877 L1171.56 680.877 L1171 680.877 L1170.44 680.877 L1169.88 680.877 L1169.33 680.877 L1168.77 680.877 L1168.21 680.877 L1167.65 680.877 L1167.09 680.877 L1166.53 680.877 L1165.97 680.877 L1165.41 680.877 L1164.85 680.877 L1164.29 680.877 L1163.73 680.877 L1163.17 680.877 L1162.61 680.877 L1162.05 680.877 L1161.5 680.877 L1160.94 680.877 L1160.38 680.877 L1159.82 680.877 L1159.26 680.877 L1158.7 680.877 L1158.14 680.877 L1157.58 680.877 L1157.02 680.877 L1156.46 680.877 L1155.9 680.877 L1155.34 680.877 L1154.78 680.877 L1154.23 680.877 L1153.67 680.877 L1153.11 680.877 L1152.55 680.877 L1151.99 680.877 L1151.43 680.877 L1150.87 680.877 L1150.31 680.877 L1149.75 680.877 L1149.19 680.877 L1148.63 680.877 L1148.07 680.877 L1147.51 680.877 L1146.96 680.877 L1146.4 680.877 L1145.84 680.877 L1145.28 680.877 L1144.72 680.877 L1144.16 680.877 L1143.6 680.877 L1143.04 680.877 L1142.48 680.877 L1141.92 680.877 L1141.36 680.877 L1140.8 680.877 L1140.24 680.877 L1139.68 680.877 L1139.13 680.877 L1138.57 680.877 L1138.01 680.877 L1137.45 680.877 L1136.89 680.877 L1136.33 680.877 L1135.77 680.877 L1135.21 680.877 L1134.65 680.877 L1134.09 680.877 L1133.53 680.877 L1132.97 680.877 L1132.41 680.877 L1131.86 680.877 L1131.3 680.877 L1130.74 680.877 L1130.18 680.877 L1129.62 680.877 L1129.06 680.877 L1128.5 680.877 L1127.94 680.877 L1127.38 680.877 L1126.82 680.877 L1126.26 680.877 L1125.7 680.877 L1125.14 680.877 L1124.59 680.877 L1124.03 680.877 L1123.47 680.877 L1122.91 680.877 L1122.35 680.877 L1121.79 680.877 L1121.23 680.877 L1120.67 680.877 L1120.11 680.877 L1119.55 680.877 L1118.99 680.877 L1118.43 680.877 L1117.87 680.877 L1117.31 680.877 L1116.76 680.877 L1116.2 680.877 L1115.64 680.877 L1115.08 680.877 L1114.52 680.877 L1113.96 680.877 L1113.4 680.877 L1112.84 680.877 L1112.28 680.877 L1111.72 680.877 L1111.16 680.877 L1110.6 680.877 L1110.04 680.877 L1109.49 680.877 L1108.93 680.877 L1108.37 680.877 L1107.81 680.877 L1107.25 680.877 L1106.69 680.877 L1106.13 680.877 L1105.57 680.877 L1105.01 680.877 L1104.45 680.877 L1103.89 680.877 L1103.33 680.877 L1102.77 680.877 L1102.22 680.877 L1101.66 680.877 L1101.1 680.877 L1100.54 680.877 L1099.98 680.877 L1099.42 680.877 L1098.86 680.877 L1098.3 680.877 L1097.74 680.877 L1097.18 680.877 L1096.62 680.877 L1096.06 680.877 L1095.5 680.877 L1094.94 680.877 L1094.39 680.877 L1093.83 680.877 L1093.27 680.877 L1092.71 680.877 L1092.15 680.877 L1091.59 680.877 L1091.03 680.877 L1090.47 680.877 L1089.91 680.877 L1089.35 680.877 L1088.79 680.877 L1088.23 680.877 L1087.67 680.877 L1087.12 680.877 L1086.56 680.877 L1086 680.877 L1085.44 680.877 L1084.88 680.877 L1084.32 680.877 L1083.76 680.877 L1083.2 680.877 L1082.64 680.877 L1082.08 680.877 L1081.52 680.877 L1080.96 680.877 L1080.4 680.877 L1079.85 680.877 L1079.29 680.877 L1078.73 680.877 L1078.17 680.877 L1077.61 680.877 L1077.05 680.877 L1076.49 680.877 L1075.93 680.877 L1075.37 680.877 L1074.81 680.877 L1074.25 680.877 L1073.69 680.877 L1073.13 680.877 L1072.57 680.877 L1072.02 680.877 L1071.46 680.877 L1070.9 680.877 L1070.34 680.877 L1069.78 680.877 L1069.22 680.877 L1068.66 680.877 L1068.1 680.877 L1067.54 680.877 L1066.98 680.877 L1066.42 680.877 L1065.86 680.877 L1065.3 680.877 L1064.75 680.877 L1064.19 680.877 L1063.63 680.877 L1063.07 680.877 L1062.51 680.877 L1061.95 680.877 L1061.39 680.877 L1060.83 680.877 L1060.27 680.877 L1059.71 680.877 L1059.15 680.877 L1058.59 680.877 L1058.03 680.877 L1057.48 680.877 L1056.92 680.877 L1056.36 680.877 L1055.8 680.877 L1055.24 680.877 L1054.68 680.877 L1054.12 680.877 L1053.56 680.877 L1053 680.877 L1052.44 680.877 L1051.88 680.877 L1051.32 680.877 L1050.76 680.877 L1050.2 680.877 L1049.65 680.877 L1049.09 680.877 L1048.53 680.877 L1047.97 680.877 L1047.41 680.877 L1046.85 680.877 L1046.29 680.877 L1045.73 680.877 L1045.17 680.877 L1044.61 680.877 L1044.05 680.877 L1043.49 680.877 L1042.93 680.877 L1042.38 680.877 L1041.82 680.877 L1041.26 680.877 L1040.7 680.877 L1040.14 680.877 L1039.58 680.877 L1039.02 680.877 L1038.46 680.877 L1037.9 680.877 L1037.34 680.877 L1036.78 680.877 L1036.22 680.877 L1035.66 680.877 L1035.1 680.877 L1034.55 680.877 L1033.99 680.877 L1033.43 680.877 L1032.87 680.877 L1032.31 680.877 L1031.75 680.877 L1031.19 680.877 L1030.63 680.877 L1030.07 680.877 L1029.51 680.877 L1028.95 680.877 L1028.39 680.877 L1027.83 680.877 L1027.28 680.877 L1026.72 680.877 L1026.16 680.877 L1025.6 680.877 L1025.04 680.877 L1024.48 680.877 L1023.92 680.877 L1023.36 680.877 L1022.8 680.877 L1022.24 680.877 L1021.68 680.877 L1021.12 680.877 L1020.56 680.877 L1020.01 680.877 L1019.45 680.877 L1018.89 680.877 L1018.33 680.877 L1017.77 680.877 L1017.21 680.877 L1016.65 680.877 L1016.09 680.877 L1015.53 680.877 L1014.97 680.877 L1014.41 680.877 L1013.85 680.877 L1013.29 680.877 L1012.73 680.877 L1012.18 680.877 L1011.62 680.877 L1011.06 680.877 L1010.5 680.877 L1009.94 680.877 L1009.38 680.877 L1008.82 680.877 L1008.26 680.877 L1007.7 680.877 L1007.14 680.877 L1006.58 680.877 L1006.02 680.877 L1005.46 680.877 L1004.91 680.877 L1004.35 680.877 L1003.79 680.877 L1003.23 680.877 L1002.67 680.877 L1002.11 680.877 L1001.55 680.877 L1000.99 680.877 L1000.43 680.877 L999.872 680.877 L999.313 680.877 L998.754 680.877 L998.194 680.877 L997.635 680.877 L997.076 680.877 L996.517 680.877 L995.957 680.877 L995.398 680.877 L994.839 680.877 L994.28 680.877 L993.72 680.877 L993.161 680.877 L992.602 680.877 L992.043 680.877 L991.483 680.877 L990.924 680.877 L990.365 680.877 L989.806 680.877 L989.246 680.877 L988.687 680.877 L988.128 680.877 L987.569 680.877 L987.009 680.877 L986.45 680.877 L985.891 680.877 L985.332 680.877 L984.772 680.877 L984.213 680.877 L983.654 680.877 L983.095 680.877 L982.535 680.877 L981.976 680.877 L981.417 680.877 L980.858 680.877 L980.298 680.877 L979.739 680.877 L979.18 680.877 L978.621 680.877 L978.061 680.877 L977.502 680.877 L976.943 680.877 L976.384 680.877 L975.824 680.877 L975.265 680.877 L974.706 680.877 L974.147 680.877 L973.587 680.877 L973.028 680.877 L972.469 680.877 L971.91 680.877 L971.35 680.877 L970.791 680.877 L970.232 680.877 L969.673 680.877 L969.113 680.877 L968.554 680.877 L967.995 680.877 L967.436 680.877 L966.876 680.877 L966.317 680.877 L965.758 680.877 L965.199 680.877 L964.639 680.877 L964.08 680.877 L963.521 680.877 L962.962 680.877 L962.402 680.877 L961.843 680.877 L961.284 680.877 L960.725 680.877 L960.165 680.877 L959.606 680.877 L959.047 680.877 L958.488 680.877 L957.928 680.877 L957.369 680.877 L956.81 680.877 L956.251 680.877 L955.691 680.877 L955.132 680.877 L954.573 680.877 L954.014 680.877 L953.454 680.877 L952.895 680.877 L952.336 680.877 L951.777 680.877 L951.217 680.877 L950.658 680.877 L950.099 680.877 L949.54 680.877 L948.98 680.877 L948.421 680.877 L947.862 680.877 L947.303 680.877 L946.743 680.877 L946.184 680.877 L945.625 680.877 L945.066 680.877 L944.506 680.877 L943.947 680.877 L943.388 680.877 L942.829 680.877 L942.269 680.877 L941.71 680.877 L941.151 680.877 L940.592 680.877 L940.032 680.877 L939.473 680.877 L938.914 680.877 L938.355 680.877 L937.795 680.877 L937.236 680.877 L936.677 680.877 L936.118 680.877 L935.558 680.877 L934.999 680.877 L934.44 680.877 L933.881 680.877 L933.321 680.877 L932.762 680.877 L932.203 680.877 L931.644 680.877 L931.084 680.877 L930.525 680.877 L929.966 680.877 L929.406 680.877 L928.847 680.877 L928.288 680.877 L927.729 680.877 L927.169 680.877 L926.61 680.877 L926.051 680.877 L925.492 680.877 L924.932 680.877 L924.373 680.877 L923.814 680.877 L923.255 680.877 L922.695 680.877 L922.136 680.877 L921.577 680.877 L921.018 680.877 L920.458 680.877 L919.899 680.877 L919.34 680.877 L918.781 680.877 L918.221 680.877 L917.662 680.877 L917.103 680.877 L916.544 680.877 L915.984 680.877 L915.425 680.877 L914.866 680.877 L914.307 680.877 L913.747 680.877 L913.188 680.877 L912.629 680.877 L912.07 680.877 L911.51 680.877 L910.951 680.877 L910.392 680.877 L909.833 680.877 L909.273 680.877 L908.714 680.877 L908.155 680.877 L907.596 680.877 L907.036 680.877 L906.477 680.877 L905.918 680.877 L905.359 680.877 L904.799 680.877 L904.24 680.877 L903.681 680.877 L903.122 680.877 L902.562 680.877 L902.003 680.877 L901.444 680.877 L900.885 680.877 L900.325 680.877 L899.766 680.877 L899.207 680.877 L898.648 680.877 L898.088 680.877 L897.529 680.877 L896.97 680.877 L896.411 680.877 L895.851 680.877 L895.292 680.877 L894.733 680.877 L894.174 680.877 L893.614 680.877 L893.055 680.877 L892.496 680.877 L891.937 680.877 L891.377 680.877 L890.818 680.877 L890.259 680.877 L889.7 680.877 L889.14 680.877 L888.581 680.877 L888.022 680.877 L887.463 680.877 L886.903 680.877 L886.344 680.877 L885.785 680.877 L885.226 680.877 L884.666 680.877 L884.107 680.877 L883.548 680.877 L882.989 680.877 L882.429 680.877 L881.87 680.877 L881.311 680.877 L880.752 680.877 L880.192 680.877 L879.633 680.877 L879.074 680.877 L878.515 680.877 L877.955 680.877 L877.396 680.877 L876.837 680.877 L876.278 680.877 L875.718 680.877 L875.159 680.877 L874.6 680.877 L874.041 680.877 L873.481 680.877 L872.922 680.877 L872.363 680.877 L871.804 680.877 L871.244 680.877 L870.685 680.877 L870.126 680.877 L869.567 680.877 L869.007 680.877 L868.448 680.877 L867.889 680.877 L867.33 680.877 L866.77 680.877 L866.211 680.877 L865.652 680.877 L865.093 680.877 L864.533 680.877 L863.974 680.877 L863.415 680.877 L862.856 680.877 L862.296 680.877 L861.737 680.877 L861.178 680.877 L860.619 680.877 L860.059 680.877 L859.5 680.877 L858.941 680.877 L858.382 680.877 L857.822 680.877 L857.263 680.877 L856.704 680.877 L856.145 680.877 L855.585 680.877 L855.026 680.877 L854.467 680.877 L853.908 680.877 L853.348 680.877 L852.789 680.877 L852.23 680.877 L851.671 680.877 L851.111 680.877 L850.552 680.877 L849.993 680.877 L849.434 680.877 L848.874 680.877 L848.315 680.877 L847.756 680.877 L847.197 680.877 L846.637 680.877 L846.078 680.877 L845.519 680.877 L844.96 680.877 L844.4 680.877 L843.841 680.877 L843.282 680.877 L842.723 680.877 L842.163 680.877 L841.604 680.877 L841.045 680.877 L840.486 680.877 L839.926 680.877 L839.367 680.877 L838.808 680.877 L838.249 680.877 L837.689 680.877 L837.13 680.877 L836.571 680.877 L836.012 680.877 L835.452 680.877 L834.893 680.877 L834.334 680.877 L833.775 680.877 L833.215 680.877 L832.656 680.877 L832.097 680.877 L831.538 680.877 L830.978 680.877 L830.419 680.877 L829.86 680.877 L829.301 680.877 L828.741 680.877 L828.182 680.877 L827.623 680.877 L827.064 680.877 L826.504 680.877 L825.945 680.877 L825.386 680.877 L824.827 680.877 L824.267 680.877 L823.708 680.877 L823.149 680.877 L822.59 680.877 L822.03 680.877 L821.471 680.877 L820.912 680.877 L820.353 680.877 L819.793 680.877 L819.234 680.877 L818.675 680.877 L818.116 680.877 L817.556 680.877 L816.997 680.877 L816.438 680.877 L815.879 680.877 L815.319 680.877 L814.76 680.877 L814.201 680.877 L813.642 680.877 L813.082 680.877 L812.523 680.877 L811.964 680.877 L811.405 680.877 L810.845 680.877 L810.286 680.877 L809.727 680.877 L809.168 680.877 L808.608 680.877 L808.049 680.877 L807.49 680.877 L806.931 680.877 L806.371 680.877 L805.812 680.877 L805.253 680.877 L804.693 680.877 L804.134 680.877 L803.575 680.877 L803.016 680.877 L802.456 680.877 L801.897 680.877 L801.338 680.877 L800.779 680.877 L800.219 680.877 L799.66 680.877 L799.101 680.877 L798.542 680.877 L797.982 680.877 L797.423 680.877 L796.864 680.877 L796.305 680.877 L795.745 680.877 L795.186 680.877 L794.627 680.877 L794.068 680.877 L793.508 680.877 L792.949 680.877 L792.39 680.877 L791.831 680.877 L791.271 680.877 L790.712 680.877 L790.153 680.877 L789.594 680.877 L789.034 680.877 L788.475 680.877 L787.916 680.877 L787.357 680.877 L786.797 680.877 L786.238 680.877 L785.679 680.877 L785.12 680.877 L784.56 680.877 L784.001 680.877 L783.442 680.877 L782.883 680.877 L782.323 680.877 L781.764 680.877 L781.205 680.877 L780.646 680.877 L780.086 680.877 L779.527 680.877 L778.968 680.877 L778.409 680.877 L777.849 680.877 L777.29 680.877 L776.731 680.877 L776.172 680.877 L775.612 680.877 L775.053 680.877 L774.494 680.877 L773.935 680.877 L773.375 680.877 L772.816 680.877 L772.257 680.877 L771.698 680.877 L771.138 680.877 L770.579 680.877 L770.02 680.877 L769.461 680.877 L768.901 680.877 L768.342 680.877 L767.783 680.877 L767.224 680.877 L766.664 680.877 L766.105 680.877 L765.546 680.877 L764.987 680.877 L764.427 680.877 L763.868 680.877 L763.309 680.877 L762.75 680.877 L762.19 680.877 L761.631 680.877 L761.072 680.877 L760.513 680.877 L759.953 680.877 L759.394 680.877 L758.835 680.877 L758.276 680.877 L757.716 680.877 L757.157 680.877 L756.598 680.877 L756.039 680.877 L755.479 680.877 L754.92 680.877 L754.361 680.877 L753.802 680.877 L753.242 680.877 L752.683 680.877 L752.124 680.877 L751.565 680.877 L751.005 680.877 L750.446 680.877 L749.887 680.877 L749.328 680.877 L748.768 680.877 L748.209 680.877 L747.65 680.877 L747.091 680.877 L746.531 680.877 L745.972 680.877 L745.413 680.877 L744.854 680.877 L744.294 680.877 L743.735 680.877 L743.176 680.877 L742.617 680.877 L742.057 680.877 L741.498 680.877 L740.939 680.877 L740.38 680.877 L739.82 680.877 L739.261 680.877 L738.702 680.877 L738.143 680.877 L737.583 680.877 L737.024 680.877 L736.465 680.877 L735.906 680.877 L735.346 680.877 L734.787 680.877 L734.228 680.877 L733.669 680.877 L733.109 680.877 L732.55 680.877 L731.991 680.877 L731.432 680.877 L730.872 680.877 L730.313 680.877 L729.754 680.877 L729.195 680.877 L728.635 680.877 L728.076 680.877 L727.517 680.877 L726.958 680.877 L726.398 680.877 L725.839 680.877 L725.28 680.877 L724.721 680.877 L724.161 680.877 L723.602 680.877 L723.043 680.877 L722.484 680.877 L721.924 680.877 L721.365 680.877 L720.806 680.877 L720.247 680.877  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686 720.806,686 721.365,686 721.924,686 722.484,686 723.043,686 723.602,686 724.161,686 724.721,686 725.28,686 725.839,686 726.398,686 726.958,686 727.517,686 728.076,686 728.635,686 729.195,686 729.754,686 730.313,686 730.872,686 731.432,686 731.991,686 732.55,686 733.109,686 733.669,686 734.228,686 734.787,686 735.346,686 735.906,686 736.465,686 737.024,686 737.583,686 738.143,686 738.702,686 739.261,686 739.82,686 740.38,686 740.939,686 741.498,686 742.057,686 742.617,686 743.176,686 743.735,686 744.294,686 744.854,686 745.413,686 745.972,686 746.531,686 747.091,686 747.65,686 748.209,686 748.768,686 749.328,686 749.887,686 750.446,686 751.005,686 751.565,686 752.124,686 752.683,686 753.242,686 753.802,686 754.361,686 754.92,686 755.479,686 756.039,686 756.598,686 757.157,686 757.716,686 758.276,686 758.835,686 759.394,686 759.953,686 760.513,686 761.072,686 761.631,686 762.19,686 762.75,686 763.309,686 763.868,686 764.427,686 764.987,686 765.546,686 766.105,686 766.664,686 767.224,686 767.783,686 768.342,686 768.901,686 769.461,686 770.02,686 770.579,686 771.138,686 771.698,686 772.257,686 772.816,686 773.375,686 773.935,686 774.494,686 775.053,686 775.612,686 776.172,686 776.731,686 777.29,686 777.849,686 778.409,686 778.968,686 779.527,686 780.086,686 780.646,686 781.205,686 781.764,686 782.323,686 782.883,686 783.442,686 784.001,686 784.56,686 785.12,686 785.679,686 786.238,686 786.797,686 787.357,686 787.916,686 788.475,686 789.034,686 789.594,686 790.153,686 790.712,686 791.271,686 791.831,686 792.39,686 792.949,686 793.508,686 794.068,686 794.627,686 795.186,686 795.745,686 796.305,686 796.864,686 797.423,686 797.982,686 798.542,686 799.101,686 799.66,686 800.219,686 800.779,686 801.338,686 801.897,686 802.456,686 803.016,686 803.575,686 804.134,686 804.693,686 805.253,686 805.812,686 806.371,686 806.931,686 807.49,686 808.049,686 808.608,686 809.168,686 809.727,686 810.286,686 810.845,686 811.405,686 811.964,686 812.523,686 813.082,686 813.642,686 814.201,686 814.76,686 815.319,686 815.879,686 816.438,686 816.997,686 817.556,686 818.116,686 818.675,686 819.234,686 819.793,686 820.353,686 820.912,686 821.471,686 822.03,686 822.59,686 823.149,686 823.708,686 824.267,686 824.827,686 825.386,686 825.945,686 826.504,686 827.064,686 827.623,686 828.182,686 828.741,686 829.301,686 829.86,686 830.419,686 830.978,686 831.538,686 832.097,686 832.656,686 833.215,686 833.775,686 834.334,686 834.893,686 835.452,686 836.012,686 836.571,686 837.13,686 837.689,686 838.249,686 838.808,686 839.367,686 839.926,686 840.486,686 841.045,686 841.604,686 842.163,686 842.723,686 843.282,686 843.841,686 844.4,686 844.96,686 845.519,686 846.078,686 846.637,686 847.197,686 847.756,686 848.315,686 848.874,686 849.434,686 849.993,686 850.552,686 851.111,686 851.671,686 852.23,686 852.789,686 853.348,686 853.908,686 854.467,686 855.026,686 855.585,686 856.145,686 856.704,686 857.263,686 857.822,686 858.382,686 858.941,686 859.5,686 860.059,686 860.619,686 861.178,686 861.737,686 862.296,686 862.856,686 863.415,686 863.974,686 864.533,686 865.093,686 865.652,686 866.211,686 866.77,686 867.33,686 867.889,686 868.448,686 869.007,686 869.567,686 870.126,686 870.685,686 871.244,686 871.804,686 872.363,686 872.922,686 873.481,686 874.041,686 874.6,686 875.159,686 875.718,686 876.278,686 876.837,686 877.396,686 877.955,686 878.515,686 879.074,686 879.633,686 880.192,686 880.752,686 881.311,686 881.87,686 882.429,686 882.989,686 883.548,686 884.107,686 884.666,686 885.226,686 885.785,686 886.344,686 886.903,686 887.463,686 888.022,686 888.581,686 889.14,686 889.7,686 890.259,686 890.818,686 891.377,686 891.937,686 892.496,686 893.055,686 893.614,686 894.174,686 894.733,686 895.292,686 895.851,686 896.411,686 896.97,686 897.529,686 898.088,686 898.648,686 899.207,686 899.766,686 900.325,686 900.885,686 901.444,686 902.003,686 902.562,686 903.122,686 903.681,686 904.24,686 904.799,686 905.359,686 905.918,686 906.477,686 907.036,686 907.596,686 908.155,686 908.714,686 909.273,686 909.833,686 910.392,686 910.951,686 911.51,686 912.07,686 912.629,686 913.188,686 913.747,686 914.307,686 914.866,686 915.425,686 915.984,686 916.544,686 917.103,686 917.662,686 918.221,686 918.781,686 919.34,686 919.899,686 920.458,686 921.018,686 921.577,686 922.136,686 922.695,686 923.255,686 923.814,686 924.373,686 924.932,686 925.492,686 926.051,686 926.61,686 927.169,686 927.729,686 928.288,686 928.847,686 929.406,686 929.966,686 930.525,686 931.084,686 931.644,686 932.203,686 932.762,686 933.321,686 933.881,686 934.44,686 934.999,686 935.558,686 936.118,686 936.677,686 937.236,686 937.795,686 938.355,686 938.914,686 939.473,686 940.032,686 940.592,686 941.151,686 941.71,686 942.269,686 942.829,686 943.388,686 943.947,686 944.506,686 945.066,686 945.625,686 946.184,686 946.743,686 947.303,686 947.862,686 948.421,686 948.98,686 949.54,686 950.099,686 950.658,686 951.217,686 951.777,686 952.336,686 952.895,686 953.454,686 954.014,686 954.573,686 955.132,686 955.691,686 956.251,686 956.81,686 957.369,686 957.928,686 958.488,686 959.047,686 959.606,686 960.165,686 960.725,686 961.284,686 961.843,686 962.402,686 962.962,686 963.521,686 964.08,686 964.639,686 965.199,686 965.758,686 966.317,686 966.876,686 967.436,686 967.995,686 968.554,686 969.113,686 969.673,686 970.232,686 970.791,686 971.35,686 971.91,686 972.469,686 973.028,686 973.587,686 974.147,686 974.706,686 975.265,686 975.824,686 976.384,686 976.943,686 977.502,686 978.061,686 978.621,686 979.18,686 979.739,686 980.298,686 980.858,686 981.417,686 981.976,686 982.535,686 983.095,686 983.654,686 984.213,686 984.772,686 985.332,686 985.891,686 986.45,686 987.009,686 987.569,686 988.128,686 988.687,686 989.246,686 989.806,686 990.365,686 990.924,686 991.483,686 992.043,686 992.602,686 993.161,686 993.72,686 994.28,686 994.839,686 995.398,686 995.957,686 996.517,686 997.076,686 997.635,686 998.194,686 998.754,686 999.313,686 999.872,686 1000.43,686 1000.99,686 1001.55,686 1002.11,686 1002.67,686 1003.23,686 1003.79,686 1004.35,686 1004.91,686 1005.46,686 1006.02,686 1006.58,686 1007.14,686 1007.7,686 1008.26,686 1008.82,686 1009.38,686 1009.94,686 1010.5,686 1011.06,686 1011.62,686 1012.18,686 1012.73,686 1013.29,686 1013.85,686 1014.41,686 1014.97,686 1015.53,686 1016.09,686 1016.65,686 1017.21,686 1017.77,686 1018.33,686 1018.89,686 1019.45,686 1020.01,686 1020.56,686 1021.12,686 1021.68,686 1022.24,686 1022.8,686 1023.36,686 1023.92,686 1024.48,686 1025.04,686 1025.6,686 1026.16,686 1026.72,686 1027.28,686 1027.83,686 1028.39,686 1028.95,686 1029.51,686 1030.07,686 1030.63,686 1031.19,686 1031.75,686 1032.31,686 1032.87,686 1033.43,686 1033.99,686 1034.55,686 1035.1,686 1035.66,686 1036.22,686 1036.78,686 1037.34,686 1037.9,686 1038.46,686 1039.02,686 1039.58,686 1040.14,686 1040.7,686 1041.26,686 1041.82,686 1042.38,686 1042.93,686 1043.49,686 1044.05,686 1044.61,686 1045.17,686 1045.73,686 1046.29,686 1046.85,686 1047.41,686 1047.97,686 1048.53,686 1049.09,686 1049.65,686 1050.2,686 1050.76,686 1051.32,686 1051.88,686 1052.44,686 1053,686 1053.56,686 1054.12,686 1054.68,686 1055.24,686 1055.8,686 1056.36,686 1056.92,686 1057.48,686 1058.03,686 1058.59,686 1059.15,686 1059.71,686 1060.27,686 1060.83,686 1061.39,686 1061.95,686 1062.51,686 1063.07,686 1063.63,686 1064.19,686 1064.75,686 1065.3,686 1065.86,686 1066.42,686 1066.98,686 1067.54,686 1068.1,686 1068.66,686 1069.22,686 1069.78,686 1070.34,686 1070.9,686 1071.46,686 1072.02,686 1072.57,686 1073.13,686 1073.69,686 1074.25,686 1074.81,686 1075.37,686 1075.93,686 1076.49,686 1077.05,686 1077.61,686 1078.17,686 1078.73,686 1079.29,686 1079.85,686 1080.4,686 1080.96,686 1081.52,686 1082.08,686 1082.64,686 1083.2,686 1083.76,686 1084.32,686 1084.88,686 1085.44,686 1086,686 1086.56,686 1087.12,686 1087.67,686 1088.23,686 1088.79,686 1089.35,686 1089.91,686 1090.47,686 1091.03,686 1091.59,686 1092.15,686 1092.71,686 1093.27,686 1093.83,686 1094.39,686 1094.94,686 1095.5,686 1096.06,686 1096.62,686 1097.18,686 1097.74,686 1098.3,686 1098.86,686 1099.42,686 1099.98,686 1100.54,686 1101.1,686 1101.66,686 1102.22,686 1102.77,686 1103.33,686 1103.89,686 1104.45,686 1105.01,686 1105.57,686 1106.13,686 1106.69,686 1107.25,686 1107.81,686 1108.37,686 1108.93,686 1109.49,686 1110.04,686 1110.6,686 1111.16,686 1111.72,686 1112.28,686 1112.84,686 1113.4,686 1113.96,686 1114.52,686 1115.08,686 1115.64,686 1116.2,686 1116.76,686 1117.31,686 1117.87,686 1118.43,686 1118.99,686 1119.55,686 1120.11,686 1120.67,686 1121.23,686 1121.79,686 1122.35,686 1122.91,686 1123.47,686 1124.03,686 1124.59,686 1125.14,686 1125.7,686 1126.26,686 1126.82,686 1127.38,686 1127.94,686 1128.5,686 1129.06,686 1129.62,686 1130.18,686 1130.74,686 1131.3,686 1131.86,686 1132.41,686 1132.97,686 1133.53,686 1134.09,686 1134.65,686 1135.21,686 1135.77,686 1136.33,686 1136.89,686 1137.45,686 1138.01,686 1138.57,686 1139.13,686 1139.68,686 1140.24,686 1140.8,686 1141.36,686 1141.92,686 1142.48,686 1143.04,686 1143.6,686 1144.16,686 1144.72,686 1145.28,686 1145.84,686 1146.4,686 1146.96,686 1147.51,686 1148.07,686 1148.63,686 1149.19,686 1149.75,686 1150.31,686 1150.87,686 1151.43,686 1151.99,686 1152.55,686 1153.11,686 1153.67,686 1154.23,686 1154.78,686 1155.34,686 1155.9,686 1156.46,686 1157.02,686 1157.58,686 1158.14,686 1158.7,686 1159.26,686 1159.82,686 1160.38,686 1160.94,686 1161.5,686 1162.05,686 1162.61,686 1163.17,686 1163.73,686 1164.29,686 1164.85,686 1165.41,686 1165.97,686 1166.53,686 1167.09,686 1167.65,686 1168.21,686 1168.77,686 1169.33,686 1169.88,686 1170.44,686 1171,686 1171.56,686 1172.12,686 1172.68,686 1173.24,686 1173.8,686 1174.36,686 1174.92,686 1175.48,686 1176.04,686 1176.6,686 1177.15,686 1177.71,686 1178.27,686 1178.83,686 1179.39,686 1179.95,686 1180.51,686 1181.07,686 1181.63,686 1182.19,686 1182.75,686 1183.31,686 1183.87,686 1184.43,686 1184.98,686 1185.54,686 1186.1,686 1186.66,686 1187.22,686 1187.78,686 1188.34,686 1188.9,686 1189.46,686 1190.02,686 1190.58,686 1191.14,686 1191.7,686 1192.25,686 1192.81,686 1193.37,686 1193.93,686 1194.49,686 1195.05,686 1195.61,686 1196.17,686 1196.73,686 1197.29,686 1197.85,686 1198.41,686 1198.97,686 1199.52,686 1200.08,686 1200.64,686 1201.2,686 1201.76,686 1202.32,686 1202.88,686 1203.44,686 1204,686 1204.56,686 1205.12,686 1205.68,686 1206.24,686 1206.8,686 1207.35,686 1207.91,686 1208.47,686 1209.03,686 1209.59,686 1210.15,686 1210.71,686 1211.27,686 1211.83,686 1212.39,686 1212.95,686 1213.51,686 1214.07,686 1214.62,686 1215.18,686 1215.74,686 1216.3,686 1216.86,686 1217.42,686 1217.98,686 1218.54,686 1219.1,686 1219.66,686 1220.22,686 1220.78,686 1221.34,686 1221.89,686 1222.45,686 1223.01,686 1223.57,686 1224.13,686 1224.69,686 1225.25,686 1225.81,686 1226.37,686 1226.93,686 1227.49,686 1228.05,686 1228.61,686 1229.17,686 1229.72,686 1230.28,686 1230.84,686 1231.4,686 1231.96,686 1232.52,686 1233.08,686 1233.64,686 1234.2,686 1234.76,686 1235.32,686 1235.88,686 1236.44,686 1236.99,686 1237.55,686 1238.11,686 1238.67,686 1239.23,686 1239.79,686 1240.35,686 1240.91,686 1241.47,686 1242.03,686 1242.59,686 1243.15,686 1243.71,686 1244.26,686 1244.82,686 1245.38,686 1245.94,686 1246.5,686 1247.06,686 1247.62,686 1248.18,686 1248.74,686 1249.3,686 1249.86,686 1250.42,686 1250.98,686 1251.54,686 1252.09,686 1252.65,686 1253.21,686 1253.77,686 1254.33,686 1254.89,686 1255.45,686 1256.01,686 1256.57,686 1257.13,686 1257.69,686 1258.25,686 1258.81,686 1259.36,686 1259.92,686 1260.48,686 1261.04,686 1261.6,686 1262.16,686 1262.72,686 1263.28,686 1263.84,686 1264.4,686 1264.96,686 1265.52,686 1266.08,686 1266.63,686 1267.19,686 1267.75,686 1268.31,686 1268.87,686 1269.43,686 1269.99,686 1270.55,686 1271.11,686 1271.67,686 1272.23,686 1272.79,686 1273.35,686 1273.91,686 1274.46,686 1275.02,686 1275.58,686 1276.14,686 1276.7,686 1277.26,686 1277.82,686 1278.38,686 1278.94,686 1279.5,686 1280.06,686 1280.62,686 1281.18,686 1281.73,686 1282.29,686 1282.85,686 1283.41,686 1283.97,686 1284.53,686 1285.09,686 1285.65,686 1286.21,686 1286.77,686 1287.33,686 1287.89,686 1288.45,686 1289,686 1289.56,686 1290.12,686 1290.68,686 1291.24,686 1291.8,686 1292.36,686 1292.92,686 1293.48,686 1294.04,686 1294.6,686 1295.16,686 1295.72,686 1296.28,686 1296.83,686 1297.39,686 1297.95,686 1298.51,686 1299.07,686 1299.63,686 1300.19,686 1300.75,686 1301.31,686 1301.87,686 1302.43,686 1302.99,686 1303.55,686 1304.1,686 1304.66,686 1305.22,686 1305.78,686 1306.34,686 1306.9,686 1307.46,686 1308.02,686 1308.58,686 1309.14,686 1309.7,686 1310.26,686 1310.82,686 1311.38,686 1311.93,686 1312.49,686 1313.05,686 1313.61,686 1314.17,686 1314.73,686 1315.29,686 1315.85,686 1316.41,686 1316.97,686 1317.53,686 1318.09,686 1318.65,686 1319.2,686 1319.76,686 1320.32,686 1320.88,686 1321.44,686 1322,686 1322.56,686 1323.12,686 1323.68,686 1324.24,686 1324.8,686 1325.36,686 1325.92,686 1326.47,686 1327.03,686 1327.59,686 1328.15,686 1328.71,686 1329.27,686 1329.83,686 1330.39,686 1330.95,686 1331.51,686 1332.07,686 1332.63,686 1333.19,686 1333.75,686 1334.3,686 1334.86,686 1335.42,686 1335.98,686 1336.54,686 1337.1,686 1337.66,686 1338.22,686 1338.78,686 1339.34,686 1339.9,686 1340.46,686 1341.02,686 1341.57,686 1342.13,686 1342.69,686 1343.25,686 1343.81,686 1344.37,686 1344.93,686 1345.49,686 1346.05,686 1346.61,686 1347.17,686 1347.73,686 1348.29,686 1348.84,686 1349.4,686 1349.96,686 1350.52,686 1351.08,686 1351.64,686 1352.2,686 1352.76,686 1353.32,686 1353.88,686 1354.44,686 1355,686 1355.56,686 1356.12,686 1356.67,686 1357.23,686 1357.79,686 1358.35,686 1358.91,686 1359.47,686 1360.03,686 1360.59,686 1361.15,686 1361.71,686 1362.27,686 1362.83,686 1363.39,686 1363.94,686 1364.5,686 1365.06,686 1365.62,686 1366.18,686 1366.74,686 1367.3,686 1367.86,686 1368.42,686 1368.98,686 1369.54,686 1370.1,686 1370.66,686 1371.21,686 1371.77,686 1372.33,686 1372.89,686 1373.45,686 1374.01,686 1374.57,686 1375.13,686 1375.69,686 1376.25,686 1376.81,686 1377.37,686 1377.93,686 1378.49,686 1379.04,686 1379.6,686 1380.16,686 1380.72,686 1381.28,686 1381.84,686 1382.4,686 1382.96,686 1383.52,686 1384.08,686 1384.64,686 1385.2,686 1385.76,686 1386.31,686 1386.87,686 1387.43,686 1387.99,686 1388.55,686 1389.11,686 1389.67,686 1390.23,686 1390.79,686 1391.35,686 1391.91,686 1392.47,686 1393.03,686 1393.58,686 1394.14,686 1394.7,686 1395.26,686 1395.82,686 1396.38,686 1396.94,686 1397.5,686 1398.06,686 1398.62,686 1399.18,686 1399.74,686 1400.3,686 1400.86,686 1401.41,686 1401.97,686 1402.53,686 1403.09,686 1403.65,686 1404.21,686 1404.77,686 1405.33,686 1405.89,686 1406.45,686 1407.01,686 1407.57,686 1408.13,686 1408.68,686 1409.24,686 1409.8,686 1410.36,686 1410.92,686 1411.48,686 1412.04,686 1412.6,686 1413.16,686 1413.72,686 1414.28,686 1414.84,686 1415.4,686 1415.95,686 1416.51,686 1417.07,686 1417.63,686 1418.19,686 1418.75,686 1419.31,686 1419.87,686 1420.43,686 1420.99,686 1421.55,686 1422.11,686 1422.67,686 1423.23,686 1423.78,686 1424.34,686 1424.9,686 1425.46,686 1426.02,686 1426.58,686 1427.14,686 1427.7,686 1428.26,686 1428.82,686 1429.38,686 1429.94,686 1430.5,686 1431.05,686 1431.61,686 1432.17,686 1432.73,686 1433.29,686 1433.85,686 1434.41,686 1434.97,686 1435.53,686 1436.09,686 1436.65,686 1437.21,686 1437.77,686 1438.33,686 1438.88,686 1439.44,686 1440,686 1440.56,686 1441.12,686 1441.68,686 1442.24,686 1442.8,686 1443.36,686 1443.92,686 1444.48,686 1445.04,686 1445.6,686 1446.15,686 1446.71,686 1447.27,686 1447.83,686 1448.39,686 1448.95,686 1449.51,686 1450.07,686 1450.63,686 1451.19,686 1451.75,686 1452.31,686 1452.87,686 1453.42,686 1453.98,686 1454.54,686 1455.1,686 1455.66,686 1456.22,686 1456.78,686 1457.34,686 1457.9,686 1458.46,686 1459.02,686 1459.58,686 1460.14,686 1460.7,686 1461.25,686 1461.81,686 1462.37,686 1462.93,686 1463.49,686 1464.05,686 1464.61,686 1465.17,686 1465.73,686 1466.29,686 1466.85,686 1467.41,686 1467.97,686 1468.52,686 1469.08,686 1469.64,686 1470.2,686 1470.76,686 1471.32,686 1471.88,686 1472.44,686 1473,686 1473.56,686 1474.12,686 1474.68,686 1475.24,686 1475.79,686 1476.35,686 1476.91,686 1477.47,686 1478.03,686 1478.59,686 1479.15,686 1479.71,686 1480.27,686 1480.83,686 1481.39,686 1481.95,686 1482.51,686 1483.07,686 1483.62,686 1484.18,686 1484.74,686 1485.3,686 1485.86,686 1486.42,686 1486.98,686 1487.54,686 1488.1,686 1488.66,686 1489.22,686 1489.78,686 1490.34,686 1490.89,686 1491.45,686 1492.01,686 1492.57,686 1493.13,686 1493.69,686 1494.25,686 1494.81,686 1495.37,686 1495.93,686 1496.49,686 1497.05,686 1497.61,686 1498.16,686 1498.72,686 1499.28,686 1499.84,686 1500.4,686 1500.96,686 1501.52,686 1502.08,686 1502.64,686 1503.2,686 1503.76,686 1504.32,686 1504.88,686 1505.44,686 1505.99,686 1506.55,686 1507.11,686 1507.67,686 1508.23,686 1508.79,686 1509.35,686 1509.91,686 1510.47,686 1511.03,686 1511.59,686 1512.15,686 1512.71,686 1513.26,686 1513.82,686 1514.38,686 1514.94,686 1515.5,686 1516.06,686 1516.62,686 1517.18,686 1517.74,686 1518.3,686 1518.86,686 1519.42,686 1519.98,686 1520.53,686 1521.09,686 1521.65,686 1522.21,686 1522.77,686 1523.33,686 1523.89,686 1524.45,686 1525.01,686 1525.57,686 1526.13,686 1526.69,686 1527.25,686 1527.81,686 1528.36,686 1528.92,686 1529.48,686 1530.04,686 1530.6,686 1531.16,686 1531.72,686 1532.28,686 1532.84,686 1533.4,686 1533.96,686 1534.52,686 1535.08,686 1535.63,686 1536.19,686 1536.75,686 1537.31,686 1537.87,686 1538.43,686 1538.99,686 1539.55,686 1540.11,686 1540.67,686 1541.23,686 1541.79,686 1542.35,686 1542.9,686 1543.46,686 1544.02,686 1544.58,686 1545.14,686 1545.7,686 1546.26,686 1546.82,686 1547.38,686 1547.94,686 1548.5,686 1549.06,686 1549.62,686 1550.18,686 1550.73,686 1551.29,686 1551.85,686 1552.41,686 1552.97,686 1553.53,686 1554.09,686 1554.65,686 1555.21,686 1555.77,686 1556.33,686 1556.89,686 1557.45,686 1558,686 1558.56,686 1559.12,686 1559.68,686 1560.24,686 1560.8,686 1561.36,686 1561.92,686 1562.48,686 1563.04,686 1563.6,686 1564.16,686 1564.72,686 1565.28,686 1565.83,686 1566.39,686 1566.95,686 1567.51,686 1568.07,686 1568.63,686 1569.19,686 1569.75,686 1570.31,686 1570.87,686 1571.43,686 1571.99,686 1572.55,686 1573.1,686 1573.66,686 1574.22,686 1574.78,686 1575.34,686 1575.9,686 1576.46,686 1577.02,686 1577.58,686 1578.14,686 1578.7,686 1579.26,686 1579.82,686 1580.37,686 1580.93,686 1581.49,686 1582.05,686 1582.61,686 1583.17,686 1583.73,686 1584.29,686 1584.85,686 1585.41,686 1585.97,686 1586.53,686 1587.09,686 1587.65,686 1588.2,686 1588.76,686 1589.32,686 1589.88,686 1590.44,686 1591,686 1591.56,686 1592.12,686 1592.68,686 1593.24,686 1593.8,686 1594.36,686 1594.92,686 1595.47,686 1596.03,686 1596.59,686 1597.15,686 1597.71,686 1598.27,686 1598.83,686 1599.39,686 1599.95,686 1600.51,686 1601.07,686 1601.63,686 1602.19,686 1602.74,686 1603.3,686 1603.86,686 1604.42,686 1604.98,686 1605.54,686 1606.1,686 1606.66,686 1607.22,686 1607.78,686 1608.34,686 1608.9,686 1609.46,686 1610.02,686 1610.57,686 1611.13,686 1611.69,686 1612.25,686 1612.81,686 1613.37,686 1613.93,686 1614.49,686 1615.05,686 1615.61,686 1616.17,686 1616.73,686 1617.29,686 1617.84,686 1618.4,686 1618.96,686 1619.52,686 1620.08,686 1620.64,686 1621.2,686 1621.76,686 1622.32,686 1622.88,686 1623.44,686 1624,686 1624.56,686 1625.11,686 1625.67,686 1626.23,686 1626.79,686 1627.35,686 1627.91,686 1628.47,686 1629.03,686 1629.59,686 1630.15,686 1630.71,686 1631.27,686 1631.83,686 1632.39,686 1632.94,686 1633.5,686 1634.06,686 1634.62,686 1635.18,686 1635.74,686 1636.3,686 1636.86,686 1637.42,686 1637.98,686 1638.54,686 1639.1,686 1639.66,686 1640.21,686 1640.77,686 1641.33,686 1641.89,686 1642.45,686 1643.01,686 1643.57,686 1644.13,686 1644.69,686 1645.25,686 1645.81,686 1646.37,686 1646.93,686 1647.48,686 1648.04,686 1648.6,686 1649.16,686 1649.72,686 1650.28,686 1650.84,686 1651.4,686 1651.96,686 1652.52,686 1653.08,686 1653.64,686 1654.2,686 1654.76,686 1655.31,686 1655.87,686 1656.43,686 1656.99,686 1657.55,686 1658.11,686 1658.67,686 1659.23,686 1659.79,686 1660.35,686 1660.91,686 1661.47,686 1662.03,686 1662.58,686 1663.14,686 1663.7,686 1664.26,686 1664.82,686 1665.38,686 1665.94,686 1666.5,686 1667.06,686 1667.62,686 1668.18,686 1668.74,686 1669.3,686 1669.85,686 1670.41,686 1670.97,686 1671.53,686 1672.09,686 1672.65,686 1673.21,686 1673.77,686 1674.33,686 1674.89,686 1675.45,686 1676.01,686 1676.57,686 1677.13,686 1677.68,686 1678.24,686 1678.8,686 1679.36,686 1679.92,686 1680.48,686 1681.04,686 1681.6,686 1682.16,686 1682.72,686 1683.28,686 1683.84,686 1684.4,686 1684.95,686 1685.51,686 1686.07,686 1686.63,686 1687.19,686 1687.75,686 1688.31,686 1688.87,686 1689.43,686 1689.99,686 1690.55,686 1691.11,686 1691.67,686 1692.23,686 1692.78,686 1693.34,686 1693.9,686 1694.46,686 1695.02,686 1695.58,686 1696.14,686 1696.7,686 1697.26,686 1697.82,686 1698.38,686 1698.94,686 1699.5,686 1700.05,686 1700.61,686 1701.17,686 1701.73,686 1702.29,686 1702.85,686 1703.41,686 1703.97,686 1704.53,686 1705.09,686 1705.65,686 1706.21,686 1706.77,686 1707.32,686 1707.88,686 1708.44,686 1709,686 1709.56,686 1710.12,686 1710.68,686 1711.24,686 1711.8,686 1712.36,686 1712.92,686 1713.48,686 1714.04,686 1714.6,686 1715.15,686 1715.71,686 1716.27,686 1716.83,686 1717.39,686 1717.95,686 1718.51,686 1719.07,686 1719.63,686 1720.19,686 1720.75,686 1721.31,686 1721.87,686 1722.42,686 1722.98,686 1723.54,686 1724.1,686 1724.66,686 1725.22,686 1725.78,686 1726.34,686 1726.9,686 1727.46,686 1728.02,686 1728.58,686 1729.14,686 1729.69,686 1730.25,686 1730.81,686 1731.37,686 1731.93,686 1732.49,686 1733.05,686 1733.61,686 1734.17,686 1734.73,686 1735.29,686 1735.85,686 1736.41,686 1736.97,686 1737.52,686 1738.08,686 1738.64,686 1739.2,686 1739.76,686 1740.32,686 1740.88,686 1741.44,686 1742,686 1742.56,686 1743.12,686 1743.68,686 1744.24,686 1744.79,686 1745.35,686 1745.91,686 1746.47,686 1747.03,686 1747.59,686 1748.15,686 1748.71,686 1749.27,686 1749.83,686 1750.39,686 1750.95,686 1751.51,686 1752.06,686 1752.62,686 1753.18,686 1753.74,686 1754.3,686 1754.86,686 1755.42,686 1755.98,686 1756.54,686 1757.1,686 1757.66,686 1758.22,686 1758.78,686 1759.34,686 1759.89,686 1760.45,686 1761.01,686 1761.57,686 1762.13,686 1762.69,686 1763.25,686 1763.81,686 1764.37,686 1764.93,686 1765.49,686 1766.05,686 1766.61,686 1767.16,686 1767.72,686 1768.28,686 1768.84,686 1769.4,686 1769.96,686 1770.52,686 1771.08,686 1771.64,686 1772.2,686 1772.76,686 1773.32,686 1773.88,686 1774.43,686 1774.99,686 1775.55,686 1776.11,686 1776.67,686 1777.23,686 1777.79,686 1778.35,686 1778.91,686 1779.47,686 1780.03,686 1780.59,686 1781.15,686 1781.71,686 1782.26,686 1782.82,686 1783.38,686 1783.94,686 1784.5,686 1785.06,686 1785.62,686 1786.18,686 1786.74,686 1787.3,686 1787.86,686 1788.42,686 1788.98,686 1789.53,686 1790.09,686 1790.65,686 1791.21,686 1791.77,686 1792.33,686 1792.89,686 1793.45,686 1794.01,686 1794.57,686 1795.13,686 1795.69,686 1796.25,686 1796.8,686 1797.36,686 1797.92,686 1798.48,686 1799.04,686 1799.6,686 1800.16,686 1800.72,686 1801.28,686 1801.84,686 1802.4,686 1802.96,686 1803.52,686 1804.08,686 1804.63,686 1805.19,686 1805.75,686 1806.31,686 1806.87,686 1807.43,686 1807.99,686 1808.55,686 1809.11,686 1809.67,686 1810.23,686 1810.79,686 1811.35,686 1811.9,686 1812.46,686 1813.02,686 1813.58,686 1814.14,686 1814.7,686 1815.26,686 1815.82,686 1816.38,686 1816.94,686 1817.5,686 1818.06,686 1818.62,686 1819.18,686 1819.73,686 1820.29,686 1820.85,686 1821.41,686 1821.97,686 1822.53,686 1823.09,686 1823.65,686 1824.21,686 1824.77,686 1825.33,686 1825.89,686 1826.45,686 1827,686 1827.56,686 1828.12,686 1828.68,686 1829.24,686 1829.8,686 1830.36,686 1830.92,686 1831.48,686 1832.04,686 1832.6,686 1833.16,686 1833.72,686 1834.27,686 1834.83,686 1835.39,686 1835.95,686 1836.51,686 1837.07,686 1837.63,686 1838.19,686 \"/>\n<path clip-path=\"url(#clip533)\" d=\"M720.247 684.729 L720.806 684.729 L721.365 684.729 L721.924 684.729 L722.484 684.729 L723.043 684.729 L723.602 684.729 L724.161 684.729 L724.721 684.729 L725.28 684.729 L725.839 684.729 L726.398 684.729 L726.958 684.729 L727.517 684.729 L728.076 684.729 L728.635 684.729 L729.195 684.729 L729.754 684.729 L730.313 684.729 L730.872 684.729 L731.432 684.729 L731.991 684.729 L732.55 684.729 L733.109 684.729 L733.669 684.729 L734.228 684.729 L734.787 684.729 L735.346 684.729 L735.906 684.729 L736.465 684.729 L737.024 684.729 L737.583 684.729 L738.143 684.729 L738.702 684.729 L739.261 684.729 L739.82 684.729 L740.38 684.729 L740.939 684.729 L741.498 684.729 L742.057 684.729 L742.617 684.729 L743.176 684.729 L743.735 684.729 L744.294 684.729 L744.854 684.729 L745.413 684.729 L745.972 684.729 L746.531 684.729 L747.091 684.729 L747.65 684.729 L748.209 684.729 L748.768 684.729 L749.328 684.729 L749.887 684.729 L750.446 684.729 L751.005 684.729 L751.565 684.729 L752.124 684.729 L752.683 684.729 L753.242 684.729 L753.802 684.729 L754.361 684.729 L754.92 684.729 L755.479 684.729 L756.039 684.729 L756.598 684.729 L757.157 684.729 L757.716 684.729 L758.276 684.729 L758.835 684.729 L759.394 684.729 L759.953 684.729 L760.513 684.729 L761.072 684.729 L761.631 684.729 L762.19 684.729 L762.75 684.729 L763.309 684.729 L763.868 684.729 L764.427 684.729 L764.987 684.729 L765.546 684.729 L766.105 684.729 L766.664 684.729 L767.224 684.729 L767.783 684.729 L768.342 684.729 L768.901 684.729 L769.461 684.729 L770.02 684.729 L770.579 684.729 L771.138 684.729 L771.698 684.729 L772.257 684.729 L772.816 684.729 L773.375 684.729 L773.935 684.729 L774.494 684.729 L775.053 684.729 L775.612 684.729 L776.172 684.729 L776.731 684.729 L777.29 684.729 L777.849 684.729 L778.409 684.729 L778.968 684.729 L779.527 684.729 L780.086 684.729 L780.646 684.729 L781.205 684.729 L781.764 684.729 L782.323 684.729 L782.883 684.729 L783.442 684.729 L784.001 684.729 L784.56 684.729 L785.12 684.729 L785.679 684.729 L786.238 684.729 L786.797 684.729 L787.357 684.729 L787.916 684.729 L788.475 684.729 L789.034 684.729 L789.594 684.729 L790.153 684.729 L790.712 684.729 L791.271 684.729 L791.831 684.729 L792.39 684.729 L792.949 684.729 L793.508 684.729 L794.068 684.729 L794.627 684.729 L795.186 684.729 L795.745 684.729 L796.305 684.729 L796.864 684.729 L797.423 684.729 L797.982 684.729 L798.542 684.729 L799.101 684.729 L799.66 684.729 L800.219 684.729 L800.779 684.729 L801.338 684.729 L801.897 684.729 L802.456 684.729 L803.016 684.729 L803.575 684.729 L804.134 684.729 L804.693 684.729 L805.253 684.729 L805.812 684.729 L806.371 684.729 L806.931 684.729 L807.49 684.729 L808.049 684.729 L808.608 684.729 L809.168 684.729 L809.727 684.729 L810.286 684.729 L810.845 684.729 L811.405 684.729 L811.964 684.729 L812.523 684.729 L813.082 684.729 L813.642 684.729 L814.201 684.729 L814.76 684.729 L815.319 684.729 L815.879 684.729 L816.438 684.729 L816.997 684.729 L817.556 684.729 L818.116 684.729 L818.675 684.729 L819.234 684.729 L819.793 684.729 L820.353 684.729 L820.912 684.729 L821.471 684.729 L822.03 684.729 L822.59 684.729 L823.149 684.729 L823.708 684.729 L824.267 684.729 L824.827 684.729 L825.386 684.729 L825.945 684.729 L826.504 684.729 L827.064 684.729 L827.623 684.729 L828.182 684.729 L828.741 684.729 L829.301 684.729 L829.86 684.729 L830.419 684.729 L830.978 684.729 L831.538 684.729 L832.097 684.729 L832.656 684.729 L833.215 684.729 L833.775 684.729 L834.334 684.729 L834.893 684.729 L835.452 684.729 L836.012 684.729 L836.571 684.729 L837.13 684.729 L837.689 684.729 L838.249 684.729 L838.808 684.729 L839.367 684.729 L839.926 684.729 L840.486 684.729 L841.045 684.729 L841.604 684.729 L842.163 684.729 L842.723 684.729 L843.282 684.729 L843.841 684.729 L844.4 684.729 L844.96 684.729 L845.519 684.729 L846.078 684.729 L846.637 684.729 L847.197 684.729 L847.756 684.729 L848.315 684.729 L848.874 684.729 L849.434 684.729 L849.993 684.729 L850.552 684.729 L851.111 684.729 L851.671 684.729 L852.23 684.729 L852.789 684.729 L853.348 684.729 L853.908 684.729 L854.467 684.729 L855.026 684.729 L855.585 684.729 L856.145 684.729 L856.704 684.729 L857.263 684.729 L857.822 684.729 L858.382 684.729 L858.941 684.729 L859.5 684.729 L860.059 684.729 L860.619 684.729 L861.178 684.729 L861.737 684.729 L862.296 684.729 L862.856 684.729 L863.415 684.729 L863.974 684.729 L864.533 684.729 L865.093 684.729 L865.652 684.729 L866.211 684.729 L866.77 684.729 L867.33 684.729 L867.889 684.729 L868.448 684.729 L869.007 684.729 L869.567 684.729 L870.126 684.729 L870.685 684.729 L871.244 684.729 L871.804 684.729 L872.363 684.729 L872.922 684.729 L873.481 684.729 L874.041 684.729 L874.6 684.729 L875.159 684.729 L875.718 684.729 L876.278 684.729 L876.837 684.729 L877.396 684.729 L877.955 684.729 L878.515 684.729 L879.074 684.729 L879.633 684.729 L880.192 684.729 L880.752 684.729 L881.311 684.729 L881.87 684.729 L882.429 684.729 L882.989 684.729 L883.548 684.729 L884.107 684.729 L884.666 684.729 L885.226 684.729 L885.785 684.729 L886.344 684.729 L886.903 684.729 L887.463 684.729 L888.022 684.729 L888.581 684.729 L889.14 684.729 L889.7 684.729 L890.259 684.729 L890.818 684.729 L891.377 684.729 L891.937 684.729 L892.496 684.729 L893.055 684.729 L893.614 684.729 L894.174 684.729 L894.733 684.729 L895.292 684.729 L895.851 684.729 L896.411 684.729 L896.97 684.729 L897.529 684.729 L898.088 684.729 L898.648 684.729 L899.207 684.729 L899.766 684.729 L900.325 684.729 L900.885 684.729 L901.444 684.729 L902.003 684.729 L902.562 684.729 L903.122 684.729 L903.681 684.729 L904.24 684.729 L904.799 684.729 L905.359 684.729 L905.918 684.729 L906.477 684.729 L907.036 684.729 L907.596 684.729 L908.155 684.729 L908.714 684.729 L909.273 684.729 L909.833 684.729 L910.392 684.729 L910.951 684.729 L911.51 684.729 L912.07 684.729 L912.629 684.729 L913.188 684.729 L913.747 684.729 L914.307 684.729 L914.866 684.729 L915.425 684.729 L915.984 684.729 L916.544 684.729 L917.103 684.729 L917.662 684.729 L918.221 684.729 L918.781 684.729 L919.34 684.729 L919.899 684.729 L920.458 684.729 L921.018 684.729 L921.577 684.729 L922.136 684.729 L922.695 684.729 L923.255 684.729 L923.814 684.729 L924.373 684.729 L924.932 684.729 L925.492 684.729 L926.051 684.729 L926.61 684.729 L927.169 684.729 L927.729 684.729 L928.288 684.729 L928.847 684.729 L929.406 684.729 L929.966 684.729 L930.525 684.729 L931.084 684.729 L931.644 684.729 L932.203 684.729 L932.762 684.729 L933.321 684.729 L933.881 684.729 L934.44 684.729 L934.999 684.729 L935.558 684.729 L936.118 684.729 L936.677 684.729 L937.236 684.729 L937.795 684.729 L938.355 684.729 L938.914 684.729 L939.473 684.729 L940.032 684.729 L940.592 684.729 L941.151 684.729 L941.71 684.729 L942.269 684.729 L942.829 684.729 L943.388 684.729 L943.947 684.729 L944.506 684.729 L945.066 684.729 L945.625 684.729 L946.184 684.729 L946.743 684.729 L947.303 684.729 L947.862 684.729 L948.421 684.729 L948.98 684.729 L949.54 684.729 L950.099 684.729 L950.658 684.729 L951.217 684.729 L951.777 684.729 L952.336 684.729 L952.895 684.729 L953.454 684.729 L954.014 684.729 L954.573 684.729 L955.132 684.729 L955.691 684.729 L956.251 684.729 L956.81 684.729 L957.369 684.729 L957.928 684.729 L958.488 684.729 L959.047 684.729 L959.606 684.729 L960.165 684.729 L960.725 684.729 L961.284 684.729 L961.843 684.729 L962.402 684.729 L962.962 684.729 L963.521 684.729 L964.08 684.729 L964.639 684.729 L965.199 684.729 L965.758 684.729 L966.317 684.729 L966.876 684.729 L967.436 684.729 L967.995 684.729 L968.554 684.729 L969.113 684.729 L969.673 684.729 L970.232 684.729 L970.791 684.729 L971.35 684.729 L971.91 684.729 L972.469 684.729 L973.028 684.729 L973.587 684.729 L974.147 684.729 L974.706 684.729 L975.265 684.729 L975.824 684.729 L976.384 684.729 L976.943 684.729 L977.502 684.729 L978.061 684.729 L978.621 684.729 L979.18 684.729 L979.739 684.729 L980.298 684.729 L980.858 684.729 L981.417 684.729 L981.976 684.729 L982.535 684.729 L983.095 684.729 L983.654 684.729 L984.213 684.729 L984.772 684.729 L985.332 684.729 L985.891 684.729 L986.45 684.729 L987.009 684.729 L987.569 684.729 L988.128 684.729 L988.687 684.729 L989.246 684.729 L989.806 684.729 L990.365 684.729 L990.924 684.729 L991.483 684.729 L992.043 684.729 L992.602 684.729 L993.161 684.729 L993.72 684.729 L994.28 684.729 L994.839 684.729 L995.398 684.729 L995.957 684.729 L996.517 684.729 L997.076 684.729 L997.635 684.729 L998.194 684.729 L998.754 684.729 L999.313 684.729 L999.872 684.729 L1000.43 684.729 L1000.99 684.729 L1001.55 684.729 L1002.11 684.729 L1002.67 684.729 L1003.23 684.729 L1003.79 684.729 L1004.35 684.729 L1004.91 684.729 L1005.46 684.729 L1006.02 684.729 L1006.58 684.729 L1007.14 684.729 L1007.7 684.729 L1008.26 684.729 L1008.82 684.729 L1009.38 684.729 L1009.94 684.729 L1010.5 684.729 L1011.06 684.729 L1011.62 684.729 L1012.18 684.729 L1012.73 684.729 L1013.29 684.729 L1013.85 684.729 L1014.41 684.729 L1014.97 684.729 L1015.53 684.729 L1016.09 684.729 L1016.65 684.729 L1017.21 684.729 L1017.77 684.729 L1018.33 684.729 L1018.89 684.729 L1019.45 684.729 L1020.01 684.729 L1020.56 684.729 L1021.12 684.729 L1021.68 684.729 L1022.24 684.729 L1022.8 684.729 L1023.36 684.729 L1023.92 684.729 L1024.48 684.729 L1025.04 684.729 L1025.6 684.729 L1026.16 684.729 L1026.72 684.729 L1027.28 684.729 L1027.83 684.729 L1028.39 684.729 L1028.95 684.729 L1029.51 684.729 L1030.07 684.729 L1030.63 684.729 L1031.19 684.729 L1031.75 684.729 L1032.31 684.729 L1032.87 684.729 L1033.43 684.729 L1033.99 684.729 L1034.55 684.729 L1035.1 684.729 L1035.66 684.729 L1036.22 684.729 L1036.78 684.729 L1037.34 684.729 L1037.9 684.729 L1038.46 684.729 L1039.02 684.729 L1039.58 684.729 L1040.14 684.729 L1040.7 684.729 L1041.26 684.729 L1041.82 684.729 L1042.38 684.729 L1042.93 684.729 L1043.49 684.729 L1044.05 684.729 L1044.61 684.729 L1045.17 684.729 L1045.73 684.729 L1046.29 684.729 L1046.85 684.729 L1047.41 684.729 L1047.97 684.729 L1048.53 684.729 L1049.09 684.729 L1049.65 684.729 L1050.2 684.729 L1050.76 684.729 L1051.32 684.729 L1051.88 684.729 L1052.44 684.729 L1053 684.729 L1053.56 684.729 L1054.12 684.729 L1054.68 684.729 L1055.24 684.729 L1055.8 684.729 L1056.36 684.729 L1056.92 684.729 L1057.48 684.729 L1058.03 684.729 L1058.59 684.729 L1059.15 684.729 L1059.71 684.729 L1060.27 684.729 L1060.83 684.729 L1061.39 684.729 L1061.95 684.729 L1062.51 684.729 L1063.07 684.729 L1063.63 684.729 L1064.19 684.729 L1064.75 684.729 L1065.3 684.729 L1065.86 684.729 L1066.42 684.729 L1066.98 684.729 L1067.54 684.729 L1068.1 684.729 L1068.66 684.729 L1069.22 684.729 L1069.78 684.729 L1070.34 684.729 L1070.9 684.729 L1071.46 684.729 L1072.02 684.729 L1072.57 684.729 L1073.13 684.729 L1073.69 684.729 L1074.25 684.729 L1074.81 684.729 L1075.37 684.729 L1075.93 684.729 L1076.49 684.729 L1077.05 684.729 L1077.61 684.729 L1078.17 684.729 L1078.73 684.729 L1079.29 684.729 L1079.85 684.729 L1080.4 684.729 L1080.96 684.729 L1081.52 684.729 L1082.08 684.729 L1082.64 684.729 L1083.2 684.729 L1083.76 684.729 L1084.32 684.729 L1084.88 684.729 L1085.44 684.729 L1086 684.729 L1086.56 684.729 L1087.12 684.729 L1087.67 684.729 L1088.23 684.729 L1088.79 684.729 L1089.35 684.729 L1089.91 684.729 L1090.47 684.729 L1091.03 684.729 L1091.59 684.729 L1092.15 684.729 L1092.71 684.729 L1093.27 684.729 L1093.83 684.729 L1094.39 684.729 L1094.94 684.729 L1095.5 684.729 L1096.06 684.729 L1096.62 684.729 L1097.18 684.729 L1097.74 684.729 L1098.3 684.729 L1098.86 684.729 L1099.42 684.729 L1099.98 684.729 L1100.54 684.729 L1101.1 684.729 L1101.66 684.729 L1102.22 684.729 L1102.77 684.729 L1103.33 684.729 L1103.89 684.729 L1104.45 684.729 L1105.01 684.729 L1105.57 684.729 L1106.13 684.729 L1106.69 684.729 L1107.25 684.729 L1107.81 684.729 L1108.37 684.729 L1108.93 684.729 L1109.49 684.729 L1110.04 684.729 L1110.6 684.729 L1111.16 684.729 L1111.72 684.729 L1112.28 684.729 L1112.84 684.729 L1113.4 684.729 L1113.96 684.729 L1114.52 684.729 L1115.08 684.729 L1115.64 684.729 L1116.2 684.729 L1116.76 684.729 L1117.31 684.729 L1117.87 684.729 L1118.43 684.729 L1118.99 684.729 L1119.55 684.729 L1120.11 684.729 L1120.67 684.729 L1121.23 684.729 L1121.79 684.729 L1122.35 684.729 L1122.91 684.729 L1123.47 684.729 L1124.03 684.729 L1124.59 684.729 L1125.14 684.729 L1125.7 684.729 L1126.26 684.729 L1126.82 684.729 L1127.38 684.729 L1127.94 684.729 L1128.5 684.729 L1129.06 684.729 L1129.62 684.729 L1130.18 684.729 L1130.74 684.729 L1131.3 684.729 L1131.86 684.729 L1132.41 684.729 L1132.97 684.729 L1133.53 684.729 L1134.09 684.729 L1134.65 684.729 L1135.21 684.729 L1135.77 684.729 L1136.33 684.729 L1136.89 684.729 L1137.45 684.729 L1138.01 684.729 L1138.57 684.729 L1139.13 684.729 L1139.68 684.729 L1140.24 684.729 L1140.8 684.729 L1141.36 684.729 L1141.92 684.729 L1142.48 684.729 L1143.04 684.729 L1143.6 684.729 L1144.16 684.729 L1144.72 684.729 L1145.28 684.729 L1145.84 684.729 L1146.4 684.729 L1146.96 684.729 L1147.51 684.729 L1148.07 684.729 L1148.63 684.729 L1149.19 684.729 L1149.75 684.729 L1150.31 684.729 L1150.87 684.729 L1151.43 684.729 L1151.99 684.729 L1152.55 684.729 L1153.11 684.729 L1153.67 684.729 L1154.23 684.729 L1154.78 684.729 L1155.34 684.729 L1155.9 684.729 L1156.46 684.729 L1157.02 684.729 L1157.58 684.729 L1158.14 684.729 L1158.7 684.729 L1159.26 684.729 L1159.82 684.729 L1160.38 684.729 L1160.94 684.729 L1161.5 684.729 L1162.05 684.729 L1162.61 684.729 L1163.17 684.729 L1163.73 684.729 L1164.29 684.729 L1164.85 684.729 L1165.41 684.729 L1165.97 684.729 L1166.53 684.729 L1167.09 684.729 L1167.65 684.729 L1168.21 684.729 L1168.77 684.729 L1169.33 684.729 L1169.88 684.729 L1170.44 684.729 L1171 684.729 L1171.56 684.729 L1172.12 684.729 L1172.68 684.729 L1173.24 684.729 L1173.8 684.729 L1174.36 684.729 L1174.92 684.729 L1175.48 684.729 L1176.04 684.729 L1176.6 684.729 L1177.15 684.729 L1177.71 684.729 L1178.27 684.729 L1178.83 684.729 L1179.39 684.729 L1179.95 684.729 L1180.51 684.729 L1181.07 684.729 L1181.63 684.729 L1182.19 684.729 L1182.75 684.729 L1183.31 684.729 L1183.87 684.729 L1184.43 684.729 L1184.98 684.729 L1185.54 684.729 L1186.1 684.729 L1186.66 684.729 L1187.22 684.729 L1187.78 684.729 L1188.34 684.729 L1188.9 684.729 L1189.46 684.729 L1190.02 684.729 L1190.58 684.729 L1191.14 684.729 L1191.7 684.729 L1192.25 684.729 L1192.81 684.729 L1193.37 684.729 L1193.93 684.729 L1194.49 684.729 L1195.05 684.729 L1195.61 684.729 L1196.17 684.729 L1196.73 684.729 L1197.29 684.729 L1197.85 684.729 L1198.41 684.729 L1198.97 684.729 L1199.52 684.729 L1200.08 684.729 L1200.64 684.729 L1201.2 684.729 L1201.76 684.729 L1202.32 684.729 L1202.88 684.729 L1203.44 684.729 L1204 684.729 L1204.56 684.729 L1205.12 684.729 L1205.68 684.729 L1206.24 684.729 L1206.8 684.729 L1207.35 684.729 L1207.91 684.729 L1208.47 684.729 L1209.03 684.729 L1209.59 684.729 L1210.15 684.729 L1210.71 684.729 L1211.27 684.729 L1211.83 684.729 L1212.39 684.729 L1212.95 684.729 L1213.51 684.729 L1214.07 684.729 L1214.62 684.729 L1215.18 684.729 L1215.74 684.729 L1216.3 684.729 L1216.86 684.729 L1217.42 684.729 L1217.98 684.729 L1218.54 684.729 L1219.1 684.729 L1219.66 684.729 L1220.22 684.729 L1220.78 684.729 L1221.34 684.729 L1221.89 684.729 L1222.45 684.729 L1223.01 684.729 L1223.57 684.729 L1224.13 684.729 L1224.69 684.729 L1225.25 684.729 L1225.81 684.729 L1226.37 684.729 L1226.93 684.729 L1227.49 684.729 L1228.05 684.729 L1228.61 684.729 L1229.17 684.729 L1229.72 684.729 L1230.28 684.729 L1230.84 684.729 L1231.4 684.729 L1231.96 684.729 L1232.52 684.729 L1233.08 684.729 L1233.64 684.729 L1234.2 684.729 L1234.76 684.729 L1235.32 684.729 L1235.88 684.729 L1236.44 684.729 L1236.99 684.729 L1237.55 684.729 L1238.11 684.729 L1238.67 684.729 L1239.23 684.729 L1239.79 684.729 L1240.35 684.729 L1240.91 684.729 L1241.47 684.729 L1242.03 684.729 L1242.59 684.729 L1243.15 684.729 L1243.71 684.729 L1244.26 684.729 L1244.82 684.729 L1245.38 684.729 L1245.94 684.729 L1246.5 684.729 L1247.06 684.729 L1247.62 684.729 L1248.18 684.729 L1248.74 684.729 L1249.3 684.729 L1249.86 684.729 L1250.42 684.729 L1250.98 684.729 L1251.54 684.729 L1252.09 684.729 L1252.65 684.729 L1253.21 684.729 L1253.77 684.729 L1254.33 684.729 L1254.89 684.729 L1255.45 684.729 L1256.01 684.729 L1256.57 684.729 L1257.13 684.729 L1257.69 684.729 L1258.25 684.729 L1258.81 684.729 L1259.36 684.729 L1259.92 684.729 L1260.48 684.729 L1261.04 684.729 L1261.6 684.729 L1262.16 684.729 L1262.72 684.729 L1263.28 684.729 L1263.84 684.729 L1264.4 684.729 L1264.96 684.729 L1265.52 684.729 L1266.08 684.729 L1266.63 684.729 L1267.19 684.729 L1267.75 684.729 L1268.31 684.729 L1268.87 684.729 L1269.43 684.729 L1269.99 684.729 L1270.55 684.729 L1271.11 684.729 L1271.67 684.729 L1272.23 684.729 L1272.79 684.729 L1273.35 684.729 L1273.91 684.729 L1274.46 684.729 L1275.02 684.729 L1275.58 684.729 L1276.14 684.729 L1276.7 684.729 L1277.26 684.729 L1277.82 684.729 L1278.38 684.729 L1278.94 684.729 L1279.5 684.729 L1280.06 684.729 L1280.62 684.729 L1281.18 684.729 L1281.73 684.729 L1282.29 684.729 L1282.85 684.729 L1283.41 684.729 L1283.97 684.729 L1284.53 684.729 L1285.09 684.729 L1285.65 684.729 L1286.21 684.729 L1286.77 684.729 L1287.33 684.729 L1287.89 684.729 L1288.45 684.729 L1289 684.729 L1289.56 684.729 L1290.12 684.729 L1290.68 684.729 L1291.24 684.729 L1291.8 684.729 L1292.36 684.729 L1292.92 684.729 L1293.48 684.729 L1294.04 684.729 L1294.6 684.729 L1295.16 684.729 L1295.72 684.729 L1296.28 684.729 L1296.83 684.729 L1297.39 684.729 L1297.95 684.729 L1298.51 684.729 L1299.07 684.729 L1299.63 684.729 L1300.19 684.729 L1300.75 684.729 L1301.31 684.729 L1301.87 684.729 L1302.43 684.729 L1302.99 684.729 L1303.55 684.729 L1304.1 684.729 L1304.66 684.729 L1305.22 684.729 L1305.78 684.729 L1306.34 684.729 L1306.9 684.729 L1307.46 684.729 L1308.02 684.729 L1308.58 684.729 L1309.14 684.729 L1309.7 684.729 L1310.26 684.729 L1310.82 684.729 L1311.38 684.729 L1311.93 684.729 L1312.49 684.729 L1313.05 684.729 L1313.61 684.729 L1314.17 684.729 L1314.73 684.729 L1315.29 684.729 L1315.85 684.729 L1316.41 684.729 L1316.97 684.729 L1317.53 684.729 L1318.09 684.729 L1318.65 684.729 L1319.2 684.729 L1319.76 684.729 L1320.32 684.729 L1320.88 684.729 L1321.44 684.729 L1322 684.729 L1322.56 684.729 L1323.12 684.729 L1323.68 684.729 L1324.24 684.729 L1324.8 684.729 L1325.36 684.729 L1325.92 684.729 L1326.47 684.729 L1327.03 684.729 L1327.59 684.729 L1328.15 684.729 L1328.71 684.729 L1329.27 684.729 L1329.83 684.729 L1330.39 684.729 L1330.95 684.729 L1331.51 684.729 L1332.07 684.729 L1332.63 684.729 L1333.19 684.729 L1333.75 684.729 L1334.3 684.729 L1334.86 684.729 L1335.42 684.729 L1335.98 684.729 L1336.54 684.729 L1337.1 684.729 L1337.66 684.729 L1338.22 684.729 L1338.78 684.729 L1339.34 684.729 L1339.9 684.729 L1340.46 684.729 L1341.02 684.729 L1341.57 684.729 L1342.13 684.729 L1342.69 684.729 L1343.25 684.729 L1343.81 684.729 L1344.37 684.729 L1344.93 684.729 L1345.49 684.729 L1346.05 684.729 L1346.61 684.729 L1347.17 684.729 L1347.73 684.729 L1348.29 684.729 L1348.84 684.729 L1349.4 684.729 L1349.96 684.729 L1350.52 684.729 L1351.08 684.729 L1351.64 684.729 L1352.2 684.729 L1352.76 684.729 L1353.32 684.729 L1353.88 684.729 L1354.44 684.729 L1355 684.729 L1355.56 684.729 L1356.12 684.729 L1356.67 684.729 L1357.23 684.729 L1357.79 684.729 L1358.35 684.729 L1358.91 684.729 L1359.47 684.729 L1360.03 684.729 L1360.59 684.729 L1361.15 684.729 L1361.71 684.729 L1362.27 684.729 L1362.83 684.729 L1363.39 684.729 L1363.94 684.729 L1364.5 684.729 L1365.06 684.729 L1365.62 684.729 L1366.18 684.729 L1366.74 684.729 L1367.3 684.729 L1367.86 684.729 L1368.42 684.729 L1368.98 684.729 L1369.54 684.729 L1370.1 684.729 L1370.66 684.729 L1371.21 684.729 L1371.77 684.729 L1372.33 684.729 L1372.89 684.729 L1373.45 684.729 L1374.01 684.729 L1374.57 684.729 L1375.13 684.729 L1375.69 684.729 L1376.25 684.729 L1376.81 684.729 L1377.37 684.729 L1377.93 684.729 L1378.49 684.729 L1379.04 684.729 L1379.6 684.729 L1380.16 684.729 L1380.72 684.729 L1381.28 684.729 L1381.84 684.729 L1382.4 684.729 L1382.96 684.729 L1383.52 684.729 L1384.08 684.729 L1384.64 684.729 L1385.2 684.729 L1385.76 684.729 L1386.31 684.729 L1386.87 684.729 L1387.43 684.729 L1387.99 684.729 L1388.55 684.729 L1389.11 684.729 L1389.67 684.729 L1390.23 684.729 L1390.79 684.729 L1391.35 684.729 L1391.91 684.729 L1392.47 684.729 L1393.03 684.729 L1393.58 684.729 L1394.14 684.729 L1394.7 684.729 L1395.26 684.729 L1395.82 684.729 L1396.38 684.729 L1396.94 684.729 L1397.5 684.729 L1398.06 684.729 L1398.62 684.729 L1399.18 684.729 L1399.74 684.729 L1400.3 684.729 L1400.86 684.729 L1401.41 684.729 L1401.97 684.729 L1402.53 684.729 L1403.09 684.729 L1403.65 684.729 L1404.21 684.729 L1404.77 684.729 L1405.33 684.729 L1405.89 684.729 L1406.45 684.729 L1407.01 684.729 L1407.57 684.729 L1408.13 684.729 L1408.68 684.729 L1409.24 684.729 L1409.8 684.729 L1410.36 684.729 L1410.92 684.729 L1411.48 684.729 L1412.04 684.729 L1412.6 684.729 L1413.16 684.729 L1413.72 684.729 L1414.28 684.729 L1414.84 684.729 L1415.4 684.729 L1415.95 684.729 L1416.51 684.729 L1417.07 684.729 L1417.63 684.729 L1418.19 684.729 L1418.75 684.729 L1419.31 684.729 L1419.87 684.729 L1420.43 684.729 L1420.99 684.729 L1421.55 684.729 L1422.11 684.729 L1422.67 684.729 L1423.23 684.729 L1423.78 684.729 L1424.34 684.729 L1424.9 684.729 L1425.46 684.729 L1426.02 684.729 L1426.58 684.729 L1427.14 684.729 L1427.7 684.729 L1428.26 684.729 L1428.82 684.729 L1429.38 684.729 L1429.94 684.729 L1430.5 684.729 L1431.05 684.729 L1431.61 684.729 L1432.17 684.729 L1432.73 684.729 L1433.29 684.729 L1433.85 684.729 L1434.41 684.729 L1434.97 684.729 L1435.53 684.729 L1436.09 684.729 L1436.65 684.729 L1437.21 684.729 L1437.77 684.729 L1438.33 684.729 L1438.88 684.729 L1439.44 684.729 L1440 684.729 L1440.56 684.729 L1441.12 684.729 L1441.68 684.729 L1442.24 684.729 L1442.8 684.729 L1443.36 684.729 L1443.92 684.729 L1444.48 684.729 L1445.04 684.729 L1445.6 684.729 L1446.15 684.729 L1446.71 684.729 L1447.27 684.729 L1447.83 684.729 L1448.39 684.729 L1448.95 684.729 L1449.51 684.729 L1450.07 684.729 L1450.63 684.729 L1451.19 684.729 L1451.75 684.729 L1452.31 684.729 L1452.87 684.729 L1453.42 684.729 L1453.98 684.729 L1454.54 684.729 L1455.1 684.729 L1455.66 684.729 L1456.22 684.729 L1456.78 684.729 L1457.34 684.729 L1457.9 684.729 L1458.46 684.729 L1459.02 684.729 L1459.58 684.729 L1460.14 684.729 L1460.7 684.729 L1461.25 684.729 L1461.81 684.729 L1462.37 684.729 L1462.93 684.729 L1463.49 684.729 L1464.05 684.729 L1464.61 684.729 L1465.17 684.729 L1465.73 684.729 L1466.29 684.729 L1466.85 684.729 L1467.41 684.729 L1467.97 684.729 L1468.52 684.729 L1469.08 684.729 L1469.64 684.729 L1470.2 684.729 L1470.76 684.729 L1471.32 684.729 L1471.88 684.729 L1472.44 684.729 L1473 684.729 L1473.56 684.729 L1474.12 684.729 L1474.68 684.729 L1475.24 684.729 L1475.79 684.729 L1476.35 684.729 L1476.91 684.729 L1477.47 684.729 L1478.03 684.729 L1478.59 684.729 L1479.15 684.729 L1479.71 684.729 L1480.27 684.729 L1480.83 684.729 L1481.39 684.729 L1481.95 684.729 L1482.51 684.729 L1483.07 684.729 L1483.62 684.729 L1484.18 684.729 L1484.74 684.729 L1485.3 684.729 L1485.86 684.729 L1486.42 684.729 L1486.98 684.729 L1487.54 684.729 L1488.1 684.729 L1488.66 684.729 L1489.22 684.729 L1489.78 684.729 L1490.34 684.729 L1490.89 684.729 L1491.45 684.729 L1492.01 684.729 L1492.57 684.729 L1493.13 684.729 L1493.69 684.729 L1494.25 684.729 L1494.81 684.729 L1495.37 684.729 L1495.93 684.729 L1496.49 684.729 L1497.05 684.729 L1497.61 684.729 L1498.16 684.729 L1498.72 684.729 L1499.28 684.729 L1499.84 684.729 L1500.4 684.729 L1500.96 684.729 L1501.52 684.729 L1502.08 684.729 L1502.64 684.729 L1503.2 684.729 L1503.76 684.729 L1504.32 684.729 L1504.88 684.729 L1505.44 684.729 L1505.99 684.729 L1506.55 684.729 L1507.11 684.729 L1507.67 684.729 L1508.23 684.729 L1508.79 684.729 L1509.35 684.729 L1509.91 684.729 L1510.47 684.729 L1511.03 684.729 L1511.59 684.729 L1512.15 684.729 L1512.71 684.729 L1513.26 684.729 L1513.82 684.729 L1514.38 684.729 L1514.94 684.729 L1515.5 684.729 L1516.06 684.729 L1516.62 684.729 L1517.18 684.729 L1517.74 684.729 L1518.3 684.729 L1518.86 684.729 L1519.42 684.729 L1519.98 684.729 L1520.53 684.729 L1521.09 684.729 L1521.65 684.729 L1522.21 684.729 L1522.77 684.729 L1523.33 684.729 L1523.89 684.729 L1524.45 684.729 L1525.01 684.729 L1525.57 684.729 L1526.13 684.729 L1526.69 684.729 L1527.25 684.729 L1527.81 684.729 L1528.36 684.729 L1528.92 684.729 L1529.48 684.729 L1530.04 684.729 L1530.6 684.729 L1531.16 684.729 L1531.72 684.729 L1532.28 684.729 L1532.84 684.729 L1533.4 684.729 L1533.96 684.729 L1534.52 684.729 L1535.08 684.729 L1535.63 684.729 L1536.19 684.729 L1536.75 684.729 L1537.31 684.729 L1537.87 684.729 L1538.43 684.729 L1538.99 684.729 L1539.55 684.729 L1540.11 684.729 L1540.67 684.729 L1541.23 684.729 L1541.79 684.729 L1542.35 684.729 L1542.9 684.729 L1543.46 684.729 L1544.02 684.729 L1544.58 684.729 L1545.14 684.729 L1545.7 684.729 L1546.26 684.729 L1546.82 684.729 L1547.38 684.729 L1547.94 684.729 L1548.5 684.729 L1549.06 684.729 L1549.62 684.729 L1550.18 684.729 L1550.73 684.729 L1551.29 684.729 L1551.85 684.729 L1552.41 684.729 L1552.97 684.729 L1553.53 684.729 L1554.09 684.729 L1554.65 684.729 L1555.21 684.729 L1555.77 684.729 L1556.33 684.729 L1556.89 684.729 L1557.45 684.729 L1558 684.729 L1558.56 684.729 L1559.12 684.729 L1559.68 684.729 L1560.24 684.729 L1560.8 684.729 L1561.36 684.729 L1561.92 684.729 L1562.48 684.729 L1563.04 684.729 L1563.6 684.729 L1564.16 684.729 L1564.72 684.729 L1565.28 684.729 L1565.83 684.729 L1566.39 684.729 L1566.95 684.729 L1567.51 684.729 L1568.07 684.729 L1568.63 684.729 L1569.19 684.729 L1569.75 684.729 L1570.31 684.729 L1570.87 684.729 L1571.43 684.729 L1571.99 684.729 L1572.55 684.729 L1573.1 684.729 L1573.66 684.729 L1574.22 684.729 L1574.78 684.729 L1575.34 684.729 L1575.9 684.729 L1576.46 684.729 L1577.02 684.729 L1577.58 684.729 L1578.14 684.729 L1578.7 684.729 L1579.26 684.729 L1579.82 684.729 L1580.37 684.729 L1580.93 684.729 L1581.49 684.729 L1582.05 684.729 L1582.61 684.729 L1583.17 684.729 L1583.73 684.729 L1584.29 684.729 L1584.85 684.729 L1585.41 684.729 L1585.97 684.729 L1586.53 684.729 L1587.09 684.729 L1587.65 684.729 L1588.2 684.729 L1588.76 684.729 L1589.32 684.729 L1589.88 684.729 L1590.44 684.729 L1591 684.729 L1591.56 684.729 L1592.12 684.729 L1592.68 684.729 L1593.24 684.729 L1593.8 684.729 L1594.36 684.729 L1594.92 684.729 L1595.47 684.729 L1596.03 684.729 L1596.59 684.729 L1597.15 684.729 L1597.71 684.729 L1598.27 684.729 L1598.83 684.729 L1599.39 684.729 L1599.95 684.729 L1600.51 684.729 L1601.07 684.729 L1601.63 684.729 L1602.19 684.729 L1602.74 684.729 L1603.3 684.729 L1603.86 684.729 L1604.42 684.729 L1604.98 684.729 L1605.54 684.729 L1606.1 684.729 L1606.66 684.729 L1607.22 684.729 L1607.78 684.729 L1608.34 684.729 L1608.9 684.729 L1609.46 684.729 L1610.02 684.729 L1610.57 684.729 L1611.13 684.729 L1611.69 684.729 L1612.25 684.729 L1612.81 684.729 L1613.37 684.729 L1613.93 684.729 L1614.49 684.729 L1615.05 684.729 L1615.61 684.729 L1616.17 684.729 L1616.73 684.729 L1617.29 684.729 L1617.84 684.729 L1618.4 684.729 L1618.96 684.729 L1619.52 684.729 L1620.08 684.729 L1620.64 684.729 L1621.2 684.729 L1621.76 684.729 L1622.32 684.729 L1622.88 684.729 L1623.44 684.729 L1624 684.729 L1624.56 684.729 L1625.11 684.729 L1625.67 684.729 L1626.23 684.729 L1626.79 684.729 L1627.35 684.729 L1627.91 684.729 L1628.47 684.729 L1629.03 684.729 L1629.59 684.729 L1630.15 684.729 L1630.71 684.729 L1631.27 684.729 L1631.83 684.729 L1632.39 684.729 L1632.94 684.729 L1633.5 684.729 L1634.06 684.729 L1634.62 684.729 L1635.18 684.729 L1635.74 684.729 L1636.3 684.729 L1636.86 684.729 L1637.42 684.729 L1637.98 684.729 L1638.54 684.729 L1639.1 684.729 L1639.66 684.729 L1640.21 684.729 L1640.77 684.729 L1641.33 684.729 L1641.89 684.729 L1642.45 684.729 L1643.01 684.729 L1643.57 684.729 L1644.13 684.729 L1644.69 684.729 L1645.25 684.729 L1645.81 684.729 L1646.37 684.729 L1646.93 684.729 L1647.48 684.729 L1648.04 684.729 L1648.6 684.729 L1649.16 684.729 L1649.72 684.729 L1650.28 684.729 L1650.84 684.729 L1651.4 684.729 L1651.96 684.729 L1652.52 684.729 L1653.08 684.729 L1653.64 684.729 L1654.2 684.729 L1654.76 684.729 L1655.31 684.729 L1655.87 684.729 L1656.43 684.729 L1656.99 684.729 L1657.55 684.729 L1658.11 684.729 L1658.67 684.729 L1659.23 684.729 L1659.79 684.729 L1660.35 684.729 L1660.91 684.729 L1661.47 684.729 L1662.03 684.729 L1662.58 684.729 L1663.14 684.729 L1663.7 684.729 L1664.26 684.729 L1664.82 684.729 L1665.38 684.729 L1665.94 684.729 L1666.5 684.729 L1667.06 684.729 L1667.62 684.729 L1668.18 684.729 L1668.74 684.729 L1669.3 684.729 L1669.85 684.729 L1670.41 684.729 L1670.97 684.729 L1671.53 684.729 L1672.09 684.729 L1672.65 684.729 L1673.21 684.729 L1673.77 684.729 L1674.33 684.729 L1674.89 684.729 L1675.45 684.729 L1676.01 684.729 L1676.57 684.729 L1677.13 684.729 L1677.68 684.729 L1678.24 684.729 L1678.8 684.729 L1679.36 684.729 L1679.92 684.729 L1680.48 684.729 L1681.04 684.729 L1681.6 684.729 L1682.16 684.729 L1682.72 684.729 L1683.28 684.729 L1683.84 684.729 L1684.4 684.729 L1684.95 684.729 L1685.51 684.729 L1686.07 684.729 L1686.63 684.729 L1687.19 684.729 L1687.75 684.729 L1688.31 684.729 L1688.87 684.729 L1689.43 684.729 L1689.99 684.729 L1690.55 684.729 L1691.11 684.729 L1691.67 684.729 L1692.23 684.729 L1692.78 684.729 L1693.34 684.729 L1693.9 684.729 L1694.46 684.729 L1695.02 684.729 L1695.58 684.729 L1696.14 684.729 L1696.7 684.729 L1697.26 684.729 L1697.82 684.729 L1698.38 684.729 L1698.94 684.729 L1699.5 684.729 L1700.05 684.729 L1700.61 684.729 L1701.17 684.729 L1701.73 684.729 L1702.29 684.729 L1702.85 684.729 L1703.41 684.729 L1703.97 684.729 L1704.53 684.729 L1705.09 684.729 L1705.65 684.729 L1706.21 684.729 L1706.77 684.729 L1707.32 684.729 L1707.88 684.729 L1708.44 684.729 L1709 684.729 L1709.56 684.729 L1710.12 684.729 L1710.68 684.729 L1711.24 684.729 L1711.8 684.729 L1712.36 684.729 L1712.92 684.729 L1713.48 684.729 L1714.04 684.729 L1714.6 684.729 L1715.15 684.729 L1715.71 684.729 L1716.27 684.729 L1716.83 684.729 L1717.39 684.729 L1717.95 684.729 L1718.51 684.729 L1719.07 684.729 L1719.63 684.729 L1720.19 684.729 L1720.75 684.729 L1721.31 684.729 L1721.87 684.729 L1722.42 684.729 L1722.98 684.729 L1723.54 684.729 L1724.1 684.729 L1724.66 684.729 L1725.22 684.729 L1725.78 684.729 L1726.34 684.729 L1726.9 684.729 L1727.46 684.729 L1728.02 684.729 L1728.58 684.729 L1729.14 684.729 L1729.69 684.729 L1730.25 684.729 L1730.81 684.729 L1731.37 684.729 L1731.93 684.729 L1732.49 684.729 L1733.05 684.729 L1733.61 684.729 L1734.17 684.729 L1734.73 684.729 L1735.29 684.729 L1735.85 684.729 L1736.41 684.729 L1736.97 684.729 L1737.52 684.729 L1738.08 684.729 L1738.64 684.729 L1739.2 684.729 L1739.76 684.729 L1740.32 684.729 L1740.88 684.729 L1741.44 684.729 L1742 684.729 L1742.56 684.729 L1743.12 684.729 L1743.68 684.729 L1744.24 684.729 L1744.79 684.729 L1745.35 684.729 L1745.91 684.729 L1746.47 684.729 L1747.03 684.729 L1747.59 684.729 L1748.15 684.729 L1748.71 684.729 L1749.27 684.729 L1749.83 684.729 L1750.39 684.729 L1750.95 684.729 L1751.51 684.729 L1752.06 684.729 L1752.62 684.729 L1753.18 684.729 L1753.74 684.729 L1754.3 684.729 L1754.86 684.729 L1755.42 684.729 L1755.98 684.729 L1756.54 684.729 L1757.1 684.729 L1757.66 684.729 L1758.22 684.729 L1758.78 684.729 L1759.34 684.729 L1759.89 684.729 L1760.45 684.729 L1761.01 684.729 L1761.57 684.729 L1762.13 684.729 L1762.69 684.729 L1763.25 684.729 L1763.81 684.729 L1764.37 684.729 L1764.93 684.729 L1765.49 684.729 L1766.05 684.729 L1766.61 684.729 L1767.16 684.729 L1767.72 684.729 L1768.28 684.729 L1768.84 684.729 L1769.4 684.729 L1769.96 684.729 L1770.52 684.729 L1771.08 684.729 L1771.64 684.729 L1772.2 684.729 L1772.76 684.729 L1773.32 684.729 L1773.88 684.729 L1774.43 684.729 L1774.99 684.729 L1775.55 684.729 L1776.11 684.729 L1776.67 684.729 L1777.23 684.729 L1777.79 684.729 L1778.35 684.729 L1778.91 684.729 L1779.47 684.729 L1780.03 684.729 L1780.59 684.729 L1781.15 684.729 L1781.71 684.729 L1782.26 684.729 L1782.82 684.729 L1783.38 684.729 L1783.94 684.729 L1784.5 684.729 L1785.06 684.729 L1785.62 684.729 L1786.18 684.729 L1786.74 684.729 L1787.3 684.729 L1787.86 684.729 L1788.42 684.729 L1788.98 684.729 L1789.53 684.729 L1790.09 684.729 L1790.65 684.729 L1791.21 684.729 L1791.77 684.729 L1792.33 684.729 L1792.89 684.729 L1793.45 684.729 L1794.01 684.729 L1794.57 684.729 L1795.13 684.729 L1795.69 684.729 L1796.25 684.729 L1796.8 684.729 L1797.36 684.729 L1797.92 684.729 L1798.48 684.729 L1799.04 684.729 L1799.6 684.729 L1800.16 684.729 L1800.72 684.729 L1801.28 684.729 L1801.84 684.729 L1802.4 684.729 L1802.96 684.729 L1803.52 684.729 L1804.08 684.729 L1804.63 684.729 L1805.19 684.729 L1805.75 684.729 L1806.31 684.729 L1806.87 684.729 L1807.43 684.729 L1807.99 684.729 L1808.55 684.729 L1809.11 684.729 L1809.67 684.729 L1810.23 684.729 L1810.79 684.729 L1811.35 684.729 L1811.9 684.729 L1812.46 684.729 L1813.02 684.729 L1813.58 684.729 L1814.14 684.729 L1814.7 684.729 L1815.26 684.729 L1815.82 684.729 L1816.38 684.729 L1816.94 684.729 L1817.5 684.729 L1818.06 684.729 L1818.62 684.729 L1819.18 684.729 L1819.73 684.729 L1820.29 684.729 L1820.85 684.729 L1821.41 684.729 L1821.97 684.729 L1822.53 684.729 L1823.09 684.729 L1823.65 684.729 L1824.21 684.729 L1824.77 684.729 L1825.33 684.729 L1825.89 684.729 L1826.45 684.729 L1827 684.729 L1827.56 684.729 L1828.12 684.729 L1828.68 684.729 L1829.24 684.729 L1829.8 684.729 L1830.36 684.729 L1830.92 684.729 L1831.48 684.729 L1832.04 684.729 L1832.6 684.729 L1833.16 684.729 L1833.72 684.729 L1834.27 684.729 L1834.83 684.729 L1835.39 684.729 L1835.95 684.729 L1836.51 684.729 L1837.07 684.729 L1837.63 684.729 L1838.19 684.729 L1838.19 683.102 L1837.63 683.102 L1837.07 683.102 L1836.51 683.102 L1835.95 683.102 L1835.39 683.102 L1834.83 683.102 L1834.27 683.102 L1833.72 683.102 L1833.16 683.102 L1832.6 683.102 L1832.04 683.102 L1831.48 683.102 L1830.92 683.102 L1830.36 683.102 L1829.8 683.102 L1829.24 683.102 L1828.68 683.102 L1828.12 683.102 L1827.56 683.102 L1827 683.102 L1826.45 683.102 L1825.89 683.102 L1825.33 683.102 L1824.77 683.102 L1824.21 683.102 L1823.65 683.102 L1823.09 683.102 L1822.53 683.102 L1821.97 683.102 L1821.41 683.102 L1820.85 683.102 L1820.29 683.102 L1819.73 683.102 L1819.18 683.102 L1818.62 683.102 L1818.06 683.102 L1817.5 683.102 L1816.94 683.102 L1816.38 683.102 L1815.82 683.102 L1815.26 683.102 L1814.7 683.102 L1814.14 683.102 L1813.58 683.102 L1813.02 683.102 L1812.46 683.102 L1811.9 683.102 L1811.35 683.102 L1810.79 683.102 L1810.23 683.102 L1809.67 683.102 L1809.11 683.102 L1808.55 683.102 L1807.99 683.102 L1807.43 683.102 L1806.87 683.102 L1806.31 683.102 L1805.75 683.102 L1805.19 683.102 L1804.63 683.102 L1804.08 683.102 L1803.52 683.102 L1802.96 683.102 L1802.4 683.102 L1801.84 683.102 L1801.28 683.102 L1800.72 683.102 L1800.16 683.102 L1799.6 683.102 L1799.04 683.102 L1798.48 683.102 L1797.92 683.102 L1797.36 683.102 L1796.8 683.102 L1796.25 683.102 L1795.69 683.102 L1795.13 683.102 L1794.57 683.102 L1794.01 683.102 L1793.45 683.102 L1792.89 683.102 L1792.33 683.102 L1791.77 683.102 L1791.21 683.102 L1790.65 683.102 L1790.09 683.102 L1789.53 683.102 L1788.98 683.102 L1788.42 683.102 L1787.86 683.102 L1787.3 683.102 L1786.74 683.102 L1786.18 683.102 L1785.62 683.102 L1785.06 683.102 L1784.5 683.102 L1783.94 683.102 L1783.38 683.102 L1782.82 683.102 L1782.26 683.102 L1781.71 683.102 L1781.15 683.102 L1780.59 683.102 L1780.03 683.102 L1779.47 683.102 L1778.91 683.102 L1778.35 683.102 L1777.79 683.102 L1777.23 683.102 L1776.67 683.102 L1776.11 683.102 L1775.55 683.102 L1774.99 683.102 L1774.43 683.102 L1773.88 683.102 L1773.32 683.102 L1772.76 683.102 L1772.2 683.102 L1771.64 683.102 L1771.08 683.102 L1770.52 683.102 L1769.96 683.102 L1769.4 683.102 L1768.84 683.102 L1768.28 683.102 L1767.72 683.102 L1767.16 683.102 L1766.61 683.102 L1766.05 683.102 L1765.49 683.102 L1764.93 683.102 L1764.37 683.102 L1763.81 683.102 L1763.25 683.102 L1762.69 683.102 L1762.13 683.102 L1761.57 683.102 L1761.01 683.102 L1760.45 683.102 L1759.89 683.102 L1759.34 683.102 L1758.78 683.102 L1758.22 683.102 L1757.66 683.102 L1757.1 683.102 L1756.54 683.102 L1755.98 683.102 L1755.42 683.102 L1754.86 683.102 L1754.3 683.102 L1753.74 683.102 L1753.18 683.102 L1752.62 683.102 L1752.06 683.102 L1751.51 683.102 L1750.95 683.102 L1750.39 683.102 L1749.83 683.102 L1749.27 683.102 L1748.71 683.102 L1748.15 683.102 L1747.59 683.102 L1747.03 683.102 L1746.47 683.102 L1745.91 683.102 L1745.35 683.102 L1744.79 683.102 L1744.24 683.102 L1743.68 683.102 L1743.12 683.102 L1742.56 683.102 L1742 683.102 L1741.44 683.102 L1740.88 683.102 L1740.32 683.102 L1739.76 683.102 L1739.2 683.102 L1738.64 683.102 L1738.08 683.102 L1737.52 683.102 L1736.97 683.102 L1736.41 683.102 L1735.85 683.102 L1735.29 683.102 L1734.73 683.102 L1734.17 683.102 L1733.61 683.102 L1733.05 683.102 L1732.49 683.102 L1731.93 683.102 L1731.37 683.102 L1730.81 683.102 L1730.25 683.102 L1729.69 683.102 L1729.14 683.102 L1728.58 683.102 L1728.02 683.102 L1727.46 683.102 L1726.9 683.102 L1726.34 683.102 L1725.78 683.102 L1725.22 683.102 L1724.66 683.102 L1724.1 683.102 L1723.54 683.102 L1722.98 683.102 L1722.42 683.102 L1721.87 683.102 L1721.31 683.102 L1720.75 683.102 L1720.19 683.102 L1719.63 683.102 L1719.07 683.102 L1718.51 683.102 L1717.95 683.102 L1717.39 683.102 L1716.83 683.102 L1716.27 683.102 L1715.71 683.102 L1715.15 683.102 L1714.6 683.102 L1714.04 683.102 L1713.48 683.102 L1712.92 683.102 L1712.36 683.102 L1711.8 683.102 L1711.24 683.102 L1710.68 683.102 L1710.12 683.102 L1709.56 683.102 L1709 683.102 L1708.44 683.102 L1707.88 683.102 L1707.32 683.102 L1706.77 683.102 L1706.21 683.102 L1705.65 683.102 L1705.09 683.102 L1704.53 683.102 L1703.97 683.102 L1703.41 683.102 L1702.85 683.102 L1702.29 683.102 L1701.73 683.102 L1701.17 683.102 L1700.61 683.102 L1700.05 683.102 L1699.5 683.102 L1698.94 683.102 L1698.38 683.102 L1697.82 683.102 L1697.26 683.102 L1696.7 683.102 L1696.14 683.102 L1695.58 683.102 L1695.02 683.102 L1694.46 683.102 L1693.9 683.102 L1693.34 683.102 L1692.78 683.102 L1692.23 683.102 L1691.67 683.102 L1691.11 683.102 L1690.55 683.102 L1689.99 683.102 L1689.43 683.102 L1688.87 683.102 L1688.31 683.102 L1687.75 683.102 L1687.19 683.102 L1686.63 683.102 L1686.07 683.102 L1685.51 683.102 L1684.95 683.102 L1684.4 683.102 L1683.84 683.102 L1683.28 683.102 L1682.72 683.102 L1682.16 683.102 L1681.6 683.102 L1681.04 683.102 L1680.48 683.102 L1679.92 683.102 L1679.36 683.102 L1678.8 683.102 L1678.24 683.102 L1677.68 683.102 L1677.13 683.102 L1676.57 683.102 L1676.01 683.102 L1675.45 683.102 L1674.89 683.102 L1674.33 683.102 L1673.77 683.102 L1673.21 683.102 L1672.65 683.102 L1672.09 683.102 L1671.53 683.102 L1670.97 683.102 L1670.41 683.102 L1669.85 683.102 L1669.3 683.102 L1668.74 683.102 L1668.18 683.102 L1667.62 683.102 L1667.06 683.102 L1666.5 683.102 L1665.94 683.102 L1665.38 683.102 L1664.82 683.102 L1664.26 683.102 L1663.7 683.102 L1663.14 683.102 L1662.58 683.102 L1662.03 683.102 L1661.47 683.102 L1660.91 683.102 L1660.35 683.102 L1659.79 683.102 L1659.23 683.102 L1658.67 683.102 L1658.11 683.102 L1657.55 683.102 L1656.99 683.102 L1656.43 683.102 L1655.87 683.102 L1655.31 683.102 L1654.76 683.102 L1654.2 683.102 L1653.64 683.102 L1653.08 683.102 L1652.52 683.102 L1651.96 683.102 L1651.4 683.102 L1650.84 683.102 L1650.28 683.102 L1649.72 683.102 L1649.16 683.102 L1648.6 683.102 L1648.04 683.102 L1647.48 683.102 L1646.93 683.102 L1646.37 683.102 L1645.81 683.102 L1645.25 683.102 L1644.69 683.102 L1644.13 683.102 L1643.57 683.102 L1643.01 683.102 L1642.45 683.102 L1641.89 683.102 L1641.33 683.102 L1640.77 683.102 L1640.21 683.102 L1639.66 683.102 L1639.1 683.102 L1638.54 683.102 L1637.98 683.102 L1637.42 683.102 L1636.86 683.102 L1636.3 683.102 L1635.74 683.102 L1635.18 683.102 L1634.62 683.102 L1634.06 683.102 L1633.5 683.102 L1632.94 683.102 L1632.39 683.102 L1631.83 683.102 L1631.27 683.102 L1630.71 683.102 L1630.15 683.102 L1629.59 683.102 L1629.03 683.102 L1628.47 683.102 L1627.91 683.102 L1627.35 683.102 L1626.79 683.102 L1626.23 683.102 L1625.67 683.102 L1625.11 683.102 L1624.56 683.102 L1624 683.102 L1623.44 683.102 L1622.88 683.102 L1622.32 683.102 L1621.76 683.102 L1621.2 683.102 L1620.64 683.102 L1620.08 683.102 L1619.52 683.102 L1618.96 683.102 L1618.4 683.102 L1617.84 683.102 L1617.29 683.102 L1616.73 683.102 L1616.17 683.102 L1615.61 683.102 L1615.05 683.102 L1614.49 683.102 L1613.93 683.102 L1613.37 683.102 L1612.81 683.102 L1612.25 683.102 L1611.69 683.102 L1611.13 683.102 L1610.57 683.102 L1610.02 683.102 L1609.46 683.102 L1608.9 683.102 L1608.34 683.102 L1607.78 683.102 L1607.22 683.102 L1606.66 683.102 L1606.1 683.102 L1605.54 683.102 L1604.98 683.102 L1604.42 683.102 L1603.86 683.102 L1603.3 683.102 L1602.74 683.102 L1602.19 683.102 L1601.63 683.102 L1601.07 683.102 L1600.51 683.102 L1599.95 683.102 L1599.39 683.102 L1598.83 683.102 L1598.27 683.102 L1597.71 683.102 L1597.15 683.102 L1596.59 683.102 L1596.03 683.102 L1595.47 683.102 L1594.92 683.102 L1594.36 683.102 L1593.8 683.102 L1593.24 683.102 L1592.68 683.102 L1592.12 683.102 L1591.56 683.102 L1591 683.102 L1590.44 683.102 L1589.88 683.102 L1589.32 683.102 L1588.76 683.102 L1588.2 683.102 L1587.65 683.102 L1587.09 683.102 L1586.53 683.102 L1585.97 683.102 L1585.41 683.102 L1584.85 683.102 L1584.29 683.102 L1583.73 683.102 L1583.17 683.102 L1582.61 683.102 L1582.05 683.102 L1581.49 683.102 L1580.93 683.102 L1580.37 683.102 L1579.82 683.102 L1579.26 683.102 L1578.7 683.102 L1578.14 683.102 L1577.58 683.102 L1577.02 683.102 L1576.46 683.102 L1575.9 683.102 L1575.34 683.102 L1574.78 683.102 L1574.22 683.102 L1573.66 683.102 L1573.1 683.102 L1572.55 683.102 L1571.99 683.102 L1571.43 683.102 L1570.87 683.102 L1570.31 683.102 L1569.75 683.102 L1569.19 683.102 L1568.63 683.102 L1568.07 683.102 L1567.51 683.102 L1566.95 683.102 L1566.39 683.102 L1565.83 683.102 L1565.28 683.102 L1564.72 683.102 L1564.16 683.102 L1563.6 683.102 L1563.04 683.102 L1562.48 683.102 L1561.92 683.102 L1561.36 683.102 L1560.8 683.102 L1560.24 683.102 L1559.68 683.102 L1559.12 683.102 L1558.56 683.102 L1558 683.102 L1557.45 683.102 L1556.89 683.102 L1556.33 683.102 L1555.77 683.102 L1555.21 683.102 L1554.65 683.102 L1554.09 683.102 L1553.53 683.102 L1552.97 683.102 L1552.41 683.102 L1551.85 683.102 L1551.29 683.102 L1550.73 683.102 L1550.18 683.102 L1549.62 683.102 L1549.06 683.102 L1548.5 683.102 L1547.94 683.102 L1547.38 683.102 L1546.82 683.102 L1546.26 683.102 L1545.7 683.102 L1545.14 683.102 L1544.58 683.102 L1544.02 683.102 L1543.46 683.102 L1542.9 683.102 L1542.35 683.102 L1541.79 683.102 L1541.23 683.102 L1540.67 683.102 L1540.11 683.102 L1539.55 683.102 L1538.99 683.102 L1538.43 683.102 L1537.87 683.102 L1537.31 683.102 L1536.75 683.102 L1536.19 683.102 L1535.63 683.102 L1535.08 683.102 L1534.52 683.102 L1533.96 683.102 L1533.4 683.102 L1532.84 683.102 L1532.28 683.102 L1531.72 683.102 L1531.16 683.102 L1530.6 683.102 L1530.04 683.102 L1529.48 683.102 L1528.92 683.102 L1528.36 683.102 L1527.81 683.102 L1527.25 683.102 L1526.69 683.102 L1526.13 683.102 L1525.57 683.102 L1525.01 683.102 L1524.45 683.102 L1523.89 683.102 L1523.33 683.102 L1522.77 683.102 L1522.21 683.102 L1521.65 683.102 L1521.09 683.102 L1520.53 683.102 L1519.98 683.102 L1519.42 683.102 L1518.86 683.102 L1518.3 683.102 L1517.74 683.102 L1517.18 683.102 L1516.62 683.102 L1516.06 683.102 L1515.5 683.102 L1514.94 683.102 L1514.38 683.102 L1513.82 683.102 L1513.26 683.102 L1512.71 683.102 L1512.15 683.102 L1511.59 683.102 L1511.03 683.102 L1510.47 683.102 L1509.91 683.102 L1509.35 683.102 L1508.79 683.102 L1508.23 683.102 L1507.67 683.102 L1507.11 683.102 L1506.55 683.102 L1505.99 683.102 L1505.44 683.102 L1504.88 683.102 L1504.32 683.102 L1503.76 683.102 L1503.2 683.102 L1502.64 683.102 L1502.08 683.102 L1501.52 683.102 L1500.96 683.102 L1500.4 683.102 L1499.84 683.102 L1499.28 683.102 L1498.72 683.102 L1498.16 683.102 L1497.61 683.102 L1497.05 683.102 L1496.49 683.102 L1495.93 683.102 L1495.37 683.102 L1494.81 683.102 L1494.25 683.102 L1493.69 683.102 L1493.13 683.102 L1492.57 683.102 L1492.01 683.102 L1491.45 683.102 L1490.89 683.102 L1490.34 683.102 L1489.78 683.102 L1489.22 683.102 L1488.66 683.102 L1488.1 683.102 L1487.54 683.102 L1486.98 683.102 L1486.42 683.102 L1485.86 683.102 L1485.3 683.102 L1484.74 683.102 L1484.18 683.102 L1483.62 683.102 L1483.07 683.102 L1482.51 683.102 L1481.95 683.102 L1481.39 683.102 L1480.83 683.102 L1480.27 683.102 L1479.71 683.102 L1479.15 683.102 L1478.59 683.102 L1478.03 683.102 L1477.47 683.102 L1476.91 683.102 L1476.35 683.102 L1475.79 683.102 L1475.24 683.102 L1474.68 683.102 L1474.12 683.102 L1473.56 683.102 L1473 683.102 L1472.44 683.102 L1471.88 683.102 L1471.32 683.102 L1470.76 683.102 L1470.2 683.102 L1469.64 683.102 L1469.08 683.102 L1468.52 683.102 L1467.97 683.102 L1467.41 683.102 L1466.85 683.102 L1466.29 683.102 L1465.73 683.102 L1465.17 683.102 L1464.61 683.102 L1464.05 683.102 L1463.49 683.102 L1462.93 683.102 L1462.37 683.102 L1461.81 683.102 L1461.25 683.102 L1460.7 683.102 L1460.14 683.102 L1459.58 683.102 L1459.02 683.102 L1458.46 683.102 L1457.9 683.102 L1457.34 683.102 L1456.78 683.102 L1456.22 683.102 L1455.66 683.102 L1455.1 683.102 L1454.54 683.102 L1453.98 683.102 L1453.42 683.102 L1452.87 683.102 L1452.31 683.102 L1451.75 683.102 L1451.19 683.102 L1450.63 683.102 L1450.07 683.102 L1449.51 683.102 L1448.95 683.102 L1448.39 683.102 L1447.83 683.102 L1447.27 683.102 L1446.71 683.102 L1446.15 683.102 L1445.6 683.102 L1445.04 683.102 L1444.48 683.102 L1443.92 683.102 L1443.36 683.102 L1442.8 683.102 L1442.24 683.102 L1441.68 683.102 L1441.12 683.102 L1440.56 683.102 L1440 683.102 L1439.44 683.102 L1438.88 683.102 L1438.33 683.102 L1437.77 683.102 L1437.21 683.102 L1436.65 683.102 L1436.09 683.102 L1435.53 683.102 L1434.97 683.102 L1434.41 683.102 L1433.85 683.102 L1433.29 683.102 L1432.73 683.102 L1432.17 683.102 L1431.61 683.102 L1431.05 683.102 L1430.5 683.102 L1429.94 683.102 L1429.38 683.102 L1428.82 683.102 L1428.26 683.102 L1427.7 683.102 L1427.14 683.102 L1426.58 683.102 L1426.02 683.102 L1425.46 683.102 L1424.9 683.102 L1424.34 683.102 L1423.78 683.102 L1423.23 683.102 L1422.67 683.102 L1422.11 683.102 L1421.55 683.102 L1420.99 683.102 L1420.43 683.102 L1419.87 683.102 L1419.31 683.102 L1418.75 683.102 L1418.19 683.102 L1417.63 683.102 L1417.07 683.102 L1416.51 683.102 L1415.95 683.102 L1415.4 683.102 L1414.84 683.102 L1414.28 683.102 L1413.72 683.102 L1413.16 683.102 L1412.6 683.102 L1412.04 683.102 L1411.48 683.102 L1410.92 683.102 L1410.36 683.102 L1409.8 683.102 L1409.24 683.102 L1408.68 683.102 L1408.13 683.102 L1407.57 683.102 L1407.01 683.102 L1406.45 683.102 L1405.89 683.102 L1405.33 683.102 L1404.77 683.102 L1404.21 683.102 L1403.65 683.102 L1403.09 683.102 L1402.53 683.102 L1401.97 683.102 L1401.41 683.102 L1400.86 683.102 L1400.3 683.102 L1399.74 683.102 L1399.18 683.102 L1398.62 683.102 L1398.06 683.102 L1397.5 683.102 L1396.94 683.102 L1396.38 683.102 L1395.82 683.102 L1395.26 683.102 L1394.7 683.102 L1394.14 683.102 L1393.58 683.102 L1393.03 683.102 L1392.47 683.102 L1391.91 683.102 L1391.35 683.102 L1390.79 683.102 L1390.23 683.102 L1389.67 683.102 L1389.11 683.102 L1388.55 683.102 L1387.99 683.102 L1387.43 683.102 L1386.87 683.102 L1386.31 683.102 L1385.76 683.102 L1385.2 683.102 L1384.64 683.102 L1384.08 683.102 L1383.52 683.102 L1382.96 683.102 L1382.4 683.102 L1381.84 683.102 L1381.28 683.102 L1380.72 683.102 L1380.16 683.102 L1379.6 683.102 L1379.04 683.102 L1378.49 683.102 L1377.93 683.102 L1377.37 683.102 L1376.81 683.102 L1376.25 683.102 L1375.69 683.102 L1375.13 683.102 L1374.57 683.102 L1374.01 683.102 L1373.45 683.102 L1372.89 683.102 L1372.33 683.102 L1371.77 683.102 L1371.21 683.102 L1370.66 683.102 L1370.1 683.102 L1369.54 683.102 L1368.98 683.102 L1368.42 683.102 L1367.86 683.102 L1367.3 683.102 L1366.74 683.102 L1366.18 683.102 L1365.62 683.102 L1365.06 683.102 L1364.5 683.102 L1363.94 683.102 L1363.39 683.102 L1362.83 683.102 L1362.27 683.102 L1361.71 683.102 L1361.15 683.102 L1360.59 683.102 L1360.03 683.102 L1359.47 683.102 L1358.91 683.102 L1358.35 683.102 L1357.79 683.102 L1357.23 683.102 L1356.67 683.102 L1356.12 683.102 L1355.56 683.102 L1355 683.102 L1354.44 683.102 L1353.88 683.102 L1353.32 683.102 L1352.76 683.102 L1352.2 683.102 L1351.64 683.102 L1351.08 683.102 L1350.52 683.102 L1349.96 683.102 L1349.4 683.102 L1348.84 683.102 L1348.29 683.102 L1347.73 683.102 L1347.17 683.102 L1346.61 683.102 L1346.05 683.102 L1345.49 683.102 L1344.93 683.102 L1344.37 683.102 L1343.81 683.102 L1343.25 683.102 L1342.69 683.102 L1342.13 683.102 L1341.57 683.102 L1341.02 683.102 L1340.46 683.102 L1339.9 683.102 L1339.34 683.102 L1338.78 683.102 L1338.22 683.102 L1337.66 683.102 L1337.1 683.102 L1336.54 683.102 L1335.98 683.102 L1335.42 683.102 L1334.86 683.102 L1334.3 683.102 L1333.75 683.102 L1333.19 683.102 L1332.63 683.102 L1332.07 683.102 L1331.51 683.102 L1330.95 683.102 L1330.39 683.102 L1329.83 683.102 L1329.27 683.102 L1328.71 683.102 L1328.15 683.102 L1327.59 683.102 L1327.03 683.102 L1326.47 683.102 L1325.92 683.102 L1325.36 683.102 L1324.8 683.102 L1324.24 683.102 L1323.68 683.102 L1323.12 683.102 L1322.56 683.102 L1322 683.102 L1321.44 683.102 L1320.88 683.102 L1320.32 683.102 L1319.76 683.102 L1319.2 683.102 L1318.65 683.102 L1318.09 683.102 L1317.53 683.102 L1316.97 683.102 L1316.41 683.102 L1315.85 683.102 L1315.29 683.102 L1314.73 683.102 L1314.17 683.102 L1313.61 683.102 L1313.05 683.102 L1312.49 683.102 L1311.93 683.102 L1311.38 683.102 L1310.82 683.102 L1310.26 683.102 L1309.7 683.102 L1309.14 683.102 L1308.58 683.102 L1308.02 683.102 L1307.46 683.102 L1306.9 683.102 L1306.34 683.102 L1305.78 683.102 L1305.22 683.102 L1304.66 683.102 L1304.1 683.102 L1303.55 683.102 L1302.99 683.102 L1302.43 683.102 L1301.87 683.102 L1301.31 683.102 L1300.75 683.102 L1300.19 683.102 L1299.63 683.102 L1299.07 683.102 L1298.51 683.102 L1297.95 683.102 L1297.39 683.102 L1296.83 683.102 L1296.28 683.102 L1295.72 683.102 L1295.16 683.102 L1294.6 683.102 L1294.04 683.102 L1293.48 683.102 L1292.92 683.102 L1292.36 683.102 L1291.8 683.102 L1291.24 683.102 L1290.68 683.102 L1290.12 683.102 L1289.56 683.102 L1289 683.102 L1288.45 683.102 L1287.89 683.102 L1287.33 683.102 L1286.77 683.102 L1286.21 683.102 L1285.65 683.102 L1285.09 683.102 L1284.53 683.102 L1283.97 683.102 L1283.41 683.102 L1282.85 683.102 L1282.29 683.102 L1281.73 683.102 L1281.18 683.102 L1280.62 683.102 L1280.06 683.102 L1279.5 683.102 L1278.94 683.102 L1278.38 683.102 L1277.82 683.102 L1277.26 683.102 L1276.7 683.102 L1276.14 683.102 L1275.58 683.102 L1275.02 683.102 L1274.46 683.102 L1273.91 683.102 L1273.35 683.102 L1272.79 683.102 L1272.23 683.102 L1271.67 683.102 L1271.11 683.102 L1270.55 683.102 L1269.99 683.102 L1269.43 683.102 L1268.87 683.102 L1268.31 683.102 L1267.75 683.102 L1267.19 683.102 L1266.63 683.102 L1266.08 683.102 L1265.52 683.102 L1264.96 683.102 L1264.4 683.102 L1263.84 683.102 L1263.28 683.102 L1262.72 683.102 L1262.16 683.102 L1261.6 683.102 L1261.04 683.102 L1260.48 683.102 L1259.92 683.102 L1259.36 683.102 L1258.81 683.102 L1258.25 683.102 L1257.69 683.102 L1257.13 683.102 L1256.57 683.102 L1256.01 683.102 L1255.45 683.102 L1254.89 683.102 L1254.33 683.102 L1253.77 683.102 L1253.21 683.102 L1252.65 683.102 L1252.09 683.102 L1251.54 683.102 L1250.98 683.102 L1250.42 683.102 L1249.86 683.102 L1249.3 683.102 L1248.74 683.102 L1248.18 683.102 L1247.62 683.102 L1247.06 683.102 L1246.5 683.102 L1245.94 683.102 L1245.38 683.102 L1244.82 683.102 L1244.26 683.102 L1243.71 683.102 L1243.15 683.102 L1242.59 683.102 L1242.03 683.102 L1241.47 683.102 L1240.91 683.102 L1240.35 683.102 L1239.79 683.102 L1239.23 683.102 L1238.67 683.102 L1238.11 683.102 L1237.55 683.102 L1236.99 683.102 L1236.44 683.102 L1235.88 683.102 L1235.32 683.102 L1234.76 683.102 L1234.2 683.102 L1233.64 683.102 L1233.08 683.102 L1232.52 683.102 L1231.96 683.102 L1231.4 683.102 L1230.84 683.102 L1230.28 683.102 L1229.72 683.102 L1229.17 683.102 L1228.61 683.102 L1228.05 683.102 L1227.49 683.102 L1226.93 683.102 L1226.37 683.102 L1225.81 683.102 L1225.25 683.102 L1224.69 683.102 L1224.13 683.102 L1223.57 683.102 L1223.01 683.102 L1222.45 683.102 L1221.89 683.102 L1221.34 683.102 L1220.78 683.102 L1220.22 683.102 L1219.66 683.102 L1219.1 683.102 L1218.54 683.102 L1217.98 683.102 L1217.42 683.102 L1216.86 683.102 L1216.3 683.102 L1215.74 683.102 L1215.18 683.102 L1214.62 683.102 L1214.07 683.102 L1213.51 683.102 L1212.95 683.102 L1212.39 683.102 L1211.83 683.102 L1211.27 683.102 L1210.71 683.102 L1210.15 683.102 L1209.59 683.102 L1209.03 683.102 L1208.47 683.102 L1207.91 683.102 L1207.35 683.102 L1206.8 683.102 L1206.24 683.102 L1205.68 683.102 L1205.12 683.102 L1204.56 683.102 L1204 683.102 L1203.44 683.102 L1202.88 683.102 L1202.32 683.102 L1201.76 683.102 L1201.2 683.102 L1200.64 683.102 L1200.08 683.102 L1199.52 683.102 L1198.97 683.102 L1198.41 683.102 L1197.85 683.102 L1197.29 683.102 L1196.73 683.102 L1196.17 683.102 L1195.61 683.102 L1195.05 683.102 L1194.49 683.102 L1193.93 683.102 L1193.37 683.102 L1192.81 683.102 L1192.25 683.102 L1191.7 683.102 L1191.14 683.102 L1190.58 683.102 L1190.02 683.102 L1189.46 683.102 L1188.9 683.102 L1188.34 683.102 L1187.78 683.102 L1187.22 683.102 L1186.66 683.102 L1186.1 683.102 L1185.54 683.102 L1184.98 683.102 L1184.43 683.102 L1183.87 683.102 L1183.31 683.102 L1182.75 683.102 L1182.19 683.102 L1181.63 683.102 L1181.07 683.102 L1180.51 683.102 L1179.95 683.102 L1179.39 683.102 L1178.83 683.102 L1178.27 683.102 L1177.71 683.102 L1177.15 683.102 L1176.6 683.102 L1176.04 683.102 L1175.48 683.102 L1174.92 683.102 L1174.36 683.102 L1173.8 683.102 L1173.24 683.102 L1172.68 683.102 L1172.12 683.102 L1171.56 683.102 L1171 683.102 L1170.44 683.102 L1169.88 683.102 L1169.33 683.102 L1168.77 683.102 L1168.21 683.102 L1167.65 683.102 L1167.09 683.102 L1166.53 683.102 L1165.97 683.102 L1165.41 683.102 L1164.85 683.102 L1164.29 683.102 L1163.73 683.102 L1163.17 683.102 L1162.61 683.102 L1162.05 683.102 L1161.5 683.102 L1160.94 683.102 L1160.38 683.102 L1159.82 683.102 L1159.26 683.102 L1158.7 683.102 L1158.14 683.102 L1157.58 683.102 L1157.02 683.102 L1156.46 683.102 L1155.9 683.102 L1155.34 683.102 L1154.78 683.102 L1154.23 683.102 L1153.67 683.102 L1153.11 683.102 L1152.55 683.102 L1151.99 683.102 L1151.43 683.102 L1150.87 683.102 L1150.31 683.102 L1149.75 683.102 L1149.19 683.102 L1148.63 683.102 L1148.07 683.102 L1147.51 683.102 L1146.96 683.102 L1146.4 683.102 L1145.84 683.102 L1145.28 683.102 L1144.72 683.102 L1144.16 683.102 L1143.6 683.102 L1143.04 683.102 L1142.48 683.102 L1141.92 683.102 L1141.36 683.102 L1140.8 683.102 L1140.24 683.102 L1139.68 683.102 L1139.13 683.102 L1138.57 683.102 L1138.01 683.102 L1137.45 683.102 L1136.89 683.102 L1136.33 683.102 L1135.77 683.102 L1135.21 683.102 L1134.65 683.102 L1134.09 683.102 L1133.53 683.102 L1132.97 683.102 L1132.41 683.102 L1131.86 683.102 L1131.3 683.102 L1130.74 683.102 L1130.18 683.102 L1129.62 683.102 L1129.06 683.102 L1128.5 683.102 L1127.94 683.102 L1127.38 683.102 L1126.82 683.102 L1126.26 683.102 L1125.7 683.102 L1125.14 683.102 L1124.59 683.102 L1124.03 683.102 L1123.47 683.102 L1122.91 683.102 L1122.35 683.102 L1121.79 683.102 L1121.23 683.102 L1120.67 683.102 L1120.11 683.102 L1119.55 683.102 L1118.99 683.102 L1118.43 683.102 L1117.87 683.102 L1117.31 683.102 L1116.76 683.102 L1116.2 683.102 L1115.64 683.102 L1115.08 683.102 L1114.52 683.102 L1113.96 683.102 L1113.4 683.102 L1112.84 683.102 L1112.28 683.102 L1111.72 683.102 L1111.16 683.102 L1110.6 683.102 L1110.04 683.102 L1109.49 683.102 L1108.93 683.102 L1108.37 683.102 L1107.81 683.102 L1107.25 683.102 L1106.69 683.102 L1106.13 683.102 L1105.57 683.102 L1105.01 683.102 L1104.45 683.102 L1103.89 683.102 L1103.33 683.102 L1102.77 683.102 L1102.22 683.102 L1101.66 683.102 L1101.1 683.102 L1100.54 683.102 L1099.98 683.102 L1099.42 683.102 L1098.86 683.102 L1098.3 683.102 L1097.74 683.102 L1097.18 683.102 L1096.62 683.102 L1096.06 683.102 L1095.5 683.102 L1094.94 683.102 L1094.39 683.102 L1093.83 683.102 L1093.27 683.102 L1092.71 683.102 L1092.15 683.102 L1091.59 683.102 L1091.03 683.102 L1090.47 683.102 L1089.91 683.102 L1089.35 683.102 L1088.79 683.102 L1088.23 683.102 L1087.67 683.102 L1087.12 683.102 L1086.56 683.102 L1086 683.102 L1085.44 683.102 L1084.88 683.102 L1084.32 683.102 L1083.76 683.102 L1083.2 683.102 L1082.64 683.102 L1082.08 683.102 L1081.52 683.102 L1080.96 683.102 L1080.4 683.102 L1079.85 683.102 L1079.29 683.102 L1078.73 683.102 L1078.17 683.102 L1077.61 683.102 L1077.05 683.102 L1076.49 683.102 L1075.93 683.102 L1075.37 683.102 L1074.81 683.102 L1074.25 683.102 L1073.69 683.102 L1073.13 683.102 L1072.57 683.102 L1072.02 683.102 L1071.46 683.102 L1070.9 683.102 L1070.34 683.102 L1069.78 683.102 L1069.22 683.102 L1068.66 683.102 L1068.1 683.102 L1067.54 683.102 L1066.98 683.102 L1066.42 683.102 L1065.86 683.102 L1065.3 683.102 L1064.75 683.102 L1064.19 683.102 L1063.63 683.102 L1063.07 683.102 L1062.51 683.102 L1061.95 683.102 L1061.39 683.102 L1060.83 683.102 L1060.27 683.102 L1059.71 683.102 L1059.15 683.102 L1058.59 683.102 L1058.03 683.102 L1057.48 683.102 L1056.92 683.102 L1056.36 683.102 L1055.8 683.102 L1055.24 683.102 L1054.68 683.102 L1054.12 683.102 L1053.56 683.102 L1053 683.102 L1052.44 683.102 L1051.88 683.102 L1051.32 683.102 L1050.76 683.102 L1050.2 683.102 L1049.65 683.102 L1049.09 683.102 L1048.53 683.102 L1047.97 683.102 L1047.41 683.102 L1046.85 683.102 L1046.29 683.102 L1045.73 683.102 L1045.17 683.102 L1044.61 683.102 L1044.05 683.102 L1043.49 683.102 L1042.93 683.102 L1042.38 683.102 L1041.82 683.102 L1041.26 683.102 L1040.7 683.102 L1040.14 683.102 L1039.58 683.102 L1039.02 683.102 L1038.46 683.102 L1037.9 683.102 L1037.34 683.102 L1036.78 683.102 L1036.22 683.102 L1035.66 683.102 L1035.1 683.102 L1034.55 683.102 L1033.99 683.102 L1033.43 683.102 L1032.87 683.102 L1032.31 683.102 L1031.75 683.102 L1031.19 683.102 L1030.63 683.102 L1030.07 683.102 L1029.51 683.102 L1028.95 683.102 L1028.39 683.102 L1027.83 683.102 L1027.28 683.102 L1026.72 683.102 L1026.16 683.102 L1025.6 683.102 L1025.04 683.102 L1024.48 683.102 L1023.92 683.102 L1023.36 683.102 L1022.8 683.102 L1022.24 683.102 L1021.68 683.102 L1021.12 683.102 L1020.56 683.102 L1020.01 683.102 L1019.45 683.102 L1018.89 683.102 L1018.33 683.102 L1017.77 683.102 L1017.21 683.102 L1016.65 683.102 L1016.09 683.102 L1015.53 683.102 L1014.97 683.102 L1014.41 683.102 L1013.85 683.102 L1013.29 683.102 L1012.73 683.102 L1012.18 683.102 L1011.62 683.102 L1011.06 683.102 L1010.5 683.102 L1009.94 683.102 L1009.38 683.102 L1008.82 683.102 L1008.26 683.102 L1007.7 683.102 L1007.14 683.102 L1006.58 683.102 L1006.02 683.102 L1005.46 683.102 L1004.91 683.102 L1004.35 683.102 L1003.79 683.102 L1003.23 683.102 L1002.67 683.102 L1002.11 683.102 L1001.55 683.102 L1000.99 683.102 L1000.43 683.102 L999.872 683.102 L999.313 683.102 L998.754 683.102 L998.194 683.102 L997.635 683.102 L997.076 683.102 L996.517 683.102 L995.957 683.102 L995.398 683.102 L994.839 683.102 L994.28 683.102 L993.72 683.102 L993.161 683.102 L992.602 683.102 L992.043 683.102 L991.483 683.102 L990.924 683.102 L990.365 683.102 L989.806 683.102 L989.246 683.102 L988.687 683.102 L988.128 683.102 L987.569 683.102 L987.009 683.102 L986.45 683.102 L985.891 683.102 L985.332 683.102 L984.772 683.102 L984.213 683.102 L983.654 683.102 L983.095 683.102 L982.535 683.102 L981.976 683.102 L981.417 683.102 L980.858 683.102 L980.298 683.102 L979.739 683.102 L979.18 683.102 L978.621 683.102 L978.061 683.102 L977.502 683.102 L976.943 683.102 L976.384 683.102 L975.824 683.102 L975.265 683.102 L974.706 683.102 L974.147 683.102 L973.587 683.102 L973.028 683.102 L972.469 683.102 L971.91 683.102 L971.35 683.102 L970.791 683.102 L970.232 683.102 L969.673 683.102 L969.113 683.102 L968.554 683.102 L967.995 683.102 L967.436 683.102 L966.876 683.102 L966.317 683.102 L965.758 683.102 L965.199 683.102 L964.639 683.102 L964.08 683.102 L963.521 683.102 L962.962 683.102 L962.402 683.102 L961.843 683.102 L961.284 683.102 L960.725 683.102 L960.165 683.102 L959.606 683.102 L959.047 683.102 L958.488 683.102 L957.928 683.102 L957.369 683.102 L956.81 683.102 L956.251 683.102 L955.691 683.102 L955.132 683.102 L954.573 683.102 L954.014 683.102 L953.454 683.102 L952.895 683.102 L952.336 683.102 L951.777 683.102 L951.217 683.102 L950.658 683.102 L950.099 683.102 L949.54 683.102 L948.98 683.102 L948.421 683.102 L947.862 683.102 L947.303 683.102 L946.743 683.102 L946.184 683.102 L945.625 683.102 L945.066 683.102 L944.506 683.102 L943.947 683.102 L943.388 683.102 L942.829 683.102 L942.269 683.102 L941.71 683.102 L941.151 683.102 L940.592 683.102 L940.032 683.102 L939.473 683.102 L938.914 683.102 L938.355 683.102 L937.795 683.102 L937.236 683.102 L936.677 683.102 L936.118 683.102 L935.558 683.102 L934.999 683.102 L934.44 683.102 L933.881 683.102 L933.321 683.102 L932.762 683.102 L932.203 683.102 L931.644 683.102 L931.084 683.102 L930.525 683.102 L929.966 683.102 L929.406 683.102 L928.847 683.102 L928.288 683.102 L927.729 683.102 L927.169 683.102 L926.61 683.102 L926.051 683.102 L925.492 683.102 L924.932 683.102 L924.373 683.102 L923.814 683.102 L923.255 683.102 L922.695 683.102 L922.136 683.102 L921.577 683.102 L921.018 683.102 L920.458 683.102 L919.899 683.102 L919.34 683.102 L918.781 683.102 L918.221 683.102 L917.662 683.102 L917.103 683.102 L916.544 683.102 L915.984 683.102 L915.425 683.102 L914.866 683.102 L914.307 683.102 L913.747 683.102 L913.188 683.102 L912.629 683.102 L912.07 683.102 L911.51 683.102 L910.951 683.102 L910.392 683.102 L909.833 683.102 L909.273 683.102 L908.714 683.102 L908.155 683.102 L907.596 683.102 L907.036 683.102 L906.477 683.102 L905.918 683.102 L905.359 683.102 L904.799 683.102 L904.24 683.102 L903.681 683.102 L903.122 683.102 L902.562 683.102 L902.003 683.102 L901.444 683.102 L900.885 683.102 L900.325 683.102 L899.766 683.102 L899.207 683.102 L898.648 683.102 L898.088 683.102 L897.529 683.102 L896.97 683.102 L896.411 683.102 L895.851 683.102 L895.292 683.102 L894.733 683.102 L894.174 683.102 L893.614 683.102 L893.055 683.102 L892.496 683.102 L891.937 683.102 L891.377 683.102 L890.818 683.102 L890.259 683.102 L889.7 683.102 L889.14 683.102 L888.581 683.102 L888.022 683.102 L887.463 683.102 L886.903 683.102 L886.344 683.102 L885.785 683.102 L885.226 683.102 L884.666 683.102 L884.107 683.102 L883.548 683.102 L882.989 683.102 L882.429 683.102 L881.87 683.102 L881.311 683.102 L880.752 683.102 L880.192 683.102 L879.633 683.102 L879.074 683.102 L878.515 683.102 L877.955 683.102 L877.396 683.102 L876.837 683.102 L876.278 683.102 L875.718 683.102 L875.159 683.102 L874.6 683.102 L874.041 683.102 L873.481 683.102 L872.922 683.102 L872.363 683.102 L871.804 683.102 L871.244 683.102 L870.685 683.102 L870.126 683.102 L869.567 683.102 L869.007 683.102 L868.448 683.102 L867.889 683.102 L867.33 683.102 L866.77 683.102 L866.211 683.102 L865.652 683.102 L865.093 683.102 L864.533 683.102 L863.974 683.102 L863.415 683.102 L862.856 683.102 L862.296 683.102 L861.737 683.102 L861.178 683.102 L860.619 683.102 L860.059 683.102 L859.5 683.102 L858.941 683.102 L858.382 683.102 L857.822 683.102 L857.263 683.102 L856.704 683.102 L856.145 683.102 L855.585 683.102 L855.026 683.102 L854.467 683.102 L853.908 683.102 L853.348 683.102 L852.789 683.102 L852.23 683.102 L851.671 683.102 L851.111 683.102 L850.552 683.102 L849.993 683.102 L849.434 683.102 L848.874 683.102 L848.315 683.102 L847.756 683.102 L847.197 683.102 L846.637 683.102 L846.078 683.102 L845.519 683.102 L844.96 683.102 L844.4 683.102 L843.841 683.102 L843.282 683.102 L842.723 683.102 L842.163 683.102 L841.604 683.102 L841.045 683.102 L840.486 683.102 L839.926 683.102 L839.367 683.102 L838.808 683.102 L838.249 683.102 L837.689 683.102 L837.13 683.102 L836.571 683.102 L836.012 683.102 L835.452 683.102 L834.893 683.102 L834.334 683.102 L833.775 683.102 L833.215 683.102 L832.656 683.102 L832.097 683.102 L831.538 683.102 L830.978 683.102 L830.419 683.102 L829.86 683.102 L829.301 683.102 L828.741 683.102 L828.182 683.102 L827.623 683.102 L827.064 683.102 L826.504 683.102 L825.945 683.102 L825.386 683.102 L824.827 683.102 L824.267 683.102 L823.708 683.102 L823.149 683.102 L822.59 683.102 L822.03 683.102 L821.471 683.102 L820.912 683.102 L820.353 683.102 L819.793 683.102 L819.234 683.102 L818.675 683.102 L818.116 683.102 L817.556 683.102 L816.997 683.102 L816.438 683.102 L815.879 683.102 L815.319 683.102 L814.76 683.102 L814.201 683.102 L813.642 683.102 L813.082 683.102 L812.523 683.102 L811.964 683.102 L811.405 683.102 L810.845 683.102 L810.286 683.102 L809.727 683.102 L809.168 683.102 L808.608 683.102 L808.049 683.102 L807.49 683.102 L806.931 683.102 L806.371 683.102 L805.812 683.102 L805.253 683.102 L804.693 683.102 L804.134 683.102 L803.575 683.102 L803.016 683.102 L802.456 683.102 L801.897 683.102 L801.338 683.102 L800.779 683.102 L800.219 683.102 L799.66 683.102 L799.101 683.102 L798.542 683.102 L797.982 683.102 L797.423 683.102 L796.864 683.102 L796.305 683.102 L795.745 683.102 L795.186 683.102 L794.627 683.102 L794.068 683.102 L793.508 683.102 L792.949 683.102 L792.39 683.102 L791.831 683.102 L791.271 683.102 L790.712 683.102 L790.153 683.102 L789.594 683.102 L789.034 683.102 L788.475 683.102 L787.916 683.102 L787.357 683.102 L786.797 683.102 L786.238 683.102 L785.679 683.102 L785.12 683.102 L784.56 683.102 L784.001 683.102 L783.442 683.102 L782.883 683.102 L782.323 683.102 L781.764 683.102 L781.205 683.102 L780.646 683.102 L780.086 683.102 L779.527 683.102 L778.968 683.102 L778.409 683.102 L777.849 683.102 L777.29 683.102 L776.731 683.102 L776.172 683.102 L775.612 683.102 L775.053 683.102 L774.494 683.102 L773.935 683.102 L773.375 683.102 L772.816 683.102 L772.257 683.102 L771.698 683.102 L771.138 683.102 L770.579 683.102 L770.02 683.102 L769.461 683.102 L768.901 683.102 L768.342 683.102 L767.783 683.102 L767.224 683.102 L766.664 683.102 L766.105 683.102 L765.546 683.102 L764.987 683.102 L764.427 683.102 L763.868 683.102 L763.309 683.102 L762.75 683.102 L762.19 683.102 L761.631 683.102 L761.072 683.102 L760.513 683.102 L759.953 683.102 L759.394 683.102 L758.835 683.102 L758.276 683.102 L757.716 683.102 L757.157 683.102 L756.598 683.102 L756.039 683.102 L755.479 683.102 L754.92 683.102 L754.361 683.102 L753.802 683.102 L753.242 683.102 L752.683 683.102 L752.124 683.102 L751.565 683.102 L751.005 683.102 L750.446 683.102 L749.887 683.102 L749.328 683.102 L748.768 683.102 L748.209 683.102 L747.65 683.102 L747.091 683.102 L746.531 683.102 L745.972 683.102 L745.413 683.102 L744.854 683.102 L744.294 683.102 L743.735 683.102 L743.176 683.102 L742.617 683.102 L742.057 683.102 L741.498 683.102 L740.939 683.102 L740.38 683.102 L739.82 683.102 L739.261 683.102 L738.702 683.102 L738.143 683.102 L737.583 683.102 L737.024 683.102 L736.465 683.102 L735.906 683.102 L735.346 683.102 L734.787 683.102 L734.228 683.102 L733.669 683.102 L733.109 683.102 L732.55 683.102 L731.991 683.102 L731.432 683.102 L730.872 683.102 L730.313 683.102 L729.754 683.102 L729.195 683.102 L728.635 683.102 L728.076 683.102 L727.517 683.102 L726.958 683.102 L726.398 683.102 L725.839 683.102 L725.28 683.102 L724.721 683.102 L724.161 683.102 L723.602 683.102 L723.043 683.102 L722.484 683.102 L721.924 683.102 L721.365 683.102 L720.806 683.102 L720.247 683.102  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.881 720.806,683.881 721.365,683.881 721.924,683.881 722.484,683.881 723.043,683.881 723.602,683.881 724.161,683.881 724.721,683.881 725.28,683.881 725.839,683.881 726.398,683.881 726.958,683.881 727.517,683.881 728.076,683.881 728.635,683.881 729.195,683.881 729.754,683.881 730.313,683.881 730.872,683.881 731.432,683.881 731.991,683.881 732.55,683.881 733.109,683.881 733.669,683.881 734.228,683.881 734.787,683.881 735.346,683.881 735.906,683.881 736.465,683.881 737.024,683.881 737.583,683.881 738.143,683.881 738.702,683.881 739.261,683.881 739.82,683.881 740.38,683.881 740.939,683.881 741.498,683.881 742.057,683.881 742.617,683.881 743.176,683.881 743.735,683.881 744.294,683.881 744.854,683.881 745.413,683.881 745.972,683.881 746.531,683.881 747.091,683.881 747.65,683.881 748.209,683.881 748.768,683.881 749.328,683.881 749.887,683.881 750.446,683.881 751.005,683.881 751.565,683.881 752.124,683.881 752.683,683.881 753.242,683.881 753.802,683.881 754.361,683.881 754.92,683.881 755.479,683.881 756.039,683.881 756.598,683.881 757.157,683.881 757.716,683.881 758.276,683.881 758.835,683.881 759.394,683.881 759.953,683.881 760.513,683.881 761.072,683.881 761.631,683.881 762.19,683.881 762.75,683.881 763.309,683.881 763.868,683.881 764.427,683.881 764.987,683.881 765.546,683.881 766.105,683.881 766.664,683.881 767.224,683.881 767.783,683.881 768.342,683.881 768.901,683.881 769.461,683.881 770.02,683.881 770.579,683.881 771.138,683.881 771.698,683.881 772.257,683.881 772.816,683.881 773.375,683.881 773.935,683.881 774.494,683.881 775.053,683.881 775.612,683.881 776.172,683.881 776.731,683.881 777.29,683.881 777.849,683.881 778.409,683.881 778.968,683.881 779.527,683.881 780.086,683.881 780.646,683.881 781.205,683.881 781.764,683.881 782.323,683.881 782.883,683.881 783.442,683.881 784.001,683.881 784.56,683.881 785.12,683.881 785.679,683.881 786.238,683.881 786.797,683.881 787.357,683.881 787.916,683.881 788.475,683.881 789.034,683.881 789.594,683.881 790.153,683.881 790.712,683.881 791.271,683.881 791.831,683.881 792.39,683.881 792.949,683.881 793.508,683.881 794.068,683.881 794.627,683.881 795.186,683.881 795.745,683.881 796.305,683.881 796.864,683.881 797.423,683.881 797.982,683.881 798.542,683.881 799.101,683.881 799.66,683.881 800.219,683.881 800.779,683.881 801.338,683.881 801.897,683.881 802.456,683.881 803.016,683.881 803.575,683.881 804.134,683.881 804.693,683.881 805.253,683.881 805.812,683.881 806.371,683.881 806.931,683.881 807.49,683.881 808.049,683.881 808.608,683.881 809.168,683.881 809.727,683.881 810.286,683.881 810.845,683.881 811.405,683.881 811.964,683.881 812.523,683.881 813.082,683.881 813.642,683.881 814.201,683.881 814.76,683.881 815.319,683.881 815.879,683.881 816.438,683.881 816.997,683.881 817.556,683.881 818.116,683.881 818.675,683.881 819.234,683.881 819.793,683.881 820.353,683.881 820.912,683.881 821.471,683.881 822.03,683.881 822.59,683.881 823.149,683.881 823.708,683.881 824.267,683.881 824.827,683.881 825.386,683.881 825.945,683.881 826.504,683.881 827.064,683.881 827.623,683.881 828.182,683.881 828.741,683.881 829.301,683.881 829.86,683.881 830.419,683.881 830.978,683.881 831.538,683.881 832.097,683.881 832.656,683.881 833.215,683.881 833.775,683.881 834.334,683.881 834.893,683.881 835.452,683.881 836.012,683.881 836.571,683.881 837.13,683.881 837.689,683.881 838.249,683.881 838.808,683.881 839.367,683.881 839.926,683.881 840.486,683.881 841.045,683.881 841.604,683.881 842.163,683.881 842.723,683.881 843.282,683.881 843.841,683.881 844.4,683.881 844.96,683.881 845.519,683.881 846.078,683.881 846.637,683.881 847.197,683.881 847.756,683.881 848.315,683.881 848.874,683.881 849.434,683.881 849.993,683.881 850.552,683.881 851.111,683.881 851.671,683.881 852.23,683.881 852.789,683.881 853.348,683.881 853.908,683.881 854.467,683.881 855.026,683.881 855.585,683.881 856.145,683.881 856.704,683.881 857.263,683.881 857.822,683.881 858.382,683.881 858.941,683.881 859.5,683.881 860.059,683.881 860.619,683.881 861.178,683.881 861.737,683.881 862.296,683.881 862.856,683.881 863.415,683.881 863.974,683.881 864.533,683.881 865.093,683.881 865.652,683.881 866.211,683.881 866.77,683.881 867.33,683.881 867.889,683.881 868.448,683.881 869.007,683.881 869.567,683.881 870.126,683.881 870.685,683.881 871.244,683.881 871.804,683.881 872.363,683.881 872.922,683.881 873.481,683.881 874.041,683.881 874.6,683.881 875.159,683.881 875.718,683.881 876.278,683.881 876.837,683.881 877.396,683.881 877.955,683.881 878.515,683.881 879.074,683.881 879.633,683.881 880.192,683.881 880.752,683.881 881.311,683.881 881.87,683.881 882.429,683.881 882.989,683.881 883.548,683.881 884.107,683.881 884.666,683.881 885.226,683.881 885.785,683.881 886.344,683.881 886.903,683.881 887.463,683.881 888.022,683.881 888.581,683.881 889.14,683.881 889.7,683.881 890.259,683.881 890.818,683.881 891.377,683.881 891.937,683.881 892.496,683.881 893.055,683.881 893.614,683.881 894.174,683.881 894.733,683.881 895.292,683.881 895.851,683.881 896.411,683.881 896.97,683.881 897.529,683.881 898.088,683.881 898.648,683.881 899.207,683.881 899.766,683.881 900.325,683.881 900.885,683.881 901.444,683.881 902.003,683.881 902.562,683.881 903.122,683.881 903.681,683.881 904.24,683.881 904.799,683.881 905.359,683.881 905.918,683.881 906.477,683.881 907.036,683.881 907.596,683.881 908.155,683.881 908.714,683.881 909.273,683.881 909.833,683.881 910.392,683.881 910.951,683.881 911.51,683.881 912.07,683.881 912.629,683.881 913.188,683.881 913.747,683.881 914.307,683.881 914.866,683.881 915.425,683.881 915.984,683.881 916.544,683.881 917.103,683.881 917.662,683.881 918.221,683.881 918.781,683.881 919.34,683.881 919.899,683.881 920.458,683.881 921.018,683.881 921.577,683.881 922.136,683.881 922.695,683.881 923.255,683.881 923.814,683.881 924.373,683.881 924.932,683.881 925.492,683.881 926.051,683.881 926.61,683.881 927.169,683.881 927.729,683.881 928.288,683.881 928.847,683.881 929.406,683.881 929.966,683.881 930.525,683.881 931.084,683.881 931.644,683.881 932.203,683.881 932.762,683.881 933.321,683.881 933.881,683.881 934.44,683.881 934.999,683.881 935.558,683.881 936.118,683.881 936.677,683.881 937.236,683.881 937.795,683.881 938.355,683.881 938.914,683.881 939.473,683.881 940.032,683.881 940.592,683.881 941.151,683.881 941.71,683.881 942.269,683.881 942.829,683.881 943.388,683.881 943.947,683.881 944.506,683.881 945.066,683.881 945.625,683.881 946.184,683.881 946.743,683.881 947.303,683.881 947.862,683.881 948.421,683.881 948.98,683.881 949.54,683.881 950.099,683.881 950.658,683.881 951.217,683.881 951.777,683.881 952.336,683.881 952.895,683.881 953.454,683.881 954.014,683.881 954.573,683.881 955.132,683.881 955.691,683.881 956.251,683.881 956.81,683.881 957.369,683.881 957.928,683.881 958.488,683.881 959.047,683.881 959.606,683.881 960.165,683.881 960.725,683.881 961.284,683.881 961.843,683.881 962.402,683.881 962.962,683.881 963.521,683.881 964.08,683.881 964.639,683.881 965.199,683.881 965.758,683.881 966.317,683.881 966.876,683.881 967.436,683.881 967.995,683.881 968.554,683.881 969.113,683.881 969.673,683.881 970.232,683.881 970.791,683.881 971.35,683.881 971.91,683.881 972.469,683.881 973.028,683.881 973.587,683.881 974.147,683.881 974.706,683.881 975.265,683.881 975.824,683.881 976.384,683.881 976.943,683.881 977.502,683.881 978.061,683.881 978.621,683.881 979.18,683.881 979.739,683.881 980.298,683.881 980.858,683.881 981.417,683.881 981.976,683.881 982.535,683.881 983.095,683.881 983.654,683.881 984.213,683.881 984.772,683.881 985.332,683.881 985.891,683.881 986.45,683.881 987.009,683.881 987.569,683.881 988.128,683.881 988.687,683.881 989.246,683.881 989.806,683.881 990.365,683.881 990.924,683.881 991.483,683.881 992.043,683.881 992.602,683.881 993.161,683.881 993.72,683.881 994.28,683.881 994.839,683.881 995.398,683.881 995.957,683.881 996.517,683.881 997.076,683.881 997.635,683.881 998.194,683.881 998.754,683.881 999.313,683.881 999.872,683.881 1000.43,683.881 1000.99,683.881 1001.55,683.881 1002.11,683.881 1002.67,683.881 1003.23,683.881 1003.79,683.881 1004.35,683.881 1004.91,683.881 1005.46,683.881 1006.02,683.881 1006.58,683.881 1007.14,683.881 1007.7,683.881 1008.26,683.881 1008.82,683.881 1009.38,683.881 1009.94,683.881 1010.5,683.881 1011.06,683.881 1011.62,683.881 1012.18,683.881 1012.73,683.881 1013.29,683.881 1013.85,683.881 1014.41,683.881 1014.97,683.881 1015.53,683.881 1016.09,683.881 1016.65,683.881 1017.21,683.881 1017.77,683.881 1018.33,683.881 1018.89,683.881 1019.45,683.881 1020.01,683.881 1020.56,683.881 1021.12,683.881 1021.68,683.881 1022.24,683.881 1022.8,683.881 1023.36,683.881 1023.92,683.881 1024.48,683.881 1025.04,683.881 1025.6,683.881 1026.16,683.881 1026.72,683.881 1027.28,683.881 1027.83,683.881 1028.39,683.881 1028.95,683.881 1029.51,683.881 1030.07,683.881 1030.63,683.881 1031.19,683.881 1031.75,683.881 1032.31,683.881 1032.87,683.881 1033.43,683.881 1033.99,683.881 1034.55,683.881 1035.1,683.881 1035.66,683.881 1036.22,683.881 1036.78,683.881 1037.34,683.881 1037.9,683.881 1038.46,683.881 1039.02,683.881 1039.58,683.881 1040.14,683.881 1040.7,683.881 1041.26,683.881 1041.82,683.881 1042.38,683.881 1042.93,683.881 1043.49,683.881 1044.05,683.881 1044.61,683.881 1045.17,683.881 1045.73,683.881 1046.29,683.881 1046.85,683.881 1047.41,683.881 1047.97,683.881 1048.53,683.881 1049.09,683.881 1049.65,683.881 1050.2,683.881 1050.76,683.881 1051.32,683.881 1051.88,683.881 1052.44,683.881 1053,683.881 1053.56,683.881 1054.12,683.881 1054.68,683.881 1055.24,683.881 1055.8,683.881 1056.36,683.881 1056.92,683.881 1057.48,683.881 1058.03,683.881 1058.59,683.881 1059.15,683.881 1059.71,683.881 1060.27,683.881 1060.83,683.881 1061.39,683.881 1061.95,683.881 1062.51,683.881 1063.07,683.881 1063.63,683.881 1064.19,683.881 1064.75,683.881 1065.3,683.881 1065.86,683.881 1066.42,683.881 1066.98,683.881 1067.54,683.881 1068.1,683.881 1068.66,683.881 1069.22,683.881 1069.78,683.881 1070.34,683.881 1070.9,683.881 1071.46,683.881 1072.02,683.881 1072.57,683.881 1073.13,683.881 1073.69,683.881 1074.25,683.881 1074.81,683.881 1075.37,683.881 1075.93,683.881 1076.49,683.881 1077.05,683.881 1077.61,683.881 1078.17,683.881 1078.73,683.881 1079.29,683.881 1079.85,683.881 1080.4,683.881 1080.96,683.881 1081.52,683.881 1082.08,683.881 1082.64,683.881 1083.2,683.881 1083.76,683.881 1084.32,683.881 1084.88,683.881 1085.44,683.881 1086,683.881 1086.56,683.881 1087.12,683.881 1087.67,683.881 1088.23,683.881 1088.79,683.881 1089.35,683.881 1089.91,683.881 1090.47,683.881 1091.03,683.881 1091.59,683.881 1092.15,683.881 1092.71,683.881 1093.27,683.881 1093.83,683.881 1094.39,683.881 1094.94,683.881 1095.5,683.881 1096.06,683.881 1096.62,683.881 1097.18,683.881 1097.74,683.881 1098.3,683.881 1098.86,683.881 1099.42,683.881 1099.98,683.881 1100.54,683.881 1101.1,683.881 1101.66,683.881 1102.22,683.881 1102.77,683.881 1103.33,683.881 1103.89,683.881 1104.45,683.881 1105.01,683.881 1105.57,683.881 1106.13,683.881 1106.69,683.881 1107.25,683.881 1107.81,683.881 1108.37,683.881 1108.93,683.881 1109.49,683.881 1110.04,683.881 1110.6,683.881 1111.16,683.881 1111.72,683.881 1112.28,683.881 1112.84,683.881 1113.4,683.881 1113.96,683.881 1114.52,683.881 1115.08,683.881 1115.64,683.881 1116.2,683.881 1116.76,683.881 1117.31,683.881 1117.87,683.881 1118.43,683.881 1118.99,683.881 1119.55,683.881 1120.11,683.881 1120.67,683.881 1121.23,683.881 1121.79,683.881 1122.35,683.881 1122.91,683.881 1123.47,683.881 1124.03,683.881 1124.59,683.881 1125.14,683.881 1125.7,683.881 1126.26,683.881 1126.82,683.881 1127.38,683.881 1127.94,683.881 1128.5,683.881 1129.06,683.881 1129.62,683.881 1130.18,683.881 1130.74,683.881 1131.3,683.881 1131.86,683.881 1132.41,683.881 1132.97,683.881 1133.53,683.881 1134.09,683.881 1134.65,683.881 1135.21,683.881 1135.77,683.881 1136.33,683.881 1136.89,683.881 1137.45,683.881 1138.01,683.881 1138.57,683.881 1139.13,683.881 1139.68,683.881 1140.24,683.881 1140.8,683.881 1141.36,683.881 1141.92,683.881 1142.48,683.881 1143.04,683.881 1143.6,683.881 1144.16,683.881 1144.72,683.881 1145.28,683.881 1145.84,683.881 1146.4,683.881 1146.96,683.881 1147.51,683.881 1148.07,683.881 1148.63,683.881 1149.19,683.881 1149.75,683.881 1150.31,683.881 1150.87,683.881 1151.43,683.881 1151.99,683.881 1152.55,683.881 1153.11,683.881 1153.67,683.881 1154.23,683.881 1154.78,683.881 1155.34,683.881 1155.9,683.881 1156.46,683.881 1157.02,683.881 1157.58,683.881 1158.14,683.881 1158.7,683.881 1159.26,683.881 1159.82,683.881 1160.38,683.881 1160.94,683.881 1161.5,683.881 1162.05,683.881 1162.61,683.881 1163.17,683.881 1163.73,683.881 1164.29,683.881 1164.85,683.881 1165.41,683.881 1165.97,683.881 1166.53,683.881 1167.09,683.881 1167.65,683.881 1168.21,683.881 1168.77,683.881 1169.33,683.881 1169.88,683.881 1170.44,683.881 1171,683.881 1171.56,683.881 1172.12,683.881 1172.68,683.881 1173.24,683.881 1173.8,683.881 1174.36,683.881 1174.92,683.881 1175.48,683.881 1176.04,683.881 1176.6,683.881 1177.15,683.881 1177.71,683.881 1178.27,683.881 1178.83,683.881 1179.39,683.881 1179.95,683.881 1180.51,683.881 1181.07,683.881 1181.63,683.881 1182.19,683.881 1182.75,683.881 1183.31,683.881 1183.87,683.881 1184.43,683.881 1184.98,683.881 1185.54,683.881 1186.1,683.881 1186.66,683.881 1187.22,683.881 1187.78,683.881 1188.34,683.881 1188.9,683.881 1189.46,683.881 1190.02,683.881 1190.58,683.881 1191.14,683.881 1191.7,683.881 1192.25,683.881 1192.81,683.881 1193.37,683.881 1193.93,683.881 1194.49,683.881 1195.05,683.881 1195.61,683.881 1196.17,683.881 1196.73,683.881 1197.29,683.881 1197.85,683.881 1198.41,683.881 1198.97,683.881 1199.52,683.881 1200.08,683.881 1200.64,683.881 1201.2,683.881 1201.76,683.881 1202.32,683.881 1202.88,683.881 1203.44,683.881 1204,683.881 1204.56,683.881 1205.12,683.881 1205.68,683.881 1206.24,683.881 1206.8,683.881 1207.35,683.881 1207.91,683.881 1208.47,683.881 1209.03,683.881 1209.59,683.881 1210.15,683.881 1210.71,683.881 1211.27,683.881 1211.83,683.881 1212.39,683.881 1212.95,683.881 1213.51,683.881 1214.07,683.881 1214.62,683.881 1215.18,683.881 1215.74,683.881 1216.3,683.881 1216.86,683.881 1217.42,683.881 1217.98,683.881 1218.54,683.881 1219.1,683.881 1219.66,683.881 1220.22,683.881 1220.78,683.881 1221.34,683.881 1221.89,683.881 1222.45,683.881 1223.01,683.881 1223.57,683.881 1224.13,683.881 1224.69,683.881 1225.25,683.881 1225.81,683.881 1226.37,683.881 1226.93,683.881 1227.49,683.881 1228.05,683.881 1228.61,683.881 1229.17,683.881 1229.72,683.881 1230.28,683.881 1230.84,683.881 1231.4,683.881 1231.96,683.881 1232.52,683.881 1233.08,683.881 1233.64,683.881 1234.2,683.881 1234.76,683.881 1235.32,683.881 1235.88,683.881 1236.44,683.881 1236.99,683.881 1237.55,683.881 1238.11,683.881 1238.67,683.881 1239.23,683.881 1239.79,683.881 1240.35,683.881 1240.91,683.881 1241.47,683.881 1242.03,683.881 1242.59,683.881 1243.15,683.881 1243.71,683.881 1244.26,683.881 1244.82,683.881 1245.38,683.881 1245.94,683.881 1246.5,683.881 1247.06,683.881 1247.62,683.881 1248.18,683.881 1248.74,683.881 1249.3,683.881 1249.86,683.881 1250.42,683.881 1250.98,683.881 1251.54,683.881 1252.09,683.881 1252.65,683.881 1253.21,683.881 1253.77,683.881 1254.33,683.881 1254.89,683.881 1255.45,683.881 1256.01,683.881 1256.57,683.881 1257.13,683.881 1257.69,683.881 1258.25,683.881 1258.81,683.881 1259.36,683.881 1259.92,683.881 1260.48,683.881 1261.04,683.881 1261.6,683.881 1262.16,683.881 1262.72,683.881 1263.28,683.881 1263.84,683.881 1264.4,683.881 1264.96,683.881 1265.52,683.881 1266.08,683.881 1266.63,683.881 1267.19,683.881 1267.75,683.881 1268.31,683.881 1268.87,683.881 1269.43,683.881 1269.99,683.881 1270.55,683.881 1271.11,683.881 1271.67,683.881 1272.23,683.881 1272.79,683.881 1273.35,683.881 1273.91,683.881 1274.46,683.881 1275.02,683.881 1275.58,683.881 1276.14,683.881 1276.7,683.881 1277.26,683.881 1277.82,683.881 1278.38,683.881 1278.94,683.881 1279.5,683.881 1280.06,683.881 1280.62,683.881 1281.18,683.881 1281.73,683.881 1282.29,683.881 1282.85,683.881 1283.41,683.881 1283.97,683.881 1284.53,683.881 1285.09,683.881 1285.65,683.881 1286.21,683.881 1286.77,683.881 1287.33,683.881 1287.89,683.881 1288.45,683.881 1289,683.881 1289.56,683.881 1290.12,683.881 1290.68,683.881 1291.24,683.881 1291.8,683.881 1292.36,683.881 1292.92,683.881 1293.48,683.881 1294.04,683.881 1294.6,683.881 1295.16,683.881 1295.72,683.881 1296.28,683.881 1296.83,683.881 1297.39,683.881 1297.95,683.881 1298.51,683.881 1299.07,683.881 1299.63,683.881 1300.19,683.881 1300.75,683.881 1301.31,683.881 1301.87,683.881 1302.43,683.881 1302.99,683.881 1303.55,683.881 1304.1,683.881 1304.66,683.881 1305.22,683.881 1305.78,683.881 1306.34,683.881 1306.9,683.881 1307.46,683.881 1308.02,683.881 1308.58,683.881 1309.14,683.881 1309.7,683.881 1310.26,683.881 1310.82,683.881 1311.38,683.881 1311.93,683.881 1312.49,683.881 1313.05,683.881 1313.61,683.881 1314.17,683.881 1314.73,683.881 1315.29,683.881 1315.85,683.881 1316.41,683.881 1316.97,683.881 1317.53,683.881 1318.09,683.881 1318.65,683.881 1319.2,683.881 1319.76,683.881 1320.32,683.881 1320.88,683.881 1321.44,683.881 1322,683.881 1322.56,683.881 1323.12,683.881 1323.68,683.881 1324.24,683.881 1324.8,683.881 1325.36,683.881 1325.92,683.881 1326.47,683.881 1327.03,683.881 1327.59,683.881 1328.15,683.881 1328.71,683.881 1329.27,683.881 1329.83,683.881 1330.39,683.881 1330.95,683.881 1331.51,683.881 1332.07,683.881 1332.63,683.881 1333.19,683.881 1333.75,683.881 1334.3,683.881 1334.86,683.881 1335.42,683.881 1335.98,683.881 1336.54,683.881 1337.1,683.881 1337.66,683.881 1338.22,683.881 1338.78,683.881 1339.34,683.881 1339.9,683.881 1340.46,683.881 1341.02,683.881 1341.57,683.881 1342.13,683.881 1342.69,683.881 1343.25,683.881 1343.81,683.881 1344.37,683.881 1344.93,683.881 1345.49,683.881 1346.05,683.881 1346.61,683.881 1347.17,683.881 1347.73,683.881 1348.29,683.881 1348.84,683.881 1349.4,683.881 1349.96,683.881 1350.52,683.881 1351.08,683.881 1351.64,683.881 1352.2,683.881 1352.76,683.881 1353.32,683.881 1353.88,683.881 1354.44,683.881 1355,683.881 1355.56,683.881 1356.12,683.881 1356.67,683.881 1357.23,683.881 1357.79,683.881 1358.35,683.881 1358.91,683.881 1359.47,683.881 1360.03,683.881 1360.59,683.881 1361.15,683.881 1361.71,683.881 1362.27,683.881 1362.83,683.881 1363.39,683.881 1363.94,683.881 1364.5,683.881 1365.06,683.881 1365.62,683.881 1366.18,683.881 1366.74,683.881 1367.3,683.881 1367.86,683.881 1368.42,683.881 1368.98,683.881 1369.54,683.881 1370.1,683.881 1370.66,683.881 1371.21,683.881 1371.77,683.881 1372.33,683.881 1372.89,683.881 1373.45,683.881 1374.01,683.881 1374.57,683.881 1375.13,683.881 1375.69,683.881 1376.25,683.881 1376.81,683.881 1377.37,683.881 1377.93,683.881 1378.49,683.881 1379.04,683.881 1379.6,683.881 1380.16,683.881 1380.72,683.881 1381.28,683.881 1381.84,683.881 1382.4,683.881 1382.96,683.881 1383.52,683.881 1384.08,683.881 1384.64,683.881 1385.2,683.881 1385.76,683.881 1386.31,683.881 1386.87,683.881 1387.43,683.881 1387.99,683.881 1388.55,683.881 1389.11,683.881 1389.67,683.881 1390.23,683.881 1390.79,683.881 1391.35,683.881 1391.91,683.881 1392.47,683.881 1393.03,683.881 1393.58,683.881 1394.14,683.881 1394.7,683.881 1395.26,683.881 1395.82,683.881 1396.38,683.881 1396.94,683.881 1397.5,683.881 1398.06,683.881 1398.62,683.881 1399.18,683.881 1399.74,683.881 1400.3,683.881 1400.86,683.881 1401.41,683.881 1401.97,683.881 1402.53,683.881 1403.09,683.881 1403.65,683.881 1404.21,683.881 1404.77,683.881 1405.33,683.881 1405.89,683.881 1406.45,683.881 1407.01,683.881 1407.57,683.881 1408.13,683.881 1408.68,683.881 1409.24,683.881 1409.8,683.881 1410.36,683.881 1410.92,683.881 1411.48,683.881 1412.04,683.881 1412.6,683.881 1413.16,683.881 1413.72,683.881 1414.28,683.881 1414.84,683.881 1415.4,683.881 1415.95,683.881 1416.51,683.881 1417.07,683.881 1417.63,683.881 1418.19,683.881 1418.75,683.881 1419.31,683.881 1419.87,683.881 1420.43,683.881 1420.99,683.881 1421.55,683.881 1422.11,683.881 1422.67,683.881 1423.23,683.881 1423.78,683.881 1424.34,683.881 1424.9,683.881 1425.46,683.881 1426.02,683.881 1426.58,683.881 1427.14,683.881 1427.7,683.881 1428.26,683.881 1428.82,683.881 1429.38,683.881 1429.94,683.881 1430.5,683.881 1431.05,683.881 1431.61,683.881 1432.17,683.881 1432.73,683.881 1433.29,683.881 1433.85,683.881 1434.41,683.881 1434.97,683.881 1435.53,683.881 1436.09,683.881 1436.65,683.881 1437.21,683.881 1437.77,683.881 1438.33,683.881 1438.88,683.881 1439.44,683.881 1440,683.881 1440.56,683.881 1441.12,683.881 1441.68,683.881 1442.24,683.881 1442.8,683.881 1443.36,683.881 1443.92,683.881 1444.48,683.881 1445.04,683.881 1445.6,683.881 1446.15,683.881 1446.71,683.881 1447.27,683.881 1447.83,683.881 1448.39,683.881 1448.95,683.881 1449.51,683.881 1450.07,683.881 1450.63,683.881 1451.19,683.881 1451.75,683.881 1452.31,683.881 1452.87,683.881 1453.42,683.881 1453.98,683.881 1454.54,683.881 1455.1,683.881 1455.66,683.881 1456.22,683.881 1456.78,683.881 1457.34,683.881 1457.9,683.881 1458.46,683.881 1459.02,683.881 1459.58,683.881 1460.14,683.881 1460.7,683.881 1461.25,683.881 1461.81,683.881 1462.37,683.881 1462.93,683.881 1463.49,683.881 1464.05,683.881 1464.61,683.881 1465.17,683.881 1465.73,683.881 1466.29,683.881 1466.85,683.881 1467.41,683.881 1467.97,683.881 1468.52,683.881 1469.08,683.881 1469.64,683.881 1470.2,683.881 1470.76,683.881 1471.32,683.881 1471.88,683.881 1472.44,683.881 1473,683.881 1473.56,683.881 1474.12,683.881 1474.68,683.881 1475.24,683.881 1475.79,683.881 1476.35,683.881 1476.91,683.881 1477.47,683.881 1478.03,683.881 1478.59,683.881 1479.15,683.881 1479.71,683.881 1480.27,683.881 1480.83,683.881 1481.39,683.881 1481.95,683.881 1482.51,683.881 1483.07,683.881 1483.62,683.881 1484.18,683.881 1484.74,683.881 1485.3,683.881 1485.86,683.881 1486.42,683.881 1486.98,683.881 1487.54,683.881 1488.1,683.881 1488.66,683.881 1489.22,683.881 1489.78,683.881 1490.34,683.881 1490.89,683.881 1491.45,683.881 1492.01,683.881 1492.57,683.881 1493.13,683.881 1493.69,683.881 1494.25,683.881 1494.81,683.881 1495.37,683.881 1495.93,683.881 1496.49,683.881 1497.05,683.881 1497.61,683.881 1498.16,683.881 1498.72,683.881 1499.28,683.881 1499.84,683.881 1500.4,683.881 1500.96,683.881 1501.52,683.881 1502.08,683.881 1502.64,683.881 1503.2,683.881 1503.76,683.881 1504.32,683.881 1504.88,683.881 1505.44,683.881 1505.99,683.881 1506.55,683.881 1507.11,683.881 1507.67,683.881 1508.23,683.881 1508.79,683.881 1509.35,683.881 1509.91,683.881 1510.47,683.881 1511.03,683.881 1511.59,683.881 1512.15,683.881 1512.71,683.881 1513.26,683.881 1513.82,683.881 1514.38,683.881 1514.94,683.881 1515.5,683.881 1516.06,683.881 1516.62,683.881 1517.18,683.881 1517.74,683.881 1518.3,683.881 1518.86,683.881 1519.42,683.881 1519.98,683.881 1520.53,683.881 1521.09,683.881 1521.65,683.881 1522.21,683.881 1522.77,683.881 1523.33,683.881 1523.89,683.881 1524.45,683.881 1525.01,683.881 1525.57,683.881 1526.13,683.881 1526.69,683.881 1527.25,683.881 1527.81,683.881 1528.36,683.881 1528.92,683.881 1529.48,683.881 1530.04,683.881 1530.6,683.881 1531.16,683.881 1531.72,683.881 1532.28,683.881 1532.84,683.881 1533.4,683.881 1533.96,683.881 1534.52,683.881 1535.08,683.881 1535.63,683.881 1536.19,683.881 1536.75,683.881 1537.31,683.881 1537.87,683.881 1538.43,683.881 1538.99,683.881 1539.55,683.881 1540.11,683.881 1540.67,683.881 1541.23,683.881 1541.79,683.881 1542.35,683.881 1542.9,683.881 1543.46,683.881 1544.02,683.881 1544.58,683.881 1545.14,683.881 1545.7,683.881 1546.26,683.881 1546.82,683.881 1547.38,683.881 1547.94,683.881 1548.5,683.881 1549.06,683.881 1549.62,683.881 1550.18,683.881 1550.73,683.881 1551.29,683.881 1551.85,683.881 1552.41,683.881 1552.97,683.881 1553.53,683.881 1554.09,683.881 1554.65,683.881 1555.21,683.881 1555.77,683.881 1556.33,683.881 1556.89,683.881 1557.45,683.881 1558,683.881 1558.56,683.881 1559.12,683.881 1559.68,683.881 1560.24,683.881 1560.8,683.881 1561.36,683.881 1561.92,683.881 1562.48,683.881 1563.04,683.881 1563.6,683.881 1564.16,683.881 1564.72,683.881 1565.28,683.881 1565.83,683.881 1566.39,683.881 1566.95,683.881 1567.51,683.881 1568.07,683.881 1568.63,683.881 1569.19,683.881 1569.75,683.881 1570.31,683.881 1570.87,683.881 1571.43,683.881 1571.99,683.881 1572.55,683.881 1573.1,683.881 1573.66,683.881 1574.22,683.881 1574.78,683.881 1575.34,683.881 1575.9,683.881 1576.46,683.881 1577.02,683.881 1577.58,683.881 1578.14,683.881 1578.7,683.881 1579.26,683.881 1579.82,683.881 1580.37,683.881 1580.93,683.881 1581.49,683.881 1582.05,683.881 1582.61,683.881 1583.17,683.881 1583.73,683.881 1584.29,683.881 1584.85,683.881 1585.41,683.881 1585.97,683.881 1586.53,683.881 1587.09,683.881 1587.65,683.881 1588.2,683.881 1588.76,683.881 1589.32,683.881 1589.88,683.881 1590.44,683.881 1591,683.881 1591.56,683.881 1592.12,683.881 1592.68,683.881 1593.24,683.881 1593.8,683.881 1594.36,683.881 1594.92,683.881 1595.47,683.881 1596.03,683.881 1596.59,683.881 1597.15,683.881 1597.71,683.881 1598.27,683.881 1598.83,683.881 1599.39,683.881 1599.95,683.881 1600.51,683.881 1601.07,683.881 1601.63,683.881 1602.19,683.881 1602.74,683.881 1603.3,683.881 1603.86,683.881 1604.42,683.881 1604.98,683.881 1605.54,683.881 1606.1,683.881 1606.66,683.881 1607.22,683.881 1607.78,683.881 1608.34,683.881 1608.9,683.881 1609.46,683.881 1610.02,683.881 1610.57,683.881 1611.13,683.881 1611.69,683.881 1612.25,683.881 1612.81,683.881 1613.37,683.881 1613.93,683.881 1614.49,683.881 1615.05,683.881 1615.61,683.881 1616.17,683.881 1616.73,683.881 1617.29,683.881 1617.84,683.881 1618.4,683.881 1618.96,683.881 1619.52,683.881 1620.08,683.881 1620.64,683.881 1621.2,683.881 1621.76,683.881 1622.32,683.881 1622.88,683.881 1623.44,683.881 1624,683.881 1624.56,683.881 1625.11,683.881 1625.67,683.881 1626.23,683.881 1626.79,683.881 1627.35,683.881 1627.91,683.881 1628.47,683.881 1629.03,683.881 1629.59,683.881 1630.15,683.881 1630.71,683.881 1631.27,683.881 1631.83,683.881 1632.39,683.881 1632.94,683.881 1633.5,683.881 1634.06,683.881 1634.62,683.881 1635.18,683.881 1635.74,683.881 1636.3,683.881 1636.86,683.881 1637.42,683.881 1637.98,683.881 1638.54,683.881 1639.1,683.881 1639.66,683.881 1640.21,683.881 1640.77,683.881 1641.33,683.881 1641.89,683.881 1642.45,683.881 1643.01,683.881 1643.57,683.881 1644.13,683.881 1644.69,683.881 1645.25,683.881 1645.81,683.881 1646.37,683.881 1646.93,683.881 1647.48,683.881 1648.04,683.881 1648.6,683.881 1649.16,683.881 1649.72,683.881 1650.28,683.881 1650.84,683.881 1651.4,683.881 1651.96,683.881 1652.52,683.881 1653.08,683.881 1653.64,683.881 1654.2,683.881 1654.76,683.881 1655.31,683.881 1655.87,683.881 1656.43,683.881 1656.99,683.881 1657.55,683.881 1658.11,683.881 1658.67,683.881 1659.23,683.881 1659.79,683.881 1660.35,683.881 1660.91,683.881 1661.47,683.881 1662.03,683.881 1662.58,683.881 1663.14,683.881 1663.7,683.881 1664.26,683.881 1664.82,683.881 1665.38,683.881 1665.94,683.881 1666.5,683.881 1667.06,683.881 1667.62,683.881 1668.18,683.881 1668.74,683.881 1669.3,683.881 1669.85,683.881 1670.41,683.881 1670.97,683.881 1671.53,683.881 1672.09,683.881 1672.65,683.881 1673.21,683.881 1673.77,683.881 1674.33,683.881 1674.89,683.881 1675.45,683.881 1676.01,683.881 1676.57,683.881 1677.13,683.881 1677.68,683.881 1678.24,683.881 1678.8,683.881 1679.36,683.881 1679.92,683.881 1680.48,683.881 1681.04,683.881 1681.6,683.881 1682.16,683.881 1682.72,683.881 1683.28,683.881 1683.84,683.881 1684.4,683.881 1684.95,683.881 1685.51,683.881 1686.07,683.881 1686.63,683.881 1687.19,683.881 1687.75,683.881 1688.31,683.881 1688.87,683.881 1689.43,683.881 1689.99,683.881 1690.55,683.881 1691.11,683.881 1691.67,683.881 1692.23,683.881 1692.78,683.881 1693.34,683.881 1693.9,683.881 1694.46,683.881 1695.02,683.881 1695.58,683.881 1696.14,683.881 1696.7,683.881 1697.26,683.881 1697.82,683.881 1698.38,683.881 1698.94,683.881 1699.5,683.881 1700.05,683.881 1700.61,683.881 1701.17,683.881 1701.73,683.881 1702.29,683.881 1702.85,683.881 1703.41,683.881 1703.97,683.881 1704.53,683.881 1705.09,683.881 1705.65,683.881 1706.21,683.881 1706.77,683.881 1707.32,683.881 1707.88,683.881 1708.44,683.881 1709,683.881 1709.56,683.881 1710.12,683.881 1710.68,683.881 1711.24,683.881 1711.8,683.881 1712.36,683.881 1712.92,683.881 1713.48,683.881 1714.04,683.881 1714.6,683.881 1715.15,683.881 1715.71,683.881 1716.27,683.881 1716.83,683.881 1717.39,683.881 1717.95,683.881 1718.51,683.881 1719.07,683.881 1719.63,683.881 1720.19,683.881 1720.75,683.881 1721.31,683.881 1721.87,683.881 1722.42,683.881 1722.98,683.881 1723.54,683.881 1724.1,683.881 1724.66,683.881 1725.22,683.881 1725.78,683.881 1726.34,683.881 1726.9,683.881 1727.46,683.881 1728.02,683.881 1728.58,683.881 1729.14,683.881 1729.69,683.881 1730.25,683.881 1730.81,683.881 1731.37,683.881 1731.93,683.881 1732.49,683.881 1733.05,683.881 1733.61,683.881 1734.17,683.881 1734.73,683.881 1735.29,683.881 1735.85,683.881 1736.41,683.881 1736.97,683.881 1737.52,683.881 1738.08,683.881 1738.64,683.881 1739.2,683.881 1739.76,683.881 1740.32,683.881 1740.88,683.881 1741.44,683.881 1742,683.881 1742.56,683.881 1743.12,683.881 1743.68,683.881 1744.24,683.881 1744.79,683.881 1745.35,683.881 1745.91,683.881 1746.47,683.881 1747.03,683.881 1747.59,683.881 1748.15,683.881 1748.71,683.881 1749.27,683.881 1749.83,683.881 1750.39,683.881 1750.95,683.881 1751.51,683.881 1752.06,683.881 1752.62,683.881 1753.18,683.881 1753.74,683.881 1754.3,683.881 1754.86,683.881 1755.42,683.881 1755.98,683.881 1756.54,683.881 1757.1,683.881 1757.66,683.881 1758.22,683.881 1758.78,683.881 1759.34,683.881 1759.89,683.881 1760.45,683.881 1761.01,683.881 1761.57,683.881 1762.13,683.881 1762.69,683.881 1763.25,683.881 1763.81,683.881 1764.37,683.881 1764.93,683.881 1765.49,683.881 1766.05,683.881 1766.61,683.881 1767.16,683.881 1767.72,683.881 1768.28,683.881 1768.84,683.881 1769.4,683.881 1769.96,683.881 1770.52,683.881 1771.08,683.881 1771.64,683.881 1772.2,683.881 1772.76,683.881 1773.32,683.881 1773.88,683.881 1774.43,683.881 1774.99,683.881 1775.55,683.881 1776.11,683.881 1776.67,683.881 1777.23,683.881 1777.79,683.881 1778.35,683.881 1778.91,683.881 1779.47,683.881 1780.03,683.881 1780.59,683.881 1781.15,683.881 1781.71,683.881 1782.26,683.881 1782.82,683.881 1783.38,683.881 1783.94,683.881 1784.5,683.881 1785.06,683.881 1785.62,683.881 1786.18,683.881 1786.74,683.881 1787.3,683.881 1787.86,683.881 1788.42,683.881 1788.98,683.881 1789.53,683.881 1790.09,683.881 1790.65,683.881 1791.21,683.881 1791.77,683.881 1792.33,683.881 1792.89,683.881 1793.45,683.881 1794.01,683.881 1794.57,683.881 1795.13,683.881 1795.69,683.881 1796.25,683.881 1796.8,683.881 1797.36,683.881 1797.92,683.881 1798.48,683.881 1799.04,683.881 1799.6,683.881 1800.16,683.881 1800.72,683.881 1801.28,683.881 1801.84,683.881 1802.4,683.881 1802.96,683.881 1803.52,683.881 1804.08,683.881 1804.63,683.881 1805.19,683.881 1805.75,683.881 1806.31,683.881 1806.87,683.881 1807.43,683.881 1807.99,683.881 1808.55,683.881 1809.11,683.881 1809.67,683.881 1810.23,683.881 1810.79,683.881 1811.35,683.881 1811.9,683.881 1812.46,683.881 1813.02,683.881 1813.58,683.881 1814.14,683.881 1814.7,683.881 1815.26,683.881 1815.82,683.881 1816.38,683.881 1816.94,683.881 1817.5,683.881 1818.06,683.881 1818.62,683.881 1819.18,683.881 1819.73,683.881 1820.29,683.881 1820.85,683.881 1821.41,683.881 1821.97,683.881 1822.53,683.881 1823.09,683.881 1823.65,683.881 1824.21,683.881 1824.77,683.881 1825.33,683.881 1825.89,683.881 1826.45,683.881 1827,683.881 1827.56,683.881 1828.12,683.881 1828.68,683.881 1829.24,683.881 1829.8,683.881 1830.36,683.881 1830.92,683.881 1831.48,683.881 1832.04,683.881 1832.6,683.881 1833.16,683.881 1833.72,683.881 1834.27,683.881 1834.83,683.881 1835.39,683.881 1835.95,683.881 1836.51,683.881 1837.07,683.881 1837.63,683.881 1838.19,683.881 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027243647510798 ± 0.025790731184915306\nProjected Energy: -4.016578080846446 ± (0.004266463370454332, 0.003923732752350695)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.468625</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3355e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">8.927e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.766e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.343e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.655e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.855e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.3631242916133637\n -0.7590191922770888\n  0.13584182219622676\n  0.15789998694608087\n  0.8767114411781396\n  1.5305929970973295\n  1.5835732611867392\n  3.072870330325869\n  3.125672653951831\n  4.862107221562172\n  6.2606948503805935\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
