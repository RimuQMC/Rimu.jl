var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2117619401074893 ± 0.002507211752460333\n   G2(1) = 0.9167574864113327 ± 0.0011253266135497404\n   G2(2) = 0.98186456613983 ± 0.0004454366838242616\n   G2(3) = 0.9909939547901833 ± 0.0009144812551687195\n   G2(4) = 0.98186456613983 ± 0.0004454366838242616\n   G2(5) = 0.9167574864113327 ± 0.0011253266135497404\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.088658984949083 ± 0.16063039946972163\n   Replica 2: -4.002659232477402 ± 0.13173003618274398\n   Replica 3: -3.995616770334565 ± 0.1337182705458499\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.86 2211.02,1002.86 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.873 2211.02,744.873 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.886 2211.02,486.886 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.898 2211.02,228.898 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.86 423.181,1002.86 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.873 423.181,744.873 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.886 423.181,486.886 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.898 423.181,228.898 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.65 356.339 1246.65 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M290.043 1016.21 L306.363 1016.21 L306.363 1020.14 L284.418 1020.14 L284.418 1016.21 Q287.08 1013.45 291.664 1008.82 Q296.27 1004.17 297.451 1002.83 Q299.696 1000.3 300.576 998.567 Q301.478 996.807 301.478 995.118 Q301.478 992.363 299.534 990.627 Q297.613 988.891 294.511 988.891 Q292.312 988.891 289.858 989.655 Q287.427 990.418 284.65 991.969 L284.65 987.247 Q287.474 986.113 289.927 985.534 Q292.381 984.956 294.418 984.956 Q299.789 984.956 302.983 987.641 Q306.177 990.326 306.177 994.817 Q306.177 996.946 305.367 998.868 Q304.58 1000.77 302.474 1003.36 Q301.895 1004.03 298.793 1007.25 Q295.691 1010.44 290.043 1016.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 985.581 L334.58 985.581 L334.58 989.516 L320.506 989.516 L320.506 997.988 Q321.524 997.641 322.543 997.479 Q323.562 997.293 324.58 997.293 Q330.367 997.293 333.747 1000.46 Q337.126 1003.64 337.126 1009.05 Q337.126 1014.63 333.654 1017.73 Q330.182 1020.81 323.862 1020.81 Q321.687 1020.81 319.418 1020.44 Q317.173 1020.07 314.765 1019.33 L314.765 1014.63 Q316.849 1015.77 319.071 1016.32 Q321.293 1016.88 323.77 1016.88 Q327.774 1016.88 330.112 1014.77 Q332.45 1012.66 332.45 1009.05 Q332.45 1005.44 330.112 1003.34 Q327.774 1001.23 323.77 1001.23 Q321.895 1001.23 320.02 1001.65 Q318.168 1002.06 316.224 1002.94 L316.224 985.581 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 988.659 Q352.728 988.659 350.899 992.224 Q349.094 995.766 349.094 1002.9 Q349.094 1010 350.899 1013.57 Q352.728 1017.11 356.339 1017.11 Q359.973 1017.11 361.779 1013.57 Q363.608 1010 363.608 1002.9 Q363.608 995.766 361.779 992.224 Q359.973 988.659 356.339 988.659 M356.339 984.956 Q362.149 984.956 365.205 989.562 Q368.284 994.145 368.284 1002.9 Q368.284 1011.62 365.205 1016.23 Q362.149 1020.81 356.339 1020.81 Q350.529 1020.81 347.45 1016.23 Q344.395 1011.62 344.395 1002.9 Q344.395 994.145 347.45 989.562 Q350.529 984.956 356.339 984.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M286.062 727.593 L304.418 727.593 L304.418 731.528 L290.344 731.528 L290.344 740 Q291.363 739.653 292.381 739.491 Q293.4 739.306 294.418 739.306 Q300.205 739.306 303.585 742.477 Q306.964 745.648 306.964 751.065 Q306.964 756.644 303.492 759.746 Q300.02 762.824 293.701 762.824 Q291.525 762.824 289.256 762.454 Q287.011 762.084 284.603 761.343 L284.603 756.644 Q286.687 757.778 288.909 758.334 Q291.131 758.889 293.608 758.889 Q297.613 758.889 299.951 756.783 Q302.288 754.676 302.288 751.065 Q302.288 747.454 299.951 745.348 Q297.613 743.241 293.608 743.241 Q291.733 743.241 289.858 743.658 Q288.006 744.074 286.062 744.954 L286.062 727.593 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 730.672 Q322.566 730.672 320.737 734.237 Q318.932 737.778 318.932 744.908 Q318.932 752.014 320.737 755.579 Q322.566 759.121 326.177 759.121 Q329.811 759.121 331.617 755.579 Q333.446 752.014 333.446 744.908 Q333.446 737.778 331.617 734.237 Q329.811 730.672 326.177 730.672 M326.177 726.968 Q331.987 726.968 335.043 731.574 Q338.122 736.158 338.122 744.908 Q338.122 753.635 335.043 758.241 Q331.987 762.824 326.177 762.824 Q320.367 762.824 317.288 758.241 Q314.233 753.635 314.233 744.908 Q314.233 736.158 317.288 731.574 Q320.367 726.968 326.177 726.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 730.672 Q352.728 730.672 350.899 734.237 Q349.094 737.778 349.094 744.908 Q349.094 752.014 350.899 755.579 Q352.728 759.121 356.339 759.121 Q359.973 759.121 361.779 755.579 Q363.608 752.014 363.608 744.908 Q363.608 737.778 361.779 734.237 Q359.973 730.672 356.339 730.672 M356.339 726.968 Q362.149 726.968 365.205 731.574 Q368.284 736.158 368.284 744.908 Q368.284 753.635 365.205 758.241 Q362.149 762.824 356.339 762.824 Q350.529 762.824 347.45 758.241 Q344.395 753.635 344.395 744.908 Q344.395 736.158 347.45 731.574 Q350.529 726.968 356.339 726.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M284.835 469.606 L307.057 469.606 L307.057 471.596 L294.511 504.166 L289.627 504.166 L301.432 473.541 L284.835 473.541 L284.835 469.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 469.606 L334.58 469.606 L334.58 473.541 L320.506 473.541 L320.506 482.013 Q321.524 481.666 322.543 481.504 Q323.562 481.318 324.58 481.318 Q330.367 481.318 333.747 484.49 Q337.126 487.661 337.126 493.078 Q337.126 498.656 333.654 501.758 Q330.182 504.837 323.862 504.837 Q321.687 504.837 319.418 504.466 Q317.173 504.096 314.765 503.355 L314.765 498.656 Q316.849 499.791 319.071 500.346 Q321.293 500.902 323.77 500.902 Q327.774 500.902 330.112 498.795 Q332.45 496.689 332.45 493.078 Q332.45 489.467 330.112 487.36 Q327.774 485.254 323.77 485.254 Q321.895 485.254 320.02 485.67 Q318.168 486.087 316.224 486.967 L316.224 469.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 472.684 Q352.728 472.684 350.899 476.249 Q349.094 479.791 349.094 486.92 Q349.094 494.027 350.899 497.591 Q352.728 501.133 356.339 501.133 Q359.973 501.133 361.779 497.591 Q363.608 494.027 363.608 486.92 Q363.608 479.791 361.779 476.249 Q359.973 472.684 356.339 472.684 M356.339 468.981 Q362.149 468.981 365.205 473.587 Q368.284 478.17 368.284 486.92 Q368.284 495.647 365.205 500.254 Q362.149 504.837 356.339 504.837 Q350.529 504.837 347.45 500.254 Q344.395 495.647 344.395 486.92 Q344.395 478.17 347.45 473.587 Q350.529 468.981 356.339 468.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M256.664 242.243 L264.303 242.243 L264.303 215.877 L255.992 217.544 L255.992 213.285 L264.256 211.618 L268.932 211.618 L268.932 242.243 L276.571 242.243 L276.571 246.178 L256.664 246.178 L256.664 242.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M296.015 214.697 Q292.404 214.697 290.576 218.261 Q288.77 221.803 288.77 228.933 Q288.77 236.039 290.576 239.604 Q292.404 243.146 296.015 243.146 Q299.65 243.146 301.455 239.604 Q303.284 236.039 303.284 228.933 Q303.284 221.803 301.455 218.261 Q299.65 214.697 296.015 214.697 M296.015 210.993 Q301.826 210.993 304.881 215.599 Q307.96 220.183 307.96 228.933 Q307.96 237.66 304.881 242.266 Q301.826 246.849 296.015 246.849 Q290.205 246.849 287.127 242.266 Q284.071 237.66 284.071 228.933 Q284.071 220.183 287.127 215.599 Q290.205 210.993 296.015 210.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 214.697 Q322.566 214.697 320.737 218.261 Q318.932 221.803 318.932 228.933 Q318.932 236.039 320.737 239.604 Q322.566 243.146 326.177 243.146 Q329.811 243.146 331.617 239.604 Q333.446 236.039 333.446 228.933 Q333.446 221.803 331.617 218.261 Q329.811 214.697 326.177 214.697 M326.177 210.993 Q331.987 210.993 335.043 215.599 Q338.122 220.183 338.122 228.933 Q338.122 237.66 335.043 242.266 Q331.987 246.849 326.177 246.849 Q320.367 246.849 317.288 242.266 Q314.233 237.66 314.233 228.933 Q314.233 220.183 317.288 215.599 Q320.367 210.993 326.177 210.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 214.697 Q352.728 214.697 350.899 218.261 Q349.094 221.803 349.094 228.933 Q349.094 236.039 350.899 239.604 Q352.728 243.146 356.339 243.146 Q359.973 243.146 361.779 239.604 Q363.608 236.039 363.608 228.933 Q363.608 221.803 361.779 218.261 Q359.973 214.697 356.339 214.697 M356.339 210.993 Q362.149 210.993 365.205 215.599 Q368.284 220.183 368.284 228.933 Q368.284 237.66 365.205 242.266 Q362.149 246.849 356.339 246.849 Q350.529 246.849 347.45 242.266 Q344.395 237.66 344.395 228.933 Q344.395 220.183 347.45 215.599 Q350.529 210.993 356.339 210.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.898 4017.76,228.898 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1246.52 459.964,1246.02 460.533,1245.47 461.101,1243.81 461.669,1241.06 462.238,1239.31 462.806,1237.5 463.375,1236.67 463.943,1234.71 464.511,1233.76 465.08,1232.67 465.648,1230.46 466.216,1229.15 466.785,1226.7 467.353,1225.18 467.921,1223.5 468.49,1221.71 469.058,1217.68 469.626,1215.67 470.195,1212.45 470.763,1210.16 471.331,1206.73 471.9,1203.12 472.468,1200.4 473.036,1194.38 473.605,1191.37 474.173,1188.12 474.741,1183.7 475.31,1180.16 475.878,1174.32 476.446,1169.26 477.015,1165.32 477.583,1161.06 478.152,1156.53 478.72,1150.88 479.288,1142.95 479.857,1136.9 480.425,1130.73 480.993,1124.2 481.562,1118.63 482.13,1112.6 482.698,1104.43 483.267,1097.21 483.835,1088.8 484.403,1081.15 484.972,1073.31 485.54,1065.49 486.108,1058.29 486.677,1050.89 487.245,1042.34 487.813,1031.45 488.382,1019.43 488.95,1011.89 489.518,1001.92 490.087,992.905 490.655,979.72 491.224,969.599 491.792,960.369 492.36,952.186 492.929,942.662 493.497,934.256 494.065,923.495 494.634,913.917 495.202,905.196 495.77,893.409 496.339,881.668 496.907,871.916 497.475,862.152 498.044,850.324 498.612,841.753 499.18,831.95 499.749,821.183 500.317,811.475 500.885,800.81 501.454,793.258 502.022,783.296 502.59,773.488 503.159,763.529 503.727,752.614 504.295,739.693 504.864,731.14 505.432,721.486 506.001,712.033 506.569,701.384 507.137,691.912 507.706,679.658 508.274,671.667 508.842,662.461 509.411,653.43 509.979,643.364 510.547,632.546 511.116,624.989 511.684,616.587 512.252,609.065 512.821,602.697 513.389,594.247 513.957,587.033 514.526,577.611 515.094,568.376 515.662,561.449 516.231,553.633 516.799,546.941 517.367,539.291 517.936,528.649 518.504,520.349 519.072,511.16 519.641,505.287 520.209,498.466 520.778,489.78 521.346,484.185 521.914,476.789 522.483,470.636 523.051,465.333 523.619,460.49 524.188,451.401 524.756,442.439 525.324,437.291 525.893,432.254 526.461,426.285 527.029,420.314 527.598,415.396 528.166,413.091 528.734,408.546 529.303,405.192 529.871,399.504 530.439,394.197 531.008,391.026 531.576,387.811 532.144,384.544 532.713,379.339 533.281,376.516 533.85,374.695 534.418,371.712 534.986,367.743 535.555,364.896 536.123,359.952 536.691,357.08 537.26,355.305 537.828,351.722 538.396,346.95 538.965,343.595 539.533,339.292 540.101,336.085 540.67,333.131 541.238,332.274 541.806,329.173 542.375,327.21 542.943,324.267 543.511,321.549 544.08,317.836 544.648,315.015 545.216,314.414 545.785,314.876 546.353,313.063 546.921,311.258 547.49,309.641 548.058,307.923 548.627,305.184 549.195,303.534 549.763,301.186 550.332,298.763 550.9,296.417 551.468,295.271 552.037,290.956 552.605,290.024 553.173,288.949 553.742,285.936 554.31,282.992 554.878,283.264 555.447,282.215 556.015,280.445 556.583,277.705 557.152,277.026 557.72,278.451 558.288,278.698 558.857,275.821 559.425,274.951 559.993,272.309 560.562,271.653 561.13,271.895 561.698,270.232 562.267,270.578 562.835,270.917 563.404,270.44 563.972,269.524 564.54,269.871 565.109,269.112 565.677,268.376 566.245,266.45 566.814,264.682 567.382,264.136 567.95,262.679 568.519,262.09 569.087,260.577 569.655,260.084 570.224,257.831 570.792,257.605 571.36,255.327 571.929,253.211 572.497,250.935 573.065,250.012 573.634,249.133 574.202,247.301 574.77,247.537 575.339,247.884 575.907,244.959 576.476,245.463 577.044,243.778 577.612,244.21 578.181,245.782 578.749,242.955 579.317,240.456 579.886,238.964 580.454,237.491 581.022,238.239 581.591,237.908 582.159,239.408 582.727,238.062 583.296,238.871 583.864,240.393 584.432,241.038 585.001,242.538 585.569,240.814 586.137,241.292 586.706,241.99 587.274,241.372 587.842,240.658 588.411,237.198 588.979,238.794 589.547,239.496 590.116,240.16 590.684,238.825 591.253,239.653 591.821,240.15 592.389,239.711 592.958,242.214 593.526,243.387 594.094,245.619 594.663,247.694 595.231,246.61 595.799,248.586 596.368,248.254 596.936,245.916 597.504,243.624 598.073,242.739 598.641,243.7 599.209,243.598 599.778,244.604 600.346,243.343 600.914,242.388 601.483,240.726 602.051,240.994 602.619,241.403 603.188,239.459 603.756,237.78 604.325,237.997 604.893,235.302 605.461,237.609 606.03,237.952 606.598,237.097 607.166,237.413 607.735,236.663 608.303,236.087 608.871,235.487 609.44,234.78 610.008,235.189 610.576,236.542 611.145,234.9 611.713,235.455 612.281,238.009 612.85,236.986 613.418,236.224 613.986,237.703 614.555,236.944 615.123,235.223 615.691,236.854 616.26,237.262 616.828,237.475 617.396,237.868 617.965,240.154 618.533,239.282 619.102,238.354 619.67,239.571 620.238,238.499 620.807,239.547 621.375,238.754 621.943,237.488 622.512,237.531 623.08,238.001 623.648,236.127 624.217,237.394 624.785,237.629 625.353,236.639 625.922,236.861 626.49,236.975 627.058,237.223 627.627,238.421 628.195,239.429 628.763,237.273 629.332,234.209 629.9,231.348 630.468,234.921 631.037,236.032 631.605,235.283 632.173,236.562 632.742,236.502 633.31,236.377 633.879,236.53 634.447,238.879 635.015,239.77 635.584,240.736 636.152,241.75 636.72,241.46 637.289,238.955 637.857,236.016 638.425,235.148 638.994,235.005 639.562,235.153 640.13,235.459 640.699,235.643 641.267,235.706 641.835,233.864 642.404,235.115 642.972,236.152 643.54,236.01 644.109,235.091 644.677,238.141 645.245,236.96 645.814,237.099 646.382,236.785 646.951,239.942 647.519,236.641 648.087,235.393 648.656,234.237 649.224,234.347 649.792,233.313 650.361,233.526 650.929,233.945 651.497,235.167 652.066,235.344 652.634,236.318 653.202,237.288 653.771,237.051 654.339,238.261 654.907,239.173 655.476,238.999 656.044,237.482 656.612,238.342 657.181,236.839 657.749,233.481 658.317,232.191 658.886,232.345 659.454,233.209 660.022,233.218 660.591,233.35 661.159,233.447 661.728,238.632 662.296,237.43 662.864,234.26 663.433,234.115 664.001,235.905 664.569,234.525 665.138,231.222 665.706,229.162 666.274,230.494 666.843,230.798 667.411,231.153 667.979,231.497 668.548,233.736 669.116,236.604 669.684,235.231 670.253,234.343 670.821,236.465 671.389,234.16 671.958,235.217 672.526,235.911 673.094,235.534 673.663,235.263 674.231,235.313 674.799,235.082 675.368,234.034 675.936,235.079 676.505,233.642 677.073,233.693 677.641,233.555 678.21,234.547 678.778,234.503 679.346,234.587 679.915,233.413 680.483,230.472 681.051,230.457 681.62,230.491 682.188,231.437 682.756,233.382 683.325,233.175 683.893,233.834 684.461,232.803 685.03,230.806 685.598,230.707 686.166,229.661 686.735,229.741 687.303,229.867 687.871,231.889 688.44,230.833 689.008,231.041 689.577,229.811 690.145,230.961 690.713,233.059 691.282,232.15 691.85,233.232 692.418,233.005 692.987,233.03 693.555,228.857 694.123,227.067 694.692,228.256 695.26,227.415 695.828,227.738 696.397,226.148 696.965,225.509 697.533,225.966 698.102,226.318 698.67,226.981 699.238,228.013 699.807,228.228 700.375,228.408 700.943,229.684 701.512,229.851 702.08,229.051 702.648,228.184 703.217,228.125 703.785,229.605 704.354,230.01 704.922,231.299 705.49,232.557 706.059,232.636 706.627,232.63 707.195,234.749 707.764,233.171 708.332,232.914 708.9,231.912 709.469,232.712 710.037,231.547 710.605,231.604 711.174,232.697 711.742,232.638 712.31,231.274 712.879,231.323 713.447,231.395 714.015,231.467 714.584,230.533 715.152,231.602 715.72,231.418 716.289,232.286 716.857,231.127 717.425,231.247 717.994,232.285 718.562,232.26 719.131,232.052 719.699,232.976 720.267,231.748 720.836,234.728 721.404,233.617 721.972,233.558 722.541,233.466 723.109,231.161 723.677,233.389 724.246,233.285 724.814,233.054 725.382,232.929 725.951,229.694 726.519,229.794 727.087,226.704 727.656,228.038 728.224,231.413 728.792,230.344 729.361,230.249 729.929,229.316 730.497,230.356 731.066,229.325 731.634,229.692 732.203,231.793 732.771,231.705 733.339,230.61 733.908,229.605 734.476,229.556 735.044,228.659 735.613,227.939 736.181,228.207 736.749,226.415 737.318,225.738 737.886,226.165 738.454,225.122 739.023,226.613 739.591,225.958 740.159,225.138 740.728,223.498 741.296,222.875 741.864,222.498 742.433,225.228 743.001,226.916 743.569,227.106 744.138,228.513 744.706,228.983 745.274,227.328 745.843,229.73 746.411,228.795 746.98,227.881 747.548,227.246 748.116,228.693 748.685,228.011 749.253,229.345 749.821,228.672 750.39,229.003 750.958,229.011 751.526,228.071 752.095,229.332 752.663,228.4 753.231,228.537 753.8,227.727 754.368,225.798 754.936,226.306 755.505,226.686 756.073,228.189 756.641,229.684 757.21,230.016 757.778,231.228 758.346,231.356 758.915,232.535 759.483,231.579 760.052,231.539 760.62,232.701 761.188,233.421 761.757,231.272 762.325,233.26 762.893,234.293 763.462,236.235 764.03,235.005 764.598,234.735 765.167,234.452 765.735,234.392 766.303,234.185 766.872,236.082 767.44,236.822 768.008,236.455 768.577,236.095 769.145,236.779 769.713,237.211 770.282,239.743 770.85,238.994 771.418,238.484 771.987,238.728 772.555,238.221 773.123,237.816 773.692,235.265 774.26,232.874 774.829,231.672 775.397,230.42 775.965,232.11 776.534,231.767 777.102,231.492 777.67,230.505 778.239,229.308 778.807,229.247 779.375,227.28 779.944,227.543 780.512,227.862 781.08,227.969 781.649,225.897 782.217,226.101 782.785,225.195 783.354,224.542 783.922,226.044 784.49,226.182 785.059,225.357 785.627,224.67 786.195,225.001 786.764,225.478 787.332,224.711 787.9,225.048 788.469,225.603 789.037,227.241 789.606,225.422 790.174,225.717 790.742,225.189 791.311,226.665 791.879,226.814 792.447,226.205 793.016,225.501 793.584,224.906 794.152,225.304 794.721,227.796 795.289,227.192 795.857,223.6 796.426,225.362 796.994,227.845 797.562,226.985 798.131,227.126 798.699,228.38 799.267,228.523 799.836,227.701 800.404,231.115 800.972,231.132 801.541,231.164 802.109,231.168 802.678,232.189 803.246,234.451 803.814,234.188 804.383,232.95 804.951,231.679 805.519,232.457 806.088,231.405 806.656,235.34 807.224,232.948 807.793,231.718 808.361,230.68 808.929,229.668 809.498,228.74 810.066,229.845 810.634,230.948 811.203,232.286 811.771,231.159 812.339,231.118 812.908,225.868 813.476,225.286 814.044,225.748 814.613,228.114 815.181,230.437 815.749,230.396 816.318,231.635 816.886,230.671 817.455,232.805 818.023,232.647 818.591,230.69 819.16,230.639 819.728,228.649 820.296,226.763 820.865,227.047 821.433,227.135 822.001,227.515 822.57,227.833 823.138,228.006 823.706,230.126 824.275,231.258 824.843,232.093 825.411,233.951 825.98,233.766 826.548,232.652 827.116,235.544 827.685,235.295 828.253,232.937 828.821,233.766 829.39,232.211 829.958,231.929 830.526,230.917 831.095,228.915 831.663,230.209 832.232,230.214 832.8,229.143 833.368,229.351 833.937,229.563 834.505,229.621 835.073,228.593 835.642,229.836 836.21,227.807 836.778,226.956 837.347,229.388 837.915,229.4 838.483,229.486 839.052,229.407 839.62,227.306 840.188,227.713 840.757,228.913 841.325,230.103 841.893,232.384 842.462,232.105 843.03,234.004 843.598,234.636 844.167,236.325 844.735,234.956 845.304,234.424 845.872,235.293 846.44,232.774 847.009,233.476 847.577,232.255 848.145,228.913 848.714,228.61 849.282,227.64 849.85,225.755 850.419,226.014 850.987,224.071 851.555,223.343 852.124,224.838 852.692,226.443 853.26,227.757 853.829,225.84 854.397,227.334 854.965,227.536 855.534,227.593 856.102,227.892 856.67,227.722 857.239,230.95 857.807,230.808 858.375,231.615 858.944,230.312 859.512,230.377 860.081,230.452 860.649,230.584 861.217,228.428 861.786,224.483 862.354,226.801 862.922,228.165 863.491,230.279 864.059,225.989 864.627,224.404 865.196,225.654 865.764,226.868 866.332,228.01 866.901,229.217 867.469,228.404 868.037,228.595 868.606,227.742 869.174,228.967 869.742,230.19 870.311,233.303 870.879,233.09 871.447,232.825 872.016,232.714 872.584,235.53 873.152,235.034 873.721,235.726 874.289,235.371 874.858,235.044 875.426,233.62 875.994,234.241 876.563,233.896 877.131,236.565 877.699,236.096 878.268,236.654 878.836,235.041 879.404,233.586 879.973,234.344 880.541,234.09 881.109,231.623 881.678,232.409 882.246,233.049 882.814,231.678 883.383,230.314 883.951,229.054 884.519,228.927 885.088,229.935 885.656,229.74 886.224,229.514 886.793,228.41 887.361,227.468 887.93,228.391 888.498,230.37 889.066,230.095 889.635,230.126 890.203,230.021 890.771,229.13 891.34,229.275 891.908,229.343 892.476,229.217 893.045,227.747 893.613,227.77 894.181,226.805 894.75,227.106 895.318,229.159 895.886,230.363 896.455,229.176 897.023,228.188 897.591,229.292 898.16,230.245 898.728,229.096 899.296,227.974 899.865,227.818 900.433,230.869 901.001,229.715 901.57,230.638 902.138,230.601 902.707,230.409 903.275,229.566 903.843,230.893 904.412,229.775 904.98,228.679 905.548,226.469 906.117,226.54 906.685,228.763 907.253,229.005 907.822,230.019 908.39,228.959 908.958,226.818 909.527,228.033 910.095,230.098 910.663,230.136 911.232,230.079 911.8,228.931 912.368,227.712 912.937,226.801 913.505,228.849 914.073,226.632 914.642,224.845 915.21,226.073 915.779,227.351 916.347,228.46 916.915,229.421 917.484,229.272 918.052,228.09 918.62,228.146 919.189,231.07 919.757,233.89 920.325,232.327 920.894,232.084 921.462,232.734 922.03,231.576 922.599,232.358 923.167,233.111 923.735,232.827 924.304,231.51 924.872,231.032 925.44,232.848 926.009,232.317 926.577,232.856 927.145,231.44 927.714,231.187 928.282,233.196 928.85,234.036 929.419,232.634 929.987,231.125 930.556,230.813 931.124,231.468 931.692,233.178 932.261,232.708 932.829,230.234 933.397,230.999 933.966,232.85 934.534,231.425 935.102,231.296 935.671,232.003 936.239,229.696 936.807,229.422 937.376,227.205 937.944,228.219 938.512,227.152 939.081,225.972 939.649,225.117 940.217,224.157 940.786,224.49 941.354,225.705 941.922,225.927 942.491,225.983 943.059,227.087 943.627,227.267 944.196,226.165 944.764,225.313 945.333,225.559 945.901,225.72 946.469,226.911 947.038,227.153 947.606,228.132 948.174,228.199 948.743,227.349 949.311,228.343 949.879,228.262 950.448,227.286 951.016,225.231 951.584,224.407 952.153,222.875 952.721,223.16 953.289,222.655 953.858,224.148 954.426,226.734 954.994,227.937 955.563,224.276 956.131,223.318 956.699,226.983 957.268,228.083 957.836,231.395 958.405,230.274 958.973,230.18 959.541,231.12 960.11,229.952 960.678,229.925 961.246,230.817 961.815,228.534 962.383,226.48 962.951,229.59 963.52,227.428 964.088,229.736 964.656,229.88 965.225,229.613 965.793,229.598 966.361,229.657 966.93,228.5 967.498,227.544 968.066,227.66 968.635,227.908 969.203,228.057 969.771,226.067 970.34,226.307 970.908,227.658 971.476,227.885 972.045,226.162 972.613,228.582 973.182,228.669 973.75,226.585 974.318,225.669 974.887,224.868 975.455,224.457 976.023,225.859 976.592,226.088 977.16,227.64 977.728,223.54 978.297,223.884 978.865,226.389 979.433,228.727 980.002,227.76 980.57,228.979 981.138,229.989 981.707,228.942 982.275,226 982.843,230.369 983.412,230.227 983.98,230.393 984.548,229.565 985.117,230.559 985.685,229.618 986.253,230.723 986.822,230.946 987.39,230.99 987.959,230.794 988.527,231.687 989.095,231.601 989.664,230.236 990.232,230.364 990.8,232.324 991.369,233.147 991.937,229.902 992.505,229.653 993.074,232.715 993.642,232.821 994.21,234.908 994.779,234.501 995.347,233.929 995.915,233.749 996.484,233.419 997.052,234.371 997.62,233.077 998.189,229.779 998.757,230.859 999.325,230.724 999.894,229.334 1000.46,228.425 1001.03,227.255 1001.6,225.387 1002.17,225.696 1002.74,227.089 1003.3,228.083 1003.87,230.019 1004.44,228.067 1005.01,226.096 1005.58,224.143 1006.15,225.605 1006.71,226.939 1007.28,228.15 1007.85,229.123 1008.42,232.213 1008.99,233.839 1009.56,234.694 1010.12,233.352 1010.69,234.026 1011.26,232.908 1011.83,233.681 1012.4,231.2 1012.97,231.926 1013.53,231.554 1014.1,231.515 1014.67,230.324 1015.24,230.414 1015.81,232.409 1016.38,232.184 1016.94,235.223 1017.51,234.757 1018.08,234.241 1018.65,232.955 1019.22,233.469 1019.79,232.866 1020.35,232.34 1020.92,232.092 1021.49,230.557 1022.06,229.259 1022.63,230.269 1023.2,229.032 1023.76,229.034 1024.33,228.816 1024.9,229.757 1025.47,226.574 1026.04,226.717 1026.61,224.774 1027.17,223.017 1027.74,224.46 1028.31,225.659 1028.88,224.691 1029.45,225.227 1030.02,226.207 1030.58,226.45 1031.15,226.619 1031.72,227.788 1032.29,226.863 1032.86,225.924 1033.43,224.901 1033.99,226.121 1034.56,227.237 1035.13,227.314 1035.7,227.421 1036.27,228.587 1036.84,229.624 1037.4,229.6 1037.97,229.713 1038.54,230.461 1039.11,232.518 1039.68,233.363 1040.25,234.122 1040.81,232.706 1041.38,231.509 1041.95,230.107 1042.52,228.832 1043.09,228.836 1043.66,229.656 1044.22,228.759 1044.79,227.834 1045.36,230.129 1045.93,231.111 1046.5,232.148 1047.07,231.967 1047.63,230.891 1048.2,228.564 1048.77,229.62 1049.34,228.575 1049.91,227.495 1050.48,227.528 1051.05,226.752 1051.61,223.751 1052.18,226.212 1052.75,225.177 1053.32,224.116 1053.89,221.185 1054.46,221.895 1055.02,223.449 1055.59,224.889 1056.16,224.311 1056.73,223.65 1057.3,224.208 1057.87,224.548 1058.43,223.81 1059,225.183 1059.57,228.498 1060.14,228.563 1060.71,229.847 1061.28,230.756 1061.84,229.585 1062.41,228.653 1062.98,229.816 1063.55,230.811 1064.12,231.744 1064.69,231.678 1065.25,230.404 1065.82,231.429 1066.39,231.336 1066.96,232.295 1067.53,233.96 1068.1,232.534 1068.66,232.17 1069.23,230.989 1069.8,229.918 1070.37,228.639 1070.94,229.97 1071.51,229.937 1072.07,226.659 1072.64,225.714 1073.21,225.888 1073.78,225.15 1074.35,224.37 1074.92,223.755 1075.48,226.245 1076.05,224.486 1076.62,224.717 1077.19,226.143 1077.76,224.481 1078.33,224.792 1078.89,223.091 1079.46,222.551 1080.03,225.078 1080.6,226.553 1081.17,227.735 1081.74,228.886 1082.3,229.901 1082.87,231.678 1083.44,232.44 1084.01,233.295 1084.58,232.059 1085.15,231.77 1085.71,231.629 1086.28,231.52 1086.85,230.274 1087.42,232.127 1087.99,231.007 1088.56,228.896 1089.12,225.968 1089.69,226.279 1090.26,227.561 1090.83,226.547 1091.4,226.832 1091.97,224.005 1092.53,225.556 1093.1,226.827 1093.67,227.092 1094.24,228.304 1094.81,228.482 1095.38,227.473 1095.94,224.611 1096.51,225.793 1097.08,226.124 1097.65,230.436 1098.22,234.641 1098.79,235.131 1099.35,234.694 1099.92,235.604 1100.49,236.078 1101.06,237.811 1101.63,237.025 1102.2,235.59 1102.76,237.108 1103.33,234.684 1103.9,233.418 1104.47,232.015 1105.04,233.927 1105.61,232.415 1106.17,232.158 1106.74,231.704 1107.31,230.369 1107.88,230.257 1108.45,229.08 1109.02,229.981 1109.58,230.745 1110.15,231.892 1110.72,231.431 1111.29,231.145 1111.86,233.78 1112.43,231.252 1112.99,232.167 1113.56,231.9 1114.13,232.694 1114.7,232.27 1115.27,230.962 1115.84,230.805 1116.4,229.545 1116.97,228.296 1117.54,227.149 1118.11,227.336 1118.68,227.34 1119.25,224.416 1119.81,224.62 1120.38,223.839 1120.95,222.163 1121.52,222.346 1122.09,221.67 1122.66,223.078 1123.23,223.479 1123.79,223.939 1124.36,225.29 1124.93,224.415 1125.5,224.678 1126.07,223.828 1126.64,224.01 1127.2,224.446 1127.77,222.694 1128.34,224.133 1128.91,224.394 1129.48,224.847 1130.05,226.238 1130.61,227.422 1131.18,226.426 1131.75,226.793 1132.32,229.034 1132.89,230.083 1133.46,229.058 1134.02,228.992 1134.59,232.354 1135.16,231.128 1135.73,230.055 1136.3,229.101 1136.87,229.072 1137.43,227.252 1138,229.333 1138.57,230.575 1139.14,229.672 1139.71,230.636 1140.28,228.419 1140.84,229.6 1141.41,228.676 1141.98,229.608 1142.55,228.653 1143.12,228.795 1143.69,227.808 1144.25,228.251 1144.82,227.504 1145.39,227.668 1145.96,229.759 1146.53,230.826 1147.1,232.025 1147.66,231.661 1148.23,233.59 1148.8,233.186 1149.37,232.721 1149.94,233.701 1150.51,232.427 1151.07,231 1151.64,230.799 1152.21,230.707 1152.78,230.496 1153.35,227.339 1153.92,226.391 1154.48,227.588 1155.05,227.563 1155.62,226.659 1156.19,225.605 1156.76,229.013 1157.33,228.972 1157.89,229.054 1158.46,231.236 1159.03,230.926 1159.6,229.637 1160.17,227.333 1160.74,227.206 1161.3,227.402 1161.87,228.745 1162.44,228.835 1163.01,229.762 1163.58,229.867 1164.15,227.744 1164.71,228.697 1165.28,229.747 1165.85,229.838 1166.42,228.679 1166.99,229.777 1167.56,226.845 1168.12,226.935 1168.69,227.271 1169.26,228.557 1169.83,229.537 1170.4,230.673 1170.97,229.608 1171.53,230.806 1172.1,230.675 1172.67,230.484 1173.24,232.586 1173.81,231.995 1174.38,230.726 1174.94,230.751 1175.51,229.587 1176.08,230.539 1176.65,229.348 1177.22,227.283 1177.79,228.345 1178.35,227.289 1178.92,227.421 1179.49,228.736 1180.06,228.775 1180.63,229.876 1181.2,228.931 1181.76,224.78 1182.33,226.006 1182.9,226.236 1183.47,227.366 1184.04,228.431 1184.61,229.446 1185.17,227.611 1185.74,229.581 1186.31,228.489 1186.88,229.538 1187.45,229.398 1188.02,230.367 1188.58,230.343 1189.15,229.199 1189.72,225.946 1190.29,226.09 1190.86,227.174 1191.43,229.282 1192,229.337 1192.56,229.135 1193.13,230.149 1193.7,230.291 1194.27,229.017 1194.84,229.031 1195.41,228.788 1195.97,229.75 1196.54,232.713 1197.11,233.43 1197.68,233.099 1198.25,231.558 1198.82,229.471 1199.38,229.367 1199.95,227.938 1200.52,230.284 1201.09,228.985 1201.66,230.104 1202.23,230.899 1202.79,231.939 1203.36,231.837 1203.93,231.567 1204.5,231.36 1205.07,233.294 1205.64,235.023 1206.2,233.518 1206.77,233.174 1207.34,233.839 1207.91,236.618 1208.48,236.101 1209.05,235.589 1209.61,236.243 1210.18,234.554 1210.75,236.247 1211.32,233.496 1211.89,231.884 1212.46,230.42 1213.02,231.436 1213.59,229.061 1214.16,228.861 1214.73,229.754 1215.3,229.563 1215.87,230.441 1216.43,229.375 1217,227.354 1217.57,227.307 1218.14,225.171 1218.71,224.443 1219.28,224.882 1219.84,227.515 1220.41,228.604 1220.98,229.445 1221.55,228.251 1222.12,228.297 1222.69,228.35 1223.25,226.235 1223.82,226.441 1224.39,226.639 1224.96,226.844 1225.53,227.904 1226.1,227.982 1226.66,229.019 1227.23,229.964 1227.8,228.875 1228.37,229.863 1228.94,226.637 1229.51,225.573 1230.07,226.683 1230.64,227.849 1231.21,226.82 1231.78,225.897 1232.35,226.087 1232.92,227.238 1233.48,226.299 1234.05,224.527 1234.62,223.776 1235.19,224.242 1235.76,223.337 1236.33,223.625 1236.89,224.817 1237.46,223.828 1238.03,225.185 1238.6,226.366 1239.17,225.518 1239.74,224.788 1240.3,226.152 1240.87,223.434 1241.44,220.609 1242.01,224.288 1242.58,225.478 1243.15,224.671 1243.71,227.017 1244.28,228.219 1244.85,228.294 1245.42,227.146 1245.99,225.161 1246.56,221.453 1247.12,221.953 1247.69,221.549 1248.26,221.256 1248.83,223.93 1249.4,226.245 1249.97,226.75 1250.53,225.179 1251.1,224.657 1251.67,224.302 1252.24,222.952 1252.81,225.481 1253.38,226.002 1253.94,227.39 1254.51,225.591 1255.08,226.682 1255.65,227.12 1256.22,227.398 1256.79,229.6 1257.35,227.679 1257.92,228.861 1258.49,228.014 1259.06,228.174 1259.63,228.518 1260.2,229.701 1260.76,229.825 1261.33,228.821 1261.9,227.971 1262.47,228.264 1263.04,227.235 1263.61,229.382 1264.18,228.474 1264.74,230.625 1265.31,228.48 1265.88,230.418 1266.45,230.286 1267.02,228.393 1267.59,229.674 1268.15,229.63 1268.72,230.794 1269.29,230.878 1269.86,230.861 1270.43,230.89 1271,229.848 1271.56,232.047 1272.13,233.136 1272.7,231.153 1273.27,231.3 1273.84,232.261 1274.41,233.153 1274.97,231.803 1275.54,233.872 1276.11,231.726 1276.68,231.599 1277.25,229.297 1277.82,227.345 1278.38,230.599 1278.95,232.621 1279.52,232.724 1280.09,233.52 1280.66,233.277 1281.23,235.05 1281.79,232.468 1282.36,232.422 1282.93,233.167 1283.5,234.806 1284.07,234.504 1284.64,236.162 1285.2,234.686 1285.77,234.274 1286.34,231.888 1286.91,231.76 1287.48,233.721 1288.05,234.457 1288.61,236.041 1289.18,234.476 1289.75,233.032 1290.32,231.731 1290.89,231.606 1291.46,230.515 1292.02,231.45 1292.59,231.169 1293.16,229.922 1293.73,228.988 1294.3,227.885 1294.87,226.892 1295.43,227.047 1296,226.346 1296.57,227.624 1297.14,228.678 1297.71,230.702 1298.28,230.706 1298.84,228.319 1299.41,228.159 1299.98,228.373 1300.55,228.613 1301.12,228.459 1301.69,232.422 1302.25,233.094 1302.82,232.603 1303.39,231.33 1303.96,230.189 1304.53,230.172 1305.1,231.784 1305.66,231.447 1306.23,230.346 1306.8,231.264 1307.37,230.178 1307.94,229.979 1308.51,229.719 1309.07,228.645 1309.64,227.709 1310.21,226.773 1310.78,226.777 1311.35,226.97 1311.92,227.169 1312.48,229.327 1313.05,228.013 1313.62,229.235 1314.19,228.109 1314.76,228.181 1315.33,229.342 1315.89,229.123 1316.46,229.997 1317.03,229.894 1317.6,228.719 1318.17,229.656 1318.74,226.489 1319.3,225.537 1319.87,224.654 1320.44,226.857 1321.01,231.176 1321.58,230.904 1322.15,231.761 1322.71,231.346 1323.28,229.766 1323.85,229.426 1324.42,228.117 1324.99,227.264 1325.56,224.321 1326.12,222.434 1326.69,222.911 1327.26,223.315 1327.83,223.665 1328.4,223 1328.97,224.659 1329.53,227.113 1330.1,228.228 1330.67,229.285 1331.24,229.261 1331.81,230.068 1332.38,230.797 1332.94,230.791 1333.51,228.643 1334.08,228.537 1334.65,228.648 1335.22,230.738 1335.79,232.547 1336.36,232.236 1336.92,231.788 1337.49,231.487 1338.06,230.024 1338.63,231.845 1339.2,230.526 1339.77,230.143 1340.33,229.883 1340.9,228.741 1341.47,229.589 1342.04,229.625 1342.61,229.607 1343.18,229.442 1343.74,228.256 1344.31,231.345 1344.88,232.12 1345.45,232.136 1346.02,231.881 1346.59,230.893 1347.15,230.549 1347.72,229.996 1348.29,228.763 1348.86,230.79 1349.43,230.49 1350,230.415 1350.56,230.244 1351.13,227.879 1351.7,227.867 1352.27,227.872 1352.84,231.134 1353.41,230.709 1353.97,230.537 1354.54,229.996 1355.11,229.732 1355.68,228.57 1356.25,228.595 1356.82,227.517 1357.38,227.339 1357.95,227.234 1358.52,225.159 1359.09,227.124 1359.66,227.27 1360.23,227.233 1360.79,226.176 1361.36,227.343 1361.93,228.28 1362.5,228.284 1363.07,228.257 1363.64,225.017 1364.2,224.377 1364.77,225.821 1365.34,227.031 1365.91,227.158 1366.48,227.379 1367.05,228.372 1367.61,226.583 1368.18,226.605 1368.75,223.672 1369.32,223.95 1369.89,223.306 1370.46,221.546 1371.02,224.25 1371.59,225.531 1372.16,224.828 1372.73,224.903 1373.3,225.3 1373.87,226.782 1374.43,225.973 1375,227.157 1375.57,229.435 1376.14,229.389 1376.71,227.32 1377.28,227.688 1377.84,229.867 1378.41,231.084 1378.98,231.113 1379.55,230.017 1380.12,231.111 1380.69,233.042 1381.25,233.916 1381.82,234.666 1382.39,233.208 1382.96,233.039 1383.53,231.945 1384.1,232.757 1384.66,231.332 1385.23,231.115 1385.8,232.095 1386.37,229.735 1386.94,229.424 1387.51,230.391 1388.07,229.278 1388.64,229.382 1389.21,229.545 1389.78,229.485 1390.35,227.465 1390.92,226.596 1391.48,225.832 1392.05,228.286 1392.62,228.453 1393.19,229.506 1393.76,231.515 1394.33,231.299 1394.89,233.162 1395.46,233.918 1396.03,233.72 1396.6,233.527 1397.17,236.269 1397.74,235.655 1398.3,231.98 1398.87,232.565 1399.44,231.128 1400.01,229.845 1400.58,229.715 1401.15,226.895 1401.71,228.865 1402.28,229.821 1402.85,232.469 1403.42,232.415 1403.99,232.097 1404.56,230.85 1405.13,230.611 1405.69,230.431 1406.26,229.19 1406.83,231.11 1407.4,230.92 1407.97,230.594 1408.54,230.353 1409.1,230.207 1409.67,230.038 1410.24,228.991 1410.81,228.693 1411.38,227.353 1411.95,227.228 1412.51,226.073 1413.08,226.071 1413.65,228.322 1414.22,229.248 1414.79,227.235 1415.36,227.36 1415.92,224.343 1416.49,224.866 1417.06,224.98 1417.63,227.212 1418.2,227.419 1418.77,227.445 1419.33,226.479 1419.9,226.618 1420.47,226.77 1421.04,226.959 1421.61,226.985 1422.18,226.02 1422.74,226.266 1423.31,228.509 1423.88,227.505 1424.45,227.564 1425.02,226.585 1425.59,223.483 1426.15,223.743 1426.72,224.099 1427.29,223.113 1427.86,223.514 1428.43,226.751 1429,224.821 1429.56,223.073 1430.13,223.557 1430.7,222.952 1431.27,223.465 1431.84,227.922 1432.41,224.835 1432.97,224.333 1433.54,224.605 1434.11,227.051 1434.68,225.216 1435.25,225.626 1435.82,226.873 1436.38,227.26 1436.95,227.692 1437.52,227.837 1438.09,228.065 1438.66,229.016 1439.23,232.018 1439.79,230.9 1440.36,231.077 1440.93,230.13 1441.5,230.082 1442.07,230.087 1442.64,232.124 1443.2,231.786 1443.77,230.638 1444.34,230.718 1444.91,230.826 1445.48,231.645 1446.05,231.327 1446.61,228.938 1447.18,231.185 1447.75,228.946 1448.32,226.983 1448.89,226.973 1449.46,230.155 1450.02,228.111 1450.59,229.267 1451.16,227.151 1451.73,225.269 1452.3,222.419 1452.87,223.869 1453.43,223.256 1454,223.898 1454.57,225.304 1455.14,227.768 1455.71,227.915 1456.28,228.099 1456.84,229.325 1457.41,231.362 1457.98,231.344 1458.55,229.29 1459.12,229.216 1459.69,231.283 1460.25,232.202 1460.82,233.184 1461.39,233.963 1461.96,233.994 1462.53,231.758 1463.1,230.393 1463.66,230.402 1464.23,231.401 1464.8,231.199 1465.37,230.985 1465.94,232.862 1466.51,233.595 1467.07,233.174 1467.64,233.024 1468.21,233.83 1468.78,234.582 1469.35,234.14 1469.92,234.806 1470.48,234.33 1471.05,232.681 1471.62,233.22 1472.19,230.766 1472.76,231.389 1473.33,228.23 1473.89,227.207 1474.46,229.517 1475.03,228.233 1475.6,227.083 1476.17,227.082 1476.74,227.209 1477.31,225.176 1477.87,225.56 1478.44,225.675 1479.01,226.818 1479.58,225.817 1480.15,227.915 1480.72,230.108 1481.28,227.964 1481.85,228.954 1482.42,228.515 1482.99,229.548 1483.56,227.378 1484.13,227.68 1484.69,228.785 1485.26,227.937 1485.83,227.081 1486.4,226.12 1486.97,225.126 1487.54,224.368 1488.1,224.707 1488.67,226.09 1489.24,226.193 1489.81,229.447 1490.38,230.543 1490.95,231.673 1491.51,230.58 1492.08,230.428 1492.65,230.248 1493.22,230.149 1493.79,230.038 1494.36,230.991 1494.92,229.945 1495.49,230.198 1496.06,229.125 1496.63,228.369 1497.2,226.456 1497.77,228.581 1498.33,228.567 1498.9,230.629 1499.47,232.324 1500.04,230.977 1500.61,231.954 1501.18,231.843 1501.74,231.018 1502.31,229.806 1502.88,229.851 1503.45,229.786 1504.02,226.778 1504.59,226.99 1505.15,226.16 1505.72,226.176 1506.29,226.651 1506.86,227.528 1507.43,226.699 1508,226.937 1508.56,228.016 1509.13,228.032 1509.7,227.995 1510.27,227.051 1510.84,227.421 1511.41,229.549 1511.97,227.539 1512.54,226.644 1513.11,225.899 1513.68,225.104 1514.25,225.4 1514.82,225.842 1515.38,227.047 1515.95,228.186 1516.52,227.274 1517.09,227.267 1517.66,227.555 1518.23,227.687 1518.79,227.833 1519.36,227.871 1519.93,228.019 1520.5,228.223 1521.07,228.146 1521.64,229.011 1522.2,228.99 1522.77,228.974 1523.34,229.969 1523.91,231.836 1524.48,231.633 1525.05,231.572 1525.61,228.454 1526.18,229.67 1526.75,229.724 1527.32,230.905 1527.89,233.596 1528.46,233.274 1529.02,233.016 1529.59,232.586 1530.16,232.282 1530.73,232.009 1531.3,230.45 1531.87,228.157 1532.43,225.888 1533,225.832 1533.57,225.868 1534.14,225.975 1534.71,227.244 1535.28,228.458 1535.84,227.376 1536.41,225.365 1536.98,224.501 1537.55,224.672 1538.12,224.89 1538.69,224.243 1539.25,224.626 1539.82,223.968 1540.39,221.283 1540.96,221.871 1541.53,221.525 1542.1,222.105 1542.66,222.638 1543.23,224.242 1543.8,222.814 1544.37,223.176 1544.94,223.538 1545.51,227.078 1546.08,228.514 1546.64,228.586 1547.21,230.821 1547.78,231.81 1548.35,232.045 1548.92,232.18 1549.49,232.073 1550.05,229.836 1550.62,229.952 1551.19,231.159 1551.76,230.057 1552.33,232.15 1552.9,234.135 1553.46,233.748 1554.03,231.498 1554.6,231.37 1555.17,230.283 1555.74,231.254 1556.31,233.391 1556.87,234.102 1557.44,234.716 1558.01,235.347 1558.58,233.116 1559.15,232.709 1559.72,231.588 1560.28,232.239 1560.85,233.029 1561.42,231.873 1561.99,229.333 1562.56,227.334 1563.13,228.611 1563.69,229.735 1564.26,229.735 1564.83,230.57 1565.4,231.385 1565.97,230.023 1566.54,229.096 1567.1,228.968 1567.67,227.84 1568.24,227.861 1568.81,229.934 1569.38,231.061 1569.95,230.922 1570.51,230.605 1571.08,230.548 1571.65,230.6 1572.22,230.395 1572.79,229.145 1573.36,230.138 1573.92,228.931 1574.49,228.895 1575.06,227.871 1575.63,226.731 1576.2,226.916 1576.77,229.093 1577.33,228.049 1577.9,227.223 1578.47,227.697 1579.04,228.658 1579.61,228.624 1580.18,228.883 1580.74,227.784 1581.31,227.822 1581.88,227.911 1582.45,228.069 1583.02,227.034 1583.59,227.164 1584.15,228.494 1584.72,229.628 1585.29,231.614 1585.86,231.459 1586.43,232.32 1587,231.959 1587.56,228.902 1588.13,229.76 1588.7,230.628 1589.27,231.485 1589.84,234.364 1590.41,233.748 1590.97,233.075 1591.54,232.813 1592.11,231.818 1592.68,232.431 1593.25,232.352 1593.82,233.046 1594.38,231.576 1594.95,232.442 1595.52,235.231 1596.09,233.972 1596.66,235.525 1597.23,234.904 1597.79,235.394 1598.36,234.977 1598.93,233.342 1599.5,233.051 1600.07,234.383 1600.64,234.857 1601.2,235.517 1601.77,232.844 1602.34,232.601 1602.91,230.89 1603.48,230.644 1604.05,229.302 1604.61,228.241 1605.18,227.201 1605.75,228.026 1606.32,228.171 1606.89,226.057 1607.46,226.107 1608.02,226.286 1608.59,222.334 1609.16,224.695 1609.73,226.209 1610.3,225.237 1610.87,225.383 1611.43,226.458 1612,226.846 1612.57,227.912 1613.14,226.713 1613.71,225.827 1614.28,225.926 1614.84,224.93 1615.41,223.07 1615.98,221.669 1616.55,225.12 1617.12,224.365 1617.69,224.469 1618.26,226.713 1618.82,227.11 1619.39,227.123 1619.96,228.99 1620.53,231.009 1621.1,232.106 1621.67,231.822 1622.23,228.261 1622.8,228.389 1623.37,227.429 1623.94,227.288 1624.51,227.402 1625.08,227.463 1625.64,227.739 1626.21,225.857 1626.78,227.122 1627.35,228.228 1627.92,228.151 1628.49,229.377 1629.05,229.379 1629.62,229.325 1630.19,230.066 1630.76,229.885 1631.33,232.948 1631.9,232.567 1632.46,230.226 1633.03,231.107 1633.6,231.92 1634.17,231.744 1634.74,231.448 1635.31,231.354 1635.87,231.23 1636.44,230.925 1637.01,228.622 1637.58,227.537 1638.15,225.355 1638.72,224.624 1639.28,224.747 1639.85,225.163 1640.42,226.283 1640.99,225.463 1641.56,223.582 1642.13,225.07 1642.69,228.429 1643.26,228.525 1643.83,229.515 1644.4,228.36 1644.97,228.324 1645.54,227.194 1646.1,227.312 1646.67,228.278 1647.24,227.369 1647.81,228.532 1648.38,229.527 1648.95,229.465 1649.51,229.557 1650.08,227.468 1650.65,227.627 1651.22,225.708 1651.79,225.015 1652.36,225.387 1652.92,226.6 1653.49,225.591 1654.06,225.945 1654.63,226.27 1655.2,223.525 1655.77,222.918 1656.33,221.241 1656.9,221.918 1657.47,221.504 1658.04,222.095 1658.61,224.857 1659.18,224.336 1659.74,222.693 1660.31,222.375 1660.88,222.981 1661.45,222.373 1662.02,226.903 1662.59,228.431 1663.15,229.494 1663.72,231.648 1664.29,230.665 1664.86,229.427 1665.43,230.553 1666,230.559 1666.56,230.604 1667.13,227.29 1667.7,229.454 1668.27,231.627 1668.84,230.526 1669.41,230.378 1669.97,231.091 1670.54,228.954 1671.11,227.83 1671.68,228.925 1672.25,227.73 1672.82,228.874 1673.38,227.833 1673.95,225.938 1674.52,225.985 1675.09,225.061 1675.66,223.287 1676.23,221.582 1676.79,223.421 1677.36,222.893 1677.93,225.576 1678.5,223.963 1679.07,223.42 1679.64,222.887 1680.2,224.552 1680.77,224.155 1681.34,226.604 1681.91,227.985 1682.48,228.346 1683.05,226.687 1683.61,226.042 1684.18,226.445 1684.75,226.877 1685.32,226.148 1685.89,223.443 1686.46,225.085 1687.02,225.34 1687.59,227.026 1688.16,226.048 1688.73,229.539 1689.3,228.666 1689.87,229.784 1690.44,230.923 1691,231.089 1691.57,229.941 1692.14,234.262 1692.71,233.246 1693.28,232.392 1693.85,234.606 1694.41,236.546 1694.98,236.249 1695.55,234.636 1696.12,233.184 1696.69,234.242 1697.26,233.134 1697.82,232.006 1698.39,232.888 1698.96,231.796 1699.53,235.834 1700.1,236.703 1700.67,236.03 1701.23,236.513 1701.8,237.159 1702.37,239.845 1702.94,238.087 1703.51,238.548 1704.08,239.876 1704.64,238.151 1705.21,236.5 1705.78,235.847 1706.35,235.331 1706.92,232.472 1707.49,231.042 1708.05,230.656 1708.62,230.487 1709.19,229.007 1709.76,228.841 1710.33,228.74 1710.9,228.766 1711.46,228.892 1712.03,230.971 1712.6,230.734 1713.17,232.448 1713.74,232.065 1714.31,231.79 1714.87,230.619 1715.44,230.319 1716.01,226.078 1716.58,226.296 1717.15,226.313 1717.72,231.411 1718.28,231.422 1718.85,231.15 1719.42,231.915 1719.99,230.526 1720.56,230.21 1721.13,232.139 1721.69,234.771 1722.26,234.108 1722.83,231.465 1723.4,229.3 1723.97,227.081 1724.54,226.259 1725.1,226.303 1725.67,223.492 1726.24,224.624 1726.81,224.82 1727.38,225.294 1727.95,225.45 1728.51,227.853 1729.08,226.772 1729.65,228.013 1730.22,228.237 1730.79,228.116 1731.36,227.053 1731.92,227.041 1732.49,227.027 1733.06,226.149 1733.63,226.316 1734.2,225.562 1734.77,223.75 1735.33,223.026 1735.9,224.407 1736.47,226.037 1737.04,225.962 1737.61,226.075 1738.18,229.111 1738.74,231.192 1739.31,232.098 1739.88,231.764 1740.45,230.597 1741.02,231.64 1741.59,232.543 1742.15,232.354 1742.72,234.219 1743.29,233.809 1743.86,232.426 1744.43,231.27 1745,232.12 1745.56,233.038 1746.13,233.689 1746.7,232.121 1747.27,231.854 1747.84,232.602 1748.41,232.184 1748.97,230.951 1749.54,230.638 1750.11,228.166 1750.68,228.167 1751.25,229.256 1751.82,229.092 1752.38,231.048 1752.95,230.702 1753.52,229.502 1754.09,230.304 1754.66,231.272 1755.23,230.933 1755.79,230.678 1756.36,230.382 1756.93,229.076 1757.5,229.734 1758.07,230.356 1758.64,230.22 1759.21,229.874 1759.77,227.579 1760.34,226.647 1760.91,225.671 1761.48,226.799 1762.05,225.675 1762.62,226.829 1763.18,225.929 1763.75,228.01 1764.32,227.963 1764.89,227.826 1765.46,226.883 1766.03,227.897 1766.59,228.065 1767.16,229.174 1767.73,229.874 1768.3,229.842 1768.87,229.666 1769.44,228.629 1770,228.575 1770.57,228.62 1771.14,228.757 1771.71,228.761 1772.28,226.801 1772.85,227.568 1773.41,223.417 1773.98,223.594 1774.55,224.879 1775.12,225.078 1775.69,226.368 1776.26,225.478 1776.82,227.007 1777.39,225.945 1777.96,225.974 1778.53,223.111 1779.1,222.49 1779.67,222.974 1780.23,223.332 1780.8,221.7 1781.37,224.425 1781.94,225.939 1782.51,226.32 1783.08,224.54 1783.64,224.905 1784.21,223.258 1784.78,223.559 1785.35,222.895 1785.92,225.483 1786.49,227.011 1787.05,228.049 1787.62,229.264 1788.19,228.294 1788.76,227.095 1789.33,228.385 1789.9,228.466 1790.46,229.537 1791.03,231.584 1791.6,232.414 1792.17,230.199 1792.74,230.124 1793.31,230.185 1793.87,229.198 1794.44,228.181 1795.01,228.356 1795.58,227.448 1796.15,227.646 1796.72,227.931 1797.28,228.239 1797.85,229.206 1798.42,228.239 1798.99,229.461 1799.56,228.541 1800.13,227.502 1800.69,227.908 1801.26,226.955 1801.83,227.101 1802.4,227.234 1802.97,228.437 1803.54,226.661 1804.1,224.766 1804.67,228.262 1805.24,227.32 1805.81,228.675 1806.38,228.651 1806.95,226.823 1807.51,224.229 1808.08,223.441 1808.65,224.983 1809.22,224.208 1809.79,222.378 1810.36,223.035 1810.92,223.512 1811.49,224.089 1812.06,222.567 1812.63,221.957 1813.2,223.641 1813.77,225.236 1814.33,226.804 1814.9,229.22 1815.47,227.253 1816.04,227.292 1816.61,227.583 1817.18,229.807 1817.74,229.844 1818.31,231.765 1818.88,231.757 1819.45,231.733 1820.02,232.763 1820.59,230.747 1821.15,229.638 1821.72,233.599 1822.29,230.269 1822.86,229.135 1823.43,228 1824,232.405 1824.56,234.408 1825.13,233.134 1825.7,231.814 1826.27,232.581 1826.84,232.482 1827.41,229.154 1827.97,228.267 1828.54,229.361 1829.11,229.521 1829.68,229.31 1830.25,230.299 1830.82,230.319 1831.39,230.296 1831.95,230.337 1832.52,232.515 1833.09,231.275 1833.66,230.369 1834.23,229.31 1834.8,227.323 1835.36,226.547 1835.93,227.062 1836.5,226.189 1837.07,225.514 1837.64,229.101 1838.21,231.404 1838.77,230.282 1839.34,232.449 1839.91,231.355 1840.48,233.206 1841.05,234.038 1841.62,234.674 1842.18,233.403 1842.75,231.057 1843.32,231.031 1843.89,231.892 1844.46,231.577 1845.03,230.266 1845.59,230.217 1846.16,230.202 1846.73,229 1847.3,228.883 1847.87,225.875 1848.44,228.309 1849,228.468 1849.57,229.753 1850.14,231.001 1850.71,231.825 1851.28,229.583 1851.85,229.715 1852.41,229.625 1852.98,229.66 1853.55,230.606 1854.12,231.593 1854.69,230.547 1855.26,229.529 1855.82,230.451 1856.39,229.375 1856.96,228.49 1857.53,229.786 1858.1,229.562 1858.67,228.496 1859.23,228.474 1859.8,229.68 1860.37,229.804 1860.94,227.783 1861.51,227.898 1862.08,228.981 1862.64,233.066 1863.21,229.762 1863.78,228.66 1864.35,230.783 1864.92,228.5 1865.49,230.624 1866.05,229.732 1866.62,228.565 1867.19,229.725 1867.76,230.676 1868.33,231.63 1868.9,233.631 1869.46,236.234 1870.03,236.749 1870.6,238.978 1871.17,239.38 1871.74,239.615 1872.31,238.818 1872.87,238.133 1873.44,236.292 1874.01,234.728 1874.58,232.26 1875.15,231.104 1875.72,229.795 1876.28,229.383 1876.85,230.322 1877.42,232.257 1877.99,230.878 1878.56,229.625 1879.13,228.609 1879.69,229.57 1880.26,229.435 1880.83,231.38 1881.4,231.074 1881.97,228.736 1882.54,228.774 1883.1,227.539 1883.67,227.572 1884.24,226.699 1884.81,226.905 1885.38,228.121 1885.95,227.954 1886.51,226.546 1887.08,225.378 1887.65,224.672 1888.22,224.804 1888.79,225.163 1889.36,225.444 1889.92,227.492 1890.49,227.383 1891.06,225.381 1891.63,225.476 1892.2,225.709 1892.77,224.875 1893.33,223.937 1893.9,224.254 1894.47,225.624 1895.04,224.847 1895.61,224.156 1896.18,228.32 1896.74,226.325 1897.31,228.58 1897.88,229.441 1898.45,228.423 1899.02,228.504 1899.59,228.604 1900.16,229.571 1900.72,229.568 1901.29,228.544 1901.86,227.487 1902.43,227.784 1903,227.945 1903.57,230.087 1904.13,230.885 1904.7,232.754 1905.27,229.386 1905.84,229.41 1906.41,228.256 1906.98,229.351 1907.54,225.174 1908.11,225.28 1908.68,225.733 1909.25,228.035 1909.82,229.217 1910.39,226.141 1910.95,225.259 1911.52,225.439 1912.09,224.591 1912.66,224.796 1913.23,224.177 1913.8,224.355 1914.36,224.804 1914.93,228.124 1915.5,226.138 1916.07,224.225 1916.64,223.504 1917.21,223.518 1917.77,222.843 1918.34,225.246 1918.91,225.758 1919.48,228.112 1920.05,229.311 1920.62,229.266 1921.18,231.346 1921.75,232.056 1922.32,231.045 1922.89,229.883 1923.46,231.951 1924.03,232.749 1924.59,231.77 1925.16,231.579 1925.73,232.397 1926.3,231.009 1926.87,230.808 1927.44,232.685 1928,232.305 1928.57,232.022 1929.14,229.992 1929.71,227.013 1930.28,227.108 1930.85,226.379 1931.41,226.162 1931.98,225.479 1932.55,226.485 1933.12,226.681 1933.69,227.942 1934.26,227.936 1934.82,225.983 1935.39,227.137 1935.96,230.284 1936.53,231.174 1937.1,230.974 1937.67,229.957 1938.23,230.775 1938.8,228.53 1939.37,229.82 1939.94,229.63 1940.51,227.65 1941.08,229.942 1941.64,229.753 1942.21,228.538 1942.78,228.328 1943.35,227.395 1943.92,226.27 1944.49,226.59 1945.05,227.944 1945.62,229.34 1946.19,230.559 1946.76,230.545 1947.33,231.602 1947.9,230.426 1948.46,228.524 1949.03,232.729 1949.6,232.231 1950.17,232.088 1950.74,232.703 1951.31,231.561 1951.87,231.482 1952.44,230.514 1953.01,227.337 1953.58,226.297 1954.15,228.627 1954.72,228.994 1955.28,230.994 1955.85,230.91 1956.42,230.792 1956.99,231.803 1957.56,230.519 1958.13,229.544 1958.69,230.73 1959.26,231.426 1959.83,231.343 1960.4,231.336 1960.97,231.301 1961.54,230.036 1962.1,229.918 1962.67,229.762 1963.24,229.788 1963.81,230.797 1964.38,228.544 1964.95,229.526 1965.51,230.445 1966.08,230.322 1966.65,231.269 1967.22,229.795 1967.79,229.708 1968.36,230.826 1968.92,231.571 1969.49,231.549 1970.06,231.616 1970.63,230.427 1971.2,230.362 1971.77,232.306 1972.34,230.974 1972.9,228.841 1973.47,228.666 1974.04,228.732 1974.61,229.515 1975.18,229.33 1975.75,228.301 1976.31,227.206 1976.88,225.221 1977.45,224.198 1978.02,225.734 1978.59,226.871 1979.16,227.063 1979.72,228.308 1980.29,228.48 1980.86,230.628 1981.43,230.45 1982,229.121 1982.57,226.893 1983.13,228.048 1983.7,227.189 1984.27,229.363 1984.84,230.158 1985.41,229.071 1985.98,231.232 1986.54,231.001 1987.11,229.871 1987.68,229.748 1988.25,229.78 1988.82,229.808 1989.39,227.623 1989.95,228.931 1990.52,229.007 1991.09,228.05 1991.66,229.192 1992.23,228.43 1992.8,230.534 1993.36,230.492 1993.93,229.385 1994.5,227.247 1995.07,227.25 1995.64,227.35 1996.21,226.411 1996.77,227.624 1997.34,227.481 1997.91,226.701 1998.48,226.887 1999.05,227.972 1999.62,230.455 2000.18,231.231 2000.75,231.116 2001.32,227.781 2001.89,228.883 2002.46,227.839 2003.03,226.82 2003.59,227.919 2004.16,229.771 2004.73,227.763 2005.3,227.821 2005.87,229.547 2006.44,228.481 2007,231.2 2007.57,229.94 2008.14,231.785 2008.71,231.283 2009.28,231.12 2009.85,231.783 2010.41,232.546 2010.98,233.38 2011.55,233.06 2012.12,232.677 2012.69,232.364 2013.26,232.033 2013.82,231.882 2014.39,231.784 2014.96,231.575 2015.53,230.249 2016.1,230.121 2016.67,229.951 2017.23,230.911 2017.8,229.619 2018.37,231.738 2018.94,229.458 2019.51,229.454 2020.08,228.504 2020.64,228.23 2021.21,227.153 2021.78,227.272 2022.35,227.433 2022.92,228.251 2023.49,226.127 2024.05,224.244 2024.62,225.455 2025.19,227.833 2025.76,228.95 2026.33,231.104 2026.9,229.901 2027.46,229.739 2028.03,228.7 2028.6,229.465 2029.17,230.479 2029.74,227.47 2030.31,228.533 2030.87,227.487 2031.44,227.644 2032.01,225.714 2032.58,224.936 2033.15,222.976 2033.72,223.371 2034.28,224.713 2034.85,224.87 2035.42,227.179 2035.99,227.187 2036.56,225.321 2037.13,224.557 2037.69,222.929 2038.26,222.256 2038.83,223.802 2039.4,224.327 2039.97,224.697 2040.54,226.03 2041.11,225.24 2041.67,227.722 2042.24,228.776 2042.81,229.999 2043.38,230.978 2043.95,230.95 2044.52,230.823 2045.08,232.805 2045.65,231.467 2046.22,228.184 2046.79,227.088 2047.36,226.154 2047.93,228.294 2048.49,228.183 2049.06,228.272 2049.63,228.207 2050.2,229.46 2050.77,229.384 2051.34,230.249 2051.9,231.269 2052.47,231.08 2053.04,231.823 2053.61,232.762 2054.18,233.429 2054.75,234.075 2055.31,232.895 2055.88,232.48 2056.45,230.163 2057.02,229.213 2057.59,229.051 2058.16,228.971 2058.72,223.943 2059.29,221.138 2059.86,222.686 2060.43,225.384 2061,224.56 2061.57,224.908 2062.13,224.3 2062.7,223.697 2063.27,222.203 2063.84,222.806 2064.41,221.132 2064.98,219.895 2065.54,220.595 2066.11,224.57 2066.68,228.076 2067.25,228.108 2067.82,228.248 2068.39,228.373 2068.95,228.503 2069.52,228.482 2070.09,227.6 2070.66,225.669 2071.23,226.018 2071.8,228.405 2072.36,229.813 2072.93,230.856 2073.5,232.887 2074.07,233.525 2074.64,235.327 2075.21,236.927 2075.77,235.542 2076.34,236.036 2076.91,237.583 2077.48,235.886 2078.05,234.318 2078.62,234.743 2079.18,235.248 2079.75,234.87 2080.32,235.413 2080.89,238.114 2081.46,234.273 2082.03,232.928 2082.59,232.55 2083.16,232.29 2083.73,230.955 2084.3,230.883 2084.87,229.648 2085.44,228.472 2086,229.473 2086.57,229.121 2087.14,227.984 2087.71,227.892 2088.28,227.798 2088.85,227.878 2089.41,225.664 2089.98,224.906 2090.55,223.065 2091.12,221.43 2091.69,225.075 2092.26,226.369 2092.82,226.705 2093.39,226.655 2093.96,227.831 2094.53,227.95 2095.1,228.994 2095.67,229.113 2096.23,230.139 2096.8,229.955 2097.37,228.974 2097.94,229.888 2098.51,230.714 2099.08,230.683 2099.64,230.601 2100.21,230.353 2100.78,232.329 2101.35,232.192 2101.92,231.749 2102.49,229.416 2103.05,227.149 2103.62,226.083 2104.19,228.366 2104.76,228.268 2105.33,228.037 2105.9,228.06 2106.46,227.042 2107.03,228.28 2107.6,227.33 2108.17,224.318 2108.74,225.571 2109.31,224.613 2109.87,227.895 2110.44,227.002 2111.01,228.168 2111.58,228.167 2112.15,228.189 2112.72,227.221 2113.29,226.276 2113.85,229.428 2114.42,229.234 2114.99,228.986 2115.56,227.83 2116.13,228.768 2116.7,230.586 2117.26,227.137 2117.83,231.208 2118.4,229.992 2118.97,231.067 2119.54,229.771 2120.11,229.653 2120.67,229.599 2121.24,228.794 2121.81,227.634 2122.38,225.633 2122.95,226.682 2123.52,226.879 2124.08,228.345 2124.65,224.174 2125.22,228.617 2125.79,232.878 2126.36,232.734 2126.93,231.321 2127.49,229.099 2128.06,230.169 2128.63,230.192 2129.2,231.182 2129.77,231.091 2130.34,230.779 2130.9,232.763 2131.47,231.443 2132.04,233.417 2132.61,230.982 2133.18,228.731 2133.75,228.642 2134.31,228.653 2134.88,227.873 2135.45,228.855 2136.02,228.978 2136.59,225.792 2137.16,225.068 2137.72,227.478 2138.29,224.58 2138.86,224.007 2139.43,223.442 2140,225.833 2140.57,227.142 2141.13,226.271 2141.7,227.784 2142.27,226.862 2142.84,229.041 2143.41,227.994 2143.98,230.262 2144.54,228.222 2145.11,229.423 2145.68,231.579 2146.25,232.255 2146.82,230.101 2147.39,231.033 2147.95,230.902 2148.52,229.716 2149.09,231.792 2149.66,229.603 2150.23,229.508 2150.8,229.399 2151.36,232.52 2151.93,231.978 2152.5,232.744 2153.07,233.368 2153.64,232.824 2154.21,230.502 2154.77,229.317 2155.34,231.322 2155.91,228.966 2156.48,228.822 2157.05,230.96 2157.62,229.761 2158.18,226.409 2158.75,227.433 2159.32,226.408 2159.89,226.436 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.018\n  with uncertainty of ± 0.0011284966282405187\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01435 ± (0.00234152, 0.0024367) (MC)\n  95% confidence interval: [-4.01935, -4.00956]) (MC)\n  linear error propagation: -4.01473 ± 0.00243001\n  |δ_y| = |0.00237203| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014346339069928, val_l = 0.005001245004016219, val_u = 0.004790901181078944)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip640\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip641\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip642\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1122.88 2211.02,1122.88 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,926.187 2211.02,926.187 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,729.495 2211.02,729.495 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,532.802 2211.02,532.802 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,336.11 2211.02,336.11 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1122.88 365.751,1122.88 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,926.187 365.751,926.187 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,729.495 365.751,729.495 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,532.802 365.751,532.802 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,336.11 365.751,336.11 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M298.909 1108.68 Q295.298 1108.68 293.469 1112.24 Q291.664 1115.78 291.664 1122.91 Q291.664 1130.02 293.469 1133.59 Q295.298 1137.13 298.909 1137.13 Q302.543 1137.13 304.349 1133.59 Q306.177 1130.02 306.177 1122.91 Q306.177 1115.78 304.349 1112.24 Q302.543 1108.68 298.909 1108.68 M298.909 1104.97 Q304.719 1104.97 307.775 1109.58 Q310.853 1114.16 310.853 1122.91 Q310.853 1131.64 307.775 1136.25 Q304.719 1140.83 298.909 1140.83 Q293.099 1140.83 290.02 1136.25 Q286.964 1131.64 286.964 1122.91 Q286.964 1114.16 290.02 1109.58 Q293.099 1104.97 298.909 1104.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M259.557 939.532 L267.196 939.532 L267.196 913.166 L258.886 914.833 L258.886 910.574 L267.15 908.907 L271.826 908.907 L271.826 939.532 L279.465 939.532 L279.465 943.467 L259.557 943.467 L259.557 939.532 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 911.986 Q295.298 911.986 293.469 915.551 Q291.664 919.092 291.664 926.222 Q291.664 933.328 293.469 936.893 Q295.298 940.435 298.909 940.435 Q302.543 940.435 304.349 936.893 Q306.177 933.328 306.177 926.222 Q306.177 919.092 304.349 915.551 Q302.543 911.986 298.909 911.986 M298.909 908.282 Q304.719 908.282 307.775 912.889 Q310.853 917.472 310.853 926.222 Q310.853 934.949 307.775 939.555 Q304.719 944.138 298.909 944.138 Q293.099 944.138 290.02 939.555 Q286.964 934.949 286.964 926.222 Q286.964 917.472 290.02 912.889 Q293.099 908.282 298.909 908.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M262.775 742.839 L279.094 742.839 L279.094 746.775 L257.15 746.775 L257.15 742.839 Q259.812 740.085 264.395 735.455 Q269.002 730.802 270.182 729.46 Q272.428 726.937 273.307 725.201 Q274.21 723.441 274.21 721.752 Q274.21 718.997 272.266 717.261 Q270.344 715.525 267.242 715.525 Q265.043 715.525 262.59 716.289 Q260.159 717.053 257.381 718.603 L257.381 713.881 Q260.205 712.747 262.659 712.168 Q265.113 711.59 267.15 711.59 Q272.52 711.59 275.715 714.275 Q278.909 716.96 278.909 721.451 Q278.909 723.58 278.099 725.502 Q277.312 727.4 275.205 729.992 Q274.627 730.664 271.525 733.881 Q268.423 737.076 262.775 742.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 715.293 Q295.298 715.293 293.469 718.858 Q291.664 722.4 291.664 729.529 Q291.664 736.636 293.469 740.201 Q295.298 743.742 298.909 743.742 Q302.543 743.742 304.349 740.201 Q306.177 736.636 306.177 729.529 Q306.177 722.4 304.349 718.858 Q302.543 715.293 298.909 715.293 M298.909 711.59 Q304.719 711.59 307.775 716.196 Q310.853 720.779 310.853 729.529 Q310.853 738.256 307.775 742.863 Q304.719 747.446 298.909 747.446 Q293.099 747.446 290.02 742.863 Q286.964 738.256 286.964 729.529 Q286.964 720.779 290.02 716.196 Q293.099 711.59 298.909 711.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M272.914 531.448 Q276.27 532.165 278.145 534.434 Q280.043 536.702 280.043 540.036 Q280.043 545.152 276.525 547.952 Q273.006 550.753 266.525 550.753 Q264.349 550.753 262.034 550.314 Q259.742 549.897 257.289 549.04 L257.289 544.527 Q259.233 545.661 261.548 546.239 Q263.863 546.818 266.386 546.818 Q270.784 546.818 273.076 545.082 Q275.39 543.346 275.39 540.036 Q275.39 536.98 273.238 535.267 Q271.108 533.531 267.289 533.531 L263.261 533.531 L263.261 529.689 L267.474 529.689 Q270.923 529.689 272.752 528.323 Q274.58 526.934 274.58 524.341 Q274.58 521.679 272.682 520.267 Q270.807 518.832 267.289 518.832 Q265.367 518.832 263.168 519.249 Q260.969 519.666 258.33 520.545 L258.33 516.379 Q260.992 515.638 263.307 515.267 Q265.645 514.897 267.705 514.897 Q273.029 514.897 276.131 517.328 Q279.233 519.735 279.233 523.855 Q279.233 526.726 277.59 528.716 Q275.946 530.684 272.914 531.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 518.601 Q295.298 518.601 293.469 522.166 Q291.664 525.707 291.664 532.837 Q291.664 539.943 293.469 543.508 Q295.298 547.05 298.909 547.05 Q302.543 547.05 304.349 543.508 Q306.177 539.943 306.177 532.837 Q306.177 525.707 304.349 522.166 Q302.543 518.601 298.909 518.601 M298.909 514.897 Q304.719 514.897 307.775 519.504 Q310.853 524.087 310.853 532.837 Q310.853 541.564 307.775 546.17 Q304.719 550.753 298.909 550.753 Q293.099 550.753 290.02 546.17 Q286.964 541.564 286.964 532.837 Q286.964 524.087 290.02 519.504 Q293.099 514.897 298.909 514.897 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M271.594 322.904 L259.789 341.353 L271.594 341.353 L271.594 322.904 M270.367 318.83 L276.247 318.83 L276.247 341.353 L281.177 341.353 L281.177 345.241 L276.247 345.241 L276.247 353.39 L271.594 353.39 L271.594 345.241 L255.992 345.241 L255.992 340.728 L270.367 318.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 321.908 Q295.298 321.908 293.469 325.473 Q291.664 329.015 291.664 336.144 Q291.664 343.251 293.469 346.815 Q295.298 350.357 298.909 350.357 Q302.543 350.357 304.349 346.815 Q306.177 343.251 306.177 336.144 Q306.177 329.015 304.349 325.473 Q302.543 321.908 298.909 321.908 M298.909 318.205 Q304.719 318.205 307.775 322.811 Q310.853 327.394 310.853 336.144 Q310.853 344.871 307.775 349.478 Q304.719 354.061 298.909 354.061 Q293.099 354.061 290.02 349.478 Q286.964 344.871 286.964 336.144 Q286.964 327.394 290.02 322.811 Q293.099 318.205 298.909 318.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,977.951 400.199,844.806 400.786,722.64 401.372,610.716 401.958,508.352 402.545,414.918 403.131,329.828 403.718,502.125 404.304,422.214 404.891,347.248 405.477,379.566 406.063,490.154 406.65,501.913 407.236,509.851 407.823,446.752 408.409,453.406 408.995,395.231 409.582,343.774 410.168,351.977 410.755,308.325 411.341,318.245 411.927,281.179 412.514,248.976 413.1,219.895 413.687,274.022 414.273,247.071 414.86,259.065 415.446,236.99 416.032,247.526 416.619,258.183 417.205,241.301 417.792,304.395 418.378,289.257 418.964,277.8 419.551,289.006 420.137,279.391 420.724,311.26 421.31,324.435 421.896,315.813 422.483,310.959 423.069,308.71 423.656,321.281 424.242,362.518 424.829,374.607 425.415,385.909 426.001,399.305 426.588,399.744 427.174,404.05 427.761,429.063 428.347,442.156 428.933,464.691 429.52,478.121 430.106,491.629 430.693,503.517 431.279,509.238 431.865,515.623 432.452,529.518 433.038,558.743 433.625,593.377 434.211,597.051 434.798,615.333 435.384,626.732 435.97,661.392 436.557,677.234 437.143,687.495 437.73,691.793 438.316,702.583 438.902,707.405 439.489,723.232 440.075,732.98 440.662,738.519 441.248,757.326 441.835,775.314 442.421,784.562 443.007,793.646 443.594,810.64 444.18,814.797 444.767,823.55 445.353,835.713 445.939,843.916 446.526,855.4 447.112,856.108 447.699,865.031 448.285,873.413 448.871,882.27 449.458,894.141 450.044,912.146 450.631,916.773 451.217,924.775 451.804,932.242 452.39,943.216 452.976,950.893 453.563,966.356 454.149,970.206 454.736,977.452 455.322,984.343 455.908,994.046 456.495,1005.76 457.081,1009.33 457.668,1015.16 458.254,1018.97 458.84,1020.11 459.427,1026.43 460.013,1029.96 460.6,1038.83 461.186,1047.4 461.773,1050.82 462.359,1056.42 462.945,1059.64 463.532,1065.15 464.118,1077.39 464.705,1084.68 465.291,1094.03 465.877,1096.5 466.464,1101.11 467.05,1109.77 467.637,1112.2 468.223,1118.47 468.809,1122.37 469.396,1124.71 469.982,1126.26 470.569,1136.38 471.155,1146.41 471.742,1149.18 472.328,1151.87 472.914,1156.48 473.501,1161.24 474.087,1164.15 474.674,1162.25 475.26,1164.64 475.846,1164.93 476.433,1169.67 477.019,1173.84 477.606,1174.21 478.192,1174.75 478.778,1175.48 479.365,1179.84 479.951,1180.01 480.538,1178.46 481.124,1179.06 481.711,1181.52 482.297,1182.08 482.883,1186.46 483.47,1187.3 484.056,1186.27 484.643,1188.5 485.229,1192.91 485.815,1194.97 486.402,1198.77 486.988,1200.79 487.575,1202.46 488.161,1200.59 488.748,1202.62 489.334,1202.78 489.92,1204.68 490.507,1206.28 491.093,1209.65 491.68,1211.61 492.266,1209.88 492.852,1206.38 493.439,1206.71 494.025,1207.09 494.612,1207.2 495.198,1207.53 495.784,1209.63 496.371,1209.99 496.957,1211.56 497.544,1213.32 498.13,1215.02 498.717,1214.8 499.303,1219.86 499.889,1219.45 500.476,1219.31 501.062,1222.39 501.649,1225.44 502.235,1223.3 502.821,1223.31 503.408,1224.54 503.994,1227.41 504.581,1226.99 505.167,1223.17 505.753,1221.21 506.34,1224.35 506.926,1224.3 507.513,1227.16 508.099,1226.87 508.686,1225.15 509.272,1226.51 509.858,1224.66 510.445,1222.81 511.031,1222.28 511.618,1222.47 512.204,1220.64 512.79,1220.6 513.377,1220.54 513.963,1222.42 514.55,1224.11 515.136,1223.87 515.722,1225.13 516.309,1225.02 516.895,1226.42 517.482,1226.23 518.068,1228.88 518.655,1228.34 519.241,1231.1 519.827,1233.65 520.414,1236.53 521,1237.31 521.587,1238.06 522.173,1240.34 522.759,1239.4 523.346,1238.27 523.932,1242.32 524.519,1241.03 525.105,1243.18 525.691,1242.04 526.278,1239.09 526.864,1243.03 527.451,1246.54 528.037,1248.52 528.624,1250.53 529.21,1249.09 529.796,1249.32 530.383,1246.69 530.969,1248.48 531.556,1246.94 532.142,1244.24 532.728,1242.87 533.315,1240.13 533.901,1242.43 534.488,1241.31 535.074,1239.83 535.661,1240.4 536.247,1241.15 536.833,1246.22 537.42,1243.46 538.006,1242.06 538.593,1240.69 539.179,1242.44 539.765,1240.83 540.352,1239.72 540.938,1240.07 541.525,1235.8 542.111,1233.54 542.697,1229.57 543.284,1225.77 543.87,1226.91 544.457,1223.23 545.043,1223.15 545.63,1226.26 546.216,1229.36 546.802,1230.3 547.389,1228.36 547.975,1228.07 548.562,1226.03 549.148,1227.53 549.734,1228.6 550.321,1230.8 550.907,1230.02 551.494,1229 552.08,1231.67 552.666,1233.99 553.253,1233.37 553.839,1237.32 554.426,1233.51 555.012,1232.7 555.599,1233.77 556.185,1233.02 556.771,1233.94 557.358,1234.6 557.944,1235.32 558.531,1236.22 559.117,1235.4 559.703,1233.09 560.29,1235.43 560.876,1234.38 561.463,1230.18 562.049,1231.5 562.635,1232.45 563.222,1229.9 563.808,1230.82 564.395,1233.27 564.981,1230.53 565.568,1229.64 566.154,1229.05 566.74,1228.17 567.327,1224.31 567.913,1225.33 568.5,1226.47 569.086,1224.27 569.672,1225.63 570.259,1223.69 570.845,1224.61 571.432,1226.29 572.018,1225.96 572.605,1224.96 573.191,1227.62 573.777,1225.41 574.364,1224.78 574.95,1226.07 575.537,1225.48 576.123,1225.06 576.709,1224.43 577.296,1222.29 577.882,1220.41 578.469,1223.48 579.055,1228.02 579.641,1232.32 580.228,1226.67 580.814,1224.74 581.401,1225.7 581.987,1223.5 582.574,1223.36 583.16,1223.32 583.746,1222.85 584.333,1218.94 584.919,1217.23 585.506,1215.38 586.092,1213.42 586.678,1213.48 587.265,1217.03 587.851,1221.33 588.438,1222.48 589.024,1222.51 589.61,1222.09 590.197,1221.42 590.783,1220.93 591.37,1220.63 591.956,1223.3 592.543,1221.19 593.129,1219.38 593.715,1219.38 594.302,1220.6 594.888,1215.63 595.475,1217.2 596.061,1216.73 596.647,1216.98 597.234,1211.78 597.82,1216.62 598.407,1218.34 598.993,1219.95 599.579,1219.61 600.166,1221.06 600.752,1220.6 601.339,1219.8 601.925,1217.73 602.512,1217.26 603.098,1215.54 603.684,1213.79 604.271,1213.91 604.857,1211.76 605.444,1210.04 606.03,1210 606.616,1212.07 607.203,1210.46 607.789,1212.53 608.376,1217.54 608.962,1219.41 609.548,1219.07 610.135,1217.62 610.721,1217.47 611.308,1217.13 611.894,1216.85 612.481,1208.59 613.067,1210.18 613.653,1214.88 614.24,1214.94 614.826,1211.98 615.413,1213.93 615.999,1218.91 616.585,1222.05 617.172,1219.97 617.758,1219.44 618.345,1218.83 618.931,1218.23 619.518,1214.65 620.104,1210.02 620.69,1211.93 621.277,1213.13 621.863,1209.64 622.45,1213.02 623.036,1211.2 623.622,1209.92 624.209,1210.3 624.795,1210.52 625.382,1210.24 625.968,1210.41 626.554,1211.86 627.141,1210.07 627.727,1212.13 628.314,1211.9 628.9,1211.97 629.487,1210.28 630.073,1210.17 630.659,1209.87 631.246,1211.53 631.832,1215.98 632.419,1215.96 633.005,1215.86 633.591,1214.33 634.178,1211.22 634.764,1211.41 635.351,1210.25 635.937,1211.71 636.523,1214.7 637.11,1214.8 637.696,1216.37 638.283,1216.22 638.869,1216 639.456,1212.82 640.042,1214.38 640.628,1213.99 641.215,1215.84 641.801,1214.02 642.388,1210.69 642.974,1211.98 643.56,1210.19 644.147,1210.41 644.733,1210.25 645.32,1216.63 645.906,1219.41 646.492,1217.62 647.079,1218.94 647.665,1218.49 648.252,1220.99 648.838,1222.07 649.425,1221.46 650.011,1221 650.597,1220.05 651.184,1218.51 651.77,1218.2 652.357,1217.94 652.943,1215.97 653.529,1215.69 654.116,1216.9 654.702,1218.25 655.289,1218.36 655.875,1216.08 656.462,1215.43 657.048,1213.39 657.634,1211.35 658.221,1211.12 658.807,1211.01 659.394,1207.59 659.98,1209.88 660.566,1210.15 661.153,1211.59 661.739,1210.25 662.326,1211.95 662.912,1211.78 663.498,1209.99 664.085,1209.97 664.671,1211.98 665.258,1211.83 665.844,1211.65 666.431,1211.46 667.017,1212.83 667.603,1211.12 668.19,1211.32 668.776,1209.89 669.363,1211.59 669.949,1211.34 670.535,1209.65 671.122,1209.58 671.708,1209.81 672.295,1208.27 672.881,1210.06 673.467,1205.32 674.054,1206.88 674.64,1206.82 675.227,1206.83 675.813,1210.28 676.4,1206.74 676.986,1206.76 677.572,1206.99 678.159,1207.06 678.745,1211.98 679.332,1211.8 679.918,1216.57 680.504,1214.57 681.091,1209.34 681.677,1210.93 682.264,1211.03 682.85,1212.45 683.436,1210.81 684.023,1212.37 684.609,1211.79 685.196,1208.49 685.782,1208.54 686.369,1210.16 686.955,1211.68 687.541,1211.73 688.128,1213.1 688.714,1214.23 689.301,1213.84 689.887,1216.65 690.473,1217.77 691.06,1217.21 691.646,1218.91 692.233,1216.71 692.819,1217.8 693.405,1219.16 693.992,1221.81 694.578,1222.94 695.165,1223.7 695.751,1219.67 696.338,1217.17 696.924,1216.93 697.51,1214.8 698.097,1214.08 698.683,1216.65 699.27,1212.97 699.856,1214.39 700.442,1215.82 701.029,1216.84 701.615,1214.64 702.202,1215.7 702.788,1213.66 703.375,1214.69 703.961,1214.18 704.547,1214.17 705.134,1215.62 705.72,1213.69 706.307,1215.13 706.893,1214.93 707.479,1216.2 708.066,1219.23 708.652,1218.53 709.239,1218.02 709.825,1215.76 710.411,1213.45 710.998,1212.91 711.584,1210.99 712.171,1210.72 712.757,1208.8 713.344,1210.18 713.93,1210.16 714.516,1208.27 715.103,1207.03 715.689,1210.25 716.276,1207.07 716.862,1205.32 717.448,1202.12 718.035,1203.82 718.621,1204.06 719.208,1204.32 719.794,1204.24 720.38,1204.4 720.967,1201.27 721.553,1199.89 722.14,1200.22 722.726,1200.56 723.313,1199.26 723.899,1198.35 724.485,1194.12 725.072,1194.96 725.658,1195.45 726.245,1194.78 726.831,1195.27 727.417,1195.62 728.004,1199.34 728.59,1202.89 729.177,1204.64 729.763,1206.51 730.349,1203.83 730.936,1204.26 731.522,1204.6 732.109,1206.06 732.695,1207.88 733.282,1207.96 733.868,1211.01 734.454,1210.65 735.041,1210.19 735.627,1210.06 736.214,1213.3 736.8,1213.08 737.386,1214.57 737.973,1215.69 738.559,1213.5 739.146,1213.37 739.732,1214.73 740.318,1215.91 740.905,1215.52 741.491,1214.9 742.078,1216.19 742.664,1215.8 743.251,1215.06 743.837,1212.61 744.423,1215.49 745.01,1215.13 745.596,1216.05 746.183,1213.87 746.769,1213.71 747.355,1214.72 747.942,1215.89 748.528,1216.92 749.115,1216.42 749.701,1212.67 750.288,1213.64 750.874,1219.26 751.46,1216.69 752.047,1212.94 752.633,1214.31 753.22,1214.15 753.806,1212.26 754.392,1212.05 754.979,1213.34 755.565,1208.06 756.152,1207.97 756.738,1207.85 757.324,1207.78 757.911,1206.11 758.497,1202.48 759.084,1202.72 759.67,1204.5 760.257,1206.35 760.843,1205.06 761.429,1206.59 762.016,1200.36 762.602,1203.91 763.189,1205.7 763.775,1207.23 764.361,1208.76 764.948,1210.18 765.534,1208.46 766.121,1206.71 766.707,1204.57 767.293,1206.22 767.88,1206.21 768.466,1214.31 769.053,1215.3 769.639,1214.7 770.226,1211.12 770.812,1207.53 771.398,1207.55 771.985,1205.57 772.571,1206.99 773.158,1203.61 773.744,1203.73 774.33,1206.67 774.917,1206.7 775.503,1209.74 776.09,1212.68 776.676,1212.3 777.262,1212.22 777.849,1211.68 778.435,1211.23 779.022,1211 779.608,1207.73 780.195,1205.93 780.781,1204.55 781.367,1201.55 781.954,1201.69 782.54,1203.28 783.127,1198.64 783.713,1198.83 784.299,1202.32 784.886,1200.9 785.472,1203.18 786.059,1203.52 786.645,1205 787.232,1208.06 787.818,1206.05 788.404,1206 788.991,1207.62 789.577,1207.29 790.164,1206.95 790.75,1206.84 791.336,1208.42 791.923,1206.49 792.509,1209.62 793.096,1210.97 793.682,1207.25 794.268,1207.22 794.855,1207.07 795.441,1207.17 796.028,1210.43 796.614,1209.84 797.201,1208.01 797.787,1206.16 798.373,1202.57 798.96,1202.9 799.546,1199.83 800.133,1198.69 800.719,1195.87 801.305,1197.78 801.892,1198.43 802.478,1196.9 803.065,1200.65 803.651,1199.43 804.237,1201.2 804.824,1206.3 805.41,1206.77 805.997,1208.29 806.583,1211.25 807.17,1210.95 807.756,1214.04 808.342,1215.32 808.929,1213.17 809.515,1210.81 810.102,1208.84 810.688,1211.85 811.274,1209.63 811.861,1209.36 812.447,1209.31 813.034,1208.89 813.62,1209.18 814.206,1204.2 814.793,1204.36 815.379,1203.04 815.966,1204.99 816.552,1204.84 817.139,1204.68 817.725,1204.43 818.311,1207.73 818.898,1213.87 819.484,1210.41 820.071,1208.35 820.657,1205.09 821.243,1211.71 821.83,1214.26 822.416,1212.46 823.003,1210.67 823.589,1208.96 824.175,1207.11 824.762,1208.37 825.348,1208.08 825.935,1209.42 826.521,1207.55 827.108,1205.64 827.694,1200.75 828.28,1200.95 828.867,1201.23 829.453,1201.29 830.04,1196.77 830.626,1197.34 831.212,1196.07 831.799,1196.42 832.385,1196.73 832.972,1198.77 833.558,1197.65 834.145,1198.03 834.731,1193.7 835.317,1194.2 835.904,1193.11 836.49,1195.39 837.077,1197.48 837.663,1196.15 838.249,1196.38 838.836,1200.08 839.422,1198.77 840.009,1197.66 840.595,1199.67 841.181,1201.71 841.768,1203.63 842.354,1203.83 842.941,1202.26 843.527,1202.53 844.114,1202.85 844.7,1204.55 845.286,1206.03 845.873,1204.64 846.459,1201.58 847.046,1201.96 847.632,1201.87 848.218,1202 848.805,1203.35 849.391,1203.12 849.978,1203 850.564,1203.19 851.15,1205.46 851.737,1205.46 852.323,1206.99 852.91,1206.59 853.496,1203.45 854.083,1201.57 854.669,1203.37 855.255,1204.9 855.842,1203.21 856.428,1201.71 857.015,1203.46 857.601,1205.2 858.187,1205.47 858.774,1200.76 859.36,1202.49 859.947,1201.03 860.533,1201.03 861.119,1201.28 861.706,1202.55 862.292,1200.46 862.879,1202.14 863.465,1203.82 864.052,1207.26 864.638,1207.22 865.224,1203.84 865.811,1203.47 866.397,1201.89 866.984,1203.5 867.57,1206.83 868.156,1205 868.743,1201.82 869.329,1201.72 869.916,1201.77 870.502,1203.52 871.089,1205.42 871.675,1206.87 872.261,1203.75 872.848,1207.2 873.434,1210.04 874.021,1208.26 874.607,1206.36 875.193,1204.68 875.78,1203.2 876.366,1203.42 876.953,1205.24 877.539,1205.18 878.125,1200.65 878.712,1196.19 879.298,1198.47 879.885,1198.75 880.471,1197.64 881.058,1199.33 881.644,1198.02 882.23,1196.74 882.817,1197.06 883.403,1198.99 883.99,1199.66 884.576,1196.76 885.162,1197.47 885.749,1196.52 886.335,1198.61 886.922,1198.93 887.508,1195.72 888.094,1194.28 888.681,1196.31 889.267,1198.55 889.854,1198.97 890.44,1197.89 891.027,1195.14 891.613,1195.75 892.199,1199.49 892.786,1198.25 893.372,1195.3 893.959,1197.41 894.545,1197.53 895.131,1196.35 895.718,1199.85 896.304,1200.26 896.891,1203.69 897.477,1202.16 898.063,1203.84 898.65,1205.73 899.236,1207.14 899.823,1208.74 900.409,1208.37 900.996,1206.62 901.582,1206.37 902.168,1206.38 902.755,1204.75 903.341,1204.53 903.928,1206.29 904.514,1207.7 905.1,1207.42 905.687,1207.27 906.273,1205.52 906.86,1205.21 907.446,1203.74 908.032,1203.66 908.619,1205 909.205,1203.5 909.792,1203.65 910.378,1205.18 910.965,1208.42 911.551,1209.81 912.137,1212.32 912.724,1212.06 913.31,1213.01 913.897,1210.89 914.483,1207.03 915.069,1205.23 915.656,1210.93 916.242,1212.56 916.829,1207.05 917.415,1205.4 918.002,1200.27 918.588,1201.94 919.174,1202.04 919.761,1200.54 920.347,1202.29 920.934,1202.3 921.52,1200.88 922.106,1204.38 922.693,1207.58 923.279,1202.82 923.866,1206.16 924.452,1202.61 925.038,1202.36 925.625,1202.75 926.211,1202.75 926.798,1202.64 927.384,1204.41 927.971,1205.91 928.557,1205.77 929.143,1205.43 929.73,1205.22 930.316,1208.34 930.903,1208.05 931.489,1206.03 932.075,1205.72 932.662,1208.43 933.248,1204.75 933.835,1204.63 934.421,1207.87 935.007,1209.36 935.594,1210.7 936.18,1211.46 936.767,1209.42 937.353,1209.16 937.94,1206.84 938.526,1213.23 939.112,1212.86 939.699,1209.13 940.285,1205.58 940.872,1207.09 941.458,1205.23 942.044,1203.65 942.631,1205.25 943.217,1209.82 943.804,1203.11 944.39,1203.29 944.976,1202.99 945.563,1204.23 946.149,1202.67 946.736,1204.08 947.322,1202.34 947.909,1201.93 948.495,1201.8 949.081,1202.04 949.668,1200.6 950.254,1200.64 950.841,1202.69 951.427,1202.45 952.013,1199.35 952.6,1197.96 953.186,1202.89 953.773,1203.25 954.359,1198.45 954.945,1198.17 955.532,1194.79 956.118,1195.24 956.705,1195.96 957.291,1196.09 957.878,1196.46 958.464,1194.83 959.05,1196.68 959.637,1201.7 960.223,1199.99 960.81,1200.14 961.396,1202.25 961.982,1203.65 962.569,1205.48 963.155,1208.43 963.742,1208.06 964.328,1205.99 964.915,1204.51 965.501,1201.52 966.087,1204.52 966.674,1207.61 967.26,1210.72 967.847,1208.6 968.433,1206.63 969.019,1204.81 969.606,1203.32 970.192,1198.5 970.779,1195.86 971.365,1194.37 971.951,1196.29 972.538,1195.1 973.124,1196.69 973.711,1195.36 974.297,1199.08 974.884,1197.88 975.47,1198.37 976.056,1198.35 976.643,1200.13 977.229,1199.94 977.816,1196.78 978.402,1197.03 978.988,1192.18 979.575,1192.72 980.161,1193.34 980.748,1195.19 981.334,1194.26 981.92,1195.06 982.507,1195.76 983.093,1196.05 983.68,1198.34 984.266,1200.31 984.853,1198.73 985.439,1200.61 986.025,1200.61 986.612,1200.94 987.198,1199.48 987.785,1204.4 988.371,1204.25 988.957,1207.33 989.544,1210.17 990.13,1208.12 990.717,1206.39 991.303,1207.99 991.889,1207.29 992.476,1205.88 993.062,1205.59 993.649,1205.4 994.235,1203.65 994.822,1205.13 995.408,1206.64 995.994,1208.32 996.581,1206.55 997.167,1204.9 997.754,1204.83 998.34,1204.72 998.926,1202.95 999.513,1201.35 1000.1,1201.36 1000.69,1201.16 1001.27,1199.97 1001.86,1196.72 1002.44,1195.29 1003.03,1193.97 1003.62,1196.02 1004.2,1197.77 1004.79,1199.88 1005.38,1201.82 1005.96,1201.82 1006.55,1200.54 1007.14,1201.92 1007.72,1203.36 1008.31,1199.82 1008.9,1198.25 1009.48,1196.57 1010.07,1196.75 1010.65,1198.34 1011.24,1201.9 1011.83,1200.27 1012.41,1201.87 1013,1203.56 1013.59,1203.55 1014.17,1204.79 1014.76,1209.51 1015.35,1205.86 1015.93,1207.54 1016.52,1209.3 1017.11,1213.97 1017.69,1213.11 1018.28,1210.92 1018.86,1208.86 1019.45,1209.88 1020.04,1211.04 1020.62,1210.34 1021.21,1209.95 1021.8,1211.23 1022.38,1209.26 1022.97,1204.22 1023.56,1204.13 1024.14,1202.15 1024.73,1200.7 1025.32,1202.47 1025.9,1203.9 1026.49,1202.1 1027.07,1200.52 1027.66,1199.01 1028.25,1199.02 1028.83,1200.92 1029.42,1199.28 1030.01,1199.35 1030.59,1197.78 1031.18,1195.07 1031.77,1197.14 1032.35,1197.6 1032.94,1199.34 1033.52,1200.95 1034.11,1202.91 1034.7,1200.84 1035.28,1200.86 1035.87,1205.93 1036.46,1207.46 1037.04,1207.29 1037.63,1208.52 1038.22,1209.85 1038.8,1210.93 1039.39,1207.23 1039.98,1210.04 1040.56,1209.82 1041.15,1207.73 1041.73,1210.39 1042.32,1210.05 1042.91,1212.8 1043.49,1213.82 1044.08,1210.1 1044.67,1207.93 1045.25,1206.16 1045.84,1204.41 1046.43,1202.83 1047.01,1200.03 1047.6,1198.76 1048.19,1197.31 1048.77,1199.11 1049.36,1199.46 1049.94,1199.59 1050.53,1199.68 1051.12,1201.54 1051.7,1198.61 1052.29,1200.26 1052.88,1203.48 1053.46,1208.03 1054.05,1207.64 1054.64,1205.73 1055.22,1207.34 1055.81,1206.97 1056.39,1211.42 1056.98,1209.16 1057.57,1207.29 1058.15,1206.94 1058.74,1205.12 1059.33,1204.86 1059.91,1206.44 1060.5,1210.92 1061.09,1209.22 1061.67,1208.8 1062.26,1202.18 1062.85,1195.57 1063.43,1194.63 1064.02,1195.12 1064.6,1193.52 1065.19,1192.58 1065.78,1189.64 1066.36,1190.6 1066.95,1192.6 1067.54,1190.01 1068.12,1193.56 1068.71,1195.36 1069.3,1197.41 1069.88,1194.33 1070.47,1196.54 1071.06,1196.83 1071.64,1197.44 1072.23,1199.44 1072.81,1199.57 1073.4,1201.36 1073.99,1199.95 1074.57,1198.73 1075.16,1196.88 1075.75,1197.51 1076.33,1197.88 1076.92,1193.7 1077.51,1197.49 1078.09,1195.99 1078.68,1196.31 1079.26,1194.98 1079.85,1195.53 1080.44,1197.46 1081.02,1197.64 1081.61,1199.55 1082.2,1201.47 1082.78,1203.27 1083.37,1203.03 1083.96,1203.08 1084.54,1207.66 1085.13,1207.48 1085.72,1208.82 1086.3,1211.56 1086.89,1211.49 1087.47,1212.73 1088.06,1210.77 1088.65,1210.33 1089.23,1209.78 1089.82,1207.84 1090.41,1209.31 1090.99,1209.03 1091.58,1210.48 1092.17,1210.35 1092.75,1209.83 1093.34,1212.67 1093.93,1210.64 1094.51,1210.38 1095.1,1209.81 1095.68,1207.78 1096.27,1206.02 1096.86,1207.61 1097.44,1207.12 1098.03,1203.7 1098.62,1202.06 1099.2,1203.62 1099.79,1203.72 1100.38,1198.48 1100.96,1200.29 1101.55,1201.89 1102.14,1203.34 1102.72,1203.38 1103.31,1206.2 1103.89,1203.02 1104.48,1201.07 1105.07,1202.42 1105.65,1200.9 1106.24,1204.3 1106.83,1202.47 1107.41,1203.89 1108,1202.45 1108.59,1203.91 1109.17,1203.7 1109.76,1205.24 1110.34,1204.58 1110.93,1205.76 1111.52,1205.55 1112.1,1202.33 1112.69,1200.65 1113.28,1198.72 1113.86,1199.19 1114.45,1196.09 1115.04,1196.58 1115.62,1197.18 1116.21,1195.53 1116.8,1197.37 1117.38,1199.49 1117.97,1199.74 1118.55,1199.83 1119.14,1200.1 1119.73,1204.96 1120.31,1206.48 1120.9,1204.7 1121.49,1204.78 1122.07,1206.22 1122.66,1207.92 1123.25,1202.73 1123.83,1202.79 1124.42,1202.66 1125.01,1199.26 1125.59,1199.67 1126.18,1201.62 1126.76,1205.17 1127.35,1205.42 1127.94,1205.17 1128.52,1203.13 1129.11,1202.99 1129.7,1201.55 1130.28,1201.36 1130.87,1204.63 1131.46,1203.19 1132.04,1201.56 1132.63,1201.39 1133.21,1203.17 1133.8,1201.47 1134.39,1206 1134.97,1205.92 1135.56,1205.46 1136.15,1203.51 1136.73,1201.99 1137.32,1200.2 1137.91,1201.81 1138.49,1199.92 1139.08,1200.07 1139.67,1200.31 1140.25,1196.98 1140.84,1197.79 1141.42,1199.68 1142.01,1199.58 1142.6,1201.34 1143.18,1199.84 1143.77,1201.64 1144.36,1204.84 1144.94,1203.24 1145.53,1204.89 1146.12,1204.74 1146.7,1202.74 1147.29,1202.68 1147.88,1200.97 1148.46,1202.41 1149.05,1208.86 1149.63,1207.08 1150.22,1206.81 1150.81,1205.14 1151.39,1203.53 1151.98,1201.97 1152.57,1204.8 1153.15,1201.78 1153.74,1203.46 1154.33,1201.84 1154.91,1202.04 1155.5,1200.51 1156.09,1200.51 1156.67,1202.24 1157.26,1207.29 1157.84,1207.15 1158.43,1205.56 1159.02,1202.33 1159.6,1202.23 1160.19,1202.54 1160.78,1200.95 1161.36,1200.69 1161.95,1202.63 1162.54,1202.61 1163.12,1202.98 1163.71,1201.49 1164.29,1196.84 1164.88,1195.61 1165.47,1195.98 1166.05,1198.26 1166.64,1201.43 1167.23,1201.57 1167.81,1203.78 1168.4,1200.16 1168.99,1202.14 1169.57,1200.4 1170.16,1199.12 1170.75,1197.44 1171.33,1197.51 1171.92,1197.84 1172.5,1198.08 1173.09,1194.99 1173.68,1192.15 1174.26,1194.31 1174.85,1194.71 1175.44,1193.54 1176.02,1189.04 1176.61,1189.61 1177.2,1190.2 1177.78,1188.97 1178.37,1191.38 1178.96,1188.56 1179.54,1192.64 1180.13,1195.02 1180.71,1197.21 1181.3,1195.58 1181.89,1199.2 1182.47,1199.51 1183.06,1198.12 1183.65,1198.39 1184.23,1197 1184.82,1198.61 1185.41,1201.74 1185.99,1201.86 1186.58,1205.22 1187.16,1206.46 1187.75,1205.92 1188.34,1201.96 1188.92,1200.31 1189.51,1199.01 1190.1,1200.85 1190.68,1200.8 1191.27,1200.73 1191.86,1204.03 1192.44,1203.79 1193.03,1203.56 1193.62,1203.31 1194.2,1201.73 1194.79,1201.64 1195.37,1200.05 1195.96,1198.58 1196.55,1200.24 1197.13,1198.71 1197.72,1203.69 1198.31,1205.41 1198.89,1203.79 1199.48,1202.05 1200.07,1203.67 1200.65,1205.17 1201.24,1204.97 1201.83,1203.27 1202.41,1204.77 1203,1207.6 1203.58,1208.9 1204.17,1208.33 1204.76,1209.87 1205.34,1209.6 1205.93,1207.91 1206.52,1209.57 1207.1,1207.62 1207.69,1205.9 1208.28,1207.29 1208.86,1208.53 1209.45,1206.54 1210.03,1210.83 1210.62,1215.36 1211.21,1209.93 1211.79,1208.23 1212.38,1209.58 1212.97,1206.07 1213.55,1204.26 1214.14,1204.16 1214.73,1205.97 1215.31,1209.1 1215.9,1214.95 1216.49,1214.4 1217.07,1215.24 1217.66,1215.91 1218.24,1212.01 1218.83,1208.58 1219.42,1207.87 1220,1210.38 1220.59,1211.3 1221.18,1211.98 1221.76,1214.2 1222.35,1210.47 1222.94,1209.77 1223.52,1207.7 1224.11,1210.54 1224.7,1208.95 1225.28,1208.33 1225.87,1207.96 1226.45,1204.58 1227.04,1207.55 1227.63,1205.74 1228.21,1207.06 1228.8,1206.84 1229.39,1206.33 1229.97,1204.5 1230.56,1204.28 1231.15,1205.82 1231.73,1207.14 1232.32,1206.71 1232.91,1208.33 1233.49,1205.04 1234.08,1206.44 1234.66,1203.11 1235.25,1206.39 1235.84,1203.39 1236.42,1203.55 1237.01,1206.45 1237.6,1204.47 1238.18,1204.52 1238.77,1202.68 1239.36,1202.5 1239.94,1202.46 1240.53,1202.36 1241.11,1203.92 1241.7,1200.46 1242.29,1198.67 1242.87,1201.63 1243.46,1201.33 1244.05,1199.76 1244.63,1198.26 1245.22,1200.24 1245.81,1196.92 1246.39,1200.12 1246.98,1200.23 1247.57,1203.74 1248.15,1206.76 1248.74,1201.74 1249.32,1198.54 1249.91,1198.26 1250.5,1196.9 1251.08,1197.14 1251.67,1194.24 1252.26,1198.08 1252.84,1198.05 1253.43,1196.78 1254.02,1194.08 1254.6,1194.38 1255.19,1191.61 1255.78,1193.7 1256.36,1194.16 1256.95,1197.73 1257.53,1197.83 1258.12,1194.69 1258.71,1193.39 1259.29,1190.74 1259.88,1192.97 1260.47,1195.06 1261.05,1196.96 1261.64,1197.07 1262.23,1198.69 1262.81,1197.18 1263.4,1197.54 1263.98,1199.41 1264.57,1200.83 1265.16,1202.55 1265.74,1204.12 1266.33,1203.94 1266.92,1205.08 1267.5,1203.18 1268.09,1201.58 1268.68,1198.44 1269.26,1198.37 1269.85,1202.03 1270.44,1202.3 1271.02,1201.99 1271.61,1201.63 1272.19,1201.88 1272.78,1195.72 1273.37,1194.57 1273.95,1195.2 1274.54,1197.08 1275.13,1198.78 1275.71,1198.77 1276.3,1196.22 1276.89,1196.65 1277.47,1198.29 1278.06,1196.82 1278.65,1198.44 1279.23,1198.71 1279.82,1199.08 1280.4,1200.72 1280.99,1202.19 1281.58,1203.68 1282.16,1203.73 1282.75,1203.5 1283.34,1203.25 1283.92,1199.95 1284.51,1201.98 1285.1,1200.1 1285.68,1201.85 1286.27,1201.76 1286.86,1199.97 1287.44,1200.3 1288.03,1198.93 1288.61,1199.06 1289.2,1200.86 1289.79,1199.41 1290.37,1204.3 1290.96,1205.86 1291.55,1207.33 1292.13,1204.04 1292.72,1197.38 1293.31,1197.74 1293.89,1196.34 1294.48,1196.9 1295.06,1199.29 1295.65,1199.79 1296.24,1201.81 1296.82,1203.16 1297.41,1207.77 1298,1210.83 1298.58,1210.29 1299.17,1209.85 1299.76,1209.47 1300.34,1210.66 1300.93,1208.27 1301.52,1204.6 1302.1,1202.92 1302.69,1201.3 1303.27,1201.32 1303.86,1200.05 1304.45,1198.88 1305.03,1198.83 1305.62,1202.12 1306.21,1202.29 1306.79,1202.13 1307.38,1198.89 1307.97,1196.01 1308.55,1196.38 1309.14,1196.98 1309.73,1197.36 1310.31,1199.56 1310.9,1196.69 1311.48,1198.65 1312.07,1199.2 1312.66,1199.57 1313.24,1201.32 1313.83,1200 1314.42,1199.92 1315,1199.93 1315.59,1200.16 1316.18,1201.99 1316.76,1197.2 1317.35,1195.92 1317.93,1195.8 1318.52,1196.1 1319.11,1197.54 1319.69,1198.02 1320.28,1198.83 1320.87,1200.72 1321.45,1197.57 1322.04,1197.97 1322.63,1198.04 1323.21,1198.26 1323.8,1201.9 1324.39,1201.95 1324.97,1201.97 1325.56,1196.93 1326.14,1197.52 1326.73,1197.74 1327.32,1198.53 1327.9,1198.91 1328.49,1200.69 1329.08,1200.66 1329.66,1202.34 1330.25,1202.66 1330.84,1202.87 1331.42,1206.14 1332.01,1203.21 1332.6,1203.04 1333.18,1203.14 1333.77,1204.83 1334.35,1203.11 1334.94,1201.7 1335.53,1201.71 1336.11,1201.77 1336.7,1206.82 1337.29,1207.93 1337.87,1205.83 1338.46,1204.04 1339.05,1203.9 1339.63,1203.61 1340.22,1202.12 1340.8,1204.91 1341.39,1204.95 1341.98,1209.56 1342.56,1209.29 1343.15,1210.44 1343.74,1213.33 1344.32,1209.37 1344.91,1207.53 1345.5,1208.72 1346.08,1208.73 1346.67,1208.23 1347.26,1206.04 1347.84,1207.36 1348.43,1205.62 1349.01,1202.13 1349.6,1202.18 1350.19,1205.38 1350.77,1204.86 1351.36,1201.51 1351.95,1199.58 1352.53,1199.47 1353.12,1201.11 1353.71,1199.37 1354.29,1196.29 1354.88,1194.8 1355.47,1193.48 1356.05,1195.58 1356.64,1195.71 1357.22,1197.29 1357.81,1195.93 1358.4,1198.04 1358.98,1198.3 1359.57,1196.7 1360.16,1200.28 1360.74,1200.74 1361.33,1199.22 1361.92,1200.91 1362.5,1200.73 1363.09,1200.47 1363.68,1200.54 1364.26,1203.66 1364.85,1205.05 1365.43,1206.31 1366.02,1202.59 1366.61,1202.35 1367.19,1200.73 1367.78,1197.58 1368.37,1197.84 1368.95,1194.86 1369.54,1193.55 1370.13,1193.7 1370.71,1193.86 1371.3,1189.42 1371.88,1190.16 1372.47,1195.7 1373.06,1194.69 1373.64,1196.82 1374.23,1198.75 1374.82,1198.92 1375.4,1203.28 1375.99,1200.28 1376.58,1198.8 1377.16,1194.64 1377.75,1194.61 1378.34,1195 1378.92,1196.85 1379.51,1197.16 1380.09,1197.39 1380.68,1199.28 1381.27,1196.28 1381.85,1196.51 1382.44,1196.95 1383.03,1197.28 1383.61,1197.46 1384.2,1197.68 1384.79,1199.28 1385.37,1199.74 1385.96,1201.83 1386.55,1202.07 1387.13,1203.91 1387.72,1204 1388.3,1200.59 1388.89,1199.17 1389.48,1202.29 1390.06,1202.14 1390.65,1206.87 1391.24,1206.2 1391.82,1206.14 1392.41,1202.8 1393,1202.53 1393.58,1202.54 1394.17,1204.08 1394.75,1203.94 1395.34,1203.77 1395.93,1203.54 1396.51,1203.56 1397.1,1205.12 1397.69,1204.82 1398.27,1201.42 1398.86,1202.99 1399.45,1202.94 1400.03,1204.5 1400.62,1209.38 1401.21,1209.14 1401.79,1208.75 1402.38,1210.42 1402.96,1209.97 1403.55,1205.12 1404.14,1208.18 1404.72,1211.01 1405.31,1210.44 1405.9,1211.54 1406.48,1210.92 1407.07,1204.18 1407.66,1209 1408.24,1209.9 1408.83,1209.62 1409.42,1205.95 1410,1208.86 1410.59,1208.33 1411.17,1206.5 1411.76,1205.96 1412.35,1205.34 1412.93,1205.15 1413.52,1204.83 1414.11,1203.38 1414.69,1198.69 1415.28,1200.34 1415.87,1200.01 1416.45,1201.42 1417.04,1201.45 1417.63,1201.41 1418.21,1198.2 1418.8,1198.63 1419.38,1200.33 1419.97,1200.15 1420.56,1199.93 1421.14,1198.59 1421.73,1199 1422.32,1202.65 1422.9,1199.15 1423.49,1202.56 1424.08,1205.61 1424.66,1205.69 1425.25,1200.8 1425.83,1203.94 1426.42,1202.17 1427.01,1205.44 1427.59,1208.42 1428.18,1212.94 1428.77,1210.89 1429.35,1211.99 1429.94,1211.17 1430.53,1209.15 1431.11,1205.43 1431.7,1205.24 1432.29,1204.98 1432.87,1203.1 1433.46,1199.91 1434.04,1199.87 1434.63,1202.99 1435.22,1203.09 1435.8,1199.87 1436.39,1198.36 1436.98,1196.73 1437.56,1195.38 1438.15,1195.17 1438.74,1198.51 1439.32,1200.55 1439.91,1200.49 1440.5,1198.89 1441.08,1199.13 1441.67,1199.39 1442.25,1196.4 1442.84,1195.13 1443.43,1195.65 1444.01,1195.75 1444.6,1194.36 1445.19,1193.04 1445.77,1193.55 1446.36,1192.35 1446.95,1192.92 1447.53,1195.33 1448.12,1194.37 1448.7,1198.07 1449.29,1197.04 1449.88,1201.88 1450.46,1203.49 1451.05,1199.95 1451.64,1201.93 1452.22,1203.74 1452.81,1203.79 1453.4,1203.65 1453.98,1206.86 1454.57,1206.37 1455.16,1206.3 1455.74,1204.62 1456.33,1206.24 1456.91,1203.07 1457.5,1199.69 1458.09,1202.99 1458.67,1201.48 1459.26,1202.16 1459.85,1200.57 1460.43,1203.92 1461.02,1203.5 1461.61,1201.82 1462.19,1203.14 1462.78,1204.5 1463.37,1206.05 1463.95,1207.67 1464.54,1208.96 1465.12,1208.57 1465.71,1206.56 1466.3,1206.48 1466.88,1201.51 1467.47,1199.78 1468.06,1197.97 1468.64,1199.59 1469.23,1199.78 1469.82,1200.01 1470.4,1200.12 1470.99,1200.26 1471.57,1198.74 1472.16,1200.31 1472.75,1199.88 1473.33,1201.51 1473.92,1202.68 1474.51,1205.67 1475.09,1202.44 1475.68,1202.47 1476.27,1199.27 1476.85,1196.58 1477.44,1198.57 1478.03,1196.99 1478.61,1197.07 1479.2,1198.26 1479.78,1200.09 1480.37,1199.99 1480.96,1200.06 1481.54,1204.71 1482.13,1204.44 1482.72,1205.79 1483.3,1205.85 1483.89,1205.19 1484.48,1203.9 1485.06,1205.23 1485.65,1204.93 1486.24,1203.31 1486.82,1203.31 1487.41,1203.4 1487.99,1204.89 1488.58,1204.37 1489.17,1201.11 1489.75,1204.21 1490.34,1205.64 1490.93,1206.87 1491.51,1208.19 1492.1,1207.85 1492.69,1207.27 1493.27,1205.49 1493.86,1203.78 1494.45,1205.22 1495.03,1205.28 1495.62,1204.88 1496.2,1204.72 1496.79,1204.53 1497.38,1204.5 1497.96,1204.3 1498.55,1204.01 1499.14,1204.15 1499.72,1202.83 1500.31,1202.86 1500.9,1202.88 1501.48,1201.33 1502.07,1198.39 1502.65,1198.62 1503.24,1198.63 1503.83,1203.4 1504.41,1201.52 1505,1201.42 1505.59,1199.55 1506.17,1195.29 1506.76,1195.65 1507.35,1195.92 1507.93,1196.46 1508.52,1196.83 1509.11,1197.15 1509.69,1199.49 1510.28,1203.01 1510.86,1206.55 1511.45,1206.73 1512.04,1206.77 1512.62,1206.69 1513.21,1204.81 1513.8,1202.98 1514.38,1204.67 1514.97,1207.84 1515.56,1209.28 1516.14,1209.15 1516.73,1208.94 1517.32,1210.07 1517.9,1209.62 1518.49,1210.77 1519.07,1215.07 1519.66,1214.39 1520.25,1215.14 1520.83,1214.47 1521.42,1213.85 1522.01,1211.56 1522.59,1213.91 1523.18,1213.53 1523.77,1213.15 1524.35,1207.82 1524.94,1205.65 1525.52,1205.55 1526.11,1202.08 1526.7,1200.48 1527.28,1200.02 1527.87,1199.72 1528.46,1199.78 1529.04,1203.17 1529.63,1202.96 1530.22,1201.05 1530.8,1202.7 1531.39,1199.4 1531.98,1196.2 1532.56,1196.65 1533.15,1200.01 1533.73,1200.13 1534.32,1201.75 1534.91,1200.19 1535.49,1196.79 1536.08,1195.54 1536.67,1194.42 1537.25,1193.25 1537.84,1196.54 1538.43,1197.05 1539.01,1198.68 1539.6,1197.59 1540.19,1196.25 1540.77,1197.93 1541.36,1201.79 1541.94,1204.89 1542.53,1202.95 1543.12,1201.21 1543.7,1201.19 1544.29,1199.86 1544.88,1198.54 1545.46,1200.59 1546.05,1201.99 1546.64,1202.19 1547.22,1203.94 1547.81,1203.94 1548.4,1200.74 1548.98,1198.96 1549.57,1199.11 1550.15,1199.54 1550.74,1199.58 1551.33,1199.45 1551.91,1199.71 1552.5,1201.61 1553.09,1200.06 1553.67,1201.9 1554.26,1201.96 1554.85,1203.55 1555.43,1205.35 1556.02,1205.13 1556.6,1201.81 1557.19,1203.42 1557.78,1204.73 1558.36,1204.05 1558.95,1202.59 1559.54,1202.65 1560.12,1202.26 1560.71,1203.97 1561.3,1203.94 1561.88,1203.83 1562.47,1203.62 1563.06,1205.25 1563.64,1205.11 1564.23,1203.09 1564.81,1201.34 1565.4,1198.23 1565.99,1198.38 1566.57,1196.96 1567.16,1197.42 1567.75,1202.09 1568.33,1200.75 1568.92,1199.38 1569.51,1197.99 1570.09,1193.41 1570.68,1194.21 1571.27,1195.11 1571.85,1195.39 1572.44,1196.83 1573.02,1195.78 1573.61,1195.8 1574.2,1194.61 1574.78,1196.78 1575.37,1195.34 1575.96,1190.87 1576.54,1192.65 1577.13,1190.07 1577.72,1190.84 1578.3,1189.88 1578.89,1190.34 1579.47,1192.71 1580.06,1193.03 1580.65,1190.82 1581.23,1189.91 1581.82,1188.69 1582.41,1192.67 1582.99,1192.93 1583.58,1195.49 1584.17,1195.81 1584.75,1197.84 1585.34,1199.48 1585.93,1201.12 1586.51,1199.89 1587.1,1199.69 1587.68,1202.99 1588.27,1203 1588.86,1202.81 1589.44,1209.01 1590.03,1205.56 1590.62,1203.34 1591.2,1204.93 1591.79,1204.81 1592.38,1203.25 1592.96,1202.72 1593.55,1201.13 1594.14,1203.02 1594.72,1204.46 1595.31,1204.4 1595.89,1206.04 1596.48,1209.04 1597.07,1211.38 1597.65,1206.26 1598.24,1207.54 1598.83,1207.52 1599.41,1204.18 1600,1203.63 1600.59,1203.66 1601.17,1200.81 1601.76,1197.67 1602.34,1195.89 1602.93,1196.24 1603.52,1201.69 1604.1,1201.51 1604.69,1203.02 1605.28,1203.29 1605.86,1203.16 1606.45,1203.11 1607.04,1202.72 1607.62,1205.68 1608.21,1203.81 1608.8,1202.15 1609.38,1202.29 1609.97,1200.4 1610.55,1200.38 1611.14,1200.45 1611.73,1199.29 1612.31,1199.53 1612.9,1194.73 1613.49,1195.2 1614.07,1198.74 1614.66,1197.32 1615.25,1195.99 1615.83,1196.17 1616.42,1196.55 1617.01,1196.61 1617.59,1196.73 1618.18,1197.14 1618.76,1200.66 1619.35,1202.35 1619.94,1205.78 1620.52,1207.02 1621.11,1206.96 1621.7,1206.44 1622.28,1204.82 1622.87,1206.17 1623.46,1209.19 1624.04,1207.05 1624.63,1201.95 1625.22,1201.81 1625.8,1200.29 1626.39,1202.06 1626.97,1202.14 1627.56,1203.91 1628.15,1203.78 1628.73,1202.32 1629.32,1203.76 1629.91,1202 1630.49,1200.46 1631.08,1200.54 1631.67,1200.38 1632.25,1203.6 1632.84,1203.4 1633.42,1206.42 1634.01,1207.59 1634.6,1207.13 1635.18,1205.36 1635.77,1206.99 1636.36,1206.54 1636.94,1206.13 1637.53,1210.46 1638.12,1211.56 1638.7,1214.34 1639.29,1213.52 1639.88,1214.38 1640.46,1213.69 1641.05,1209.62 1641.63,1210.55 1642.22,1213.23 1642.81,1213.91 1643.39,1213.17 1643.98,1214.29 1644.57,1207.47 1645.15,1205.16 1645.74,1203.52 1646.33,1200.15 1646.91,1201.6 1647.5,1203.47 1648.09,1201.7 1648.67,1201.64 1649.26,1201.52 1649.84,1206.62 1650.43,1203.31 1651.02,1199.91 1651.6,1201.54 1652.19,1201.72 1652.78,1200.56 1653.36,1203.82 1653.95,1205.57 1654.54,1203.9 1655.12,1205.76 1655.71,1204.01 1656.29,1205.63 1656.88,1208.61 1657.47,1208.62 1658.05,1210.15 1658.64,1213.01 1659.23,1215.81 1659.81,1213.19 1660.4,1214.18 1660.99,1210.21 1661.57,1212.81 1662.16,1213.8 1662.75,1214.79 1663.33,1212.39 1663.92,1213.14 1664.5,1209.49 1665.09,1207.41 1665.68,1206.88 1666.26,1209.47 1666.85,1210.54 1667.44,1210.01 1668.02,1209.41 1668.61,1210.6 1669.2,1214.88 1669.78,1212.5 1670.37,1212.22 1670.96,1209.71 1671.54,1211.29 1672.13,1205.95 1672.71,1207.29 1673.3,1205.56 1673.89,1203.76 1674.47,1203.44 1675.06,1205.16 1675.65,1198.38 1676.23,1199.81 1676.82,1201.01 1677.41,1197.44 1677.99,1194.23 1678.58,1194.46 1679.17,1196.76 1679.75,1198.86 1680.34,1197.07 1680.92,1198.64 1681.51,1200.27 1682.1,1198.8 1682.68,1200.38 1683.27,1193.98 1683.86,1192.41 1684.44,1193.22 1685.03,1192.25 1685.62,1191 1686.2,1186.53 1686.79,1188.96 1687.37,1187.95 1687.96,1185.57 1688.55,1187.94 1689.13,1190.25 1689.72,1191.04 1690.31,1191.64 1690.89,1195.91 1691.48,1198.03 1692.07,1198.56 1692.65,1198.77 1693.24,1201.03 1693.83,1201.28 1694.41,1201.44 1695,1201.41 1695.58,1201.22 1696.17,1197.98 1696.76,1198.28 1697.34,1195.56 1697.93,1196.05 1698.52,1196.38 1699.1,1198.11 1699.69,1198.53 1700.28,1205.08 1700.86,1204.83 1701.45,1204.88 1702.04,1197.03 1702.62,1196.93 1703.21,1197.28 1703.79,1196.02 1704.38,1198.09 1704.97,1198.53 1705.55,1195.49 1706.14,1191.28 1706.73,1192.13 1707.31,1196.1 1707.9,1199.4 1708.49,1202.83 1709.07,1204.16 1709.66,1204.18 1710.24,1208.61 1710.83,1207.02 1711.42,1206.85 1712,1206.24 1712.59,1206.11 1713.18,1202.48 1713.76,1204.19 1714.35,1202.33 1714.94,1202.01 1715.52,1202.22 1716.11,1203.89 1716.7,1203.97 1717.28,1204.04 1717.87,1205.46 1718.45,1205.29 1719.04,1206.54 1719.63,1209.45 1720.21,1210.72 1720.8,1208.76 1721.39,1206.37 1721.97,1206.58 1722.56,1206.49 1723.15,1201.86 1723.73,1198.61 1724.32,1197.13 1724.91,1197.55 1725.49,1199.29 1726.08,1197.61 1726.66,1196.12 1727.25,1196.3 1727.84,1193.28 1728.42,1193.76 1729.01,1195.77 1729.6,1197.46 1730.18,1196.07 1730.77,1194.53 1731.36,1193.39 1731.94,1195.69 1732.53,1196.01 1733.11,1194.75 1733.7,1195.29 1734.29,1197.11 1734.87,1197.54 1735.46,1201.33 1736.05,1201.35 1736.63,1199.68 1737.22,1199.93 1737.81,1196.88 1738.39,1197.35 1738.98,1199.16 1739.57,1197.9 1740.15,1196.34 1740.74,1196.8 1741.32,1197.14 1741.91,1197.54 1742.5,1199.53 1743.08,1198.5 1743.67,1197.51 1744.26,1197.67 1744.84,1198.17 1745.43,1201.71 1746.02,1203.2 1746.6,1204.78 1747.19,1203.13 1747.78,1204.94 1748.36,1203.25 1748.95,1204.7 1749.53,1201.56 1750.12,1201.67 1750.71,1201.91 1751.29,1203.4 1751.88,1201.89 1752.47,1201.66 1753.05,1199.96 1753.64,1198.86 1754.23,1198.88 1754.81,1199.13 1755.4,1200.72 1755.99,1200.81 1756.57,1200.75 1757.16,1200.54 1757.74,1200.54 1758.33,1203.59 1758.92,1202.47 1759.5,1208.94 1760.09,1208.83 1760.68,1207.01 1761.26,1206.82 1761.85,1204.93 1762.44,1206.39 1763.02,1204.12 1763.61,1205.83 1764.19,1205.88 1764.78,1210.4 1765.37,1211.53 1765.95,1210.98 1766.54,1210.61 1767.13,1213.3 1767.71,1209.3 1768.3,1207.09 1768.89,1206.59 1769.47,1209.43 1770.06,1209 1770.65,1211.67 1771.23,1211.37 1771.82,1212.56 1772.4,1208.74 1772.99,1206.47 1773.58,1204.92 1774.16,1203.06 1774.75,1204.55 1775.34,1206.43 1775.92,1204.48 1776.51,1204.37 1777.1,1202.72 1777.68,1199.51 1778.27,1198.14 1778.86,1201.48 1779.44,1201.56 1780.03,1201.43 1780.61,1202.92 1781.2,1204.5 1781.79,1204.25 1782.37,1205.67 1782.96,1205.41 1783.55,1205 1784.13,1204.56 1784.72,1203.07 1785.31,1204.57 1785.89,1202.69 1786.48,1204.1 1787.06,1205.73 1787.65,1205.14 1788.24,1206.65 1788.82,1206.48 1789.41,1206.33 1790,1204.51 1790.58,1207.28 1791.17,1210.29 1791.76,1204.99 1792.34,1206.47 1792.93,1204.42 1793.52,1204.46 1794.1,1207.31 1794.69,1211.39 1795.27,1212.75 1795.86,1210.53 1796.45,1211.85 1797.03,1214.83 1797.62,1214.01 1798.21,1213.45 1798.79,1212.72 1799.38,1215.22 1799.97,1216.35 1800.55,1213.96 1801.14,1211.65 1801.73,1209.33 1802.31,1205.64 1802.9,1208.69 1803.48,1208.68 1804.07,1208.28 1804.66,1204.86 1805.24,1204.77 1805.83,1201.75 1806.42,1201.67 1807,1201.62 1807.59,1199.93 1808.18,1202.96 1808.76,1204.63 1809.35,1198.43 1809.94,1203.48 1810.52,1205.2 1811.11,1206.96 1811.69,1200.13 1812.28,1196.89 1812.87,1198.71 1813.45,1200.64 1814.04,1199.36 1814.63,1199.4 1815.21,1204.48 1815.8,1205.85 1816.39,1204.17 1816.97,1203.9 1817.56,1204.21 1818.14,1202.66 1818.73,1202.59 1819.32,1202.58 1819.9,1202.47 1820.49,1199.03 1821.08,1200.86 1821.66,1202.2 1822.25,1203.8 1822.84,1206.87 1823.42,1208.13 1824.01,1207.4 1824.6,1208.81 1825.18,1209.94 1825.77,1204.47 1826.35,1200.88 1826.94,1202.55 1827.53,1199.13 1828.11,1200.73 1828.7,1197.77 1829.29,1196.33 1829.87,1195.18 1830.46,1196.99 1831.05,1200.52 1831.63,1200.49 1832.22,1199.08 1832.81,1199.48 1833.39,1201.44 1833.98,1201.48 1834.56,1201.46 1835.15,1203.29 1835.74,1203.47 1836.32,1208.14 1836.91,1204.46 1837.5,1204.23 1838.08,1202.24 1838.67,1200.27 1839.26,1198.92 1839.84,1202.33 1840.43,1202.1 1841.01,1202.21 1841.6,1202.14 1842.19,1200.64 1842.77,1199.05 1843.36,1200.6 1843.95,1202.13 1844.53,1200.68 1845.12,1202.31 1845.71,1203.67 1846.29,1201.67 1846.88,1201.99 1847.47,1203.62 1848.05,1203.67 1848.64,1201.81 1849.22,1201.59 1849.81,1204.71 1850.4,1204.56 1850.98,1202.91 1851.57,1196.54 1852.16,1201.56 1852.74,1203.25 1853.33,1199.95 1853.92,1203.45 1854.5,1200.16 1855.09,1201.49 1855.68,1203.28 1856.26,1201.49 1856.85,1199.98 1857.43,1198.44 1858.02,1195.23 1858.61,1191.02 1859.19,1189.99 1859.78,1186.25 1860.37,1185.31 1860.95,1184.62 1861.54,1185.54 1862.13,1186.31 1862.71,1188.92 1863.3,1191.14 1863.88,1194.81 1864.47,1196.51 1865.06,1198.49 1865.64,1199.1 1866.23,1197.62 1866.82,1194.56 1867.4,1196.61 1867.99,1198.5 1868.58,1200.06 1869.16,1198.57 1869.75,1198.76 1870.34,1195.72 1870.92,1196.12 1871.51,1199.69 1872.09,1199.64 1872.68,1201.56 1873.27,1201.55 1873.85,1202.95 1874.44,1202.69 1875.03,1200.87 1875.61,1201.15 1876.2,1203.37 1876.79,1205.25 1877.37,1206.45 1877.96,1206.37 1878.55,1205.94 1879.13,1205.62 1879.72,1202.55 1880.3,1202.76 1880.89,1205.91 1881.48,1205.87 1882.06,1205.62 1882.65,1207 1883.24,1208.58 1883.82,1208.24 1884.41,1206.26 1885,1207.56 1885.58,1208.76 1886.17,1202.44 1886.76,1205.56 1887.34,1202.13 1887.93,1200.8 1888.51,1202.37 1889.1,1202.26 1889.69,1202.11 1890.27,1200.62 1890.86,1200.6 1891.45,1202.18 1892.03,1203.83 1892.62,1203.41 1893.21,1203.19 1893.79,1199.89 1894.38,1198.61 1894.96,1195.64 1895.55,1200.77 1896.14,1200.72 1896.72,1202.5 1897.31,1200.81 1897.9,1207.28 1898.48,1207.23 1899.07,1206.64 1899.66,1203.17 1900.24,1201.35 1900.83,1206.12 1901.42,1207.57 1902,1207.4 1902.59,1208.82 1903.17,1208.64 1903.76,1209.72 1904.35,1209.59 1904.93,1209.03 1905.52,1204.01 1906.11,1207.11 1906.69,1210.16 1907.28,1211.42 1907.87,1211.56 1908.45,1212.77 1909.04,1209.23 1909.63,1208.55 1910.21,1204.99 1910.8,1203.15 1911.38,1203.21 1911.97,1199.96 1912.56,1198.78 1913.14,1200.26 1913.73,1202 1914.32,1198.75 1914.9,1197.41 1915.49,1198.82 1916.08,1199.03 1916.66,1197.67 1917.25,1199.73 1917.83,1199.98 1918.42,1196.99 1919.01,1197.47 1919.59,1197.81 1920.18,1200.88 1920.77,1205.47 1921.35,1205.38 1921.94,1206.57 1922.53,1206.98 1923.11,1208.13 1923.7,1206.67 1924.29,1206.44 1924.87,1204.55 1925.46,1204.59 1926.04,1207.65 1926.63,1205.95 1927.22,1201.11 1927.8,1199.68 1928.39,1199.92 1928.98,1201.44 1929.56,1200.13 1930.15,1203.57 1930.74,1201.58 1931.32,1201.84 1931.91,1204.9 1932.5,1201.37 1933.08,1201.63 1933.67,1203.5 1934.25,1203.84 1934.84,1205.3 1935.43,1207.1 1936.01,1206.68 1936.6,1204.65 1937.19,1202.5 1937.77,1200.59 1938.36,1200.57 1938.95,1198.87 1939.53,1200.62 1940.12,1203.53 1940.71,1196.99 1941.29,1197.65 1941.88,1197.77 1942.46,1196.72 1943.05,1198.38 1943.64,1198.42 1944.22,1199.85 1944.81,1204.74 1945.4,1206.41 1945.98,1202.87 1946.57,1202.3 1947.16,1199.19 1947.74,1199.25 1948.33,1199.38 1948.91,1197.74 1949.5,1199.66 1950.09,1201.12 1950.67,1199.26 1951.26,1198.12 1951.85,1198.17 1952.43,1198.1 1953.02,1198.08 1953.61,1199.98 1954.19,1200.13 1954.78,1200.34 1955.37,1200.28 1955.95,1198.68 1956.54,1202.13 1957.12,1200.61 1957.71,1199.16 1958.3,1199.3 1958.88,1197.79 1959.47,1200.01 1960.06,1200.12 1960.64,1198.35 1961.23,1197.13 1961.82,1197.08 1962.4,1196.9 1962.99,1198.67 1963.58,1198.72 1964.16,1195.65 1964.75,1197.62 1965.33,1200.88 1965.92,1201.15 1966.51,1201.06 1967.09,1199.84 1967.68,1200.11 1968.27,1201.7 1968.85,1203.42 1969.44,1206.55 1970.03,1208.25 1970.61,1206.01 1971.2,1204.34 1971.78,1204.11 1972.37,1202.23 1972.96,1201.98 1973.54,1198.65 1974.13,1198.87 1974.72,1200.89 1975.3,1204.35 1975.89,1202.62 1976.48,1203.98 1977.06,1200.65 1977.65,1199.4 1978.24,1201.05 1978.82,1197.68 1979.41,1197.97 1979.99,1199.67 1980.58,1199.83 1981.17,1199.75 1981.75,1199.68 1982.34,1203.05 1982.93,1201.06 1983.51,1200.94 1984.1,1202.42 1984.69,1200.67 1985.27,1201.85 1985.86,1198.59 1986.45,1198.6 1987.03,1200.28 1987.62,1203.59 1988.2,1203.63 1988.79,1203.53 1989.38,1205.03 1989.96,1203.23 1990.55,1203.49 1991.14,1204.74 1991.72,1204.52 1992.31,1202.89 1992.9,1199.06 1993.48,1197.8 1994.07,1197.91 1994.65,1203.03 1995.24,1201.35 1995.83,1202.98 1996.41,1204.59 1997,1202.95 1997.59,1200.1 1998.17,1203.19 1998.76,1203.14 1999.35,1200.49 1999.93,1202.13 2000.52,1197.91 2001.11,1199.8 2001.69,1196.89 2002.28,1197.59 2002.86,1197.77 2003.45,1196.67 2004.04,1195.39 2004.62,1193.97 2005.21,1194.34 2005.8,1194.81 2006.38,1195.18 2006.97,1195.59 2007.56,1195.73 2008.14,1195.79 2008.73,1196.03 2009.32,1198.02 2009.9,1198.17 2010.49,1198.4 2011.07,1196.87 2011.66,1198.82 2012.25,1195.5 2012.83,1198.97 2013.42,1198.95 2014.01,1200.42 2014.59,1200.85 2015.18,1202.55 2015.77,1202.42 2016.35,1202.22 2016.94,1200.99 2017.53,1204.31 2018.11,1207.31 2018.7,1205.58 2019.28,1201.99 2019.87,1200.29 2020.46,1196.93 2021.04,1198.74 2021.63,1198.96 2022.22,1200.55 2022.8,1199.36 2023.39,1197.77 2023.98,1202.4 2024.56,1200.79 2025.15,1202.43 2025.73,1202.23 2026.32,1205.26 2026.91,1206.56 2027.49,1209.72 2028.08,1209.29 2028.67,1207.38 2029.25,1207.26 2029.84,1203.8 2030.43,1203.84 2031.01,1206.79 2031.6,1208.08 2032.19,1210.73 2032.77,1211.96 2033.36,1209.77 2033.94,1209.11 2034.53,1208.68 2035.12,1206.74 2035.7,1208.05 2036.29,1204.31 2036.88,1202.71 2037.46,1200.81 2038.05,1199.25 2038.64,1199.23 2039.22,1199.37 2039.81,1196.22 2040.4,1198.18 2040.98,1203.22 2041.57,1204.94 2042.15,1206.45 2042.74,1203.2 2043.33,1203.4 2043.91,1203.28 2044.5,1203.4 2045.09,1201.47 2045.67,1201.57 2046.26,1200.21 2046.85,1198.58 2047.43,1198.8 2048.02,1197.58 2048.6,1196.02 2049.19,1194.86 2049.78,1193.72 2050.36,1195.4 2050.95,1195.93 2051.54,1199.43 2052.12,1200.87 2052.71,1201.11 2053.3,1201.23 2053.88,1209.03 2054.47,1213.52 2055.06,1211.36 2055.64,1207.38 2056.23,1208.76 2056.81,1208.35 2057.4,1209.42 2057.99,1210.49 2058.57,1212.96 2059.16,1212.23 2059.75,1215 2060.33,1217.14 2060.92,1216.34 2061.51,1210.44 2062.09,1205.14 2062.68,1205.11 2063.27,1204.92 2063.85,1204.75 2064.44,1204.56 2065.02,1204.6 2065.61,1205.99 2066.2,1209.02 2066.78,1208.58 2067.37,1204.96 2067.96,1202.79 2068.54,1201.13 2069.13,1197.91 2069.72,1196.79 2070.3,1193.83 2070.89,1191.12 2071.48,1193.05 2072.06,1192.07 2072.65,1189.43 2073.23,1191.82 2073.82,1194.06 2074.41,1193.23 2074.99,1192.26 2075.58,1192.66 2076.17,1191.63 2076.75,1187.2 2077.34,1192.93 2077.93,1194.87 2078.51,1195.33 2079.1,1195.63 2079.68,1197.61 2080.27,1197.66 2080.86,1199.52 2081.44,1201.32 2082.03,1199.78 2082.62,1200.31 2083.2,1202.07 2083.79,1202.24 2084.38,1202.42 2084.96,1202.33 2085.55,1205.8 2086.14,1207.07 2086.72,1210.04 2087.31,1212.74 2087.89,1207.33 2088.48,1205.44 2089.07,1205 2089.65,1205.14 2090.24,1203.39 2090.83,1203.23 2091.41,1201.64 2092,1201.45 2092.59,1199.85 2093.17,1200.1 2093.76,1201.59 2094.35,1200.17 2094.93,1198.85 2095.52,1198.84 2096.1,1198.92 2096.69,1199.25 2097.28,1196.13 2097.86,1196.23 2098.45,1196.82 2099.04,1200.37 2099.62,1203.88 2100.21,1205.59 2100.8,1202.13 2101.38,1202.3 2101.97,1202.67 2102.55,1202.67 2103.14,1204.27 2103.73,1202.41 2104.31,1203.9 2104.9,1208.62 2105.49,1206.82 2106.07,1208.4 2106.66,1203.44 2107.25,1204.86 2107.83,1203.1 2108.42,1203.13 2109.01,1203.12 2109.59,1204.64 2110.18,1206.16 2110.76,1201.34 2111.35,1201.63 2111.94,1202 2112.52,1203.8 2113.11,1202.37 2113.7,1199.55 2114.28,1204.86 2114.87,1198.58 2115.46,1200.4 2116.04,1198.7 2116.63,1200.65 2117.22,1200.81 2117.8,1200.87 2118.39,1202.1 2118.97,1203.9 2119.56,1207.05 2120.15,1205.52 2120.73,1205.28 2121.32,1203.07 2121.91,1209.55 2122.49,1202.8 2123.08,1196.17 2123.67,1196.28 2124.25,1198.36 2124.84,1201.75 2125.42,1200.08 2126.01,1200 2126.6,1198.42 2127.18,1198.49 2127.77,1198.91 2128.36,1195.76 2128.94,1197.7 2129.53,1194.54 2130.12,1198.21 2130.7,1201.65 2131.29,1201.79 2131.88,1201.78 2132.46,1203 2133.05,1201.51 2133.63,1201.32 2134.22,1206.26 2134.81,1207.48 2135.39,1203.86 2135.98,1208.39 2136.57,1209.41 2137.15,1210.44 2137.74,1206.9 2138.33,1204.96 2138.91,1206.36 2139.5,1204.1 2140.09,1205.56 2140.67,1202.24 2141.26,1203.86 2141.84,1200.36 2142.43,1203.49 2143.02,1201.65 2143.6,1198.27 2144.19,1197.14 2144.78,1200.39 2145.36,1198.9 2145.95,1199.04 2146.54,1200.83 2147.12,1197.57 2147.71,1200.89 2148.3,1201.02 2148.88,1201.17 2149.47,1196.29 2150.05,1197.02 2150.64,1195.73 2151.23,1194.64 2151.81,1195.35 2152.4,1198.86 2152.99,1200.65 2153.57,1197.52 2154.16,1201.11 2154.75,1201.33 2155.33,1198.01 2155.92,1199.81 2156.5,1204.99 2157.09,1203.48 2157.68,1205.12 2158.26,1205.15 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1202.53 L986.612 1202.53 L987.198 1202.53 L987.785 1202.53 L988.371 1202.53 L988.957 1202.53 L989.544 1202.53 L990.13 1202.53 L990.717 1202.53 L991.303 1202.53 L991.889 1202.53 L992.476 1202.53 L993.062 1202.53 L993.649 1202.53 L994.235 1202.53 L994.822 1202.53 L995.408 1202.53 L995.994 1202.53 L996.581 1202.53 L997.167 1202.53 L997.754 1202.53 L998.34 1202.53 L998.926 1202.53 L999.513 1202.53 L1000.1 1202.53 L1000.69 1202.53 L1001.27 1202.53 L1001.86 1202.53 L1002.44 1202.53 L1003.03 1202.53 L1003.62 1202.53 L1004.2 1202.53 L1004.79 1202.53 L1005.38 1202.53 L1005.96 1202.53 L1006.55 1202.53 L1007.14 1202.53 L1007.72 1202.53 L1008.31 1202.53 L1008.9 1202.53 L1009.48 1202.53 L1010.07 1202.53 L1010.65 1202.53 L1011.24 1202.53 L1011.83 1202.53 L1012.41 1202.53 L1013 1202.53 L1013.59 1202.53 L1014.17 1202.53 L1014.76 1202.53 L1015.35 1202.53 L1015.93 1202.53 L1016.52 1202.53 L1017.11 1202.53 L1017.69 1202.53 L1018.28 1202.53 L1018.86 1202.53 L1019.45 1202.53 L1020.04 1202.53 L1020.62 1202.53 L1021.21 1202.53 L1021.8 1202.53 L1022.38 1202.53 L1022.97 1202.53 L1023.56 1202.53 L1024.14 1202.53 L1024.73 1202.53 L1025.32 1202.53 L1025.9 1202.53 L1026.49 1202.53 L1027.07 1202.53 L1027.66 1202.53 L1028.25 1202.53 L1028.83 1202.53 L1029.42 1202.53 L1030.01 1202.53 L1030.59 1202.53 L1031.18 1202.53 L1031.77 1202.53 L1032.35 1202.53 L1032.94 1202.53 L1033.52 1202.53 L1034.11 1202.53 L1034.7 1202.53 L1035.28 1202.53 L1035.87 1202.53 L1036.46 1202.53 L1037.04 1202.53 L1037.63 1202.53 L1038.22 1202.53 L1038.8 1202.53 L1039.39 1202.53 L1039.98 1202.53 L1040.56 1202.53 L1041.15 1202.53 L1041.73 1202.53 L1042.32 1202.53 L1042.91 1202.53 L1043.49 1202.53 L1044.08 1202.53 L1044.67 1202.53 L1045.25 1202.53 L1045.84 1202.53 L1046.43 1202.53 L1047.01 1202.53 L1047.6 1202.53 L1048.19 1202.53 L1048.77 1202.53 L1049.36 1202.53 L1049.94 1202.53 L1050.53 1202.53 L1051.12 1202.53 L1051.7 1202.53 L1052.29 1202.53 L1052.88 1202.53 L1053.46 1202.53 L1054.05 1202.53 L1054.64 1202.53 L1055.22 1202.53 L1055.81 1202.53 L1056.39 1202.53 L1056.98 1202.53 L1057.57 1202.53 L1058.15 1202.53 L1058.74 1202.53 L1059.33 1202.53 L1059.91 1202.53 L1060.5 1202.53 L1061.09 1202.53 L1061.67 1202.53 L1062.26 1202.53 L1062.85 1202.53 L1063.43 1202.53 L1064.02 1202.53 L1064.6 1202.53 L1065.19 1202.53 L1065.78 1202.53 L1066.36 1202.53 L1066.95 1202.53 L1067.54 1202.53 L1068.12 1202.53 L1068.71 1202.53 L1069.3 1202.53 L1069.88 1202.53 L1070.47 1202.53 L1071.06 1202.53 L1071.64 1202.53 L1072.23 1202.53 L1072.81 1202.53 L1073.4 1202.53 L1073.99 1202.53 L1074.57 1202.53 L1075.16 1202.53 L1075.75 1202.53 L1076.33 1202.53 L1076.92 1202.53 L1077.51 1202.53 L1078.09 1202.53 L1078.68 1202.53 L1079.26 1202.53 L1079.85 1202.53 L1080.44 1202.53 L1081.02 1202.53 L1081.61 1202.53 L1082.2 1202.53 L1082.78 1202.53 L1083.37 1202.53 L1083.96 1202.53 L1084.54 1202.53 L1085.13 1202.53 L1085.72 1202.53 L1086.3 1202.53 L1086.89 1202.53 L1087.47 1202.53 L1088.06 1202.53 L1088.65 1202.53 L1089.23 1202.53 L1089.82 1202.53 L1090.41 1202.53 L1090.99 1202.53 L1091.58 1202.53 L1092.17 1202.53 L1092.75 1202.53 L1093.34 1202.53 L1093.93 1202.53 L1094.51 1202.53 L1095.1 1202.53 L1095.68 1202.53 L1096.27 1202.53 L1096.86 1202.53 L1097.44 1202.53 L1098.03 1202.53 L1098.62 1202.53 L1099.2 1202.53 L1099.79 1202.53 L1100.38 1202.53 L1100.96 1202.53 L1101.55 1202.53 L1102.14 1202.53 L1102.72 1202.53 L1103.31 1202.53 L1103.89 1202.53 L1104.48 1202.53 L1105.07 1202.53 L1105.65 1202.53 L1106.24 1202.53 L1106.83 1202.53 L1107.41 1202.53 L1108 1202.53 L1108.59 1202.53 L1109.17 1202.53 L1109.76 1202.53 L1110.34 1202.53 L1110.93 1202.53 L1111.52 1202.53 L1112.1 1202.53 L1112.69 1202.53 L1113.28 1202.53 L1113.86 1202.53 L1114.45 1202.53 L1115.04 1202.53 L1115.62 1202.53 L1116.21 1202.53 L1116.8 1202.53 L1117.38 1202.53 L1117.97 1202.53 L1118.55 1202.53 L1119.14 1202.53 L1119.73 1202.53 L1120.31 1202.53 L1120.9 1202.53 L1121.49 1202.53 L1122.07 1202.53 L1122.66 1202.53 L1123.25 1202.53 L1123.83 1202.53 L1124.42 1202.53 L1125.01 1202.53 L1125.59 1202.53 L1126.18 1202.53 L1126.76 1202.53 L1127.35 1202.53 L1127.94 1202.53 L1128.52 1202.53 L1129.11 1202.53 L1129.7 1202.53 L1130.28 1202.53 L1130.87 1202.53 L1131.46 1202.53 L1132.04 1202.53 L1132.63 1202.53 L1133.21 1202.53 L1133.8 1202.53 L1134.39 1202.53 L1134.97 1202.53 L1135.56 1202.53 L1136.15 1202.53 L1136.73 1202.53 L1137.32 1202.53 L1137.91 1202.53 L1138.49 1202.53 L1139.08 1202.53 L1139.67 1202.53 L1140.25 1202.53 L1140.84 1202.53 L1141.42 1202.53 L1142.01 1202.53 L1142.6 1202.53 L1143.18 1202.53 L1143.77 1202.53 L1144.36 1202.53 L1144.94 1202.53 L1145.53 1202.53 L1146.12 1202.53 L1146.7 1202.53 L1147.29 1202.53 L1147.88 1202.53 L1148.46 1202.53 L1149.05 1202.53 L1149.63 1202.53 L1150.22 1202.53 L1150.81 1202.53 L1151.39 1202.53 L1151.98 1202.53 L1152.57 1202.53 L1153.15 1202.53 L1153.74 1202.53 L1154.33 1202.53 L1154.91 1202.53 L1155.5 1202.53 L1156.09 1202.53 L1156.67 1202.53 L1157.26 1202.53 L1157.84 1202.53 L1158.43 1202.53 L1159.02 1202.53 L1159.6 1202.53 L1160.19 1202.53 L1160.78 1202.53 L1161.36 1202.53 L1161.95 1202.53 L1162.54 1202.53 L1163.12 1202.53 L1163.71 1202.53 L1164.29 1202.53 L1164.88 1202.53 L1165.47 1202.53 L1166.05 1202.53 L1166.64 1202.53 L1167.23 1202.53 L1167.81 1202.53 L1168.4 1202.53 L1168.99 1202.53 L1169.57 1202.53 L1170.16 1202.53 L1170.75 1202.53 L1171.33 1202.53 L1171.92 1202.53 L1172.5 1202.53 L1173.09 1202.53 L1173.68 1202.53 L1174.26 1202.53 L1174.85 1202.53 L1175.44 1202.53 L1176.02 1202.53 L1176.61 1202.53 L1177.2 1202.53 L1177.78 1202.53 L1178.37 1202.53 L1178.96 1202.53 L1179.54 1202.53 L1180.13 1202.53 L1180.71 1202.53 L1181.3 1202.53 L1181.89 1202.53 L1182.47 1202.53 L1183.06 1202.53 L1183.65 1202.53 L1184.23 1202.53 L1184.82 1202.53 L1185.41 1202.53 L1185.99 1202.53 L1186.58 1202.53 L1187.16 1202.53 L1187.75 1202.53 L1188.34 1202.53 L1188.92 1202.53 L1189.51 1202.53 L1190.1 1202.53 L1190.68 1202.53 L1191.27 1202.53 L1191.86 1202.53 L1192.44 1202.53 L1193.03 1202.53 L1193.62 1202.53 L1194.2 1202.53 L1194.79 1202.53 L1195.37 1202.53 L1195.96 1202.53 L1196.55 1202.53 L1197.13 1202.53 L1197.72 1202.53 L1198.31 1202.53 L1198.89 1202.53 L1199.48 1202.53 L1200.07 1202.53 L1200.65 1202.53 L1201.24 1202.53 L1201.83 1202.53 L1202.41 1202.53 L1203 1202.53 L1203.58 1202.53 L1204.17 1202.53 L1204.76 1202.53 L1205.34 1202.53 L1205.93 1202.53 L1206.52 1202.53 L1207.1 1202.53 L1207.69 1202.53 L1208.28 1202.53 L1208.86 1202.53 L1209.45 1202.53 L1210.03 1202.53 L1210.62 1202.53 L1211.21 1202.53 L1211.79 1202.53 L1212.38 1202.53 L1212.97 1202.53 L1213.55 1202.53 L1214.14 1202.53 L1214.73 1202.53 L1215.31 1202.53 L1215.9 1202.53 L1216.49 1202.53 L1217.07 1202.53 L1217.66 1202.53 L1218.24 1202.53 L1218.83 1202.53 L1219.42 1202.53 L1220 1202.53 L1220.59 1202.53 L1221.18 1202.53 L1221.76 1202.53 L1222.35 1202.53 L1222.94 1202.53 L1223.52 1202.53 L1224.11 1202.53 L1224.7 1202.53 L1225.28 1202.53 L1225.87 1202.53 L1226.45 1202.53 L1227.04 1202.53 L1227.63 1202.53 L1228.21 1202.53 L1228.8 1202.53 L1229.39 1202.53 L1229.97 1202.53 L1230.56 1202.53 L1231.15 1202.53 L1231.73 1202.53 L1232.32 1202.53 L1232.91 1202.53 L1233.49 1202.53 L1234.08 1202.53 L1234.66 1202.53 L1235.25 1202.53 L1235.84 1202.53 L1236.42 1202.53 L1237.01 1202.53 L1237.6 1202.53 L1238.18 1202.53 L1238.77 1202.53 L1239.36 1202.53 L1239.94 1202.53 L1240.53 1202.53 L1241.11 1202.53 L1241.7 1202.53 L1242.29 1202.53 L1242.87 1202.53 L1243.46 1202.53 L1244.05 1202.53 L1244.63 1202.53 L1245.22 1202.53 L1245.81 1202.53 L1246.39 1202.53 L1246.98 1202.53 L1247.57 1202.53 L1248.15 1202.53 L1248.74 1202.53 L1249.32 1202.53 L1249.91 1202.53 L1250.5 1202.53 L1251.08 1202.53 L1251.67 1202.53 L1252.26 1202.53 L1252.84 1202.53 L1253.43 1202.53 L1254.02 1202.53 L1254.6 1202.53 L1255.19 1202.53 L1255.78 1202.53 L1256.36 1202.53 L1256.95 1202.53 L1257.53 1202.53 L1258.12 1202.53 L1258.71 1202.53 L1259.29 1202.53 L1259.88 1202.53 L1260.47 1202.53 L1261.05 1202.53 L1261.64 1202.53 L1262.23 1202.53 L1262.81 1202.53 L1263.4 1202.53 L1263.98 1202.53 L1264.57 1202.53 L1265.16 1202.53 L1265.74 1202.53 L1266.33 1202.53 L1266.92 1202.53 L1267.5 1202.53 L1268.09 1202.53 L1268.68 1202.53 L1269.26 1202.53 L1269.85 1202.53 L1270.44 1202.53 L1271.02 1202.53 L1271.61 1202.53 L1272.19 1202.53 L1272.78 1202.53 L1273.37 1202.53 L1273.95 1202.53 L1274.54 1202.53 L1275.13 1202.53 L1275.71 1202.53 L1276.3 1202.53 L1276.89 1202.53 L1277.47 1202.53 L1278.06 1202.53 L1278.65 1202.53 L1279.23 1202.53 L1279.82 1202.53 L1280.4 1202.53 L1280.99 1202.53 L1281.58 1202.53 L1282.16 1202.53 L1282.75 1202.53 L1283.34 1202.53 L1283.92 1202.53 L1284.51 1202.53 L1285.1 1202.53 L1285.68 1202.53 L1286.27 1202.53 L1286.86 1202.53 L1287.44 1202.53 L1288.03 1202.53 L1288.61 1202.53 L1289.2 1202.53 L1289.79 1202.53 L1290.37 1202.53 L1290.96 1202.53 L1291.55 1202.53 L1292.13 1202.53 L1292.72 1202.53 L1293.31 1202.53 L1293.89 1202.53 L1294.48 1202.53 L1295.06 1202.53 L1295.65 1202.53 L1296.24 1202.53 L1296.82 1202.53 L1297.41 1202.53 L1298 1202.53 L1298.58 1202.53 L1299.17 1202.53 L1299.76 1202.53 L1300.34 1202.53 L1300.93 1202.53 L1301.52 1202.53 L1302.1 1202.53 L1302.69 1202.53 L1303.27 1202.53 L1303.86 1202.53 L1304.45 1202.53 L1305.03 1202.53 L1305.62 1202.53 L1306.21 1202.53 L1306.79 1202.53 L1307.38 1202.53 L1307.97 1202.53 L1308.55 1202.53 L1309.14 1202.53 L1309.73 1202.53 L1310.31 1202.53 L1310.9 1202.53 L1311.48 1202.53 L1312.07 1202.53 L1312.66 1202.53 L1313.24 1202.53 L1313.83 1202.53 L1314.42 1202.53 L1315 1202.53 L1315.59 1202.53 L1316.18 1202.53 L1316.76 1202.53 L1317.35 1202.53 L1317.93 1202.53 L1318.52 1202.53 L1319.11 1202.53 L1319.69 1202.53 L1320.28 1202.53 L1320.87 1202.53 L1321.45 1202.53 L1322.04 1202.53 L1322.63 1202.53 L1323.21 1202.53 L1323.8 1202.53 L1324.39 1202.53 L1324.97 1202.53 L1325.56 1202.53 L1326.14 1202.53 L1326.73 1202.53 L1327.32 1202.53 L1327.9 1202.53 L1328.49 1202.53 L1329.08 1202.53 L1329.66 1202.53 L1330.25 1202.53 L1330.84 1202.53 L1331.42 1202.53 L1332.01 1202.53 L1332.6 1202.53 L1333.18 1202.53 L1333.77 1202.53 L1334.35 1202.53 L1334.94 1202.53 L1335.53 1202.53 L1336.11 1202.53 L1336.7 1202.53 L1337.29 1202.53 L1337.87 1202.53 L1338.46 1202.53 L1339.05 1202.53 L1339.63 1202.53 L1340.22 1202.53 L1340.8 1202.53 L1341.39 1202.53 L1341.98 1202.53 L1342.56 1202.53 L1343.15 1202.53 L1343.74 1202.53 L1344.32 1202.53 L1344.91 1202.53 L1345.5 1202.53 L1346.08 1202.53 L1346.67 1202.53 L1347.26 1202.53 L1347.84 1202.53 L1348.43 1202.53 L1349.01 1202.53 L1349.6 1202.53 L1350.19 1202.53 L1350.77 1202.53 L1351.36 1202.53 L1351.95 1202.53 L1352.53 1202.53 L1353.12 1202.53 L1353.71 1202.53 L1354.29 1202.53 L1354.88 1202.53 L1355.47 1202.53 L1356.05 1202.53 L1356.64 1202.53 L1357.22 1202.53 L1357.81 1202.53 L1358.4 1202.53 L1358.98 1202.53 L1359.57 1202.53 L1360.16 1202.53 L1360.74 1202.53 L1361.33 1202.53 L1361.92 1202.53 L1362.5 1202.53 L1363.09 1202.53 L1363.68 1202.53 L1364.26 1202.53 L1364.85 1202.53 L1365.43 1202.53 L1366.02 1202.53 L1366.61 1202.53 L1367.19 1202.53 L1367.78 1202.53 L1368.37 1202.53 L1368.95 1202.53 L1369.54 1202.53 L1370.13 1202.53 L1370.71 1202.53 L1371.3 1202.53 L1371.88 1202.53 L1372.47 1202.53 L1373.06 1202.53 L1373.64 1202.53 L1374.23 1202.53 L1374.82 1202.53 L1375.4 1202.53 L1375.99 1202.53 L1376.58 1202.53 L1377.16 1202.53 L1377.75 1202.53 L1378.34 1202.53 L1378.92 1202.53 L1379.51 1202.53 L1380.09 1202.53 L1380.68 1202.53 L1381.27 1202.53 L1381.85 1202.53 L1382.44 1202.53 L1383.03 1202.53 L1383.61 1202.53 L1384.2 1202.53 L1384.79 1202.53 L1385.37 1202.53 L1385.96 1202.53 L1386.55 1202.53 L1387.13 1202.53 L1387.72 1202.53 L1388.3 1202.53 L1388.89 1202.53 L1389.48 1202.53 L1390.06 1202.53 L1390.65 1202.53 L1391.24 1202.53 L1391.82 1202.53 L1392.41 1202.53 L1393 1202.53 L1393.58 1202.53 L1394.17 1202.53 L1394.75 1202.53 L1395.34 1202.53 L1395.93 1202.53 L1396.51 1202.53 L1397.1 1202.53 L1397.69 1202.53 L1398.27 1202.53 L1398.86 1202.53 L1399.45 1202.53 L1400.03 1202.53 L1400.62 1202.53 L1401.21 1202.53 L1401.79 1202.53 L1402.38 1202.53 L1402.96 1202.53 L1403.55 1202.53 L1404.14 1202.53 L1404.72 1202.53 L1405.31 1202.53 L1405.9 1202.53 L1406.48 1202.53 L1407.07 1202.53 L1407.66 1202.53 L1408.24 1202.53 L1408.83 1202.53 L1409.42 1202.53 L1410 1202.53 L1410.59 1202.53 L1411.17 1202.53 L1411.76 1202.53 L1412.35 1202.53 L1412.93 1202.53 L1413.52 1202.53 L1414.11 1202.53 L1414.69 1202.53 L1415.28 1202.53 L1415.87 1202.53 L1416.45 1202.53 L1417.04 1202.53 L1417.63 1202.53 L1418.21 1202.53 L1418.8 1202.53 L1419.38 1202.53 L1419.97 1202.53 L1420.56 1202.53 L1421.14 1202.53 L1421.73 1202.53 L1422.32 1202.53 L1422.9 1202.53 L1423.49 1202.53 L1424.08 1202.53 L1424.66 1202.53 L1425.25 1202.53 L1425.83 1202.53 L1426.42 1202.53 L1427.01 1202.53 L1427.59 1202.53 L1428.18 1202.53 L1428.77 1202.53 L1429.35 1202.53 L1429.94 1202.53 L1430.53 1202.53 L1431.11 1202.53 L1431.7 1202.53 L1432.29 1202.53 L1432.87 1202.53 L1433.46 1202.53 L1434.04 1202.53 L1434.63 1202.53 L1435.22 1202.53 L1435.8 1202.53 L1436.39 1202.53 L1436.98 1202.53 L1437.56 1202.53 L1438.15 1202.53 L1438.74 1202.53 L1439.32 1202.53 L1439.91 1202.53 L1440.5 1202.53 L1441.08 1202.53 L1441.67 1202.53 L1442.25 1202.53 L1442.84 1202.53 L1443.43 1202.53 L1444.01 1202.53 L1444.6 1202.53 L1445.19 1202.53 L1445.77 1202.53 L1446.36 1202.53 L1446.95 1202.53 L1447.53 1202.53 L1448.12 1202.53 L1448.7 1202.53 L1449.29 1202.53 L1449.88 1202.53 L1450.46 1202.53 L1451.05 1202.53 L1451.64 1202.53 L1452.22 1202.53 L1452.81 1202.53 L1453.4 1202.53 L1453.98 1202.53 L1454.57 1202.53 L1455.16 1202.53 L1455.74 1202.53 L1456.33 1202.53 L1456.91 1202.53 L1457.5 1202.53 L1458.09 1202.53 L1458.67 1202.53 L1459.26 1202.53 L1459.85 1202.53 L1460.43 1202.53 L1461.02 1202.53 L1461.61 1202.53 L1462.19 1202.53 L1462.78 1202.53 L1463.37 1202.53 L1463.95 1202.53 L1464.54 1202.53 L1465.12 1202.53 L1465.71 1202.53 L1466.3 1202.53 L1466.88 1202.53 L1467.47 1202.53 L1468.06 1202.53 L1468.64 1202.53 L1469.23 1202.53 L1469.82 1202.53 L1470.4 1202.53 L1470.99 1202.53 L1471.57 1202.53 L1472.16 1202.53 L1472.75 1202.53 L1473.33 1202.53 L1473.92 1202.53 L1474.51 1202.53 L1475.09 1202.53 L1475.68 1202.53 L1476.27 1202.53 L1476.85 1202.53 L1477.44 1202.53 L1478.03 1202.53 L1478.61 1202.53 L1479.2 1202.53 L1479.78 1202.53 L1480.37 1202.53 L1480.96 1202.53 L1481.54 1202.53 L1482.13 1202.53 L1482.72 1202.53 L1483.3 1202.53 L1483.89 1202.53 L1484.48 1202.53 L1485.06 1202.53 L1485.65 1202.53 L1486.24 1202.53 L1486.82 1202.53 L1487.41 1202.53 L1487.99 1202.53 L1488.58 1202.53 L1489.17 1202.53 L1489.75 1202.53 L1490.34 1202.53 L1490.93 1202.53 L1491.51 1202.53 L1492.1 1202.53 L1492.69 1202.53 L1493.27 1202.53 L1493.86 1202.53 L1494.45 1202.53 L1495.03 1202.53 L1495.62 1202.53 L1496.2 1202.53 L1496.79 1202.53 L1497.38 1202.53 L1497.96 1202.53 L1498.55 1202.53 L1499.14 1202.53 L1499.72 1202.53 L1500.31 1202.53 L1500.9 1202.53 L1501.48 1202.53 L1502.07 1202.53 L1502.65 1202.53 L1503.24 1202.53 L1503.83 1202.53 L1504.41 1202.53 L1505 1202.53 L1505.59 1202.53 L1506.17 1202.53 L1506.76 1202.53 L1507.35 1202.53 L1507.93 1202.53 L1508.52 1202.53 L1509.11 1202.53 L1509.69 1202.53 L1510.28 1202.53 L1510.86 1202.53 L1511.45 1202.53 L1512.04 1202.53 L1512.62 1202.53 L1513.21 1202.53 L1513.8 1202.53 L1514.38 1202.53 L1514.97 1202.53 L1515.56 1202.53 L1516.14 1202.53 L1516.73 1202.53 L1517.32 1202.53 L1517.9 1202.53 L1518.49 1202.53 L1519.07 1202.53 L1519.66 1202.53 L1520.25 1202.53 L1520.83 1202.53 L1521.42 1202.53 L1522.01 1202.53 L1522.59 1202.53 L1523.18 1202.53 L1523.77 1202.53 L1524.35 1202.53 L1524.94 1202.53 L1525.52 1202.53 L1526.11 1202.53 L1526.7 1202.53 L1527.28 1202.53 L1527.87 1202.53 L1528.46 1202.53 L1529.04 1202.53 L1529.63 1202.53 L1530.22 1202.53 L1530.8 1202.53 L1531.39 1202.53 L1531.98 1202.53 L1532.56 1202.53 L1533.15 1202.53 L1533.73 1202.53 L1534.32 1202.53 L1534.91 1202.53 L1535.49 1202.53 L1536.08 1202.53 L1536.67 1202.53 L1537.25 1202.53 L1537.84 1202.53 L1538.43 1202.53 L1539.01 1202.53 L1539.6 1202.53 L1540.19 1202.53 L1540.77 1202.53 L1541.36 1202.53 L1541.94 1202.53 L1542.53 1202.53 L1543.12 1202.53 L1543.7 1202.53 L1544.29 1202.53 L1544.88 1202.53 L1545.46 1202.53 L1546.05 1202.53 L1546.64 1202.53 L1547.22 1202.53 L1547.81 1202.53 L1548.4 1202.53 L1548.98 1202.53 L1549.57 1202.53 L1550.15 1202.53 L1550.74 1202.53 L1551.33 1202.53 L1551.91 1202.53 L1552.5 1202.53 L1553.09 1202.53 L1553.67 1202.53 L1554.26 1202.53 L1554.85 1202.53 L1555.43 1202.53 L1556.02 1202.53 L1556.6 1202.53 L1557.19 1202.53 L1557.78 1202.53 L1558.36 1202.53 L1558.95 1202.53 L1559.54 1202.53 L1560.12 1202.53 L1560.71 1202.53 L1561.3 1202.53 L1561.88 1202.53 L1562.47 1202.53 L1563.06 1202.53 L1563.64 1202.53 L1564.23 1202.53 L1564.81 1202.53 L1565.4 1202.53 L1565.99 1202.53 L1566.57 1202.53 L1567.16 1202.53 L1567.75 1202.53 L1568.33 1202.53 L1568.92 1202.53 L1569.51 1202.53 L1570.09 1202.53 L1570.68 1202.53 L1571.27 1202.53 L1571.85 1202.53 L1572.44 1202.53 L1573.02 1202.53 L1573.61 1202.53 L1574.2 1202.53 L1574.78 1202.53 L1575.37 1202.53 L1575.96 1202.53 L1576.54 1202.53 L1577.13 1202.53 L1577.72 1202.53 L1578.3 1202.53 L1578.89 1202.53 L1579.47 1202.53 L1580.06 1202.53 L1580.65 1202.53 L1581.23 1202.53 L1581.82 1202.53 L1582.41 1202.53 L1582.99 1202.53 L1583.58 1202.53 L1584.17 1202.53 L1584.75 1202.53 L1585.34 1202.53 L1585.93 1202.53 L1586.51 1202.53 L1587.1 1202.53 L1587.68 1202.53 L1588.27 1202.53 L1588.86 1202.53 L1589.44 1202.53 L1590.03 1202.53 L1590.62 1202.53 L1591.2 1202.53 L1591.79 1202.53 L1592.38 1202.53 L1592.96 1202.53 L1593.55 1202.53 L1594.14 1202.53 L1594.72 1202.53 L1595.31 1202.53 L1595.89 1202.53 L1596.48 1202.53 L1597.07 1202.53 L1597.65 1202.53 L1598.24 1202.53 L1598.83 1202.53 L1599.41 1202.53 L1600 1202.53 L1600.59 1202.53 L1601.17 1202.53 L1601.76 1202.53 L1602.34 1202.53 L1602.93 1202.53 L1603.52 1202.53 L1604.1 1202.53 L1604.69 1202.53 L1605.28 1202.53 L1605.86 1202.53 L1606.45 1202.53 L1607.04 1202.53 L1607.62 1202.53 L1608.21 1202.53 L1608.8 1202.53 L1609.38 1202.53 L1609.97 1202.53 L1610.55 1202.53 L1611.14 1202.53 L1611.73 1202.53 L1612.31 1202.53 L1612.9 1202.53 L1613.49 1202.53 L1614.07 1202.53 L1614.66 1202.53 L1615.25 1202.53 L1615.83 1202.53 L1616.42 1202.53 L1617.01 1202.53 L1617.59 1202.53 L1618.18 1202.53 L1618.76 1202.53 L1619.35 1202.53 L1619.94 1202.53 L1620.52 1202.53 L1621.11 1202.53 L1621.7 1202.53 L1622.28 1202.53 L1622.87 1202.53 L1623.46 1202.53 L1624.04 1202.53 L1624.63 1202.53 L1625.22 1202.53 L1625.8 1202.53 L1626.39 1202.53 L1626.97 1202.53 L1627.56 1202.53 L1628.15 1202.53 L1628.73 1202.53 L1629.32 1202.53 L1629.91 1202.53 L1630.49 1202.53 L1631.08 1202.53 L1631.67 1202.53 L1632.25 1202.53 L1632.84 1202.53 L1633.42 1202.53 L1634.01 1202.53 L1634.6 1202.53 L1635.18 1202.53 L1635.77 1202.53 L1636.36 1202.53 L1636.94 1202.53 L1637.53 1202.53 L1638.12 1202.53 L1638.7 1202.53 L1639.29 1202.53 L1639.88 1202.53 L1640.46 1202.53 L1641.05 1202.53 L1641.63 1202.53 L1642.22 1202.53 L1642.81 1202.53 L1643.39 1202.53 L1643.98 1202.53 L1644.57 1202.53 L1645.15 1202.53 L1645.74 1202.53 L1646.33 1202.53 L1646.91 1202.53 L1647.5 1202.53 L1648.09 1202.53 L1648.67 1202.53 L1649.26 1202.53 L1649.84 1202.53 L1650.43 1202.53 L1651.02 1202.53 L1651.6 1202.53 L1652.19 1202.53 L1652.78 1202.53 L1653.36 1202.53 L1653.95 1202.53 L1654.54 1202.53 L1655.12 1202.53 L1655.71 1202.53 L1656.29 1202.53 L1656.88 1202.53 L1657.47 1202.53 L1658.05 1202.53 L1658.64 1202.53 L1659.23 1202.53 L1659.81 1202.53 L1660.4 1202.53 L1660.99 1202.53 L1661.57 1202.53 L1662.16 1202.53 L1662.75 1202.53 L1663.33 1202.53 L1663.92 1202.53 L1664.5 1202.53 L1665.09 1202.53 L1665.68 1202.53 L1666.26 1202.53 L1666.85 1202.53 L1667.44 1202.53 L1668.02 1202.53 L1668.61 1202.53 L1669.2 1202.53 L1669.78 1202.53 L1670.37 1202.53 L1670.96 1202.53 L1671.54 1202.53 L1672.13 1202.53 L1672.71 1202.53 L1673.3 1202.53 L1673.89 1202.53 L1674.47 1202.53 L1675.06 1202.53 L1675.65 1202.53 L1676.23 1202.53 L1676.82 1202.53 L1677.41 1202.53 L1677.99 1202.53 L1678.58 1202.53 L1679.17 1202.53 L1679.75 1202.53 L1680.34 1202.53 L1680.92 1202.53 L1681.51 1202.53 L1682.1 1202.53 L1682.68 1202.53 L1683.27 1202.53 L1683.86 1202.53 L1684.44 1202.53 L1685.03 1202.53 L1685.62 1202.53 L1686.2 1202.53 L1686.79 1202.53 L1687.37 1202.53 L1687.96 1202.53 L1688.55 1202.53 L1689.13 1202.53 L1689.72 1202.53 L1690.31 1202.53 L1690.89 1202.53 L1691.48 1202.53 L1692.07 1202.53 L1692.65 1202.53 L1693.24 1202.53 L1693.83 1202.53 L1694.41 1202.53 L1695 1202.53 L1695.58 1202.53 L1696.17 1202.53 L1696.76 1202.53 L1697.34 1202.53 L1697.93 1202.53 L1698.52 1202.53 L1699.1 1202.53 L1699.69 1202.53 L1700.28 1202.53 L1700.86 1202.53 L1701.45 1202.53 L1702.04 1202.53 L1702.62 1202.53 L1703.21 1202.53 L1703.79 1202.53 L1704.38 1202.53 L1704.97 1202.53 L1705.55 1202.53 L1706.14 1202.53 L1706.73 1202.53 L1707.31 1202.53 L1707.9 1202.53 L1708.49 1202.53 L1709.07 1202.53 L1709.66 1202.53 L1710.24 1202.53 L1710.83 1202.53 L1711.42 1202.53 L1712 1202.53 L1712.59 1202.53 L1713.18 1202.53 L1713.76 1202.53 L1714.35 1202.53 L1714.94 1202.53 L1715.52 1202.53 L1716.11 1202.53 L1716.7 1202.53 L1717.28 1202.53 L1717.87 1202.53 L1718.45 1202.53 L1719.04 1202.53 L1719.63 1202.53 L1720.21 1202.53 L1720.8 1202.53 L1721.39 1202.53 L1721.97 1202.53 L1722.56 1202.53 L1723.15 1202.53 L1723.73 1202.53 L1724.32 1202.53 L1724.91 1202.53 L1725.49 1202.53 L1726.08 1202.53 L1726.66 1202.53 L1727.25 1202.53 L1727.84 1202.53 L1728.42 1202.53 L1729.01 1202.53 L1729.6 1202.53 L1730.18 1202.53 L1730.77 1202.53 L1731.36 1202.53 L1731.94 1202.53 L1732.53 1202.53 L1733.11 1202.53 L1733.7 1202.53 L1734.29 1202.53 L1734.87 1202.53 L1735.46 1202.53 L1736.05 1202.53 L1736.63 1202.53 L1737.22 1202.53 L1737.81 1202.53 L1738.39 1202.53 L1738.98 1202.53 L1739.57 1202.53 L1740.15 1202.53 L1740.74 1202.53 L1741.32 1202.53 L1741.91 1202.53 L1742.5 1202.53 L1743.08 1202.53 L1743.67 1202.53 L1744.26 1202.53 L1744.84 1202.53 L1745.43 1202.53 L1746.02 1202.53 L1746.6 1202.53 L1747.19 1202.53 L1747.78 1202.53 L1748.36 1202.53 L1748.95 1202.53 L1749.53 1202.53 L1750.12 1202.53 L1750.71 1202.53 L1751.29 1202.53 L1751.88 1202.53 L1752.47 1202.53 L1753.05 1202.53 L1753.64 1202.53 L1754.23 1202.53 L1754.81 1202.53 L1755.4 1202.53 L1755.99 1202.53 L1756.57 1202.53 L1757.16 1202.53 L1757.74 1202.53 L1758.33 1202.53 L1758.92 1202.53 L1759.5 1202.53 L1760.09 1202.53 L1760.68 1202.53 L1761.26 1202.53 L1761.85 1202.53 L1762.44 1202.53 L1763.02 1202.53 L1763.61 1202.53 L1764.19 1202.53 L1764.78 1202.53 L1765.37 1202.53 L1765.95 1202.53 L1766.54 1202.53 L1767.13 1202.53 L1767.71 1202.53 L1768.3 1202.53 L1768.89 1202.53 L1769.47 1202.53 L1770.06 1202.53 L1770.65 1202.53 L1771.23 1202.53 L1771.82 1202.53 L1772.4 1202.53 L1772.99 1202.53 L1773.58 1202.53 L1774.16 1202.53 L1774.75 1202.53 L1775.34 1202.53 L1775.92 1202.53 L1776.51 1202.53 L1777.1 1202.53 L1777.68 1202.53 L1778.27 1202.53 L1778.86 1202.53 L1779.44 1202.53 L1780.03 1202.53 L1780.61 1202.53 L1781.2 1202.53 L1781.79 1202.53 L1782.37 1202.53 L1782.96 1202.53 L1783.55 1202.53 L1784.13 1202.53 L1784.72 1202.53 L1785.31 1202.53 L1785.89 1202.53 L1786.48 1202.53 L1787.06 1202.53 L1787.65 1202.53 L1788.24 1202.53 L1788.82 1202.53 L1789.41 1202.53 L1790 1202.53 L1790.58 1202.53 L1791.17 1202.53 L1791.76 1202.53 L1792.34 1202.53 L1792.93 1202.53 L1793.52 1202.53 L1794.1 1202.53 L1794.69 1202.53 L1795.27 1202.53 L1795.86 1202.53 L1796.45 1202.53 L1797.03 1202.53 L1797.62 1202.53 L1798.21 1202.53 L1798.79 1202.53 L1799.38 1202.53 L1799.97 1202.53 L1800.55 1202.53 L1801.14 1202.53 L1801.73 1202.53 L1802.31 1202.53 L1802.9 1202.53 L1803.48 1202.53 L1804.07 1202.53 L1804.66 1202.53 L1805.24 1202.53 L1805.83 1202.53 L1806.42 1202.53 L1807 1202.53 L1807.59 1202.53 L1808.18 1202.53 L1808.76 1202.53 L1809.35 1202.53 L1809.94 1202.53 L1810.52 1202.53 L1811.11 1202.53 L1811.69 1202.53 L1812.28 1202.53 L1812.87 1202.53 L1813.45 1202.53 L1814.04 1202.53 L1814.63 1202.53 L1815.21 1202.53 L1815.8 1202.53 L1816.39 1202.53 L1816.97 1202.53 L1817.56 1202.53 L1818.14 1202.53 L1818.73 1202.53 L1819.32 1202.53 L1819.9 1202.53 L1820.49 1202.53 L1821.08 1202.53 L1821.66 1202.53 L1822.25 1202.53 L1822.84 1202.53 L1823.42 1202.53 L1824.01 1202.53 L1824.6 1202.53 L1825.18 1202.53 L1825.77 1202.53 L1826.35 1202.53 L1826.94 1202.53 L1827.53 1202.53 L1828.11 1202.53 L1828.7 1202.53 L1829.29 1202.53 L1829.87 1202.53 L1830.46 1202.53 L1831.05 1202.53 L1831.63 1202.53 L1832.22 1202.53 L1832.81 1202.53 L1833.39 1202.53 L1833.98 1202.53 L1834.56 1202.53 L1835.15 1202.53 L1835.74 1202.53 L1836.32 1202.53 L1836.91 1202.53 L1837.5 1202.53 L1838.08 1202.53 L1838.67 1202.53 L1839.26 1202.53 L1839.84 1202.53 L1840.43 1202.53 L1841.01 1202.53 L1841.6 1202.53 L1842.19 1202.53 L1842.77 1202.53 L1843.36 1202.53 L1843.95 1202.53 L1844.53 1202.53 L1845.12 1202.53 L1845.71 1202.53 L1846.29 1202.53 L1846.88 1202.53 L1847.47 1202.53 L1848.05 1202.53 L1848.64 1202.53 L1849.22 1202.53 L1849.81 1202.53 L1850.4 1202.53 L1850.98 1202.53 L1851.57 1202.53 L1852.16 1202.53 L1852.74 1202.53 L1853.33 1202.53 L1853.92 1202.53 L1854.5 1202.53 L1855.09 1202.53 L1855.68 1202.53 L1856.26 1202.53 L1856.85 1202.53 L1857.43 1202.53 L1858.02 1202.53 L1858.61 1202.53 L1859.19 1202.53 L1859.78 1202.53 L1860.37 1202.53 L1860.95 1202.53 L1861.54 1202.53 L1862.13 1202.53 L1862.71 1202.53 L1863.3 1202.53 L1863.88 1202.53 L1864.47 1202.53 L1865.06 1202.53 L1865.64 1202.53 L1866.23 1202.53 L1866.82 1202.53 L1867.4 1202.53 L1867.99 1202.53 L1868.58 1202.53 L1869.16 1202.53 L1869.75 1202.53 L1870.34 1202.53 L1870.92 1202.53 L1871.51 1202.53 L1872.09 1202.53 L1872.68 1202.53 L1873.27 1202.53 L1873.85 1202.53 L1874.44 1202.53 L1875.03 1202.53 L1875.61 1202.53 L1876.2 1202.53 L1876.79 1202.53 L1877.37 1202.53 L1877.96 1202.53 L1878.55 1202.53 L1879.13 1202.53 L1879.72 1202.53 L1880.3 1202.53 L1880.89 1202.53 L1881.48 1202.53 L1882.06 1202.53 L1882.65 1202.53 L1883.24 1202.53 L1883.82 1202.53 L1884.41 1202.53 L1885 1202.53 L1885.58 1202.53 L1886.17 1202.53 L1886.76 1202.53 L1887.34 1202.53 L1887.93 1202.53 L1888.51 1202.53 L1889.1 1202.53 L1889.69 1202.53 L1890.27 1202.53 L1890.86 1202.53 L1891.45 1202.53 L1892.03 1202.53 L1892.62 1202.53 L1893.21 1202.53 L1893.79 1202.53 L1894.38 1202.53 L1894.96 1202.53 L1895.55 1202.53 L1896.14 1202.53 L1896.72 1202.53 L1897.31 1202.53 L1897.9 1202.53 L1898.48 1202.53 L1899.07 1202.53 L1899.66 1202.53 L1900.24 1202.53 L1900.83 1202.53 L1901.42 1202.53 L1902 1202.53 L1902.59 1202.53 L1903.17 1202.53 L1903.76 1202.53 L1904.35 1202.53 L1904.93 1202.53 L1905.52 1202.53 L1906.11 1202.53 L1906.69 1202.53 L1907.28 1202.53 L1907.87 1202.53 L1908.45 1202.53 L1909.04 1202.53 L1909.63 1202.53 L1910.21 1202.53 L1910.8 1202.53 L1911.38 1202.53 L1911.97 1202.53 L1912.56 1202.53 L1913.14 1202.53 L1913.73 1202.53 L1914.32 1202.53 L1914.9 1202.53 L1915.49 1202.53 L1916.08 1202.53 L1916.66 1202.53 L1917.25 1202.53 L1917.83 1202.53 L1918.42 1202.53 L1919.01 1202.53 L1919.59 1202.53 L1920.18 1202.53 L1920.77 1202.53 L1921.35 1202.53 L1921.94 1202.53 L1922.53 1202.53 L1923.11 1202.53 L1923.7 1202.53 L1924.29 1202.53 L1924.87 1202.53 L1925.46 1202.53 L1926.04 1202.53 L1926.63 1202.53 L1927.22 1202.53 L1927.8 1202.53 L1928.39 1202.53 L1928.98 1202.53 L1929.56 1202.53 L1930.15 1202.53 L1930.74 1202.53 L1931.32 1202.53 L1931.91 1202.53 L1932.5 1202.53 L1933.08 1202.53 L1933.67 1202.53 L1934.25 1202.53 L1934.84 1202.53 L1935.43 1202.53 L1936.01 1202.53 L1936.6 1202.53 L1937.19 1202.53 L1937.77 1202.53 L1938.36 1202.53 L1938.95 1202.53 L1939.53 1202.53 L1940.12 1202.53 L1940.71 1202.53 L1941.29 1202.53 L1941.88 1202.53 L1942.46 1202.53 L1943.05 1202.53 L1943.64 1202.53 L1944.22 1202.53 L1944.81 1202.53 L1945.4 1202.53 L1945.98 1202.53 L1946.57 1202.53 L1947.16 1202.53 L1947.74 1202.53 L1948.33 1202.53 L1948.91 1202.53 L1949.5 1202.53 L1950.09 1202.53 L1950.67 1202.53 L1951.26 1202.53 L1951.85 1202.53 L1952.43 1202.53 L1953.02 1202.53 L1953.61 1202.53 L1954.19 1202.53 L1954.78 1202.53 L1955.37 1202.53 L1955.95 1202.53 L1956.54 1202.53 L1957.12 1202.53 L1957.71 1202.53 L1958.3 1202.53 L1958.88 1202.53 L1959.47 1202.53 L1960.06 1202.53 L1960.64 1202.53 L1961.23 1202.53 L1961.82 1202.53 L1962.4 1202.53 L1962.99 1202.53 L1963.58 1202.53 L1964.16 1202.53 L1964.75 1202.53 L1965.33 1202.53 L1965.92 1202.53 L1966.51 1202.53 L1967.09 1202.53 L1967.68 1202.53 L1968.27 1202.53 L1968.85 1202.53 L1969.44 1202.53 L1970.03 1202.53 L1970.61 1202.53 L1971.2 1202.53 L1971.78 1202.53 L1972.37 1202.53 L1972.96 1202.53 L1973.54 1202.53 L1974.13 1202.53 L1974.72 1202.53 L1975.3 1202.53 L1975.89 1202.53 L1976.48 1202.53 L1977.06 1202.53 L1977.65 1202.53 L1978.24 1202.53 L1978.82 1202.53 L1979.41 1202.53 L1979.99 1202.53 L1980.58 1202.53 L1981.17 1202.53 L1981.75 1202.53 L1982.34 1202.53 L1982.93 1202.53 L1983.51 1202.53 L1984.1 1202.53 L1984.69 1202.53 L1985.27 1202.53 L1985.86 1202.53 L1986.45 1202.53 L1987.03 1202.53 L1987.62 1202.53 L1988.2 1202.53 L1988.79 1202.53 L1989.38 1202.53 L1989.96 1202.53 L1990.55 1202.53 L1991.14 1202.53 L1991.72 1202.53 L1992.31 1202.53 L1992.9 1202.53 L1993.48 1202.53 L1994.07 1202.53 L1994.65 1202.53 L1995.24 1202.53 L1995.83 1202.53 L1996.41 1202.53 L1997 1202.53 L1997.59 1202.53 L1998.17 1202.53 L1998.76 1202.53 L1999.35 1202.53 L1999.93 1202.53 L2000.52 1202.53 L2001.11 1202.53 L2001.69 1202.53 L2002.28 1202.53 L2002.86 1202.53 L2003.45 1202.53 L2004.04 1202.53 L2004.62 1202.53 L2005.21 1202.53 L2005.8 1202.53 L2006.38 1202.53 L2006.97 1202.53 L2007.56 1202.53 L2008.14 1202.53 L2008.73 1202.53 L2009.32 1202.53 L2009.9 1202.53 L2010.49 1202.53 L2011.07 1202.53 L2011.66 1202.53 L2012.25 1202.53 L2012.83 1202.53 L2013.42 1202.53 L2014.01 1202.53 L2014.59 1202.53 L2015.18 1202.53 L2015.77 1202.53 L2016.35 1202.53 L2016.94 1202.53 L2017.53 1202.53 L2018.11 1202.53 L2018.7 1202.53 L2019.28 1202.53 L2019.87 1202.53 L2020.46 1202.53 L2021.04 1202.53 L2021.63 1202.53 L2022.22 1202.53 L2022.8 1202.53 L2023.39 1202.53 L2023.98 1202.53 L2024.56 1202.53 L2025.15 1202.53 L2025.73 1202.53 L2026.32 1202.53 L2026.91 1202.53 L2027.49 1202.53 L2028.08 1202.53 L2028.67 1202.53 L2029.25 1202.53 L2029.84 1202.53 L2030.43 1202.53 L2031.01 1202.53 L2031.6 1202.53 L2032.19 1202.53 L2032.77 1202.53 L2033.36 1202.53 L2033.94 1202.53 L2034.53 1202.53 L2035.12 1202.53 L2035.7 1202.53 L2036.29 1202.53 L2036.88 1202.53 L2037.46 1202.53 L2038.05 1202.53 L2038.64 1202.53 L2039.22 1202.53 L2039.81 1202.53 L2040.4 1202.53 L2040.98 1202.53 L2041.57 1202.53 L2042.15 1202.53 L2042.74 1202.53 L2043.33 1202.53 L2043.91 1202.53 L2044.5 1202.53 L2045.09 1202.53 L2045.67 1202.53 L2046.26 1202.53 L2046.85 1202.53 L2047.43 1202.53 L2048.02 1202.53 L2048.6 1202.53 L2049.19 1202.53 L2049.78 1202.53 L2050.36 1202.53 L2050.95 1202.53 L2051.54 1202.53 L2052.12 1202.53 L2052.71 1202.53 L2053.3 1202.53 L2053.88 1202.53 L2054.47 1202.53 L2055.06 1202.53 L2055.64 1202.53 L2056.23 1202.53 L2056.81 1202.53 L2057.4 1202.53 L2057.99 1202.53 L2058.57 1202.53 L2059.16 1202.53 L2059.75 1202.53 L2060.33 1202.53 L2060.92 1202.53 L2061.51 1202.53 L2062.09 1202.53 L2062.68 1202.53 L2063.27 1202.53 L2063.85 1202.53 L2064.44 1202.53 L2065.02 1202.53 L2065.61 1202.53 L2066.2 1202.53 L2066.78 1202.53 L2067.37 1202.53 L2067.96 1202.53 L2068.54 1202.53 L2069.13 1202.53 L2069.72 1202.53 L2070.3 1202.53 L2070.89 1202.53 L2071.48 1202.53 L2072.06 1202.53 L2072.65 1202.53 L2073.23 1202.53 L2073.82 1202.53 L2074.41 1202.53 L2074.99 1202.53 L2075.58 1202.53 L2076.17 1202.53 L2076.75 1202.53 L2077.34 1202.53 L2077.93 1202.53 L2078.51 1202.53 L2079.1 1202.53 L2079.68 1202.53 L2080.27 1202.53 L2080.86 1202.53 L2081.44 1202.53 L2082.03 1202.53 L2082.62 1202.53 L2083.2 1202.53 L2083.79 1202.53 L2084.38 1202.53 L2084.96 1202.53 L2085.55 1202.53 L2086.14 1202.53 L2086.72 1202.53 L2087.31 1202.53 L2087.89 1202.53 L2088.48 1202.53 L2089.07 1202.53 L2089.65 1202.53 L2090.24 1202.53 L2090.83 1202.53 L2091.41 1202.53 L2092 1202.53 L2092.59 1202.53 L2093.17 1202.53 L2093.76 1202.53 L2094.35 1202.53 L2094.93 1202.53 L2095.52 1202.53 L2096.1 1202.53 L2096.69 1202.53 L2097.28 1202.53 L2097.86 1202.53 L2098.45 1202.53 L2099.04 1202.53 L2099.62 1202.53 L2100.21 1202.53 L2100.8 1202.53 L2101.38 1202.53 L2101.97 1202.53 L2102.55 1202.53 L2103.14 1202.53 L2103.73 1202.53 L2104.31 1202.53 L2104.9 1202.53 L2105.49 1202.53 L2106.07 1202.53 L2106.66 1202.53 L2107.25 1202.53 L2107.83 1202.53 L2108.42 1202.53 L2109.01 1202.53 L2109.59 1202.53 L2110.18 1202.53 L2110.76 1202.53 L2111.35 1202.53 L2111.94 1202.53 L2112.52 1202.53 L2113.11 1202.53 L2113.7 1202.53 L2114.28 1202.53 L2114.87 1202.53 L2115.46 1202.53 L2116.04 1202.53 L2116.63 1202.53 L2117.22 1202.53 L2117.8 1202.53 L2118.39 1202.53 L2118.97 1202.53 L2119.56 1202.53 L2120.15 1202.53 L2120.73 1202.53 L2121.32 1202.53 L2121.91 1202.53 L2122.49 1202.53 L2123.08 1202.53 L2123.67 1202.53 L2124.25 1202.53 L2124.84 1202.53 L2125.42 1202.53 L2126.01 1202.53 L2126.6 1202.53 L2127.18 1202.53 L2127.77 1202.53 L2128.36 1202.53 L2128.94 1202.53 L2129.53 1202.53 L2130.12 1202.53 L2130.7 1202.53 L2131.29 1202.53 L2131.88 1202.53 L2132.46 1202.53 L2133.05 1202.53 L2133.63 1202.53 L2134.22 1202.53 L2134.81 1202.53 L2135.39 1202.53 L2135.98 1202.53 L2136.57 1202.53 L2137.15 1202.53 L2137.74 1202.53 L2138.33 1202.53 L2138.91 1202.53 L2139.5 1202.53 L2140.09 1202.53 L2140.67 1202.53 L2141.26 1202.53 L2141.84 1202.53 L2142.43 1202.53 L2143.02 1202.53 L2143.6 1202.53 L2144.19 1202.53 L2144.78 1202.53 L2145.36 1202.53 L2145.95 1202.53 L2146.54 1202.53 L2147.12 1202.53 L2147.71 1202.53 L2148.3 1202.53 L2148.88 1202.53 L2149.47 1202.53 L2150.05 1202.53 L2150.64 1202.53 L2151.23 1202.53 L2151.81 1202.53 L2152.4 1202.53 L2152.99 1202.53 L2153.57 1202.53 L2154.16 1202.53 L2154.75 1202.53 L2155.33 1202.53 L2155.92 1202.53 L2156.5 1202.53 L2157.09 1202.53 L2157.68 1202.53 L2158.26 1202.53 L2158.26 1201.83 L2157.68 1201.83 L2157.09 1201.83 L2156.5 1201.83 L2155.92 1201.83 L2155.33 1201.83 L2154.75 1201.83 L2154.16 1201.83 L2153.57 1201.83 L2152.99 1201.83 L2152.4 1201.83 L2151.81 1201.83 L2151.23 1201.83 L2150.64 1201.83 L2150.05 1201.83 L2149.47 1201.83 L2148.88 1201.83 L2148.3 1201.83 L2147.71 1201.83 L2147.12 1201.83 L2146.54 1201.83 L2145.95 1201.83 L2145.36 1201.83 L2144.78 1201.83 L2144.19 1201.83 L2143.6 1201.83 L2143.02 1201.83 L2142.43 1201.83 L2141.84 1201.83 L2141.26 1201.83 L2140.67 1201.83 L2140.09 1201.83 L2139.5 1201.83 L2138.91 1201.83 L2138.33 1201.83 L2137.74 1201.83 L2137.15 1201.83 L2136.57 1201.83 L2135.98 1201.83 L2135.39 1201.83 L2134.81 1201.83 L2134.22 1201.83 L2133.63 1201.83 L2133.05 1201.83 L2132.46 1201.83 L2131.88 1201.83 L2131.29 1201.83 L2130.7 1201.83 L2130.12 1201.83 L2129.53 1201.83 L2128.94 1201.83 L2128.36 1201.83 L2127.77 1201.83 L2127.18 1201.83 L2126.6 1201.83 L2126.01 1201.83 L2125.42 1201.83 L2124.84 1201.83 L2124.25 1201.83 L2123.67 1201.83 L2123.08 1201.83 L2122.49 1201.83 L2121.91 1201.83 L2121.32 1201.83 L2120.73 1201.83 L2120.15 1201.83 L2119.56 1201.83 L2118.97 1201.83 L2118.39 1201.83 L2117.8 1201.83 L2117.22 1201.83 L2116.63 1201.83 L2116.04 1201.83 L2115.46 1201.83 L2114.87 1201.83 L2114.28 1201.83 L2113.7 1201.83 L2113.11 1201.83 L2112.52 1201.83 L2111.94 1201.83 L2111.35 1201.83 L2110.76 1201.83 L2110.18 1201.83 L2109.59 1201.83 L2109.01 1201.83 L2108.42 1201.83 L2107.83 1201.83 L2107.25 1201.83 L2106.66 1201.83 L2106.07 1201.83 L2105.49 1201.83 L2104.9 1201.83 L2104.31 1201.83 L2103.73 1201.83 L2103.14 1201.83 L2102.55 1201.83 L2101.97 1201.83 L2101.38 1201.83 L2100.8 1201.83 L2100.21 1201.83 L2099.62 1201.83 L2099.04 1201.83 L2098.45 1201.83 L2097.86 1201.83 L2097.28 1201.83 L2096.69 1201.83 L2096.1 1201.83 L2095.52 1201.83 L2094.93 1201.83 L2094.35 1201.83 L2093.76 1201.83 L2093.17 1201.83 L2092.59 1201.83 L2092 1201.83 L2091.41 1201.83 L2090.83 1201.83 L2090.24 1201.83 L2089.65 1201.83 L2089.07 1201.83 L2088.48 1201.83 L2087.89 1201.83 L2087.31 1201.83 L2086.72 1201.83 L2086.14 1201.83 L2085.55 1201.83 L2084.96 1201.83 L2084.38 1201.83 L2083.79 1201.83 L2083.2 1201.83 L2082.62 1201.83 L2082.03 1201.83 L2081.44 1201.83 L2080.86 1201.83 L2080.27 1201.83 L2079.68 1201.83 L2079.1 1201.83 L2078.51 1201.83 L2077.93 1201.83 L2077.34 1201.83 L2076.75 1201.83 L2076.17 1201.83 L2075.58 1201.83 L2074.99 1201.83 L2074.41 1201.83 L2073.82 1201.83 L2073.23 1201.83 L2072.65 1201.83 L2072.06 1201.83 L2071.48 1201.83 L2070.89 1201.83 L2070.3 1201.83 L2069.72 1201.83 L2069.13 1201.83 L2068.54 1201.83 L2067.96 1201.83 L2067.37 1201.83 L2066.78 1201.83 L2066.2 1201.83 L2065.61 1201.83 L2065.02 1201.83 L2064.44 1201.83 L2063.85 1201.83 L2063.27 1201.83 L2062.68 1201.83 L2062.09 1201.83 L2061.51 1201.83 L2060.92 1201.83 L2060.33 1201.83 L2059.75 1201.83 L2059.16 1201.83 L2058.57 1201.83 L2057.99 1201.83 L2057.4 1201.83 L2056.81 1201.83 L2056.23 1201.83 L2055.64 1201.83 L2055.06 1201.83 L2054.47 1201.83 L2053.88 1201.83 L2053.3 1201.83 L2052.71 1201.83 L2052.12 1201.83 L2051.54 1201.83 L2050.95 1201.83 L2050.36 1201.83 L2049.78 1201.83 L2049.19 1201.83 L2048.6 1201.83 L2048.02 1201.83 L2047.43 1201.83 L2046.85 1201.83 L2046.26 1201.83 L2045.67 1201.83 L2045.09 1201.83 L2044.5 1201.83 L2043.91 1201.83 L2043.33 1201.83 L2042.74 1201.83 L2042.15 1201.83 L2041.57 1201.83 L2040.98 1201.83 L2040.4 1201.83 L2039.81 1201.83 L2039.22 1201.83 L2038.64 1201.83 L2038.05 1201.83 L2037.46 1201.83 L2036.88 1201.83 L2036.29 1201.83 L2035.7 1201.83 L2035.12 1201.83 L2034.53 1201.83 L2033.94 1201.83 L2033.36 1201.83 L2032.77 1201.83 L2032.19 1201.83 L2031.6 1201.83 L2031.01 1201.83 L2030.43 1201.83 L2029.84 1201.83 L2029.25 1201.83 L2028.67 1201.83 L2028.08 1201.83 L2027.49 1201.83 L2026.91 1201.83 L2026.32 1201.83 L2025.73 1201.83 L2025.15 1201.83 L2024.56 1201.83 L2023.98 1201.83 L2023.39 1201.83 L2022.8 1201.83 L2022.22 1201.83 L2021.63 1201.83 L2021.04 1201.83 L2020.46 1201.83 L2019.87 1201.83 L2019.28 1201.83 L2018.7 1201.83 L2018.11 1201.83 L2017.53 1201.83 L2016.94 1201.83 L2016.35 1201.83 L2015.77 1201.83 L2015.18 1201.83 L2014.59 1201.83 L2014.01 1201.83 L2013.42 1201.83 L2012.83 1201.83 L2012.25 1201.83 L2011.66 1201.83 L2011.07 1201.83 L2010.49 1201.83 L2009.9 1201.83 L2009.32 1201.83 L2008.73 1201.83 L2008.14 1201.83 L2007.56 1201.83 L2006.97 1201.83 L2006.38 1201.83 L2005.8 1201.83 L2005.21 1201.83 L2004.62 1201.83 L2004.04 1201.83 L2003.45 1201.83 L2002.86 1201.83 L2002.28 1201.83 L2001.69 1201.83 L2001.11 1201.83 L2000.52 1201.83 L1999.93 1201.83 L1999.35 1201.83 L1998.76 1201.83 L1998.17 1201.83 L1997.59 1201.83 L1997 1201.83 L1996.41 1201.83 L1995.83 1201.83 L1995.24 1201.83 L1994.65 1201.83 L1994.07 1201.83 L1993.48 1201.83 L1992.9 1201.83 L1992.31 1201.83 L1991.72 1201.83 L1991.14 1201.83 L1990.55 1201.83 L1989.96 1201.83 L1989.38 1201.83 L1988.79 1201.83 L1988.2 1201.83 L1987.62 1201.83 L1987.03 1201.83 L1986.45 1201.83 L1985.86 1201.83 L1985.27 1201.83 L1984.69 1201.83 L1984.1 1201.83 L1983.51 1201.83 L1982.93 1201.83 L1982.34 1201.83 L1981.75 1201.83 L1981.17 1201.83 L1980.58 1201.83 L1979.99 1201.83 L1979.41 1201.83 L1978.82 1201.83 L1978.24 1201.83 L1977.65 1201.83 L1977.06 1201.83 L1976.48 1201.83 L1975.89 1201.83 L1975.3 1201.83 L1974.72 1201.83 L1974.13 1201.83 L1973.54 1201.83 L1972.96 1201.83 L1972.37 1201.83 L1971.78 1201.83 L1971.2 1201.83 L1970.61 1201.83 L1970.03 1201.83 L1969.44 1201.83 L1968.85 1201.83 L1968.27 1201.83 L1967.68 1201.83 L1967.09 1201.83 L1966.51 1201.83 L1965.92 1201.83 L1965.33 1201.83 L1964.75 1201.83 L1964.16 1201.83 L1963.58 1201.83 L1962.99 1201.83 L1962.4 1201.83 L1961.82 1201.83 L1961.23 1201.83 L1960.64 1201.83 L1960.06 1201.83 L1959.47 1201.83 L1958.88 1201.83 L1958.3 1201.83 L1957.71 1201.83 L1957.12 1201.83 L1956.54 1201.83 L1955.95 1201.83 L1955.37 1201.83 L1954.78 1201.83 L1954.19 1201.83 L1953.61 1201.83 L1953.02 1201.83 L1952.43 1201.83 L1951.85 1201.83 L1951.26 1201.83 L1950.67 1201.83 L1950.09 1201.83 L1949.5 1201.83 L1948.91 1201.83 L1948.33 1201.83 L1947.74 1201.83 L1947.16 1201.83 L1946.57 1201.83 L1945.98 1201.83 L1945.4 1201.83 L1944.81 1201.83 L1944.22 1201.83 L1943.64 1201.83 L1943.05 1201.83 L1942.46 1201.83 L1941.88 1201.83 L1941.29 1201.83 L1940.71 1201.83 L1940.12 1201.83 L1939.53 1201.83 L1938.95 1201.83 L1938.36 1201.83 L1937.77 1201.83 L1937.19 1201.83 L1936.6 1201.83 L1936.01 1201.83 L1935.43 1201.83 L1934.84 1201.83 L1934.25 1201.83 L1933.67 1201.83 L1933.08 1201.83 L1932.5 1201.83 L1931.91 1201.83 L1931.32 1201.83 L1930.74 1201.83 L1930.15 1201.83 L1929.56 1201.83 L1928.98 1201.83 L1928.39 1201.83 L1927.8 1201.83 L1927.22 1201.83 L1926.63 1201.83 L1926.04 1201.83 L1925.46 1201.83 L1924.87 1201.83 L1924.29 1201.83 L1923.7 1201.83 L1923.11 1201.83 L1922.53 1201.83 L1921.94 1201.83 L1921.35 1201.83 L1920.77 1201.83 L1920.18 1201.83 L1919.59 1201.83 L1919.01 1201.83 L1918.42 1201.83 L1917.83 1201.83 L1917.25 1201.83 L1916.66 1201.83 L1916.08 1201.83 L1915.49 1201.83 L1914.9 1201.83 L1914.32 1201.83 L1913.73 1201.83 L1913.14 1201.83 L1912.56 1201.83 L1911.97 1201.83 L1911.38 1201.83 L1910.8 1201.83 L1910.21 1201.83 L1909.63 1201.83 L1909.04 1201.83 L1908.45 1201.83 L1907.87 1201.83 L1907.28 1201.83 L1906.69 1201.83 L1906.11 1201.83 L1905.52 1201.83 L1904.93 1201.83 L1904.35 1201.83 L1903.76 1201.83 L1903.17 1201.83 L1902.59 1201.83 L1902 1201.83 L1901.42 1201.83 L1900.83 1201.83 L1900.24 1201.83 L1899.66 1201.83 L1899.07 1201.83 L1898.48 1201.83 L1897.9 1201.83 L1897.31 1201.83 L1896.72 1201.83 L1896.14 1201.83 L1895.55 1201.83 L1894.96 1201.83 L1894.38 1201.83 L1893.79 1201.83 L1893.21 1201.83 L1892.62 1201.83 L1892.03 1201.83 L1891.45 1201.83 L1890.86 1201.83 L1890.27 1201.83 L1889.69 1201.83 L1889.1 1201.83 L1888.51 1201.83 L1887.93 1201.83 L1887.34 1201.83 L1886.76 1201.83 L1886.17 1201.83 L1885.58 1201.83 L1885 1201.83 L1884.41 1201.83 L1883.82 1201.83 L1883.24 1201.83 L1882.65 1201.83 L1882.06 1201.83 L1881.48 1201.83 L1880.89 1201.83 L1880.3 1201.83 L1879.72 1201.83 L1879.13 1201.83 L1878.55 1201.83 L1877.96 1201.83 L1877.37 1201.83 L1876.79 1201.83 L1876.2 1201.83 L1875.61 1201.83 L1875.03 1201.83 L1874.44 1201.83 L1873.85 1201.83 L1873.27 1201.83 L1872.68 1201.83 L1872.09 1201.83 L1871.51 1201.83 L1870.92 1201.83 L1870.34 1201.83 L1869.75 1201.83 L1869.16 1201.83 L1868.58 1201.83 L1867.99 1201.83 L1867.4 1201.83 L1866.82 1201.83 L1866.23 1201.83 L1865.64 1201.83 L1865.06 1201.83 L1864.47 1201.83 L1863.88 1201.83 L1863.3 1201.83 L1862.71 1201.83 L1862.13 1201.83 L1861.54 1201.83 L1860.95 1201.83 L1860.37 1201.83 L1859.78 1201.83 L1859.19 1201.83 L1858.61 1201.83 L1858.02 1201.83 L1857.43 1201.83 L1856.85 1201.83 L1856.26 1201.83 L1855.68 1201.83 L1855.09 1201.83 L1854.5 1201.83 L1853.92 1201.83 L1853.33 1201.83 L1852.74 1201.83 L1852.16 1201.83 L1851.57 1201.83 L1850.98 1201.83 L1850.4 1201.83 L1849.81 1201.83 L1849.22 1201.83 L1848.64 1201.83 L1848.05 1201.83 L1847.47 1201.83 L1846.88 1201.83 L1846.29 1201.83 L1845.71 1201.83 L1845.12 1201.83 L1844.53 1201.83 L1843.95 1201.83 L1843.36 1201.83 L1842.77 1201.83 L1842.19 1201.83 L1841.6 1201.83 L1841.01 1201.83 L1840.43 1201.83 L1839.84 1201.83 L1839.26 1201.83 L1838.67 1201.83 L1838.08 1201.83 L1837.5 1201.83 L1836.91 1201.83 L1836.32 1201.83 L1835.74 1201.83 L1835.15 1201.83 L1834.56 1201.83 L1833.98 1201.83 L1833.39 1201.83 L1832.81 1201.83 L1832.22 1201.83 L1831.63 1201.83 L1831.05 1201.83 L1830.46 1201.83 L1829.87 1201.83 L1829.29 1201.83 L1828.7 1201.83 L1828.11 1201.83 L1827.53 1201.83 L1826.94 1201.83 L1826.35 1201.83 L1825.77 1201.83 L1825.18 1201.83 L1824.6 1201.83 L1824.01 1201.83 L1823.42 1201.83 L1822.84 1201.83 L1822.25 1201.83 L1821.66 1201.83 L1821.08 1201.83 L1820.49 1201.83 L1819.9 1201.83 L1819.32 1201.83 L1818.73 1201.83 L1818.14 1201.83 L1817.56 1201.83 L1816.97 1201.83 L1816.39 1201.83 L1815.8 1201.83 L1815.21 1201.83 L1814.63 1201.83 L1814.04 1201.83 L1813.45 1201.83 L1812.87 1201.83 L1812.28 1201.83 L1811.69 1201.83 L1811.11 1201.83 L1810.52 1201.83 L1809.94 1201.83 L1809.35 1201.83 L1808.76 1201.83 L1808.18 1201.83 L1807.59 1201.83 L1807 1201.83 L1806.42 1201.83 L1805.83 1201.83 L1805.24 1201.83 L1804.66 1201.83 L1804.07 1201.83 L1803.48 1201.83 L1802.9 1201.83 L1802.31 1201.83 L1801.73 1201.83 L1801.14 1201.83 L1800.55 1201.83 L1799.97 1201.83 L1799.38 1201.83 L1798.79 1201.83 L1798.21 1201.83 L1797.62 1201.83 L1797.03 1201.83 L1796.45 1201.83 L1795.86 1201.83 L1795.27 1201.83 L1794.69 1201.83 L1794.1 1201.83 L1793.52 1201.83 L1792.93 1201.83 L1792.34 1201.83 L1791.76 1201.83 L1791.17 1201.83 L1790.58 1201.83 L1790 1201.83 L1789.41 1201.83 L1788.82 1201.83 L1788.24 1201.83 L1787.65 1201.83 L1787.06 1201.83 L1786.48 1201.83 L1785.89 1201.83 L1785.31 1201.83 L1784.72 1201.83 L1784.13 1201.83 L1783.55 1201.83 L1782.96 1201.83 L1782.37 1201.83 L1781.79 1201.83 L1781.2 1201.83 L1780.61 1201.83 L1780.03 1201.83 L1779.44 1201.83 L1778.86 1201.83 L1778.27 1201.83 L1777.68 1201.83 L1777.1 1201.83 L1776.51 1201.83 L1775.92 1201.83 L1775.34 1201.83 L1774.75 1201.83 L1774.16 1201.83 L1773.58 1201.83 L1772.99 1201.83 L1772.4 1201.83 L1771.82 1201.83 L1771.23 1201.83 L1770.65 1201.83 L1770.06 1201.83 L1769.47 1201.83 L1768.89 1201.83 L1768.3 1201.83 L1767.71 1201.83 L1767.13 1201.83 L1766.54 1201.83 L1765.95 1201.83 L1765.37 1201.83 L1764.78 1201.83 L1764.19 1201.83 L1763.61 1201.83 L1763.02 1201.83 L1762.44 1201.83 L1761.85 1201.83 L1761.26 1201.83 L1760.68 1201.83 L1760.09 1201.83 L1759.5 1201.83 L1758.92 1201.83 L1758.33 1201.83 L1757.74 1201.83 L1757.16 1201.83 L1756.57 1201.83 L1755.99 1201.83 L1755.4 1201.83 L1754.81 1201.83 L1754.23 1201.83 L1753.64 1201.83 L1753.05 1201.83 L1752.47 1201.83 L1751.88 1201.83 L1751.29 1201.83 L1750.71 1201.83 L1750.12 1201.83 L1749.53 1201.83 L1748.95 1201.83 L1748.36 1201.83 L1747.78 1201.83 L1747.19 1201.83 L1746.6 1201.83 L1746.02 1201.83 L1745.43 1201.83 L1744.84 1201.83 L1744.26 1201.83 L1743.67 1201.83 L1743.08 1201.83 L1742.5 1201.83 L1741.91 1201.83 L1741.32 1201.83 L1740.74 1201.83 L1740.15 1201.83 L1739.57 1201.83 L1738.98 1201.83 L1738.39 1201.83 L1737.81 1201.83 L1737.22 1201.83 L1736.63 1201.83 L1736.05 1201.83 L1735.46 1201.83 L1734.87 1201.83 L1734.29 1201.83 L1733.7 1201.83 L1733.11 1201.83 L1732.53 1201.83 L1731.94 1201.83 L1731.36 1201.83 L1730.77 1201.83 L1730.18 1201.83 L1729.6 1201.83 L1729.01 1201.83 L1728.42 1201.83 L1727.84 1201.83 L1727.25 1201.83 L1726.66 1201.83 L1726.08 1201.83 L1725.49 1201.83 L1724.91 1201.83 L1724.32 1201.83 L1723.73 1201.83 L1723.15 1201.83 L1722.56 1201.83 L1721.97 1201.83 L1721.39 1201.83 L1720.8 1201.83 L1720.21 1201.83 L1719.63 1201.83 L1719.04 1201.83 L1718.45 1201.83 L1717.87 1201.83 L1717.28 1201.83 L1716.7 1201.83 L1716.11 1201.83 L1715.52 1201.83 L1714.94 1201.83 L1714.35 1201.83 L1713.76 1201.83 L1713.18 1201.83 L1712.59 1201.83 L1712 1201.83 L1711.42 1201.83 L1710.83 1201.83 L1710.24 1201.83 L1709.66 1201.83 L1709.07 1201.83 L1708.49 1201.83 L1707.9 1201.83 L1707.31 1201.83 L1706.73 1201.83 L1706.14 1201.83 L1705.55 1201.83 L1704.97 1201.83 L1704.38 1201.83 L1703.79 1201.83 L1703.21 1201.83 L1702.62 1201.83 L1702.04 1201.83 L1701.45 1201.83 L1700.86 1201.83 L1700.28 1201.83 L1699.69 1201.83 L1699.1 1201.83 L1698.52 1201.83 L1697.93 1201.83 L1697.34 1201.83 L1696.76 1201.83 L1696.17 1201.83 L1695.58 1201.83 L1695 1201.83 L1694.41 1201.83 L1693.83 1201.83 L1693.24 1201.83 L1692.65 1201.83 L1692.07 1201.83 L1691.48 1201.83 L1690.89 1201.83 L1690.31 1201.83 L1689.72 1201.83 L1689.13 1201.83 L1688.55 1201.83 L1687.96 1201.83 L1687.37 1201.83 L1686.79 1201.83 L1686.2 1201.83 L1685.62 1201.83 L1685.03 1201.83 L1684.44 1201.83 L1683.86 1201.83 L1683.27 1201.83 L1682.68 1201.83 L1682.1 1201.83 L1681.51 1201.83 L1680.92 1201.83 L1680.34 1201.83 L1679.75 1201.83 L1679.17 1201.83 L1678.58 1201.83 L1677.99 1201.83 L1677.41 1201.83 L1676.82 1201.83 L1676.23 1201.83 L1675.65 1201.83 L1675.06 1201.83 L1674.47 1201.83 L1673.89 1201.83 L1673.3 1201.83 L1672.71 1201.83 L1672.13 1201.83 L1671.54 1201.83 L1670.96 1201.83 L1670.37 1201.83 L1669.78 1201.83 L1669.2 1201.83 L1668.61 1201.83 L1668.02 1201.83 L1667.44 1201.83 L1666.85 1201.83 L1666.26 1201.83 L1665.68 1201.83 L1665.09 1201.83 L1664.5 1201.83 L1663.92 1201.83 L1663.33 1201.83 L1662.75 1201.83 L1662.16 1201.83 L1661.57 1201.83 L1660.99 1201.83 L1660.4 1201.83 L1659.81 1201.83 L1659.23 1201.83 L1658.64 1201.83 L1658.05 1201.83 L1657.47 1201.83 L1656.88 1201.83 L1656.29 1201.83 L1655.71 1201.83 L1655.12 1201.83 L1654.54 1201.83 L1653.95 1201.83 L1653.36 1201.83 L1652.78 1201.83 L1652.19 1201.83 L1651.6 1201.83 L1651.02 1201.83 L1650.43 1201.83 L1649.84 1201.83 L1649.26 1201.83 L1648.67 1201.83 L1648.09 1201.83 L1647.5 1201.83 L1646.91 1201.83 L1646.33 1201.83 L1645.74 1201.83 L1645.15 1201.83 L1644.57 1201.83 L1643.98 1201.83 L1643.39 1201.83 L1642.81 1201.83 L1642.22 1201.83 L1641.63 1201.83 L1641.05 1201.83 L1640.46 1201.83 L1639.88 1201.83 L1639.29 1201.83 L1638.7 1201.83 L1638.12 1201.83 L1637.53 1201.83 L1636.94 1201.83 L1636.36 1201.83 L1635.77 1201.83 L1635.18 1201.83 L1634.6 1201.83 L1634.01 1201.83 L1633.42 1201.83 L1632.84 1201.83 L1632.25 1201.83 L1631.67 1201.83 L1631.08 1201.83 L1630.49 1201.83 L1629.91 1201.83 L1629.32 1201.83 L1628.73 1201.83 L1628.15 1201.83 L1627.56 1201.83 L1626.97 1201.83 L1626.39 1201.83 L1625.8 1201.83 L1625.22 1201.83 L1624.63 1201.83 L1624.04 1201.83 L1623.46 1201.83 L1622.87 1201.83 L1622.28 1201.83 L1621.7 1201.83 L1621.11 1201.83 L1620.52 1201.83 L1619.94 1201.83 L1619.35 1201.83 L1618.76 1201.83 L1618.18 1201.83 L1617.59 1201.83 L1617.01 1201.83 L1616.42 1201.83 L1615.83 1201.83 L1615.25 1201.83 L1614.66 1201.83 L1614.07 1201.83 L1613.49 1201.83 L1612.9 1201.83 L1612.31 1201.83 L1611.73 1201.83 L1611.14 1201.83 L1610.55 1201.83 L1609.97 1201.83 L1609.38 1201.83 L1608.8 1201.83 L1608.21 1201.83 L1607.62 1201.83 L1607.04 1201.83 L1606.45 1201.83 L1605.86 1201.83 L1605.28 1201.83 L1604.69 1201.83 L1604.1 1201.83 L1603.52 1201.83 L1602.93 1201.83 L1602.34 1201.83 L1601.76 1201.83 L1601.17 1201.83 L1600.59 1201.83 L1600 1201.83 L1599.41 1201.83 L1598.83 1201.83 L1598.24 1201.83 L1597.65 1201.83 L1597.07 1201.83 L1596.48 1201.83 L1595.89 1201.83 L1595.31 1201.83 L1594.72 1201.83 L1594.14 1201.83 L1593.55 1201.83 L1592.96 1201.83 L1592.38 1201.83 L1591.79 1201.83 L1591.2 1201.83 L1590.62 1201.83 L1590.03 1201.83 L1589.44 1201.83 L1588.86 1201.83 L1588.27 1201.83 L1587.68 1201.83 L1587.1 1201.83 L1586.51 1201.83 L1585.93 1201.83 L1585.34 1201.83 L1584.75 1201.83 L1584.17 1201.83 L1583.58 1201.83 L1582.99 1201.83 L1582.41 1201.83 L1581.82 1201.83 L1581.23 1201.83 L1580.65 1201.83 L1580.06 1201.83 L1579.47 1201.83 L1578.89 1201.83 L1578.3 1201.83 L1577.72 1201.83 L1577.13 1201.83 L1576.54 1201.83 L1575.96 1201.83 L1575.37 1201.83 L1574.78 1201.83 L1574.2 1201.83 L1573.61 1201.83 L1573.02 1201.83 L1572.44 1201.83 L1571.85 1201.83 L1571.27 1201.83 L1570.68 1201.83 L1570.09 1201.83 L1569.51 1201.83 L1568.92 1201.83 L1568.33 1201.83 L1567.75 1201.83 L1567.16 1201.83 L1566.57 1201.83 L1565.99 1201.83 L1565.4 1201.83 L1564.81 1201.83 L1564.23 1201.83 L1563.64 1201.83 L1563.06 1201.83 L1562.47 1201.83 L1561.88 1201.83 L1561.3 1201.83 L1560.71 1201.83 L1560.12 1201.83 L1559.54 1201.83 L1558.95 1201.83 L1558.36 1201.83 L1557.78 1201.83 L1557.19 1201.83 L1556.6 1201.83 L1556.02 1201.83 L1555.43 1201.83 L1554.85 1201.83 L1554.26 1201.83 L1553.67 1201.83 L1553.09 1201.83 L1552.5 1201.83 L1551.91 1201.83 L1551.33 1201.83 L1550.74 1201.83 L1550.15 1201.83 L1549.57 1201.83 L1548.98 1201.83 L1548.4 1201.83 L1547.81 1201.83 L1547.22 1201.83 L1546.64 1201.83 L1546.05 1201.83 L1545.46 1201.83 L1544.88 1201.83 L1544.29 1201.83 L1543.7 1201.83 L1543.12 1201.83 L1542.53 1201.83 L1541.94 1201.83 L1541.36 1201.83 L1540.77 1201.83 L1540.19 1201.83 L1539.6 1201.83 L1539.01 1201.83 L1538.43 1201.83 L1537.84 1201.83 L1537.25 1201.83 L1536.67 1201.83 L1536.08 1201.83 L1535.49 1201.83 L1534.91 1201.83 L1534.32 1201.83 L1533.73 1201.83 L1533.15 1201.83 L1532.56 1201.83 L1531.98 1201.83 L1531.39 1201.83 L1530.8 1201.83 L1530.22 1201.83 L1529.63 1201.83 L1529.04 1201.83 L1528.46 1201.83 L1527.87 1201.83 L1527.28 1201.83 L1526.7 1201.83 L1526.11 1201.83 L1525.52 1201.83 L1524.94 1201.83 L1524.35 1201.83 L1523.77 1201.83 L1523.18 1201.83 L1522.59 1201.83 L1522.01 1201.83 L1521.42 1201.83 L1520.83 1201.83 L1520.25 1201.83 L1519.66 1201.83 L1519.07 1201.83 L1518.49 1201.83 L1517.9 1201.83 L1517.32 1201.83 L1516.73 1201.83 L1516.14 1201.83 L1515.56 1201.83 L1514.97 1201.83 L1514.38 1201.83 L1513.8 1201.83 L1513.21 1201.83 L1512.62 1201.83 L1512.04 1201.83 L1511.45 1201.83 L1510.86 1201.83 L1510.28 1201.83 L1509.69 1201.83 L1509.11 1201.83 L1508.52 1201.83 L1507.93 1201.83 L1507.35 1201.83 L1506.76 1201.83 L1506.17 1201.83 L1505.59 1201.83 L1505 1201.83 L1504.41 1201.83 L1503.83 1201.83 L1503.24 1201.83 L1502.65 1201.83 L1502.07 1201.83 L1501.48 1201.83 L1500.9 1201.83 L1500.31 1201.83 L1499.72 1201.83 L1499.14 1201.83 L1498.55 1201.83 L1497.96 1201.83 L1497.38 1201.83 L1496.79 1201.83 L1496.2 1201.83 L1495.62 1201.83 L1495.03 1201.83 L1494.45 1201.83 L1493.86 1201.83 L1493.27 1201.83 L1492.69 1201.83 L1492.1 1201.83 L1491.51 1201.83 L1490.93 1201.83 L1490.34 1201.83 L1489.75 1201.83 L1489.17 1201.83 L1488.58 1201.83 L1487.99 1201.83 L1487.41 1201.83 L1486.82 1201.83 L1486.24 1201.83 L1485.65 1201.83 L1485.06 1201.83 L1484.48 1201.83 L1483.89 1201.83 L1483.3 1201.83 L1482.72 1201.83 L1482.13 1201.83 L1481.54 1201.83 L1480.96 1201.83 L1480.37 1201.83 L1479.78 1201.83 L1479.2 1201.83 L1478.61 1201.83 L1478.03 1201.83 L1477.44 1201.83 L1476.85 1201.83 L1476.27 1201.83 L1475.68 1201.83 L1475.09 1201.83 L1474.51 1201.83 L1473.92 1201.83 L1473.33 1201.83 L1472.75 1201.83 L1472.16 1201.83 L1471.57 1201.83 L1470.99 1201.83 L1470.4 1201.83 L1469.82 1201.83 L1469.23 1201.83 L1468.64 1201.83 L1468.06 1201.83 L1467.47 1201.83 L1466.88 1201.83 L1466.3 1201.83 L1465.71 1201.83 L1465.12 1201.83 L1464.54 1201.83 L1463.95 1201.83 L1463.37 1201.83 L1462.78 1201.83 L1462.19 1201.83 L1461.61 1201.83 L1461.02 1201.83 L1460.43 1201.83 L1459.85 1201.83 L1459.26 1201.83 L1458.67 1201.83 L1458.09 1201.83 L1457.5 1201.83 L1456.91 1201.83 L1456.33 1201.83 L1455.74 1201.83 L1455.16 1201.83 L1454.57 1201.83 L1453.98 1201.83 L1453.4 1201.83 L1452.81 1201.83 L1452.22 1201.83 L1451.64 1201.83 L1451.05 1201.83 L1450.46 1201.83 L1449.88 1201.83 L1449.29 1201.83 L1448.7 1201.83 L1448.12 1201.83 L1447.53 1201.83 L1446.95 1201.83 L1446.36 1201.83 L1445.77 1201.83 L1445.19 1201.83 L1444.6 1201.83 L1444.01 1201.83 L1443.43 1201.83 L1442.84 1201.83 L1442.25 1201.83 L1441.67 1201.83 L1441.08 1201.83 L1440.5 1201.83 L1439.91 1201.83 L1439.32 1201.83 L1438.74 1201.83 L1438.15 1201.83 L1437.56 1201.83 L1436.98 1201.83 L1436.39 1201.83 L1435.8 1201.83 L1435.22 1201.83 L1434.63 1201.83 L1434.04 1201.83 L1433.46 1201.83 L1432.87 1201.83 L1432.29 1201.83 L1431.7 1201.83 L1431.11 1201.83 L1430.53 1201.83 L1429.94 1201.83 L1429.35 1201.83 L1428.77 1201.83 L1428.18 1201.83 L1427.59 1201.83 L1427.01 1201.83 L1426.42 1201.83 L1425.83 1201.83 L1425.25 1201.83 L1424.66 1201.83 L1424.08 1201.83 L1423.49 1201.83 L1422.9 1201.83 L1422.32 1201.83 L1421.73 1201.83 L1421.14 1201.83 L1420.56 1201.83 L1419.97 1201.83 L1419.38 1201.83 L1418.8 1201.83 L1418.21 1201.83 L1417.63 1201.83 L1417.04 1201.83 L1416.45 1201.83 L1415.87 1201.83 L1415.28 1201.83 L1414.69 1201.83 L1414.11 1201.83 L1413.52 1201.83 L1412.93 1201.83 L1412.35 1201.83 L1411.76 1201.83 L1411.17 1201.83 L1410.59 1201.83 L1410 1201.83 L1409.42 1201.83 L1408.83 1201.83 L1408.24 1201.83 L1407.66 1201.83 L1407.07 1201.83 L1406.48 1201.83 L1405.9 1201.83 L1405.31 1201.83 L1404.72 1201.83 L1404.14 1201.83 L1403.55 1201.83 L1402.96 1201.83 L1402.38 1201.83 L1401.79 1201.83 L1401.21 1201.83 L1400.62 1201.83 L1400.03 1201.83 L1399.45 1201.83 L1398.86 1201.83 L1398.27 1201.83 L1397.69 1201.83 L1397.1 1201.83 L1396.51 1201.83 L1395.93 1201.83 L1395.34 1201.83 L1394.75 1201.83 L1394.17 1201.83 L1393.58 1201.83 L1393 1201.83 L1392.41 1201.83 L1391.82 1201.83 L1391.24 1201.83 L1390.65 1201.83 L1390.06 1201.83 L1389.48 1201.83 L1388.89 1201.83 L1388.3 1201.83 L1387.72 1201.83 L1387.13 1201.83 L1386.55 1201.83 L1385.96 1201.83 L1385.37 1201.83 L1384.79 1201.83 L1384.2 1201.83 L1383.61 1201.83 L1383.03 1201.83 L1382.44 1201.83 L1381.85 1201.83 L1381.27 1201.83 L1380.68 1201.83 L1380.09 1201.83 L1379.51 1201.83 L1378.92 1201.83 L1378.34 1201.83 L1377.75 1201.83 L1377.16 1201.83 L1376.58 1201.83 L1375.99 1201.83 L1375.4 1201.83 L1374.82 1201.83 L1374.23 1201.83 L1373.64 1201.83 L1373.06 1201.83 L1372.47 1201.83 L1371.88 1201.83 L1371.3 1201.83 L1370.71 1201.83 L1370.13 1201.83 L1369.54 1201.83 L1368.95 1201.83 L1368.37 1201.83 L1367.78 1201.83 L1367.19 1201.83 L1366.61 1201.83 L1366.02 1201.83 L1365.43 1201.83 L1364.85 1201.83 L1364.26 1201.83 L1363.68 1201.83 L1363.09 1201.83 L1362.5 1201.83 L1361.92 1201.83 L1361.33 1201.83 L1360.74 1201.83 L1360.16 1201.83 L1359.57 1201.83 L1358.98 1201.83 L1358.4 1201.83 L1357.81 1201.83 L1357.22 1201.83 L1356.64 1201.83 L1356.05 1201.83 L1355.47 1201.83 L1354.88 1201.83 L1354.29 1201.83 L1353.71 1201.83 L1353.12 1201.83 L1352.53 1201.83 L1351.95 1201.83 L1351.36 1201.83 L1350.77 1201.83 L1350.19 1201.83 L1349.6 1201.83 L1349.01 1201.83 L1348.43 1201.83 L1347.84 1201.83 L1347.26 1201.83 L1346.67 1201.83 L1346.08 1201.83 L1345.5 1201.83 L1344.91 1201.83 L1344.32 1201.83 L1343.74 1201.83 L1343.15 1201.83 L1342.56 1201.83 L1341.98 1201.83 L1341.39 1201.83 L1340.8 1201.83 L1340.22 1201.83 L1339.63 1201.83 L1339.05 1201.83 L1338.46 1201.83 L1337.87 1201.83 L1337.29 1201.83 L1336.7 1201.83 L1336.11 1201.83 L1335.53 1201.83 L1334.94 1201.83 L1334.35 1201.83 L1333.77 1201.83 L1333.18 1201.83 L1332.6 1201.83 L1332.01 1201.83 L1331.42 1201.83 L1330.84 1201.83 L1330.25 1201.83 L1329.66 1201.83 L1329.08 1201.83 L1328.49 1201.83 L1327.9 1201.83 L1327.32 1201.83 L1326.73 1201.83 L1326.14 1201.83 L1325.56 1201.83 L1324.97 1201.83 L1324.39 1201.83 L1323.8 1201.83 L1323.21 1201.83 L1322.63 1201.83 L1322.04 1201.83 L1321.45 1201.83 L1320.87 1201.83 L1320.28 1201.83 L1319.69 1201.83 L1319.11 1201.83 L1318.52 1201.83 L1317.93 1201.83 L1317.35 1201.83 L1316.76 1201.83 L1316.18 1201.83 L1315.59 1201.83 L1315 1201.83 L1314.42 1201.83 L1313.83 1201.83 L1313.24 1201.83 L1312.66 1201.83 L1312.07 1201.83 L1311.48 1201.83 L1310.9 1201.83 L1310.31 1201.83 L1309.73 1201.83 L1309.14 1201.83 L1308.55 1201.83 L1307.97 1201.83 L1307.38 1201.83 L1306.79 1201.83 L1306.21 1201.83 L1305.62 1201.83 L1305.03 1201.83 L1304.45 1201.83 L1303.86 1201.83 L1303.27 1201.83 L1302.69 1201.83 L1302.1 1201.83 L1301.52 1201.83 L1300.93 1201.83 L1300.34 1201.83 L1299.76 1201.83 L1299.17 1201.83 L1298.58 1201.83 L1298 1201.83 L1297.41 1201.83 L1296.82 1201.83 L1296.24 1201.83 L1295.65 1201.83 L1295.06 1201.83 L1294.48 1201.83 L1293.89 1201.83 L1293.31 1201.83 L1292.72 1201.83 L1292.13 1201.83 L1291.55 1201.83 L1290.96 1201.83 L1290.37 1201.83 L1289.79 1201.83 L1289.2 1201.83 L1288.61 1201.83 L1288.03 1201.83 L1287.44 1201.83 L1286.86 1201.83 L1286.27 1201.83 L1285.68 1201.83 L1285.1 1201.83 L1284.51 1201.83 L1283.92 1201.83 L1283.34 1201.83 L1282.75 1201.83 L1282.16 1201.83 L1281.58 1201.83 L1280.99 1201.83 L1280.4 1201.83 L1279.82 1201.83 L1279.23 1201.83 L1278.65 1201.83 L1278.06 1201.83 L1277.47 1201.83 L1276.89 1201.83 L1276.3 1201.83 L1275.71 1201.83 L1275.13 1201.83 L1274.54 1201.83 L1273.95 1201.83 L1273.37 1201.83 L1272.78 1201.83 L1272.19 1201.83 L1271.61 1201.83 L1271.02 1201.83 L1270.44 1201.83 L1269.85 1201.83 L1269.26 1201.83 L1268.68 1201.83 L1268.09 1201.83 L1267.5 1201.83 L1266.92 1201.83 L1266.33 1201.83 L1265.74 1201.83 L1265.16 1201.83 L1264.57 1201.83 L1263.98 1201.83 L1263.4 1201.83 L1262.81 1201.83 L1262.23 1201.83 L1261.64 1201.83 L1261.05 1201.83 L1260.47 1201.83 L1259.88 1201.83 L1259.29 1201.83 L1258.71 1201.83 L1258.12 1201.83 L1257.53 1201.83 L1256.95 1201.83 L1256.36 1201.83 L1255.78 1201.83 L1255.19 1201.83 L1254.6 1201.83 L1254.02 1201.83 L1253.43 1201.83 L1252.84 1201.83 L1252.26 1201.83 L1251.67 1201.83 L1251.08 1201.83 L1250.5 1201.83 L1249.91 1201.83 L1249.32 1201.83 L1248.74 1201.83 L1248.15 1201.83 L1247.57 1201.83 L1246.98 1201.83 L1246.39 1201.83 L1245.81 1201.83 L1245.22 1201.83 L1244.63 1201.83 L1244.05 1201.83 L1243.46 1201.83 L1242.87 1201.83 L1242.29 1201.83 L1241.7 1201.83 L1241.11 1201.83 L1240.53 1201.83 L1239.94 1201.83 L1239.36 1201.83 L1238.77 1201.83 L1238.18 1201.83 L1237.6 1201.83 L1237.01 1201.83 L1236.42 1201.83 L1235.84 1201.83 L1235.25 1201.83 L1234.66 1201.83 L1234.08 1201.83 L1233.49 1201.83 L1232.91 1201.83 L1232.32 1201.83 L1231.73 1201.83 L1231.15 1201.83 L1230.56 1201.83 L1229.97 1201.83 L1229.39 1201.83 L1228.8 1201.83 L1228.21 1201.83 L1227.63 1201.83 L1227.04 1201.83 L1226.45 1201.83 L1225.87 1201.83 L1225.28 1201.83 L1224.7 1201.83 L1224.11 1201.83 L1223.52 1201.83 L1222.94 1201.83 L1222.35 1201.83 L1221.76 1201.83 L1221.18 1201.83 L1220.59 1201.83 L1220 1201.83 L1219.42 1201.83 L1218.83 1201.83 L1218.24 1201.83 L1217.66 1201.83 L1217.07 1201.83 L1216.49 1201.83 L1215.9 1201.83 L1215.31 1201.83 L1214.73 1201.83 L1214.14 1201.83 L1213.55 1201.83 L1212.97 1201.83 L1212.38 1201.83 L1211.79 1201.83 L1211.21 1201.83 L1210.62 1201.83 L1210.03 1201.83 L1209.45 1201.83 L1208.86 1201.83 L1208.28 1201.83 L1207.69 1201.83 L1207.1 1201.83 L1206.52 1201.83 L1205.93 1201.83 L1205.34 1201.83 L1204.76 1201.83 L1204.17 1201.83 L1203.58 1201.83 L1203 1201.83 L1202.41 1201.83 L1201.83 1201.83 L1201.24 1201.83 L1200.65 1201.83 L1200.07 1201.83 L1199.48 1201.83 L1198.89 1201.83 L1198.31 1201.83 L1197.72 1201.83 L1197.13 1201.83 L1196.55 1201.83 L1195.96 1201.83 L1195.37 1201.83 L1194.79 1201.83 L1194.2 1201.83 L1193.62 1201.83 L1193.03 1201.83 L1192.44 1201.83 L1191.86 1201.83 L1191.27 1201.83 L1190.68 1201.83 L1190.1 1201.83 L1189.51 1201.83 L1188.92 1201.83 L1188.34 1201.83 L1187.75 1201.83 L1187.16 1201.83 L1186.58 1201.83 L1185.99 1201.83 L1185.41 1201.83 L1184.82 1201.83 L1184.23 1201.83 L1183.65 1201.83 L1183.06 1201.83 L1182.47 1201.83 L1181.89 1201.83 L1181.3 1201.83 L1180.71 1201.83 L1180.13 1201.83 L1179.54 1201.83 L1178.96 1201.83 L1178.37 1201.83 L1177.78 1201.83 L1177.2 1201.83 L1176.61 1201.83 L1176.02 1201.83 L1175.44 1201.83 L1174.85 1201.83 L1174.26 1201.83 L1173.68 1201.83 L1173.09 1201.83 L1172.5 1201.83 L1171.92 1201.83 L1171.33 1201.83 L1170.75 1201.83 L1170.16 1201.83 L1169.57 1201.83 L1168.99 1201.83 L1168.4 1201.83 L1167.81 1201.83 L1167.23 1201.83 L1166.64 1201.83 L1166.05 1201.83 L1165.47 1201.83 L1164.88 1201.83 L1164.29 1201.83 L1163.71 1201.83 L1163.12 1201.83 L1162.54 1201.83 L1161.95 1201.83 L1161.36 1201.83 L1160.78 1201.83 L1160.19 1201.83 L1159.6 1201.83 L1159.02 1201.83 L1158.43 1201.83 L1157.84 1201.83 L1157.26 1201.83 L1156.67 1201.83 L1156.09 1201.83 L1155.5 1201.83 L1154.91 1201.83 L1154.33 1201.83 L1153.74 1201.83 L1153.15 1201.83 L1152.57 1201.83 L1151.98 1201.83 L1151.39 1201.83 L1150.81 1201.83 L1150.22 1201.83 L1149.63 1201.83 L1149.05 1201.83 L1148.46 1201.83 L1147.88 1201.83 L1147.29 1201.83 L1146.7 1201.83 L1146.12 1201.83 L1145.53 1201.83 L1144.94 1201.83 L1144.36 1201.83 L1143.77 1201.83 L1143.18 1201.83 L1142.6 1201.83 L1142.01 1201.83 L1141.42 1201.83 L1140.84 1201.83 L1140.25 1201.83 L1139.67 1201.83 L1139.08 1201.83 L1138.49 1201.83 L1137.91 1201.83 L1137.32 1201.83 L1136.73 1201.83 L1136.15 1201.83 L1135.56 1201.83 L1134.97 1201.83 L1134.39 1201.83 L1133.8 1201.83 L1133.21 1201.83 L1132.63 1201.83 L1132.04 1201.83 L1131.46 1201.83 L1130.87 1201.83 L1130.28 1201.83 L1129.7 1201.83 L1129.11 1201.83 L1128.52 1201.83 L1127.94 1201.83 L1127.35 1201.83 L1126.76 1201.83 L1126.18 1201.83 L1125.59 1201.83 L1125.01 1201.83 L1124.42 1201.83 L1123.83 1201.83 L1123.25 1201.83 L1122.66 1201.83 L1122.07 1201.83 L1121.49 1201.83 L1120.9 1201.83 L1120.31 1201.83 L1119.73 1201.83 L1119.14 1201.83 L1118.55 1201.83 L1117.97 1201.83 L1117.38 1201.83 L1116.8 1201.83 L1116.21 1201.83 L1115.62 1201.83 L1115.04 1201.83 L1114.45 1201.83 L1113.86 1201.83 L1113.28 1201.83 L1112.69 1201.83 L1112.1 1201.83 L1111.52 1201.83 L1110.93 1201.83 L1110.34 1201.83 L1109.76 1201.83 L1109.17 1201.83 L1108.59 1201.83 L1108 1201.83 L1107.41 1201.83 L1106.83 1201.83 L1106.24 1201.83 L1105.65 1201.83 L1105.07 1201.83 L1104.48 1201.83 L1103.89 1201.83 L1103.31 1201.83 L1102.72 1201.83 L1102.14 1201.83 L1101.55 1201.83 L1100.96 1201.83 L1100.38 1201.83 L1099.79 1201.83 L1099.2 1201.83 L1098.62 1201.83 L1098.03 1201.83 L1097.44 1201.83 L1096.86 1201.83 L1096.27 1201.83 L1095.68 1201.83 L1095.1 1201.83 L1094.51 1201.83 L1093.93 1201.83 L1093.34 1201.83 L1092.75 1201.83 L1092.17 1201.83 L1091.58 1201.83 L1090.99 1201.83 L1090.41 1201.83 L1089.82 1201.83 L1089.23 1201.83 L1088.65 1201.83 L1088.06 1201.83 L1087.47 1201.83 L1086.89 1201.83 L1086.3 1201.83 L1085.72 1201.83 L1085.13 1201.83 L1084.54 1201.83 L1083.96 1201.83 L1083.37 1201.83 L1082.78 1201.83 L1082.2 1201.83 L1081.61 1201.83 L1081.02 1201.83 L1080.44 1201.83 L1079.85 1201.83 L1079.26 1201.83 L1078.68 1201.83 L1078.09 1201.83 L1077.51 1201.83 L1076.92 1201.83 L1076.33 1201.83 L1075.75 1201.83 L1075.16 1201.83 L1074.57 1201.83 L1073.99 1201.83 L1073.4 1201.83 L1072.81 1201.83 L1072.23 1201.83 L1071.64 1201.83 L1071.06 1201.83 L1070.47 1201.83 L1069.88 1201.83 L1069.3 1201.83 L1068.71 1201.83 L1068.12 1201.83 L1067.54 1201.83 L1066.95 1201.83 L1066.36 1201.83 L1065.78 1201.83 L1065.19 1201.83 L1064.6 1201.83 L1064.02 1201.83 L1063.43 1201.83 L1062.85 1201.83 L1062.26 1201.83 L1061.67 1201.83 L1061.09 1201.83 L1060.5 1201.83 L1059.91 1201.83 L1059.33 1201.83 L1058.74 1201.83 L1058.15 1201.83 L1057.57 1201.83 L1056.98 1201.83 L1056.39 1201.83 L1055.81 1201.83 L1055.22 1201.83 L1054.64 1201.83 L1054.05 1201.83 L1053.46 1201.83 L1052.88 1201.83 L1052.29 1201.83 L1051.7 1201.83 L1051.12 1201.83 L1050.53 1201.83 L1049.94 1201.83 L1049.36 1201.83 L1048.77 1201.83 L1048.19 1201.83 L1047.6 1201.83 L1047.01 1201.83 L1046.43 1201.83 L1045.84 1201.83 L1045.25 1201.83 L1044.67 1201.83 L1044.08 1201.83 L1043.49 1201.83 L1042.91 1201.83 L1042.32 1201.83 L1041.73 1201.83 L1041.15 1201.83 L1040.56 1201.83 L1039.98 1201.83 L1039.39 1201.83 L1038.8 1201.83 L1038.22 1201.83 L1037.63 1201.83 L1037.04 1201.83 L1036.46 1201.83 L1035.87 1201.83 L1035.28 1201.83 L1034.7 1201.83 L1034.11 1201.83 L1033.52 1201.83 L1032.94 1201.83 L1032.35 1201.83 L1031.77 1201.83 L1031.18 1201.83 L1030.59 1201.83 L1030.01 1201.83 L1029.42 1201.83 L1028.83 1201.83 L1028.25 1201.83 L1027.66 1201.83 L1027.07 1201.83 L1026.49 1201.83 L1025.9 1201.83 L1025.32 1201.83 L1024.73 1201.83 L1024.14 1201.83 L1023.56 1201.83 L1022.97 1201.83 L1022.38 1201.83 L1021.8 1201.83 L1021.21 1201.83 L1020.62 1201.83 L1020.04 1201.83 L1019.45 1201.83 L1018.86 1201.83 L1018.28 1201.83 L1017.69 1201.83 L1017.11 1201.83 L1016.52 1201.83 L1015.93 1201.83 L1015.35 1201.83 L1014.76 1201.83 L1014.17 1201.83 L1013.59 1201.83 L1013 1201.83 L1012.41 1201.83 L1011.83 1201.83 L1011.24 1201.83 L1010.65 1201.83 L1010.07 1201.83 L1009.48 1201.83 L1008.9 1201.83 L1008.31 1201.83 L1007.72 1201.83 L1007.14 1201.83 L1006.55 1201.83 L1005.96 1201.83 L1005.38 1201.83 L1004.79 1201.83 L1004.2 1201.83 L1003.62 1201.83 L1003.03 1201.83 L1002.44 1201.83 L1001.86 1201.83 L1001.27 1201.83 L1000.69 1201.83 L1000.1 1201.83 L999.513 1201.83 L998.926 1201.83 L998.34 1201.83 L997.754 1201.83 L997.167 1201.83 L996.581 1201.83 L995.994 1201.83 L995.408 1201.83 L994.822 1201.83 L994.235 1201.83 L993.649 1201.83 L993.062 1201.83 L992.476 1201.83 L991.889 1201.83 L991.303 1201.83 L990.717 1201.83 L990.13 1201.83 L989.544 1201.83 L988.957 1201.83 L988.371 1201.83 L987.785 1201.83 L987.198 1201.83 L986.612 1201.83 L986.025 1201.83  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1202.18 986.612,1202.18 987.198,1202.18 987.785,1202.18 988.371,1202.18 988.957,1202.18 989.544,1202.18 990.13,1202.18 990.717,1202.18 991.303,1202.18 991.889,1202.18 992.476,1202.18 993.062,1202.18 993.649,1202.18 994.235,1202.18 994.822,1202.18 995.408,1202.18 995.994,1202.18 996.581,1202.18 997.167,1202.18 997.754,1202.18 998.34,1202.18 998.926,1202.18 999.513,1202.18 1000.1,1202.18 1000.69,1202.18 1001.27,1202.18 1001.86,1202.18 1002.44,1202.18 1003.03,1202.18 1003.62,1202.18 1004.2,1202.18 1004.79,1202.18 1005.38,1202.18 1005.96,1202.18 1006.55,1202.18 1007.14,1202.18 1007.72,1202.18 1008.31,1202.18 1008.9,1202.18 1009.48,1202.18 1010.07,1202.18 1010.65,1202.18 1011.24,1202.18 1011.83,1202.18 1012.41,1202.18 1013,1202.18 1013.59,1202.18 1014.17,1202.18 1014.76,1202.18 1015.35,1202.18 1015.93,1202.18 1016.52,1202.18 1017.11,1202.18 1017.69,1202.18 1018.28,1202.18 1018.86,1202.18 1019.45,1202.18 1020.04,1202.18 1020.62,1202.18 1021.21,1202.18 1021.8,1202.18 1022.38,1202.18 1022.97,1202.18 1023.56,1202.18 1024.14,1202.18 1024.73,1202.18 1025.32,1202.18 1025.9,1202.18 1026.49,1202.18 1027.07,1202.18 1027.66,1202.18 1028.25,1202.18 1028.83,1202.18 1029.42,1202.18 1030.01,1202.18 1030.59,1202.18 1031.18,1202.18 1031.77,1202.18 1032.35,1202.18 1032.94,1202.18 1033.52,1202.18 1034.11,1202.18 1034.7,1202.18 1035.28,1202.18 1035.87,1202.18 1036.46,1202.18 1037.04,1202.18 1037.63,1202.18 1038.22,1202.18 1038.8,1202.18 1039.39,1202.18 1039.98,1202.18 1040.56,1202.18 1041.15,1202.18 1041.73,1202.18 1042.32,1202.18 1042.91,1202.18 1043.49,1202.18 1044.08,1202.18 1044.67,1202.18 1045.25,1202.18 1045.84,1202.18 1046.43,1202.18 1047.01,1202.18 1047.6,1202.18 1048.19,1202.18 1048.77,1202.18 1049.36,1202.18 1049.94,1202.18 1050.53,1202.18 1051.12,1202.18 1051.7,1202.18 1052.29,1202.18 1052.88,1202.18 1053.46,1202.18 1054.05,1202.18 1054.64,1202.18 1055.22,1202.18 1055.81,1202.18 1056.39,1202.18 1056.98,1202.18 1057.57,1202.18 1058.15,1202.18 1058.74,1202.18 1059.33,1202.18 1059.91,1202.18 1060.5,1202.18 1061.09,1202.18 1061.67,1202.18 1062.26,1202.18 1062.85,1202.18 1063.43,1202.18 1064.02,1202.18 1064.6,1202.18 1065.19,1202.18 1065.78,1202.18 1066.36,1202.18 1066.95,1202.18 1067.54,1202.18 1068.12,1202.18 1068.71,1202.18 1069.3,1202.18 1069.88,1202.18 1070.47,1202.18 1071.06,1202.18 1071.64,1202.18 1072.23,1202.18 1072.81,1202.18 1073.4,1202.18 1073.99,1202.18 1074.57,1202.18 1075.16,1202.18 1075.75,1202.18 1076.33,1202.18 1076.92,1202.18 1077.51,1202.18 1078.09,1202.18 1078.68,1202.18 1079.26,1202.18 1079.85,1202.18 1080.44,1202.18 1081.02,1202.18 1081.61,1202.18 1082.2,1202.18 1082.78,1202.18 1083.37,1202.18 1083.96,1202.18 1084.54,1202.18 1085.13,1202.18 1085.72,1202.18 1086.3,1202.18 1086.89,1202.18 1087.47,1202.18 1088.06,1202.18 1088.65,1202.18 1089.23,1202.18 1089.82,1202.18 1090.41,1202.18 1090.99,1202.18 1091.58,1202.18 1092.17,1202.18 1092.75,1202.18 1093.34,1202.18 1093.93,1202.18 1094.51,1202.18 1095.1,1202.18 1095.68,1202.18 1096.27,1202.18 1096.86,1202.18 1097.44,1202.18 1098.03,1202.18 1098.62,1202.18 1099.2,1202.18 1099.79,1202.18 1100.38,1202.18 1100.96,1202.18 1101.55,1202.18 1102.14,1202.18 1102.72,1202.18 1103.31,1202.18 1103.89,1202.18 1104.48,1202.18 1105.07,1202.18 1105.65,1202.18 1106.24,1202.18 1106.83,1202.18 1107.41,1202.18 1108,1202.18 1108.59,1202.18 1109.17,1202.18 1109.76,1202.18 1110.34,1202.18 1110.93,1202.18 1111.52,1202.18 1112.1,1202.18 1112.69,1202.18 1113.28,1202.18 1113.86,1202.18 1114.45,1202.18 1115.04,1202.18 1115.62,1202.18 1116.21,1202.18 1116.8,1202.18 1117.38,1202.18 1117.97,1202.18 1118.55,1202.18 1119.14,1202.18 1119.73,1202.18 1120.31,1202.18 1120.9,1202.18 1121.49,1202.18 1122.07,1202.18 1122.66,1202.18 1123.25,1202.18 1123.83,1202.18 1124.42,1202.18 1125.01,1202.18 1125.59,1202.18 1126.18,1202.18 1126.76,1202.18 1127.35,1202.18 1127.94,1202.18 1128.52,1202.18 1129.11,1202.18 1129.7,1202.18 1130.28,1202.18 1130.87,1202.18 1131.46,1202.18 1132.04,1202.18 1132.63,1202.18 1133.21,1202.18 1133.8,1202.18 1134.39,1202.18 1134.97,1202.18 1135.56,1202.18 1136.15,1202.18 1136.73,1202.18 1137.32,1202.18 1137.91,1202.18 1138.49,1202.18 1139.08,1202.18 1139.67,1202.18 1140.25,1202.18 1140.84,1202.18 1141.42,1202.18 1142.01,1202.18 1142.6,1202.18 1143.18,1202.18 1143.77,1202.18 1144.36,1202.18 1144.94,1202.18 1145.53,1202.18 1146.12,1202.18 1146.7,1202.18 1147.29,1202.18 1147.88,1202.18 1148.46,1202.18 1149.05,1202.18 1149.63,1202.18 1150.22,1202.18 1150.81,1202.18 1151.39,1202.18 1151.98,1202.18 1152.57,1202.18 1153.15,1202.18 1153.74,1202.18 1154.33,1202.18 1154.91,1202.18 1155.5,1202.18 1156.09,1202.18 1156.67,1202.18 1157.26,1202.18 1157.84,1202.18 1158.43,1202.18 1159.02,1202.18 1159.6,1202.18 1160.19,1202.18 1160.78,1202.18 1161.36,1202.18 1161.95,1202.18 1162.54,1202.18 1163.12,1202.18 1163.71,1202.18 1164.29,1202.18 1164.88,1202.18 1165.47,1202.18 1166.05,1202.18 1166.64,1202.18 1167.23,1202.18 1167.81,1202.18 1168.4,1202.18 1168.99,1202.18 1169.57,1202.18 1170.16,1202.18 1170.75,1202.18 1171.33,1202.18 1171.92,1202.18 1172.5,1202.18 1173.09,1202.18 1173.68,1202.18 1174.26,1202.18 1174.85,1202.18 1175.44,1202.18 1176.02,1202.18 1176.61,1202.18 1177.2,1202.18 1177.78,1202.18 1178.37,1202.18 1178.96,1202.18 1179.54,1202.18 1180.13,1202.18 1180.71,1202.18 1181.3,1202.18 1181.89,1202.18 1182.47,1202.18 1183.06,1202.18 1183.65,1202.18 1184.23,1202.18 1184.82,1202.18 1185.41,1202.18 1185.99,1202.18 1186.58,1202.18 1187.16,1202.18 1187.75,1202.18 1188.34,1202.18 1188.92,1202.18 1189.51,1202.18 1190.1,1202.18 1190.68,1202.18 1191.27,1202.18 1191.86,1202.18 1192.44,1202.18 1193.03,1202.18 1193.62,1202.18 1194.2,1202.18 1194.79,1202.18 1195.37,1202.18 1195.96,1202.18 1196.55,1202.18 1197.13,1202.18 1197.72,1202.18 1198.31,1202.18 1198.89,1202.18 1199.48,1202.18 1200.07,1202.18 1200.65,1202.18 1201.24,1202.18 1201.83,1202.18 1202.41,1202.18 1203,1202.18 1203.58,1202.18 1204.17,1202.18 1204.76,1202.18 1205.34,1202.18 1205.93,1202.18 1206.52,1202.18 1207.1,1202.18 1207.69,1202.18 1208.28,1202.18 1208.86,1202.18 1209.45,1202.18 1210.03,1202.18 1210.62,1202.18 1211.21,1202.18 1211.79,1202.18 1212.38,1202.18 1212.97,1202.18 1213.55,1202.18 1214.14,1202.18 1214.73,1202.18 1215.31,1202.18 1215.9,1202.18 1216.49,1202.18 1217.07,1202.18 1217.66,1202.18 1218.24,1202.18 1218.83,1202.18 1219.42,1202.18 1220,1202.18 1220.59,1202.18 1221.18,1202.18 1221.76,1202.18 1222.35,1202.18 1222.94,1202.18 1223.52,1202.18 1224.11,1202.18 1224.7,1202.18 1225.28,1202.18 1225.87,1202.18 1226.45,1202.18 1227.04,1202.18 1227.63,1202.18 1228.21,1202.18 1228.8,1202.18 1229.39,1202.18 1229.97,1202.18 1230.56,1202.18 1231.15,1202.18 1231.73,1202.18 1232.32,1202.18 1232.91,1202.18 1233.49,1202.18 1234.08,1202.18 1234.66,1202.18 1235.25,1202.18 1235.84,1202.18 1236.42,1202.18 1237.01,1202.18 1237.6,1202.18 1238.18,1202.18 1238.77,1202.18 1239.36,1202.18 1239.94,1202.18 1240.53,1202.18 1241.11,1202.18 1241.7,1202.18 1242.29,1202.18 1242.87,1202.18 1243.46,1202.18 1244.05,1202.18 1244.63,1202.18 1245.22,1202.18 1245.81,1202.18 1246.39,1202.18 1246.98,1202.18 1247.57,1202.18 1248.15,1202.18 1248.74,1202.18 1249.32,1202.18 1249.91,1202.18 1250.5,1202.18 1251.08,1202.18 1251.67,1202.18 1252.26,1202.18 1252.84,1202.18 1253.43,1202.18 1254.02,1202.18 1254.6,1202.18 1255.19,1202.18 1255.78,1202.18 1256.36,1202.18 1256.95,1202.18 1257.53,1202.18 1258.12,1202.18 1258.71,1202.18 1259.29,1202.18 1259.88,1202.18 1260.47,1202.18 1261.05,1202.18 1261.64,1202.18 1262.23,1202.18 1262.81,1202.18 1263.4,1202.18 1263.98,1202.18 1264.57,1202.18 1265.16,1202.18 1265.74,1202.18 1266.33,1202.18 1266.92,1202.18 1267.5,1202.18 1268.09,1202.18 1268.68,1202.18 1269.26,1202.18 1269.85,1202.18 1270.44,1202.18 1271.02,1202.18 1271.61,1202.18 1272.19,1202.18 1272.78,1202.18 1273.37,1202.18 1273.95,1202.18 1274.54,1202.18 1275.13,1202.18 1275.71,1202.18 1276.3,1202.18 1276.89,1202.18 1277.47,1202.18 1278.06,1202.18 1278.65,1202.18 1279.23,1202.18 1279.82,1202.18 1280.4,1202.18 1280.99,1202.18 1281.58,1202.18 1282.16,1202.18 1282.75,1202.18 1283.34,1202.18 1283.92,1202.18 1284.51,1202.18 1285.1,1202.18 1285.68,1202.18 1286.27,1202.18 1286.86,1202.18 1287.44,1202.18 1288.03,1202.18 1288.61,1202.18 1289.2,1202.18 1289.79,1202.18 1290.37,1202.18 1290.96,1202.18 1291.55,1202.18 1292.13,1202.18 1292.72,1202.18 1293.31,1202.18 1293.89,1202.18 1294.48,1202.18 1295.06,1202.18 1295.65,1202.18 1296.24,1202.18 1296.82,1202.18 1297.41,1202.18 1298,1202.18 1298.58,1202.18 1299.17,1202.18 1299.76,1202.18 1300.34,1202.18 1300.93,1202.18 1301.52,1202.18 1302.1,1202.18 1302.69,1202.18 1303.27,1202.18 1303.86,1202.18 1304.45,1202.18 1305.03,1202.18 1305.62,1202.18 1306.21,1202.18 1306.79,1202.18 1307.38,1202.18 1307.97,1202.18 1308.55,1202.18 1309.14,1202.18 1309.73,1202.18 1310.31,1202.18 1310.9,1202.18 1311.48,1202.18 1312.07,1202.18 1312.66,1202.18 1313.24,1202.18 1313.83,1202.18 1314.42,1202.18 1315,1202.18 1315.59,1202.18 1316.18,1202.18 1316.76,1202.18 1317.35,1202.18 1317.93,1202.18 1318.52,1202.18 1319.11,1202.18 1319.69,1202.18 1320.28,1202.18 1320.87,1202.18 1321.45,1202.18 1322.04,1202.18 1322.63,1202.18 1323.21,1202.18 1323.8,1202.18 1324.39,1202.18 1324.97,1202.18 1325.56,1202.18 1326.14,1202.18 1326.73,1202.18 1327.32,1202.18 1327.9,1202.18 1328.49,1202.18 1329.08,1202.18 1329.66,1202.18 1330.25,1202.18 1330.84,1202.18 1331.42,1202.18 1332.01,1202.18 1332.6,1202.18 1333.18,1202.18 1333.77,1202.18 1334.35,1202.18 1334.94,1202.18 1335.53,1202.18 1336.11,1202.18 1336.7,1202.18 1337.29,1202.18 1337.87,1202.18 1338.46,1202.18 1339.05,1202.18 1339.63,1202.18 1340.22,1202.18 1340.8,1202.18 1341.39,1202.18 1341.98,1202.18 1342.56,1202.18 1343.15,1202.18 1343.74,1202.18 1344.32,1202.18 1344.91,1202.18 1345.5,1202.18 1346.08,1202.18 1346.67,1202.18 1347.26,1202.18 1347.84,1202.18 1348.43,1202.18 1349.01,1202.18 1349.6,1202.18 1350.19,1202.18 1350.77,1202.18 1351.36,1202.18 1351.95,1202.18 1352.53,1202.18 1353.12,1202.18 1353.71,1202.18 1354.29,1202.18 1354.88,1202.18 1355.47,1202.18 1356.05,1202.18 1356.64,1202.18 1357.22,1202.18 1357.81,1202.18 1358.4,1202.18 1358.98,1202.18 1359.57,1202.18 1360.16,1202.18 1360.74,1202.18 1361.33,1202.18 1361.92,1202.18 1362.5,1202.18 1363.09,1202.18 1363.68,1202.18 1364.26,1202.18 1364.85,1202.18 1365.43,1202.18 1366.02,1202.18 1366.61,1202.18 1367.19,1202.18 1367.78,1202.18 1368.37,1202.18 1368.95,1202.18 1369.54,1202.18 1370.13,1202.18 1370.71,1202.18 1371.3,1202.18 1371.88,1202.18 1372.47,1202.18 1373.06,1202.18 1373.64,1202.18 1374.23,1202.18 1374.82,1202.18 1375.4,1202.18 1375.99,1202.18 1376.58,1202.18 1377.16,1202.18 1377.75,1202.18 1378.34,1202.18 1378.92,1202.18 1379.51,1202.18 1380.09,1202.18 1380.68,1202.18 1381.27,1202.18 1381.85,1202.18 1382.44,1202.18 1383.03,1202.18 1383.61,1202.18 1384.2,1202.18 1384.79,1202.18 1385.37,1202.18 1385.96,1202.18 1386.55,1202.18 1387.13,1202.18 1387.72,1202.18 1388.3,1202.18 1388.89,1202.18 1389.48,1202.18 1390.06,1202.18 1390.65,1202.18 1391.24,1202.18 1391.82,1202.18 1392.41,1202.18 1393,1202.18 1393.58,1202.18 1394.17,1202.18 1394.75,1202.18 1395.34,1202.18 1395.93,1202.18 1396.51,1202.18 1397.1,1202.18 1397.69,1202.18 1398.27,1202.18 1398.86,1202.18 1399.45,1202.18 1400.03,1202.18 1400.62,1202.18 1401.21,1202.18 1401.79,1202.18 1402.38,1202.18 1402.96,1202.18 1403.55,1202.18 1404.14,1202.18 1404.72,1202.18 1405.31,1202.18 1405.9,1202.18 1406.48,1202.18 1407.07,1202.18 1407.66,1202.18 1408.24,1202.18 1408.83,1202.18 1409.42,1202.18 1410,1202.18 1410.59,1202.18 1411.17,1202.18 1411.76,1202.18 1412.35,1202.18 1412.93,1202.18 1413.52,1202.18 1414.11,1202.18 1414.69,1202.18 1415.28,1202.18 1415.87,1202.18 1416.45,1202.18 1417.04,1202.18 1417.63,1202.18 1418.21,1202.18 1418.8,1202.18 1419.38,1202.18 1419.97,1202.18 1420.56,1202.18 1421.14,1202.18 1421.73,1202.18 1422.32,1202.18 1422.9,1202.18 1423.49,1202.18 1424.08,1202.18 1424.66,1202.18 1425.25,1202.18 1425.83,1202.18 1426.42,1202.18 1427.01,1202.18 1427.59,1202.18 1428.18,1202.18 1428.77,1202.18 1429.35,1202.18 1429.94,1202.18 1430.53,1202.18 1431.11,1202.18 1431.7,1202.18 1432.29,1202.18 1432.87,1202.18 1433.46,1202.18 1434.04,1202.18 1434.63,1202.18 1435.22,1202.18 1435.8,1202.18 1436.39,1202.18 1436.98,1202.18 1437.56,1202.18 1438.15,1202.18 1438.74,1202.18 1439.32,1202.18 1439.91,1202.18 1440.5,1202.18 1441.08,1202.18 1441.67,1202.18 1442.25,1202.18 1442.84,1202.18 1443.43,1202.18 1444.01,1202.18 1444.6,1202.18 1445.19,1202.18 1445.77,1202.18 1446.36,1202.18 1446.95,1202.18 1447.53,1202.18 1448.12,1202.18 1448.7,1202.18 1449.29,1202.18 1449.88,1202.18 1450.46,1202.18 1451.05,1202.18 1451.64,1202.18 1452.22,1202.18 1452.81,1202.18 1453.4,1202.18 1453.98,1202.18 1454.57,1202.18 1455.16,1202.18 1455.74,1202.18 1456.33,1202.18 1456.91,1202.18 1457.5,1202.18 1458.09,1202.18 1458.67,1202.18 1459.26,1202.18 1459.85,1202.18 1460.43,1202.18 1461.02,1202.18 1461.61,1202.18 1462.19,1202.18 1462.78,1202.18 1463.37,1202.18 1463.95,1202.18 1464.54,1202.18 1465.12,1202.18 1465.71,1202.18 1466.3,1202.18 1466.88,1202.18 1467.47,1202.18 1468.06,1202.18 1468.64,1202.18 1469.23,1202.18 1469.82,1202.18 1470.4,1202.18 1470.99,1202.18 1471.57,1202.18 1472.16,1202.18 1472.75,1202.18 1473.33,1202.18 1473.92,1202.18 1474.51,1202.18 1475.09,1202.18 1475.68,1202.18 1476.27,1202.18 1476.85,1202.18 1477.44,1202.18 1478.03,1202.18 1478.61,1202.18 1479.2,1202.18 1479.78,1202.18 1480.37,1202.18 1480.96,1202.18 1481.54,1202.18 1482.13,1202.18 1482.72,1202.18 1483.3,1202.18 1483.89,1202.18 1484.48,1202.18 1485.06,1202.18 1485.65,1202.18 1486.24,1202.18 1486.82,1202.18 1487.41,1202.18 1487.99,1202.18 1488.58,1202.18 1489.17,1202.18 1489.75,1202.18 1490.34,1202.18 1490.93,1202.18 1491.51,1202.18 1492.1,1202.18 1492.69,1202.18 1493.27,1202.18 1493.86,1202.18 1494.45,1202.18 1495.03,1202.18 1495.62,1202.18 1496.2,1202.18 1496.79,1202.18 1497.38,1202.18 1497.96,1202.18 1498.55,1202.18 1499.14,1202.18 1499.72,1202.18 1500.31,1202.18 1500.9,1202.18 1501.48,1202.18 1502.07,1202.18 1502.65,1202.18 1503.24,1202.18 1503.83,1202.18 1504.41,1202.18 1505,1202.18 1505.59,1202.18 1506.17,1202.18 1506.76,1202.18 1507.35,1202.18 1507.93,1202.18 1508.52,1202.18 1509.11,1202.18 1509.69,1202.18 1510.28,1202.18 1510.86,1202.18 1511.45,1202.18 1512.04,1202.18 1512.62,1202.18 1513.21,1202.18 1513.8,1202.18 1514.38,1202.18 1514.97,1202.18 1515.56,1202.18 1516.14,1202.18 1516.73,1202.18 1517.32,1202.18 1517.9,1202.18 1518.49,1202.18 1519.07,1202.18 1519.66,1202.18 1520.25,1202.18 1520.83,1202.18 1521.42,1202.18 1522.01,1202.18 1522.59,1202.18 1523.18,1202.18 1523.77,1202.18 1524.35,1202.18 1524.94,1202.18 1525.52,1202.18 1526.11,1202.18 1526.7,1202.18 1527.28,1202.18 1527.87,1202.18 1528.46,1202.18 1529.04,1202.18 1529.63,1202.18 1530.22,1202.18 1530.8,1202.18 1531.39,1202.18 1531.98,1202.18 1532.56,1202.18 1533.15,1202.18 1533.73,1202.18 1534.32,1202.18 1534.91,1202.18 1535.49,1202.18 1536.08,1202.18 1536.67,1202.18 1537.25,1202.18 1537.84,1202.18 1538.43,1202.18 1539.01,1202.18 1539.6,1202.18 1540.19,1202.18 1540.77,1202.18 1541.36,1202.18 1541.94,1202.18 1542.53,1202.18 1543.12,1202.18 1543.7,1202.18 1544.29,1202.18 1544.88,1202.18 1545.46,1202.18 1546.05,1202.18 1546.64,1202.18 1547.22,1202.18 1547.81,1202.18 1548.4,1202.18 1548.98,1202.18 1549.57,1202.18 1550.15,1202.18 1550.74,1202.18 1551.33,1202.18 1551.91,1202.18 1552.5,1202.18 1553.09,1202.18 1553.67,1202.18 1554.26,1202.18 1554.85,1202.18 1555.43,1202.18 1556.02,1202.18 1556.6,1202.18 1557.19,1202.18 1557.78,1202.18 1558.36,1202.18 1558.95,1202.18 1559.54,1202.18 1560.12,1202.18 1560.71,1202.18 1561.3,1202.18 1561.88,1202.18 1562.47,1202.18 1563.06,1202.18 1563.64,1202.18 1564.23,1202.18 1564.81,1202.18 1565.4,1202.18 1565.99,1202.18 1566.57,1202.18 1567.16,1202.18 1567.75,1202.18 1568.33,1202.18 1568.92,1202.18 1569.51,1202.18 1570.09,1202.18 1570.68,1202.18 1571.27,1202.18 1571.85,1202.18 1572.44,1202.18 1573.02,1202.18 1573.61,1202.18 1574.2,1202.18 1574.78,1202.18 1575.37,1202.18 1575.96,1202.18 1576.54,1202.18 1577.13,1202.18 1577.72,1202.18 1578.3,1202.18 1578.89,1202.18 1579.47,1202.18 1580.06,1202.18 1580.65,1202.18 1581.23,1202.18 1581.82,1202.18 1582.41,1202.18 1582.99,1202.18 1583.58,1202.18 1584.17,1202.18 1584.75,1202.18 1585.34,1202.18 1585.93,1202.18 1586.51,1202.18 1587.1,1202.18 1587.68,1202.18 1588.27,1202.18 1588.86,1202.18 1589.44,1202.18 1590.03,1202.18 1590.62,1202.18 1591.2,1202.18 1591.79,1202.18 1592.38,1202.18 1592.96,1202.18 1593.55,1202.18 1594.14,1202.18 1594.72,1202.18 1595.31,1202.18 1595.89,1202.18 1596.48,1202.18 1597.07,1202.18 1597.65,1202.18 1598.24,1202.18 1598.83,1202.18 1599.41,1202.18 1600,1202.18 1600.59,1202.18 1601.17,1202.18 1601.76,1202.18 1602.34,1202.18 1602.93,1202.18 1603.52,1202.18 1604.1,1202.18 1604.69,1202.18 1605.28,1202.18 1605.86,1202.18 1606.45,1202.18 1607.04,1202.18 1607.62,1202.18 1608.21,1202.18 1608.8,1202.18 1609.38,1202.18 1609.97,1202.18 1610.55,1202.18 1611.14,1202.18 1611.73,1202.18 1612.31,1202.18 1612.9,1202.18 1613.49,1202.18 1614.07,1202.18 1614.66,1202.18 1615.25,1202.18 1615.83,1202.18 1616.42,1202.18 1617.01,1202.18 1617.59,1202.18 1618.18,1202.18 1618.76,1202.18 1619.35,1202.18 1619.94,1202.18 1620.52,1202.18 1621.11,1202.18 1621.7,1202.18 1622.28,1202.18 1622.87,1202.18 1623.46,1202.18 1624.04,1202.18 1624.63,1202.18 1625.22,1202.18 1625.8,1202.18 1626.39,1202.18 1626.97,1202.18 1627.56,1202.18 1628.15,1202.18 1628.73,1202.18 1629.32,1202.18 1629.91,1202.18 1630.49,1202.18 1631.08,1202.18 1631.67,1202.18 1632.25,1202.18 1632.84,1202.18 1633.42,1202.18 1634.01,1202.18 1634.6,1202.18 1635.18,1202.18 1635.77,1202.18 1636.36,1202.18 1636.94,1202.18 1637.53,1202.18 1638.12,1202.18 1638.7,1202.18 1639.29,1202.18 1639.88,1202.18 1640.46,1202.18 1641.05,1202.18 1641.63,1202.18 1642.22,1202.18 1642.81,1202.18 1643.39,1202.18 1643.98,1202.18 1644.57,1202.18 1645.15,1202.18 1645.74,1202.18 1646.33,1202.18 1646.91,1202.18 1647.5,1202.18 1648.09,1202.18 1648.67,1202.18 1649.26,1202.18 1649.84,1202.18 1650.43,1202.18 1651.02,1202.18 1651.6,1202.18 1652.19,1202.18 1652.78,1202.18 1653.36,1202.18 1653.95,1202.18 1654.54,1202.18 1655.12,1202.18 1655.71,1202.18 1656.29,1202.18 1656.88,1202.18 1657.47,1202.18 1658.05,1202.18 1658.64,1202.18 1659.23,1202.18 1659.81,1202.18 1660.4,1202.18 1660.99,1202.18 1661.57,1202.18 1662.16,1202.18 1662.75,1202.18 1663.33,1202.18 1663.92,1202.18 1664.5,1202.18 1665.09,1202.18 1665.68,1202.18 1666.26,1202.18 1666.85,1202.18 1667.44,1202.18 1668.02,1202.18 1668.61,1202.18 1669.2,1202.18 1669.78,1202.18 1670.37,1202.18 1670.96,1202.18 1671.54,1202.18 1672.13,1202.18 1672.71,1202.18 1673.3,1202.18 1673.89,1202.18 1674.47,1202.18 1675.06,1202.18 1675.65,1202.18 1676.23,1202.18 1676.82,1202.18 1677.41,1202.18 1677.99,1202.18 1678.58,1202.18 1679.17,1202.18 1679.75,1202.18 1680.34,1202.18 1680.92,1202.18 1681.51,1202.18 1682.1,1202.18 1682.68,1202.18 1683.27,1202.18 1683.86,1202.18 1684.44,1202.18 1685.03,1202.18 1685.62,1202.18 1686.2,1202.18 1686.79,1202.18 1687.37,1202.18 1687.96,1202.18 1688.55,1202.18 1689.13,1202.18 1689.72,1202.18 1690.31,1202.18 1690.89,1202.18 1691.48,1202.18 1692.07,1202.18 1692.65,1202.18 1693.24,1202.18 1693.83,1202.18 1694.41,1202.18 1695,1202.18 1695.58,1202.18 1696.17,1202.18 1696.76,1202.18 1697.34,1202.18 1697.93,1202.18 1698.52,1202.18 1699.1,1202.18 1699.69,1202.18 1700.28,1202.18 1700.86,1202.18 1701.45,1202.18 1702.04,1202.18 1702.62,1202.18 1703.21,1202.18 1703.79,1202.18 1704.38,1202.18 1704.97,1202.18 1705.55,1202.18 1706.14,1202.18 1706.73,1202.18 1707.31,1202.18 1707.9,1202.18 1708.49,1202.18 1709.07,1202.18 1709.66,1202.18 1710.24,1202.18 1710.83,1202.18 1711.42,1202.18 1712,1202.18 1712.59,1202.18 1713.18,1202.18 1713.76,1202.18 1714.35,1202.18 1714.94,1202.18 1715.52,1202.18 1716.11,1202.18 1716.7,1202.18 1717.28,1202.18 1717.87,1202.18 1718.45,1202.18 1719.04,1202.18 1719.63,1202.18 1720.21,1202.18 1720.8,1202.18 1721.39,1202.18 1721.97,1202.18 1722.56,1202.18 1723.15,1202.18 1723.73,1202.18 1724.32,1202.18 1724.91,1202.18 1725.49,1202.18 1726.08,1202.18 1726.66,1202.18 1727.25,1202.18 1727.84,1202.18 1728.42,1202.18 1729.01,1202.18 1729.6,1202.18 1730.18,1202.18 1730.77,1202.18 1731.36,1202.18 1731.94,1202.18 1732.53,1202.18 1733.11,1202.18 1733.7,1202.18 1734.29,1202.18 1734.87,1202.18 1735.46,1202.18 1736.05,1202.18 1736.63,1202.18 1737.22,1202.18 1737.81,1202.18 1738.39,1202.18 1738.98,1202.18 1739.57,1202.18 1740.15,1202.18 1740.74,1202.18 1741.32,1202.18 1741.91,1202.18 1742.5,1202.18 1743.08,1202.18 1743.67,1202.18 1744.26,1202.18 1744.84,1202.18 1745.43,1202.18 1746.02,1202.18 1746.6,1202.18 1747.19,1202.18 1747.78,1202.18 1748.36,1202.18 1748.95,1202.18 1749.53,1202.18 1750.12,1202.18 1750.71,1202.18 1751.29,1202.18 1751.88,1202.18 1752.47,1202.18 1753.05,1202.18 1753.64,1202.18 1754.23,1202.18 1754.81,1202.18 1755.4,1202.18 1755.99,1202.18 1756.57,1202.18 1757.16,1202.18 1757.74,1202.18 1758.33,1202.18 1758.92,1202.18 1759.5,1202.18 1760.09,1202.18 1760.68,1202.18 1761.26,1202.18 1761.85,1202.18 1762.44,1202.18 1763.02,1202.18 1763.61,1202.18 1764.19,1202.18 1764.78,1202.18 1765.37,1202.18 1765.95,1202.18 1766.54,1202.18 1767.13,1202.18 1767.71,1202.18 1768.3,1202.18 1768.89,1202.18 1769.47,1202.18 1770.06,1202.18 1770.65,1202.18 1771.23,1202.18 1771.82,1202.18 1772.4,1202.18 1772.99,1202.18 1773.58,1202.18 1774.16,1202.18 1774.75,1202.18 1775.34,1202.18 1775.92,1202.18 1776.51,1202.18 1777.1,1202.18 1777.68,1202.18 1778.27,1202.18 1778.86,1202.18 1779.44,1202.18 1780.03,1202.18 1780.61,1202.18 1781.2,1202.18 1781.79,1202.18 1782.37,1202.18 1782.96,1202.18 1783.55,1202.18 1784.13,1202.18 1784.72,1202.18 1785.31,1202.18 1785.89,1202.18 1786.48,1202.18 1787.06,1202.18 1787.65,1202.18 1788.24,1202.18 1788.82,1202.18 1789.41,1202.18 1790,1202.18 1790.58,1202.18 1791.17,1202.18 1791.76,1202.18 1792.34,1202.18 1792.93,1202.18 1793.52,1202.18 1794.1,1202.18 1794.69,1202.18 1795.27,1202.18 1795.86,1202.18 1796.45,1202.18 1797.03,1202.18 1797.62,1202.18 1798.21,1202.18 1798.79,1202.18 1799.38,1202.18 1799.97,1202.18 1800.55,1202.18 1801.14,1202.18 1801.73,1202.18 1802.31,1202.18 1802.9,1202.18 1803.48,1202.18 1804.07,1202.18 1804.66,1202.18 1805.24,1202.18 1805.83,1202.18 1806.42,1202.18 1807,1202.18 1807.59,1202.18 1808.18,1202.18 1808.76,1202.18 1809.35,1202.18 1809.94,1202.18 1810.52,1202.18 1811.11,1202.18 1811.69,1202.18 1812.28,1202.18 1812.87,1202.18 1813.45,1202.18 1814.04,1202.18 1814.63,1202.18 1815.21,1202.18 1815.8,1202.18 1816.39,1202.18 1816.97,1202.18 1817.56,1202.18 1818.14,1202.18 1818.73,1202.18 1819.32,1202.18 1819.9,1202.18 1820.49,1202.18 1821.08,1202.18 1821.66,1202.18 1822.25,1202.18 1822.84,1202.18 1823.42,1202.18 1824.01,1202.18 1824.6,1202.18 1825.18,1202.18 1825.77,1202.18 1826.35,1202.18 1826.94,1202.18 1827.53,1202.18 1828.11,1202.18 1828.7,1202.18 1829.29,1202.18 1829.87,1202.18 1830.46,1202.18 1831.05,1202.18 1831.63,1202.18 1832.22,1202.18 1832.81,1202.18 1833.39,1202.18 1833.98,1202.18 1834.56,1202.18 1835.15,1202.18 1835.74,1202.18 1836.32,1202.18 1836.91,1202.18 1837.5,1202.18 1838.08,1202.18 1838.67,1202.18 1839.26,1202.18 1839.84,1202.18 1840.43,1202.18 1841.01,1202.18 1841.6,1202.18 1842.19,1202.18 1842.77,1202.18 1843.36,1202.18 1843.95,1202.18 1844.53,1202.18 1845.12,1202.18 1845.71,1202.18 1846.29,1202.18 1846.88,1202.18 1847.47,1202.18 1848.05,1202.18 1848.64,1202.18 1849.22,1202.18 1849.81,1202.18 1850.4,1202.18 1850.98,1202.18 1851.57,1202.18 1852.16,1202.18 1852.74,1202.18 1853.33,1202.18 1853.92,1202.18 1854.5,1202.18 1855.09,1202.18 1855.68,1202.18 1856.26,1202.18 1856.85,1202.18 1857.43,1202.18 1858.02,1202.18 1858.61,1202.18 1859.19,1202.18 1859.78,1202.18 1860.37,1202.18 1860.95,1202.18 1861.54,1202.18 1862.13,1202.18 1862.71,1202.18 1863.3,1202.18 1863.88,1202.18 1864.47,1202.18 1865.06,1202.18 1865.64,1202.18 1866.23,1202.18 1866.82,1202.18 1867.4,1202.18 1867.99,1202.18 1868.58,1202.18 1869.16,1202.18 1869.75,1202.18 1870.34,1202.18 1870.92,1202.18 1871.51,1202.18 1872.09,1202.18 1872.68,1202.18 1873.27,1202.18 1873.85,1202.18 1874.44,1202.18 1875.03,1202.18 1875.61,1202.18 1876.2,1202.18 1876.79,1202.18 1877.37,1202.18 1877.96,1202.18 1878.55,1202.18 1879.13,1202.18 1879.72,1202.18 1880.3,1202.18 1880.89,1202.18 1881.48,1202.18 1882.06,1202.18 1882.65,1202.18 1883.24,1202.18 1883.82,1202.18 1884.41,1202.18 1885,1202.18 1885.58,1202.18 1886.17,1202.18 1886.76,1202.18 1887.34,1202.18 1887.93,1202.18 1888.51,1202.18 1889.1,1202.18 1889.69,1202.18 1890.27,1202.18 1890.86,1202.18 1891.45,1202.18 1892.03,1202.18 1892.62,1202.18 1893.21,1202.18 1893.79,1202.18 1894.38,1202.18 1894.96,1202.18 1895.55,1202.18 1896.14,1202.18 1896.72,1202.18 1897.31,1202.18 1897.9,1202.18 1898.48,1202.18 1899.07,1202.18 1899.66,1202.18 1900.24,1202.18 1900.83,1202.18 1901.42,1202.18 1902,1202.18 1902.59,1202.18 1903.17,1202.18 1903.76,1202.18 1904.35,1202.18 1904.93,1202.18 1905.52,1202.18 1906.11,1202.18 1906.69,1202.18 1907.28,1202.18 1907.87,1202.18 1908.45,1202.18 1909.04,1202.18 1909.63,1202.18 1910.21,1202.18 1910.8,1202.18 1911.38,1202.18 1911.97,1202.18 1912.56,1202.18 1913.14,1202.18 1913.73,1202.18 1914.32,1202.18 1914.9,1202.18 1915.49,1202.18 1916.08,1202.18 1916.66,1202.18 1917.25,1202.18 1917.83,1202.18 1918.42,1202.18 1919.01,1202.18 1919.59,1202.18 1920.18,1202.18 1920.77,1202.18 1921.35,1202.18 1921.94,1202.18 1922.53,1202.18 1923.11,1202.18 1923.7,1202.18 1924.29,1202.18 1924.87,1202.18 1925.46,1202.18 1926.04,1202.18 1926.63,1202.18 1927.22,1202.18 1927.8,1202.18 1928.39,1202.18 1928.98,1202.18 1929.56,1202.18 1930.15,1202.18 1930.74,1202.18 1931.32,1202.18 1931.91,1202.18 1932.5,1202.18 1933.08,1202.18 1933.67,1202.18 1934.25,1202.18 1934.84,1202.18 1935.43,1202.18 1936.01,1202.18 1936.6,1202.18 1937.19,1202.18 1937.77,1202.18 1938.36,1202.18 1938.95,1202.18 1939.53,1202.18 1940.12,1202.18 1940.71,1202.18 1941.29,1202.18 1941.88,1202.18 1942.46,1202.18 1943.05,1202.18 1943.64,1202.18 1944.22,1202.18 1944.81,1202.18 1945.4,1202.18 1945.98,1202.18 1946.57,1202.18 1947.16,1202.18 1947.74,1202.18 1948.33,1202.18 1948.91,1202.18 1949.5,1202.18 1950.09,1202.18 1950.67,1202.18 1951.26,1202.18 1951.85,1202.18 1952.43,1202.18 1953.02,1202.18 1953.61,1202.18 1954.19,1202.18 1954.78,1202.18 1955.37,1202.18 1955.95,1202.18 1956.54,1202.18 1957.12,1202.18 1957.71,1202.18 1958.3,1202.18 1958.88,1202.18 1959.47,1202.18 1960.06,1202.18 1960.64,1202.18 1961.23,1202.18 1961.82,1202.18 1962.4,1202.18 1962.99,1202.18 1963.58,1202.18 1964.16,1202.18 1964.75,1202.18 1965.33,1202.18 1965.92,1202.18 1966.51,1202.18 1967.09,1202.18 1967.68,1202.18 1968.27,1202.18 1968.85,1202.18 1969.44,1202.18 1970.03,1202.18 1970.61,1202.18 1971.2,1202.18 1971.78,1202.18 1972.37,1202.18 1972.96,1202.18 1973.54,1202.18 1974.13,1202.18 1974.72,1202.18 1975.3,1202.18 1975.89,1202.18 1976.48,1202.18 1977.06,1202.18 1977.65,1202.18 1978.24,1202.18 1978.82,1202.18 1979.41,1202.18 1979.99,1202.18 1980.58,1202.18 1981.17,1202.18 1981.75,1202.18 1982.34,1202.18 1982.93,1202.18 1983.51,1202.18 1984.1,1202.18 1984.69,1202.18 1985.27,1202.18 1985.86,1202.18 1986.45,1202.18 1987.03,1202.18 1987.62,1202.18 1988.2,1202.18 1988.79,1202.18 1989.38,1202.18 1989.96,1202.18 1990.55,1202.18 1991.14,1202.18 1991.72,1202.18 1992.31,1202.18 1992.9,1202.18 1993.48,1202.18 1994.07,1202.18 1994.65,1202.18 1995.24,1202.18 1995.83,1202.18 1996.41,1202.18 1997,1202.18 1997.59,1202.18 1998.17,1202.18 1998.76,1202.18 1999.35,1202.18 1999.93,1202.18 2000.52,1202.18 2001.11,1202.18 2001.69,1202.18 2002.28,1202.18 2002.86,1202.18 2003.45,1202.18 2004.04,1202.18 2004.62,1202.18 2005.21,1202.18 2005.8,1202.18 2006.38,1202.18 2006.97,1202.18 2007.56,1202.18 2008.14,1202.18 2008.73,1202.18 2009.32,1202.18 2009.9,1202.18 2010.49,1202.18 2011.07,1202.18 2011.66,1202.18 2012.25,1202.18 2012.83,1202.18 2013.42,1202.18 2014.01,1202.18 2014.59,1202.18 2015.18,1202.18 2015.77,1202.18 2016.35,1202.18 2016.94,1202.18 2017.53,1202.18 2018.11,1202.18 2018.7,1202.18 2019.28,1202.18 2019.87,1202.18 2020.46,1202.18 2021.04,1202.18 2021.63,1202.18 2022.22,1202.18 2022.8,1202.18 2023.39,1202.18 2023.98,1202.18 2024.56,1202.18 2025.15,1202.18 2025.73,1202.18 2026.32,1202.18 2026.91,1202.18 2027.49,1202.18 2028.08,1202.18 2028.67,1202.18 2029.25,1202.18 2029.84,1202.18 2030.43,1202.18 2031.01,1202.18 2031.6,1202.18 2032.19,1202.18 2032.77,1202.18 2033.36,1202.18 2033.94,1202.18 2034.53,1202.18 2035.12,1202.18 2035.7,1202.18 2036.29,1202.18 2036.88,1202.18 2037.46,1202.18 2038.05,1202.18 2038.64,1202.18 2039.22,1202.18 2039.81,1202.18 2040.4,1202.18 2040.98,1202.18 2041.57,1202.18 2042.15,1202.18 2042.74,1202.18 2043.33,1202.18 2043.91,1202.18 2044.5,1202.18 2045.09,1202.18 2045.67,1202.18 2046.26,1202.18 2046.85,1202.18 2047.43,1202.18 2048.02,1202.18 2048.6,1202.18 2049.19,1202.18 2049.78,1202.18 2050.36,1202.18 2050.95,1202.18 2051.54,1202.18 2052.12,1202.18 2052.71,1202.18 2053.3,1202.18 2053.88,1202.18 2054.47,1202.18 2055.06,1202.18 2055.64,1202.18 2056.23,1202.18 2056.81,1202.18 2057.4,1202.18 2057.99,1202.18 2058.57,1202.18 2059.16,1202.18 2059.75,1202.18 2060.33,1202.18 2060.92,1202.18 2061.51,1202.18 2062.09,1202.18 2062.68,1202.18 2063.27,1202.18 2063.85,1202.18 2064.44,1202.18 2065.02,1202.18 2065.61,1202.18 2066.2,1202.18 2066.78,1202.18 2067.37,1202.18 2067.96,1202.18 2068.54,1202.18 2069.13,1202.18 2069.72,1202.18 2070.3,1202.18 2070.89,1202.18 2071.48,1202.18 2072.06,1202.18 2072.65,1202.18 2073.23,1202.18 2073.82,1202.18 2074.41,1202.18 2074.99,1202.18 2075.58,1202.18 2076.17,1202.18 2076.75,1202.18 2077.34,1202.18 2077.93,1202.18 2078.51,1202.18 2079.1,1202.18 2079.68,1202.18 2080.27,1202.18 2080.86,1202.18 2081.44,1202.18 2082.03,1202.18 2082.62,1202.18 2083.2,1202.18 2083.79,1202.18 2084.38,1202.18 2084.96,1202.18 2085.55,1202.18 2086.14,1202.18 2086.72,1202.18 2087.31,1202.18 2087.89,1202.18 2088.48,1202.18 2089.07,1202.18 2089.65,1202.18 2090.24,1202.18 2090.83,1202.18 2091.41,1202.18 2092,1202.18 2092.59,1202.18 2093.17,1202.18 2093.76,1202.18 2094.35,1202.18 2094.93,1202.18 2095.52,1202.18 2096.1,1202.18 2096.69,1202.18 2097.28,1202.18 2097.86,1202.18 2098.45,1202.18 2099.04,1202.18 2099.62,1202.18 2100.21,1202.18 2100.8,1202.18 2101.38,1202.18 2101.97,1202.18 2102.55,1202.18 2103.14,1202.18 2103.73,1202.18 2104.31,1202.18 2104.9,1202.18 2105.49,1202.18 2106.07,1202.18 2106.66,1202.18 2107.25,1202.18 2107.83,1202.18 2108.42,1202.18 2109.01,1202.18 2109.59,1202.18 2110.18,1202.18 2110.76,1202.18 2111.35,1202.18 2111.94,1202.18 2112.52,1202.18 2113.11,1202.18 2113.7,1202.18 2114.28,1202.18 2114.87,1202.18 2115.46,1202.18 2116.04,1202.18 2116.63,1202.18 2117.22,1202.18 2117.8,1202.18 2118.39,1202.18 2118.97,1202.18 2119.56,1202.18 2120.15,1202.18 2120.73,1202.18 2121.32,1202.18 2121.91,1202.18 2122.49,1202.18 2123.08,1202.18 2123.67,1202.18 2124.25,1202.18 2124.84,1202.18 2125.42,1202.18 2126.01,1202.18 2126.6,1202.18 2127.18,1202.18 2127.77,1202.18 2128.36,1202.18 2128.94,1202.18 2129.53,1202.18 2130.12,1202.18 2130.7,1202.18 2131.29,1202.18 2131.88,1202.18 2132.46,1202.18 2133.05,1202.18 2133.63,1202.18 2134.22,1202.18 2134.81,1202.18 2135.39,1202.18 2135.98,1202.18 2136.57,1202.18 2137.15,1202.18 2137.74,1202.18 2138.33,1202.18 2138.91,1202.18 2139.5,1202.18 2140.09,1202.18 2140.67,1202.18 2141.26,1202.18 2141.84,1202.18 2142.43,1202.18 2143.02,1202.18 2143.6,1202.18 2144.19,1202.18 2144.78,1202.18 2145.36,1202.18 2145.95,1202.18 2146.54,1202.18 2147.12,1202.18 2147.71,1202.18 2148.3,1202.18 2148.88,1202.18 2149.47,1202.18 2150.05,1202.18 2150.64,1202.18 2151.23,1202.18 2151.81,1202.18 2152.4,1202.18 2152.99,1202.18 2153.57,1202.18 2154.16,1202.18 2154.75,1202.18 2155.33,1202.18 2155.92,1202.18 2156.5,1202.18 2157.09,1202.18 2157.68,1202.18 2158.26,1202.18 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1201.94 L986.612 1201.94 L987.198 1201.94 L987.785 1201.94 L988.371 1201.94 L988.957 1201.94 L989.544 1201.94 L990.13 1201.94 L990.717 1201.94 L991.303 1201.94 L991.889 1201.94 L992.476 1201.94 L993.062 1201.94 L993.649 1201.94 L994.235 1201.94 L994.822 1201.94 L995.408 1201.94 L995.994 1201.94 L996.581 1201.94 L997.167 1201.94 L997.754 1201.94 L998.34 1201.94 L998.926 1201.94 L999.513 1201.94 L1000.1 1201.94 L1000.69 1201.94 L1001.27 1201.94 L1001.86 1201.94 L1002.44 1201.94 L1003.03 1201.94 L1003.62 1201.94 L1004.2 1201.94 L1004.79 1201.94 L1005.38 1201.94 L1005.96 1201.94 L1006.55 1201.94 L1007.14 1201.94 L1007.72 1201.94 L1008.31 1201.94 L1008.9 1201.94 L1009.48 1201.94 L1010.07 1201.94 L1010.65 1201.94 L1011.24 1201.94 L1011.83 1201.94 L1012.41 1201.94 L1013 1201.94 L1013.59 1201.94 L1014.17 1201.94 L1014.76 1201.94 L1015.35 1201.94 L1015.93 1201.94 L1016.52 1201.94 L1017.11 1201.94 L1017.69 1201.94 L1018.28 1201.94 L1018.86 1201.94 L1019.45 1201.94 L1020.04 1201.94 L1020.62 1201.94 L1021.21 1201.94 L1021.8 1201.94 L1022.38 1201.94 L1022.97 1201.94 L1023.56 1201.94 L1024.14 1201.94 L1024.73 1201.94 L1025.32 1201.94 L1025.9 1201.94 L1026.49 1201.94 L1027.07 1201.94 L1027.66 1201.94 L1028.25 1201.94 L1028.83 1201.94 L1029.42 1201.94 L1030.01 1201.94 L1030.59 1201.94 L1031.18 1201.94 L1031.77 1201.94 L1032.35 1201.94 L1032.94 1201.94 L1033.52 1201.94 L1034.11 1201.94 L1034.7 1201.94 L1035.28 1201.94 L1035.87 1201.94 L1036.46 1201.94 L1037.04 1201.94 L1037.63 1201.94 L1038.22 1201.94 L1038.8 1201.94 L1039.39 1201.94 L1039.98 1201.94 L1040.56 1201.94 L1041.15 1201.94 L1041.73 1201.94 L1042.32 1201.94 L1042.91 1201.94 L1043.49 1201.94 L1044.08 1201.94 L1044.67 1201.94 L1045.25 1201.94 L1045.84 1201.94 L1046.43 1201.94 L1047.01 1201.94 L1047.6 1201.94 L1048.19 1201.94 L1048.77 1201.94 L1049.36 1201.94 L1049.94 1201.94 L1050.53 1201.94 L1051.12 1201.94 L1051.7 1201.94 L1052.29 1201.94 L1052.88 1201.94 L1053.46 1201.94 L1054.05 1201.94 L1054.64 1201.94 L1055.22 1201.94 L1055.81 1201.94 L1056.39 1201.94 L1056.98 1201.94 L1057.57 1201.94 L1058.15 1201.94 L1058.74 1201.94 L1059.33 1201.94 L1059.91 1201.94 L1060.5 1201.94 L1061.09 1201.94 L1061.67 1201.94 L1062.26 1201.94 L1062.85 1201.94 L1063.43 1201.94 L1064.02 1201.94 L1064.6 1201.94 L1065.19 1201.94 L1065.78 1201.94 L1066.36 1201.94 L1066.95 1201.94 L1067.54 1201.94 L1068.12 1201.94 L1068.71 1201.94 L1069.3 1201.94 L1069.88 1201.94 L1070.47 1201.94 L1071.06 1201.94 L1071.64 1201.94 L1072.23 1201.94 L1072.81 1201.94 L1073.4 1201.94 L1073.99 1201.94 L1074.57 1201.94 L1075.16 1201.94 L1075.75 1201.94 L1076.33 1201.94 L1076.92 1201.94 L1077.51 1201.94 L1078.09 1201.94 L1078.68 1201.94 L1079.26 1201.94 L1079.85 1201.94 L1080.44 1201.94 L1081.02 1201.94 L1081.61 1201.94 L1082.2 1201.94 L1082.78 1201.94 L1083.37 1201.94 L1083.96 1201.94 L1084.54 1201.94 L1085.13 1201.94 L1085.72 1201.94 L1086.3 1201.94 L1086.89 1201.94 L1087.47 1201.94 L1088.06 1201.94 L1088.65 1201.94 L1089.23 1201.94 L1089.82 1201.94 L1090.41 1201.94 L1090.99 1201.94 L1091.58 1201.94 L1092.17 1201.94 L1092.75 1201.94 L1093.34 1201.94 L1093.93 1201.94 L1094.51 1201.94 L1095.1 1201.94 L1095.68 1201.94 L1096.27 1201.94 L1096.86 1201.94 L1097.44 1201.94 L1098.03 1201.94 L1098.62 1201.94 L1099.2 1201.94 L1099.79 1201.94 L1100.38 1201.94 L1100.96 1201.94 L1101.55 1201.94 L1102.14 1201.94 L1102.72 1201.94 L1103.31 1201.94 L1103.89 1201.94 L1104.48 1201.94 L1105.07 1201.94 L1105.65 1201.94 L1106.24 1201.94 L1106.83 1201.94 L1107.41 1201.94 L1108 1201.94 L1108.59 1201.94 L1109.17 1201.94 L1109.76 1201.94 L1110.34 1201.94 L1110.93 1201.94 L1111.52 1201.94 L1112.1 1201.94 L1112.69 1201.94 L1113.28 1201.94 L1113.86 1201.94 L1114.45 1201.94 L1115.04 1201.94 L1115.62 1201.94 L1116.21 1201.94 L1116.8 1201.94 L1117.38 1201.94 L1117.97 1201.94 L1118.55 1201.94 L1119.14 1201.94 L1119.73 1201.94 L1120.31 1201.94 L1120.9 1201.94 L1121.49 1201.94 L1122.07 1201.94 L1122.66 1201.94 L1123.25 1201.94 L1123.83 1201.94 L1124.42 1201.94 L1125.01 1201.94 L1125.59 1201.94 L1126.18 1201.94 L1126.76 1201.94 L1127.35 1201.94 L1127.94 1201.94 L1128.52 1201.94 L1129.11 1201.94 L1129.7 1201.94 L1130.28 1201.94 L1130.87 1201.94 L1131.46 1201.94 L1132.04 1201.94 L1132.63 1201.94 L1133.21 1201.94 L1133.8 1201.94 L1134.39 1201.94 L1134.97 1201.94 L1135.56 1201.94 L1136.15 1201.94 L1136.73 1201.94 L1137.32 1201.94 L1137.91 1201.94 L1138.49 1201.94 L1139.08 1201.94 L1139.67 1201.94 L1140.25 1201.94 L1140.84 1201.94 L1141.42 1201.94 L1142.01 1201.94 L1142.6 1201.94 L1143.18 1201.94 L1143.77 1201.94 L1144.36 1201.94 L1144.94 1201.94 L1145.53 1201.94 L1146.12 1201.94 L1146.7 1201.94 L1147.29 1201.94 L1147.88 1201.94 L1148.46 1201.94 L1149.05 1201.94 L1149.63 1201.94 L1150.22 1201.94 L1150.81 1201.94 L1151.39 1201.94 L1151.98 1201.94 L1152.57 1201.94 L1153.15 1201.94 L1153.74 1201.94 L1154.33 1201.94 L1154.91 1201.94 L1155.5 1201.94 L1156.09 1201.94 L1156.67 1201.94 L1157.26 1201.94 L1157.84 1201.94 L1158.43 1201.94 L1159.02 1201.94 L1159.6 1201.94 L1160.19 1201.94 L1160.78 1201.94 L1161.36 1201.94 L1161.95 1201.94 L1162.54 1201.94 L1163.12 1201.94 L1163.71 1201.94 L1164.29 1201.94 L1164.88 1201.94 L1165.47 1201.94 L1166.05 1201.94 L1166.64 1201.94 L1167.23 1201.94 L1167.81 1201.94 L1168.4 1201.94 L1168.99 1201.94 L1169.57 1201.94 L1170.16 1201.94 L1170.75 1201.94 L1171.33 1201.94 L1171.92 1201.94 L1172.5 1201.94 L1173.09 1201.94 L1173.68 1201.94 L1174.26 1201.94 L1174.85 1201.94 L1175.44 1201.94 L1176.02 1201.94 L1176.61 1201.94 L1177.2 1201.94 L1177.78 1201.94 L1178.37 1201.94 L1178.96 1201.94 L1179.54 1201.94 L1180.13 1201.94 L1180.71 1201.94 L1181.3 1201.94 L1181.89 1201.94 L1182.47 1201.94 L1183.06 1201.94 L1183.65 1201.94 L1184.23 1201.94 L1184.82 1201.94 L1185.41 1201.94 L1185.99 1201.94 L1186.58 1201.94 L1187.16 1201.94 L1187.75 1201.94 L1188.34 1201.94 L1188.92 1201.94 L1189.51 1201.94 L1190.1 1201.94 L1190.68 1201.94 L1191.27 1201.94 L1191.86 1201.94 L1192.44 1201.94 L1193.03 1201.94 L1193.62 1201.94 L1194.2 1201.94 L1194.79 1201.94 L1195.37 1201.94 L1195.96 1201.94 L1196.55 1201.94 L1197.13 1201.94 L1197.72 1201.94 L1198.31 1201.94 L1198.89 1201.94 L1199.48 1201.94 L1200.07 1201.94 L1200.65 1201.94 L1201.24 1201.94 L1201.83 1201.94 L1202.41 1201.94 L1203 1201.94 L1203.58 1201.94 L1204.17 1201.94 L1204.76 1201.94 L1205.34 1201.94 L1205.93 1201.94 L1206.52 1201.94 L1207.1 1201.94 L1207.69 1201.94 L1208.28 1201.94 L1208.86 1201.94 L1209.45 1201.94 L1210.03 1201.94 L1210.62 1201.94 L1211.21 1201.94 L1211.79 1201.94 L1212.38 1201.94 L1212.97 1201.94 L1213.55 1201.94 L1214.14 1201.94 L1214.73 1201.94 L1215.31 1201.94 L1215.9 1201.94 L1216.49 1201.94 L1217.07 1201.94 L1217.66 1201.94 L1218.24 1201.94 L1218.83 1201.94 L1219.42 1201.94 L1220 1201.94 L1220.59 1201.94 L1221.18 1201.94 L1221.76 1201.94 L1222.35 1201.94 L1222.94 1201.94 L1223.52 1201.94 L1224.11 1201.94 L1224.7 1201.94 L1225.28 1201.94 L1225.87 1201.94 L1226.45 1201.94 L1227.04 1201.94 L1227.63 1201.94 L1228.21 1201.94 L1228.8 1201.94 L1229.39 1201.94 L1229.97 1201.94 L1230.56 1201.94 L1231.15 1201.94 L1231.73 1201.94 L1232.32 1201.94 L1232.91 1201.94 L1233.49 1201.94 L1234.08 1201.94 L1234.66 1201.94 L1235.25 1201.94 L1235.84 1201.94 L1236.42 1201.94 L1237.01 1201.94 L1237.6 1201.94 L1238.18 1201.94 L1238.77 1201.94 L1239.36 1201.94 L1239.94 1201.94 L1240.53 1201.94 L1241.11 1201.94 L1241.7 1201.94 L1242.29 1201.94 L1242.87 1201.94 L1243.46 1201.94 L1244.05 1201.94 L1244.63 1201.94 L1245.22 1201.94 L1245.81 1201.94 L1246.39 1201.94 L1246.98 1201.94 L1247.57 1201.94 L1248.15 1201.94 L1248.74 1201.94 L1249.32 1201.94 L1249.91 1201.94 L1250.5 1201.94 L1251.08 1201.94 L1251.67 1201.94 L1252.26 1201.94 L1252.84 1201.94 L1253.43 1201.94 L1254.02 1201.94 L1254.6 1201.94 L1255.19 1201.94 L1255.78 1201.94 L1256.36 1201.94 L1256.95 1201.94 L1257.53 1201.94 L1258.12 1201.94 L1258.71 1201.94 L1259.29 1201.94 L1259.88 1201.94 L1260.47 1201.94 L1261.05 1201.94 L1261.64 1201.94 L1262.23 1201.94 L1262.81 1201.94 L1263.4 1201.94 L1263.98 1201.94 L1264.57 1201.94 L1265.16 1201.94 L1265.74 1201.94 L1266.33 1201.94 L1266.92 1201.94 L1267.5 1201.94 L1268.09 1201.94 L1268.68 1201.94 L1269.26 1201.94 L1269.85 1201.94 L1270.44 1201.94 L1271.02 1201.94 L1271.61 1201.94 L1272.19 1201.94 L1272.78 1201.94 L1273.37 1201.94 L1273.95 1201.94 L1274.54 1201.94 L1275.13 1201.94 L1275.71 1201.94 L1276.3 1201.94 L1276.89 1201.94 L1277.47 1201.94 L1278.06 1201.94 L1278.65 1201.94 L1279.23 1201.94 L1279.82 1201.94 L1280.4 1201.94 L1280.99 1201.94 L1281.58 1201.94 L1282.16 1201.94 L1282.75 1201.94 L1283.34 1201.94 L1283.92 1201.94 L1284.51 1201.94 L1285.1 1201.94 L1285.68 1201.94 L1286.27 1201.94 L1286.86 1201.94 L1287.44 1201.94 L1288.03 1201.94 L1288.61 1201.94 L1289.2 1201.94 L1289.79 1201.94 L1290.37 1201.94 L1290.96 1201.94 L1291.55 1201.94 L1292.13 1201.94 L1292.72 1201.94 L1293.31 1201.94 L1293.89 1201.94 L1294.48 1201.94 L1295.06 1201.94 L1295.65 1201.94 L1296.24 1201.94 L1296.82 1201.94 L1297.41 1201.94 L1298 1201.94 L1298.58 1201.94 L1299.17 1201.94 L1299.76 1201.94 L1300.34 1201.94 L1300.93 1201.94 L1301.52 1201.94 L1302.1 1201.94 L1302.69 1201.94 L1303.27 1201.94 L1303.86 1201.94 L1304.45 1201.94 L1305.03 1201.94 L1305.62 1201.94 L1306.21 1201.94 L1306.79 1201.94 L1307.38 1201.94 L1307.97 1201.94 L1308.55 1201.94 L1309.14 1201.94 L1309.73 1201.94 L1310.31 1201.94 L1310.9 1201.94 L1311.48 1201.94 L1312.07 1201.94 L1312.66 1201.94 L1313.24 1201.94 L1313.83 1201.94 L1314.42 1201.94 L1315 1201.94 L1315.59 1201.94 L1316.18 1201.94 L1316.76 1201.94 L1317.35 1201.94 L1317.93 1201.94 L1318.52 1201.94 L1319.11 1201.94 L1319.69 1201.94 L1320.28 1201.94 L1320.87 1201.94 L1321.45 1201.94 L1322.04 1201.94 L1322.63 1201.94 L1323.21 1201.94 L1323.8 1201.94 L1324.39 1201.94 L1324.97 1201.94 L1325.56 1201.94 L1326.14 1201.94 L1326.73 1201.94 L1327.32 1201.94 L1327.9 1201.94 L1328.49 1201.94 L1329.08 1201.94 L1329.66 1201.94 L1330.25 1201.94 L1330.84 1201.94 L1331.42 1201.94 L1332.01 1201.94 L1332.6 1201.94 L1333.18 1201.94 L1333.77 1201.94 L1334.35 1201.94 L1334.94 1201.94 L1335.53 1201.94 L1336.11 1201.94 L1336.7 1201.94 L1337.29 1201.94 L1337.87 1201.94 L1338.46 1201.94 L1339.05 1201.94 L1339.63 1201.94 L1340.22 1201.94 L1340.8 1201.94 L1341.39 1201.94 L1341.98 1201.94 L1342.56 1201.94 L1343.15 1201.94 L1343.74 1201.94 L1344.32 1201.94 L1344.91 1201.94 L1345.5 1201.94 L1346.08 1201.94 L1346.67 1201.94 L1347.26 1201.94 L1347.84 1201.94 L1348.43 1201.94 L1349.01 1201.94 L1349.6 1201.94 L1350.19 1201.94 L1350.77 1201.94 L1351.36 1201.94 L1351.95 1201.94 L1352.53 1201.94 L1353.12 1201.94 L1353.71 1201.94 L1354.29 1201.94 L1354.88 1201.94 L1355.47 1201.94 L1356.05 1201.94 L1356.64 1201.94 L1357.22 1201.94 L1357.81 1201.94 L1358.4 1201.94 L1358.98 1201.94 L1359.57 1201.94 L1360.16 1201.94 L1360.74 1201.94 L1361.33 1201.94 L1361.92 1201.94 L1362.5 1201.94 L1363.09 1201.94 L1363.68 1201.94 L1364.26 1201.94 L1364.85 1201.94 L1365.43 1201.94 L1366.02 1201.94 L1366.61 1201.94 L1367.19 1201.94 L1367.78 1201.94 L1368.37 1201.94 L1368.95 1201.94 L1369.54 1201.94 L1370.13 1201.94 L1370.71 1201.94 L1371.3 1201.94 L1371.88 1201.94 L1372.47 1201.94 L1373.06 1201.94 L1373.64 1201.94 L1374.23 1201.94 L1374.82 1201.94 L1375.4 1201.94 L1375.99 1201.94 L1376.58 1201.94 L1377.16 1201.94 L1377.75 1201.94 L1378.34 1201.94 L1378.92 1201.94 L1379.51 1201.94 L1380.09 1201.94 L1380.68 1201.94 L1381.27 1201.94 L1381.85 1201.94 L1382.44 1201.94 L1383.03 1201.94 L1383.61 1201.94 L1384.2 1201.94 L1384.79 1201.94 L1385.37 1201.94 L1385.96 1201.94 L1386.55 1201.94 L1387.13 1201.94 L1387.72 1201.94 L1388.3 1201.94 L1388.89 1201.94 L1389.48 1201.94 L1390.06 1201.94 L1390.65 1201.94 L1391.24 1201.94 L1391.82 1201.94 L1392.41 1201.94 L1393 1201.94 L1393.58 1201.94 L1394.17 1201.94 L1394.75 1201.94 L1395.34 1201.94 L1395.93 1201.94 L1396.51 1201.94 L1397.1 1201.94 L1397.69 1201.94 L1398.27 1201.94 L1398.86 1201.94 L1399.45 1201.94 L1400.03 1201.94 L1400.62 1201.94 L1401.21 1201.94 L1401.79 1201.94 L1402.38 1201.94 L1402.96 1201.94 L1403.55 1201.94 L1404.14 1201.94 L1404.72 1201.94 L1405.31 1201.94 L1405.9 1201.94 L1406.48 1201.94 L1407.07 1201.94 L1407.66 1201.94 L1408.24 1201.94 L1408.83 1201.94 L1409.42 1201.94 L1410 1201.94 L1410.59 1201.94 L1411.17 1201.94 L1411.76 1201.94 L1412.35 1201.94 L1412.93 1201.94 L1413.52 1201.94 L1414.11 1201.94 L1414.69 1201.94 L1415.28 1201.94 L1415.87 1201.94 L1416.45 1201.94 L1417.04 1201.94 L1417.63 1201.94 L1418.21 1201.94 L1418.8 1201.94 L1419.38 1201.94 L1419.97 1201.94 L1420.56 1201.94 L1421.14 1201.94 L1421.73 1201.94 L1422.32 1201.94 L1422.9 1201.94 L1423.49 1201.94 L1424.08 1201.94 L1424.66 1201.94 L1425.25 1201.94 L1425.83 1201.94 L1426.42 1201.94 L1427.01 1201.94 L1427.59 1201.94 L1428.18 1201.94 L1428.77 1201.94 L1429.35 1201.94 L1429.94 1201.94 L1430.53 1201.94 L1431.11 1201.94 L1431.7 1201.94 L1432.29 1201.94 L1432.87 1201.94 L1433.46 1201.94 L1434.04 1201.94 L1434.63 1201.94 L1435.22 1201.94 L1435.8 1201.94 L1436.39 1201.94 L1436.98 1201.94 L1437.56 1201.94 L1438.15 1201.94 L1438.74 1201.94 L1439.32 1201.94 L1439.91 1201.94 L1440.5 1201.94 L1441.08 1201.94 L1441.67 1201.94 L1442.25 1201.94 L1442.84 1201.94 L1443.43 1201.94 L1444.01 1201.94 L1444.6 1201.94 L1445.19 1201.94 L1445.77 1201.94 L1446.36 1201.94 L1446.95 1201.94 L1447.53 1201.94 L1448.12 1201.94 L1448.7 1201.94 L1449.29 1201.94 L1449.88 1201.94 L1450.46 1201.94 L1451.05 1201.94 L1451.64 1201.94 L1452.22 1201.94 L1452.81 1201.94 L1453.4 1201.94 L1453.98 1201.94 L1454.57 1201.94 L1455.16 1201.94 L1455.74 1201.94 L1456.33 1201.94 L1456.91 1201.94 L1457.5 1201.94 L1458.09 1201.94 L1458.67 1201.94 L1459.26 1201.94 L1459.85 1201.94 L1460.43 1201.94 L1461.02 1201.94 L1461.61 1201.94 L1462.19 1201.94 L1462.78 1201.94 L1463.37 1201.94 L1463.95 1201.94 L1464.54 1201.94 L1465.12 1201.94 L1465.71 1201.94 L1466.3 1201.94 L1466.88 1201.94 L1467.47 1201.94 L1468.06 1201.94 L1468.64 1201.94 L1469.23 1201.94 L1469.82 1201.94 L1470.4 1201.94 L1470.99 1201.94 L1471.57 1201.94 L1472.16 1201.94 L1472.75 1201.94 L1473.33 1201.94 L1473.92 1201.94 L1474.51 1201.94 L1475.09 1201.94 L1475.68 1201.94 L1476.27 1201.94 L1476.85 1201.94 L1477.44 1201.94 L1478.03 1201.94 L1478.61 1201.94 L1479.2 1201.94 L1479.78 1201.94 L1480.37 1201.94 L1480.96 1201.94 L1481.54 1201.94 L1482.13 1201.94 L1482.72 1201.94 L1483.3 1201.94 L1483.89 1201.94 L1484.48 1201.94 L1485.06 1201.94 L1485.65 1201.94 L1486.24 1201.94 L1486.82 1201.94 L1487.41 1201.94 L1487.99 1201.94 L1488.58 1201.94 L1489.17 1201.94 L1489.75 1201.94 L1490.34 1201.94 L1490.93 1201.94 L1491.51 1201.94 L1492.1 1201.94 L1492.69 1201.94 L1493.27 1201.94 L1493.86 1201.94 L1494.45 1201.94 L1495.03 1201.94 L1495.62 1201.94 L1496.2 1201.94 L1496.79 1201.94 L1497.38 1201.94 L1497.96 1201.94 L1498.55 1201.94 L1499.14 1201.94 L1499.72 1201.94 L1500.31 1201.94 L1500.9 1201.94 L1501.48 1201.94 L1502.07 1201.94 L1502.65 1201.94 L1503.24 1201.94 L1503.83 1201.94 L1504.41 1201.94 L1505 1201.94 L1505.59 1201.94 L1506.17 1201.94 L1506.76 1201.94 L1507.35 1201.94 L1507.93 1201.94 L1508.52 1201.94 L1509.11 1201.94 L1509.69 1201.94 L1510.28 1201.94 L1510.86 1201.94 L1511.45 1201.94 L1512.04 1201.94 L1512.62 1201.94 L1513.21 1201.94 L1513.8 1201.94 L1514.38 1201.94 L1514.97 1201.94 L1515.56 1201.94 L1516.14 1201.94 L1516.73 1201.94 L1517.32 1201.94 L1517.9 1201.94 L1518.49 1201.94 L1519.07 1201.94 L1519.66 1201.94 L1520.25 1201.94 L1520.83 1201.94 L1521.42 1201.94 L1522.01 1201.94 L1522.59 1201.94 L1523.18 1201.94 L1523.77 1201.94 L1524.35 1201.94 L1524.94 1201.94 L1525.52 1201.94 L1526.11 1201.94 L1526.7 1201.94 L1527.28 1201.94 L1527.87 1201.94 L1528.46 1201.94 L1529.04 1201.94 L1529.63 1201.94 L1530.22 1201.94 L1530.8 1201.94 L1531.39 1201.94 L1531.98 1201.94 L1532.56 1201.94 L1533.15 1201.94 L1533.73 1201.94 L1534.32 1201.94 L1534.91 1201.94 L1535.49 1201.94 L1536.08 1201.94 L1536.67 1201.94 L1537.25 1201.94 L1537.84 1201.94 L1538.43 1201.94 L1539.01 1201.94 L1539.6 1201.94 L1540.19 1201.94 L1540.77 1201.94 L1541.36 1201.94 L1541.94 1201.94 L1542.53 1201.94 L1543.12 1201.94 L1543.7 1201.94 L1544.29 1201.94 L1544.88 1201.94 L1545.46 1201.94 L1546.05 1201.94 L1546.64 1201.94 L1547.22 1201.94 L1547.81 1201.94 L1548.4 1201.94 L1548.98 1201.94 L1549.57 1201.94 L1550.15 1201.94 L1550.74 1201.94 L1551.33 1201.94 L1551.91 1201.94 L1552.5 1201.94 L1553.09 1201.94 L1553.67 1201.94 L1554.26 1201.94 L1554.85 1201.94 L1555.43 1201.94 L1556.02 1201.94 L1556.6 1201.94 L1557.19 1201.94 L1557.78 1201.94 L1558.36 1201.94 L1558.95 1201.94 L1559.54 1201.94 L1560.12 1201.94 L1560.71 1201.94 L1561.3 1201.94 L1561.88 1201.94 L1562.47 1201.94 L1563.06 1201.94 L1563.64 1201.94 L1564.23 1201.94 L1564.81 1201.94 L1565.4 1201.94 L1565.99 1201.94 L1566.57 1201.94 L1567.16 1201.94 L1567.75 1201.94 L1568.33 1201.94 L1568.92 1201.94 L1569.51 1201.94 L1570.09 1201.94 L1570.68 1201.94 L1571.27 1201.94 L1571.85 1201.94 L1572.44 1201.94 L1573.02 1201.94 L1573.61 1201.94 L1574.2 1201.94 L1574.78 1201.94 L1575.37 1201.94 L1575.96 1201.94 L1576.54 1201.94 L1577.13 1201.94 L1577.72 1201.94 L1578.3 1201.94 L1578.89 1201.94 L1579.47 1201.94 L1580.06 1201.94 L1580.65 1201.94 L1581.23 1201.94 L1581.82 1201.94 L1582.41 1201.94 L1582.99 1201.94 L1583.58 1201.94 L1584.17 1201.94 L1584.75 1201.94 L1585.34 1201.94 L1585.93 1201.94 L1586.51 1201.94 L1587.1 1201.94 L1587.68 1201.94 L1588.27 1201.94 L1588.86 1201.94 L1589.44 1201.94 L1590.03 1201.94 L1590.62 1201.94 L1591.2 1201.94 L1591.79 1201.94 L1592.38 1201.94 L1592.96 1201.94 L1593.55 1201.94 L1594.14 1201.94 L1594.72 1201.94 L1595.31 1201.94 L1595.89 1201.94 L1596.48 1201.94 L1597.07 1201.94 L1597.65 1201.94 L1598.24 1201.94 L1598.83 1201.94 L1599.41 1201.94 L1600 1201.94 L1600.59 1201.94 L1601.17 1201.94 L1601.76 1201.94 L1602.34 1201.94 L1602.93 1201.94 L1603.52 1201.94 L1604.1 1201.94 L1604.69 1201.94 L1605.28 1201.94 L1605.86 1201.94 L1606.45 1201.94 L1607.04 1201.94 L1607.62 1201.94 L1608.21 1201.94 L1608.8 1201.94 L1609.38 1201.94 L1609.97 1201.94 L1610.55 1201.94 L1611.14 1201.94 L1611.73 1201.94 L1612.31 1201.94 L1612.9 1201.94 L1613.49 1201.94 L1614.07 1201.94 L1614.66 1201.94 L1615.25 1201.94 L1615.83 1201.94 L1616.42 1201.94 L1617.01 1201.94 L1617.59 1201.94 L1618.18 1201.94 L1618.76 1201.94 L1619.35 1201.94 L1619.94 1201.94 L1620.52 1201.94 L1621.11 1201.94 L1621.7 1201.94 L1622.28 1201.94 L1622.87 1201.94 L1623.46 1201.94 L1624.04 1201.94 L1624.63 1201.94 L1625.22 1201.94 L1625.8 1201.94 L1626.39 1201.94 L1626.97 1201.94 L1627.56 1201.94 L1628.15 1201.94 L1628.73 1201.94 L1629.32 1201.94 L1629.91 1201.94 L1630.49 1201.94 L1631.08 1201.94 L1631.67 1201.94 L1632.25 1201.94 L1632.84 1201.94 L1633.42 1201.94 L1634.01 1201.94 L1634.6 1201.94 L1635.18 1201.94 L1635.77 1201.94 L1636.36 1201.94 L1636.94 1201.94 L1637.53 1201.94 L1638.12 1201.94 L1638.7 1201.94 L1639.29 1201.94 L1639.88 1201.94 L1640.46 1201.94 L1641.05 1201.94 L1641.63 1201.94 L1642.22 1201.94 L1642.81 1201.94 L1643.39 1201.94 L1643.98 1201.94 L1644.57 1201.94 L1645.15 1201.94 L1645.74 1201.94 L1646.33 1201.94 L1646.91 1201.94 L1647.5 1201.94 L1648.09 1201.94 L1648.67 1201.94 L1649.26 1201.94 L1649.84 1201.94 L1650.43 1201.94 L1651.02 1201.94 L1651.6 1201.94 L1652.19 1201.94 L1652.78 1201.94 L1653.36 1201.94 L1653.95 1201.94 L1654.54 1201.94 L1655.12 1201.94 L1655.71 1201.94 L1656.29 1201.94 L1656.88 1201.94 L1657.47 1201.94 L1658.05 1201.94 L1658.64 1201.94 L1659.23 1201.94 L1659.81 1201.94 L1660.4 1201.94 L1660.99 1201.94 L1661.57 1201.94 L1662.16 1201.94 L1662.75 1201.94 L1663.33 1201.94 L1663.92 1201.94 L1664.5 1201.94 L1665.09 1201.94 L1665.68 1201.94 L1666.26 1201.94 L1666.85 1201.94 L1667.44 1201.94 L1668.02 1201.94 L1668.61 1201.94 L1669.2 1201.94 L1669.78 1201.94 L1670.37 1201.94 L1670.96 1201.94 L1671.54 1201.94 L1672.13 1201.94 L1672.71 1201.94 L1673.3 1201.94 L1673.89 1201.94 L1674.47 1201.94 L1675.06 1201.94 L1675.65 1201.94 L1676.23 1201.94 L1676.82 1201.94 L1677.41 1201.94 L1677.99 1201.94 L1678.58 1201.94 L1679.17 1201.94 L1679.75 1201.94 L1680.34 1201.94 L1680.92 1201.94 L1681.51 1201.94 L1682.1 1201.94 L1682.68 1201.94 L1683.27 1201.94 L1683.86 1201.94 L1684.44 1201.94 L1685.03 1201.94 L1685.62 1201.94 L1686.2 1201.94 L1686.79 1201.94 L1687.37 1201.94 L1687.96 1201.94 L1688.55 1201.94 L1689.13 1201.94 L1689.72 1201.94 L1690.31 1201.94 L1690.89 1201.94 L1691.48 1201.94 L1692.07 1201.94 L1692.65 1201.94 L1693.24 1201.94 L1693.83 1201.94 L1694.41 1201.94 L1695 1201.94 L1695.58 1201.94 L1696.17 1201.94 L1696.76 1201.94 L1697.34 1201.94 L1697.93 1201.94 L1698.52 1201.94 L1699.1 1201.94 L1699.69 1201.94 L1700.28 1201.94 L1700.86 1201.94 L1701.45 1201.94 L1702.04 1201.94 L1702.62 1201.94 L1703.21 1201.94 L1703.79 1201.94 L1704.38 1201.94 L1704.97 1201.94 L1705.55 1201.94 L1706.14 1201.94 L1706.73 1201.94 L1707.31 1201.94 L1707.9 1201.94 L1708.49 1201.94 L1709.07 1201.94 L1709.66 1201.94 L1710.24 1201.94 L1710.83 1201.94 L1711.42 1201.94 L1712 1201.94 L1712.59 1201.94 L1713.18 1201.94 L1713.76 1201.94 L1714.35 1201.94 L1714.94 1201.94 L1715.52 1201.94 L1716.11 1201.94 L1716.7 1201.94 L1717.28 1201.94 L1717.87 1201.94 L1718.45 1201.94 L1719.04 1201.94 L1719.63 1201.94 L1720.21 1201.94 L1720.8 1201.94 L1721.39 1201.94 L1721.97 1201.94 L1722.56 1201.94 L1723.15 1201.94 L1723.73 1201.94 L1724.32 1201.94 L1724.91 1201.94 L1725.49 1201.94 L1726.08 1201.94 L1726.66 1201.94 L1727.25 1201.94 L1727.84 1201.94 L1728.42 1201.94 L1729.01 1201.94 L1729.6 1201.94 L1730.18 1201.94 L1730.77 1201.94 L1731.36 1201.94 L1731.94 1201.94 L1732.53 1201.94 L1733.11 1201.94 L1733.7 1201.94 L1734.29 1201.94 L1734.87 1201.94 L1735.46 1201.94 L1736.05 1201.94 L1736.63 1201.94 L1737.22 1201.94 L1737.81 1201.94 L1738.39 1201.94 L1738.98 1201.94 L1739.57 1201.94 L1740.15 1201.94 L1740.74 1201.94 L1741.32 1201.94 L1741.91 1201.94 L1742.5 1201.94 L1743.08 1201.94 L1743.67 1201.94 L1744.26 1201.94 L1744.84 1201.94 L1745.43 1201.94 L1746.02 1201.94 L1746.6 1201.94 L1747.19 1201.94 L1747.78 1201.94 L1748.36 1201.94 L1748.95 1201.94 L1749.53 1201.94 L1750.12 1201.94 L1750.71 1201.94 L1751.29 1201.94 L1751.88 1201.94 L1752.47 1201.94 L1753.05 1201.94 L1753.64 1201.94 L1754.23 1201.94 L1754.81 1201.94 L1755.4 1201.94 L1755.99 1201.94 L1756.57 1201.94 L1757.16 1201.94 L1757.74 1201.94 L1758.33 1201.94 L1758.92 1201.94 L1759.5 1201.94 L1760.09 1201.94 L1760.68 1201.94 L1761.26 1201.94 L1761.85 1201.94 L1762.44 1201.94 L1763.02 1201.94 L1763.61 1201.94 L1764.19 1201.94 L1764.78 1201.94 L1765.37 1201.94 L1765.95 1201.94 L1766.54 1201.94 L1767.13 1201.94 L1767.71 1201.94 L1768.3 1201.94 L1768.89 1201.94 L1769.47 1201.94 L1770.06 1201.94 L1770.65 1201.94 L1771.23 1201.94 L1771.82 1201.94 L1772.4 1201.94 L1772.99 1201.94 L1773.58 1201.94 L1774.16 1201.94 L1774.75 1201.94 L1775.34 1201.94 L1775.92 1201.94 L1776.51 1201.94 L1777.1 1201.94 L1777.68 1201.94 L1778.27 1201.94 L1778.86 1201.94 L1779.44 1201.94 L1780.03 1201.94 L1780.61 1201.94 L1781.2 1201.94 L1781.79 1201.94 L1782.37 1201.94 L1782.96 1201.94 L1783.55 1201.94 L1784.13 1201.94 L1784.72 1201.94 L1785.31 1201.94 L1785.89 1201.94 L1786.48 1201.94 L1787.06 1201.94 L1787.65 1201.94 L1788.24 1201.94 L1788.82 1201.94 L1789.41 1201.94 L1790 1201.94 L1790.58 1201.94 L1791.17 1201.94 L1791.76 1201.94 L1792.34 1201.94 L1792.93 1201.94 L1793.52 1201.94 L1794.1 1201.94 L1794.69 1201.94 L1795.27 1201.94 L1795.86 1201.94 L1796.45 1201.94 L1797.03 1201.94 L1797.62 1201.94 L1798.21 1201.94 L1798.79 1201.94 L1799.38 1201.94 L1799.97 1201.94 L1800.55 1201.94 L1801.14 1201.94 L1801.73 1201.94 L1802.31 1201.94 L1802.9 1201.94 L1803.48 1201.94 L1804.07 1201.94 L1804.66 1201.94 L1805.24 1201.94 L1805.83 1201.94 L1806.42 1201.94 L1807 1201.94 L1807.59 1201.94 L1808.18 1201.94 L1808.76 1201.94 L1809.35 1201.94 L1809.94 1201.94 L1810.52 1201.94 L1811.11 1201.94 L1811.69 1201.94 L1812.28 1201.94 L1812.87 1201.94 L1813.45 1201.94 L1814.04 1201.94 L1814.63 1201.94 L1815.21 1201.94 L1815.8 1201.94 L1816.39 1201.94 L1816.97 1201.94 L1817.56 1201.94 L1818.14 1201.94 L1818.73 1201.94 L1819.32 1201.94 L1819.9 1201.94 L1820.49 1201.94 L1821.08 1201.94 L1821.66 1201.94 L1822.25 1201.94 L1822.84 1201.94 L1823.42 1201.94 L1824.01 1201.94 L1824.6 1201.94 L1825.18 1201.94 L1825.77 1201.94 L1826.35 1201.94 L1826.94 1201.94 L1827.53 1201.94 L1828.11 1201.94 L1828.7 1201.94 L1829.29 1201.94 L1829.87 1201.94 L1830.46 1201.94 L1831.05 1201.94 L1831.63 1201.94 L1832.22 1201.94 L1832.81 1201.94 L1833.39 1201.94 L1833.98 1201.94 L1834.56 1201.94 L1835.15 1201.94 L1835.74 1201.94 L1836.32 1201.94 L1836.91 1201.94 L1837.5 1201.94 L1838.08 1201.94 L1838.67 1201.94 L1839.26 1201.94 L1839.84 1201.94 L1840.43 1201.94 L1841.01 1201.94 L1841.6 1201.94 L1842.19 1201.94 L1842.77 1201.94 L1843.36 1201.94 L1843.95 1201.94 L1844.53 1201.94 L1845.12 1201.94 L1845.71 1201.94 L1846.29 1201.94 L1846.88 1201.94 L1847.47 1201.94 L1848.05 1201.94 L1848.64 1201.94 L1849.22 1201.94 L1849.81 1201.94 L1850.4 1201.94 L1850.98 1201.94 L1851.57 1201.94 L1852.16 1201.94 L1852.74 1201.94 L1853.33 1201.94 L1853.92 1201.94 L1854.5 1201.94 L1855.09 1201.94 L1855.68 1201.94 L1856.26 1201.94 L1856.85 1201.94 L1857.43 1201.94 L1858.02 1201.94 L1858.61 1201.94 L1859.19 1201.94 L1859.78 1201.94 L1860.37 1201.94 L1860.95 1201.94 L1861.54 1201.94 L1862.13 1201.94 L1862.71 1201.94 L1863.3 1201.94 L1863.88 1201.94 L1864.47 1201.94 L1865.06 1201.94 L1865.64 1201.94 L1866.23 1201.94 L1866.82 1201.94 L1867.4 1201.94 L1867.99 1201.94 L1868.58 1201.94 L1869.16 1201.94 L1869.75 1201.94 L1870.34 1201.94 L1870.92 1201.94 L1871.51 1201.94 L1872.09 1201.94 L1872.68 1201.94 L1873.27 1201.94 L1873.85 1201.94 L1874.44 1201.94 L1875.03 1201.94 L1875.61 1201.94 L1876.2 1201.94 L1876.79 1201.94 L1877.37 1201.94 L1877.96 1201.94 L1878.55 1201.94 L1879.13 1201.94 L1879.72 1201.94 L1880.3 1201.94 L1880.89 1201.94 L1881.48 1201.94 L1882.06 1201.94 L1882.65 1201.94 L1883.24 1201.94 L1883.82 1201.94 L1884.41 1201.94 L1885 1201.94 L1885.58 1201.94 L1886.17 1201.94 L1886.76 1201.94 L1887.34 1201.94 L1887.93 1201.94 L1888.51 1201.94 L1889.1 1201.94 L1889.69 1201.94 L1890.27 1201.94 L1890.86 1201.94 L1891.45 1201.94 L1892.03 1201.94 L1892.62 1201.94 L1893.21 1201.94 L1893.79 1201.94 L1894.38 1201.94 L1894.96 1201.94 L1895.55 1201.94 L1896.14 1201.94 L1896.72 1201.94 L1897.31 1201.94 L1897.9 1201.94 L1898.48 1201.94 L1899.07 1201.94 L1899.66 1201.94 L1900.24 1201.94 L1900.83 1201.94 L1901.42 1201.94 L1902 1201.94 L1902.59 1201.94 L1903.17 1201.94 L1903.76 1201.94 L1904.35 1201.94 L1904.93 1201.94 L1905.52 1201.94 L1906.11 1201.94 L1906.69 1201.94 L1907.28 1201.94 L1907.87 1201.94 L1908.45 1201.94 L1909.04 1201.94 L1909.63 1201.94 L1910.21 1201.94 L1910.8 1201.94 L1911.38 1201.94 L1911.97 1201.94 L1912.56 1201.94 L1913.14 1201.94 L1913.73 1201.94 L1914.32 1201.94 L1914.9 1201.94 L1915.49 1201.94 L1916.08 1201.94 L1916.66 1201.94 L1917.25 1201.94 L1917.83 1201.94 L1918.42 1201.94 L1919.01 1201.94 L1919.59 1201.94 L1920.18 1201.94 L1920.77 1201.94 L1921.35 1201.94 L1921.94 1201.94 L1922.53 1201.94 L1923.11 1201.94 L1923.7 1201.94 L1924.29 1201.94 L1924.87 1201.94 L1925.46 1201.94 L1926.04 1201.94 L1926.63 1201.94 L1927.22 1201.94 L1927.8 1201.94 L1928.39 1201.94 L1928.98 1201.94 L1929.56 1201.94 L1930.15 1201.94 L1930.74 1201.94 L1931.32 1201.94 L1931.91 1201.94 L1932.5 1201.94 L1933.08 1201.94 L1933.67 1201.94 L1934.25 1201.94 L1934.84 1201.94 L1935.43 1201.94 L1936.01 1201.94 L1936.6 1201.94 L1937.19 1201.94 L1937.77 1201.94 L1938.36 1201.94 L1938.95 1201.94 L1939.53 1201.94 L1940.12 1201.94 L1940.71 1201.94 L1941.29 1201.94 L1941.88 1201.94 L1942.46 1201.94 L1943.05 1201.94 L1943.64 1201.94 L1944.22 1201.94 L1944.81 1201.94 L1945.4 1201.94 L1945.98 1201.94 L1946.57 1201.94 L1947.16 1201.94 L1947.74 1201.94 L1948.33 1201.94 L1948.91 1201.94 L1949.5 1201.94 L1950.09 1201.94 L1950.67 1201.94 L1951.26 1201.94 L1951.85 1201.94 L1952.43 1201.94 L1953.02 1201.94 L1953.61 1201.94 L1954.19 1201.94 L1954.78 1201.94 L1955.37 1201.94 L1955.95 1201.94 L1956.54 1201.94 L1957.12 1201.94 L1957.71 1201.94 L1958.3 1201.94 L1958.88 1201.94 L1959.47 1201.94 L1960.06 1201.94 L1960.64 1201.94 L1961.23 1201.94 L1961.82 1201.94 L1962.4 1201.94 L1962.99 1201.94 L1963.58 1201.94 L1964.16 1201.94 L1964.75 1201.94 L1965.33 1201.94 L1965.92 1201.94 L1966.51 1201.94 L1967.09 1201.94 L1967.68 1201.94 L1968.27 1201.94 L1968.85 1201.94 L1969.44 1201.94 L1970.03 1201.94 L1970.61 1201.94 L1971.2 1201.94 L1971.78 1201.94 L1972.37 1201.94 L1972.96 1201.94 L1973.54 1201.94 L1974.13 1201.94 L1974.72 1201.94 L1975.3 1201.94 L1975.89 1201.94 L1976.48 1201.94 L1977.06 1201.94 L1977.65 1201.94 L1978.24 1201.94 L1978.82 1201.94 L1979.41 1201.94 L1979.99 1201.94 L1980.58 1201.94 L1981.17 1201.94 L1981.75 1201.94 L1982.34 1201.94 L1982.93 1201.94 L1983.51 1201.94 L1984.1 1201.94 L1984.69 1201.94 L1985.27 1201.94 L1985.86 1201.94 L1986.45 1201.94 L1987.03 1201.94 L1987.62 1201.94 L1988.2 1201.94 L1988.79 1201.94 L1989.38 1201.94 L1989.96 1201.94 L1990.55 1201.94 L1991.14 1201.94 L1991.72 1201.94 L1992.31 1201.94 L1992.9 1201.94 L1993.48 1201.94 L1994.07 1201.94 L1994.65 1201.94 L1995.24 1201.94 L1995.83 1201.94 L1996.41 1201.94 L1997 1201.94 L1997.59 1201.94 L1998.17 1201.94 L1998.76 1201.94 L1999.35 1201.94 L1999.93 1201.94 L2000.52 1201.94 L2001.11 1201.94 L2001.69 1201.94 L2002.28 1201.94 L2002.86 1201.94 L2003.45 1201.94 L2004.04 1201.94 L2004.62 1201.94 L2005.21 1201.94 L2005.8 1201.94 L2006.38 1201.94 L2006.97 1201.94 L2007.56 1201.94 L2008.14 1201.94 L2008.73 1201.94 L2009.32 1201.94 L2009.9 1201.94 L2010.49 1201.94 L2011.07 1201.94 L2011.66 1201.94 L2012.25 1201.94 L2012.83 1201.94 L2013.42 1201.94 L2014.01 1201.94 L2014.59 1201.94 L2015.18 1201.94 L2015.77 1201.94 L2016.35 1201.94 L2016.94 1201.94 L2017.53 1201.94 L2018.11 1201.94 L2018.7 1201.94 L2019.28 1201.94 L2019.87 1201.94 L2020.46 1201.94 L2021.04 1201.94 L2021.63 1201.94 L2022.22 1201.94 L2022.8 1201.94 L2023.39 1201.94 L2023.98 1201.94 L2024.56 1201.94 L2025.15 1201.94 L2025.73 1201.94 L2026.32 1201.94 L2026.91 1201.94 L2027.49 1201.94 L2028.08 1201.94 L2028.67 1201.94 L2029.25 1201.94 L2029.84 1201.94 L2030.43 1201.94 L2031.01 1201.94 L2031.6 1201.94 L2032.19 1201.94 L2032.77 1201.94 L2033.36 1201.94 L2033.94 1201.94 L2034.53 1201.94 L2035.12 1201.94 L2035.7 1201.94 L2036.29 1201.94 L2036.88 1201.94 L2037.46 1201.94 L2038.05 1201.94 L2038.64 1201.94 L2039.22 1201.94 L2039.81 1201.94 L2040.4 1201.94 L2040.98 1201.94 L2041.57 1201.94 L2042.15 1201.94 L2042.74 1201.94 L2043.33 1201.94 L2043.91 1201.94 L2044.5 1201.94 L2045.09 1201.94 L2045.67 1201.94 L2046.26 1201.94 L2046.85 1201.94 L2047.43 1201.94 L2048.02 1201.94 L2048.6 1201.94 L2049.19 1201.94 L2049.78 1201.94 L2050.36 1201.94 L2050.95 1201.94 L2051.54 1201.94 L2052.12 1201.94 L2052.71 1201.94 L2053.3 1201.94 L2053.88 1201.94 L2054.47 1201.94 L2055.06 1201.94 L2055.64 1201.94 L2056.23 1201.94 L2056.81 1201.94 L2057.4 1201.94 L2057.99 1201.94 L2058.57 1201.94 L2059.16 1201.94 L2059.75 1201.94 L2060.33 1201.94 L2060.92 1201.94 L2061.51 1201.94 L2062.09 1201.94 L2062.68 1201.94 L2063.27 1201.94 L2063.85 1201.94 L2064.44 1201.94 L2065.02 1201.94 L2065.61 1201.94 L2066.2 1201.94 L2066.78 1201.94 L2067.37 1201.94 L2067.96 1201.94 L2068.54 1201.94 L2069.13 1201.94 L2069.72 1201.94 L2070.3 1201.94 L2070.89 1201.94 L2071.48 1201.94 L2072.06 1201.94 L2072.65 1201.94 L2073.23 1201.94 L2073.82 1201.94 L2074.41 1201.94 L2074.99 1201.94 L2075.58 1201.94 L2076.17 1201.94 L2076.75 1201.94 L2077.34 1201.94 L2077.93 1201.94 L2078.51 1201.94 L2079.1 1201.94 L2079.68 1201.94 L2080.27 1201.94 L2080.86 1201.94 L2081.44 1201.94 L2082.03 1201.94 L2082.62 1201.94 L2083.2 1201.94 L2083.79 1201.94 L2084.38 1201.94 L2084.96 1201.94 L2085.55 1201.94 L2086.14 1201.94 L2086.72 1201.94 L2087.31 1201.94 L2087.89 1201.94 L2088.48 1201.94 L2089.07 1201.94 L2089.65 1201.94 L2090.24 1201.94 L2090.83 1201.94 L2091.41 1201.94 L2092 1201.94 L2092.59 1201.94 L2093.17 1201.94 L2093.76 1201.94 L2094.35 1201.94 L2094.93 1201.94 L2095.52 1201.94 L2096.1 1201.94 L2096.69 1201.94 L2097.28 1201.94 L2097.86 1201.94 L2098.45 1201.94 L2099.04 1201.94 L2099.62 1201.94 L2100.21 1201.94 L2100.8 1201.94 L2101.38 1201.94 L2101.97 1201.94 L2102.55 1201.94 L2103.14 1201.94 L2103.73 1201.94 L2104.31 1201.94 L2104.9 1201.94 L2105.49 1201.94 L2106.07 1201.94 L2106.66 1201.94 L2107.25 1201.94 L2107.83 1201.94 L2108.42 1201.94 L2109.01 1201.94 L2109.59 1201.94 L2110.18 1201.94 L2110.76 1201.94 L2111.35 1201.94 L2111.94 1201.94 L2112.52 1201.94 L2113.11 1201.94 L2113.7 1201.94 L2114.28 1201.94 L2114.87 1201.94 L2115.46 1201.94 L2116.04 1201.94 L2116.63 1201.94 L2117.22 1201.94 L2117.8 1201.94 L2118.39 1201.94 L2118.97 1201.94 L2119.56 1201.94 L2120.15 1201.94 L2120.73 1201.94 L2121.32 1201.94 L2121.91 1201.94 L2122.49 1201.94 L2123.08 1201.94 L2123.67 1201.94 L2124.25 1201.94 L2124.84 1201.94 L2125.42 1201.94 L2126.01 1201.94 L2126.6 1201.94 L2127.18 1201.94 L2127.77 1201.94 L2128.36 1201.94 L2128.94 1201.94 L2129.53 1201.94 L2130.12 1201.94 L2130.7 1201.94 L2131.29 1201.94 L2131.88 1201.94 L2132.46 1201.94 L2133.05 1201.94 L2133.63 1201.94 L2134.22 1201.94 L2134.81 1201.94 L2135.39 1201.94 L2135.98 1201.94 L2136.57 1201.94 L2137.15 1201.94 L2137.74 1201.94 L2138.33 1201.94 L2138.91 1201.94 L2139.5 1201.94 L2140.09 1201.94 L2140.67 1201.94 L2141.26 1201.94 L2141.84 1201.94 L2142.43 1201.94 L2143.02 1201.94 L2143.6 1201.94 L2144.19 1201.94 L2144.78 1201.94 L2145.36 1201.94 L2145.95 1201.94 L2146.54 1201.94 L2147.12 1201.94 L2147.71 1201.94 L2148.3 1201.94 L2148.88 1201.94 L2149.47 1201.94 L2150.05 1201.94 L2150.64 1201.94 L2151.23 1201.94 L2151.81 1201.94 L2152.4 1201.94 L2152.99 1201.94 L2153.57 1201.94 L2154.16 1201.94 L2154.75 1201.94 L2155.33 1201.94 L2155.92 1201.94 L2156.5 1201.94 L2157.09 1201.94 L2157.68 1201.94 L2158.26 1201.94 L2158.26 1201.74 L2157.68 1201.74 L2157.09 1201.74 L2156.5 1201.74 L2155.92 1201.74 L2155.33 1201.74 L2154.75 1201.74 L2154.16 1201.74 L2153.57 1201.74 L2152.99 1201.74 L2152.4 1201.74 L2151.81 1201.74 L2151.23 1201.74 L2150.64 1201.74 L2150.05 1201.74 L2149.47 1201.74 L2148.88 1201.74 L2148.3 1201.74 L2147.71 1201.74 L2147.12 1201.74 L2146.54 1201.74 L2145.95 1201.74 L2145.36 1201.74 L2144.78 1201.74 L2144.19 1201.74 L2143.6 1201.74 L2143.02 1201.74 L2142.43 1201.74 L2141.84 1201.74 L2141.26 1201.74 L2140.67 1201.74 L2140.09 1201.74 L2139.5 1201.74 L2138.91 1201.74 L2138.33 1201.74 L2137.74 1201.74 L2137.15 1201.74 L2136.57 1201.74 L2135.98 1201.74 L2135.39 1201.74 L2134.81 1201.74 L2134.22 1201.74 L2133.63 1201.74 L2133.05 1201.74 L2132.46 1201.74 L2131.88 1201.74 L2131.29 1201.74 L2130.7 1201.74 L2130.12 1201.74 L2129.53 1201.74 L2128.94 1201.74 L2128.36 1201.74 L2127.77 1201.74 L2127.18 1201.74 L2126.6 1201.74 L2126.01 1201.74 L2125.42 1201.74 L2124.84 1201.74 L2124.25 1201.74 L2123.67 1201.74 L2123.08 1201.74 L2122.49 1201.74 L2121.91 1201.74 L2121.32 1201.74 L2120.73 1201.74 L2120.15 1201.74 L2119.56 1201.74 L2118.97 1201.74 L2118.39 1201.74 L2117.8 1201.74 L2117.22 1201.74 L2116.63 1201.74 L2116.04 1201.74 L2115.46 1201.74 L2114.87 1201.74 L2114.28 1201.74 L2113.7 1201.74 L2113.11 1201.74 L2112.52 1201.74 L2111.94 1201.74 L2111.35 1201.74 L2110.76 1201.74 L2110.18 1201.74 L2109.59 1201.74 L2109.01 1201.74 L2108.42 1201.74 L2107.83 1201.74 L2107.25 1201.74 L2106.66 1201.74 L2106.07 1201.74 L2105.49 1201.74 L2104.9 1201.74 L2104.31 1201.74 L2103.73 1201.74 L2103.14 1201.74 L2102.55 1201.74 L2101.97 1201.74 L2101.38 1201.74 L2100.8 1201.74 L2100.21 1201.74 L2099.62 1201.74 L2099.04 1201.74 L2098.45 1201.74 L2097.86 1201.74 L2097.28 1201.74 L2096.69 1201.74 L2096.1 1201.74 L2095.52 1201.74 L2094.93 1201.74 L2094.35 1201.74 L2093.76 1201.74 L2093.17 1201.74 L2092.59 1201.74 L2092 1201.74 L2091.41 1201.74 L2090.83 1201.74 L2090.24 1201.74 L2089.65 1201.74 L2089.07 1201.74 L2088.48 1201.74 L2087.89 1201.74 L2087.31 1201.74 L2086.72 1201.74 L2086.14 1201.74 L2085.55 1201.74 L2084.96 1201.74 L2084.38 1201.74 L2083.79 1201.74 L2083.2 1201.74 L2082.62 1201.74 L2082.03 1201.74 L2081.44 1201.74 L2080.86 1201.74 L2080.27 1201.74 L2079.68 1201.74 L2079.1 1201.74 L2078.51 1201.74 L2077.93 1201.74 L2077.34 1201.74 L2076.75 1201.74 L2076.17 1201.74 L2075.58 1201.74 L2074.99 1201.74 L2074.41 1201.74 L2073.82 1201.74 L2073.23 1201.74 L2072.65 1201.74 L2072.06 1201.74 L2071.48 1201.74 L2070.89 1201.74 L2070.3 1201.74 L2069.72 1201.74 L2069.13 1201.74 L2068.54 1201.74 L2067.96 1201.74 L2067.37 1201.74 L2066.78 1201.74 L2066.2 1201.74 L2065.61 1201.74 L2065.02 1201.74 L2064.44 1201.74 L2063.85 1201.74 L2063.27 1201.74 L2062.68 1201.74 L2062.09 1201.74 L2061.51 1201.74 L2060.92 1201.74 L2060.33 1201.74 L2059.75 1201.74 L2059.16 1201.74 L2058.57 1201.74 L2057.99 1201.74 L2057.4 1201.74 L2056.81 1201.74 L2056.23 1201.74 L2055.64 1201.74 L2055.06 1201.74 L2054.47 1201.74 L2053.88 1201.74 L2053.3 1201.74 L2052.71 1201.74 L2052.12 1201.74 L2051.54 1201.74 L2050.95 1201.74 L2050.36 1201.74 L2049.78 1201.74 L2049.19 1201.74 L2048.6 1201.74 L2048.02 1201.74 L2047.43 1201.74 L2046.85 1201.74 L2046.26 1201.74 L2045.67 1201.74 L2045.09 1201.74 L2044.5 1201.74 L2043.91 1201.74 L2043.33 1201.74 L2042.74 1201.74 L2042.15 1201.74 L2041.57 1201.74 L2040.98 1201.74 L2040.4 1201.74 L2039.81 1201.74 L2039.22 1201.74 L2038.64 1201.74 L2038.05 1201.74 L2037.46 1201.74 L2036.88 1201.74 L2036.29 1201.74 L2035.7 1201.74 L2035.12 1201.74 L2034.53 1201.74 L2033.94 1201.74 L2033.36 1201.74 L2032.77 1201.74 L2032.19 1201.74 L2031.6 1201.74 L2031.01 1201.74 L2030.43 1201.74 L2029.84 1201.74 L2029.25 1201.74 L2028.67 1201.74 L2028.08 1201.74 L2027.49 1201.74 L2026.91 1201.74 L2026.32 1201.74 L2025.73 1201.74 L2025.15 1201.74 L2024.56 1201.74 L2023.98 1201.74 L2023.39 1201.74 L2022.8 1201.74 L2022.22 1201.74 L2021.63 1201.74 L2021.04 1201.74 L2020.46 1201.74 L2019.87 1201.74 L2019.28 1201.74 L2018.7 1201.74 L2018.11 1201.74 L2017.53 1201.74 L2016.94 1201.74 L2016.35 1201.74 L2015.77 1201.74 L2015.18 1201.74 L2014.59 1201.74 L2014.01 1201.74 L2013.42 1201.74 L2012.83 1201.74 L2012.25 1201.74 L2011.66 1201.74 L2011.07 1201.74 L2010.49 1201.74 L2009.9 1201.74 L2009.32 1201.74 L2008.73 1201.74 L2008.14 1201.74 L2007.56 1201.74 L2006.97 1201.74 L2006.38 1201.74 L2005.8 1201.74 L2005.21 1201.74 L2004.62 1201.74 L2004.04 1201.74 L2003.45 1201.74 L2002.86 1201.74 L2002.28 1201.74 L2001.69 1201.74 L2001.11 1201.74 L2000.52 1201.74 L1999.93 1201.74 L1999.35 1201.74 L1998.76 1201.74 L1998.17 1201.74 L1997.59 1201.74 L1997 1201.74 L1996.41 1201.74 L1995.83 1201.74 L1995.24 1201.74 L1994.65 1201.74 L1994.07 1201.74 L1993.48 1201.74 L1992.9 1201.74 L1992.31 1201.74 L1991.72 1201.74 L1991.14 1201.74 L1990.55 1201.74 L1989.96 1201.74 L1989.38 1201.74 L1988.79 1201.74 L1988.2 1201.74 L1987.62 1201.74 L1987.03 1201.74 L1986.45 1201.74 L1985.86 1201.74 L1985.27 1201.74 L1984.69 1201.74 L1984.1 1201.74 L1983.51 1201.74 L1982.93 1201.74 L1982.34 1201.74 L1981.75 1201.74 L1981.17 1201.74 L1980.58 1201.74 L1979.99 1201.74 L1979.41 1201.74 L1978.82 1201.74 L1978.24 1201.74 L1977.65 1201.74 L1977.06 1201.74 L1976.48 1201.74 L1975.89 1201.74 L1975.3 1201.74 L1974.72 1201.74 L1974.13 1201.74 L1973.54 1201.74 L1972.96 1201.74 L1972.37 1201.74 L1971.78 1201.74 L1971.2 1201.74 L1970.61 1201.74 L1970.03 1201.74 L1969.44 1201.74 L1968.85 1201.74 L1968.27 1201.74 L1967.68 1201.74 L1967.09 1201.74 L1966.51 1201.74 L1965.92 1201.74 L1965.33 1201.74 L1964.75 1201.74 L1964.16 1201.74 L1963.58 1201.74 L1962.99 1201.74 L1962.4 1201.74 L1961.82 1201.74 L1961.23 1201.74 L1960.64 1201.74 L1960.06 1201.74 L1959.47 1201.74 L1958.88 1201.74 L1958.3 1201.74 L1957.71 1201.74 L1957.12 1201.74 L1956.54 1201.74 L1955.95 1201.74 L1955.37 1201.74 L1954.78 1201.74 L1954.19 1201.74 L1953.61 1201.74 L1953.02 1201.74 L1952.43 1201.74 L1951.85 1201.74 L1951.26 1201.74 L1950.67 1201.74 L1950.09 1201.74 L1949.5 1201.74 L1948.91 1201.74 L1948.33 1201.74 L1947.74 1201.74 L1947.16 1201.74 L1946.57 1201.74 L1945.98 1201.74 L1945.4 1201.74 L1944.81 1201.74 L1944.22 1201.74 L1943.64 1201.74 L1943.05 1201.74 L1942.46 1201.74 L1941.88 1201.74 L1941.29 1201.74 L1940.71 1201.74 L1940.12 1201.74 L1939.53 1201.74 L1938.95 1201.74 L1938.36 1201.74 L1937.77 1201.74 L1937.19 1201.74 L1936.6 1201.74 L1936.01 1201.74 L1935.43 1201.74 L1934.84 1201.74 L1934.25 1201.74 L1933.67 1201.74 L1933.08 1201.74 L1932.5 1201.74 L1931.91 1201.74 L1931.32 1201.74 L1930.74 1201.74 L1930.15 1201.74 L1929.56 1201.74 L1928.98 1201.74 L1928.39 1201.74 L1927.8 1201.74 L1927.22 1201.74 L1926.63 1201.74 L1926.04 1201.74 L1925.46 1201.74 L1924.87 1201.74 L1924.29 1201.74 L1923.7 1201.74 L1923.11 1201.74 L1922.53 1201.74 L1921.94 1201.74 L1921.35 1201.74 L1920.77 1201.74 L1920.18 1201.74 L1919.59 1201.74 L1919.01 1201.74 L1918.42 1201.74 L1917.83 1201.74 L1917.25 1201.74 L1916.66 1201.74 L1916.08 1201.74 L1915.49 1201.74 L1914.9 1201.74 L1914.32 1201.74 L1913.73 1201.74 L1913.14 1201.74 L1912.56 1201.74 L1911.97 1201.74 L1911.38 1201.74 L1910.8 1201.74 L1910.21 1201.74 L1909.63 1201.74 L1909.04 1201.74 L1908.45 1201.74 L1907.87 1201.74 L1907.28 1201.74 L1906.69 1201.74 L1906.11 1201.74 L1905.52 1201.74 L1904.93 1201.74 L1904.35 1201.74 L1903.76 1201.74 L1903.17 1201.74 L1902.59 1201.74 L1902 1201.74 L1901.42 1201.74 L1900.83 1201.74 L1900.24 1201.74 L1899.66 1201.74 L1899.07 1201.74 L1898.48 1201.74 L1897.9 1201.74 L1897.31 1201.74 L1896.72 1201.74 L1896.14 1201.74 L1895.55 1201.74 L1894.96 1201.74 L1894.38 1201.74 L1893.79 1201.74 L1893.21 1201.74 L1892.62 1201.74 L1892.03 1201.74 L1891.45 1201.74 L1890.86 1201.74 L1890.27 1201.74 L1889.69 1201.74 L1889.1 1201.74 L1888.51 1201.74 L1887.93 1201.74 L1887.34 1201.74 L1886.76 1201.74 L1886.17 1201.74 L1885.58 1201.74 L1885 1201.74 L1884.41 1201.74 L1883.82 1201.74 L1883.24 1201.74 L1882.65 1201.74 L1882.06 1201.74 L1881.48 1201.74 L1880.89 1201.74 L1880.3 1201.74 L1879.72 1201.74 L1879.13 1201.74 L1878.55 1201.74 L1877.96 1201.74 L1877.37 1201.74 L1876.79 1201.74 L1876.2 1201.74 L1875.61 1201.74 L1875.03 1201.74 L1874.44 1201.74 L1873.85 1201.74 L1873.27 1201.74 L1872.68 1201.74 L1872.09 1201.74 L1871.51 1201.74 L1870.92 1201.74 L1870.34 1201.74 L1869.75 1201.74 L1869.16 1201.74 L1868.58 1201.74 L1867.99 1201.74 L1867.4 1201.74 L1866.82 1201.74 L1866.23 1201.74 L1865.64 1201.74 L1865.06 1201.74 L1864.47 1201.74 L1863.88 1201.74 L1863.3 1201.74 L1862.71 1201.74 L1862.13 1201.74 L1861.54 1201.74 L1860.95 1201.74 L1860.37 1201.74 L1859.78 1201.74 L1859.19 1201.74 L1858.61 1201.74 L1858.02 1201.74 L1857.43 1201.74 L1856.85 1201.74 L1856.26 1201.74 L1855.68 1201.74 L1855.09 1201.74 L1854.5 1201.74 L1853.92 1201.74 L1853.33 1201.74 L1852.74 1201.74 L1852.16 1201.74 L1851.57 1201.74 L1850.98 1201.74 L1850.4 1201.74 L1849.81 1201.74 L1849.22 1201.74 L1848.64 1201.74 L1848.05 1201.74 L1847.47 1201.74 L1846.88 1201.74 L1846.29 1201.74 L1845.71 1201.74 L1845.12 1201.74 L1844.53 1201.74 L1843.95 1201.74 L1843.36 1201.74 L1842.77 1201.74 L1842.19 1201.74 L1841.6 1201.74 L1841.01 1201.74 L1840.43 1201.74 L1839.84 1201.74 L1839.26 1201.74 L1838.67 1201.74 L1838.08 1201.74 L1837.5 1201.74 L1836.91 1201.74 L1836.32 1201.74 L1835.74 1201.74 L1835.15 1201.74 L1834.56 1201.74 L1833.98 1201.74 L1833.39 1201.74 L1832.81 1201.74 L1832.22 1201.74 L1831.63 1201.74 L1831.05 1201.74 L1830.46 1201.74 L1829.87 1201.74 L1829.29 1201.74 L1828.7 1201.74 L1828.11 1201.74 L1827.53 1201.74 L1826.94 1201.74 L1826.35 1201.74 L1825.77 1201.74 L1825.18 1201.74 L1824.6 1201.74 L1824.01 1201.74 L1823.42 1201.74 L1822.84 1201.74 L1822.25 1201.74 L1821.66 1201.74 L1821.08 1201.74 L1820.49 1201.74 L1819.9 1201.74 L1819.32 1201.74 L1818.73 1201.74 L1818.14 1201.74 L1817.56 1201.74 L1816.97 1201.74 L1816.39 1201.74 L1815.8 1201.74 L1815.21 1201.74 L1814.63 1201.74 L1814.04 1201.74 L1813.45 1201.74 L1812.87 1201.74 L1812.28 1201.74 L1811.69 1201.74 L1811.11 1201.74 L1810.52 1201.74 L1809.94 1201.74 L1809.35 1201.74 L1808.76 1201.74 L1808.18 1201.74 L1807.59 1201.74 L1807 1201.74 L1806.42 1201.74 L1805.83 1201.74 L1805.24 1201.74 L1804.66 1201.74 L1804.07 1201.74 L1803.48 1201.74 L1802.9 1201.74 L1802.31 1201.74 L1801.73 1201.74 L1801.14 1201.74 L1800.55 1201.74 L1799.97 1201.74 L1799.38 1201.74 L1798.79 1201.74 L1798.21 1201.74 L1797.62 1201.74 L1797.03 1201.74 L1796.45 1201.74 L1795.86 1201.74 L1795.27 1201.74 L1794.69 1201.74 L1794.1 1201.74 L1793.52 1201.74 L1792.93 1201.74 L1792.34 1201.74 L1791.76 1201.74 L1791.17 1201.74 L1790.58 1201.74 L1790 1201.74 L1789.41 1201.74 L1788.82 1201.74 L1788.24 1201.74 L1787.65 1201.74 L1787.06 1201.74 L1786.48 1201.74 L1785.89 1201.74 L1785.31 1201.74 L1784.72 1201.74 L1784.13 1201.74 L1783.55 1201.74 L1782.96 1201.74 L1782.37 1201.74 L1781.79 1201.74 L1781.2 1201.74 L1780.61 1201.74 L1780.03 1201.74 L1779.44 1201.74 L1778.86 1201.74 L1778.27 1201.74 L1777.68 1201.74 L1777.1 1201.74 L1776.51 1201.74 L1775.92 1201.74 L1775.34 1201.74 L1774.75 1201.74 L1774.16 1201.74 L1773.58 1201.74 L1772.99 1201.74 L1772.4 1201.74 L1771.82 1201.74 L1771.23 1201.74 L1770.65 1201.74 L1770.06 1201.74 L1769.47 1201.74 L1768.89 1201.74 L1768.3 1201.74 L1767.71 1201.74 L1767.13 1201.74 L1766.54 1201.74 L1765.95 1201.74 L1765.37 1201.74 L1764.78 1201.74 L1764.19 1201.74 L1763.61 1201.74 L1763.02 1201.74 L1762.44 1201.74 L1761.85 1201.74 L1761.26 1201.74 L1760.68 1201.74 L1760.09 1201.74 L1759.5 1201.74 L1758.92 1201.74 L1758.33 1201.74 L1757.74 1201.74 L1757.16 1201.74 L1756.57 1201.74 L1755.99 1201.74 L1755.4 1201.74 L1754.81 1201.74 L1754.23 1201.74 L1753.64 1201.74 L1753.05 1201.74 L1752.47 1201.74 L1751.88 1201.74 L1751.29 1201.74 L1750.71 1201.74 L1750.12 1201.74 L1749.53 1201.74 L1748.95 1201.74 L1748.36 1201.74 L1747.78 1201.74 L1747.19 1201.74 L1746.6 1201.74 L1746.02 1201.74 L1745.43 1201.74 L1744.84 1201.74 L1744.26 1201.74 L1743.67 1201.74 L1743.08 1201.74 L1742.5 1201.74 L1741.91 1201.74 L1741.32 1201.74 L1740.74 1201.74 L1740.15 1201.74 L1739.57 1201.74 L1738.98 1201.74 L1738.39 1201.74 L1737.81 1201.74 L1737.22 1201.74 L1736.63 1201.74 L1736.05 1201.74 L1735.46 1201.74 L1734.87 1201.74 L1734.29 1201.74 L1733.7 1201.74 L1733.11 1201.74 L1732.53 1201.74 L1731.94 1201.74 L1731.36 1201.74 L1730.77 1201.74 L1730.18 1201.74 L1729.6 1201.74 L1729.01 1201.74 L1728.42 1201.74 L1727.84 1201.74 L1727.25 1201.74 L1726.66 1201.74 L1726.08 1201.74 L1725.49 1201.74 L1724.91 1201.74 L1724.32 1201.74 L1723.73 1201.74 L1723.15 1201.74 L1722.56 1201.74 L1721.97 1201.74 L1721.39 1201.74 L1720.8 1201.74 L1720.21 1201.74 L1719.63 1201.74 L1719.04 1201.74 L1718.45 1201.74 L1717.87 1201.74 L1717.28 1201.74 L1716.7 1201.74 L1716.11 1201.74 L1715.52 1201.74 L1714.94 1201.74 L1714.35 1201.74 L1713.76 1201.74 L1713.18 1201.74 L1712.59 1201.74 L1712 1201.74 L1711.42 1201.74 L1710.83 1201.74 L1710.24 1201.74 L1709.66 1201.74 L1709.07 1201.74 L1708.49 1201.74 L1707.9 1201.74 L1707.31 1201.74 L1706.73 1201.74 L1706.14 1201.74 L1705.55 1201.74 L1704.97 1201.74 L1704.38 1201.74 L1703.79 1201.74 L1703.21 1201.74 L1702.62 1201.74 L1702.04 1201.74 L1701.45 1201.74 L1700.86 1201.74 L1700.28 1201.74 L1699.69 1201.74 L1699.1 1201.74 L1698.52 1201.74 L1697.93 1201.74 L1697.34 1201.74 L1696.76 1201.74 L1696.17 1201.74 L1695.58 1201.74 L1695 1201.74 L1694.41 1201.74 L1693.83 1201.74 L1693.24 1201.74 L1692.65 1201.74 L1692.07 1201.74 L1691.48 1201.74 L1690.89 1201.74 L1690.31 1201.74 L1689.72 1201.74 L1689.13 1201.74 L1688.55 1201.74 L1687.96 1201.74 L1687.37 1201.74 L1686.79 1201.74 L1686.2 1201.74 L1685.62 1201.74 L1685.03 1201.74 L1684.44 1201.74 L1683.86 1201.74 L1683.27 1201.74 L1682.68 1201.74 L1682.1 1201.74 L1681.51 1201.74 L1680.92 1201.74 L1680.34 1201.74 L1679.75 1201.74 L1679.17 1201.74 L1678.58 1201.74 L1677.99 1201.74 L1677.41 1201.74 L1676.82 1201.74 L1676.23 1201.74 L1675.65 1201.74 L1675.06 1201.74 L1674.47 1201.74 L1673.89 1201.74 L1673.3 1201.74 L1672.71 1201.74 L1672.13 1201.74 L1671.54 1201.74 L1670.96 1201.74 L1670.37 1201.74 L1669.78 1201.74 L1669.2 1201.74 L1668.61 1201.74 L1668.02 1201.74 L1667.44 1201.74 L1666.85 1201.74 L1666.26 1201.74 L1665.68 1201.74 L1665.09 1201.74 L1664.5 1201.74 L1663.92 1201.74 L1663.33 1201.74 L1662.75 1201.74 L1662.16 1201.74 L1661.57 1201.74 L1660.99 1201.74 L1660.4 1201.74 L1659.81 1201.74 L1659.23 1201.74 L1658.64 1201.74 L1658.05 1201.74 L1657.47 1201.74 L1656.88 1201.74 L1656.29 1201.74 L1655.71 1201.74 L1655.12 1201.74 L1654.54 1201.74 L1653.95 1201.74 L1653.36 1201.74 L1652.78 1201.74 L1652.19 1201.74 L1651.6 1201.74 L1651.02 1201.74 L1650.43 1201.74 L1649.84 1201.74 L1649.26 1201.74 L1648.67 1201.74 L1648.09 1201.74 L1647.5 1201.74 L1646.91 1201.74 L1646.33 1201.74 L1645.74 1201.74 L1645.15 1201.74 L1644.57 1201.74 L1643.98 1201.74 L1643.39 1201.74 L1642.81 1201.74 L1642.22 1201.74 L1641.63 1201.74 L1641.05 1201.74 L1640.46 1201.74 L1639.88 1201.74 L1639.29 1201.74 L1638.7 1201.74 L1638.12 1201.74 L1637.53 1201.74 L1636.94 1201.74 L1636.36 1201.74 L1635.77 1201.74 L1635.18 1201.74 L1634.6 1201.74 L1634.01 1201.74 L1633.42 1201.74 L1632.84 1201.74 L1632.25 1201.74 L1631.67 1201.74 L1631.08 1201.74 L1630.49 1201.74 L1629.91 1201.74 L1629.32 1201.74 L1628.73 1201.74 L1628.15 1201.74 L1627.56 1201.74 L1626.97 1201.74 L1626.39 1201.74 L1625.8 1201.74 L1625.22 1201.74 L1624.63 1201.74 L1624.04 1201.74 L1623.46 1201.74 L1622.87 1201.74 L1622.28 1201.74 L1621.7 1201.74 L1621.11 1201.74 L1620.52 1201.74 L1619.94 1201.74 L1619.35 1201.74 L1618.76 1201.74 L1618.18 1201.74 L1617.59 1201.74 L1617.01 1201.74 L1616.42 1201.74 L1615.83 1201.74 L1615.25 1201.74 L1614.66 1201.74 L1614.07 1201.74 L1613.49 1201.74 L1612.9 1201.74 L1612.31 1201.74 L1611.73 1201.74 L1611.14 1201.74 L1610.55 1201.74 L1609.97 1201.74 L1609.38 1201.74 L1608.8 1201.74 L1608.21 1201.74 L1607.62 1201.74 L1607.04 1201.74 L1606.45 1201.74 L1605.86 1201.74 L1605.28 1201.74 L1604.69 1201.74 L1604.1 1201.74 L1603.52 1201.74 L1602.93 1201.74 L1602.34 1201.74 L1601.76 1201.74 L1601.17 1201.74 L1600.59 1201.74 L1600 1201.74 L1599.41 1201.74 L1598.83 1201.74 L1598.24 1201.74 L1597.65 1201.74 L1597.07 1201.74 L1596.48 1201.74 L1595.89 1201.74 L1595.31 1201.74 L1594.72 1201.74 L1594.14 1201.74 L1593.55 1201.74 L1592.96 1201.74 L1592.38 1201.74 L1591.79 1201.74 L1591.2 1201.74 L1590.62 1201.74 L1590.03 1201.74 L1589.44 1201.74 L1588.86 1201.74 L1588.27 1201.74 L1587.68 1201.74 L1587.1 1201.74 L1586.51 1201.74 L1585.93 1201.74 L1585.34 1201.74 L1584.75 1201.74 L1584.17 1201.74 L1583.58 1201.74 L1582.99 1201.74 L1582.41 1201.74 L1581.82 1201.74 L1581.23 1201.74 L1580.65 1201.74 L1580.06 1201.74 L1579.47 1201.74 L1578.89 1201.74 L1578.3 1201.74 L1577.72 1201.74 L1577.13 1201.74 L1576.54 1201.74 L1575.96 1201.74 L1575.37 1201.74 L1574.78 1201.74 L1574.2 1201.74 L1573.61 1201.74 L1573.02 1201.74 L1572.44 1201.74 L1571.85 1201.74 L1571.27 1201.74 L1570.68 1201.74 L1570.09 1201.74 L1569.51 1201.74 L1568.92 1201.74 L1568.33 1201.74 L1567.75 1201.74 L1567.16 1201.74 L1566.57 1201.74 L1565.99 1201.74 L1565.4 1201.74 L1564.81 1201.74 L1564.23 1201.74 L1563.64 1201.74 L1563.06 1201.74 L1562.47 1201.74 L1561.88 1201.74 L1561.3 1201.74 L1560.71 1201.74 L1560.12 1201.74 L1559.54 1201.74 L1558.95 1201.74 L1558.36 1201.74 L1557.78 1201.74 L1557.19 1201.74 L1556.6 1201.74 L1556.02 1201.74 L1555.43 1201.74 L1554.85 1201.74 L1554.26 1201.74 L1553.67 1201.74 L1553.09 1201.74 L1552.5 1201.74 L1551.91 1201.74 L1551.33 1201.74 L1550.74 1201.74 L1550.15 1201.74 L1549.57 1201.74 L1548.98 1201.74 L1548.4 1201.74 L1547.81 1201.74 L1547.22 1201.74 L1546.64 1201.74 L1546.05 1201.74 L1545.46 1201.74 L1544.88 1201.74 L1544.29 1201.74 L1543.7 1201.74 L1543.12 1201.74 L1542.53 1201.74 L1541.94 1201.74 L1541.36 1201.74 L1540.77 1201.74 L1540.19 1201.74 L1539.6 1201.74 L1539.01 1201.74 L1538.43 1201.74 L1537.84 1201.74 L1537.25 1201.74 L1536.67 1201.74 L1536.08 1201.74 L1535.49 1201.74 L1534.91 1201.74 L1534.32 1201.74 L1533.73 1201.74 L1533.15 1201.74 L1532.56 1201.74 L1531.98 1201.74 L1531.39 1201.74 L1530.8 1201.74 L1530.22 1201.74 L1529.63 1201.74 L1529.04 1201.74 L1528.46 1201.74 L1527.87 1201.74 L1527.28 1201.74 L1526.7 1201.74 L1526.11 1201.74 L1525.52 1201.74 L1524.94 1201.74 L1524.35 1201.74 L1523.77 1201.74 L1523.18 1201.74 L1522.59 1201.74 L1522.01 1201.74 L1521.42 1201.74 L1520.83 1201.74 L1520.25 1201.74 L1519.66 1201.74 L1519.07 1201.74 L1518.49 1201.74 L1517.9 1201.74 L1517.32 1201.74 L1516.73 1201.74 L1516.14 1201.74 L1515.56 1201.74 L1514.97 1201.74 L1514.38 1201.74 L1513.8 1201.74 L1513.21 1201.74 L1512.62 1201.74 L1512.04 1201.74 L1511.45 1201.74 L1510.86 1201.74 L1510.28 1201.74 L1509.69 1201.74 L1509.11 1201.74 L1508.52 1201.74 L1507.93 1201.74 L1507.35 1201.74 L1506.76 1201.74 L1506.17 1201.74 L1505.59 1201.74 L1505 1201.74 L1504.41 1201.74 L1503.83 1201.74 L1503.24 1201.74 L1502.65 1201.74 L1502.07 1201.74 L1501.48 1201.74 L1500.9 1201.74 L1500.31 1201.74 L1499.72 1201.74 L1499.14 1201.74 L1498.55 1201.74 L1497.96 1201.74 L1497.38 1201.74 L1496.79 1201.74 L1496.2 1201.74 L1495.62 1201.74 L1495.03 1201.74 L1494.45 1201.74 L1493.86 1201.74 L1493.27 1201.74 L1492.69 1201.74 L1492.1 1201.74 L1491.51 1201.74 L1490.93 1201.74 L1490.34 1201.74 L1489.75 1201.74 L1489.17 1201.74 L1488.58 1201.74 L1487.99 1201.74 L1487.41 1201.74 L1486.82 1201.74 L1486.24 1201.74 L1485.65 1201.74 L1485.06 1201.74 L1484.48 1201.74 L1483.89 1201.74 L1483.3 1201.74 L1482.72 1201.74 L1482.13 1201.74 L1481.54 1201.74 L1480.96 1201.74 L1480.37 1201.74 L1479.78 1201.74 L1479.2 1201.74 L1478.61 1201.74 L1478.03 1201.74 L1477.44 1201.74 L1476.85 1201.74 L1476.27 1201.74 L1475.68 1201.74 L1475.09 1201.74 L1474.51 1201.74 L1473.92 1201.74 L1473.33 1201.74 L1472.75 1201.74 L1472.16 1201.74 L1471.57 1201.74 L1470.99 1201.74 L1470.4 1201.74 L1469.82 1201.74 L1469.23 1201.74 L1468.64 1201.74 L1468.06 1201.74 L1467.47 1201.74 L1466.88 1201.74 L1466.3 1201.74 L1465.71 1201.74 L1465.12 1201.74 L1464.54 1201.74 L1463.95 1201.74 L1463.37 1201.74 L1462.78 1201.74 L1462.19 1201.74 L1461.61 1201.74 L1461.02 1201.74 L1460.43 1201.74 L1459.85 1201.74 L1459.26 1201.74 L1458.67 1201.74 L1458.09 1201.74 L1457.5 1201.74 L1456.91 1201.74 L1456.33 1201.74 L1455.74 1201.74 L1455.16 1201.74 L1454.57 1201.74 L1453.98 1201.74 L1453.4 1201.74 L1452.81 1201.74 L1452.22 1201.74 L1451.64 1201.74 L1451.05 1201.74 L1450.46 1201.74 L1449.88 1201.74 L1449.29 1201.74 L1448.7 1201.74 L1448.12 1201.74 L1447.53 1201.74 L1446.95 1201.74 L1446.36 1201.74 L1445.77 1201.74 L1445.19 1201.74 L1444.6 1201.74 L1444.01 1201.74 L1443.43 1201.74 L1442.84 1201.74 L1442.25 1201.74 L1441.67 1201.74 L1441.08 1201.74 L1440.5 1201.74 L1439.91 1201.74 L1439.32 1201.74 L1438.74 1201.74 L1438.15 1201.74 L1437.56 1201.74 L1436.98 1201.74 L1436.39 1201.74 L1435.8 1201.74 L1435.22 1201.74 L1434.63 1201.74 L1434.04 1201.74 L1433.46 1201.74 L1432.87 1201.74 L1432.29 1201.74 L1431.7 1201.74 L1431.11 1201.74 L1430.53 1201.74 L1429.94 1201.74 L1429.35 1201.74 L1428.77 1201.74 L1428.18 1201.74 L1427.59 1201.74 L1427.01 1201.74 L1426.42 1201.74 L1425.83 1201.74 L1425.25 1201.74 L1424.66 1201.74 L1424.08 1201.74 L1423.49 1201.74 L1422.9 1201.74 L1422.32 1201.74 L1421.73 1201.74 L1421.14 1201.74 L1420.56 1201.74 L1419.97 1201.74 L1419.38 1201.74 L1418.8 1201.74 L1418.21 1201.74 L1417.63 1201.74 L1417.04 1201.74 L1416.45 1201.74 L1415.87 1201.74 L1415.28 1201.74 L1414.69 1201.74 L1414.11 1201.74 L1413.52 1201.74 L1412.93 1201.74 L1412.35 1201.74 L1411.76 1201.74 L1411.17 1201.74 L1410.59 1201.74 L1410 1201.74 L1409.42 1201.74 L1408.83 1201.74 L1408.24 1201.74 L1407.66 1201.74 L1407.07 1201.74 L1406.48 1201.74 L1405.9 1201.74 L1405.31 1201.74 L1404.72 1201.74 L1404.14 1201.74 L1403.55 1201.74 L1402.96 1201.74 L1402.38 1201.74 L1401.79 1201.74 L1401.21 1201.74 L1400.62 1201.74 L1400.03 1201.74 L1399.45 1201.74 L1398.86 1201.74 L1398.27 1201.74 L1397.69 1201.74 L1397.1 1201.74 L1396.51 1201.74 L1395.93 1201.74 L1395.34 1201.74 L1394.75 1201.74 L1394.17 1201.74 L1393.58 1201.74 L1393 1201.74 L1392.41 1201.74 L1391.82 1201.74 L1391.24 1201.74 L1390.65 1201.74 L1390.06 1201.74 L1389.48 1201.74 L1388.89 1201.74 L1388.3 1201.74 L1387.72 1201.74 L1387.13 1201.74 L1386.55 1201.74 L1385.96 1201.74 L1385.37 1201.74 L1384.79 1201.74 L1384.2 1201.74 L1383.61 1201.74 L1383.03 1201.74 L1382.44 1201.74 L1381.85 1201.74 L1381.27 1201.74 L1380.68 1201.74 L1380.09 1201.74 L1379.51 1201.74 L1378.92 1201.74 L1378.34 1201.74 L1377.75 1201.74 L1377.16 1201.74 L1376.58 1201.74 L1375.99 1201.74 L1375.4 1201.74 L1374.82 1201.74 L1374.23 1201.74 L1373.64 1201.74 L1373.06 1201.74 L1372.47 1201.74 L1371.88 1201.74 L1371.3 1201.74 L1370.71 1201.74 L1370.13 1201.74 L1369.54 1201.74 L1368.95 1201.74 L1368.37 1201.74 L1367.78 1201.74 L1367.19 1201.74 L1366.61 1201.74 L1366.02 1201.74 L1365.43 1201.74 L1364.85 1201.74 L1364.26 1201.74 L1363.68 1201.74 L1363.09 1201.74 L1362.5 1201.74 L1361.92 1201.74 L1361.33 1201.74 L1360.74 1201.74 L1360.16 1201.74 L1359.57 1201.74 L1358.98 1201.74 L1358.4 1201.74 L1357.81 1201.74 L1357.22 1201.74 L1356.64 1201.74 L1356.05 1201.74 L1355.47 1201.74 L1354.88 1201.74 L1354.29 1201.74 L1353.71 1201.74 L1353.12 1201.74 L1352.53 1201.74 L1351.95 1201.74 L1351.36 1201.74 L1350.77 1201.74 L1350.19 1201.74 L1349.6 1201.74 L1349.01 1201.74 L1348.43 1201.74 L1347.84 1201.74 L1347.26 1201.74 L1346.67 1201.74 L1346.08 1201.74 L1345.5 1201.74 L1344.91 1201.74 L1344.32 1201.74 L1343.74 1201.74 L1343.15 1201.74 L1342.56 1201.74 L1341.98 1201.74 L1341.39 1201.74 L1340.8 1201.74 L1340.22 1201.74 L1339.63 1201.74 L1339.05 1201.74 L1338.46 1201.74 L1337.87 1201.74 L1337.29 1201.74 L1336.7 1201.74 L1336.11 1201.74 L1335.53 1201.74 L1334.94 1201.74 L1334.35 1201.74 L1333.77 1201.74 L1333.18 1201.74 L1332.6 1201.74 L1332.01 1201.74 L1331.42 1201.74 L1330.84 1201.74 L1330.25 1201.74 L1329.66 1201.74 L1329.08 1201.74 L1328.49 1201.74 L1327.9 1201.74 L1327.32 1201.74 L1326.73 1201.74 L1326.14 1201.74 L1325.56 1201.74 L1324.97 1201.74 L1324.39 1201.74 L1323.8 1201.74 L1323.21 1201.74 L1322.63 1201.74 L1322.04 1201.74 L1321.45 1201.74 L1320.87 1201.74 L1320.28 1201.74 L1319.69 1201.74 L1319.11 1201.74 L1318.52 1201.74 L1317.93 1201.74 L1317.35 1201.74 L1316.76 1201.74 L1316.18 1201.74 L1315.59 1201.74 L1315 1201.74 L1314.42 1201.74 L1313.83 1201.74 L1313.24 1201.74 L1312.66 1201.74 L1312.07 1201.74 L1311.48 1201.74 L1310.9 1201.74 L1310.31 1201.74 L1309.73 1201.74 L1309.14 1201.74 L1308.55 1201.74 L1307.97 1201.74 L1307.38 1201.74 L1306.79 1201.74 L1306.21 1201.74 L1305.62 1201.74 L1305.03 1201.74 L1304.45 1201.74 L1303.86 1201.74 L1303.27 1201.74 L1302.69 1201.74 L1302.1 1201.74 L1301.52 1201.74 L1300.93 1201.74 L1300.34 1201.74 L1299.76 1201.74 L1299.17 1201.74 L1298.58 1201.74 L1298 1201.74 L1297.41 1201.74 L1296.82 1201.74 L1296.24 1201.74 L1295.65 1201.74 L1295.06 1201.74 L1294.48 1201.74 L1293.89 1201.74 L1293.31 1201.74 L1292.72 1201.74 L1292.13 1201.74 L1291.55 1201.74 L1290.96 1201.74 L1290.37 1201.74 L1289.79 1201.74 L1289.2 1201.74 L1288.61 1201.74 L1288.03 1201.74 L1287.44 1201.74 L1286.86 1201.74 L1286.27 1201.74 L1285.68 1201.74 L1285.1 1201.74 L1284.51 1201.74 L1283.92 1201.74 L1283.34 1201.74 L1282.75 1201.74 L1282.16 1201.74 L1281.58 1201.74 L1280.99 1201.74 L1280.4 1201.74 L1279.82 1201.74 L1279.23 1201.74 L1278.65 1201.74 L1278.06 1201.74 L1277.47 1201.74 L1276.89 1201.74 L1276.3 1201.74 L1275.71 1201.74 L1275.13 1201.74 L1274.54 1201.74 L1273.95 1201.74 L1273.37 1201.74 L1272.78 1201.74 L1272.19 1201.74 L1271.61 1201.74 L1271.02 1201.74 L1270.44 1201.74 L1269.85 1201.74 L1269.26 1201.74 L1268.68 1201.74 L1268.09 1201.74 L1267.5 1201.74 L1266.92 1201.74 L1266.33 1201.74 L1265.74 1201.74 L1265.16 1201.74 L1264.57 1201.74 L1263.98 1201.74 L1263.4 1201.74 L1262.81 1201.74 L1262.23 1201.74 L1261.64 1201.74 L1261.05 1201.74 L1260.47 1201.74 L1259.88 1201.74 L1259.29 1201.74 L1258.71 1201.74 L1258.12 1201.74 L1257.53 1201.74 L1256.95 1201.74 L1256.36 1201.74 L1255.78 1201.74 L1255.19 1201.74 L1254.6 1201.74 L1254.02 1201.74 L1253.43 1201.74 L1252.84 1201.74 L1252.26 1201.74 L1251.67 1201.74 L1251.08 1201.74 L1250.5 1201.74 L1249.91 1201.74 L1249.32 1201.74 L1248.74 1201.74 L1248.15 1201.74 L1247.57 1201.74 L1246.98 1201.74 L1246.39 1201.74 L1245.81 1201.74 L1245.22 1201.74 L1244.63 1201.74 L1244.05 1201.74 L1243.46 1201.74 L1242.87 1201.74 L1242.29 1201.74 L1241.7 1201.74 L1241.11 1201.74 L1240.53 1201.74 L1239.94 1201.74 L1239.36 1201.74 L1238.77 1201.74 L1238.18 1201.74 L1237.6 1201.74 L1237.01 1201.74 L1236.42 1201.74 L1235.84 1201.74 L1235.25 1201.74 L1234.66 1201.74 L1234.08 1201.74 L1233.49 1201.74 L1232.91 1201.74 L1232.32 1201.74 L1231.73 1201.74 L1231.15 1201.74 L1230.56 1201.74 L1229.97 1201.74 L1229.39 1201.74 L1228.8 1201.74 L1228.21 1201.74 L1227.63 1201.74 L1227.04 1201.74 L1226.45 1201.74 L1225.87 1201.74 L1225.28 1201.74 L1224.7 1201.74 L1224.11 1201.74 L1223.52 1201.74 L1222.94 1201.74 L1222.35 1201.74 L1221.76 1201.74 L1221.18 1201.74 L1220.59 1201.74 L1220 1201.74 L1219.42 1201.74 L1218.83 1201.74 L1218.24 1201.74 L1217.66 1201.74 L1217.07 1201.74 L1216.49 1201.74 L1215.9 1201.74 L1215.31 1201.74 L1214.73 1201.74 L1214.14 1201.74 L1213.55 1201.74 L1212.97 1201.74 L1212.38 1201.74 L1211.79 1201.74 L1211.21 1201.74 L1210.62 1201.74 L1210.03 1201.74 L1209.45 1201.74 L1208.86 1201.74 L1208.28 1201.74 L1207.69 1201.74 L1207.1 1201.74 L1206.52 1201.74 L1205.93 1201.74 L1205.34 1201.74 L1204.76 1201.74 L1204.17 1201.74 L1203.58 1201.74 L1203 1201.74 L1202.41 1201.74 L1201.83 1201.74 L1201.24 1201.74 L1200.65 1201.74 L1200.07 1201.74 L1199.48 1201.74 L1198.89 1201.74 L1198.31 1201.74 L1197.72 1201.74 L1197.13 1201.74 L1196.55 1201.74 L1195.96 1201.74 L1195.37 1201.74 L1194.79 1201.74 L1194.2 1201.74 L1193.62 1201.74 L1193.03 1201.74 L1192.44 1201.74 L1191.86 1201.74 L1191.27 1201.74 L1190.68 1201.74 L1190.1 1201.74 L1189.51 1201.74 L1188.92 1201.74 L1188.34 1201.74 L1187.75 1201.74 L1187.16 1201.74 L1186.58 1201.74 L1185.99 1201.74 L1185.41 1201.74 L1184.82 1201.74 L1184.23 1201.74 L1183.65 1201.74 L1183.06 1201.74 L1182.47 1201.74 L1181.89 1201.74 L1181.3 1201.74 L1180.71 1201.74 L1180.13 1201.74 L1179.54 1201.74 L1178.96 1201.74 L1178.37 1201.74 L1177.78 1201.74 L1177.2 1201.74 L1176.61 1201.74 L1176.02 1201.74 L1175.44 1201.74 L1174.85 1201.74 L1174.26 1201.74 L1173.68 1201.74 L1173.09 1201.74 L1172.5 1201.74 L1171.92 1201.74 L1171.33 1201.74 L1170.75 1201.74 L1170.16 1201.74 L1169.57 1201.74 L1168.99 1201.74 L1168.4 1201.74 L1167.81 1201.74 L1167.23 1201.74 L1166.64 1201.74 L1166.05 1201.74 L1165.47 1201.74 L1164.88 1201.74 L1164.29 1201.74 L1163.71 1201.74 L1163.12 1201.74 L1162.54 1201.74 L1161.95 1201.74 L1161.36 1201.74 L1160.78 1201.74 L1160.19 1201.74 L1159.6 1201.74 L1159.02 1201.74 L1158.43 1201.74 L1157.84 1201.74 L1157.26 1201.74 L1156.67 1201.74 L1156.09 1201.74 L1155.5 1201.74 L1154.91 1201.74 L1154.33 1201.74 L1153.74 1201.74 L1153.15 1201.74 L1152.57 1201.74 L1151.98 1201.74 L1151.39 1201.74 L1150.81 1201.74 L1150.22 1201.74 L1149.63 1201.74 L1149.05 1201.74 L1148.46 1201.74 L1147.88 1201.74 L1147.29 1201.74 L1146.7 1201.74 L1146.12 1201.74 L1145.53 1201.74 L1144.94 1201.74 L1144.36 1201.74 L1143.77 1201.74 L1143.18 1201.74 L1142.6 1201.74 L1142.01 1201.74 L1141.42 1201.74 L1140.84 1201.74 L1140.25 1201.74 L1139.67 1201.74 L1139.08 1201.74 L1138.49 1201.74 L1137.91 1201.74 L1137.32 1201.74 L1136.73 1201.74 L1136.15 1201.74 L1135.56 1201.74 L1134.97 1201.74 L1134.39 1201.74 L1133.8 1201.74 L1133.21 1201.74 L1132.63 1201.74 L1132.04 1201.74 L1131.46 1201.74 L1130.87 1201.74 L1130.28 1201.74 L1129.7 1201.74 L1129.11 1201.74 L1128.52 1201.74 L1127.94 1201.74 L1127.35 1201.74 L1126.76 1201.74 L1126.18 1201.74 L1125.59 1201.74 L1125.01 1201.74 L1124.42 1201.74 L1123.83 1201.74 L1123.25 1201.74 L1122.66 1201.74 L1122.07 1201.74 L1121.49 1201.74 L1120.9 1201.74 L1120.31 1201.74 L1119.73 1201.74 L1119.14 1201.74 L1118.55 1201.74 L1117.97 1201.74 L1117.38 1201.74 L1116.8 1201.74 L1116.21 1201.74 L1115.62 1201.74 L1115.04 1201.74 L1114.45 1201.74 L1113.86 1201.74 L1113.28 1201.74 L1112.69 1201.74 L1112.1 1201.74 L1111.52 1201.74 L1110.93 1201.74 L1110.34 1201.74 L1109.76 1201.74 L1109.17 1201.74 L1108.59 1201.74 L1108 1201.74 L1107.41 1201.74 L1106.83 1201.74 L1106.24 1201.74 L1105.65 1201.74 L1105.07 1201.74 L1104.48 1201.74 L1103.89 1201.74 L1103.31 1201.74 L1102.72 1201.74 L1102.14 1201.74 L1101.55 1201.74 L1100.96 1201.74 L1100.38 1201.74 L1099.79 1201.74 L1099.2 1201.74 L1098.62 1201.74 L1098.03 1201.74 L1097.44 1201.74 L1096.86 1201.74 L1096.27 1201.74 L1095.68 1201.74 L1095.1 1201.74 L1094.51 1201.74 L1093.93 1201.74 L1093.34 1201.74 L1092.75 1201.74 L1092.17 1201.74 L1091.58 1201.74 L1090.99 1201.74 L1090.41 1201.74 L1089.82 1201.74 L1089.23 1201.74 L1088.65 1201.74 L1088.06 1201.74 L1087.47 1201.74 L1086.89 1201.74 L1086.3 1201.74 L1085.72 1201.74 L1085.13 1201.74 L1084.54 1201.74 L1083.96 1201.74 L1083.37 1201.74 L1082.78 1201.74 L1082.2 1201.74 L1081.61 1201.74 L1081.02 1201.74 L1080.44 1201.74 L1079.85 1201.74 L1079.26 1201.74 L1078.68 1201.74 L1078.09 1201.74 L1077.51 1201.74 L1076.92 1201.74 L1076.33 1201.74 L1075.75 1201.74 L1075.16 1201.74 L1074.57 1201.74 L1073.99 1201.74 L1073.4 1201.74 L1072.81 1201.74 L1072.23 1201.74 L1071.64 1201.74 L1071.06 1201.74 L1070.47 1201.74 L1069.88 1201.74 L1069.3 1201.74 L1068.71 1201.74 L1068.12 1201.74 L1067.54 1201.74 L1066.95 1201.74 L1066.36 1201.74 L1065.78 1201.74 L1065.19 1201.74 L1064.6 1201.74 L1064.02 1201.74 L1063.43 1201.74 L1062.85 1201.74 L1062.26 1201.74 L1061.67 1201.74 L1061.09 1201.74 L1060.5 1201.74 L1059.91 1201.74 L1059.33 1201.74 L1058.74 1201.74 L1058.15 1201.74 L1057.57 1201.74 L1056.98 1201.74 L1056.39 1201.74 L1055.81 1201.74 L1055.22 1201.74 L1054.64 1201.74 L1054.05 1201.74 L1053.46 1201.74 L1052.88 1201.74 L1052.29 1201.74 L1051.7 1201.74 L1051.12 1201.74 L1050.53 1201.74 L1049.94 1201.74 L1049.36 1201.74 L1048.77 1201.74 L1048.19 1201.74 L1047.6 1201.74 L1047.01 1201.74 L1046.43 1201.74 L1045.84 1201.74 L1045.25 1201.74 L1044.67 1201.74 L1044.08 1201.74 L1043.49 1201.74 L1042.91 1201.74 L1042.32 1201.74 L1041.73 1201.74 L1041.15 1201.74 L1040.56 1201.74 L1039.98 1201.74 L1039.39 1201.74 L1038.8 1201.74 L1038.22 1201.74 L1037.63 1201.74 L1037.04 1201.74 L1036.46 1201.74 L1035.87 1201.74 L1035.28 1201.74 L1034.7 1201.74 L1034.11 1201.74 L1033.52 1201.74 L1032.94 1201.74 L1032.35 1201.74 L1031.77 1201.74 L1031.18 1201.74 L1030.59 1201.74 L1030.01 1201.74 L1029.42 1201.74 L1028.83 1201.74 L1028.25 1201.74 L1027.66 1201.74 L1027.07 1201.74 L1026.49 1201.74 L1025.9 1201.74 L1025.32 1201.74 L1024.73 1201.74 L1024.14 1201.74 L1023.56 1201.74 L1022.97 1201.74 L1022.38 1201.74 L1021.8 1201.74 L1021.21 1201.74 L1020.62 1201.74 L1020.04 1201.74 L1019.45 1201.74 L1018.86 1201.74 L1018.28 1201.74 L1017.69 1201.74 L1017.11 1201.74 L1016.52 1201.74 L1015.93 1201.74 L1015.35 1201.74 L1014.76 1201.74 L1014.17 1201.74 L1013.59 1201.74 L1013 1201.74 L1012.41 1201.74 L1011.83 1201.74 L1011.24 1201.74 L1010.65 1201.74 L1010.07 1201.74 L1009.48 1201.74 L1008.9 1201.74 L1008.31 1201.74 L1007.72 1201.74 L1007.14 1201.74 L1006.55 1201.74 L1005.96 1201.74 L1005.38 1201.74 L1004.79 1201.74 L1004.2 1201.74 L1003.62 1201.74 L1003.03 1201.74 L1002.44 1201.74 L1001.86 1201.74 L1001.27 1201.74 L1000.69 1201.74 L1000.1 1201.74 L999.513 1201.74 L998.926 1201.74 L998.34 1201.74 L997.754 1201.74 L997.167 1201.74 L996.581 1201.74 L995.994 1201.74 L995.408 1201.74 L994.822 1201.74 L994.235 1201.74 L993.649 1201.74 L993.062 1201.74 L992.476 1201.74 L991.889 1201.74 L991.303 1201.74 L990.717 1201.74 L990.13 1201.74 L989.544 1201.74 L988.957 1201.74 L988.371 1201.74 L987.785 1201.74 L987.198 1201.74 L986.612 1201.74 L986.025 1201.74  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1201.84 986.612,1201.84 987.198,1201.84 987.785,1201.84 988.371,1201.84 988.957,1201.84 989.544,1201.84 990.13,1201.84 990.717,1201.84 991.303,1201.84 991.889,1201.84 992.476,1201.84 993.062,1201.84 993.649,1201.84 994.235,1201.84 994.822,1201.84 995.408,1201.84 995.994,1201.84 996.581,1201.84 997.167,1201.84 997.754,1201.84 998.34,1201.84 998.926,1201.84 999.513,1201.84 1000.1,1201.84 1000.69,1201.84 1001.27,1201.84 1001.86,1201.84 1002.44,1201.84 1003.03,1201.84 1003.62,1201.84 1004.2,1201.84 1004.79,1201.84 1005.38,1201.84 1005.96,1201.84 1006.55,1201.84 1007.14,1201.84 1007.72,1201.84 1008.31,1201.84 1008.9,1201.84 1009.48,1201.84 1010.07,1201.84 1010.65,1201.84 1011.24,1201.84 1011.83,1201.84 1012.41,1201.84 1013,1201.84 1013.59,1201.84 1014.17,1201.84 1014.76,1201.84 1015.35,1201.84 1015.93,1201.84 1016.52,1201.84 1017.11,1201.84 1017.69,1201.84 1018.28,1201.84 1018.86,1201.84 1019.45,1201.84 1020.04,1201.84 1020.62,1201.84 1021.21,1201.84 1021.8,1201.84 1022.38,1201.84 1022.97,1201.84 1023.56,1201.84 1024.14,1201.84 1024.73,1201.84 1025.32,1201.84 1025.9,1201.84 1026.49,1201.84 1027.07,1201.84 1027.66,1201.84 1028.25,1201.84 1028.83,1201.84 1029.42,1201.84 1030.01,1201.84 1030.59,1201.84 1031.18,1201.84 1031.77,1201.84 1032.35,1201.84 1032.94,1201.84 1033.52,1201.84 1034.11,1201.84 1034.7,1201.84 1035.28,1201.84 1035.87,1201.84 1036.46,1201.84 1037.04,1201.84 1037.63,1201.84 1038.22,1201.84 1038.8,1201.84 1039.39,1201.84 1039.98,1201.84 1040.56,1201.84 1041.15,1201.84 1041.73,1201.84 1042.32,1201.84 1042.91,1201.84 1043.49,1201.84 1044.08,1201.84 1044.67,1201.84 1045.25,1201.84 1045.84,1201.84 1046.43,1201.84 1047.01,1201.84 1047.6,1201.84 1048.19,1201.84 1048.77,1201.84 1049.36,1201.84 1049.94,1201.84 1050.53,1201.84 1051.12,1201.84 1051.7,1201.84 1052.29,1201.84 1052.88,1201.84 1053.46,1201.84 1054.05,1201.84 1054.64,1201.84 1055.22,1201.84 1055.81,1201.84 1056.39,1201.84 1056.98,1201.84 1057.57,1201.84 1058.15,1201.84 1058.74,1201.84 1059.33,1201.84 1059.91,1201.84 1060.5,1201.84 1061.09,1201.84 1061.67,1201.84 1062.26,1201.84 1062.85,1201.84 1063.43,1201.84 1064.02,1201.84 1064.6,1201.84 1065.19,1201.84 1065.78,1201.84 1066.36,1201.84 1066.95,1201.84 1067.54,1201.84 1068.12,1201.84 1068.71,1201.84 1069.3,1201.84 1069.88,1201.84 1070.47,1201.84 1071.06,1201.84 1071.64,1201.84 1072.23,1201.84 1072.81,1201.84 1073.4,1201.84 1073.99,1201.84 1074.57,1201.84 1075.16,1201.84 1075.75,1201.84 1076.33,1201.84 1076.92,1201.84 1077.51,1201.84 1078.09,1201.84 1078.68,1201.84 1079.26,1201.84 1079.85,1201.84 1080.44,1201.84 1081.02,1201.84 1081.61,1201.84 1082.2,1201.84 1082.78,1201.84 1083.37,1201.84 1083.96,1201.84 1084.54,1201.84 1085.13,1201.84 1085.72,1201.84 1086.3,1201.84 1086.89,1201.84 1087.47,1201.84 1088.06,1201.84 1088.65,1201.84 1089.23,1201.84 1089.82,1201.84 1090.41,1201.84 1090.99,1201.84 1091.58,1201.84 1092.17,1201.84 1092.75,1201.84 1093.34,1201.84 1093.93,1201.84 1094.51,1201.84 1095.1,1201.84 1095.68,1201.84 1096.27,1201.84 1096.86,1201.84 1097.44,1201.84 1098.03,1201.84 1098.62,1201.84 1099.2,1201.84 1099.79,1201.84 1100.38,1201.84 1100.96,1201.84 1101.55,1201.84 1102.14,1201.84 1102.72,1201.84 1103.31,1201.84 1103.89,1201.84 1104.48,1201.84 1105.07,1201.84 1105.65,1201.84 1106.24,1201.84 1106.83,1201.84 1107.41,1201.84 1108,1201.84 1108.59,1201.84 1109.17,1201.84 1109.76,1201.84 1110.34,1201.84 1110.93,1201.84 1111.52,1201.84 1112.1,1201.84 1112.69,1201.84 1113.28,1201.84 1113.86,1201.84 1114.45,1201.84 1115.04,1201.84 1115.62,1201.84 1116.21,1201.84 1116.8,1201.84 1117.38,1201.84 1117.97,1201.84 1118.55,1201.84 1119.14,1201.84 1119.73,1201.84 1120.31,1201.84 1120.9,1201.84 1121.49,1201.84 1122.07,1201.84 1122.66,1201.84 1123.25,1201.84 1123.83,1201.84 1124.42,1201.84 1125.01,1201.84 1125.59,1201.84 1126.18,1201.84 1126.76,1201.84 1127.35,1201.84 1127.94,1201.84 1128.52,1201.84 1129.11,1201.84 1129.7,1201.84 1130.28,1201.84 1130.87,1201.84 1131.46,1201.84 1132.04,1201.84 1132.63,1201.84 1133.21,1201.84 1133.8,1201.84 1134.39,1201.84 1134.97,1201.84 1135.56,1201.84 1136.15,1201.84 1136.73,1201.84 1137.32,1201.84 1137.91,1201.84 1138.49,1201.84 1139.08,1201.84 1139.67,1201.84 1140.25,1201.84 1140.84,1201.84 1141.42,1201.84 1142.01,1201.84 1142.6,1201.84 1143.18,1201.84 1143.77,1201.84 1144.36,1201.84 1144.94,1201.84 1145.53,1201.84 1146.12,1201.84 1146.7,1201.84 1147.29,1201.84 1147.88,1201.84 1148.46,1201.84 1149.05,1201.84 1149.63,1201.84 1150.22,1201.84 1150.81,1201.84 1151.39,1201.84 1151.98,1201.84 1152.57,1201.84 1153.15,1201.84 1153.74,1201.84 1154.33,1201.84 1154.91,1201.84 1155.5,1201.84 1156.09,1201.84 1156.67,1201.84 1157.26,1201.84 1157.84,1201.84 1158.43,1201.84 1159.02,1201.84 1159.6,1201.84 1160.19,1201.84 1160.78,1201.84 1161.36,1201.84 1161.95,1201.84 1162.54,1201.84 1163.12,1201.84 1163.71,1201.84 1164.29,1201.84 1164.88,1201.84 1165.47,1201.84 1166.05,1201.84 1166.64,1201.84 1167.23,1201.84 1167.81,1201.84 1168.4,1201.84 1168.99,1201.84 1169.57,1201.84 1170.16,1201.84 1170.75,1201.84 1171.33,1201.84 1171.92,1201.84 1172.5,1201.84 1173.09,1201.84 1173.68,1201.84 1174.26,1201.84 1174.85,1201.84 1175.44,1201.84 1176.02,1201.84 1176.61,1201.84 1177.2,1201.84 1177.78,1201.84 1178.37,1201.84 1178.96,1201.84 1179.54,1201.84 1180.13,1201.84 1180.71,1201.84 1181.3,1201.84 1181.89,1201.84 1182.47,1201.84 1183.06,1201.84 1183.65,1201.84 1184.23,1201.84 1184.82,1201.84 1185.41,1201.84 1185.99,1201.84 1186.58,1201.84 1187.16,1201.84 1187.75,1201.84 1188.34,1201.84 1188.92,1201.84 1189.51,1201.84 1190.1,1201.84 1190.68,1201.84 1191.27,1201.84 1191.86,1201.84 1192.44,1201.84 1193.03,1201.84 1193.62,1201.84 1194.2,1201.84 1194.79,1201.84 1195.37,1201.84 1195.96,1201.84 1196.55,1201.84 1197.13,1201.84 1197.72,1201.84 1198.31,1201.84 1198.89,1201.84 1199.48,1201.84 1200.07,1201.84 1200.65,1201.84 1201.24,1201.84 1201.83,1201.84 1202.41,1201.84 1203,1201.84 1203.58,1201.84 1204.17,1201.84 1204.76,1201.84 1205.34,1201.84 1205.93,1201.84 1206.52,1201.84 1207.1,1201.84 1207.69,1201.84 1208.28,1201.84 1208.86,1201.84 1209.45,1201.84 1210.03,1201.84 1210.62,1201.84 1211.21,1201.84 1211.79,1201.84 1212.38,1201.84 1212.97,1201.84 1213.55,1201.84 1214.14,1201.84 1214.73,1201.84 1215.31,1201.84 1215.9,1201.84 1216.49,1201.84 1217.07,1201.84 1217.66,1201.84 1218.24,1201.84 1218.83,1201.84 1219.42,1201.84 1220,1201.84 1220.59,1201.84 1221.18,1201.84 1221.76,1201.84 1222.35,1201.84 1222.94,1201.84 1223.52,1201.84 1224.11,1201.84 1224.7,1201.84 1225.28,1201.84 1225.87,1201.84 1226.45,1201.84 1227.04,1201.84 1227.63,1201.84 1228.21,1201.84 1228.8,1201.84 1229.39,1201.84 1229.97,1201.84 1230.56,1201.84 1231.15,1201.84 1231.73,1201.84 1232.32,1201.84 1232.91,1201.84 1233.49,1201.84 1234.08,1201.84 1234.66,1201.84 1235.25,1201.84 1235.84,1201.84 1236.42,1201.84 1237.01,1201.84 1237.6,1201.84 1238.18,1201.84 1238.77,1201.84 1239.36,1201.84 1239.94,1201.84 1240.53,1201.84 1241.11,1201.84 1241.7,1201.84 1242.29,1201.84 1242.87,1201.84 1243.46,1201.84 1244.05,1201.84 1244.63,1201.84 1245.22,1201.84 1245.81,1201.84 1246.39,1201.84 1246.98,1201.84 1247.57,1201.84 1248.15,1201.84 1248.74,1201.84 1249.32,1201.84 1249.91,1201.84 1250.5,1201.84 1251.08,1201.84 1251.67,1201.84 1252.26,1201.84 1252.84,1201.84 1253.43,1201.84 1254.02,1201.84 1254.6,1201.84 1255.19,1201.84 1255.78,1201.84 1256.36,1201.84 1256.95,1201.84 1257.53,1201.84 1258.12,1201.84 1258.71,1201.84 1259.29,1201.84 1259.88,1201.84 1260.47,1201.84 1261.05,1201.84 1261.64,1201.84 1262.23,1201.84 1262.81,1201.84 1263.4,1201.84 1263.98,1201.84 1264.57,1201.84 1265.16,1201.84 1265.74,1201.84 1266.33,1201.84 1266.92,1201.84 1267.5,1201.84 1268.09,1201.84 1268.68,1201.84 1269.26,1201.84 1269.85,1201.84 1270.44,1201.84 1271.02,1201.84 1271.61,1201.84 1272.19,1201.84 1272.78,1201.84 1273.37,1201.84 1273.95,1201.84 1274.54,1201.84 1275.13,1201.84 1275.71,1201.84 1276.3,1201.84 1276.89,1201.84 1277.47,1201.84 1278.06,1201.84 1278.65,1201.84 1279.23,1201.84 1279.82,1201.84 1280.4,1201.84 1280.99,1201.84 1281.58,1201.84 1282.16,1201.84 1282.75,1201.84 1283.34,1201.84 1283.92,1201.84 1284.51,1201.84 1285.1,1201.84 1285.68,1201.84 1286.27,1201.84 1286.86,1201.84 1287.44,1201.84 1288.03,1201.84 1288.61,1201.84 1289.2,1201.84 1289.79,1201.84 1290.37,1201.84 1290.96,1201.84 1291.55,1201.84 1292.13,1201.84 1292.72,1201.84 1293.31,1201.84 1293.89,1201.84 1294.48,1201.84 1295.06,1201.84 1295.65,1201.84 1296.24,1201.84 1296.82,1201.84 1297.41,1201.84 1298,1201.84 1298.58,1201.84 1299.17,1201.84 1299.76,1201.84 1300.34,1201.84 1300.93,1201.84 1301.52,1201.84 1302.1,1201.84 1302.69,1201.84 1303.27,1201.84 1303.86,1201.84 1304.45,1201.84 1305.03,1201.84 1305.62,1201.84 1306.21,1201.84 1306.79,1201.84 1307.38,1201.84 1307.97,1201.84 1308.55,1201.84 1309.14,1201.84 1309.73,1201.84 1310.31,1201.84 1310.9,1201.84 1311.48,1201.84 1312.07,1201.84 1312.66,1201.84 1313.24,1201.84 1313.83,1201.84 1314.42,1201.84 1315,1201.84 1315.59,1201.84 1316.18,1201.84 1316.76,1201.84 1317.35,1201.84 1317.93,1201.84 1318.52,1201.84 1319.11,1201.84 1319.69,1201.84 1320.28,1201.84 1320.87,1201.84 1321.45,1201.84 1322.04,1201.84 1322.63,1201.84 1323.21,1201.84 1323.8,1201.84 1324.39,1201.84 1324.97,1201.84 1325.56,1201.84 1326.14,1201.84 1326.73,1201.84 1327.32,1201.84 1327.9,1201.84 1328.49,1201.84 1329.08,1201.84 1329.66,1201.84 1330.25,1201.84 1330.84,1201.84 1331.42,1201.84 1332.01,1201.84 1332.6,1201.84 1333.18,1201.84 1333.77,1201.84 1334.35,1201.84 1334.94,1201.84 1335.53,1201.84 1336.11,1201.84 1336.7,1201.84 1337.29,1201.84 1337.87,1201.84 1338.46,1201.84 1339.05,1201.84 1339.63,1201.84 1340.22,1201.84 1340.8,1201.84 1341.39,1201.84 1341.98,1201.84 1342.56,1201.84 1343.15,1201.84 1343.74,1201.84 1344.32,1201.84 1344.91,1201.84 1345.5,1201.84 1346.08,1201.84 1346.67,1201.84 1347.26,1201.84 1347.84,1201.84 1348.43,1201.84 1349.01,1201.84 1349.6,1201.84 1350.19,1201.84 1350.77,1201.84 1351.36,1201.84 1351.95,1201.84 1352.53,1201.84 1353.12,1201.84 1353.71,1201.84 1354.29,1201.84 1354.88,1201.84 1355.47,1201.84 1356.05,1201.84 1356.64,1201.84 1357.22,1201.84 1357.81,1201.84 1358.4,1201.84 1358.98,1201.84 1359.57,1201.84 1360.16,1201.84 1360.74,1201.84 1361.33,1201.84 1361.92,1201.84 1362.5,1201.84 1363.09,1201.84 1363.68,1201.84 1364.26,1201.84 1364.85,1201.84 1365.43,1201.84 1366.02,1201.84 1366.61,1201.84 1367.19,1201.84 1367.78,1201.84 1368.37,1201.84 1368.95,1201.84 1369.54,1201.84 1370.13,1201.84 1370.71,1201.84 1371.3,1201.84 1371.88,1201.84 1372.47,1201.84 1373.06,1201.84 1373.64,1201.84 1374.23,1201.84 1374.82,1201.84 1375.4,1201.84 1375.99,1201.84 1376.58,1201.84 1377.16,1201.84 1377.75,1201.84 1378.34,1201.84 1378.92,1201.84 1379.51,1201.84 1380.09,1201.84 1380.68,1201.84 1381.27,1201.84 1381.85,1201.84 1382.44,1201.84 1383.03,1201.84 1383.61,1201.84 1384.2,1201.84 1384.79,1201.84 1385.37,1201.84 1385.96,1201.84 1386.55,1201.84 1387.13,1201.84 1387.72,1201.84 1388.3,1201.84 1388.89,1201.84 1389.48,1201.84 1390.06,1201.84 1390.65,1201.84 1391.24,1201.84 1391.82,1201.84 1392.41,1201.84 1393,1201.84 1393.58,1201.84 1394.17,1201.84 1394.75,1201.84 1395.34,1201.84 1395.93,1201.84 1396.51,1201.84 1397.1,1201.84 1397.69,1201.84 1398.27,1201.84 1398.86,1201.84 1399.45,1201.84 1400.03,1201.84 1400.62,1201.84 1401.21,1201.84 1401.79,1201.84 1402.38,1201.84 1402.96,1201.84 1403.55,1201.84 1404.14,1201.84 1404.72,1201.84 1405.31,1201.84 1405.9,1201.84 1406.48,1201.84 1407.07,1201.84 1407.66,1201.84 1408.24,1201.84 1408.83,1201.84 1409.42,1201.84 1410,1201.84 1410.59,1201.84 1411.17,1201.84 1411.76,1201.84 1412.35,1201.84 1412.93,1201.84 1413.52,1201.84 1414.11,1201.84 1414.69,1201.84 1415.28,1201.84 1415.87,1201.84 1416.45,1201.84 1417.04,1201.84 1417.63,1201.84 1418.21,1201.84 1418.8,1201.84 1419.38,1201.84 1419.97,1201.84 1420.56,1201.84 1421.14,1201.84 1421.73,1201.84 1422.32,1201.84 1422.9,1201.84 1423.49,1201.84 1424.08,1201.84 1424.66,1201.84 1425.25,1201.84 1425.83,1201.84 1426.42,1201.84 1427.01,1201.84 1427.59,1201.84 1428.18,1201.84 1428.77,1201.84 1429.35,1201.84 1429.94,1201.84 1430.53,1201.84 1431.11,1201.84 1431.7,1201.84 1432.29,1201.84 1432.87,1201.84 1433.46,1201.84 1434.04,1201.84 1434.63,1201.84 1435.22,1201.84 1435.8,1201.84 1436.39,1201.84 1436.98,1201.84 1437.56,1201.84 1438.15,1201.84 1438.74,1201.84 1439.32,1201.84 1439.91,1201.84 1440.5,1201.84 1441.08,1201.84 1441.67,1201.84 1442.25,1201.84 1442.84,1201.84 1443.43,1201.84 1444.01,1201.84 1444.6,1201.84 1445.19,1201.84 1445.77,1201.84 1446.36,1201.84 1446.95,1201.84 1447.53,1201.84 1448.12,1201.84 1448.7,1201.84 1449.29,1201.84 1449.88,1201.84 1450.46,1201.84 1451.05,1201.84 1451.64,1201.84 1452.22,1201.84 1452.81,1201.84 1453.4,1201.84 1453.98,1201.84 1454.57,1201.84 1455.16,1201.84 1455.74,1201.84 1456.33,1201.84 1456.91,1201.84 1457.5,1201.84 1458.09,1201.84 1458.67,1201.84 1459.26,1201.84 1459.85,1201.84 1460.43,1201.84 1461.02,1201.84 1461.61,1201.84 1462.19,1201.84 1462.78,1201.84 1463.37,1201.84 1463.95,1201.84 1464.54,1201.84 1465.12,1201.84 1465.71,1201.84 1466.3,1201.84 1466.88,1201.84 1467.47,1201.84 1468.06,1201.84 1468.64,1201.84 1469.23,1201.84 1469.82,1201.84 1470.4,1201.84 1470.99,1201.84 1471.57,1201.84 1472.16,1201.84 1472.75,1201.84 1473.33,1201.84 1473.92,1201.84 1474.51,1201.84 1475.09,1201.84 1475.68,1201.84 1476.27,1201.84 1476.85,1201.84 1477.44,1201.84 1478.03,1201.84 1478.61,1201.84 1479.2,1201.84 1479.78,1201.84 1480.37,1201.84 1480.96,1201.84 1481.54,1201.84 1482.13,1201.84 1482.72,1201.84 1483.3,1201.84 1483.89,1201.84 1484.48,1201.84 1485.06,1201.84 1485.65,1201.84 1486.24,1201.84 1486.82,1201.84 1487.41,1201.84 1487.99,1201.84 1488.58,1201.84 1489.17,1201.84 1489.75,1201.84 1490.34,1201.84 1490.93,1201.84 1491.51,1201.84 1492.1,1201.84 1492.69,1201.84 1493.27,1201.84 1493.86,1201.84 1494.45,1201.84 1495.03,1201.84 1495.62,1201.84 1496.2,1201.84 1496.79,1201.84 1497.38,1201.84 1497.96,1201.84 1498.55,1201.84 1499.14,1201.84 1499.72,1201.84 1500.31,1201.84 1500.9,1201.84 1501.48,1201.84 1502.07,1201.84 1502.65,1201.84 1503.24,1201.84 1503.83,1201.84 1504.41,1201.84 1505,1201.84 1505.59,1201.84 1506.17,1201.84 1506.76,1201.84 1507.35,1201.84 1507.93,1201.84 1508.52,1201.84 1509.11,1201.84 1509.69,1201.84 1510.28,1201.84 1510.86,1201.84 1511.45,1201.84 1512.04,1201.84 1512.62,1201.84 1513.21,1201.84 1513.8,1201.84 1514.38,1201.84 1514.97,1201.84 1515.56,1201.84 1516.14,1201.84 1516.73,1201.84 1517.32,1201.84 1517.9,1201.84 1518.49,1201.84 1519.07,1201.84 1519.66,1201.84 1520.25,1201.84 1520.83,1201.84 1521.42,1201.84 1522.01,1201.84 1522.59,1201.84 1523.18,1201.84 1523.77,1201.84 1524.35,1201.84 1524.94,1201.84 1525.52,1201.84 1526.11,1201.84 1526.7,1201.84 1527.28,1201.84 1527.87,1201.84 1528.46,1201.84 1529.04,1201.84 1529.63,1201.84 1530.22,1201.84 1530.8,1201.84 1531.39,1201.84 1531.98,1201.84 1532.56,1201.84 1533.15,1201.84 1533.73,1201.84 1534.32,1201.84 1534.91,1201.84 1535.49,1201.84 1536.08,1201.84 1536.67,1201.84 1537.25,1201.84 1537.84,1201.84 1538.43,1201.84 1539.01,1201.84 1539.6,1201.84 1540.19,1201.84 1540.77,1201.84 1541.36,1201.84 1541.94,1201.84 1542.53,1201.84 1543.12,1201.84 1543.7,1201.84 1544.29,1201.84 1544.88,1201.84 1545.46,1201.84 1546.05,1201.84 1546.64,1201.84 1547.22,1201.84 1547.81,1201.84 1548.4,1201.84 1548.98,1201.84 1549.57,1201.84 1550.15,1201.84 1550.74,1201.84 1551.33,1201.84 1551.91,1201.84 1552.5,1201.84 1553.09,1201.84 1553.67,1201.84 1554.26,1201.84 1554.85,1201.84 1555.43,1201.84 1556.02,1201.84 1556.6,1201.84 1557.19,1201.84 1557.78,1201.84 1558.36,1201.84 1558.95,1201.84 1559.54,1201.84 1560.12,1201.84 1560.71,1201.84 1561.3,1201.84 1561.88,1201.84 1562.47,1201.84 1563.06,1201.84 1563.64,1201.84 1564.23,1201.84 1564.81,1201.84 1565.4,1201.84 1565.99,1201.84 1566.57,1201.84 1567.16,1201.84 1567.75,1201.84 1568.33,1201.84 1568.92,1201.84 1569.51,1201.84 1570.09,1201.84 1570.68,1201.84 1571.27,1201.84 1571.85,1201.84 1572.44,1201.84 1573.02,1201.84 1573.61,1201.84 1574.2,1201.84 1574.78,1201.84 1575.37,1201.84 1575.96,1201.84 1576.54,1201.84 1577.13,1201.84 1577.72,1201.84 1578.3,1201.84 1578.89,1201.84 1579.47,1201.84 1580.06,1201.84 1580.65,1201.84 1581.23,1201.84 1581.82,1201.84 1582.41,1201.84 1582.99,1201.84 1583.58,1201.84 1584.17,1201.84 1584.75,1201.84 1585.34,1201.84 1585.93,1201.84 1586.51,1201.84 1587.1,1201.84 1587.68,1201.84 1588.27,1201.84 1588.86,1201.84 1589.44,1201.84 1590.03,1201.84 1590.62,1201.84 1591.2,1201.84 1591.79,1201.84 1592.38,1201.84 1592.96,1201.84 1593.55,1201.84 1594.14,1201.84 1594.72,1201.84 1595.31,1201.84 1595.89,1201.84 1596.48,1201.84 1597.07,1201.84 1597.65,1201.84 1598.24,1201.84 1598.83,1201.84 1599.41,1201.84 1600,1201.84 1600.59,1201.84 1601.17,1201.84 1601.76,1201.84 1602.34,1201.84 1602.93,1201.84 1603.52,1201.84 1604.1,1201.84 1604.69,1201.84 1605.28,1201.84 1605.86,1201.84 1606.45,1201.84 1607.04,1201.84 1607.62,1201.84 1608.21,1201.84 1608.8,1201.84 1609.38,1201.84 1609.97,1201.84 1610.55,1201.84 1611.14,1201.84 1611.73,1201.84 1612.31,1201.84 1612.9,1201.84 1613.49,1201.84 1614.07,1201.84 1614.66,1201.84 1615.25,1201.84 1615.83,1201.84 1616.42,1201.84 1617.01,1201.84 1617.59,1201.84 1618.18,1201.84 1618.76,1201.84 1619.35,1201.84 1619.94,1201.84 1620.52,1201.84 1621.11,1201.84 1621.7,1201.84 1622.28,1201.84 1622.87,1201.84 1623.46,1201.84 1624.04,1201.84 1624.63,1201.84 1625.22,1201.84 1625.8,1201.84 1626.39,1201.84 1626.97,1201.84 1627.56,1201.84 1628.15,1201.84 1628.73,1201.84 1629.32,1201.84 1629.91,1201.84 1630.49,1201.84 1631.08,1201.84 1631.67,1201.84 1632.25,1201.84 1632.84,1201.84 1633.42,1201.84 1634.01,1201.84 1634.6,1201.84 1635.18,1201.84 1635.77,1201.84 1636.36,1201.84 1636.94,1201.84 1637.53,1201.84 1638.12,1201.84 1638.7,1201.84 1639.29,1201.84 1639.88,1201.84 1640.46,1201.84 1641.05,1201.84 1641.63,1201.84 1642.22,1201.84 1642.81,1201.84 1643.39,1201.84 1643.98,1201.84 1644.57,1201.84 1645.15,1201.84 1645.74,1201.84 1646.33,1201.84 1646.91,1201.84 1647.5,1201.84 1648.09,1201.84 1648.67,1201.84 1649.26,1201.84 1649.84,1201.84 1650.43,1201.84 1651.02,1201.84 1651.6,1201.84 1652.19,1201.84 1652.78,1201.84 1653.36,1201.84 1653.95,1201.84 1654.54,1201.84 1655.12,1201.84 1655.71,1201.84 1656.29,1201.84 1656.88,1201.84 1657.47,1201.84 1658.05,1201.84 1658.64,1201.84 1659.23,1201.84 1659.81,1201.84 1660.4,1201.84 1660.99,1201.84 1661.57,1201.84 1662.16,1201.84 1662.75,1201.84 1663.33,1201.84 1663.92,1201.84 1664.5,1201.84 1665.09,1201.84 1665.68,1201.84 1666.26,1201.84 1666.85,1201.84 1667.44,1201.84 1668.02,1201.84 1668.61,1201.84 1669.2,1201.84 1669.78,1201.84 1670.37,1201.84 1670.96,1201.84 1671.54,1201.84 1672.13,1201.84 1672.71,1201.84 1673.3,1201.84 1673.89,1201.84 1674.47,1201.84 1675.06,1201.84 1675.65,1201.84 1676.23,1201.84 1676.82,1201.84 1677.41,1201.84 1677.99,1201.84 1678.58,1201.84 1679.17,1201.84 1679.75,1201.84 1680.34,1201.84 1680.92,1201.84 1681.51,1201.84 1682.1,1201.84 1682.68,1201.84 1683.27,1201.84 1683.86,1201.84 1684.44,1201.84 1685.03,1201.84 1685.62,1201.84 1686.2,1201.84 1686.79,1201.84 1687.37,1201.84 1687.96,1201.84 1688.55,1201.84 1689.13,1201.84 1689.72,1201.84 1690.31,1201.84 1690.89,1201.84 1691.48,1201.84 1692.07,1201.84 1692.65,1201.84 1693.24,1201.84 1693.83,1201.84 1694.41,1201.84 1695,1201.84 1695.58,1201.84 1696.17,1201.84 1696.76,1201.84 1697.34,1201.84 1697.93,1201.84 1698.52,1201.84 1699.1,1201.84 1699.69,1201.84 1700.28,1201.84 1700.86,1201.84 1701.45,1201.84 1702.04,1201.84 1702.62,1201.84 1703.21,1201.84 1703.79,1201.84 1704.38,1201.84 1704.97,1201.84 1705.55,1201.84 1706.14,1201.84 1706.73,1201.84 1707.31,1201.84 1707.9,1201.84 1708.49,1201.84 1709.07,1201.84 1709.66,1201.84 1710.24,1201.84 1710.83,1201.84 1711.42,1201.84 1712,1201.84 1712.59,1201.84 1713.18,1201.84 1713.76,1201.84 1714.35,1201.84 1714.94,1201.84 1715.52,1201.84 1716.11,1201.84 1716.7,1201.84 1717.28,1201.84 1717.87,1201.84 1718.45,1201.84 1719.04,1201.84 1719.63,1201.84 1720.21,1201.84 1720.8,1201.84 1721.39,1201.84 1721.97,1201.84 1722.56,1201.84 1723.15,1201.84 1723.73,1201.84 1724.32,1201.84 1724.91,1201.84 1725.49,1201.84 1726.08,1201.84 1726.66,1201.84 1727.25,1201.84 1727.84,1201.84 1728.42,1201.84 1729.01,1201.84 1729.6,1201.84 1730.18,1201.84 1730.77,1201.84 1731.36,1201.84 1731.94,1201.84 1732.53,1201.84 1733.11,1201.84 1733.7,1201.84 1734.29,1201.84 1734.87,1201.84 1735.46,1201.84 1736.05,1201.84 1736.63,1201.84 1737.22,1201.84 1737.81,1201.84 1738.39,1201.84 1738.98,1201.84 1739.57,1201.84 1740.15,1201.84 1740.74,1201.84 1741.32,1201.84 1741.91,1201.84 1742.5,1201.84 1743.08,1201.84 1743.67,1201.84 1744.26,1201.84 1744.84,1201.84 1745.43,1201.84 1746.02,1201.84 1746.6,1201.84 1747.19,1201.84 1747.78,1201.84 1748.36,1201.84 1748.95,1201.84 1749.53,1201.84 1750.12,1201.84 1750.71,1201.84 1751.29,1201.84 1751.88,1201.84 1752.47,1201.84 1753.05,1201.84 1753.64,1201.84 1754.23,1201.84 1754.81,1201.84 1755.4,1201.84 1755.99,1201.84 1756.57,1201.84 1757.16,1201.84 1757.74,1201.84 1758.33,1201.84 1758.92,1201.84 1759.5,1201.84 1760.09,1201.84 1760.68,1201.84 1761.26,1201.84 1761.85,1201.84 1762.44,1201.84 1763.02,1201.84 1763.61,1201.84 1764.19,1201.84 1764.78,1201.84 1765.37,1201.84 1765.95,1201.84 1766.54,1201.84 1767.13,1201.84 1767.71,1201.84 1768.3,1201.84 1768.89,1201.84 1769.47,1201.84 1770.06,1201.84 1770.65,1201.84 1771.23,1201.84 1771.82,1201.84 1772.4,1201.84 1772.99,1201.84 1773.58,1201.84 1774.16,1201.84 1774.75,1201.84 1775.34,1201.84 1775.92,1201.84 1776.51,1201.84 1777.1,1201.84 1777.68,1201.84 1778.27,1201.84 1778.86,1201.84 1779.44,1201.84 1780.03,1201.84 1780.61,1201.84 1781.2,1201.84 1781.79,1201.84 1782.37,1201.84 1782.96,1201.84 1783.55,1201.84 1784.13,1201.84 1784.72,1201.84 1785.31,1201.84 1785.89,1201.84 1786.48,1201.84 1787.06,1201.84 1787.65,1201.84 1788.24,1201.84 1788.82,1201.84 1789.41,1201.84 1790,1201.84 1790.58,1201.84 1791.17,1201.84 1791.76,1201.84 1792.34,1201.84 1792.93,1201.84 1793.52,1201.84 1794.1,1201.84 1794.69,1201.84 1795.27,1201.84 1795.86,1201.84 1796.45,1201.84 1797.03,1201.84 1797.62,1201.84 1798.21,1201.84 1798.79,1201.84 1799.38,1201.84 1799.97,1201.84 1800.55,1201.84 1801.14,1201.84 1801.73,1201.84 1802.31,1201.84 1802.9,1201.84 1803.48,1201.84 1804.07,1201.84 1804.66,1201.84 1805.24,1201.84 1805.83,1201.84 1806.42,1201.84 1807,1201.84 1807.59,1201.84 1808.18,1201.84 1808.76,1201.84 1809.35,1201.84 1809.94,1201.84 1810.52,1201.84 1811.11,1201.84 1811.69,1201.84 1812.28,1201.84 1812.87,1201.84 1813.45,1201.84 1814.04,1201.84 1814.63,1201.84 1815.21,1201.84 1815.8,1201.84 1816.39,1201.84 1816.97,1201.84 1817.56,1201.84 1818.14,1201.84 1818.73,1201.84 1819.32,1201.84 1819.9,1201.84 1820.49,1201.84 1821.08,1201.84 1821.66,1201.84 1822.25,1201.84 1822.84,1201.84 1823.42,1201.84 1824.01,1201.84 1824.6,1201.84 1825.18,1201.84 1825.77,1201.84 1826.35,1201.84 1826.94,1201.84 1827.53,1201.84 1828.11,1201.84 1828.7,1201.84 1829.29,1201.84 1829.87,1201.84 1830.46,1201.84 1831.05,1201.84 1831.63,1201.84 1832.22,1201.84 1832.81,1201.84 1833.39,1201.84 1833.98,1201.84 1834.56,1201.84 1835.15,1201.84 1835.74,1201.84 1836.32,1201.84 1836.91,1201.84 1837.5,1201.84 1838.08,1201.84 1838.67,1201.84 1839.26,1201.84 1839.84,1201.84 1840.43,1201.84 1841.01,1201.84 1841.6,1201.84 1842.19,1201.84 1842.77,1201.84 1843.36,1201.84 1843.95,1201.84 1844.53,1201.84 1845.12,1201.84 1845.71,1201.84 1846.29,1201.84 1846.88,1201.84 1847.47,1201.84 1848.05,1201.84 1848.64,1201.84 1849.22,1201.84 1849.81,1201.84 1850.4,1201.84 1850.98,1201.84 1851.57,1201.84 1852.16,1201.84 1852.74,1201.84 1853.33,1201.84 1853.92,1201.84 1854.5,1201.84 1855.09,1201.84 1855.68,1201.84 1856.26,1201.84 1856.85,1201.84 1857.43,1201.84 1858.02,1201.84 1858.61,1201.84 1859.19,1201.84 1859.78,1201.84 1860.37,1201.84 1860.95,1201.84 1861.54,1201.84 1862.13,1201.84 1862.71,1201.84 1863.3,1201.84 1863.88,1201.84 1864.47,1201.84 1865.06,1201.84 1865.64,1201.84 1866.23,1201.84 1866.82,1201.84 1867.4,1201.84 1867.99,1201.84 1868.58,1201.84 1869.16,1201.84 1869.75,1201.84 1870.34,1201.84 1870.92,1201.84 1871.51,1201.84 1872.09,1201.84 1872.68,1201.84 1873.27,1201.84 1873.85,1201.84 1874.44,1201.84 1875.03,1201.84 1875.61,1201.84 1876.2,1201.84 1876.79,1201.84 1877.37,1201.84 1877.96,1201.84 1878.55,1201.84 1879.13,1201.84 1879.72,1201.84 1880.3,1201.84 1880.89,1201.84 1881.48,1201.84 1882.06,1201.84 1882.65,1201.84 1883.24,1201.84 1883.82,1201.84 1884.41,1201.84 1885,1201.84 1885.58,1201.84 1886.17,1201.84 1886.76,1201.84 1887.34,1201.84 1887.93,1201.84 1888.51,1201.84 1889.1,1201.84 1889.69,1201.84 1890.27,1201.84 1890.86,1201.84 1891.45,1201.84 1892.03,1201.84 1892.62,1201.84 1893.21,1201.84 1893.79,1201.84 1894.38,1201.84 1894.96,1201.84 1895.55,1201.84 1896.14,1201.84 1896.72,1201.84 1897.31,1201.84 1897.9,1201.84 1898.48,1201.84 1899.07,1201.84 1899.66,1201.84 1900.24,1201.84 1900.83,1201.84 1901.42,1201.84 1902,1201.84 1902.59,1201.84 1903.17,1201.84 1903.76,1201.84 1904.35,1201.84 1904.93,1201.84 1905.52,1201.84 1906.11,1201.84 1906.69,1201.84 1907.28,1201.84 1907.87,1201.84 1908.45,1201.84 1909.04,1201.84 1909.63,1201.84 1910.21,1201.84 1910.8,1201.84 1911.38,1201.84 1911.97,1201.84 1912.56,1201.84 1913.14,1201.84 1913.73,1201.84 1914.32,1201.84 1914.9,1201.84 1915.49,1201.84 1916.08,1201.84 1916.66,1201.84 1917.25,1201.84 1917.83,1201.84 1918.42,1201.84 1919.01,1201.84 1919.59,1201.84 1920.18,1201.84 1920.77,1201.84 1921.35,1201.84 1921.94,1201.84 1922.53,1201.84 1923.11,1201.84 1923.7,1201.84 1924.29,1201.84 1924.87,1201.84 1925.46,1201.84 1926.04,1201.84 1926.63,1201.84 1927.22,1201.84 1927.8,1201.84 1928.39,1201.84 1928.98,1201.84 1929.56,1201.84 1930.15,1201.84 1930.74,1201.84 1931.32,1201.84 1931.91,1201.84 1932.5,1201.84 1933.08,1201.84 1933.67,1201.84 1934.25,1201.84 1934.84,1201.84 1935.43,1201.84 1936.01,1201.84 1936.6,1201.84 1937.19,1201.84 1937.77,1201.84 1938.36,1201.84 1938.95,1201.84 1939.53,1201.84 1940.12,1201.84 1940.71,1201.84 1941.29,1201.84 1941.88,1201.84 1942.46,1201.84 1943.05,1201.84 1943.64,1201.84 1944.22,1201.84 1944.81,1201.84 1945.4,1201.84 1945.98,1201.84 1946.57,1201.84 1947.16,1201.84 1947.74,1201.84 1948.33,1201.84 1948.91,1201.84 1949.5,1201.84 1950.09,1201.84 1950.67,1201.84 1951.26,1201.84 1951.85,1201.84 1952.43,1201.84 1953.02,1201.84 1953.61,1201.84 1954.19,1201.84 1954.78,1201.84 1955.37,1201.84 1955.95,1201.84 1956.54,1201.84 1957.12,1201.84 1957.71,1201.84 1958.3,1201.84 1958.88,1201.84 1959.47,1201.84 1960.06,1201.84 1960.64,1201.84 1961.23,1201.84 1961.82,1201.84 1962.4,1201.84 1962.99,1201.84 1963.58,1201.84 1964.16,1201.84 1964.75,1201.84 1965.33,1201.84 1965.92,1201.84 1966.51,1201.84 1967.09,1201.84 1967.68,1201.84 1968.27,1201.84 1968.85,1201.84 1969.44,1201.84 1970.03,1201.84 1970.61,1201.84 1971.2,1201.84 1971.78,1201.84 1972.37,1201.84 1972.96,1201.84 1973.54,1201.84 1974.13,1201.84 1974.72,1201.84 1975.3,1201.84 1975.89,1201.84 1976.48,1201.84 1977.06,1201.84 1977.65,1201.84 1978.24,1201.84 1978.82,1201.84 1979.41,1201.84 1979.99,1201.84 1980.58,1201.84 1981.17,1201.84 1981.75,1201.84 1982.34,1201.84 1982.93,1201.84 1983.51,1201.84 1984.1,1201.84 1984.69,1201.84 1985.27,1201.84 1985.86,1201.84 1986.45,1201.84 1987.03,1201.84 1987.62,1201.84 1988.2,1201.84 1988.79,1201.84 1989.38,1201.84 1989.96,1201.84 1990.55,1201.84 1991.14,1201.84 1991.72,1201.84 1992.31,1201.84 1992.9,1201.84 1993.48,1201.84 1994.07,1201.84 1994.65,1201.84 1995.24,1201.84 1995.83,1201.84 1996.41,1201.84 1997,1201.84 1997.59,1201.84 1998.17,1201.84 1998.76,1201.84 1999.35,1201.84 1999.93,1201.84 2000.52,1201.84 2001.11,1201.84 2001.69,1201.84 2002.28,1201.84 2002.86,1201.84 2003.45,1201.84 2004.04,1201.84 2004.62,1201.84 2005.21,1201.84 2005.8,1201.84 2006.38,1201.84 2006.97,1201.84 2007.56,1201.84 2008.14,1201.84 2008.73,1201.84 2009.32,1201.84 2009.9,1201.84 2010.49,1201.84 2011.07,1201.84 2011.66,1201.84 2012.25,1201.84 2012.83,1201.84 2013.42,1201.84 2014.01,1201.84 2014.59,1201.84 2015.18,1201.84 2015.77,1201.84 2016.35,1201.84 2016.94,1201.84 2017.53,1201.84 2018.11,1201.84 2018.7,1201.84 2019.28,1201.84 2019.87,1201.84 2020.46,1201.84 2021.04,1201.84 2021.63,1201.84 2022.22,1201.84 2022.8,1201.84 2023.39,1201.84 2023.98,1201.84 2024.56,1201.84 2025.15,1201.84 2025.73,1201.84 2026.32,1201.84 2026.91,1201.84 2027.49,1201.84 2028.08,1201.84 2028.67,1201.84 2029.25,1201.84 2029.84,1201.84 2030.43,1201.84 2031.01,1201.84 2031.6,1201.84 2032.19,1201.84 2032.77,1201.84 2033.36,1201.84 2033.94,1201.84 2034.53,1201.84 2035.12,1201.84 2035.7,1201.84 2036.29,1201.84 2036.88,1201.84 2037.46,1201.84 2038.05,1201.84 2038.64,1201.84 2039.22,1201.84 2039.81,1201.84 2040.4,1201.84 2040.98,1201.84 2041.57,1201.84 2042.15,1201.84 2042.74,1201.84 2043.33,1201.84 2043.91,1201.84 2044.5,1201.84 2045.09,1201.84 2045.67,1201.84 2046.26,1201.84 2046.85,1201.84 2047.43,1201.84 2048.02,1201.84 2048.6,1201.84 2049.19,1201.84 2049.78,1201.84 2050.36,1201.84 2050.95,1201.84 2051.54,1201.84 2052.12,1201.84 2052.71,1201.84 2053.3,1201.84 2053.88,1201.84 2054.47,1201.84 2055.06,1201.84 2055.64,1201.84 2056.23,1201.84 2056.81,1201.84 2057.4,1201.84 2057.99,1201.84 2058.57,1201.84 2059.16,1201.84 2059.75,1201.84 2060.33,1201.84 2060.92,1201.84 2061.51,1201.84 2062.09,1201.84 2062.68,1201.84 2063.27,1201.84 2063.85,1201.84 2064.44,1201.84 2065.02,1201.84 2065.61,1201.84 2066.2,1201.84 2066.78,1201.84 2067.37,1201.84 2067.96,1201.84 2068.54,1201.84 2069.13,1201.84 2069.72,1201.84 2070.3,1201.84 2070.89,1201.84 2071.48,1201.84 2072.06,1201.84 2072.65,1201.84 2073.23,1201.84 2073.82,1201.84 2074.41,1201.84 2074.99,1201.84 2075.58,1201.84 2076.17,1201.84 2076.75,1201.84 2077.34,1201.84 2077.93,1201.84 2078.51,1201.84 2079.1,1201.84 2079.68,1201.84 2080.27,1201.84 2080.86,1201.84 2081.44,1201.84 2082.03,1201.84 2082.62,1201.84 2083.2,1201.84 2083.79,1201.84 2084.38,1201.84 2084.96,1201.84 2085.55,1201.84 2086.14,1201.84 2086.72,1201.84 2087.31,1201.84 2087.89,1201.84 2088.48,1201.84 2089.07,1201.84 2089.65,1201.84 2090.24,1201.84 2090.83,1201.84 2091.41,1201.84 2092,1201.84 2092.59,1201.84 2093.17,1201.84 2093.76,1201.84 2094.35,1201.84 2094.93,1201.84 2095.52,1201.84 2096.1,1201.84 2096.69,1201.84 2097.28,1201.84 2097.86,1201.84 2098.45,1201.84 2099.04,1201.84 2099.62,1201.84 2100.21,1201.84 2100.8,1201.84 2101.38,1201.84 2101.97,1201.84 2102.55,1201.84 2103.14,1201.84 2103.73,1201.84 2104.31,1201.84 2104.9,1201.84 2105.49,1201.84 2106.07,1201.84 2106.66,1201.84 2107.25,1201.84 2107.83,1201.84 2108.42,1201.84 2109.01,1201.84 2109.59,1201.84 2110.18,1201.84 2110.76,1201.84 2111.35,1201.84 2111.94,1201.84 2112.52,1201.84 2113.11,1201.84 2113.7,1201.84 2114.28,1201.84 2114.87,1201.84 2115.46,1201.84 2116.04,1201.84 2116.63,1201.84 2117.22,1201.84 2117.8,1201.84 2118.39,1201.84 2118.97,1201.84 2119.56,1201.84 2120.15,1201.84 2120.73,1201.84 2121.32,1201.84 2121.91,1201.84 2122.49,1201.84 2123.08,1201.84 2123.67,1201.84 2124.25,1201.84 2124.84,1201.84 2125.42,1201.84 2126.01,1201.84 2126.6,1201.84 2127.18,1201.84 2127.77,1201.84 2128.36,1201.84 2128.94,1201.84 2129.53,1201.84 2130.12,1201.84 2130.7,1201.84 2131.29,1201.84 2131.88,1201.84 2132.46,1201.84 2133.05,1201.84 2133.63,1201.84 2134.22,1201.84 2134.81,1201.84 2135.39,1201.84 2135.98,1201.84 2136.57,1201.84 2137.15,1201.84 2137.74,1201.84 2138.33,1201.84 2138.91,1201.84 2139.5,1201.84 2140.09,1201.84 2140.67,1201.84 2141.26,1201.84 2141.84,1201.84 2142.43,1201.84 2143.02,1201.84 2143.6,1201.84 2144.19,1201.84 2144.78,1201.84 2145.36,1201.84 2145.95,1201.84 2146.54,1201.84 2147.12,1201.84 2147.71,1201.84 2148.3,1201.84 2148.88,1201.84 2149.47,1201.84 2150.05,1201.84 2150.64,1201.84 2151.23,1201.84 2151.81,1201.84 2152.4,1201.84 2152.99,1201.84 2153.57,1201.84 2154.16,1201.84 2154.75,1201.84 2155.33,1201.84 2155.92,1201.84 2156.5,1201.84 2157.09,1201.84 2157.68,1201.84 2158.26,1201.84 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1559.69,1179.92 1401.79,899.083 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.19 985.439,1179.92 2158.26,1179.92 2158.26,1223.19 985.439,1223.19 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip643\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip643)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-6382.66 165.469,-7189.65 166.029,-7946.69 166.588,-7620.33 167.147,-6503.55 167.706,-6384.8 168.266,-6304.64 168.825,-6941.85 169.384,-6874.65 169.943,-7462.14 170.503,-7981.78 171.062,-7898.94 171.621,-8339.77 172.18,-8239.59 172.74,-8613.9 173.299,-8939.1 173.858,-9232.78 174.417,-8686.17 174.977,-8958.34 175.536,-8837.22 176.095,-9060.15 176.655,-8953.75 177.214,-8846.13 177.773,-9016.61 178.332,-8379.45 178.892,-8532.32 179.451,-8648.03 180.01,-8534.86 180.569,-8631.96 181.129,-8310.12 181.688,-8177.08 182.247,-8264.14 182.806,-8313.17 183.366,-8335.88 183.925,-8208.93 184.484,-7792.49 185.043,-7670.41 185.603,-7556.28 186.162,-7421 186.721,-7416.57 187.28,-7373.08 187.84,-7120.48 188.399,-6988.26 188.958,-6760.69 189.517,-6625.07 190.077,-6488.66 190.636,-6368.61 191.195,-6310.83 191.754,-6246.35 192.314,-6106.04 192.873,-5810.9 193.432,-5461.15 193.991,-5424.04 194.551,-5239.42 195.11,-5124.32 195.669,-4774.3 196.228,-4614.32 196.788,-4510.7 197.347,-4467.29 197.906,-4358.32 198.465,-4309.63 199.025,-4149.8 199.584,-4051.37 200.143,-3995.43 200.702,-3805.5 201.262,-3623.85 201.821,-3530.46 202.38,-3438.72 202.939,-3267.11 203.499,-3225.13 204.058,-3136.73 204.617,-3013.91 205.176,-2931.06 205.736,-2815.09 206.295,-2807.94 206.854,-2717.84 207.413,-2633.19 207.973,-2543.75 208.532,-2423.87 209.091,-2242.04 209.65,-2195.32 210.21,-2114.5 210.769,-2039.1 211.328,-1928.28 211.887,-1850.75 212.447,-1694.6 213.006,-1655.72 213.565,-1582.54 214.124,-1512.95 214.684,-1414.97 215.243,-1296.7 215.802,-1260.6 216.361,-1201.73 216.921,-1163.31 217.48,-1151.75 218.039,-1087.92 218.598,-1052.33 219.158,-962.728 219.717,-876.162 220.276,-841.616 220.835,-785.127 221.395,-752.562 221.954,-696.912 222.513,-573.303 223.072,-499.671 223.632,-405.247 224.191,-380.333 224.75,-333.729 225.309,-246.327 225.869,-221.768 226.428,-158.474 226.987,-119.074 227.546,-95.4973 228.106,-79.8134 228.665,22.4341 229.224,123.722 229.783,151.674 230.343,178.822 230.902,225.411 231.461,273.49 232.02,302.846 232.58,283.618 233.139,307.81 233.698,310.686 234.257,358.536 234.817,400.649 235.376,404.381 235.935,409.844 236.494,417.244 237.054,461.281 237.613,463.014 238.172,447.307 238.731,453.371 239.291,478.209 239.85,483.869 240.409,528.164 240.968,536.574 241.528,526.232 242.087,548.717 242.646,593.299 243.205,614.073 243.765,652.48 244.324,672.834 244.883,689.671 245.442,670.802 246.002,691.298 246.561,692.917 247.12,712.115 247.679,728.259 248.239,762.304 248.798,782.091 249.357,764.685 249.916,729.285 250.476,732.662 251.035,736.466 251.594,737.613 252.153,740.956 252.713,762.166 253.272,765.718 253.831,781.563 254.39,799.356 254.95,816.552 255.509,814.29 256.068,865.443 256.627,861.294 257.187,859.831 257.746,890.943 258.305,921.748 258.864,900.127 259.424,900.299 259.983,912.735 260.542,941.688 261.101,937.469 261.661,898.804 262.22,879.091 262.779,910.775 263.338,910.301 263.898,939.166 264.457,936.258 265.016,918.838 265.575,932.551 266.135,913.897 266.694,895.244 267.253,889.839 267.812,891.772 268.372,873.333 268.931,872.867 269.49,872.258 270.049,891.282 270.609,908.299 271.168,905.96 271.727,918.597 272.286,917.569 272.846,931.719 273.405,929.799 273.964,956.494 274.523,951.11 275.083,978.904 275.642,1004.73 276.201,1033.72 276.76,1041.67 277.32,1049.18 277.879,1072.22 278.438,1062.72 278.997,1051.37 279.557,1092.21 280.116,1079.18 280.675,1100.91 281.234,1089.41 281.794,1059.58 282.353,1099.42 282.912,1134.81 283.471,1154.9 284.031,1175.13 284.59,1160.62 285.149,1162.98 285.708,1136.41 286.268,1154.5 286.827,1138.85 287.386,1111.6 287.945,1097.79 288.505,1070.17 289.064,1093.36 289.623,1082.07 290.182,1067.14 290.742,1072.9 291.301,1080.38 291.86,1131.62 292.419,1103.76 292.979,1089.57 293.538,1075.75 294.097,1093.45 294.656,1077.23 295.216,1066.02 295.775,1069.5 296.334,1026.37 296.893,1003.56 297.453,963.487 298.012,925.123 298.571,936.614 299.13,899.502 299.69,898.699 300.249,930.065 300.808,961.347 301.368,970.866 301.927,951.274 302.486,948.296 303.045,927.713 303.605,942.927 304.164,953.663 304.723,975.903 305.282,967.982 305.842,957.728 306.401,984.735 306.96,1008.09 307.519,1001.9 308.079,1041.73 308.638,1003.26 309.197,995.127 309.756,1005.87 310.316,998.325 310.875,1007.57 311.434,1014.29 311.993,1021.54 312.553,1030.68 313.112,1022.4 313.671,999.063 314.23,1022.67 314.79,1012.04 315.349,969.596 315.908,982.986 316.467,992.533 317.027,966.855 317.586,976.155 318.145,1000.88 318.704,973.143 319.264,964.222 319.823,958.254 320.382,949.378 320.941,910.354 321.501,920.709 322.06,932.212 322.619,909.985 323.178,923.674 323.738,904.078 324.297,913.366 324.856,930.388 325.415,927.049 325.975,916.923 326.534,943.781 327.093,921.489 327.652,915.152 328.212,928.112 328.771,922.219 329.33,917.946 329.889,911.529 330.449,889.969 331.008,871.029 331.567,901.949 332.126,947.806 332.686,991.265 333.245,934.167 333.804,914.749 334.363,924.377 334.923,902.177 335.482,900.762 336.041,900.383 336.6,895.657 337.16,856.09 337.719,838.852 338.278,820.154 338.837,800.365 339.397,800.992 339.956,836.89 340.515,880.313 341.074,891.835 341.634,892.167 342.193,887.95 342.752,881.181 343.311,876.246 343.871,873.154 344.43,900.161 344.989,878.86 345.548,860.557 346.108,860.553 346.667,872.885 347.226,822.7 347.785,838.549 348.345,833.857 348.904,836.294 349.463,783.807 350.022,832.714 350.582,850.064 351.141,866.313 351.7,862.935 352.259,877.567 352.819,872.849 353.378,864.804 353.937,843.945 354.496,839.214 355.056,821.815 355.615,804.172 356.174,805.326 356.733,783.645 357.293,766.279 357.852,765.86 358.411,786.78 358.97,770.492 359.53,791.388 360.089,841.99 360.648,860.926 361.207,857.473 361.767,842.787 362.326,841.327 362.885,837.907 363.444,835.006 364.004,751.598 364.563,767.627 365.122,815.119 365.681,815.745 366.241,785.859 366.8,805.496 367.359,855.844 367.918,887.521 368.478,866.503 369.037,861.228 369.596,855.047 370.155,848.934 370.715,812.837 371.274,766.029 371.833,785.366 372.392,797.438 372.952,762.206 373.511,796.304 374.07,777.977 374.629,765.06 375.189,768.848 375.748,771.089 376.307,768.325 376.866,769.989 377.426,784.641 377.985,766.54 378.544,787.328 379.103,785.063 379.663,785.754 380.222,768.667 380.781,767.606 381.34,764.558 381.9,781.328 382.459,826.257 383.018,826.01 383.577,824.997 384.137,809.619 384.696,778.19 385.255,780.07 385.814,768.35 386.374,783.08 386.933,813.332 387.492,814.3 388.051,830.202 388.611,828.706 389.17,826.463 389.729,794.35 390.288,810.048 390.848,806.184 391.407,824.864 391.966,806.491 392.525,772.807 393.085,785.86 393.644,767.786 394.203,770.034 394.762,768.38 395.322,832.766 395.881,860.881 396.44,842.778 396.999,856.175 397.559,851.571 398.118,876.851 398.677,887.711 399.236,881.59 399.796,876.985 400.355,867.382 400.914,851.786 401.473,848.68 402.033,846.059 402.592,826.164 403.151,823.3 403.71,835.583 404.27,849.148 404.829,850.294 405.388,827.291 405.947,820.708 406.507,800.084 407.066,779.522 407.625,777.146 408.184,776.095 408.744,741.501 409.303,764.597 409.862,767.327 410.421,781.881 410.981,768.341 411.54,785.523 412.099,783.821 412.658,765.755 413.218,765.51 413.777,785.854 414.336,784.347 414.895,782.47 415.455,780.564 416.014,794.474 416.573,777.142 417.132,779.206 417.692,764.759 418.251,781.957 418.81,779.381 419.369,762.314 419.929,761.654 420.488,763.897 421.047,748.36 421.606,766.452 422.166,718.577 422.725,734.311 423.284,733.787 423.843,733.797 424.403,768.714 424.962,732.911 425.521,733.165 426.08,735.451 426.64,736.148 427.199,785.823 427.758,784.007 428.318,832.234 428.877,811.994 429.436,759.201 429.995,775.244 430.555,776.302 431.114,790.552 431.673,774.072 432.232,789.826 432.792,783.933 433.351,750.628 433.91,751.125 434.469,767.489 435.029,782.771 435.588,783.317 436.147,797.201 436.706,808.582 437.266,804.668 437.825,832.99 438.384,844.354 438.943,838.648 439.503,855.813 440.062,833.623 440.621,844.591 441.18,858.333 441.74,885.127 442.299,896.52 442.858,904.25 443.417,863.545 443.977,838.238 444.536,835.864 445.095,814.348 445.654,807.078 446.214,833.034 446.773,795.797 447.332,810.232 447.891,824.608 448.451,834.887 449.01,812.691 449.569,823.454 450.128,802.791 450.688,813.215 451.247,808.094 451.806,807.927 452.365,822.658 452.925,803.115 453.484,817.61 454.043,815.608 454.602,828.443 455.162,859.035 455.721,852.028 456.28,846.875 456.839,823.98 457.399,800.71 457.958,795.261 458.517,775.842 459.076,773.108 459.636,753.785 460.195,767.718 460.754,767.519 461.313,748.403 461.873,735.875 462.432,768.346 462.991,736.285 463.55,718.628 464.11,686.28 464.669,703.462 465.228,705.834 465.787,708.501 466.347,707.735 466.906,709.312 467.465,677.69 468.024,663.766 468.584,667.134 469.143,670.483 469.702,657.434 470.261,648.168 470.821,605.458 471.38,613.986 471.939,618.936 472.498,612.112 473.058,617.102 473.617,620.643 474.176,658.249 474.735,694.017 475.295,711.734 475.854,730.582 476.413,703.506 476.972,707.919 477.532,711.365 478.091,726.098 478.65,744.431 479.209,745.252 479.769,776.026 480.328,772.406 480.887,767.811 481.446,766.447 482.006,799.224 482.565,796.944 483.124,811.988 483.683,823.351 484.243,801.183 484.802,799.892 485.361,813.648 485.92,825.494 486.48,821.607 487.039,815.347 487.598,828.396 488.157,824.403 488.717,816.904 489.276,792.256 489.835,821.268 490.394,817.709 490.954,826.964 491.513,804.978 492.072,803.328 492.631,813.514 493.191,825.367 493.75,835.725 494.309,830.725 494.868,792.784 495.428,802.597 495.987,859.35 496.546,833.412 497.105,795.594 497.665,809.405 498.224,807.786 498.783,788.642 499.342,786.559 499.902,799.586 500.461,746.294 501.02,745.345 501.579,744.157 502.139,743.401 502.698,726.61 503.257,689.925 503.816,692.365 504.376,710.263 504.935,729.036 505.494,715.926 506.053,731.397 506.613,668.551 507.172,704.313 507.731,722.46 508.29,737.922 508.85,753.289 509.409,767.626 509.968,750.313 510.527,732.674 511.087,710.971 511.646,727.673 512.205,727.619 512.764,809.363 513.324,819.419 513.883,813.289 514.442,777.168 515.001,740.913 515.561,741.087 516.12,721.116 516.679,735.45 517.238,701.288 517.798,702.576 518.357,732.249 518.916,732.484 519.475,763.239 520.035,792.892 520.594,789.097 521.153,788.298 521.712,782.868 522.272,778.316 522.831,775.93 523.39,742.889 523.949,724.709 524.509,710.826 525.068,680.547 525.627,681.906 526.186,697.967 526.746,651.158 527.305,653.044 527.864,688.29 528.423,673.965 528.983,696.988 529.542,700.405 530.101,715.398 530.66,746.251 531.22,725.923 531.779,725.436 532.338,741.868 532.897,738.522 533.457,735.044 534.016,733.936 534.575,749.861 535.134,730.42 535.694,761.995 536.253,775.678 536.812,738.111 537.371,737.774 537.931,736.256 538.49,737.323 539.049,770.149 539.608,764.259 540.168,745.782 540.727,727.069 541.286,690.804 541.845,694.115 542.405,663.18 542.964,651.632 543.523,623.156 544.082,642.497 544.642,649.039 545.201,633.604 545.76,671.389 546.319,659.123 546.879,676.956 547.438,728.504 547.997,733.261 548.556,748.559 549.116,778.498 549.675,775.412 550.234,806.696 550.793,819.561 551.353,797.892 551.912,774.012 552.471,754.165 553.031,784.566 553.59,762.09 554.149,759.408 554.708,758.923 555.268,754.647 555.827,757.622 556.386,707.26 556.945,708.86 557.505,695.566 558.064,715.236 558.623,713.778 559.182,712.146 559.742,709.59 560.301,742.953 560.86,804.906 561.419,769.974 561.979,749.231 562.538,716.233 563.097,783.149 563.656,808.839 564.216,790.659 564.775,772.635 565.334,755.351 565.893,736.674 566.453,749.352 567.012,746.493 567.571,759.98 568.13,741.099 568.69,721.868 569.249,672.437 569.808,674.442 570.367,677.32 570.927,677.857 571.486,632.225 572.045,638.022 572.604,625.178 573.164,628.679 573.723,631.861 574.282,652.433 574.841,641.183 575.401,644.982 575.96,601.257 576.519,606.31 577.078,595.248 577.638,618.358 578.197,639.439 578.756,626.032 579.315,628.359 579.875,665.649 580.434,652.432 580.993,641.247 581.552,661.579 582.112,682.185 582.671,701.562 583.23,703.504 583.789,687.652 584.349,690.392 584.908,693.691 585.467,710.838 586.026,725.77 586.586,711.732 587.145,680.783 587.704,684.654 588.263,683.798 588.823,685.071 589.382,698.731 589.941,696.379 590.5,695.207 591.06,697.049 591.619,720.026 592.178,720.022 592.737,735.497 593.297,731.425 593.856,699.749 594.415,680.741 594.974,698.949 595.534,714.377 596.093,697.26 596.652,682.167 597.211,699.809 597.771,717.368 598.33,720.097 598.889,672.494 599.448,690.032 600.008,675.267 600.567,675.301 601.126,677.798 601.685,690.597 602.245,669.514 602.804,686.485 603.363,703.44 603.922,738.171 604.482,737.803 605.041,703.651 605.6,699.902 606.159,683.926 606.719,700.247 607.278,733.818 607.837,715.4 608.396,683.236 608.956,682.256 609.515,682.772 610.074,700.45 610.633,719.586 611.193,734.237 611.752,702.745 612.311,737.534 612.87,766.218 613.43,748.239 613.989,729.08 614.548,712.158 615.107,697.196 615.667,699.369 616.226,717.825 616.785,717.19 617.344,671.457 617.904,626.353 618.463,649.45 619.022,652.229 619.581,641.005 620.141,658.06 620.7,644.918 621.259,631.983 621.818,635.16 622.378,654.694 622.937,661.42 623.496,632.152 624.055,639.298 624.615,629.755 625.174,650.836 625.733,654.044 626.292,621.671 626.852,607.1 627.411,627.622 627.97,650.246 628.529,654.462 629.089,643.565 629.648,615.829 630.207,621.923 630.766,659.69 631.326,647.243 631.885,617.448 632.444,638.68 633.003,639.936 633.563,628.056 634.122,663.395 634.681,667.464 635.24,702.106 635.8,686.715 636.359,703.669 636.918,722.684 637.477,736.971 638.037,753.158 638.596,749.406 639.155,731.754 639.714,729.244 640.274,729.292 640.833,712.887 641.392,710.617 641.951,728.386 642.511,742.579 643.07,739.823 643.629,738.326 644.188,720.652 644.748,717.465 645.307,702.642 645.866,701.827 646.425,715.38 646.985,700.254 647.544,701.71 648.103,717.216 648.662,749.902 649.222,763.914 649.781,789.236 650.34,786.643 650.899,796.282 651.459,774.877 652.018,735.855 652.577,717.661 653.136,775.293 653.696,791.69 654.255,736.044 654.814,719.393 655.373,667.57 655.933,684.444 656.492,685.5 657.051,670.321 657.61,688.007 658.17,688.1 658.729,673.748 659.288,709.053 659.847,741.386 660.407,693.31 660.966,727.051 661.525,691.265 662.084,688.731 662.644,692.632 663.203,692.655 663.762,691.501 664.321,709.453 664.881,724.575 665.44,723.171 665.999,719.657 666.558,717.632 667.118,749.086 667.677,746.198 668.236,725.811 668.795,722.639 669.355,749.958 669.914,712.853 670.473,711.576 671.032,744.342 671.592,759.397 672.151,772.933 672.71,780.598 673.269,760.018 673.829,757.368 674.388,733.911 674.947,798.488 675.506,794.752 676.066,757.088 676.625,721.182 677.184,736.424 677.743,717.64 678.303,701.736 678.862,717.861 679.421,763.993 679.981,696.296 680.54,698.086 681.099,695.064 681.658,707.624 682.218,691.791 682.777,706.064 683.336,688.477 683.895,684.407 684.455,683.073 685.014,685.512 685.573,670.879 686.132,671.37 686.692,692.022 687.251,689.595 687.81,658.273 688.369,644.243 688.929,694.043 689.488,697.639 690.047,649.202 690.606,646.354 691.166,612.211 691.725,616.782 692.284,624.089 692.843,625.377 693.403,629.076 693.962,612.658 694.521,631.387 695.08,682.033 695.64,664.771 696.199,666.291 696.758,687.586 697.317,701.725 697.877,720.23 698.436,750.005 698.995,746.244 699.554,725.393 700.114,710.372 700.673,680.205 701.232,710.524 701.791,741.685 702.351,773.112 702.91,751.691 703.469,731.799 704.028,713.412 704.588,698.364 705.147,649.672 705.706,623.018 706.265,607.998 706.825,627.388 707.384,615.368 707.943,631.431 708.502,617.997 709.062,655.624 709.621,643.482 710.18,648.399 710.739,648.205 711.299,666.139 711.858,664.276 712.417,632.4 712.976,634.863 713.536,585.895 714.095,591.303 714.654,597.651 715.213,616.283 715.773,606.934 716.332,615.024 716.891,622.097 717.45,624.947 718.01,648.127 718.569,668.023 719.128,652.037 719.687,671.051 720.247,670.981 720.806,674.363 721.365,659.607 721.924,709.289 722.484,707.773 723.043,738.87 723.602,767.598 724.161,746.849 724.721,729.442 725.28,745.594 725.839,738.496 726.398,724.287 726.958,721.299 727.517,719.406 728.076,701.773 728.635,716.634 729.195,731.964 729.754,748.889 730.313,731.028 730.872,714.391 731.432,713.694 731.991,712.499 732.55,694.658 733.109,678.457 733.669,678.619 734.228,676.621 734.787,664.612 735.346,631.744 735.906,617.3 736.465,603.939 737.024,624.662 737.583,642.351 738.143,663.613 738.702,683.275 739.261,683.235 739.82,670.358 740.38,684.227 740.939,698.791 741.498,663.07 742.057,647.24 742.617,630.232 743.176,632.076 743.735,648.069 744.294,684.035 744.854,667.547 745.413,683.734 745.972,700.787 746.531,700.702 747.091,713.288 747.65,760.929 748.209,723.997 748.768,741.024 749.328,758.773 749.887,805.989 750.446,797.287 751.005,775.178 751.565,754.335 752.124,764.616 752.683,776.355 753.242,769.241 753.802,765.364 754.361,778.235 754.92,758.334 755.479,707.515 756.039,706.607 756.598,686.538 757.157,671.952 757.716,689.802 758.276,704.219 758.835,686.026 759.394,670.095 759.953,654.822 760.513,654.983 761.072,674.168 761.631,657.583 762.19,658.268 762.75,642.399 763.309,615.101 763.868,636.031 764.427,640.648 764.987,658.232 765.546,674.439 766.105,694.211 766.664,673.382 767.224,673.57 767.783,724.707 768.342,740.207 768.901,738.459 769.461,750.937 770.02,764.295 770.579,775.295 771.138,737.919 771.698,766.255 772.257,763.998 772.816,742.966 773.375,769.835 773.935,766.318 774.494,794.174 775.053,804.387 775.612,766.844 776.172,744.916 776.731,727.11 777.29,709.397 777.849,693.444 778.409,665.178 778.968,652.307 779.527,637.741 780.086,655.871 780.646,659.448 781.205,660.775 781.764,661.65 782.323,680.457 782.883,650.865 783.442,667.495 784.001,700.047 784.56,745.966 785.12,741.993 785.679,722.702 786.238,739.014 786.797,735.266 787.357,780.154 787.916,757.399 788.475,738.513 789.034,734.995 789.594,716.545 790.153,713.934 790.712,729.885 791.271,775.155 791.831,757.977 792.39,753.739 792.949,686.912 793.508,620.157 794.068,610.648 794.627,615.619 795.186,599.459 795.745,589.893 796.305,560.229 796.864,569.921 797.423,590.109 797.982,564.027 798.542,599.829 799.101,618.029 799.66,638.74 800.219,607.628 800.779,629.934 801.338,632.895 801.897,639.042 802.456,659.186 803.016,660.494 803.575,678.577 804.134,664.364 804.693,652.011 805.253,633.377 805.812,639.724 806.371,643.435 806.931,601.224 807.49,639.551 808.049,624.412 808.608,627.623 809.168,614.173 809.727,619.69 810.286,639.253 810.845,641.075 811.405,660.316 811.964,679.726 812.523,697.91 813.082,695.51 813.642,695.936 814.201,742.208 814.76,740.391 815.319,753.909 815.879,781.651 816.438,780.862 816.997,793.416 817.556,773.664 818.116,769.176 818.675,763.664 819.234,744.047 819.793,758.842 820.353,756.106 820.912,770.706 821.471,769.412 822.03,764.104 822.59,792.834 823.149,772.271 823.708,769.65 824.267,763.94 824.827,743.408 825.386,725.679 825.945,741.736 826.504,736.748 827.064,702.234 827.623,685.697 828.182,701.441 828.741,702.441 829.301,649.504 829.86,667.755 830.419,683.94 830.978,698.582 831.538,698.978 832.097,727.493 832.656,695.333 833.215,675.663 833.775,689.349 834.334,673.951 834.893,708.265 835.452,689.852 836.012,704.158 836.571,689.581 837.13,704.363 837.689,702.218 838.249,717.741 838.808,711.124 839.367,723.048 839.926,720.891 840.486,688.44 841.045,671.388 841.604,651.917 842.163,656.689 842.723,625.426 843.282,630.348 843.841,636.365 844.4,619.72 844.96,638.335 845.519,659.716 846.078,662.24 846.637,663.103 847.197,665.866 847.756,714.954 848.315,730.297 848.874,712.301 849.434,713.099 849.993,727.687 850.552,744.885 851.111,692.445 851.671,693.057 852.23,691.745 852.789,657.385 853.348,661.537 853.908,681.182 854.467,717.127 855.026,719.609 855.585,717.051 856.145,696.441 856.704,695.075 857.263,680.526 857.822,678.602 858.382,711.647 858.941,697.055 859.5,680.613 860.059,678.924 860.619,696.845 861.178,679.665 861.737,725.418 862.296,724.638 862.856,719.97 863.415,700.287 863.974,685.009 864.533,666.938 865.093,683.146 865.652,664.079 866.211,665.549 866.77,668.02 867.33,634.419 867.889,642.592 868.448,661.616 869.007,660.671 869.567,678.393 870.126,663.222 870.685,681.434 871.244,713.709 871.804,697.543 872.363,714.285 872.922,712.716 873.481,692.53 874.041,691.972 874.6,674.701 875.159,689.248 875.718,754.309 876.278,736.385 876.837,733.672 877.396,716.78 877.955,700.533 878.515,684.748 879.074,713.39 879.633,682.849 880.192,699.79 880.752,683.434 881.311,685.442 881.87,670.048 882.429,669.978 882.989,687.517 883.548,738.452 884.107,737.106 884.666,720.982 885.226,688.417 885.785,687.434 886.344,690.483 886.903,674.464 887.463,671.85 888.022,691.44 888.581,691.18 889.14,694.958 889.7,679.874 890.259,632.981 890.818,620.488 891.377,624.314 891.937,647.302 892.496,679.311 893.055,680.768 893.614,703.07 894.174,666.497 894.733,686.491 895.292,668.886 895.851,656.004 896.411,639.017 896.97,639.675 897.529,643.023 898.088,645.456 898.648,614.225 899.207,585.568 899.766,607.443 900.325,611.451 900.885,599.633 901.444,554.195 902.003,559.975 902.562,565.855 903.122,553.45 903.681,577.867 904.24,549.358 904.799,590.549 905.359,614.537 905.918,636.662 906.477,620.208 907.036,656.772 907.596,659.877 908.155,645.844 908.714,648.586 909.273,634.57 909.833,650.855 910.392,682.435 910.951,683.659 911.51,717.601 912.07,730.141 912.629,724.65 913.188,684.624 913.747,667.962 914.307,654.851 914.866,673.427 915.425,672.901 915.984,672.255 916.544,705.591 917.103,703.185 917.662,700.838 918.221,698.327 918.781,682.327 919.34,681.411 919.899,665.416 920.458,650.53 921.018,667.313 921.577,651.792 922.136,702.124 922.695,719.487 923.255,703.12 923.814,685.526 924.373,701.978 924.932,717.087 925.492,715.031 926.051,697.865 926.61,713.082 927.169,741.62 927.729,754.704 928.288,749 928.847,764.567 929.406,761.773 929.966,744.768 930.525,761.489 931.084,741.818 931.644,724.463 932.203,738.519 932.762,750.99 933.321,730.897 933.881,774.259 934.44,820.02 934.999,765.133 935.558,747.935 936.118,761.612 936.677,726.182 937.236,707.891 937.795,706.925 938.355,725.126 938.914,756.761 939.473,815.834 940.032,810.318 940.592,818.759 941.151,825.579 941.71,786.175 942.269,751.479 942.829,744.387 943.388,769.642 943.947,778.959 944.506,785.806 945.066,808.313 945.625,770.611 946.184,763.504 946.743,742.629 947.303,771.282 947.862,755.217 948.421,749.036 948.98,745.218 949.54,711.114 950.099,741.063 950.658,722.879 951.217,736.192 951.777,733.955 952.336,728.777 952.895,710.306 953.454,708.098 954.014,723.592 954.573,736.971 955.132,732.65 955.691,748.989 956.251,715.805 956.81,729.916 957.369,696.23 957.928,729.419 958.488,699.094 959.047,700.703 959.606,730.018 960.165,710.046 960.725,710.504 961.284,691.967 961.843,690.067 962.402,689.721 962.962,688.656 963.521,704.431 964.08,669.528 964.639,651.389 965.199,681.338 965.758,678.322 966.317,662.445 966.876,647.347 967.436,667.314 967.995,633.801 968.554,666.1 969.113,667.215 969.673,702.592 970.232,733.122 970.791,682.479 971.35,650.114 971.91,647.338 972.469,633.604 973.028,636.013 973.587,606.671 974.147,645.519 974.706,645.14 975.265,632.306 975.824,605.12 976.384,608.069 976.943,580.137 977.502,601.22 978.061,605.93 978.621,641.909 979.18,642.998 979.739,611.203 980.298,598.094 980.858,571.344 981.417,593.877 981.976,614.938 982.535,634.161 983.095,635.249 983.654,651.598 984.213,636.387 984.772,640.013 985.332,658.937 985.891,673.299 986.45,690.579 987.009,706.475 987.569,704.655 988.128,716.208 988.687,696.962 989.246,680.82 989.806,649.071 990.365,648.451 990.924,685.411 991.483,688.095 992.043,684.956 992.602,681.351 993.161,683.861 993.72,621.658 994.28,609.984 994.839,616.417 995.398,635.333 995.957,652.534 996.517,652.4 997.076,626.65 997.635,631.058 998.194,647.598 998.754,632.717 999.313,649.075 999.872,651.806 1000.43,655.555 1000.99,672.181 1001.55,686.951 1002.11,701.986 1002.67,702.579 1003.23,700.212 1003.79,697.686 1004.35,664.348 1004.91,684.838 1005.46,665.928 1006.02,683.503 1006.58,682.625 1007.14,664.598 1007.7,667.91 1008.26,654.099 1008.82,655.388 1009.38,673.545 1009.94,658.871 1010.5,708.342 1011.06,723.997 1011.62,738.852 1012.18,705.659 1012.73,638.439 1013.29,642.014 1013.85,627.909 1014.41,633.564 1014.97,657.659 1015.53,662.734 1016.09,683.124 1016.65,696.75 1017.21,743.345 1017.77,774.225 1018.33,768.759 1018.89,764.3 1019.45,760.547 1020.01,772.54 1020.56,748.411 1021.12,711.289 1021.68,694.349 1022.24,677.961 1022.8,678.213 1023.36,665.412 1023.92,653.581 1024.48,653.097 1025.04,686.276 1025.6,688.016 1026.16,686.389 1026.72,653.618 1027.28,624.55 1027.83,628.331 1028.39,634.365 1028.95,638.208 1029.51,660.432 1030.07,631.427 1030.63,651.284 1031.19,656.806 1031.75,660.501 1032.31,678.148 1032.87,664.873 1033.43,664.102 1033.99,664.152 1034.55,666.526 1035.1,684.993 1035.66,636.625 1036.22,623.662 1036.78,622.423 1037.34,625.44 1037.9,640.076 1038.46,644.874 1039.02,653.064 1039.58,672.097 1040.14,640.281 1040.7,644.408 1041.26,645.1 1041.82,647.32 1042.38,684.058 1042.93,684.567 1043.49,684.805 1044.05,633.854 1044.61,639.857 1045.17,642.005 1045.73,650.003 1046.29,653.812 1046.85,671.816 1047.41,671.52 1047.97,688.532 1048.53,691.753 1049.09,693.869 1049.65,726.886 1050.2,697.267 1050.76,695.518 1051.32,696.602 1051.88,713.683 1052.44,696.228 1053,682.008 1053.56,682.135 1054.12,682.736 1054.68,733.709 1055.24,744.928 1055.8,723.705 1056.36,705.707 1056.92,704.286 1057.48,701.353 1058.03,686.24 1058.59,714.456 1059.15,714.822 1059.71,761.437 1060.27,758.698 1060.83,770.277 1061.39,799.473 1061.95,759.504 1062.51,740.882 1063.07,752.917 1063.63,752.996 1064.19,748.012 1064.75,725.911 1065.3,739.236 1065.86,721.576 1066.42,686.361 1066.98,686.919 1067.54,719.239 1068.1,713.955 1068.66,680.112 1069.22,660.664 1069.78,659.539 1070.34,676.097 1070.9,658.542 1071.46,627.44 1072.02,612.367 1072.57,598.981 1073.13,620.208 1073.69,621.535 1074.25,637.506 1074.81,623.765 1075.37,645.037 1075.93,647.691 1076.49,631.582 1077.05,667.731 1077.61,672.367 1078.17,656.997 1078.73,674.042 1079.29,672.276 1079.85,669.581 1080.4,670.319 1080.96,701.847 1081.52,715.914 1082.08,728.595 1082.64,691.058 1083.2,688.627 1083.76,672.219 1084.32,640.428 1084.88,643.019 1085.44,612.926 1086,599.684 1086.56,601.266 1087.12,602.821 1087.67,558.065 1088.23,565.499 1088.79,621.42 1089.35,611.244 1089.91,632.742 1090.47,652.243 1091.03,653.992 1091.59,698.004 1092.15,667.708 1092.71,652.706 1093.27,610.732 1093.83,610.482 1094.39,614.419 1094.94,633.064 1095.5,636.221 1096.06,638.526 1096.62,657.554 1097.18,627.279 1097.74,629.588 1098.3,634.089 1098.86,637.356 1099.42,639.212 1099.98,641.461 1100.54,657.559 1101.1,662.211 1101.66,683.3 1102.22,685.742 1102.77,704.361 1103.33,705.255 1103.89,670.838 1104.45,656.468 1105.01,687.959 1105.57,686.499 1106.13,734.226 1106.69,727.453 1107.25,726.897 1107.81,693.146 1108.37,690.422 1108.93,690.469 1109.49,706.058 1110.04,704.622 1110.6,702.936 1111.16,700.627 1111.72,700.823 1112.28,716.538 1112.84,713.567 1113.4,679.189 1113.96,695.076 1114.52,694.567 1115.08,710.329 1115.64,759.59 1116.2,757.191 1116.76,753.199 1117.31,770.083 1117.87,765.596 1118.43,716.592 1118.99,747.477 1119.55,776.048 1120.11,770.278 1120.67,781.377 1121.23,775.185 1121.79,707.061 1122.35,755.73 1122.91,764.844 1123.47,761.993 1124.03,725.004 1124.59,754.313 1125.14,749.027 1125.7,730.506 1126.26,725.046 1126.82,718.787 1127.38,716.881 1127.94,713.626 1128.5,698.956 1129.06,651.687 1129.62,668.339 1130.18,664.934 1130.74,679.163 1131.3,679.532 1131.86,679.085 1132.41,646.655 1132.97,650.991 1133.53,668.172 1134.09,666.38 1134.65,664.116 1135.21,650.625 1135.77,654.789 1136.33,691.609 1136.89,656.257 1137.45,690.77 1138.01,721.553 1138.57,722.303 1139.13,672.934 1139.68,704.649 1140.24,686.741 1140.8,719.848 1141.36,749.861 1141.92,795.517 1142.48,774.865 1143.04,785.98 1143.6,777.693 1144.16,757.239 1144.72,719.725 1145.28,717.764 1145.84,715.189 1146.4,696.169 1146.96,664.007 1147.51,663.525 1148.07,695.075 1148.63,696.113 1149.19,663.519 1149.75,648.303 1150.31,631.798 1150.87,618.19 1151.43,616.137 1151.99,649.814 1152.55,670.43 1153.11,669.813 1153.67,653.629 1154.23,656.047 1154.78,658.699 1155.34,628.496 1155.9,615.701 1156.46,620.895 1157.02,621.949 1157.58,607.956 1158.14,594.565 1158.7,599.78 1159.26,587.654 1159.82,593.35 1160.38,617.685 1160.94,608.018 1161.5,645.34 1162.05,634.962 1162.61,683.847 1163.17,700.108 1163.73,664.364 1164.29,684.345 1164.85,702.593 1165.41,703.156 1165.97,701.731 1166.53,734.103 1167.09,729.235 1167.65,728.454 1168.21,711.538 1168.77,727.855 1169.33,695.92 1169.88,661.77 1170.44,695.08 1171,679.827 1171.56,686.697 1172.12,670.594 1172.68,704.468 1173.24,700.191 1173.8,683.222 1174.36,696.569 1174.92,710.288 1175.48,725.914 1176.04,742.325 1176.6,755.343 1177.15,751.434 1177.71,731.077 1178.27,730.328 1178.83,680.101 1179.39,662.695 1179.95,644.407 1180.51,660.758 1181.07,662.631 1181.63,664.982 1182.19,666.13 1182.75,667.496 1183.31,652.147 1183.87,667.957 1184.43,663.658 1184.98,680.124 1185.54,691.93 1186.1,722.094 1186.66,689.506 1187.22,689.823 1187.78,657.523 1188.34,630.295 1188.9,650.456 1189.46,634.432 1190.02,635.231 1190.58,647.317 1191.14,665.728 1191.7,664.747 1192.25,665.462 1192.81,712.412 1193.37,709.74 1193.93,723.329 1194.49,723.923 1195.05,717.323 1195.61,704.253 1196.17,717.674 1196.73,714.623 1197.29,698.309 1197.85,698.324 1198.41,699.179 1198.97,714.254 1199.52,709.022 1200.08,676.074 1200.64,707.423 1201.2,721.871 1201.76,734.241 1202.32,747.606 1202.88,744.15 1203.44,738.298 1204,720.354 1204.56,703.066 1205.12,717.59 1205.68,718.194 1206.24,714.179 1206.8,712.523 1207.35,710.609 1207.91,710.333 1208.47,708.327 1209.03,705.395 1209.59,706.822 1210.15,693.469 1210.71,693.758 1211.27,693.983 1211.83,678.328 1212.39,648.609 1212.95,650.912 1213.51,651.022 1214.07,699.228 1214.62,680.257 1215.18,679.169 1215.74,660.338 1216.3,617.322 1216.86,620.947 1217.42,623.669 1217.98,629.169 1218.54,632.826 1219.1,636.092 1219.66,659.669 1220.22,695.222 1220.78,731.021 1221.34,732.83 1221.89,733.21 1222.45,732.46 1223.01,713.467 1223.57,694.933 1224.13,712.046 1224.69,744.017 1225.25,758.631 1225.81,757.301 1226.37,755.192 1226.93,766.541 1227.49,761.978 1228.05,773.593 1228.61,817.022 1229.17,810.18 1229.72,817.739 1230.28,810.957 1230.84,804.72 1231.4,781.58 1231.96,805.323 1232.52,801.536 1233.08,797.636 1233.64,743.873 1234.2,721.9 1234.76,720.895 1235.32,685.858 1235.88,669.699 1236.44,665.099 1236.99,661.995 1237.55,662.676 1238.11,696.898 1238.67,694.791 1239.23,675.474 1239.79,692.112 1240.35,658.815 1240.91,626.508 1241.47,631.002 1242.03,664.961 1242.59,666.175 1243.15,682.524 1243.71,666.809 1244.26,632.414 1244.82,619.802 1245.38,608.499 1245.94,596.73 1246.5,629.969 1247.06,635.083 1247.62,651.576 1248.18,640.492 1248.74,626.999 1249.3,643.952 1249.86,682.986 1250.42,714.243 1250.98,694.685 1251.54,677.107 1252.09,676.857 1252.65,663.467 1253.21,650.116 1253.77,670.781 1254.33,685.008 1254.89,686.957 1255.45,704.649 1256.01,704.643 1256.57,672.391 1257.13,654.35 1257.69,655.865 1258.25,660.238 1258.81,660.598 1259.36,659.283 1259.92,661.983 1260.48,681.174 1261.04,665.478 1261.6,684.069 1262.16,684.631 1262.72,700.697 1263.28,718.89 1263.84,716.657 1264.4,683.116 1264.96,699.442 1265.52,712.662 1266.08,705.734 1266.63,691.025 1267.19,691.637 1267.75,687.652 1268.31,704.913 1268.87,704.655 1269.43,703.583 1269.99,701.421 1270.55,717.905 1271.11,716.447 1271.67,696.109 1272.23,678.42 1272.79,646.953 1273.35,648.557 1273.91,634.191 1274.46,638.825 1275.02,685.966 1275.58,672.484 1276.14,658.58 1276.7,644.547 1277.26,598.357 1277.82,606.398 1278.38,615.52 1278.94,618.348 1279.5,632.821 1280.06,622.274 1280.62,622.417 1281.18,610.411 1281.73,632.307 1282.29,617.829 1282.85,572.718 1283.41,590.65 1283.97,564.555 1284.53,572.325 1285.09,562.716 1285.65,567.307 1286.21,591.239 1286.77,594.462 1287.33,572.151 1287.89,562.971 1288.45,550.701 1289,590.864 1289.56,593.468 1290.12,619.281 1290.68,622.531 1291.24,643.1 1291.8,659.63 1292.36,676.154 1292.92,663.727 1293.48,661.725 1294.04,695.094 1294.6,695.192 1295.16,693.24 1295.72,755.84 1296.28,720.97 1296.83,698.553 1297.39,714.61 1297.95,713.441 1298.51,697.689 1299.07,692.357 1299.63,676.267 1300.19,695.379 1300.75,709.933 1301.31,709.319 1301.87,725.836 1302.43,756.123 1302.99,779.782 1303.55,728.087 1304.1,741.056 1304.66,740.831 1305.22,707.05 1305.78,701.496 1306.34,701.851 1306.9,673.097 1307.46,641.325 1308.02,623.396 1308.58,626.88 1309.14,681.979 1309.7,680.155 1310.26,695.383 1310.82,698.05 1311.38,696.749 1311.93,696.247 1312.49,692.366 1313.05,722.226 1313.61,703.337 1314.17,686.533 1314.73,687.948 1315.29,668.923 1315.85,668.743 1316.41,669.448 1316.97,657.664 1317.53,660.154 1318.09,611.618 1318.65,616.37 1319.2,652.095 1319.76,637.828 1320.32,624.354 1320.88,626.189 1321.44,629.98 1322,630.666 1322.56,631.855 1323.12,635.948 1323.68,671.527 1324.24,688.63 1324.8,723.246 1325.36,735.777 1325.92,735.156 1326.47,729.933 1327.03,713.537 1327.59,727.19 1328.15,757.661 1328.71,736.029 1329.27,684.554 1329.83,683.194 1330.39,667.75 1330.95,685.702 1331.51,686.443 1332.07,704.343 1332.63,703.022 1333.19,688.345 1333.75,702.793 1334.3,685.024 1334.86,669.5 1335.42,670.283 1335.98,668.659 1336.54,701.26 1337.1,699.206 1337.66,729.678 1338.22,741.5 1338.78,736.878 1339.34,718.95 1339.9,735.47 1340.46,730.946 1341.02,726.755 1341.57,770.511 1342.13,781.648 1342.69,809.648 1343.25,801.432 1343.81,810.04 1344.37,803.092 1344.93,762.02 1345.49,771.415 1346.05,798.488 1346.61,805.355 1347.17,797.902 1347.73,809.207 1348.29,740.352 1348.84,716.994 1349.4,700.442 1349.96,666.373 1350.52,680.998 1351.08,699.915 1351.64,682.048 1352.2,681.439 1352.76,680.221 1353.32,731.748 1353.88,698.273 1354.44,663.92 1355,680.405 1355.56,682.229 1356.12,670.559 1356.67,703.486 1357.23,721.114 1357.79,704.257 1358.35,723.011 1358.91,705.407 1359.47,721.757 1360.03,751.795 1360.59,751.964 1361.15,767.322 1361.71,796.248 1362.27,824.577 1362.83,798.109 1363.39,808.037 1363.94,767.941 1364.5,794.185 1365.06,804.193 1365.62,814.204 1366.18,790.025 1366.74,797.568 1367.3,760.692 1367.86,739.735 1368.42,734.353 1368.98,760.551 1369.54,771.33 1370.1,765.907 1370.66,759.879 1371.21,771.938 1371.77,815.092 1372.33,791.097 1372.89,788.274 1373.45,762.958 1374.01,778.853 1374.57,724.967 1375.13,738.487 1375.69,720.988 1376.25,702.805 1376.81,699.563 1377.37,716.94 1377.93,648.542 1378.49,662.919 1379.04,675.051 1379.6,639.043 1380.16,606.598 1380.72,608.94 1381.28,632.172 1381.84,653.31 1382.4,635.292 1382.96,651.123 1383.52,667.596 1384.08,652.742 1384.64,668.724 1385.2,604.099 1385.76,588.199 1386.31,596.444 1386.87,586.6 1387.43,574.013 1387.99,528.884 1388.55,553.375 1389.11,543.225 1389.67,519.166 1390.23,543.124 1390.79,566.414 1391.35,574.396 1391.91,580.408 1392.47,623.541 1393.03,644.952 1393.58,650.367 1394.14,652.485 1394.7,675.267 1395.26,677.84 1395.82,679.442 1396.38,679.08 1396.94,677.145 1397.5,644.466 1398.06,647.542 1398.62,619.987 1399.18,624.93 1399.74,628.294 1400.3,645.829 1400.86,650.024 1401.41,716.146 1401.97,713.594 1402.53,714.127 1403.09,634.854 1403.65,633.908 1404.21,637.418 1404.77,624.667 1405.33,645.612 1405.89,650.074 1406.45,619.309 1407.01,576.789 1407.57,585.44 1408.13,625.504 1408.68,658.771 1409.24,693.472 1409.8,706.918 1410.36,707.032 1410.92,751.805 1411.48,735.781 1412.04,734.02 1412.6,727.866 1413.16,726.532 1413.72,689.93 1414.28,707.202 1414.84,688.396 1415.4,685.155 1415.95,687.246 1416.51,704.169 1417.07,704.925 1417.63,705.709 1418.19,720.043 1418.75,718.284 1419.31,730.879 1419.87,760.252 1420.43,773.147 1420.99,753.357 1421.55,729.239 1422.11,731.288 1422.67,730.421 1423.23,683.666 1423.78,650.873 1424.34,635.891 1424.9,640.167 1425.46,657.657 1426.02,640.714 1426.58,625.637 1427.14,627.495 1427.7,597.015 1428.26,601.841 1428.82,622.134 1429.38,639.26 1429.94,625.142 1430.5,609.672 1431.05,598.13 1431.61,621.379 1432.17,624.583 1432.73,611.892 1433.29,617.339 1433.85,635.733 1434.41,640.034 1434.97,678.344 1435.53,678.549 1436.09,661.673 1436.65,664.135 1437.21,633.316 1437.77,638.1 1438.33,656.423 1438.88,643.629 1439.44,627.949 1440,632.56 1440.56,635.941 1441.12,640.054 1441.68,660.122 1442.24,649.736 1442.8,639.695 1443.36,641.382 1443.92,646.42 1444.48,682.163 1445.04,697.174 1445.6,713.159 1446.15,696.477 1446.71,714.738 1447.27,697.649 1447.83,712.379 1448.39,680.666 1448.95,681.684 1449.51,684.111 1450.07,699.231 1450.63,683.958 1451.19,681.633 1451.75,664.47 1452.31,653.381 1452.87,653.59 1453.42,656.063 1453.98,672.114 1454.54,673.044 1455.1,672.438 1455.66,670.371 1456.22,670.351 1456.78,701.15 1457.34,689.763 1457.9,755.164 1458.46,754.079 1459.02,735.618 1459.58,733.743 1460.14,714.704 1460.7,729.427 1461.25,706.522 1461.81,723.75 1462.37,724.204 1462.93,769.877 1463.49,781.351 1464.05,775.757 1464.61,771.995 1465.17,799.182 1465.73,758.82 1466.29,736.511 1466.85,731.455 1467.41,760.105 1467.97,755.742 1468.52,782.716 1469.08,779.738 1469.64,791.748 1470.2,753.136 1470.76,730.24 1471.32,714.544 1471.88,695.725 1472.44,710.85 1473,729.843 1473.56,710.151 1474.12,709.045 1474.68,692.355 1475.24,659.955 1475.79,646.054 1476.35,679.839 1476.91,680.62 1477.47,679.282 1478.03,694.402 1478.59,710.275 1479.15,707.751 1479.71,722.156 1480.27,719.501 1480.83,715.41 1481.39,710.879 1481.95,695.891 1482.51,710.991 1483.07,692.005 1483.62,706.277 1484.18,722.699 1484.74,716.759 1485.3,732 1485.86,730.317 1486.42,728.774 1486.98,710.413 1487.54,738.417 1488.1,768.775 1488.66,715.27 1489.22,730.241 1489.78,709.464 1490.34,709.903 1490.89,738.655 1491.45,779.906 1492.01,793.659 1492.57,771.226 1493.13,784.56 1493.69,814.583 1494.25,806.323 1494.81,800.683 1495.37,793.311 1495.93,818.573 1496.49,830.03 1497.05,805.868 1497.61,782.533 1498.16,759.101 1498.72,721.834 1499.28,752.615 1499.84,752.502 1500.4,748.434 1500.96,713.922 1501.52,713.046 1502.08,682.527 1502.64,681.779 1503.2,681.273 1503.76,664.166 1504.32,694.723 1504.88,711.595 1505.44,648.994 1505.99,700 1506.55,717.4 1507.11,735.142 1507.67,666.151 1508.23,633.471 1508.79,651.879 1509.35,671.37 1509.91,658.39 1510.47,658.813 1511.03,710.079 1511.59,723.924 1512.15,706.935 1512.71,704.286 1513.26,707.41 1513.82,691.736 1514.38,690.982 1514.94,690.908 1515.5,689.837 1516.06,655.097 1516.62,673.517 1517.18,687.04 1517.74,703.235 1518.3,734.288 1518.86,746.938 1519.42,739.596 1519.98,753.839 1520.53,765.239 1521.09,710.026 1521.65,673.748 1522.21,690.628 1522.77,656.086 1523.33,672.22 1523.89,642.307 1524.45,627.841 1525.01,616.213 1525.57,634.501 1526.13,670.074 1526.69,669.813 1527.25,655.597 1527.81,659.631 1528.36,679.443 1528.92,679.799 1529.48,679.628 1530.04,698.115 1530.6,699.915 1531.16,747.103 1531.72,709.859 1532.28,707.551 1532.84,687.495 1533.4,667.606 1533.96,653.985 1534.52,688.355 1535.08,686.064 1535.63,687.227 1536.19,686.457 1536.75,671.338 1537.31,655.286 1537.87,670.916 1538.43,686.417 1538.99,671.721 1539.55,688.165 1540.11,701.917 1540.67,681.683 1541.23,684.922 1541.79,701.469 1542.35,701.934 1542.9,683.121 1543.46,680.938 1544.02,712.388 1544.58,710.939 1545.14,694.233 1545.7,629.924 1546.26,680.66 1546.82,697.707 1547.38,664.398 1547.94,699.705 1548.5,666.438 1549.06,679.942 1549.62,698.017 1550.18,679.899 1550.73,664.682 1551.29,649.114 1551.85,616.742 1552.41,574.146 1552.97,563.738 1553.53,525.99 1554.09,516.491 1554.65,509.52 1555.21,518.84 1555.77,526.63 1556.33,552.931 1556.89,575.37 1557.45,612.504 1558,629.67 1558.56,649.588 1559.12,655.789 1559.68,640.868 1560.24,609.966 1560.8,630.648 1561.36,649.739 1561.92,665.477 1562.48,650.472 1563.04,652.394 1563.6,621.636 1564.16,625.68 1564.72,661.763 1565.28,661.215 1565.83,680.648 1566.39,680.551 1566.95,694.637 1567.51,692.083 1568.07,673.622 1568.63,676.479 1569.19,698.857 1569.75,717.869 1570.31,730.008 1570.87,729.232 1571.43,724.876 1571.99,721.631 1572.55,690.6 1573.1,692.737 1573.66,724.579 1574.22,724.166 1574.78,721.575 1575.34,735.607 1575.9,751.513 1576.46,748.076 1577.02,728.078 1577.58,741.233 1578.14,753.297 1578.7,689.52 1579.26,720.975 1579.82,686.407 1580.37,672.98 1580.93,688.799 1581.49,687.667 1582.05,686.22 1582.61,671.127 1583.17,670.967 1583.73,686.846 1584.29,703.539 1584.85,699.318 1585.41,697.131 1585.97,663.774 1586.53,650.861 1587.09,620.812 1587.65,672.625 1588.2,672.106 1588.76,690.07 1589.32,673.061 1589.88,738.424 1590.44,737.91 1591,731.944 1591.56,696.831 1592.12,678.525 1592.68,726.689 1593.24,741.347 1593.8,739.647 1594.36,753.987 1594.92,752.098 1595.47,763.043 1596.03,761.704 1596.59,756.072 1597.15,705.317 1597.71,736.689 1598.27,767.476 1598.83,780.185 1599.39,781.626 1599.95,793.814 1600.51,758.117 1601.07,751.214 1601.63,715.281 1602.19,696.696 1602.74,697.283 1603.3,664.451 1603.86,652.507 1604.42,667.463 1604.98,685.081 1605.54,652.231 1606.1,638.711 1606.66,652.949 1607.22,655.071 1607.78,641.362 1608.34,662.138 1608.9,664.65 1609.46,634.504 1610.02,639.317 1610.57,642.724 1611.13,673.71 1611.69,720.144 1612.25,719.241 1612.81,731.215 1613.37,735.384 1613.93,746.926 1614.49,732.222 1615.05,729.897 1615.61,710.798 1616.17,711.196 1616.73,742.1 1617.29,724.906 1617.84,676.03 1618.4,661.61 1618.96,664.051 1619.52,679.407 1620.08,666.215 1620.64,700.927 1621.2,680.775 1621.76,683.474 1622.32,714.342 1622.88,678.726 1623.44,681.376 1624,700.203 1624.56,703.611 1625.11,718.43 1625.67,736.53 1626.23,732.312 1626.79,711.793 1627.35,690.158 1627.91,670.864 1628.47,670.576 1629.03,653.421 1629.59,671.103 1630.15,700.523 1630.71,634.484 1631.27,641.147 1631.83,642.378 1632.39,631.701 1632.94,648.511 1633.5,648.946 1634.06,663.374 1634.62,712.781 1635.18,729.554 1635.74,693.813 1636.3,688.141 1636.86,656.666 1637.42,657.334 1637.98,658.58 1638.54,642.077 1639.1,661.386 1639.66,676.214 1640.21,657.374 1640.77,645.846 1641.33,646.375 1641.89,645.729 1642.45,645.529 1643.01,664.697 1643.57,666.205 1644.13,668.331 1644.69,667.662 1645.25,651.512 1645.81,686.344 1646.37,671.032 1646.93,656.381 1647.48,657.838 1648.04,642.51 1648.6,664.959 1649.16,666.057 1649.72,648.225 1650.28,635.891 1650.84,635.423 1651.4,633.544 1651.96,651.416 1652.52,651.976 1653.08,620.91 1653.64,640.836 1654.2,673.732 1654.76,676.507 1655.31,675.542 1655.87,663.294 1656.43,666.013 1656.99,682.032 1657.55,699.399 1658.11,731.019 1658.67,748.144 1659.23,725.555 1659.79,708.718 1660.35,706.328 1660.91,687.369 1661.47,684.847 1662.03,651.213 1662.58,653.482 1663.14,673.901 1663.7,708.794 1664.26,691.296 1664.82,705.028 1665.38,671.429 1665.94,658.795 1666.5,675.48 1667.06,641.45 1667.62,644.372 1668.18,661.486 1668.74,663.128 1669.3,662.36 1669.85,661.651 1670.41,695.676 1670.97,675.54 1671.53,674.343 1672.09,689.33 1672.65,671.662 1673.21,683.529 1673.77,650.614 1674.33,650.765 1674.89,667.691 1675.45,701.094 1676.01,701.561 1676.57,700.492 1677.13,715.692 1677.68,697.442 1678.24,700.069 1678.8,712.74 1679.36,710.506 1679.92,694.101 1680.48,655.38 1681.04,642.678 1681.6,643.773 1682.16,695.501 1682.72,678.545 1683.28,694.948 1683.84,711.241 1684.4,694.653 1684.95,665.869 1685.51,697.132 1686.07,696.569 1686.63,669.801 1687.19,686.348 1687.75,643.724 1688.31,662.843 1688.87,633.485 1689.43,640.503 1689.99,642.325 1690.55,631.203 1691.11,618.286 1691.67,604.024 1692.23,607.673 1692.78,612.437 1693.34,616.194 1693.9,620.348 1694.46,621.766 1695.02,622.376 1695.58,624.784 1696.14,644.829 1696.7,646.419 1697.26,648.715 1697.82,633.289 1698.38,652.995 1698.94,619.429 1699.5,654.429 1700.05,654.315 1700.61,669.061 1701.17,673.494 1701.73,690.594 1702.29,689.261 1702.85,687.238 1703.41,674.862 1703.97,708.355 1704.53,738.682 1705.09,721.168 1705.65,684.957 1706.21,667.75 1706.77,633.865 1707.32,652.099 1707.88,654.345 1708.44,670.402 1709,658.447 1709.56,642.336 1710.12,689.11 1710.68,672.869 1711.24,689.391 1711.8,687.362 1712.36,718.003 1712.92,731.161 1713.48,763.01 1714.04,758.658 1714.6,739.387 1715.15,738.21 1715.71,703.291 1716.27,703.691 1716.83,733.443 1717.39,746.505 1717.95,773.273 1718.51,785.615 1719.07,763.511 1719.63,756.864 1720.19,752.493 1720.75,732.921 1721.31,746.165 1721.87,708.401 1722.42,692.217 1722.98,673.039 1723.54,657.287 1724.1,657.094 1724.66,658.456 1725.22,626.649 1725.78,646.526 1726.34,697.341 1726.9,714.761 1727.46,729.957 1728.02,697.233 1728.58,699.172 1729.14,697.994 1729.69,699.205 1730.25,679.729 1730.81,680.75 1731.37,667.004 1731.93,650.54 1732.49,652.784 1733.05,640.416 1733.61,624.723 1734.17,613.012 1734.73,601.406 1735.29,618.423 1735.85,623.744 1736.41,659.11 1736.97,673.657 1737.52,676.104 1738.08,677.314 1738.64,756.068 1739.2,801.377 1739.76,779.622 1740.32,739.351 1740.88,753.312 1741.44,749.202 1742,759.949 1742.56,770.786 1743.12,795.714 1743.68,788.355 1744.24,816.339 1744.79,837.992 1745.35,829.862 1745.91,770.341 1746.47,716.751 1747.03,716.506 1747.59,714.539 1748.15,712.787 1748.71,710.905 1749.27,711.352 1749.83,725.331 1750.39,755.984 1750.95,751.52 1751.51,714.971 1752.06,693.001 1752.62,676.315 1753.18,643.721 1753.74,632.423 1754.3,602.539 1754.86,575.242 1755.42,594.67 1755.98,584.818 1756.54,558.115 1757.1,582.288 1757.66,604.91 1758.22,596.522 1758.78,586.733 1759.34,590.751 1759.89,580.325 1760.45,535.558 1761.01,593.472 1761.57,613.033 1762.13,617.752 1762.69,620.717 1763.25,640.689 1763.81,641.197 1764.37,660.011 1764.93,678.245 1765.49,662.651 1766.05,668.004 1766.61,685.788 1767.16,687.518 1767.72,689.299 1768.28,688.389 1768.84,723.398 1769.4,736.26 1769.96,766.261 1770.52,793.569 1771.08,738.929 1771.64,719.838 1772.2,715.353 1772.76,716.814 1773.32,699.067 1773.88,697.515 1774.43,681.416 1774.99,679.521 1775.55,663.335 1776.11,665.848 1776.67,680.926 1777.23,666.547 1777.79,653.245 1778.35,653.179 1778.91,653.925 1779.47,657.299 1780.03,625.739 1780.59,626.83 1781.15,632.803 1781.71,668.623 1782.26,704.053 1782.82,721.289 1783.38,686.354 1783.94,688.059 1784.5,691.88 1785.06,691.792 1785.62,708.015 1786.18,689.168 1786.74,704.251 1787.3,751.9 1787.86,733.712 1788.42,749.716 1788.98,699.617 1789.53,713.931 1790.09,696.224 1790.65,696.473 1791.21,696.347 1791.77,711.759 1792.33,727.091 1792.89,678.439 1793.45,681.323 1794.01,685.103 1794.57,703.234 1795.13,688.835 1795.69,660.302 1796.25,713.955 1796.8,650.531 1797.36,668.947 1797.92,651.709 1798.48,671.428 1799.04,673.002 1799.6,673.623 1800.16,686.055 1800.72,704.293 1801.28,736.047 1801.84,720.607 1802.4,718.214 1802.96,695.836 1803.52,761.353 1804.08,693.182 1804.63,626.218 1805.19,627.266 1805.75,648.347 1806.31,682.548 1806.87,665.66 1807.43,664.912 1807.99,648.934 1808.55,649.667 1809.11,653.894 1809.67,622.069 1810.23,641.666 1810.79,609.777 1811.35,646.746 1811.9,681.494 1812.46,682.947 1813.02,682.857 1813.58,695.162 1814.14,680.071 1814.7,678.157 1815.26,728.088 1815.82,740.384 1816.38,703.805 1816.94,749.625 1817.5,759.918 1818.06,770.255 1818.62,734.526 1819.18,714.955 1819.73,729.145 1820.29,706.229 1820.85,721.037 1821.41,687.476 1821.97,703.867 1822.53,668.514 1823.09,700.142 1823.65,681.497 1824.21,647.418 1824.77,635.94 1825.33,668.805 1825.89,653.784 1826.45,655.186 1827,673.21 1827.56,640.302 1828.12,673.855 1828.68,675.124 1829.24,676.653 1829.8,627.37 1830.36,634.806 1830.92,621.779 1831.48,610.75 1832.04,617.945 1832.6,653.306 1833.16,671.446 1833.72,639.779 1834.27,676.084 1834.83,678.329 1835.39,644.737 1835.95,662.961 1836.51,715.301 1837.07,700.005 1837.63,716.528 1838.19,716.857 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 690.396 L720.806 690.396 L721.365 690.396 L721.924 690.396 L722.484 690.396 L723.043 690.396 L723.602 690.396 L724.161 690.396 L724.721 690.396 L725.28 690.396 L725.839 690.396 L726.398 690.396 L726.958 690.396 L727.517 690.396 L728.076 690.396 L728.635 690.396 L729.195 690.396 L729.754 690.396 L730.313 690.396 L730.872 690.396 L731.432 690.396 L731.991 690.396 L732.55 690.396 L733.109 690.396 L733.669 690.396 L734.228 690.396 L734.787 690.396 L735.346 690.396 L735.906 690.396 L736.465 690.396 L737.024 690.396 L737.583 690.396 L738.143 690.396 L738.702 690.396 L739.261 690.396 L739.82 690.396 L740.38 690.396 L740.939 690.396 L741.498 690.396 L742.057 690.396 L742.617 690.396 L743.176 690.396 L743.735 690.396 L744.294 690.396 L744.854 690.396 L745.413 690.396 L745.972 690.396 L746.531 690.396 L747.091 690.396 L747.65 690.396 L748.209 690.396 L748.768 690.396 L749.328 690.396 L749.887 690.396 L750.446 690.396 L751.005 690.396 L751.565 690.396 L752.124 690.396 L752.683 690.396 L753.242 690.396 L753.802 690.396 L754.361 690.396 L754.92 690.396 L755.479 690.396 L756.039 690.396 L756.598 690.396 L757.157 690.396 L757.716 690.396 L758.276 690.396 L758.835 690.396 L759.394 690.396 L759.953 690.396 L760.513 690.396 L761.072 690.396 L761.631 690.396 L762.19 690.396 L762.75 690.396 L763.309 690.396 L763.868 690.396 L764.427 690.396 L764.987 690.396 L765.546 690.396 L766.105 690.396 L766.664 690.396 L767.224 690.396 L767.783 690.396 L768.342 690.396 L768.901 690.396 L769.461 690.396 L770.02 690.396 L770.579 690.396 L771.138 690.396 L771.698 690.396 L772.257 690.396 L772.816 690.396 L773.375 690.396 L773.935 690.396 L774.494 690.396 L775.053 690.396 L775.612 690.396 L776.172 690.396 L776.731 690.396 L777.29 690.396 L777.849 690.396 L778.409 690.396 L778.968 690.396 L779.527 690.396 L780.086 690.396 L780.646 690.396 L781.205 690.396 L781.764 690.396 L782.323 690.396 L782.883 690.396 L783.442 690.396 L784.001 690.396 L784.56 690.396 L785.12 690.396 L785.679 690.396 L786.238 690.396 L786.797 690.396 L787.357 690.396 L787.916 690.396 L788.475 690.396 L789.034 690.396 L789.594 690.396 L790.153 690.396 L790.712 690.396 L791.271 690.396 L791.831 690.396 L792.39 690.396 L792.949 690.396 L793.508 690.396 L794.068 690.396 L794.627 690.396 L795.186 690.396 L795.745 690.396 L796.305 690.396 L796.864 690.396 L797.423 690.396 L797.982 690.396 L798.542 690.396 L799.101 690.396 L799.66 690.396 L800.219 690.396 L800.779 690.396 L801.338 690.396 L801.897 690.396 L802.456 690.396 L803.016 690.396 L803.575 690.396 L804.134 690.396 L804.693 690.396 L805.253 690.396 L805.812 690.396 L806.371 690.396 L806.931 690.396 L807.49 690.396 L808.049 690.396 L808.608 690.396 L809.168 690.396 L809.727 690.396 L810.286 690.396 L810.845 690.396 L811.405 690.396 L811.964 690.396 L812.523 690.396 L813.082 690.396 L813.642 690.396 L814.201 690.396 L814.76 690.396 L815.319 690.396 L815.879 690.396 L816.438 690.396 L816.997 690.396 L817.556 690.396 L818.116 690.396 L818.675 690.396 L819.234 690.396 L819.793 690.396 L820.353 690.396 L820.912 690.396 L821.471 690.396 L822.03 690.396 L822.59 690.396 L823.149 690.396 L823.708 690.396 L824.267 690.396 L824.827 690.396 L825.386 690.396 L825.945 690.396 L826.504 690.396 L827.064 690.396 L827.623 690.396 L828.182 690.396 L828.741 690.396 L829.301 690.396 L829.86 690.396 L830.419 690.396 L830.978 690.396 L831.538 690.396 L832.097 690.396 L832.656 690.396 L833.215 690.396 L833.775 690.396 L834.334 690.396 L834.893 690.396 L835.452 690.396 L836.012 690.396 L836.571 690.396 L837.13 690.396 L837.689 690.396 L838.249 690.396 L838.808 690.396 L839.367 690.396 L839.926 690.396 L840.486 690.396 L841.045 690.396 L841.604 690.396 L842.163 690.396 L842.723 690.396 L843.282 690.396 L843.841 690.396 L844.4 690.396 L844.96 690.396 L845.519 690.396 L846.078 690.396 L846.637 690.396 L847.197 690.396 L847.756 690.396 L848.315 690.396 L848.874 690.396 L849.434 690.396 L849.993 690.396 L850.552 690.396 L851.111 690.396 L851.671 690.396 L852.23 690.396 L852.789 690.396 L853.348 690.396 L853.908 690.396 L854.467 690.396 L855.026 690.396 L855.585 690.396 L856.145 690.396 L856.704 690.396 L857.263 690.396 L857.822 690.396 L858.382 690.396 L858.941 690.396 L859.5 690.396 L860.059 690.396 L860.619 690.396 L861.178 690.396 L861.737 690.396 L862.296 690.396 L862.856 690.396 L863.415 690.396 L863.974 690.396 L864.533 690.396 L865.093 690.396 L865.652 690.396 L866.211 690.396 L866.77 690.396 L867.33 690.396 L867.889 690.396 L868.448 690.396 L869.007 690.396 L869.567 690.396 L870.126 690.396 L870.685 690.396 L871.244 690.396 L871.804 690.396 L872.363 690.396 L872.922 690.396 L873.481 690.396 L874.041 690.396 L874.6 690.396 L875.159 690.396 L875.718 690.396 L876.278 690.396 L876.837 690.396 L877.396 690.396 L877.955 690.396 L878.515 690.396 L879.074 690.396 L879.633 690.396 L880.192 690.396 L880.752 690.396 L881.311 690.396 L881.87 690.396 L882.429 690.396 L882.989 690.396 L883.548 690.396 L884.107 690.396 L884.666 690.396 L885.226 690.396 L885.785 690.396 L886.344 690.396 L886.903 690.396 L887.463 690.396 L888.022 690.396 L888.581 690.396 L889.14 690.396 L889.7 690.396 L890.259 690.396 L890.818 690.396 L891.377 690.396 L891.937 690.396 L892.496 690.396 L893.055 690.396 L893.614 690.396 L894.174 690.396 L894.733 690.396 L895.292 690.396 L895.851 690.396 L896.411 690.396 L896.97 690.396 L897.529 690.396 L898.088 690.396 L898.648 690.396 L899.207 690.396 L899.766 690.396 L900.325 690.396 L900.885 690.396 L901.444 690.396 L902.003 690.396 L902.562 690.396 L903.122 690.396 L903.681 690.396 L904.24 690.396 L904.799 690.396 L905.359 690.396 L905.918 690.396 L906.477 690.396 L907.036 690.396 L907.596 690.396 L908.155 690.396 L908.714 690.396 L909.273 690.396 L909.833 690.396 L910.392 690.396 L910.951 690.396 L911.51 690.396 L912.07 690.396 L912.629 690.396 L913.188 690.396 L913.747 690.396 L914.307 690.396 L914.866 690.396 L915.425 690.396 L915.984 690.396 L916.544 690.396 L917.103 690.396 L917.662 690.396 L918.221 690.396 L918.781 690.396 L919.34 690.396 L919.899 690.396 L920.458 690.396 L921.018 690.396 L921.577 690.396 L922.136 690.396 L922.695 690.396 L923.255 690.396 L923.814 690.396 L924.373 690.396 L924.932 690.396 L925.492 690.396 L926.051 690.396 L926.61 690.396 L927.169 690.396 L927.729 690.396 L928.288 690.396 L928.847 690.396 L929.406 690.396 L929.966 690.396 L930.525 690.396 L931.084 690.396 L931.644 690.396 L932.203 690.396 L932.762 690.396 L933.321 690.396 L933.881 690.396 L934.44 690.396 L934.999 690.396 L935.558 690.396 L936.118 690.396 L936.677 690.396 L937.236 690.396 L937.795 690.396 L938.355 690.396 L938.914 690.396 L939.473 690.396 L940.032 690.396 L940.592 690.396 L941.151 690.396 L941.71 690.396 L942.269 690.396 L942.829 690.396 L943.388 690.396 L943.947 690.396 L944.506 690.396 L945.066 690.396 L945.625 690.396 L946.184 690.396 L946.743 690.396 L947.303 690.396 L947.862 690.396 L948.421 690.396 L948.98 690.396 L949.54 690.396 L950.099 690.396 L950.658 690.396 L951.217 690.396 L951.777 690.396 L952.336 690.396 L952.895 690.396 L953.454 690.396 L954.014 690.396 L954.573 690.396 L955.132 690.396 L955.691 690.396 L956.251 690.396 L956.81 690.396 L957.369 690.396 L957.928 690.396 L958.488 690.396 L959.047 690.396 L959.606 690.396 L960.165 690.396 L960.725 690.396 L961.284 690.396 L961.843 690.396 L962.402 690.396 L962.962 690.396 L963.521 690.396 L964.08 690.396 L964.639 690.396 L965.199 690.396 L965.758 690.396 L966.317 690.396 L966.876 690.396 L967.436 690.396 L967.995 690.396 L968.554 690.396 L969.113 690.396 L969.673 690.396 L970.232 690.396 L970.791 690.396 L971.35 690.396 L971.91 690.396 L972.469 690.396 L973.028 690.396 L973.587 690.396 L974.147 690.396 L974.706 690.396 L975.265 690.396 L975.824 690.396 L976.384 690.396 L976.943 690.396 L977.502 690.396 L978.061 690.396 L978.621 690.396 L979.18 690.396 L979.739 690.396 L980.298 690.396 L980.858 690.396 L981.417 690.396 L981.976 690.396 L982.535 690.396 L983.095 690.396 L983.654 690.396 L984.213 690.396 L984.772 690.396 L985.332 690.396 L985.891 690.396 L986.45 690.396 L987.009 690.396 L987.569 690.396 L988.128 690.396 L988.687 690.396 L989.246 690.396 L989.806 690.396 L990.365 690.396 L990.924 690.396 L991.483 690.396 L992.043 690.396 L992.602 690.396 L993.161 690.396 L993.72 690.396 L994.28 690.396 L994.839 690.396 L995.398 690.396 L995.957 690.396 L996.517 690.396 L997.076 690.396 L997.635 690.396 L998.194 690.396 L998.754 690.396 L999.313 690.396 L999.872 690.396 L1000.43 690.396 L1000.99 690.396 L1001.55 690.396 L1002.11 690.396 L1002.67 690.396 L1003.23 690.396 L1003.79 690.396 L1004.35 690.396 L1004.91 690.396 L1005.46 690.396 L1006.02 690.396 L1006.58 690.396 L1007.14 690.396 L1007.7 690.396 L1008.26 690.396 L1008.82 690.396 L1009.38 690.396 L1009.94 690.396 L1010.5 690.396 L1011.06 690.396 L1011.62 690.396 L1012.18 690.396 L1012.73 690.396 L1013.29 690.396 L1013.85 690.396 L1014.41 690.396 L1014.97 690.396 L1015.53 690.396 L1016.09 690.396 L1016.65 690.396 L1017.21 690.396 L1017.77 690.396 L1018.33 690.396 L1018.89 690.396 L1019.45 690.396 L1020.01 690.396 L1020.56 690.396 L1021.12 690.396 L1021.68 690.396 L1022.24 690.396 L1022.8 690.396 L1023.36 690.396 L1023.92 690.396 L1024.48 690.396 L1025.04 690.396 L1025.6 690.396 L1026.16 690.396 L1026.72 690.396 L1027.28 690.396 L1027.83 690.396 L1028.39 690.396 L1028.95 690.396 L1029.51 690.396 L1030.07 690.396 L1030.63 690.396 L1031.19 690.396 L1031.75 690.396 L1032.31 690.396 L1032.87 690.396 L1033.43 690.396 L1033.99 690.396 L1034.55 690.396 L1035.1 690.396 L1035.66 690.396 L1036.22 690.396 L1036.78 690.396 L1037.34 690.396 L1037.9 690.396 L1038.46 690.396 L1039.02 690.396 L1039.58 690.396 L1040.14 690.396 L1040.7 690.396 L1041.26 690.396 L1041.82 690.396 L1042.38 690.396 L1042.93 690.396 L1043.49 690.396 L1044.05 690.396 L1044.61 690.396 L1045.17 690.396 L1045.73 690.396 L1046.29 690.396 L1046.85 690.396 L1047.41 690.396 L1047.97 690.396 L1048.53 690.396 L1049.09 690.396 L1049.65 690.396 L1050.2 690.396 L1050.76 690.396 L1051.32 690.396 L1051.88 690.396 L1052.44 690.396 L1053 690.396 L1053.56 690.396 L1054.12 690.396 L1054.68 690.396 L1055.24 690.396 L1055.8 690.396 L1056.36 690.396 L1056.92 690.396 L1057.48 690.396 L1058.03 690.396 L1058.59 690.396 L1059.15 690.396 L1059.71 690.396 L1060.27 690.396 L1060.83 690.396 L1061.39 690.396 L1061.95 690.396 L1062.51 690.396 L1063.07 690.396 L1063.63 690.396 L1064.19 690.396 L1064.75 690.396 L1065.3 690.396 L1065.86 690.396 L1066.42 690.396 L1066.98 690.396 L1067.54 690.396 L1068.1 690.396 L1068.66 690.396 L1069.22 690.396 L1069.78 690.396 L1070.34 690.396 L1070.9 690.396 L1071.46 690.396 L1072.02 690.396 L1072.57 690.396 L1073.13 690.396 L1073.69 690.396 L1074.25 690.396 L1074.81 690.396 L1075.37 690.396 L1075.93 690.396 L1076.49 690.396 L1077.05 690.396 L1077.61 690.396 L1078.17 690.396 L1078.73 690.396 L1079.29 690.396 L1079.85 690.396 L1080.4 690.396 L1080.96 690.396 L1081.52 690.396 L1082.08 690.396 L1082.64 690.396 L1083.2 690.396 L1083.76 690.396 L1084.32 690.396 L1084.88 690.396 L1085.44 690.396 L1086 690.396 L1086.56 690.396 L1087.12 690.396 L1087.67 690.396 L1088.23 690.396 L1088.79 690.396 L1089.35 690.396 L1089.91 690.396 L1090.47 690.396 L1091.03 690.396 L1091.59 690.396 L1092.15 690.396 L1092.71 690.396 L1093.27 690.396 L1093.83 690.396 L1094.39 690.396 L1094.94 690.396 L1095.5 690.396 L1096.06 690.396 L1096.62 690.396 L1097.18 690.396 L1097.74 690.396 L1098.3 690.396 L1098.86 690.396 L1099.42 690.396 L1099.98 690.396 L1100.54 690.396 L1101.1 690.396 L1101.66 690.396 L1102.22 690.396 L1102.77 690.396 L1103.33 690.396 L1103.89 690.396 L1104.45 690.396 L1105.01 690.396 L1105.57 690.396 L1106.13 690.396 L1106.69 690.396 L1107.25 690.396 L1107.81 690.396 L1108.37 690.396 L1108.93 690.396 L1109.49 690.396 L1110.04 690.396 L1110.6 690.396 L1111.16 690.396 L1111.72 690.396 L1112.28 690.396 L1112.84 690.396 L1113.4 690.396 L1113.96 690.396 L1114.52 690.396 L1115.08 690.396 L1115.64 690.396 L1116.2 690.396 L1116.76 690.396 L1117.31 690.396 L1117.87 690.396 L1118.43 690.396 L1118.99 690.396 L1119.55 690.396 L1120.11 690.396 L1120.67 690.396 L1121.23 690.396 L1121.79 690.396 L1122.35 690.396 L1122.91 690.396 L1123.47 690.396 L1124.03 690.396 L1124.59 690.396 L1125.14 690.396 L1125.7 690.396 L1126.26 690.396 L1126.82 690.396 L1127.38 690.396 L1127.94 690.396 L1128.5 690.396 L1129.06 690.396 L1129.62 690.396 L1130.18 690.396 L1130.74 690.396 L1131.3 690.396 L1131.86 690.396 L1132.41 690.396 L1132.97 690.396 L1133.53 690.396 L1134.09 690.396 L1134.65 690.396 L1135.21 690.396 L1135.77 690.396 L1136.33 690.396 L1136.89 690.396 L1137.45 690.396 L1138.01 690.396 L1138.57 690.396 L1139.13 690.396 L1139.68 690.396 L1140.24 690.396 L1140.8 690.396 L1141.36 690.396 L1141.92 690.396 L1142.48 690.396 L1143.04 690.396 L1143.6 690.396 L1144.16 690.396 L1144.72 690.396 L1145.28 690.396 L1145.84 690.396 L1146.4 690.396 L1146.96 690.396 L1147.51 690.396 L1148.07 690.396 L1148.63 690.396 L1149.19 690.396 L1149.75 690.396 L1150.31 690.396 L1150.87 690.396 L1151.43 690.396 L1151.99 690.396 L1152.55 690.396 L1153.11 690.396 L1153.67 690.396 L1154.23 690.396 L1154.78 690.396 L1155.34 690.396 L1155.9 690.396 L1156.46 690.396 L1157.02 690.396 L1157.58 690.396 L1158.14 690.396 L1158.7 690.396 L1159.26 690.396 L1159.82 690.396 L1160.38 690.396 L1160.94 690.396 L1161.5 690.396 L1162.05 690.396 L1162.61 690.396 L1163.17 690.396 L1163.73 690.396 L1164.29 690.396 L1164.85 690.396 L1165.41 690.396 L1165.97 690.396 L1166.53 690.396 L1167.09 690.396 L1167.65 690.396 L1168.21 690.396 L1168.77 690.396 L1169.33 690.396 L1169.88 690.396 L1170.44 690.396 L1171 690.396 L1171.56 690.396 L1172.12 690.396 L1172.68 690.396 L1173.24 690.396 L1173.8 690.396 L1174.36 690.396 L1174.92 690.396 L1175.48 690.396 L1176.04 690.396 L1176.6 690.396 L1177.15 690.396 L1177.71 690.396 L1178.27 690.396 L1178.83 690.396 L1179.39 690.396 L1179.95 690.396 L1180.51 690.396 L1181.07 690.396 L1181.63 690.396 L1182.19 690.396 L1182.75 690.396 L1183.31 690.396 L1183.87 690.396 L1184.43 690.396 L1184.98 690.396 L1185.54 690.396 L1186.1 690.396 L1186.66 690.396 L1187.22 690.396 L1187.78 690.396 L1188.34 690.396 L1188.9 690.396 L1189.46 690.396 L1190.02 690.396 L1190.58 690.396 L1191.14 690.396 L1191.7 690.396 L1192.25 690.396 L1192.81 690.396 L1193.37 690.396 L1193.93 690.396 L1194.49 690.396 L1195.05 690.396 L1195.61 690.396 L1196.17 690.396 L1196.73 690.396 L1197.29 690.396 L1197.85 690.396 L1198.41 690.396 L1198.97 690.396 L1199.52 690.396 L1200.08 690.396 L1200.64 690.396 L1201.2 690.396 L1201.76 690.396 L1202.32 690.396 L1202.88 690.396 L1203.44 690.396 L1204 690.396 L1204.56 690.396 L1205.12 690.396 L1205.68 690.396 L1206.24 690.396 L1206.8 690.396 L1207.35 690.396 L1207.91 690.396 L1208.47 690.396 L1209.03 690.396 L1209.59 690.396 L1210.15 690.396 L1210.71 690.396 L1211.27 690.396 L1211.83 690.396 L1212.39 690.396 L1212.95 690.396 L1213.51 690.396 L1214.07 690.396 L1214.62 690.396 L1215.18 690.396 L1215.74 690.396 L1216.3 690.396 L1216.86 690.396 L1217.42 690.396 L1217.98 690.396 L1218.54 690.396 L1219.1 690.396 L1219.66 690.396 L1220.22 690.396 L1220.78 690.396 L1221.34 690.396 L1221.89 690.396 L1222.45 690.396 L1223.01 690.396 L1223.57 690.396 L1224.13 690.396 L1224.69 690.396 L1225.25 690.396 L1225.81 690.396 L1226.37 690.396 L1226.93 690.396 L1227.49 690.396 L1228.05 690.396 L1228.61 690.396 L1229.17 690.396 L1229.72 690.396 L1230.28 690.396 L1230.84 690.396 L1231.4 690.396 L1231.96 690.396 L1232.52 690.396 L1233.08 690.396 L1233.64 690.396 L1234.2 690.396 L1234.76 690.396 L1235.32 690.396 L1235.88 690.396 L1236.44 690.396 L1236.99 690.396 L1237.55 690.396 L1238.11 690.396 L1238.67 690.396 L1239.23 690.396 L1239.79 690.396 L1240.35 690.396 L1240.91 690.396 L1241.47 690.396 L1242.03 690.396 L1242.59 690.396 L1243.15 690.396 L1243.71 690.396 L1244.26 690.396 L1244.82 690.396 L1245.38 690.396 L1245.94 690.396 L1246.5 690.396 L1247.06 690.396 L1247.62 690.396 L1248.18 690.396 L1248.74 690.396 L1249.3 690.396 L1249.86 690.396 L1250.42 690.396 L1250.98 690.396 L1251.54 690.396 L1252.09 690.396 L1252.65 690.396 L1253.21 690.396 L1253.77 690.396 L1254.33 690.396 L1254.89 690.396 L1255.45 690.396 L1256.01 690.396 L1256.57 690.396 L1257.13 690.396 L1257.69 690.396 L1258.25 690.396 L1258.81 690.396 L1259.36 690.396 L1259.92 690.396 L1260.48 690.396 L1261.04 690.396 L1261.6 690.396 L1262.16 690.396 L1262.72 690.396 L1263.28 690.396 L1263.84 690.396 L1264.4 690.396 L1264.96 690.396 L1265.52 690.396 L1266.08 690.396 L1266.63 690.396 L1267.19 690.396 L1267.75 690.396 L1268.31 690.396 L1268.87 690.396 L1269.43 690.396 L1269.99 690.396 L1270.55 690.396 L1271.11 690.396 L1271.67 690.396 L1272.23 690.396 L1272.79 690.396 L1273.35 690.396 L1273.91 690.396 L1274.46 690.396 L1275.02 690.396 L1275.58 690.396 L1276.14 690.396 L1276.7 690.396 L1277.26 690.396 L1277.82 690.396 L1278.38 690.396 L1278.94 690.396 L1279.5 690.396 L1280.06 690.396 L1280.62 690.396 L1281.18 690.396 L1281.73 690.396 L1282.29 690.396 L1282.85 690.396 L1283.41 690.396 L1283.97 690.396 L1284.53 690.396 L1285.09 690.396 L1285.65 690.396 L1286.21 690.396 L1286.77 690.396 L1287.33 690.396 L1287.89 690.396 L1288.45 690.396 L1289 690.396 L1289.56 690.396 L1290.12 690.396 L1290.68 690.396 L1291.24 690.396 L1291.8 690.396 L1292.36 690.396 L1292.92 690.396 L1293.48 690.396 L1294.04 690.396 L1294.6 690.396 L1295.16 690.396 L1295.72 690.396 L1296.28 690.396 L1296.83 690.396 L1297.39 690.396 L1297.95 690.396 L1298.51 690.396 L1299.07 690.396 L1299.63 690.396 L1300.19 690.396 L1300.75 690.396 L1301.31 690.396 L1301.87 690.396 L1302.43 690.396 L1302.99 690.396 L1303.55 690.396 L1304.1 690.396 L1304.66 690.396 L1305.22 690.396 L1305.78 690.396 L1306.34 690.396 L1306.9 690.396 L1307.46 690.396 L1308.02 690.396 L1308.58 690.396 L1309.14 690.396 L1309.7 690.396 L1310.26 690.396 L1310.82 690.396 L1311.38 690.396 L1311.93 690.396 L1312.49 690.396 L1313.05 690.396 L1313.61 690.396 L1314.17 690.396 L1314.73 690.396 L1315.29 690.396 L1315.85 690.396 L1316.41 690.396 L1316.97 690.396 L1317.53 690.396 L1318.09 690.396 L1318.65 690.396 L1319.2 690.396 L1319.76 690.396 L1320.32 690.396 L1320.88 690.396 L1321.44 690.396 L1322 690.396 L1322.56 690.396 L1323.12 690.396 L1323.68 690.396 L1324.24 690.396 L1324.8 690.396 L1325.36 690.396 L1325.92 690.396 L1326.47 690.396 L1327.03 690.396 L1327.59 690.396 L1328.15 690.396 L1328.71 690.396 L1329.27 690.396 L1329.83 690.396 L1330.39 690.396 L1330.95 690.396 L1331.51 690.396 L1332.07 690.396 L1332.63 690.396 L1333.19 690.396 L1333.75 690.396 L1334.3 690.396 L1334.86 690.396 L1335.42 690.396 L1335.98 690.396 L1336.54 690.396 L1337.1 690.396 L1337.66 690.396 L1338.22 690.396 L1338.78 690.396 L1339.34 690.396 L1339.9 690.396 L1340.46 690.396 L1341.02 690.396 L1341.57 690.396 L1342.13 690.396 L1342.69 690.396 L1343.25 690.396 L1343.81 690.396 L1344.37 690.396 L1344.93 690.396 L1345.49 690.396 L1346.05 690.396 L1346.61 690.396 L1347.17 690.396 L1347.73 690.396 L1348.29 690.396 L1348.84 690.396 L1349.4 690.396 L1349.96 690.396 L1350.52 690.396 L1351.08 690.396 L1351.64 690.396 L1352.2 690.396 L1352.76 690.396 L1353.32 690.396 L1353.88 690.396 L1354.44 690.396 L1355 690.396 L1355.56 690.396 L1356.12 690.396 L1356.67 690.396 L1357.23 690.396 L1357.79 690.396 L1358.35 690.396 L1358.91 690.396 L1359.47 690.396 L1360.03 690.396 L1360.59 690.396 L1361.15 690.396 L1361.71 690.396 L1362.27 690.396 L1362.83 690.396 L1363.39 690.396 L1363.94 690.396 L1364.5 690.396 L1365.06 690.396 L1365.62 690.396 L1366.18 690.396 L1366.74 690.396 L1367.3 690.396 L1367.86 690.396 L1368.42 690.396 L1368.98 690.396 L1369.54 690.396 L1370.1 690.396 L1370.66 690.396 L1371.21 690.396 L1371.77 690.396 L1372.33 690.396 L1372.89 690.396 L1373.45 690.396 L1374.01 690.396 L1374.57 690.396 L1375.13 690.396 L1375.69 690.396 L1376.25 690.396 L1376.81 690.396 L1377.37 690.396 L1377.93 690.396 L1378.49 690.396 L1379.04 690.396 L1379.6 690.396 L1380.16 690.396 L1380.72 690.396 L1381.28 690.396 L1381.84 690.396 L1382.4 690.396 L1382.96 690.396 L1383.52 690.396 L1384.08 690.396 L1384.64 690.396 L1385.2 690.396 L1385.76 690.396 L1386.31 690.396 L1386.87 690.396 L1387.43 690.396 L1387.99 690.396 L1388.55 690.396 L1389.11 690.396 L1389.67 690.396 L1390.23 690.396 L1390.79 690.396 L1391.35 690.396 L1391.91 690.396 L1392.47 690.396 L1393.03 690.396 L1393.58 690.396 L1394.14 690.396 L1394.7 690.396 L1395.26 690.396 L1395.82 690.396 L1396.38 690.396 L1396.94 690.396 L1397.5 690.396 L1398.06 690.396 L1398.62 690.396 L1399.18 690.396 L1399.74 690.396 L1400.3 690.396 L1400.86 690.396 L1401.41 690.396 L1401.97 690.396 L1402.53 690.396 L1403.09 690.396 L1403.65 690.396 L1404.21 690.396 L1404.77 690.396 L1405.33 690.396 L1405.89 690.396 L1406.45 690.396 L1407.01 690.396 L1407.57 690.396 L1408.13 690.396 L1408.68 690.396 L1409.24 690.396 L1409.8 690.396 L1410.36 690.396 L1410.92 690.396 L1411.48 690.396 L1412.04 690.396 L1412.6 690.396 L1413.16 690.396 L1413.72 690.396 L1414.28 690.396 L1414.84 690.396 L1415.4 690.396 L1415.95 690.396 L1416.51 690.396 L1417.07 690.396 L1417.63 690.396 L1418.19 690.396 L1418.75 690.396 L1419.31 690.396 L1419.87 690.396 L1420.43 690.396 L1420.99 690.396 L1421.55 690.396 L1422.11 690.396 L1422.67 690.396 L1423.23 690.396 L1423.78 690.396 L1424.34 690.396 L1424.9 690.396 L1425.46 690.396 L1426.02 690.396 L1426.58 690.396 L1427.14 690.396 L1427.7 690.396 L1428.26 690.396 L1428.82 690.396 L1429.38 690.396 L1429.94 690.396 L1430.5 690.396 L1431.05 690.396 L1431.61 690.396 L1432.17 690.396 L1432.73 690.396 L1433.29 690.396 L1433.85 690.396 L1434.41 690.396 L1434.97 690.396 L1435.53 690.396 L1436.09 690.396 L1436.65 690.396 L1437.21 690.396 L1437.77 690.396 L1438.33 690.396 L1438.88 690.396 L1439.44 690.396 L1440 690.396 L1440.56 690.396 L1441.12 690.396 L1441.68 690.396 L1442.24 690.396 L1442.8 690.396 L1443.36 690.396 L1443.92 690.396 L1444.48 690.396 L1445.04 690.396 L1445.6 690.396 L1446.15 690.396 L1446.71 690.396 L1447.27 690.396 L1447.83 690.396 L1448.39 690.396 L1448.95 690.396 L1449.51 690.396 L1450.07 690.396 L1450.63 690.396 L1451.19 690.396 L1451.75 690.396 L1452.31 690.396 L1452.87 690.396 L1453.42 690.396 L1453.98 690.396 L1454.54 690.396 L1455.1 690.396 L1455.66 690.396 L1456.22 690.396 L1456.78 690.396 L1457.34 690.396 L1457.9 690.396 L1458.46 690.396 L1459.02 690.396 L1459.58 690.396 L1460.14 690.396 L1460.7 690.396 L1461.25 690.396 L1461.81 690.396 L1462.37 690.396 L1462.93 690.396 L1463.49 690.396 L1464.05 690.396 L1464.61 690.396 L1465.17 690.396 L1465.73 690.396 L1466.29 690.396 L1466.85 690.396 L1467.41 690.396 L1467.97 690.396 L1468.52 690.396 L1469.08 690.396 L1469.64 690.396 L1470.2 690.396 L1470.76 690.396 L1471.32 690.396 L1471.88 690.396 L1472.44 690.396 L1473 690.396 L1473.56 690.396 L1474.12 690.396 L1474.68 690.396 L1475.24 690.396 L1475.79 690.396 L1476.35 690.396 L1476.91 690.396 L1477.47 690.396 L1478.03 690.396 L1478.59 690.396 L1479.15 690.396 L1479.71 690.396 L1480.27 690.396 L1480.83 690.396 L1481.39 690.396 L1481.95 690.396 L1482.51 690.396 L1483.07 690.396 L1483.62 690.396 L1484.18 690.396 L1484.74 690.396 L1485.3 690.396 L1485.86 690.396 L1486.42 690.396 L1486.98 690.396 L1487.54 690.396 L1488.1 690.396 L1488.66 690.396 L1489.22 690.396 L1489.78 690.396 L1490.34 690.396 L1490.89 690.396 L1491.45 690.396 L1492.01 690.396 L1492.57 690.396 L1493.13 690.396 L1493.69 690.396 L1494.25 690.396 L1494.81 690.396 L1495.37 690.396 L1495.93 690.396 L1496.49 690.396 L1497.05 690.396 L1497.61 690.396 L1498.16 690.396 L1498.72 690.396 L1499.28 690.396 L1499.84 690.396 L1500.4 690.396 L1500.96 690.396 L1501.52 690.396 L1502.08 690.396 L1502.64 690.396 L1503.2 690.396 L1503.76 690.396 L1504.32 690.396 L1504.88 690.396 L1505.44 690.396 L1505.99 690.396 L1506.55 690.396 L1507.11 690.396 L1507.67 690.396 L1508.23 690.396 L1508.79 690.396 L1509.35 690.396 L1509.91 690.396 L1510.47 690.396 L1511.03 690.396 L1511.59 690.396 L1512.15 690.396 L1512.71 690.396 L1513.26 690.396 L1513.82 690.396 L1514.38 690.396 L1514.94 690.396 L1515.5 690.396 L1516.06 690.396 L1516.62 690.396 L1517.18 690.396 L1517.74 690.396 L1518.3 690.396 L1518.86 690.396 L1519.42 690.396 L1519.98 690.396 L1520.53 690.396 L1521.09 690.396 L1521.65 690.396 L1522.21 690.396 L1522.77 690.396 L1523.33 690.396 L1523.89 690.396 L1524.45 690.396 L1525.01 690.396 L1525.57 690.396 L1526.13 690.396 L1526.69 690.396 L1527.25 690.396 L1527.81 690.396 L1528.36 690.396 L1528.92 690.396 L1529.48 690.396 L1530.04 690.396 L1530.6 690.396 L1531.16 690.396 L1531.72 690.396 L1532.28 690.396 L1532.84 690.396 L1533.4 690.396 L1533.96 690.396 L1534.52 690.396 L1535.08 690.396 L1535.63 690.396 L1536.19 690.396 L1536.75 690.396 L1537.31 690.396 L1537.87 690.396 L1538.43 690.396 L1538.99 690.396 L1539.55 690.396 L1540.11 690.396 L1540.67 690.396 L1541.23 690.396 L1541.79 690.396 L1542.35 690.396 L1542.9 690.396 L1543.46 690.396 L1544.02 690.396 L1544.58 690.396 L1545.14 690.396 L1545.7 690.396 L1546.26 690.396 L1546.82 690.396 L1547.38 690.396 L1547.94 690.396 L1548.5 690.396 L1549.06 690.396 L1549.62 690.396 L1550.18 690.396 L1550.73 690.396 L1551.29 690.396 L1551.85 690.396 L1552.41 690.396 L1552.97 690.396 L1553.53 690.396 L1554.09 690.396 L1554.65 690.396 L1555.21 690.396 L1555.77 690.396 L1556.33 690.396 L1556.89 690.396 L1557.45 690.396 L1558 690.396 L1558.56 690.396 L1559.12 690.396 L1559.68 690.396 L1560.24 690.396 L1560.8 690.396 L1561.36 690.396 L1561.92 690.396 L1562.48 690.396 L1563.04 690.396 L1563.6 690.396 L1564.16 690.396 L1564.72 690.396 L1565.28 690.396 L1565.83 690.396 L1566.39 690.396 L1566.95 690.396 L1567.51 690.396 L1568.07 690.396 L1568.63 690.396 L1569.19 690.396 L1569.75 690.396 L1570.31 690.396 L1570.87 690.396 L1571.43 690.396 L1571.99 690.396 L1572.55 690.396 L1573.1 690.396 L1573.66 690.396 L1574.22 690.396 L1574.78 690.396 L1575.34 690.396 L1575.9 690.396 L1576.46 690.396 L1577.02 690.396 L1577.58 690.396 L1578.14 690.396 L1578.7 690.396 L1579.26 690.396 L1579.82 690.396 L1580.37 690.396 L1580.93 690.396 L1581.49 690.396 L1582.05 690.396 L1582.61 690.396 L1583.17 690.396 L1583.73 690.396 L1584.29 690.396 L1584.85 690.396 L1585.41 690.396 L1585.97 690.396 L1586.53 690.396 L1587.09 690.396 L1587.65 690.396 L1588.2 690.396 L1588.76 690.396 L1589.32 690.396 L1589.88 690.396 L1590.44 690.396 L1591 690.396 L1591.56 690.396 L1592.12 690.396 L1592.68 690.396 L1593.24 690.396 L1593.8 690.396 L1594.36 690.396 L1594.92 690.396 L1595.47 690.396 L1596.03 690.396 L1596.59 690.396 L1597.15 690.396 L1597.71 690.396 L1598.27 690.396 L1598.83 690.396 L1599.39 690.396 L1599.95 690.396 L1600.51 690.396 L1601.07 690.396 L1601.63 690.396 L1602.19 690.396 L1602.74 690.396 L1603.3 690.396 L1603.86 690.396 L1604.42 690.396 L1604.98 690.396 L1605.54 690.396 L1606.1 690.396 L1606.66 690.396 L1607.22 690.396 L1607.78 690.396 L1608.34 690.396 L1608.9 690.396 L1609.46 690.396 L1610.02 690.396 L1610.57 690.396 L1611.13 690.396 L1611.69 690.396 L1612.25 690.396 L1612.81 690.396 L1613.37 690.396 L1613.93 690.396 L1614.49 690.396 L1615.05 690.396 L1615.61 690.396 L1616.17 690.396 L1616.73 690.396 L1617.29 690.396 L1617.84 690.396 L1618.4 690.396 L1618.96 690.396 L1619.52 690.396 L1620.08 690.396 L1620.64 690.396 L1621.2 690.396 L1621.76 690.396 L1622.32 690.396 L1622.88 690.396 L1623.44 690.396 L1624 690.396 L1624.56 690.396 L1625.11 690.396 L1625.67 690.396 L1626.23 690.396 L1626.79 690.396 L1627.35 690.396 L1627.91 690.396 L1628.47 690.396 L1629.03 690.396 L1629.59 690.396 L1630.15 690.396 L1630.71 690.396 L1631.27 690.396 L1631.83 690.396 L1632.39 690.396 L1632.94 690.396 L1633.5 690.396 L1634.06 690.396 L1634.62 690.396 L1635.18 690.396 L1635.74 690.396 L1636.3 690.396 L1636.86 690.396 L1637.42 690.396 L1637.98 690.396 L1638.54 690.396 L1639.1 690.396 L1639.66 690.396 L1640.21 690.396 L1640.77 690.396 L1641.33 690.396 L1641.89 690.396 L1642.45 690.396 L1643.01 690.396 L1643.57 690.396 L1644.13 690.396 L1644.69 690.396 L1645.25 690.396 L1645.81 690.396 L1646.37 690.396 L1646.93 690.396 L1647.48 690.396 L1648.04 690.396 L1648.6 690.396 L1649.16 690.396 L1649.72 690.396 L1650.28 690.396 L1650.84 690.396 L1651.4 690.396 L1651.96 690.396 L1652.52 690.396 L1653.08 690.396 L1653.64 690.396 L1654.2 690.396 L1654.76 690.396 L1655.31 690.396 L1655.87 690.396 L1656.43 690.396 L1656.99 690.396 L1657.55 690.396 L1658.11 690.396 L1658.67 690.396 L1659.23 690.396 L1659.79 690.396 L1660.35 690.396 L1660.91 690.396 L1661.47 690.396 L1662.03 690.396 L1662.58 690.396 L1663.14 690.396 L1663.7 690.396 L1664.26 690.396 L1664.82 690.396 L1665.38 690.396 L1665.94 690.396 L1666.5 690.396 L1667.06 690.396 L1667.62 690.396 L1668.18 690.396 L1668.74 690.396 L1669.3 690.396 L1669.85 690.396 L1670.41 690.396 L1670.97 690.396 L1671.53 690.396 L1672.09 690.396 L1672.65 690.396 L1673.21 690.396 L1673.77 690.396 L1674.33 690.396 L1674.89 690.396 L1675.45 690.396 L1676.01 690.396 L1676.57 690.396 L1677.13 690.396 L1677.68 690.396 L1678.24 690.396 L1678.8 690.396 L1679.36 690.396 L1679.92 690.396 L1680.48 690.396 L1681.04 690.396 L1681.6 690.396 L1682.16 690.396 L1682.72 690.396 L1683.28 690.396 L1683.84 690.396 L1684.4 690.396 L1684.95 690.396 L1685.51 690.396 L1686.07 690.396 L1686.63 690.396 L1687.19 690.396 L1687.75 690.396 L1688.31 690.396 L1688.87 690.396 L1689.43 690.396 L1689.99 690.396 L1690.55 690.396 L1691.11 690.396 L1691.67 690.396 L1692.23 690.396 L1692.78 690.396 L1693.34 690.396 L1693.9 690.396 L1694.46 690.396 L1695.02 690.396 L1695.58 690.396 L1696.14 690.396 L1696.7 690.396 L1697.26 690.396 L1697.82 690.396 L1698.38 690.396 L1698.94 690.396 L1699.5 690.396 L1700.05 690.396 L1700.61 690.396 L1701.17 690.396 L1701.73 690.396 L1702.29 690.396 L1702.85 690.396 L1703.41 690.396 L1703.97 690.396 L1704.53 690.396 L1705.09 690.396 L1705.65 690.396 L1706.21 690.396 L1706.77 690.396 L1707.32 690.396 L1707.88 690.396 L1708.44 690.396 L1709 690.396 L1709.56 690.396 L1710.12 690.396 L1710.68 690.396 L1711.24 690.396 L1711.8 690.396 L1712.36 690.396 L1712.92 690.396 L1713.48 690.396 L1714.04 690.396 L1714.6 690.396 L1715.15 690.396 L1715.71 690.396 L1716.27 690.396 L1716.83 690.396 L1717.39 690.396 L1717.95 690.396 L1718.51 690.396 L1719.07 690.396 L1719.63 690.396 L1720.19 690.396 L1720.75 690.396 L1721.31 690.396 L1721.87 690.396 L1722.42 690.396 L1722.98 690.396 L1723.54 690.396 L1724.1 690.396 L1724.66 690.396 L1725.22 690.396 L1725.78 690.396 L1726.34 690.396 L1726.9 690.396 L1727.46 690.396 L1728.02 690.396 L1728.58 690.396 L1729.14 690.396 L1729.69 690.396 L1730.25 690.396 L1730.81 690.396 L1731.37 690.396 L1731.93 690.396 L1732.49 690.396 L1733.05 690.396 L1733.61 690.396 L1734.17 690.396 L1734.73 690.396 L1735.29 690.396 L1735.85 690.396 L1736.41 690.396 L1736.97 690.396 L1737.52 690.396 L1738.08 690.396 L1738.64 690.396 L1739.2 690.396 L1739.76 690.396 L1740.32 690.396 L1740.88 690.396 L1741.44 690.396 L1742 690.396 L1742.56 690.396 L1743.12 690.396 L1743.68 690.396 L1744.24 690.396 L1744.79 690.396 L1745.35 690.396 L1745.91 690.396 L1746.47 690.396 L1747.03 690.396 L1747.59 690.396 L1748.15 690.396 L1748.71 690.396 L1749.27 690.396 L1749.83 690.396 L1750.39 690.396 L1750.95 690.396 L1751.51 690.396 L1752.06 690.396 L1752.62 690.396 L1753.18 690.396 L1753.74 690.396 L1754.3 690.396 L1754.86 690.396 L1755.42 690.396 L1755.98 690.396 L1756.54 690.396 L1757.1 690.396 L1757.66 690.396 L1758.22 690.396 L1758.78 690.396 L1759.34 690.396 L1759.89 690.396 L1760.45 690.396 L1761.01 690.396 L1761.57 690.396 L1762.13 690.396 L1762.69 690.396 L1763.25 690.396 L1763.81 690.396 L1764.37 690.396 L1764.93 690.396 L1765.49 690.396 L1766.05 690.396 L1766.61 690.396 L1767.16 690.396 L1767.72 690.396 L1768.28 690.396 L1768.84 690.396 L1769.4 690.396 L1769.96 690.396 L1770.52 690.396 L1771.08 690.396 L1771.64 690.396 L1772.2 690.396 L1772.76 690.396 L1773.32 690.396 L1773.88 690.396 L1774.43 690.396 L1774.99 690.396 L1775.55 690.396 L1776.11 690.396 L1776.67 690.396 L1777.23 690.396 L1777.79 690.396 L1778.35 690.396 L1778.91 690.396 L1779.47 690.396 L1780.03 690.396 L1780.59 690.396 L1781.15 690.396 L1781.71 690.396 L1782.26 690.396 L1782.82 690.396 L1783.38 690.396 L1783.94 690.396 L1784.5 690.396 L1785.06 690.396 L1785.62 690.396 L1786.18 690.396 L1786.74 690.396 L1787.3 690.396 L1787.86 690.396 L1788.42 690.396 L1788.98 690.396 L1789.53 690.396 L1790.09 690.396 L1790.65 690.396 L1791.21 690.396 L1791.77 690.396 L1792.33 690.396 L1792.89 690.396 L1793.45 690.396 L1794.01 690.396 L1794.57 690.396 L1795.13 690.396 L1795.69 690.396 L1796.25 690.396 L1796.8 690.396 L1797.36 690.396 L1797.92 690.396 L1798.48 690.396 L1799.04 690.396 L1799.6 690.396 L1800.16 690.396 L1800.72 690.396 L1801.28 690.396 L1801.84 690.396 L1802.4 690.396 L1802.96 690.396 L1803.52 690.396 L1804.08 690.396 L1804.63 690.396 L1805.19 690.396 L1805.75 690.396 L1806.31 690.396 L1806.87 690.396 L1807.43 690.396 L1807.99 690.396 L1808.55 690.396 L1809.11 690.396 L1809.67 690.396 L1810.23 690.396 L1810.79 690.396 L1811.35 690.396 L1811.9 690.396 L1812.46 690.396 L1813.02 690.396 L1813.58 690.396 L1814.14 690.396 L1814.7 690.396 L1815.26 690.396 L1815.82 690.396 L1816.38 690.396 L1816.94 690.396 L1817.5 690.396 L1818.06 690.396 L1818.62 690.396 L1819.18 690.396 L1819.73 690.396 L1820.29 690.396 L1820.85 690.396 L1821.41 690.396 L1821.97 690.396 L1822.53 690.396 L1823.09 690.396 L1823.65 690.396 L1824.21 690.396 L1824.77 690.396 L1825.33 690.396 L1825.89 690.396 L1826.45 690.396 L1827 690.396 L1827.56 690.396 L1828.12 690.396 L1828.68 690.396 L1829.24 690.396 L1829.8 690.396 L1830.36 690.396 L1830.92 690.396 L1831.48 690.396 L1832.04 690.396 L1832.6 690.396 L1833.16 690.396 L1833.72 690.396 L1834.27 690.396 L1834.83 690.396 L1835.39 690.396 L1835.95 690.396 L1836.51 690.396 L1837.07 690.396 L1837.63 690.396 L1838.19 690.396 L1838.19 683.336 L1837.63 683.336 L1837.07 683.336 L1836.51 683.336 L1835.95 683.336 L1835.39 683.336 L1834.83 683.336 L1834.27 683.336 L1833.72 683.336 L1833.16 683.336 L1832.6 683.336 L1832.04 683.336 L1831.48 683.336 L1830.92 683.336 L1830.36 683.336 L1829.8 683.336 L1829.24 683.336 L1828.68 683.336 L1828.12 683.336 L1827.56 683.336 L1827 683.336 L1826.45 683.336 L1825.89 683.336 L1825.33 683.336 L1824.77 683.336 L1824.21 683.336 L1823.65 683.336 L1823.09 683.336 L1822.53 683.336 L1821.97 683.336 L1821.41 683.336 L1820.85 683.336 L1820.29 683.336 L1819.73 683.336 L1819.18 683.336 L1818.62 683.336 L1818.06 683.336 L1817.5 683.336 L1816.94 683.336 L1816.38 683.336 L1815.82 683.336 L1815.26 683.336 L1814.7 683.336 L1814.14 683.336 L1813.58 683.336 L1813.02 683.336 L1812.46 683.336 L1811.9 683.336 L1811.35 683.336 L1810.79 683.336 L1810.23 683.336 L1809.67 683.336 L1809.11 683.336 L1808.55 683.336 L1807.99 683.336 L1807.43 683.336 L1806.87 683.336 L1806.31 683.336 L1805.75 683.336 L1805.19 683.336 L1804.63 683.336 L1804.08 683.336 L1803.52 683.336 L1802.96 683.336 L1802.4 683.336 L1801.84 683.336 L1801.28 683.336 L1800.72 683.336 L1800.16 683.336 L1799.6 683.336 L1799.04 683.336 L1798.48 683.336 L1797.92 683.336 L1797.36 683.336 L1796.8 683.336 L1796.25 683.336 L1795.69 683.336 L1795.13 683.336 L1794.57 683.336 L1794.01 683.336 L1793.45 683.336 L1792.89 683.336 L1792.33 683.336 L1791.77 683.336 L1791.21 683.336 L1790.65 683.336 L1790.09 683.336 L1789.53 683.336 L1788.98 683.336 L1788.42 683.336 L1787.86 683.336 L1787.3 683.336 L1786.74 683.336 L1786.18 683.336 L1785.62 683.336 L1785.06 683.336 L1784.5 683.336 L1783.94 683.336 L1783.38 683.336 L1782.82 683.336 L1782.26 683.336 L1781.71 683.336 L1781.15 683.336 L1780.59 683.336 L1780.03 683.336 L1779.47 683.336 L1778.91 683.336 L1778.35 683.336 L1777.79 683.336 L1777.23 683.336 L1776.67 683.336 L1776.11 683.336 L1775.55 683.336 L1774.99 683.336 L1774.43 683.336 L1773.88 683.336 L1773.32 683.336 L1772.76 683.336 L1772.2 683.336 L1771.64 683.336 L1771.08 683.336 L1770.52 683.336 L1769.96 683.336 L1769.4 683.336 L1768.84 683.336 L1768.28 683.336 L1767.72 683.336 L1767.16 683.336 L1766.61 683.336 L1766.05 683.336 L1765.49 683.336 L1764.93 683.336 L1764.37 683.336 L1763.81 683.336 L1763.25 683.336 L1762.69 683.336 L1762.13 683.336 L1761.57 683.336 L1761.01 683.336 L1760.45 683.336 L1759.89 683.336 L1759.34 683.336 L1758.78 683.336 L1758.22 683.336 L1757.66 683.336 L1757.1 683.336 L1756.54 683.336 L1755.98 683.336 L1755.42 683.336 L1754.86 683.336 L1754.3 683.336 L1753.74 683.336 L1753.18 683.336 L1752.62 683.336 L1752.06 683.336 L1751.51 683.336 L1750.95 683.336 L1750.39 683.336 L1749.83 683.336 L1749.27 683.336 L1748.71 683.336 L1748.15 683.336 L1747.59 683.336 L1747.03 683.336 L1746.47 683.336 L1745.91 683.336 L1745.35 683.336 L1744.79 683.336 L1744.24 683.336 L1743.68 683.336 L1743.12 683.336 L1742.56 683.336 L1742 683.336 L1741.44 683.336 L1740.88 683.336 L1740.32 683.336 L1739.76 683.336 L1739.2 683.336 L1738.64 683.336 L1738.08 683.336 L1737.52 683.336 L1736.97 683.336 L1736.41 683.336 L1735.85 683.336 L1735.29 683.336 L1734.73 683.336 L1734.17 683.336 L1733.61 683.336 L1733.05 683.336 L1732.49 683.336 L1731.93 683.336 L1731.37 683.336 L1730.81 683.336 L1730.25 683.336 L1729.69 683.336 L1729.14 683.336 L1728.58 683.336 L1728.02 683.336 L1727.46 683.336 L1726.9 683.336 L1726.34 683.336 L1725.78 683.336 L1725.22 683.336 L1724.66 683.336 L1724.1 683.336 L1723.54 683.336 L1722.98 683.336 L1722.42 683.336 L1721.87 683.336 L1721.31 683.336 L1720.75 683.336 L1720.19 683.336 L1719.63 683.336 L1719.07 683.336 L1718.51 683.336 L1717.95 683.336 L1717.39 683.336 L1716.83 683.336 L1716.27 683.336 L1715.71 683.336 L1715.15 683.336 L1714.6 683.336 L1714.04 683.336 L1713.48 683.336 L1712.92 683.336 L1712.36 683.336 L1711.8 683.336 L1711.24 683.336 L1710.68 683.336 L1710.12 683.336 L1709.56 683.336 L1709 683.336 L1708.44 683.336 L1707.88 683.336 L1707.32 683.336 L1706.77 683.336 L1706.21 683.336 L1705.65 683.336 L1705.09 683.336 L1704.53 683.336 L1703.97 683.336 L1703.41 683.336 L1702.85 683.336 L1702.29 683.336 L1701.73 683.336 L1701.17 683.336 L1700.61 683.336 L1700.05 683.336 L1699.5 683.336 L1698.94 683.336 L1698.38 683.336 L1697.82 683.336 L1697.26 683.336 L1696.7 683.336 L1696.14 683.336 L1695.58 683.336 L1695.02 683.336 L1694.46 683.336 L1693.9 683.336 L1693.34 683.336 L1692.78 683.336 L1692.23 683.336 L1691.67 683.336 L1691.11 683.336 L1690.55 683.336 L1689.99 683.336 L1689.43 683.336 L1688.87 683.336 L1688.31 683.336 L1687.75 683.336 L1687.19 683.336 L1686.63 683.336 L1686.07 683.336 L1685.51 683.336 L1684.95 683.336 L1684.4 683.336 L1683.84 683.336 L1683.28 683.336 L1682.72 683.336 L1682.16 683.336 L1681.6 683.336 L1681.04 683.336 L1680.48 683.336 L1679.92 683.336 L1679.36 683.336 L1678.8 683.336 L1678.24 683.336 L1677.68 683.336 L1677.13 683.336 L1676.57 683.336 L1676.01 683.336 L1675.45 683.336 L1674.89 683.336 L1674.33 683.336 L1673.77 683.336 L1673.21 683.336 L1672.65 683.336 L1672.09 683.336 L1671.53 683.336 L1670.97 683.336 L1670.41 683.336 L1669.85 683.336 L1669.3 683.336 L1668.74 683.336 L1668.18 683.336 L1667.62 683.336 L1667.06 683.336 L1666.5 683.336 L1665.94 683.336 L1665.38 683.336 L1664.82 683.336 L1664.26 683.336 L1663.7 683.336 L1663.14 683.336 L1662.58 683.336 L1662.03 683.336 L1661.47 683.336 L1660.91 683.336 L1660.35 683.336 L1659.79 683.336 L1659.23 683.336 L1658.67 683.336 L1658.11 683.336 L1657.55 683.336 L1656.99 683.336 L1656.43 683.336 L1655.87 683.336 L1655.31 683.336 L1654.76 683.336 L1654.2 683.336 L1653.64 683.336 L1653.08 683.336 L1652.52 683.336 L1651.96 683.336 L1651.4 683.336 L1650.84 683.336 L1650.28 683.336 L1649.72 683.336 L1649.16 683.336 L1648.6 683.336 L1648.04 683.336 L1647.48 683.336 L1646.93 683.336 L1646.37 683.336 L1645.81 683.336 L1645.25 683.336 L1644.69 683.336 L1644.13 683.336 L1643.57 683.336 L1643.01 683.336 L1642.45 683.336 L1641.89 683.336 L1641.33 683.336 L1640.77 683.336 L1640.21 683.336 L1639.66 683.336 L1639.1 683.336 L1638.54 683.336 L1637.98 683.336 L1637.42 683.336 L1636.86 683.336 L1636.3 683.336 L1635.74 683.336 L1635.18 683.336 L1634.62 683.336 L1634.06 683.336 L1633.5 683.336 L1632.94 683.336 L1632.39 683.336 L1631.83 683.336 L1631.27 683.336 L1630.71 683.336 L1630.15 683.336 L1629.59 683.336 L1629.03 683.336 L1628.47 683.336 L1627.91 683.336 L1627.35 683.336 L1626.79 683.336 L1626.23 683.336 L1625.67 683.336 L1625.11 683.336 L1624.56 683.336 L1624 683.336 L1623.44 683.336 L1622.88 683.336 L1622.32 683.336 L1621.76 683.336 L1621.2 683.336 L1620.64 683.336 L1620.08 683.336 L1619.52 683.336 L1618.96 683.336 L1618.4 683.336 L1617.84 683.336 L1617.29 683.336 L1616.73 683.336 L1616.17 683.336 L1615.61 683.336 L1615.05 683.336 L1614.49 683.336 L1613.93 683.336 L1613.37 683.336 L1612.81 683.336 L1612.25 683.336 L1611.69 683.336 L1611.13 683.336 L1610.57 683.336 L1610.02 683.336 L1609.46 683.336 L1608.9 683.336 L1608.34 683.336 L1607.78 683.336 L1607.22 683.336 L1606.66 683.336 L1606.1 683.336 L1605.54 683.336 L1604.98 683.336 L1604.42 683.336 L1603.86 683.336 L1603.3 683.336 L1602.74 683.336 L1602.19 683.336 L1601.63 683.336 L1601.07 683.336 L1600.51 683.336 L1599.95 683.336 L1599.39 683.336 L1598.83 683.336 L1598.27 683.336 L1597.71 683.336 L1597.15 683.336 L1596.59 683.336 L1596.03 683.336 L1595.47 683.336 L1594.92 683.336 L1594.36 683.336 L1593.8 683.336 L1593.24 683.336 L1592.68 683.336 L1592.12 683.336 L1591.56 683.336 L1591 683.336 L1590.44 683.336 L1589.88 683.336 L1589.32 683.336 L1588.76 683.336 L1588.2 683.336 L1587.65 683.336 L1587.09 683.336 L1586.53 683.336 L1585.97 683.336 L1585.41 683.336 L1584.85 683.336 L1584.29 683.336 L1583.73 683.336 L1583.17 683.336 L1582.61 683.336 L1582.05 683.336 L1581.49 683.336 L1580.93 683.336 L1580.37 683.336 L1579.82 683.336 L1579.26 683.336 L1578.7 683.336 L1578.14 683.336 L1577.58 683.336 L1577.02 683.336 L1576.46 683.336 L1575.9 683.336 L1575.34 683.336 L1574.78 683.336 L1574.22 683.336 L1573.66 683.336 L1573.1 683.336 L1572.55 683.336 L1571.99 683.336 L1571.43 683.336 L1570.87 683.336 L1570.31 683.336 L1569.75 683.336 L1569.19 683.336 L1568.63 683.336 L1568.07 683.336 L1567.51 683.336 L1566.95 683.336 L1566.39 683.336 L1565.83 683.336 L1565.28 683.336 L1564.72 683.336 L1564.16 683.336 L1563.6 683.336 L1563.04 683.336 L1562.48 683.336 L1561.92 683.336 L1561.36 683.336 L1560.8 683.336 L1560.24 683.336 L1559.68 683.336 L1559.12 683.336 L1558.56 683.336 L1558 683.336 L1557.45 683.336 L1556.89 683.336 L1556.33 683.336 L1555.77 683.336 L1555.21 683.336 L1554.65 683.336 L1554.09 683.336 L1553.53 683.336 L1552.97 683.336 L1552.41 683.336 L1551.85 683.336 L1551.29 683.336 L1550.73 683.336 L1550.18 683.336 L1549.62 683.336 L1549.06 683.336 L1548.5 683.336 L1547.94 683.336 L1547.38 683.336 L1546.82 683.336 L1546.26 683.336 L1545.7 683.336 L1545.14 683.336 L1544.58 683.336 L1544.02 683.336 L1543.46 683.336 L1542.9 683.336 L1542.35 683.336 L1541.79 683.336 L1541.23 683.336 L1540.67 683.336 L1540.11 683.336 L1539.55 683.336 L1538.99 683.336 L1538.43 683.336 L1537.87 683.336 L1537.31 683.336 L1536.75 683.336 L1536.19 683.336 L1535.63 683.336 L1535.08 683.336 L1534.52 683.336 L1533.96 683.336 L1533.4 683.336 L1532.84 683.336 L1532.28 683.336 L1531.72 683.336 L1531.16 683.336 L1530.6 683.336 L1530.04 683.336 L1529.48 683.336 L1528.92 683.336 L1528.36 683.336 L1527.81 683.336 L1527.25 683.336 L1526.69 683.336 L1526.13 683.336 L1525.57 683.336 L1525.01 683.336 L1524.45 683.336 L1523.89 683.336 L1523.33 683.336 L1522.77 683.336 L1522.21 683.336 L1521.65 683.336 L1521.09 683.336 L1520.53 683.336 L1519.98 683.336 L1519.42 683.336 L1518.86 683.336 L1518.3 683.336 L1517.74 683.336 L1517.18 683.336 L1516.62 683.336 L1516.06 683.336 L1515.5 683.336 L1514.94 683.336 L1514.38 683.336 L1513.82 683.336 L1513.26 683.336 L1512.71 683.336 L1512.15 683.336 L1511.59 683.336 L1511.03 683.336 L1510.47 683.336 L1509.91 683.336 L1509.35 683.336 L1508.79 683.336 L1508.23 683.336 L1507.67 683.336 L1507.11 683.336 L1506.55 683.336 L1505.99 683.336 L1505.44 683.336 L1504.88 683.336 L1504.32 683.336 L1503.76 683.336 L1503.2 683.336 L1502.64 683.336 L1502.08 683.336 L1501.52 683.336 L1500.96 683.336 L1500.4 683.336 L1499.84 683.336 L1499.28 683.336 L1498.72 683.336 L1498.16 683.336 L1497.61 683.336 L1497.05 683.336 L1496.49 683.336 L1495.93 683.336 L1495.37 683.336 L1494.81 683.336 L1494.25 683.336 L1493.69 683.336 L1493.13 683.336 L1492.57 683.336 L1492.01 683.336 L1491.45 683.336 L1490.89 683.336 L1490.34 683.336 L1489.78 683.336 L1489.22 683.336 L1488.66 683.336 L1488.1 683.336 L1487.54 683.336 L1486.98 683.336 L1486.42 683.336 L1485.86 683.336 L1485.3 683.336 L1484.74 683.336 L1484.18 683.336 L1483.62 683.336 L1483.07 683.336 L1482.51 683.336 L1481.95 683.336 L1481.39 683.336 L1480.83 683.336 L1480.27 683.336 L1479.71 683.336 L1479.15 683.336 L1478.59 683.336 L1478.03 683.336 L1477.47 683.336 L1476.91 683.336 L1476.35 683.336 L1475.79 683.336 L1475.24 683.336 L1474.68 683.336 L1474.12 683.336 L1473.56 683.336 L1473 683.336 L1472.44 683.336 L1471.88 683.336 L1471.32 683.336 L1470.76 683.336 L1470.2 683.336 L1469.64 683.336 L1469.08 683.336 L1468.52 683.336 L1467.97 683.336 L1467.41 683.336 L1466.85 683.336 L1466.29 683.336 L1465.73 683.336 L1465.17 683.336 L1464.61 683.336 L1464.05 683.336 L1463.49 683.336 L1462.93 683.336 L1462.37 683.336 L1461.81 683.336 L1461.25 683.336 L1460.7 683.336 L1460.14 683.336 L1459.58 683.336 L1459.02 683.336 L1458.46 683.336 L1457.9 683.336 L1457.34 683.336 L1456.78 683.336 L1456.22 683.336 L1455.66 683.336 L1455.1 683.336 L1454.54 683.336 L1453.98 683.336 L1453.42 683.336 L1452.87 683.336 L1452.31 683.336 L1451.75 683.336 L1451.19 683.336 L1450.63 683.336 L1450.07 683.336 L1449.51 683.336 L1448.95 683.336 L1448.39 683.336 L1447.83 683.336 L1447.27 683.336 L1446.71 683.336 L1446.15 683.336 L1445.6 683.336 L1445.04 683.336 L1444.48 683.336 L1443.92 683.336 L1443.36 683.336 L1442.8 683.336 L1442.24 683.336 L1441.68 683.336 L1441.12 683.336 L1440.56 683.336 L1440 683.336 L1439.44 683.336 L1438.88 683.336 L1438.33 683.336 L1437.77 683.336 L1437.21 683.336 L1436.65 683.336 L1436.09 683.336 L1435.53 683.336 L1434.97 683.336 L1434.41 683.336 L1433.85 683.336 L1433.29 683.336 L1432.73 683.336 L1432.17 683.336 L1431.61 683.336 L1431.05 683.336 L1430.5 683.336 L1429.94 683.336 L1429.38 683.336 L1428.82 683.336 L1428.26 683.336 L1427.7 683.336 L1427.14 683.336 L1426.58 683.336 L1426.02 683.336 L1425.46 683.336 L1424.9 683.336 L1424.34 683.336 L1423.78 683.336 L1423.23 683.336 L1422.67 683.336 L1422.11 683.336 L1421.55 683.336 L1420.99 683.336 L1420.43 683.336 L1419.87 683.336 L1419.31 683.336 L1418.75 683.336 L1418.19 683.336 L1417.63 683.336 L1417.07 683.336 L1416.51 683.336 L1415.95 683.336 L1415.4 683.336 L1414.84 683.336 L1414.28 683.336 L1413.72 683.336 L1413.16 683.336 L1412.6 683.336 L1412.04 683.336 L1411.48 683.336 L1410.92 683.336 L1410.36 683.336 L1409.8 683.336 L1409.24 683.336 L1408.68 683.336 L1408.13 683.336 L1407.57 683.336 L1407.01 683.336 L1406.45 683.336 L1405.89 683.336 L1405.33 683.336 L1404.77 683.336 L1404.21 683.336 L1403.65 683.336 L1403.09 683.336 L1402.53 683.336 L1401.97 683.336 L1401.41 683.336 L1400.86 683.336 L1400.3 683.336 L1399.74 683.336 L1399.18 683.336 L1398.62 683.336 L1398.06 683.336 L1397.5 683.336 L1396.94 683.336 L1396.38 683.336 L1395.82 683.336 L1395.26 683.336 L1394.7 683.336 L1394.14 683.336 L1393.58 683.336 L1393.03 683.336 L1392.47 683.336 L1391.91 683.336 L1391.35 683.336 L1390.79 683.336 L1390.23 683.336 L1389.67 683.336 L1389.11 683.336 L1388.55 683.336 L1387.99 683.336 L1387.43 683.336 L1386.87 683.336 L1386.31 683.336 L1385.76 683.336 L1385.2 683.336 L1384.64 683.336 L1384.08 683.336 L1383.52 683.336 L1382.96 683.336 L1382.4 683.336 L1381.84 683.336 L1381.28 683.336 L1380.72 683.336 L1380.16 683.336 L1379.6 683.336 L1379.04 683.336 L1378.49 683.336 L1377.93 683.336 L1377.37 683.336 L1376.81 683.336 L1376.25 683.336 L1375.69 683.336 L1375.13 683.336 L1374.57 683.336 L1374.01 683.336 L1373.45 683.336 L1372.89 683.336 L1372.33 683.336 L1371.77 683.336 L1371.21 683.336 L1370.66 683.336 L1370.1 683.336 L1369.54 683.336 L1368.98 683.336 L1368.42 683.336 L1367.86 683.336 L1367.3 683.336 L1366.74 683.336 L1366.18 683.336 L1365.62 683.336 L1365.06 683.336 L1364.5 683.336 L1363.94 683.336 L1363.39 683.336 L1362.83 683.336 L1362.27 683.336 L1361.71 683.336 L1361.15 683.336 L1360.59 683.336 L1360.03 683.336 L1359.47 683.336 L1358.91 683.336 L1358.35 683.336 L1357.79 683.336 L1357.23 683.336 L1356.67 683.336 L1356.12 683.336 L1355.56 683.336 L1355 683.336 L1354.44 683.336 L1353.88 683.336 L1353.32 683.336 L1352.76 683.336 L1352.2 683.336 L1351.64 683.336 L1351.08 683.336 L1350.52 683.336 L1349.96 683.336 L1349.4 683.336 L1348.84 683.336 L1348.29 683.336 L1347.73 683.336 L1347.17 683.336 L1346.61 683.336 L1346.05 683.336 L1345.49 683.336 L1344.93 683.336 L1344.37 683.336 L1343.81 683.336 L1343.25 683.336 L1342.69 683.336 L1342.13 683.336 L1341.57 683.336 L1341.02 683.336 L1340.46 683.336 L1339.9 683.336 L1339.34 683.336 L1338.78 683.336 L1338.22 683.336 L1337.66 683.336 L1337.1 683.336 L1336.54 683.336 L1335.98 683.336 L1335.42 683.336 L1334.86 683.336 L1334.3 683.336 L1333.75 683.336 L1333.19 683.336 L1332.63 683.336 L1332.07 683.336 L1331.51 683.336 L1330.95 683.336 L1330.39 683.336 L1329.83 683.336 L1329.27 683.336 L1328.71 683.336 L1328.15 683.336 L1327.59 683.336 L1327.03 683.336 L1326.47 683.336 L1325.92 683.336 L1325.36 683.336 L1324.8 683.336 L1324.24 683.336 L1323.68 683.336 L1323.12 683.336 L1322.56 683.336 L1322 683.336 L1321.44 683.336 L1320.88 683.336 L1320.32 683.336 L1319.76 683.336 L1319.2 683.336 L1318.65 683.336 L1318.09 683.336 L1317.53 683.336 L1316.97 683.336 L1316.41 683.336 L1315.85 683.336 L1315.29 683.336 L1314.73 683.336 L1314.17 683.336 L1313.61 683.336 L1313.05 683.336 L1312.49 683.336 L1311.93 683.336 L1311.38 683.336 L1310.82 683.336 L1310.26 683.336 L1309.7 683.336 L1309.14 683.336 L1308.58 683.336 L1308.02 683.336 L1307.46 683.336 L1306.9 683.336 L1306.34 683.336 L1305.78 683.336 L1305.22 683.336 L1304.66 683.336 L1304.1 683.336 L1303.55 683.336 L1302.99 683.336 L1302.43 683.336 L1301.87 683.336 L1301.31 683.336 L1300.75 683.336 L1300.19 683.336 L1299.63 683.336 L1299.07 683.336 L1298.51 683.336 L1297.95 683.336 L1297.39 683.336 L1296.83 683.336 L1296.28 683.336 L1295.72 683.336 L1295.16 683.336 L1294.6 683.336 L1294.04 683.336 L1293.48 683.336 L1292.92 683.336 L1292.36 683.336 L1291.8 683.336 L1291.24 683.336 L1290.68 683.336 L1290.12 683.336 L1289.56 683.336 L1289 683.336 L1288.45 683.336 L1287.89 683.336 L1287.33 683.336 L1286.77 683.336 L1286.21 683.336 L1285.65 683.336 L1285.09 683.336 L1284.53 683.336 L1283.97 683.336 L1283.41 683.336 L1282.85 683.336 L1282.29 683.336 L1281.73 683.336 L1281.18 683.336 L1280.62 683.336 L1280.06 683.336 L1279.5 683.336 L1278.94 683.336 L1278.38 683.336 L1277.82 683.336 L1277.26 683.336 L1276.7 683.336 L1276.14 683.336 L1275.58 683.336 L1275.02 683.336 L1274.46 683.336 L1273.91 683.336 L1273.35 683.336 L1272.79 683.336 L1272.23 683.336 L1271.67 683.336 L1271.11 683.336 L1270.55 683.336 L1269.99 683.336 L1269.43 683.336 L1268.87 683.336 L1268.31 683.336 L1267.75 683.336 L1267.19 683.336 L1266.63 683.336 L1266.08 683.336 L1265.52 683.336 L1264.96 683.336 L1264.4 683.336 L1263.84 683.336 L1263.28 683.336 L1262.72 683.336 L1262.16 683.336 L1261.6 683.336 L1261.04 683.336 L1260.48 683.336 L1259.92 683.336 L1259.36 683.336 L1258.81 683.336 L1258.25 683.336 L1257.69 683.336 L1257.13 683.336 L1256.57 683.336 L1256.01 683.336 L1255.45 683.336 L1254.89 683.336 L1254.33 683.336 L1253.77 683.336 L1253.21 683.336 L1252.65 683.336 L1252.09 683.336 L1251.54 683.336 L1250.98 683.336 L1250.42 683.336 L1249.86 683.336 L1249.3 683.336 L1248.74 683.336 L1248.18 683.336 L1247.62 683.336 L1247.06 683.336 L1246.5 683.336 L1245.94 683.336 L1245.38 683.336 L1244.82 683.336 L1244.26 683.336 L1243.71 683.336 L1243.15 683.336 L1242.59 683.336 L1242.03 683.336 L1241.47 683.336 L1240.91 683.336 L1240.35 683.336 L1239.79 683.336 L1239.23 683.336 L1238.67 683.336 L1238.11 683.336 L1237.55 683.336 L1236.99 683.336 L1236.44 683.336 L1235.88 683.336 L1235.32 683.336 L1234.76 683.336 L1234.2 683.336 L1233.64 683.336 L1233.08 683.336 L1232.52 683.336 L1231.96 683.336 L1231.4 683.336 L1230.84 683.336 L1230.28 683.336 L1229.72 683.336 L1229.17 683.336 L1228.61 683.336 L1228.05 683.336 L1227.49 683.336 L1226.93 683.336 L1226.37 683.336 L1225.81 683.336 L1225.25 683.336 L1224.69 683.336 L1224.13 683.336 L1223.57 683.336 L1223.01 683.336 L1222.45 683.336 L1221.89 683.336 L1221.34 683.336 L1220.78 683.336 L1220.22 683.336 L1219.66 683.336 L1219.1 683.336 L1218.54 683.336 L1217.98 683.336 L1217.42 683.336 L1216.86 683.336 L1216.3 683.336 L1215.74 683.336 L1215.18 683.336 L1214.62 683.336 L1214.07 683.336 L1213.51 683.336 L1212.95 683.336 L1212.39 683.336 L1211.83 683.336 L1211.27 683.336 L1210.71 683.336 L1210.15 683.336 L1209.59 683.336 L1209.03 683.336 L1208.47 683.336 L1207.91 683.336 L1207.35 683.336 L1206.8 683.336 L1206.24 683.336 L1205.68 683.336 L1205.12 683.336 L1204.56 683.336 L1204 683.336 L1203.44 683.336 L1202.88 683.336 L1202.32 683.336 L1201.76 683.336 L1201.2 683.336 L1200.64 683.336 L1200.08 683.336 L1199.52 683.336 L1198.97 683.336 L1198.41 683.336 L1197.85 683.336 L1197.29 683.336 L1196.73 683.336 L1196.17 683.336 L1195.61 683.336 L1195.05 683.336 L1194.49 683.336 L1193.93 683.336 L1193.37 683.336 L1192.81 683.336 L1192.25 683.336 L1191.7 683.336 L1191.14 683.336 L1190.58 683.336 L1190.02 683.336 L1189.46 683.336 L1188.9 683.336 L1188.34 683.336 L1187.78 683.336 L1187.22 683.336 L1186.66 683.336 L1186.1 683.336 L1185.54 683.336 L1184.98 683.336 L1184.43 683.336 L1183.87 683.336 L1183.31 683.336 L1182.75 683.336 L1182.19 683.336 L1181.63 683.336 L1181.07 683.336 L1180.51 683.336 L1179.95 683.336 L1179.39 683.336 L1178.83 683.336 L1178.27 683.336 L1177.71 683.336 L1177.15 683.336 L1176.6 683.336 L1176.04 683.336 L1175.48 683.336 L1174.92 683.336 L1174.36 683.336 L1173.8 683.336 L1173.24 683.336 L1172.68 683.336 L1172.12 683.336 L1171.56 683.336 L1171 683.336 L1170.44 683.336 L1169.88 683.336 L1169.33 683.336 L1168.77 683.336 L1168.21 683.336 L1167.65 683.336 L1167.09 683.336 L1166.53 683.336 L1165.97 683.336 L1165.41 683.336 L1164.85 683.336 L1164.29 683.336 L1163.73 683.336 L1163.17 683.336 L1162.61 683.336 L1162.05 683.336 L1161.5 683.336 L1160.94 683.336 L1160.38 683.336 L1159.82 683.336 L1159.26 683.336 L1158.7 683.336 L1158.14 683.336 L1157.58 683.336 L1157.02 683.336 L1156.46 683.336 L1155.9 683.336 L1155.34 683.336 L1154.78 683.336 L1154.23 683.336 L1153.67 683.336 L1153.11 683.336 L1152.55 683.336 L1151.99 683.336 L1151.43 683.336 L1150.87 683.336 L1150.31 683.336 L1149.75 683.336 L1149.19 683.336 L1148.63 683.336 L1148.07 683.336 L1147.51 683.336 L1146.96 683.336 L1146.4 683.336 L1145.84 683.336 L1145.28 683.336 L1144.72 683.336 L1144.16 683.336 L1143.6 683.336 L1143.04 683.336 L1142.48 683.336 L1141.92 683.336 L1141.36 683.336 L1140.8 683.336 L1140.24 683.336 L1139.68 683.336 L1139.13 683.336 L1138.57 683.336 L1138.01 683.336 L1137.45 683.336 L1136.89 683.336 L1136.33 683.336 L1135.77 683.336 L1135.21 683.336 L1134.65 683.336 L1134.09 683.336 L1133.53 683.336 L1132.97 683.336 L1132.41 683.336 L1131.86 683.336 L1131.3 683.336 L1130.74 683.336 L1130.18 683.336 L1129.62 683.336 L1129.06 683.336 L1128.5 683.336 L1127.94 683.336 L1127.38 683.336 L1126.82 683.336 L1126.26 683.336 L1125.7 683.336 L1125.14 683.336 L1124.59 683.336 L1124.03 683.336 L1123.47 683.336 L1122.91 683.336 L1122.35 683.336 L1121.79 683.336 L1121.23 683.336 L1120.67 683.336 L1120.11 683.336 L1119.55 683.336 L1118.99 683.336 L1118.43 683.336 L1117.87 683.336 L1117.31 683.336 L1116.76 683.336 L1116.2 683.336 L1115.64 683.336 L1115.08 683.336 L1114.52 683.336 L1113.96 683.336 L1113.4 683.336 L1112.84 683.336 L1112.28 683.336 L1111.72 683.336 L1111.16 683.336 L1110.6 683.336 L1110.04 683.336 L1109.49 683.336 L1108.93 683.336 L1108.37 683.336 L1107.81 683.336 L1107.25 683.336 L1106.69 683.336 L1106.13 683.336 L1105.57 683.336 L1105.01 683.336 L1104.45 683.336 L1103.89 683.336 L1103.33 683.336 L1102.77 683.336 L1102.22 683.336 L1101.66 683.336 L1101.1 683.336 L1100.54 683.336 L1099.98 683.336 L1099.42 683.336 L1098.86 683.336 L1098.3 683.336 L1097.74 683.336 L1097.18 683.336 L1096.62 683.336 L1096.06 683.336 L1095.5 683.336 L1094.94 683.336 L1094.39 683.336 L1093.83 683.336 L1093.27 683.336 L1092.71 683.336 L1092.15 683.336 L1091.59 683.336 L1091.03 683.336 L1090.47 683.336 L1089.91 683.336 L1089.35 683.336 L1088.79 683.336 L1088.23 683.336 L1087.67 683.336 L1087.12 683.336 L1086.56 683.336 L1086 683.336 L1085.44 683.336 L1084.88 683.336 L1084.32 683.336 L1083.76 683.336 L1083.2 683.336 L1082.64 683.336 L1082.08 683.336 L1081.52 683.336 L1080.96 683.336 L1080.4 683.336 L1079.85 683.336 L1079.29 683.336 L1078.73 683.336 L1078.17 683.336 L1077.61 683.336 L1077.05 683.336 L1076.49 683.336 L1075.93 683.336 L1075.37 683.336 L1074.81 683.336 L1074.25 683.336 L1073.69 683.336 L1073.13 683.336 L1072.57 683.336 L1072.02 683.336 L1071.46 683.336 L1070.9 683.336 L1070.34 683.336 L1069.78 683.336 L1069.22 683.336 L1068.66 683.336 L1068.1 683.336 L1067.54 683.336 L1066.98 683.336 L1066.42 683.336 L1065.86 683.336 L1065.3 683.336 L1064.75 683.336 L1064.19 683.336 L1063.63 683.336 L1063.07 683.336 L1062.51 683.336 L1061.95 683.336 L1061.39 683.336 L1060.83 683.336 L1060.27 683.336 L1059.71 683.336 L1059.15 683.336 L1058.59 683.336 L1058.03 683.336 L1057.48 683.336 L1056.92 683.336 L1056.36 683.336 L1055.8 683.336 L1055.24 683.336 L1054.68 683.336 L1054.12 683.336 L1053.56 683.336 L1053 683.336 L1052.44 683.336 L1051.88 683.336 L1051.32 683.336 L1050.76 683.336 L1050.2 683.336 L1049.65 683.336 L1049.09 683.336 L1048.53 683.336 L1047.97 683.336 L1047.41 683.336 L1046.85 683.336 L1046.29 683.336 L1045.73 683.336 L1045.17 683.336 L1044.61 683.336 L1044.05 683.336 L1043.49 683.336 L1042.93 683.336 L1042.38 683.336 L1041.82 683.336 L1041.26 683.336 L1040.7 683.336 L1040.14 683.336 L1039.58 683.336 L1039.02 683.336 L1038.46 683.336 L1037.9 683.336 L1037.34 683.336 L1036.78 683.336 L1036.22 683.336 L1035.66 683.336 L1035.1 683.336 L1034.55 683.336 L1033.99 683.336 L1033.43 683.336 L1032.87 683.336 L1032.31 683.336 L1031.75 683.336 L1031.19 683.336 L1030.63 683.336 L1030.07 683.336 L1029.51 683.336 L1028.95 683.336 L1028.39 683.336 L1027.83 683.336 L1027.28 683.336 L1026.72 683.336 L1026.16 683.336 L1025.6 683.336 L1025.04 683.336 L1024.48 683.336 L1023.92 683.336 L1023.36 683.336 L1022.8 683.336 L1022.24 683.336 L1021.68 683.336 L1021.12 683.336 L1020.56 683.336 L1020.01 683.336 L1019.45 683.336 L1018.89 683.336 L1018.33 683.336 L1017.77 683.336 L1017.21 683.336 L1016.65 683.336 L1016.09 683.336 L1015.53 683.336 L1014.97 683.336 L1014.41 683.336 L1013.85 683.336 L1013.29 683.336 L1012.73 683.336 L1012.18 683.336 L1011.62 683.336 L1011.06 683.336 L1010.5 683.336 L1009.94 683.336 L1009.38 683.336 L1008.82 683.336 L1008.26 683.336 L1007.7 683.336 L1007.14 683.336 L1006.58 683.336 L1006.02 683.336 L1005.46 683.336 L1004.91 683.336 L1004.35 683.336 L1003.79 683.336 L1003.23 683.336 L1002.67 683.336 L1002.11 683.336 L1001.55 683.336 L1000.99 683.336 L1000.43 683.336 L999.872 683.336 L999.313 683.336 L998.754 683.336 L998.194 683.336 L997.635 683.336 L997.076 683.336 L996.517 683.336 L995.957 683.336 L995.398 683.336 L994.839 683.336 L994.28 683.336 L993.72 683.336 L993.161 683.336 L992.602 683.336 L992.043 683.336 L991.483 683.336 L990.924 683.336 L990.365 683.336 L989.806 683.336 L989.246 683.336 L988.687 683.336 L988.128 683.336 L987.569 683.336 L987.009 683.336 L986.45 683.336 L985.891 683.336 L985.332 683.336 L984.772 683.336 L984.213 683.336 L983.654 683.336 L983.095 683.336 L982.535 683.336 L981.976 683.336 L981.417 683.336 L980.858 683.336 L980.298 683.336 L979.739 683.336 L979.18 683.336 L978.621 683.336 L978.061 683.336 L977.502 683.336 L976.943 683.336 L976.384 683.336 L975.824 683.336 L975.265 683.336 L974.706 683.336 L974.147 683.336 L973.587 683.336 L973.028 683.336 L972.469 683.336 L971.91 683.336 L971.35 683.336 L970.791 683.336 L970.232 683.336 L969.673 683.336 L969.113 683.336 L968.554 683.336 L967.995 683.336 L967.436 683.336 L966.876 683.336 L966.317 683.336 L965.758 683.336 L965.199 683.336 L964.639 683.336 L964.08 683.336 L963.521 683.336 L962.962 683.336 L962.402 683.336 L961.843 683.336 L961.284 683.336 L960.725 683.336 L960.165 683.336 L959.606 683.336 L959.047 683.336 L958.488 683.336 L957.928 683.336 L957.369 683.336 L956.81 683.336 L956.251 683.336 L955.691 683.336 L955.132 683.336 L954.573 683.336 L954.014 683.336 L953.454 683.336 L952.895 683.336 L952.336 683.336 L951.777 683.336 L951.217 683.336 L950.658 683.336 L950.099 683.336 L949.54 683.336 L948.98 683.336 L948.421 683.336 L947.862 683.336 L947.303 683.336 L946.743 683.336 L946.184 683.336 L945.625 683.336 L945.066 683.336 L944.506 683.336 L943.947 683.336 L943.388 683.336 L942.829 683.336 L942.269 683.336 L941.71 683.336 L941.151 683.336 L940.592 683.336 L940.032 683.336 L939.473 683.336 L938.914 683.336 L938.355 683.336 L937.795 683.336 L937.236 683.336 L936.677 683.336 L936.118 683.336 L935.558 683.336 L934.999 683.336 L934.44 683.336 L933.881 683.336 L933.321 683.336 L932.762 683.336 L932.203 683.336 L931.644 683.336 L931.084 683.336 L930.525 683.336 L929.966 683.336 L929.406 683.336 L928.847 683.336 L928.288 683.336 L927.729 683.336 L927.169 683.336 L926.61 683.336 L926.051 683.336 L925.492 683.336 L924.932 683.336 L924.373 683.336 L923.814 683.336 L923.255 683.336 L922.695 683.336 L922.136 683.336 L921.577 683.336 L921.018 683.336 L920.458 683.336 L919.899 683.336 L919.34 683.336 L918.781 683.336 L918.221 683.336 L917.662 683.336 L917.103 683.336 L916.544 683.336 L915.984 683.336 L915.425 683.336 L914.866 683.336 L914.307 683.336 L913.747 683.336 L913.188 683.336 L912.629 683.336 L912.07 683.336 L911.51 683.336 L910.951 683.336 L910.392 683.336 L909.833 683.336 L909.273 683.336 L908.714 683.336 L908.155 683.336 L907.596 683.336 L907.036 683.336 L906.477 683.336 L905.918 683.336 L905.359 683.336 L904.799 683.336 L904.24 683.336 L903.681 683.336 L903.122 683.336 L902.562 683.336 L902.003 683.336 L901.444 683.336 L900.885 683.336 L900.325 683.336 L899.766 683.336 L899.207 683.336 L898.648 683.336 L898.088 683.336 L897.529 683.336 L896.97 683.336 L896.411 683.336 L895.851 683.336 L895.292 683.336 L894.733 683.336 L894.174 683.336 L893.614 683.336 L893.055 683.336 L892.496 683.336 L891.937 683.336 L891.377 683.336 L890.818 683.336 L890.259 683.336 L889.7 683.336 L889.14 683.336 L888.581 683.336 L888.022 683.336 L887.463 683.336 L886.903 683.336 L886.344 683.336 L885.785 683.336 L885.226 683.336 L884.666 683.336 L884.107 683.336 L883.548 683.336 L882.989 683.336 L882.429 683.336 L881.87 683.336 L881.311 683.336 L880.752 683.336 L880.192 683.336 L879.633 683.336 L879.074 683.336 L878.515 683.336 L877.955 683.336 L877.396 683.336 L876.837 683.336 L876.278 683.336 L875.718 683.336 L875.159 683.336 L874.6 683.336 L874.041 683.336 L873.481 683.336 L872.922 683.336 L872.363 683.336 L871.804 683.336 L871.244 683.336 L870.685 683.336 L870.126 683.336 L869.567 683.336 L869.007 683.336 L868.448 683.336 L867.889 683.336 L867.33 683.336 L866.77 683.336 L866.211 683.336 L865.652 683.336 L865.093 683.336 L864.533 683.336 L863.974 683.336 L863.415 683.336 L862.856 683.336 L862.296 683.336 L861.737 683.336 L861.178 683.336 L860.619 683.336 L860.059 683.336 L859.5 683.336 L858.941 683.336 L858.382 683.336 L857.822 683.336 L857.263 683.336 L856.704 683.336 L856.145 683.336 L855.585 683.336 L855.026 683.336 L854.467 683.336 L853.908 683.336 L853.348 683.336 L852.789 683.336 L852.23 683.336 L851.671 683.336 L851.111 683.336 L850.552 683.336 L849.993 683.336 L849.434 683.336 L848.874 683.336 L848.315 683.336 L847.756 683.336 L847.197 683.336 L846.637 683.336 L846.078 683.336 L845.519 683.336 L844.96 683.336 L844.4 683.336 L843.841 683.336 L843.282 683.336 L842.723 683.336 L842.163 683.336 L841.604 683.336 L841.045 683.336 L840.486 683.336 L839.926 683.336 L839.367 683.336 L838.808 683.336 L838.249 683.336 L837.689 683.336 L837.13 683.336 L836.571 683.336 L836.012 683.336 L835.452 683.336 L834.893 683.336 L834.334 683.336 L833.775 683.336 L833.215 683.336 L832.656 683.336 L832.097 683.336 L831.538 683.336 L830.978 683.336 L830.419 683.336 L829.86 683.336 L829.301 683.336 L828.741 683.336 L828.182 683.336 L827.623 683.336 L827.064 683.336 L826.504 683.336 L825.945 683.336 L825.386 683.336 L824.827 683.336 L824.267 683.336 L823.708 683.336 L823.149 683.336 L822.59 683.336 L822.03 683.336 L821.471 683.336 L820.912 683.336 L820.353 683.336 L819.793 683.336 L819.234 683.336 L818.675 683.336 L818.116 683.336 L817.556 683.336 L816.997 683.336 L816.438 683.336 L815.879 683.336 L815.319 683.336 L814.76 683.336 L814.201 683.336 L813.642 683.336 L813.082 683.336 L812.523 683.336 L811.964 683.336 L811.405 683.336 L810.845 683.336 L810.286 683.336 L809.727 683.336 L809.168 683.336 L808.608 683.336 L808.049 683.336 L807.49 683.336 L806.931 683.336 L806.371 683.336 L805.812 683.336 L805.253 683.336 L804.693 683.336 L804.134 683.336 L803.575 683.336 L803.016 683.336 L802.456 683.336 L801.897 683.336 L801.338 683.336 L800.779 683.336 L800.219 683.336 L799.66 683.336 L799.101 683.336 L798.542 683.336 L797.982 683.336 L797.423 683.336 L796.864 683.336 L796.305 683.336 L795.745 683.336 L795.186 683.336 L794.627 683.336 L794.068 683.336 L793.508 683.336 L792.949 683.336 L792.39 683.336 L791.831 683.336 L791.271 683.336 L790.712 683.336 L790.153 683.336 L789.594 683.336 L789.034 683.336 L788.475 683.336 L787.916 683.336 L787.357 683.336 L786.797 683.336 L786.238 683.336 L785.679 683.336 L785.12 683.336 L784.56 683.336 L784.001 683.336 L783.442 683.336 L782.883 683.336 L782.323 683.336 L781.764 683.336 L781.205 683.336 L780.646 683.336 L780.086 683.336 L779.527 683.336 L778.968 683.336 L778.409 683.336 L777.849 683.336 L777.29 683.336 L776.731 683.336 L776.172 683.336 L775.612 683.336 L775.053 683.336 L774.494 683.336 L773.935 683.336 L773.375 683.336 L772.816 683.336 L772.257 683.336 L771.698 683.336 L771.138 683.336 L770.579 683.336 L770.02 683.336 L769.461 683.336 L768.901 683.336 L768.342 683.336 L767.783 683.336 L767.224 683.336 L766.664 683.336 L766.105 683.336 L765.546 683.336 L764.987 683.336 L764.427 683.336 L763.868 683.336 L763.309 683.336 L762.75 683.336 L762.19 683.336 L761.631 683.336 L761.072 683.336 L760.513 683.336 L759.953 683.336 L759.394 683.336 L758.835 683.336 L758.276 683.336 L757.716 683.336 L757.157 683.336 L756.598 683.336 L756.039 683.336 L755.479 683.336 L754.92 683.336 L754.361 683.336 L753.802 683.336 L753.242 683.336 L752.683 683.336 L752.124 683.336 L751.565 683.336 L751.005 683.336 L750.446 683.336 L749.887 683.336 L749.328 683.336 L748.768 683.336 L748.209 683.336 L747.65 683.336 L747.091 683.336 L746.531 683.336 L745.972 683.336 L745.413 683.336 L744.854 683.336 L744.294 683.336 L743.735 683.336 L743.176 683.336 L742.617 683.336 L742.057 683.336 L741.498 683.336 L740.939 683.336 L740.38 683.336 L739.82 683.336 L739.261 683.336 L738.702 683.336 L738.143 683.336 L737.583 683.336 L737.024 683.336 L736.465 683.336 L735.906 683.336 L735.346 683.336 L734.787 683.336 L734.228 683.336 L733.669 683.336 L733.109 683.336 L732.55 683.336 L731.991 683.336 L731.432 683.336 L730.872 683.336 L730.313 683.336 L729.754 683.336 L729.195 683.336 L728.635 683.336 L728.076 683.336 L727.517 683.336 L726.958 683.336 L726.398 683.336 L725.839 683.336 L725.28 683.336 L724.721 683.336 L724.161 683.336 L723.602 683.336 L723.043 683.336 L722.484 683.336 L721.924 683.336 L721.365 683.336 L720.806 683.336 L720.247 683.336  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.866 720.806,686.866 721.365,686.866 721.924,686.866 722.484,686.866 723.043,686.866 723.602,686.866 724.161,686.866 724.721,686.866 725.28,686.866 725.839,686.866 726.398,686.866 726.958,686.866 727.517,686.866 728.076,686.866 728.635,686.866 729.195,686.866 729.754,686.866 730.313,686.866 730.872,686.866 731.432,686.866 731.991,686.866 732.55,686.866 733.109,686.866 733.669,686.866 734.228,686.866 734.787,686.866 735.346,686.866 735.906,686.866 736.465,686.866 737.024,686.866 737.583,686.866 738.143,686.866 738.702,686.866 739.261,686.866 739.82,686.866 740.38,686.866 740.939,686.866 741.498,686.866 742.057,686.866 742.617,686.866 743.176,686.866 743.735,686.866 744.294,686.866 744.854,686.866 745.413,686.866 745.972,686.866 746.531,686.866 747.091,686.866 747.65,686.866 748.209,686.866 748.768,686.866 749.328,686.866 749.887,686.866 750.446,686.866 751.005,686.866 751.565,686.866 752.124,686.866 752.683,686.866 753.242,686.866 753.802,686.866 754.361,686.866 754.92,686.866 755.479,686.866 756.039,686.866 756.598,686.866 757.157,686.866 757.716,686.866 758.276,686.866 758.835,686.866 759.394,686.866 759.953,686.866 760.513,686.866 761.072,686.866 761.631,686.866 762.19,686.866 762.75,686.866 763.309,686.866 763.868,686.866 764.427,686.866 764.987,686.866 765.546,686.866 766.105,686.866 766.664,686.866 767.224,686.866 767.783,686.866 768.342,686.866 768.901,686.866 769.461,686.866 770.02,686.866 770.579,686.866 771.138,686.866 771.698,686.866 772.257,686.866 772.816,686.866 773.375,686.866 773.935,686.866 774.494,686.866 775.053,686.866 775.612,686.866 776.172,686.866 776.731,686.866 777.29,686.866 777.849,686.866 778.409,686.866 778.968,686.866 779.527,686.866 780.086,686.866 780.646,686.866 781.205,686.866 781.764,686.866 782.323,686.866 782.883,686.866 783.442,686.866 784.001,686.866 784.56,686.866 785.12,686.866 785.679,686.866 786.238,686.866 786.797,686.866 787.357,686.866 787.916,686.866 788.475,686.866 789.034,686.866 789.594,686.866 790.153,686.866 790.712,686.866 791.271,686.866 791.831,686.866 792.39,686.866 792.949,686.866 793.508,686.866 794.068,686.866 794.627,686.866 795.186,686.866 795.745,686.866 796.305,686.866 796.864,686.866 797.423,686.866 797.982,686.866 798.542,686.866 799.101,686.866 799.66,686.866 800.219,686.866 800.779,686.866 801.338,686.866 801.897,686.866 802.456,686.866 803.016,686.866 803.575,686.866 804.134,686.866 804.693,686.866 805.253,686.866 805.812,686.866 806.371,686.866 806.931,686.866 807.49,686.866 808.049,686.866 808.608,686.866 809.168,686.866 809.727,686.866 810.286,686.866 810.845,686.866 811.405,686.866 811.964,686.866 812.523,686.866 813.082,686.866 813.642,686.866 814.201,686.866 814.76,686.866 815.319,686.866 815.879,686.866 816.438,686.866 816.997,686.866 817.556,686.866 818.116,686.866 818.675,686.866 819.234,686.866 819.793,686.866 820.353,686.866 820.912,686.866 821.471,686.866 822.03,686.866 822.59,686.866 823.149,686.866 823.708,686.866 824.267,686.866 824.827,686.866 825.386,686.866 825.945,686.866 826.504,686.866 827.064,686.866 827.623,686.866 828.182,686.866 828.741,686.866 829.301,686.866 829.86,686.866 830.419,686.866 830.978,686.866 831.538,686.866 832.097,686.866 832.656,686.866 833.215,686.866 833.775,686.866 834.334,686.866 834.893,686.866 835.452,686.866 836.012,686.866 836.571,686.866 837.13,686.866 837.689,686.866 838.249,686.866 838.808,686.866 839.367,686.866 839.926,686.866 840.486,686.866 841.045,686.866 841.604,686.866 842.163,686.866 842.723,686.866 843.282,686.866 843.841,686.866 844.4,686.866 844.96,686.866 845.519,686.866 846.078,686.866 846.637,686.866 847.197,686.866 847.756,686.866 848.315,686.866 848.874,686.866 849.434,686.866 849.993,686.866 850.552,686.866 851.111,686.866 851.671,686.866 852.23,686.866 852.789,686.866 853.348,686.866 853.908,686.866 854.467,686.866 855.026,686.866 855.585,686.866 856.145,686.866 856.704,686.866 857.263,686.866 857.822,686.866 858.382,686.866 858.941,686.866 859.5,686.866 860.059,686.866 860.619,686.866 861.178,686.866 861.737,686.866 862.296,686.866 862.856,686.866 863.415,686.866 863.974,686.866 864.533,686.866 865.093,686.866 865.652,686.866 866.211,686.866 866.77,686.866 867.33,686.866 867.889,686.866 868.448,686.866 869.007,686.866 869.567,686.866 870.126,686.866 870.685,686.866 871.244,686.866 871.804,686.866 872.363,686.866 872.922,686.866 873.481,686.866 874.041,686.866 874.6,686.866 875.159,686.866 875.718,686.866 876.278,686.866 876.837,686.866 877.396,686.866 877.955,686.866 878.515,686.866 879.074,686.866 879.633,686.866 880.192,686.866 880.752,686.866 881.311,686.866 881.87,686.866 882.429,686.866 882.989,686.866 883.548,686.866 884.107,686.866 884.666,686.866 885.226,686.866 885.785,686.866 886.344,686.866 886.903,686.866 887.463,686.866 888.022,686.866 888.581,686.866 889.14,686.866 889.7,686.866 890.259,686.866 890.818,686.866 891.377,686.866 891.937,686.866 892.496,686.866 893.055,686.866 893.614,686.866 894.174,686.866 894.733,686.866 895.292,686.866 895.851,686.866 896.411,686.866 896.97,686.866 897.529,686.866 898.088,686.866 898.648,686.866 899.207,686.866 899.766,686.866 900.325,686.866 900.885,686.866 901.444,686.866 902.003,686.866 902.562,686.866 903.122,686.866 903.681,686.866 904.24,686.866 904.799,686.866 905.359,686.866 905.918,686.866 906.477,686.866 907.036,686.866 907.596,686.866 908.155,686.866 908.714,686.866 909.273,686.866 909.833,686.866 910.392,686.866 910.951,686.866 911.51,686.866 912.07,686.866 912.629,686.866 913.188,686.866 913.747,686.866 914.307,686.866 914.866,686.866 915.425,686.866 915.984,686.866 916.544,686.866 917.103,686.866 917.662,686.866 918.221,686.866 918.781,686.866 919.34,686.866 919.899,686.866 920.458,686.866 921.018,686.866 921.577,686.866 922.136,686.866 922.695,686.866 923.255,686.866 923.814,686.866 924.373,686.866 924.932,686.866 925.492,686.866 926.051,686.866 926.61,686.866 927.169,686.866 927.729,686.866 928.288,686.866 928.847,686.866 929.406,686.866 929.966,686.866 930.525,686.866 931.084,686.866 931.644,686.866 932.203,686.866 932.762,686.866 933.321,686.866 933.881,686.866 934.44,686.866 934.999,686.866 935.558,686.866 936.118,686.866 936.677,686.866 937.236,686.866 937.795,686.866 938.355,686.866 938.914,686.866 939.473,686.866 940.032,686.866 940.592,686.866 941.151,686.866 941.71,686.866 942.269,686.866 942.829,686.866 943.388,686.866 943.947,686.866 944.506,686.866 945.066,686.866 945.625,686.866 946.184,686.866 946.743,686.866 947.303,686.866 947.862,686.866 948.421,686.866 948.98,686.866 949.54,686.866 950.099,686.866 950.658,686.866 951.217,686.866 951.777,686.866 952.336,686.866 952.895,686.866 953.454,686.866 954.014,686.866 954.573,686.866 955.132,686.866 955.691,686.866 956.251,686.866 956.81,686.866 957.369,686.866 957.928,686.866 958.488,686.866 959.047,686.866 959.606,686.866 960.165,686.866 960.725,686.866 961.284,686.866 961.843,686.866 962.402,686.866 962.962,686.866 963.521,686.866 964.08,686.866 964.639,686.866 965.199,686.866 965.758,686.866 966.317,686.866 966.876,686.866 967.436,686.866 967.995,686.866 968.554,686.866 969.113,686.866 969.673,686.866 970.232,686.866 970.791,686.866 971.35,686.866 971.91,686.866 972.469,686.866 973.028,686.866 973.587,686.866 974.147,686.866 974.706,686.866 975.265,686.866 975.824,686.866 976.384,686.866 976.943,686.866 977.502,686.866 978.061,686.866 978.621,686.866 979.18,686.866 979.739,686.866 980.298,686.866 980.858,686.866 981.417,686.866 981.976,686.866 982.535,686.866 983.095,686.866 983.654,686.866 984.213,686.866 984.772,686.866 985.332,686.866 985.891,686.866 986.45,686.866 987.009,686.866 987.569,686.866 988.128,686.866 988.687,686.866 989.246,686.866 989.806,686.866 990.365,686.866 990.924,686.866 991.483,686.866 992.043,686.866 992.602,686.866 993.161,686.866 993.72,686.866 994.28,686.866 994.839,686.866 995.398,686.866 995.957,686.866 996.517,686.866 997.076,686.866 997.635,686.866 998.194,686.866 998.754,686.866 999.313,686.866 999.872,686.866 1000.43,686.866 1000.99,686.866 1001.55,686.866 1002.11,686.866 1002.67,686.866 1003.23,686.866 1003.79,686.866 1004.35,686.866 1004.91,686.866 1005.46,686.866 1006.02,686.866 1006.58,686.866 1007.14,686.866 1007.7,686.866 1008.26,686.866 1008.82,686.866 1009.38,686.866 1009.94,686.866 1010.5,686.866 1011.06,686.866 1011.62,686.866 1012.18,686.866 1012.73,686.866 1013.29,686.866 1013.85,686.866 1014.41,686.866 1014.97,686.866 1015.53,686.866 1016.09,686.866 1016.65,686.866 1017.21,686.866 1017.77,686.866 1018.33,686.866 1018.89,686.866 1019.45,686.866 1020.01,686.866 1020.56,686.866 1021.12,686.866 1021.68,686.866 1022.24,686.866 1022.8,686.866 1023.36,686.866 1023.92,686.866 1024.48,686.866 1025.04,686.866 1025.6,686.866 1026.16,686.866 1026.72,686.866 1027.28,686.866 1027.83,686.866 1028.39,686.866 1028.95,686.866 1029.51,686.866 1030.07,686.866 1030.63,686.866 1031.19,686.866 1031.75,686.866 1032.31,686.866 1032.87,686.866 1033.43,686.866 1033.99,686.866 1034.55,686.866 1035.1,686.866 1035.66,686.866 1036.22,686.866 1036.78,686.866 1037.34,686.866 1037.9,686.866 1038.46,686.866 1039.02,686.866 1039.58,686.866 1040.14,686.866 1040.7,686.866 1041.26,686.866 1041.82,686.866 1042.38,686.866 1042.93,686.866 1043.49,686.866 1044.05,686.866 1044.61,686.866 1045.17,686.866 1045.73,686.866 1046.29,686.866 1046.85,686.866 1047.41,686.866 1047.97,686.866 1048.53,686.866 1049.09,686.866 1049.65,686.866 1050.2,686.866 1050.76,686.866 1051.32,686.866 1051.88,686.866 1052.44,686.866 1053,686.866 1053.56,686.866 1054.12,686.866 1054.68,686.866 1055.24,686.866 1055.8,686.866 1056.36,686.866 1056.92,686.866 1057.48,686.866 1058.03,686.866 1058.59,686.866 1059.15,686.866 1059.71,686.866 1060.27,686.866 1060.83,686.866 1061.39,686.866 1061.95,686.866 1062.51,686.866 1063.07,686.866 1063.63,686.866 1064.19,686.866 1064.75,686.866 1065.3,686.866 1065.86,686.866 1066.42,686.866 1066.98,686.866 1067.54,686.866 1068.1,686.866 1068.66,686.866 1069.22,686.866 1069.78,686.866 1070.34,686.866 1070.9,686.866 1071.46,686.866 1072.02,686.866 1072.57,686.866 1073.13,686.866 1073.69,686.866 1074.25,686.866 1074.81,686.866 1075.37,686.866 1075.93,686.866 1076.49,686.866 1077.05,686.866 1077.61,686.866 1078.17,686.866 1078.73,686.866 1079.29,686.866 1079.85,686.866 1080.4,686.866 1080.96,686.866 1081.52,686.866 1082.08,686.866 1082.64,686.866 1083.2,686.866 1083.76,686.866 1084.32,686.866 1084.88,686.866 1085.44,686.866 1086,686.866 1086.56,686.866 1087.12,686.866 1087.67,686.866 1088.23,686.866 1088.79,686.866 1089.35,686.866 1089.91,686.866 1090.47,686.866 1091.03,686.866 1091.59,686.866 1092.15,686.866 1092.71,686.866 1093.27,686.866 1093.83,686.866 1094.39,686.866 1094.94,686.866 1095.5,686.866 1096.06,686.866 1096.62,686.866 1097.18,686.866 1097.74,686.866 1098.3,686.866 1098.86,686.866 1099.42,686.866 1099.98,686.866 1100.54,686.866 1101.1,686.866 1101.66,686.866 1102.22,686.866 1102.77,686.866 1103.33,686.866 1103.89,686.866 1104.45,686.866 1105.01,686.866 1105.57,686.866 1106.13,686.866 1106.69,686.866 1107.25,686.866 1107.81,686.866 1108.37,686.866 1108.93,686.866 1109.49,686.866 1110.04,686.866 1110.6,686.866 1111.16,686.866 1111.72,686.866 1112.28,686.866 1112.84,686.866 1113.4,686.866 1113.96,686.866 1114.52,686.866 1115.08,686.866 1115.64,686.866 1116.2,686.866 1116.76,686.866 1117.31,686.866 1117.87,686.866 1118.43,686.866 1118.99,686.866 1119.55,686.866 1120.11,686.866 1120.67,686.866 1121.23,686.866 1121.79,686.866 1122.35,686.866 1122.91,686.866 1123.47,686.866 1124.03,686.866 1124.59,686.866 1125.14,686.866 1125.7,686.866 1126.26,686.866 1126.82,686.866 1127.38,686.866 1127.94,686.866 1128.5,686.866 1129.06,686.866 1129.62,686.866 1130.18,686.866 1130.74,686.866 1131.3,686.866 1131.86,686.866 1132.41,686.866 1132.97,686.866 1133.53,686.866 1134.09,686.866 1134.65,686.866 1135.21,686.866 1135.77,686.866 1136.33,686.866 1136.89,686.866 1137.45,686.866 1138.01,686.866 1138.57,686.866 1139.13,686.866 1139.68,686.866 1140.24,686.866 1140.8,686.866 1141.36,686.866 1141.92,686.866 1142.48,686.866 1143.04,686.866 1143.6,686.866 1144.16,686.866 1144.72,686.866 1145.28,686.866 1145.84,686.866 1146.4,686.866 1146.96,686.866 1147.51,686.866 1148.07,686.866 1148.63,686.866 1149.19,686.866 1149.75,686.866 1150.31,686.866 1150.87,686.866 1151.43,686.866 1151.99,686.866 1152.55,686.866 1153.11,686.866 1153.67,686.866 1154.23,686.866 1154.78,686.866 1155.34,686.866 1155.9,686.866 1156.46,686.866 1157.02,686.866 1157.58,686.866 1158.14,686.866 1158.7,686.866 1159.26,686.866 1159.82,686.866 1160.38,686.866 1160.94,686.866 1161.5,686.866 1162.05,686.866 1162.61,686.866 1163.17,686.866 1163.73,686.866 1164.29,686.866 1164.85,686.866 1165.41,686.866 1165.97,686.866 1166.53,686.866 1167.09,686.866 1167.65,686.866 1168.21,686.866 1168.77,686.866 1169.33,686.866 1169.88,686.866 1170.44,686.866 1171,686.866 1171.56,686.866 1172.12,686.866 1172.68,686.866 1173.24,686.866 1173.8,686.866 1174.36,686.866 1174.92,686.866 1175.48,686.866 1176.04,686.866 1176.6,686.866 1177.15,686.866 1177.71,686.866 1178.27,686.866 1178.83,686.866 1179.39,686.866 1179.95,686.866 1180.51,686.866 1181.07,686.866 1181.63,686.866 1182.19,686.866 1182.75,686.866 1183.31,686.866 1183.87,686.866 1184.43,686.866 1184.98,686.866 1185.54,686.866 1186.1,686.866 1186.66,686.866 1187.22,686.866 1187.78,686.866 1188.34,686.866 1188.9,686.866 1189.46,686.866 1190.02,686.866 1190.58,686.866 1191.14,686.866 1191.7,686.866 1192.25,686.866 1192.81,686.866 1193.37,686.866 1193.93,686.866 1194.49,686.866 1195.05,686.866 1195.61,686.866 1196.17,686.866 1196.73,686.866 1197.29,686.866 1197.85,686.866 1198.41,686.866 1198.97,686.866 1199.52,686.866 1200.08,686.866 1200.64,686.866 1201.2,686.866 1201.76,686.866 1202.32,686.866 1202.88,686.866 1203.44,686.866 1204,686.866 1204.56,686.866 1205.12,686.866 1205.68,686.866 1206.24,686.866 1206.8,686.866 1207.35,686.866 1207.91,686.866 1208.47,686.866 1209.03,686.866 1209.59,686.866 1210.15,686.866 1210.71,686.866 1211.27,686.866 1211.83,686.866 1212.39,686.866 1212.95,686.866 1213.51,686.866 1214.07,686.866 1214.62,686.866 1215.18,686.866 1215.74,686.866 1216.3,686.866 1216.86,686.866 1217.42,686.866 1217.98,686.866 1218.54,686.866 1219.1,686.866 1219.66,686.866 1220.22,686.866 1220.78,686.866 1221.34,686.866 1221.89,686.866 1222.45,686.866 1223.01,686.866 1223.57,686.866 1224.13,686.866 1224.69,686.866 1225.25,686.866 1225.81,686.866 1226.37,686.866 1226.93,686.866 1227.49,686.866 1228.05,686.866 1228.61,686.866 1229.17,686.866 1229.72,686.866 1230.28,686.866 1230.84,686.866 1231.4,686.866 1231.96,686.866 1232.52,686.866 1233.08,686.866 1233.64,686.866 1234.2,686.866 1234.76,686.866 1235.32,686.866 1235.88,686.866 1236.44,686.866 1236.99,686.866 1237.55,686.866 1238.11,686.866 1238.67,686.866 1239.23,686.866 1239.79,686.866 1240.35,686.866 1240.91,686.866 1241.47,686.866 1242.03,686.866 1242.59,686.866 1243.15,686.866 1243.71,686.866 1244.26,686.866 1244.82,686.866 1245.38,686.866 1245.94,686.866 1246.5,686.866 1247.06,686.866 1247.62,686.866 1248.18,686.866 1248.74,686.866 1249.3,686.866 1249.86,686.866 1250.42,686.866 1250.98,686.866 1251.54,686.866 1252.09,686.866 1252.65,686.866 1253.21,686.866 1253.77,686.866 1254.33,686.866 1254.89,686.866 1255.45,686.866 1256.01,686.866 1256.57,686.866 1257.13,686.866 1257.69,686.866 1258.25,686.866 1258.81,686.866 1259.36,686.866 1259.92,686.866 1260.48,686.866 1261.04,686.866 1261.6,686.866 1262.16,686.866 1262.72,686.866 1263.28,686.866 1263.84,686.866 1264.4,686.866 1264.96,686.866 1265.52,686.866 1266.08,686.866 1266.63,686.866 1267.19,686.866 1267.75,686.866 1268.31,686.866 1268.87,686.866 1269.43,686.866 1269.99,686.866 1270.55,686.866 1271.11,686.866 1271.67,686.866 1272.23,686.866 1272.79,686.866 1273.35,686.866 1273.91,686.866 1274.46,686.866 1275.02,686.866 1275.58,686.866 1276.14,686.866 1276.7,686.866 1277.26,686.866 1277.82,686.866 1278.38,686.866 1278.94,686.866 1279.5,686.866 1280.06,686.866 1280.62,686.866 1281.18,686.866 1281.73,686.866 1282.29,686.866 1282.85,686.866 1283.41,686.866 1283.97,686.866 1284.53,686.866 1285.09,686.866 1285.65,686.866 1286.21,686.866 1286.77,686.866 1287.33,686.866 1287.89,686.866 1288.45,686.866 1289,686.866 1289.56,686.866 1290.12,686.866 1290.68,686.866 1291.24,686.866 1291.8,686.866 1292.36,686.866 1292.92,686.866 1293.48,686.866 1294.04,686.866 1294.6,686.866 1295.16,686.866 1295.72,686.866 1296.28,686.866 1296.83,686.866 1297.39,686.866 1297.95,686.866 1298.51,686.866 1299.07,686.866 1299.63,686.866 1300.19,686.866 1300.75,686.866 1301.31,686.866 1301.87,686.866 1302.43,686.866 1302.99,686.866 1303.55,686.866 1304.1,686.866 1304.66,686.866 1305.22,686.866 1305.78,686.866 1306.34,686.866 1306.9,686.866 1307.46,686.866 1308.02,686.866 1308.58,686.866 1309.14,686.866 1309.7,686.866 1310.26,686.866 1310.82,686.866 1311.38,686.866 1311.93,686.866 1312.49,686.866 1313.05,686.866 1313.61,686.866 1314.17,686.866 1314.73,686.866 1315.29,686.866 1315.85,686.866 1316.41,686.866 1316.97,686.866 1317.53,686.866 1318.09,686.866 1318.65,686.866 1319.2,686.866 1319.76,686.866 1320.32,686.866 1320.88,686.866 1321.44,686.866 1322,686.866 1322.56,686.866 1323.12,686.866 1323.68,686.866 1324.24,686.866 1324.8,686.866 1325.36,686.866 1325.92,686.866 1326.47,686.866 1327.03,686.866 1327.59,686.866 1328.15,686.866 1328.71,686.866 1329.27,686.866 1329.83,686.866 1330.39,686.866 1330.95,686.866 1331.51,686.866 1332.07,686.866 1332.63,686.866 1333.19,686.866 1333.75,686.866 1334.3,686.866 1334.86,686.866 1335.42,686.866 1335.98,686.866 1336.54,686.866 1337.1,686.866 1337.66,686.866 1338.22,686.866 1338.78,686.866 1339.34,686.866 1339.9,686.866 1340.46,686.866 1341.02,686.866 1341.57,686.866 1342.13,686.866 1342.69,686.866 1343.25,686.866 1343.81,686.866 1344.37,686.866 1344.93,686.866 1345.49,686.866 1346.05,686.866 1346.61,686.866 1347.17,686.866 1347.73,686.866 1348.29,686.866 1348.84,686.866 1349.4,686.866 1349.96,686.866 1350.52,686.866 1351.08,686.866 1351.64,686.866 1352.2,686.866 1352.76,686.866 1353.32,686.866 1353.88,686.866 1354.44,686.866 1355,686.866 1355.56,686.866 1356.12,686.866 1356.67,686.866 1357.23,686.866 1357.79,686.866 1358.35,686.866 1358.91,686.866 1359.47,686.866 1360.03,686.866 1360.59,686.866 1361.15,686.866 1361.71,686.866 1362.27,686.866 1362.83,686.866 1363.39,686.866 1363.94,686.866 1364.5,686.866 1365.06,686.866 1365.62,686.866 1366.18,686.866 1366.74,686.866 1367.3,686.866 1367.86,686.866 1368.42,686.866 1368.98,686.866 1369.54,686.866 1370.1,686.866 1370.66,686.866 1371.21,686.866 1371.77,686.866 1372.33,686.866 1372.89,686.866 1373.45,686.866 1374.01,686.866 1374.57,686.866 1375.13,686.866 1375.69,686.866 1376.25,686.866 1376.81,686.866 1377.37,686.866 1377.93,686.866 1378.49,686.866 1379.04,686.866 1379.6,686.866 1380.16,686.866 1380.72,686.866 1381.28,686.866 1381.84,686.866 1382.4,686.866 1382.96,686.866 1383.52,686.866 1384.08,686.866 1384.64,686.866 1385.2,686.866 1385.76,686.866 1386.31,686.866 1386.87,686.866 1387.43,686.866 1387.99,686.866 1388.55,686.866 1389.11,686.866 1389.67,686.866 1390.23,686.866 1390.79,686.866 1391.35,686.866 1391.91,686.866 1392.47,686.866 1393.03,686.866 1393.58,686.866 1394.14,686.866 1394.7,686.866 1395.26,686.866 1395.82,686.866 1396.38,686.866 1396.94,686.866 1397.5,686.866 1398.06,686.866 1398.62,686.866 1399.18,686.866 1399.74,686.866 1400.3,686.866 1400.86,686.866 1401.41,686.866 1401.97,686.866 1402.53,686.866 1403.09,686.866 1403.65,686.866 1404.21,686.866 1404.77,686.866 1405.33,686.866 1405.89,686.866 1406.45,686.866 1407.01,686.866 1407.57,686.866 1408.13,686.866 1408.68,686.866 1409.24,686.866 1409.8,686.866 1410.36,686.866 1410.92,686.866 1411.48,686.866 1412.04,686.866 1412.6,686.866 1413.16,686.866 1413.72,686.866 1414.28,686.866 1414.84,686.866 1415.4,686.866 1415.95,686.866 1416.51,686.866 1417.07,686.866 1417.63,686.866 1418.19,686.866 1418.75,686.866 1419.31,686.866 1419.87,686.866 1420.43,686.866 1420.99,686.866 1421.55,686.866 1422.11,686.866 1422.67,686.866 1423.23,686.866 1423.78,686.866 1424.34,686.866 1424.9,686.866 1425.46,686.866 1426.02,686.866 1426.58,686.866 1427.14,686.866 1427.7,686.866 1428.26,686.866 1428.82,686.866 1429.38,686.866 1429.94,686.866 1430.5,686.866 1431.05,686.866 1431.61,686.866 1432.17,686.866 1432.73,686.866 1433.29,686.866 1433.85,686.866 1434.41,686.866 1434.97,686.866 1435.53,686.866 1436.09,686.866 1436.65,686.866 1437.21,686.866 1437.77,686.866 1438.33,686.866 1438.88,686.866 1439.44,686.866 1440,686.866 1440.56,686.866 1441.12,686.866 1441.68,686.866 1442.24,686.866 1442.8,686.866 1443.36,686.866 1443.92,686.866 1444.48,686.866 1445.04,686.866 1445.6,686.866 1446.15,686.866 1446.71,686.866 1447.27,686.866 1447.83,686.866 1448.39,686.866 1448.95,686.866 1449.51,686.866 1450.07,686.866 1450.63,686.866 1451.19,686.866 1451.75,686.866 1452.31,686.866 1452.87,686.866 1453.42,686.866 1453.98,686.866 1454.54,686.866 1455.1,686.866 1455.66,686.866 1456.22,686.866 1456.78,686.866 1457.34,686.866 1457.9,686.866 1458.46,686.866 1459.02,686.866 1459.58,686.866 1460.14,686.866 1460.7,686.866 1461.25,686.866 1461.81,686.866 1462.37,686.866 1462.93,686.866 1463.49,686.866 1464.05,686.866 1464.61,686.866 1465.17,686.866 1465.73,686.866 1466.29,686.866 1466.85,686.866 1467.41,686.866 1467.97,686.866 1468.52,686.866 1469.08,686.866 1469.64,686.866 1470.2,686.866 1470.76,686.866 1471.32,686.866 1471.88,686.866 1472.44,686.866 1473,686.866 1473.56,686.866 1474.12,686.866 1474.68,686.866 1475.24,686.866 1475.79,686.866 1476.35,686.866 1476.91,686.866 1477.47,686.866 1478.03,686.866 1478.59,686.866 1479.15,686.866 1479.71,686.866 1480.27,686.866 1480.83,686.866 1481.39,686.866 1481.95,686.866 1482.51,686.866 1483.07,686.866 1483.62,686.866 1484.18,686.866 1484.74,686.866 1485.3,686.866 1485.86,686.866 1486.42,686.866 1486.98,686.866 1487.54,686.866 1488.1,686.866 1488.66,686.866 1489.22,686.866 1489.78,686.866 1490.34,686.866 1490.89,686.866 1491.45,686.866 1492.01,686.866 1492.57,686.866 1493.13,686.866 1493.69,686.866 1494.25,686.866 1494.81,686.866 1495.37,686.866 1495.93,686.866 1496.49,686.866 1497.05,686.866 1497.61,686.866 1498.16,686.866 1498.72,686.866 1499.28,686.866 1499.84,686.866 1500.4,686.866 1500.96,686.866 1501.52,686.866 1502.08,686.866 1502.64,686.866 1503.2,686.866 1503.76,686.866 1504.32,686.866 1504.88,686.866 1505.44,686.866 1505.99,686.866 1506.55,686.866 1507.11,686.866 1507.67,686.866 1508.23,686.866 1508.79,686.866 1509.35,686.866 1509.91,686.866 1510.47,686.866 1511.03,686.866 1511.59,686.866 1512.15,686.866 1512.71,686.866 1513.26,686.866 1513.82,686.866 1514.38,686.866 1514.94,686.866 1515.5,686.866 1516.06,686.866 1516.62,686.866 1517.18,686.866 1517.74,686.866 1518.3,686.866 1518.86,686.866 1519.42,686.866 1519.98,686.866 1520.53,686.866 1521.09,686.866 1521.65,686.866 1522.21,686.866 1522.77,686.866 1523.33,686.866 1523.89,686.866 1524.45,686.866 1525.01,686.866 1525.57,686.866 1526.13,686.866 1526.69,686.866 1527.25,686.866 1527.81,686.866 1528.36,686.866 1528.92,686.866 1529.48,686.866 1530.04,686.866 1530.6,686.866 1531.16,686.866 1531.72,686.866 1532.28,686.866 1532.84,686.866 1533.4,686.866 1533.96,686.866 1534.52,686.866 1535.08,686.866 1535.63,686.866 1536.19,686.866 1536.75,686.866 1537.31,686.866 1537.87,686.866 1538.43,686.866 1538.99,686.866 1539.55,686.866 1540.11,686.866 1540.67,686.866 1541.23,686.866 1541.79,686.866 1542.35,686.866 1542.9,686.866 1543.46,686.866 1544.02,686.866 1544.58,686.866 1545.14,686.866 1545.7,686.866 1546.26,686.866 1546.82,686.866 1547.38,686.866 1547.94,686.866 1548.5,686.866 1549.06,686.866 1549.62,686.866 1550.18,686.866 1550.73,686.866 1551.29,686.866 1551.85,686.866 1552.41,686.866 1552.97,686.866 1553.53,686.866 1554.09,686.866 1554.65,686.866 1555.21,686.866 1555.77,686.866 1556.33,686.866 1556.89,686.866 1557.45,686.866 1558,686.866 1558.56,686.866 1559.12,686.866 1559.68,686.866 1560.24,686.866 1560.8,686.866 1561.36,686.866 1561.92,686.866 1562.48,686.866 1563.04,686.866 1563.6,686.866 1564.16,686.866 1564.72,686.866 1565.28,686.866 1565.83,686.866 1566.39,686.866 1566.95,686.866 1567.51,686.866 1568.07,686.866 1568.63,686.866 1569.19,686.866 1569.75,686.866 1570.31,686.866 1570.87,686.866 1571.43,686.866 1571.99,686.866 1572.55,686.866 1573.1,686.866 1573.66,686.866 1574.22,686.866 1574.78,686.866 1575.34,686.866 1575.9,686.866 1576.46,686.866 1577.02,686.866 1577.58,686.866 1578.14,686.866 1578.7,686.866 1579.26,686.866 1579.82,686.866 1580.37,686.866 1580.93,686.866 1581.49,686.866 1582.05,686.866 1582.61,686.866 1583.17,686.866 1583.73,686.866 1584.29,686.866 1584.85,686.866 1585.41,686.866 1585.97,686.866 1586.53,686.866 1587.09,686.866 1587.65,686.866 1588.2,686.866 1588.76,686.866 1589.32,686.866 1589.88,686.866 1590.44,686.866 1591,686.866 1591.56,686.866 1592.12,686.866 1592.68,686.866 1593.24,686.866 1593.8,686.866 1594.36,686.866 1594.92,686.866 1595.47,686.866 1596.03,686.866 1596.59,686.866 1597.15,686.866 1597.71,686.866 1598.27,686.866 1598.83,686.866 1599.39,686.866 1599.95,686.866 1600.51,686.866 1601.07,686.866 1601.63,686.866 1602.19,686.866 1602.74,686.866 1603.3,686.866 1603.86,686.866 1604.42,686.866 1604.98,686.866 1605.54,686.866 1606.1,686.866 1606.66,686.866 1607.22,686.866 1607.78,686.866 1608.34,686.866 1608.9,686.866 1609.46,686.866 1610.02,686.866 1610.57,686.866 1611.13,686.866 1611.69,686.866 1612.25,686.866 1612.81,686.866 1613.37,686.866 1613.93,686.866 1614.49,686.866 1615.05,686.866 1615.61,686.866 1616.17,686.866 1616.73,686.866 1617.29,686.866 1617.84,686.866 1618.4,686.866 1618.96,686.866 1619.52,686.866 1620.08,686.866 1620.64,686.866 1621.2,686.866 1621.76,686.866 1622.32,686.866 1622.88,686.866 1623.44,686.866 1624,686.866 1624.56,686.866 1625.11,686.866 1625.67,686.866 1626.23,686.866 1626.79,686.866 1627.35,686.866 1627.91,686.866 1628.47,686.866 1629.03,686.866 1629.59,686.866 1630.15,686.866 1630.71,686.866 1631.27,686.866 1631.83,686.866 1632.39,686.866 1632.94,686.866 1633.5,686.866 1634.06,686.866 1634.62,686.866 1635.18,686.866 1635.74,686.866 1636.3,686.866 1636.86,686.866 1637.42,686.866 1637.98,686.866 1638.54,686.866 1639.1,686.866 1639.66,686.866 1640.21,686.866 1640.77,686.866 1641.33,686.866 1641.89,686.866 1642.45,686.866 1643.01,686.866 1643.57,686.866 1644.13,686.866 1644.69,686.866 1645.25,686.866 1645.81,686.866 1646.37,686.866 1646.93,686.866 1647.48,686.866 1648.04,686.866 1648.6,686.866 1649.16,686.866 1649.72,686.866 1650.28,686.866 1650.84,686.866 1651.4,686.866 1651.96,686.866 1652.52,686.866 1653.08,686.866 1653.64,686.866 1654.2,686.866 1654.76,686.866 1655.31,686.866 1655.87,686.866 1656.43,686.866 1656.99,686.866 1657.55,686.866 1658.11,686.866 1658.67,686.866 1659.23,686.866 1659.79,686.866 1660.35,686.866 1660.91,686.866 1661.47,686.866 1662.03,686.866 1662.58,686.866 1663.14,686.866 1663.7,686.866 1664.26,686.866 1664.82,686.866 1665.38,686.866 1665.94,686.866 1666.5,686.866 1667.06,686.866 1667.62,686.866 1668.18,686.866 1668.74,686.866 1669.3,686.866 1669.85,686.866 1670.41,686.866 1670.97,686.866 1671.53,686.866 1672.09,686.866 1672.65,686.866 1673.21,686.866 1673.77,686.866 1674.33,686.866 1674.89,686.866 1675.45,686.866 1676.01,686.866 1676.57,686.866 1677.13,686.866 1677.68,686.866 1678.24,686.866 1678.8,686.866 1679.36,686.866 1679.92,686.866 1680.48,686.866 1681.04,686.866 1681.6,686.866 1682.16,686.866 1682.72,686.866 1683.28,686.866 1683.84,686.866 1684.4,686.866 1684.95,686.866 1685.51,686.866 1686.07,686.866 1686.63,686.866 1687.19,686.866 1687.75,686.866 1688.31,686.866 1688.87,686.866 1689.43,686.866 1689.99,686.866 1690.55,686.866 1691.11,686.866 1691.67,686.866 1692.23,686.866 1692.78,686.866 1693.34,686.866 1693.9,686.866 1694.46,686.866 1695.02,686.866 1695.58,686.866 1696.14,686.866 1696.7,686.866 1697.26,686.866 1697.82,686.866 1698.38,686.866 1698.94,686.866 1699.5,686.866 1700.05,686.866 1700.61,686.866 1701.17,686.866 1701.73,686.866 1702.29,686.866 1702.85,686.866 1703.41,686.866 1703.97,686.866 1704.53,686.866 1705.09,686.866 1705.65,686.866 1706.21,686.866 1706.77,686.866 1707.32,686.866 1707.88,686.866 1708.44,686.866 1709,686.866 1709.56,686.866 1710.12,686.866 1710.68,686.866 1711.24,686.866 1711.8,686.866 1712.36,686.866 1712.92,686.866 1713.48,686.866 1714.04,686.866 1714.6,686.866 1715.15,686.866 1715.71,686.866 1716.27,686.866 1716.83,686.866 1717.39,686.866 1717.95,686.866 1718.51,686.866 1719.07,686.866 1719.63,686.866 1720.19,686.866 1720.75,686.866 1721.31,686.866 1721.87,686.866 1722.42,686.866 1722.98,686.866 1723.54,686.866 1724.1,686.866 1724.66,686.866 1725.22,686.866 1725.78,686.866 1726.34,686.866 1726.9,686.866 1727.46,686.866 1728.02,686.866 1728.58,686.866 1729.14,686.866 1729.69,686.866 1730.25,686.866 1730.81,686.866 1731.37,686.866 1731.93,686.866 1732.49,686.866 1733.05,686.866 1733.61,686.866 1734.17,686.866 1734.73,686.866 1735.29,686.866 1735.85,686.866 1736.41,686.866 1736.97,686.866 1737.52,686.866 1738.08,686.866 1738.64,686.866 1739.2,686.866 1739.76,686.866 1740.32,686.866 1740.88,686.866 1741.44,686.866 1742,686.866 1742.56,686.866 1743.12,686.866 1743.68,686.866 1744.24,686.866 1744.79,686.866 1745.35,686.866 1745.91,686.866 1746.47,686.866 1747.03,686.866 1747.59,686.866 1748.15,686.866 1748.71,686.866 1749.27,686.866 1749.83,686.866 1750.39,686.866 1750.95,686.866 1751.51,686.866 1752.06,686.866 1752.62,686.866 1753.18,686.866 1753.74,686.866 1754.3,686.866 1754.86,686.866 1755.42,686.866 1755.98,686.866 1756.54,686.866 1757.1,686.866 1757.66,686.866 1758.22,686.866 1758.78,686.866 1759.34,686.866 1759.89,686.866 1760.45,686.866 1761.01,686.866 1761.57,686.866 1762.13,686.866 1762.69,686.866 1763.25,686.866 1763.81,686.866 1764.37,686.866 1764.93,686.866 1765.49,686.866 1766.05,686.866 1766.61,686.866 1767.16,686.866 1767.72,686.866 1768.28,686.866 1768.84,686.866 1769.4,686.866 1769.96,686.866 1770.52,686.866 1771.08,686.866 1771.64,686.866 1772.2,686.866 1772.76,686.866 1773.32,686.866 1773.88,686.866 1774.43,686.866 1774.99,686.866 1775.55,686.866 1776.11,686.866 1776.67,686.866 1777.23,686.866 1777.79,686.866 1778.35,686.866 1778.91,686.866 1779.47,686.866 1780.03,686.866 1780.59,686.866 1781.15,686.866 1781.71,686.866 1782.26,686.866 1782.82,686.866 1783.38,686.866 1783.94,686.866 1784.5,686.866 1785.06,686.866 1785.62,686.866 1786.18,686.866 1786.74,686.866 1787.3,686.866 1787.86,686.866 1788.42,686.866 1788.98,686.866 1789.53,686.866 1790.09,686.866 1790.65,686.866 1791.21,686.866 1791.77,686.866 1792.33,686.866 1792.89,686.866 1793.45,686.866 1794.01,686.866 1794.57,686.866 1795.13,686.866 1795.69,686.866 1796.25,686.866 1796.8,686.866 1797.36,686.866 1797.92,686.866 1798.48,686.866 1799.04,686.866 1799.6,686.866 1800.16,686.866 1800.72,686.866 1801.28,686.866 1801.84,686.866 1802.4,686.866 1802.96,686.866 1803.52,686.866 1804.08,686.866 1804.63,686.866 1805.19,686.866 1805.75,686.866 1806.31,686.866 1806.87,686.866 1807.43,686.866 1807.99,686.866 1808.55,686.866 1809.11,686.866 1809.67,686.866 1810.23,686.866 1810.79,686.866 1811.35,686.866 1811.9,686.866 1812.46,686.866 1813.02,686.866 1813.58,686.866 1814.14,686.866 1814.7,686.866 1815.26,686.866 1815.82,686.866 1816.38,686.866 1816.94,686.866 1817.5,686.866 1818.06,686.866 1818.62,686.866 1819.18,686.866 1819.73,686.866 1820.29,686.866 1820.85,686.866 1821.41,686.866 1821.97,686.866 1822.53,686.866 1823.09,686.866 1823.65,686.866 1824.21,686.866 1824.77,686.866 1825.33,686.866 1825.89,686.866 1826.45,686.866 1827,686.866 1827.56,686.866 1828.12,686.866 1828.68,686.866 1829.24,686.866 1829.8,686.866 1830.36,686.866 1830.92,686.866 1831.48,686.866 1832.04,686.866 1832.6,686.866 1833.16,686.866 1833.72,686.866 1834.27,686.866 1834.83,686.866 1835.39,686.866 1835.95,686.866 1836.51,686.866 1837.07,686.866 1837.63,686.866 1838.19,686.866 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 684.431 L720.806 684.431 L721.365 684.431 L721.924 684.431 L722.484 684.431 L723.043 684.431 L723.602 684.431 L724.161 684.431 L724.721 684.431 L725.28 684.431 L725.839 684.431 L726.398 684.431 L726.958 684.431 L727.517 684.431 L728.076 684.431 L728.635 684.431 L729.195 684.431 L729.754 684.431 L730.313 684.431 L730.872 684.431 L731.432 684.431 L731.991 684.431 L732.55 684.431 L733.109 684.431 L733.669 684.431 L734.228 684.431 L734.787 684.431 L735.346 684.431 L735.906 684.431 L736.465 684.431 L737.024 684.431 L737.583 684.431 L738.143 684.431 L738.702 684.431 L739.261 684.431 L739.82 684.431 L740.38 684.431 L740.939 684.431 L741.498 684.431 L742.057 684.431 L742.617 684.431 L743.176 684.431 L743.735 684.431 L744.294 684.431 L744.854 684.431 L745.413 684.431 L745.972 684.431 L746.531 684.431 L747.091 684.431 L747.65 684.431 L748.209 684.431 L748.768 684.431 L749.328 684.431 L749.887 684.431 L750.446 684.431 L751.005 684.431 L751.565 684.431 L752.124 684.431 L752.683 684.431 L753.242 684.431 L753.802 684.431 L754.361 684.431 L754.92 684.431 L755.479 684.431 L756.039 684.431 L756.598 684.431 L757.157 684.431 L757.716 684.431 L758.276 684.431 L758.835 684.431 L759.394 684.431 L759.953 684.431 L760.513 684.431 L761.072 684.431 L761.631 684.431 L762.19 684.431 L762.75 684.431 L763.309 684.431 L763.868 684.431 L764.427 684.431 L764.987 684.431 L765.546 684.431 L766.105 684.431 L766.664 684.431 L767.224 684.431 L767.783 684.431 L768.342 684.431 L768.901 684.431 L769.461 684.431 L770.02 684.431 L770.579 684.431 L771.138 684.431 L771.698 684.431 L772.257 684.431 L772.816 684.431 L773.375 684.431 L773.935 684.431 L774.494 684.431 L775.053 684.431 L775.612 684.431 L776.172 684.431 L776.731 684.431 L777.29 684.431 L777.849 684.431 L778.409 684.431 L778.968 684.431 L779.527 684.431 L780.086 684.431 L780.646 684.431 L781.205 684.431 L781.764 684.431 L782.323 684.431 L782.883 684.431 L783.442 684.431 L784.001 684.431 L784.56 684.431 L785.12 684.431 L785.679 684.431 L786.238 684.431 L786.797 684.431 L787.357 684.431 L787.916 684.431 L788.475 684.431 L789.034 684.431 L789.594 684.431 L790.153 684.431 L790.712 684.431 L791.271 684.431 L791.831 684.431 L792.39 684.431 L792.949 684.431 L793.508 684.431 L794.068 684.431 L794.627 684.431 L795.186 684.431 L795.745 684.431 L796.305 684.431 L796.864 684.431 L797.423 684.431 L797.982 684.431 L798.542 684.431 L799.101 684.431 L799.66 684.431 L800.219 684.431 L800.779 684.431 L801.338 684.431 L801.897 684.431 L802.456 684.431 L803.016 684.431 L803.575 684.431 L804.134 684.431 L804.693 684.431 L805.253 684.431 L805.812 684.431 L806.371 684.431 L806.931 684.431 L807.49 684.431 L808.049 684.431 L808.608 684.431 L809.168 684.431 L809.727 684.431 L810.286 684.431 L810.845 684.431 L811.405 684.431 L811.964 684.431 L812.523 684.431 L813.082 684.431 L813.642 684.431 L814.201 684.431 L814.76 684.431 L815.319 684.431 L815.879 684.431 L816.438 684.431 L816.997 684.431 L817.556 684.431 L818.116 684.431 L818.675 684.431 L819.234 684.431 L819.793 684.431 L820.353 684.431 L820.912 684.431 L821.471 684.431 L822.03 684.431 L822.59 684.431 L823.149 684.431 L823.708 684.431 L824.267 684.431 L824.827 684.431 L825.386 684.431 L825.945 684.431 L826.504 684.431 L827.064 684.431 L827.623 684.431 L828.182 684.431 L828.741 684.431 L829.301 684.431 L829.86 684.431 L830.419 684.431 L830.978 684.431 L831.538 684.431 L832.097 684.431 L832.656 684.431 L833.215 684.431 L833.775 684.431 L834.334 684.431 L834.893 684.431 L835.452 684.431 L836.012 684.431 L836.571 684.431 L837.13 684.431 L837.689 684.431 L838.249 684.431 L838.808 684.431 L839.367 684.431 L839.926 684.431 L840.486 684.431 L841.045 684.431 L841.604 684.431 L842.163 684.431 L842.723 684.431 L843.282 684.431 L843.841 684.431 L844.4 684.431 L844.96 684.431 L845.519 684.431 L846.078 684.431 L846.637 684.431 L847.197 684.431 L847.756 684.431 L848.315 684.431 L848.874 684.431 L849.434 684.431 L849.993 684.431 L850.552 684.431 L851.111 684.431 L851.671 684.431 L852.23 684.431 L852.789 684.431 L853.348 684.431 L853.908 684.431 L854.467 684.431 L855.026 684.431 L855.585 684.431 L856.145 684.431 L856.704 684.431 L857.263 684.431 L857.822 684.431 L858.382 684.431 L858.941 684.431 L859.5 684.431 L860.059 684.431 L860.619 684.431 L861.178 684.431 L861.737 684.431 L862.296 684.431 L862.856 684.431 L863.415 684.431 L863.974 684.431 L864.533 684.431 L865.093 684.431 L865.652 684.431 L866.211 684.431 L866.77 684.431 L867.33 684.431 L867.889 684.431 L868.448 684.431 L869.007 684.431 L869.567 684.431 L870.126 684.431 L870.685 684.431 L871.244 684.431 L871.804 684.431 L872.363 684.431 L872.922 684.431 L873.481 684.431 L874.041 684.431 L874.6 684.431 L875.159 684.431 L875.718 684.431 L876.278 684.431 L876.837 684.431 L877.396 684.431 L877.955 684.431 L878.515 684.431 L879.074 684.431 L879.633 684.431 L880.192 684.431 L880.752 684.431 L881.311 684.431 L881.87 684.431 L882.429 684.431 L882.989 684.431 L883.548 684.431 L884.107 684.431 L884.666 684.431 L885.226 684.431 L885.785 684.431 L886.344 684.431 L886.903 684.431 L887.463 684.431 L888.022 684.431 L888.581 684.431 L889.14 684.431 L889.7 684.431 L890.259 684.431 L890.818 684.431 L891.377 684.431 L891.937 684.431 L892.496 684.431 L893.055 684.431 L893.614 684.431 L894.174 684.431 L894.733 684.431 L895.292 684.431 L895.851 684.431 L896.411 684.431 L896.97 684.431 L897.529 684.431 L898.088 684.431 L898.648 684.431 L899.207 684.431 L899.766 684.431 L900.325 684.431 L900.885 684.431 L901.444 684.431 L902.003 684.431 L902.562 684.431 L903.122 684.431 L903.681 684.431 L904.24 684.431 L904.799 684.431 L905.359 684.431 L905.918 684.431 L906.477 684.431 L907.036 684.431 L907.596 684.431 L908.155 684.431 L908.714 684.431 L909.273 684.431 L909.833 684.431 L910.392 684.431 L910.951 684.431 L911.51 684.431 L912.07 684.431 L912.629 684.431 L913.188 684.431 L913.747 684.431 L914.307 684.431 L914.866 684.431 L915.425 684.431 L915.984 684.431 L916.544 684.431 L917.103 684.431 L917.662 684.431 L918.221 684.431 L918.781 684.431 L919.34 684.431 L919.899 684.431 L920.458 684.431 L921.018 684.431 L921.577 684.431 L922.136 684.431 L922.695 684.431 L923.255 684.431 L923.814 684.431 L924.373 684.431 L924.932 684.431 L925.492 684.431 L926.051 684.431 L926.61 684.431 L927.169 684.431 L927.729 684.431 L928.288 684.431 L928.847 684.431 L929.406 684.431 L929.966 684.431 L930.525 684.431 L931.084 684.431 L931.644 684.431 L932.203 684.431 L932.762 684.431 L933.321 684.431 L933.881 684.431 L934.44 684.431 L934.999 684.431 L935.558 684.431 L936.118 684.431 L936.677 684.431 L937.236 684.431 L937.795 684.431 L938.355 684.431 L938.914 684.431 L939.473 684.431 L940.032 684.431 L940.592 684.431 L941.151 684.431 L941.71 684.431 L942.269 684.431 L942.829 684.431 L943.388 684.431 L943.947 684.431 L944.506 684.431 L945.066 684.431 L945.625 684.431 L946.184 684.431 L946.743 684.431 L947.303 684.431 L947.862 684.431 L948.421 684.431 L948.98 684.431 L949.54 684.431 L950.099 684.431 L950.658 684.431 L951.217 684.431 L951.777 684.431 L952.336 684.431 L952.895 684.431 L953.454 684.431 L954.014 684.431 L954.573 684.431 L955.132 684.431 L955.691 684.431 L956.251 684.431 L956.81 684.431 L957.369 684.431 L957.928 684.431 L958.488 684.431 L959.047 684.431 L959.606 684.431 L960.165 684.431 L960.725 684.431 L961.284 684.431 L961.843 684.431 L962.402 684.431 L962.962 684.431 L963.521 684.431 L964.08 684.431 L964.639 684.431 L965.199 684.431 L965.758 684.431 L966.317 684.431 L966.876 684.431 L967.436 684.431 L967.995 684.431 L968.554 684.431 L969.113 684.431 L969.673 684.431 L970.232 684.431 L970.791 684.431 L971.35 684.431 L971.91 684.431 L972.469 684.431 L973.028 684.431 L973.587 684.431 L974.147 684.431 L974.706 684.431 L975.265 684.431 L975.824 684.431 L976.384 684.431 L976.943 684.431 L977.502 684.431 L978.061 684.431 L978.621 684.431 L979.18 684.431 L979.739 684.431 L980.298 684.431 L980.858 684.431 L981.417 684.431 L981.976 684.431 L982.535 684.431 L983.095 684.431 L983.654 684.431 L984.213 684.431 L984.772 684.431 L985.332 684.431 L985.891 684.431 L986.45 684.431 L987.009 684.431 L987.569 684.431 L988.128 684.431 L988.687 684.431 L989.246 684.431 L989.806 684.431 L990.365 684.431 L990.924 684.431 L991.483 684.431 L992.043 684.431 L992.602 684.431 L993.161 684.431 L993.72 684.431 L994.28 684.431 L994.839 684.431 L995.398 684.431 L995.957 684.431 L996.517 684.431 L997.076 684.431 L997.635 684.431 L998.194 684.431 L998.754 684.431 L999.313 684.431 L999.872 684.431 L1000.43 684.431 L1000.99 684.431 L1001.55 684.431 L1002.11 684.431 L1002.67 684.431 L1003.23 684.431 L1003.79 684.431 L1004.35 684.431 L1004.91 684.431 L1005.46 684.431 L1006.02 684.431 L1006.58 684.431 L1007.14 684.431 L1007.7 684.431 L1008.26 684.431 L1008.82 684.431 L1009.38 684.431 L1009.94 684.431 L1010.5 684.431 L1011.06 684.431 L1011.62 684.431 L1012.18 684.431 L1012.73 684.431 L1013.29 684.431 L1013.85 684.431 L1014.41 684.431 L1014.97 684.431 L1015.53 684.431 L1016.09 684.431 L1016.65 684.431 L1017.21 684.431 L1017.77 684.431 L1018.33 684.431 L1018.89 684.431 L1019.45 684.431 L1020.01 684.431 L1020.56 684.431 L1021.12 684.431 L1021.68 684.431 L1022.24 684.431 L1022.8 684.431 L1023.36 684.431 L1023.92 684.431 L1024.48 684.431 L1025.04 684.431 L1025.6 684.431 L1026.16 684.431 L1026.72 684.431 L1027.28 684.431 L1027.83 684.431 L1028.39 684.431 L1028.95 684.431 L1029.51 684.431 L1030.07 684.431 L1030.63 684.431 L1031.19 684.431 L1031.75 684.431 L1032.31 684.431 L1032.87 684.431 L1033.43 684.431 L1033.99 684.431 L1034.55 684.431 L1035.1 684.431 L1035.66 684.431 L1036.22 684.431 L1036.78 684.431 L1037.34 684.431 L1037.9 684.431 L1038.46 684.431 L1039.02 684.431 L1039.58 684.431 L1040.14 684.431 L1040.7 684.431 L1041.26 684.431 L1041.82 684.431 L1042.38 684.431 L1042.93 684.431 L1043.49 684.431 L1044.05 684.431 L1044.61 684.431 L1045.17 684.431 L1045.73 684.431 L1046.29 684.431 L1046.85 684.431 L1047.41 684.431 L1047.97 684.431 L1048.53 684.431 L1049.09 684.431 L1049.65 684.431 L1050.2 684.431 L1050.76 684.431 L1051.32 684.431 L1051.88 684.431 L1052.44 684.431 L1053 684.431 L1053.56 684.431 L1054.12 684.431 L1054.68 684.431 L1055.24 684.431 L1055.8 684.431 L1056.36 684.431 L1056.92 684.431 L1057.48 684.431 L1058.03 684.431 L1058.59 684.431 L1059.15 684.431 L1059.71 684.431 L1060.27 684.431 L1060.83 684.431 L1061.39 684.431 L1061.95 684.431 L1062.51 684.431 L1063.07 684.431 L1063.63 684.431 L1064.19 684.431 L1064.75 684.431 L1065.3 684.431 L1065.86 684.431 L1066.42 684.431 L1066.98 684.431 L1067.54 684.431 L1068.1 684.431 L1068.66 684.431 L1069.22 684.431 L1069.78 684.431 L1070.34 684.431 L1070.9 684.431 L1071.46 684.431 L1072.02 684.431 L1072.57 684.431 L1073.13 684.431 L1073.69 684.431 L1074.25 684.431 L1074.81 684.431 L1075.37 684.431 L1075.93 684.431 L1076.49 684.431 L1077.05 684.431 L1077.61 684.431 L1078.17 684.431 L1078.73 684.431 L1079.29 684.431 L1079.85 684.431 L1080.4 684.431 L1080.96 684.431 L1081.52 684.431 L1082.08 684.431 L1082.64 684.431 L1083.2 684.431 L1083.76 684.431 L1084.32 684.431 L1084.88 684.431 L1085.44 684.431 L1086 684.431 L1086.56 684.431 L1087.12 684.431 L1087.67 684.431 L1088.23 684.431 L1088.79 684.431 L1089.35 684.431 L1089.91 684.431 L1090.47 684.431 L1091.03 684.431 L1091.59 684.431 L1092.15 684.431 L1092.71 684.431 L1093.27 684.431 L1093.83 684.431 L1094.39 684.431 L1094.94 684.431 L1095.5 684.431 L1096.06 684.431 L1096.62 684.431 L1097.18 684.431 L1097.74 684.431 L1098.3 684.431 L1098.86 684.431 L1099.42 684.431 L1099.98 684.431 L1100.54 684.431 L1101.1 684.431 L1101.66 684.431 L1102.22 684.431 L1102.77 684.431 L1103.33 684.431 L1103.89 684.431 L1104.45 684.431 L1105.01 684.431 L1105.57 684.431 L1106.13 684.431 L1106.69 684.431 L1107.25 684.431 L1107.81 684.431 L1108.37 684.431 L1108.93 684.431 L1109.49 684.431 L1110.04 684.431 L1110.6 684.431 L1111.16 684.431 L1111.72 684.431 L1112.28 684.431 L1112.84 684.431 L1113.4 684.431 L1113.96 684.431 L1114.52 684.431 L1115.08 684.431 L1115.64 684.431 L1116.2 684.431 L1116.76 684.431 L1117.31 684.431 L1117.87 684.431 L1118.43 684.431 L1118.99 684.431 L1119.55 684.431 L1120.11 684.431 L1120.67 684.431 L1121.23 684.431 L1121.79 684.431 L1122.35 684.431 L1122.91 684.431 L1123.47 684.431 L1124.03 684.431 L1124.59 684.431 L1125.14 684.431 L1125.7 684.431 L1126.26 684.431 L1126.82 684.431 L1127.38 684.431 L1127.94 684.431 L1128.5 684.431 L1129.06 684.431 L1129.62 684.431 L1130.18 684.431 L1130.74 684.431 L1131.3 684.431 L1131.86 684.431 L1132.41 684.431 L1132.97 684.431 L1133.53 684.431 L1134.09 684.431 L1134.65 684.431 L1135.21 684.431 L1135.77 684.431 L1136.33 684.431 L1136.89 684.431 L1137.45 684.431 L1138.01 684.431 L1138.57 684.431 L1139.13 684.431 L1139.68 684.431 L1140.24 684.431 L1140.8 684.431 L1141.36 684.431 L1141.92 684.431 L1142.48 684.431 L1143.04 684.431 L1143.6 684.431 L1144.16 684.431 L1144.72 684.431 L1145.28 684.431 L1145.84 684.431 L1146.4 684.431 L1146.96 684.431 L1147.51 684.431 L1148.07 684.431 L1148.63 684.431 L1149.19 684.431 L1149.75 684.431 L1150.31 684.431 L1150.87 684.431 L1151.43 684.431 L1151.99 684.431 L1152.55 684.431 L1153.11 684.431 L1153.67 684.431 L1154.23 684.431 L1154.78 684.431 L1155.34 684.431 L1155.9 684.431 L1156.46 684.431 L1157.02 684.431 L1157.58 684.431 L1158.14 684.431 L1158.7 684.431 L1159.26 684.431 L1159.82 684.431 L1160.38 684.431 L1160.94 684.431 L1161.5 684.431 L1162.05 684.431 L1162.61 684.431 L1163.17 684.431 L1163.73 684.431 L1164.29 684.431 L1164.85 684.431 L1165.41 684.431 L1165.97 684.431 L1166.53 684.431 L1167.09 684.431 L1167.65 684.431 L1168.21 684.431 L1168.77 684.431 L1169.33 684.431 L1169.88 684.431 L1170.44 684.431 L1171 684.431 L1171.56 684.431 L1172.12 684.431 L1172.68 684.431 L1173.24 684.431 L1173.8 684.431 L1174.36 684.431 L1174.92 684.431 L1175.48 684.431 L1176.04 684.431 L1176.6 684.431 L1177.15 684.431 L1177.71 684.431 L1178.27 684.431 L1178.83 684.431 L1179.39 684.431 L1179.95 684.431 L1180.51 684.431 L1181.07 684.431 L1181.63 684.431 L1182.19 684.431 L1182.75 684.431 L1183.31 684.431 L1183.87 684.431 L1184.43 684.431 L1184.98 684.431 L1185.54 684.431 L1186.1 684.431 L1186.66 684.431 L1187.22 684.431 L1187.78 684.431 L1188.34 684.431 L1188.9 684.431 L1189.46 684.431 L1190.02 684.431 L1190.58 684.431 L1191.14 684.431 L1191.7 684.431 L1192.25 684.431 L1192.81 684.431 L1193.37 684.431 L1193.93 684.431 L1194.49 684.431 L1195.05 684.431 L1195.61 684.431 L1196.17 684.431 L1196.73 684.431 L1197.29 684.431 L1197.85 684.431 L1198.41 684.431 L1198.97 684.431 L1199.52 684.431 L1200.08 684.431 L1200.64 684.431 L1201.2 684.431 L1201.76 684.431 L1202.32 684.431 L1202.88 684.431 L1203.44 684.431 L1204 684.431 L1204.56 684.431 L1205.12 684.431 L1205.68 684.431 L1206.24 684.431 L1206.8 684.431 L1207.35 684.431 L1207.91 684.431 L1208.47 684.431 L1209.03 684.431 L1209.59 684.431 L1210.15 684.431 L1210.71 684.431 L1211.27 684.431 L1211.83 684.431 L1212.39 684.431 L1212.95 684.431 L1213.51 684.431 L1214.07 684.431 L1214.62 684.431 L1215.18 684.431 L1215.74 684.431 L1216.3 684.431 L1216.86 684.431 L1217.42 684.431 L1217.98 684.431 L1218.54 684.431 L1219.1 684.431 L1219.66 684.431 L1220.22 684.431 L1220.78 684.431 L1221.34 684.431 L1221.89 684.431 L1222.45 684.431 L1223.01 684.431 L1223.57 684.431 L1224.13 684.431 L1224.69 684.431 L1225.25 684.431 L1225.81 684.431 L1226.37 684.431 L1226.93 684.431 L1227.49 684.431 L1228.05 684.431 L1228.61 684.431 L1229.17 684.431 L1229.72 684.431 L1230.28 684.431 L1230.84 684.431 L1231.4 684.431 L1231.96 684.431 L1232.52 684.431 L1233.08 684.431 L1233.64 684.431 L1234.2 684.431 L1234.76 684.431 L1235.32 684.431 L1235.88 684.431 L1236.44 684.431 L1236.99 684.431 L1237.55 684.431 L1238.11 684.431 L1238.67 684.431 L1239.23 684.431 L1239.79 684.431 L1240.35 684.431 L1240.91 684.431 L1241.47 684.431 L1242.03 684.431 L1242.59 684.431 L1243.15 684.431 L1243.71 684.431 L1244.26 684.431 L1244.82 684.431 L1245.38 684.431 L1245.94 684.431 L1246.5 684.431 L1247.06 684.431 L1247.62 684.431 L1248.18 684.431 L1248.74 684.431 L1249.3 684.431 L1249.86 684.431 L1250.42 684.431 L1250.98 684.431 L1251.54 684.431 L1252.09 684.431 L1252.65 684.431 L1253.21 684.431 L1253.77 684.431 L1254.33 684.431 L1254.89 684.431 L1255.45 684.431 L1256.01 684.431 L1256.57 684.431 L1257.13 684.431 L1257.69 684.431 L1258.25 684.431 L1258.81 684.431 L1259.36 684.431 L1259.92 684.431 L1260.48 684.431 L1261.04 684.431 L1261.6 684.431 L1262.16 684.431 L1262.72 684.431 L1263.28 684.431 L1263.84 684.431 L1264.4 684.431 L1264.96 684.431 L1265.52 684.431 L1266.08 684.431 L1266.63 684.431 L1267.19 684.431 L1267.75 684.431 L1268.31 684.431 L1268.87 684.431 L1269.43 684.431 L1269.99 684.431 L1270.55 684.431 L1271.11 684.431 L1271.67 684.431 L1272.23 684.431 L1272.79 684.431 L1273.35 684.431 L1273.91 684.431 L1274.46 684.431 L1275.02 684.431 L1275.58 684.431 L1276.14 684.431 L1276.7 684.431 L1277.26 684.431 L1277.82 684.431 L1278.38 684.431 L1278.94 684.431 L1279.5 684.431 L1280.06 684.431 L1280.62 684.431 L1281.18 684.431 L1281.73 684.431 L1282.29 684.431 L1282.85 684.431 L1283.41 684.431 L1283.97 684.431 L1284.53 684.431 L1285.09 684.431 L1285.65 684.431 L1286.21 684.431 L1286.77 684.431 L1287.33 684.431 L1287.89 684.431 L1288.45 684.431 L1289 684.431 L1289.56 684.431 L1290.12 684.431 L1290.68 684.431 L1291.24 684.431 L1291.8 684.431 L1292.36 684.431 L1292.92 684.431 L1293.48 684.431 L1294.04 684.431 L1294.6 684.431 L1295.16 684.431 L1295.72 684.431 L1296.28 684.431 L1296.83 684.431 L1297.39 684.431 L1297.95 684.431 L1298.51 684.431 L1299.07 684.431 L1299.63 684.431 L1300.19 684.431 L1300.75 684.431 L1301.31 684.431 L1301.87 684.431 L1302.43 684.431 L1302.99 684.431 L1303.55 684.431 L1304.1 684.431 L1304.66 684.431 L1305.22 684.431 L1305.78 684.431 L1306.34 684.431 L1306.9 684.431 L1307.46 684.431 L1308.02 684.431 L1308.58 684.431 L1309.14 684.431 L1309.7 684.431 L1310.26 684.431 L1310.82 684.431 L1311.38 684.431 L1311.93 684.431 L1312.49 684.431 L1313.05 684.431 L1313.61 684.431 L1314.17 684.431 L1314.73 684.431 L1315.29 684.431 L1315.85 684.431 L1316.41 684.431 L1316.97 684.431 L1317.53 684.431 L1318.09 684.431 L1318.65 684.431 L1319.2 684.431 L1319.76 684.431 L1320.32 684.431 L1320.88 684.431 L1321.44 684.431 L1322 684.431 L1322.56 684.431 L1323.12 684.431 L1323.68 684.431 L1324.24 684.431 L1324.8 684.431 L1325.36 684.431 L1325.92 684.431 L1326.47 684.431 L1327.03 684.431 L1327.59 684.431 L1328.15 684.431 L1328.71 684.431 L1329.27 684.431 L1329.83 684.431 L1330.39 684.431 L1330.95 684.431 L1331.51 684.431 L1332.07 684.431 L1332.63 684.431 L1333.19 684.431 L1333.75 684.431 L1334.3 684.431 L1334.86 684.431 L1335.42 684.431 L1335.98 684.431 L1336.54 684.431 L1337.1 684.431 L1337.66 684.431 L1338.22 684.431 L1338.78 684.431 L1339.34 684.431 L1339.9 684.431 L1340.46 684.431 L1341.02 684.431 L1341.57 684.431 L1342.13 684.431 L1342.69 684.431 L1343.25 684.431 L1343.81 684.431 L1344.37 684.431 L1344.93 684.431 L1345.49 684.431 L1346.05 684.431 L1346.61 684.431 L1347.17 684.431 L1347.73 684.431 L1348.29 684.431 L1348.84 684.431 L1349.4 684.431 L1349.96 684.431 L1350.52 684.431 L1351.08 684.431 L1351.64 684.431 L1352.2 684.431 L1352.76 684.431 L1353.32 684.431 L1353.88 684.431 L1354.44 684.431 L1355 684.431 L1355.56 684.431 L1356.12 684.431 L1356.67 684.431 L1357.23 684.431 L1357.79 684.431 L1358.35 684.431 L1358.91 684.431 L1359.47 684.431 L1360.03 684.431 L1360.59 684.431 L1361.15 684.431 L1361.71 684.431 L1362.27 684.431 L1362.83 684.431 L1363.39 684.431 L1363.94 684.431 L1364.5 684.431 L1365.06 684.431 L1365.62 684.431 L1366.18 684.431 L1366.74 684.431 L1367.3 684.431 L1367.86 684.431 L1368.42 684.431 L1368.98 684.431 L1369.54 684.431 L1370.1 684.431 L1370.66 684.431 L1371.21 684.431 L1371.77 684.431 L1372.33 684.431 L1372.89 684.431 L1373.45 684.431 L1374.01 684.431 L1374.57 684.431 L1375.13 684.431 L1375.69 684.431 L1376.25 684.431 L1376.81 684.431 L1377.37 684.431 L1377.93 684.431 L1378.49 684.431 L1379.04 684.431 L1379.6 684.431 L1380.16 684.431 L1380.72 684.431 L1381.28 684.431 L1381.84 684.431 L1382.4 684.431 L1382.96 684.431 L1383.52 684.431 L1384.08 684.431 L1384.64 684.431 L1385.2 684.431 L1385.76 684.431 L1386.31 684.431 L1386.87 684.431 L1387.43 684.431 L1387.99 684.431 L1388.55 684.431 L1389.11 684.431 L1389.67 684.431 L1390.23 684.431 L1390.79 684.431 L1391.35 684.431 L1391.91 684.431 L1392.47 684.431 L1393.03 684.431 L1393.58 684.431 L1394.14 684.431 L1394.7 684.431 L1395.26 684.431 L1395.82 684.431 L1396.38 684.431 L1396.94 684.431 L1397.5 684.431 L1398.06 684.431 L1398.62 684.431 L1399.18 684.431 L1399.74 684.431 L1400.3 684.431 L1400.86 684.431 L1401.41 684.431 L1401.97 684.431 L1402.53 684.431 L1403.09 684.431 L1403.65 684.431 L1404.21 684.431 L1404.77 684.431 L1405.33 684.431 L1405.89 684.431 L1406.45 684.431 L1407.01 684.431 L1407.57 684.431 L1408.13 684.431 L1408.68 684.431 L1409.24 684.431 L1409.8 684.431 L1410.36 684.431 L1410.92 684.431 L1411.48 684.431 L1412.04 684.431 L1412.6 684.431 L1413.16 684.431 L1413.72 684.431 L1414.28 684.431 L1414.84 684.431 L1415.4 684.431 L1415.95 684.431 L1416.51 684.431 L1417.07 684.431 L1417.63 684.431 L1418.19 684.431 L1418.75 684.431 L1419.31 684.431 L1419.87 684.431 L1420.43 684.431 L1420.99 684.431 L1421.55 684.431 L1422.11 684.431 L1422.67 684.431 L1423.23 684.431 L1423.78 684.431 L1424.34 684.431 L1424.9 684.431 L1425.46 684.431 L1426.02 684.431 L1426.58 684.431 L1427.14 684.431 L1427.7 684.431 L1428.26 684.431 L1428.82 684.431 L1429.38 684.431 L1429.94 684.431 L1430.5 684.431 L1431.05 684.431 L1431.61 684.431 L1432.17 684.431 L1432.73 684.431 L1433.29 684.431 L1433.85 684.431 L1434.41 684.431 L1434.97 684.431 L1435.53 684.431 L1436.09 684.431 L1436.65 684.431 L1437.21 684.431 L1437.77 684.431 L1438.33 684.431 L1438.88 684.431 L1439.44 684.431 L1440 684.431 L1440.56 684.431 L1441.12 684.431 L1441.68 684.431 L1442.24 684.431 L1442.8 684.431 L1443.36 684.431 L1443.92 684.431 L1444.48 684.431 L1445.04 684.431 L1445.6 684.431 L1446.15 684.431 L1446.71 684.431 L1447.27 684.431 L1447.83 684.431 L1448.39 684.431 L1448.95 684.431 L1449.51 684.431 L1450.07 684.431 L1450.63 684.431 L1451.19 684.431 L1451.75 684.431 L1452.31 684.431 L1452.87 684.431 L1453.42 684.431 L1453.98 684.431 L1454.54 684.431 L1455.1 684.431 L1455.66 684.431 L1456.22 684.431 L1456.78 684.431 L1457.34 684.431 L1457.9 684.431 L1458.46 684.431 L1459.02 684.431 L1459.58 684.431 L1460.14 684.431 L1460.7 684.431 L1461.25 684.431 L1461.81 684.431 L1462.37 684.431 L1462.93 684.431 L1463.49 684.431 L1464.05 684.431 L1464.61 684.431 L1465.17 684.431 L1465.73 684.431 L1466.29 684.431 L1466.85 684.431 L1467.41 684.431 L1467.97 684.431 L1468.52 684.431 L1469.08 684.431 L1469.64 684.431 L1470.2 684.431 L1470.76 684.431 L1471.32 684.431 L1471.88 684.431 L1472.44 684.431 L1473 684.431 L1473.56 684.431 L1474.12 684.431 L1474.68 684.431 L1475.24 684.431 L1475.79 684.431 L1476.35 684.431 L1476.91 684.431 L1477.47 684.431 L1478.03 684.431 L1478.59 684.431 L1479.15 684.431 L1479.71 684.431 L1480.27 684.431 L1480.83 684.431 L1481.39 684.431 L1481.95 684.431 L1482.51 684.431 L1483.07 684.431 L1483.62 684.431 L1484.18 684.431 L1484.74 684.431 L1485.3 684.431 L1485.86 684.431 L1486.42 684.431 L1486.98 684.431 L1487.54 684.431 L1488.1 684.431 L1488.66 684.431 L1489.22 684.431 L1489.78 684.431 L1490.34 684.431 L1490.89 684.431 L1491.45 684.431 L1492.01 684.431 L1492.57 684.431 L1493.13 684.431 L1493.69 684.431 L1494.25 684.431 L1494.81 684.431 L1495.37 684.431 L1495.93 684.431 L1496.49 684.431 L1497.05 684.431 L1497.61 684.431 L1498.16 684.431 L1498.72 684.431 L1499.28 684.431 L1499.84 684.431 L1500.4 684.431 L1500.96 684.431 L1501.52 684.431 L1502.08 684.431 L1502.64 684.431 L1503.2 684.431 L1503.76 684.431 L1504.32 684.431 L1504.88 684.431 L1505.44 684.431 L1505.99 684.431 L1506.55 684.431 L1507.11 684.431 L1507.67 684.431 L1508.23 684.431 L1508.79 684.431 L1509.35 684.431 L1509.91 684.431 L1510.47 684.431 L1511.03 684.431 L1511.59 684.431 L1512.15 684.431 L1512.71 684.431 L1513.26 684.431 L1513.82 684.431 L1514.38 684.431 L1514.94 684.431 L1515.5 684.431 L1516.06 684.431 L1516.62 684.431 L1517.18 684.431 L1517.74 684.431 L1518.3 684.431 L1518.86 684.431 L1519.42 684.431 L1519.98 684.431 L1520.53 684.431 L1521.09 684.431 L1521.65 684.431 L1522.21 684.431 L1522.77 684.431 L1523.33 684.431 L1523.89 684.431 L1524.45 684.431 L1525.01 684.431 L1525.57 684.431 L1526.13 684.431 L1526.69 684.431 L1527.25 684.431 L1527.81 684.431 L1528.36 684.431 L1528.92 684.431 L1529.48 684.431 L1530.04 684.431 L1530.6 684.431 L1531.16 684.431 L1531.72 684.431 L1532.28 684.431 L1532.84 684.431 L1533.4 684.431 L1533.96 684.431 L1534.52 684.431 L1535.08 684.431 L1535.63 684.431 L1536.19 684.431 L1536.75 684.431 L1537.31 684.431 L1537.87 684.431 L1538.43 684.431 L1538.99 684.431 L1539.55 684.431 L1540.11 684.431 L1540.67 684.431 L1541.23 684.431 L1541.79 684.431 L1542.35 684.431 L1542.9 684.431 L1543.46 684.431 L1544.02 684.431 L1544.58 684.431 L1545.14 684.431 L1545.7 684.431 L1546.26 684.431 L1546.82 684.431 L1547.38 684.431 L1547.94 684.431 L1548.5 684.431 L1549.06 684.431 L1549.62 684.431 L1550.18 684.431 L1550.73 684.431 L1551.29 684.431 L1551.85 684.431 L1552.41 684.431 L1552.97 684.431 L1553.53 684.431 L1554.09 684.431 L1554.65 684.431 L1555.21 684.431 L1555.77 684.431 L1556.33 684.431 L1556.89 684.431 L1557.45 684.431 L1558 684.431 L1558.56 684.431 L1559.12 684.431 L1559.68 684.431 L1560.24 684.431 L1560.8 684.431 L1561.36 684.431 L1561.92 684.431 L1562.48 684.431 L1563.04 684.431 L1563.6 684.431 L1564.16 684.431 L1564.72 684.431 L1565.28 684.431 L1565.83 684.431 L1566.39 684.431 L1566.95 684.431 L1567.51 684.431 L1568.07 684.431 L1568.63 684.431 L1569.19 684.431 L1569.75 684.431 L1570.31 684.431 L1570.87 684.431 L1571.43 684.431 L1571.99 684.431 L1572.55 684.431 L1573.1 684.431 L1573.66 684.431 L1574.22 684.431 L1574.78 684.431 L1575.34 684.431 L1575.9 684.431 L1576.46 684.431 L1577.02 684.431 L1577.58 684.431 L1578.14 684.431 L1578.7 684.431 L1579.26 684.431 L1579.82 684.431 L1580.37 684.431 L1580.93 684.431 L1581.49 684.431 L1582.05 684.431 L1582.61 684.431 L1583.17 684.431 L1583.73 684.431 L1584.29 684.431 L1584.85 684.431 L1585.41 684.431 L1585.97 684.431 L1586.53 684.431 L1587.09 684.431 L1587.65 684.431 L1588.2 684.431 L1588.76 684.431 L1589.32 684.431 L1589.88 684.431 L1590.44 684.431 L1591 684.431 L1591.56 684.431 L1592.12 684.431 L1592.68 684.431 L1593.24 684.431 L1593.8 684.431 L1594.36 684.431 L1594.92 684.431 L1595.47 684.431 L1596.03 684.431 L1596.59 684.431 L1597.15 684.431 L1597.71 684.431 L1598.27 684.431 L1598.83 684.431 L1599.39 684.431 L1599.95 684.431 L1600.51 684.431 L1601.07 684.431 L1601.63 684.431 L1602.19 684.431 L1602.74 684.431 L1603.3 684.431 L1603.86 684.431 L1604.42 684.431 L1604.98 684.431 L1605.54 684.431 L1606.1 684.431 L1606.66 684.431 L1607.22 684.431 L1607.78 684.431 L1608.34 684.431 L1608.9 684.431 L1609.46 684.431 L1610.02 684.431 L1610.57 684.431 L1611.13 684.431 L1611.69 684.431 L1612.25 684.431 L1612.81 684.431 L1613.37 684.431 L1613.93 684.431 L1614.49 684.431 L1615.05 684.431 L1615.61 684.431 L1616.17 684.431 L1616.73 684.431 L1617.29 684.431 L1617.84 684.431 L1618.4 684.431 L1618.96 684.431 L1619.52 684.431 L1620.08 684.431 L1620.64 684.431 L1621.2 684.431 L1621.76 684.431 L1622.32 684.431 L1622.88 684.431 L1623.44 684.431 L1624 684.431 L1624.56 684.431 L1625.11 684.431 L1625.67 684.431 L1626.23 684.431 L1626.79 684.431 L1627.35 684.431 L1627.91 684.431 L1628.47 684.431 L1629.03 684.431 L1629.59 684.431 L1630.15 684.431 L1630.71 684.431 L1631.27 684.431 L1631.83 684.431 L1632.39 684.431 L1632.94 684.431 L1633.5 684.431 L1634.06 684.431 L1634.62 684.431 L1635.18 684.431 L1635.74 684.431 L1636.3 684.431 L1636.86 684.431 L1637.42 684.431 L1637.98 684.431 L1638.54 684.431 L1639.1 684.431 L1639.66 684.431 L1640.21 684.431 L1640.77 684.431 L1641.33 684.431 L1641.89 684.431 L1642.45 684.431 L1643.01 684.431 L1643.57 684.431 L1644.13 684.431 L1644.69 684.431 L1645.25 684.431 L1645.81 684.431 L1646.37 684.431 L1646.93 684.431 L1647.48 684.431 L1648.04 684.431 L1648.6 684.431 L1649.16 684.431 L1649.72 684.431 L1650.28 684.431 L1650.84 684.431 L1651.4 684.431 L1651.96 684.431 L1652.52 684.431 L1653.08 684.431 L1653.64 684.431 L1654.2 684.431 L1654.76 684.431 L1655.31 684.431 L1655.87 684.431 L1656.43 684.431 L1656.99 684.431 L1657.55 684.431 L1658.11 684.431 L1658.67 684.431 L1659.23 684.431 L1659.79 684.431 L1660.35 684.431 L1660.91 684.431 L1661.47 684.431 L1662.03 684.431 L1662.58 684.431 L1663.14 684.431 L1663.7 684.431 L1664.26 684.431 L1664.82 684.431 L1665.38 684.431 L1665.94 684.431 L1666.5 684.431 L1667.06 684.431 L1667.62 684.431 L1668.18 684.431 L1668.74 684.431 L1669.3 684.431 L1669.85 684.431 L1670.41 684.431 L1670.97 684.431 L1671.53 684.431 L1672.09 684.431 L1672.65 684.431 L1673.21 684.431 L1673.77 684.431 L1674.33 684.431 L1674.89 684.431 L1675.45 684.431 L1676.01 684.431 L1676.57 684.431 L1677.13 684.431 L1677.68 684.431 L1678.24 684.431 L1678.8 684.431 L1679.36 684.431 L1679.92 684.431 L1680.48 684.431 L1681.04 684.431 L1681.6 684.431 L1682.16 684.431 L1682.72 684.431 L1683.28 684.431 L1683.84 684.431 L1684.4 684.431 L1684.95 684.431 L1685.51 684.431 L1686.07 684.431 L1686.63 684.431 L1687.19 684.431 L1687.75 684.431 L1688.31 684.431 L1688.87 684.431 L1689.43 684.431 L1689.99 684.431 L1690.55 684.431 L1691.11 684.431 L1691.67 684.431 L1692.23 684.431 L1692.78 684.431 L1693.34 684.431 L1693.9 684.431 L1694.46 684.431 L1695.02 684.431 L1695.58 684.431 L1696.14 684.431 L1696.7 684.431 L1697.26 684.431 L1697.82 684.431 L1698.38 684.431 L1698.94 684.431 L1699.5 684.431 L1700.05 684.431 L1700.61 684.431 L1701.17 684.431 L1701.73 684.431 L1702.29 684.431 L1702.85 684.431 L1703.41 684.431 L1703.97 684.431 L1704.53 684.431 L1705.09 684.431 L1705.65 684.431 L1706.21 684.431 L1706.77 684.431 L1707.32 684.431 L1707.88 684.431 L1708.44 684.431 L1709 684.431 L1709.56 684.431 L1710.12 684.431 L1710.68 684.431 L1711.24 684.431 L1711.8 684.431 L1712.36 684.431 L1712.92 684.431 L1713.48 684.431 L1714.04 684.431 L1714.6 684.431 L1715.15 684.431 L1715.71 684.431 L1716.27 684.431 L1716.83 684.431 L1717.39 684.431 L1717.95 684.431 L1718.51 684.431 L1719.07 684.431 L1719.63 684.431 L1720.19 684.431 L1720.75 684.431 L1721.31 684.431 L1721.87 684.431 L1722.42 684.431 L1722.98 684.431 L1723.54 684.431 L1724.1 684.431 L1724.66 684.431 L1725.22 684.431 L1725.78 684.431 L1726.34 684.431 L1726.9 684.431 L1727.46 684.431 L1728.02 684.431 L1728.58 684.431 L1729.14 684.431 L1729.69 684.431 L1730.25 684.431 L1730.81 684.431 L1731.37 684.431 L1731.93 684.431 L1732.49 684.431 L1733.05 684.431 L1733.61 684.431 L1734.17 684.431 L1734.73 684.431 L1735.29 684.431 L1735.85 684.431 L1736.41 684.431 L1736.97 684.431 L1737.52 684.431 L1738.08 684.431 L1738.64 684.431 L1739.2 684.431 L1739.76 684.431 L1740.32 684.431 L1740.88 684.431 L1741.44 684.431 L1742 684.431 L1742.56 684.431 L1743.12 684.431 L1743.68 684.431 L1744.24 684.431 L1744.79 684.431 L1745.35 684.431 L1745.91 684.431 L1746.47 684.431 L1747.03 684.431 L1747.59 684.431 L1748.15 684.431 L1748.71 684.431 L1749.27 684.431 L1749.83 684.431 L1750.39 684.431 L1750.95 684.431 L1751.51 684.431 L1752.06 684.431 L1752.62 684.431 L1753.18 684.431 L1753.74 684.431 L1754.3 684.431 L1754.86 684.431 L1755.42 684.431 L1755.98 684.431 L1756.54 684.431 L1757.1 684.431 L1757.66 684.431 L1758.22 684.431 L1758.78 684.431 L1759.34 684.431 L1759.89 684.431 L1760.45 684.431 L1761.01 684.431 L1761.57 684.431 L1762.13 684.431 L1762.69 684.431 L1763.25 684.431 L1763.81 684.431 L1764.37 684.431 L1764.93 684.431 L1765.49 684.431 L1766.05 684.431 L1766.61 684.431 L1767.16 684.431 L1767.72 684.431 L1768.28 684.431 L1768.84 684.431 L1769.4 684.431 L1769.96 684.431 L1770.52 684.431 L1771.08 684.431 L1771.64 684.431 L1772.2 684.431 L1772.76 684.431 L1773.32 684.431 L1773.88 684.431 L1774.43 684.431 L1774.99 684.431 L1775.55 684.431 L1776.11 684.431 L1776.67 684.431 L1777.23 684.431 L1777.79 684.431 L1778.35 684.431 L1778.91 684.431 L1779.47 684.431 L1780.03 684.431 L1780.59 684.431 L1781.15 684.431 L1781.71 684.431 L1782.26 684.431 L1782.82 684.431 L1783.38 684.431 L1783.94 684.431 L1784.5 684.431 L1785.06 684.431 L1785.62 684.431 L1786.18 684.431 L1786.74 684.431 L1787.3 684.431 L1787.86 684.431 L1788.42 684.431 L1788.98 684.431 L1789.53 684.431 L1790.09 684.431 L1790.65 684.431 L1791.21 684.431 L1791.77 684.431 L1792.33 684.431 L1792.89 684.431 L1793.45 684.431 L1794.01 684.431 L1794.57 684.431 L1795.13 684.431 L1795.69 684.431 L1796.25 684.431 L1796.8 684.431 L1797.36 684.431 L1797.92 684.431 L1798.48 684.431 L1799.04 684.431 L1799.6 684.431 L1800.16 684.431 L1800.72 684.431 L1801.28 684.431 L1801.84 684.431 L1802.4 684.431 L1802.96 684.431 L1803.52 684.431 L1804.08 684.431 L1804.63 684.431 L1805.19 684.431 L1805.75 684.431 L1806.31 684.431 L1806.87 684.431 L1807.43 684.431 L1807.99 684.431 L1808.55 684.431 L1809.11 684.431 L1809.67 684.431 L1810.23 684.431 L1810.79 684.431 L1811.35 684.431 L1811.9 684.431 L1812.46 684.431 L1813.02 684.431 L1813.58 684.431 L1814.14 684.431 L1814.7 684.431 L1815.26 684.431 L1815.82 684.431 L1816.38 684.431 L1816.94 684.431 L1817.5 684.431 L1818.06 684.431 L1818.62 684.431 L1819.18 684.431 L1819.73 684.431 L1820.29 684.431 L1820.85 684.431 L1821.41 684.431 L1821.97 684.431 L1822.53 684.431 L1823.09 684.431 L1823.65 684.431 L1824.21 684.431 L1824.77 684.431 L1825.33 684.431 L1825.89 684.431 L1826.45 684.431 L1827 684.431 L1827.56 684.431 L1828.12 684.431 L1828.68 684.431 L1829.24 684.431 L1829.8 684.431 L1830.36 684.431 L1830.92 684.431 L1831.48 684.431 L1832.04 684.431 L1832.6 684.431 L1833.16 684.431 L1833.72 684.431 L1834.27 684.431 L1834.83 684.431 L1835.39 684.431 L1835.95 684.431 L1836.51 684.431 L1837.07 684.431 L1837.63 684.431 L1838.19 684.431 L1838.19 682.486 L1837.63 682.486 L1837.07 682.486 L1836.51 682.486 L1835.95 682.486 L1835.39 682.486 L1834.83 682.486 L1834.27 682.486 L1833.72 682.486 L1833.16 682.486 L1832.6 682.486 L1832.04 682.486 L1831.48 682.486 L1830.92 682.486 L1830.36 682.486 L1829.8 682.486 L1829.24 682.486 L1828.68 682.486 L1828.12 682.486 L1827.56 682.486 L1827 682.486 L1826.45 682.486 L1825.89 682.486 L1825.33 682.486 L1824.77 682.486 L1824.21 682.486 L1823.65 682.486 L1823.09 682.486 L1822.53 682.486 L1821.97 682.486 L1821.41 682.486 L1820.85 682.486 L1820.29 682.486 L1819.73 682.486 L1819.18 682.486 L1818.62 682.486 L1818.06 682.486 L1817.5 682.486 L1816.94 682.486 L1816.38 682.486 L1815.82 682.486 L1815.26 682.486 L1814.7 682.486 L1814.14 682.486 L1813.58 682.486 L1813.02 682.486 L1812.46 682.486 L1811.9 682.486 L1811.35 682.486 L1810.79 682.486 L1810.23 682.486 L1809.67 682.486 L1809.11 682.486 L1808.55 682.486 L1807.99 682.486 L1807.43 682.486 L1806.87 682.486 L1806.31 682.486 L1805.75 682.486 L1805.19 682.486 L1804.63 682.486 L1804.08 682.486 L1803.52 682.486 L1802.96 682.486 L1802.4 682.486 L1801.84 682.486 L1801.28 682.486 L1800.72 682.486 L1800.16 682.486 L1799.6 682.486 L1799.04 682.486 L1798.48 682.486 L1797.92 682.486 L1797.36 682.486 L1796.8 682.486 L1796.25 682.486 L1795.69 682.486 L1795.13 682.486 L1794.57 682.486 L1794.01 682.486 L1793.45 682.486 L1792.89 682.486 L1792.33 682.486 L1791.77 682.486 L1791.21 682.486 L1790.65 682.486 L1790.09 682.486 L1789.53 682.486 L1788.98 682.486 L1788.42 682.486 L1787.86 682.486 L1787.3 682.486 L1786.74 682.486 L1786.18 682.486 L1785.62 682.486 L1785.06 682.486 L1784.5 682.486 L1783.94 682.486 L1783.38 682.486 L1782.82 682.486 L1782.26 682.486 L1781.71 682.486 L1781.15 682.486 L1780.59 682.486 L1780.03 682.486 L1779.47 682.486 L1778.91 682.486 L1778.35 682.486 L1777.79 682.486 L1777.23 682.486 L1776.67 682.486 L1776.11 682.486 L1775.55 682.486 L1774.99 682.486 L1774.43 682.486 L1773.88 682.486 L1773.32 682.486 L1772.76 682.486 L1772.2 682.486 L1771.64 682.486 L1771.08 682.486 L1770.52 682.486 L1769.96 682.486 L1769.4 682.486 L1768.84 682.486 L1768.28 682.486 L1767.72 682.486 L1767.16 682.486 L1766.61 682.486 L1766.05 682.486 L1765.49 682.486 L1764.93 682.486 L1764.37 682.486 L1763.81 682.486 L1763.25 682.486 L1762.69 682.486 L1762.13 682.486 L1761.57 682.486 L1761.01 682.486 L1760.45 682.486 L1759.89 682.486 L1759.34 682.486 L1758.78 682.486 L1758.22 682.486 L1757.66 682.486 L1757.1 682.486 L1756.54 682.486 L1755.98 682.486 L1755.42 682.486 L1754.86 682.486 L1754.3 682.486 L1753.74 682.486 L1753.18 682.486 L1752.62 682.486 L1752.06 682.486 L1751.51 682.486 L1750.95 682.486 L1750.39 682.486 L1749.83 682.486 L1749.27 682.486 L1748.71 682.486 L1748.15 682.486 L1747.59 682.486 L1747.03 682.486 L1746.47 682.486 L1745.91 682.486 L1745.35 682.486 L1744.79 682.486 L1744.24 682.486 L1743.68 682.486 L1743.12 682.486 L1742.56 682.486 L1742 682.486 L1741.44 682.486 L1740.88 682.486 L1740.32 682.486 L1739.76 682.486 L1739.2 682.486 L1738.64 682.486 L1738.08 682.486 L1737.52 682.486 L1736.97 682.486 L1736.41 682.486 L1735.85 682.486 L1735.29 682.486 L1734.73 682.486 L1734.17 682.486 L1733.61 682.486 L1733.05 682.486 L1732.49 682.486 L1731.93 682.486 L1731.37 682.486 L1730.81 682.486 L1730.25 682.486 L1729.69 682.486 L1729.14 682.486 L1728.58 682.486 L1728.02 682.486 L1727.46 682.486 L1726.9 682.486 L1726.34 682.486 L1725.78 682.486 L1725.22 682.486 L1724.66 682.486 L1724.1 682.486 L1723.54 682.486 L1722.98 682.486 L1722.42 682.486 L1721.87 682.486 L1721.31 682.486 L1720.75 682.486 L1720.19 682.486 L1719.63 682.486 L1719.07 682.486 L1718.51 682.486 L1717.95 682.486 L1717.39 682.486 L1716.83 682.486 L1716.27 682.486 L1715.71 682.486 L1715.15 682.486 L1714.6 682.486 L1714.04 682.486 L1713.48 682.486 L1712.92 682.486 L1712.36 682.486 L1711.8 682.486 L1711.24 682.486 L1710.68 682.486 L1710.12 682.486 L1709.56 682.486 L1709 682.486 L1708.44 682.486 L1707.88 682.486 L1707.32 682.486 L1706.77 682.486 L1706.21 682.486 L1705.65 682.486 L1705.09 682.486 L1704.53 682.486 L1703.97 682.486 L1703.41 682.486 L1702.85 682.486 L1702.29 682.486 L1701.73 682.486 L1701.17 682.486 L1700.61 682.486 L1700.05 682.486 L1699.5 682.486 L1698.94 682.486 L1698.38 682.486 L1697.82 682.486 L1697.26 682.486 L1696.7 682.486 L1696.14 682.486 L1695.58 682.486 L1695.02 682.486 L1694.46 682.486 L1693.9 682.486 L1693.34 682.486 L1692.78 682.486 L1692.23 682.486 L1691.67 682.486 L1691.11 682.486 L1690.55 682.486 L1689.99 682.486 L1689.43 682.486 L1688.87 682.486 L1688.31 682.486 L1687.75 682.486 L1687.19 682.486 L1686.63 682.486 L1686.07 682.486 L1685.51 682.486 L1684.95 682.486 L1684.4 682.486 L1683.84 682.486 L1683.28 682.486 L1682.72 682.486 L1682.16 682.486 L1681.6 682.486 L1681.04 682.486 L1680.48 682.486 L1679.92 682.486 L1679.36 682.486 L1678.8 682.486 L1678.24 682.486 L1677.68 682.486 L1677.13 682.486 L1676.57 682.486 L1676.01 682.486 L1675.45 682.486 L1674.89 682.486 L1674.33 682.486 L1673.77 682.486 L1673.21 682.486 L1672.65 682.486 L1672.09 682.486 L1671.53 682.486 L1670.97 682.486 L1670.41 682.486 L1669.85 682.486 L1669.3 682.486 L1668.74 682.486 L1668.18 682.486 L1667.62 682.486 L1667.06 682.486 L1666.5 682.486 L1665.94 682.486 L1665.38 682.486 L1664.82 682.486 L1664.26 682.486 L1663.7 682.486 L1663.14 682.486 L1662.58 682.486 L1662.03 682.486 L1661.47 682.486 L1660.91 682.486 L1660.35 682.486 L1659.79 682.486 L1659.23 682.486 L1658.67 682.486 L1658.11 682.486 L1657.55 682.486 L1656.99 682.486 L1656.43 682.486 L1655.87 682.486 L1655.31 682.486 L1654.76 682.486 L1654.2 682.486 L1653.64 682.486 L1653.08 682.486 L1652.52 682.486 L1651.96 682.486 L1651.4 682.486 L1650.84 682.486 L1650.28 682.486 L1649.72 682.486 L1649.16 682.486 L1648.6 682.486 L1648.04 682.486 L1647.48 682.486 L1646.93 682.486 L1646.37 682.486 L1645.81 682.486 L1645.25 682.486 L1644.69 682.486 L1644.13 682.486 L1643.57 682.486 L1643.01 682.486 L1642.45 682.486 L1641.89 682.486 L1641.33 682.486 L1640.77 682.486 L1640.21 682.486 L1639.66 682.486 L1639.1 682.486 L1638.54 682.486 L1637.98 682.486 L1637.42 682.486 L1636.86 682.486 L1636.3 682.486 L1635.74 682.486 L1635.18 682.486 L1634.62 682.486 L1634.06 682.486 L1633.5 682.486 L1632.94 682.486 L1632.39 682.486 L1631.83 682.486 L1631.27 682.486 L1630.71 682.486 L1630.15 682.486 L1629.59 682.486 L1629.03 682.486 L1628.47 682.486 L1627.91 682.486 L1627.35 682.486 L1626.79 682.486 L1626.23 682.486 L1625.67 682.486 L1625.11 682.486 L1624.56 682.486 L1624 682.486 L1623.44 682.486 L1622.88 682.486 L1622.32 682.486 L1621.76 682.486 L1621.2 682.486 L1620.64 682.486 L1620.08 682.486 L1619.52 682.486 L1618.96 682.486 L1618.4 682.486 L1617.84 682.486 L1617.29 682.486 L1616.73 682.486 L1616.17 682.486 L1615.61 682.486 L1615.05 682.486 L1614.49 682.486 L1613.93 682.486 L1613.37 682.486 L1612.81 682.486 L1612.25 682.486 L1611.69 682.486 L1611.13 682.486 L1610.57 682.486 L1610.02 682.486 L1609.46 682.486 L1608.9 682.486 L1608.34 682.486 L1607.78 682.486 L1607.22 682.486 L1606.66 682.486 L1606.1 682.486 L1605.54 682.486 L1604.98 682.486 L1604.42 682.486 L1603.86 682.486 L1603.3 682.486 L1602.74 682.486 L1602.19 682.486 L1601.63 682.486 L1601.07 682.486 L1600.51 682.486 L1599.95 682.486 L1599.39 682.486 L1598.83 682.486 L1598.27 682.486 L1597.71 682.486 L1597.15 682.486 L1596.59 682.486 L1596.03 682.486 L1595.47 682.486 L1594.92 682.486 L1594.36 682.486 L1593.8 682.486 L1593.24 682.486 L1592.68 682.486 L1592.12 682.486 L1591.56 682.486 L1591 682.486 L1590.44 682.486 L1589.88 682.486 L1589.32 682.486 L1588.76 682.486 L1588.2 682.486 L1587.65 682.486 L1587.09 682.486 L1586.53 682.486 L1585.97 682.486 L1585.41 682.486 L1584.85 682.486 L1584.29 682.486 L1583.73 682.486 L1583.17 682.486 L1582.61 682.486 L1582.05 682.486 L1581.49 682.486 L1580.93 682.486 L1580.37 682.486 L1579.82 682.486 L1579.26 682.486 L1578.7 682.486 L1578.14 682.486 L1577.58 682.486 L1577.02 682.486 L1576.46 682.486 L1575.9 682.486 L1575.34 682.486 L1574.78 682.486 L1574.22 682.486 L1573.66 682.486 L1573.1 682.486 L1572.55 682.486 L1571.99 682.486 L1571.43 682.486 L1570.87 682.486 L1570.31 682.486 L1569.75 682.486 L1569.19 682.486 L1568.63 682.486 L1568.07 682.486 L1567.51 682.486 L1566.95 682.486 L1566.39 682.486 L1565.83 682.486 L1565.28 682.486 L1564.72 682.486 L1564.16 682.486 L1563.6 682.486 L1563.04 682.486 L1562.48 682.486 L1561.92 682.486 L1561.36 682.486 L1560.8 682.486 L1560.24 682.486 L1559.68 682.486 L1559.12 682.486 L1558.56 682.486 L1558 682.486 L1557.45 682.486 L1556.89 682.486 L1556.33 682.486 L1555.77 682.486 L1555.21 682.486 L1554.65 682.486 L1554.09 682.486 L1553.53 682.486 L1552.97 682.486 L1552.41 682.486 L1551.85 682.486 L1551.29 682.486 L1550.73 682.486 L1550.18 682.486 L1549.62 682.486 L1549.06 682.486 L1548.5 682.486 L1547.94 682.486 L1547.38 682.486 L1546.82 682.486 L1546.26 682.486 L1545.7 682.486 L1545.14 682.486 L1544.58 682.486 L1544.02 682.486 L1543.46 682.486 L1542.9 682.486 L1542.35 682.486 L1541.79 682.486 L1541.23 682.486 L1540.67 682.486 L1540.11 682.486 L1539.55 682.486 L1538.99 682.486 L1538.43 682.486 L1537.87 682.486 L1537.31 682.486 L1536.75 682.486 L1536.19 682.486 L1535.63 682.486 L1535.08 682.486 L1534.52 682.486 L1533.96 682.486 L1533.4 682.486 L1532.84 682.486 L1532.28 682.486 L1531.72 682.486 L1531.16 682.486 L1530.6 682.486 L1530.04 682.486 L1529.48 682.486 L1528.92 682.486 L1528.36 682.486 L1527.81 682.486 L1527.25 682.486 L1526.69 682.486 L1526.13 682.486 L1525.57 682.486 L1525.01 682.486 L1524.45 682.486 L1523.89 682.486 L1523.33 682.486 L1522.77 682.486 L1522.21 682.486 L1521.65 682.486 L1521.09 682.486 L1520.53 682.486 L1519.98 682.486 L1519.42 682.486 L1518.86 682.486 L1518.3 682.486 L1517.74 682.486 L1517.18 682.486 L1516.62 682.486 L1516.06 682.486 L1515.5 682.486 L1514.94 682.486 L1514.38 682.486 L1513.82 682.486 L1513.26 682.486 L1512.71 682.486 L1512.15 682.486 L1511.59 682.486 L1511.03 682.486 L1510.47 682.486 L1509.91 682.486 L1509.35 682.486 L1508.79 682.486 L1508.23 682.486 L1507.67 682.486 L1507.11 682.486 L1506.55 682.486 L1505.99 682.486 L1505.44 682.486 L1504.88 682.486 L1504.32 682.486 L1503.76 682.486 L1503.2 682.486 L1502.64 682.486 L1502.08 682.486 L1501.52 682.486 L1500.96 682.486 L1500.4 682.486 L1499.84 682.486 L1499.28 682.486 L1498.72 682.486 L1498.16 682.486 L1497.61 682.486 L1497.05 682.486 L1496.49 682.486 L1495.93 682.486 L1495.37 682.486 L1494.81 682.486 L1494.25 682.486 L1493.69 682.486 L1493.13 682.486 L1492.57 682.486 L1492.01 682.486 L1491.45 682.486 L1490.89 682.486 L1490.34 682.486 L1489.78 682.486 L1489.22 682.486 L1488.66 682.486 L1488.1 682.486 L1487.54 682.486 L1486.98 682.486 L1486.42 682.486 L1485.86 682.486 L1485.3 682.486 L1484.74 682.486 L1484.18 682.486 L1483.62 682.486 L1483.07 682.486 L1482.51 682.486 L1481.95 682.486 L1481.39 682.486 L1480.83 682.486 L1480.27 682.486 L1479.71 682.486 L1479.15 682.486 L1478.59 682.486 L1478.03 682.486 L1477.47 682.486 L1476.91 682.486 L1476.35 682.486 L1475.79 682.486 L1475.24 682.486 L1474.68 682.486 L1474.12 682.486 L1473.56 682.486 L1473 682.486 L1472.44 682.486 L1471.88 682.486 L1471.32 682.486 L1470.76 682.486 L1470.2 682.486 L1469.64 682.486 L1469.08 682.486 L1468.52 682.486 L1467.97 682.486 L1467.41 682.486 L1466.85 682.486 L1466.29 682.486 L1465.73 682.486 L1465.17 682.486 L1464.61 682.486 L1464.05 682.486 L1463.49 682.486 L1462.93 682.486 L1462.37 682.486 L1461.81 682.486 L1461.25 682.486 L1460.7 682.486 L1460.14 682.486 L1459.58 682.486 L1459.02 682.486 L1458.46 682.486 L1457.9 682.486 L1457.34 682.486 L1456.78 682.486 L1456.22 682.486 L1455.66 682.486 L1455.1 682.486 L1454.54 682.486 L1453.98 682.486 L1453.42 682.486 L1452.87 682.486 L1452.31 682.486 L1451.75 682.486 L1451.19 682.486 L1450.63 682.486 L1450.07 682.486 L1449.51 682.486 L1448.95 682.486 L1448.39 682.486 L1447.83 682.486 L1447.27 682.486 L1446.71 682.486 L1446.15 682.486 L1445.6 682.486 L1445.04 682.486 L1444.48 682.486 L1443.92 682.486 L1443.36 682.486 L1442.8 682.486 L1442.24 682.486 L1441.68 682.486 L1441.12 682.486 L1440.56 682.486 L1440 682.486 L1439.44 682.486 L1438.88 682.486 L1438.33 682.486 L1437.77 682.486 L1437.21 682.486 L1436.65 682.486 L1436.09 682.486 L1435.53 682.486 L1434.97 682.486 L1434.41 682.486 L1433.85 682.486 L1433.29 682.486 L1432.73 682.486 L1432.17 682.486 L1431.61 682.486 L1431.05 682.486 L1430.5 682.486 L1429.94 682.486 L1429.38 682.486 L1428.82 682.486 L1428.26 682.486 L1427.7 682.486 L1427.14 682.486 L1426.58 682.486 L1426.02 682.486 L1425.46 682.486 L1424.9 682.486 L1424.34 682.486 L1423.78 682.486 L1423.23 682.486 L1422.67 682.486 L1422.11 682.486 L1421.55 682.486 L1420.99 682.486 L1420.43 682.486 L1419.87 682.486 L1419.31 682.486 L1418.75 682.486 L1418.19 682.486 L1417.63 682.486 L1417.07 682.486 L1416.51 682.486 L1415.95 682.486 L1415.4 682.486 L1414.84 682.486 L1414.28 682.486 L1413.72 682.486 L1413.16 682.486 L1412.6 682.486 L1412.04 682.486 L1411.48 682.486 L1410.92 682.486 L1410.36 682.486 L1409.8 682.486 L1409.24 682.486 L1408.68 682.486 L1408.13 682.486 L1407.57 682.486 L1407.01 682.486 L1406.45 682.486 L1405.89 682.486 L1405.33 682.486 L1404.77 682.486 L1404.21 682.486 L1403.65 682.486 L1403.09 682.486 L1402.53 682.486 L1401.97 682.486 L1401.41 682.486 L1400.86 682.486 L1400.3 682.486 L1399.74 682.486 L1399.18 682.486 L1398.62 682.486 L1398.06 682.486 L1397.5 682.486 L1396.94 682.486 L1396.38 682.486 L1395.82 682.486 L1395.26 682.486 L1394.7 682.486 L1394.14 682.486 L1393.58 682.486 L1393.03 682.486 L1392.47 682.486 L1391.91 682.486 L1391.35 682.486 L1390.79 682.486 L1390.23 682.486 L1389.67 682.486 L1389.11 682.486 L1388.55 682.486 L1387.99 682.486 L1387.43 682.486 L1386.87 682.486 L1386.31 682.486 L1385.76 682.486 L1385.2 682.486 L1384.64 682.486 L1384.08 682.486 L1383.52 682.486 L1382.96 682.486 L1382.4 682.486 L1381.84 682.486 L1381.28 682.486 L1380.72 682.486 L1380.16 682.486 L1379.6 682.486 L1379.04 682.486 L1378.49 682.486 L1377.93 682.486 L1377.37 682.486 L1376.81 682.486 L1376.25 682.486 L1375.69 682.486 L1375.13 682.486 L1374.57 682.486 L1374.01 682.486 L1373.45 682.486 L1372.89 682.486 L1372.33 682.486 L1371.77 682.486 L1371.21 682.486 L1370.66 682.486 L1370.1 682.486 L1369.54 682.486 L1368.98 682.486 L1368.42 682.486 L1367.86 682.486 L1367.3 682.486 L1366.74 682.486 L1366.18 682.486 L1365.62 682.486 L1365.06 682.486 L1364.5 682.486 L1363.94 682.486 L1363.39 682.486 L1362.83 682.486 L1362.27 682.486 L1361.71 682.486 L1361.15 682.486 L1360.59 682.486 L1360.03 682.486 L1359.47 682.486 L1358.91 682.486 L1358.35 682.486 L1357.79 682.486 L1357.23 682.486 L1356.67 682.486 L1356.12 682.486 L1355.56 682.486 L1355 682.486 L1354.44 682.486 L1353.88 682.486 L1353.32 682.486 L1352.76 682.486 L1352.2 682.486 L1351.64 682.486 L1351.08 682.486 L1350.52 682.486 L1349.96 682.486 L1349.4 682.486 L1348.84 682.486 L1348.29 682.486 L1347.73 682.486 L1347.17 682.486 L1346.61 682.486 L1346.05 682.486 L1345.49 682.486 L1344.93 682.486 L1344.37 682.486 L1343.81 682.486 L1343.25 682.486 L1342.69 682.486 L1342.13 682.486 L1341.57 682.486 L1341.02 682.486 L1340.46 682.486 L1339.9 682.486 L1339.34 682.486 L1338.78 682.486 L1338.22 682.486 L1337.66 682.486 L1337.1 682.486 L1336.54 682.486 L1335.98 682.486 L1335.42 682.486 L1334.86 682.486 L1334.3 682.486 L1333.75 682.486 L1333.19 682.486 L1332.63 682.486 L1332.07 682.486 L1331.51 682.486 L1330.95 682.486 L1330.39 682.486 L1329.83 682.486 L1329.27 682.486 L1328.71 682.486 L1328.15 682.486 L1327.59 682.486 L1327.03 682.486 L1326.47 682.486 L1325.92 682.486 L1325.36 682.486 L1324.8 682.486 L1324.24 682.486 L1323.68 682.486 L1323.12 682.486 L1322.56 682.486 L1322 682.486 L1321.44 682.486 L1320.88 682.486 L1320.32 682.486 L1319.76 682.486 L1319.2 682.486 L1318.65 682.486 L1318.09 682.486 L1317.53 682.486 L1316.97 682.486 L1316.41 682.486 L1315.85 682.486 L1315.29 682.486 L1314.73 682.486 L1314.17 682.486 L1313.61 682.486 L1313.05 682.486 L1312.49 682.486 L1311.93 682.486 L1311.38 682.486 L1310.82 682.486 L1310.26 682.486 L1309.7 682.486 L1309.14 682.486 L1308.58 682.486 L1308.02 682.486 L1307.46 682.486 L1306.9 682.486 L1306.34 682.486 L1305.78 682.486 L1305.22 682.486 L1304.66 682.486 L1304.1 682.486 L1303.55 682.486 L1302.99 682.486 L1302.43 682.486 L1301.87 682.486 L1301.31 682.486 L1300.75 682.486 L1300.19 682.486 L1299.63 682.486 L1299.07 682.486 L1298.51 682.486 L1297.95 682.486 L1297.39 682.486 L1296.83 682.486 L1296.28 682.486 L1295.72 682.486 L1295.16 682.486 L1294.6 682.486 L1294.04 682.486 L1293.48 682.486 L1292.92 682.486 L1292.36 682.486 L1291.8 682.486 L1291.24 682.486 L1290.68 682.486 L1290.12 682.486 L1289.56 682.486 L1289 682.486 L1288.45 682.486 L1287.89 682.486 L1287.33 682.486 L1286.77 682.486 L1286.21 682.486 L1285.65 682.486 L1285.09 682.486 L1284.53 682.486 L1283.97 682.486 L1283.41 682.486 L1282.85 682.486 L1282.29 682.486 L1281.73 682.486 L1281.18 682.486 L1280.62 682.486 L1280.06 682.486 L1279.5 682.486 L1278.94 682.486 L1278.38 682.486 L1277.82 682.486 L1277.26 682.486 L1276.7 682.486 L1276.14 682.486 L1275.58 682.486 L1275.02 682.486 L1274.46 682.486 L1273.91 682.486 L1273.35 682.486 L1272.79 682.486 L1272.23 682.486 L1271.67 682.486 L1271.11 682.486 L1270.55 682.486 L1269.99 682.486 L1269.43 682.486 L1268.87 682.486 L1268.31 682.486 L1267.75 682.486 L1267.19 682.486 L1266.63 682.486 L1266.08 682.486 L1265.52 682.486 L1264.96 682.486 L1264.4 682.486 L1263.84 682.486 L1263.28 682.486 L1262.72 682.486 L1262.16 682.486 L1261.6 682.486 L1261.04 682.486 L1260.48 682.486 L1259.92 682.486 L1259.36 682.486 L1258.81 682.486 L1258.25 682.486 L1257.69 682.486 L1257.13 682.486 L1256.57 682.486 L1256.01 682.486 L1255.45 682.486 L1254.89 682.486 L1254.33 682.486 L1253.77 682.486 L1253.21 682.486 L1252.65 682.486 L1252.09 682.486 L1251.54 682.486 L1250.98 682.486 L1250.42 682.486 L1249.86 682.486 L1249.3 682.486 L1248.74 682.486 L1248.18 682.486 L1247.62 682.486 L1247.06 682.486 L1246.5 682.486 L1245.94 682.486 L1245.38 682.486 L1244.82 682.486 L1244.26 682.486 L1243.71 682.486 L1243.15 682.486 L1242.59 682.486 L1242.03 682.486 L1241.47 682.486 L1240.91 682.486 L1240.35 682.486 L1239.79 682.486 L1239.23 682.486 L1238.67 682.486 L1238.11 682.486 L1237.55 682.486 L1236.99 682.486 L1236.44 682.486 L1235.88 682.486 L1235.32 682.486 L1234.76 682.486 L1234.2 682.486 L1233.64 682.486 L1233.08 682.486 L1232.52 682.486 L1231.96 682.486 L1231.4 682.486 L1230.84 682.486 L1230.28 682.486 L1229.72 682.486 L1229.17 682.486 L1228.61 682.486 L1228.05 682.486 L1227.49 682.486 L1226.93 682.486 L1226.37 682.486 L1225.81 682.486 L1225.25 682.486 L1224.69 682.486 L1224.13 682.486 L1223.57 682.486 L1223.01 682.486 L1222.45 682.486 L1221.89 682.486 L1221.34 682.486 L1220.78 682.486 L1220.22 682.486 L1219.66 682.486 L1219.1 682.486 L1218.54 682.486 L1217.98 682.486 L1217.42 682.486 L1216.86 682.486 L1216.3 682.486 L1215.74 682.486 L1215.18 682.486 L1214.62 682.486 L1214.07 682.486 L1213.51 682.486 L1212.95 682.486 L1212.39 682.486 L1211.83 682.486 L1211.27 682.486 L1210.71 682.486 L1210.15 682.486 L1209.59 682.486 L1209.03 682.486 L1208.47 682.486 L1207.91 682.486 L1207.35 682.486 L1206.8 682.486 L1206.24 682.486 L1205.68 682.486 L1205.12 682.486 L1204.56 682.486 L1204 682.486 L1203.44 682.486 L1202.88 682.486 L1202.32 682.486 L1201.76 682.486 L1201.2 682.486 L1200.64 682.486 L1200.08 682.486 L1199.52 682.486 L1198.97 682.486 L1198.41 682.486 L1197.85 682.486 L1197.29 682.486 L1196.73 682.486 L1196.17 682.486 L1195.61 682.486 L1195.05 682.486 L1194.49 682.486 L1193.93 682.486 L1193.37 682.486 L1192.81 682.486 L1192.25 682.486 L1191.7 682.486 L1191.14 682.486 L1190.58 682.486 L1190.02 682.486 L1189.46 682.486 L1188.9 682.486 L1188.34 682.486 L1187.78 682.486 L1187.22 682.486 L1186.66 682.486 L1186.1 682.486 L1185.54 682.486 L1184.98 682.486 L1184.43 682.486 L1183.87 682.486 L1183.31 682.486 L1182.75 682.486 L1182.19 682.486 L1181.63 682.486 L1181.07 682.486 L1180.51 682.486 L1179.95 682.486 L1179.39 682.486 L1178.83 682.486 L1178.27 682.486 L1177.71 682.486 L1177.15 682.486 L1176.6 682.486 L1176.04 682.486 L1175.48 682.486 L1174.92 682.486 L1174.36 682.486 L1173.8 682.486 L1173.24 682.486 L1172.68 682.486 L1172.12 682.486 L1171.56 682.486 L1171 682.486 L1170.44 682.486 L1169.88 682.486 L1169.33 682.486 L1168.77 682.486 L1168.21 682.486 L1167.65 682.486 L1167.09 682.486 L1166.53 682.486 L1165.97 682.486 L1165.41 682.486 L1164.85 682.486 L1164.29 682.486 L1163.73 682.486 L1163.17 682.486 L1162.61 682.486 L1162.05 682.486 L1161.5 682.486 L1160.94 682.486 L1160.38 682.486 L1159.82 682.486 L1159.26 682.486 L1158.7 682.486 L1158.14 682.486 L1157.58 682.486 L1157.02 682.486 L1156.46 682.486 L1155.9 682.486 L1155.34 682.486 L1154.78 682.486 L1154.23 682.486 L1153.67 682.486 L1153.11 682.486 L1152.55 682.486 L1151.99 682.486 L1151.43 682.486 L1150.87 682.486 L1150.31 682.486 L1149.75 682.486 L1149.19 682.486 L1148.63 682.486 L1148.07 682.486 L1147.51 682.486 L1146.96 682.486 L1146.4 682.486 L1145.84 682.486 L1145.28 682.486 L1144.72 682.486 L1144.16 682.486 L1143.6 682.486 L1143.04 682.486 L1142.48 682.486 L1141.92 682.486 L1141.36 682.486 L1140.8 682.486 L1140.24 682.486 L1139.68 682.486 L1139.13 682.486 L1138.57 682.486 L1138.01 682.486 L1137.45 682.486 L1136.89 682.486 L1136.33 682.486 L1135.77 682.486 L1135.21 682.486 L1134.65 682.486 L1134.09 682.486 L1133.53 682.486 L1132.97 682.486 L1132.41 682.486 L1131.86 682.486 L1131.3 682.486 L1130.74 682.486 L1130.18 682.486 L1129.62 682.486 L1129.06 682.486 L1128.5 682.486 L1127.94 682.486 L1127.38 682.486 L1126.82 682.486 L1126.26 682.486 L1125.7 682.486 L1125.14 682.486 L1124.59 682.486 L1124.03 682.486 L1123.47 682.486 L1122.91 682.486 L1122.35 682.486 L1121.79 682.486 L1121.23 682.486 L1120.67 682.486 L1120.11 682.486 L1119.55 682.486 L1118.99 682.486 L1118.43 682.486 L1117.87 682.486 L1117.31 682.486 L1116.76 682.486 L1116.2 682.486 L1115.64 682.486 L1115.08 682.486 L1114.52 682.486 L1113.96 682.486 L1113.4 682.486 L1112.84 682.486 L1112.28 682.486 L1111.72 682.486 L1111.16 682.486 L1110.6 682.486 L1110.04 682.486 L1109.49 682.486 L1108.93 682.486 L1108.37 682.486 L1107.81 682.486 L1107.25 682.486 L1106.69 682.486 L1106.13 682.486 L1105.57 682.486 L1105.01 682.486 L1104.45 682.486 L1103.89 682.486 L1103.33 682.486 L1102.77 682.486 L1102.22 682.486 L1101.66 682.486 L1101.1 682.486 L1100.54 682.486 L1099.98 682.486 L1099.42 682.486 L1098.86 682.486 L1098.3 682.486 L1097.74 682.486 L1097.18 682.486 L1096.62 682.486 L1096.06 682.486 L1095.5 682.486 L1094.94 682.486 L1094.39 682.486 L1093.83 682.486 L1093.27 682.486 L1092.71 682.486 L1092.15 682.486 L1091.59 682.486 L1091.03 682.486 L1090.47 682.486 L1089.91 682.486 L1089.35 682.486 L1088.79 682.486 L1088.23 682.486 L1087.67 682.486 L1087.12 682.486 L1086.56 682.486 L1086 682.486 L1085.44 682.486 L1084.88 682.486 L1084.32 682.486 L1083.76 682.486 L1083.2 682.486 L1082.64 682.486 L1082.08 682.486 L1081.52 682.486 L1080.96 682.486 L1080.4 682.486 L1079.85 682.486 L1079.29 682.486 L1078.73 682.486 L1078.17 682.486 L1077.61 682.486 L1077.05 682.486 L1076.49 682.486 L1075.93 682.486 L1075.37 682.486 L1074.81 682.486 L1074.25 682.486 L1073.69 682.486 L1073.13 682.486 L1072.57 682.486 L1072.02 682.486 L1071.46 682.486 L1070.9 682.486 L1070.34 682.486 L1069.78 682.486 L1069.22 682.486 L1068.66 682.486 L1068.1 682.486 L1067.54 682.486 L1066.98 682.486 L1066.42 682.486 L1065.86 682.486 L1065.3 682.486 L1064.75 682.486 L1064.19 682.486 L1063.63 682.486 L1063.07 682.486 L1062.51 682.486 L1061.95 682.486 L1061.39 682.486 L1060.83 682.486 L1060.27 682.486 L1059.71 682.486 L1059.15 682.486 L1058.59 682.486 L1058.03 682.486 L1057.48 682.486 L1056.92 682.486 L1056.36 682.486 L1055.8 682.486 L1055.24 682.486 L1054.68 682.486 L1054.12 682.486 L1053.56 682.486 L1053 682.486 L1052.44 682.486 L1051.88 682.486 L1051.32 682.486 L1050.76 682.486 L1050.2 682.486 L1049.65 682.486 L1049.09 682.486 L1048.53 682.486 L1047.97 682.486 L1047.41 682.486 L1046.85 682.486 L1046.29 682.486 L1045.73 682.486 L1045.17 682.486 L1044.61 682.486 L1044.05 682.486 L1043.49 682.486 L1042.93 682.486 L1042.38 682.486 L1041.82 682.486 L1041.26 682.486 L1040.7 682.486 L1040.14 682.486 L1039.58 682.486 L1039.02 682.486 L1038.46 682.486 L1037.9 682.486 L1037.34 682.486 L1036.78 682.486 L1036.22 682.486 L1035.66 682.486 L1035.1 682.486 L1034.55 682.486 L1033.99 682.486 L1033.43 682.486 L1032.87 682.486 L1032.31 682.486 L1031.75 682.486 L1031.19 682.486 L1030.63 682.486 L1030.07 682.486 L1029.51 682.486 L1028.95 682.486 L1028.39 682.486 L1027.83 682.486 L1027.28 682.486 L1026.72 682.486 L1026.16 682.486 L1025.6 682.486 L1025.04 682.486 L1024.48 682.486 L1023.92 682.486 L1023.36 682.486 L1022.8 682.486 L1022.24 682.486 L1021.68 682.486 L1021.12 682.486 L1020.56 682.486 L1020.01 682.486 L1019.45 682.486 L1018.89 682.486 L1018.33 682.486 L1017.77 682.486 L1017.21 682.486 L1016.65 682.486 L1016.09 682.486 L1015.53 682.486 L1014.97 682.486 L1014.41 682.486 L1013.85 682.486 L1013.29 682.486 L1012.73 682.486 L1012.18 682.486 L1011.62 682.486 L1011.06 682.486 L1010.5 682.486 L1009.94 682.486 L1009.38 682.486 L1008.82 682.486 L1008.26 682.486 L1007.7 682.486 L1007.14 682.486 L1006.58 682.486 L1006.02 682.486 L1005.46 682.486 L1004.91 682.486 L1004.35 682.486 L1003.79 682.486 L1003.23 682.486 L1002.67 682.486 L1002.11 682.486 L1001.55 682.486 L1000.99 682.486 L1000.43 682.486 L999.872 682.486 L999.313 682.486 L998.754 682.486 L998.194 682.486 L997.635 682.486 L997.076 682.486 L996.517 682.486 L995.957 682.486 L995.398 682.486 L994.839 682.486 L994.28 682.486 L993.72 682.486 L993.161 682.486 L992.602 682.486 L992.043 682.486 L991.483 682.486 L990.924 682.486 L990.365 682.486 L989.806 682.486 L989.246 682.486 L988.687 682.486 L988.128 682.486 L987.569 682.486 L987.009 682.486 L986.45 682.486 L985.891 682.486 L985.332 682.486 L984.772 682.486 L984.213 682.486 L983.654 682.486 L983.095 682.486 L982.535 682.486 L981.976 682.486 L981.417 682.486 L980.858 682.486 L980.298 682.486 L979.739 682.486 L979.18 682.486 L978.621 682.486 L978.061 682.486 L977.502 682.486 L976.943 682.486 L976.384 682.486 L975.824 682.486 L975.265 682.486 L974.706 682.486 L974.147 682.486 L973.587 682.486 L973.028 682.486 L972.469 682.486 L971.91 682.486 L971.35 682.486 L970.791 682.486 L970.232 682.486 L969.673 682.486 L969.113 682.486 L968.554 682.486 L967.995 682.486 L967.436 682.486 L966.876 682.486 L966.317 682.486 L965.758 682.486 L965.199 682.486 L964.639 682.486 L964.08 682.486 L963.521 682.486 L962.962 682.486 L962.402 682.486 L961.843 682.486 L961.284 682.486 L960.725 682.486 L960.165 682.486 L959.606 682.486 L959.047 682.486 L958.488 682.486 L957.928 682.486 L957.369 682.486 L956.81 682.486 L956.251 682.486 L955.691 682.486 L955.132 682.486 L954.573 682.486 L954.014 682.486 L953.454 682.486 L952.895 682.486 L952.336 682.486 L951.777 682.486 L951.217 682.486 L950.658 682.486 L950.099 682.486 L949.54 682.486 L948.98 682.486 L948.421 682.486 L947.862 682.486 L947.303 682.486 L946.743 682.486 L946.184 682.486 L945.625 682.486 L945.066 682.486 L944.506 682.486 L943.947 682.486 L943.388 682.486 L942.829 682.486 L942.269 682.486 L941.71 682.486 L941.151 682.486 L940.592 682.486 L940.032 682.486 L939.473 682.486 L938.914 682.486 L938.355 682.486 L937.795 682.486 L937.236 682.486 L936.677 682.486 L936.118 682.486 L935.558 682.486 L934.999 682.486 L934.44 682.486 L933.881 682.486 L933.321 682.486 L932.762 682.486 L932.203 682.486 L931.644 682.486 L931.084 682.486 L930.525 682.486 L929.966 682.486 L929.406 682.486 L928.847 682.486 L928.288 682.486 L927.729 682.486 L927.169 682.486 L926.61 682.486 L926.051 682.486 L925.492 682.486 L924.932 682.486 L924.373 682.486 L923.814 682.486 L923.255 682.486 L922.695 682.486 L922.136 682.486 L921.577 682.486 L921.018 682.486 L920.458 682.486 L919.899 682.486 L919.34 682.486 L918.781 682.486 L918.221 682.486 L917.662 682.486 L917.103 682.486 L916.544 682.486 L915.984 682.486 L915.425 682.486 L914.866 682.486 L914.307 682.486 L913.747 682.486 L913.188 682.486 L912.629 682.486 L912.07 682.486 L911.51 682.486 L910.951 682.486 L910.392 682.486 L909.833 682.486 L909.273 682.486 L908.714 682.486 L908.155 682.486 L907.596 682.486 L907.036 682.486 L906.477 682.486 L905.918 682.486 L905.359 682.486 L904.799 682.486 L904.24 682.486 L903.681 682.486 L903.122 682.486 L902.562 682.486 L902.003 682.486 L901.444 682.486 L900.885 682.486 L900.325 682.486 L899.766 682.486 L899.207 682.486 L898.648 682.486 L898.088 682.486 L897.529 682.486 L896.97 682.486 L896.411 682.486 L895.851 682.486 L895.292 682.486 L894.733 682.486 L894.174 682.486 L893.614 682.486 L893.055 682.486 L892.496 682.486 L891.937 682.486 L891.377 682.486 L890.818 682.486 L890.259 682.486 L889.7 682.486 L889.14 682.486 L888.581 682.486 L888.022 682.486 L887.463 682.486 L886.903 682.486 L886.344 682.486 L885.785 682.486 L885.226 682.486 L884.666 682.486 L884.107 682.486 L883.548 682.486 L882.989 682.486 L882.429 682.486 L881.87 682.486 L881.311 682.486 L880.752 682.486 L880.192 682.486 L879.633 682.486 L879.074 682.486 L878.515 682.486 L877.955 682.486 L877.396 682.486 L876.837 682.486 L876.278 682.486 L875.718 682.486 L875.159 682.486 L874.6 682.486 L874.041 682.486 L873.481 682.486 L872.922 682.486 L872.363 682.486 L871.804 682.486 L871.244 682.486 L870.685 682.486 L870.126 682.486 L869.567 682.486 L869.007 682.486 L868.448 682.486 L867.889 682.486 L867.33 682.486 L866.77 682.486 L866.211 682.486 L865.652 682.486 L865.093 682.486 L864.533 682.486 L863.974 682.486 L863.415 682.486 L862.856 682.486 L862.296 682.486 L861.737 682.486 L861.178 682.486 L860.619 682.486 L860.059 682.486 L859.5 682.486 L858.941 682.486 L858.382 682.486 L857.822 682.486 L857.263 682.486 L856.704 682.486 L856.145 682.486 L855.585 682.486 L855.026 682.486 L854.467 682.486 L853.908 682.486 L853.348 682.486 L852.789 682.486 L852.23 682.486 L851.671 682.486 L851.111 682.486 L850.552 682.486 L849.993 682.486 L849.434 682.486 L848.874 682.486 L848.315 682.486 L847.756 682.486 L847.197 682.486 L846.637 682.486 L846.078 682.486 L845.519 682.486 L844.96 682.486 L844.4 682.486 L843.841 682.486 L843.282 682.486 L842.723 682.486 L842.163 682.486 L841.604 682.486 L841.045 682.486 L840.486 682.486 L839.926 682.486 L839.367 682.486 L838.808 682.486 L838.249 682.486 L837.689 682.486 L837.13 682.486 L836.571 682.486 L836.012 682.486 L835.452 682.486 L834.893 682.486 L834.334 682.486 L833.775 682.486 L833.215 682.486 L832.656 682.486 L832.097 682.486 L831.538 682.486 L830.978 682.486 L830.419 682.486 L829.86 682.486 L829.301 682.486 L828.741 682.486 L828.182 682.486 L827.623 682.486 L827.064 682.486 L826.504 682.486 L825.945 682.486 L825.386 682.486 L824.827 682.486 L824.267 682.486 L823.708 682.486 L823.149 682.486 L822.59 682.486 L822.03 682.486 L821.471 682.486 L820.912 682.486 L820.353 682.486 L819.793 682.486 L819.234 682.486 L818.675 682.486 L818.116 682.486 L817.556 682.486 L816.997 682.486 L816.438 682.486 L815.879 682.486 L815.319 682.486 L814.76 682.486 L814.201 682.486 L813.642 682.486 L813.082 682.486 L812.523 682.486 L811.964 682.486 L811.405 682.486 L810.845 682.486 L810.286 682.486 L809.727 682.486 L809.168 682.486 L808.608 682.486 L808.049 682.486 L807.49 682.486 L806.931 682.486 L806.371 682.486 L805.812 682.486 L805.253 682.486 L804.693 682.486 L804.134 682.486 L803.575 682.486 L803.016 682.486 L802.456 682.486 L801.897 682.486 L801.338 682.486 L800.779 682.486 L800.219 682.486 L799.66 682.486 L799.101 682.486 L798.542 682.486 L797.982 682.486 L797.423 682.486 L796.864 682.486 L796.305 682.486 L795.745 682.486 L795.186 682.486 L794.627 682.486 L794.068 682.486 L793.508 682.486 L792.949 682.486 L792.39 682.486 L791.831 682.486 L791.271 682.486 L790.712 682.486 L790.153 682.486 L789.594 682.486 L789.034 682.486 L788.475 682.486 L787.916 682.486 L787.357 682.486 L786.797 682.486 L786.238 682.486 L785.679 682.486 L785.12 682.486 L784.56 682.486 L784.001 682.486 L783.442 682.486 L782.883 682.486 L782.323 682.486 L781.764 682.486 L781.205 682.486 L780.646 682.486 L780.086 682.486 L779.527 682.486 L778.968 682.486 L778.409 682.486 L777.849 682.486 L777.29 682.486 L776.731 682.486 L776.172 682.486 L775.612 682.486 L775.053 682.486 L774.494 682.486 L773.935 682.486 L773.375 682.486 L772.816 682.486 L772.257 682.486 L771.698 682.486 L771.138 682.486 L770.579 682.486 L770.02 682.486 L769.461 682.486 L768.901 682.486 L768.342 682.486 L767.783 682.486 L767.224 682.486 L766.664 682.486 L766.105 682.486 L765.546 682.486 L764.987 682.486 L764.427 682.486 L763.868 682.486 L763.309 682.486 L762.75 682.486 L762.19 682.486 L761.631 682.486 L761.072 682.486 L760.513 682.486 L759.953 682.486 L759.394 682.486 L758.835 682.486 L758.276 682.486 L757.716 682.486 L757.157 682.486 L756.598 682.486 L756.039 682.486 L755.479 682.486 L754.92 682.486 L754.361 682.486 L753.802 682.486 L753.242 682.486 L752.683 682.486 L752.124 682.486 L751.565 682.486 L751.005 682.486 L750.446 682.486 L749.887 682.486 L749.328 682.486 L748.768 682.486 L748.209 682.486 L747.65 682.486 L747.091 682.486 L746.531 682.486 L745.972 682.486 L745.413 682.486 L744.854 682.486 L744.294 682.486 L743.735 682.486 L743.176 682.486 L742.617 682.486 L742.057 682.486 L741.498 682.486 L740.939 682.486 L740.38 682.486 L739.82 682.486 L739.261 682.486 L738.702 682.486 L738.143 682.486 L737.583 682.486 L737.024 682.486 L736.465 682.486 L735.906 682.486 L735.346 682.486 L734.787 682.486 L734.228 682.486 L733.669 682.486 L733.109 682.486 L732.55 682.486 L731.991 682.486 L731.432 682.486 L730.872 682.486 L730.313 682.486 L729.754 682.486 L729.195 682.486 L728.635 682.486 L728.076 682.486 L727.517 682.486 L726.958 682.486 L726.398 682.486 L725.839 682.486 L725.28 682.486 L724.721 682.486 L724.161 682.486 L723.602 682.486 L723.043 682.486 L722.484 682.486 L721.924 682.486 L721.365 682.486 L720.806 682.486 L720.247 682.486  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.438 720.806,683.438 721.365,683.438 721.924,683.438 722.484,683.438 723.043,683.438 723.602,683.438 724.161,683.438 724.721,683.438 725.28,683.438 725.839,683.438 726.398,683.438 726.958,683.438 727.517,683.438 728.076,683.438 728.635,683.438 729.195,683.438 729.754,683.438 730.313,683.438 730.872,683.438 731.432,683.438 731.991,683.438 732.55,683.438 733.109,683.438 733.669,683.438 734.228,683.438 734.787,683.438 735.346,683.438 735.906,683.438 736.465,683.438 737.024,683.438 737.583,683.438 738.143,683.438 738.702,683.438 739.261,683.438 739.82,683.438 740.38,683.438 740.939,683.438 741.498,683.438 742.057,683.438 742.617,683.438 743.176,683.438 743.735,683.438 744.294,683.438 744.854,683.438 745.413,683.438 745.972,683.438 746.531,683.438 747.091,683.438 747.65,683.438 748.209,683.438 748.768,683.438 749.328,683.438 749.887,683.438 750.446,683.438 751.005,683.438 751.565,683.438 752.124,683.438 752.683,683.438 753.242,683.438 753.802,683.438 754.361,683.438 754.92,683.438 755.479,683.438 756.039,683.438 756.598,683.438 757.157,683.438 757.716,683.438 758.276,683.438 758.835,683.438 759.394,683.438 759.953,683.438 760.513,683.438 761.072,683.438 761.631,683.438 762.19,683.438 762.75,683.438 763.309,683.438 763.868,683.438 764.427,683.438 764.987,683.438 765.546,683.438 766.105,683.438 766.664,683.438 767.224,683.438 767.783,683.438 768.342,683.438 768.901,683.438 769.461,683.438 770.02,683.438 770.579,683.438 771.138,683.438 771.698,683.438 772.257,683.438 772.816,683.438 773.375,683.438 773.935,683.438 774.494,683.438 775.053,683.438 775.612,683.438 776.172,683.438 776.731,683.438 777.29,683.438 777.849,683.438 778.409,683.438 778.968,683.438 779.527,683.438 780.086,683.438 780.646,683.438 781.205,683.438 781.764,683.438 782.323,683.438 782.883,683.438 783.442,683.438 784.001,683.438 784.56,683.438 785.12,683.438 785.679,683.438 786.238,683.438 786.797,683.438 787.357,683.438 787.916,683.438 788.475,683.438 789.034,683.438 789.594,683.438 790.153,683.438 790.712,683.438 791.271,683.438 791.831,683.438 792.39,683.438 792.949,683.438 793.508,683.438 794.068,683.438 794.627,683.438 795.186,683.438 795.745,683.438 796.305,683.438 796.864,683.438 797.423,683.438 797.982,683.438 798.542,683.438 799.101,683.438 799.66,683.438 800.219,683.438 800.779,683.438 801.338,683.438 801.897,683.438 802.456,683.438 803.016,683.438 803.575,683.438 804.134,683.438 804.693,683.438 805.253,683.438 805.812,683.438 806.371,683.438 806.931,683.438 807.49,683.438 808.049,683.438 808.608,683.438 809.168,683.438 809.727,683.438 810.286,683.438 810.845,683.438 811.405,683.438 811.964,683.438 812.523,683.438 813.082,683.438 813.642,683.438 814.201,683.438 814.76,683.438 815.319,683.438 815.879,683.438 816.438,683.438 816.997,683.438 817.556,683.438 818.116,683.438 818.675,683.438 819.234,683.438 819.793,683.438 820.353,683.438 820.912,683.438 821.471,683.438 822.03,683.438 822.59,683.438 823.149,683.438 823.708,683.438 824.267,683.438 824.827,683.438 825.386,683.438 825.945,683.438 826.504,683.438 827.064,683.438 827.623,683.438 828.182,683.438 828.741,683.438 829.301,683.438 829.86,683.438 830.419,683.438 830.978,683.438 831.538,683.438 832.097,683.438 832.656,683.438 833.215,683.438 833.775,683.438 834.334,683.438 834.893,683.438 835.452,683.438 836.012,683.438 836.571,683.438 837.13,683.438 837.689,683.438 838.249,683.438 838.808,683.438 839.367,683.438 839.926,683.438 840.486,683.438 841.045,683.438 841.604,683.438 842.163,683.438 842.723,683.438 843.282,683.438 843.841,683.438 844.4,683.438 844.96,683.438 845.519,683.438 846.078,683.438 846.637,683.438 847.197,683.438 847.756,683.438 848.315,683.438 848.874,683.438 849.434,683.438 849.993,683.438 850.552,683.438 851.111,683.438 851.671,683.438 852.23,683.438 852.789,683.438 853.348,683.438 853.908,683.438 854.467,683.438 855.026,683.438 855.585,683.438 856.145,683.438 856.704,683.438 857.263,683.438 857.822,683.438 858.382,683.438 858.941,683.438 859.5,683.438 860.059,683.438 860.619,683.438 861.178,683.438 861.737,683.438 862.296,683.438 862.856,683.438 863.415,683.438 863.974,683.438 864.533,683.438 865.093,683.438 865.652,683.438 866.211,683.438 866.77,683.438 867.33,683.438 867.889,683.438 868.448,683.438 869.007,683.438 869.567,683.438 870.126,683.438 870.685,683.438 871.244,683.438 871.804,683.438 872.363,683.438 872.922,683.438 873.481,683.438 874.041,683.438 874.6,683.438 875.159,683.438 875.718,683.438 876.278,683.438 876.837,683.438 877.396,683.438 877.955,683.438 878.515,683.438 879.074,683.438 879.633,683.438 880.192,683.438 880.752,683.438 881.311,683.438 881.87,683.438 882.429,683.438 882.989,683.438 883.548,683.438 884.107,683.438 884.666,683.438 885.226,683.438 885.785,683.438 886.344,683.438 886.903,683.438 887.463,683.438 888.022,683.438 888.581,683.438 889.14,683.438 889.7,683.438 890.259,683.438 890.818,683.438 891.377,683.438 891.937,683.438 892.496,683.438 893.055,683.438 893.614,683.438 894.174,683.438 894.733,683.438 895.292,683.438 895.851,683.438 896.411,683.438 896.97,683.438 897.529,683.438 898.088,683.438 898.648,683.438 899.207,683.438 899.766,683.438 900.325,683.438 900.885,683.438 901.444,683.438 902.003,683.438 902.562,683.438 903.122,683.438 903.681,683.438 904.24,683.438 904.799,683.438 905.359,683.438 905.918,683.438 906.477,683.438 907.036,683.438 907.596,683.438 908.155,683.438 908.714,683.438 909.273,683.438 909.833,683.438 910.392,683.438 910.951,683.438 911.51,683.438 912.07,683.438 912.629,683.438 913.188,683.438 913.747,683.438 914.307,683.438 914.866,683.438 915.425,683.438 915.984,683.438 916.544,683.438 917.103,683.438 917.662,683.438 918.221,683.438 918.781,683.438 919.34,683.438 919.899,683.438 920.458,683.438 921.018,683.438 921.577,683.438 922.136,683.438 922.695,683.438 923.255,683.438 923.814,683.438 924.373,683.438 924.932,683.438 925.492,683.438 926.051,683.438 926.61,683.438 927.169,683.438 927.729,683.438 928.288,683.438 928.847,683.438 929.406,683.438 929.966,683.438 930.525,683.438 931.084,683.438 931.644,683.438 932.203,683.438 932.762,683.438 933.321,683.438 933.881,683.438 934.44,683.438 934.999,683.438 935.558,683.438 936.118,683.438 936.677,683.438 937.236,683.438 937.795,683.438 938.355,683.438 938.914,683.438 939.473,683.438 940.032,683.438 940.592,683.438 941.151,683.438 941.71,683.438 942.269,683.438 942.829,683.438 943.388,683.438 943.947,683.438 944.506,683.438 945.066,683.438 945.625,683.438 946.184,683.438 946.743,683.438 947.303,683.438 947.862,683.438 948.421,683.438 948.98,683.438 949.54,683.438 950.099,683.438 950.658,683.438 951.217,683.438 951.777,683.438 952.336,683.438 952.895,683.438 953.454,683.438 954.014,683.438 954.573,683.438 955.132,683.438 955.691,683.438 956.251,683.438 956.81,683.438 957.369,683.438 957.928,683.438 958.488,683.438 959.047,683.438 959.606,683.438 960.165,683.438 960.725,683.438 961.284,683.438 961.843,683.438 962.402,683.438 962.962,683.438 963.521,683.438 964.08,683.438 964.639,683.438 965.199,683.438 965.758,683.438 966.317,683.438 966.876,683.438 967.436,683.438 967.995,683.438 968.554,683.438 969.113,683.438 969.673,683.438 970.232,683.438 970.791,683.438 971.35,683.438 971.91,683.438 972.469,683.438 973.028,683.438 973.587,683.438 974.147,683.438 974.706,683.438 975.265,683.438 975.824,683.438 976.384,683.438 976.943,683.438 977.502,683.438 978.061,683.438 978.621,683.438 979.18,683.438 979.739,683.438 980.298,683.438 980.858,683.438 981.417,683.438 981.976,683.438 982.535,683.438 983.095,683.438 983.654,683.438 984.213,683.438 984.772,683.438 985.332,683.438 985.891,683.438 986.45,683.438 987.009,683.438 987.569,683.438 988.128,683.438 988.687,683.438 989.246,683.438 989.806,683.438 990.365,683.438 990.924,683.438 991.483,683.438 992.043,683.438 992.602,683.438 993.161,683.438 993.72,683.438 994.28,683.438 994.839,683.438 995.398,683.438 995.957,683.438 996.517,683.438 997.076,683.438 997.635,683.438 998.194,683.438 998.754,683.438 999.313,683.438 999.872,683.438 1000.43,683.438 1000.99,683.438 1001.55,683.438 1002.11,683.438 1002.67,683.438 1003.23,683.438 1003.79,683.438 1004.35,683.438 1004.91,683.438 1005.46,683.438 1006.02,683.438 1006.58,683.438 1007.14,683.438 1007.7,683.438 1008.26,683.438 1008.82,683.438 1009.38,683.438 1009.94,683.438 1010.5,683.438 1011.06,683.438 1011.62,683.438 1012.18,683.438 1012.73,683.438 1013.29,683.438 1013.85,683.438 1014.41,683.438 1014.97,683.438 1015.53,683.438 1016.09,683.438 1016.65,683.438 1017.21,683.438 1017.77,683.438 1018.33,683.438 1018.89,683.438 1019.45,683.438 1020.01,683.438 1020.56,683.438 1021.12,683.438 1021.68,683.438 1022.24,683.438 1022.8,683.438 1023.36,683.438 1023.92,683.438 1024.48,683.438 1025.04,683.438 1025.6,683.438 1026.16,683.438 1026.72,683.438 1027.28,683.438 1027.83,683.438 1028.39,683.438 1028.95,683.438 1029.51,683.438 1030.07,683.438 1030.63,683.438 1031.19,683.438 1031.75,683.438 1032.31,683.438 1032.87,683.438 1033.43,683.438 1033.99,683.438 1034.55,683.438 1035.1,683.438 1035.66,683.438 1036.22,683.438 1036.78,683.438 1037.34,683.438 1037.9,683.438 1038.46,683.438 1039.02,683.438 1039.58,683.438 1040.14,683.438 1040.7,683.438 1041.26,683.438 1041.82,683.438 1042.38,683.438 1042.93,683.438 1043.49,683.438 1044.05,683.438 1044.61,683.438 1045.17,683.438 1045.73,683.438 1046.29,683.438 1046.85,683.438 1047.41,683.438 1047.97,683.438 1048.53,683.438 1049.09,683.438 1049.65,683.438 1050.2,683.438 1050.76,683.438 1051.32,683.438 1051.88,683.438 1052.44,683.438 1053,683.438 1053.56,683.438 1054.12,683.438 1054.68,683.438 1055.24,683.438 1055.8,683.438 1056.36,683.438 1056.92,683.438 1057.48,683.438 1058.03,683.438 1058.59,683.438 1059.15,683.438 1059.71,683.438 1060.27,683.438 1060.83,683.438 1061.39,683.438 1061.95,683.438 1062.51,683.438 1063.07,683.438 1063.63,683.438 1064.19,683.438 1064.75,683.438 1065.3,683.438 1065.86,683.438 1066.42,683.438 1066.98,683.438 1067.54,683.438 1068.1,683.438 1068.66,683.438 1069.22,683.438 1069.78,683.438 1070.34,683.438 1070.9,683.438 1071.46,683.438 1072.02,683.438 1072.57,683.438 1073.13,683.438 1073.69,683.438 1074.25,683.438 1074.81,683.438 1075.37,683.438 1075.93,683.438 1076.49,683.438 1077.05,683.438 1077.61,683.438 1078.17,683.438 1078.73,683.438 1079.29,683.438 1079.85,683.438 1080.4,683.438 1080.96,683.438 1081.52,683.438 1082.08,683.438 1082.64,683.438 1083.2,683.438 1083.76,683.438 1084.32,683.438 1084.88,683.438 1085.44,683.438 1086,683.438 1086.56,683.438 1087.12,683.438 1087.67,683.438 1088.23,683.438 1088.79,683.438 1089.35,683.438 1089.91,683.438 1090.47,683.438 1091.03,683.438 1091.59,683.438 1092.15,683.438 1092.71,683.438 1093.27,683.438 1093.83,683.438 1094.39,683.438 1094.94,683.438 1095.5,683.438 1096.06,683.438 1096.62,683.438 1097.18,683.438 1097.74,683.438 1098.3,683.438 1098.86,683.438 1099.42,683.438 1099.98,683.438 1100.54,683.438 1101.1,683.438 1101.66,683.438 1102.22,683.438 1102.77,683.438 1103.33,683.438 1103.89,683.438 1104.45,683.438 1105.01,683.438 1105.57,683.438 1106.13,683.438 1106.69,683.438 1107.25,683.438 1107.81,683.438 1108.37,683.438 1108.93,683.438 1109.49,683.438 1110.04,683.438 1110.6,683.438 1111.16,683.438 1111.72,683.438 1112.28,683.438 1112.84,683.438 1113.4,683.438 1113.96,683.438 1114.52,683.438 1115.08,683.438 1115.64,683.438 1116.2,683.438 1116.76,683.438 1117.31,683.438 1117.87,683.438 1118.43,683.438 1118.99,683.438 1119.55,683.438 1120.11,683.438 1120.67,683.438 1121.23,683.438 1121.79,683.438 1122.35,683.438 1122.91,683.438 1123.47,683.438 1124.03,683.438 1124.59,683.438 1125.14,683.438 1125.7,683.438 1126.26,683.438 1126.82,683.438 1127.38,683.438 1127.94,683.438 1128.5,683.438 1129.06,683.438 1129.62,683.438 1130.18,683.438 1130.74,683.438 1131.3,683.438 1131.86,683.438 1132.41,683.438 1132.97,683.438 1133.53,683.438 1134.09,683.438 1134.65,683.438 1135.21,683.438 1135.77,683.438 1136.33,683.438 1136.89,683.438 1137.45,683.438 1138.01,683.438 1138.57,683.438 1139.13,683.438 1139.68,683.438 1140.24,683.438 1140.8,683.438 1141.36,683.438 1141.92,683.438 1142.48,683.438 1143.04,683.438 1143.6,683.438 1144.16,683.438 1144.72,683.438 1145.28,683.438 1145.84,683.438 1146.4,683.438 1146.96,683.438 1147.51,683.438 1148.07,683.438 1148.63,683.438 1149.19,683.438 1149.75,683.438 1150.31,683.438 1150.87,683.438 1151.43,683.438 1151.99,683.438 1152.55,683.438 1153.11,683.438 1153.67,683.438 1154.23,683.438 1154.78,683.438 1155.34,683.438 1155.9,683.438 1156.46,683.438 1157.02,683.438 1157.58,683.438 1158.14,683.438 1158.7,683.438 1159.26,683.438 1159.82,683.438 1160.38,683.438 1160.94,683.438 1161.5,683.438 1162.05,683.438 1162.61,683.438 1163.17,683.438 1163.73,683.438 1164.29,683.438 1164.85,683.438 1165.41,683.438 1165.97,683.438 1166.53,683.438 1167.09,683.438 1167.65,683.438 1168.21,683.438 1168.77,683.438 1169.33,683.438 1169.88,683.438 1170.44,683.438 1171,683.438 1171.56,683.438 1172.12,683.438 1172.68,683.438 1173.24,683.438 1173.8,683.438 1174.36,683.438 1174.92,683.438 1175.48,683.438 1176.04,683.438 1176.6,683.438 1177.15,683.438 1177.71,683.438 1178.27,683.438 1178.83,683.438 1179.39,683.438 1179.95,683.438 1180.51,683.438 1181.07,683.438 1181.63,683.438 1182.19,683.438 1182.75,683.438 1183.31,683.438 1183.87,683.438 1184.43,683.438 1184.98,683.438 1185.54,683.438 1186.1,683.438 1186.66,683.438 1187.22,683.438 1187.78,683.438 1188.34,683.438 1188.9,683.438 1189.46,683.438 1190.02,683.438 1190.58,683.438 1191.14,683.438 1191.7,683.438 1192.25,683.438 1192.81,683.438 1193.37,683.438 1193.93,683.438 1194.49,683.438 1195.05,683.438 1195.61,683.438 1196.17,683.438 1196.73,683.438 1197.29,683.438 1197.85,683.438 1198.41,683.438 1198.97,683.438 1199.52,683.438 1200.08,683.438 1200.64,683.438 1201.2,683.438 1201.76,683.438 1202.32,683.438 1202.88,683.438 1203.44,683.438 1204,683.438 1204.56,683.438 1205.12,683.438 1205.68,683.438 1206.24,683.438 1206.8,683.438 1207.35,683.438 1207.91,683.438 1208.47,683.438 1209.03,683.438 1209.59,683.438 1210.15,683.438 1210.71,683.438 1211.27,683.438 1211.83,683.438 1212.39,683.438 1212.95,683.438 1213.51,683.438 1214.07,683.438 1214.62,683.438 1215.18,683.438 1215.74,683.438 1216.3,683.438 1216.86,683.438 1217.42,683.438 1217.98,683.438 1218.54,683.438 1219.1,683.438 1219.66,683.438 1220.22,683.438 1220.78,683.438 1221.34,683.438 1221.89,683.438 1222.45,683.438 1223.01,683.438 1223.57,683.438 1224.13,683.438 1224.69,683.438 1225.25,683.438 1225.81,683.438 1226.37,683.438 1226.93,683.438 1227.49,683.438 1228.05,683.438 1228.61,683.438 1229.17,683.438 1229.72,683.438 1230.28,683.438 1230.84,683.438 1231.4,683.438 1231.96,683.438 1232.52,683.438 1233.08,683.438 1233.64,683.438 1234.2,683.438 1234.76,683.438 1235.32,683.438 1235.88,683.438 1236.44,683.438 1236.99,683.438 1237.55,683.438 1238.11,683.438 1238.67,683.438 1239.23,683.438 1239.79,683.438 1240.35,683.438 1240.91,683.438 1241.47,683.438 1242.03,683.438 1242.59,683.438 1243.15,683.438 1243.71,683.438 1244.26,683.438 1244.82,683.438 1245.38,683.438 1245.94,683.438 1246.5,683.438 1247.06,683.438 1247.62,683.438 1248.18,683.438 1248.74,683.438 1249.3,683.438 1249.86,683.438 1250.42,683.438 1250.98,683.438 1251.54,683.438 1252.09,683.438 1252.65,683.438 1253.21,683.438 1253.77,683.438 1254.33,683.438 1254.89,683.438 1255.45,683.438 1256.01,683.438 1256.57,683.438 1257.13,683.438 1257.69,683.438 1258.25,683.438 1258.81,683.438 1259.36,683.438 1259.92,683.438 1260.48,683.438 1261.04,683.438 1261.6,683.438 1262.16,683.438 1262.72,683.438 1263.28,683.438 1263.84,683.438 1264.4,683.438 1264.96,683.438 1265.52,683.438 1266.08,683.438 1266.63,683.438 1267.19,683.438 1267.75,683.438 1268.31,683.438 1268.87,683.438 1269.43,683.438 1269.99,683.438 1270.55,683.438 1271.11,683.438 1271.67,683.438 1272.23,683.438 1272.79,683.438 1273.35,683.438 1273.91,683.438 1274.46,683.438 1275.02,683.438 1275.58,683.438 1276.14,683.438 1276.7,683.438 1277.26,683.438 1277.82,683.438 1278.38,683.438 1278.94,683.438 1279.5,683.438 1280.06,683.438 1280.62,683.438 1281.18,683.438 1281.73,683.438 1282.29,683.438 1282.85,683.438 1283.41,683.438 1283.97,683.438 1284.53,683.438 1285.09,683.438 1285.65,683.438 1286.21,683.438 1286.77,683.438 1287.33,683.438 1287.89,683.438 1288.45,683.438 1289,683.438 1289.56,683.438 1290.12,683.438 1290.68,683.438 1291.24,683.438 1291.8,683.438 1292.36,683.438 1292.92,683.438 1293.48,683.438 1294.04,683.438 1294.6,683.438 1295.16,683.438 1295.72,683.438 1296.28,683.438 1296.83,683.438 1297.39,683.438 1297.95,683.438 1298.51,683.438 1299.07,683.438 1299.63,683.438 1300.19,683.438 1300.75,683.438 1301.31,683.438 1301.87,683.438 1302.43,683.438 1302.99,683.438 1303.55,683.438 1304.1,683.438 1304.66,683.438 1305.22,683.438 1305.78,683.438 1306.34,683.438 1306.9,683.438 1307.46,683.438 1308.02,683.438 1308.58,683.438 1309.14,683.438 1309.7,683.438 1310.26,683.438 1310.82,683.438 1311.38,683.438 1311.93,683.438 1312.49,683.438 1313.05,683.438 1313.61,683.438 1314.17,683.438 1314.73,683.438 1315.29,683.438 1315.85,683.438 1316.41,683.438 1316.97,683.438 1317.53,683.438 1318.09,683.438 1318.65,683.438 1319.2,683.438 1319.76,683.438 1320.32,683.438 1320.88,683.438 1321.44,683.438 1322,683.438 1322.56,683.438 1323.12,683.438 1323.68,683.438 1324.24,683.438 1324.8,683.438 1325.36,683.438 1325.92,683.438 1326.47,683.438 1327.03,683.438 1327.59,683.438 1328.15,683.438 1328.71,683.438 1329.27,683.438 1329.83,683.438 1330.39,683.438 1330.95,683.438 1331.51,683.438 1332.07,683.438 1332.63,683.438 1333.19,683.438 1333.75,683.438 1334.3,683.438 1334.86,683.438 1335.42,683.438 1335.98,683.438 1336.54,683.438 1337.1,683.438 1337.66,683.438 1338.22,683.438 1338.78,683.438 1339.34,683.438 1339.9,683.438 1340.46,683.438 1341.02,683.438 1341.57,683.438 1342.13,683.438 1342.69,683.438 1343.25,683.438 1343.81,683.438 1344.37,683.438 1344.93,683.438 1345.49,683.438 1346.05,683.438 1346.61,683.438 1347.17,683.438 1347.73,683.438 1348.29,683.438 1348.84,683.438 1349.4,683.438 1349.96,683.438 1350.52,683.438 1351.08,683.438 1351.64,683.438 1352.2,683.438 1352.76,683.438 1353.32,683.438 1353.88,683.438 1354.44,683.438 1355,683.438 1355.56,683.438 1356.12,683.438 1356.67,683.438 1357.23,683.438 1357.79,683.438 1358.35,683.438 1358.91,683.438 1359.47,683.438 1360.03,683.438 1360.59,683.438 1361.15,683.438 1361.71,683.438 1362.27,683.438 1362.83,683.438 1363.39,683.438 1363.94,683.438 1364.5,683.438 1365.06,683.438 1365.62,683.438 1366.18,683.438 1366.74,683.438 1367.3,683.438 1367.86,683.438 1368.42,683.438 1368.98,683.438 1369.54,683.438 1370.1,683.438 1370.66,683.438 1371.21,683.438 1371.77,683.438 1372.33,683.438 1372.89,683.438 1373.45,683.438 1374.01,683.438 1374.57,683.438 1375.13,683.438 1375.69,683.438 1376.25,683.438 1376.81,683.438 1377.37,683.438 1377.93,683.438 1378.49,683.438 1379.04,683.438 1379.6,683.438 1380.16,683.438 1380.72,683.438 1381.28,683.438 1381.84,683.438 1382.4,683.438 1382.96,683.438 1383.52,683.438 1384.08,683.438 1384.64,683.438 1385.2,683.438 1385.76,683.438 1386.31,683.438 1386.87,683.438 1387.43,683.438 1387.99,683.438 1388.55,683.438 1389.11,683.438 1389.67,683.438 1390.23,683.438 1390.79,683.438 1391.35,683.438 1391.91,683.438 1392.47,683.438 1393.03,683.438 1393.58,683.438 1394.14,683.438 1394.7,683.438 1395.26,683.438 1395.82,683.438 1396.38,683.438 1396.94,683.438 1397.5,683.438 1398.06,683.438 1398.62,683.438 1399.18,683.438 1399.74,683.438 1400.3,683.438 1400.86,683.438 1401.41,683.438 1401.97,683.438 1402.53,683.438 1403.09,683.438 1403.65,683.438 1404.21,683.438 1404.77,683.438 1405.33,683.438 1405.89,683.438 1406.45,683.438 1407.01,683.438 1407.57,683.438 1408.13,683.438 1408.68,683.438 1409.24,683.438 1409.8,683.438 1410.36,683.438 1410.92,683.438 1411.48,683.438 1412.04,683.438 1412.6,683.438 1413.16,683.438 1413.72,683.438 1414.28,683.438 1414.84,683.438 1415.4,683.438 1415.95,683.438 1416.51,683.438 1417.07,683.438 1417.63,683.438 1418.19,683.438 1418.75,683.438 1419.31,683.438 1419.87,683.438 1420.43,683.438 1420.99,683.438 1421.55,683.438 1422.11,683.438 1422.67,683.438 1423.23,683.438 1423.78,683.438 1424.34,683.438 1424.9,683.438 1425.46,683.438 1426.02,683.438 1426.58,683.438 1427.14,683.438 1427.7,683.438 1428.26,683.438 1428.82,683.438 1429.38,683.438 1429.94,683.438 1430.5,683.438 1431.05,683.438 1431.61,683.438 1432.17,683.438 1432.73,683.438 1433.29,683.438 1433.85,683.438 1434.41,683.438 1434.97,683.438 1435.53,683.438 1436.09,683.438 1436.65,683.438 1437.21,683.438 1437.77,683.438 1438.33,683.438 1438.88,683.438 1439.44,683.438 1440,683.438 1440.56,683.438 1441.12,683.438 1441.68,683.438 1442.24,683.438 1442.8,683.438 1443.36,683.438 1443.92,683.438 1444.48,683.438 1445.04,683.438 1445.6,683.438 1446.15,683.438 1446.71,683.438 1447.27,683.438 1447.83,683.438 1448.39,683.438 1448.95,683.438 1449.51,683.438 1450.07,683.438 1450.63,683.438 1451.19,683.438 1451.75,683.438 1452.31,683.438 1452.87,683.438 1453.42,683.438 1453.98,683.438 1454.54,683.438 1455.1,683.438 1455.66,683.438 1456.22,683.438 1456.78,683.438 1457.34,683.438 1457.9,683.438 1458.46,683.438 1459.02,683.438 1459.58,683.438 1460.14,683.438 1460.7,683.438 1461.25,683.438 1461.81,683.438 1462.37,683.438 1462.93,683.438 1463.49,683.438 1464.05,683.438 1464.61,683.438 1465.17,683.438 1465.73,683.438 1466.29,683.438 1466.85,683.438 1467.41,683.438 1467.97,683.438 1468.52,683.438 1469.08,683.438 1469.64,683.438 1470.2,683.438 1470.76,683.438 1471.32,683.438 1471.88,683.438 1472.44,683.438 1473,683.438 1473.56,683.438 1474.12,683.438 1474.68,683.438 1475.24,683.438 1475.79,683.438 1476.35,683.438 1476.91,683.438 1477.47,683.438 1478.03,683.438 1478.59,683.438 1479.15,683.438 1479.71,683.438 1480.27,683.438 1480.83,683.438 1481.39,683.438 1481.95,683.438 1482.51,683.438 1483.07,683.438 1483.62,683.438 1484.18,683.438 1484.74,683.438 1485.3,683.438 1485.86,683.438 1486.42,683.438 1486.98,683.438 1487.54,683.438 1488.1,683.438 1488.66,683.438 1489.22,683.438 1489.78,683.438 1490.34,683.438 1490.89,683.438 1491.45,683.438 1492.01,683.438 1492.57,683.438 1493.13,683.438 1493.69,683.438 1494.25,683.438 1494.81,683.438 1495.37,683.438 1495.93,683.438 1496.49,683.438 1497.05,683.438 1497.61,683.438 1498.16,683.438 1498.72,683.438 1499.28,683.438 1499.84,683.438 1500.4,683.438 1500.96,683.438 1501.52,683.438 1502.08,683.438 1502.64,683.438 1503.2,683.438 1503.76,683.438 1504.32,683.438 1504.88,683.438 1505.44,683.438 1505.99,683.438 1506.55,683.438 1507.11,683.438 1507.67,683.438 1508.23,683.438 1508.79,683.438 1509.35,683.438 1509.91,683.438 1510.47,683.438 1511.03,683.438 1511.59,683.438 1512.15,683.438 1512.71,683.438 1513.26,683.438 1513.82,683.438 1514.38,683.438 1514.94,683.438 1515.5,683.438 1516.06,683.438 1516.62,683.438 1517.18,683.438 1517.74,683.438 1518.3,683.438 1518.86,683.438 1519.42,683.438 1519.98,683.438 1520.53,683.438 1521.09,683.438 1521.65,683.438 1522.21,683.438 1522.77,683.438 1523.33,683.438 1523.89,683.438 1524.45,683.438 1525.01,683.438 1525.57,683.438 1526.13,683.438 1526.69,683.438 1527.25,683.438 1527.81,683.438 1528.36,683.438 1528.92,683.438 1529.48,683.438 1530.04,683.438 1530.6,683.438 1531.16,683.438 1531.72,683.438 1532.28,683.438 1532.84,683.438 1533.4,683.438 1533.96,683.438 1534.52,683.438 1535.08,683.438 1535.63,683.438 1536.19,683.438 1536.75,683.438 1537.31,683.438 1537.87,683.438 1538.43,683.438 1538.99,683.438 1539.55,683.438 1540.11,683.438 1540.67,683.438 1541.23,683.438 1541.79,683.438 1542.35,683.438 1542.9,683.438 1543.46,683.438 1544.02,683.438 1544.58,683.438 1545.14,683.438 1545.7,683.438 1546.26,683.438 1546.82,683.438 1547.38,683.438 1547.94,683.438 1548.5,683.438 1549.06,683.438 1549.62,683.438 1550.18,683.438 1550.73,683.438 1551.29,683.438 1551.85,683.438 1552.41,683.438 1552.97,683.438 1553.53,683.438 1554.09,683.438 1554.65,683.438 1555.21,683.438 1555.77,683.438 1556.33,683.438 1556.89,683.438 1557.45,683.438 1558,683.438 1558.56,683.438 1559.12,683.438 1559.68,683.438 1560.24,683.438 1560.8,683.438 1561.36,683.438 1561.92,683.438 1562.48,683.438 1563.04,683.438 1563.6,683.438 1564.16,683.438 1564.72,683.438 1565.28,683.438 1565.83,683.438 1566.39,683.438 1566.95,683.438 1567.51,683.438 1568.07,683.438 1568.63,683.438 1569.19,683.438 1569.75,683.438 1570.31,683.438 1570.87,683.438 1571.43,683.438 1571.99,683.438 1572.55,683.438 1573.1,683.438 1573.66,683.438 1574.22,683.438 1574.78,683.438 1575.34,683.438 1575.9,683.438 1576.46,683.438 1577.02,683.438 1577.58,683.438 1578.14,683.438 1578.7,683.438 1579.26,683.438 1579.82,683.438 1580.37,683.438 1580.93,683.438 1581.49,683.438 1582.05,683.438 1582.61,683.438 1583.17,683.438 1583.73,683.438 1584.29,683.438 1584.85,683.438 1585.41,683.438 1585.97,683.438 1586.53,683.438 1587.09,683.438 1587.65,683.438 1588.2,683.438 1588.76,683.438 1589.32,683.438 1589.88,683.438 1590.44,683.438 1591,683.438 1591.56,683.438 1592.12,683.438 1592.68,683.438 1593.24,683.438 1593.8,683.438 1594.36,683.438 1594.92,683.438 1595.47,683.438 1596.03,683.438 1596.59,683.438 1597.15,683.438 1597.71,683.438 1598.27,683.438 1598.83,683.438 1599.39,683.438 1599.95,683.438 1600.51,683.438 1601.07,683.438 1601.63,683.438 1602.19,683.438 1602.74,683.438 1603.3,683.438 1603.86,683.438 1604.42,683.438 1604.98,683.438 1605.54,683.438 1606.1,683.438 1606.66,683.438 1607.22,683.438 1607.78,683.438 1608.34,683.438 1608.9,683.438 1609.46,683.438 1610.02,683.438 1610.57,683.438 1611.13,683.438 1611.69,683.438 1612.25,683.438 1612.81,683.438 1613.37,683.438 1613.93,683.438 1614.49,683.438 1615.05,683.438 1615.61,683.438 1616.17,683.438 1616.73,683.438 1617.29,683.438 1617.84,683.438 1618.4,683.438 1618.96,683.438 1619.52,683.438 1620.08,683.438 1620.64,683.438 1621.2,683.438 1621.76,683.438 1622.32,683.438 1622.88,683.438 1623.44,683.438 1624,683.438 1624.56,683.438 1625.11,683.438 1625.67,683.438 1626.23,683.438 1626.79,683.438 1627.35,683.438 1627.91,683.438 1628.47,683.438 1629.03,683.438 1629.59,683.438 1630.15,683.438 1630.71,683.438 1631.27,683.438 1631.83,683.438 1632.39,683.438 1632.94,683.438 1633.5,683.438 1634.06,683.438 1634.62,683.438 1635.18,683.438 1635.74,683.438 1636.3,683.438 1636.86,683.438 1637.42,683.438 1637.98,683.438 1638.54,683.438 1639.1,683.438 1639.66,683.438 1640.21,683.438 1640.77,683.438 1641.33,683.438 1641.89,683.438 1642.45,683.438 1643.01,683.438 1643.57,683.438 1644.13,683.438 1644.69,683.438 1645.25,683.438 1645.81,683.438 1646.37,683.438 1646.93,683.438 1647.48,683.438 1648.04,683.438 1648.6,683.438 1649.16,683.438 1649.72,683.438 1650.28,683.438 1650.84,683.438 1651.4,683.438 1651.96,683.438 1652.52,683.438 1653.08,683.438 1653.64,683.438 1654.2,683.438 1654.76,683.438 1655.31,683.438 1655.87,683.438 1656.43,683.438 1656.99,683.438 1657.55,683.438 1658.11,683.438 1658.67,683.438 1659.23,683.438 1659.79,683.438 1660.35,683.438 1660.91,683.438 1661.47,683.438 1662.03,683.438 1662.58,683.438 1663.14,683.438 1663.7,683.438 1664.26,683.438 1664.82,683.438 1665.38,683.438 1665.94,683.438 1666.5,683.438 1667.06,683.438 1667.62,683.438 1668.18,683.438 1668.74,683.438 1669.3,683.438 1669.85,683.438 1670.41,683.438 1670.97,683.438 1671.53,683.438 1672.09,683.438 1672.65,683.438 1673.21,683.438 1673.77,683.438 1674.33,683.438 1674.89,683.438 1675.45,683.438 1676.01,683.438 1676.57,683.438 1677.13,683.438 1677.68,683.438 1678.24,683.438 1678.8,683.438 1679.36,683.438 1679.92,683.438 1680.48,683.438 1681.04,683.438 1681.6,683.438 1682.16,683.438 1682.72,683.438 1683.28,683.438 1683.84,683.438 1684.4,683.438 1684.95,683.438 1685.51,683.438 1686.07,683.438 1686.63,683.438 1687.19,683.438 1687.75,683.438 1688.31,683.438 1688.87,683.438 1689.43,683.438 1689.99,683.438 1690.55,683.438 1691.11,683.438 1691.67,683.438 1692.23,683.438 1692.78,683.438 1693.34,683.438 1693.9,683.438 1694.46,683.438 1695.02,683.438 1695.58,683.438 1696.14,683.438 1696.7,683.438 1697.26,683.438 1697.82,683.438 1698.38,683.438 1698.94,683.438 1699.5,683.438 1700.05,683.438 1700.61,683.438 1701.17,683.438 1701.73,683.438 1702.29,683.438 1702.85,683.438 1703.41,683.438 1703.97,683.438 1704.53,683.438 1705.09,683.438 1705.65,683.438 1706.21,683.438 1706.77,683.438 1707.32,683.438 1707.88,683.438 1708.44,683.438 1709,683.438 1709.56,683.438 1710.12,683.438 1710.68,683.438 1711.24,683.438 1711.8,683.438 1712.36,683.438 1712.92,683.438 1713.48,683.438 1714.04,683.438 1714.6,683.438 1715.15,683.438 1715.71,683.438 1716.27,683.438 1716.83,683.438 1717.39,683.438 1717.95,683.438 1718.51,683.438 1719.07,683.438 1719.63,683.438 1720.19,683.438 1720.75,683.438 1721.31,683.438 1721.87,683.438 1722.42,683.438 1722.98,683.438 1723.54,683.438 1724.1,683.438 1724.66,683.438 1725.22,683.438 1725.78,683.438 1726.34,683.438 1726.9,683.438 1727.46,683.438 1728.02,683.438 1728.58,683.438 1729.14,683.438 1729.69,683.438 1730.25,683.438 1730.81,683.438 1731.37,683.438 1731.93,683.438 1732.49,683.438 1733.05,683.438 1733.61,683.438 1734.17,683.438 1734.73,683.438 1735.29,683.438 1735.85,683.438 1736.41,683.438 1736.97,683.438 1737.52,683.438 1738.08,683.438 1738.64,683.438 1739.2,683.438 1739.76,683.438 1740.32,683.438 1740.88,683.438 1741.44,683.438 1742,683.438 1742.56,683.438 1743.12,683.438 1743.68,683.438 1744.24,683.438 1744.79,683.438 1745.35,683.438 1745.91,683.438 1746.47,683.438 1747.03,683.438 1747.59,683.438 1748.15,683.438 1748.71,683.438 1749.27,683.438 1749.83,683.438 1750.39,683.438 1750.95,683.438 1751.51,683.438 1752.06,683.438 1752.62,683.438 1753.18,683.438 1753.74,683.438 1754.3,683.438 1754.86,683.438 1755.42,683.438 1755.98,683.438 1756.54,683.438 1757.1,683.438 1757.66,683.438 1758.22,683.438 1758.78,683.438 1759.34,683.438 1759.89,683.438 1760.45,683.438 1761.01,683.438 1761.57,683.438 1762.13,683.438 1762.69,683.438 1763.25,683.438 1763.81,683.438 1764.37,683.438 1764.93,683.438 1765.49,683.438 1766.05,683.438 1766.61,683.438 1767.16,683.438 1767.72,683.438 1768.28,683.438 1768.84,683.438 1769.4,683.438 1769.96,683.438 1770.52,683.438 1771.08,683.438 1771.64,683.438 1772.2,683.438 1772.76,683.438 1773.32,683.438 1773.88,683.438 1774.43,683.438 1774.99,683.438 1775.55,683.438 1776.11,683.438 1776.67,683.438 1777.23,683.438 1777.79,683.438 1778.35,683.438 1778.91,683.438 1779.47,683.438 1780.03,683.438 1780.59,683.438 1781.15,683.438 1781.71,683.438 1782.26,683.438 1782.82,683.438 1783.38,683.438 1783.94,683.438 1784.5,683.438 1785.06,683.438 1785.62,683.438 1786.18,683.438 1786.74,683.438 1787.3,683.438 1787.86,683.438 1788.42,683.438 1788.98,683.438 1789.53,683.438 1790.09,683.438 1790.65,683.438 1791.21,683.438 1791.77,683.438 1792.33,683.438 1792.89,683.438 1793.45,683.438 1794.01,683.438 1794.57,683.438 1795.13,683.438 1795.69,683.438 1796.25,683.438 1796.8,683.438 1797.36,683.438 1797.92,683.438 1798.48,683.438 1799.04,683.438 1799.6,683.438 1800.16,683.438 1800.72,683.438 1801.28,683.438 1801.84,683.438 1802.4,683.438 1802.96,683.438 1803.52,683.438 1804.08,683.438 1804.63,683.438 1805.19,683.438 1805.75,683.438 1806.31,683.438 1806.87,683.438 1807.43,683.438 1807.99,683.438 1808.55,683.438 1809.11,683.438 1809.67,683.438 1810.23,683.438 1810.79,683.438 1811.35,683.438 1811.9,683.438 1812.46,683.438 1813.02,683.438 1813.58,683.438 1814.14,683.438 1814.7,683.438 1815.26,683.438 1815.82,683.438 1816.38,683.438 1816.94,683.438 1817.5,683.438 1818.06,683.438 1818.62,683.438 1819.18,683.438 1819.73,683.438 1820.29,683.438 1820.85,683.438 1821.41,683.438 1821.97,683.438 1822.53,683.438 1823.09,683.438 1823.65,683.438 1824.21,683.438 1824.77,683.438 1825.33,683.438 1825.89,683.438 1826.45,683.438 1827,683.438 1827.56,683.438 1828.12,683.438 1828.68,683.438 1829.24,683.438 1829.8,683.438 1830.36,683.438 1830.92,683.438 1831.48,683.438 1832.04,683.438 1832.6,683.438 1833.16,683.438 1833.72,683.438 1834.27,683.438 1834.83,683.438 1835.39,683.438 1835.95,683.438 1836.51,683.438 1837.07,683.438 1837.63,683.438 1838.19,683.438 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031603907647961 ± 0.01777158267312325\nProjected Energy: -4.014346339069928 ± (0.005001245004016219, 0.004790901181078944)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.4617</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4888e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.507e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.937e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.363e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.956e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3486e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613362\n -0.7590191922770941\n  0.13584182219620544\n  0.15789998694608798\n  0.8767114411781378\n  1.530592997097333\n  1.5835732611867401\n  3.0728703303258555\n  3.125672653951849\n  4.862107221562172\n  6.260694850380595\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
