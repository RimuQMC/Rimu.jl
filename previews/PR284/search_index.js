var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2121662662905411 ± 0.0017390521540953752\n   G2(1) = 0.9168014289032074 ± 0.0008017482411912858\n   G2(2) = 0.9811213712211754 ± 0.0005902099128979549\n   G2(3) = 0.9919881334606921 ± 0.0009507770285833887\n   G2(4) = 0.9811213712211754 ± 0.0005902099128979549\n   G2(5) = 0.9168014289032074 ± 0.0008017482411912858\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.011301642179249 ± 0.12727446781494603\n   Replica 2: -4.01953335631981 ± 0.1356684096085514\n   Replica 3: -4.045608310265925 ± 0.12922610646720067\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.78 2211.02,1003.78 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.685 2211.02,745.685 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.585 2211.02,487.585 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.484 2211.02,229.484 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.78 423.181,1003.78 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.685 423.181,745.685 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.585 423.181,487.585 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.484 423.181,229.484 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.25 Q349.094 1254.79 349.094 1261.92 Q349.094 1269.03 350.899 1272.59 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.59 Q363.608 1269.03 363.608 1261.92 Q363.608 1254.79 361.779 1251.25 Q359.973 1247.68 356.339 1247.68 M356.339 1243.98 Q362.149 1243.98 365.205 1248.59 Q368.284 1253.17 368.284 1261.92 Q368.284 1270.65 365.205 1275.25 Q362.149 1279.84 356.339 1279.84 Q350.529 1279.84 347.45 1275.25 Q344.395 1270.65 344.395 1261.92 Q344.395 1253.17 347.45 1248.59 Q350.529 1243.98 356.339 1243.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M290.043 1017.13 L306.363 1017.13 L306.363 1021.06 L284.418 1021.06 L284.418 1017.13 Q287.08 1014.38 291.664 1009.75 Q296.27 1005.09 297.451 1003.75 Q299.696 1001.23 300.576 999.491 Q301.478 997.732 301.478 996.042 Q301.478 993.287 299.534 991.551 Q297.613 989.815 294.511 989.815 Q292.312 989.815 289.858 990.579 Q287.427 991.343 284.65 992.894 L284.65 988.171 Q287.474 987.037 289.927 986.459 Q292.381 985.88 294.418 985.88 Q299.789 985.88 302.983 988.565 Q306.177 991.25 306.177 995.741 Q306.177 997.871 305.367 999.792 Q304.58 1001.69 302.474 1004.28 Q301.895 1004.95 298.793 1008.17 Q295.691 1011.37 290.043 1017.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 986.505 L334.58 986.505 L334.58 990.44 L320.506 990.44 L320.506 998.912 Q321.524 998.565 322.543 998.403 Q323.562 998.218 324.58 998.218 Q330.367 998.218 333.747 1001.39 Q337.126 1004.56 337.126 1009.98 Q337.126 1015.56 333.654 1018.66 Q330.182 1021.74 323.862 1021.74 Q321.687 1021.74 319.418 1021.37 Q317.173 1021 314.765 1020.25 L314.765 1015.56 Q316.849 1016.69 319.071 1017.25 Q321.293 1017.8 323.77 1017.8 Q327.774 1017.8 330.112 1015.69 Q332.45 1013.59 332.45 1009.98 Q332.45 1006.37 330.112 1004.26 Q327.774 1002.15 323.77 1002.15 Q321.895 1002.15 320.02 1002.57 Q318.168 1002.99 316.224 1003.87 L316.224 986.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 989.584 Q352.728 989.584 350.899 993.148 Q349.094 996.69 349.094 1003.82 Q349.094 1010.93 350.899 1014.49 Q352.728 1018.03 356.339 1018.03 Q359.973 1018.03 361.779 1014.49 Q363.608 1010.93 363.608 1003.82 Q363.608 996.69 361.779 993.148 Q359.973 989.584 356.339 989.584 M356.339 985.88 Q362.149 985.88 365.205 990.486 Q368.284 995.07 368.284 1003.82 Q368.284 1012.55 365.205 1017.15 Q362.149 1021.74 356.339 1021.74 Q350.529 1021.74 347.45 1017.15 Q344.395 1012.55 344.395 1003.82 Q344.395 995.07 347.45 990.486 Q350.529 985.88 356.339 985.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M286.062 728.405 L304.418 728.405 L304.418 732.34 L290.344 732.34 L290.344 740.812 Q291.363 740.465 292.381 740.303 Q293.4 740.118 294.418 740.118 Q300.205 740.118 303.585 743.289 Q306.964 746.46 306.964 751.877 Q306.964 757.455 303.492 760.557 Q300.02 763.636 293.701 763.636 Q291.525 763.636 289.256 763.266 Q287.011 762.895 284.603 762.155 L284.603 757.455 Q286.687 758.59 288.909 759.145 Q291.131 759.701 293.608 759.701 Q297.613 759.701 299.951 757.594 Q302.288 755.488 302.288 751.877 Q302.288 748.266 299.951 746.159 Q297.613 744.053 293.608 744.053 Q291.733 744.053 289.858 744.469 Q288.006 744.886 286.062 745.766 L286.062 728.405 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 731.483 Q322.566 731.483 320.737 735.048 Q318.932 738.59 318.932 745.719 Q318.932 752.826 320.737 756.391 Q322.566 759.932 326.177 759.932 Q329.811 759.932 331.617 756.391 Q333.446 752.826 333.446 745.719 Q333.446 738.59 331.617 735.048 Q329.811 731.483 326.177 731.483 M326.177 727.78 Q331.987 727.78 335.043 732.386 Q338.122 736.969 338.122 745.719 Q338.122 754.446 335.043 759.053 Q331.987 763.636 326.177 763.636 Q320.367 763.636 317.288 759.053 Q314.233 754.446 314.233 745.719 Q314.233 736.969 317.288 732.386 Q320.367 727.78 326.177 727.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 731.483 Q352.728 731.483 350.899 735.048 Q349.094 738.59 349.094 745.719 Q349.094 752.826 350.899 756.391 Q352.728 759.932 356.339 759.932 Q359.973 759.932 361.779 756.391 Q363.608 752.826 363.608 745.719 Q363.608 738.59 361.779 735.048 Q359.973 731.483 356.339 731.483 M356.339 727.78 Q362.149 727.78 365.205 732.386 Q368.284 736.969 368.284 745.719 Q368.284 754.446 365.205 759.053 Q362.149 763.636 356.339 763.636 Q350.529 763.636 347.45 759.053 Q344.395 754.446 344.395 745.719 Q344.395 736.969 347.45 732.386 Q350.529 727.78 356.339 727.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M284.835 470.305 L307.057 470.305 L307.057 472.295 L294.511 504.865 L289.627 504.865 L301.432 474.24 L284.835 474.24 L284.835 470.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 470.305 L334.58 470.305 L334.58 474.24 L320.506 474.24 L320.506 482.712 Q321.524 482.365 322.543 482.203 Q323.562 482.017 324.58 482.017 Q330.367 482.017 333.747 485.189 Q337.126 488.36 337.126 493.777 Q337.126 499.355 333.654 502.457 Q330.182 505.536 323.862 505.536 Q321.687 505.536 319.418 505.166 Q317.173 504.795 314.765 504.054 L314.765 499.355 Q316.849 500.49 319.071 501.045 Q321.293 501.601 323.77 501.601 Q327.774 501.601 330.112 499.494 Q332.45 497.388 332.45 493.777 Q332.45 490.166 330.112 488.059 Q327.774 485.953 323.77 485.953 Q321.895 485.953 320.02 486.369 Q318.168 486.786 316.224 487.666 L316.224 470.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 473.383 Q352.728 473.383 350.899 476.948 Q349.094 480.49 349.094 487.619 Q349.094 494.726 350.899 498.291 Q352.728 501.832 356.339 501.832 Q359.973 501.832 361.779 498.291 Q363.608 494.726 363.608 487.619 Q363.608 480.49 361.779 476.948 Q359.973 473.383 356.339 473.383 M356.339 469.68 Q362.149 469.68 365.205 474.286 Q368.284 478.869 368.284 487.619 Q368.284 496.346 365.205 500.953 Q362.149 505.536 356.339 505.536 Q350.529 505.536 347.45 500.953 Q344.395 496.346 344.395 487.619 Q344.395 478.869 347.45 474.286 Q350.529 469.68 356.339 469.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M256.664 242.829 L264.303 242.829 L264.303 216.464 L255.992 218.13 L255.992 213.871 L264.256 212.204 L268.932 212.204 L268.932 242.829 L276.571 242.829 L276.571 246.764 L256.664 246.764 L256.664 242.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M296.015 215.283 Q292.404 215.283 290.576 218.848 Q288.77 222.39 288.77 229.519 Q288.77 236.626 290.576 240.19 Q292.404 243.732 296.015 243.732 Q299.65 243.732 301.455 240.19 Q303.284 236.626 303.284 229.519 Q303.284 222.39 301.455 218.848 Q299.65 215.283 296.015 215.283 M296.015 211.579 Q301.826 211.579 304.881 216.186 Q307.96 220.769 307.96 229.519 Q307.96 238.246 304.881 242.852 Q301.826 247.436 296.015 247.436 Q290.205 247.436 287.127 242.852 Q284.071 238.246 284.071 229.519 Q284.071 220.769 287.127 216.186 Q290.205 211.579 296.015 211.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 215.283 Q322.566 215.283 320.737 218.848 Q318.932 222.39 318.932 229.519 Q318.932 236.626 320.737 240.19 Q322.566 243.732 326.177 243.732 Q329.811 243.732 331.617 240.19 Q333.446 236.626 333.446 229.519 Q333.446 222.39 331.617 218.848 Q329.811 215.283 326.177 215.283 M326.177 211.579 Q331.987 211.579 335.043 216.186 Q338.122 220.769 338.122 229.519 Q338.122 238.246 335.043 242.852 Q331.987 247.436 326.177 247.436 Q320.367 247.436 317.288 242.852 Q314.233 238.246 314.233 229.519 Q314.233 220.769 317.288 216.186 Q320.367 211.579 326.177 211.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 215.283 Q352.728 215.283 350.899 218.848 Q349.094 222.39 349.094 229.519 Q349.094 236.626 350.899 240.19 Q352.728 243.732 356.339 243.732 Q359.973 243.732 361.779 240.19 Q363.608 236.626 363.608 229.519 Q363.608 222.39 361.779 218.848 Q359.973 215.283 356.339 215.283 M356.339 211.579 Q362.149 211.579 365.205 216.186 Q368.284 220.769 368.284 229.519 Q368.284 238.246 365.205 242.852 Q362.149 247.436 356.339 247.436 Q350.529 247.436 347.45 242.852 Q344.395 238.246 344.395 229.519 Q344.395 220.769 347.45 216.186 Q350.529 211.579 356.339 211.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.484 4017.76,229.484 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.45 457.123,1250.3 457.691,1250.07 458.259,1249.74 458.828,1248.31 459.396,1246.87 459.964,1246.44 460.533,1245.9 461.101,1245.31 461.669,1244.63 462.238,1243.87 462.806,1243.02 463.375,1242.08 463.943,1241.04 464.511,1239.91 465.08,1238.65 465.648,1237.3 466.216,1235.84 466.785,1234.26 467.353,1232.53 467.921,1230.69 468.49,1227.68 469.058,1225.56 469.626,1222.23 470.195,1219.75 470.763,1217.11 471.331,1214.33 471.9,1211.38 472.468,1207.21 473.036,1203.82 473.605,1200.25 474.173,1196.45 474.741,1191.48 475.31,1186.23 475.878,1181.77 476.446,1177.09 477.015,1172.22 477.583,1167.09 478.152,1159.66 478.72,1154.04 479.288,1148.2 479.857,1142.14 480.425,1135.82 480.993,1129.31 481.562,1120.48 482.13,1113.47 482.698,1105.33 483.267,1094.78 483.835,1084.99 484.403,1072.96 484.972,1064.09 485.54,1055.92 486.108,1047.5 486.677,1038.98 487.245,1030.19 487.813,1021.34 488.382,1011.26 488.95,1000.03 489.518,989.711 490.087,979.313 490.655,966.824 491.224,957.393 491.792,946.812 492.36,936.177 492.929,923.343 493.497,911.616 494.065,899.91 494.634,890.315 495.202,879.53 495.77,867.839 496.339,856.051 496.907,843.334 497.475,833.736 498.044,822.248 498.612,812.803 499.18,802.381 499.749,792.91 500.317,783.348 500.885,770.801 501.454,759.429 502.022,750.149 502.59,739.787 503.159,729.551 503.727,718.486 504.295,707.67 504.864,697.868 505.432,688.137 506.001,677.372 506.569,667.91 507.137,657.43 507.706,649.182 508.274,639.903 508.842,631.759 509.411,622.737 509.979,613.905 510.547,605.05 511.116,594.274 511.684,585.795 512.252,576.417 512.821,568.289 513.389,560.254 513.957,552.418 514.526,543.773 515.094,537.234 515.662,529.822 516.231,523.514 516.799,515.229 517.367,508.16 517.936,503.334 518.504,496.359 519.072,485.636 519.641,479.331 520.209,472.141 520.778,465.315 521.346,458.486 521.914,452.874 522.483,448.472 523.051,442.085 523.619,435.932 524.188,432.999 524.756,429.008 525.324,425.001 525.893,419.067 526.461,414.289 527.029,410.608 527.598,405.145 528.166,400.579 528.734,395.174 529.303,390.08 529.871,387.317 530.439,384.464 531.008,380.487 531.576,377.865 532.144,374.235 532.713,369.531 533.281,365.035 533.85,361.784 534.418,358.638 534.986,354.428 535.555,350.375 536.123,347.392 536.691,345.418 537.26,342.648 537.828,336.636 538.396,337.122 538.965,336.514 539.533,332.687 540.101,330.007 540.67,328.468 541.238,328.03 541.806,326.316 542.375,324.607 542.943,323.02 543.511,318.151 544.08,315.691 544.648,312.23 545.216,311.02 545.785,309.785 546.353,306.508 546.921,304.328 547.49,303.249 548.058,301.318 548.627,296.313 549.195,294.474 549.763,291.616 550.332,291.221 550.9,287.668 551.468,288.331 552.037,287.04 552.605,287.745 553.173,285.418 553.742,281.886 554.31,283.615 554.878,284.255 555.447,281.694 556.015,281.455 556.583,281.184 557.152,277.744 557.72,278.495 558.288,280.336 558.857,278.706 559.425,277.215 559.993,277.96 560.562,277.225 561.13,276.742 561.698,276.156 562.267,277.816 562.835,278.087 563.404,275.297 563.972,275.802 564.54,272.782 565.109,269.971 565.677,269.488 566.245,268.087 566.814,268.87 567.382,269.302 567.95,268.734 568.519,267.14 569.087,266.862 569.655,266.426 570.224,265.983 570.792,267.865 571.36,264.26 571.929,262.989 572.497,262.67 573.065,262.122 573.634,261.705 574.202,259.399 574.77,258.24 575.339,258.227 575.907,255.028 576.476,254.899 577.044,254.758 577.612,252.625 578.181,251.519 578.749,252.453 579.317,252.411 579.886,250.443 580.454,250.568 581.022,251.788 581.591,252.858 582.159,253.872 582.727,249.47 583.296,249.557 583.864,249.977 584.432,249.042 585.001,251.131 585.569,249.049 586.137,248.096 586.706,247.177 587.274,247.403 587.842,248.434 588.411,247.236 588.979,246.124 589.547,246.364 590.116,245.424 590.684,245.517 591.253,245.482 591.821,244.379 592.389,247.427 592.958,245.213 593.526,245.514 594.094,241.38 594.663,241.832 595.231,241.961 595.799,242.082 596.368,242.447 596.936,238.587 597.504,238.269 598.073,237.899 598.641,238.455 599.209,237.95 599.778,238.492 600.346,240.117 600.914,241.49 601.483,239.634 602.051,239.975 602.619,241.472 603.188,240.586 603.756,241.881 604.325,242 604.893,241.997 605.461,243.223 606.03,242.362 606.598,243.657 607.166,242.717 607.735,242.647 608.303,241.784 608.871,242.05 609.44,241.364 610.008,242.414 610.576,243.539 611.145,243.291 611.713,243.086 612.281,243.096 612.85,242.845 613.418,240.735 613.986,241.835 614.555,239.916 615.123,240.022 615.691,241.224 616.26,242.355 616.828,242.41 617.396,243.395 617.965,241.065 618.533,240.921 619.102,238.856 619.67,237.733 620.238,233.956 620.807,235.449 621.375,234.811 621.943,234.095 622.512,233.398 623.08,236.052 623.648,236.304 624.217,237.493 624.785,239.714 625.353,236.535 625.922,233.62 626.49,235.177 627.058,232.44 627.627,231.947 628.195,236.565 628.763,235.801 629.332,236.947 629.9,236.879 630.468,238.093 631.037,237.335 631.605,238.67 632.173,237.752 632.742,236.889 633.31,238.253 633.879,239.681 634.447,238.916 635.015,239.229 635.584,237.456 636.152,238.717 636.72,237.746 637.289,237.943 637.857,238.11 638.425,239.188 638.994,236.922 639.562,237.986 640.13,237.789 640.699,237.756 641.267,236.998 641.835,237.977 642.404,237.976 642.972,235.866 643.54,238.119 644.109,238.071 644.677,238.106 645.245,235.825 645.814,236.049 646.382,236.299 646.951,234.238 647.519,234.426 648.087,235.725 648.656,238.221 649.224,237 649.792,237.128 650.361,237.159 650.929,238.303 651.497,237.116 652.066,236.974 652.634,236.952 653.202,236.765 653.771,234.644 654.339,234.57 654.907,235.694 655.476,235.646 656.044,234.855 656.612,235.111 657.181,232.287 657.749,232.442 658.317,231.834 658.886,231.145 659.454,231.78 660.022,232.188 660.591,233.785 661.159,234.906 661.728,234.002 662.296,234.076 662.864,234.257 663.433,234.552 664.001,232.66 664.569,234.029 665.138,235.127 665.706,233.052 666.274,231.96 666.843,231.519 667.411,229.78 667.979,230.447 668.548,228.759 669.116,228.289 669.684,225.831 670.253,225.574 670.821,224.445 671.389,224.212 671.958,228.107 672.526,227.714 673.094,229.477 673.663,230.145 674.231,231.483 674.799,231.796 675.368,232.442 675.936,232.807 676.505,232.985 677.073,234.342 677.641,233.356 678.21,231.489 678.778,231.256 679.346,233.737 679.915,232.823 680.483,232.083 681.051,229.584 681.62,228.082 682.188,228.763 682.756,230.314 683.325,231.841 683.893,232.178 684.461,233.623 685.03,232.885 685.598,235.43 686.166,236.699 686.735,237.856 687.303,237.662 687.871,238.621 688.44,238.487 689.008,238.447 689.577,240.571 690.145,237.376 690.713,236.102 691.282,234.917 691.85,236.123 692.418,236.032 692.987,233.844 693.555,235.078 694.123,235.16 694.692,237.304 695.26,237.236 695.828,238.116 696.397,237.884 696.965,235.544 697.533,235.393 698.102,236.333 698.67,236.38 699.238,234.344 699.807,230.093 700.375,229.557 700.943,229.62 701.512,229.012 702.08,229.326 702.648,229.674 703.217,228.775 703.785,230.224 704.354,229.478 704.922,233.9 705.49,233.895 706.059,232.907 706.627,232.749 707.195,232.968 707.764,233.182 708.332,232.142 708.9,232.366 709.469,230.225 710.037,230.675 710.605,232.913 711.174,232.806 711.742,233.878 712.31,232.854 712.879,231.693 713.447,231.833 714.015,232.068 714.584,232.181 715.152,233.309 715.72,233.334 716.289,233.403 716.857,233.623 717.425,234.642 717.994,233.647 718.562,233.608 719.131,233.734 719.699,234.901 720.267,235.883 720.836,235.873 721.404,236.684 721.972,236.409 722.541,234.963 723.109,234.672 723.677,234.407 724.246,233.417 724.814,232.353 725.382,231.306 725.951,231.434 726.519,232.613 727.087,232.484 727.656,233.591 728.224,234.653 728.792,234.265 729.361,233.996 729.929,233.862 730.497,231.869 731.066,232.783 731.634,232.972 732.203,233.072 732.771,231.976 733.339,232.317 733.908,233.117 734.476,233.927 735.044,233.826 735.613,233.818 736.181,233.69 736.749,233.639 737.318,234.467 737.886,234.432 738.454,235.294 739.023,233.886 739.591,234.143 740.159,231.715 740.728,231.802 741.296,233.909 741.864,233.859 742.433,233.651 743.001,234.442 743.569,235.241 744.138,231.924 744.706,231.97 745.274,231.973 745.843,231.826 746.411,230.752 746.98,231.887 747.548,231.876 748.116,233.097 748.685,231.012 749.253,230.051 749.821,228.968 750.39,225.267 750.958,224.696 751.526,223.277 752.095,226.063 752.663,225.504 753.231,227.028 753.8,223.007 754.368,222.66 754.936,225.555 755.505,225.004 756.073,224.469 756.641,225.149 757.21,227.851 757.778,226.443 758.346,226.731 758.915,226.994 759.483,225.366 760.052,225.803 760.62,227.543 761.188,229.064 761.757,229.428 762.325,229.759 762.893,231.067 763.462,232.14 764.03,232.135 764.598,231.009 765.167,233.168 765.735,232.014 766.303,231.135 766.872,231.359 767.44,231.456 768.008,230.622 768.577,231.768 769.145,233.099 769.713,233.035 770.282,233.119 770.85,234.252 771.418,234.26 771.987,234.252 772.555,235.344 773.123,237.036 773.692,236.619 774.26,236.392 774.829,235.069 775.397,234.761 775.965,234.139 776.534,235.734 777.102,234.66 777.67,235.484 778.239,236.354 778.807,233.987 779.375,234.038 779.944,233.986 780.512,232.95 781.08,231.867 781.649,230.675 782.217,229.727 782.785,231.079 783.354,232.02 783.922,231.778 784.49,230.708 785.059,231.83 785.627,233.799 786.195,233.788 786.764,234.649 787.332,236.54 787.9,237.224 788.469,236.656 789.037,237.093 789.606,236.543 790.174,237.061 790.742,238.583 791.311,238.008 791.879,237.379 792.447,237.887 793.016,235.248 793.584,236.021 794.152,237.745 794.721,237.242 795.289,235.622 795.857,236.086 796.426,237.938 796.994,238.495 797.562,237.792 798.131,236.184 798.699,235.528 799.267,231.77 799.836,232.503 800.404,232.148 800.972,231.101 801.541,230.089 802.109,228.617 802.678,227.623 803.246,227.824 803.814,228.765 804.383,224.866 804.951,224.257 805.519,223.488 806.088,222.987 806.656,224.717 807.224,225.106 807.793,225.553 808.361,225.722 808.929,225.026 809.498,228.413 810.066,229.498 810.634,229.681 811.203,229.58 811.771,228.621 812.339,229.755 812.908,230.89 813.476,232.907 814.044,232.671 814.613,234.463 815.181,232.23 815.749,230.979 816.318,233.02 816.886,232.802 817.455,230.294 818.023,231.221 818.591,230.087 819.16,230.02 819.728,228.921 820.296,228.847 820.865,228.985 821.433,230.092 822.001,231.16 822.57,230.934 823.138,228.828 823.706,229.447 824.275,228.306 824.843,227.163 825.411,225.502 825.98,225.828 826.548,223.997 827.116,224.466 827.685,221.548 828.253,222.185 828.821,223.698 829.39,223.007 829.958,222.486 830.526,222.977 831.095,222.476 831.663,223.939 832.232,225.297 832.8,224.603 833.368,226.933 833.937,227.224 834.505,227.562 835.073,227.945 835.642,231.415 836.21,230.377 836.778,230.48 837.347,230.627 837.915,229.646 838.483,228.987 839.052,229.122 839.62,229.558 840.188,227.732 840.757,229.977 841.325,228.947 841.893,229.149 842.462,229.419 843.03,229.611 843.598,230.721 844.167,229.764 844.735,229.797 845.304,227.954 845.872,227.2 846.44,226.515 847.009,227.938 847.577,227.243 848.145,228.384 848.714,224.609 849.282,224.995 849.85,225.532 850.419,224.797 850.987,225.323 851.555,225.581 852.124,226.176 852.692,229.708 853.26,229.737 853.829,230.885 854.397,229.855 854.965,229.985 855.534,232.163 856.102,232.16 856.67,231.253 857.239,229.1 857.807,231.278 858.375,232.064 858.944,231.974 859.512,233.163 860.081,232.951 860.649,232.943 861.217,231.723 861.786,229.798 862.354,230.847 862.922,229.907 863.491,231.059 864.059,230.343 864.627,235.545 865.196,234.236 865.764,234.208 866.332,232.002 866.901,232.957 867.469,232.931 868.037,231.921 868.606,229.897 869.174,230.048 869.742,230.172 870.311,230.307 870.879,230.387 871.447,230.355 872.016,230.356 872.584,230.669 873.152,230.757 873.721,232.7 874.289,233.48 874.858,232.329 875.426,230.139 875.994,231.105 876.563,231.853 877.131,230.969 877.699,232.946 878.268,230.704 878.836,228.69 879.404,231.908 879.973,233.775 880.541,233.52 881.109,234.286 881.678,235.088 882.246,234.642 882.814,234.331 883.383,233.036 883.951,233.707 884.519,234.77 885.088,235.478 885.656,234.851 886.224,232.492 886.793,232.274 887.361,232.181 887.93,234.041 888.498,234.764 889.066,233.356 889.635,234.133 890.203,234.824 890.771,235.3 891.34,234.948 891.908,235.491 892.476,235.085 893.045,234.644 893.613,233.155 894.181,232.918 894.75,232.607 895.318,230.28 895.886,228.136 896.455,228.048 897.023,227.339 897.591,227.334 898.16,227.75 898.728,228.044 899.296,228.162 899.865,227.361 900.433,228.324 901.001,230.534 901.57,230.164 902.138,231.005 902.707,232.752 903.275,232.424 903.843,232.168 904.412,229.084 904.98,227.892 905.548,226.026 906.117,224.079 906.685,226.201 907.253,226.441 907.822,226.759 908.39,225.945 908.958,226.331 909.527,225.562 910.095,224.793 910.663,224.047 911.232,224.163 911.8,225.599 912.368,226.044 912.937,224.545 913.505,226.121 914.073,227.344 914.642,227.456 915.21,226.635 915.779,227.929 916.347,225.853 916.915,227.141 917.484,230.525 918.052,229.228 918.62,228.264 919.189,228.328 919.757,226.49 920.325,229.01 920.894,229.179 921.462,229.363 922.03,229.579 922.599,227.651 923.167,226.816 923.735,226.934 924.304,228.168 924.872,228.534 925.44,228.657 926.009,227.809 926.577,226.839 927.145,227.18 927.714,227.537 928.282,226.905 928.85,226.211 929.419,226.658 929.987,226.875 930.556,227.263 931.124,227.376 931.692,228.785 932.261,227.68 932.829,227.052 933.397,227.268 933.966,227.372 934.534,227.84 935.102,228.252 935.671,228.513 936.239,229.561 936.807,227.605 937.376,226.709 937.944,226.965 938.512,226.956 939.081,228.412 939.649,228.556 940.217,227.748 940.786,227.133 941.354,228.532 941.922,228.76 942.491,228.942 943.059,226.261 943.627,226.516 944.196,227.976 944.764,228.309 945.333,229.505 945.901,230.658 946.469,231.613 947.038,230.423 947.606,229.524 948.174,229.935 948.743,230.211 949.311,229.288 949.879,229.546 950.448,229.722 951.016,229.71 951.584,232.993 952.153,232.999 952.721,233.983 953.289,231.816 953.858,230.781 954.426,232.003 954.994,233.106 955.563,234.156 956.131,235.032 956.699,236.759 957.268,236.594 957.836,234.269 958.405,232.934 958.973,232.861 959.541,235.897 960.11,234.548 960.678,237.336 961.246,236.983 961.815,235.501 962.383,234.151 962.951,233.714 963.52,234.543 964.088,234.231 964.656,235.116 965.225,234.752 965.793,235.465 966.361,234.999 966.93,234.582 967.498,232.27 968.066,231.118 968.635,231.938 969.203,231.746 969.771,229.662 970.34,230.586 970.908,230.71 971.476,230.907 972.045,229.82 972.613,229.608 973.182,229.532 973.75,228.419 974.318,229.761 974.887,229.701 975.455,229.566 976.023,228.655 976.592,228.581 977.16,231.754 977.728,232.595 978.297,232.452 978.865,230.218 979.433,230.345 980.002,227.222 980.57,227.377 981.138,227.445 981.707,225.51 982.275,225.882 982.843,227.326 983.412,226.402 983.98,226.357 984.548,228.58 985.117,229.926 985.685,230.931 986.253,229.887 986.822,229.83 987.39,230.923 987.959,231.066 988.527,231.939 989.095,232.552 989.664,231.289 990.232,230.2 990.8,231.325 991.369,232.301 991.937,233.104 992.505,233.928 993.074,233.73 993.642,235.561 994.21,233.012 994.779,231.82 995.347,231.621 995.915,229.38 996.484,226.248 997.052,228.268 997.62,228.154 998.189,230.196 998.757,230.085 999.325,227.983 999.894,227.328 1000.46,225.584 1001.03,225.02 1001.6,225.352 1002.17,223.403 1002.74,223.901 1003.3,224.289 1003.87,224.767 1004.44,227.157 1005.01,227.347 1005.58,226.436 1006.15,224.56 1006.71,225.989 1007.28,227.177 1007.85,228.295 1008.42,228.488 1008.99,228.73 1009.56,227.901 1010.12,230.238 1010.69,229.313 1011.26,232.262 1011.83,233.164 1012.4,233.058 1012.97,231.751 1013.53,230.645 1014.1,231.533 1014.67,232.438 1015.24,232.3 1015.81,233.528 1016.38,233.167 1016.94,232.021 1017.51,230.936 1018.08,232.8 1018.65,232.544 1019.22,232.47 1019.79,232.434 1020.35,231.886 1020.92,231.826 1021.49,232.742 1022.06,234.647 1022.63,232.203 1023.2,232.864 1023.76,232.356 1024.33,234.326 1024.9,233.86 1025.47,232.805 1026.04,232.322 1026.61,232.976 1027.17,233.713 1027.74,233.522 1028.31,231.273 1028.88,231.157 1029.45,231.85 1030.02,230.511 1030.58,228.456 1031.15,227.593 1031.72,228.657 1032.29,226.746 1032.86,230.02 1033.43,229 1033.99,227.12 1034.56,227.346 1035.13,227.417 1035.7,227.652 1036.27,225.924 1036.84,226.167 1037.4,226.431 1037.97,225.782 1038.54,226.094 1039.11,226.672 1039.68,227.043 1040.25,226.054 1040.81,227.289 1041.38,229.566 1041.95,229.74 1042.52,231.617 1043.09,231.417 1043.66,229.324 1044.22,230.358 1044.79,229.241 1045.36,230.017 1045.93,231.148 1046.5,231.127 1047.07,228.174 1047.63,228.214 1048.2,228.213 1048.77,230.314 1049.34,230.017 1049.91,230.088 1050.48,228.971 1051.05,227.851 1051.61,227.075 1052.18,227.234 1052.75,227.325 1053.32,227.401 1053.89,226.62 1054.46,227.015 1055.02,226.961 1055.59,227.108 1056.16,227.1 1056.73,227.332 1057.3,230.904 1057.87,228.807 1058.43,229.887 1059,227.951 1059.57,228.262 1060.14,227.377 1060.71,227.499 1061.28,227.548 1061.84,230.973 1062.41,232.771 1062.98,230.581 1063.55,228.415 1064.12,227.482 1064.69,230.857 1065.25,228.599 1065.82,228.749 1066.39,228.754 1066.96,227.891 1067.53,227.041 1068.1,227.2 1068.66,229.408 1069.23,230.547 1069.8,234.724 1070.37,234.543 1070.94,235.308 1071.51,234.811 1072.07,233.348 1072.64,231.052 1073.21,231.936 1073.78,230.595 1074.35,229.46 1074.92,230.394 1075.48,231.551 1076.05,231.36 1076.62,227.116 1077.19,228.339 1077.76,230.293 1078.33,231.301 1078.89,231.116 1079.46,231.317 1080.03,228.991 1080.6,227.949 1081.17,227.947 1081.74,230.208 1082.3,232.195 1082.87,231.059 1083.44,230.054 1084.01,230.193 1084.58,230.199 1085.15,228.902 1085.71,229.855 1086.28,229.94 1086.85,231.867 1087.42,230.66 1087.99,229.563 1088.56,228.602 1089.12,228.625 1089.69,227.587 1090.26,227.616 1090.83,226.805 1091.4,224.974 1091.97,224.464 1092.53,223.699 1093.1,226.174 1093.67,224.498 1094.24,226.093 1094.81,225.438 1095.38,227.822 1095.94,227.057 1096.51,225.18 1097.08,224.707 1097.65,224.243 1098.22,221.768 1098.79,221.246 1099.35,223.867 1099.92,224.316 1100.49,226.875 1101.06,227.296 1101.63,228.795 1102.2,230.061 1102.76,230.38 1103.33,229.409 1103.9,228.243 1104.47,229.443 1105.04,232.872 1105.61,232.853 1106.17,236.435 1106.74,236.082 1107.31,235.743 1107.88,235.267 1108.45,235.799 1109.02,233.201 1109.58,229.941 1110.15,227.857 1110.72,224.84 1111.29,226.343 1111.86,225.681 1112.43,227.106 1112.99,228.363 1113.56,228.544 1114.13,227.612 1114.7,229.933 1115.27,229.916 1115.84,228.999 1116.4,232.959 1116.97,233.725 1117.54,234.569 1118.11,235.43 1118.68,235.96 1119.25,237.513 1119.81,237.953 1120.38,235.436 1120.95,237.278 1121.52,234.821 1122.09,232.601 1122.66,232.301 1123.23,234.071 1123.79,233.704 1124.36,233.426 1124.93,232.048 1125.5,231.783 1126.07,231.524 1126.64,231.436 1127.2,233.082 1127.77,231.062 1128.34,231.984 1128.91,231.745 1129.48,231.661 1130.05,231.453 1130.61,231.236 1131.18,229.946 1131.75,230.943 1132.32,230.658 1132.89,230.707 1133.46,230.317 1134.02,229.281 1134.59,229.276 1135.16,230.355 1135.73,230.271 1136.3,228.215 1136.87,230.414 1137.43,230.363 1138,231.146 1138.57,230.934 1139.14,227.637 1139.71,230.735 1140.28,233.726 1140.84,234.444 1141.41,234.048 1141.98,231.617 1142.55,229.294 1143.12,228.168 1143.69,227.099 1144.25,226.27 1144.82,226.326 1145.39,226.583 1145.96,228.774 1146.53,233.134 1147.1,231.763 1147.66,230.313 1148.23,230.16 1148.8,230.074 1149.37,229.814 1149.94,228.678 1150.51,226.685 1151.07,227.983 1151.64,228.202 1152.21,230.334 1152.78,230.142 1153.35,231.172 1153.92,232.852 1154.48,232.603 1155.05,231.454 1155.62,231.298 1156.19,231.139 1156.76,231.916 1157.33,230.5 1157.89,231.143 1158.46,229.024 1159.03,229.188 1159.6,229.987 1160.17,231.053 1160.74,233.138 1161.3,232.854 1161.87,230.539 1162.44,229.311 1163.01,229.345 1163.58,228.194 1164.15,230.147 1164.71,230.133 1165.28,229.094 1165.85,230.029 1166.42,228.812 1166.99,228.827 1167.56,229.852 1168.12,230.968 1168.69,231.018 1169.26,228.622 1169.83,230.496 1170.4,230.286 1170.97,230.335 1171.53,228.198 1172.1,227.139 1172.67,229.345 1173.24,230.227 1173.81,231.103 1174.38,230.757 1174.94,228.325 1175.51,229.144 1176.08,227.983 1176.65,227.878 1177.22,229.135 1177.79,231.152 1178.35,229.894 1178.92,228.792 1179.49,229.664 1180.06,229.401 1180.63,228.259 1181.2,227.11 1181.76,226.058 1182.33,228.247 1182.9,228.025 1183.47,228.039 1184.04,227.083 1184.61,227.15 1185.17,228.129 1185.74,227.087 1186.31,226.266 1186.88,226.387 1187.45,227.561 1188.02,225.548 1188.58,226.723 1189.15,224.868 1189.72,223.241 1190.29,222.603 1190.86,223.343 1191.43,223.829 1192,225.229 1192.56,226.528 1193.13,224.837 1193.7,221.061 1194.27,220.872 1194.84,221.487 1195.41,222.048 1195.97,223.55 1196.54,224.063 1197.11,225.505 1197.68,227.75 1198.25,226.733 1198.82,229.164 1199.38,228.179 1199.95,225.168 1200.52,226.701 1201.09,228.998 1201.66,229.311 1202.23,229.598 1202.79,229.69 1203.36,229.617 1203.93,229.759 1204.5,228.605 1205.07,225.44 1205.64,225.994 1206.2,227.636 1206.77,229.04 1207.34,230.13 1207.91,229.303 1208.48,229.286 1209.05,229.157 1209.61,229.292 1210.18,229.278 1210.75,229.183 1211.32,229.308 1211.89,231.31 1212.46,229.422 1213.02,228.588 1213.59,228.857 1214.16,230.193 1214.73,231.244 1215.3,230.196 1215.87,230.135 1216.43,230.28 1217,230.483 1217.57,229.309 1218.14,228.566 1218.71,229.694 1219.28,231.085 1219.84,230.981 1220.41,230.868 1220.98,228.748 1221.55,231.174 1222.12,232.064 1222.69,232.834 1223.25,232.603 1223.82,231.505 1224.39,230.404 1224.96,230.241 1225.53,230.394 1226.1,230.558 1226.66,228.61 1227.23,226.769 1227.8,224.997 1228.37,224.464 1228.94,226.209 1229.51,226.669 1230.07,226.969 1230.64,228.381 1231.21,228.644 1231.78,229.715 1232.35,227.791 1232.92,228.198 1233.48,227.517 1234.05,231.926 1234.62,229.834 1235.19,231.119 1235.76,231.029 1236.33,230.976 1236.89,230.952 1237.46,229.855 1238.03,229.833 1238.6,229.722 1239.17,230.988 1239.74,227.837 1240.3,228.055 1240.87,228.217 1241.44,227.573 1242.01,230.867 1242.58,229.793 1243.15,230.98 1243.71,228.787 1244.28,230.048 1244.85,228.937 1245.42,229.111 1245.99,228.47 1246.56,229.732 1247.12,229.618 1247.69,230.882 1248.26,228.804 1248.83,228.974 1249.4,228.114 1249.97,229.027 1250.53,230.354 1251.1,231.564 1251.67,230.687 1252.24,231.489 1252.81,233.591 1253.38,233.426 1253.94,234.423 1254.51,235.17 1255.08,233.703 1255.65,233.49 1256.22,233.359 1256.79,234.947 1257.35,234.574 1257.92,235.461 1258.49,235.146 1259.06,233.74 1259.63,234.222 1260.2,230.652 1260.76,231.746 1261.33,230.276 1261.9,231.564 1262.47,230.252 1263.04,230.359 1263.61,230.454 1264.18,230.263 1264.74,229.314 1265.31,230.405 1265.88,230.348 1266.45,228.575 1267.02,227.616 1267.59,229.661 1268.15,230.632 1268.72,228.443 1269.29,226.33 1269.86,227.824 1270.43,228.061 1271,226.946 1271.56,227.108 1272.13,226.239 1272.7,226.64 1273.27,226.843 1273.84,226.102 1274.41,225.237 1274.97,223.528 1275.54,221.962 1276.11,220.513 1276.68,223.187 1277.25,223.527 1277.82,222.89 1278.38,223.452 1278.95,224 1279.52,225.705 1280.09,227.072 1280.66,230.651 1281.23,228.879 1281.79,229.997 1282.36,230.1 1282.93,231.154 1283.5,233.306 1284.07,230.87 1284.64,232.779 1285.2,234.772 1285.77,237.601 1286.34,237.277 1286.91,236.824 1287.48,233.228 1288.05,233.192 1288.61,232.113 1289.18,231.965 1289.75,230.735 1290.32,229.583 1290.89,229.66 1291.46,229.702 1292.02,228.894 1292.59,229.192 1293.16,230.264 1293.73,231.278 1294.3,231.123 1294.87,229.967 1295.43,227.955 1296,229.27 1296.57,228.165 1297.14,228.331 1297.71,229.415 1298.28,230.551 1298.84,229.447 1299.41,230.358 1299.98,231.63 1300.55,233.719 1301.12,232.238 1301.69,235.024 1302.25,234.689 1302.82,232.343 1303.39,232.101 1303.96,233.077 1304.53,232.842 1305.1,232.497 1305.66,231.337 1306.23,230.35 1306.8,230.377 1307.37,228.228 1307.94,228.359 1308.51,229.4 1309.07,230.304 1309.64,229.159 1310.21,229.311 1310.78,228.412 1311.35,230.488 1311.92,231.643 1312.48,231.278 1313.05,233.089 1313.62,231.819 1314.19,231.635 1314.76,231.609 1315.33,228.393 1315.89,228.405 1316.46,227.751 1317.03,231.054 1317.6,230.078 1318.17,230.883 1318.74,230.621 1319.3,230.365 1319.87,232.252 1320.44,231.963 1321.01,231.649 1321.58,232.615 1322.15,233.69 1322.71,233.195 1323.28,231.888 1323.85,232.774 1324.42,231.416 1324.99,229.295 1325.56,225.382 1326.12,226.562 1326.69,227.676 1327.26,231.144 1327.83,232.109 1328.4,232.082 1328.97,231.865 1329.53,235.483 1330.1,235.059 1330.67,235.528 1331.24,235.994 1331.81,235.307 1332.38,235.9 1332.94,235.355 1333.51,234.674 1334.08,236.169 1334.65,236.693 1335.22,235.948 1335.79,235.307 1336.36,231.465 1336.92,231.356 1337.49,230.991 1338.06,229.713 1338.63,229.438 1339.2,228.427 1339.77,229.482 1340.33,230.372 1340.9,230.201 1341.47,230.856 1342.04,232.507 1342.61,232.06 1343.18,232.801 1343.74,232.663 1344.31,233.364 1344.88,231.756 1345.45,232.416 1346.02,234.061 1346.59,232.512 1347.15,233.283 1347.72,232.494 1348.29,230.917 1348.86,231.499 1349.43,234.248 1350,230.645 1350.56,229.076 1351.13,228.917 1351.7,228.695 1352.27,227.503 1352.84,229.297 1353.41,230.213 1353.97,228.921 1354.54,228.938 1355.11,227.818 1355.68,226.761 1356.25,227.987 1356.82,224.867 1357.38,225.035 1357.95,227.237 1358.52,228.32 1359.09,230.436 1359.66,231.481 1360.23,230.332 1360.79,230.027 1361.36,228.774 1361.93,228.596 1362.5,230.414 1363.07,228.188 1363.64,229.219 1364.2,226.912 1364.77,226.066 1365.34,226.227 1365.91,227.188 1366.48,228.501 1367.05,228.806 1367.61,228.639 1368.18,230.826 1368.75,230.753 1369.32,232.373 1369.89,232.153 1370.46,230.761 1371.02,231.736 1371.59,228.214 1372.16,232.201 1372.73,231.983 1373.3,231.632 1373.87,232.262 1374.43,230.85 1375,229.449 1375.57,230.266 1376.14,228.74 1376.71,229.699 1377.28,229.489 1377.84,231.196 1378.41,230.61 1378.98,231.368 1379.55,229.97 1380.12,230.662 1380.69,229.374 1381.25,229.534 1381.82,230.296 1382.39,231.194 1382.96,231.139 1383.53,230.901 1384.1,230.54 1384.66,230.215 1385.23,227.752 1385.8,227.905 1386.37,230.148 1386.94,232.027 1387.51,229.52 1388.07,228.134 1388.64,227.16 1389.21,227.04 1389.78,227.1 1390.35,226.913 1390.92,225.918 1391.48,225.142 1392.05,226.049 1392.62,224.878 1393.19,224.058 1393.76,224.105 1394.33,225.179 1394.89,227.472 1395.46,227.446 1396.03,227.618 1396.6,227.463 1397.17,228.36 1397.74,229.258 1398.3,226.09 1398.87,225.099 1399.44,224.323 1400.01,224.7 1400.58,221.717 1401.15,222.176 1401.71,220.528 1402.28,220.954 1402.85,222.447 1403.42,223.779 1403.99,225.12 1404.56,223.526 1405.13,223.943 1405.69,225.273 1406.26,224.771 1406.83,224.146 1407.4,225.389 1407.97,226.679 1408.54,225.963 1409.1,227.283 1409.67,228.493 1410.24,227.574 1410.81,228.913 1411.38,228.818 1411.95,232.886 1412.51,231.538 1413.08,233.448 1413.65,233.048 1414.22,232.831 1414.79,233.689 1415.36,233.265 1415.92,234.118 1416.49,232.868 1417.06,232.673 1417.63,231.451 1418.2,231.208 1418.77,231.082 1419.33,229.182 1419.9,229.311 1420.47,228.354 1421.04,226.308 1421.61,225.338 1422.18,224.454 1422.74,222.73 1423.31,220.073 1423.88,223.888 1424.45,225.409 1425.02,225.654 1425.59,228.141 1426.15,228.13 1426.72,228.25 1427.29,232.795 1427.86,232.485 1428.43,232.243 1429,234.07 1429.56,234.795 1430.13,232.366 1430.7,234.181 1431.27,233.779 1431.84,232.366 1432.41,232.06 1432.97,232.685 1433.54,231.068 1434.11,228.962 1434.68,229.081 1435.25,225.837 1435.82,222.928 1436.38,222.141 1436.95,222.575 1437.52,222.288 1438.09,221.823 1438.66,222.421 1439.23,221.961 1439.79,223.565 1440.36,223.067 1440.93,223.501 1441.5,224.827 1442.07,223.829 1442.64,223.234 1443.2,224.605 1443.77,224.067 1444.34,222.403 1444.91,222.025 1445.48,223.631 1446.05,223.969 1446.61,221.444 1447.18,219.895 1447.75,222.675 1448.32,220.311 1448.89,222.251 1449.46,222.935 1450.02,222.519 1450.59,221.948 1451.16,224.451 1451.73,226.841 1452.3,227.356 1452.87,226.643 1453.43,226.959 1454,228.551 1454.57,230.682 1455.14,231.652 1455.71,230.479 1456.28,231.797 1456.84,230.784 1457.41,231.755 1457.98,233.9 1458.55,233.582 1459.12,232.415 1459.69,229.362 1460.25,227.291 1460.82,228.437 1461.39,227.782 1461.96,225.851 1462.53,227.356 1463.1,229.897 1463.66,229.193 1464.23,229.259 1464.8,229.402 1465.37,229.555 1465.94,230.921 1466.51,231.177 1467.07,230.327 1467.64,230.479 1468.21,231.832 1468.78,235.825 1469.35,234.528 1469.92,232.528 1470.48,230.256 1471.05,231.332 1471.62,231.439 1472.19,230.258 1472.76,230.272 1473.33,231.382 1473.89,230.376 1474.46,230.651 1475.03,231.859 1475.6,230.864 1476.17,231.823 1476.74,232.715 1477.31,234.787 1477.87,233.685 1478.44,234.476 1479.01,232.126 1479.58,233.12 1480.15,235.125 1480.72,234.764 1481.28,233.37 1481.85,232.194 1482.42,231.045 1482.99,232.064 1483.56,231.925 1484.13,232.929 1484.69,233.694 1485.26,232.269 1485.83,234.373 1486.4,232.949 1486.97,233.68 1487.54,232.283 1488.1,230.983 1488.67,231.732 1489.24,231.653 1489.81,231.506 1490.38,232.423 1490.95,233.33 1491.51,232.896 1492.08,231.714 1492.65,232.569 1493.22,233.299 1493.79,232.908 1494.36,232.569 1494.92,233.346 1495.49,233.126 1496.06,233.657 1496.63,233.363 1497.2,234.067 1497.77,233.755 1498.33,232.244 1498.9,231.054 1499.47,229.885 1500.04,229.803 1500.61,227.696 1501.18,226.913 1501.74,226.971 1502.31,227.196 1502.88,228.655 1503.45,226.704 1504.02,227.92 1504.59,227.992 1505.15,227.788 1505.72,228.947 1506.29,227.975 1506.86,228.024 1507.43,230.02 1508,228.743 1508.56,229.904 1509.13,230.962 1509.7,229.871 1510.27,229.829 1510.84,229.736 1511.41,229.841 1511.97,230.957 1512.54,232.774 1513.11,233.178 1513.68,227.82 1514.25,227.992 1514.82,227.247 1515.38,226.291 1515.95,226.478 1516.52,226.507 1517.09,227.771 1517.66,229.859 1518.23,229.978 1518.79,230.028 1519.36,229.019 1519.93,229.113 1520.5,232.254 1521.07,230.144 1521.64,230.05 1522.2,229.142 1522.77,228.295 1523.34,231.319 1523.91,230.23 1524.48,231.355 1525.05,231.234 1525.61,229.951 1526.18,227.859 1526.75,226.859 1527.32,228.882 1527.89,227.814 1528.46,227.821 1529.02,227.99 1529.59,229.027 1530.16,229.115 1530.73,229.884 1531.3,231.04 1531.87,229.947 1532.43,227.835 1533,229.134 1533.57,227.072 1534.14,225.176 1534.71,224.479 1535.28,224.702 1535.84,221.867 1536.41,222.382 1536.98,220.962 1537.55,222.689 1538.12,225.006 1538.69,227.33 1539.25,225.738 1539.82,223.949 1540.39,225.4 1540.96,224.894 1541.53,223.659 1542.1,224.198 1542.66,224.631 1543.23,224.909 1543.8,226.326 1544.37,226.717 1544.94,226.918 1545.51,227.204 1546.08,227.292 1546.64,228.444 1547.21,227.641 1547.78,226.713 1548.35,227.066 1548.92,228.432 1549.49,228.885 1550.05,228.985 1550.62,230.345 1551.19,229.295 1551.76,234.784 1552.33,234.536 1552.9,233.336 1553.46,233.182 1554.03,231.981 1554.6,232.906 1555.17,230.754 1555.74,231.74 1556.31,232.517 1556.87,231.318 1557.44,234.128 1558.01,233.823 1558.58,234.534 1559.15,232.058 1559.72,232.922 1560.28,234.008 1560.85,232.795 1561.42,231.732 1561.99,232.654 1562.56,232.597 1563.13,232.447 1563.69,231.432 1564.26,233.299 1564.83,230.976 1565.4,230.971 1565.97,231.952 1566.54,231.228 1567.1,231.321 1567.67,230.355 1568.24,231.429 1568.81,230.462 1569.38,231.414 1569.95,230.185 1570.51,229.093 1571.08,228.938 1571.65,227.993 1572.22,230.306 1572.79,230.416 1573.36,232.606 1573.92,232.567 1574.49,233.438 1575.06,233.219 1575.63,234.062 1576.2,232.731 1576.77,235.564 1577.33,235.197 1577.9,236.639 1578.47,235.031 1579.04,233.741 1579.61,234.518 1580.18,232.936 1580.74,229.328 1581.31,229.265 1581.88,229.108 1582.45,229.056 1583.02,231.237 1583.59,231.255 1584.15,233.148 1584.72,231.849 1585.29,231.59 1585.86,232.411 1586.43,233.095 1587,233.608 1587.56,234.459 1588.13,234.058 1588.7,234.708 1589.27,232.25 1589.84,231.946 1590.41,232.548 1590.97,232.276 1591.54,234.01 1592.11,235.599 1592.68,234.16 1593.25,233.944 1593.82,232.519 1594.38,232.215 1594.95,231.893 1595.52,231.629 1596.09,230.439 1596.66,228.301 1597.23,228.397 1597.79,228.507 1598.36,225.405 1598.93,226.984 1599.5,228.346 1600.07,229.516 1600.64,228.394 1601.2,229.308 1601.77,228.258 1602.34,228.477 1602.91,227.36 1603.48,227.56 1604.05,225.416 1604.61,225.787 1605.18,224.67 1605.75,223.721 1606.32,224.189 1606.89,226.417 1607.46,226.465 1608.02,226.932 1608.59,229.263 1609.16,229.065 1609.73,231.058 1610.3,232.033 1610.87,232.685 1611.43,232.266 1612,231.926 1612.57,232.975 1613.14,231.636 1613.71,231.366 1614.28,231.085 1614.84,230.978 1615.41,228.685 1615.98,227.489 1616.55,227.344 1617.12,228.521 1617.69,227.419 1618.26,231.492 1618.82,232.182 1619.39,231.767 1619.96,231.534 1620.53,233.221 1621.1,232.084 1621.67,230.957 1622.23,229.476 1622.8,229.537 1623.37,228.212 1623.94,228.326 1624.51,228.185 1625.08,228.134 1625.64,230.163 1626.21,232.147 1626.78,229.885 1627.35,227.601 1627.92,227.605 1628.49,226.792 1629.05,228.141 1629.62,228.066 1630.19,228.115 1630.76,228.109 1631.33,227.448 1631.9,225.196 1632.46,225.375 1633.03,227.72 1633.6,226.859 1634.17,226.911 1634.74,226.76 1635.31,227.809 1635.87,227.942 1636.44,227.049 1637.01,226.056 1637.58,225.014 1638.15,224.194 1638.72,225.55 1639.28,226.834 1639.85,228.125 1640.42,225.126 1640.99,225.394 1641.56,226.816 1642.13,229.033 1642.69,228.087 1643.26,228.388 1643.83,229.401 1644.4,229.361 1644.97,229.548 1645.54,227.436 1646.1,225.503 1646.67,224.653 1647.24,224.956 1647.81,227.065 1648.38,225.149 1648.95,228.863 1649.51,229.958 1650.08,228.981 1650.65,229.063 1651.22,230.275 1651.79,232.484 1652.36,231.137 1652.92,231.997 1653.49,228.945 1654.06,229.079 1654.63,230.952 1655.2,232 1655.77,230.872 1656.33,227.526 1656.9,227.773 1657.47,227.756 1658.04,227.834 1658.61,227.935 1659.18,225.673 1659.74,228.113 1660.31,230.186 1660.88,229.028 1661.45,227.931 1662.02,230.165 1662.59,229.007 1663.15,230.308 1663.72,230.587 1664.29,230.448 1664.86,231.184 1665.43,232.11 1666,230.564 1666.56,229.575 1667.13,230.675 1667.7,232.751 1668.27,233.368 1668.84,234.229 1669.41,231.998 1669.97,231.695 1670.54,232.541 1671.11,230.274 1671.68,228.173 1672.25,228.399 1672.82,227.395 1673.38,228.512 1673.95,227.549 1674.52,228.612 1675.09,229.583 1675.66,229.532 1676.23,228.292 1676.79,227.352 1677.36,228.333 1677.93,227.171 1678.5,227.096 1679.07,226.125 1679.64,227.41 1680.2,228.713 1680.77,229.872 1681.34,229.189 1681.91,227.267 1682.48,226.549 1683.05,226.682 1683.61,226.964 1684.18,228.293 1684.75,227.317 1685.32,227.679 1685.89,229.793 1686.46,227.786 1687.02,228.713 1687.59,228.762 1688.16,230.815 1688.73,229.443 1689.3,229.478 1689.87,228.467 1690.44,229.414 1691,225.154 1691.57,227.366 1692.14,227.708 1692.71,227.994 1693.28,231.185 1693.85,230.989 1694.41,230.807 1694.98,231.951 1695.55,231.871 1696.12,229.685 1696.69,228.586 1697.26,228.664 1697.82,228.837 1698.39,229.981 1698.96,229.233 1699.53,229.213 1700.1,232.357 1700.67,233.988 1701.23,233.661 1701.8,231.343 1702.37,231.337 1702.94,230.327 1703.51,230.209 1704.08,232 1704.64,229.808 1705.21,229.583 1705.78,230.759 1706.35,231.808 1706.92,230.587 1707.49,230.354 1708.05,231.399 1708.62,230.943 1709.19,231.735 1709.76,231.498 1710.33,233.272 1710.9,234.032 1711.46,233.479 1712.03,230.983 1712.6,230.76 1713.17,231.738 1713.74,231.6 1714.31,232.533 1714.87,231.322 1715.44,229.196 1716.01,228.058 1716.58,227.938 1717.15,227.95 1717.72,229.132 1718.28,229.003 1718.85,228.932 1719.42,229.065 1719.99,229.081 1720.56,225.836 1721.13,226.218 1721.69,225.43 1722.26,224.436 1722.83,222.727 1723.4,223.35 1723.97,222.92 1724.54,224.241 1725.1,226.866 1725.67,227.022 1726.24,227.18 1726.81,226.471 1727.38,227.042 1727.95,228.369 1728.51,227.43 1729.08,226.679 1729.65,227.886 1730.22,227.897 1730.79,228.854 1731.36,228.795 1731.92,229.788 1732.49,227.713 1733.06,228.766 1733.63,228.643 1734.2,227.633 1734.77,228.929 1735.33,230.063 1735.9,229.286 1736.47,228.499 1737.04,229.63 1737.61,228.582 1738.18,228.979 1738.74,233.206 1739.31,231.907 1739.88,232.941 1740.45,232.727 1741.02,231.537 1741.59,230.573 1742.15,230.287 1742.72,230.146 1743.29,231.125 1743.86,231.098 1744.43,230.182 1745,232.299 1745.56,230.928 1746.13,230.742 1746.7,234.156 1747.27,233.787 1747.84,232.514 1748.41,231.279 1748.97,228.993 1749.54,228.049 1750.11,228.103 1750.68,227.309 1751.25,229.47 1751.82,229.682 1752.38,230.697 1752.95,229.747 1753.52,230.592 1754.09,230.752 1754.66,231.743 1755.23,231.445 1755.79,232.486 1756.36,233.495 1756.93,234.358 1757.5,232.875 1758.07,231.488 1758.64,231.492 1759.21,230.341 1759.77,227.166 1760.34,227.463 1760.91,228.345 1761.48,228.605 1762.05,230.741 1762.62,229.603 1763.18,225.495 1763.75,223.876 1764.32,224.389 1764.89,225.753 1765.46,228.059 1766.03,229.267 1766.59,228.304 1767.16,228.794 1767.73,229.819 1768.3,230.866 1768.87,229.737 1769.44,233.867 1770,232.515 1770.57,231.229 1771.14,234.405 1771.71,237.045 1772.28,232.432 1772.85,233.261 1773.41,234.008 1773.98,232.664 1774.55,231.212 1775.12,232.084 1775.69,232.801 1776.26,231.502 1776.82,231.328 1777.39,230.045 1777.96,230.026 1778.53,231.866 1779.1,230.556 1779.67,231.467 1780.23,230.258 1780.8,229.034 1781.37,231.912 1781.94,231.643 1782.51,230.441 1783.08,230.407 1783.64,231.422 1784.21,231.144 1784.78,232.11 1785.35,233.113 1785.92,231.851 1786.49,231.82 1787.05,230.533 1787.62,232.466 1788.19,232.155 1788.76,232.079 1789.33,231.924 1789.9,229.678 1790.46,231.631 1791.03,230.339 1791.6,232.665 1792.17,232.391 1792.74,231.918 1793.31,231.609 1793.87,230.533 1794.44,231.55 1795.01,233.524 1795.58,232.966 1796.15,232.857 1796.72,231.525 1797.28,231.19 1797.85,232.984 1798.42,232.522 1798.99,233.001 1799.56,233.373 1800.13,229.924 1800.69,229.607 1801.26,226.341 1801.83,227.347 1802.4,228.189 1802.97,228.104 1803.54,227.122 1804.1,227.025 1804.67,225.949 1805.24,227.127 1805.81,227.648 1806.38,228.881 1806.95,228.766 1807.51,227.591 1808.08,228.606 1808.65,228.592 1809.22,228.222 1809.79,226.951 1810.36,227.068 1810.92,226.01 1811.49,225.112 1812.06,224.421 1812.63,224.93 1813.2,227.219 1813.77,227.054 1814.33,230.218 1814.9,230.226 1815.47,229.952 1816.04,227.654 1816.61,226.845 1817.18,223.915 1817.74,224.357 1818.31,225.713 1818.88,225.015 1819.45,224.356 1820.02,225.779 1820.59,226.929 1821.15,227.11 1821.72,227.225 1822.29,227.302 1822.86,227.411 1823.43,225.455 1824,224.5 1824.56,222.603 1825.13,223.032 1825.7,223.508 1826.27,223.907 1826.84,224.329 1827.41,226.688 1827.97,227.015 1828.54,227.041 1829.11,226.123 1829.68,225.423 1830.25,224.981 1830.82,225.167 1831.39,227.554 1831.95,225.852 1832.52,224.176 1833.09,222.704 1833.66,223.228 1834.23,224.875 1834.8,226.376 1835.36,228.652 1835.93,228.826 1836.5,227.959 1837.07,227.143 1837.64,226.46 1838.21,229.872 1838.77,230.863 1839.34,230.875 1839.91,230.035 1840.48,231.105 1841.05,230.034 1841.62,229.924 1842.18,229.049 1842.75,229.266 1843.32,228.135 1843.89,226.46 1844.46,226.774 1845.03,232.18 1845.59,231.873 1846.16,230.646 1846.73,230.563 1847.3,229.551 1847.87,229.645 1848.44,230.753 1849,232.574 1849.57,232.411 1850.14,232.184 1850.71,234.042 1851.28,234.964 1851.85,233.526 1852.41,233.145 1852.98,233.911 1853.55,234.712 1854.12,232.426 1854.69,232.14 1855.26,231.953 1855.82,231.023 1856.39,230.977 1856.96,231.815 1857.53,232.649 1858.1,232.442 1858.67,231.191 1859.23,233.189 1859.8,232.736 1860.37,232.52 1860.94,233.384 1861.51,233.315 1862.08,234.189 1862.64,233.951 1863.21,234.612 1863.78,233.139 1864.35,234.892 1864.92,233.407 1865.49,232.102 1866.05,231.76 1866.62,230.256 1867.19,230.231 1867.76,229.034 1868.33,230.3 1868.9,232.351 1869.46,235.207 1870.03,233.638 1870.6,233.121 1871.17,230.549 1871.74,229.221 1872.31,229.145 1872.87,227.229 1873.44,228.255 1874.01,227.457 1874.58,228.25 1875.15,228.24 1875.72,228.272 1876.28,228.288 1876.85,229.434 1877.42,229.359 1877.99,231.345 1878.56,231.223 1879.13,232.23 1879.69,233.006 1880.26,231.849 1880.83,230.703 1881.4,230.402 1881.97,232.356 1882.54,233.221 1883.1,232.891 1883.67,229.42 1884.24,228.292 1884.81,228.419 1885.38,227.476 1885.95,228.518 1886.51,227.426 1887.08,226.225 1887.65,226.367 1888.22,229.465 1888.79,228.379 1889.36,230.515 1889.92,231.514 1890.49,230.516 1891.06,228.214 1891.63,229.196 1892.2,229.235 1892.77,229.087 1893.33,230.24 1893.9,229.268 1894.47,228.422 1895.04,228.382 1895.61,227.249 1896.18,229.474 1896.74,229.376 1897.31,226.327 1897.88,226.402 1898.45,225.643 1899.02,224.858 1899.59,226.013 1900.16,228.359 1900.72,228.518 1901.29,228.377 1901.86,228.598 1902.43,227.467 1903,226.785 1903.57,225.827 1904.13,225.024 1904.7,224.302 1905.27,223.639 1905.84,223.899 1906.41,224.256 1906.98,223.723 1907.54,222.016 1908.11,221.458 1908.68,221.068 1909.25,222.84 1909.82,223.43 1910.39,224.851 1910.95,222.164 1911.52,220.728 1912.09,222.606 1912.66,225.097 1913.23,224.426 1913.8,224.726 1914.36,224.148 1914.93,224.549 1915.5,224.896 1916.07,227.147 1916.64,226.427 1917.21,229.711 1917.77,229.861 1918.34,229.903 1918.91,227.182 1919.48,228.577 1920.05,224.714 1920.62,221.995 1921.18,223.687 1921.75,227.619 1922.32,224.921 1922.89,225.503 1923.46,224.701 1924.03,225.232 1924.59,226.489 1925.16,227.793 1925.73,233.387 1926.3,234.525 1926.87,233.114 1927.44,230.935 1928,231.887 1928.57,233.853 1929.14,234.767 1929.71,232.474 1930.28,231.391 1930.85,232.594 1931.41,229.322 1931.98,231.551 1932.55,229.437 1933.12,231.666 1933.69,229.645 1934.26,230.894 1934.82,229.094 1935.39,229.307 1935.96,231.446 1936.53,232.306 1937.1,236.479 1937.67,234.97 1938.23,233.613 1938.8,233.405 1939.37,231.212 1939.94,232.212 1940.51,230.935 1941.08,229.762 1941.64,229.785 1942.21,232.939 1942.78,230.883 1943.35,231.868 1943.92,234.675 1944.49,234.274 1945.05,234.018 1945.62,231.606 1946.19,231.654 1946.76,232.452 1947.33,233.326 1947.9,233.193 1948.46,234.109 1949.03,235.939 1949.6,236.474 1950.17,235.052 1950.74,234.589 1951.31,234.274 1951.87,232.867 1952.44,231.498 1953.01,231.525 1953.58,231.399 1954.15,230.263 1954.72,231.318 1955.28,231.265 1955.85,231.076 1956.42,230.929 1956.99,230.978 1957.56,232.082 1958.13,232.839 1958.69,231.732 1959.26,231.764 1959.83,232.737 1960.4,231.447 1960.97,232.21 1961.54,230.784 1962.1,230.655 1962.67,226.501 1963.24,226.603 1963.81,227.651 1964.38,227.786 1964.95,228.947 1965.51,224.877 1966.08,226.437 1966.65,227.74 1967.22,226.872 1967.79,228.231 1968.36,229.123 1968.92,228.071 1969.49,228.88 1970.06,229.871 1970.63,229.72 1971.2,231.625 1971.77,229.63 1972.34,228.615 1972.9,229.63 1973.47,228.666 1974.04,227.706 1974.61,226.794 1975.18,227.954 1975.75,229.24 1976.31,231.418 1976.88,233.29 1977.45,235.121 1978.02,236.598 1978.59,235.157 1979.16,237.843 1979.72,237.216 1980.29,236.623 1980.86,235.129 1981.43,233.577 1982,231.129 1982.57,234.007 1983.13,233.6 1983.7,234.119 1984.27,233.488 1984.84,233.14 1985.41,233.686 1985.98,232.261 1986.54,231.927 1987.11,232.625 1987.68,232.203 1988.25,231.965 1988.82,229.688 1989.39,228.366 1989.95,228.346 1990.52,229.302 1991.09,229.207 1991.66,227.87 1992.23,230.083 1992.8,231.022 1993.36,229.659 1993.93,228.545 1994.5,229.611 1995.07,229.526 1995.64,228.526 1996.21,229.366 1996.77,227.244 1997.34,228.182 1997.91,229.191 1998.48,229.239 1999.05,228.1 1999.62,231.132 2000.18,228.866 2000.75,228.853 2001.32,227.917 2001.89,225.893 2002.46,226.09 2003.03,225.37 2003.59,224.531 2004.16,224.82 2004.73,225.007 2005.3,227.145 2005.87,228.293 2006.44,227.529 2007,228.397 2007.57,228.612 2008.14,229.745 2008.71,228.301 2009.28,230.296 2009.85,230.155 2010.41,228.822 2010.98,228.991 2011.55,228.756 2012.12,229.721 2012.69,229.687 2013.26,230.676 2013.82,229.458 2014.39,229.364 2014.96,228.221 2015.53,227.997 2016.1,228.068 2016.67,224.962 2017.23,226.051 2017.8,227.338 2018.37,228.349 2018.94,227.317 2019.51,227.383 2020.08,228.575 2020.64,227.759 2021.21,225.615 2021.78,225.729 2022.35,226.033 2022.92,225.589 2023.49,225.945 2024.05,226.127 2024.62,226.507 2025.19,227.953 2025.76,228.944 2026.33,226.706 2026.9,229.086 2027.46,229.036 2028.03,226.999 2028.6,226.044 2029.17,227.225 2029.74,228.478 2030.31,227.724 2030.87,227.888 2031.44,228.071 2032.01,227.055 2032.58,231.442 2033.15,232.209 2033.72,233.262 2034.28,234.097 2034.85,234.666 2035.42,231.079 2035.99,231.261 2036.56,232.2 2037.13,230.009 2037.69,227.754 2038.26,231.048 2038.83,229.9 2039.4,229.863 2039.97,229.957 2040.54,230.833 2041.11,230.712 2041.67,230.94 2042.24,230.89 2042.81,230.849 2043.38,231.614 2043.95,233.365 2044.52,232.939 2045.08,231.506 2045.65,232.32 2046.22,233.074 2046.79,231.94 2047.36,232.945 2047.93,232.714 2048.49,233.49 2049.06,233.114 2049.63,232.707 2050.2,231.404 2050.77,230.269 2051.34,230.305 2051.9,231.202 2052.47,227.823 2053.04,225.814 2053.61,223.795 2054.18,223.148 2054.75,223.557 2055.31,224.937 2055.88,222.064 2056.45,220.794 2057.02,222.189 2057.59,222.647 2058.16,222.954 2058.72,222.502 2059.29,224.071 2059.86,223.534 2060.43,226.112 2061,226.338 2061.57,226.847 2062.13,226.929 2062.7,227.202 2063.27,225.544 2063.84,226.862 2064.41,228.389 2064.98,230.631 2065.54,230.666 2066.11,230.866 2066.68,229.92 2067.25,230.028 2067.82,231.988 2068.39,230.807 2068.95,229.606 2069.52,227.634 2070.09,226.606 2070.66,225.85 2071.23,227.165 2071.8,226.471 2072.36,224.777 2072.93,225.124 2073.5,224.587 2074.07,225.232 2074.64,224.588 2075.21,224.058 2075.77,226.682 2076.34,228.062 2076.91,227.221 2077.48,231.709 2078.05,231.692 2078.62,231.675 2079.18,232.858 2079.75,233.693 2080.32,233.408 2080.89,234.184 2081.46,235.249 2082.03,236.013 2082.59,235.647 2083.16,234.1 2083.73,233.873 2084.3,234.534 2084.87,233.167 2085.44,232.994 2086,231.775 2086.57,232.736 2087.14,234.743 2087.71,236.612 2088.28,236.215 2088.85,234.777 2089.41,233.156 2089.98,232.003 2090.55,231.878 2091.12,231.496 2091.69,231.377 2092.26,232.054 2092.82,232.753 2093.39,230.513 2093.96,229.294 2094.53,228.23 2095.1,228.412 2095.67,227.323 2096.23,225.518 2096.8,225.592 2097.37,225.96 2097.94,226.242 2098.51,227.495 2099.08,226.456 2099.64,227.666 2100.21,228.981 2100.78,228.008 2101.35,226.634 2101.92,225.626 2102.49,226.002 2103.05,225.361 2103.62,225.523 2104.19,225.74 2104.76,223.014 2105.33,223.462 2105.9,224.916 2106.46,224.237 2107.03,227.499 2107.6,228.63 2108.17,225.723 2108.74,225.978 2109.31,227.415 2109.87,227.594 2110.44,226.618 2111.01,228.063 2111.58,229.167 2112.15,228.429 2112.72,226.67 2113.29,227.018 2113.85,229.23 2114.42,228.2 2114.99,229.265 2115.56,228.233 2116.13,229.174 2116.7,229.199 2117.26,231.366 2117.83,230.146 2118.4,227.124 2118.97,227.451 2119.54,227.578 2120.11,227.755 2120.67,229.089 2121.24,230.333 2121.81,232.267 2122.38,232.239 2122.95,231.262 2123.52,231.39 2124.08,231.448 2124.65,231.372 2125.22,230.297 2125.79,229.1 2126.36,230.284 2126.93,229.319 2127.49,228.492 2128.06,228.581 2128.63,227.781 2129.2,226.002 2129.77,226.2 2130.34,226.509 2130.9,226.807 2131.47,228.088 2132.04,226.223 2132.61,228.612 2133.18,228.89 2133.75,229.788 2134.31,229.766 2134.88,229.93 2135.45,231.173 2136.02,231.236 2136.59,233.248 2137.16,233.944 2137.72,233.514 2138.29,234.155 2138.86,232.822 2139.43,231.591 2140,229.305 2140.57,228.499 2141.13,229.446 2141.7,229.576 2142.27,230.564 2142.84,229.472 2143.41,229.357 2143.98,228.359 2144.54,228.276 2145.11,229.313 2145.68,231.379 2146.25,231.145 2146.82,231.977 2147.39,232.777 2147.95,232.738 2148.52,233.461 2149.09,235.262 2149.66,232.786 2150.23,232.59 2150.8,233.348 2151.36,234.02 2151.93,231.658 2152.5,231.47 2153.07,231.222 2153.64,231.075 2154.21,230.849 2154.77,231.822 2155.34,230.793 2155.91,229.611 2156.48,226.453 2157.05,225.565 2157.62,226.732 2158.18,227.959 2158.75,228.21 2159.32,227.342 2159.89,227.402 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.023\n  with uncertainty of ± 0.0021137991509915994\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01256 ± (0.00224719, 0.00226907) (MC)\n  95% confidence interval: [-4.01683, -4.00818]) (MC)\n  linear error propagation: -4.01265 ± 0.00225123\n  |δ_y| = |0.00156781| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012556433242613, val_l = 0.004269795681142163, val_u = 0.0043723276823497415)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.79 2211.02,1152.79 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1001.11 2211.02,1001.11 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,849.431 2211.02,849.431 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,697.752 2211.02,697.752 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,546.074 2211.02,546.074 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,394.395 2211.02,394.395 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,242.716 2211.02,242.716 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.79 365.751,1152.79 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1001.11 365.751,1001.11 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,849.431 365.751,849.431 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,697.752 365.751,697.752 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,546.074 365.751,546.074 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,394.395 365.751,394.395 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,242.716 365.751,242.716 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M298.909 1138.59 Q295.298 1138.59 293.469 1142.15 Q291.664 1145.69 291.664 1152.82 Q291.664 1159.93 293.469 1163.49 Q295.298 1167.04 298.909 1167.04 Q302.543 1167.04 304.349 1163.49 Q306.177 1159.93 306.177 1152.82 Q306.177 1145.69 304.349 1142.15 Q302.543 1138.59 298.909 1138.59 M298.909 1134.88 Q304.719 1134.88 307.775 1139.49 Q310.853 1144.07 310.853 1152.82 Q310.853 1161.55 307.775 1166.16 Q304.719 1170.74 298.909 1170.74 Q293.099 1170.74 290.02 1166.16 Q286.964 1161.55 286.964 1152.82 Q286.964 1144.07 290.02 1139.49 Q293.099 1134.88 298.909 1134.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M259.557 1014.45 L267.196 1014.45 L267.196 988.089 L258.886 989.755 L258.886 985.496 L267.15 983.83 L271.826 983.83 L271.826 1014.45 L279.465 1014.45 L279.465 1018.39 L259.557 1018.39 L259.557 1014.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 986.908 Q295.298 986.908 293.469 990.473 Q291.664 994.015 291.664 1001.14 Q291.664 1008.25 293.469 1011.82 Q295.298 1015.36 298.909 1015.36 Q302.543 1015.36 304.349 1011.82 Q306.177 1008.25 306.177 1001.14 Q306.177 994.015 304.349 990.473 Q302.543 986.908 298.909 986.908 M298.909 983.205 Q304.719 983.205 307.775 987.811 Q310.853 992.394 310.853 1001.14 Q310.853 1009.87 307.775 1014.48 Q304.719 1019.06 298.909 1019.06 Q293.099 1019.06 290.02 1014.48 Q286.964 1009.87 286.964 1001.14 Q286.964 992.394 290.02 987.811 Q293.099 983.205 298.909 983.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M262.775 862.776 L279.094 862.776 L279.094 866.711 L257.15 866.711 L257.15 862.776 Q259.812 860.021 264.395 855.392 Q269.002 850.739 270.182 849.396 Q272.428 846.873 273.307 845.137 Q274.21 843.378 274.21 841.688 Q274.21 838.933 272.266 837.197 Q270.344 835.461 267.242 835.461 Q265.043 835.461 262.59 836.225 Q260.159 836.989 257.381 838.54 L257.381 833.818 Q260.205 832.683 262.659 832.105 Q265.113 831.526 267.15 831.526 Q272.52 831.526 275.715 834.211 Q278.909 836.896 278.909 841.387 Q278.909 843.517 278.099 845.438 Q277.312 847.336 275.205 849.929 Q274.627 850.6 271.525 853.817 Q268.423 857.012 262.775 862.776 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 835.23 Q295.298 835.23 293.469 838.794 Q291.664 842.336 291.664 849.466 Q291.664 856.572 293.469 860.137 Q295.298 863.679 298.909 863.679 Q302.543 863.679 304.349 860.137 Q306.177 856.572 306.177 849.466 Q306.177 842.336 304.349 838.794 Q302.543 835.23 298.909 835.23 M298.909 831.526 Q304.719 831.526 307.775 836.132 Q310.853 840.716 310.853 849.466 Q310.853 858.192 307.775 862.799 Q304.719 867.382 298.909 867.382 Q293.099 867.382 290.02 862.799 Q286.964 858.192 286.964 849.466 Q286.964 840.716 290.02 836.132 Q293.099 831.526 298.909 831.526 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M272.914 696.398 Q276.27 697.116 278.145 699.384 Q280.043 701.653 280.043 704.986 Q280.043 710.102 276.525 712.903 Q273.006 715.704 266.525 715.704 Q264.349 715.704 262.034 715.264 Q259.742 714.847 257.289 713.991 L257.289 709.477 Q259.233 710.611 261.548 711.19 Q263.863 711.768 266.386 711.768 Q270.784 711.768 273.076 710.032 Q275.39 708.296 275.39 704.986 Q275.39 701.931 273.238 700.218 Q271.108 698.481 267.289 698.481 L263.261 698.481 L263.261 694.639 L267.474 694.639 Q270.923 694.639 272.752 693.273 Q274.58 691.884 274.58 689.292 Q274.58 686.63 272.682 685.218 Q270.807 683.782 267.289 683.782 Q265.367 683.782 263.168 684.199 Q260.969 684.616 258.33 685.495 L258.33 681.329 Q260.992 680.588 263.307 680.218 Q265.645 679.847 267.705 679.847 Q273.029 679.847 276.131 682.278 Q279.233 684.685 279.233 688.806 Q279.233 691.676 277.59 693.667 Q275.946 695.634 272.914 696.398 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 683.551 Q295.298 683.551 293.469 687.116 Q291.664 690.657 291.664 697.787 Q291.664 704.893 293.469 708.458 Q295.298 712 298.909 712 Q302.543 712 304.349 708.458 Q306.177 704.893 306.177 697.787 Q306.177 690.657 304.349 687.116 Q302.543 683.551 298.909 683.551 M298.909 679.847 Q304.719 679.847 307.775 684.454 Q310.853 689.037 310.853 697.787 Q310.853 706.514 307.775 711.12 Q304.719 715.704 298.909 715.704 Q293.099 715.704 290.02 711.12 Q286.964 706.514 286.964 697.787 Q286.964 689.037 290.02 684.454 Q293.099 679.847 298.909 679.847 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M271.594 532.868 L259.789 551.317 L271.594 551.317 L271.594 532.868 M270.367 528.794 L276.247 528.794 L276.247 551.317 L281.177 551.317 L281.177 555.206 L276.247 555.206 L276.247 563.354 L271.594 563.354 L271.594 555.206 L255.992 555.206 L255.992 550.692 L270.367 528.794 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 531.872 Q295.298 531.872 293.469 535.437 Q291.664 538.979 291.664 546.108 Q291.664 553.215 293.469 556.78 Q295.298 560.321 298.909 560.321 Q302.543 560.321 304.349 556.78 Q306.177 553.215 306.177 546.108 Q306.177 538.979 304.349 535.437 Q302.543 531.872 298.909 531.872 M298.909 528.169 Q304.719 528.169 307.775 532.775 Q310.853 537.358 310.853 546.108 Q310.853 554.835 307.775 559.442 Q304.719 564.025 298.909 564.025 Q293.099 564.025 290.02 559.442 Q286.964 554.835 286.964 546.108 Q286.964 537.358 290.02 532.775 Q293.099 528.169 298.909 528.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M258.793 377.115 L277.15 377.115 L277.15 381.05 L263.076 381.05 L263.076 389.522 Q264.094 389.175 265.113 389.013 Q266.131 388.828 267.15 388.828 Q272.937 388.828 276.316 391.999 Q279.696 395.171 279.696 400.587 Q279.696 406.166 276.224 409.268 Q272.752 412.346 266.432 412.346 Q264.256 412.346 261.988 411.976 Q259.742 411.606 257.335 410.865 L257.335 406.166 Q259.418 407.3 261.641 407.856 Q263.863 408.411 266.34 408.411 Q270.344 408.411 272.682 406.305 Q275.02 404.198 275.02 400.587 Q275.02 396.976 272.682 394.87 Q270.344 392.763 266.34 392.763 Q264.465 392.763 262.59 393.18 Q260.738 393.596 258.793 394.476 L258.793 377.115 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 380.194 Q295.298 380.194 293.469 383.759 Q291.664 387.3 291.664 394.43 Q291.664 401.536 293.469 405.101 Q295.298 408.643 298.909 408.643 Q302.543 408.643 304.349 405.101 Q306.177 401.536 306.177 394.43 Q306.177 387.3 304.349 383.759 Q302.543 380.194 298.909 380.194 M298.909 376.49 Q304.719 376.49 307.775 381.097 Q310.853 385.68 310.853 394.43 Q310.853 403.157 307.775 407.763 Q304.719 412.346 298.909 412.346 Q293.099 412.346 290.02 407.763 Q286.964 403.157 286.964 394.43 Q286.964 385.68 290.02 381.097 Q293.099 376.49 298.909 376.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M269.326 240.853 Q266.178 240.853 264.326 243.006 Q262.497 245.159 262.497 248.909 Q262.497 252.635 264.326 254.811 Q266.178 256.964 269.326 256.964 Q272.474 256.964 274.303 254.811 Q276.154 252.635 276.154 248.909 Q276.154 245.159 274.303 243.006 Q272.474 240.853 269.326 240.853 M278.608 226.2 L278.608 230.46 Q276.849 229.626 275.043 229.186 Q273.261 228.747 271.502 228.747 Q266.872 228.747 264.418 231.872 Q261.988 234.997 261.641 241.316 Q263.006 239.302 265.066 238.237 Q267.127 237.149 269.603 237.149 Q274.812 237.149 277.821 240.321 Q280.853 243.469 280.853 248.909 Q280.853 254.233 277.705 257.45 Q274.557 260.668 269.326 260.668 Q263.33 260.668 260.159 256.084 Q256.988 251.478 256.988 242.751 Q256.988 234.557 260.877 229.696 Q264.766 224.811 271.316 224.811 Q273.076 224.811 274.858 225.159 Q276.664 225.506 278.608 226.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 228.515 Q295.298 228.515 293.469 232.08 Q291.664 235.622 291.664 242.751 Q291.664 249.858 293.469 253.422 Q295.298 256.964 298.909 256.964 Q302.543 256.964 304.349 253.422 Q306.177 249.858 306.177 242.751 Q306.177 235.622 304.349 232.08 Q302.543 228.515 298.909 228.515 M298.909 224.811 Q304.719 224.811 307.775 229.418 Q310.853 234.001 310.853 242.751 Q310.853 251.478 307.775 256.084 Q304.719 260.668 298.909 260.668 Q293.099 260.668 290.02 256.084 Q286.964 251.478 286.964 242.751 Q286.964 234.001 290.02 229.418 Q293.099 224.811 298.909 224.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1158.99 400.199,1050.27 400.786,948.498 401.372,855.105 401.958,771.086 402.545,696.435 403.131,726.25 403.718,745.669 404.304,678.515 404.891,618.727 405.477,562.724 406.063,511.987 406.65,466.175 407.236,424.97 407.823,388.073 408.409,355.205 408.995,326.104 409.582,301.801 410.168,279.438 410.755,260.15 411.341,243.731 411.927,231.211 412.514,219.895 413.1,248.842 413.687,240.784 414.273,268.04 414.86,263.878 415.446,261.578 416.032,259.887 416.619,259.753 417.205,284.655 417.792,287.9 418.378,291.902 418.964,297.528 419.551,321.281 420.137,345.107 420.724,352.461 421.31,360.773 421.896,369.291 422.483,378.845 423.069,414.176 423.656,424.337 424.242,434.778 424.829,445.566 425.415,456.874 426.001,468.237 426.588,498.236 427.174,509.816 427.761,528.841 428.347,563.813 428.933,590.06 429.52,628.678 430.106,644.276 430.693,654.276 431.279,664.735 431.865,674.802 432.452,685.467 433.038,695.593 433.625,711.057 434.211,730.987 434.798,745.51 435.384,759.561 435.97,781.642 436.557,790.188 437.143,802.835 437.73,815.121 438.316,834.957 438.902,850.045 439.489,864.501 440.075,871.447 440.662,882.058 441.248,895.23 441.835,908.337 442.421,923.869 443.007,930.019 443.594,941.431 444.18,947.021 444.767,955.213 445.353,960.819 445.939,966.651 446.526,980.026 447.112,990.328 447.699,995.501 448.285,1003.28 448.871,1010.77 449.458,1020.15 450.044,1028.97 450.631,1035.57 451.217,1042.07 451.804,1050.82 452.39,1056.89 452.976,1065.12 453.563,1068.91 454.149,1074.85 454.736,1078.65 455.322,1084.27 455.908,1089.62 456.495,1095.11 457.081,1104.28 457.668,1109.32 458.254,1116.09 458.84,1120.75 459.427,1125.35 460.013,1129.72 460.6,1135.61 461.186,1138.02 461.773,1142.02 462.359,1144.3 462.945,1149.98 463.532,1153.77 464.118,1154.04 464.705,1157.89 465.291,1167.84 465.877,1170.94 466.464,1175.53 467.05,1179.68 467.637,1183.95 468.223,1186.48 468.809,1187.28 469.396,1191.18 469.982,1194.84 470.569,1193.81 471.155,1194.43 471.742,1195.15 472.328,1198.8 472.914,1200.88 473.501,1201.45 474.087,1204.69 474.674,1206.74 475.26,1210.09 475.846,1213.09 476.433,1212.91 477.019,1212.91 477.606,1214.56 478.192,1214.4 478.778,1215.71 479.365,1218.58 479.951,1221.27 480.538,1222.33 481.124,1223.32 481.711,1225.83 482.297,1228.22 482.883,1229.24 483.47,1228.96 484.056,1229.81 484.643,1235.06 485.229,1231.75 485.815,1229.89 486.402,1232.34 486.988,1233.35 487.575,1232.91 488.161,1231.04 488.748,1230.88 489.334,1230.75 489.92,1230.49 490.507,1234.59 491.093,1235.63 491.68,1238.04 492.266,1237.59 492.852,1237.19 493.439,1239.48 494.025,1240.42 494.612,1239.99 495.198,1240.68 495.784,1245.36 496.371,1246.09 496.957,1248.17 497.544,1247.16 498.13,1250.19 498.717,1247.94 499.303,1248.16 499.889,1245.87 500.476,1247.41 501.062,1250.53 501.649,1247.08 502.235,1244.96 502.821,1246.88 503.408,1245.92 503.994,1245.01 504.581,1248.1 505.167,1245.99 505.753,1242.49 506.34,1243.32 506.926,1244.01 507.513,1241.92 508.099,1241.68 508.686,1241.14 509.272,1240.74 509.858,1237.53 510.445,1236.02 511.031,1238.36 511.618,1236.62 512.204,1239.29 512.79,1241.77 513.377,1241.4 513.963,1242.18 514.55,1240.28 515.136,1238.8 515.722,1238.55 516.309,1239.6 516.895,1239.04 517.482,1238.69 518.068,1238.36 518.655,1235.14 519.241,1238.7 519.827,1239.45 520.414,1239.04 521,1238.93 521.587,1238.66 522.173,1240.75 522.759,1241.46 523.346,1240.79 523.932,1244.05 524.519,1243.6 525.105,1243.16 525.691,1245.18 526.278,1245.99 526.864,1244.32 527.451,1243.82 528.037,1245.69 528.624,1245.04 529.21,1243.04 529.796,1241.2 530.383,1239.4 530.969,1244.22 531.556,1243.64 532.142,1242.64 532.728,1243.3 533.315,1240.28 533.901,1242.31 534.488,1243.01 535.074,1243.69 535.661,1243 536.247,1241.32 536.833,1242.33 537.42,1243.26 538.006,1242.58 538.593,1243.32 539.179,1242.83 539.765,1242.49 540.352,1243.46 540.938,1239.39 541.525,1241.66 542.111,1240.92 542.697,1245.57 543.284,1244.74 543.87,1244.29 544.457,1243.85 545.043,1243.11 545.63,1247.48 546.216,1247.65 546.802,1247.89 547.389,1247.02 547.975,1247.42 548.562,1246.56 549.148,1244.38 549.734,1242.47 550.321,1244.43 550.907,1243.78 551.494,1241.72 552.08,1242.51 552.666,1240.67 553.253,1240.24 553.839,1239.94 554.426,1238.16 555.012,1238.88 555.599,1237 556.185,1237.81 556.771,1237.58 557.358,1238.32 557.944,1237.7 558.531,1238.24 559.117,1236.68 559.703,1235.01 560.29,1234.98 560.876,1234.9 561.463,1234.57 562.049,1234.55 562.635,1236.8 563.222,1235.19 563.808,1237.23 564.395,1236.85 564.981,1235.15 565.568,1233.5 566.154,1233.13 566.74,1231.63 567.327,1234.12 567.913,1234.02 568.5,1236.25 569.086,1237.39 569.672,1241.75 570.259,1239.85 570.845,1240.48 571.432,1241.21 572.018,1241.94 572.605,1238.65 573.191,1238.2 573.777,1236.6 574.364,1233.72 574.95,1237.33 575.537,1240.67 576.123,1238.7 576.709,1241.86 577.296,1242.38 577.882,1236.76 578.469,1237.52 579.055,1235.99 579.641,1235.89 580.228,1234.25 580.814,1234.96 581.401,1233.17 581.987,1234.06 582.574,1234.91 583.16,1233.08 583.746,1231.15 584.333,1231.83 584.919,1231.23 585.506,1233.15 586.092,1231.43 586.678,1232.39 587.265,1231.96 587.851,1231.56 588.438,1230.05 589.024,1232.56 589.61,1231.1 590.197,1231.13 590.783,1230.98 591.37,1231.7 591.956,1230.34 592.543,1230.14 593.129,1232.49 593.715,1229.61 594.302,1229.47 594.888,1229.22 595.475,1231.77 596.061,1231.36 596.647,1230.9 597.234,1233.22 597.82,1232.88 598.407,1231.2 598.993,1228.04 599.579,1229.31 600.166,1228.98 600.752,1228.76 601.339,1227.2 601.925,1228.42 602.512,1228.41 603.098,1228.26 603.684,1228.31 604.271,1230.7 604.857,1230.67 605.444,1229.19 606.03,1229.11 606.616,1229.91 607.203,1229.48 607.789,1232.74 608.376,1232.49 608.962,1233.15 609.548,1233.93 610.135,1233.12 610.721,1232.58 611.308,1230.6 611.894,1229.14 612.481,1230.1 613.067,1229.91 613.653,1229.58 614.24,1229.12 614.826,1231.27 615.413,1229.55 615.999,1228.12 616.585,1230.49 617.172,1231.72 617.758,1232.19 618.345,1234.23 618.931,1233.42 619.518,1235.42 620.104,1236 620.69,1238.97 621.277,1239.36 621.863,1240.8 622.45,1241.2 623.036,1236.67 623.622,1237.17 624.209,1235.1 624.795,1234.3 625.382,1232.68 625.968,1232.25 626.554,1231.42 627.141,1230.91 627.727,1230.62 628.314,1228.91 628.9,1229.98 629.487,1232.13 630.073,1232.36 630.659,1229.34 631.246,1230.34 631.832,1231.15 632.419,1234.09 633.005,1235.89 633.591,1235.1 634.178,1233.26 634.764,1231.41 635.351,1230.95 635.937,1229.15 636.523,1229.94 637.11,1226.79 637.696,1225.12 638.283,1223.55 638.869,1223.59 639.456,1222.24 640.042,1222.18 640.628,1222.02 641.215,1219.24 641.801,1222.84 642.388,1224.19 642.974,1225.46 643.56,1223.88 644.147,1223.84 644.733,1226.32 645.32,1224.73 645.906,1224.5 646.492,1221.78 647.079,1221.67 647.665,1220.43 648.252,1220.51 648.838,1223.13 649.425,1223.17 650.011,1221.9 650.597,1221.68 651.184,1223.97 651.77,1228.97 652.357,1229.6 652.943,1229.52 653.529,1230.24 654.116,1229.88 654.702,1229.47 655.289,1230.54 655.875,1228.82 656.462,1229.7 657.048,1224.38 657.634,1224.28 658.221,1225.37 658.807,1225.48 659.394,1225.14 659.98,1224.8 660.566,1225.96 661.153,1225.63 661.739,1228.13 662.326,1227.58 662.912,1224.86 663.498,1224.91 664.085,1223.54 664.671,1224.67 665.258,1225.99 665.844,1225.77 666.431,1225.43 667.017,1225.23 667.603,1223.81 668.19,1223.69 668.776,1223.52 669.363,1223.16 669.949,1221.84 670.535,1222.91 671.122,1222.86 671.708,1222.61 672.295,1221.11 672.881,1219.79 673.467,1219.66 674.054,1218.53 674.64,1218.69 675.227,1220.27 675.813,1220.49 676.4,1220.69 676.986,1221.76 677.572,1222.95 678.159,1224.14 678.745,1223.95 679.332,1222.48 679.918,1222.56 680.504,1221.16 681.091,1219.79 681.677,1220.13 682.264,1220.34 682.85,1220.4 683.436,1222.69 684.023,1221.54 684.609,1221.23 685.196,1221.03 685.782,1222.26 686.369,1221.79 686.955,1220.77 687.541,1219.7 688.128,1219.72 688.714,1219.63 689.301,1219.68 689.887,1219.64 690.473,1218.55 691.06,1218.47 691.646,1217.32 692.233,1218.88 692.819,1218.46 693.405,1221.28 693.992,1221.12 694.578,1218.53 695.165,1218.49 695.751,1218.63 696.338,1217.58 696.924,1216.5 697.51,1220.36 698.097,1220.25 698.683,1220.18 699.27,1220.3 699.856,1221.54 700.442,1220.14 701.029,1220.1 701.615,1218.58 702.202,1221 702.788,1222.11 703.375,1223.4 703.961,1227.84 704.547,1228.62 705.134,1230.42 705.72,1227.24 706.307,1227.99 706.893,1226.26 707.479,1231.12 708.066,1231.69 708.652,1228.39 709.239,1229.14 709.825,1229.89 710.411,1229.19 710.998,1226.07 711.584,1227.79 712.171,1227.52 712.757,1227.27 713.344,1229.27 713.93,1228.84 714.516,1226.85 715.103,1225.07 715.689,1224.65 716.276,1224.25 716.862,1222.68 717.448,1221.35 718.035,1221.29 718.621,1222.58 719.208,1219.95 719.794,1221.25 720.38,1222.25 720.967,1221.94 721.553,1221.78 722.14,1222.74 722.726,1221.33 723.313,1219.68 723.899,1219.67 724.485,1219.49 725.072,1218.04 725.658,1217.92 726.245,1217.81 726.831,1216.39 727.417,1214.2 728.004,1214.53 728.59,1214.64 729.177,1216.07 729.763,1216.31 730.349,1216.93 730.936,1214.9 731.522,1216.05 732.109,1214.93 732.695,1213.74 733.282,1216.43 733.868,1216.27 734.454,1216.22 735.041,1217.36 735.627,1218.58 736.214,1219.96 736.8,1221.07 737.386,1219.44 737.973,1218.27 738.559,1218.5 739.146,1219.73 739.732,1218.36 740.318,1215.93 740.905,1215.85 741.491,1214.71 742.078,1212.31 742.664,1211.31 743.251,1211.82 743.837,1211.12 744.423,1211.6 745.01,1210.81 745.596,1208.79 746.183,1209.27 746.769,1209.83 747.355,1209.03 747.942,1212.02 748.528,1210.95 749.115,1208.72 749.701,1209.13 750.288,1210.9 750.874,1210.2 751.46,1207.81 752.047,1206.93 752.633,1207.57 753.22,1209.32 753.806,1209.95 754.392,1214.33 754.979,1213.39 755.565,1213.75 756.152,1214.95 756.738,1216.12 757.324,1217.87 757.911,1219.08 758.497,1218.89 759.084,1217.8 759.67,1222.48 760.257,1223.31 760.843,1224.35 761.429,1225.09 762.016,1223.18 762.602,1222.83 763.189,1222.4 763.775,1222.29 764.361,1223.2 764.948,1219.26 765.534,1217.98 766.121,1217.77 766.707,1217.88 767.293,1219.03 767.88,1217.69 768.466,1216.32 769.053,1213.86 769.639,1214.07 770.226,1211.84 770.812,1214.41 771.398,1215.84 771.985,1213.36 772.571,1213.53 773.158,1216.47 773.744,1215.34 774.33,1216.66 774.917,1216.72 775.503,1218.03 776.09,1218.13 776.676,1217.98 777.262,1216.67 777.849,1215.37 778.435,1215.6 779.022,1218.09 779.608,1217.37 780.195,1218.73 780.781,1220.13 781.367,1222.17 781.954,1221.87 782.54,1224.15 783.127,1223.71 783.713,1227.31 784.299,1226.74 784.886,1225.1 785.472,1226.06 786.059,1226.84 786.645,1226.42 787.232,1227.16 787.818,1225.59 788.404,1224.1 788.991,1225.02 789.577,1222.35 790.164,1222.06 790.75,1221.71 791.336,1221.3 791.923,1217.18 792.509,1218.38 793.096,1218.23 793.682,1218.03 794.268,1219.18 794.855,1219.97 795.441,1219.82 796.028,1219.3 796.614,1221.49 797.201,1218.84 797.787,1220.06 798.373,1219.84 798.96,1219.52 799.546,1219.29 800.133,1217.96 800.719,1219.07 801.305,1219.03 801.892,1221.23 802.478,1222.17 803.065,1223.04 803.651,1221.41 804.237,1222.28 804.824,1220.96 805.41,1225.5 805.997,1225.15 806.583,1224.62 807.17,1225.59 807.756,1225.07 808.342,1224.86 808.929,1224.24 809.515,1220.09 810.102,1220.05 810.688,1218.67 811.274,1219.87 811.861,1219.71 812.447,1217.08 813.034,1217.02 813.62,1218.05 814.206,1220.59 814.793,1217.98 815.379,1217 815.966,1217.05 816.552,1215.56 817.139,1215.72 817.725,1215.65 818.311,1217.04 818.898,1219.3 819.484,1218.03 820.071,1219.13 820.657,1217.73 821.243,1218.56 821.83,1212.28 822.416,1213.71 823.003,1213.63 823.589,1216.18 824.175,1214.97 824.762,1214.92 825.348,1216.05 825.935,1218.42 826.521,1218.23 827.108,1218.07 827.694,1217.89 828.28,1217.78 828.867,1217.8 829.453,1217.77 830.04,1217.38 830.626,1217.24 831.212,1214.88 831.799,1213.87 832.385,1215.16 832.972,1217.72 833.558,1216.54 834.145,1215.61 834.731,1216.61 835.317,1214.2 835.904,1216.82 836.49,1219.2 837.077,1215.36 837.663,1213.06 838.249,1213.26 838.836,1212.25 839.422,1211.17 840.009,1211.57 840.595,1211.82 841.181,1213.27 841.768,1212.38 842.354,1211 842.941,1210.02 843.527,1210.64 844.114,1213.35 844.7,1213.54 845.286,1213.59 845.873,1211.28 846.459,1210.31 847.046,1211.88 847.632,1210.85 848.218,1209.91 848.805,1209.21 849.391,1209.5 849.978,1208.71 850.564,1209.06 851.15,1209.46 851.737,1211.13 852.323,1211.33 852.91,1211.62 853.496,1214.34 854.083,1216.9 854.669,1217.03 855.255,1217.92 855.842,1217.97 856.428,1217.52 857.015,1217.21 857.601,1217.11 858.187,1218.1 858.774,1216.99 859.36,1214.37 859.947,1214.79 860.533,1213.76 861.119,1211.63 861.706,1211.95 862.292,1212.19 862.879,1215.82 863.465,1217.26 864.052,1219.53 864.638,1221.94 865.224,1219.53 865.811,1219.32 866.397,1219.01 866.984,1220.05 867.57,1219.67 868.156,1220.66 868.743,1221.67 869.329,1222.67 869.916,1222.66 870.502,1221.07 871.089,1220.63 871.675,1222.5 872.261,1220.74 872.848,1219.35 873.434,1219.27 874.021,1220.3 874.607,1218.82 875.193,1221.34 875.78,1219.88 876.366,1215.88 876.953,1217.41 877.539,1218.57 878.125,1218.53 878.712,1220.75 879.298,1217.81 879.885,1217.62 880.471,1217.4 881.058,1217.15 881.644,1219.45 882.23,1220.5 882.817,1220.42 883.403,1219 883.99,1218.59 884.576,1218.47 885.162,1219.5 885.749,1220.7 886.335,1220.36 886.922,1219.98 887.508,1220.79 888.094,1221.68 888.681,1221.22 889.267,1221.03 889.854,1220.62 890.44,1220.54 891.027,1218.9 891.613,1220.24 892.199,1221.04 892.786,1220.83 893.372,1220.76 893.959,1220.25 894.545,1219.8 895.131,1219.51 895.718,1218.28 896.304,1220.62 896.891,1221.74 897.477,1221.5 898.063,1221.57 898.65,1219.88 899.236,1219.74 899.823,1220.72 900.409,1221.5 900.996,1219.88 901.582,1219.63 902.168,1219.43 902.755,1222.65 903.341,1222.42 903.928,1220.75 904.514,1220.38 905.1,1218.98 905.687,1217.59 906.273,1216.42 906.86,1217.8 907.446,1218.85 908.032,1218.36 908.619,1218.02 909.205,1219.11 909.792,1218.8 910.378,1218.59 910.965,1218.6 911.551,1214.65 912.137,1214.56 912.724,1213.29 913.31,1215.8 913.897,1216.98 914.483,1215.48 915.069,1214.1 915.656,1212.75 916.242,1211.58 916.829,1209.37 917.415,1209.4 918.002,1212.03 918.588,1213.53 919.174,1213.53 919.761,1209.8 920.347,1211.27 920.934,1207.79 921.52,1208.03 922.106,1209.64 922.693,1211.13 923.279,1211.54 923.866,1210.45 924.452,1210.7 925.038,1209.52 925.625,1209.83 926.211,1208.85 926.798,1209.27 927.384,1209.64 927.971,1212.3 928.557,1213.62 929.143,1212.6 929.73,1212.77 930.316,1215.22 930.903,1214.11 931.489,1213.93 932.075,1213.67 932.662,1214.94 933.248,1215.18 933.835,1215.27 934.421,1216.6 935.007,1215.02 935.594,1215.09 936.18,1215.24 936.767,1216.33 937.353,1216.44 937.94,1212.66 938.526,1211.59 939.112,1211.69 939.699,1214.3 940.285,1214.13 940.872,1217.86 941.458,1217.72 942.044,1217.69 942.631,1220.05 943.217,1219.7 943.804,1218.06 944.39,1219.21 944.976,1219.34 945.563,1216.75 946.149,1215.16 946.736,1213.95 947.322,1215.16 947.909,1215.22 948.495,1213.9 949.081,1213.7 949.668,1212.61 950.254,1211.82 950.841,1213.26 951.427,1214.53 952.013,1213.16 952.6,1211.94 953.186,1210.91 953.773,1209.84 954.359,1209.97 954.945,1207.66 955.532,1210.59 956.118,1211.94 956.705,1212.12 957.291,1214.76 957.878,1218.51 958.464,1216.17 959.05,1216.34 959.637,1213.92 960.223,1214.04 960.81,1216.54 961.396,1217.36 961.982,1219.5 962.569,1220.26 963.155,1219.97 963.742,1222.39 964.328,1221.94 964.915,1221.61 965.501,1221.16 966.087,1218.42 966.674,1218.25 967.26,1219.38 967.847,1221.7 968.433,1220.11 969.019,1218.77 969.606,1217.48 970.192,1217.28 970.779,1217.01 971.365,1218.02 971.951,1215.26 972.538,1216.35 973.124,1212.82 973.711,1211.67 974.297,1211.71 974.884,1213.19 975.47,1214.47 976.056,1213.38 976.643,1212.24 977.229,1212.34 977.816,1210.79 978.402,1211.13 978.988,1212.42 979.575,1213.67 980.161,1211.39 980.748,1211.62 981.334,1211.64 981.92,1211.61 982.507,1212.2 983.093,1212.22 983.68,1211.06 984.266,1208.69 984.853,1211.51 985.439,1210.65 986.025,1211.18 986.612,1208.75 987.198,1209.19 987.785,1210.36 988.371,1210.86 988.957,1210.01 989.544,1209.04 990.13,1209.17 990.717,1211.78 991.303,1211.88 991.889,1211 992.476,1212.56 993.062,1215 993.649,1216.05 994.235,1214.82 994.822,1217.13 995.408,1213.27 995.994,1214.48 996.581,1216.75 997.167,1216.53 997.754,1216.5 998.34,1216.26 998.926,1218.37 999.513,1218.17 1000.1,1217.93 1000.69,1218.78 1001.27,1218.49 1001.86,1217.88 1002.44,1217.5 1003.03,1218.74 1003.62,1217.34 1004.2,1214.67 1004.79,1214.46 1005.38,1212.2 1005.96,1212.39 1006.55,1214.86 1007.14,1213.62 1007.72,1214.94 1008.31,1214.01 1008.9,1212.64 1009.48,1212.63 1010.07,1216.13 1010.65,1216.12 1011.24,1216.15 1011.83,1213.66 1012.41,1213.99 1013,1213.9 1013.59,1215.22 1014.17,1216.57 1014.76,1217.54 1015.35,1217.41 1015.93,1217.35 1016.52,1217.31 1017.11,1218.29 1017.69,1217.89 1018.28,1218.01 1018.86,1217.9 1019.45,1217.96 1020.04,1217.74 1020.62,1213.51 1021.21,1215.99 1021.8,1214.71 1022.38,1217.02 1022.97,1216.69 1023.56,1217.77 1024.14,1217.68 1024.73,1217.67 1025.32,1213.61 1025.9,1211.41 1026.49,1213.96 1027.07,1216.54 1027.66,1217.68 1028.25,1213.68 1028.83,1216.35 1029.42,1216.2 1030.01,1216.21 1030.59,1217.26 1031.18,1218.31 1031.77,1218.18 1032.35,1215.59 1032.94,1214.22 1033.52,1209.18 1034.11,1209.27 1034.7,1208.23 1035.28,1208.69 1035.87,1210.33 1036.46,1213 1037.04,1211.9 1037.63,1213.45 1038.22,1214.79 1038.8,1213.67 1039.39,1212.26 1039.98,1212.44 1040.56,1217.48 1041.15,1216.07 1041.73,1213.76 1042.32,1212.53 1042.91,1212.71 1043.49,1212.43 1044.08,1215.17 1044.67,1216.43 1045.25,1216.47 1045.84,1213.8 1046.43,1211.39 1047.01,1212.7 1047.6,1213.87 1048.19,1213.69 1048.77,1213.66 1049.36,1215.2 1049.94,1214.07 1050.53,1213.96 1051.12,1211.64 1051.7,1213.03 1052.29,1214.32 1052.88,1215.47 1053.46,1215.46 1054.05,1216.72 1054.64,1216.73 1055.22,1217.75 1055.81,1220 1056.39,1220.71 1056.98,1221.74 1057.57,1218.92 1058.15,1221 1058.74,1219.21 1059.33,1220.08 1059.91,1217.32 1060.5,1218.28 1061.09,1220.58 1061.67,1221.24 1062.26,1221.91 1062.85,1224.98 1063.43,1225.78 1064.02,1222.85 1064.6,1222.45 1065.19,1219.51 1065.78,1219.07 1066.36,1217.33 1066.95,1215.83 1067.54,1215.43 1068.12,1216.57 1068.71,1217.97 1069.3,1216.56 1069.88,1212.45 1070.47,1212.39 1071.06,1208 1071.64,1208.26 1072.23,1208.51 1072.81,1208.94 1073.4,1208.16 1073.99,1211.14 1074.57,1214.97 1075.16,1217.45 1075.75,1221.1 1076.33,1219.41 1076.92,1220.28 1077.51,1218.66 1078.09,1217.22 1078.68,1217.03 1079.26,1218.16 1079.85,1215.43 1080.44,1215.44 1081.02,1216.53 1081.61,1211.78 1082.2,1210.78 1082.78,1209.66 1083.37,1208.5 1083.96,1207.72 1084.54,1205.7 1085.13,1204.98 1085.72,1207.82 1086.3,1205.45 1086.89,1208.23 1087.47,1210.78 1088.06,1211.07 1088.65,1208.87 1089.23,1209.2 1089.82,1209.44 1090.41,1211 1090.99,1211.26 1091.58,1211.52 1092.17,1211.58 1092.75,1209.55 1093.34,1211.89 1093.93,1210.75 1094.51,1210.98 1095.1,1211.03 1095.68,1211.23 1096.27,1211.44 1096.86,1212.95 1097.44,1211.74 1098.03,1212.05 1098.62,1211.96 1099.2,1212.4 1099.79,1213.62 1100.38,1213.63 1100.96,1212.34 1101.55,1212.43 1102.14,1214.87 1102.72,1212.26 1103.31,1212.3 1103.89,1211.34 1104.48,1211.56 1105.07,1215.48 1105.65,1211.81 1106.24,1208.18 1106.83,1207.22 1107.41,1207.58 1108,1210.39 1108.59,1213.13 1109.17,1214.48 1109.76,1215.8 1110.34,1216.84 1110.93,1216.85 1111.52,1216.62 1112.1,1214.06 1112.69,1208.85 1113.28,1210.41 1113.86,1212.1 1114.45,1212.26 1115.04,1212.35 1115.62,1212.65 1116.21,1214 1116.8,1216.4 1117.38,1214.92 1117.97,1214.69 1118.55,1212.16 1119.14,1212.37 1119.73,1211.12 1120.31,1209.06 1120.9,1209.28 1121.49,1210.59 1122.07,1210.73 1122.66,1210.88 1123.25,1209.91 1123.83,1211.55 1124.42,1210.76 1125.01,1213.26 1125.59,1213.07 1126.18,1212.12 1126.76,1210.83 1127.35,1208.29 1127.94,1208.54 1128.52,1211.25 1129.11,1212.69 1129.7,1212.66 1130.28,1214.04 1130.87,1211.73 1131.46,1211.73 1132.04,1212.96 1132.63,1211.85 1133.21,1213.29 1133.8,1213.29 1134.39,1212.08 1134.97,1210.73 1135.56,1210.64 1136.15,1213.47 1136.73,1211.25 1137.32,1211.48 1137.91,1211.4 1138.49,1213.94 1139.08,1215.24 1139.67,1212.65 1140.25,1211.6 1140.84,1210.53 1141.42,1210.91 1142.01,1213.79 1142.6,1212.84 1143.18,1214.24 1143.77,1214.4 1144.36,1212.93 1144.94,1210.52 1145.53,1211.99 1146.12,1213.3 1146.7,1212.27 1147.29,1212.58 1147.88,1213.95 1148.46,1215.36 1149.05,1216.67 1149.63,1214.13 1150.22,1214.43 1150.81,1214.44 1151.39,1215.62 1151.98,1215.6 1152.57,1214.48 1153.15,1215.76 1153.74,1216.8 1154.33,1216.73 1154.91,1215.4 1155.5,1217.85 1156.09,1216.54 1156.67,1218.82 1157.26,1220.87 1157.84,1221.77 1158.43,1221.05 1159.02,1220.62 1159.6,1219.08 1160.19,1217.63 1160.78,1219.72 1161.36,1224.32 1161.95,1224.75 1162.54,1224.22 1163.12,1223.73 1163.71,1222.12 1164.29,1221.65 1164.88,1220.05 1165.47,1217.46 1166.05,1218.72 1166.64,1215.88 1167.23,1217.06 1167.81,1220.69 1168.4,1218.96 1168.99,1216.28 1169.57,1215.92 1170.16,1215.58 1170.75,1215.46 1171.33,1215.55 1171.92,1215.37 1172.5,1216.75 1173.09,1220.55 1173.68,1219.99 1174.26,1218.11 1174.85,1216.47 1175.44,1215.17 1176.02,1216.15 1176.61,1216.17 1177.2,1216.33 1177.78,1216.18 1178.37,1216.2 1178.96,1216.32 1179.54,1216.18 1180.13,1213.78 1180.71,1216 1181.3,1217 1181.89,1216.7 1182.47,1215.11 1183.06,1213.83 1183.65,1215.05 1184.23,1215.11 1184.82,1214.92 1185.41,1214.66 1185.99,1216.04 1186.58,1216.93 1187.16,1215.6 1187.75,1213.93 1188.34,1214.02 1188.92,1214.12 1189.51,1216.63 1190.1,1213.74 1190.68,1212.63 1191.27,1211.64 1191.86,1211.84 1192.44,1213.08 1193.03,1214.36 1193.62,1214.53 1194.2,1214.33 1194.79,1214.11 1195.37,1216.42 1195.96,1218.65 1196.55,1220.83 1197.13,1221.57 1197.72,1219.6 1198.31,1219.13 1198.89,1218.84 1199.48,1217.21 1200.07,1216.92 1200.65,1215.66 1201.24,1217.95 1201.83,1217.51 1202.41,1218.35 1203,1213.11 1203.58,1215.57 1204.17,1214.01 1204.76,1214.09 1205.34,1214.11 1205.93,1214.11 1206.52,1215.39 1207.1,1215.41 1207.69,1215.53 1208.28,1214.01 1208.86,1217.75 1209.45,1217.53 1210.03,1217.36 1210.62,1218.16 1211.21,1214.26 1211.79,1215.52 1212.38,1214.09 1212.97,1216.68 1213.55,1215.19 1214.14,1216.51 1214.73,1216.31 1215.31,1217.09 1215.9,1215.6 1216.49,1215.73 1217.07,1214.21 1217.66,1216.67 1218.24,1216.48 1218.83,1217.52 1219.42,1216.46 1220,1214.88 1220.59,1213.41 1221.18,1214.41 1221.76,1213.42 1222.35,1210.85 1222.94,1210.95 1223.52,1209.65 1224.11,1208.64 1224.7,1210.27 1225.28,1210.43 1225.87,1210.49 1226.45,1208.49 1227.04,1208.81 1227.63,1207.62 1228.21,1207.86 1228.8,1209.42 1229.39,1208.74 1229.97,1212.92 1230.56,1211.58 1231.15,1213.29 1231.73,1211.72 1232.32,1213.25 1232.91,1213.1 1233.49,1212.97 1234.08,1213.18 1234.66,1214.29 1235.25,1212.99 1235.84,1213.04 1236.42,1215.14 1237.01,1216.31 1237.6,1213.91 1238.18,1212.74 1238.77,1215.34 1239.36,1217.89 1239.94,1216.17 1240.53,1215.93 1241.11,1217.3 1241.7,1217.16 1242.29,1218.26 1242.87,1217.85 1243.46,1217.68 1244.05,1218.63 1244.63,1219.74 1245.22,1221.88 1245.81,1223.88 1246.39,1225.78 1246.98,1222.81 1247.57,1222.55 1248.15,1223.45 1248.74,1222.94 1249.32,1222.42 1249.91,1220.52 1250.5,1218.97 1251.08,1214.74 1251.67,1216.84 1252.26,1215.51 1252.84,1215.38 1253.43,1214.1 1254.02,1211.47 1254.6,1214.31 1255.19,1211.98 1255.78,1209.51 1256.36,1205.97 1256.95,1206.17 1257.53,1206.53 1258.12,1210.69 1258.71,1210.65 1259.29,1211.86 1259.88,1211.97 1260.47,1213.39 1261.05,1214.74 1261.64,1214.65 1262.23,1214.59 1262.81,1215.56 1263.4,1215.22 1263.98,1213.94 1264.57,1212.7 1265.16,1212.85 1265.74,1214.19 1266.33,1216.59 1266.92,1215.05 1267.5,1216.38 1268.09,1216.22 1268.68,1214.94 1269.26,1213.58 1269.85,1214.88 1270.44,1213.79 1271.02,1212.24 1271.61,1209.68 1272.19,1211.36 1272.78,1207.94 1273.37,1208.22 1273.95,1210.92 1274.54,1211.14 1275.13,1209.91 1275.71,1210.1 1276.3,1210.44 1276.89,1211.76 1277.47,1212.9 1278.06,1212.85 1278.65,1215.41 1279.23,1215.28 1279.82,1214.06 1280.4,1212.98 1280.99,1214.33 1281.58,1214.16 1282.16,1215.24 1282.75,1212.77 1283.34,1211.36 1283.92,1211.75 1284.51,1209.53 1285.1,1210.97 1285.68,1211.14 1286.27,1211.12 1286.86,1214.93 1287.44,1214.94 1288.03,1215.75 1288.61,1211.83 1289.2,1212.96 1289.79,1211.98 1290.37,1212.26 1290.96,1212.55 1291.55,1210.26 1292.13,1210.54 1292.72,1210.86 1293.31,1209.65 1293.89,1208.28 1294.48,1208.78 1295.06,1210.26 1295.65,1209.14 1296.24,1210.69 1296.82,1213.19 1297.41,1217.88 1298,1216.57 1298.58,1215.3 1299.17,1211.19 1299.76,1209.99 1300.34,1209.96 1300.93,1210.16 1301.52,1205.75 1302.1,1206.12 1302.69,1205.42 1303.27,1204.72 1303.86,1205.39 1304.45,1204.54 1305.03,1205.04 1305.62,1205.73 1306.21,1203.8 1306.79,1203.01 1307.38,1203.74 1307.97,1204.36 1308.55,1208.85 1309.14,1208.93 1309.73,1209.33 1310.31,1210.82 1310.9,1211.15 1311.48,1212.36 1312.07,1211.12 1312.66,1210.05 1313.24,1210.24 1313.83,1209.44 1314.42,1207.42 1315,1207.89 1315.59,1206.94 1316.18,1207.02 1316.76,1206.1 1317.35,1207.95 1317.93,1207.1 1318.52,1205.05 1319.11,1206.81 1319.69,1205.81 1320.28,1206.67 1320.87,1208.49 1321.45,1207.76 1322.04,1204.41 1322.63,1208.63 1323.21,1210.48 1323.8,1210.68 1324.39,1210.96 1324.97,1212.41 1325.56,1210.3 1326.14,1209.21 1326.73,1210.74 1327.32,1210.73 1327.9,1212.09 1328.49,1213.39 1329.08,1211.99 1329.66,1215.75 1330.25,1215.66 1330.84,1213.13 1331.42,1211.89 1332.01,1209.38 1332.6,1208.1 1333.18,1209.44 1333.77,1209.78 1334.35,1211.27 1334.94,1211.5 1335.53,1209.34 1336.11,1211.99 1336.7,1210.79 1337.29,1213.55 1337.87,1214.62 1338.46,1214.51 1339.05,1213.44 1339.63,1211.92 1340.22,1211.58 1340.8,1211.8 1341.39,1209.19 1341.98,1209.25 1342.56,1207.27 1343.15,1207.47 1343.74,1209.08 1344.32,1207.88 1344.91,1212.05 1345.5,1207.3 1346.08,1207.5 1346.67,1207.86 1347.26,1207.05 1347.84,1208.68 1348.43,1210.33 1349.01,1209.35 1349.6,1211.16 1350.19,1210.03 1350.77,1210.28 1351.36,1208.23 1351.95,1208.89 1352.53,1207.95 1353.12,1209.59 1353.71,1208.75 1354.29,1210.26 1354.88,1210.07 1355.47,1209.16 1356.05,1208.06 1356.64,1208.09 1357.22,1208.34 1357.81,1208.74 1358.4,1209.1 1358.98,1212.04 1359.57,1211.89 1360.16,1209.24 1360.74,1206.97 1361.33,1209.92 1361.92,1211.58 1362.5,1212.78 1363.09,1212.97 1363.68,1212.96 1364.26,1213.24 1364.85,1214.49 1365.43,1215.5 1366.02,1214.52 1366.61,1216 1367.19,1217.08 1367.78,1217.15 1368.37,1216 1368.95,1213.36 1369.54,1213.44 1370.13,1213.28 1370.71,1213.51 1371.3,1212.48 1371.88,1211.43 1372.47,1215.23 1373.06,1216.49 1373.64,1217.52 1374.23,1217.19 1374.82,1220.86 1375.4,1220.5 1375.99,1222.63 1376.58,1222.33 1377.16,1220.75 1377.75,1219.33 1378.34,1217.87 1378.92,1219.87 1379.51,1219.51 1380.09,1218.06 1380.68,1218.75 1381.27,1219.61 1381.85,1218.25 1382.44,1216.81 1383.03,1217.73 1383.61,1216.23 1384.2,1214.84 1384.79,1215.96 1385.37,1214.4 1385.96,1214.53 1386.55,1209.66 1387.13,1211.2 1387.72,1208.85 1388.3,1209.24 1388.89,1209.42 1389.48,1208.31 1390.06,1208.72 1390.65,1207.6 1391.24,1209 1391.82,1209.15 1392.41,1210.55 1393,1210.79 1393.58,1210.9 1394.17,1213.15 1394.75,1213 1395.34,1214.15 1395.93,1216.62 1396.51,1217.86 1397.1,1219.01 1397.69,1221.18 1398.27,1224.5 1398.86,1220.18 1399.45,1218.5 1400.03,1218.3 1400.62,1215.42 1401.21,1215.46 1401.79,1215.35 1402.38,1209.92 1402.96,1210.22 1403.55,1210.44 1404.14,1208.18 1404.72,1207.19 1405.31,1209.99 1405.9,1207.74 1406.48,1208.11 1407.07,1209.71 1407.66,1210.01 1408.24,1209.2 1408.83,1211.07 1409.42,1213.56 1410,1213.43 1410.59,1217.32 1411.17,1220.87 1411.76,1221.97 1412.35,1221.62 1412.93,1222.12 1413.52,1222.85 1414.11,1222.31 1414.69,1223.03 1415.28,1221.29 1415.87,1222.02 1416.45,1221.66 1417.04,1220.22 1417.63,1221.52 1418.21,1222.36 1418.8,1220.87 1419.38,1221.63 1419.97,1223.74 1420.56,1224.35 1421.14,1222.61 1421.73,1222.35 1422.32,1225.48 1422.9,1227.51 1423.49,1224.43 1424.08,1227.4 1424.66,1225.31 1425.25,1224.67 1425.83,1225.31 1426.42,1226.16 1427.01,1223.35 1427.59,1220.61 1428.18,1220.06 1428.77,1220.96 1429.35,1220.65 1429.94,1218.81 1430.53,1216.27 1431.11,1215.08 1431.7,1216.44 1432.29,1214.83 1432.87,1215.99 1433.46,1214.8 1434.04,1212.16 1434.63,1212.44 1435.22,1213.75 1435.8,1217.35 1436.39,1219.83 1436.98,1218.51 1437.56,1219.32 1438.15,1221.67 1438.74,1219.95 1439.32,1216.96 1439.91,1217.79 1440.5,1217.72 1441.08,1217.56 1441.67,1217.37 1442.25,1215.73 1442.84,1215.39 1443.43,1216.37 1444.01,1216.17 1444.6,1214.52 1445.19,1209.66 1445.77,1211.07 1446.36,1213.36 1446.95,1216.02 1447.53,1214.71 1448.12,1214.54 1448.7,1215.91 1449.29,1215.87 1449.88,1214.52 1450.46,1215.69 1451.05,1215.33 1451.64,1213.86 1452.22,1215 1452.81,1213.81 1453.4,1212.68 1453.98,1210.11 1454.57,1211.32 1455.16,1210.27 1455.74,1212.98 1456.33,1211.72 1456.91,1209.22 1457.5,1209.52 1458.09,1211.07 1458.67,1212.4 1459.26,1213.71 1459.85,1212.45 1460.43,1212.56 1461.02,1211.29 1461.61,1210.29 1462.19,1211.91 1462.78,1209.31 1463.37,1210.91 1463.95,1209.95 1464.54,1211.53 1465.12,1213.03 1465.71,1212.09 1466.3,1212.13 1466.88,1212.26 1467.47,1211.11 1468.06,1209.95 1468.64,1210.38 1469.23,1211.72 1469.82,1210.64 1470.4,1209.69 1470.99,1210.07 1471.57,1210.4 1472.16,1209.39 1472.75,1209.56 1473.33,1208.84 1473.92,1209.09 1474.51,1208.16 1475.09,1208.42 1475.68,1210.14 1476.27,1211.5 1476.85,1212.87 1477.44,1212.96 1478.03,1215.48 1478.61,1216.46 1479.2,1216.45 1479.78,1216.24 1480.37,1214.54 1480.96,1216.9 1481.54,1215.51 1482.13,1215.46 1482.72,1215.74 1483.3,1214.39 1483.89,1215.57 1484.48,1215.54 1485.06,1213.19 1485.65,1214.7 1486.24,1213.33 1486.82,1212.05 1487.41,1213.33 1487.99,1213.37 1488.58,1213.47 1489.17,1213.34 1489.75,1211.99 1490.34,1209.77 1490.93,1209.21 1491.51,1215.55 1492.1,1215.39 1492.69,1216.31 1493.27,1217.51 1493.86,1217.36 1494.45,1217.39 1495.03,1215.95 1495.62,1213.49 1496.2,1213.34 1496.79,1213.27 1497.38,1214.47 1497.96,1214.36 1498.55,1210.6 1499.14,1213.07 1499.72,1213.17 1500.31,1214.24 1500.9,1215.27 1501.48,1211.67 1502.07,1212.93 1502.65,1211.56 1503.24,1211.67 1503.83,1213.16 1504.41,1215.66 1505,1216.89 1505.59,1214.53 1506.17,1215.83 1506.76,1215.86 1507.35,1215.69 1507.93,1214.49 1508.52,1214.39 1509.11,1213.48 1509.69,1212.08 1510.28,1213.36 1510.86,1215.88 1511.45,1214.36 1512.04,1216.84 1512.62,1219.16 1513.21,1220.09 1513.8,1219.94 1514.38,1223.44 1514.97,1223 1515.56,1224.86 1516.14,1223 1516.73,1220.4 1517.32,1217.72 1517.9,1219.68 1518.49,1221.9 1519.07,1220.3 1519.66,1221 1520.25,1222.58 1520.83,1222.07 1521.42,1221.68 1522.01,1221.46 1522.59,1219.88 1523.18,1219.49 1523.77,1219.31 1524.35,1219.03 1524.94,1218.98 1525.52,1217.65 1526.11,1218.63 1526.7,1219.79 1527.28,1219.43 1527.87,1217.85 1528.46,1217.33 1529.04,1217.23 1529.63,1215.61 1530.22,1216.85 1530.8,1210.26 1531.39,1210.43 1531.98,1211.76 1532.56,1211.85 1533.15,1213.21 1533.73,1212.04 1534.32,1214.54 1534.91,1213.33 1535.49,1212.34 1536.08,1213.71 1536.67,1210.29 1537.25,1210.55 1537.84,1209.59 1538.43,1212.45 1539.01,1211.35 1539.6,1209.96 1540.19,1211.31 1540.77,1212.51 1541.36,1211.35 1541.94,1211.35 1542.53,1211.45 1543.12,1212.6 1543.7,1210.31 1544.29,1213.02 1544.88,1212.99 1545.46,1211.77 1546.05,1212.59 1546.64,1212.43 1547.22,1213.55 1547.81,1212.24 1548.4,1213.35 1548.98,1212.19 1549.57,1213.62 1550.15,1214.91 1550.74,1215.11 1551.33,1216.25 1551.91,1213.51 1552.5,1213.36 1553.09,1210.71 1553.67,1210.68 1554.26,1209.56 1554.85,1209.73 1555.43,1208.63 1556.02,1210.12 1556.6,1206.64 1557.19,1206.94 1557.78,1205.06 1558.36,1206.83 1558.95,1208.26 1559.54,1207.22 1560.12,1209.01 1560.71,1213.26 1561.3,1213.34 1561.88,1213.53 1562.47,1213.6 1563.06,1210.99 1563.64,1210.93 1564.23,1208.61 1564.81,1210.09 1565.4,1210.35 1565.99,1209.31 1566.57,1208.42 1567.16,1207.72 1567.75,1206.59 1568.33,1206.96 1568.92,1206.07 1569.51,1208.9 1570.09,1209.2 1570.68,1208.42 1571.27,1208.68 1571.85,1206.53 1572.44,1204.5 1573.02,1206.09 1573.61,1206.24 1574.2,1207.85 1574.78,1208.15 1575.37,1208.47 1575.96,1208.73 1576.54,1210.11 1577.13,1212.65 1577.72,1212.56 1578.3,1212.46 1578.89,1216.19 1579.47,1214.4 1580.06,1212.83 1580.65,1211.45 1581.23,1212.79 1581.82,1211.72 1582.41,1212.99 1582.99,1212.75 1583.58,1214.11 1584.17,1213.92 1584.75,1216.53 1585.34,1216.19 1585.93,1217.61 1586.51,1218.85 1587.1,1218.43 1587.68,1215.89 1588.27,1215.91 1588.86,1215.42 1589.44,1212.69 1590.03,1212.93 1590.62,1210.55 1591.2,1209.34 1591.79,1208.5 1592.38,1208.93 1592.96,1209.27 1593.55,1207.95 1594.14,1209.48 1594.72,1209.75 1595.31,1210.04 1595.89,1210.14 1596.48,1212.85 1597.07,1214.3 1597.65,1214.52 1598.24,1213.16 1598.83,1214.5 1599.41,1209.67 1600,1208.79 1600.59,1209.23 1601.17,1209.46 1601.76,1207.38 1602.34,1208.66 1602.93,1209.95 1603.52,1211.69 1604.1,1211.62 1604.69,1213.21 1605.28,1213.1 1605.86,1213.3 1606.45,1213.39 1607.04,1210.99 1607.62,1208.59 1608.21,1211.24 1608.8,1213.97 1609.38,1214.01 1609.97,1215.02 1610.55,1213.47 1611.14,1213.6 1611.73,1213.57 1612.31,1213.61 1612.9,1214.43 1613.49,1217.17 1614.07,1217.06 1614.66,1214.35 1615.25,1215.42 1615.83,1215.42 1616.42,1215.66 1617.01,1214.47 1617.59,1214.35 1618.18,1215.46 1618.76,1216.7 1619.35,1218.03 1619.94,1219.11 1620.52,1217.62 1621.11,1216.17 1621.7,1214.69 1622.28,1218.31 1622.87,1218.09 1623.46,1216.49 1624.04,1213.9 1624.63,1215.04 1625.22,1214.71 1625.8,1213.52 1626.39,1213.57 1626.97,1213.35 1627.56,1215.88 1628.15,1218.24 1628.73,1219.35 1629.32,1219.1 1629.91,1216.69 1630.49,1219.03 1631.08,1214.69 1631.67,1213.39 1632.25,1214.55 1632.84,1214.47 1633.42,1213.02 1634.01,1210.35 1634.6,1211.9 1635.18,1210.83 1635.77,1214.43 1636.36,1214.28 1636.94,1212.05 1637.53,1210.75 1638.12,1212.05 1638.7,1216.03 1639.29,1215.78 1639.88,1215.84 1640.46,1215.79 1641.05,1215.7 1641.63,1218.45 1642.22,1215.62 1642.81,1213.16 1643.39,1214.54 1643.98,1215.86 1644.57,1213.22 1645.15,1214.59 1645.74,1213.04 1646.33,1212.69 1646.91,1212.83 1647.5,1211.92 1648.09,1210.77 1648.67,1212.57 1649.26,1213.73 1649.84,1212.41 1650.43,1209.88 1651.02,1209.06 1651.6,1207.94 1652.19,1210.51 1652.78,1210.81 1653.36,1209.75 1653.95,1212.4 1654.54,1214.9 1655.12,1214.66 1655.71,1215.88 1656.29,1214.59 1656.88,1215.77 1657.47,1214.54 1658.05,1213.4 1658.64,1213.46 1659.23,1214.94 1659.81,1216.1 1660.4,1214.97 1660.99,1216.39 1661.57,1216.53 1662.16,1217.75 1662.75,1216.29 1663.33,1214.78 1663.92,1213.41 1664.5,1214.22 1665.09,1216.53 1665.68,1217.44 1666.26,1217.35 1666.85,1217.08 1667.44,1215.55 1668.02,1216.74 1668.61,1216.36 1669.2,1213.87 1669.78,1216.27 1670.37,1215.2 1670.96,1215.16 1671.54,1212.71 1672.13,1214.33 1672.71,1214.29 1673.3,1215.5 1673.89,1214.39 1674.47,1219.48 1675.06,1216.94 1675.65,1216.58 1676.23,1216.28 1676.82,1212.49 1677.41,1212.69 1677.99,1212.87 1678.58,1211.47 1679.17,1211.5 1679.75,1214.07 1680.34,1215.38 1680.92,1215.31 1681.51,1215.12 1682.1,1213.77 1682.68,1214.65 1683.27,1214.68 1683.86,1210.91 1684.44,1208.88 1685.03,1209.17 1685.62,1211.86 1686.2,1211.82 1686.79,1212.99 1687.37,1213.11 1687.96,1210.95 1688.55,1213.52 1689.13,1213.78 1689.72,1212.37 1690.31,1211.08 1690.89,1212.49 1691.48,1212.74 1692.07,1211.47 1692.65,1211.97 1693.24,1210.99 1693.83,1211.22 1694.41,1209.04 1695,1208.03 1695.58,1208.59 1696.17,1211.5 1696.76,1211.73 1697.34,1210.53 1697.93,1210.64 1698.52,1209.47 1699.1,1210.85 1699.69,1213.36 1700.28,1214.73 1700.86,1214.91 1701.45,1214.93 1702.04,1213.55 1702.62,1213.71 1703.21,1213.81 1703.79,1213.66 1704.38,1213.65 1704.97,1217.54 1705.55,1217.17 1706.14,1218.19 1706.73,1219.47 1707.31,1221.63 1707.9,1221.05 1708.49,1221.7 1709.07,1220.28 1709.66,1217.27 1710.24,1217.14 1710.83,1217.01 1711.42,1217.91 1712,1217.3 1712.59,1215.77 1713.18,1216.92 1713.76,1217.87 1714.35,1216.49 1714.94,1216.51 1715.52,1215.41 1716.11,1215.49 1716.7,1214.32 1717.28,1216.8 1717.87,1215.58 1718.45,1215.74 1719.04,1216.97 1719.63,1215.46 1720.21,1214.11 1720.8,1215.03 1721.39,1215.98 1721.97,1214.65 1722.56,1215.9 1723.15,1215.45 1723.73,1210.38 1724.32,1211.86 1724.91,1210.56 1725.49,1210.73 1726.08,1212.09 1726.66,1213.2 1727.25,1213.51 1727.84,1213.66 1728.42,1212.47 1729.01,1212.47 1729.6,1213.53 1730.18,1210.97 1730.77,1212.55 1731.36,1212.74 1731.94,1208.61 1732.53,1208.94 1733.11,1210.37 1733.7,1211.78 1734.29,1214.48 1734.87,1215.62 1735.46,1215.59 1736.05,1216.58 1736.63,1214.04 1737.22,1213.79 1737.81,1212.56 1738.39,1213.67 1738.98,1212.66 1739.57,1212.44 1740.15,1211.22 1740.74,1211.52 1741.32,1210.22 1741.91,1208.94 1742.5,1207.81 1743.08,1209.48 1743.67,1211.06 1744.26,1211.01 1744.84,1212.35 1745.43,1216.13 1746.02,1215.83 1746.6,1214.82 1747.19,1214.54 1747.78,1212 1748.36,1213.33 1748.95,1218.25 1749.53,1220.27 1750.12,1219.79 1750.71,1218.28 1751.29,1215.61 1751.88,1214.2 1752.47,1215.36 1753.05,1214.8 1753.64,1213.58 1754.23,1212.32 1754.81,1213.64 1755.4,1208.67 1755.99,1210.2 1756.57,1211.67 1757.16,1207.81 1757.74,1204.51 1758.33,1209.89 1758.92,1208.82 1759.5,1207.84 1760.09,1209.35 1760.68,1211.02 1761.26,1209.93 1761.85,1209 1762.44,1210.49 1763.02,1210.65 1763.61,1212.15 1764.19,1212.16 1764.78,1209.94 1765.37,1211.45 1765.95,1210.33 1766.54,1211.74 1767.13,1213.19 1767.71,1209.74 1768.3,1210.01 1768.89,1211.4 1769.47,1211.42 1770.06,1210.18 1770.65,1210.47 1771.23,1209.27 1771.82,1208 1772.4,1209.43 1772.99,1209.41 1773.58,1210.91 1774.16,1208.56 1774.75,1208.86 1775.34,1208.89 1775.92,1209.02 1776.51,1211.66 1777.1,1209.31 1777.68,1210.81 1778.27,1207.99 1778.86,1208.25 1779.44,1208.75 1780.03,1209.06 1780.61,1210.3 1781.2,1209.06 1781.79,1206.64 1782.37,1207.21 1782.96,1207.26 1783.55,1208.78 1784.13,1209.14 1784.72,1206.94 1785.31,1207.41 1785.89,1206.77 1786.48,1206.24 1787.06,1210.29 1787.65,1210.66 1788.24,1214.56 1788.82,1213.44 1789.41,1212.48 1790,1212.61 1790.58,1213.82 1791.17,1213.99 1791.76,1215.33 1792.34,1214.01 1792.93,1213.44 1793.52,1212.01 1794.1,1212.16 1794.69,1213.58 1795.27,1212.41 1795.86,1212.45 1796.45,1212.91 1797.03,1214.46 1797.62,1214.38 1798.21,1215.7 1798.79,1216.86 1799.38,1217.79 1799.97,1217.3 1800.55,1214.67 1801.14,1214.92 1801.73,1211.19 1802.31,1211.16 1802.9,1211.47 1803.48,1214.21 1804.07,1215.22 1804.66,1218.78 1805.24,1218.39 1805.83,1216.89 1806.42,1217.81 1807,1218.7 1807.59,1217.12 1808.18,1215.84 1808.76,1215.68 1809.35,1215.6 1809.94,1215.56 1810.52,1215.48 1811.11,1217.87 1811.69,1219.1 1812.28,1221.48 1812.87,1221.13 1813.45,1220.71 1814.04,1220.38 1814.63,1220.01 1815.21,1217.31 1815.8,1216.98 1816.39,1217.01 1816.97,1218.17 1817.56,1219.08 1818.14,1219.7 1818.73,1219.59 1819.32,1216.84 1819.9,1218.92 1820.49,1221 1821.08,1222.88 1821.66,1222.41 1822.25,1220.6 1822.84,1218.91 1823.42,1216.26 1824.01,1216.07 1824.6,1217.13 1825.18,1218.14 1825.77,1219.01 1826.35,1215 1826.94,1213.8 1827.53,1213.75 1828.11,1214.73 1828.7,1213.43 1829.29,1214.68 1829.87,1214.8 1830.46,1215.83 1831.05,1215.58 1831.63,1216.94 1832.22,1218.98 1832.81,1218.68 1833.39,1212.26 1833.98,1212.56 1834.56,1213.98 1835.15,1214.05 1835.74,1215.24 1836.32,1215.13 1836.91,1213.79 1837.5,1211.58 1838.08,1211.7 1838.67,1211.9 1839.26,1209.61 1839.84,1208.39 1840.43,1209.99 1841.01,1210.35 1841.6,1209.35 1842.19,1208.28 1842.77,1210.9 1843.36,1211.18 1843.95,1211.34 1844.53,1212.4 1845.12,1212.42 1845.71,1211.38 1846.29,1210.32 1846.88,1210.5 1847.47,1211.93 1848.05,1209.49 1848.64,1209.94 1849.22,1210.13 1849.81,1209.02 1850.4,1209.01 1850.98,1207.87 1851.57,1208.04 1852.16,1207.14 1852.74,1208.79 1853.33,1206.6 1853.92,1208.26 1854.5,1209.73 1855.09,1210.08 1855.68,1211.84 1856.26,1211.85 1856.85,1213.27 1857.43,1211.76 1858.02,1209.27 1858.61,1205.77 1859.19,1207.52 1859.78,1208.05 1860.37,1211.05 1860.95,1212.62 1861.54,1212.72 1862.13,1215.02 1862.71,1213.85 1863.3,1214.83 1863.88,1213.93 1864.47,1213.97 1865.06,1213.96 1865.64,1213.97 1866.23,1212.63 1866.82,1212.72 1867.4,1210.34 1867.99,1210.44 1868.58,1209.19 1869.16,1208.19 1869.75,1209.5 1870.34,1210.82 1870.92,1211.15 1871.51,1208.78 1872.09,1207.68 1872.68,1207.98 1873.27,1212.07 1873.85,1213.43 1874.44,1213.3 1875.03,1214.45 1875.61,1213.25 1876.2,1214.58 1876.79,1216.07 1877.37,1215.98 1877.96,1212.34 1878.55,1213.64 1879.13,1211.11 1879.72,1209.88 1880.3,1211.03 1880.89,1213.77 1881.48,1212.62 1882.06,1212.58 1882.65,1212.77 1883.24,1211.39 1883.82,1212.54 1884.41,1213.56 1885,1213.63 1885.58,1215.01 1886.17,1212.4 1886.76,1212.52 1887.34,1216.17 1887.93,1216.16 1888.51,1217.14 1889.1,1218.16 1889.69,1216.89 1890.27,1214.17 1890.86,1214 1891.45,1214.19 1892.03,1213.96 1892.62,1215.33 1893.21,1216.19 1893.79,1217.4 1894.38,1218.45 1894.96,1219.41 1895.55,1220.33 1896.14,1220.15 1896.72,1219.86 1897.31,1220.62 1897.9,1222.78 1898.48,1223.62 1899.07,1224.27 1899.66,1222.36 1900.24,1221.82 1900.83,1220.26 1901.42,1223.57 1902,1225.45 1902.59,1223.42 1903.17,1220.62 1903.76,1221.52 1904.35,1221.28 1904.93,1222.08 1905.52,1221.73 1906.11,1221.43 1906.69,1218.85 1907.28,1219.76 1907.87,1215.9 1908.45,1215.72 1909.04,1215.66 1909.63,1218.91 1910.21,1217.29 1910.8,1221.93 1911.38,1225.29 1911.97,1223.44 1912.56,1218.88 1913.14,1222.15 1913.73,1221.57 1914.32,1222.62 1914.9,1222.09 1915.49,1220.69 1916.08,1219.2 1916.66,1212.53 1917.25,1211.07 1917.83,1212.65 1918.42,1215.18 1919.01,1214 1919.59,1211.58 1920.18,1210.38 1920.77,1213.01 1921.35,1214.24 1921.94,1212.75 1922.53,1216.61 1923.11,1213.94 1923.7,1216.43 1924.29,1213.75 1924.87,1216.13 1925.46,1214.62 1926.04,1216.75 1926.63,1216.5 1927.22,1213.94 1927.8,1212.86 1928.39,1207.77 1928.98,1209.42 1929.56,1210.93 1930.15,1211.08 1930.74,1213.63 1931.32,1212.38 1931.91,1213.85 1932.5,1215.23 1933.08,1215.19 1933.67,1211.4 1934.25,1213.79 1934.84,1212.57 1935.43,1209.14 1936.01,1209.5 1936.6,1209.69 1937.19,1212.49 1937.77,1212.38 1938.36,1211.37 1938.95,1210.25 1939.53,1210.32 1940.12,1209.13 1940.71,1206.81 1941.29,1206.02 1941.88,1207.57 1942.46,1207.99 1943.05,1208.25 1943.64,1209.83 1944.22,1211.4 1944.81,1211.32 1945.4,1211.42 1945.98,1212.74 1946.57,1211.46 1947.16,1211.48 1947.74,1211.66 1948.33,1211.8 1948.91,1211.71 1949.5,1210.35 1950.09,1209.38 1950.67,1210.63 1951.26,1210.54 1951.85,1209.31 1952.43,1210.79 1953.02,1209.82 1953.61,1211.47 1954.19,1211.6 1954.78,1216.54 1955.37,1216.49 1955.95,1215.31 1956.54,1215.19 1957.12,1213.84 1957.71,1218.72 1958.3,1216.96 1958.88,1215.48 1959.47,1216.55 1960.06,1214.99 1960.64,1213.95 1961.23,1215.22 1961.82,1214.28 1962.4,1213.11 1962.99,1213.28 1963.58,1210.99 1964.16,1213.33 1964.75,1214.55 1965.33,1213.35 1965.92,1214.5 1966.51,1215.67 1967.09,1216.8 1967.68,1215.48 1968.27,1213.97 1968.85,1211.37 1969.44,1209.07 1970.03,1206.78 1970.61,1204.86 1971.2,1206.43 1971.78,1203.06 1972.37,1203.62 1972.96,1204.15 1973.54,1205.78 1974.13,1207.52 1974.72,1210.37 1975.3,1206.87 1975.89,1207.25 1976.48,1206.53 1977.06,1207.18 1977.65,1207.5 1978.24,1206.76 1978.82,1208.38 1979.41,1208.71 1979.99,1207.82 1980.58,1208.25 1981.17,1208.47 1981.75,1211.15 1982.34,1212.73 1982.93,1212.78 1983.51,1211.66 1984.1,1211.78 1984.69,1213.38 1985.27,1210.77 1985.86,1209.63 1986.45,1211.23 1987.03,1212.56 1987.62,1211.3 1988.2,1211.4 1988.79,1212.6 1989.38,1211.62 1989.96,1214.16 1990.55,1213.09 1991.14,1211.91 1991.72,1211.86 1992.31,1213.23 1992.9,1209.63 1993.48,1212.31 1994.07,1212.34 1994.65,1213.47 1995.24,1215.93 1995.83,1215.78 1996.41,1216.72 1997,1217.82 1997.59,1217.59 1998.17,1217.47 1998.76,1215.03 1999.35,1213.71 1999.93,1214.65 2000.52,1213.66 2001.11,1213.42 2001.69,1212.09 2002.28,1213.81 2002.86,1211.45 2003.45,1211.6 2004.04,1213.18 2004.62,1212.99 2005.21,1213.29 2005.8,1212.15 2006.38,1212.18 2006.97,1210.99 2007.56,1212.42 2008.14,1212.54 2008.73,1213.91 2009.32,1214.21 2009.9,1214.16 2010.49,1217.9 2011.07,1216.71 2011.66,1215.25 2012.25,1214.09 2012.83,1215.35 2013.42,1215.32 2014.01,1213.95 2014.59,1214.95 2015.18,1217.55 2015.77,1217.5 2016.35,1217.23 2016.94,1217.84 2017.53,1217.51 2018.11,1217.37 2018.7,1217 2019.28,1215.34 2019.87,1214.18 2020.46,1216.88 2021.04,1214.09 2021.63,1214.16 2022.22,1216.61 2022.8,1217.81 2023.39,1216.48 2023.98,1215.03 2024.56,1215.96 2025.15,1215.81 2025.73,1215.62 2026.32,1216.87 2026.91,1211.67 2027.49,1210.7 2028.08,1209.37 2028.67,1208.28 2029.25,1207.49 2029.84,1211.68 2030.43,1211.42 2031.01,1210.25 2031.6,1212.82 2032.19,1215.51 2032.77,1211.6 2033.36,1212.94 2033.94,1212.98 2034.53,1212.85 2035.12,1211.79 2035.7,1211.91 2036.29,1211.6 2036.88,1211.63 2037.46,1211.64 2038.05,1210.69 2038.64,1208.54 2039.22,1208.96 2039.81,1210.6 2040.4,1209.57 2040.98,1208.6 2041.57,1209.88 2042.15,1208.61 2042.74,1208.81 2043.33,1207.8 2043.91,1208.16 2044.5,1208.56 2045.09,1210.05 2045.67,1211.37 2046.26,1211.31 2046.85,1210.21 2047.43,1214.22 2048.02,1216.66 2048.6,1219.16 2049.19,1220.06 2049.78,1219.73 2050.36,1218.22 2050.95,1221.75 2051.54,1223.43 2052.12,1221.98 2052.71,1221.6 2053.3,1221.4 2053.88,1222.09 2054.47,1220.38 2055.06,1221.15 2055.64,1218.21 2056.23,1218.02 2056.81,1217.49 2057.4,1217.45 2057.99,1217.19 2058.57,1219.22 2059.16,1217.74 2059.75,1215.97 2060.33,1213.31 2060.92,1213.24 2061.51,1212.97 2062.09,1214.08 2062.68,1213.94 2063.27,1211.57 2063.85,1212.93 2064.44,1214.34 2065.02,1216.7 2065.61,1217.97 2066.2,1218.94 2066.78,1217.46 2067.37,1218.34 2067.96,1220.43 2068.54,1220.13 2069.13,1220.87 2069.72,1220.22 2070.3,1221.09 2070.89,1221.83 2071.48,1218.83 2072.06,1217.24 2072.65,1218.28 2073.23,1212.96 2073.82,1212.92 2074.41,1212.89 2074.99,1211.42 2075.58,1210.33 2076.17,1210.58 2076.75,1209.55 2077.34,1208.16 2077.93,1207.1 2078.51,1207.39 2079.1,1209.11 2079.68,1209.27 2080.27,1208.37 2080.86,1209.9 2081.44,1210.02 2082.03,1211.4 2082.62,1210.19 2083.2,1207.7 2083.79,1205.32 2084.38,1205.63 2084.96,1207.21 2085.55,1209.04 2086.14,1210.34 2086.72,1210.43 2087.31,1210.83 2087.89,1210.93 2088.48,1210.07 2089.07,1209.17 2089.65,1211.78 2090.24,1213.22 2090.83,1214.5 2091.41,1214.31 2092,1215.64 2092.59,1217.85 2093.17,1217.85 2093.76,1217.5 2094.35,1217.25 2094.93,1215.83 2095.52,1217.12 2096.1,1215.74 2096.69,1214.21 2097.28,1215.38 2097.86,1217.06 2098.45,1218.33 2099.04,1217.98 2099.62,1218.82 2100.21,1218.73 2100.8,1218.56 2101.38,1221.9 2101.97,1221.52 2102.55,1219.93 2103.14,1220.84 2103.73,1217.07 2104.31,1215.76 2104.9,1219.26 2105.49,1219.04 2106.07,1217.41 2106.66,1217.24 2107.25,1218.45 2107.83,1216.79 2108.42,1215.5 2109.01,1216.39 2109.59,1218.52 2110.18,1218.17 2110.76,1215.58 2111.35,1216.82 2111.94,1215.58 2112.52,1216.82 2113.11,1215.72 2113.7,1215.7 2114.28,1213.11 2114.87,1214.53 2115.46,1218.13 2116.04,1217.79 2116.63,1217.69 2117.22,1217.52 2117.8,1215.97 2118.39,1214.48 2118.97,1212.14 2119.56,1212.11 2120.15,1213.22 2120.73,1213.02 2121.32,1212.91 2121.91,1212.95 2122.49,1214.2 2123.08,1215.61 2123.67,1214.2 2124.25,1215.34 2124.84,1216.34 2125.42,1216.25 2126.01,1217.23 2126.6,1219.4 2127.18,1219.25 2127.77,1218.95 2128.36,1218.67 2128.94,1217.2 2129.53,1219.46 2130.12,1216.68 2130.7,1216.37 2131.29,1215.3 2131.88,1215.32 2132.46,1215.12 2133.05,1213.62 2133.63,1213.5 2134.22,1211.04 2134.81,1210.12 2135.39,1210.53 2135.98,1209.66 2136.57,1211.16 2137.15,1212.56 2137.74,1215.25 2138.33,1216.22 2138.91,1215.11 2139.5,1214.95 2140.09,1213.77 2140.67,1215.05 2141.26,1215.19 2141.84,1216.39 2142.43,1216.51 2143.02,1215.3 2143.6,1212.82 2144.19,1213.06 2144.78,1212.02 2145.36,1211 2145.95,1210.97 2146.54,1210.03 2147.12,1207.76 2147.71,1210.61 2148.3,1210.77 2148.88,1209.78 2149.47,1208.88 2150.05,1211.62 2150.64,1211.79 2151.23,1212.04 2151.81,1212.18 2152.4,1212.41 2152.99,1211.21 2153.57,1212.39 2154.16,1213.78 2154.75,1217.56 2155.33,1218.69 2155.92,1217.39 2156.5,1215.98 2157.09,1215.72 2157.68,1216.79 2158.26,1216.76 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1214.19 L986.612 1214.19 L987.198 1214.19 L987.785 1214.19 L988.371 1214.19 L988.957 1214.19 L989.544 1214.19 L990.13 1214.19 L990.717 1214.19 L991.303 1214.19 L991.889 1214.19 L992.476 1214.19 L993.062 1214.19 L993.649 1214.19 L994.235 1214.19 L994.822 1214.19 L995.408 1214.19 L995.994 1214.19 L996.581 1214.19 L997.167 1214.19 L997.754 1214.19 L998.34 1214.19 L998.926 1214.19 L999.513 1214.19 L1000.1 1214.19 L1000.69 1214.19 L1001.27 1214.19 L1001.86 1214.19 L1002.44 1214.19 L1003.03 1214.19 L1003.62 1214.19 L1004.2 1214.19 L1004.79 1214.19 L1005.38 1214.19 L1005.96 1214.19 L1006.55 1214.19 L1007.14 1214.19 L1007.72 1214.19 L1008.31 1214.19 L1008.9 1214.19 L1009.48 1214.19 L1010.07 1214.19 L1010.65 1214.19 L1011.24 1214.19 L1011.83 1214.19 L1012.41 1214.19 L1013 1214.19 L1013.59 1214.19 L1014.17 1214.19 L1014.76 1214.19 L1015.35 1214.19 L1015.93 1214.19 L1016.52 1214.19 L1017.11 1214.19 L1017.69 1214.19 L1018.28 1214.19 L1018.86 1214.19 L1019.45 1214.19 L1020.04 1214.19 L1020.62 1214.19 L1021.21 1214.19 L1021.8 1214.19 L1022.38 1214.19 L1022.97 1214.19 L1023.56 1214.19 L1024.14 1214.19 L1024.73 1214.19 L1025.32 1214.19 L1025.9 1214.19 L1026.49 1214.19 L1027.07 1214.19 L1027.66 1214.19 L1028.25 1214.19 L1028.83 1214.19 L1029.42 1214.19 L1030.01 1214.19 L1030.59 1214.19 L1031.18 1214.19 L1031.77 1214.19 L1032.35 1214.19 L1032.94 1214.19 L1033.52 1214.19 L1034.11 1214.19 L1034.7 1214.19 L1035.28 1214.19 L1035.87 1214.19 L1036.46 1214.19 L1037.04 1214.19 L1037.63 1214.19 L1038.22 1214.19 L1038.8 1214.19 L1039.39 1214.19 L1039.98 1214.19 L1040.56 1214.19 L1041.15 1214.19 L1041.73 1214.19 L1042.32 1214.19 L1042.91 1214.19 L1043.49 1214.19 L1044.08 1214.19 L1044.67 1214.19 L1045.25 1214.19 L1045.84 1214.19 L1046.43 1214.19 L1047.01 1214.19 L1047.6 1214.19 L1048.19 1214.19 L1048.77 1214.19 L1049.36 1214.19 L1049.94 1214.19 L1050.53 1214.19 L1051.12 1214.19 L1051.7 1214.19 L1052.29 1214.19 L1052.88 1214.19 L1053.46 1214.19 L1054.05 1214.19 L1054.64 1214.19 L1055.22 1214.19 L1055.81 1214.19 L1056.39 1214.19 L1056.98 1214.19 L1057.57 1214.19 L1058.15 1214.19 L1058.74 1214.19 L1059.33 1214.19 L1059.91 1214.19 L1060.5 1214.19 L1061.09 1214.19 L1061.67 1214.19 L1062.26 1214.19 L1062.85 1214.19 L1063.43 1214.19 L1064.02 1214.19 L1064.6 1214.19 L1065.19 1214.19 L1065.78 1214.19 L1066.36 1214.19 L1066.95 1214.19 L1067.54 1214.19 L1068.12 1214.19 L1068.71 1214.19 L1069.3 1214.19 L1069.88 1214.19 L1070.47 1214.19 L1071.06 1214.19 L1071.64 1214.19 L1072.23 1214.19 L1072.81 1214.19 L1073.4 1214.19 L1073.99 1214.19 L1074.57 1214.19 L1075.16 1214.19 L1075.75 1214.19 L1076.33 1214.19 L1076.92 1214.19 L1077.51 1214.19 L1078.09 1214.19 L1078.68 1214.19 L1079.26 1214.19 L1079.85 1214.19 L1080.44 1214.19 L1081.02 1214.19 L1081.61 1214.19 L1082.2 1214.19 L1082.78 1214.19 L1083.37 1214.19 L1083.96 1214.19 L1084.54 1214.19 L1085.13 1214.19 L1085.72 1214.19 L1086.3 1214.19 L1086.89 1214.19 L1087.47 1214.19 L1088.06 1214.19 L1088.65 1214.19 L1089.23 1214.19 L1089.82 1214.19 L1090.41 1214.19 L1090.99 1214.19 L1091.58 1214.19 L1092.17 1214.19 L1092.75 1214.19 L1093.34 1214.19 L1093.93 1214.19 L1094.51 1214.19 L1095.1 1214.19 L1095.68 1214.19 L1096.27 1214.19 L1096.86 1214.19 L1097.44 1214.19 L1098.03 1214.19 L1098.62 1214.19 L1099.2 1214.19 L1099.79 1214.19 L1100.38 1214.19 L1100.96 1214.19 L1101.55 1214.19 L1102.14 1214.19 L1102.72 1214.19 L1103.31 1214.19 L1103.89 1214.19 L1104.48 1214.19 L1105.07 1214.19 L1105.65 1214.19 L1106.24 1214.19 L1106.83 1214.19 L1107.41 1214.19 L1108 1214.19 L1108.59 1214.19 L1109.17 1214.19 L1109.76 1214.19 L1110.34 1214.19 L1110.93 1214.19 L1111.52 1214.19 L1112.1 1214.19 L1112.69 1214.19 L1113.28 1214.19 L1113.86 1214.19 L1114.45 1214.19 L1115.04 1214.19 L1115.62 1214.19 L1116.21 1214.19 L1116.8 1214.19 L1117.38 1214.19 L1117.97 1214.19 L1118.55 1214.19 L1119.14 1214.19 L1119.73 1214.19 L1120.31 1214.19 L1120.9 1214.19 L1121.49 1214.19 L1122.07 1214.19 L1122.66 1214.19 L1123.25 1214.19 L1123.83 1214.19 L1124.42 1214.19 L1125.01 1214.19 L1125.59 1214.19 L1126.18 1214.19 L1126.76 1214.19 L1127.35 1214.19 L1127.94 1214.19 L1128.52 1214.19 L1129.11 1214.19 L1129.7 1214.19 L1130.28 1214.19 L1130.87 1214.19 L1131.46 1214.19 L1132.04 1214.19 L1132.63 1214.19 L1133.21 1214.19 L1133.8 1214.19 L1134.39 1214.19 L1134.97 1214.19 L1135.56 1214.19 L1136.15 1214.19 L1136.73 1214.19 L1137.32 1214.19 L1137.91 1214.19 L1138.49 1214.19 L1139.08 1214.19 L1139.67 1214.19 L1140.25 1214.19 L1140.84 1214.19 L1141.42 1214.19 L1142.01 1214.19 L1142.6 1214.19 L1143.18 1214.19 L1143.77 1214.19 L1144.36 1214.19 L1144.94 1214.19 L1145.53 1214.19 L1146.12 1214.19 L1146.7 1214.19 L1147.29 1214.19 L1147.88 1214.19 L1148.46 1214.19 L1149.05 1214.19 L1149.63 1214.19 L1150.22 1214.19 L1150.81 1214.19 L1151.39 1214.19 L1151.98 1214.19 L1152.57 1214.19 L1153.15 1214.19 L1153.74 1214.19 L1154.33 1214.19 L1154.91 1214.19 L1155.5 1214.19 L1156.09 1214.19 L1156.67 1214.19 L1157.26 1214.19 L1157.84 1214.19 L1158.43 1214.19 L1159.02 1214.19 L1159.6 1214.19 L1160.19 1214.19 L1160.78 1214.19 L1161.36 1214.19 L1161.95 1214.19 L1162.54 1214.19 L1163.12 1214.19 L1163.71 1214.19 L1164.29 1214.19 L1164.88 1214.19 L1165.47 1214.19 L1166.05 1214.19 L1166.64 1214.19 L1167.23 1214.19 L1167.81 1214.19 L1168.4 1214.19 L1168.99 1214.19 L1169.57 1214.19 L1170.16 1214.19 L1170.75 1214.19 L1171.33 1214.19 L1171.92 1214.19 L1172.5 1214.19 L1173.09 1214.19 L1173.68 1214.19 L1174.26 1214.19 L1174.85 1214.19 L1175.44 1214.19 L1176.02 1214.19 L1176.61 1214.19 L1177.2 1214.19 L1177.78 1214.19 L1178.37 1214.19 L1178.96 1214.19 L1179.54 1214.19 L1180.13 1214.19 L1180.71 1214.19 L1181.3 1214.19 L1181.89 1214.19 L1182.47 1214.19 L1183.06 1214.19 L1183.65 1214.19 L1184.23 1214.19 L1184.82 1214.19 L1185.41 1214.19 L1185.99 1214.19 L1186.58 1214.19 L1187.16 1214.19 L1187.75 1214.19 L1188.34 1214.19 L1188.92 1214.19 L1189.51 1214.19 L1190.1 1214.19 L1190.68 1214.19 L1191.27 1214.19 L1191.86 1214.19 L1192.44 1214.19 L1193.03 1214.19 L1193.62 1214.19 L1194.2 1214.19 L1194.79 1214.19 L1195.37 1214.19 L1195.96 1214.19 L1196.55 1214.19 L1197.13 1214.19 L1197.72 1214.19 L1198.31 1214.19 L1198.89 1214.19 L1199.48 1214.19 L1200.07 1214.19 L1200.65 1214.19 L1201.24 1214.19 L1201.83 1214.19 L1202.41 1214.19 L1203 1214.19 L1203.58 1214.19 L1204.17 1214.19 L1204.76 1214.19 L1205.34 1214.19 L1205.93 1214.19 L1206.52 1214.19 L1207.1 1214.19 L1207.69 1214.19 L1208.28 1214.19 L1208.86 1214.19 L1209.45 1214.19 L1210.03 1214.19 L1210.62 1214.19 L1211.21 1214.19 L1211.79 1214.19 L1212.38 1214.19 L1212.97 1214.19 L1213.55 1214.19 L1214.14 1214.19 L1214.73 1214.19 L1215.31 1214.19 L1215.9 1214.19 L1216.49 1214.19 L1217.07 1214.19 L1217.66 1214.19 L1218.24 1214.19 L1218.83 1214.19 L1219.42 1214.19 L1220 1214.19 L1220.59 1214.19 L1221.18 1214.19 L1221.76 1214.19 L1222.35 1214.19 L1222.94 1214.19 L1223.52 1214.19 L1224.11 1214.19 L1224.7 1214.19 L1225.28 1214.19 L1225.87 1214.19 L1226.45 1214.19 L1227.04 1214.19 L1227.63 1214.19 L1228.21 1214.19 L1228.8 1214.19 L1229.39 1214.19 L1229.97 1214.19 L1230.56 1214.19 L1231.15 1214.19 L1231.73 1214.19 L1232.32 1214.19 L1232.91 1214.19 L1233.49 1214.19 L1234.08 1214.19 L1234.66 1214.19 L1235.25 1214.19 L1235.84 1214.19 L1236.42 1214.19 L1237.01 1214.19 L1237.6 1214.19 L1238.18 1214.19 L1238.77 1214.19 L1239.36 1214.19 L1239.94 1214.19 L1240.53 1214.19 L1241.11 1214.19 L1241.7 1214.19 L1242.29 1214.19 L1242.87 1214.19 L1243.46 1214.19 L1244.05 1214.19 L1244.63 1214.19 L1245.22 1214.19 L1245.81 1214.19 L1246.39 1214.19 L1246.98 1214.19 L1247.57 1214.19 L1248.15 1214.19 L1248.74 1214.19 L1249.32 1214.19 L1249.91 1214.19 L1250.5 1214.19 L1251.08 1214.19 L1251.67 1214.19 L1252.26 1214.19 L1252.84 1214.19 L1253.43 1214.19 L1254.02 1214.19 L1254.6 1214.19 L1255.19 1214.19 L1255.78 1214.19 L1256.36 1214.19 L1256.95 1214.19 L1257.53 1214.19 L1258.12 1214.19 L1258.71 1214.19 L1259.29 1214.19 L1259.88 1214.19 L1260.47 1214.19 L1261.05 1214.19 L1261.64 1214.19 L1262.23 1214.19 L1262.81 1214.19 L1263.4 1214.19 L1263.98 1214.19 L1264.57 1214.19 L1265.16 1214.19 L1265.74 1214.19 L1266.33 1214.19 L1266.92 1214.19 L1267.5 1214.19 L1268.09 1214.19 L1268.68 1214.19 L1269.26 1214.19 L1269.85 1214.19 L1270.44 1214.19 L1271.02 1214.19 L1271.61 1214.19 L1272.19 1214.19 L1272.78 1214.19 L1273.37 1214.19 L1273.95 1214.19 L1274.54 1214.19 L1275.13 1214.19 L1275.71 1214.19 L1276.3 1214.19 L1276.89 1214.19 L1277.47 1214.19 L1278.06 1214.19 L1278.65 1214.19 L1279.23 1214.19 L1279.82 1214.19 L1280.4 1214.19 L1280.99 1214.19 L1281.58 1214.19 L1282.16 1214.19 L1282.75 1214.19 L1283.34 1214.19 L1283.92 1214.19 L1284.51 1214.19 L1285.1 1214.19 L1285.68 1214.19 L1286.27 1214.19 L1286.86 1214.19 L1287.44 1214.19 L1288.03 1214.19 L1288.61 1214.19 L1289.2 1214.19 L1289.79 1214.19 L1290.37 1214.19 L1290.96 1214.19 L1291.55 1214.19 L1292.13 1214.19 L1292.72 1214.19 L1293.31 1214.19 L1293.89 1214.19 L1294.48 1214.19 L1295.06 1214.19 L1295.65 1214.19 L1296.24 1214.19 L1296.82 1214.19 L1297.41 1214.19 L1298 1214.19 L1298.58 1214.19 L1299.17 1214.19 L1299.76 1214.19 L1300.34 1214.19 L1300.93 1214.19 L1301.52 1214.19 L1302.1 1214.19 L1302.69 1214.19 L1303.27 1214.19 L1303.86 1214.19 L1304.45 1214.19 L1305.03 1214.19 L1305.62 1214.19 L1306.21 1214.19 L1306.79 1214.19 L1307.38 1214.19 L1307.97 1214.19 L1308.55 1214.19 L1309.14 1214.19 L1309.73 1214.19 L1310.31 1214.19 L1310.9 1214.19 L1311.48 1214.19 L1312.07 1214.19 L1312.66 1214.19 L1313.24 1214.19 L1313.83 1214.19 L1314.42 1214.19 L1315 1214.19 L1315.59 1214.19 L1316.18 1214.19 L1316.76 1214.19 L1317.35 1214.19 L1317.93 1214.19 L1318.52 1214.19 L1319.11 1214.19 L1319.69 1214.19 L1320.28 1214.19 L1320.87 1214.19 L1321.45 1214.19 L1322.04 1214.19 L1322.63 1214.19 L1323.21 1214.19 L1323.8 1214.19 L1324.39 1214.19 L1324.97 1214.19 L1325.56 1214.19 L1326.14 1214.19 L1326.73 1214.19 L1327.32 1214.19 L1327.9 1214.19 L1328.49 1214.19 L1329.08 1214.19 L1329.66 1214.19 L1330.25 1214.19 L1330.84 1214.19 L1331.42 1214.19 L1332.01 1214.19 L1332.6 1214.19 L1333.18 1214.19 L1333.77 1214.19 L1334.35 1214.19 L1334.94 1214.19 L1335.53 1214.19 L1336.11 1214.19 L1336.7 1214.19 L1337.29 1214.19 L1337.87 1214.19 L1338.46 1214.19 L1339.05 1214.19 L1339.63 1214.19 L1340.22 1214.19 L1340.8 1214.19 L1341.39 1214.19 L1341.98 1214.19 L1342.56 1214.19 L1343.15 1214.19 L1343.74 1214.19 L1344.32 1214.19 L1344.91 1214.19 L1345.5 1214.19 L1346.08 1214.19 L1346.67 1214.19 L1347.26 1214.19 L1347.84 1214.19 L1348.43 1214.19 L1349.01 1214.19 L1349.6 1214.19 L1350.19 1214.19 L1350.77 1214.19 L1351.36 1214.19 L1351.95 1214.19 L1352.53 1214.19 L1353.12 1214.19 L1353.71 1214.19 L1354.29 1214.19 L1354.88 1214.19 L1355.47 1214.19 L1356.05 1214.19 L1356.64 1214.19 L1357.22 1214.19 L1357.81 1214.19 L1358.4 1214.19 L1358.98 1214.19 L1359.57 1214.19 L1360.16 1214.19 L1360.74 1214.19 L1361.33 1214.19 L1361.92 1214.19 L1362.5 1214.19 L1363.09 1214.19 L1363.68 1214.19 L1364.26 1214.19 L1364.85 1214.19 L1365.43 1214.19 L1366.02 1214.19 L1366.61 1214.19 L1367.19 1214.19 L1367.78 1214.19 L1368.37 1214.19 L1368.95 1214.19 L1369.54 1214.19 L1370.13 1214.19 L1370.71 1214.19 L1371.3 1214.19 L1371.88 1214.19 L1372.47 1214.19 L1373.06 1214.19 L1373.64 1214.19 L1374.23 1214.19 L1374.82 1214.19 L1375.4 1214.19 L1375.99 1214.19 L1376.58 1214.19 L1377.16 1214.19 L1377.75 1214.19 L1378.34 1214.19 L1378.92 1214.19 L1379.51 1214.19 L1380.09 1214.19 L1380.68 1214.19 L1381.27 1214.19 L1381.85 1214.19 L1382.44 1214.19 L1383.03 1214.19 L1383.61 1214.19 L1384.2 1214.19 L1384.79 1214.19 L1385.37 1214.19 L1385.96 1214.19 L1386.55 1214.19 L1387.13 1214.19 L1387.72 1214.19 L1388.3 1214.19 L1388.89 1214.19 L1389.48 1214.19 L1390.06 1214.19 L1390.65 1214.19 L1391.24 1214.19 L1391.82 1214.19 L1392.41 1214.19 L1393 1214.19 L1393.58 1214.19 L1394.17 1214.19 L1394.75 1214.19 L1395.34 1214.19 L1395.93 1214.19 L1396.51 1214.19 L1397.1 1214.19 L1397.69 1214.19 L1398.27 1214.19 L1398.86 1214.19 L1399.45 1214.19 L1400.03 1214.19 L1400.62 1214.19 L1401.21 1214.19 L1401.79 1214.19 L1402.38 1214.19 L1402.96 1214.19 L1403.55 1214.19 L1404.14 1214.19 L1404.72 1214.19 L1405.31 1214.19 L1405.9 1214.19 L1406.48 1214.19 L1407.07 1214.19 L1407.66 1214.19 L1408.24 1214.19 L1408.83 1214.19 L1409.42 1214.19 L1410 1214.19 L1410.59 1214.19 L1411.17 1214.19 L1411.76 1214.19 L1412.35 1214.19 L1412.93 1214.19 L1413.52 1214.19 L1414.11 1214.19 L1414.69 1214.19 L1415.28 1214.19 L1415.87 1214.19 L1416.45 1214.19 L1417.04 1214.19 L1417.63 1214.19 L1418.21 1214.19 L1418.8 1214.19 L1419.38 1214.19 L1419.97 1214.19 L1420.56 1214.19 L1421.14 1214.19 L1421.73 1214.19 L1422.32 1214.19 L1422.9 1214.19 L1423.49 1214.19 L1424.08 1214.19 L1424.66 1214.19 L1425.25 1214.19 L1425.83 1214.19 L1426.42 1214.19 L1427.01 1214.19 L1427.59 1214.19 L1428.18 1214.19 L1428.77 1214.19 L1429.35 1214.19 L1429.94 1214.19 L1430.53 1214.19 L1431.11 1214.19 L1431.7 1214.19 L1432.29 1214.19 L1432.87 1214.19 L1433.46 1214.19 L1434.04 1214.19 L1434.63 1214.19 L1435.22 1214.19 L1435.8 1214.19 L1436.39 1214.19 L1436.98 1214.19 L1437.56 1214.19 L1438.15 1214.19 L1438.74 1214.19 L1439.32 1214.19 L1439.91 1214.19 L1440.5 1214.19 L1441.08 1214.19 L1441.67 1214.19 L1442.25 1214.19 L1442.84 1214.19 L1443.43 1214.19 L1444.01 1214.19 L1444.6 1214.19 L1445.19 1214.19 L1445.77 1214.19 L1446.36 1214.19 L1446.95 1214.19 L1447.53 1214.19 L1448.12 1214.19 L1448.7 1214.19 L1449.29 1214.19 L1449.88 1214.19 L1450.46 1214.19 L1451.05 1214.19 L1451.64 1214.19 L1452.22 1214.19 L1452.81 1214.19 L1453.4 1214.19 L1453.98 1214.19 L1454.57 1214.19 L1455.16 1214.19 L1455.74 1214.19 L1456.33 1214.19 L1456.91 1214.19 L1457.5 1214.19 L1458.09 1214.19 L1458.67 1214.19 L1459.26 1214.19 L1459.85 1214.19 L1460.43 1214.19 L1461.02 1214.19 L1461.61 1214.19 L1462.19 1214.19 L1462.78 1214.19 L1463.37 1214.19 L1463.95 1214.19 L1464.54 1214.19 L1465.12 1214.19 L1465.71 1214.19 L1466.3 1214.19 L1466.88 1214.19 L1467.47 1214.19 L1468.06 1214.19 L1468.64 1214.19 L1469.23 1214.19 L1469.82 1214.19 L1470.4 1214.19 L1470.99 1214.19 L1471.57 1214.19 L1472.16 1214.19 L1472.75 1214.19 L1473.33 1214.19 L1473.92 1214.19 L1474.51 1214.19 L1475.09 1214.19 L1475.68 1214.19 L1476.27 1214.19 L1476.85 1214.19 L1477.44 1214.19 L1478.03 1214.19 L1478.61 1214.19 L1479.2 1214.19 L1479.78 1214.19 L1480.37 1214.19 L1480.96 1214.19 L1481.54 1214.19 L1482.13 1214.19 L1482.72 1214.19 L1483.3 1214.19 L1483.89 1214.19 L1484.48 1214.19 L1485.06 1214.19 L1485.65 1214.19 L1486.24 1214.19 L1486.82 1214.19 L1487.41 1214.19 L1487.99 1214.19 L1488.58 1214.19 L1489.17 1214.19 L1489.75 1214.19 L1490.34 1214.19 L1490.93 1214.19 L1491.51 1214.19 L1492.1 1214.19 L1492.69 1214.19 L1493.27 1214.19 L1493.86 1214.19 L1494.45 1214.19 L1495.03 1214.19 L1495.62 1214.19 L1496.2 1214.19 L1496.79 1214.19 L1497.38 1214.19 L1497.96 1214.19 L1498.55 1214.19 L1499.14 1214.19 L1499.72 1214.19 L1500.31 1214.19 L1500.9 1214.19 L1501.48 1214.19 L1502.07 1214.19 L1502.65 1214.19 L1503.24 1214.19 L1503.83 1214.19 L1504.41 1214.19 L1505 1214.19 L1505.59 1214.19 L1506.17 1214.19 L1506.76 1214.19 L1507.35 1214.19 L1507.93 1214.19 L1508.52 1214.19 L1509.11 1214.19 L1509.69 1214.19 L1510.28 1214.19 L1510.86 1214.19 L1511.45 1214.19 L1512.04 1214.19 L1512.62 1214.19 L1513.21 1214.19 L1513.8 1214.19 L1514.38 1214.19 L1514.97 1214.19 L1515.56 1214.19 L1516.14 1214.19 L1516.73 1214.19 L1517.32 1214.19 L1517.9 1214.19 L1518.49 1214.19 L1519.07 1214.19 L1519.66 1214.19 L1520.25 1214.19 L1520.83 1214.19 L1521.42 1214.19 L1522.01 1214.19 L1522.59 1214.19 L1523.18 1214.19 L1523.77 1214.19 L1524.35 1214.19 L1524.94 1214.19 L1525.52 1214.19 L1526.11 1214.19 L1526.7 1214.19 L1527.28 1214.19 L1527.87 1214.19 L1528.46 1214.19 L1529.04 1214.19 L1529.63 1214.19 L1530.22 1214.19 L1530.8 1214.19 L1531.39 1214.19 L1531.98 1214.19 L1532.56 1214.19 L1533.15 1214.19 L1533.73 1214.19 L1534.32 1214.19 L1534.91 1214.19 L1535.49 1214.19 L1536.08 1214.19 L1536.67 1214.19 L1537.25 1214.19 L1537.84 1214.19 L1538.43 1214.19 L1539.01 1214.19 L1539.6 1214.19 L1540.19 1214.19 L1540.77 1214.19 L1541.36 1214.19 L1541.94 1214.19 L1542.53 1214.19 L1543.12 1214.19 L1543.7 1214.19 L1544.29 1214.19 L1544.88 1214.19 L1545.46 1214.19 L1546.05 1214.19 L1546.64 1214.19 L1547.22 1214.19 L1547.81 1214.19 L1548.4 1214.19 L1548.98 1214.19 L1549.57 1214.19 L1550.15 1214.19 L1550.74 1214.19 L1551.33 1214.19 L1551.91 1214.19 L1552.5 1214.19 L1553.09 1214.19 L1553.67 1214.19 L1554.26 1214.19 L1554.85 1214.19 L1555.43 1214.19 L1556.02 1214.19 L1556.6 1214.19 L1557.19 1214.19 L1557.78 1214.19 L1558.36 1214.19 L1558.95 1214.19 L1559.54 1214.19 L1560.12 1214.19 L1560.71 1214.19 L1561.3 1214.19 L1561.88 1214.19 L1562.47 1214.19 L1563.06 1214.19 L1563.64 1214.19 L1564.23 1214.19 L1564.81 1214.19 L1565.4 1214.19 L1565.99 1214.19 L1566.57 1214.19 L1567.16 1214.19 L1567.75 1214.19 L1568.33 1214.19 L1568.92 1214.19 L1569.51 1214.19 L1570.09 1214.19 L1570.68 1214.19 L1571.27 1214.19 L1571.85 1214.19 L1572.44 1214.19 L1573.02 1214.19 L1573.61 1214.19 L1574.2 1214.19 L1574.78 1214.19 L1575.37 1214.19 L1575.96 1214.19 L1576.54 1214.19 L1577.13 1214.19 L1577.72 1214.19 L1578.3 1214.19 L1578.89 1214.19 L1579.47 1214.19 L1580.06 1214.19 L1580.65 1214.19 L1581.23 1214.19 L1581.82 1214.19 L1582.41 1214.19 L1582.99 1214.19 L1583.58 1214.19 L1584.17 1214.19 L1584.75 1214.19 L1585.34 1214.19 L1585.93 1214.19 L1586.51 1214.19 L1587.1 1214.19 L1587.68 1214.19 L1588.27 1214.19 L1588.86 1214.19 L1589.44 1214.19 L1590.03 1214.19 L1590.62 1214.19 L1591.2 1214.19 L1591.79 1214.19 L1592.38 1214.19 L1592.96 1214.19 L1593.55 1214.19 L1594.14 1214.19 L1594.72 1214.19 L1595.31 1214.19 L1595.89 1214.19 L1596.48 1214.19 L1597.07 1214.19 L1597.65 1214.19 L1598.24 1214.19 L1598.83 1214.19 L1599.41 1214.19 L1600 1214.19 L1600.59 1214.19 L1601.17 1214.19 L1601.76 1214.19 L1602.34 1214.19 L1602.93 1214.19 L1603.52 1214.19 L1604.1 1214.19 L1604.69 1214.19 L1605.28 1214.19 L1605.86 1214.19 L1606.45 1214.19 L1607.04 1214.19 L1607.62 1214.19 L1608.21 1214.19 L1608.8 1214.19 L1609.38 1214.19 L1609.97 1214.19 L1610.55 1214.19 L1611.14 1214.19 L1611.73 1214.19 L1612.31 1214.19 L1612.9 1214.19 L1613.49 1214.19 L1614.07 1214.19 L1614.66 1214.19 L1615.25 1214.19 L1615.83 1214.19 L1616.42 1214.19 L1617.01 1214.19 L1617.59 1214.19 L1618.18 1214.19 L1618.76 1214.19 L1619.35 1214.19 L1619.94 1214.19 L1620.52 1214.19 L1621.11 1214.19 L1621.7 1214.19 L1622.28 1214.19 L1622.87 1214.19 L1623.46 1214.19 L1624.04 1214.19 L1624.63 1214.19 L1625.22 1214.19 L1625.8 1214.19 L1626.39 1214.19 L1626.97 1214.19 L1627.56 1214.19 L1628.15 1214.19 L1628.73 1214.19 L1629.32 1214.19 L1629.91 1214.19 L1630.49 1214.19 L1631.08 1214.19 L1631.67 1214.19 L1632.25 1214.19 L1632.84 1214.19 L1633.42 1214.19 L1634.01 1214.19 L1634.6 1214.19 L1635.18 1214.19 L1635.77 1214.19 L1636.36 1214.19 L1636.94 1214.19 L1637.53 1214.19 L1638.12 1214.19 L1638.7 1214.19 L1639.29 1214.19 L1639.88 1214.19 L1640.46 1214.19 L1641.05 1214.19 L1641.63 1214.19 L1642.22 1214.19 L1642.81 1214.19 L1643.39 1214.19 L1643.98 1214.19 L1644.57 1214.19 L1645.15 1214.19 L1645.74 1214.19 L1646.33 1214.19 L1646.91 1214.19 L1647.5 1214.19 L1648.09 1214.19 L1648.67 1214.19 L1649.26 1214.19 L1649.84 1214.19 L1650.43 1214.19 L1651.02 1214.19 L1651.6 1214.19 L1652.19 1214.19 L1652.78 1214.19 L1653.36 1214.19 L1653.95 1214.19 L1654.54 1214.19 L1655.12 1214.19 L1655.71 1214.19 L1656.29 1214.19 L1656.88 1214.19 L1657.47 1214.19 L1658.05 1214.19 L1658.64 1214.19 L1659.23 1214.19 L1659.81 1214.19 L1660.4 1214.19 L1660.99 1214.19 L1661.57 1214.19 L1662.16 1214.19 L1662.75 1214.19 L1663.33 1214.19 L1663.92 1214.19 L1664.5 1214.19 L1665.09 1214.19 L1665.68 1214.19 L1666.26 1214.19 L1666.85 1214.19 L1667.44 1214.19 L1668.02 1214.19 L1668.61 1214.19 L1669.2 1214.19 L1669.78 1214.19 L1670.37 1214.19 L1670.96 1214.19 L1671.54 1214.19 L1672.13 1214.19 L1672.71 1214.19 L1673.3 1214.19 L1673.89 1214.19 L1674.47 1214.19 L1675.06 1214.19 L1675.65 1214.19 L1676.23 1214.19 L1676.82 1214.19 L1677.41 1214.19 L1677.99 1214.19 L1678.58 1214.19 L1679.17 1214.19 L1679.75 1214.19 L1680.34 1214.19 L1680.92 1214.19 L1681.51 1214.19 L1682.1 1214.19 L1682.68 1214.19 L1683.27 1214.19 L1683.86 1214.19 L1684.44 1214.19 L1685.03 1214.19 L1685.62 1214.19 L1686.2 1214.19 L1686.79 1214.19 L1687.37 1214.19 L1687.96 1214.19 L1688.55 1214.19 L1689.13 1214.19 L1689.72 1214.19 L1690.31 1214.19 L1690.89 1214.19 L1691.48 1214.19 L1692.07 1214.19 L1692.65 1214.19 L1693.24 1214.19 L1693.83 1214.19 L1694.41 1214.19 L1695 1214.19 L1695.58 1214.19 L1696.17 1214.19 L1696.76 1214.19 L1697.34 1214.19 L1697.93 1214.19 L1698.52 1214.19 L1699.1 1214.19 L1699.69 1214.19 L1700.28 1214.19 L1700.86 1214.19 L1701.45 1214.19 L1702.04 1214.19 L1702.62 1214.19 L1703.21 1214.19 L1703.79 1214.19 L1704.38 1214.19 L1704.97 1214.19 L1705.55 1214.19 L1706.14 1214.19 L1706.73 1214.19 L1707.31 1214.19 L1707.9 1214.19 L1708.49 1214.19 L1709.07 1214.19 L1709.66 1214.19 L1710.24 1214.19 L1710.83 1214.19 L1711.42 1214.19 L1712 1214.19 L1712.59 1214.19 L1713.18 1214.19 L1713.76 1214.19 L1714.35 1214.19 L1714.94 1214.19 L1715.52 1214.19 L1716.11 1214.19 L1716.7 1214.19 L1717.28 1214.19 L1717.87 1214.19 L1718.45 1214.19 L1719.04 1214.19 L1719.63 1214.19 L1720.21 1214.19 L1720.8 1214.19 L1721.39 1214.19 L1721.97 1214.19 L1722.56 1214.19 L1723.15 1214.19 L1723.73 1214.19 L1724.32 1214.19 L1724.91 1214.19 L1725.49 1214.19 L1726.08 1214.19 L1726.66 1214.19 L1727.25 1214.19 L1727.84 1214.19 L1728.42 1214.19 L1729.01 1214.19 L1729.6 1214.19 L1730.18 1214.19 L1730.77 1214.19 L1731.36 1214.19 L1731.94 1214.19 L1732.53 1214.19 L1733.11 1214.19 L1733.7 1214.19 L1734.29 1214.19 L1734.87 1214.19 L1735.46 1214.19 L1736.05 1214.19 L1736.63 1214.19 L1737.22 1214.19 L1737.81 1214.19 L1738.39 1214.19 L1738.98 1214.19 L1739.57 1214.19 L1740.15 1214.19 L1740.74 1214.19 L1741.32 1214.19 L1741.91 1214.19 L1742.5 1214.19 L1743.08 1214.19 L1743.67 1214.19 L1744.26 1214.19 L1744.84 1214.19 L1745.43 1214.19 L1746.02 1214.19 L1746.6 1214.19 L1747.19 1214.19 L1747.78 1214.19 L1748.36 1214.19 L1748.95 1214.19 L1749.53 1214.19 L1750.12 1214.19 L1750.71 1214.19 L1751.29 1214.19 L1751.88 1214.19 L1752.47 1214.19 L1753.05 1214.19 L1753.64 1214.19 L1754.23 1214.19 L1754.81 1214.19 L1755.4 1214.19 L1755.99 1214.19 L1756.57 1214.19 L1757.16 1214.19 L1757.74 1214.19 L1758.33 1214.19 L1758.92 1214.19 L1759.5 1214.19 L1760.09 1214.19 L1760.68 1214.19 L1761.26 1214.19 L1761.85 1214.19 L1762.44 1214.19 L1763.02 1214.19 L1763.61 1214.19 L1764.19 1214.19 L1764.78 1214.19 L1765.37 1214.19 L1765.95 1214.19 L1766.54 1214.19 L1767.13 1214.19 L1767.71 1214.19 L1768.3 1214.19 L1768.89 1214.19 L1769.47 1214.19 L1770.06 1214.19 L1770.65 1214.19 L1771.23 1214.19 L1771.82 1214.19 L1772.4 1214.19 L1772.99 1214.19 L1773.58 1214.19 L1774.16 1214.19 L1774.75 1214.19 L1775.34 1214.19 L1775.92 1214.19 L1776.51 1214.19 L1777.1 1214.19 L1777.68 1214.19 L1778.27 1214.19 L1778.86 1214.19 L1779.44 1214.19 L1780.03 1214.19 L1780.61 1214.19 L1781.2 1214.19 L1781.79 1214.19 L1782.37 1214.19 L1782.96 1214.19 L1783.55 1214.19 L1784.13 1214.19 L1784.72 1214.19 L1785.31 1214.19 L1785.89 1214.19 L1786.48 1214.19 L1787.06 1214.19 L1787.65 1214.19 L1788.24 1214.19 L1788.82 1214.19 L1789.41 1214.19 L1790 1214.19 L1790.58 1214.19 L1791.17 1214.19 L1791.76 1214.19 L1792.34 1214.19 L1792.93 1214.19 L1793.52 1214.19 L1794.1 1214.19 L1794.69 1214.19 L1795.27 1214.19 L1795.86 1214.19 L1796.45 1214.19 L1797.03 1214.19 L1797.62 1214.19 L1798.21 1214.19 L1798.79 1214.19 L1799.38 1214.19 L1799.97 1214.19 L1800.55 1214.19 L1801.14 1214.19 L1801.73 1214.19 L1802.31 1214.19 L1802.9 1214.19 L1803.48 1214.19 L1804.07 1214.19 L1804.66 1214.19 L1805.24 1214.19 L1805.83 1214.19 L1806.42 1214.19 L1807 1214.19 L1807.59 1214.19 L1808.18 1214.19 L1808.76 1214.19 L1809.35 1214.19 L1809.94 1214.19 L1810.52 1214.19 L1811.11 1214.19 L1811.69 1214.19 L1812.28 1214.19 L1812.87 1214.19 L1813.45 1214.19 L1814.04 1214.19 L1814.63 1214.19 L1815.21 1214.19 L1815.8 1214.19 L1816.39 1214.19 L1816.97 1214.19 L1817.56 1214.19 L1818.14 1214.19 L1818.73 1214.19 L1819.32 1214.19 L1819.9 1214.19 L1820.49 1214.19 L1821.08 1214.19 L1821.66 1214.19 L1822.25 1214.19 L1822.84 1214.19 L1823.42 1214.19 L1824.01 1214.19 L1824.6 1214.19 L1825.18 1214.19 L1825.77 1214.19 L1826.35 1214.19 L1826.94 1214.19 L1827.53 1214.19 L1828.11 1214.19 L1828.7 1214.19 L1829.29 1214.19 L1829.87 1214.19 L1830.46 1214.19 L1831.05 1214.19 L1831.63 1214.19 L1832.22 1214.19 L1832.81 1214.19 L1833.39 1214.19 L1833.98 1214.19 L1834.56 1214.19 L1835.15 1214.19 L1835.74 1214.19 L1836.32 1214.19 L1836.91 1214.19 L1837.5 1214.19 L1838.08 1214.19 L1838.67 1214.19 L1839.26 1214.19 L1839.84 1214.19 L1840.43 1214.19 L1841.01 1214.19 L1841.6 1214.19 L1842.19 1214.19 L1842.77 1214.19 L1843.36 1214.19 L1843.95 1214.19 L1844.53 1214.19 L1845.12 1214.19 L1845.71 1214.19 L1846.29 1214.19 L1846.88 1214.19 L1847.47 1214.19 L1848.05 1214.19 L1848.64 1214.19 L1849.22 1214.19 L1849.81 1214.19 L1850.4 1214.19 L1850.98 1214.19 L1851.57 1214.19 L1852.16 1214.19 L1852.74 1214.19 L1853.33 1214.19 L1853.92 1214.19 L1854.5 1214.19 L1855.09 1214.19 L1855.68 1214.19 L1856.26 1214.19 L1856.85 1214.19 L1857.43 1214.19 L1858.02 1214.19 L1858.61 1214.19 L1859.19 1214.19 L1859.78 1214.19 L1860.37 1214.19 L1860.95 1214.19 L1861.54 1214.19 L1862.13 1214.19 L1862.71 1214.19 L1863.3 1214.19 L1863.88 1214.19 L1864.47 1214.19 L1865.06 1214.19 L1865.64 1214.19 L1866.23 1214.19 L1866.82 1214.19 L1867.4 1214.19 L1867.99 1214.19 L1868.58 1214.19 L1869.16 1214.19 L1869.75 1214.19 L1870.34 1214.19 L1870.92 1214.19 L1871.51 1214.19 L1872.09 1214.19 L1872.68 1214.19 L1873.27 1214.19 L1873.85 1214.19 L1874.44 1214.19 L1875.03 1214.19 L1875.61 1214.19 L1876.2 1214.19 L1876.79 1214.19 L1877.37 1214.19 L1877.96 1214.19 L1878.55 1214.19 L1879.13 1214.19 L1879.72 1214.19 L1880.3 1214.19 L1880.89 1214.19 L1881.48 1214.19 L1882.06 1214.19 L1882.65 1214.19 L1883.24 1214.19 L1883.82 1214.19 L1884.41 1214.19 L1885 1214.19 L1885.58 1214.19 L1886.17 1214.19 L1886.76 1214.19 L1887.34 1214.19 L1887.93 1214.19 L1888.51 1214.19 L1889.1 1214.19 L1889.69 1214.19 L1890.27 1214.19 L1890.86 1214.19 L1891.45 1214.19 L1892.03 1214.19 L1892.62 1214.19 L1893.21 1214.19 L1893.79 1214.19 L1894.38 1214.19 L1894.96 1214.19 L1895.55 1214.19 L1896.14 1214.19 L1896.72 1214.19 L1897.31 1214.19 L1897.9 1214.19 L1898.48 1214.19 L1899.07 1214.19 L1899.66 1214.19 L1900.24 1214.19 L1900.83 1214.19 L1901.42 1214.19 L1902 1214.19 L1902.59 1214.19 L1903.17 1214.19 L1903.76 1214.19 L1904.35 1214.19 L1904.93 1214.19 L1905.52 1214.19 L1906.11 1214.19 L1906.69 1214.19 L1907.28 1214.19 L1907.87 1214.19 L1908.45 1214.19 L1909.04 1214.19 L1909.63 1214.19 L1910.21 1214.19 L1910.8 1214.19 L1911.38 1214.19 L1911.97 1214.19 L1912.56 1214.19 L1913.14 1214.19 L1913.73 1214.19 L1914.32 1214.19 L1914.9 1214.19 L1915.49 1214.19 L1916.08 1214.19 L1916.66 1214.19 L1917.25 1214.19 L1917.83 1214.19 L1918.42 1214.19 L1919.01 1214.19 L1919.59 1214.19 L1920.18 1214.19 L1920.77 1214.19 L1921.35 1214.19 L1921.94 1214.19 L1922.53 1214.19 L1923.11 1214.19 L1923.7 1214.19 L1924.29 1214.19 L1924.87 1214.19 L1925.46 1214.19 L1926.04 1214.19 L1926.63 1214.19 L1927.22 1214.19 L1927.8 1214.19 L1928.39 1214.19 L1928.98 1214.19 L1929.56 1214.19 L1930.15 1214.19 L1930.74 1214.19 L1931.32 1214.19 L1931.91 1214.19 L1932.5 1214.19 L1933.08 1214.19 L1933.67 1214.19 L1934.25 1214.19 L1934.84 1214.19 L1935.43 1214.19 L1936.01 1214.19 L1936.6 1214.19 L1937.19 1214.19 L1937.77 1214.19 L1938.36 1214.19 L1938.95 1214.19 L1939.53 1214.19 L1940.12 1214.19 L1940.71 1214.19 L1941.29 1214.19 L1941.88 1214.19 L1942.46 1214.19 L1943.05 1214.19 L1943.64 1214.19 L1944.22 1214.19 L1944.81 1214.19 L1945.4 1214.19 L1945.98 1214.19 L1946.57 1214.19 L1947.16 1214.19 L1947.74 1214.19 L1948.33 1214.19 L1948.91 1214.19 L1949.5 1214.19 L1950.09 1214.19 L1950.67 1214.19 L1951.26 1214.19 L1951.85 1214.19 L1952.43 1214.19 L1953.02 1214.19 L1953.61 1214.19 L1954.19 1214.19 L1954.78 1214.19 L1955.37 1214.19 L1955.95 1214.19 L1956.54 1214.19 L1957.12 1214.19 L1957.71 1214.19 L1958.3 1214.19 L1958.88 1214.19 L1959.47 1214.19 L1960.06 1214.19 L1960.64 1214.19 L1961.23 1214.19 L1961.82 1214.19 L1962.4 1214.19 L1962.99 1214.19 L1963.58 1214.19 L1964.16 1214.19 L1964.75 1214.19 L1965.33 1214.19 L1965.92 1214.19 L1966.51 1214.19 L1967.09 1214.19 L1967.68 1214.19 L1968.27 1214.19 L1968.85 1214.19 L1969.44 1214.19 L1970.03 1214.19 L1970.61 1214.19 L1971.2 1214.19 L1971.78 1214.19 L1972.37 1214.19 L1972.96 1214.19 L1973.54 1214.19 L1974.13 1214.19 L1974.72 1214.19 L1975.3 1214.19 L1975.89 1214.19 L1976.48 1214.19 L1977.06 1214.19 L1977.65 1214.19 L1978.24 1214.19 L1978.82 1214.19 L1979.41 1214.19 L1979.99 1214.19 L1980.58 1214.19 L1981.17 1214.19 L1981.75 1214.19 L1982.34 1214.19 L1982.93 1214.19 L1983.51 1214.19 L1984.1 1214.19 L1984.69 1214.19 L1985.27 1214.19 L1985.86 1214.19 L1986.45 1214.19 L1987.03 1214.19 L1987.62 1214.19 L1988.2 1214.19 L1988.79 1214.19 L1989.38 1214.19 L1989.96 1214.19 L1990.55 1214.19 L1991.14 1214.19 L1991.72 1214.19 L1992.31 1214.19 L1992.9 1214.19 L1993.48 1214.19 L1994.07 1214.19 L1994.65 1214.19 L1995.24 1214.19 L1995.83 1214.19 L1996.41 1214.19 L1997 1214.19 L1997.59 1214.19 L1998.17 1214.19 L1998.76 1214.19 L1999.35 1214.19 L1999.93 1214.19 L2000.52 1214.19 L2001.11 1214.19 L2001.69 1214.19 L2002.28 1214.19 L2002.86 1214.19 L2003.45 1214.19 L2004.04 1214.19 L2004.62 1214.19 L2005.21 1214.19 L2005.8 1214.19 L2006.38 1214.19 L2006.97 1214.19 L2007.56 1214.19 L2008.14 1214.19 L2008.73 1214.19 L2009.32 1214.19 L2009.9 1214.19 L2010.49 1214.19 L2011.07 1214.19 L2011.66 1214.19 L2012.25 1214.19 L2012.83 1214.19 L2013.42 1214.19 L2014.01 1214.19 L2014.59 1214.19 L2015.18 1214.19 L2015.77 1214.19 L2016.35 1214.19 L2016.94 1214.19 L2017.53 1214.19 L2018.11 1214.19 L2018.7 1214.19 L2019.28 1214.19 L2019.87 1214.19 L2020.46 1214.19 L2021.04 1214.19 L2021.63 1214.19 L2022.22 1214.19 L2022.8 1214.19 L2023.39 1214.19 L2023.98 1214.19 L2024.56 1214.19 L2025.15 1214.19 L2025.73 1214.19 L2026.32 1214.19 L2026.91 1214.19 L2027.49 1214.19 L2028.08 1214.19 L2028.67 1214.19 L2029.25 1214.19 L2029.84 1214.19 L2030.43 1214.19 L2031.01 1214.19 L2031.6 1214.19 L2032.19 1214.19 L2032.77 1214.19 L2033.36 1214.19 L2033.94 1214.19 L2034.53 1214.19 L2035.12 1214.19 L2035.7 1214.19 L2036.29 1214.19 L2036.88 1214.19 L2037.46 1214.19 L2038.05 1214.19 L2038.64 1214.19 L2039.22 1214.19 L2039.81 1214.19 L2040.4 1214.19 L2040.98 1214.19 L2041.57 1214.19 L2042.15 1214.19 L2042.74 1214.19 L2043.33 1214.19 L2043.91 1214.19 L2044.5 1214.19 L2045.09 1214.19 L2045.67 1214.19 L2046.26 1214.19 L2046.85 1214.19 L2047.43 1214.19 L2048.02 1214.19 L2048.6 1214.19 L2049.19 1214.19 L2049.78 1214.19 L2050.36 1214.19 L2050.95 1214.19 L2051.54 1214.19 L2052.12 1214.19 L2052.71 1214.19 L2053.3 1214.19 L2053.88 1214.19 L2054.47 1214.19 L2055.06 1214.19 L2055.64 1214.19 L2056.23 1214.19 L2056.81 1214.19 L2057.4 1214.19 L2057.99 1214.19 L2058.57 1214.19 L2059.16 1214.19 L2059.75 1214.19 L2060.33 1214.19 L2060.92 1214.19 L2061.51 1214.19 L2062.09 1214.19 L2062.68 1214.19 L2063.27 1214.19 L2063.85 1214.19 L2064.44 1214.19 L2065.02 1214.19 L2065.61 1214.19 L2066.2 1214.19 L2066.78 1214.19 L2067.37 1214.19 L2067.96 1214.19 L2068.54 1214.19 L2069.13 1214.19 L2069.72 1214.19 L2070.3 1214.19 L2070.89 1214.19 L2071.48 1214.19 L2072.06 1214.19 L2072.65 1214.19 L2073.23 1214.19 L2073.82 1214.19 L2074.41 1214.19 L2074.99 1214.19 L2075.58 1214.19 L2076.17 1214.19 L2076.75 1214.19 L2077.34 1214.19 L2077.93 1214.19 L2078.51 1214.19 L2079.1 1214.19 L2079.68 1214.19 L2080.27 1214.19 L2080.86 1214.19 L2081.44 1214.19 L2082.03 1214.19 L2082.62 1214.19 L2083.2 1214.19 L2083.79 1214.19 L2084.38 1214.19 L2084.96 1214.19 L2085.55 1214.19 L2086.14 1214.19 L2086.72 1214.19 L2087.31 1214.19 L2087.89 1214.19 L2088.48 1214.19 L2089.07 1214.19 L2089.65 1214.19 L2090.24 1214.19 L2090.83 1214.19 L2091.41 1214.19 L2092 1214.19 L2092.59 1214.19 L2093.17 1214.19 L2093.76 1214.19 L2094.35 1214.19 L2094.93 1214.19 L2095.52 1214.19 L2096.1 1214.19 L2096.69 1214.19 L2097.28 1214.19 L2097.86 1214.19 L2098.45 1214.19 L2099.04 1214.19 L2099.62 1214.19 L2100.21 1214.19 L2100.8 1214.19 L2101.38 1214.19 L2101.97 1214.19 L2102.55 1214.19 L2103.14 1214.19 L2103.73 1214.19 L2104.31 1214.19 L2104.9 1214.19 L2105.49 1214.19 L2106.07 1214.19 L2106.66 1214.19 L2107.25 1214.19 L2107.83 1214.19 L2108.42 1214.19 L2109.01 1214.19 L2109.59 1214.19 L2110.18 1214.19 L2110.76 1214.19 L2111.35 1214.19 L2111.94 1214.19 L2112.52 1214.19 L2113.11 1214.19 L2113.7 1214.19 L2114.28 1214.19 L2114.87 1214.19 L2115.46 1214.19 L2116.04 1214.19 L2116.63 1214.19 L2117.22 1214.19 L2117.8 1214.19 L2118.39 1214.19 L2118.97 1214.19 L2119.56 1214.19 L2120.15 1214.19 L2120.73 1214.19 L2121.32 1214.19 L2121.91 1214.19 L2122.49 1214.19 L2123.08 1214.19 L2123.67 1214.19 L2124.25 1214.19 L2124.84 1214.19 L2125.42 1214.19 L2126.01 1214.19 L2126.6 1214.19 L2127.18 1214.19 L2127.77 1214.19 L2128.36 1214.19 L2128.94 1214.19 L2129.53 1214.19 L2130.12 1214.19 L2130.7 1214.19 L2131.29 1214.19 L2131.88 1214.19 L2132.46 1214.19 L2133.05 1214.19 L2133.63 1214.19 L2134.22 1214.19 L2134.81 1214.19 L2135.39 1214.19 L2135.98 1214.19 L2136.57 1214.19 L2137.15 1214.19 L2137.74 1214.19 L2138.33 1214.19 L2138.91 1214.19 L2139.5 1214.19 L2140.09 1214.19 L2140.67 1214.19 L2141.26 1214.19 L2141.84 1214.19 L2142.43 1214.19 L2143.02 1214.19 L2143.6 1214.19 L2144.19 1214.19 L2144.78 1214.19 L2145.36 1214.19 L2145.95 1214.19 L2146.54 1214.19 L2147.12 1214.19 L2147.71 1214.19 L2148.3 1214.19 L2148.88 1214.19 L2149.47 1214.19 L2150.05 1214.19 L2150.64 1214.19 L2151.23 1214.19 L2151.81 1214.19 L2152.4 1214.19 L2152.99 1214.19 L2153.57 1214.19 L2154.16 1214.19 L2154.75 1214.19 L2155.33 1214.19 L2155.92 1214.19 L2156.5 1214.19 L2157.09 1214.19 L2157.68 1214.19 L2158.26 1214.19 L2158.26 1213.48 L2157.68 1213.48 L2157.09 1213.48 L2156.5 1213.48 L2155.92 1213.48 L2155.33 1213.48 L2154.75 1213.48 L2154.16 1213.48 L2153.57 1213.48 L2152.99 1213.48 L2152.4 1213.48 L2151.81 1213.48 L2151.23 1213.48 L2150.64 1213.48 L2150.05 1213.48 L2149.47 1213.48 L2148.88 1213.48 L2148.3 1213.48 L2147.71 1213.48 L2147.12 1213.48 L2146.54 1213.48 L2145.95 1213.48 L2145.36 1213.48 L2144.78 1213.48 L2144.19 1213.48 L2143.6 1213.48 L2143.02 1213.48 L2142.43 1213.48 L2141.84 1213.48 L2141.26 1213.48 L2140.67 1213.48 L2140.09 1213.48 L2139.5 1213.48 L2138.91 1213.48 L2138.33 1213.48 L2137.74 1213.48 L2137.15 1213.48 L2136.57 1213.48 L2135.98 1213.48 L2135.39 1213.48 L2134.81 1213.48 L2134.22 1213.48 L2133.63 1213.48 L2133.05 1213.48 L2132.46 1213.48 L2131.88 1213.48 L2131.29 1213.48 L2130.7 1213.48 L2130.12 1213.48 L2129.53 1213.48 L2128.94 1213.48 L2128.36 1213.48 L2127.77 1213.48 L2127.18 1213.48 L2126.6 1213.48 L2126.01 1213.48 L2125.42 1213.48 L2124.84 1213.48 L2124.25 1213.48 L2123.67 1213.48 L2123.08 1213.48 L2122.49 1213.48 L2121.91 1213.48 L2121.32 1213.48 L2120.73 1213.48 L2120.15 1213.48 L2119.56 1213.48 L2118.97 1213.48 L2118.39 1213.48 L2117.8 1213.48 L2117.22 1213.48 L2116.63 1213.48 L2116.04 1213.48 L2115.46 1213.48 L2114.87 1213.48 L2114.28 1213.48 L2113.7 1213.48 L2113.11 1213.48 L2112.52 1213.48 L2111.94 1213.48 L2111.35 1213.48 L2110.76 1213.48 L2110.18 1213.48 L2109.59 1213.48 L2109.01 1213.48 L2108.42 1213.48 L2107.83 1213.48 L2107.25 1213.48 L2106.66 1213.48 L2106.07 1213.48 L2105.49 1213.48 L2104.9 1213.48 L2104.31 1213.48 L2103.73 1213.48 L2103.14 1213.48 L2102.55 1213.48 L2101.97 1213.48 L2101.38 1213.48 L2100.8 1213.48 L2100.21 1213.48 L2099.62 1213.48 L2099.04 1213.48 L2098.45 1213.48 L2097.86 1213.48 L2097.28 1213.48 L2096.69 1213.48 L2096.1 1213.48 L2095.52 1213.48 L2094.93 1213.48 L2094.35 1213.48 L2093.76 1213.48 L2093.17 1213.48 L2092.59 1213.48 L2092 1213.48 L2091.41 1213.48 L2090.83 1213.48 L2090.24 1213.48 L2089.65 1213.48 L2089.07 1213.48 L2088.48 1213.48 L2087.89 1213.48 L2087.31 1213.48 L2086.72 1213.48 L2086.14 1213.48 L2085.55 1213.48 L2084.96 1213.48 L2084.38 1213.48 L2083.79 1213.48 L2083.2 1213.48 L2082.62 1213.48 L2082.03 1213.48 L2081.44 1213.48 L2080.86 1213.48 L2080.27 1213.48 L2079.68 1213.48 L2079.1 1213.48 L2078.51 1213.48 L2077.93 1213.48 L2077.34 1213.48 L2076.75 1213.48 L2076.17 1213.48 L2075.58 1213.48 L2074.99 1213.48 L2074.41 1213.48 L2073.82 1213.48 L2073.23 1213.48 L2072.65 1213.48 L2072.06 1213.48 L2071.48 1213.48 L2070.89 1213.48 L2070.3 1213.48 L2069.72 1213.48 L2069.13 1213.48 L2068.54 1213.48 L2067.96 1213.48 L2067.37 1213.48 L2066.78 1213.48 L2066.2 1213.48 L2065.61 1213.48 L2065.02 1213.48 L2064.44 1213.48 L2063.85 1213.48 L2063.27 1213.48 L2062.68 1213.48 L2062.09 1213.48 L2061.51 1213.48 L2060.92 1213.48 L2060.33 1213.48 L2059.75 1213.48 L2059.16 1213.48 L2058.57 1213.48 L2057.99 1213.48 L2057.4 1213.48 L2056.81 1213.48 L2056.23 1213.48 L2055.64 1213.48 L2055.06 1213.48 L2054.47 1213.48 L2053.88 1213.48 L2053.3 1213.48 L2052.71 1213.48 L2052.12 1213.48 L2051.54 1213.48 L2050.95 1213.48 L2050.36 1213.48 L2049.78 1213.48 L2049.19 1213.48 L2048.6 1213.48 L2048.02 1213.48 L2047.43 1213.48 L2046.85 1213.48 L2046.26 1213.48 L2045.67 1213.48 L2045.09 1213.48 L2044.5 1213.48 L2043.91 1213.48 L2043.33 1213.48 L2042.74 1213.48 L2042.15 1213.48 L2041.57 1213.48 L2040.98 1213.48 L2040.4 1213.48 L2039.81 1213.48 L2039.22 1213.48 L2038.64 1213.48 L2038.05 1213.48 L2037.46 1213.48 L2036.88 1213.48 L2036.29 1213.48 L2035.7 1213.48 L2035.12 1213.48 L2034.53 1213.48 L2033.94 1213.48 L2033.36 1213.48 L2032.77 1213.48 L2032.19 1213.48 L2031.6 1213.48 L2031.01 1213.48 L2030.43 1213.48 L2029.84 1213.48 L2029.25 1213.48 L2028.67 1213.48 L2028.08 1213.48 L2027.49 1213.48 L2026.91 1213.48 L2026.32 1213.48 L2025.73 1213.48 L2025.15 1213.48 L2024.56 1213.48 L2023.98 1213.48 L2023.39 1213.48 L2022.8 1213.48 L2022.22 1213.48 L2021.63 1213.48 L2021.04 1213.48 L2020.46 1213.48 L2019.87 1213.48 L2019.28 1213.48 L2018.7 1213.48 L2018.11 1213.48 L2017.53 1213.48 L2016.94 1213.48 L2016.35 1213.48 L2015.77 1213.48 L2015.18 1213.48 L2014.59 1213.48 L2014.01 1213.48 L2013.42 1213.48 L2012.83 1213.48 L2012.25 1213.48 L2011.66 1213.48 L2011.07 1213.48 L2010.49 1213.48 L2009.9 1213.48 L2009.32 1213.48 L2008.73 1213.48 L2008.14 1213.48 L2007.56 1213.48 L2006.97 1213.48 L2006.38 1213.48 L2005.8 1213.48 L2005.21 1213.48 L2004.62 1213.48 L2004.04 1213.48 L2003.45 1213.48 L2002.86 1213.48 L2002.28 1213.48 L2001.69 1213.48 L2001.11 1213.48 L2000.52 1213.48 L1999.93 1213.48 L1999.35 1213.48 L1998.76 1213.48 L1998.17 1213.48 L1997.59 1213.48 L1997 1213.48 L1996.41 1213.48 L1995.83 1213.48 L1995.24 1213.48 L1994.65 1213.48 L1994.07 1213.48 L1993.48 1213.48 L1992.9 1213.48 L1992.31 1213.48 L1991.72 1213.48 L1991.14 1213.48 L1990.55 1213.48 L1989.96 1213.48 L1989.38 1213.48 L1988.79 1213.48 L1988.2 1213.48 L1987.62 1213.48 L1987.03 1213.48 L1986.45 1213.48 L1985.86 1213.48 L1985.27 1213.48 L1984.69 1213.48 L1984.1 1213.48 L1983.51 1213.48 L1982.93 1213.48 L1982.34 1213.48 L1981.75 1213.48 L1981.17 1213.48 L1980.58 1213.48 L1979.99 1213.48 L1979.41 1213.48 L1978.82 1213.48 L1978.24 1213.48 L1977.65 1213.48 L1977.06 1213.48 L1976.48 1213.48 L1975.89 1213.48 L1975.3 1213.48 L1974.72 1213.48 L1974.13 1213.48 L1973.54 1213.48 L1972.96 1213.48 L1972.37 1213.48 L1971.78 1213.48 L1971.2 1213.48 L1970.61 1213.48 L1970.03 1213.48 L1969.44 1213.48 L1968.85 1213.48 L1968.27 1213.48 L1967.68 1213.48 L1967.09 1213.48 L1966.51 1213.48 L1965.92 1213.48 L1965.33 1213.48 L1964.75 1213.48 L1964.16 1213.48 L1963.58 1213.48 L1962.99 1213.48 L1962.4 1213.48 L1961.82 1213.48 L1961.23 1213.48 L1960.64 1213.48 L1960.06 1213.48 L1959.47 1213.48 L1958.88 1213.48 L1958.3 1213.48 L1957.71 1213.48 L1957.12 1213.48 L1956.54 1213.48 L1955.95 1213.48 L1955.37 1213.48 L1954.78 1213.48 L1954.19 1213.48 L1953.61 1213.48 L1953.02 1213.48 L1952.43 1213.48 L1951.85 1213.48 L1951.26 1213.48 L1950.67 1213.48 L1950.09 1213.48 L1949.5 1213.48 L1948.91 1213.48 L1948.33 1213.48 L1947.74 1213.48 L1947.16 1213.48 L1946.57 1213.48 L1945.98 1213.48 L1945.4 1213.48 L1944.81 1213.48 L1944.22 1213.48 L1943.64 1213.48 L1943.05 1213.48 L1942.46 1213.48 L1941.88 1213.48 L1941.29 1213.48 L1940.71 1213.48 L1940.12 1213.48 L1939.53 1213.48 L1938.95 1213.48 L1938.36 1213.48 L1937.77 1213.48 L1937.19 1213.48 L1936.6 1213.48 L1936.01 1213.48 L1935.43 1213.48 L1934.84 1213.48 L1934.25 1213.48 L1933.67 1213.48 L1933.08 1213.48 L1932.5 1213.48 L1931.91 1213.48 L1931.32 1213.48 L1930.74 1213.48 L1930.15 1213.48 L1929.56 1213.48 L1928.98 1213.48 L1928.39 1213.48 L1927.8 1213.48 L1927.22 1213.48 L1926.63 1213.48 L1926.04 1213.48 L1925.46 1213.48 L1924.87 1213.48 L1924.29 1213.48 L1923.7 1213.48 L1923.11 1213.48 L1922.53 1213.48 L1921.94 1213.48 L1921.35 1213.48 L1920.77 1213.48 L1920.18 1213.48 L1919.59 1213.48 L1919.01 1213.48 L1918.42 1213.48 L1917.83 1213.48 L1917.25 1213.48 L1916.66 1213.48 L1916.08 1213.48 L1915.49 1213.48 L1914.9 1213.48 L1914.32 1213.48 L1913.73 1213.48 L1913.14 1213.48 L1912.56 1213.48 L1911.97 1213.48 L1911.38 1213.48 L1910.8 1213.48 L1910.21 1213.48 L1909.63 1213.48 L1909.04 1213.48 L1908.45 1213.48 L1907.87 1213.48 L1907.28 1213.48 L1906.69 1213.48 L1906.11 1213.48 L1905.52 1213.48 L1904.93 1213.48 L1904.35 1213.48 L1903.76 1213.48 L1903.17 1213.48 L1902.59 1213.48 L1902 1213.48 L1901.42 1213.48 L1900.83 1213.48 L1900.24 1213.48 L1899.66 1213.48 L1899.07 1213.48 L1898.48 1213.48 L1897.9 1213.48 L1897.31 1213.48 L1896.72 1213.48 L1896.14 1213.48 L1895.55 1213.48 L1894.96 1213.48 L1894.38 1213.48 L1893.79 1213.48 L1893.21 1213.48 L1892.62 1213.48 L1892.03 1213.48 L1891.45 1213.48 L1890.86 1213.48 L1890.27 1213.48 L1889.69 1213.48 L1889.1 1213.48 L1888.51 1213.48 L1887.93 1213.48 L1887.34 1213.48 L1886.76 1213.48 L1886.17 1213.48 L1885.58 1213.48 L1885 1213.48 L1884.41 1213.48 L1883.82 1213.48 L1883.24 1213.48 L1882.65 1213.48 L1882.06 1213.48 L1881.48 1213.48 L1880.89 1213.48 L1880.3 1213.48 L1879.72 1213.48 L1879.13 1213.48 L1878.55 1213.48 L1877.96 1213.48 L1877.37 1213.48 L1876.79 1213.48 L1876.2 1213.48 L1875.61 1213.48 L1875.03 1213.48 L1874.44 1213.48 L1873.85 1213.48 L1873.27 1213.48 L1872.68 1213.48 L1872.09 1213.48 L1871.51 1213.48 L1870.92 1213.48 L1870.34 1213.48 L1869.75 1213.48 L1869.16 1213.48 L1868.58 1213.48 L1867.99 1213.48 L1867.4 1213.48 L1866.82 1213.48 L1866.23 1213.48 L1865.64 1213.48 L1865.06 1213.48 L1864.47 1213.48 L1863.88 1213.48 L1863.3 1213.48 L1862.71 1213.48 L1862.13 1213.48 L1861.54 1213.48 L1860.95 1213.48 L1860.37 1213.48 L1859.78 1213.48 L1859.19 1213.48 L1858.61 1213.48 L1858.02 1213.48 L1857.43 1213.48 L1856.85 1213.48 L1856.26 1213.48 L1855.68 1213.48 L1855.09 1213.48 L1854.5 1213.48 L1853.92 1213.48 L1853.33 1213.48 L1852.74 1213.48 L1852.16 1213.48 L1851.57 1213.48 L1850.98 1213.48 L1850.4 1213.48 L1849.81 1213.48 L1849.22 1213.48 L1848.64 1213.48 L1848.05 1213.48 L1847.47 1213.48 L1846.88 1213.48 L1846.29 1213.48 L1845.71 1213.48 L1845.12 1213.48 L1844.53 1213.48 L1843.95 1213.48 L1843.36 1213.48 L1842.77 1213.48 L1842.19 1213.48 L1841.6 1213.48 L1841.01 1213.48 L1840.43 1213.48 L1839.84 1213.48 L1839.26 1213.48 L1838.67 1213.48 L1838.08 1213.48 L1837.5 1213.48 L1836.91 1213.48 L1836.32 1213.48 L1835.74 1213.48 L1835.15 1213.48 L1834.56 1213.48 L1833.98 1213.48 L1833.39 1213.48 L1832.81 1213.48 L1832.22 1213.48 L1831.63 1213.48 L1831.05 1213.48 L1830.46 1213.48 L1829.87 1213.48 L1829.29 1213.48 L1828.7 1213.48 L1828.11 1213.48 L1827.53 1213.48 L1826.94 1213.48 L1826.35 1213.48 L1825.77 1213.48 L1825.18 1213.48 L1824.6 1213.48 L1824.01 1213.48 L1823.42 1213.48 L1822.84 1213.48 L1822.25 1213.48 L1821.66 1213.48 L1821.08 1213.48 L1820.49 1213.48 L1819.9 1213.48 L1819.32 1213.48 L1818.73 1213.48 L1818.14 1213.48 L1817.56 1213.48 L1816.97 1213.48 L1816.39 1213.48 L1815.8 1213.48 L1815.21 1213.48 L1814.63 1213.48 L1814.04 1213.48 L1813.45 1213.48 L1812.87 1213.48 L1812.28 1213.48 L1811.69 1213.48 L1811.11 1213.48 L1810.52 1213.48 L1809.94 1213.48 L1809.35 1213.48 L1808.76 1213.48 L1808.18 1213.48 L1807.59 1213.48 L1807 1213.48 L1806.42 1213.48 L1805.83 1213.48 L1805.24 1213.48 L1804.66 1213.48 L1804.07 1213.48 L1803.48 1213.48 L1802.9 1213.48 L1802.31 1213.48 L1801.73 1213.48 L1801.14 1213.48 L1800.55 1213.48 L1799.97 1213.48 L1799.38 1213.48 L1798.79 1213.48 L1798.21 1213.48 L1797.62 1213.48 L1797.03 1213.48 L1796.45 1213.48 L1795.86 1213.48 L1795.27 1213.48 L1794.69 1213.48 L1794.1 1213.48 L1793.52 1213.48 L1792.93 1213.48 L1792.34 1213.48 L1791.76 1213.48 L1791.17 1213.48 L1790.58 1213.48 L1790 1213.48 L1789.41 1213.48 L1788.82 1213.48 L1788.24 1213.48 L1787.65 1213.48 L1787.06 1213.48 L1786.48 1213.48 L1785.89 1213.48 L1785.31 1213.48 L1784.72 1213.48 L1784.13 1213.48 L1783.55 1213.48 L1782.96 1213.48 L1782.37 1213.48 L1781.79 1213.48 L1781.2 1213.48 L1780.61 1213.48 L1780.03 1213.48 L1779.44 1213.48 L1778.86 1213.48 L1778.27 1213.48 L1777.68 1213.48 L1777.1 1213.48 L1776.51 1213.48 L1775.92 1213.48 L1775.34 1213.48 L1774.75 1213.48 L1774.16 1213.48 L1773.58 1213.48 L1772.99 1213.48 L1772.4 1213.48 L1771.82 1213.48 L1771.23 1213.48 L1770.65 1213.48 L1770.06 1213.48 L1769.47 1213.48 L1768.89 1213.48 L1768.3 1213.48 L1767.71 1213.48 L1767.13 1213.48 L1766.54 1213.48 L1765.95 1213.48 L1765.37 1213.48 L1764.78 1213.48 L1764.19 1213.48 L1763.61 1213.48 L1763.02 1213.48 L1762.44 1213.48 L1761.85 1213.48 L1761.26 1213.48 L1760.68 1213.48 L1760.09 1213.48 L1759.5 1213.48 L1758.92 1213.48 L1758.33 1213.48 L1757.74 1213.48 L1757.16 1213.48 L1756.57 1213.48 L1755.99 1213.48 L1755.4 1213.48 L1754.81 1213.48 L1754.23 1213.48 L1753.64 1213.48 L1753.05 1213.48 L1752.47 1213.48 L1751.88 1213.48 L1751.29 1213.48 L1750.71 1213.48 L1750.12 1213.48 L1749.53 1213.48 L1748.95 1213.48 L1748.36 1213.48 L1747.78 1213.48 L1747.19 1213.48 L1746.6 1213.48 L1746.02 1213.48 L1745.43 1213.48 L1744.84 1213.48 L1744.26 1213.48 L1743.67 1213.48 L1743.08 1213.48 L1742.5 1213.48 L1741.91 1213.48 L1741.32 1213.48 L1740.74 1213.48 L1740.15 1213.48 L1739.57 1213.48 L1738.98 1213.48 L1738.39 1213.48 L1737.81 1213.48 L1737.22 1213.48 L1736.63 1213.48 L1736.05 1213.48 L1735.46 1213.48 L1734.87 1213.48 L1734.29 1213.48 L1733.7 1213.48 L1733.11 1213.48 L1732.53 1213.48 L1731.94 1213.48 L1731.36 1213.48 L1730.77 1213.48 L1730.18 1213.48 L1729.6 1213.48 L1729.01 1213.48 L1728.42 1213.48 L1727.84 1213.48 L1727.25 1213.48 L1726.66 1213.48 L1726.08 1213.48 L1725.49 1213.48 L1724.91 1213.48 L1724.32 1213.48 L1723.73 1213.48 L1723.15 1213.48 L1722.56 1213.48 L1721.97 1213.48 L1721.39 1213.48 L1720.8 1213.48 L1720.21 1213.48 L1719.63 1213.48 L1719.04 1213.48 L1718.45 1213.48 L1717.87 1213.48 L1717.28 1213.48 L1716.7 1213.48 L1716.11 1213.48 L1715.52 1213.48 L1714.94 1213.48 L1714.35 1213.48 L1713.76 1213.48 L1713.18 1213.48 L1712.59 1213.48 L1712 1213.48 L1711.42 1213.48 L1710.83 1213.48 L1710.24 1213.48 L1709.66 1213.48 L1709.07 1213.48 L1708.49 1213.48 L1707.9 1213.48 L1707.31 1213.48 L1706.73 1213.48 L1706.14 1213.48 L1705.55 1213.48 L1704.97 1213.48 L1704.38 1213.48 L1703.79 1213.48 L1703.21 1213.48 L1702.62 1213.48 L1702.04 1213.48 L1701.45 1213.48 L1700.86 1213.48 L1700.28 1213.48 L1699.69 1213.48 L1699.1 1213.48 L1698.52 1213.48 L1697.93 1213.48 L1697.34 1213.48 L1696.76 1213.48 L1696.17 1213.48 L1695.58 1213.48 L1695 1213.48 L1694.41 1213.48 L1693.83 1213.48 L1693.24 1213.48 L1692.65 1213.48 L1692.07 1213.48 L1691.48 1213.48 L1690.89 1213.48 L1690.31 1213.48 L1689.72 1213.48 L1689.13 1213.48 L1688.55 1213.48 L1687.96 1213.48 L1687.37 1213.48 L1686.79 1213.48 L1686.2 1213.48 L1685.62 1213.48 L1685.03 1213.48 L1684.44 1213.48 L1683.86 1213.48 L1683.27 1213.48 L1682.68 1213.48 L1682.1 1213.48 L1681.51 1213.48 L1680.92 1213.48 L1680.34 1213.48 L1679.75 1213.48 L1679.17 1213.48 L1678.58 1213.48 L1677.99 1213.48 L1677.41 1213.48 L1676.82 1213.48 L1676.23 1213.48 L1675.65 1213.48 L1675.06 1213.48 L1674.47 1213.48 L1673.89 1213.48 L1673.3 1213.48 L1672.71 1213.48 L1672.13 1213.48 L1671.54 1213.48 L1670.96 1213.48 L1670.37 1213.48 L1669.78 1213.48 L1669.2 1213.48 L1668.61 1213.48 L1668.02 1213.48 L1667.44 1213.48 L1666.85 1213.48 L1666.26 1213.48 L1665.68 1213.48 L1665.09 1213.48 L1664.5 1213.48 L1663.92 1213.48 L1663.33 1213.48 L1662.75 1213.48 L1662.16 1213.48 L1661.57 1213.48 L1660.99 1213.48 L1660.4 1213.48 L1659.81 1213.48 L1659.23 1213.48 L1658.64 1213.48 L1658.05 1213.48 L1657.47 1213.48 L1656.88 1213.48 L1656.29 1213.48 L1655.71 1213.48 L1655.12 1213.48 L1654.54 1213.48 L1653.95 1213.48 L1653.36 1213.48 L1652.78 1213.48 L1652.19 1213.48 L1651.6 1213.48 L1651.02 1213.48 L1650.43 1213.48 L1649.84 1213.48 L1649.26 1213.48 L1648.67 1213.48 L1648.09 1213.48 L1647.5 1213.48 L1646.91 1213.48 L1646.33 1213.48 L1645.74 1213.48 L1645.15 1213.48 L1644.57 1213.48 L1643.98 1213.48 L1643.39 1213.48 L1642.81 1213.48 L1642.22 1213.48 L1641.63 1213.48 L1641.05 1213.48 L1640.46 1213.48 L1639.88 1213.48 L1639.29 1213.48 L1638.7 1213.48 L1638.12 1213.48 L1637.53 1213.48 L1636.94 1213.48 L1636.36 1213.48 L1635.77 1213.48 L1635.18 1213.48 L1634.6 1213.48 L1634.01 1213.48 L1633.42 1213.48 L1632.84 1213.48 L1632.25 1213.48 L1631.67 1213.48 L1631.08 1213.48 L1630.49 1213.48 L1629.91 1213.48 L1629.32 1213.48 L1628.73 1213.48 L1628.15 1213.48 L1627.56 1213.48 L1626.97 1213.48 L1626.39 1213.48 L1625.8 1213.48 L1625.22 1213.48 L1624.63 1213.48 L1624.04 1213.48 L1623.46 1213.48 L1622.87 1213.48 L1622.28 1213.48 L1621.7 1213.48 L1621.11 1213.48 L1620.52 1213.48 L1619.94 1213.48 L1619.35 1213.48 L1618.76 1213.48 L1618.18 1213.48 L1617.59 1213.48 L1617.01 1213.48 L1616.42 1213.48 L1615.83 1213.48 L1615.25 1213.48 L1614.66 1213.48 L1614.07 1213.48 L1613.49 1213.48 L1612.9 1213.48 L1612.31 1213.48 L1611.73 1213.48 L1611.14 1213.48 L1610.55 1213.48 L1609.97 1213.48 L1609.38 1213.48 L1608.8 1213.48 L1608.21 1213.48 L1607.62 1213.48 L1607.04 1213.48 L1606.45 1213.48 L1605.86 1213.48 L1605.28 1213.48 L1604.69 1213.48 L1604.1 1213.48 L1603.52 1213.48 L1602.93 1213.48 L1602.34 1213.48 L1601.76 1213.48 L1601.17 1213.48 L1600.59 1213.48 L1600 1213.48 L1599.41 1213.48 L1598.83 1213.48 L1598.24 1213.48 L1597.65 1213.48 L1597.07 1213.48 L1596.48 1213.48 L1595.89 1213.48 L1595.31 1213.48 L1594.72 1213.48 L1594.14 1213.48 L1593.55 1213.48 L1592.96 1213.48 L1592.38 1213.48 L1591.79 1213.48 L1591.2 1213.48 L1590.62 1213.48 L1590.03 1213.48 L1589.44 1213.48 L1588.86 1213.48 L1588.27 1213.48 L1587.68 1213.48 L1587.1 1213.48 L1586.51 1213.48 L1585.93 1213.48 L1585.34 1213.48 L1584.75 1213.48 L1584.17 1213.48 L1583.58 1213.48 L1582.99 1213.48 L1582.41 1213.48 L1581.82 1213.48 L1581.23 1213.48 L1580.65 1213.48 L1580.06 1213.48 L1579.47 1213.48 L1578.89 1213.48 L1578.3 1213.48 L1577.72 1213.48 L1577.13 1213.48 L1576.54 1213.48 L1575.96 1213.48 L1575.37 1213.48 L1574.78 1213.48 L1574.2 1213.48 L1573.61 1213.48 L1573.02 1213.48 L1572.44 1213.48 L1571.85 1213.48 L1571.27 1213.48 L1570.68 1213.48 L1570.09 1213.48 L1569.51 1213.48 L1568.92 1213.48 L1568.33 1213.48 L1567.75 1213.48 L1567.16 1213.48 L1566.57 1213.48 L1565.99 1213.48 L1565.4 1213.48 L1564.81 1213.48 L1564.23 1213.48 L1563.64 1213.48 L1563.06 1213.48 L1562.47 1213.48 L1561.88 1213.48 L1561.3 1213.48 L1560.71 1213.48 L1560.12 1213.48 L1559.54 1213.48 L1558.95 1213.48 L1558.36 1213.48 L1557.78 1213.48 L1557.19 1213.48 L1556.6 1213.48 L1556.02 1213.48 L1555.43 1213.48 L1554.85 1213.48 L1554.26 1213.48 L1553.67 1213.48 L1553.09 1213.48 L1552.5 1213.48 L1551.91 1213.48 L1551.33 1213.48 L1550.74 1213.48 L1550.15 1213.48 L1549.57 1213.48 L1548.98 1213.48 L1548.4 1213.48 L1547.81 1213.48 L1547.22 1213.48 L1546.64 1213.48 L1546.05 1213.48 L1545.46 1213.48 L1544.88 1213.48 L1544.29 1213.48 L1543.7 1213.48 L1543.12 1213.48 L1542.53 1213.48 L1541.94 1213.48 L1541.36 1213.48 L1540.77 1213.48 L1540.19 1213.48 L1539.6 1213.48 L1539.01 1213.48 L1538.43 1213.48 L1537.84 1213.48 L1537.25 1213.48 L1536.67 1213.48 L1536.08 1213.48 L1535.49 1213.48 L1534.91 1213.48 L1534.32 1213.48 L1533.73 1213.48 L1533.15 1213.48 L1532.56 1213.48 L1531.98 1213.48 L1531.39 1213.48 L1530.8 1213.48 L1530.22 1213.48 L1529.63 1213.48 L1529.04 1213.48 L1528.46 1213.48 L1527.87 1213.48 L1527.28 1213.48 L1526.7 1213.48 L1526.11 1213.48 L1525.52 1213.48 L1524.94 1213.48 L1524.35 1213.48 L1523.77 1213.48 L1523.18 1213.48 L1522.59 1213.48 L1522.01 1213.48 L1521.42 1213.48 L1520.83 1213.48 L1520.25 1213.48 L1519.66 1213.48 L1519.07 1213.48 L1518.49 1213.48 L1517.9 1213.48 L1517.32 1213.48 L1516.73 1213.48 L1516.14 1213.48 L1515.56 1213.48 L1514.97 1213.48 L1514.38 1213.48 L1513.8 1213.48 L1513.21 1213.48 L1512.62 1213.48 L1512.04 1213.48 L1511.45 1213.48 L1510.86 1213.48 L1510.28 1213.48 L1509.69 1213.48 L1509.11 1213.48 L1508.52 1213.48 L1507.93 1213.48 L1507.35 1213.48 L1506.76 1213.48 L1506.17 1213.48 L1505.59 1213.48 L1505 1213.48 L1504.41 1213.48 L1503.83 1213.48 L1503.24 1213.48 L1502.65 1213.48 L1502.07 1213.48 L1501.48 1213.48 L1500.9 1213.48 L1500.31 1213.48 L1499.72 1213.48 L1499.14 1213.48 L1498.55 1213.48 L1497.96 1213.48 L1497.38 1213.48 L1496.79 1213.48 L1496.2 1213.48 L1495.62 1213.48 L1495.03 1213.48 L1494.45 1213.48 L1493.86 1213.48 L1493.27 1213.48 L1492.69 1213.48 L1492.1 1213.48 L1491.51 1213.48 L1490.93 1213.48 L1490.34 1213.48 L1489.75 1213.48 L1489.17 1213.48 L1488.58 1213.48 L1487.99 1213.48 L1487.41 1213.48 L1486.82 1213.48 L1486.24 1213.48 L1485.65 1213.48 L1485.06 1213.48 L1484.48 1213.48 L1483.89 1213.48 L1483.3 1213.48 L1482.72 1213.48 L1482.13 1213.48 L1481.54 1213.48 L1480.96 1213.48 L1480.37 1213.48 L1479.78 1213.48 L1479.2 1213.48 L1478.61 1213.48 L1478.03 1213.48 L1477.44 1213.48 L1476.85 1213.48 L1476.27 1213.48 L1475.68 1213.48 L1475.09 1213.48 L1474.51 1213.48 L1473.92 1213.48 L1473.33 1213.48 L1472.75 1213.48 L1472.16 1213.48 L1471.57 1213.48 L1470.99 1213.48 L1470.4 1213.48 L1469.82 1213.48 L1469.23 1213.48 L1468.64 1213.48 L1468.06 1213.48 L1467.47 1213.48 L1466.88 1213.48 L1466.3 1213.48 L1465.71 1213.48 L1465.12 1213.48 L1464.54 1213.48 L1463.95 1213.48 L1463.37 1213.48 L1462.78 1213.48 L1462.19 1213.48 L1461.61 1213.48 L1461.02 1213.48 L1460.43 1213.48 L1459.85 1213.48 L1459.26 1213.48 L1458.67 1213.48 L1458.09 1213.48 L1457.5 1213.48 L1456.91 1213.48 L1456.33 1213.48 L1455.74 1213.48 L1455.16 1213.48 L1454.57 1213.48 L1453.98 1213.48 L1453.4 1213.48 L1452.81 1213.48 L1452.22 1213.48 L1451.64 1213.48 L1451.05 1213.48 L1450.46 1213.48 L1449.88 1213.48 L1449.29 1213.48 L1448.7 1213.48 L1448.12 1213.48 L1447.53 1213.48 L1446.95 1213.48 L1446.36 1213.48 L1445.77 1213.48 L1445.19 1213.48 L1444.6 1213.48 L1444.01 1213.48 L1443.43 1213.48 L1442.84 1213.48 L1442.25 1213.48 L1441.67 1213.48 L1441.08 1213.48 L1440.5 1213.48 L1439.91 1213.48 L1439.32 1213.48 L1438.74 1213.48 L1438.15 1213.48 L1437.56 1213.48 L1436.98 1213.48 L1436.39 1213.48 L1435.8 1213.48 L1435.22 1213.48 L1434.63 1213.48 L1434.04 1213.48 L1433.46 1213.48 L1432.87 1213.48 L1432.29 1213.48 L1431.7 1213.48 L1431.11 1213.48 L1430.53 1213.48 L1429.94 1213.48 L1429.35 1213.48 L1428.77 1213.48 L1428.18 1213.48 L1427.59 1213.48 L1427.01 1213.48 L1426.42 1213.48 L1425.83 1213.48 L1425.25 1213.48 L1424.66 1213.48 L1424.08 1213.48 L1423.49 1213.48 L1422.9 1213.48 L1422.32 1213.48 L1421.73 1213.48 L1421.14 1213.48 L1420.56 1213.48 L1419.97 1213.48 L1419.38 1213.48 L1418.8 1213.48 L1418.21 1213.48 L1417.63 1213.48 L1417.04 1213.48 L1416.45 1213.48 L1415.87 1213.48 L1415.28 1213.48 L1414.69 1213.48 L1414.11 1213.48 L1413.52 1213.48 L1412.93 1213.48 L1412.35 1213.48 L1411.76 1213.48 L1411.17 1213.48 L1410.59 1213.48 L1410 1213.48 L1409.42 1213.48 L1408.83 1213.48 L1408.24 1213.48 L1407.66 1213.48 L1407.07 1213.48 L1406.48 1213.48 L1405.9 1213.48 L1405.31 1213.48 L1404.72 1213.48 L1404.14 1213.48 L1403.55 1213.48 L1402.96 1213.48 L1402.38 1213.48 L1401.79 1213.48 L1401.21 1213.48 L1400.62 1213.48 L1400.03 1213.48 L1399.45 1213.48 L1398.86 1213.48 L1398.27 1213.48 L1397.69 1213.48 L1397.1 1213.48 L1396.51 1213.48 L1395.93 1213.48 L1395.34 1213.48 L1394.75 1213.48 L1394.17 1213.48 L1393.58 1213.48 L1393 1213.48 L1392.41 1213.48 L1391.82 1213.48 L1391.24 1213.48 L1390.65 1213.48 L1390.06 1213.48 L1389.48 1213.48 L1388.89 1213.48 L1388.3 1213.48 L1387.72 1213.48 L1387.13 1213.48 L1386.55 1213.48 L1385.96 1213.48 L1385.37 1213.48 L1384.79 1213.48 L1384.2 1213.48 L1383.61 1213.48 L1383.03 1213.48 L1382.44 1213.48 L1381.85 1213.48 L1381.27 1213.48 L1380.68 1213.48 L1380.09 1213.48 L1379.51 1213.48 L1378.92 1213.48 L1378.34 1213.48 L1377.75 1213.48 L1377.16 1213.48 L1376.58 1213.48 L1375.99 1213.48 L1375.4 1213.48 L1374.82 1213.48 L1374.23 1213.48 L1373.64 1213.48 L1373.06 1213.48 L1372.47 1213.48 L1371.88 1213.48 L1371.3 1213.48 L1370.71 1213.48 L1370.13 1213.48 L1369.54 1213.48 L1368.95 1213.48 L1368.37 1213.48 L1367.78 1213.48 L1367.19 1213.48 L1366.61 1213.48 L1366.02 1213.48 L1365.43 1213.48 L1364.85 1213.48 L1364.26 1213.48 L1363.68 1213.48 L1363.09 1213.48 L1362.5 1213.48 L1361.92 1213.48 L1361.33 1213.48 L1360.74 1213.48 L1360.16 1213.48 L1359.57 1213.48 L1358.98 1213.48 L1358.4 1213.48 L1357.81 1213.48 L1357.22 1213.48 L1356.64 1213.48 L1356.05 1213.48 L1355.47 1213.48 L1354.88 1213.48 L1354.29 1213.48 L1353.71 1213.48 L1353.12 1213.48 L1352.53 1213.48 L1351.95 1213.48 L1351.36 1213.48 L1350.77 1213.48 L1350.19 1213.48 L1349.6 1213.48 L1349.01 1213.48 L1348.43 1213.48 L1347.84 1213.48 L1347.26 1213.48 L1346.67 1213.48 L1346.08 1213.48 L1345.5 1213.48 L1344.91 1213.48 L1344.32 1213.48 L1343.74 1213.48 L1343.15 1213.48 L1342.56 1213.48 L1341.98 1213.48 L1341.39 1213.48 L1340.8 1213.48 L1340.22 1213.48 L1339.63 1213.48 L1339.05 1213.48 L1338.46 1213.48 L1337.87 1213.48 L1337.29 1213.48 L1336.7 1213.48 L1336.11 1213.48 L1335.53 1213.48 L1334.94 1213.48 L1334.35 1213.48 L1333.77 1213.48 L1333.18 1213.48 L1332.6 1213.48 L1332.01 1213.48 L1331.42 1213.48 L1330.84 1213.48 L1330.25 1213.48 L1329.66 1213.48 L1329.08 1213.48 L1328.49 1213.48 L1327.9 1213.48 L1327.32 1213.48 L1326.73 1213.48 L1326.14 1213.48 L1325.56 1213.48 L1324.97 1213.48 L1324.39 1213.48 L1323.8 1213.48 L1323.21 1213.48 L1322.63 1213.48 L1322.04 1213.48 L1321.45 1213.48 L1320.87 1213.48 L1320.28 1213.48 L1319.69 1213.48 L1319.11 1213.48 L1318.52 1213.48 L1317.93 1213.48 L1317.35 1213.48 L1316.76 1213.48 L1316.18 1213.48 L1315.59 1213.48 L1315 1213.48 L1314.42 1213.48 L1313.83 1213.48 L1313.24 1213.48 L1312.66 1213.48 L1312.07 1213.48 L1311.48 1213.48 L1310.9 1213.48 L1310.31 1213.48 L1309.73 1213.48 L1309.14 1213.48 L1308.55 1213.48 L1307.97 1213.48 L1307.38 1213.48 L1306.79 1213.48 L1306.21 1213.48 L1305.62 1213.48 L1305.03 1213.48 L1304.45 1213.48 L1303.86 1213.48 L1303.27 1213.48 L1302.69 1213.48 L1302.1 1213.48 L1301.52 1213.48 L1300.93 1213.48 L1300.34 1213.48 L1299.76 1213.48 L1299.17 1213.48 L1298.58 1213.48 L1298 1213.48 L1297.41 1213.48 L1296.82 1213.48 L1296.24 1213.48 L1295.65 1213.48 L1295.06 1213.48 L1294.48 1213.48 L1293.89 1213.48 L1293.31 1213.48 L1292.72 1213.48 L1292.13 1213.48 L1291.55 1213.48 L1290.96 1213.48 L1290.37 1213.48 L1289.79 1213.48 L1289.2 1213.48 L1288.61 1213.48 L1288.03 1213.48 L1287.44 1213.48 L1286.86 1213.48 L1286.27 1213.48 L1285.68 1213.48 L1285.1 1213.48 L1284.51 1213.48 L1283.92 1213.48 L1283.34 1213.48 L1282.75 1213.48 L1282.16 1213.48 L1281.58 1213.48 L1280.99 1213.48 L1280.4 1213.48 L1279.82 1213.48 L1279.23 1213.48 L1278.65 1213.48 L1278.06 1213.48 L1277.47 1213.48 L1276.89 1213.48 L1276.3 1213.48 L1275.71 1213.48 L1275.13 1213.48 L1274.54 1213.48 L1273.95 1213.48 L1273.37 1213.48 L1272.78 1213.48 L1272.19 1213.48 L1271.61 1213.48 L1271.02 1213.48 L1270.44 1213.48 L1269.85 1213.48 L1269.26 1213.48 L1268.68 1213.48 L1268.09 1213.48 L1267.5 1213.48 L1266.92 1213.48 L1266.33 1213.48 L1265.74 1213.48 L1265.16 1213.48 L1264.57 1213.48 L1263.98 1213.48 L1263.4 1213.48 L1262.81 1213.48 L1262.23 1213.48 L1261.64 1213.48 L1261.05 1213.48 L1260.47 1213.48 L1259.88 1213.48 L1259.29 1213.48 L1258.71 1213.48 L1258.12 1213.48 L1257.53 1213.48 L1256.95 1213.48 L1256.36 1213.48 L1255.78 1213.48 L1255.19 1213.48 L1254.6 1213.48 L1254.02 1213.48 L1253.43 1213.48 L1252.84 1213.48 L1252.26 1213.48 L1251.67 1213.48 L1251.08 1213.48 L1250.5 1213.48 L1249.91 1213.48 L1249.32 1213.48 L1248.74 1213.48 L1248.15 1213.48 L1247.57 1213.48 L1246.98 1213.48 L1246.39 1213.48 L1245.81 1213.48 L1245.22 1213.48 L1244.63 1213.48 L1244.05 1213.48 L1243.46 1213.48 L1242.87 1213.48 L1242.29 1213.48 L1241.7 1213.48 L1241.11 1213.48 L1240.53 1213.48 L1239.94 1213.48 L1239.36 1213.48 L1238.77 1213.48 L1238.18 1213.48 L1237.6 1213.48 L1237.01 1213.48 L1236.42 1213.48 L1235.84 1213.48 L1235.25 1213.48 L1234.66 1213.48 L1234.08 1213.48 L1233.49 1213.48 L1232.91 1213.48 L1232.32 1213.48 L1231.73 1213.48 L1231.15 1213.48 L1230.56 1213.48 L1229.97 1213.48 L1229.39 1213.48 L1228.8 1213.48 L1228.21 1213.48 L1227.63 1213.48 L1227.04 1213.48 L1226.45 1213.48 L1225.87 1213.48 L1225.28 1213.48 L1224.7 1213.48 L1224.11 1213.48 L1223.52 1213.48 L1222.94 1213.48 L1222.35 1213.48 L1221.76 1213.48 L1221.18 1213.48 L1220.59 1213.48 L1220 1213.48 L1219.42 1213.48 L1218.83 1213.48 L1218.24 1213.48 L1217.66 1213.48 L1217.07 1213.48 L1216.49 1213.48 L1215.9 1213.48 L1215.31 1213.48 L1214.73 1213.48 L1214.14 1213.48 L1213.55 1213.48 L1212.97 1213.48 L1212.38 1213.48 L1211.79 1213.48 L1211.21 1213.48 L1210.62 1213.48 L1210.03 1213.48 L1209.45 1213.48 L1208.86 1213.48 L1208.28 1213.48 L1207.69 1213.48 L1207.1 1213.48 L1206.52 1213.48 L1205.93 1213.48 L1205.34 1213.48 L1204.76 1213.48 L1204.17 1213.48 L1203.58 1213.48 L1203 1213.48 L1202.41 1213.48 L1201.83 1213.48 L1201.24 1213.48 L1200.65 1213.48 L1200.07 1213.48 L1199.48 1213.48 L1198.89 1213.48 L1198.31 1213.48 L1197.72 1213.48 L1197.13 1213.48 L1196.55 1213.48 L1195.96 1213.48 L1195.37 1213.48 L1194.79 1213.48 L1194.2 1213.48 L1193.62 1213.48 L1193.03 1213.48 L1192.44 1213.48 L1191.86 1213.48 L1191.27 1213.48 L1190.68 1213.48 L1190.1 1213.48 L1189.51 1213.48 L1188.92 1213.48 L1188.34 1213.48 L1187.75 1213.48 L1187.16 1213.48 L1186.58 1213.48 L1185.99 1213.48 L1185.41 1213.48 L1184.82 1213.48 L1184.23 1213.48 L1183.65 1213.48 L1183.06 1213.48 L1182.47 1213.48 L1181.89 1213.48 L1181.3 1213.48 L1180.71 1213.48 L1180.13 1213.48 L1179.54 1213.48 L1178.96 1213.48 L1178.37 1213.48 L1177.78 1213.48 L1177.2 1213.48 L1176.61 1213.48 L1176.02 1213.48 L1175.44 1213.48 L1174.85 1213.48 L1174.26 1213.48 L1173.68 1213.48 L1173.09 1213.48 L1172.5 1213.48 L1171.92 1213.48 L1171.33 1213.48 L1170.75 1213.48 L1170.16 1213.48 L1169.57 1213.48 L1168.99 1213.48 L1168.4 1213.48 L1167.81 1213.48 L1167.23 1213.48 L1166.64 1213.48 L1166.05 1213.48 L1165.47 1213.48 L1164.88 1213.48 L1164.29 1213.48 L1163.71 1213.48 L1163.12 1213.48 L1162.54 1213.48 L1161.95 1213.48 L1161.36 1213.48 L1160.78 1213.48 L1160.19 1213.48 L1159.6 1213.48 L1159.02 1213.48 L1158.43 1213.48 L1157.84 1213.48 L1157.26 1213.48 L1156.67 1213.48 L1156.09 1213.48 L1155.5 1213.48 L1154.91 1213.48 L1154.33 1213.48 L1153.74 1213.48 L1153.15 1213.48 L1152.57 1213.48 L1151.98 1213.48 L1151.39 1213.48 L1150.81 1213.48 L1150.22 1213.48 L1149.63 1213.48 L1149.05 1213.48 L1148.46 1213.48 L1147.88 1213.48 L1147.29 1213.48 L1146.7 1213.48 L1146.12 1213.48 L1145.53 1213.48 L1144.94 1213.48 L1144.36 1213.48 L1143.77 1213.48 L1143.18 1213.48 L1142.6 1213.48 L1142.01 1213.48 L1141.42 1213.48 L1140.84 1213.48 L1140.25 1213.48 L1139.67 1213.48 L1139.08 1213.48 L1138.49 1213.48 L1137.91 1213.48 L1137.32 1213.48 L1136.73 1213.48 L1136.15 1213.48 L1135.56 1213.48 L1134.97 1213.48 L1134.39 1213.48 L1133.8 1213.48 L1133.21 1213.48 L1132.63 1213.48 L1132.04 1213.48 L1131.46 1213.48 L1130.87 1213.48 L1130.28 1213.48 L1129.7 1213.48 L1129.11 1213.48 L1128.52 1213.48 L1127.94 1213.48 L1127.35 1213.48 L1126.76 1213.48 L1126.18 1213.48 L1125.59 1213.48 L1125.01 1213.48 L1124.42 1213.48 L1123.83 1213.48 L1123.25 1213.48 L1122.66 1213.48 L1122.07 1213.48 L1121.49 1213.48 L1120.9 1213.48 L1120.31 1213.48 L1119.73 1213.48 L1119.14 1213.48 L1118.55 1213.48 L1117.97 1213.48 L1117.38 1213.48 L1116.8 1213.48 L1116.21 1213.48 L1115.62 1213.48 L1115.04 1213.48 L1114.45 1213.48 L1113.86 1213.48 L1113.28 1213.48 L1112.69 1213.48 L1112.1 1213.48 L1111.52 1213.48 L1110.93 1213.48 L1110.34 1213.48 L1109.76 1213.48 L1109.17 1213.48 L1108.59 1213.48 L1108 1213.48 L1107.41 1213.48 L1106.83 1213.48 L1106.24 1213.48 L1105.65 1213.48 L1105.07 1213.48 L1104.48 1213.48 L1103.89 1213.48 L1103.31 1213.48 L1102.72 1213.48 L1102.14 1213.48 L1101.55 1213.48 L1100.96 1213.48 L1100.38 1213.48 L1099.79 1213.48 L1099.2 1213.48 L1098.62 1213.48 L1098.03 1213.48 L1097.44 1213.48 L1096.86 1213.48 L1096.27 1213.48 L1095.68 1213.48 L1095.1 1213.48 L1094.51 1213.48 L1093.93 1213.48 L1093.34 1213.48 L1092.75 1213.48 L1092.17 1213.48 L1091.58 1213.48 L1090.99 1213.48 L1090.41 1213.48 L1089.82 1213.48 L1089.23 1213.48 L1088.65 1213.48 L1088.06 1213.48 L1087.47 1213.48 L1086.89 1213.48 L1086.3 1213.48 L1085.72 1213.48 L1085.13 1213.48 L1084.54 1213.48 L1083.96 1213.48 L1083.37 1213.48 L1082.78 1213.48 L1082.2 1213.48 L1081.61 1213.48 L1081.02 1213.48 L1080.44 1213.48 L1079.85 1213.48 L1079.26 1213.48 L1078.68 1213.48 L1078.09 1213.48 L1077.51 1213.48 L1076.92 1213.48 L1076.33 1213.48 L1075.75 1213.48 L1075.16 1213.48 L1074.57 1213.48 L1073.99 1213.48 L1073.4 1213.48 L1072.81 1213.48 L1072.23 1213.48 L1071.64 1213.48 L1071.06 1213.48 L1070.47 1213.48 L1069.88 1213.48 L1069.3 1213.48 L1068.71 1213.48 L1068.12 1213.48 L1067.54 1213.48 L1066.95 1213.48 L1066.36 1213.48 L1065.78 1213.48 L1065.19 1213.48 L1064.6 1213.48 L1064.02 1213.48 L1063.43 1213.48 L1062.85 1213.48 L1062.26 1213.48 L1061.67 1213.48 L1061.09 1213.48 L1060.5 1213.48 L1059.91 1213.48 L1059.33 1213.48 L1058.74 1213.48 L1058.15 1213.48 L1057.57 1213.48 L1056.98 1213.48 L1056.39 1213.48 L1055.81 1213.48 L1055.22 1213.48 L1054.64 1213.48 L1054.05 1213.48 L1053.46 1213.48 L1052.88 1213.48 L1052.29 1213.48 L1051.7 1213.48 L1051.12 1213.48 L1050.53 1213.48 L1049.94 1213.48 L1049.36 1213.48 L1048.77 1213.48 L1048.19 1213.48 L1047.6 1213.48 L1047.01 1213.48 L1046.43 1213.48 L1045.84 1213.48 L1045.25 1213.48 L1044.67 1213.48 L1044.08 1213.48 L1043.49 1213.48 L1042.91 1213.48 L1042.32 1213.48 L1041.73 1213.48 L1041.15 1213.48 L1040.56 1213.48 L1039.98 1213.48 L1039.39 1213.48 L1038.8 1213.48 L1038.22 1213.48 L1037.63 1213.48 L1037.04 1213.48 L1036.46 1213.48 L1035.87 1213.48 L1035.28 1213.48 L1034.7 1213.48 L1034.11 1213.48 L1033.52 1213.48 L1032.94 1213.48 L1032.35 1213.48 L1031.77 1213.48 L1031.18 1213.48 L1030.59 1213.48 L1030.01 1213.48 L1029.42 1213.48 L1028.83 1213.48 L1028.25 1213.48 L1027.66 1213.48 L1027.07 1213.48 L1026.49 1213.48 L1025.9 1213.48 L1025.32 1213.48 L1024.73 1213.48 L1024.14 1213.48 L1023.56 1213.48 L1022.97 1213.48 L1022.38 1213.48 L1021.8 1213.48 L1021.21 1213.48 L1020.62 1213.48 L1020.04 1213.48 L1019.45 1213.48 L1018.86 1213.48 L1018.28 1213.48 L1017.69 1213.48 L1017.11 1213.48 L1016.52 1213.48 L1015.93 1213.48 L1015.35 1213.48 L1014.76 1213.48 L1014.17 1213.48 L1013.59 1213.48 L1013 1213.48 L1012.41 1213.48 L1011.83 1213.48 L1011.24 1213.48 L1010.65 1213.48 L1010.07 1213.48 L1009.48 1213.48 L1008.9 1213.48 L1008.31 1213.48 L1007.72 1213.48 L1007.14 1213.48 L1006.55 1213.48 L1005.96 1213.48 L1005.38 1213.48 L1004.79 1213.48 L1004.2 1213.48 L1003.62 1213.48 L1003.03 1213.48 L1002.44 1213.48 L1001.86 1213.48 L1001.27 1213.48 L1000.69 1213.48 L1000.1 1213.48 L999.513 1213.48 L998.926 1213.48 L998.34 1213.48 L997.754 1213.48 L997.167 1213.48 L996.581 1213.48 L995.994 1213.48 L995.408 1213.48 L994.822 1213.48 L994.235 1213.48 L993.649 1213.48 L993.062 1213.48 L992.476 1213.48 L991.889 1213.48 L991.303 1213.48 L990.717 1213.48 L990.13 1213.48 L989.544 1213.48 L988.957 1213.48 L988.371 1213.48 L987.785 1213.48 L987.198 1213.48 L986.612 1213.48 L986.025 1213.48  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.84 986.612,1213.84 987.198,1213.84 987.785,1213.84 988.371,1213.84 988.957,1213.84 989.544,1213.84 990.13,1213.84 990.717,1213.84 991.303,1213.84 991.889,1213.84 992.476,1213.84 993.062,1213.84 993.649,1213.84 994.235,1213.84 994.822,1213.84 995.408,1213.84 995.994,1213.84 996.581,1213.84 997.167,1213.84 997.754,1213.84 998.34,1213.84 998.926,1213.84 999.513,1213.84 1000.1,1213.84 1000.69,1213.84 1001.27,1213.84 1001.86,1213.84 1002.44,1213.84 1003.03,1213.84 1003.62,1213.84 1004.2,1213.84 1004.79,1213.84 1005.38,1213.84 1005.96,1213.84 1006.55,1213.84 1007.14,1213.84 1007.72,1213.84 1008.31,1213.84 1008.9,1213.84 1009.48,1213.84 1010.07,1213.84 1010.65,1213.84 1011.24,1213.84 1011.83,1213.84 1012.41,1213.84 1013,1213.84 1013.59,1213.84 1014.17,1213.84 1014.76,1213.84 1015.35,1213.84 1015.93,1213.84 1016.52,1213.84 1017.11,1213.84 1017.69,1213.84 1018.28,1213.84 1018.86,1213.84 1019.45,1213.84 1020.04,1213.84 1020.62,1213.84 1021.21,1213.84 1021.8,1213.84 1022.38,1213.84 1022.97,1213.84 1023.56,1213.84 1024.14,1213.84 1024.73,1213.84 1025.32,1213.84 1025.9,1213.84 1026.49,1213.84 1027.07,1213.84 1027.66,1213.84 1028.25,1213.84 1028.83,1213.84 1029.42,1213.84 1030.01,1213.84 1030.59,1213.84 1031.18,1213.84 1031.77,1213.84 1032.35,1213.84 1032.94,1213.84 1033.52,1213.84 1034.11,1213.84 1034.7,1213.84 1035.28,1213.84 1035.87,1213.84 1036.46,1213.84 1037.04,1213.84 1037.63,1213.84 1038.22,1213.84 1038.8,1213.84 1039.39,1213.84 1039.98,1213.84 1040.56,1213.84 1041.15,1213.84 1041.73,1213.84 1042.32,1213.84 1042.91,1213.84 1043.49,1213.84 1044.08,1213.84 1044.67,1213.84 1045.25,1213.84 1045.84,1213.84 1046.43,1213.84 1047.01,1213.84 1047.6,1213.84 1048.19,1213.84 1048.77,1213.84 1049.36,1213.84 1049.94,1213.84 1050.53,1213.84 1051.12,1213.84 1051.7,1213.84 1052.29,1213.84 1052.88,1213.84 1053.46,1213.84 1054.05,1213.84 1054.64,1213.84 1055.22,1213.84 1055.81,1213.84 1056.39,1213.84 1056.98,1213.84 1057.57,1213.84 1058.15,1213.84 1058.74,1213.84 1059.33,1213.84 1059.91,1213.84 1060.5,1213.84 1061.09,1213.84 1061.67,1213.84 1062.26,1213.84 1062.85,1213.84 1063.43,1213.84 1064.02,1213.84 1064.6,1213.84 1065.19,1213.84 1065.78,1213.84 1066.36,1213.84 1066.95,1213.84 1067.54,1213.84 1068.12,1213.84 1068.71,1213.84 1069.3,1213.84 1069.88,1213.84 1070.47,1213.84 1071.06,1213.84 1071.64,1213.84 1072.23,1213.84 1072.81,1213.84 1073.4,1213.84 1073.99,1213.84 1074.57,1213.84 1075.16,1213.84 1075.75,1213.84 1076.33,1213.84 1076.92,1213.84 1077.51,1213.84 1078.09,1213.84 1078.68,1213.84 1079.26,1213.84 1079.85,1213.84 1080.44,1213.84 1081.02,1213.84 1081.61,1213.84 1082.2,1213.84 1082.78,1213.84 1083.37,1213.84 1083.96,1213.84 1084.54,1213.84 1085.13,1213.84 1085.72,1213.84 1086.3,1213.84 1086.89,1213.84 1087.47,1213.84 1088.06,1213.84 1088.65,1213.84 1089.23,1213.84 1089.82,1213.84 1090.41,1213.84 1090.99,1213.84 1091.58,1213.84 1092.17,1213.84 1092.75,1213.84 1093.34,1213.84 1093.93,1213.84 1094.51,1213.84 1095.1,1213.84 1095.68,1213.84 1096.27,1213.84 1096.86,1213.84 1097.44,1213.84 1098.03,1213.84 1098.62,1213.84 1099.2,1213.84 1099.79,1213.84 1100.38,1213.84 1100.96,1213.84 1101.55,1213.84 1102.14,1213.84 1102.72,1213.84 1103.31,1213.84 1103.89,1213.84 1104.48,1213.84 1105.07,1213.84 1105.65,1213.84 1106.24,1213.84 1106.83,1213.84 1107.41,1213.84 1108,1213.84 1108.59,1213.84 1109.17,1213.84 1109.76,1213.84 1110.34,1213.84 1110.93,1213.84 1111.52,1213.84 1112.1,1213.84 1112.69,1213.84 1113.28,1213.84 1113.86,1213.84 1114.45,1213.84 1115.04,1213.84 1115.62,1213.84 1116.21,1213.84 1116.8,1213.84 1117.38,1213.84 1117.97,1213.84 1118.55,1213.84 1119.14,1213.84 1119.73,1213.84 1120.31,1213.84 1120.9,1213.84 1121.49,1213.84 1122.07,1213.84 1122.66,1213.84 1123.25,1213.84 1123.83,1213.84 1124.42,1213.84 1125.01,1213.84 1125.59,1213.84 1126.18,1213.84 1126.76,1213.84 1127.35,1213.84 1127.94,1213.84 1128.52,1213.84 1129.11,1213.84 1129.7,1213.84 1130.28,1213.84 1130.87,1213.84 1131.46,1213.84 1132.04,1213.84 1132.63,1213.84 1133.21,1213.84 1133.8,1213.84 1134.39,1213.84 1134.97,1213.84 1135.56,1213.84 1136.15,1213.84 1136.73,1213.84 1137.32,1213.84 1137.91,1213.84 1138.49,1213.84 1139.08,1213.84 1139.67,1213.84 1140.25,1213.84 1140.84,1213.84 1141.42,1213.84 1142.01,1213.84 1142.6,1213.84 1143.18,1213.84 1143.77,1213.84 1144.36,1213.84 1144.94,1213.84 1145.53,1213.84 1146.12,1213.84 1146.7,1213.84 1147.29,1213.84 1147.88,1213.84 1148.46,1213.84 1149.05,1213.84 1149.63,1213.84 1150.22,1213.84 1150.81,1213.84 1151.39,1213.84 1151.98,1213.84 1152.57,1213.84 1153.15,1213.84 1153.74,1213.84 1154.33,1213.84 1154.91,1213.84 1155.5,1213.84 1156.09,1213.84 1156.67,1213.84 1157.26,1213.84 1157.84,1213.84 1158.43,1213.84 1159.02,1213.84 1159.6,1213.84 1160.19,1213.84 1160.78,1213.84 1161.36,1213.84 1161.95,1213.84 1162.54,1213.84 1163.12,1213.84 1163.71,1213.84 1164.29,1213.84 1164.88,1213.84 1165.47,1213.84 1166.05,1213.84 1166.64,1213.84 1167.23,1213.84 1167.81,1213.84 1168.4,1213.84 1168.99,1213.84 1169.57,1213.84 1170.16,1213.84 1170.75,1213.84 1171.33,1213.84 1171.92,1213.84 1172.5,1213.84 1173.09,1213.84 1173.68,1213.84 1174.26,1213.84 1174.85,1213.84 1175.44,1213.84 1176.02,1213.84 1176.61,1213.84 1177.2,1213.84 1177.78,1213.84 1178.37,1213.84 1178.96,1213.84 1179.54,1213.84 1180.13,1213.84 1180.71,1213.84 1181.3,1213.84 1181.89,1213.84 1182.47,1213.84 1183.06,1213.84 1183.65,1213.84 1184.23,1213.84 1184.82,1213.84 1185.41,1213.84 1185.99,1213.84 1186.58,1213.84 1187.16,1213.84 1187.75,1213.84 1188.34,1213.84 1188.92,1213.84 1189.51,1213.84 1190.1,1213.84 1190.68,1213.84 1191.27,1213.84 1191.86,1213.84 1192.44,1213.84 1193.03,1213.84 1193.62,1213.84 1194.2,1213.84 1194.79,1213.84 1195.37,1213.84 1195.96,1213.84 1196.55,1213.84 1197.13,1213.84 1197.72,1213.84 1198.31,1213.84 1198.89,1213.84 1199.48,1213.84 1200.07,1213.84 1200.65,1213.84 1201.24,1213.84 1201.83,1213.84 1202.41,1213.84 1203,1213.84 1203.58,1213.84 1204.17,1213.84 1204.76,1213.84 1205.34,1213.84 1205.93,1213.84 1206.52,1213.84 1207.1,1213.84 1207.69,1213.84 1208.28,1213.84 1208.86,1213.84 1209.45,1213.84 1210.03,1213.84 1210.62,1213.84 1211.21,1213.84 1211.79,1213.84 1212.38,1213.84 1212.97,1213.84 1213.55,1213.84 1214.14,1213.84 1214.73,1213.84 1215.31,1213.84 1215.9,1213.84 1216.49,1213.84 1217.07,1213.84 1217.66,1213.84 1218.24,1213.84 1218.83,1213.84 1219.42,1213.84 1220,1213.84 1220.59,1213.84 1221.18,1213.84 1221.76,1213.84 1222.35,1213.84 1222.94,1213.84 1223.52,1213.84 1224.11,1213.84 1224.7,1213.84 1225.28,1213.84 1225.87,1213.84 1226.45,1213.84 1227.04,1213.84 1227.63,1213.84 1228.21,1213.84 1228.8,1213.84 1229.39,1213.84 1229.97,1213.84 1230.56,1213.84 1231.15,1213.84 1231.73,1213.84 1232.32,1213.84 1232.91,1213.84 1233.49,1213.84 1234.08,1213.84 1234.66,1213.84 1235.25,1213.84 1235.84,1213.84 1236.42,1213.84 1237.01,1213.84 1237.6,1213.84 1238.18,1213.84 1238.77,1213.84 1239.36,1213.84 1239.94,1213.84 1240.53,1213.84 1241.11,1213.84 1241.7,1213.84 1242.29,1213.84 1242.87,1213.84 1243.46,1213.84 1244.05,1213.84 1244.63,1213.84 1245.22,1213.84 1245.81,1213.84 1246.39,1213.84 1246.98,1213.84 1247.57,1213.84 1248.15,1213.84 1248.74,1213.84 1249.32,1213.84 1249.91,1213.84 1250.5,1213.84 1251.08,1213.84 1251.67,1213.84 1252.26,1213.84 1252.84,1213.84 1253.43,1213.84 1254.02,1213.84 1254.6,1213.84 1255.19,1213.84 1255.78,1213.84 1256.36,1213.84 1256.95,1213.84 1257.53,1213.84 1258.12,1213.84 1258.71,1213.84 1259.29,1213.84 1259.88,1213.84 1260.47,1213.84 1261.05,1213.84 1261.64,1213.84 1262.23,1213.84 1262.81,1213.84 1263.4,1213.84 1263.98,1213.84 1264.57,1213.84 1265.16,1213.84 1265.74,1213.84 1266.33,1213.84 1266.92,1213.84 1267.5,1213.84 1268.09,1213.84 1268.68,1213.84 1269.26,1213.84 1269.85,1213.84 1270.44,1213.84 1271.02,1213.84 1271.61,1213.84 1272.19,1213.84 1272.78,1213.84 1273.37,1213.84 1273.95,1213.84 1274.54,1213.84 1275.13,1213.84 1275.71,1213.84 1276.3,1213.84 1276.89,1213.84 1277.47,1213.84 1278.06,1213.84 1278.65,1213.84 1279.23,1213.84 1279.82,1213.84 1280.4,1213.84 1280.99,1213.84 1281.58,1213.84 1282.16,1213.84 1282.75,1213.84 1283.34,1213.84 1283.92,1213.84 1284.51,1213.84 1285.1,1213.84 1285.68,1213.84 1286.27,1213.84 1286.86,1213.84 1287.44,1213.84 1288.03,1213.84 1288.61,1213.84 1289.2,1213.84 1289.79,1213.84 1290.37,1213.84 1290.96,1213.84 1291.55,1213.84 1292.13,1213.84 1292.72,1213.84 1293.31,1213.84 1293.89,1213.84 1294.48,1213.84 1295.06,1213.84 1295.65,1213.84 1296.24,1213.84 1296.82,1213.84 1297.41,1213.84 1298,1213.84 1298.58,1213.84 1299.17,1213.84 1299.76,1213.84 1300.34,1213.84 1300.93,1213.84 1301.52,1213.84 1302.1,1213.84 1302.69,1213.84 1303.27,1213.84 1303.86,1213.84 1304.45,1213.84 1305.03,1213.84 1305.62,1213.84 1306.21,1213.84 1306.79,1213.84 1307.38,1213.84 1307.97,1213.84 1308.55,1213.84 1309.14,1213.84 1309.73,1213.84 1310.31,1213.84 1310.9,1213.84 1311.48,1213.84 1312.07,1213.84 1312.66,1213.84 1313.24,1213.84 1313.83,1213.84 1314.42,1213.84 1315,1213.84 1315.59,1213.84 1316.18,1213.84 1316.76,1213.84 1317.35,1213.84 1317.93,1213.84 1318.52,1213.84 1319.11,1213.84 1319.69,1213.84 1320.28,1213.84 1320.87,1213.84 1321.45,1213.84 1322.04,1213.84 1322.63,1213.84 1323.21,1213.84 1323.8,1213.84 1324.39,1213.84 1324.97,1213.84 1325.56,1213.84 1326.14,1213.84 1326.73,1213.84 1327.32,1213.84 1327.9,1213.84 1328.49,1213.84 1329.08,1213.84 1329.66,1213.84 1330.25,1213.84 1330.84,1213.84 1331.42,1213.84 1332.01,1213.84 1332.6,1213.84 1333.18,1213.84 1333.77,1213.84 1334.35,1213.84 1334.94,1213.84 1335.53,1213.84 1336.11,1213.84 1336.7,1213.84 1337.29,1213.84 1337.87,1213.84 1338.46,1213.84 1339.05,1213.84 1339.63,1213.84 1340.22,1213.84 1340.8,1213.84 1341.39,1213.84 1341.98,1213.84 1342.56,1213.84 1343.15,1213.84 1343.74,1213.84 1344.32,1213.84 1344.91,1213.84 1345.5,1213.84 1346.08,1213.84 1346.67,1213.84 1347.26,1213.84 1347.84,1213.84 1348.43,1213.84 1349.01,1213.84 1349.6,1213.84 1350.19,1213.84 1350.77,1213.84 1351.36,1213.84 1351.95,1213.84 1352.53,1213.84 1353.12,1213.84 1353.71,1213.84 1354.29,1213.84 1354.88,1213.84 1355.47,1213.84 1356.05,1213.84 1356.64,1213.84 1357.22,1213.84 1357.81,1213.84 1358.4,1213.84 1358.98,1213.84 1359.57,1213.84 1360.16,1213.84 1360.74,1213.84 1361.33,1213.84 1361.92,1213.84 1362.5,1213.84 1363.09,1213.84 1363.68,1213.84 1364.26,1213.84 1364.85,1213.84 1365.43,1213.84 1366.02,1213.84 1366.61,1213.84 1367.19,1213.84 1367.78,1213.84 1368.37,1213.84 1368.95,1213.84 1369.54,1213.84 1370.13,1213.84 1370.71,1213.84 1371.3,1213.84 1371.88,1213.84 1372.47,1213.84 1373.06,1213.84 1373.64,1213.84 1374.23,1213.84 1374.82,1213.84 1375.4,1213.84 1375.99,1213.84 1376.58,1213.84 1377.16,1213.84 1377.75,1213.84 1378.34,1213.84 1378.92,1213.84 1379.51,1213.84 1380.09,1213.84 1380.68,1213.84 1381.27,1213.84 1381.85,1213.84 1382.44,1213.84 1383.03,1213.84 1383.61,1213.84 1384.2,1213.84 1384.79,1213.84 1385.37,1213.84 1385.96,1213.84 1386.55,1213.84 1387.13,1213.84 1387.72,1213.84 1388.3,1213.84 1388.89,1213.84 1389.48,1213.84 1390.06,1213.84 1390.65,1213.84 1391.24,1213.84 1391.82,1213.84 1392.41,1213.84 1393,1213.84 1393.58,1213.84 1394.17,1213.84 1394.75,1213.84 1395.34,1213.84 1395.93,1213.84 1396.51,1213.84 1397.1,1213.84 1397.69,1213.84 1398.27,1213.84 1398.86,1213.84 1399.45,1213.84 1400.03,1213.84 1400.62,1213.84 1401.21,1213.84 1401.79,1213.84 1402.38,1213.84 1402.96,1213.84 1403.55,1213.84 1404.14,1213.84 1404.72,1213.84 1405.31,1213.84 1405.9,1213.84 1406.48,1213.84 1407.07,1213.84 1407.66,1213.84 1408.24,1213.84 1408.83,1213.84 1409.42,1213.84 1410,1213.84 1410.59,1213.84 1411.17,1213.84 1411.76,1213.84 1412.35,1213.84 1412.93,1213.84 1413.52,1213.84 1414.11,1213.84 1414.69,1213.84 1415.28,1213.84 1415.87,1213.84 1416.45,1213.84 1417.04,1213.84 1417.63,1213.84 1418.21,1213.84 1418.8,1213.84 1419.38,1213.84 1419.97,1213.84 1420.56,1213.84 1421.14,1213.84 1421.73,1213.84 1422.32,1213.84 1422.9,1213.84 1423.49,1213.84 1424.08,1213.84 1424.66,1213.84 1425.25,1213.84 1425.83,1213.84 1426.42,1213.84 1427.01,1213.84 1427.59,1213.84 1428.18,1213.84 1428.77,1213.84 1429.35,1213.84 1429.94,1213.84 1430.53,1213.84 1431.11,1213.84 1431.7,1213.84 1432.29,1213.84 1432.87,1213.84 1433.46,1213.84 1434.04,1213.84 1434.63,1213.84 1435.22,1213.84 1435.8,1213.84 1436.39,1213.84 1436.98,1213.84 1437.56,1213.84 1438.15,1213.84 1438.74,1213.84 1439.32,1213.84 1439.91,1213.84 1440.5,1213.84 1441.08,1213.84 1441.67,1213.84 1442.25,1213.84 1442.84,1213.84 1443.43,1213.84 1444.01,1213.84 1444.6,1213.84 1445.19,1213.84 1445.77,1213.84 1446.36,1213.84 1446.95,1213.84 1447.53,1213.84 1448.12,1213.84 1448.7,1213.84 1449.29,1213.84 1449.88,1213.84 1450.46,1213.84 1451.05,1213.84 1451.64,1213.84 1452.22,1213.84 1452.81,1213.84 1453.4,1213.84 1453.98,1213.84 1454.57,1213.84 1455.16,1213.84 1455.74,1213.84 1456.33,1213.84 1456.91,1213.84 1457.5,1213.84 1458.09,1213.84 1458.67,1213.84 1459.26,1213.84 1459.85,1213.84 1460.43,1213.84 1461.02,1213.84 1461.61,1213.84 1462.19,1213.84 1462.78,1213.84 1463.37,1213.84 1463.95,1213.84 1464.54,1213.84 1465.12,1213.84 1465.71,1213.84 1466.3,1213.84 1466.88,1213.84 1467.47,1213.84 1468.06,1213.84 1468.64,1213.84 1469.23,1213.84 1469.82,1213.84 1470.4,1213.84 1470.99,1213.84 1471.57,1213.84 1472.16,1213.84 1472.75,1213.84 1473.33,1213.84 1473.92,1213.84 1474.51,1213.84 1475.09,1213.84 1475.68,1213.84 1476.27,1213.84 1476.85,1213.84 1477.44,1213.84 1478.03,1213.84 1478.61,1213.84 1479.2,1213.84 1479.78,1213.84 1480.37,1213.84 1480.96,1213.84 1481.54,1213.84 1482.13,1213.84 1482.72,1213.84 1483.3,1213.84 1483.89,1213.84 1484.48,1213.84 1485.06,1213.84 1485.65,1213.84 1486.24,1213.84 1486.82,1213.84 1487.41,1213.84 1487.99,1213.84 1488.58,1213.84 1489.17,1213.84 1489.75,1213.84 1490.34,1213.84 1490.93,1213.84 1491.51,1213.84 1492.1,1213.84 1492.69,1213.84 1493.27,1213.84 1493.86,1213.84 1494.45,1213.84 1495.03,1213.84 1495.62,1213.84 1496.2,1213.84 1496.79,1213.84 1497.38,1213.84 1497.96,1213.84 1498.55,1213.84 1499.14,1213.84 1499.72,1213.84 1500.31,1213.84 1500.9,1213.84 1501.48,1213.84 1502.07,1213.84 1502.65,1213.84 1503.24,1213.84 1503.83,1213.84 1504.41,1213.84 1505,1213.84 1505.59,1213.84 1506.17,1213.84 1506.76,1213.84 1507.35,1213.84 1507.93,1213.84 1508.52,1213.84 1509.11,1213.84 1509.69,1213.84 1510.28,1213.84 1510.86,1213.84 1511.45,1213.84 1512.04,1213.84 1512.62,1213.84 1513.21,1213.84 1513.8,1213.84 1514.38,1213.84 1514.97,1213.84 1515.56,1213.84 1516.14,1213.84 1516.73,1213.84 1517.32,1213.84 1517.9,1213.84 1518.49,1213.84 1519.07,1213.84 1519.66,1213.84 1520.25,1213.84 1520.83,1213.84 1521.42,1213.84 1522.01,1213.84 1522.59,1213.84 1523.18,1213.84 1523.77,1213.84 1524.35,1213.84 1524.94,1213.84 1525.52,1213.84 1526.11,1213.84 1526.7,1213.84 1527.28,1213.84 1527.87,1213.84 1528.46,1213.84 1529.04,1213.84 1529.63,1213.84 1530.22,1213.84 1530.8,1213.84 1531.39,1213.84 1531.98,1213.84 1532.56,1213.84 1533.15,1213.84 1533.73,1213.84 1534.32,1213.84 1534.91,1213.84 1535.49,1213.84 1536.08,1213.84 1536.67,1213.84 1537.25,1213.84 1537.84,1213.84 1538.43,1213.84 1539.01,1213.84 1539.6,1213.84 1540.19,1213.84 1540.77,1213.84 1541.36,1213.84 1541.94,1213.84 1542.53,1213.84 1543.12,1213.84 1543.7,1213.84 1544.29,1213.84 1544.88,1213.84 1545.46,1213.84 1546.05,1213.84 1546.64,1213.84 1547.22,1213.84 1547.81,1213.84 1548.4,1213.84 1548.98,1213.84 1549.57,1213.84 1550.15,1213.84 1550.74,1213.84 1551.33,1213.84 1551.91,1213.84 1552.5,1213.84 1553.09,1213.84 1553.67,1213.84 1554.26,1213.84 1554.85,1213.84 1555.43,1213.84 1556.02,1213.84 1556.6,1213.84 1557.19,1213.84 1557.78,1213.84 1558.36,1213.84 1558.95,1213.84 1559.54,1213.84 1560.12,1213.84 1560.71,1213.84 1561.3,1213.84 1561.88,1213.84 1562.47,1213.84 1563.06,1213.84 1563.64,1213.84 1564.23,1213.84 1564.81,1213.84 1565.4,1213.84 1565.99,1213.84 1566.57,1213.84 1567.16,1213.84 1567.75,1213.84 1568.33,1213.84 1568.92,1213.84 1569.51,1213.84 1570.09,1213.84 1570.68,1213.84 1571.27,1213.84 1571.85,1213.84 1572.44,1213.84 1573.02,1213.84 1573.61,1213.84 1574.2,1213.84 1574.78,1213.84 1575.37,1213.84 1575.96,1213.84 1576.54,1213.84 1577.13,1213.84 1577.72,1213.84 1578.3,1213.84 1578.89,1213.84 1579.47,1213.84 1580.06,1213.84 1580.65,1213.84 1581.23,1213.84 1581.82,1213.84 1582.41,1213.84 1582.99,1213.84 1583.58,1213.84 1584.17,1213.84 1584.75,1213.84 1585.34,1213.84 1585.93,1213.84 1586.51,1213.84 1587.1,1213.84 1587.68,1213.84 1588.27,1213.84 1588.86,1213.84 1589.44,1213.84 1590.03,1213.84 1590.62,1213.84 1591.2,1213.84 1591.79,1213.84 1592.38,1213.84 1592.96,1213.84 1593.55,1213.84 1594.14,1213.84 1594.72,1213.84 1595.31,1213.84 1595.89,1213.84 1596.48,1213.84 1597.07,1213.84 1597.65,1213.84 1598.24,1213.84 1598.83,1213.84 1599.41,1213.84 1600,1213.84 1600.59,1213.84 1601.17,1213.84 1601.76,1213.84 1602.34,1213.84 1602.93,1213.84 1603.52,1213.84 1604.1,1213.84 1604.69,1213.84 1605.28,1213.84 1605.86,1213.84 1606.45,1213.84 1607.04,1213.84 1607.62,1213.84 1608.21,1213.84 1608.8,1213.84 1609.38,1213.84 1609.97,1213.84 1610.55,1213.84 1611.14,1213.84 1611.73,1213.84 1612.31,1213.84 1612.9,1213.84 1613.49,1213.84 1614.07,1213.84 1614.66,1213.84 1615.25,1213.84 1615.83,1213.84 1616.42,1213.84 1617.01,1213.84 1617.59,1213.84 1618.18,1213.84 1618.76,1213.84 1619.35,1213.84 1619.94,1213.84 1620.52,1213.84 1621.11,1213.84 1621.7,1213.84 1622.28,1213.84 1622.87,1213.84 1623.46,1213.84 1624.04,1213.84 1624.63,1213.84 1625.22,1213.84 1625.8,1213.84 1626.39,1213.84 1626.97,1213.84 1627.56,1213.84 1628.15,1213.84 1628.73,1213.84 1629.32,1213.84 1629.91,1213.84 1630.49,1213.84 1631.08,1213.84 1631.67,1213.84 1632.25,1213.84 1632.84,1213.84 1633.42,1213.84 1634.01,1213.84 1634.6,1213.84 1635.18,1213.84 1635.77,1213.84 1636.36,1213.84 1636.94,1213.84 1637.53,1213.84 1638.12,1213.84 1638.7,1213.84 1639.29,1213.84 1639.88,1213.84 1640.46,1213.84 1641.05,1213.84 1641.63,1213.84 1642.22,1213.84 1642.81,1213.84 1643.39,1213.84 1643.98,1213.84 1644.57,1213.84 1645.15,1213.84 1645.74,1213.84 1646.33,1213.84 1646.91,1213.84 1647.5,1213.84 1648.09,1213.84 1648.67,1213.84 1649.26,1213.84 1649.84,1213.84 1650.43,1213.84 1651.02,1213.84 1651.6,1213.84 1652.19,1213.84 1652.78,1213.84 1653.36,1213.84 1653.95,1213.84 1654.54,1213.84 1655.12,1213.84 1655.71,1213.84 1656.29,1213.84 1656.88,1213.84 1657.47,1213.84 1658.05,1213.84 1658.64,1213.84 1659.23,1213.84 1659.81,1213.84 1660.4,1213.84 1660.99,1213.84 1661.57,1213.84 1662.16,1213.84 1662.75,1213.84 1663.33,1213.84 1663.92,1213.84 1664.5,1213.84 1665.09,1213.84 1665.68,1213.84 1666.26,1213.84 1666.85,1213.84 1667.44,1213.84 1668.02,1213.84 1668.61,1213.84 1669.2,1213.84 1669.78,1213.84 1670.37,1213.84 1670.96,1213.84 1671.54,1213.84 1672.13,1213.84 1672.71,1213.84 1673.3,1213.84 1673.89,1213.84 1674.47,1213.84 1675.06,1213.84 1675.65,1213.84 1676.23,1213.84 1676.82,1213.84 1677.41,1213.84 1677.99,1213.84 1678.58,1213.84 1679.17,1213.84 1679.75,1213.84 1680.34,1213.84 1680.92,1213.84 1681.51,1213.84 1682.1,1213.84 1682.68,1213.84 1683.27,1213.84 1683.86,1213.84 1684.44,1213.84 1685.03,1213.84 1685.62,1213.84 1686.2,1213.84 1686.79,1213.84 1687.37,1213.84 1687.96,1213.84 1688.55,1213.84 1689.13,1213.84 1689.72,1213.84 1690.31,1213.84 1690.89,1213.84 1691.48,1213.84 1692.07,1213.84 1692.65,1213.84 1693.24,1213.84 1693.83,1213.84 1694.41,1213.84 1695,1213.84 1695.58,1213.84 1696.17,1213.84 1696.76,1213.84 1697.34,1213.84 1697.93,1213.84 1698.52,1213.84 1699.1,1213.84 1699.69,1213.84 1700.28,1213.84 1700.86,1213.84 1701.45,1213.84 1702.04,1213.84 1702.62,1213.84 1703.21,1213.84 1703.79,1213.84 1704.38,1213.84 1704.97,1213.84 1705.55,1213.84 1706.14,1213.84 1706.73,1213.84 1707.31,1213.84 1707.9,1213.84 1708.49,1213.84 1709.07,1213.84 1709.66,1213.84 1710.24,1213.84 1710.83,1213.84 1711.42,1213.84 1712,1213.84 1712.59,1213.84 1713.18,1213.84 1713.76,1213.84 1714.35,1213.84 1714.94,1213.84 1715.52,1213.84 1716.11,1213.84 1716.7,1213.84 1717.28,1213.84 1717.87,1213.84 1718.45,1213.84 1719.04,1213.84 1719.63,1213.84 1720.21,1213.84 1720.8,1213.84 1721.39,1213.84 1721.97,1213.84 1722.56,1213.84 1723.15,1213.84 1723.73,1213.84 1724.32,1213.84 1724.91,1213.84 1725.49,1213.84 1726.08,1213.84 1726.66,1213.84 1727.25,1213.84 1727.84,1213.84 1728.42,1213.84 1729.01,1213.84 1729.6,1213.84 1730.18,1213.84 1730.77,1213.84 1731.36,1213.84 1731.94,1213.84 1732.53,1213.84 1733.11,1213.84 1733.7,1213.84 1734.29,1213.84 1734.87,1213.84 1735.46,1213.84 1736.05,1213.84 1736.63,1213.84 1737.22,1213.84 1737.81,1213.84 1738.39,1213.84 1738.98,1213.84 1739.57,1213.84 1740.15,1213.84 1740.74,1213.84 1741.32,1213.84 1741.91,1213.84 1742.5,1213.84 1743.08,1213.84 1743.67,1213.84 1744.26,1213.84 1744.84,1213.84 1745.43,1213.84 1746.02,1213.84 1746.6,1213.84 1747.19,1213.84 1747.78,1213.84 1748.36,1213.84 1748.95,1213.84 1749.53,1213.84 1750.12,1213.84 1750.71,1213.84 1751.29,1213.84 1751.88,1213.84 1752.47,1213.84 1753.05,1213.84 1753.64,1213.84 1754.23,1213.84 1754.81,1213.84 1755.4,1213.84 1755.99,1213.84 1756.57,1213.84 1757.16,1213.84 1757.74,1213.84 1758.33,1213.84 1758.92,1213.84 1759.5,1213.84 1760.09,1213.84 1760.68,1213.84 1761.26,1213.84 1761.85,1213.84 1762.44,1213.84 1763.02,1213.84 1763.61,1213.84 1764.19,1213.84 1764.78,1213.84 1765.37,1213.84 1765.95,1213.84 1766.54,1213.84 1767.13,1213.84 1767.71,1213.84 1768.3,1213.84 1768.89,1213.84 1769.47,1213.84 1770.06,1213.84 1770.65,1213.84 1771.23,1213.84 1771.82,1213.84 1772.4,1213.84 1772.99,1213.84 1773.58,1213.84 1774.16,1213.84 1774.75,1213.84 1775.34,1213.84 1775.92,1213.84 1776.51,1213.84 1777.1,1213.84 1777.68,1213.84 1778.27,1213.84 1778.86,1213.84 1779.44,1213.84 1780.03,1213.84 1780.61,1213.84 1781.2,1213.84 1781.79,1213.84 1782.37,1213.84 1782.96,1213.84 1783.55,1213.84 1784.13,1213.84 1784.72,1213.84 1785.31,1213.84 1785.89,1213.84 1786.48,1213.84 1787.06,1213.84 1787.65,1213.84 1788.24,1213.84 1788.82,1213.84 1789.41,1213.84 1790,1213.84 1790.58,1213.84 1791.17,1213.84 1791.76,1213.84 1792.34,1213.84 1792.93,1213.84 1793.52,1213.84 1794.1,1213.84 1794.69,1213.84 1795.27,1213.84 1795.86,1213.84 1796.45,1213.84 1797.03,1213.84 1797.62,1213.84 1798.21,1213.84 1798.79,1213.84 1799.38,1213.84 1799.97,1213.84 1800.55,1213.84 1801.14,1213.84 1801.73,1213.84 1802.31,1213.84 1802.9,1213.84 1803.48,1213.84 1804.07,1213.84 1804.66,1213.84 1805.24,1213.84 1805.83,1213.84 1806.42,1213.84 1807,1213.84 1807.59,1213.84 1808.18,1213.84 1808.76,1213.84 1809.35,1213.84 1809.94,1213.84 1810.52,1213.84 1811.11,1213.84 1811.69,1213.84 1812.28,1213.84 1812.87,1213.84 1813.45,1213.84 1814.04,1213.84 1814.63,1213.84 1815.21,1213.84 1815.8,1213.84 1816.39,1213.84 1816.97,1213.84 1817.56,1213.84 1818.14,1213.84 1818.73,1213.84 1819.32,1213.84 1819.9,1213.84 1820.49,1213.84 1821.08,1213.84 1821.66,1213.84 1822.25,1213.84 1822.84,1213.84 1823.42,1213.84 1824.01,1213.84 1824.6,1213.84 1825.18,1213.84 1825.77,1213.84 1826.35,1213.84 1826.94,1213.84 1827.53,1213.84 1828.11,1213.84 1828.7,1213.84 1829.29,1213.84 1829.87,1213.84 1830.46,1213.84 1831.05,1213.84 1831.63,1213.84 1832.22,1213.84 1832.81,1213.84 1833.39,1213.84 1833.98,1213.84 1834.56,1213.84 1835.15,1213.84 1835.74,1213.84 1836.32,1213.84 1836.91,1213.84 1837.5,1213.84 1838.08,1213.84 1838.67,1213.84 1839.26,1213.84 1839.84,1213.84 1840.43,1213.84 1841.01,1213.84 1841.6,1213.84 1842.19,1213.84 1842.77,1213.84 1843.36,1213.84 1843.95,1213.84 1844.53,1213.84 1845.12,1213.84 1845.71,1213.84 1846.29,1213.84 1846.88,1213.84 1847.47,1213.84 1848.05,1213.84 1848.64,1213.84 1849.22,1213.84 1849.81,1213.84 1850.4,1213.84 1850.98,1213.84 1851.57,1213.84 1852.16,1213.84 1852.74,1213.84 1853.33,1213.84 1853.92,1213.84 1854.5,1213.84 1855.09,1213.84 1855.68,1213.84 1856.26,1213.84 1856.85,1213.84 1857.43,1213.84 1858.02,1213.84 1858.61,1213.84 1859.19,1213.84 1859.78,1213.84 1860.37,1213.84 1860.95,1213.84 1861.54,1213.84 1862.13,1213.84 1862.71,1213.84 1863.3,1213.84 1863.88,1213.84 1864.47,1213.84 1865.06,1213.84 1865.64,1213.84 1866.23,1213.84 1866.82,1213.84 1867.4,1213.84 1867.99,1213.84 1868.58,1213.84 1869.16,1213.84 1869.75,1213.84 1870.34,1213.84 1870.92,1213.84 1871.51,1213.84 1872.09,1213.84 1872.68,1213.84 1873.27,1213.84 1873.85,1213.84 1874.44,1213.84 1875.03,1213.84 1875.61,1213.84 1876.2,1213.84 1876.79,1213.84 1877.37,1213.84 1877.96,1213.84 1878.55,1213.84 1879.13,1213.84 1879.72,1213.84 1880.3,1213.84 1880.89,1213.84 1881.48,1213.84 1882.06,1213.84 1882.65,1213.84 1883.24,1213.84 1883.82,1213.84 1884.41,1213.84 1885,1213.84 1885.58,1213.84 1886.17,1213.84 1886.76,1213.84 1887.34,1213.84 1887.93,1213.84 1888.51,1213.84 1889.1,1213.84 1889.69,1213.84 1890.27,1213.84 1890.86,1213.84 1891.45,1213.84 1892.03,1213.84 1892.62,1213.84 1893.21,1213.84 1893.79,1213.84 1894.38,1213.84 1894.96,1213.84 1895.55,1213.84 1896.14,1213.84 1896.72,1213.84 1897.31,1213.84 1897.9,1213.84 1898.48,1213.84 1899.07,1213.84 1899.66,1213.84 1900.24,1213.84 1900.83,1213.84 1901.42,1213.84 1902,1213.84 1902.59,1213.84 1903.17,1213.84 1903.76,1213.84 1904.35,1213.84 1904.93,1213.84 1905.52,1213.84 1906.11,1213.84 1906.69,1213.84 1907.28,1213.84 1907.87,1213.84 1908.45,1213.84 1909.04,1213.84 1909.63,1213.84 1910.21,1213.84 1910.8,1213.84 1911.38,1213.84 1911.97,1213.84 1912.56,1213.84 1913.14,1213.84 1913.73,1213.84 1914.32,1213.84 1914.9,1213.84 1915.49,1213.84 1916.08,1213.84 1916.66,1213.84 1917.25,1213.84 1917.83,1213.84 1918.42,1213.84 1919.01,1213.84 1919.59,1213.84 1920.18,1213.84 1920.77,1213.84 1921.35,1213.84 1921.94,1213.84 1922.53,1213.84 1923.11,1213.84 1923.7,1213.84 1924.29,1213.84 1924.87,1213.84 1925.46,1213.84 1926.04,1213.84 1926.63,1213.84 1927.22,1213.84 1927.8,1213.84 1928.39,1213.84 1928.98,1213.84 1929.56,1213.84 1930.15,1213.84 1930.74,1213.84 1931.32,1213.84 1931.91,1213.84 1932.5,1213.84 1933.08,1213.84 1933.67,1213.84 1934.25,1213.84 1934.84,1213.84 1935.43,1213.84 1936.01,1213.84 1936.6,1213.84 1937.19,1213.84 1937.77,1213.84 1938.36,1213.84 1938.95,1213.84 1939.53,1213.84 1940.12,1213.84 1940.71,1213.84 1941.29,1213.84 1941.88,1213.84 1942.46,1213.84 1943.05,1213.84 1943.64,1213.84 1944.22,1213.84 1944.81,1213.84 1945.4,1213.84 1945.98,1213.84 1946.57,1213.84 1947.16,1213.84 1947.74,1213.84 1948.33,1213.84 1948.91,1213.84 1949.5,1213.84 1950.09,1213.84 1950.67,1213.84 1951.26,1213.84 1951.85,1213.84 1952.43,1213.84 1953.02,1213.84 1953.61,1213.84 1954.19,1213.84 1954.78,1213.84 1955.37,1213.84 1955.95,1213.84 1956.54,1213.84 1957.12,1213.84 1957.71,1213.84 1958.3,1213.84 1958.88,1213.84 1959.47,1213.84 1960.06,1213.84 1960.64,1213.84 1961.23,1213.84 1961.82,1213.84 1962.4,1213.84 1962.99,1213.84 1963.58,1213.84 1964.16,1213.84 1964.75,1213.84 1965.33,1213.84 1965.92,1213.84 1966.51,1213.84 1967.09,1213.84 1967.68,1213.84 1968.27,1213.84 1968.85,1213.84 1969.44,1213.84 1970.03,1213.84 1970.61,1213.84 1971.2,1213.84 1971.78,1213.84 1972.37,1213.84 1972.96,1213.84 1973.54,1213.84 1974.13,1213.84 1974.72,1213.84 1975.3,1213.84 1975.89,1213.84 1976.48,1213.84 1977.06,1213.84 1977.65,1213.84 1978.24,1213.84 1978.82,1213.84 1979.41,1213.84 1979.99,1213.84 1980.58,1213.84 1981.17,1213.84 1981.75,1213.84 1982.34,1213.84 1982.93,1213.84 1983.51,1213.84 1984.1,1213.84 1984.69,1213.84 1985.27,1213.84 1985.86,1213.84 1986.45,1213.84 1987.03,1213.84 1987.62,1213.84 1988.2,1213.84 1988.79,1213.84 1989.38,1213.84 1989.96,1213.84 1990.55,1213.84 1991.14,1213.84 1991.72,1213.84 1992.31,1213.84 1992.9,1213.84 1993.48,1213.84 1994.07,1213.84 1994.65,1213.84 1995.24,1213.84 1995.83,1213.84 1996.41,1213.84 1997,1213.84 1997.59,1213.84 1998.17,1213.84 1998.76,1213.84 1999.35,1213.84 1999.93,1213.84 2000.52,1213.84 2001.11,1213.84 2001.69,1213.84 2002.28,1213.84 2002.86,1213.84 2003.45,1213.84 2004.04,1213.84 2004.62,1213.84 2005.21,1213.84 2005.8,1213.84 2006.38,1213.84 2006.97,1213.84 2007.56,1213.84 2008.14,1213.84 2008.73,1213.84 2009.32,1213.84 2009.9,1213.84 2010.49,1213.84 2011.07,1213.84 2011.66,1213.84 2012.25,1213.84 2012.83,1213.84 2013.42,1213.84 2014.01,1213.84 2014.59,1213.84 2015.18,1213.84 2015.77,1213.84 2016.35,1213.84 2016.94,1213.84 2017.53,1213.84 2018.11,1213.84 2018.7,1213.84 2019.28,1213.84 2019.87,1213.84 2020.46,1213.84 2021.04,1213.84 2021.63,1213.84 2022.22,1213.84 2022.8,1213.84 2023.39,1213.84 2023.98,1213.84 2024.56,1213.84 2025.15,1213.84 2025.73,1213.84 2026.32,1213.84 2026.91,1213.84 2027.49,1213.84 2028.08,1213.84 2028.67,1213.84 2029.25,1213.84 2029.84,1213.84 2030.43,1213.84 2031.01,1213.84 2031.6,1213.84 2032.19,1213.84 2032.77,1213.84 2033.36,1213.84 2033.94,1213.84 2034.53,1213.84 2035.12,1213.84 2035.7,1213.84 2036.29,1213.84 2036.88,1213.84 2037.46,1213.84 2038.05,1213.84 2038.64,1213.84 2039.22,1213.84 2039.81,1213.84 2040.4,1213.84 2040.98,1213.84 2041.57,1213.84 2042.15,1213.84 2042.74,1213.84 2043.33,1213.84 2043.91,1213.84 2044.5,1213.84 2045.09,1213.84 2045.67,1213.84 2046.26,1213.84 2046.85,1213.84 2047.43,1213.84 2048.02,1213.84 2048.6,1213.84 2049.19,1213.84 2049.78,1213.84 2050.36,1213.84 2050.95,1213.84 2051.54,1213.84 2052.12,1213.84 2052.71,1213.84 2053.3,1213.84 2053.88,1213.84 2054.47,1213.84 2055.06,1213.84 2055.64,1213.84 2056.23,1213.84 2056.81,1213.84 2057.4,1213.84 2057.99,1213.84 2058.57,1213.84 2059.16,1213.84 2059.75,1213.84 2060.33,1213.84 2060.92,1213.84 2061.51,1213.84 2062.09,1213.84 2062.68,1213.84 2063.27,1213.84 2063.85,1213.84 2064.44,1213.84 2065.02,1213.84 2065.61,1213.84 2066.2,1213.84 2066.78,1213.84 2067.37,1213.84 2067.96,1213.84 2068.54,1213.84 2069.13,1213.84 2069.72,1213.84 2070.3,1213.84 2070.89,1213.84 2071.48,1213.84 2072.06,1213.84 2072.65,1213.84 2073.23,1213.84 2073.82,1213.84 2074.41,1213.84 2074.99,1213.84 2075.58,1213.84 2076.17,1213.84 2076.75,1213.84 2077.34,1213.84 2077.93,1213.84 2078.51,1213.84 2079.1,1213.84 2079.68,1213.84 2080.27,1213.84 2080.86,1213.84 2081.44,1213.84 2082.03,1213.84 2082.62,1213.84 2083.2,1213.84 2083.79,1213.84 2084.38,1213.84 2084.96,1213.84 2085.55,1213.84 2086.14,1213.84 2086.72,1213.84 2087.31,1213.84 2087.89,1213.84 2088.48,1213.84 2089.07,1213.84 2089.65,1213.84 2090.24,1213.84 2090.83,1213.84 2091.41,1213.84 2092,1213.84 2092.59,1213.84 2093.17,1213.84 2093.76,1213.84 2094.35,1213.84 2094.93,1213.84 2095.52,1213.84 2096.1,1213.84 2096.69,1213.84 2097.28,1213.84 2097.86,1213.84 2098.45,1213.84 2099.04,1213.84 2099.62,1213.84 2100.21,1213.84 2100.8,1213.84 2101.38,1213.84 2101.97,1213.84 2102.55,1213.84 2103.14,1213.84 2103.73,1213.84 2104.31,1213.84 2104.9,1213.84 2105.49,1213.84 2106.07,1213.84 2106.66,1213.84 2107.25,1213.84 2107.83,1213.84 2108.42,1213.84 2109.01,1213.84 2109.59,1213.84 2110.18,1213.84 2110.76,1213.84 2111.35,1213.84 2111.94,1213.84 2112.52,1213.84 2113.11,1213.84 2113.7,1213.84 2114.28,1213.84 2114.87,1213.84 2115.46,1213.84 2116.04,1213.84 2116.63,1213.84 2117.22,1213.84 2117.8,1213.84 2118.39,1213.84 2118.97,1213.84 2119.56,1213.84 2120.15,1213.84 2120.73,1213.84 2121.32,1213.84 2121.91,1213.84 2122.49,1213.84 2123.08,1213.84 2123.67,1213.84 2124.25,1213.84 2124.84,1213.84 2125.42,1213.84 2126.01,1213.84 2126.6,1213.84 2127.18,1213.84 2127.77,1213.84 2128.36,1213.84 2128.94,1213.84 2129.53,1213.84 2130.12,1213.84 2130.7,1213.84 2131.29,1213.84 2131.88,1213.84 2132.46,1213.84 2133.05,1213.84 2133.63,1213.84 2134.22,1213.84 2134.81,1213.84 2135.39,1213.84 2135.98,1213.84 2136.57,1213.84 2137.15,1213.84 2137.74,1213.84 2138.33,1213.84 2138.91,1213.84 2139.5,1213.84 2140.09,1213.84 2140.67,1213.84 2141.26,1213.84 2141.84,1213.84 2142.43,1213.84 2143.02,1213.84 2143.6,1213.84 2144.19,1213.84 2144.78,1213.84 2145.36,1213.84 2145.95,1213.84 2146.54,1213.84 2147.12,1213.84 2147.71,1213.84 2148.3,1213.84 2148.88,1213.84 2149.47,1213.84 2150.05,1213.84 2150.64,1213.84 2151.23,1213.84 2151.81,1213.84 2152.4,1213.84 2152.99,1213.84 2153.57,1213.84 2154.16,1213.84 2154.75,1213.84 2155.33,1213.84 2155.92,1213.84 2156.5,1213.84 2157.09,1213.84 2157.68,1213.84 2158.26,1213.84 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1213.71 L986.612 1213.71 L987.198 1213.71 L987.785 1213.71 L988.371 1213.71 L988.957 1213.71 L989.544 1213.71 L990.13 1213.71 L990.717 1213.71 L991.303 1213.71 L991.889 1213.71 L992.476 1213.71 L993.062 1213.71 L993.649 1213.71 L994.235 1213.71 L994.822 1213.71 L995.408 1213.71 L995.994 1213.71 L996.581 1213.71 L997.167 1213.71 L997.754 1213.71 L998.34 1213.71 L998.926 1213.71 L999.513 1213.71 L1000.1 1213.71 L1000.69 1213.71 L1001.27 1213.71 L1001.86 1213.71 L1002.44 1213.71 L1003.03 1213.71 L1003.62 1213.71 L1004.2 1213.71 L1004.79 1213.71 L1005.38 1213.71 L1005.96 1213.71 L1006.55 1213.71 L1007.14 1213.71 L1007.72 1213.71 L1008.31 1213.71 L1008.9 1213.71 L1009.48 1213.71 L1010.07 1213.71 L1010.65 1213.71 L1011.24 1213.71 L1011.83 1213.71 L1012.41 1213.71 L1013 1213.71 L1013.59 1213.71 L1014.17 1213.71 L1014.76 1213.71 L1015.35 1213.71 L1015.93 1213.71 L1016.52 1213.71 L1017.11 1213.71 L1017.69 1213.71 L1018.28 1213.71 L1018.86 1213.71 L1019.45 1213.71 L1020.04 1213.71 L1020.62 1213.71 L1021.21 1213.71 L1021.8 1213.71 L1022.38 1213.71 L1022.97 1213.71 L1023.56 1213.71 L1024.14 1213.71 L1024.73 1213.71 L1025.32 1213.71 L1025.9 1213.71 L1026.49 1213.71 L1027.07 1213.71 L1027.66 1213.71 L1028.25 1213.71 L1028.83 1213.71 L1029.42 1213.71 L1030.01 1213.71 L1030.59 1213.71 L1031.18 1213.71 L1031.77 1213.71 L1032.35 1213.71 L1032.94 1213.71 L1033.52 1213.71 L1034.11 1213.71 L1034.7 1213.71 L1035.28 1213.71 L1035.87 1213.71 L1036.46 1213.71 L1037.04 1213.71 L1037.63 1213.71 L1038.22 1213.71 L1038.8 1213.71 L1039.39 1213.71 L1039.98 1213.71 L1040.56 1213.71 L1041.15 1213.71 L1041.73 1213.71 L1042.32 1213.71 L1042.91 1213.71 L1043.49 1213.71 L1044.08 1213.71 L1044.67 1213.71 L1045.25 1213.71 L1045.84 1213.71 L1046.43 1213.71 L1047.01 1213.71 L1047.6 1213.71 L1048.19 1213.71 L1048.77 1213.71 L1049.36 1213.71 L1049.94 1213.71 L1050.53 1213.71 L1051.12 1213.71 L1051.7 1213.71 L1052.29 1213.71 L1052.88 1213.71 L1053.46 1213.71 L1054.05 1213.71 L1054.64 1213.71 L1055.22 1213.71 L1055.81 1213.71 L1056.39 1213.71 L1056.98 1213.71 L1057.57 1213.71 L1058.15 1213.71 L1058.74 1213.71 L1059.33 1213.71 L1059.91 1213.71 L1060.5 1213.71 L1061.09 1213.71 L1061.67 1213.71 L1062.26 1213.71 L1062.85 1213.71 L1063.43 1213.71 L1064.02 1213.71 L1064.6 1213.71 L1065.19 1213.71 L1065.78 1213.71 L1066.36 1213.71 L1066.95 1213.71 L1067.54 1213.71 L1068.12 1213.71 L1068.71 1213.71 L1069.3 1213.71 L1069.88 1213.71 L1070.47 1213.71 L1071.06 1213.71 L1071.64 1213.71 L1072.23 1213.71 L1072.81 1213.71 L1073.4 1213.71 L1073.99 1213.71 L1074.57 1213.71 L1075.16 1213.71 L1075.75 1213.71 L1076.33 1213.71 L1076.92 1213.71 L1077.51 1213.71 L1078.09 1213.71 L1078.68 1213.71 L1079.26 1213.71 L1079.85 1213.71 L1080.44 1213.71 L1081.02 1213.71 L1081.61 1213.71 L1082.2 1213.71 L1082.78 1213.71 L1083.37 1213.71 L1083.96 1213.71 L1084.54 1213.71 L1085.13 1213.71 L1085.72 1213.71 L1086.3 1213.71 L1086.89 1213.71 L1087.47 1213.71 L1088.06 1213.71 L1088.65 1213.71 L1089.23 1213.71 L1089.82 1213.71 L1090.41 1213.71 L1090.99 1213.71 L1091.58 1213.71 L1092.17 1213.71 L1092.75 1213.71 L1093.34 1213.71 L1093.93 1213.71 L1094.51 1213.71 L1095.1 1213.71 L1095.68 1213.71 L1096.27 1213.71 L1096.86 1213.71 L1097.44 1213.71 L1098.03 1213.71 L1098.62 1213.71 L1099.2 1213.71 L1099.79 1213.71 L1100.38 1213.71 L1100.96 1213.71 L1101.55 1213.71 L1102.14 1213.71 L1102.72 1213.71 L1103.31 1213.71 L1103.89 1213.71 L1104.48 1213.71 L1105.07 1213.71 L1105.65 1213.71 L1106.24 1213.71 L1106.83 1213.71 L1107.41 1213.71 L1108 1213.71 L1108.59 1213.71 L1109.17 1213.71 L1109.76 1213.71 L1110.34 1213.71 L1110.93 1213.71 L1111.52 1213.71 L1112.1 1213.71 L1112.69 1213.71 L1113.28 1213.71 L1113.86 1213.71 L1114.45 1213.71 L1115.04 1213.71 L1115.62 1213.71 L1116.21 1213.71 L1116.8 1213.71 L1117.38 1213.71 L1117.97 1213.71 L1118.55 1213.71 L1119.14 1213.71 L1119.73 1213.71 L1120.31 1213.71 L1120.9 1213.71 L1121.49 1213.71 L1122.07 1213.71 L1122.66 1213.71 L1123.25 1213.71 L1123.83 1213.71 L1124.42 1213.71 L1125.01 1213.71 L1125.59 1213.71 L1126.18 1213.71 L1126.76 1213.71 L1127.35 1213.71 L1127.94 1213.71 L1128.52 1213.71 L1129.11 1213.71 L1129.7 1213.71 L1130.28 1213.71 L1130.87 1213.71 L1131.46 1213.71 L1132.04 1213.71 L1132.63 1213.71 L1133.21 1213.71 L1133.8 1213.71 L1134.39 1213.71 L1134.97 1213.71 L1135.56 1213.71 L1136.15 1213.71 L1136.73 1213.71 L1137.32 1213.71 L1137.91 1213.71 L1138.49 1213.71 L1139.08 1213.71 L1139.67 1213.71 L1140.25 1213.71 L1140.84 1213.71 L1141.42 1213.71 L1142.01 1213.71 L1142.6 1213.71 L1143.18 1213.71 L1143.77 1213.71 L1144.36 1213.71 L1144.94 1213.71 L1145.53 1213.71 L1146.12 1213.71 L1146.7 1213.71 L1147.29 1213.71 L1147.88 1213.71 L1148.46 1213.71 L1149.05 1213.71 L1149.63 1213.71 L1150.22 1213.71 L1150.81 1213.71 L1151.39 1213.71 L1151.98 1213.71 L1152.57 1213.71 L1153.15 1213.71 L1153.74 1213.71 L1154.33 1213.71 L1154.91 1213.71 L1155.5 1213.71 L1156.09 1213.71 L1156.67 1213.71 L1157.26 1213.71 L1157.84 1213.71 L1158.43 1213.71 L1159.02 1213.71 L1159.6 1213.71 L1160.19 1213.71 L1160.78 1213.71 L1161.36 1213.71 L1161.95 1213.71 L1162.54 1213.71 L1163.12 1213.71 L1163.71 1213.71 L1164.29 1213.71 L1164.88 1213.71 L1165.47 1213.71 L1166.05 1213.71 L1166.64 1213.71 L1167.23 1213.71 L1167.81 1213.71 L1168.4 1213.71 L1168.99 1213.71 L1169.57 1213.71 L1170.16 1213.71 L1170.75 1213.71 L1171.33 1213.71 L1171.92 1213.71 L1172.5 1213.71 L1173.09 1213.71 L1173.68 1213.71 L1174.26 1213.71 L1174.85 1213.71 L1175.44 1213.71 L1176.02 1213.71 L1176.61 1213.71 L1177.2 1213.71 L1177.78 1213.71 L1178.37 1213.71 L1178.96 1213.71 L1179.54 1213.71 L1180.13 1213.71 L1180.71 1213.71 L1181.3 1213.71 L1181.89 1213.71 L1182.47 1213.71 L1183.06 1213.71 L1183.65 1213.71 L1184.23 1213.71 L1184.82 1213.71 L1185.41 1213.71 L1185.99 1213.71 L1186.58 1213.71 L1187.16 1213.71 L1187.75 1213.71 L1188.34 1213.71 L1188.92 1213.71 L1189.51 1213.71 L1190.1 1213.71 L1190.68 1213.71 L1191.27 1213.71 L1191.86 1213.71 L1192.44 1213.71 L1193.03 1213.71 L1193.62 1213.71 L1194.2 1213.71 L1194.79 1213.71 L1195.37 1213.71 L1195.96 1213.71 L1196.55 1213.71 L1197.13 1213.71 L1197.72 1213.71 L1198.31 1213.71 L1198.89 1213.71 L1199.48 1213.71 L1200.07 1213.71 L1200.65 1213.71 L1201.24 1213.71 L1201.83 1213.71 L1202.41 1213.71 L1203 1213.71 L1203.58 1213.71 L1204.17 1213.71 L1204.76 1213.71 L1205.34 1213.71 L1205.93 1213.71 L1206.52 1213.71 L1207.1 1213.71 L1207.69 1213.71 L1208.28 1213.71 L1208.86 1213.71 L1209.45 1213.71 L1210.03 1213.71 L1210.62 1213.71 L1211.21 1213.71 L1211.79 1213.71 L1212.38 1213.71 L1212.97 1213.71 L1213.55 1213.71 L1214.14 1213.71 L1214.73 1213.71 L1215.31 1213.71 L1215.9 1213.71 L1216.49 1213.71 L1217.07 1213.71 L1217.66 1213.71 L1218.24 1213.71 L1218.83 1213.71 L1219.42 1213.71 L1220 1213.71 L1220.59 1213.71 L1221.18 1213.71 L1221.76 1213.71 L1222.35 1213.71 L1222.94 1213.71 L1223.52 1213.71 L1224.11 1213.71 L1224.7 1213.71 L1225.28 1213.71 L1225.87 1213.71 L1226.45 1213.71 L1227.04 1213.71 L1227.63 1213.71 L1228.21 1213.71 L1228.8 1213.71 L1229.39 1213.71 L1229.97 1213.71 L1230.56 1213.71 L1231.15 1213.71 L1231.73 1213.71 L1232.32 1213.71 L1232.91 1213.71 L1233.49 1213.71 L1234.08 1213.71 L1234.66 1213.71 L1235.25 1213.71 L1235.84 1213.71 L1236.42 1213.71 L1237.01 1213.71 L1237.6 1213.71 L1238.18 1213.71 L1238.77 1213.71 L1239.36 1213.71 L1239.94 1213.71 L1240.53 1213.71 L1241.11 1213.71 L1241.7 1213.71 L1242.29 1213.71 L1242.87 1213.71 L1243.46 1213.71 L1244.05 1213.71 L1244.63 1213.71 L1245.22 1213.71 L1245.81 1213.71 L1246.39 1213.71 L1246.98 1213.71 L1247.57 1213.71 L1248.15 1213.71 L1248.74 1213.71 L1249.32 1213.71 L1249.91 1213.71 L1250.5 1213.71 L1251.08 1213.71 L1251.67 1213.71 L1252.26 1213.71 L1252.84 1213.71 L1253.43 1213.71 L1254.02 1213.71 L1254.6 1213.71 L1255.19 1213.71 L1255.78 1213.71 L1256.36 1213.71 L1256.95 1213.71 L1257.53 1213.71 L1258.12 1213.71 L1258.71 1213.71 L1259.29 1213.71 L1259.88 1213.71 L1260.47 1213.71 L1261.05 1213.71 L1261.64 1213.71 L1262.23 1213.71 L1262.81 1213.71 L1263.4 1213.71 L1263.98 1213.71 L1264.57 1213.71 L1265.16 1213.71 L1265.74 1213.71 L1266.33 1213.71 L1266.92 1213.71 L1267.5 1213.71 L1268.09 1213.71 L1268.68 1213.71 L1269.26 1213.71 L1269.85 1213.71 L1270.44 1213.71 L1271.02 1213.71 L1271.61 1213.71 L1272.19 1213.71 L1272.78 1213.71 L1273.37 1213.71 L1273.95 1213.71 L1274.54 1213.71 L1275.13 1213.71 L1275.71 1213.71 L1276.3 1213.71 L1276.89 1213.71 L1277.47 1213.71 L1278.06 1213.71 L1278.65 1213.71 L1279.23 1213.71 L1279.82 1213.71 L1280.4 1213.71 L1280.99 1213.71 L1281.58 1213.71 L1282.16 1213.71 L1282.75 1213.71 L1283.34 1213.71 L1283.92 1213.71 L1284.51 1213.71 L1285.1 1213.71 L1285.68 1213.71 L1286.27 1213.71 L1286.86 1213.71 L1287.44 1213.71 L1288.03 1213.71 L1288.61 1213.71 L1289.2 1213.71 L1289.79 1213.71 L1290.37 1213.71 L1290.96 1213.71 L1291.55 1213.71 L1292.13 1213.71 L1292.72 1213.71 L1293.31 1213.71 L1293.89 1213.71 L1294.48 1213.71 L1295.06 1213.71 L1295.65 1213.71 L1296.24 1213.71 L1296.82 1213.71 L1297.41 1213.71 L1298 1213.71 L1298.58 1213.71 L1299.17 1213.71 L1299.76 1213.71 L1300.34 1213.71 L1300.93 1213.71 L1301.52 1213.71 L1302.1 1213.71 L1302.69 1213.71 L1303.27 1213.71 L1303.86 1213.71 L1304.45 1213.71 L1305.03 1213.71 L1305.62 1213.71 L1306.21 1213.71 L1306.79 1213.71 L1307.38 1213.71 L1307.97 1213.71 L1308.55 1213.71 L1309.14 1213.71 L1309.73 1213.71 L1310.31 1213.71 L1310.9 1213.71 L1311.48 1213.71 L1312.07 1213.71 L1312.66 1213.71 L1313.24 1213.71 L1313.83 1213.71 L1314.42 1213.71 L1315 1213.71 L1315.59 1213.71 L1316.18 1213.71 L1316.76 1213.71 L1317.35 1213.71 L1317.93 1213.71 L1318.52 1213.71 L1319.11 1213.71 L1319.69 1213.71 L1320.28 1213.71 L1320.87 1213.71 L1321.45 1213.71 L1322.04 1213.71 L1322.63 1213.71 L1323.21 1213.71 L1323.8 1213.71 L1324.39 1213.71 L1324.97 1213.71 L1325.56 1213.71 L1326.14 1213.71 L1326.73 1213.71 L1327.32 1213.71 L1327.9 1213.71 L1328.49 1213.71 L1329.08 1213.71 L1329.66 1213.71 L1330.25 1213.71 L1330.84 1213.71 L1331.42 1213.71 L1332.01 1213.71 L1332.6 1213.71 L1333.18 1213.71 L1333.77 1213.71 L1334.35 1213.71 L1334.94 1213.71 L1335.53 1213.71 L1336.11 1213.71 L1336.7 1213.71 L1337.29 1213.71 L1337.87 1213.71 L1338.46 1213.71 L1339.05 1213.71 L1339.63 1213.71 L1340.22 1213.71 L1340.8 1213.71 L1341.39 1213.71 L1341.98 1213.71 L1342.56 1213.71 L1343.15 1213.71 L1343.74 1213.71 L1344.32 1213.71 L1344.91 1213.71 L1345.5 1213.71 L1346.08 1213.71 L1346.67 1213.71 L1347.26 1213.71 L1347.84 1213.71 L1348.43 1213.71 L1349.01 1213.71 L1349.6 1213.71 L1350.19 1213.71 L1350.77 1213.71 L1351.36 1213.71 L1351.95 1213.71 L1352.53 1213.71 L1353.12 1213.71 L1353.71 1213.71 L1354.29 1213.71 L1354.88 1213.71 L1355.47 1213.71 L1356.05 1213.71 L1356.64 1213.71 L1357.22 1213.71 L1357.81 1213.71 L1358.4 1213.71 L1358.98 1213.71 L1359.57 1213.71 L1360.16 1213.71 L1360.74 1213.71 L1361.33 1213.71 L1361.92 1213.71 L1362.5 1213.71 L1363.09 1213.71 L1363.68 1213.71 L1364.26 1213.71 L1364.85 1213.71 L1365.43 1213.71 L1366.02 1213.71 L1366.61 1213.71 L1367.19 1213.71 L1367.78 1213.71 L1368.37 1213.71 L1368.95 1213.71 L1369.54 1213.71 L1370.13 1213.71 L1370.71 1213.71 L1371.3 1213.71 L1371.88 1213.71 L1372.47 1213.71 L1373.06 1213.71 L1373.64 1213.71 L1374.23 1213.71 L1374.82 1213.71 L1375.4 1213.71 L1375.99 1213.71 L1376.58 1213.71 L1377.16 1213.71 L1377.75 1213.71 L1378.34 1213.71 L1378.92 1213.71 L1379.51 1213.71 L1380.09 1213.71 L1380.68 1213.71 L1381.27 1213.71 L1381.85 1213.71 L1382.44 1213.71 L1383.03 1213.71 L1383.61 1213.71 L1384.2 1213.71 L1384.79 1213.71 L1385.37 1213.71 L1385.96 1213.71 L1386.55 1213.71 L1387.13 1213.71 L1387.72 1213.71 L1388.3 1213.71 L1388.89 1213.71 L1389.48 1213.71 L1390.06 1213.71 L1390.65 1213.71 L1391.24 1213.71 L1391.82 1213.71 L1392.41 1213.71 L1393 1213.71 L1393.58 1213.71 L1394.17 1213.71 L1394.75 1213.71 L1395.34 1213.71 L1395.93 1213.71 L1396.51 1213.71 L1397.1 1213.71 L1397.69 1213.71 L1398.27 1213.71 L1398.86 1213.71 L1399.45 1213.71 L1400.03 1213.71 L1400.62 1213.71 L1401.21 1213.71 L1401.79 1213.71 L1402.38 1213.71 L1402.96 1213.71 L1403.55 1213.71 L1404.14 1213.71 L1404.72 1213.71 L1405.31 1213.71 L1405.9 1213.71 L1406.48 1213.71 L1407.07 1213.71 L1407.66 1213.71 L1408.24 1213.71 L1408.83 1213.71 L1409.42 1213.71 L1410 1213.71 L1410.59 1213.71 L1411.17 1213.71 L1411.76 1213.71 L1412.35 1213.71 L1412.93 1213.71 L1413.52 1213.71 L1414.11 1213.71 L1414.69 1213.71 L1415.28 1213.71 L1415.87 1213.71 L1416.45 1213.71 L1417.04 1213.71 L1417.63 1213.71 L1418.21 1213.71 L1418.8 1213.71 L1419.38 1213.71 L1419.97 1213.71 L1420.56 1213.71 L1421.14 1213.71 L1421.73 1213.71 L1422.32 1213.71 L1422.9 1213.71 L1423.49 1213.71 L1424.08 1213.71 L1424.66 1213.71 L1425.25 1213.71 L1425.83 1213.71 L1426.42 1213.71 L1427.01 1213.71 L1427.59 1213.71 L1428.18 1213.71 L1428.77 1213.71 L1429.35 1213.71 L1429.94 1213.71 L1430.53 1213.71 L1431.11 1213.71 L1431.7 1213.71 L1432.29 1213.71 L1432.87 1213.71 L1433.46 1213.71 L1434.04 1213.71 L1434.63 1213.71 L1435.22 1213.71 L1435.8 1213.71 L1436.39 1213.71 L1436.98 1213.71 L1437.56 1213.71 L1438.15 1213.71 L1438.74 1213.71 L1439.32 1213.71 L1439.91 1213.71 L1440.5 1213.71 L1441.08 1213.71 L1441.67 1213.71 L1442.25 1213.71 L1442.84 1213.71 L1443.43 1213.71 L1444.01 1213.71 L1444.6 1213.71 L1445.19 1213.71 L1445.77 1213.71 L1446.36 1213.71 L1446.95 1213.71 L1447.53 1213.71 L1448.12 1213.71 L1448.7 1213.71 L1449.29 1213.71 L1449.88 1213.71 L1450.46 1213.71 L1451.05 1213.71 L1451.64 1213.71 L1452.22 1213.71 L1452.81 1213.71 L1453.4 1213.71 L1453.98 1213.71 L1454.57 1213.71 L1455.16 1213.71 L1455.74 1213.71 L1456.33 1213.71 L1456.91 1213.71 L1457.5 1213.71 L1458.09 1213.71 L1458.67 1213.71 L1459.26 1213.71 L1459.85 1213.71 L1460.43 1213.71 L1461.02 1213.71 L1461.61 1213.71 L1462.19 1213.71 L1462.78 1213.71 L1463.37 1213.71 L1463.95 1213.71 L1464.54 1213.71 L1465.12 1213.71 L1465.71 1213.71 L1466.3 1213.71 L1466.88 1213.71 L1467.47 1213.71 L1468.06 1213.71 L1468.64 1213.71 L1469.23 1213.71 L1469.82 1213.71 L1470.4 1213.71 L1470.99 1213.71 L1471.57 1213.71 L1472.16 1213.71 L1472.75 1213.71 L1473.33 1213.71 L1473.92 1213.71 L1474.51 1213.71 L1475.09 1213.71 L1475.68 1213.71 L1476.27 1213.71 L1476.85 1213.71 L1477.44 1213.71 L1478.03 1213.71 L1478.61 1213.71 L1479.2 1213.71 L1479.78 1213.71 L1480.37 1213.71 L1480.96 1213.71 L1481.54 1213.71 L1482.13 1213.71 L1482.72 1213.71 L1483.3 1213.71 L1483.89 1213.71 L1484.48 1213.71 L1485.06 1213.71 L1485.65 1213.71 L1486.24 1213.71 L1486.82 1213.71 L1487.41 1213.71 L1487.99 1213.71 L1488.58 1213.71 L1489.17 1213.71 L1489.75 1213.71 L1490.34 1213.71 L1490.93 1213.71 L1491.51 1213.71 L1492.1 1213.71 L1492.69 1213.71 L1493.27 1213.71 L1493.86 1213.71 L1494.45 1213.71 L1495.03 1213.71 L1495.62 1213.71 L1496.2 1213.71 L1496.79 1213.71 L1497.38 1213.71 L1497.96 1213.71 L1498.55 1213.71 L1499.14 1213.71 L1499.72 1213.71 L1500.31 1213.71 L1500.9 1213.71 L1501.48 1213.71 L1502.07 1213.71 L1502.65 1213.71 L1503.24 1213.71 L1503.83 1213.71 L1504.41 1213.71 L1505 1213.71 L1505.59 1213.71 L1506.17 1213.71 L1506.76 1213.71 L1507.35 1213.71 L1507.93 1213.71 L1508.52 1213.71 L1509.11 1213.71 L1509.69 1213.71 L1510.28 1213.71 L1510.86 1213.71 L1511.45 1213.71 L1512.04 1213.71 L1512.62 1213.71 L1513.21 1213.71 L1513.8 1213.71 L1514.38 1213.71 L1514.97 1213.71 L1515.56 1213.71 L1516.14 1213.71 L1516.73 1213.71 L1517.32 1213.71 L1517.9 1213.71 L1518.49 1213.71 L1519.07 1213.71 L1519.66 1213.71 L1520.25 1213.71 L1520.83 1213.71 L1521.42 1213.71 L1522.01 1213.71 L1522.59 1213.71 L1523.18 1213.71 L1523.77 1213.71 L1524.35 1213.71 L1524.94 1213.71 L1525.52 1213.71 L1526.11 1213.71 L1526.7 1213.71 L1527.28 1213.71 L1527.87 1213.71 L1528.46 1213.71 L1529.04 1213.71 L1529.63 1213.71 L1530.22 1213.71 L1530.8 1213.71 L1531.39 1213.71 L1531.98 1213.71 L1532.56 1213.71 L1533.15 1213.71 L1533.73 1213.71 L1534.32 1213.71 L1534.91 1213.71 L1535.49 1213.71 L1536.08 1213.71 L1536.67 1213.71 L1537.25 1213.71 L1537.84 1213.71 L1538.43 1213.71 L1539.01 1213.71 L1539.6 1213.71 L1540.19 1213.71 L1540.77 1213.71 L1541.36 1213.71 L1541.94 1213.71 L1542.53 1213.71 L1543.12 1213.71 L1543.7 1213.71 L1544.29 1213.71 L1544.88 1213.71 L1545.46 1213.71 L1546.05 1213.71 L1546.64 1213.71 L1547.22 1213.71 L1547.81 1213.71 L1548.4 1213.71 L1548.98 1213.71 L1549.57 1213.71 L1550.15 1213.71 L1550.74 1213.71 L1551.33 1213.71 L1551.91 1213.71 L1552.5 1213.71 L1553.09 1213.71 L1553.67 1213.71 L1554.26 1213.71 L1554.85 1213.71 L1555.43 1213.71 L1556.02 1213.71 L1556.6 1213.71 L1557.19 1213.71 L1557.78 1213.71 L1558.36 1213.71 L1558.95 1213.71 L1559.54 1213.71 L1560.12 1213.71 L1560.71 1213.71 L1561.3 1213.71 L1561.88 1213.71 L1562.47 1213.71 L1563.06 1213.71 L1563.64 1213.71 L1564.23 1213.71 L1564.81 1213.71 L1565.4 1213.71 L1565.99 1213.71 L1566.57 1213.71 L1567.16 1213.71 L1567.75 1213.71 L1568.33 1213.71 L1568.92 1213.71 L1569.51 1213.71 L1570.09 1213.71 L1570.68 1213.71 L1571.27 1213.71 L1571.85 1213.71 L1572.44 1213.71 L1573.02 1213.71 L1573.61 1213.71 L1574.2 1213.71 L1574.78 1213.71 L1575.37 1213.71 L1575.96 1213.71 L1576.54 1213.71 L1577.13 1213.71 L1577.72 1213.71 L1578.3 1213.71 L1578.89 1213.71 L1579.47 1213.71 L1580.06 1213.71 L1580.65 1213.71 L1581.23 1213.71 L1581.82 1213.71 L1582.41 1213.71 L1582.99 1213.71 L1583.58 1213.71 L1584.17 1213.71 L1584.75 1213.71 L1585.34 1213.71 L1585.93 1213.71 L1586.51 1213.71 L1587.1 1213.71 L1587.68 1213.71 L1588.27 1213.71 L1588.86 1213.71 L1589.44 1213.71 L1590.03 1213.71 L1590.62 1213.71 L1591.2 1213.71 L1591.79 1213.71 L1592.38 1213.71 L1592.96 1213.71 L1593.55 1213.71 L1594.14 1213.71 L1594.72 1213.71 L1595.31 1213.71 L1595.89 1213.71 L1596.48 1213.71 L1597.07 1213.71 L1597.65 1213.71 L1598.24 1213.71 L1598.83 1213.71 L1599.41 1213.71 L1600 1213.71 L1600.59 1213.71 L1601.17 1213.71 L1601.76 1213.71 L1602.34 1213.71 L1602.93 1213.71 L1603.52 1213.71 L1604.1 1213.71 L1604.69 1213.71 L1605.28 1213.71 L1605.86 1213.71 L1606.45 1213.71 L1607.04 1213.71 L1607.62 1213.71 L1608.21 1213.71 L1608.8 1213.71 L1609.38 1213.71 L1609.97 1213.71 L1610.55 1213.71 L1611.14 1213.71 L1611.73 1213.71 L1612.31 1213.71 L1612.9 1213.71 L1613.49 1213.71 L1614.07 1213.71 L1614.66 1213.71 L1615.25 1213.71 L1615.83 1213.71 L1616.42 1213.71 L1617.01 1213.71 L1617.59 1213.71 L1618.18 1213.71 L1618.76 1213.71 L1619.35 1213.71 L1619.94 1213.71 L1620.52 1213.71 L1621.11 1213.71 L1621.7 1213.71 L1622.28 1213.71 L1622.87 1213.71 L1623.46 1213.71 L1624.04 1213.71 L1624.63 1213.71 L1625.22 1213.71 L1625.8 1213.71 L1626.39 1213.71 L1626.97 1213.71 L1627.56 1213.71 L1628.15 1213.71 L1628.73 1213.71 L1629.32 1213.71 L1629.91 1213.71 L1630.49 1213.71 L1631.08 1213.71 L1631.67 1213.71 L1632.25 1213.71 L1632.84 1213.71 L1633.42 1213.71 L1634.01 1213.71 L1634.6 1213.71 L1635.18 1213.71 L1635.77 1213.71 L1636.36 1213.71 L1636.94 1213.71 L1637.53 1213.71 L1638.12 1213.71 L1638.7 1213.71 L1639.29 1213.71 L1639.88 1213.71 L1640.46 1213.71 L1641.05 1213.71 L1641.63 1213.71 L1642.22 1213.71 L1642.81 1213.71 L1643.39 1213.71 L1643.98 1213.71 L1644.57 1213.71 L1645.15 1213.71 L1645.74 1213.71 L1646.33 1213.71 L1646.91 1213.71 L1647.5 1213.71 L1648.09 1213.71 L1648.67 1213.71 L1649.26 1213.71 L1649.84 1213.71 L1650.43 1213.71 L1651.02 1213.71 L1651.6 1213.71 L1652.19 1213.71 L1652.78 1213.71 L1653.36 1213.71 L1653.95 1213.71 L1654.54 1213.71 L1655.12 1213.71 L1655.71 1213.71 L1656.29 1213.71 L1656.88 1213.71 L1657.47 1213.71 L1658.05 1213.71 L1658.64 1213.71 L1659.23 1213.71 L1659.81 1213.71 L1660.4 1213.71 L1660.99 1213.71 L1661.57 1213.71 L1662.16 1213.71 L1662.75 1213.71 L1663.33 1213.71 L1663.92 1213.71 L1664.5 1213.71 L1665.09 1213.71 L1665.68 1213.71 L1666.26 1213.71 L1666.85 1213.71 L1667.44 1213.71 L1668.02 1213.71 L1668.61 1213.71 L1669.2 1213.71 L1669.78 1213.71 L1670.37 1213.71 L1670.96 1213.71 L1671.54 1213.71 L1672.13 1213.71 L1672.71 1213.71 L1673.3 1213.71 L1673.89 1213.71 L1674.47 1213.71 L1675.06 1213.71 L1675.65 1213.71 L1676.23 1213.71 L1676.82 1213.71 L1677.41 1213.71 L1677.99 1213.71 L1678.58 1213.71 L1679.17 1213.71 L1679.75 1213.71 L1680.34 1213.71 L1680.92 1213.71 L1681.51 1213.71 L1682.1 1213.71 L1682.68 1213.71 L1683.27 1213.71 L1683.86 1213.71 L1684.44 1213.71 L1685.03 1213.71 L1685.62 1213.71 L1686.2 1213.71 L1686.79 1213.71 L1687.37 1213.71 L1687.96 1213.71 L1688.55 1213.71 L1689.13 1213.71 L1689.72 1213.71 L1690.31 1213.71 L1690.89 1213.71 L1691.48 1213.71 L1692.07 1213.71 L1692.65 1213.71 L1693.24 1213.71 L1693.83 1213.71 L1694.41 1213.71 L1695 1213.71 L1695.58 1213.71 L1696.17 1213.71 L1696.76 1213.71 L1697.34 1213.71 L1697.93 1213.71 L1698.52 1213.71 L1699.1 1213.71 L1699.69 1213.71 L1700.28 1213.71 L1700.86 1213.71 L1701.45 1213.71 L1702.04 1213.71 L1702.62 1213.71 L1703.21 1213.71 L1703.79 1213.71 L1704.38 1213.71 L1704.97 1213.71 L1705.55 1213.71 L1706.14 1213.71 L1706.73 1213.71 L1707.31 1213.71 L1707.9 1213.71 L1708.49 1213.71 L1709.07 1213.71 L1709.66 1213.71 L1710.24 1213.71 L1710.83 1213.71 L1711.42 1213.71 L1712 1213.71 L1712.59 1213.71 L1713.18 1213.71 L1713.76 1213.71 L1714.35 1213.71 L1714.94 1213.71 L1715.52 1213.71 L1716.11 1213.71 L1716.7 1213.71 L1717.28 1213.71 L1717.87 1213.71 L1718.45 1213.71 L1719.04 1213.71 L1719.63 1213.71 L1720.21 1213.71 L1720.8 1213.71 L1721.39 1213.71 L1721.97 1213.71 L1722.56 1213.71 L1723.15 1213.71 L1723.73 1213.71 L1724.32 1213.71 L1724.91 1213.71 L1725.49 1213.71 L1726.08 1213.71 L1726.66 1213.71 L1727.25 1213.71 L1727.84 1213.71 L1728.42 1213.71 L1729.01 1213.71 L1729.6 1213.71 L1730.18 1213.71 L1730.77 1213.71 L1731.36 1213.71 L1731.94 1213.71 L1732.53 1213.71 L1733.11 1213.71 L1733.7 1213.71 L1734.29 1213.71 L1734.87 1213.71 L1735.46 1213.71 L1736.05 1213.71 L1736.63 1213.71 L1737.22 1213.71 L1737.81 1213.71 L1738.39 1213.71 L1738.98 1213.71 L1739.57 1213.71 L1740.15 1213.71 L1740.74 1213.71 L1741.32 1213.71 L1741.91 1213.71 L1742.5 1213.71 L1743.08 1213.71 L1743.67 1213.71 L1744.26 1213.71 L1744.84 1213.71 L1745.43 1213.71 L1746.02 1213.71 L1746.6 1213.71 L1747.19 1213.71 L1747.78 1213.71 L1748.36 1213.71 L1748.95 1213.71 L1749.53 1213.71 L1750.12 1213.71 L1750.71 1213.71 L1751.29 1213.71 L1751.88 1213.71 L1752.47 1213.71 L1753.05 1213.71 L1753.64 1213.71 L1754.23 1213.71 L1754.81 1213.71 L1755.4 1213.71 L1755.99 1213.71 L1756.57 1213.71 L1757.16 1213.71 L1757.74 1213.71 L1758.33 1213.71 L1758.92 1213.71 L1759.5 1213.71 L1760.09 1213.71 L1760.68 1213.71 L1761.26 1213.71 L1761.85 1213.71 L1762.44 1213.71 L1763.02 1213.71 L1763.61 1213.71 L1764.19 1213.71 L1764.78 1213.71 L1765.37 1213.71 L1765.95 1213.71 L1766.54 1213.71 L1767.13 1213.71 L1767.71 1213.71 L1768.3 1213.71 L1768.89 1213.71 L1769.47 1213.71 L1770.06 1213.71 L1770.65 1213.71 L1771.23 1213.71 L1771.82 1213.71 L1772.4 1213.71 L1772.99 1213.71 L1773.58 1213.71 L1774.16 1213.71 L1774.75 1213.71 L1775.34 1213.71 L1775.92 1213.71 L1776.51 1213.71 L1777.1 1213.71 L1777.68 1213.71 L1778.27 1213.71 L1778.86 1213.71 L1779.44 1213.71 L1780.03 1213.71 L1780.61 1213.71 L1781.2 1213.71 L1781.79 1213.71 L1782.37 1213.71 L1782.96 1213.71 L1783.55 1213.71 L1784.13 1213.71 L1784.72 1213.71 L1785.31 1213.71 L1785.89 1213.71 L1786.48 1213.71 L1787.06 1213.71 L1787.65 1213.71 L1788.24 1213.71 L1788.82 1213.71 L1789.41 1213.71 L1790 1213.71 L1790.58 1213.71 L1791.17 1213.71 L1791.76 1213.71 L1792.34 1213.71 L1792.93 1213.71 L1793.52 1213.71 L1794.1 1213.71 L1794.69 1213.71 L1795.27 1213.71 L1795.86 1213.71 L1796.45 1213.71 L1797.03 1213.71 L1797.62 1213.71 L1798.21 1213.71 L1798.79 1213.71 L1799.38 1213.71 L1799.97 1213.71 L1800.55 1213.71 L1801.14 1213.71 L1801.73 1213.71 L1802.31 1213.71 L1802.9 1213.71 L1803.48 1213.71 L1804.07 1213.71 L1804.66 1213.71 L1805.24 1213.71 L1805.83 1213.71 L1806.42 1213.71 L1807 1213.71 L1807.59 1213.71 L1808.18 1213.71 L1808.76 1213.71 L1809.35 1213.71 L1809.94 1213.71 L1810.52 1213.71 L1811.11 1213.71 L1811.69 1213.71 L1812.28 1213.71 L1812.87 1213.71 L1813.45 1213.71 L1814.04 1213.71 L1814.63 1213.71 L1815.21 1213.71 L1815.8 1213.71 L1816.39 1213.71 L1816.97 1213.71 L1817.56 1213.71 L1818.14 1213.71 L1818.73 1213.71 L1819.32 1213.71 L1819.9 1213.71 L1820.49 1213.71 L1821.08 1213.71 L1821.66 1213.71 L1822.25 1213.71 L1822.84 1213.71 L1823.42 1213.71 L1824.01 1213.71 L1824.6 1213.71 L1825.18 1213.71 L1825.77 1213.71 L1826.35 1213.71 L1826.94 1213.71 L1827.53 1213.71 L1828.11 1213.71 L1828.7 1213.71 L1829.29 1213.71 L1829.87 1213.71 L1830.46 1213.71 L1831.05 1213.71 L1831.63 1213.71 L1832.22 1213.71 L1832.81 1213.71 L1833.39 1213.71 L1833.98 1213.71 L1834.56 1213.71 L1835.15 1213.71 L1835.74 1213.71 L1836.32 1213.71 L1836.91 1213.71 L1837.5 1213.71 L1838.08 1213.71 L1838.67 1213.71 L1839.26 1213.71 L1839.84 1213.71 L1840.43 1213.71 L1841.01 1213.71 L1841.6 1213.71 L1842.19 1213.71 L1842.77 1213.71 L1843.36 1213.71 L1843.95 1213.71 L1844.53 1213.71 L1845.12 1213.71 L1845.71 1213.71 L1846.29 1213.71 L1846.88 1213.71 L1847.47 1213.71 L1848.05 1213.71 L1848.64 1213.71 L1849.22 1213.71 L1849.81 1213.71 L1850.4 1213.71 L1850.98 1213.71 L1851.57 1213.71 L1852.16 1213.71 L1852.74 1213.71 L1853.33 1213.71 L1853.92 1213.71 L1854.5 1213.71 L1855.09 1213.71 L1855.68 1213.71 L1856.26 1213.71 L1856.85 1213.71 L1857.43 1213.71 L1858.02 1213.71 L1858.61 1213.71 L1859.19 1213.71 L1859.78 1213.71 L1860.37 1213.71 L1860.95 1213.71 L1861.54 1213.71 L1862.13 1213.71 L1862.71 1213.71 L1863.3 1213.71 L1863.88 1213.71 L1864.47 1213.71 L1865.06 1213.71 L1865.64 1213.71 L1866.23 1213.71 L1866.82 1213.71 L1867.4 1213.71 L1867.99 1213.71 L1868.58 1213.71 L1869.16 1213.71 L1869.75 1213.71 L1870.34 1213.71 L1870.92 1213.71 L1871.51 1213.71 L1872.09 1213.71 L1872.68 1213.71 L1873.27 1213.71 L1873.85 1213.71 L1874.44 1213.71 L1875.03 1213.71 L1875.61 1213.71 L1876.2 1213.71 L1876.79 1213.71 L1877.37 1213.71 L1877.96 1213.71 L1878.55 1213.71 L1879.13 1213.71 L1879.72 1213.71 L1880.3 1213.71 L1880.89 1213.71 L1881.48 1213.71 L1882.06 1213.71 L1882.65 1213.71 L1883.24 1213.71 L1883.82 1213.71 L1884.41 1213.71 L1885 1213.71 L1885.58 1213.71 L1886.17 1213.71 L1886.76 1213.71 L1887.34 1213.71 L1887.93 1213.71 L1888.51 1213.71 L1889.1 1213.71 L1889.69 1213.71 L1890.27 1213.71 L1890.86 1213.71 L1891.45 1213.71 L1892.03 1213.71 L1892.62 1213.71 L1893.21 1213.71 L1893.79 1213.71 L1894.38 1213.71 L1894.96 1213.71 L1895.55 1213.71 L1896.14 1213.71 L1896.72 1213.71 L1897.31 1213.71 L1897.9 1213.71 L1898.48 1213.71 L1899.07 1213.71 L1899.66 1213.71 L1900.24 1213.71 L1900.83 1213.71 L1901.42 1213.71 L1902 1213.71 L1902.59 1213.71 L1903.17 1213.71 L1903.76 1213.71 L1904.35 1213.71 L1904.93 1213.71 L1905.52 1213.71 L1906.11 1213.71 L1906.69 1213.71 L1907.28 1213.71 L1907.87 1213.71 L1908.45 1213.71 L1909.04 1213.71 L1909.63 1213.71 L1910.21 1213.71 L1910.8 1213.71 L1911.38 1213.71 L1911.97 1213.71 L1912.56 1213.71 L1913.14 1213.71 L1913.73 1213.71 L1914.32 1213.71 L1914.9 1213.71 L1915.49 1213.71 L1916.08 1213.71 L1916.66 1213.71 L1917.25 1213.71 L1917.83 1213.71 L1918.42 1213.71 L1919.01 1213.71 L1919.59 1213.71 L1920.18 1213.71 L1920.77 1213.71 L1921.35 1213.71 L1921.94 1213.71 L1922.53 1213.71 L1923.11 1213.71 L1923.7 1213.71 L1924.29 1213.71 L1924.87 1213.71 L1925.46 1213.71 L1926.04 1213.71 L1926.63 1213.71 L1927.22 1213.71 L1927.8 1213.71 L1928.39 1213.71 L1928.98 1213.71 L1929.56 1213.71 L1930.15 1213.71 L1930.74 1213.71 L1931.32 1213.71 L1931.91 1213.71 L1932.5 1213.71 L1933.08 1213.71 L1933.67 1213.71 L1934.25 1213.71 L1934.84 1213.71 L1935.43 1213.71 L1936.01 1213.71 L1936.6 1213.71 L1937.19 1213.71 L1937.77 1213.71 L1938.36 1213.71 L1938.95 1213.71 L1939.53 1213.71 L1940.12 1213.71 L1940.71 1213.71 L1941.29 1213.71 L1941.88 1213.71 L1942.46 1213.71 L1943.05 1213.71 L1943.64 1213.71 L1944.22 1213.71 L1944.81 1213.71 L1945.4 1213.71 L1945.98 1213.71 L1946.57 1213.71 L1947.16 1213.71 L1947.74 1213.71 L1948.33 1213.71 L1948.91 1213.71 L1949.5 1213.71 L1950.09 1213.71 L1950.67 1213.71 L1951.26 1213.71 L1951.85 1213.71 L1952.43 1213.71 L1953.02 1213.71 L1953.61 1213.71 L1954.19 1213.71 L1954.78 1213.71 L1955.37 1213.71 L1955.95 1213.71 L1956.54 1213.71 L1957.12 1213.71 L1957.71 1213.71 L1958.3 1213.71 L1958.88 1213.71 L1959.47 1213.71 L1960.06 1213.71 L1960.64 1213.71 L1961.23 1213.71 L1961.82 1213.71 L1962.4 1213.71 L1962.99 1213.71 L1963.58 1213.71 L1964.16 1213.71 L1964.75 1213.71 L1965.33 1213.71 L1965.92 1213.71 L1966.51 1213.71 L1967.09 1213.71 L1967.68 1213.71 L1968.27 1213.71 L1968.85 1213.71 L1969.44 1213.71 L1970.03 1213.71 L1970.61 1213.71 L1971.2 1213.71 L1971.78 1213.71 L1972.37 1213.71 L1972.96 1213.71 L1973.54 1213.71 L1974.13 1213.71 L1974.72 1213.71 L1975.3 1213.71 L1975.89 1213.71 L1976.48 1213.71 L1977.06 1213.71 L1977.65 1213.71 L1978.24 1213.71 L1978.82 1213.71 L1979.41 1213.71 L1979.99 1213.71 L1980.58 1213.71 L1981.17 1213.71 L1981.75 1213.71 L1982.34 1213.71 L1982.93 1213.71 L1983.51 1213.71 L1984.1 1213.71 L1984.69 1213.71 L1985.27 1213.71 L1985.86 1213.71 L1986.45 1213.71 L1987.03 1213.71 L1987.62 1213.71 L1988.2 1213.71 L1988.79 1213.71 L1989.38 1213.71 L1989.96 1213.71 L1990.55 1213.71 L1991.14 1213.71 L1991.72 1213.71 L1992.31 1213.71 L1992.9 1213.71 L1993.48 1213.71 L1994.07 1213.71 L1994.65 1213.71 L1995.24 1213.71 L1995.83 1213.71 L1996.41 1213.71 L1997 1213.71 L1997.59 1213.71 L1998.17 1213.71 L1998.76 1213.71 L1999.35 1213.71 L1999.93 1213.71 L2000.52 1213.71 L2001.11 1213.71 L2001.69 1213.71 L2002.28 1213.71 L2002.86 1213.71 L2003.45 1213.71 L2004.04 1213.71 L2004.62 1213.71 L2005.21 1213.71 L2005.8 1213.71 L2006.38 1213.71 L2006.97 1213.71 L2007.56 1213.71 L2008.14 1213.71 L2008.73 1213.71 L2009.32 1213.71 L2009.9 1213.71 L2010.49 1213.71 L2011.07 1213.71 L2011.66 1213.71 L2012.25 1213.71 L2012.83 1213.71 L2013.42 1213.71 L2014.01 1213.71 L2014.59 1213.71 L2015.18 1213.71 L2015.77 1213.71 L2016.35 1213.71 L2016.94 1213.71 L2017.53 1213.71 L2018.11 1213.71 L2018.7 1213.71 L2019.28 1213.71 L2019.87 1213.71 L2020.46 1213.71 L2021.04 1213.71 L2021.63 1213.71 L2022.22 1213.71 L2022.8 1213.71 L2023.39 1213.71 L2023.98 1213.71 L2024.56 1213.71 L2025.15 1213.71 L2025.73 1213.71 L2026.32 1213.71 L2026.91 1213.71 L2027.49 1213.71 L2028.08 1213.71 L2028.67 1213.71 L2029.25 1213.71 L2029.84 1213.71 L2030.43 1213.71 L2031.01 1213.71 L2031.6 1213.71 L2032.19 1213.71 L2032.77 1213.71 L2033.36 1213.71 L2033.94 1213.71 L2034.53 1213.71 L2035.12 1213.71 L2035.7 1213.71 L2036.29 1213.71 L2036.88 1213.71 L2037.46 1213.71 L2038.05 1213.71 L2038.64 1213.71 L2039.22 1213.71 L2039.81 1213.71 L2040.4 1213.71 L2040.98 1213.71 L2041.57 1213.71 L2042.15 1213.71 L2042.74 1213.71 L2043.33 1213.71 L2043.91 1213.71 L2044.5 1213.71 L2045.09 1213.71 L2045.67 1213.71 L2046.26 1213.71 L2046.85 1213.71 L2047.43 1213.71 L2048.02 1213.71 L2048.6 1213.71 L2049.19 1213.71 L2049.78 1213.71 L2050.36 1213.71 L2050.95 1213.71 L2051.54 1213.71 L2052.12 1213.71 L2052.71 1213.71 L2053.3 1213.71 L2053.88 1213.71 L2054.47 1213.71 L2055.06 1213.71 L2055.64 1213.71 L2056.23 1213.71 L2056.81 1213.71 L2057.4 1213.71 L2057.99 1213.71 L2058.57 1213.71 L2059.16 1213.71 L2059.75 1213.71 L2060.33 1213.71 L2060.92 1213.71 L2061.51 1213.71 L2062.09 1213.71 L2062.68 1213.71 L2063.27 1213.71 L2063.85 1213.71 L2064.44 1213.71 L2065.02 1213.71 L2065.61 1213.71 L2066.2 1213.71 L2066.78 1213.71 L2067.37 1213.71 L2067.96 1213.71 L2068.54 1213.71 L2069.13 1213.71 L2069.72 1213.71 L2070.3 1213.71 L2070.89 1213.71 L2071.48 1213.71 L2072.06 1213.71 L2072.65 1213.71 L2073.23 1213.71 L2073.82 1213.71 L2074.41 1213.71 L2074.99 1213.71 L2075.58 1213.71 L2076.17 1213.71 L2076.75 1213.71 L2077.34 1213.71 L2077.93 1213.71 L2078.51 1213.71 L2079.1 1213.71 L2079.68 1213.71 L2080.27 1213.71 L2080.86 1213.71 L2081.44 1213.71 L2082.03 1213.71 L2082.62 1213.71 L2083.2 1213.71 L2083.79 1213.71 L2084.38 1213.71 L2084.96 1213.71 L2085.55 1213.71 L2086.14 1213.71 L2086.72 1213.71 L2087.31 1213.71 L2087.89 1213.71 L2088.48 1213.71 L2089.07 1213.71 L2089.65 1213.71 L2090.24 1213.71 L2090.83 1213.71 L2091.41 1213.71 L2092 1213.71 L2092.59 1213.71 L2093.17 1213.71 L2093.76 1213.71 L2094.35 1213.71 L2094.93 1213.71 L2095.52 1213.71 L2096.1 1213.71 L2096.69 1213.71 L2097.28 1213.71 L2097.86 1213.71 L2098.45 1213.71 L2099.04 1213.71 L2099.62 1213.71 L2100.21 1213.71 L2100.8 1213.71 L2101.38 1213.71 L2101.97 1213.71 L2102.55 1213.71 L2103.14 1213.71 L2103.73 1213.71 L2104.31 1213.71 L2104.9 1213.71 L2105.49 1213.71 L2106.07 1213.71 L2106.66 1213.71 L2107.25 1213.71 L2107.83 1213.71 L2108.42 1213.71 L2109.01 1213.71 L2109.59 1213.71 L2110.18 1213.71 L2110.76 1213.71 L2111.35 1213.71 L2111.94 1213.71 L2112.52 1213.71 L2113.11 1213.71 L2113.7 1213.71 L2114.28 1213.71 L2114.87 1213.71 L2115.46 1213.71 L2116.04 1213.71 L2116.63 1213.71 L2117.22 1213.71 L2117.8 1213.71 L2118.39 1213.71 L2118.97 1213.71 L2119.56 1213.71 L2120.15 1213.71 L2120.73 1213.71 L2121.32 1213.71 L2121.91 1213.71 L2122.49 1213.71 L2123.08 1213.71 L2123.67 1213.71 L2124.25 1213.71 L2124.84 1213.71 L2125.42 1213.71 L2126.01 1213.71 L2126.6 1213.71 L2127.18 1213.71 L2127.77 1213.71 L2128.36 1213.71 L2128.94 1213.71 L2129.53 1213.71 L2130.12 1213.71 L2130.7 1213.71 L2131.29 1213.71 L2131.88 1213.71 L2132.46 1213.71 L2133.05 1213.71 L2133.63 1213.71 L2134.22 1213.71 L2134.81 1213.71 L2135.39 1213.71 L2135.98 1213.71 L2136.57 1213.71 L2137.15 1213.71 L2137.74 1213.71 L2138.33 1213.71 L2138.91 1213.71 L2139.5 1213.71 L2140.09 1213.71 L2140.67 1213.71 L2141.26 1213.71 L2141.84 1213.71 L2142.43 1213.71 L2143.02 1213.71 L2143.6 1213.71 L2144.19 1213.71 L2144.78 1213.71 L2145.36 1213.71 L2145.95 1213.71 L2146.54 1213.71 L2147.12 1213.71 L2147.71 1213.71 L2148.3 1213.71 L2148.88 1213.71 L2149.47 1213.71 L2150.05 1213.71 L2150.64 1213.71 L2151.23 1213.71 L2151.81 1213.71 L2152.4 1213.71 L2152.99 1213.71 L2153.57 1213.71 L2154.16 1213.71 L2154.75 1213.71 L2155.33 1213.71 L2155.92 1213.71 L2156.5 1213.71 L2157.09 1213.71 L2157.68 1213.71 L2158.26 1213.71 L2158.26 1213.58 L2157.68 1213.58 L2157.09 1213.58 L2156.5 1213.58 L2155.92 1213.58 L2155.33 1213.58 L2154.75 1213.58 L2154.16 1213.58 L2153.57 1213.58 L2152.99 1213.58 L2152.4 1213.58 L2151.81 1213.58 L2151.23 1213.58 L2150.64 1213.58 L2150.05 1213.58 L2149.47 1213.58 L2148.88 1213.58 L2148.3 1213.58 L2147.71 1213.58 L2147.12 1213.58 L2146.54 1213.58 L2145.95 1213.58 L2145.36 1213.58 L2144.78 1213.58 L2144.19 1213.58 L2143.6 1213.58 L2143.02 1213.58 L2142.43 1213.58 L2141.84 1213.58 L2141.26 1213.58 L2140.67 1213.58 L2140.09 1213.58 L2139.5 1213.58 L2138.91 1213.58 L2138.33 1213.58 L2137.74 1213.58 L2137.15 1213.58 L2136.57 1213.58 L2135.98 1213.58 L2135.39 1213.58 L2134.81 1213.58 L2134.22 1213.58 L2133.63 1213.58 L2133.05 1213.58 L2132.46 1213.58 L2131.88 1213.58 L2131.29 1213.58 L2130.7 1213.58 L2130.12 1213.58 L2129.53 1213.58 L2128.94 1213.58 L2128.36 1213.58 L2127.77 1213.58 L2127.18 1213.58 L2126.6 1213.58 L2126.01 1213.58 L2125.42 1213.58 L2124.84 1213.58 L2124.25 1213.58 L2123.67 1213.58 L2123.08 1213.58 L2122.49 1213.58 L2121.91 1213.58 L2121.32 1213.58 L2120.73 1213.58 L2120.15 1213.58 L2119.56 1213.58 L2118.97 1213.58 L2118.39 1213.58 L2117.8 1213.58 L2117.22 1213.58 L2116.63 1213.58 L2116.04 1213.58 L2115.46 1213.58 L2114.87 1213.58 L2114.28 1213.58 L2113.7 1213.58 L2113.11 1213.58 L2112.52 1213.58 L2111.94 1213.58 L2111.35 1213.58 L2110.76 1213.58 L2110.18 1213.58 L2109.59 1213.58 L2109.01 1213.58 L2108.42 1213.58 L2107.83 1213.58 L2107.25 1213.58 L2106.66 1213.58 L2106.07 1213.58 L2105.49 1213.58 L2104.9 1213.58 L2104.31 1213.58 L2103.73 1213.58 L2103.14 1213.58 L2102.55 1213.58 L2101.97 1213.58 L2101.38 1213.58 L2100.8 1213.58 L2100.21 1213.58 L2099.62 1213.58 L2099.04 1213.58 L2098.45 1213.58 L2097.86 1213.58 L2097.28 1213.58 L2096.69 1213.58 L2096.1 1213.58 L2095.52 1213.58 L2094.93 1213.58 L2094.35 1213.58 L2093.76 1213.58 L2093.17 1213.58 L2092.59 1213.58 L2092 1213.58 L2091.41 1213.58 L2090.83 1213.58 L2090.24 1213.58 L2089.65 1213.58 L2089.07 1213.58 L2088.48 1213.58 L2087.89 1213.58 L2087.31 1213.58 L2086.72 1213.58 L2086.14 1213.58 L2085.55 1213.58 L2084.96 1213.58 L2084.38 1213.58 L2083.79 1213.58 L2083.2 1213.58 L2082.62 1213.58 L2082.03 1213.58 L2081.44 1213.58 L2080.86 1213.58 L2080.27 1213.58 L2079.68 1213.58 L2079.1 1213.58 L2078.51 1213.58 L2077.93 1213.58 L2077.34 1213.58 L2076.75 1213.58 L2076.17 1213.58 L2075.58 1213.58 L2074.99 1213.58 L2074.41 1213.58 L2073.82 1213.58 L2073.23 1213.58 L2072.65 1213.58 L2072.06 1213.58 L2071.48 1213.58 L2070.89 1213.58 L2070.3 1213.58 L2069.72 1213.58 L2069.13 1213.58 L2068.54 1213.58 L2067.96 1213.58 L2067.37 1213.58 L2066.78 1213.58 L2066.2 1213.58 L2065.61 1213.58 L2065.02 1213.58 L2064.44 1213.58 L2063.85 1213.58 L2063.27 1213.58 L2062.68 1213.58 L2062.09 1213.58 L2061.51 1213.58 L2060.92 1213.58 L2060.33 1213.58 L2059.75 1213.58 L2059.16 1213.58 L2058.57 1213.58 L2057.99 1213.58 L2057.4 1213.58 L2056.81 1213.58 L2056.23 1213.58 L2055.64 1213.58 L2055.06 1213.58 L2054.47 1213.58 L2053.88 1213.58 L2053.3 1213.58 L2052.71 1213.58 L2052.12 1213.58 L2051.54 1213.58 L2050.95 1213.58 L2050.36 1213.58 L2049.78 1213.58 L2049.19 1213.58 L2048.6 1213.58 L2048.02 1213.58 L2047.43 1213.58 L2046.85 1213.58 L2046.26 1213.58 L2045.67 1213.58 L2045.09 1213.58 L2044.5 1213.58 L2043.91 1213.58 L2043.33 1213.58 L2042.74 1213.58 L2042.15 1213.58 L2041.57 1213.58 L2040.98 1213.58 L2040.4 1213.58 L2039.81 1213.58 L2039.22 1213.58 L2038.64 1213.58 L2038.05 1213.58 L2037.46 1213.58 L2036.88 1213.58 L2036.29 1213.58 L2035.7 1213.58 L2035.12 1213.58 L2034.53 1213.58 L2033.94 1213.58 L2033.36 1213.58 L2032.77 1213.58 L2032.19 1213.58 L2031.6 1213.58 L2031.01 1213.58 L2030.43 1213.58 L2029.84 1213.58 L2029.25 1213.58 L2028.67 1213.58 L2028.08 1213.58 L2027.49 1213.58 L2026.91 1213.58 L2026.32 1213.58 L2025.73 1213.58 L2025.15 1213.58 L2024.56 1213.58 L2023.98 1213.58 L2023.39 1213.58 L2022.8 1213.58 L2022.22 1213.58 L2021.63 1213.58 L2021.04 1213.58 L2020.46 1213.58 L2019.87 1213.58 L2019.28 1213.58 L2018.7 1213.58 L2018.11 1213.58 L2017.53 1213.58 L2016.94 1213.58 L2016.35 1213.58 L2015.77 1213.58 L2015.18 1213.58 L2014.59 1213.58 L2014.01 1213.58 L2013.42 1213.58 L2012.83 1213.58 L2012.25 1213.58 L2011.66 1213.58 L2011.07 1213.58 L2010.49 1213.58 L2009.9 1213.58 L2009.32 1213.58 L2008.73 1213.58 L2008.14 1213.58 L2007.56 1213.58 L2006.97 1213.58 L2006.38 1213.58 L2005.8 1213.58 L2005.21 1213.58 L2004.62 1213.58 L2004.04 1213.58 L2003.45 1213.58 L2002.86 1213.58 L2002.28 1213.58 L2001.69 1213.58 L2001.11 1213.58 L2000.52 1213.58 L1999.93 1213.58 L1999.35 1213.58 L1998.76 1213.58 L1998.17 1213.58 L1997.59 1213.58 L1997 1213.58 L1996.41 1213.58 L1995.83 1213.58 L1995.24 1213.58 L1994.65 1213.58 L1994.07 1213.58 L1993.48 1213.58 L1992.9 1213.58 L1992.31 1213.58 L1991.72 1213.58 L1991.14 1213.58 L1990.55 1213.58 L1989.96 1213.58 L1989.38 1213.58 L1988.79 1213.58 L1988.2 1213.58 L1987.62 1213.58 L1987.03 1213.58 L1986.45 1213.58 L1985.86 1213.58 L1985.27 1213.58 L1984.69 1213.58 L1984.1 1213.58 L1983.51 1213.58 L1982.93 1213.58 L1982.34 1213.58 L1981.75 1213.58 L1981.17 1213.58 L1980.58 1213.58 L1979.99 1213.58 L1979.41 1213.58 L1978.82 1213.58 L1978.24 1213.58 L1977.65 1213.58 L1977.06 1213.58 L1976.48 1213.58 L1975.89 1213.58 L1975.3 1213.58 L1974.72 1213.58 L1974.13 1213.58 L1973.54 1213.58 L1972.96 1213.58 L1972.37 1213.58 L1971.78 1213.58 L1971.2 1213.58 L1970.61 1213.58 L1970.03 1213.58 L1969.44 1213.58 L1968.85 1213.58 L1968.27 1213.58 L1967.68 1213.58 L1967.09 1213.58 L1966.51 1213.58 L1965.92 1213.58 L1965.33 1213.58 L1964.75 1213.58 L1964.16 1213.58 L1963.58 1213.58 L1962.99 1213.58 L1962.4 1213.58 L1961.82 1213.58 L1961.23 1213.58 L1960.64 1213.58 L1960.06 1213.58 L1959.47 1213.58 L1958.88 1213.58 L1958.3 1213.58 L1957.71 1213.58 L1957.12 1213.58 L1956.54 1213.58 L1955.95 1213.58 L1955.37 1213.58 L1954.78 1213.58 L1954.19 1213.58 L1953.61 1213.58 L1953.02 1213.58 L1952.43 1213.58 L1951.85 1213.58 L1951.26 1213.58 L1950.67 1213.58 L1950.09 1213.58 L1949.5 1213.58 L1948.91 1213.58 L1948.33 1213.58 L1947.74 1213.58 L1947.16 1213.58 L1946.57 1213.58 L1945.98 1213.58 L1945.4 1213.58 L1944.81 1213.58 L1944.22 1213.58 L1943.64 1213.58 L1943.05 1213.58 L1942.46 1213.58 L1941.88 1213.58 L1941.29 1213.58 L1940.71 1213.58 L1940.12 1213.58 L1939.53 1213.58 L1938.95 1213.58 L1938.36 1213.58 L1937.77 1213.58 L1937.19 1213.58 L1936.6 1213.58 L1936.01 1213.58 L1935.43 1213.58 L1934.84 1213.58 L1934.25 1213.58 L1933.67 1213.58 L1933.08 1213.58 L1932.5 1213.58 L1931.91 1213.58 L1931.32 1213.58 L1930.74 1213.58 L1930.15 1213.58 L1929.56 1213.58 L1928.98 1213.58 L1928.39 1213.58 L1927.8 1213.58 L1927.22 1213.58 L1926.63 1213.58 L1926.04 1213.58 L1925.46 1213.58 L1924.87 1213.58 L1924.29 1213.58 L1923.7 1213.58 L1923.11 1213.58 L1922.53 1213.58 L1921.94 1213.58 L1921.35 1213.58 L1920.77 1213.58 L1920.18 1213.58 L1919.59 1213.58 L1919.01 1213.58 L1918.42 1213.58 L1917.83 1213.58 L1917.25 1213.58 L1916.66 1213.58 L1916.08 1213.58 L1915.49 1213.58 L1914.9 1213.58 L1914.32 1213.58 L1913.73 1213.58 L1913.14 1213.58 L1912.56 1213.58 L1911.97 1213.58 L1911.38 1213.58 L1910.8 1213.58 L1910.21 1213.58 L1909.63 1213.58 L1909.04 1213.58 L1908.45 1213.58 L1907.87 1213.58 L1907.28 1213.58 L1906.69 1213.58 L1906.11 1213.58 L1905.52 1213.58 L1904.93 1213.58 L1904.35 1213.58 L1903.76 1213.58 L1903.17 1213.58 L1902.59 1213.58 L1902 1213.58 L1901.42 1213.58 L1900.83 1213.58 L1900.24 1213.58 L1899.66 1213.58 L1899.07 1213.58 L1898.48 1213.58 L1897.9 1213.58 L1897.31 1213.58 L1896.72 1213.58 L1896.14 1213.58 L1895.55 1213.58 L1894.96 1213.58 L1894.38 1213.58 L1893.79 1213.58 L1893.21 1213.58 L1892.62 1213.58 L1892.03 1213.58 L1891.45 1213.58 L1890.86 1213.58 L1890.27 1213.58 L1889.69 1213.58 L1889.1 1213.58 L1888.51 1213.58 L1887.93 1213.58 L1887.34 1213.58 L1886.76 1213.58 L1886.17 1213.58 L1885.58 1213.58 L1885 1213.58 L1884.41 1213.58 L1883.82 1213.58 L1883.24 1213.58 L1882.65 1213.58 L1882.06 1213.58 L1881.48 1213.58 L1880.89 1213.58 L1880.3 1213.58 L1879.72 1213.58 L1879.13 1213.58 L1878.55 1213.58 L1877.96 1213.58 L1877.37 1213.58 L1876.79 1213.58 L1876.2 1213.58 L1875.61 1213.58 L1875.03 1213.58 L1874.44 1213.58 L1873.85 1213.58 L1873.27 1213.58 L1872.68 1213.58 L1872.09 1213.58 L1871.51 1213.58 L1870.92 1213.58 L1870.34 1213.58 L1869.75 1213.58 L1869.16 1213.58 L1868.58 1213.58 L1867.99 1213.58 L1867.4 1213.58 L1866.82 1213.58 L1866.23 1213.58 L1865.64 1213.58 L1865.06 1213.58 L1864.47 1213.58 L1863.88 1213.58 L1863.3 1213.58 L1862.71 1213.58 L1862.13 1213.58 L1861.54 1213.58 L1860.95 1213.58 L1860.37 1213.58 L1859.78 1213.58 L1859.19 1213.58 L1858.61 1213.58 L1858.02 1213.58 L1857.43 1213.58 L1856.85 1213.58 L1856.26 1213.58 L1855.68 1213.58 L1855.09 1213.58 L1854.5 1213.58 L1853.92 1213.58 L1853.33 1213.58 L1852.74 1213.58 L1852.16 1213.58 L1851.57 1213.58 L1850.98 1213.58 L1850.4 1213.58 L1849.81 1213.58 L1849.22 1213.58 L1848.64 1213.58 L1848.05 1213.58 L1847.47 1213.58 L1846.88 1213.58 L1846.29 1213.58 L1845.71 1213.58 L1845.12 1213.58 L1844.53 1213.58 L1843.95 1213.58 L1843.36 1213.58 L1842.77 1213.58 L1842.19 1213.58 L1841.6 1213.58 L1841.01 1213.58 L1840.43 1213.58 L1839.84 1213.58 L1839.26 1213.58 L1838.67 1213.58 L1838.08 1213.58 L1837.5 1213.58 L1836.91 1213.58 L1836.32 1213.58 L1835.74 1213.58 L1835.15 1213.58 L1834.56 1213.58 L1833.98 1213.58 L1833.39 1213.58 L1832.81 1213.58 L1832.22 1213.58 L1831.63 1213.58 L1831.05 1213.58 L1830.46 1213.58 L1829.87 1213.58 L1829.29 1213.58 L1828.7 1213.58 L1828.11 1213.58 L1827.53 1213.58 L1826.94 1213.58 L1826.35 1213.58 L1825.77 1213.58 L1825.18 1213.58 L1824.6 1213.58 L1824.01 1213.58 L1823.42 1213.58 L1822.84 1213.58 L1822.25 1213.58 L1821.66 1213.58 L1821.08 1213.58 L1820.49 1213.58 L1819.9 1213.58 L1819.32 1213.58 L1818.73 1213.58 L1818.14 1213.58 L1817.56 1213.58 L1816.97 1213.58 L1816.39 1213.58 L1815.8 1213.58 L1815.21 1213.58 L1814.63 1213.58 L1814.04 1213.58 L1813.45 1213.58 L1812.87 1213.58 L1812.28 1213.58 L1811.69 1213.58 L1811.11 1213.58 L1810.52 1213.58 L1809.94 1213.58 L1809.35 1213.58 L1808.76 1213.58 L1808.18 1213.58 L1807.59 1213.58 L1807 1213.58 L1806.42 1213.58 L1805.83 1213.58 L1805.24 1213.58 L1804.66 1213.58 L1804.07 1213.58 L1803.48 1213.58 L1802.9 1213.58 L1802.31 1213.58 L1801.73 1213.58 L1801.14 1213.58 L1800.55 1213.58 L1799.97 1213.58 L1799.38 1213.58 L1798.79 1213.58 L1798.21 1213.58 L1797.62 1213.58 L1797.03 1213.58 L1796.45 1213.58 L1795.86 1213.58 L1795.27 1213.58 L1794.69 1213.58 L1794.1 1213.58 L1793.52 1213.58 L1792.93 1213.58 L1792.34 1213.58 L1791.76 1213.58 L1791.17 1213.58 L1790.58 1213.58 L1790 1213.58 L1789.41 1213.58 L1788.82 1213.58 L1788.24 1213.58 L1787.65 1213.58 L1787.06 1213.58 L1786.48 1213.58 L1785.89 1213.58 L1785.31 1213.58 L1784.72 1213.58 L1784.13 1213.58 L1783.55 1213.58 L1782.96 1213.58 L1782.37 1213.58 L1781.79 1213.58 L1781.2 1213.58 L1780.61 1213.58 L1780.03 1213.58 L1779.44 1213.58 L1778.86 1213.58 L1778.27 1213.58 L1777.68 1213.58 L1777.1 1213.58 L1776.51 1213.58 L1775.92 1213.58 L1775.34 1213.58 L1774.75 1213.58 L1774.16 1213.58 L1773.58 1213.58 L1772.99 1213.58 L1772.4 1213.58 L1771.82 1213.58 L1771.23 1213.58 L1770.65 1213.58 L1770.06 1213.58 L1769.47 1213.58 L1768.89 1213.58 L1768.3 1213.58 L1767.71 1213.58 L1767.13 1213.58 L1766.54 1213.58 L1765.95 1213.58 L1765.37 1213.58 L1764.78 1213.58 L1764.19 1213.58 L1763.61 1213.58 L1763.02 1213.58 L1762.44 1213.58 L1761.85 1213.58 L1761.26 1213.58 L1760.68 1213.58 L1760.09 1213.58 L1759.5 1213.58 L1758.92 1213.58 L1758.33 1213.58 L1757.74 1213.58 L1757.16 1213.58 L1756.57 1213.58 L1755.99 1213.58 L1755.4 1213.58 L1754.81 1213.58 L1754.23 1213.58 L1753.64 1213.58 L1753.05 1213.58 L1752.47 1213.58 L1751.88 1213.58 L1751.29 1213.58 L1750.71 1213.58 L1750.12 1213.58 L1749.53 1213.58 L1748.95 1213.58 L1748.36 1213.58 L1747.78 1213.58 L1747.19 1213.58 L1746.6 1213.58 L1746.02 1213.58 L1745.43 1213.58 L1744.84 1213.58 L1744.26 1213.58 L1743.67 1213.58 L1743.08 1213.58 L1742.5 1213.58 L1741.91 1213.58 L1741.32 1213.58 L1740.74 1213.58 L1740.15 1213.58 L1739.57 1213.58 L1738.98 1213.58 L1738.39 1213.58 L1737.81 1213.58 L1737.22 1213.58 L1736.63 1213.58 L1736.05 1213.58 L1735.46 1213.58 L1734.87 1213.58 L1734.29 1213.58 L1733.7 1213.58 L1733.11 1213.58 L1732.53 1213.58 L1731.94 1213.58 L1731.36 1213.58 L1730.77 1213.58 L1730.18 1213.58 L1729.6 1213.58 L1729.01 1213.58 L1728.42 1213.58 L1727.84 1213.58 L1727.25 1213.58 L1726.66 1213.58 L1726.08 1213.58 L1725.49 1213.58 L1724.91 1213.58 L1724.32 1213.58 L1723.73 1213.58 L1723.15 1213.58 L1722.56 1213.58 L1721.97 1213.58 L1721.39 1213.58 L1720.8 1213.58 L1720.21 1213.58 L1719.63 1213.58 L1719.04 1213.58 L1718.45 1213.58 L1717.87 1213.58 L1717.28 1213.58 L1716.7 1213.58 L1716.11 1213.58 L1715.52 1213.58 L1714.94 1213.58 L1714.35 1213.58 L1713.76 1213.58 L1713.18 1213.58 L1712.59 1213.58 L1712 1213.58 L1711.42 1213.58 L1710.83 1213.58 L1710.24 1213.58 L1709.66 1213.58 L1709.07 1213.58 L1708.49 1213.58 L1707.9 1213.58 L1707.31 1213.58 L1706.73 1213.58 L1706.14 1213.58 L1705.55 1213.58 L1704.97 1213.58 L1704.38 1213.58 L1703.79 1213.58 L1703.21 1213.58 L1702.62 1213.58 L1702.04 1213.58 L1701.45 1213.58 L1700.86 1213.58 L1700.28 1213.58 L1699.69 1213.58 L1699.1 1213.58 L1698.52 1213.58 L1697.93 1213.58 L1697.34 1213.58 L1696.76 1213.58 L1696.17 1213.58 L1695.58 1213.58 L1695 1213.58 L1694.41 1213.58 L1693.83 1213.58 L1693.24 1213.58 L1692.65 1213.58 L1692.07 1213.58 L1691.48 1213.58 L1690.89 1213.58 L1690.31 1213.58 L1689.72 1213.58 L1689.13 1213.58 L1688.55 1213.58 L1687.96 1213.58 L1687.37 1213.58 L1686.79 1213.58 L1686.2 1213.58 L1685.62 1213.58 L1685.03 1213.58 L1684.44 1213.58 L1683.86 1213.58 L1683.27 1213.58 L1682.68 1213.58 L1682.1 1213.58 L1681.51 1213.58 L1680.92 1213.58 L1680.34 1213.58 L1679.75 1213.58 L1679.17 1213.58 L1678.58 1213.58 L1677.99 1213.58 L1677.41 1213.58 L1676.82 1213.58 L1676.23 1213.58 L1675.65 1213.58 L1675.06 1213.58 L1674.47 1213.58 L1673.89 1213.58 L1673.3 1213.58 L1672.71 1213.58 L1672.13 1213.58 L1671.54 1213.58 L1670.96 1213.58 L1670.37 1213.58 L1669.78 1213.58 L1669.2 1213.58 L1668.61 1213.58 L1668.02 1213.58 L1667.44 1213.58 L1666.85 1213.58 L1666.26 1213.58 L1665.68 1213.58 L1665.09 1213.58 L1664.5 1213.58 L1663.92 1213.58 L1663.33 1213.58 L1662.75 1213.58 L1662.16 1213.58 L1661.57 1213.58 L1660.99 1213.58 L1660.4 1213.58 L1659.81 1213.58 L1659.23 1213.58 L1658.64 1213.58 L1658.05 1213.58 L1657.47 1213.58 L1656.88 1213.58 L1656.29 1213.58 L1655.71 1213.58 L1655.12 1213.58 L1654.54 1213.58 L1653.95 1213.58 L1653.36 1213.58 L1652.78 1213.58 L1652.19 1213.58 L1651.6 1213.58 L1651.02 1213.58 L1650.43 1213.58 L1649.84 1213.58 L1649.26 1213.58 L1648.67 1213.58 L1648.09 1213.58 L1647.5 1213.58 L1646.91 1213.58 L1646.33 1213.58 L1645.74 1213.58 L1645.15 1213.58 L1644.57 1213.58 L1643.98 1213.58 L1643.39 1213.58 L1642.81 1213.58 L1642.22 1213.58 L1641.63 1213.58 L1641.05 1213.58 L1640.46 1213.58 L1639.88 1213.58 L1639.29 1213.58 L1638.7 1213.58 L1638.12 1213.58 L1637.53 1213.58 L1636.94 1213.58 L1636.36 1213.58 L1635.77 1213.58 L1635.18 1213.58 L1634.6 1213.58 L1634.01 1213.58 L1633.42 1213.58 L1632.84 1213.58 L1632.25 1213.58 L1631.67 1213.58 L1631.08 1213.58 L1630.49 1213.58 L1629.91 1213.58 L1629.32 1213.58 L1628.73 1213.58 L1628.15 1213.58 L1627.56 1213.58 L1626.97 1213.58 L1626.39 1213.58 L1625.8 1213.58 L1625.22 1213.58 L1624.63 1213.58 L1624.04 1213.58 L1623.46 1213.58 L1622.87 1213.58 L1622.28 1213.58 L1621.7 1213.58 L1621.11 1213.58 L1620.52 1213.58 L1619.94 1213.58 L1619.35 1213.58 L1618.76 1213.58 L1618.18 1213.58 L1617.59 1213.58 L1617.01 1213.58 L1616.42 1213.58 L1615.83 1213.58 L1615.25 1213.58 L1614.66 1213.58 L1614.07 1213.58 L1613.49 1213.58 L1612.9 1213.58 L1612.31 1213.58 L1611.73 1213.58 L1611.14 1213.58 L1610.55 1213.58 L1609.97 1213.58 L1609.38 1213.58 L1608.8 1213.58 L1608.21 1213.58 L1607.62 1213.58 L1607.04 1213.58 L1606.45 1213.58 L1605.86 1213.58 L1605.28 1213.58 L1604.69 1213.58 L1604.1 1213.58 L1603.52 1213.58 L1602.93 1213.58 L1602.34 1213.58 L1601.76 1213.58 L1601.17 1213.58 L1600.59 1213.58 L1600 1213.58 L1599.41 1213.58 L1598.83 1213.58 L1598.24 1213.58 L1597.65 1213.58 L1597.07 1213.58 L1596.48 1213.58 L1595.89 1213.58 L1595.31 1213.58 L1594.72 1213.58 L1594.14 1213.58 L1593.55 1213.58 L1592.96 1213.58 L1592.38 1213.58 L1591.79 1213.58 L1591.2 1213.58 L1590.62 1213.58 L1590.03 1213.58 L1589.44 1213.58 L1588.86 1213.58 L1588.27 1213.58 L1587.68 1213.58 L1587.1 1213.58 L1586.51 1213.58 L1585.93 1213.58 L1585.34 1213.58 L1584.75 1213.58 L1584.17 1213.58 L1583.58 1213.58 L1582.99 1213.58 L1582.41 1213.58 L1581.82 1213.58 L1581.23 1213.58 L1580.65 1213.58 L1580.06 1213.58 L1579.47 1213.58 L1578.89 1213.58 L1578.3 1213.58 L1577.72 1213.58 L1577.13 1213.58 L1576.54 1213.58 L1575.96 1213.58 L1575.37 1213.58 L1574.78 1213.58 L1574.2 1213.58 L1573.61 1213.58 L1573.02 1213.58 L1572.44 1213.58 L1571.85 1213.58 L1571.27 1213.58 L1570.68 1213.58 L1570.09 1213.58 L1569.51 1213.58 L1568.92 1213.58 L1568.33 1213.58 L1567.75 1213.58 L1567.16 1213.58 L1566.57 1213.58 L1565.99 1213.58 L1565.4 1213.58 L1564.81 1213.58 L1564.23 1213.58 L1563.64 1213.58 L1563.06 1213.58 L1562.47 1213.58 L1561.88 1213.58 L1561.3 1213.58 L1560.71 1213.58 L1560.12 1213.58 L1559.54 1213.58 L1558.95 1213.58 L1558.36 1213.58 L1557.78 1213.58 L1557.19 1213.58 L1556.6 1213.58 L1556.02 1213.58 L1555.43 1213.58 L1554.85 1213.58 L1554.26 1213.58 L1553.67 1213.58 L1553.09 1213.58 L1552.5 1213.58 L1551.91 1213.58 L1551.33 1213.58 L1550.74 1213.58 L1550.15 1213.58 L1549.57 1213.58 L1548.98 1213.58 L1548.4 1213.58 L1547.81 1213.58 L1547.22 1213.58 L1546.64 1213.58 L1546.05 1213.58 L1545.46 1213.58 L1544.88 1213.58 L1544.29 1213.58 L1543.7 1213.58 L1543.12 1213.58 L1542.53 1213.58 L1541.94 1213.58 L1541.36 1213.58 L1540.77 1213.58 L1540.19 1213.58 L1539.6 1213.58 L1539.01 1213.58 L1538.43 1213.58 L1537.84 1213.58 L1537.25 1213.58 L1536.67 1213.58 L1536.08 1213.58 L1535.49 1213.58 L1534.91 1213.58 L1534.32 1213.58 L1533.73 1213.58 L1533.15 1213.58 L1532.56 1213.58 L1531.98 1213.58 L1531.39 1213.58 L1530.8 1213.58 L1530.22 1213.58 L1529.63 1213.58 L1529.04 1213.58 L1528.46 1213.58 L1527.87 1213.58 L1527.28 1213.58 L1526.7 1213.58 L1526.11 1213.58 L1525.52 1213.58 L1524.94 1213.58 L1524.35 1213.58 L1523.77 1213.58 L1523.18 1213.58 L1522.59 1213.58 L1522.01 1213.58 L1521.42 1213.58 L1520.83 1213.58 L1520.25 1213.58 L1519.66 1213.58 L1519.07 1213.58 L1518.49 1213.58 L1517.9 1213.58 L1517.32 1213.58 L1516.73 1213.58 L1516.14 1213.58 L1515.56 1213.58 L1514.97 1213.58 L1514.38 1213.58 L1513.8 1213.58 L1513.21 1213.58 L1512.62 1213.58 L1512.04 1213.58 L1511.45 1213.58 L1510.86 1213.58 L1510.28 1213.58 L1509.69 1213.58 L1509.11 1213.58 L1508.52 1213.58 L1507.93 1213.58 L1507.35 1213.58 L1506.76 1213.58 L1506.17 1213.58 L1505.59 1213.58 L1505 1213.58 L1504.41 1213.58 L1503.83 1213.58 L1503.24 1213.58 L1502.65 1213.58 L1502.07 1213.58 L1501.48 1213.58 L1500.9 1213.58 L1500.31 1213.58 L1499.72 1213.58 L1499.14 1213.58 L1498.55 1213.58 L1497.96 1213.58 L1497.38 1213.58 L1496.79 1213.58 L1496.2 1213.58 L1495.62 1213.58 L1495.03 1213.58 L1494.45 1213.58 L1493.86 1213.58 L1493.27 1213.58 L1492.69 1213.58 L1492.1 1213.58 L1491.51 1213.58 L1490.93 1213.58 L1490.34 1213.58 L1489.75 1213.58 L1489.17 1213.58 L1488.58 1213.58 L1487.99 1213.58 L1487.41 1213.58 L1486.82 1213.58 L1486.24 1213.58 L1485.65 1213.58 L1485.06 1213.58 L1484.48 1213.58 L1483.89 1213.58 L1483.3 1213.58 L1482.72 1213.58 L1482.13 1213.58 L1481.54 1213.58 L1480.96 1213.58 L1480.37 1213.58 L1479.78 1213.58 L1479.2 1213.58 L1478.61 1213.58 L1478.03 1213.58 L1477.44 1213.58 L1476.85 1213.58 L1476.27 1213.58 L1475.68 1213.58 L1475.09 1213.58 L1474.51 1213.58 L1473.92 1213.58 L1473.33 1213.58 L1472.75 1213.58 L1472.16 1213.58 L1471.57 1213.58 L1470.99 1213.58 L1470.4 1213.58 L1469.82 1213.58 L1469.23 1213.58 L1468.64 1213.58 L1468.06 1213.58 L1467.47 1213.58 L1466.88 1213.58 L1466.3 1213.58 L1465.71 1213.58 L1465.12 1213.58 L1464.54 1213.58 L1463.95 1213.58 L1463.37 1213.58 L1462.78 1213.58 L1462.19 1213.58 L1461.61 1213.58 L1461.02 1213.58 L1460.43 1213.58 L1459.85 1213.58 L1459.26 1213.58 L1458.67 1213.58 L1458.09 1213.58 L1457.5 1213.58 L1456.91 1213.58 L1456.33 1213.58 L1455.74 1213.58 L1455.16 1213.58 L1454.57 1213.58 L1453.98 1213.58 L1453.4 1213.58 L1452.81 1213.58 L1452.22 1213.58 L1451.64 1213.58 L1451.05 1213.58 L1450.46 1213.58 L1449.88 1213.58 L1449.29 1213.58 L1448.7 1213.58 L1448.12 1213.58 L1447.53 1213.58 L1446.95 1213.58 L1446.36 1213.58 L1445.77 1213.58 L1445.19 1213.58 L1444.6 1213.58 L1444.01 1213.58 L1443.43 1213.58 L1442.84 1213.58 L1442.25 1213.58 L1441.67 1213.58 L1441.08 1213.58 L1440.5 1213.58 L1439.91 1213.58 L1439.32 1213.58 L1438.74 1213.58 L1438.15 1213.58 L1437.56 1213.58 L1436.98 1213.58 L1436.39 1213.58 L1435.8 1213.58 L1435.22 1213.58 L1434.63 1213.58 L1434.04 1213.58 L1433.46 1213.58 L1432.87 1213.58 L1432.29 1213.58 L1431.7 1213.58 L1431.11 1213.58 L1430.53 1213.58 L1429.94 1213.58 L1429.35 1213.58 L1428.77 1213.58 L1428.18 1213.58 L1427.59 1213.58 L1427.01 1213.58 L1426.42 1213.58 L1425.83 1213.58 L1425.25 1213.58 L1424.66 1213.58 L1424.08 1213.58 L1423.49 1213.58 L1422.9 1213.58 L1422.32 1213.58 L1421.73 1213.58 L1421.14 1213.58 L1420.56 1213.58 L1419.97 1213.58 L1419.38 1213.58 L1418.8 1213.58 L1418.21 1213.58 L1417.63 1213.58 L1417.04 1213.58 L1416.45 1213.58 L1415.87 1213.58 L1415.28 1213.58 L1414.69 1213.58 L1414.11 1213.58 L1413.52 1213.58 L1412.93 1213.58 L1412.35 1213.58 L1411.76 1213.58 L1411.17 1213.58 L1410.59 1213.58 L1410 1213.58 L1409.42 1213.58 L1408.83 1213.58 L1408.24 1213.58 L1407.66 1213.58 L1407.07 1213.58 L1406.48 1213.58 L1405.9 1213.58 L1405.31 1213.58 L1404.72 1213.58 L1404.14 1213.58 L1403.55 1213.58 L1402.96 1213.58 L1402.38 1213.58 L1401.79 1213.58 L1401.21 1213.58 L1400.62 1213.58 L1400.03 1213.58 L1399.45 1213.58 L1398.86 1213.58 L1398.27 1213.58 L1397.69 1213.58 L1397.1 1213.58 L1396.51 1213.58 L1395.93 1213.58 L1395.34 1213.58 L1394.75 1213.58 L1394.17 1213.58 L1393.58 1213.58 L1393 1213.58 L1392.41 1213.58 L1391.82 1213.58 L1391.24 1213.58 L1390.65 1213.58 L1390.06 1213.58 L1389.48 1213.58 L1388.89 1213.58 L1388.3 1213.58 L1387.72 1213.58 L1387.13 1213.58 L1386.55 1213.58 L1385.96 1213.58 L1385.37 1213.58 L1384.79 1213.58 L1384.2 1213.58 L1383.61 1213.58 L1383.03 1213.58 L1382.44 1213.58 L1381.85 1213.58 L1381.27 1213.58 L1380.68 1213.58 L1380.09 1213.58 L1379.51 1213.58 L1378.92 1213.58 L1378.34 1213.58 L1377.75 1213.58 L1377.16 1213.58 L1376.58 1213.58 L1375.99 1213.58 L1375.4 1213.58 L1374.82 1213.58 L1374.23 1213.58 L1373.64 1213.58 L1373.06 1213.58 L1372.47 1213.58 L1371.88 1213.58 L1371.3 1213.58 L1370.71 1213.58 L1370.13 1213.58 L1369.54 1213.58 L1368.95 1213.58 L1368.37 1213.58 L1367.78 1213.58 L1367.19 1213.58 L1366.61 1213.58 L1366.02 1213.58 L1365.43 1213.58 L1364.85 1213.58 L1364.26 1213.58 L1363.68 1213.58 L1363.09 1213.58 L1362.5 1213.58 L1361.92 1213.58 L1361.33 1213.58 L1360.74 1213.58 L1360.16 1213.58 L1359.57 1213.58 L1358.98 1213.58 L1358.4 1213.58 L1357.81 1213.58 L1357.22 1213.58 L1356.64 1213.58 L1356.05 1213.58 L1355.47 1213.58 L1354.88 1213.58 L1354.29 1213.58 L1353.71 1213.58 L1353.12 1213.58 L1352.53 1213.58 L1351.95 1213.58 L1351.36 1213.58 L1350.77 1213.58 L1350.19 1213.58 L1349.6 1213.58 L1349.01 1213.58 L1348.43 1213.58 L1347.84 1213.58 L1347.26 1213.58 L1346.67 1213.58 L1346.08 1213.58 L1345.5 1213.58 L1344.91 1213.58 L1344.32 1213.58 L1343.74 1213.58 L1343.15 1213.58 L1342.56 1213.58 L1341.98 1213.58 L1341.39 1213.58 L1340.8 1213.58 L1340.22 1213.58 L1339.63 1213.58 L1339.05 1213.58 L1338.46 1213.58 L1337.87 1213.58 L1337.29 1213.58 L1336.7 1213.58 L1336.11 1213.58 L1335.53 1213.58 L1334.94 1213.58 L1334.35 1213.58 L1333.77 1213.58 L1333.18 1213.58 L1332.6 1213.58 L1332.01 1213.58 L1331.42 1213.58 L1330.84 1213.58 L1330.25 1213.58 L1329.66 1213.58 L1329.08 1213.58 L1328.49 1213.58 L1327.9 1213.58 L1327.32 1213.58 L1326.73 1213.58 L1326.14 1213.58 L1325.56 1213.58 L1324.97 1213.58 L1324.39 1213.58 L1323.8 1213.58 L1323.21 1213.58 L1322.63 1213.58 L1322.04 1213.58 L1321.45 1213.58 L1320.87 1213.58 L1320.28 1213.58 L1319.69 1213.58 L1319.11 1213.58 L1318.52 1213.58 L1317.93 1213.58 L1317.35 1213.58 L1316.76 1213.58 L1316.18 1213.58 L1315.59 1213.58 L1315 1213.58 L1314.42 1213.58 L1313.83 1213.58 L1313.24 1213.58 L1312.66 1213.58 L1312.07 1213.58 L1311.48 1213.58 L1310.9 1213.58 L1310.31 1213.58 L1309.73 1213.58 L1309.14 1213.58 L1308.55 1213.58 L1307.97 1213.58 L1307.38 1213.58 L1306.79 1213.58 L1306.21 1213.58 L1305.62 1213.58 L1305.03 1213.58 L1304.45 1213.58 L1303.86 1213.58 L1303.27 1213.58 L1302.69 1213.58 L1302.1 1213.58 L1301.52 1213.58 L1300.93 1213.58 L1300.34 1213.58 L1299.76 1213.58 L1299.17 1213.58 L1298.58 1213.58 L1298 1213.58 L1297.41 1213.58 L1296.82 1213.58 L1296.24 1213.58 L1295.65 1213.58 L1295.06 1213.58 L1294.48 1213.58 L1293.89 1213.58 L1293.31 1213.58 L1292.72 1213.58 L1292.13 1213.58 L1291.55 1213.58 L1290.96 1213.58 L1290.37 1213.58 L1289.79 1213.58 L1289.2 1213.58 L1288.61 1213.58 L1288.03 1213.58 L1287.44 1213.58 L1286.86 1213.58 L1286.27 1213.58 L1285.68 1213.58 L1285.1 1213.58 L1284.51 1213.58 L1283.92 1213.58 L1283.34 1213.58 L1282.75 1213.58 L1282.16 1213.58 L1281.58 1213.58 L1280.99 1213.58 L1280.4 1213.58 L1279.82 1213.58 L1279.23 1213.58 L1278.65 1213.58 L1278.06 1213.58 L1277.47 1213.58 L1276.89 1213.58 L1276.3 1213.58 L1275.71 1213.58 L1275.13 1213.58 L1274.54 1213.58 L1273.95 1213.58 L1273.37 1213.58 L1272.78 1213.58 L1272.19 1213.58 L1271.61 1213.58 L1271.02 1213.58 L1270.44 1213.58 L1269.85 1213.58 L1269.26 1213.58 L1268.68 1213.58 L1268.09 1213.58 L1267.5 1213.58 L1266.92 1213.58 L1266.33 1213.58 L1265.74 1213.58 L1265.16 1213.58 L1264.57 1213.58 L1263.98 1213.58 L1263.4 1213.58 L1262.81 1213.58 L1262.23 1213.58 L1261.64 1213.58 L1261.05 1213.58 L1260.47 1213.58 L1259.88 1213.58 L1259.29 1213.58 L1258.71 1213.58 L1258.12 1213.58 L1257.53 1213.58 L1256.95 1213.58 L1256.36 1213.58 L1255.78 1213.58 L1255.19 1213.58 L1254.6 1213.58 L1254.02 1213.58 L1253.43 1213.58 L1252.84 1213.58 L1252.26 1213.58 L1251.67 1213.58 L1251.08 1213.58 L1250.5 1213.58 L1249.91 1213.58 L1249.32 1213.58 L1248.74 1213.58 L1248.15 1213.58 L1247.57 1213.58 L1246.98 1213.58 L1246.39 1213.58 L1245.81 1213.58 L1245.22 1213.58 L1244.63 1213.58 L1244.05 1213.58 L1243.46 1213.58 L1242.87 1213.58 L1242.29 1213.58 L1241.7 1213.58 L1241.11 1213.58 L1240.53 1213.58 L1239.94 1213.58 L1239.36 1213.58 L1238.77 1213.58 L1238.18 1213.58 L1237.6 1213.58 L1237.01 1213.58 L1236.42 1213.58 L1235.84 1213.58 L1235.25 1213.58 L1234.66 1213.58 L1234.08 1213.58 L1233.49 1213.58 L1232.91 1213.58 L1232.32 1213.58 L1231.73 1213.58 L1231.15 1213.58 L1230.56 1213.58 L1229.97 1213.58 L1229.39 1213.58 L1228.8 1213.58 L1228.21 1213.58 L1227.63 1213.58 L1227.04 1213.58 L1226.45 1213.58 L1225.87 1213.58 L1225.28 1213.58 L1224.7 1213.58 L1224.11 1213.58 L1223.52 1213.58 L1222.94 1213.58 L1222.35 1213.58 L1221.76 1213.58 L1221.18 1213.58 L1220.59 1213.58 L1220 1213.58 L1219.42 1213.58 L1218.83 1213.58 L1218.24 1213.58 L1217.66 1213.58 L1217.07 1213.58 L1216.49 1213.58 L1215.9 1213.58 L1215.31 1213.58 L1214.73 1213.58 L1214.14 1213.58 L1213.55 1213.58 L1212.97 1213.58 L1212.38 1213.58 L1211.79 1213.58 L1211.21 1213.58 L1210.62 1213.58 L1210.03 1213.58 L1209.45 1213.58 L1208.86 1213.58 L1208.28 1213.58 L1207.69 1213.58 L1207.1 1213.58 L1206.52 1213.58 L1205.93 1213.58 L1205.34 1213.58 L1204.76 1213.58 L1204.17 1213.58 L1203.58 1213.58 L1203 1213.58 L1202.41 1213.58 L1201.83 1213.58 L1201.24 1213.58 L1200.65 1213.58 L1200.07 1213.58 L1199.48 1213.58 L1198.89 1213.58 L1198.31 1213.58 L1197.72 1213.58 L1197.13 1213.58 L1196.55 1213.58 L1195.96 1213.58 L1195.37 1213.58 L1194.79 1213.58 L1194.2 1213.58 L1193.62 1213.58 L1193.03 1213.58 L1192.44 1213.58 L1191.86 1213.58 L1191.27 1213.58 L1190.68 1213.58 L1190.1 1213.58 L1189.51 1213.58 L1188.92 1213.58 L1188.34 1213.58 L1187.75 1213.58 L1187.16 1213.58 L1186.58 1213.58 L1185.99 1213.58 L1185.41 1213.58 L1184.82 1213.58 L1184.23 1213.58 L1183.65 1213.58 L1183.06 1213.58 L1182.47 1213.58 L1181.89 1213.58 L1181.3 1213.58 L1180.71 1213.58 L1180.13 1213.58 L1179.54 1213.58 L1178.96 1213.58 L1178.37 1213.58 L1177.78 1213.58 L1177.2 1213.58 L1176.61 1213.58 L1176.02 1213.58 L1175.44 1213.58 L1174.85 1213.58 L1174.26 1213.58 L1173.68 1213.58 L1173.09 1213.58 L1172.5 1213.58 L1171.92 1213.58 L1171.33 1213.58 L1170.75 1213.58 L1170.16 1213.58 L1169.57 1213.58 L1168.99 1213.58 L1168.4 1213.58 L1167.81 1213.58 L1167.23 1213.58 L1166.64 1213.58 L1166.05 1213.58 L1165.47 1213.58 L1164.88 1213.58 L1164.29 1213.58 L1163.71 1213.58 L1163.12 1213.58 L1162.54 1213.58 L1161.95 1213.58 L1161.36 1213.58 L1160.78 1213.58 L1160.19 1213.58 L1159.6 1213.58 L1159.02 1213.58 L1158.43 1213.58 L1157.84 1213.58 L1157.26 1213.58 L1156.67 1213.58 L1156.09 1213.58 L1155.5 1213.58 L1154.91 1213.58 L1154.33 1213.58 L1153.74 1213.58 L1153.15 1213.58 L1152.57 1213.58 L1151.98 1213.58 L1151.39 1213.58 L1150.81 1213.58 L1150.22 1213.58 L1149.63 1213.58 L1149.05 1213.58 L1148.46 1213.58 L1147.88 1213.58 L1147.29 1213.58 L1146.7 1213.58 L1146.12 1213.58 L1145.53 1213.58 L1144.94 1213.58 L1144.36 1213.58 L1143.77 1213.58 L1143.18 1213.58 L1142.6 1213.58 L1142.01 1213.58 L1141.42 1213.58 L1140.84 1213.58 L1140.25 1213.58 L1139.67 1213.58 L1139.08 1213.58 L1138.49 1213.58 L1137.91 1213.58 L1137.32 1213.58 L1136.73 1213.58 L1136.15 1213.58 L1135.56 1213.58 L1134.97 1213.58 L1134.39 1213.58 L1133.8 1213.58 L1133.21 1213.58 L1132.63 1213.58 L1132.04 1213.58 L1131.46 1213.58 L1130.87 1213.58 L1130.28 1213.58 L1129.7 1213.58 L1129.11 1213.58 L1128.52 1213.58 L1127.94 1213.58 L1127.35 1213.58 L1126.76 1213.58 L1126.18 1213.58 L1125.59 1213.58 L1125.01 1213.58 L1124.42 1213.58 L1123.83 1213.58 L1123.25 1213.58 L1122.66 1213.58 L1122.07 1213.58 L1121.49 1213.58 L1120.9 1213.58 L1120.31 1213.58 L1119.73 1213.58 L1119.14 1213.58 L1118.55 1213.58 L1117.97 1213.58 L1117.38 1213.58 L1116.8 1213.58 L1116.21 1213.58 L1115.62 1213.58 L1115.04 1213.58 L1114.45 1213.58 L1113.86 1213.58 L1113.28 1213.58 L1112.69 1213.58 L1112.1 1213.58 L1111.52 1213.58 L1110.93 1213.58 L1110.34 1213.58 L1109.76 1213.58 L1109.17 1213.58 L1108.59 1213.58 L1108 1213.58 L1107.41 1213.58 L1106.83 1213.58 L1106.24 1213.58 L1105.65 1213.58 L1105.07 1213.58 L1104.48 1213.58 L1103.89 1213.58 L1103.31 1213.58 L1102.72 1213.58 L1102.14 1213.58 L1101.55 1213.58 L1100.96 1213.58 L1100.38 1213.58 L1099.79 1213.58 L1099.2 1213.58 L1098.62 1213.58 L1098.03 1213.58 L1097.44 1213.58 L1096.86 1213.58 L1096.27 1213.58 L1095.68 1213.58 L1095.1 1213.58 L1094.51 1213.58 L1093.93 1213.58 L1093.34 1213.58 L1092.75 1213.58 L1092.17 1213.58 L1091.58 1213.58 L1090.99 1213.58 L1090.41 1213.58 L1089.82 1213.58 L1089.23 1213.58 L1088.65 1213.58 L1088.06 1213.58 L1087.47 1213.58 L1086.89 1213.58 L1086.3 1213.58 L1085.72 1213.58 L1085.13 1213.58 L1084.54 1213.58 L1083.96 1213.58 L1083.37 1213.58 L1082.78 1213.58 L1082.2 1213.58 L1081.61 1213.58 L1081.02 1213.58 L1080.44 1213.58 L1079.85 1213.58 L1079.26 1213.58 L1078.68 1213.58 L1078.09 1213.58 L1077.51 1213.58 L1076.92 1213.58 L1076.33 1213.58 L1075.75 1213.58 L1075.16 1213.58 L1074.57 1213.58 L1073.99 1213.58 L1073.4 1213.58 L1072.81 1213.58 L1072.23 1213.58 L1071.64 1213.58 L1071.06 1213.58 L1070.47 1213.58 L1069.88 1213.58 L1069.3 1213.58 L1068.71 1213.58 L1068.12 1213.58 L1067.54 1213.58 L1066.95 1213.58 L1066.36 1213.58 L1065.78 1213.58 L1065.19 1213.58 L1064.6 1213.58 L1064.02 1213.58 L1063.43 1213.58 L1062.85 1213.58 L1062.26 1213.58 L1061.67 1213.58 L1061.09 1213.58 L1060.5 1213.58 L1059.91 1213.58 L1059.33 1213.58 L1058.74 1213.58 L1058.15 1213.58 L1057.57 1213.58 L1056.98 1213.58 L1056.39 1213.58 L1055.81 1213.58 L1055.22 1213.58 L1054.64 1213.58 L1054.05 1213.58 L1053.46 1213.58 L1052.88 1213.58 L1052.29 1213.58 L1051.7 1213.58 L1051.12 1213.58 L1050.53 1213.58 L1049.94 1213.58 L1049.36 1213.58 L1048.77 1213.58 L1048.19 1213.58 L1047.6 1213.58 L1047.01 1213.58 L1046.43 1213.58 L1045.84 1213.58 L1045.25 1213.58 L1044.67 1213.58 L1044.08 1213.58 L1043.49 1213.58 L1042.91 1213.58 L1042.32 1213.58 L1041.73 1213.58 L1041.15 1213.58 L1040.56 1213.58 L1039.98 1213.58 L1039.39 1213.58 L1038.8 1213.58 L1038.22 1213.58 L1037.63 1213.58 L1037.04 1213.58 L1036.46 1213.58 L1035.87 1213.58 L1035.28 1213.58 L1034.7 1213.58 L1034.11 1213.58 L1033.52 1213.58 L1032.94 1213.58 L1032.35 1213.58 L1031.77 1213.58 L1031.18 1213.58 L1030.59 1213.58 L1030.01 1213.58 L1029.42 1213.58 L1028.83 1213.58 L1028.25 1213.58 L1027.66 1213.58 L1027.07 1213.58 L1026.49 1213.58 L1025.9 1213.58 L1025.32 1213.58 L1024.73 1213.58 L1024.14 1213.58 L1023.56 1213.58 L1022.97 1213.58 L1022.38 1213.58 L1021.8 1213.58 L1021.21 1213.58 L1020.62 1213.58 L1020.04 1213.58 L1019.45 1213.58 L1018.86 1213.58 L1018.28 1213.58 L1017.69 1213.58 L1017.11 1213.58 L1016.52 1213.58 L1015.93 1213.58 L1015.35 1213.58 L1014.76 1213.58 L1014.17 1213.58 L1013.59 1213.58 L1013 1213.58 L1012.41 1213.58 L1011.83 1213.58 L1011.24 1213.58 L1010.65 1213.58 L1010.07 1213.58 L1009.48 1213.58 L1008.9 1213.58 L1008.31 1213.58 L1007.72 1213.58 L1007.14 1213.58 L1006.55 1213.58 L1005.96 1213.58 L1005.38 1213.58 L1004.79 1213.58 L1004.2 1213.58 L1003.62 1213.58 L1003.03 1213.58 L1002.44 1213.58 L1001.86 1213.58 L1001.27 1213.58 L1000.69 1213.58 L1000.1 1213.58 L999.513 1213.58 L998.926 1213.58 L998.34 1213.58 L997.754 1213.58 L997.167 1213.58 L996.581 1213.58 L995.994 1213.58 L995.408 1213.58 L994.822 1213.58 L994.235 1213.58 L993.649 1213.58 L993.062 1213.58 L992.476 1213.58 L991.889 1213.58 L991.303 1213.58 L990.717 1213.58 L990.13 1213.58 L989.544 1213.58 L988.957 1213.58 L988.371 1213.58 L987.785 1213.58 L987.198 1213.58 L986.612 1213.58 L986.025 1213.58  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.65 986.612,1213.65 987.198,1213.65 987.785,1213.65 988.371,1213.65 988.957,1213.65 989.544,1213.65 990.13,1213.65 990.717,1213.65 991.303,1213.65 991.889,1213.65 992.476,1213.65 993.062,1213.65 993.649,1213.65 994.235,1213.65 994.822,1213.65 995.408,1213.65 995.994,1213.65 996.581,1213.65 997.167,1213.65 997.754,1213.65 998.34,1213.65 998.926,1213.65 999.513,1213.65 1000.1,1213.65 1000.69,1213.65 1001.27,1213.65 1001.86,1213.65 1002.44,1213.65 1003.03,1213.65 1003.62,1213.65 1004.2,1213.65 1004.79,1213.65 1005.38,1213.65 1005.96,1213.65 1006.55,1213.65 1007.14,1213.65 1007.72,1213.65 1008.31,1213.65 1008.9,1213.65 1009.48,1213.65 1010.07,1213.65 1010.65,1213.65 1011.24,1213.65 1011.83,1213.65 1012.41,1213.65 1013,1213.65 1013.59,1213.65 1014.17,1213.65 1014.76,1213.65 1015.35,1213.65 1015.93,1213.65 1016.52,1213.65 1017.11,1213.65 1017.69,1213.65 1018.28,1213.65 1018.86,1213.65 1019.45,1213.65 1020.04,1213.65 1020.62,1213.65 1021.21,1213.65 1021.8,1213.65 1022.38,1213.65 1022.97,1213.65 1023.56,1213.65 1024.14,1213.65 1024.73,1213.65 1025.32,1213.65 1025.9,1213.65 1026.49,1213.65 1027.07,1213.65 1027.66,1213.65 1028.25,1213.65 1028.83,1213.65 1029.42,1213.65 1030.01,1213.65 1030.59,1213.65 1031.18,1213.65 1031.77,1213.65 1032.35,1213.65 1032.94,1213.65 1033.52,1213.65 1034.11,1213.65 1034.7,1213.65 1035.28,1213.65 1035.87,1213.65 1036.46,1213.65 1037.04,1213.65 1037.63,1213.65 1038.22,1213.65 1038.8,1213.65 1039.39,1213.65 1039.98,1213.65 1040.56,1213.65 1041.15,1213.65 1041.73,1213.65 1042.32,1213.65 1042.91,1213.65 1043.49,1213.65 1044.08,1213.65 1044.67,1213.65 1045.25,1213.65 1045.84,1213.65 1046.43,1213.65 1047.01,1213.65 1047.6,1213.65 1048.19,1213.65 1048.77,1213.65 1049.36,1213.65 1049.94,1213.65 1050.53,1213.65 1051.12,1213.65 1051.7,1213.65 1052.29,1213.65 1052.88,1213.65 1053.46,1213.65 1054.05,1213.65 1054.64,1213.65 1055.22,1213.65 1055.81,1213.65 1056.39,1213.65 1056.98,1213.65 1057.57,1213.65 1058.15,1213.65 1058.74,1213.65 1059.33,1213.65 1059.91,1213.65 1060.5,1213.65 1061.09,1213.65 1061.67,1213.65 1062.26,1213.65 1062.85,1213.65 1063.43,1213.65 1064.02,1213.65 1064.6,1213.65 1065.19,1213.65 1065.78,1213.65 1066.36,1213.65 1066.95,1213.65 1067.54,1213.65 1068.12,1213.65 1068.71,1213.65 1069.3,1213.65 1069.88,1213.65 1070.47,1213.65 1071.06,1213.65 1071.64,1213.65 1072.23,1213.65 1072.81,1213.65 1073.4,1213.65 1073.99,1213.65 1074.57,1213.65 1075.16,1213.65 1075.75,1213.65 1076.33,1213.65 1076.92,1213.65 1077.51,1213.65 1078.09,1213.65 1078.68,1213.65 1079.26,1213.65 1079.85,1213.65 1080.44,1213.65 1081.02,1213.65 1081.61,1213.65 1082.2,1213.65 1082.78,1213.65 1083.37,1213.65 1083.96,1213.65 1084.54,1213.65 1085.13,1213.65 1085.72,1213.65 1086.3,1213.65 1086.89,1213.65 1087.47,1213.65 1088.06,1213.65 1088.65,1213.65 1089.23,1213.65 1089.82,1213.65 1090.41,1213.65 1090.99,1213.65 1091.58,1213.65 1092.17,1213.65 1092.75,1213.65 1093.34,1213.65 1093.93,1213.65 1094.51,1213.65 1095.1,1213.65 1095.68,1213.65 1096.27,1213.65 1096.86,1213.65 1097.44,1213.65 1098.03,1213.65 1098.62,1213.65 1099.2,1213.65 1099.79,1213.65 1100.38,1213.65 1100.96,1213.65 1101.55,1213.65 1102.14,1213.65 1102.72,1213.65 1103.31,1213.65 1103.89,1213.65 1104.48,1213.65 1105.07,1213.65 1105.65,1213.65 1106.24,1213.65 1106.83,1213.65 1107.41,1213.65 1108,1213.65 1108.59,1213.65 1109.17,1213.65 1109.76,1213.65 1110.34,1213.65 1110.93,1213.65 1111.52,1213.65 1112.1,1213.65 1112.69,1213.65 1113.28,1213.65 1113.86,1213.65 1114.45,1213.65 1115.04,1213.65 1115.62,1213.65 1116.21,1213.65 1116.8,1213.65 1117.38,1213.65 1117.97,1213.65 1118.55,1213.65 1119.14,1213.65 1119.73,1213.65 1120.31,1213.65 1120.9,1213.65 1121.49,1213.65 1122.07,1213.65 1122.66,1213.65 1123.25,1213.65 1123.83,1213.65 1124.42,1213.65 1125.01,1213.65 1125.59,1213.65 1126.18,1213.65 1126.76,1213.65 1127.35,1213.65 1127.94,1213.65 1128.52,1213.65 1129.11,1213.65 1129.7,1213.65 1130.28,1213.65 1130.87,1213.65 1131.46,1213.65 1132.04,1213.65 1132.63,1213.65 1133.21,1213.65 1133.8,1213.65 1134.39,1213.65 1134.97,1213.65 1135.56,1213.65 1136.15,1213.65 1136.73,1213.65 1137.32,1213.65 1137.91,1213.65 1138.49,1213.65 1139.08,1213.65 1139.67,1213.65 1140.25,1213.65 1140.84,1213.65 1141.42,1213.65 1142.01,1213.65 1142.6,1213.65 1143.18,1213.65 1143.77,1213.65 1144.36,1213.65 1144.94,1213.65 1145.53,1213.65 1146.12,1213.65 1146.7,1213.65 1147.29,1213.65 1147.88,1213.65 1148.46,1213.65 1149.05,1213.65 1149.63,1213.65 1150.22,1213.65 1150.81,1213.65 1151.39,1213.65 1151.98,1213.65 1152.57,1213.65 1153.15,1213.65 1153.74,1213.65 1154.33,1213.65 1154.91,1213.65 1155.5,1213.65 1156.09,1213.65 1156.67,1213.65 1157.26,1213.65 1157.84,1213.65 1158.43,1213.65 1159.02,1213.65 1159.6,1213.65 1160.19,1213.65 1160.78,1213.65 1161.36,1213.65 1161.95,1213.65 1162.54,1213.65 1163.12,1213.65 1163.71,1213.65 1164.29,1213.65 1164.88,1213.65 1165.47,1213.65 1166.05,1213.65 1166.64,1213.65 1167.23,1213.65 1167.81,1213.65 1168.4,1213.65 1168.99,1213.65 1169.57,1213.65 1170.16,1213.65 1170.75,1213.65 1171.33,1213.65 1171.92,1213.65 1172.5,1213.65 1173.09,1213.65 1173.68,1213.65 1174.26,1213.65 1174.85,1213.65 1175.44,1213.65 1176.02,1213.65 1176.61,1213.65 1177.2,1213.65 1177.78,1213.65 1178.37,1213.65 1178.96,1213.65 1179.54,1213.65 1180.13,1213.65 1180.71,1213.65 1181.3,1213.65 1181.89,1213.65 1182.47,1213.65 1183.06,1213.65 1183.65,1213.65 1184.23,1213.65 1184.82,1213.65 1185.41,1213.65 1185.99,1213.65 1186.58,1213.65 1187.16,1213.65 1187.75,1213.65 1188.34,1213.65 1188.92,1213.65 1189.51,1213.65 1190.1,1213.65 1190.68,1213.65 1191.27,1213.65 1191.86,1213.65 1192.44,1213.65 1193.03,1213.65 1193.62,1213.65 1194.2,1213.65 1194.79,1213.65 1195.37,1213.65 1195.96,1213.65 1196.55,1213.65 1197.13,1213.65 1197.72,1213.65 1198.31,1213.65 1198.89,1213.65 1199.48,1213.65 1200.07,1213.65 1200.65,1213.65 1201.24,1213.65 1201.83,1213.65 1202.41,1213.65 1203,1213.65 1203.58,1213.65 1204.17,1213.65 1204.76,1213.65 1205.34,1213.65 1205.93,1213.65 1206.52,1213.65 1207.1,1213.65 1207.69,1213.65 1208.28,1213.65 1208.86,1213.65 1209.45,1213.65 1210.03,1213.65 1210.62,1213.65 1211.21,1213.65 1211.79,1213.65 1212.38,1213.65 1212.97,1213.65 1213.55,1213.65 1214.14,1213.65 1214.73,1213.65 1215.31,1213.65 1215.9,1213.65 1216.49,1213.65 1217.07,1213.65 1217.66,1213.65 1218.24,1213.65 1218.83,1213.65 1219.42,1213.65 1220,1213.65 1220.59,1213.65 1221.18,1213.65 1221.76,1213.65 1222.35,1213.65 1222.94,1213.65 1223.52,1213.65 1224.11,1213.65 1224.7,1213.65 1225.28,1213.65 1225.87,1213.65 1226.45,1213.65 1227.04,1213.65 1227.63,1213.65 1228.21,1213.65 1228.8,1213.65 1229.39,1213.65 1229.97,1213.65 1230.56,1213.65 1231.15,1213.65 1231.73,1213.65 1232.32,1213.65 1232.91,1213.65 1233.49,1213.65 1234.08,1213.65 1234.66,1213.65 1235.25,1213.65 1235.84,1213.65 1236.42,1213.65 1237.01,1213.65 1237.6,1213.65 1238.18,1213.65 1238.77,1213.65 1239.36,1213.65 1239.94,1213.65 1240.53,1213.65 1241.11,1213.65 1241.7,1213.65 1242.29,1213.65 1242.87,1213.65 1243.46,1213.65 1244.05,1213.65 1244.63,1213.65 1245.22,1213.65 1245.81,1213.65 1246.39,1213.65 1246.98,1213.65 1247.57,1213.65 1248.15,1213.65 1248.74,1213.65 1249.32,1213.65 1249.91,1213.65 1250.5,1213.65 1251.08,1213.65 1251.67,1213.65 1252.26,1213.65 1252.84,1213.65 1253.43,1213.65 1254.02,1213.65 1254.6,1213.65 1255.19,1213.65 1255.78,1213.65 1256.36,1213.65 1256.95,1213.65 1257.53,1213.65 1258.12,1213.65 1258.71,1213.65 1259.29,1213.65 1259.88,1213.65 1260.47,1213.65 1261.05,1213.65 1261.64,1213.65 1262.23,1213.65 1262.81,1213.65 1263.4,1213.65 1263.98,1213.65 1264.57,1213.65 1265.16,1213.65 1265.74,1213.65 1266.33,1213.65 1266.92,1213.65 1267.5,1213.65 1268.09,1213.65 1268.68,1213.65 1269.26,1213.65 1269.85,1213.65 1270.44,1213.65 1271.02,1213.65 1271.61,1213.65 1272.19,1213.65 1272.78,1213.65 1273.37,1213.65 1273.95,1213.65 1274.54,1213.65 1275.13,1213.65 1275.71,1213.65 1276.3,1213.65 1276.89,1213.65 1277.47,1213.65 1278.06,1213.65 1278.65,1213.65 1279.23,1213.65 1279.82,1213.65 1280.4,1213.65 1280.99,1213.65 1281.58,1213.65 1282.16,1213.65 1282.75,1213.65 1283.34,1213.65 1283.92,1213.65 1284.51,1213.65 1285.1,1213.65 1285.68,1213.65 1286.27,1213.65 1286.86,1213.65 1287.44,1213.65 1288.03,1213.65 1288.61,1213.65 1289.2,1213.65 1289.79,1213.65 1290.37,1213.65 1290.96,1213.65 1291.55,1213.65 1292.13,1213.65 1292.72,1213.65 1293.31,1213.65 1293.89,1213.65 1294.48,1213.65 1295.06,1213.65 1295.65,1213.65 1296.24,1213.65 1296.82,1213.65 1297.41,1213.65 1298,1213.65 1298.58,1213.65 1299.17,1213.65 1299.76,1213.65 1300.34,1213.65 1300.93,1213.65 1301.52,1213.65 1302.1,1213.65 1302.69,1213.65 1303.27,1213.65 1303.86,1213.65 1304.45,1213.65 1305.03,1213.65 1305.62,1213.65 1306.21,1213.65 1306.79,1213.65 1307.38,1213.65 1307.97,1213.65 1308.55,1213.65 1309.14,1213.65 1309.73,1213.65 1310.31,1213.65 1310.9,1213.65 1311.48,1213.65 1312.07,1213.65 1312.66,1213.65 1313.24,1213.65 1313.83,1213.65 1314.42,1213.65 1315,1213.65 1315.59,1213.65 1316.18,1213.65 1316.76,1213.65 1317.35,1213.65 1317.93,1213.65 1318.52,1213.65 1319.11,1213.65 1319.69,1213.65 1320.28,1213.65 1320.87,1213.65 1321.45,1213.65 1322.04,1213.65 1322.63,1213.65 1323.21,1213.65 1323.8,1213.65 1324.39,1213.65 1324.97,1213.65 1325.56,1213.65 1326.14,1213.65 1326.73,1213.65 1327.32,1213.65 1327.9,1213.65 1328.49,1213.65 1329.08,1213.65 1329.66,1213.65 1330.25,1213.65 1330.84,1213.65 1331.42,1213.65 1332.01,1213.65 1332.6,1213.65 1333.18,1213.65 1333.77,1213.65 1334.35,1213.65 1334.94,1213.65 1335.53,1213.65 1336.11,1213.65 1336.7,1213.65 1337.29,1213.65 1337.87,1213.65 1338.46,1213.65 1339.05,1213.65 1339.63,1213.65 1340.22,1213.65 1340.8,1213.65 1341.39,1213.65 1341.98,1213.65 1342.56,1213.65 1343.15,1213.65 1343.74,1213.65 1344.32,1213.65 1344.91,1213.65 1345.5,1213.65 1346.08,1213.65 1346.67,1213.65 1347.26,1213.65 1347.84,1213.65 1348.43,1213.65 1349.01,1213.65 1349.6,1213.65 1350.19,1213.65 1350.77,1213.65 1351.36,1213.65 1351.95,1213.65 1352.53,1213.65 1353.12,1213.65 1353.71,1213.65 1354.29,1213.65 1354.88,1213.65 1355.47,1213.65 1356.05,1213.65 1356.64,1213.65 1357.22,1213.65 1357.81,1213.65 1358.4,1213.65 1358.98,1213.65 1359.57,1213.65 1360.16,1213.65 1360.74,1213.65 1361.33,1213.65 1361.92,1213.65 1362.5,1213.65 1363.09,1213.65 1363.68,1213.65 1364.26,1213.65 1364.85,1213.65 1365.43,1213.65 1366.02,1213.65 1366.61,1213.65 1367.19,1213.65 1367.78,1213.65 1368.37,1213.65 1368.95,1213.65 1369.54,1213.65 1370.13,1213.65 1370.71,1213.65 1371.3,1213.65 1371.88,1213.65 1372.47,1213.65 1373.06,1213.65 1373.64,1213.65 1374.23,1213.65 1374.82,1213.65 1375.4,1213.65 1375.99,1213.65 1376.58,1213.65 1377.16,1213.65 1377.75,1213.65 1378.34,1213.65 1378.92,1213.65 1379.51,1213.65 1380.09,1213.65 1380.68,1213.65 1381.27,1213.65 1381.85,1213.65 1382.44,1213.65 1383.03,1213.65 1383.61,1213.65 1384.2,1213.65 1384.79,1213.65 1385.37,1213.65 1385.96,1213.65 1386.55,1213.65 1387.13,1213.65 1387.72,1213.65 1388.3,1213.65 1388.89,1213.65 1389.48,1213.65 1390.06,1213.65 1390.65,1213.65 1391.24,1213.65 1391.82,1213.65 1392.41,1213.65 1393,1213.65 1393.58,1213.65 1394.17,1213.65 1394.75,1213.65 1395.34,1213.65 1395.93,1213.65 1396.51,1213.65 1397.1,1213.65 1397.69,1213.65 1398.27,1213.65 1398.86,1213.65 1399.45,1213.65 1400.03,1213.65 1400.62,1213.65 1401.21,1213.65 1401.79,1213.65 1402.38,1213.65 1402.96,1213.65 1403.55,1213.65 1404.14,1213.65 1404.72,1213.65 1405.31,1213.65 1405.9,1213.65 1406.48,1213.65 1407.07,1213.65 1407.66,1213.65 1408.24,1213.65 1408.83,1213.65 1409.42,1213.65 1410,1213.65 1410.59,1213.65 1411.17,1213.65 1411.76,1213.65 1412.35,1213.65 1412.93,1213.65 1413.52,1213.65 1414.11,1213.65 1414.69,1213.65 1415.28,1213.65 1415.87,1213.65 1416.45,1213.65 1417.04,1213.65 1417.63,1213.65 1418.21,1213.65 1418.8,1213.65 1419.38,1213.65 1419.97,1213.65 1420.56,1213.65 1421.14,1213.65 1421.73,1213.65 1422.32,1213.65 1422.9,1213.65 1423.49,1213.65 1424.08,1213.65 1424.66,1213.65 1425.25,1213.65 1425.83,1213.65 1426.42,1213.65 1427.01,1213.65 1427.59,1213.65 1428.18,1213.65 1428.77,1213.65 1429.35,1213.65 1429.94,1213.65 1430.53,1213.65 1431.11,1213.65 1431.7,1213.65 1432.29,1213.65 1432.87,1213.65 1433.46,1213.65 1434.04,1213.65 1434.63,1213.65 1435.22,1213.65 1435.8,1213.65 1436.39,1213.65 1436.98,1213.65 1437.56,1213.65 1438.15,1213.65 1438.74,1213.65 1439.32,1213.65 1439.91,1213.65 1440.5,1213.65 1441.08,1213.65 1441.67,1213.65 1442.25,1213.65 1442.84,1213.65 1443.43,1213.65 1444.01,1213.65 1444.6,1213.65 1445.19,1213.65 1445.77,1213.65 1446.36,1213.65 1446.95,1213.65 1447.53,1213.65 1448.12,1213.65 1448.7,1213.65 1449.29,1213.65 1449.88,1213.65 1450.46,1213.65 1451.05,1213.65 1451.64,1213.65 1452.22,1213.65 1452.81,1213.65 1453.4,1213.65 1453.98,1213.65 1454.57,1213.65 1455.16,1213.65 1455.74,1213.65 1456.33,1213.65 1456.91,1213.65 1457.5,1213.65 1458.09,1213.65 1458.67,1213.65 1459.26,1213.65 1459.85,1213.65 1460.43,1213.65 1461.02,1213.65 1461.61,1213.65 1462.19,1213.65 1462.78,1213.65 1463.37,1213.65 1463.95,1213.65 1464.54,1213.65 1465.12,1213.65 1465.71,1213.65 1466.3,1213.65 1466.88,1213.65 1467.47,1213.65 1468.06,1213.65 1468.64,1213.65 1469.23,1213.65 1469.82,1213.65 1470.4,1213.65 1470.99,1213.65 1471.57,1213.65 1472.16,1213.65 1472.75,1213.65 1473.33,1213.65 1473.92,1213.65 1474.51,1213.65 1475.09,1213.65 1475.68,1213.65 1476.27,1213.65 1476.85,1213.65 1477.44,1213.65 1478.03,1213.65 1478.61,1213.65 1479.2,1213.65 1479.78,1213.65 1480.37,1213.65 1480.96,1213.65 1481.54,1213.65 1482.13,1213.65 1482.72,1213.65 1483.3,1213.65 1483.89,1213.65 1484.48,1213.65 1485.06,1213.65 1485.65,1213.65 1486.24,1213.65 1486.82,1213.65 1487.41,1213.65 1487.99,1213.65 1488.58,1213.65 1489.17,1213.65 1489.75,1213.65 1490.34,1213.65 1490.93,1213.65 1491.51,1213.65 1492.1,1213.65 1492.69,1213.65 1493.27,1213.65 1493.86,1213.65 1494.45,1213.65 1495.03,1213.65 1495.62,1213.65 1496.2,1213.65 1496.79,1213.65 1497.38,1213.65 1497.96,1213.65 1498.55,1213.65 1499.14,1213.65 1499.72,1213.65 1500.31,1213.65 1500.9,1213.65 1501.48,1213.65 1502.07,1213.65 1502.65,1213.65 1503.24,1213.65 1503.83,1213.65 1504.41,1213.65 1505,1213.65 1505.59,1213.65 1506.17,1213.65 1506.76,1213.65 1507.35,1213.65 1507.93,1213.65 1508.52,1213.65 1509.11,1213.65 1509.69,1213.65 1510.28,1213.65 1510.86,1213.65 1511.45,1213.65 1512.04,1213.65 1512.62,1213.65 1513.21,1213.65 1513.8,1213.65 1514.38,1213.65 1514.97,1213.65 1515.56,1213.65 1516.14,1213.65 1516.73,1213.65 1517.32,1213.65 1517.9,1213.65 1518.49,1213.65 1519.07,1213.65 1519.66,1213.65 1520.25,1213.65 1520.83,1213.65 1521.42,1213.65 1522.01,1213.65 1522.59,1213.65 1523.18,1213.65 1523.77,1213.65 1524.35,1213.65 1524.94,1213.65 1525.52,1213.65 1526.11,1213.65 1526.7,1213.65 1527.28,1213.65 1527.87,1213.65 1528.46,1213.65 1529.04,1213.65 1529.63,1213.65 1530.22,1213.65 1530.8,1213.65 1531.39,1213.65 1531.98,1213.65 1532.56,1213.65 1533.15,1213.65 1533.73,1213.65 1534.32,1213.65 1534.91,1213.65 1535.49,1213.65 1536.08,1213.65 1536.67,1213.65 1537.25,1213.65 1537.84,1213.65 1538.43,1213.65 1539.01,1213.65 1539.6,1213.65 1540.19,1213.65 1540.77,1213.65 1541.36,1213.65 1541.94,1213.65 1542.53,1213.65 1543.12,1213.65 1543.7,1213.65 1544.29,1213.65 1544.88,1213.65 1545.46,1213.65 1546.05,1213.65 1546.64,1213.65 1547.22,1213.65 1547.81,1213.65 1548.4,1213.65 1548.98,1213.65 1549.57,1213.65 1550.15,1213.65 1550.74,1213.65 1551.33,1213.65 1551.91,1213.65 1552.5,1213.65 1553.09,1213.65 1553.67,1213.65 1554.26,1213.65 1554.85,1213.65 1555.43,1213.65 1556.02,1213.65 1556.6,1213.65 1557.19,1213.65 1557.78,1213.65 1558.36,1213.65 1558.95,1213.65 1559.54,1213.65 1560.12,1213.65 1560.71,1213.65 1561.3,1213.65 1561.88,1213.65 1562.47,1213.65 1563.06,1213.65 1563.64,1213.65 1564.23,1213.65 1564.81,1213.65 1565.4,1213.65 1565.99,1213.65 1566.57,1213.65 1567.16,1213.65 1567.75,1213.65 1568.33,1213.65 1568.92,1213.65 1569.51,1213.65 1570.09,1213.65 1570.68,1213.65 1571.27,1213.65 1571.85,1213.65 1572.44,1213.65 1573.02,1213.65 1573.61,1213.65 1574.2,1213.65 1574.78,1213.65 1575.37,1213.65 1575.96,1213.65 1576.54,1213.65 1577.13,1213.65 1577.72,1213.65 1578.3,1213.65 1578.89,1213.65 1579.47,1213.65 1580.06,1213.65 1580.65,1213.65 1581.23,1213.65 1581.82,1213.65 1582.41,1213.65 1582.99,1213.65 1583.58,1213.65 1584.17,1213.65 1584.75,1213.65 1585.34,1213.65 1585.93,1213.65 1586.51,1213.65 1587.1,1213.65 1587.68,1213.65 1588.27,1213.65 1588.86,1213.65 1589.44,1213.65 1590.03,1213.65 1590.62,1213.65 1591.2,1213.65 1591.79,1213.65 1592.38,1213.65 1592.96,1213.65 1593.55,1213.65 1594.14,1213.65 1594.72,1213.65 1595.31,1213.65 1595.89,1213.65 1596.48,1213.65 1597.07,1213.65 1597.65,1213.65 1598.24,1213.65 1598.83,1213.65 1599.41,1213.65 1600,1213.65 1600.59,1213.65 1601.17,1213.65 1601.76,1213.65 1602.34,1213.65 1602.93,1213.65 1603.52,1213.65 1604.1,1213.65 1604.69,1213.65 1605.28,1213.65 1605.86,1213.65 1606.45,1213.65 1607.04,1213.65 1607.62,1213.65 1608.21,1213.65 1608.8,1213.65 1609.38,1213.65 1609.97,1213.65 1610.55,1213.65 1611.14,1213.65 1611.73,1213.65 1612.31,1213.65 1612.9,1213.65 1613.49,1213.65 1614.07,1213.65 1614.66,1213.65 1615.25,1213.65 1615.83,1213.65 1616.42,1213.65 1617.01,1213.65 1617.59,1213.65 1618.18,1213.65 1618.76,1213.65 1619.35,1213.65 1619.94,1213.65 1620.52,1213.65 1621.11,1213.65 1621.7,1213.65 1622.28,1213.65 1622.87,1213.65 1623.46,1213.65 1624.04,1213.65 1624.63,1213.65 1625.22,1213.65 1625.8,1213.65 1626.39,1213.65 1626.97,1213.65 1627.56,1213.65 1628.15,1213.65 1628.73,1213.65 1629.32,1213.65 1629.91,1213.65 1630.49,1213.65 1631.08,1213.65 1631.67,1213.65 1632.25,1213.65 1632.84,1213.65 1633.42,1213.65 1634.01,1213.65 1634.6,1213.65 1635.18,1213.65 1635.77,1213.65 1636.36,1213.65 1636.94,1213.65 1637.53,1213.65 1638.12,1213.65 1638.7,1213.65 1639.29,1213.65 1639.88,1213.65 1640.46,1213.65 1641.05,1213.65 1641.63,1213.65 1642.22,1213.65 1642.81,1213.65 1643.39,1213.65 1643.98,1213.65 1644.57,1213.65 1645.15,1213.65 1645.74,1213.65 1646.33,1213.65 1646.91,1213.65 1647.5,1213.65 1648.09,1213.65 1648.67,1213.65 1649.26,1213.65 1649.84,1213.65 1650.43,1213.65 1651.02,1213.65 1651.6,1213.65 1652.19,1213.65 1652.78,1213.65 1653.36,1213.65 1653.95,1213.65 1654.54,1213.65 1655.12,1213.65 1655.71,1213.65 1656.29,1213.65 1656.88,1213.65 1657.47,1213.65 1658.05,1213.65 1658.64,1213.65 1659.23,1213.65 1659.81,1213.65 1660.4,1213.65 1660.99,1213.65 1661.57,1213.65 1662.16,1213.65 1662.75,1213.65 1663.33,1213.65 1663.92,1213.65 1664.5,1213.65 1665.09,1213.65 1665.68,1213.65 1666.26,1213.65 1666.85,1213.65 1667.44,1213.65 1668.02,1213.65 1668.61,1213.65 1669.2,1213.65 1669.78,1213.65 1670.37,1213.65 1670.96,1213.65 1671.54,1213.65 1672.13,1213.65 1672.71,1213.65 1673.3,1213.65 1673.89,1213.65 1674.47,1213.65 1675.06,1213.65 1675.65,1213.65 1676.23,1213.65 1676.82,1213.65 1677.41,1213.65 1677.99,1213.65 1678.58,1213.65 1679.17,1213.65 1679.75,1213.65 1680.34,1213.65 1680.92,1213.65 1681.51,1213.65 1682.1,1213.65 1682.68,1213.65 1683.27,1213.65 1683.86,1213.65 1684.44,1213.65 1685.03,1213.65 1685.62,1213.65 1686.2,1213.65 1686.79,1213.65 1687.37,1213.65 1687.96,1213.65 1688.55,1213.65 1689.13,1213.65 1689.72,1213.65 1690.31,1213.65 1690.89,1213.65 1691.48,1213.65 1692.07,1213.65 1692.65,1213.65 1693.24,1213.65 1693.83,1213.65 1694.41,1213.65 1695,1213.65 1695.58,1213.65 1696.17,1213.65 1696.76,1213.65 1697.34,1213.65 1697.93,1213.65 1698.52,1213.65 1699.1,1213.65 1699.69,1213.65 1700.28,1213.65 1700.86,1213.65 1701.45,1213.65 1702.04,1213.65 1702.62,1213.65 1703.21,1213.65 1703.79,1213.65 1704.38,1213.65 1704.97,1213.65 1705.55,1213.65 1706.14,1213.65 1706.73,1213.65 1707.31,1213.65 1707.9,1213.65 1708.49,1213.65 1709.07,1213.65 1709.66,1213.65 1710.24,1213.65 1710.83,1213.65 1711.42,1213.65 1712,1213.65 1712.59,1213.65 1713.18,1213.65 1713.76,1213.65 1714.35,1213.65 1714.94,1213.65 1715.52,1213.65 1716.11,1213.65 1716.7,1213.65 1717.28,1213.65 1717.87,1213.65 1718.45,1213.65 1719.04,1213.65 1719.63,1213.65 1720.21,1213.65 1720.8,1213.65 1721.39,1213.65 1721.97,1213.65 1722.56,1213.65 1723.15,1213.65 1723.73,1213.65 1724.32,1213.65 1724.91,1213.65 1725.49,1213.65 1726.08,1213.65 1726.66,1213.65 1727.25,1213.65 1727.84,1213.65 1728.42,1213.65 1729.01,1213.65 1729.6,1213.65 1730.18,1213.65 1730.77,1213.65 1731.36,1213.65 1731.94,1213.65 1732.53,1213.65 1733.11,1213.65 1733.7,1213.65 1734.29,1213.65 1734.87,1213.65 1735.46,1213.65 1736.05,1213.65 1736.63,1213.65 1737.22,1213.65 1737.81,1213.65 1738.39,1213.65 1738.98,1213.65 1739.57,1213.65 1740.15,1213.65 1740.74,1213.65 1741.32,1213.65 1741.91,1213.65 1742.5,1213.65 1743.08,1213.65 1743.67,1213.65 1744.26,1213.65 1744.84,1213.65 1745.43,1213.65 1746.02,1213.65 1746.6,1213.65 1747.19,1213.65 1747.78,1213.65 1748.36,1213.65 1748.95,1213.65 1749.53,1213.65 1750.12,1213.65 1750.71,1213.65 1751.29,1213.65 1751.88,1213.65 1752.47,1213.65 1753.05,1213.65 1753.64,1213.65 1754.23,1213.65 1754.81,1213.65 1755.4,1213.65 1755.99,1213.65 1756.57,1213.65 1757.16,1213.65 1757.74,1213.65 1758.33,1213.65 1758.92,1213.65 1759.5,1213.65 1760.09,1213.65 1760.68,1213.65 1761.26,1213.65 1761.85,1213.65 1762.44,1213.65 1763.02,1213.65 1763.61,1213.65 1764.19,1213.65 1764.78,1213.65 1765.37,1213.65 1765.95,1213.65 1766.54,1213.65 1767.13,1213.65 1767.71,1213.65 1768.3,1213.65 1768.89,1213.65 1769.47,1213.65 1770.06,1213.65 1770.65,1213.65 1771.23,1213.65 1771.82,1213.65 1772.4,1213.65 1772.99,1213.65 1773.58,1213.65 1774.16,1213.65 1774.75,1213.65 1775.34,1213.65 1775.92,1213.65 1776.51,1213.65 1777.1,1213.65 1777.68,1213.65 1778.27,1213.65 1778.86,1213.65 1779.44,1213.65 1780.03,1213.65 1780.61,1213.65 1781.2,1213.65 1781.79,1213.65 1782.37,1213.65 1782.96,1213.65 1783.55,1213.65 1784.13,1213.65 1784.72,1213.65 1785.31,1213.65 1785.89,1213.65 1786.48,1213.65 1787.06,1213.65 1787.65,1213.65 1788.24,1213.65 1788.82,1213.65 1789.41,1213.65 1790,1213.65 1790.58,1213.65 1791.17,1213.65 1791.76,1213.65 1792.34,1213.65 1792.93,1213.65 1793.52,1213.65 1794.1,1213.65 1794.69,1213.65 1795.27,1213.65 1795.86,1213.65 1796.45,1213.65 1797.03,1213.65 1797.62,1213.65 1798.21,1213.65 1798.79,1213.65 1799.38,1213.65 1799.97,1213.65 1800.55,1213.65 1801.14,1213.65 1801.73,1213.65 1802.31,1213.65 1802.9,1213.65 1803.48,1213.65 1804.07,1213.65 1804.66,1213.65 1805.24,1213.65 1805.83,1213.65 1806.42,1213.65 1807,1213.65 1807.59,1213.65 1808.18,1213.65 1808.76,1213.65 1809.35,1213.65 1809.94,1213.65 1810.52,1213.65 1811.11,1213.65 1811.69,1213.65 1812.28,1213.65 1812.87,1213.65 1813.45,1213.65 1814.04,1213.65 1814.63,1213.65 1815.21,1213.65 1815.8,1213.65 1816.39,1213.65 1816.97,1213.65 1817.56,1213.65 1818.14,1213.65 1818.73,1213.65 1819.32,1213.65 1819.9,1213.65 1820.49,1213.65 1821.08,1213.65 1821.66,1213.65 1822.25,1213.65 1822.84,1213.65 1823.42,1213.65 1824.01,1213.65 1824.6,1213.65 1825.18,1213.65 1825.77,1213.65 1826.35,1213.65 1826.94,1213.65 1827.53,1213.65 1828.11,1213.65 1828.7,1213.65 1829.29,1213.65 1829.87,1213.65 1830.46,1213.65 1831.05,1213.65 1831.63,1213.65 1832.22,1213.65 1832.81,1213.65 1833.39,1213.65 1833.98,1213.65 1834.56,1213.65 1835.15,1213.65 1835.74,1213.65 1836.32,1213.65 1836.91,1213.65 1837.5,1213.65 1838.08,1213.65 1838.67,1213.65 1839.26,1213.65 1839.84,1213.65 1840.43,1213.65 1841.01,1213.65 1841.6,1213.65 1842.19,1213.65 1842.77,1213.65 1843.36,1213.65 1843.95,1213.65 1844.53,1213.65 1845.12,1213.65 1845.71,1213.65 1846.29,1213.65 1846.88,1213.65 1847.47,1213.65 1848.05,1213.65 1848.64,1213.65 1849.22,1213.65 1849.81,1213.65 1850.4,1213.65 1850.98,1213.65 1851.57,1213.65 1852.16,1213.65 1852.74,1213.65 1853.33,1213.65 1853.92,1213.65 1854.5,1213.65 1855.09,1213.65 1855.68,1213.65 1856.26,1213.65 1856.85,1213.65 1857.43,1213.65 1858.02,1213.65 1858.61,1213.65 1859.19,1213.65 1859.78,1213.65 1860.37,1213.65 1860.95,1213.65 1861.54,1213.65 1862.13,1213.65 1862.71,1213.65 1863.3,1213.65 1863.88,1213.65 1864.47,1213.65 1865.06,1213.65 1865.64,1213.65 1866.23,1213.65 1866.82,1213.65 1867.4,1213.65 1867.99,1213.65 1868.58,1213.65 1869.16,1213.65 1869.75,1213.65 1870.34,1213.65 1870.92,1213.65 1871.51,1213.65 1872.09,1213.65 1872.68,1213.65 1873.27,1213.65 1873.85,1213.65 1874.44,1213.65 1875.03,1213.65 1875.61,1213.65 1876.2,1213.65 1876.79,1213.65 1877.37,1213.65 1877.96,1213.65 1878.55,1213.65 1879.13,1213.65 1879.72,1213.65 1880.3,1213.65 1880.89,1213.65 1881.48,1213.65 1882.06,1213.65 1882.65,1213.65 1883.24,1213.65 1883.82,1213.65 1884.41,1213.65 1885,1213.65 1885.58,1213.65 1886.17,1213.65 1886.76,1213.65 1887.34,1213.65 1887.93,1213.65 1888.51,1213.65 1889.1,1213.65 1889.69,1213.65 1890.27,1213.65 1890.86,1213.65 1891.45,1213.65 1892.03,1213.65 1892.62,1213.65 1893.21,1213.65 1893.79,1213.65 1894.38,1213.65 1894.96,1213.65 1895.55,1213.65 1896.14,1213.65 1896.72,1213.65 1897.31,1213.65 1897.9,1213.65 1898.48,1213.65 1899.07,1213.65 1899.66,1213.65 1900.24,1213.65 1900.83,1213.65 1901.42,1213.65 1902,1213.65 1902.59,1213.65 1903.17,1213.65 1903.76,1213.65 1904.35,1213.65 1904.93,1213.65 1905.52,1213.65 1906.11,1213.65 1906.69,1213.65 1907.28,1213.65 1907.87,1213.65 1908.45,1213.65 1909.04,1213.65 1909.63,1213.65 1910.21,1213.65 1910.8,1213.65 1911.38,1213.65 1911.97,1213.65 1912.56,1213.65 1913.14,1213.65 1913.73,1213.65 1914.32,1213.65 1914.9,1213.65 1915.49,1213.65 1916.08,1213.65 1916.66,1213.65 1917.25,1213.65 1917.83,1213.65 1918.42,1213.65 1919.01,1213.65 1919.59,1213.65 1920.18,1213.65 1920.77,1213.65 1921.35,1213.65 1921.94,1213.65 1922.53,1213.65 1923.11,1213.65 1923.7,1213.65 1924.29,1213.65 1924.87,1213.65 1925.46,1213.65 1926.04,1213.65 1926.63,1213.65 1927.22,1213.65 1927.8,1213.65 1928.39,1213.65 1928.98,1213.65 1929.56,1213.65 1930.15,1213.65 1930.74,1213.65 1931.32,1213.65 1931.91,1213.65 1932.5,1213.65 1933.08,1213.65 1933.67,1213.65 1934.25,1213.65 1934.84,1213.65 1935.43,1213.65 1936.01,1213.65 1936.6,1213.65 1937.19,1213.65 1937.77,1213.65 1938.36,1213.65 1938.95,1213.65 1939.53,1213.65 1940.12,1213.65 1940.71,1213.65 1941.29,1213.65 1941.88,1213.65 1942.46,1213.65 1943.05,1213.65 1943.64,1213.65 1944.22,1213.65 1944.81,1213.65 1945.4,1213.65 1945.98,1213.65 1946.57,1213.65 1947.16,1213.65 1947.74,1213.65 1948.33,1213.65 1948.91,1213.65 1949.5,1213.65 1950.09,1213.65 1950.67,1213.65 1951.26,1213.65 1951.85,1213.65 1952.43,1213.65 1953.02,1213.65 1953.61,1213.65 1954.19,1213.65 1954.78,1213.65 1955.37,1213.65 1955.95,1213.65 1956.54,1213.65 1957.12,1213.65 1957.71,1213.65 1958.3,1213.65 1958.88,1213.65 1959.47,1213.65 1960.06,1213.65 1960.64,1213.65 1961.23,1213.65 1961.82,1213.65 1962.4,1213.65 1962.99,1213.65 1963.58,1213.65 1964.16,1213.65 1964.75,1213.65 1965.33,1213.65 1965.92,1213.65 1966.51,1213.65 1967.09,1213.65 1967.68,1213.65 1968.27,1213.65 1968.85,1213.65 1969.44,1213.65 1970.03,1213.65 1970.61,1213.65 1971.2,1213.65 1971.78,1213.65 1972.37,1213.65 1972.96,1213.65 1973.54,1213.65 1974.13,1213.65 1974.72,1213.65 1975.3,1213.65 1975.89,1213.65 1976.48,1213.65 1977.06,1213.65 1977.65,1213.65 1978.24,1213.65 1978.82,1213.65 1979.41,1213.65 1979.99,1213.65 1980.58,1213.65 1981.17,1213.65 1981.75,1213.65 1982.34,1213.65 1982.93,1213.65 1983.51,1213.65 1984.1,1213.65 1984.69,1213.65 1985.27,1213.65 1985.86,1213.65 1986.45,1213.65 1987.03,1213.65 1987.62,1213.65 1988.2,1213.65 1988.79,1213.65 1989.38,1213.65 1989.96,1213.65 1990.55,1213.65 1991.14,1213.65 1991.72,1213.65 1992.31,1213.65 1992.9,1213.65 1993.48,1213.65 1994.07,1213.65 1994.65,1213.65 1995.24,1213.65 1995.83,1213.65 1996.41,1213.65 1997,1213.65 1997.59,1213.65 1998.17,1213.65 1998.76,1213.65 1999.35,1213.65 1999.93,1213.65 2000.52,1213.65 2001.11,1213.65 2001.69,1213.65 2002.28,1213.65 2002.86,1213.65 2003.45,1213.65 2004.04,1213.65 2004.62,1213.65 2005.21,1213.65 2005.8,1213.65 2006.38,1213.65 2006.97,1213.65 2007.56,1213.65 2008.14,1213.65 2008.73,1213.65 2009.32,1213.65 2009.9,1213.65 2010.49,1213.65 2011.07,1213.65 2011.66,1213.65 2012.25,1213.65 2012.83,1213.65 2013.42,1213.65 2014.01,1213.65 2014.59,1213.65 2015.18,1213.65 2015.77,1213.65 2016.35,1213.65 2016.94,1213.65 2017.53,1213.65 2018.11,1213.65 2018.7,1213.65 2019.28,1213.65 2019.87,1213.65 2020.46,1213.65 2021.04,1213.65 2021.63,1213.65 2022.22,1213.65 2022.8,1213.65 2023.39,1213.65 2023.98,1213.65 2024.56,1213.65 2025.15,1213.65 2025.73,1213.65 2026.32,1213.65 2026.91,1213.65 2027.49,1213.65 2028.08,1213.65 2028.67,1213.65 2029.25,1213.65 2029.84,1213.65 2030.43,1213.65 2031.01,1213.65 2031.6,1213.65 2032.19,1213.65 2032.77,1213.65 2033.36,1213.65 2033.94,1213.65 2034.53,1213.65 2035.12,1213.65 2035.7,1213.65 2036.29,1213.65 2036.88,1213.65 2037.46,1213.65 2038.05,1213.65 2038.64,1213.65 2039.22,1213.65 2039.81,1213.65 2040.4,1213.65 2040.98,1213.65 2041.57,1213.65 2042.15,1213.65 2042.74,1213.65 2043.33,1213.65 2043.91,1213.65 2044.5,1213.65 2045.09,1213.65 2045.67,1213.65 2046.26,1213.65 2046.85,1213.65 2047.43,1213.65 2048.02,1213.65 2048.6,1213.65 2049.19,1213.65 2049.78,1213.65 2050.36,1213.65 2050.95,1213.65 2051.54,1213.65 2052.12,1213.65 2052.71,1213.65 2053.3,1213.65 2053.88,1213.65 2054.47,1213.65 2055.06,1213.65 2055.64,1213.65 2056.23,1213.65 2056.81,1213.65 2057.4,1213.65 2057.99,1213.65 2058.57,1213.65 2059.16,1213.65 2059.75,1213.65 2060.33,1213.65 2060.92,1213.65 2061.51,1213.65 2062.09,1213.65 2062.68,1213.65 2063.27,1213.65 2063.85,1213.65 2064.44,1213.65 2065.02,1213.65 2065.61,1213.65 2066.2,1213.65 2066.78,1213.65 2067.37,1213.65 2067.96,1213.65 2068.54,1213.65 2069.13,1213.65 2069.72,1213.65 2070.3,1213.65 2070.89,1213.65 2071.48,1213.65 2072.06,1213.65 2072.65,1213.65 2073.23,1213.65 2073.82,1213.65 2074.41,1213.65 2074.99,1213.65 2075.58,1213.65 2076.17,1213.65 2076.75,1213.65 2077.34,1213.65 2077.93,1213.65 2078.51,1213.65 2079.1,1213.65 2079.68,1213.65 2080.27,1213.65 2080.86,1213.65 2081.44,1213.65 2082.03,1213.65 2082.62,1213.65 2083.2,1213.65 2083.79,1213.65 2084.38,1213.65 2084.96,1213.65 2085.55,1213.65 2086.14,1213.65 2086.72,1213.65 2087.31,1213.65 2087.89,1213.65 2088.48,1213.65 2089.07,1213.65 2089.65,1213.65 2090.24,1213.65 2090.83,1213.65 2091.41,1213.65 2092,1213.65 2092.59,1213.65 2093.17,1213.65 2093.76,1213.65 2094.35,1213.65 2094.93,1213.65 2095.52,1213.65 2096.1,1213.65 2096.69,1213.65 2097.28,1213.65 2097.86,1213.65 2098.45,1213.65 2099.04,1213.65 2099.62,1213.65 2100.21,1213.65 2100.8,1213.65 2101.38,1213.65 2101.97,1213.65 2102.55,1213.65 2103.14,1213.65 2103.73,1213.65 2104.31,1213.65 2104.9,1213.65 2105.49,1213.65 2106.07,1213.65 2106.66,1213.65 2107.25,1213.65 2107.83,1213.65 2108.42,1213.65 2109.01,1213.65 2109.59,1213.65 2110.18,1213.65 2110.76,1213.65 2111.35,1213.65 2111.94,1213.65 2112.52,1213.65 2113.11,1213.65 2113.7,1213.65 2114.28,1213.65 2114.87,1213.65 2115.46,1213.65 2116.04,1213.65 2116.63,1213.65 2117.22,1213.65 2117.8,1213.65 2118.39,1213.65 2118.97,1213.65 2119.56,1213.65 2120.15,1213.65 2120.73,1213.65 2121.32,1213.65 2121.91,1213.65 2122.49,1213.65 2123.08,1213.65 2123.67,1213.65 2124.25,1213.65 2124.84,1213.65 2125.42,1213.65 2126.01,1213.65 2126.6,1213.65 2127.18,1213.65 2127.77,1213.65 2128.36,1213.65 2128.94,1213.65 2129.53,1213.65 2130.12,1213.65 2130.7,1213.65 2131.29,1213.65 2131.88,1213.65 2132.46,1213.65 2133.05,1213.65 2133.63,1213.65 2134.22,1213.65 2134.81,1213.65 2135.39,1213.65 2135.98,1213.65 2136.57,1213.65 2137.15,1213.65 2137.74,1213.65 2138.33,1213.65 2138.91,1213.65 2139.5,1213.65 2140.09,1213.65 2140.67,1213.65 2141.26,1213.65 2141.84,1213.65 2142.43,1213.65 2143.02,1213.65 2143.6,1213.65 2144.19,1213.65 2144.78,1213.65 2145.36,1213.65 2145.95,1213.65 2146.54,1213.65 2147.12,1213.65 2147.71,1213.65 2148.3,1213.65 2148.88,1213.65 2149.47,1213.65 2150.05,1213.65 2150.64,1213.65 2151.23,1213.65 2151.81,1213.65 2152.4,1213.65 2152.99,1213.65 2153.57,1213.65 2154.16,1213.65 2154.75,1213.65 2155.33,1213.65 2155.92,1213.65 2156.5,1213.65 2157.09,1213.65 2157.68,1213.65 2158.26,1213.65 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.68,1196.77 1399.04,899.083 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.14 985.439,1196.77 2158.26,1196.77 2158.26,1230.14 985.439,1230.14 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip473\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip473)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2789.22 162.673,-4012.26 163.232,-5112.53 163.792,-6090.12 164.351,-5699.67 164.91,-5445.37 165.469,-6324.79 166.029,-7107.75 166.588,-7841.14 167.147,-8505.56 167.706,-9105.49 168.266,-9645.1 168.825,-10128.3 169.384,-10558.7 169.943,-10939.8 170.503,-11258.1 171.062,-11550.9 171.621,-11803.5 172.18,-12018.5 172.74,-12182.5 173.299,-12330.7 173.858,-11951.6 174.417,-12057.1 174.977,-11700.2 175.536,-11754.7 176.095,-11784.8 176.655,-11806.9 177.214,-11808.7 177.773,-11482.6 178.332,-11440.1 178.892,-11387.7 179.451,-11314 180.01,-11003 180.569,-10691 181.129,-10594.6 181.688,-10485.8 182.247,-10374.2 182.806,-10249.1 183.366,-9786.45 183.925,-9653.38 184.484,-9516.66 185.043,-9375.38 185.603,-9227.29 186.162,-9078.5 186.721,-8685.64 187.28,-8533.99 187.84,-8284.85 188.399,-7826.87 188.958,-7483.16 189.517,-6977.43 190.077,-6773.16 190.636,-6642.21 191.195,-6505.25 191.754,-6373.42 192.314,-6233.76 192.873,-6101.15 193.432,-5898.63 193.991,-5637.65 194.551,-5447.46 195.11,-5263.46 195.669,-4974.29 196.228,-4862.37 196.788,-4696.75 197.347,-4535.87 197.906,-4276.1 198.465,-4078.52 199.025,-3889.2 199.584,-3798.25 200.143,-3659.28 200.702,-3486.8 201.262,-3315.15 201.821,-3111.76 202.38,-3031.21 202.939,-2881.77 203.499,-2808.56 204.058,-2701.29 204.617,-2627.87 205.176,-2551.5 205.736,-2376.34 206.295,-2241.44 206.854,-2173.69 207.413,-2071.82 207.973,-1973.79 208.532,-1850.86 209.091,-1735.38 209.65,-1648.92 210.21,-1563.8 210.769,-1449.22 211.328,-1369.73 211.887,-1261.94 212.447,-1212.37 213.006,-1134.57 213.565,-1084.77 214.124,-1011.27 214.684,-941.213 215.243,-869.248 215.802,-749.206 216.361,-683.195 216.921,-594.461 217.48,-533.555 218.039,-473.275 218.598,-416.01 219.158,-338.921 219.717,-307.372 220.276,-254.911 220.835,-225.102 221.395,-150.77 221.954,-101.029 222.513,-97.5751 223.072,-47.174 223.632,83.2414 224.191,123.727 224.75,183.916 225.309,238.255 225.869,294.193 226.428,327.312 226.987,337.771 227.546,388.786 228.106,436.691 228.665,423.249 229.224,431.33 229.783,440.86 230.343,488.658 230.902,515.807 231.461,523.367 232.02,565.732 232.58,592.61 233.139,636.419 233.698,675.808 234.257,673.372 234.817,673.435 235.376,695.042 235.935,692.925 236.494,710.021 237.054,747.682 237.613,782.807 238.172,796.731 238.731,809.691 239.291,842.592 239.85,873.827 240.409,887.209 240.968,883.62 241.528,894.673 242.087,963.441 242.646,920.104 243.205,895.757 243.765,927.858 244.324,941.08 244.883,935.262 245.442,910.833 246.002,908.677 246.561,906.962 247.12,903.664 247.679,957.317 248.239,970.964 248.798,1002.44 249.357,996.527 249.916,991.41 250.476,1021.37 251.035,1033.67 251.594,1028.01 252.153,1037.07 252.713,1098.38 253.272,1107.95 253.831,1135.11 254.39,1121.97 254.95,1161.6 255.509,1132.13 256.068,1134.95 256.627,1104.99 257.187,1125.22 257.746,1166.03 258.305,1120.85 258.864,1093.14 259.424,1118.2 259.983,1105.67 260.542,1093.74 261.101,1134.17 261.661,1106.58 262.22,1060.74 262.779,1071.59 263.338,1080.61 263.898,1053.3 264.457,1050.13 265.016,1043.03 265.575,1037.78 266.135,995.763 266.694,976.051 267.253,1006.64 267.812,983.899 268.372,1018.89 268.931,1051.27 269.49,1046.43 270.049,1056.75 270.609,1031.85 271.168,1012.44 271.727,1009.21 272.286,1022.89 272.846,1015.61 273.405,1010.99 273.964,1006.62 274.523,964.522 275.083,1011.17 275.642,1020.91 276.201,1015.61 276.76,1014.1 277.32,1010.65 277.879,1037.91 278.438,1047.29 278.997,1038.52 279.557,1081.12 280.116,1075.24 280.675,1069.58 281.234,1096 281.794,1106.54 282.353,1084.7 282.912,1078.23 283.471,1102.65 284.031,1094.13 284.59,1068.02 285.149,1043.9 285.708,1020.32 286.268,1083.35 286.827,1075.75 287.386,1062.77 287.945,1071.37 288.505,1031.83 289.064,1058.46 289.623,1067.62 290.182,1076.52 290.742,1067.42 291.301,1045.37 291.86,1058.63 292.419,1070.88 292.979,1061.88 293.538,1071.63 294.097,1065.22 294.656,1060.79 295.216,1073.41 295.775,1020.17 296.334,1049.93 296.893,1040.25 297.453,1101.07 298.012,1090.2 298.571,1084.33 299.13,1078.55 299.69,1068.84 300.249,1126.07 300.808,1128.29 301.368,1131.45 301.927,1120.04 302.486,1125.26 303.045,1114.07 303.605,1085.52 304.164,1060.43 304.723,1086.18 305.282,1077.63 305.842,1050.62 306.401,1060.98 306.96,1036.97 307.519,1031.24 308.079,1027.41 308.638,1004.05 309.197,1013.48 309.756,988.894 310.316,999.447 310.875,996.469 311.434,1006.1 311.993,998.069 312.553,1005.08 313.112,984.709 313.671,962.812 314.23,962.409 314.79,961.384 315.349,957.018 315.908,956.78 316.467,986.18 317.027,965.225 317.586,991.853 318.145,986.957 318.704,964.622 319.264,943.015 319.823,938.156 320.382,918.485 320.941,951.207 321.501,949.897 322.06,979.106 322.619,993.992 323.178,1051.12 323.738,1026.17 324.297,1034.4 324.856,1044.05 325.415,1053.62 325.975,1010.53 326.534,1004.52 327.093,983.622 327.652,945.959 328.212,993.132 328.771,1036.96 329.33,1011.13 329.889,1052.52 330.449,1059.37 331.008,985.777 331.567,995.659 332.126,975.59 332.686,974.359 333.245,952.872 333.804,962.206 334.363,938.652 334.923,950.348 335.482,961.447 336.041,937.577 336.6,912.225 337.16,921.198 337.719,913.32 338.278,938.394 338.837,915.963 339.397,928.477 339.956,922.802 340.515,917.558 341.074,897.816 341.634,930.683 342.193,911.545 342.752,912.044 343.311,909.991 343.871,919.434 344.43,901.627 344.989,899.011 345.548,929.75 346.108,892.152 346.667,890.246 347.226,887.034 347.785,920.433 348.345,914.951 348.904,908.967 349.463,939.406 350.022,934.973 350.582,912.943 351.141,871.535 351.7,888.167 352.259,883.819 352.819,880.956 353.378,860.488 353.937,876.539 354.496,876.424 355.056,874.469 355.615,875.114 356.174,906.364 356.733,905.939 357.293,886.627 357.852,885.477 358.411,896.054 358.97,890.352 359.53,933.132 360.089,929.834 360.648,938.498 361.207,948.604 361.767,938.103 362.326,930.979 362.885,904.987 363.444,885.98 364.004,898.566 364.563,896.002 365.122,891.728 365.681,885.612 366.241,913.867 366.8,891.316 367.359,872.59 367.918,903.564 368.478,919.66 369.037,925.834 369.596,952.551 370.155,941.982 370.715,968.18 371.274,975.78 371.833,1014.64 372.392,1019.78 372.952,1038.64 373.511,1043.83 374.07,984.489 374.629,991.068 375.189,963.964 375.748,953.483 376.307,932.241 376.866,926.704 377.426,915.82 377.985,909.158 378.544,905.33 379.103,882.862 379.663,896.91 380.222,925.102 380.781,928.16 381.34,888.546 381.9,901.639 382.459,912.257 383.018,950.744 383.577,974.275 384.137,964.03 384.696,939.898 385.255,915.638 385.814,909.601 386.374,886.007 386.933,896.361 387.492,855.181 388.051,833.287 388.611,812.763 389.17,813.247 389.729,795.528 390.288,794.836 390.848,792.685 391.407,756.236 391.966,803.425 392.525,821.136 393.085,837.804 393.644,817.087 394.203,816.467 394.762,848.986 395.322,828.167 395.881,825.141 396.44,789.518 396.999,788.168 397.559,771.849 398.118,772.858 398.677,807.249 399.236,807.77 399.796,791.091 400.355,788.246 400.914,818.25 401.473,883.667 402.033,891.909 402.592,890.897 403.151,900.392 403.71,895.617 404.27,890.199 404.829,904.247 405.388,881.712 405.947,893.211 406.507,823.643 407.066,822.346 407.625,836.56 408.184,837.993 408.744,833.54 409.303,829.094 409.862,844.327 410.421,839.989 410.981,872.763 411.54,865.464 412.099,829.893 412.658,830.524 413.218,812.607 413.777,827.389 414.336,844.626 414.895,841.736 415.455,837.318 416.014,834.733 416.573,816.143 417.132,814.576 417.692,812.289 418.251,807.62 418.81,790.279 419.369,804.365 419.929,803.704 420.488,800.445 421.047,780.723 421.606,763.543 422.166,761.728 422.725,746.946 423.284,749.066 423.843,769.771 424.403,772.666 424.962,775.239 425.521,789.331 426.08,804.877 426.64,820.473 427.199,817.905 427.758,798.742 428.318,799.81 428.877,781.453 429.436,763.437 429.995,767.951 430.555,770.717 431.114,771.448 431.673,801.492 432.232,786.368 432.792,782.365 433.351,779.711 433.91,795.87 434.469,789.736 435.029,776.257 435.588,762.371 436.147,762.599 436.706,761.382 437.266,762.07 437.825,761.574 438.384,747.24 438.943,746.255 439.503,731.118 440.062,751.542 440.621,746.12 441.18,782.942 441.74,780.883 442.299,746.985 442.858,746.402 443.417,748.337 443.977,734.577 444.536,720.437 445.095,770.936 445.654,769.457 446.214,768.654 446.773,770.198 447.332,786.361 447.891,768.128 448.451,767.552 449.01,747.592 449.569,779.301 450.128,793.931 450.688,810.751 451.247,868.893 451.806,879.102 452.365,902.742 452.925,861.111 453.484,870.898 454.043,848.277 454.602,911.89 455.162,919.296 455.721,876.17 456.28,885.987 456.839,895.728 457.399,886.646 457.958,845.678 458.517,868.226 459.076,864.665 459.636,861.379 460.195,887.633 460.754,882.067 461.313,855.945 461.873,832.697 462.432,827.11 462.991,821.93 463.55,801.286 464.11,783.927 464.669,783.181 465.228,800.073 465.787,765.629 466.347,782.659 466.906,795.714 467.465,791.684 468.024,789.583 468.584,802.086 469.143,783.713 469.702,762.052 470.261,761.949 470.821,759.53 471.38,740.545 471.939,738.944 472.498,737.606 473.058,718.904 473.617,690.348 474.176,694.613 474.735,695.993 475.295,714.767 475.854,717.895 476.413,726.078 476.972,699.47 477.532,714.493 478.091,699.899 478.65,684.303 479.209,719.543 479.769,717.347 480.328,716.768 480.887,731.699 481.446,747.682 482.006,765.704 482.565,780.224 483.124,758.898 483.683,743.609 484.243,746.643 484.802,762.755 485.361,744.731 485.92,713.003 486.48,711.845 487.039,696.939 487.598,665.477 488.157,652.484 488.717,659.07 489.276,649.949 489.835,656.3 490.394,645.916 490.954,619.485 491.513,625.78 492.072,633.096 492.631,622.625 493.191,661.736 493.75,647.757 494.309,618.469 494.868,623.876 495.428,647.086 495.987,637.872 496.546,606.541 497.105,595.099 497.665,603.445 498.224,626.317 498.783,634.607 499.342,691.977 499.902,679.735 500.461,684.391 501.02,700.043 501.579,715.448 502.139,738.372 502.698,754.22 503.257,751.652 503.816,737.405 504.376,798.681 504.935,809.604 505.494,823.227 506.053,832.884 506.613,807.871 507.172,803.248 507.731,797.61 508.29,796.163 508.85,808.2 509.409,756.54 509.968,739.85 510.527,736.974 511.087,738.499 511.646,753.518 512.205,735.988 512.764,718.067 513.324,685.887 513.883,688.562 514.442,659.327 515.001,692.983 515.561,711.822 516.12,679.23 516.679,681.575 517.238,720.009 517.798,705.181 518.357,722.471 518.916,723.344 519.475,740.434 520.035,741.764 520.594,739.79 521.153,722.568 521.712,705.6 522.272,708.641 522.831,741.271 523.39,731.745 523.949,749.659 524.509,767.95 525.068,794.657 525.627,790.78 526.186,820.529 526.746,814.877 527.305,861.951 527.864,854.455 528.423,833.085 528.983,845.655 529.542,855.76 530.101,850.259 530.66,860.058 531.22,839.385 531.779,819.868 532.338,832.001 532.897,797.051 533.457,793.281 534.016,788.682 534.575,783.267 535.134,729.251 535.694,744.978 536.253,743.083 536.812,740.46 537.371,755.519 537.931,765.811 538.49,763.859 539.049,757.114 539.608,785.744 540.168,751.049 540.727,767.077 541.286,764.078 541.845,759.928 542.405,756.943 542.964,739.469 543.523,754.113 544.082,753.508 544.642,782.333 545.201,794.625 545.76,806.058 546.319,784.667 546.879,796.038 547.438,778.848 547.997,838.28 548.556,833.737 549.116,826.731 549.675,839.432 550.234,832.646 550.793,829.887 551.353,821.787 551.912,767.437 552.471,766.899 553.031,748.788 553.59,764.547 554.149,762.396 554.708,727.982 555.268,727.216 555.827,740.656 556.386,773.933 556.945,739.829 557.505,726.911 558.064,727.543 558.623,708.049 559.182,710.25 559.742,709.314 560.301,727.446 560.86,757.013 561.419,740.443 561.979,754.79 562.538,736.556 563.097,747.32 563.656,665.123 564.216,683.908 564.775,682.875 565.334,716.176 565.893,700.371 566.453,699.702 567.012,714.537 567.571,745.612 568.13,743.121 568.69,740.99 569.249,738.666 569.808,737.153 570.367,737.379 570.927,737.096 571.486,731.905 572.045,730.153 572.604,699.189 573.164,685.92 573.723,702.818 574.282,736.38 574.841,720.986 575.401,708.731 575.96,721.893 576.519,690.332 577.078,724.544 577.638,755.795 578.197,705.473 578.756,675.321 579.315,678.015 579.875,664.7 580.434,650.553 580.993,655.875 581.552,659.182 582.112,678.107 582.671,666.428 583.23,648.369 583.789,635.556 584.349,643.607 584.908,679.135 585.467,681.635 586.026,682.237 586.586,652.107 587.145,639.297 587.704,659.876 588.263,646.423 588.823,634.096 589.382,624.926 589.941,628.689 590.5,618.438 591.06,622.987 591.619,628.218 592.178,650.106 592.737,652.703 593.297,656.551 593.856,692.18 594.415,725.593 594.974,727.383 595.534,738.943 596.093,739.673 596.652,733.815 597.211,729.743 597.771,728.332 598.33,741.295 598.889,726.85 599.448,692.526 600.008,698.009 600.567,684.579 601.126,656.629 601.685,660.783 602.245,663.897 602.804,711.545 603.363,730.366 603.922,760.085 604.482,791.584 605.041,760.059 605.6,757.324 606.159,753.272 606.719,766.852 607.278,761.895 607.837,774.896 608.396,788.129 608.956,801.223 609.515,801.079 610.074,780.27 610.633,774.507 611.193,798.999 611.752,775.878 612.311,757.755 612.87,756.666 613.43,770.138 613.989,750.744 614.548,783.744 615.107,764.697 615.667,712.31 616.226,732.362 616.785,747.574 617.344,746.947 617.904,776.097 618.463,737.524 619.022,735.006 619.581,732.225 620.141,728.865 620.7,759.073 621.259,772.723 621.818,771.704 622.378,753.149 622.937,747.812 623.496,746.178 624.055,759.723 624.615,775.434 625.174,770.905 625.733,766.029 626.292,776.52 626.852,788.178 627.411,782.19 627.97,779.666 628.529,774.382 629.089,773.294 629.648,751.852 630.207,769.403 630.766,779.8 631.326,777.159 631.885,776.214 632.444,769.523 633.003,763.57 633.563,759.85 634.122,743.705 634.681,774.369 635.24,788.984 635.8,785.819 636.359,786.745 636.918,764.695 637.477,762.772 638.037,775.721 638.596,785.895 639.155,764.683 639.714,761.408 640.274,758.779 640.833,800.963 641.392,797.948 641.951,776.003 642.511,771.237 643.07,752.826 643.629,734.721 644.188,719.343 644.748,737.387 645.307,751.22 645.866,744.758 646.425,740.289 646.985,754.547 647.544,750.563 648.103,747.776 648.662,747.902 649.222,696.187 649.781,695.015 650.34,678.416 650.899,711.175 651.459,726.734 652.018,707.101 652.577,688.97 653.136,671.297 653.696,656.034 654.255,627.037 654.814,627.406 655.373,661.918 655.933,681.489 656.492,681.573 657.051,632.631 657.61,651.957 658.17,606.338 658.729,609.499 659.288,630.612 659.847,650.057 660.407,655.499 660.966,641.128 661.525,644.482 662.084,629.059 662.644,633.065 663.203,620.185 663.762,625.689 664.321,630.574 664.881,665.429 665.44,682.701 665.999,669.304 666.558,671.571 667.118,703.618 667.677,689.059 668.236,686.772 668.795,683.292 669.355,699.929 669.914,703.163 670.473,704.316 671.032,721.763 671.592,701.036 672.151,701.886 672.71,703.946 673.269,718.211 673.829,719.632 674.388,670.062 674.947,656.123 675.506,657.41 676.066,691.632 676.625,689.419 677.184,738.152 677.743,736.414 678.303,735.999 678.862,766.912 679.421,762.311 679.981,740.811 680.54,755.957 681.099,757.605 681.658,723.724 682.218,702.878 682.777,686.949 683.336,702.918 683.895,703.683 684.455,686.41 685.014,683.714 685.573,669.498 686.132,659.083 686.692,678.018 687.251,694.58 687.81,676.674 688.369,660.748 688.929,647.241 689.488,633.135 690.047,634.877 690.606,604.69 691.166,643.011 691.725,660.693 692.284,663.104 692.843,697.658 693.403,746.79 693.962,716.142 694.521,718.29 695.08,686.66 695.64,688.18 696.199,720.99 696.758,731.717 697.317,759.669 697.877,769.689 698.436,765.879 698.995,797.587 699.554,791.683 700.114,787.331 700.673,781.467 701.232,745.516 701.791,743.259 702.351,758.183 702.91,788.46 703.469,767.62 704.028,750.104 704.588,733.285 705.147,730.62 705.706,727.14 706.265,740.372 706.825,704.178 707.384,718.474 707.943,672.168 708.502,657.111 709.062,657.647 709.621,677.113 710.18,693.807 710.739,679.488 711.299,664.621 711.858,665.879 712.417,645.668 712.976,650.116 713.536,667.028 714.095,683.316 714.654,653.527 715.213,656.534 715.773,656.762 716.332,656.404 716.891,664.118 717.45,664.33 718.01,649.18 718.569,618.151 719.128,655.067 719.687,643.834 720.247,650.789 720.806,618.859 721.365,624.714 721.924,639.981 722.484,646.568 723.043,635.391 723.602,622.71 724.161,624.403 724.721,658.572 725.28,659.842 725.839,648.433 726.398,668.764 726.958,700.709 727.517,714.55 728.076,698.442 728.635,728.659 729.195,678.153 729.754,694.007 730.313,723.631 730.872,720.813 731.432,720.357 731.991,717.301 732.55,744.923 733.109,742.219 733.669,739.111 734.228,750.201 734.787,746.466 735.346,738.449 735.906,733.503 736.465,749.741 737.024,731.454 737.583,696.429 738.143,693.66 738.702,664.079 739.261,666.583 739.82,698.866 740.38,682.683 740.939,699.957 741.498,687.848 742.057,669.903 742.617,669.713 743.176,715.588 743.735,715.364 744.294,715.764 744.854,683.186 745.413,687.594 745.972,686.302 746.531,703.662 747.091,721.386 747.65,734.048 748.209,732.299 748.768,731.559 749.328,731.041 749.887,743.906 750.446,738.598 751.005,740.215 751.565,738.687 752.124,739.536 752.683,736.636 753.242,681.242 753.802,713.743 754.361,696.988 754.92,727.24 755.479,722.845 756.039,737.094 756.598,735.829 757.157,735.674 757.716,682.509 758.276,653.752 758.835,687.192 759.394,720.867 759.953,735.822 760.513,683.471 761.072,718.494 761.631,716.415 762.19,716.566 762.75,730.331 763.309,744.133 763.868,742.397 764.427,708.476 764.987,690.61 765.546,624.504 766.105,625.736 766.664,612.107 767.224,618.149 767.783,639.574 768.342,674.524 768.901,660.138 769.461,680.48 770.02,697.957 770.579,683.296 771.138,664.832 771.698,667.187 772.257,733.223 772.816,714.783 773.375,684.474 773.935,668.381 774.494,670.724 775.053,667.056 775.612,703.03 776.172,719.528 776.731,720.039 777.29,685.026 777.849,653.551 778.409,670.587 778.968,685.908 779.527,683.546 780.086,683.229 780.646,703.378 781.205,688.601 781.764,687.147 782.323,656.714 782.883,674.965 783.442,691.831 784.001,706.889 784.56,706.801 785.12,723.333 785.679,723.461 786.238,736.742 786.797,766.208 787.357,775.572 787.916,789.056 788.475,752.142 789.034,779.37 789.594,755.958 790.153,767.252 790.712,731.169 791.271,743.671 791.831,773.791 792.39,782.498 792.949,791.226 793.508,831.445 794.068,841.941 794.627,803.601 795.186,798.305 795.745,759.865 796.305,754.072 796.864,731.247 797.423,711.58 797.982,706.396 798.542,721.374 799.101,739.693 799.66,721.244 800.219,667.33 800.779,666.582 801.338,609.037 801.897,612.465 802.456,615.778 803.016,621.361 803.575,611.187 804.134,650.214 804.693,700.363 805.253,732.91 805.812,780.63 806.371,758.548 806.931,769.875 807.49,748.739 808.049,729.78 808.608,727.283 809.168,742.18 809.727,706.348 810.286,706.471 810.845,720.736 811.405,658.627 811.964,645.486 812.523,630.862 813.082,615.704 813.642,605.49 814.201,578.939 814.76,569.501 815.319,606.679 815.879,575.728 816.438,612.139 816.997,645.487 817.556,649.246 818.116,620.5 818.675,624.868 819.234,627.951 819.793,648.431 820.353,651.817 820.912,655.181 821.471,655.934 822.03,629.414 822.59,660.099 823.149,645.116 823.708,648.11 824.267,648.738 824.827,651.336 825.386,654.132 825.945,673.878 826.504,658.065 827.064,662.095 827.623,660.963 828.182,666.723 828.741,682.725 829.301,682.864 829.86,665.986 830.419,667.043 830.978,699.069 831.538,664.936 832.097,665.461 832.656,652.883 833.215,655.7 833.775,707.007 834.334,658.954 834.893,611.476 835.452,598.851 836.012,603.571 836.571,640.453 837.13,676.301 837.689,694.017 838.249,711.177 838.808,724.889 839.367,725 839.926,721.955 840.486,688.497 841.045,620.169 841.604,640.64 842.163,662.734 842.723,664.882 843.282,666.021 843.841,669.923 844.4,687.657 844.96,719.136 845.519,699.667 846.078,696.686 846.637,663.618 847.197,666.368 847.756,649.981 848.315,623.03 848.874,625.913 849.434,643.029 849.993,644.884 850.552,646.823 851.111,634.09 851.671,655.611 852.23,645.181 852.789,677.962 853.348,675.535 853.908,663.075 854.467,646.165 855.026,612.868 855.585,616.22 856.145,651.602 856.704,670.567 857.263,670.073 857.822,688.184 858.382,657.93 858.941,657.939 859.5,674.057 860.059,659.488 860.619,678.432 861.178,678.412 861.737,662.513 862.296,644.875 862.856,643.629 863.415,680.779 863.974,651.623 864.533,654.608 865.093,653.598 865.652,686.874 866.211,703.871 866.77,670.005 867.33,656.19 867.889,642.194 868.448,647.14 869.007,684.928 869.567,672.427 870.126,690.752 870.685,692.849 871.244,673.637 871.804,642.051 872.363,661.313 872.922,678.489 873.481,665.007 874.041,669.079 874.6,687.029 875.159,705.413 875.718,722.607 876.278,689.381 876.837,693.243 877.396,693.47 877.955,708.897 878.515,708.576 879.074,693.953 879.633,710.706 880.192,724.303 880.752,723.388 881.311,705.953 881.87,738.059 882.429,720.886 882.989,750.753 883.548,777.577 884.107,789.441 884.666,780.011 885.226,774.307 885.785,754.172 886.344,735.165 886.903,762.523 887.463,822.857 888.022,828.378 888.581,821.445 889.14,815.148 889.7,794.003 890.259,787.813 890.818,766.95 891.377,733.014 891.937,749.492 892.496,712.22 893.055,727.777 893.614,775.324 894.174,752.659 894.733,717.501 895.292,712.753 895.851,708.293 896.411,706.816 896.97,707.898 897.529,705.62 898.088,723.66 898.648,773.499 899.207,766.069 899.766,741.428 900.325,719.977 900.885,702.999 901.444,715.793 902.003,716.119 902.562,718.194 903.122,716.187 903.681,716.467 904.24,718.013 904.799,716.148 905.359,684.739 905.918,713.844 906.477,726.953 907.036,723.013 907.596,702.235 908.155,685.499 908.714,701.416 909.273,702.156 909.833,699.679 910.392,696.253 910.951,714.384 911.51,726.091 912.07,708.68 912.629,686.756 913.188,687.897 913.747,689.206 914.307,722.082 914.866,684.196 915.425,669.679 915.984,656.762 916.544,659.364 917.103,675.682 917.662,692.374 918.221,694.652 918.781,692.003 919.34,689.152 919.899,719.413 920.458,748.531 921.018,777.083 921.577,786.802 922.136,761.044 922.695,754.86 923.255,751.029 923.814,729.674 924.373,725.888 924.932,709.339 925.492,739.454 926.051,733.594 926.61,744.656 927.169,676.034 927.729,708.166 928.288,687.86 928.847,688.779 929.406,689.128 929.966,689.052 930.525,705.838 931.084,706.074 931.644,707.702 932.203,687.744 932.762,736.733 933.321,733.833 933.881,731.73 934.44,742.208 934.999,691.104 935.558,707.542 936.118,688.805 936.677,722.788 937.236,703.2 937.795,720.476 938.355,717.913 938.914,728.086 939.473,708.583 940.032,710.31 940.592,690.405 941.151,722.602 941.71,720.154 942.269,733.8 942.829,719.898 943.388,699.193 943.947,679.908 944.506,693.056 945.066,680.076 945.625,646.363 946.184,647.696 946.743,630.759 947.303,617.446 947.862,638.828 948.421,640.882 948.98,641.726 949.54,615.473 950.099,619.678 950.658,604.113 951.217,607.243 951.777,627.672 952.336,618.754 952.895,673.5 953.454,655.945 954.014,678.359 954.573,657.867 955.132,677.852 955.691,675.925 956.251,674.161 956.81,676.874 957.369,691.527 957.928,674.447 958.488,675.056 959.047,702.627 959.606,717.942 960.165,686.439 960.725,671.142 961.284,705.155 961.843,738.57 962.402,716.138 962.962,712.937 963.521,730.857 964.08,729.095 964.639,743.427 965.199,738.148 965.758,735.853 966.317,748.253 966.876,762.82 967.436,790.825 967.995,817.088 968.554,841.954 969.113,803.042 969.673,799.66 970.232,811.431 970.791,804.692 971.35,797.988 971.91,773.022 972.469,752.786 973.028,697.364 973.587,724.837 974.147,707.479 974.706,705.703 975.265,688.936 975.824,654.556 976.384,691.72 976.943,661.255 977.502,628.812 978.061,582.478 978.621,585.099 979.18,589.856 979.739,644.341 980.298,643.763 980.858,659.606 981.417,661.12 981.976,679.7 982.535,697.413 983.095,696.174 983.654,695.457 984.213,708.08 984.772,703.594 985.332,686.841 985.891,670.665 986.45,672.548 987.009,690.208 987.569,721.636 988.128,701.469 988.687,718.876 989.246,716.681 989.806,700.028 990.365,682.204 990.924,699.221 991.483,684.923 992.043,664.66 992.602,631.095 993.161,653.116 993.72,608.349 994.28,611.934 994.839,647.301 995.398,650.225 995.957,634.056 996.517,636.65 997.076,641.05 997.635,658.373 998.194,673.313 998.754,672.624 999.313,706.088 999.872,704.419 1000.43,688.428 1000.99,674.26 1001.55,691.981 1002.11,689.698 1002.67,703.858 1003.23,671.602 1003.79,653.123 1004.35,658.2 1004.91,629.146 1005.46,648.028 1006.02,650.198 1006.58,649.943 1007.14,699.805 1007.7,699.957 1008.26,710.541 1008.82,659.229 1009.38,674.081 1009.94,661.239 1010.5,664.932 1011.06,668.614 1011.62,638.654 1012.18,642.354 1012.73,646.526 1013.29,630.661 1013.85,612.75 1014.41,619.264 1014.97,638.693 1015.53,624.003 1016.09,644.371 1016.65,677.092 1017.21,738.455 1017.77,721.261 1018.33,704.715 1018.89,650.815 1019.45,635.136 1020.01,634.74 1020.56,637.363 1021.12,579.587 1021.68,584.428 1022.24,575.306 1022.8,566.086 1023.36,574.927 1023.92,563.763 1024.48,570.394 1025.04,579.317 1025.6,554.116 1026.16,543.762 1026.72,553.316 1027.28,561.437 1027.83,620.188 1028.39,621.29 1028.95,626.46 1029.51,646.075 1030.07,650.317 1030.63,666.209 1031.19,649.98 1031.75,635.99 1032.31,638.407 1032.87,627.895 1033.43,601.495 1033.99,607.606 1034.55,595.147 1035.1,596.297 1035.66,584.27 1036.22,608.397 1036.78,597.3 1037.34,570.48 1037.9,593.475 1038.46,580.406 1039.02,591.657 1039.58,615.545 1040.14,605.951 1040.7,562.03 1041.26,617.281 1041.82,641.574 1042.38,644.19 1042.93,647.851 1043.49,666.78 1044.05,639.26 1044.61,624.934 1045.17,644.983 1045.73,644.886 1046.29,662.626 1046.85,679.705 1047.41,661.321 1047.97,710.628 1048.53,709.425 1049.09,676.334 1049.65,660.045 1050.2,627.185 1050.76,610.467 1051.32,627.917 1051.88,632.445 1052.44,651.944 1053,654.957 1053.56,626.691 1054.12,661.346 1054.68,645.568 1055.24,681.821 1055.8,695.845 1056.36,694.382 1056.92,680.332 1057.48,660.455 1058.03,655.979 1058.59,658.808 1059.15,624.718 1059.71,625.452 1060.27,599.578 1060.83,602.154 1061.39,623.234 1061.95,607.506 1062.51,662.129 1063.07,599.875 1063.63,602.481 1064.19,607.223 1064.75,596.649 1065.3,618.013 1065.86,639.6 1066.42,626.782 1066.98,650.493 1067.54,635.675 1068.1,638.899 1068.66,612.079 1069.22,620.771 1069.78,608.495 1070.34,629.891 1070.9,618.878 1071.46,638.733 1072.02,636.26 1072.57,624.273 1073.13,609.913 1073.69,610.25 1074.25,613.49 1074.81,618.727 1075.37,623.505 1075.93,661.934 1076.49,660.059 1077.05,625.35 1077.61,595.603 1078.17,634.219 1078.73,655.962 1079.29,671.633 1079.85,674.233 1080.4,674.051 1080.96,677.713 1081.52,694.074 1082.08,707.299 1082.64,694.449 1083.2,713.817 1083.76,728.055 1084.32,728.977 1084.88,713.843 1085.44,679.284 1086,680.311 1086.56,678.241 1087.12,681.249 1087.67,667.809 1088.23,654.055 1088.79,703.779 1089.35,720.326 1089.91,733.791 1090.47,729.497 1091.03,777.518 1091.59,772.738 1092.15,800.646 1092.71,796.767 1093.27,776.122 1093.83,757.492 1094.39,738.291 1094.94,764.529 1095.5,759.844 1096.06,740.769 1096.62,749.91 1097.18,761.118 1097.74,743.339 1098.3,724.412 1098.86,736.475 1099.42,716.891 1099.98,698.609 1100.54,713.325 1101.1,692.905 1101.66,694.581 1102.22,630.822 1102.77,650.997 1103.33,620.289 1103.89,625.367 1104.45,627.692 1105.01,613.135 1105.57,618.519 1106.13,603.915 1106.69,622.191 1107.25,624.209 1107.81,642.461 1108.37,645.678 1108.93,647.13 1109.49,676.486 1110.04,674.552 1110.6,689.62 1111.16,722.028 1111.72,738.176 1112.28,753.264 1112.84,781.726 1113.4,825.182 1113.96,768.606 1114.52,746.566 1115.08,743.986 1115.64,706.214 1116.2,706.802 1116.76,705.329 1117.31,634.282 1117.87,638.148 1118.43,641.029 1118.99,611.391 1119.55,598.541 1120.11,635.189 1120.67,605.701 1121.23,610.597 1121.79,631.526 1122.35,635.458 1122.91,624.828 1123.47,649.286 1124.03,681.874 1124.59,680.164 1125.14,731.119 1125.7,777.692 1126.26,791.972 1126.82,787.459 1127.38,794.053 1127.94,803.501 1128.5,796.54 1129.06,805.871 1129.62,783.159 1130.18,792.748 1130.74,787.949 1131.3,769.076 1131.86,786.097 1132.41,797.125 1132.97,777.626 1133.53,787.538 1134.09,815.16 1134.65,823.224 1135.21,800.468 1135.77,796.975 1136.33,838.053 1136.89,864.631 1137.45,824.275 1138.01,863.193 1138.57,835.784 1139.13,827.34 1139.68,835.83 1140.24,846.874 1140.8,810.131 1141.36,774.285 1141.92,767.039 1142.48,778.855 1143.04,774.791 1143.6,750.604 1144.16,717.43 1144.72,701.819 1145.28,719.596 1145.84,698.563 1146.4,713.77 1146.96,698.112 1147.51,663.617 1148.07,667.271 1148.63,684.387 1149.19,731.479 1149.75,763.996 1150.31,746.711 1150.87,757.295 1151.43,788.067 1151.99,765.612 1152.55,726.417 1153.11,737.333 1153.67,736.389 1154.23,734.224 1154.78,731.839 1155.34,710.365 1155.9,705.886 1156.46,718.726 1157.02,716.081 1157.58,694.495 1158.14,630.818 1158.7,649.332 1159.26,679.308 1159.82,714.099 1160.38,696.954 1160.94,694.693 1161.5,712.663 1162.05,712.201 1162.61,694.517 1163.17,709.743 1163.73,705.145 1164.29,685.79 1164.85,700.712 1165.41,685.202 1165.97,670.439 1166.53,636.776 1167.09,652.528 1167.65,638.755 1168.21,674.246 1168.77,657.778 1169.33,625.041 1169.88,628.994 1170.44,649.35 1171,666.675 1171.56,683.902 1172.12,667.392 1172.68,668.793 1173.24,652.224 1173.8,639.106 1174.36,660.261 1174.92,626.242 1175.48,647.18 1176.04,634.602 1176.6,655.315 1177.15,674.908 1177.71,662.661 1178.27,663.213 1178.83,664.847 1179.39,649.805 1179.95,634.611 1180.51,640.261 1181.07,657.82 1181.63,643.677 1182.19,631.216 1182.75,636.198 1183.31,640.494 1183.87,627.296 1184.43,629.571 1184.98,620.075 1185.54,623.427 1186.1,611.137 1186.66,614.64 1187.22,637.13 1187.78,654.99 1188.34,672.882 1188.9,674.053 1189.46,707.004 1190.02,719.827 1190.58,719.704 1191.14,716.953 1191.7,694.781 1192.25,725.622 1192.81,707.416 1193.37,706.771 1193.93,710.428 1194.49,692.782 1195.05,708.19 1195.61,707.88 1196.17,677.004 1196.73,696.895 1197.29,678.902 1197.85,662.135 1198.41,678.83 1198.97,679.363 1199.52,680.728 1200.08,678.991 1200.64,661.349 1201.2,632.299 1201.76,624.924 1202.32,707.985 1202.88,705.803 1203.44,717.942 1204,733.599 1204.56,731.659 1205.12,732.116 1205.68,713.231 1206.24,680.998 1206.8,679.024 1207.35,678.083 1207.91,693.759 1208.47,692.42 1209.03,643.17 1209.59,675.495 1210.15,676.766 1210.71,690.851 1211.27,704.248 1211.83,657.124 1212.39,673.682 1212.95,655.754 1213.51,657.091 1214.07,676.718 1214.62,709.397 1215.18,725.568 1215.74,694.652 1216.3,711.588 1216.86,711.99 1217.42,709.852 1217.98,694.06 1218.54,692.806 1219.1,680.847 1219.66,662.572 1220.22,679.259 1220.78,712.261 1221.34,692.39 1221.89,724.828 1222.45,755.244 1223.01,767.454 1223.57,765.503 1224.13,811.222 1224.69,805.531 1225.25,829.836 1225.81,805.527 1226.37,771.436 1226.93,736.446 1227.49,762.039 1228.05,791.142 1228.61,770.163 1229.17,779.33 1229.72,800.037 1230.28,793.405 1230.84,788.269 1231.4,785.415 1231.96,764.656 1232.52,759.504 1233.08,757.215 1233.64,753.515 1234.2,752.845 1234.76,735.453 1235.32,748.358 1235.88,763.472 1236.44,758.793 1236.99,738.127 1237.55,731.338 1238.11,729.965 1238.67,708.751 1239.23,724.988 1239.79,638.66 1240.35,640.922 1240.91,658.286 1241.47,659.523 1242.03,677.305 1242.59,661.969 1243.15,694.776 1243.71,678.886 1244.26,665.955 1244.82,683.883 1245.38,639.069 1245.94,642.438 1246.5,629.899 1247.06,667.343 1247.62,652.95 1248.18,634.782 1248.74,652.499 1249.3,668.216 1249.86,652.998 1250.42,652.918 1250.98,654.325 1251.54,669.386 1252.09,639.392 1252.65,674.779 1253.21,674.398 1253.77,658.511 1254.33,669.143 1254.89,667.14 1255.45,681.767 1256.01,664.603 1256.57,679.206 1257.13,663.948 1257.69,682.677 1258.25,699.602 1258.81,702.161 1259.36,717.141 1259.92,681.306 1260.48,679.32 1261.04,644.583 1261.6,644.233 1262.16,629.56 1262.72,631.802 1263.28,617.357 1263.84,636.912 1264.4,591.245 1264.96,595.152 1265.52,570.604 1266.08,593.798 1266.63,612.444 1267.19,598.872 1267.75,622.261 1268.31,677.933 1268.87,678.971 1269.43,681.504 1269.99,682.431 1270.55,648.303 1271.11,647.481 1271.67,617.132 1272.23,636.452 1272.79,639.809 1273.35,626.238 1273.91,614.566 1274.46,605.363 1275.02,590.673 1275.58,595.466 1276.14,583.79 1276.7,620.916 1277.26,624.852 1277.82,614.619 1278.38,617.958 1278.94,589.784 1279.5,563.301 1280.06,584.128 1280.62,586.087 1281.18,607.17 1281.73,611.018 1282.29,615.248 1282.85,618.656 1283.41,636.712 1283.97,669.972 1284.53,668.831 1285.09,667.44 1285.65,716.323 1286.21,692.864 1286.77,672.288 1287.33,654.278 1287.89,671.883 1288.45,657.867 1289,674.395 1289.56,671.346 1290.12,689.162 1290.68,686.679 1291.24,720.831 1291.8,716.281 1292.36,734.893 1292.92,751.189 1293.48,745.648 1294.04,712.437 1294.6,712.63 1295.16,706.237 1295.72,670.483 1296.28,673.656 1296.83,642.482 1297.39,626.657 1297.95,615.605 1298.51,621.224 1299.07,625.704 1299.63,608.446 1300.19,628.452 1300.75,632.033 1301.31,635.866 1301.87,637.063 1302.43,672.611 1302.99,691.612 1303.55,694.5 1304.1,676.705 1304.66,694.278 1305.22,630.96 1305.78,619.483 1306.34,625.196 1306.9,628.158 1307.46,600.964 1308.02,617.717 1308.58,634.633 1309.14,657.449 1309.7,656.502 1310.26,677.279 1310.82,675.877 1311.38,678.44 1311.93,679.644 1312.49,648.222 1313.05,616.808 1313.61,651.553 1314.17,687.257 1314.73,687.774 1315.29,701.084 1315.85,680.774 1316.41,682.369 1316.97,682.037 1317.53,682.558 1318.09,693.333 1318.65,729.206 1319.2,727.725 1319.76,692.288 1320.32,706.314 1320.88,706.309 1321.44,709.457 1322,693.86 1322.56,692.288 1323.12,706.767 1323.68,723.049 1324.24,740.403 1324.8,754.594 1325.36,735.028 1325.92,716.14 1326.47,696.719 1327.03,744.089 1327.59,741.246 1328.15,720.241 1328.71,686.309 1329.27,701.291 1329.83,697.009 1330.39,681.443 1330.95,682.094 1331.51,679.194 1332.07,712.301 1332.63,743.194 1333.19,757.707 1333.75,754.456 1334.3,722.845 1334.86,753.576 1335.42,696.735 1335.98,679.739 1336.54,694.931 1337.1,693.796 1337.66,674.897 1338.22,639.914 1338.78,660.186 1339.34,646.144 1339.9,693.33 1340.46,691.396 1341.02,662.097 1341.57,645.153 1342.13,662.122 1342.69,714.222 1343.25,710.944 1343.81,711.737 1344.37,711.056 1344.93,709.981 1345.49,745.876 1346.05,708.83 1346.61,676.723 1347.17,694.69 1347.73,712.038 1348.29,677.455 1348.84,695.417 1349.4,675.138 1349.96,670.499 1350.52,672.354 1351.08,660.484 1351.64,645.39 1352.2,668.897 1352.76,684.1 1353.32,666.794 1353.88,633.757 1354.44,623.029 1355,608.262 1355.56,641.941 1356.12,645.934 1356.67,631.948 1357.23,666.662 1357.79,699.386 1358.35,696.258 1358.91,712.317 1359.47,695.447 1360.03,710.844 1360.59,694.787 1361.15,679.805 1361.71,680.575 1362.27,700.017 1362.83,715.121 1363.39,700.399 1363.94,718.972 1364.5,720.857 1365.06,736.795 1365.62,717.708 1366.18,697.92 1366.74,679.965 1367.3,690.56 1367.86,720.795 1368.42,732.722 1368.98,731.54 1369.54,727.989 1370.1,707.93 1370.66,723.588 1371.21,718.592 1371.77,685.987 1372.33,717.369 1372.89,703.357 1373.45,702.831 1374.01,670.806 1374.57,691.958 1375.13,691.419 1375.69,707.29 1376.25,692.73 1376.81,759.493 1377.37,726.21 1377.93,721.498 1378.49,717.567 1379.04,667.911 1379.6,670.483 1380.16,672.878 1380.72,654.48 1381.28,654.969 1381.84,688.601 1382.4,705.788 1382.96,704.831 1383.52,702.379 1384.08,684.618 1384.64,696.202 1385.2,696.593 1385.76,647.256 1386.31,620.676 1386.87,624.441 1387.43,659.656 1387.99,659.182 1388.55,674.49 1389.11,676.075 1389.67,647.687 1390.23,681.382 1390.79,684.813 1391.35,666.313 1391.91,649.408 1392.47,667.894 1393.03,671.227 1393.58,654.525 1394.14,661.103 1394.7,648.205 1395.26,651.244 1395.82,622.686 1396.38,609.53 1396.94,616.855 1397.5,654.917 1398.06,657.956 1398.62,642.18 1399.18,643.661 1399.74,628.325 1400.3,646.446 1400.86,679.278 1401.41,697.216 1401.97,699.532 1402.53,699.822 1403.09,681.749 1403.65,683.886 1404.21,685.146 1404.77,683.231 1405.33,683.112 1405.89,734.081 1406.45,729.225 1407.01,742.559 1407.57,759.342 1408.13,787.561 1408.68,779.928 1409.24,788.508 1409.8,769.911 1410.36,730.457 1410.92,728.819 1411.48,727.102 1412.04,738.924 1412.6,730.904 1413.16,710.86 1413.72,725.911 1414.28,738.31 1414.84,720.267 1415.4,720.587 1415.95,706.07 1416.51,707.182 1417.07,691.811 1417.63,724.275 1418.19,708.296 1418.75,710.454 1419.31,726.543 1419.87,706.798 1420.43,689.167 1420.99,701.182 1421.55,713.59 1422.11,696.152 1422.67,712.559 1423.23,706.605 1423.78,640.296 1424.34,659.59 1424.9,642.577 1425.46,644.878 1426.02,662.603 1426.58,677.127 1427.14,681.297 1427.7,683.26 1428.26,667.671 1428.82,667.592 1429.38,681.494 1429.94,647.981 1430.5,668.688 1431.05,671.164 1431.61,617.018 1432.17,621.399 1432.73,640.131 1433.29,658.621 1433.85,693.983 1434.41,708.939 1434.97,708.539 1435.53,721.413 1436.09,688.182 1436.65,684.868 1437.21,668.856 1437.77,683.4 1438.33,670.055 1438.88,667.195 1439.44,651.214 1440,655.205 1440.56,638.221 1441.12,621.407 1441.68,606.567 1442.24,628.433 1442.8,649.227 1443.36,648.532 1443.92,666.015 1444.48,715.562 1445.04,711.618 1445.6,698.416 1446.15,694.685 1446.71,661.419 1447.27,678.908 1447.83,743.257 1448.39,769.779 1448.95,763.485 1449.51,743.725 1450.07,708.753 1450.63,690.252 1451.19,705.431 1451.75,698.101 1452.31,682.219 1452.87,665.664 1453.42,682.98 1453.98,617.924 1454.54,637.868 1455.1,657.166 1455.66,606.605 1456.22,563.386 1456.78,633.854 1457.34,619.887 1457.9,606.943 1458.46,626.727 1459.02,648.604 1459.58,634.347 1460.14,622.251 1460.7,641.681 1461.25,643.795 1461.81,663.389 1462.37,663.521 1462.93,634.433 1463.49,654.289 1464.05,639.644 1464.61,658.028 1465.17,677.018 1465.73,631.926 1466.29,635.414 1466.85,653.644 1467.41,653.892 1467.97,637.641 1468.52,641.413 1469.08,625.718 1469.64,609.106 1470.2,627.866 1470.76,627.61 1471.32,647.142 1471.88,616.41 1472.44,620.378 1473,620.759 1473.56,622.399 1474.12,656.957 1474.68,626.201 1475.24,645.85 1475.79,609 1476.35,612.321 1476.91,618.874 1477.47,622.982 1478.03,639.259 1478.59,622.935 1479.15,591.22 1479.71,598.762 1480.27,599.411 1480.83,619.341 1481.39,623.985 1481.95,595.211 1482.51,601.412 1483.07,592.928 1483.62,585.984 1484.18,639.045 1484.74,643.897 1485.3,695.05 1485.86,680.269 1486.42,667.729 1486.98,669.46 1487.54,685.271 1488.1,687.517 1488.66,705.122 1489.22,687.758 1489.78,680.328 1490.34,661.558 1490.89,663.547 1491.45,682.19 1492.01,666.859 1492.57,667.354 1493.13,673.427 1493.69,693.729 1494.25,692.686 1494.81,709.985 1495.37,725.102 1495.93,737.238 1496.49,730.844 1497.05,696.416 1497.61,699.705 1498.16,650.81 1498.72,650.468 1499.28,654.537 1499.84,690.458 1500.4,703.686 1500.96,750.32 1501.52,745.117 1502.08,725.493 1502.64,737.574 1503.2,749.24 1503.76,728.579 1504.32,711.705 1504.88,709.671 1505.44,708.596 1505.99,708.078 1506.55,707.037 1507.11,738.301 1507.67,754.472 1508.23,785.611 1508.79,781.035 1509.35,775.575 1509.91,771.187 1510.47,766.308 1511.03,730.999 1511.59,726.738 1512.15,727.091 1512.71,742.215 1513.26,754.201 1513.82,762.36 1514.38,760.833 1514.94,724.795 1515.5,752.042 1516.06,779.35 1516.62,803.957 1517.18,797.856 1517.74,774.06 1518.3,751.99 1518.86,717.294 1519.42,714.81 1519.98,728.621 1520.53,741.871 1521.09,753.279 1521.65,700.712 1522.21,685.029 1522.77,684.407 1523.33,697.187 1523.89,680.202 1524.45,696.536 1525.01,698.085 1525.57,711.687 1526.13,708.418 1526.69,726.225 1527.25,752.889 1527.81,748.905 1528.36,664.865 1528.92,668.864 1529.48,687.424 1530.04,688.367 1530.6,703.932 1531.16,702.433 1531.72,684.979 1532.28,655.945 1532.84,657.556 1533.4,660.219 1533.96,630.129 1534.52,614.172 1535.08,635.161 1535.63,639.911 1536.19,626.718 1536.75,612.717 1537.31,647.134 1537.87,650.726 1538.43,652.846 1538.99,666.726 1539.55,666.974 1540.11,653.323 1540.67,639.477 1541.23,641.772 1541.79,660.546 1542.35,628.568 1542.9,634.558 1543.46,636.955 1544.02,622.409 1544.58,622.298 1545.14,607.337 1545.7,609.64 1546.26,597.836 1546.82,619.478 1547.38,590.709 1547.94,612.459 1548.5,631.792 1549.06,636.372 1549.62,659.328 1550.18,659.472 1550.73,678.044 1551.29,658.298 1551.85,625.786 1552.41,579.887 1552.97,602.868 1553.53,609.733 1554.09,649.092 1554.65,669.607 1555.21,670.89 1555.77,701.039 1556.33,685.65 1556.89,698.533 1557.45,686.73 1558,687.266 1558.56,687.151 1559.12,687.269 1559.68,669.661 1560.24,670.846 1560.8,639.681 1561.36,641.024 1561.92,624.651 1562.48,611.579 1563.04,628.718 1563.6,646 1564.16,650.367 1564.72,619.34 1565.28,604.838 1565.83,608.878 1566.39,662.411 1566.95,680.136 1567.51,678.509 1568.07,693.616 1568.63,677.903 1569.19,695.321 1569.75,714.76 1570.31,713.542 1570.87,665.927 1571.43,682.975 1571.99,649.779 1572.55,633.756 1573.1,648.823 1573.66,684.645 1574.22,669.634 1574.78,669.107 1575.34,671.513 1575.9,653.525 1576.46,668.557 1577.02,681.898 1577.58,682.855 1578.14,700.95 1578.7,666.741 1579.26,668.275 1579.82,716.115 1580.37,715.9 1580.93,728.728 1581.49,742.179 1582.05,725.546 1582.61,689.858 1583.17,687.704 1583.73,690.218 1584.29,687.093 1584.85,705.098 1585.41,716.404 1585.97,732.231 1586.53,745.911 1587.09,758.557 1587.65,770.506 1588.2,768.235 1588.76,764.382 1589.32,774.301 1589.88,802.701 1590.44,813.697 1591,822.221 1591.56,797.186 1592.12,790.022 1592.68,769.681 1593.24,813.051 1593.8,837.672 1594.36,811.087 1594.92,774.305 1595.47,786.137 1596.03,783.01 1596.59,793.5 1597.15,788.871 1597.71,784.955 1598.27,751.152 1598.83,763.137 1599.39,712.598 1599.95,710.176 1600.51,709.388 1601.07,751.939 1601.63,730.79 1602.19,791.553 1602.74,835.455 1603.3,811.352 1603.86,751.629 1604.42,794.432 1604.98,786.734 1605.54,800.486 1606.1,793.665 1606.66,775.305 1607.22,755.8 1607.78,668.402 1608.34,649.253 1608.9,669.941 1609.46,703.113 1610.02,687.694 1610.57,655.983 1611.13,640.223 1611.69,674.743 1612.25,690.853 1612.81,671.334 1613.37,721.824 1613.93,686.847 1614.49,719.436 1615.05,684.409 1615.61,715.504 1616.17,695.836 1616.73,723.68 1617.29,720.451 1617.84,686.887 1618.4,672.751 1618.96,606.054 1619.52,627.733 1620.08,647.448 1620.64,649.449 1621.2,682.762 1621.76,666.491 1622.32,685.742 1622.88,703.723 1623.44,703.289 1624,653.584 1624.56,684.868 1625.11,668.953 1625.67,623.991 1626.23,628.701 1626.79,631.266 1627.35,667.863 1627.91,666.449 1628.47,653.223 1629.03,638.539 1629.59,639.448 1630.15,623.861 1630.71,593.551 1631.27,583.113 1631.83,603.404 1632.39,609.004 1632.94,612.4 1633.5,633.092 1634.06,653.606 1634.62,652.558 1635.18,653.915 1635.74,671.177 1636.3,654.344 1636.86,654.617 1637.42,657.045 1637.98,658.866 1638.54,657.656 1639.1,639.82 1639.66,627.101 1640.21,643.492 1640.77,642.302 1641.33,626.276 1641.89,645.573 1642.45,632.964 1643.01,654.557 1643.57,656.189 1644.13,720.989 1644.69,720.3 1645.25,704.782 1645.81,703.227 1646.37,685.537 1646.93,749.44 1647.48,726.462 1648.04,706.983 1648.6,721.119 1649.16,700.626 1649.72,687.027 1650.28,703.628 1650.84,691.372 1651.4,676.014 1651.96,678.254 1652.52,648.241 1653.08,678.939 1653.64,694.826 1654.2,679.162 1654.76,694.244 1655.31,709.551 1655.87,724.395 1656.43,707.044 1656.99,687.337 1657.55,653.19 1658.11,623.118 1658.67,593.072 1659.23,567.997 1659.79,588.566 1660.35,544.364 1660.91,551.694 1661.47,558.688 1662.03,580.082 1662.58,602.816 1663.14,640.105 1663.7,594.271 1664.26,599.296 1664.82,589.838 1665.38,598.352 1665.94,602.61 1666.5,592.873 1667.06,614.032 1667.62,618.422 1668.18,606.684 1668.74,612.372 1669.3,615.279 1669.85,650.303 1670.41,670.992 1670.97,671.649 1671.53,656.999 1672.09,658.536 1672.65,679.593 1673.21,645.366 1673.77,630.434 1674.33,651.369 1674.89,668.794 1675.45,652.355 1676.01,653.661 1676.57,669.335 1677.13,656.443 1677.68,689.767 1678.24,675.756 1678.8,660.318 1679.36,659.652 1679.92,677.608 1680.48,630.418 1681.04,665.507 1681.6,665.896 1682.16,680.78 1682.72,712.951 1683.28,710.98 1683.84,723.278 1684.4,737.662 1684.95,734.664 1685.51,733.165 1686.07,701.098 1686.63,683.821 1687.19,696.16 1687.75,683.162 1688.31,680.114 1688.87,662.607 1689.43,685.185 1689.99,654.232 1690.55,656.207 1691.11,676.915 1691.67,674.467 1692.23,678.315 1692.78,663.394 1693.34,663.851 1693.9,648.249 1694.46,667.014 1695.02,668.497 1695.58,686.466 1696.14,690.367 1696.7,689.715 1697.26,738.771 1697.82,723.139 1698.38,704.036 1698.94,688.854 1699.5,705.373 1700.05,705.013 1700.61,686.97 1701.17,700.048 1701.73,734.145 1702.29,733.552 1702.85,729.945 1703.41,737.952 1703.97,733.584 1704.53,731.817 1705.09,726.907 1705.65,705.167 1706.21,690.088 1706.77,725.344 1707.32,688.895 1707.88,689.788 1708.44,721.865 1709,737.583 1709.56,720.144 1710.12,701.201 1710.68,713.327 1711.24,711.304 1711.8,708.926 1712.36,725.287 1712.92,657.167 1713.48,644.504 1714.04,627.07 1714.6,612.747 1715.15,602.356 1715.71,657.252 1716.27,653.891 1716.83,638.574 1717.39,672.194 1717.95,707.418 1718.51,656.229 1719.07,673.79 1719.63,674.253 1720.19,672.645 1720.75,658.734 1721.31,660.236 1721.87,656.268 1722.42,656.601 1722.98,656.809 1723.54,644.368 1724.1,616.14 1724.66,621.653 1725.22,643.151 1725.78,629.71 1726.34,616.97 1726.9,633.72 1727.46,617.132 1728.02,619.699 1728.58,606.479 1729.14,611.166 1729.69,616.469 1730.25,635.972 1730.81,653.229 1731.37,652.414 1731.93,638.071 1732.49,690.597 1733.05,722.559 1733.61,755.245 1734.17,767.089 1734.73,762.652 1735.29,742.911 1735.85,789.161 1736.41,811.22 1736.97,792.145 1737.52,787.246 1738.08,784.547 1738.64,793.612 1739.2,771.268 1739.76,781.304 1740.32,742.839 1740.88,740.348 1741.44,733.337 1742,732.871 1742.56,729.382 1743.12,756.035 1743.68,736.624 1744.24,713.5 1744.79,678.631 1745.35,677.724 1745.91,674.224 1746.47,688.66 1747.03,686.821 1747.59,655.848 1748.15,673.651 1748.71,692.116 1749.27,723.012 1749.83,739.677 1750.39,752.396 1750.95,732.93 1751.51,744.511 1752.06,771.929 1752.62,767.955 1753.18,777.689 1753.74,769.103 1754.3,780.475 1754.86,790.26 1755.42,750.895 1755.98,730.133 1756.54,743.749 1757.1,673.994 1757.66,673.57 1758.22,673.153 1758.78,653.854 1759.34,639.665 1759.89,642.863 1760.45,629.412 1761.01,611.164 1761.57,597.308 1762.13,601.073 1762.69,623.593 1763.25,625.748 1763.81,613.967 1764.37,633.968 1764.93,635.557 1765.49,653.663 1766.05,637.832 1766.61,605.183 1767.16,574.036 1767.72,578.12 1768.28,598.749 1768.84,622.666 1769.4,639.698 1769.96,640.882 1770.52,646.162 1771.08,647.403 1771.64,636.175 1772.2,624.386 1772.76,658.612 1773.32,677.441 1773.88,694.192 1774.43,691.73 1774.99,709.119 1775.55,738.045 1776.11,738.105 1776.67,733.539 1777.23,730.208 1777.79,711.594 1778.35,728.469 1778.91,710.446 1779.47,690.388 1780.03,705.797 1780.59,727.784 1781.15,744.427 1781.71,739.737 1782.26,750.839 1782.82,749.562 1783.38,747.385 1783.94,791.135 1784.5,786.115 1785.06,765.259 1785.62,777.28 1786.18,727.848 1786.74,710.723 1787.3,756.534 1787.86,753.688 1788.42,732.267 1788.98,730.108 1789.53,745.982 1790.09,724.222 1790.65,707.334 1791.21,719.013 1791.77,746.894 1792.33,742.323 1792.89,708.394 1793.45,724.636 1794.01,708.311 1794.57,724.582 1795.13,710.2 1795.69,709.897 1796.25,675.949 1796.8,694.546 1797.36,741.738 1797.92,737.343 1798.48,735.985 1799.04,733.794 1799.6,713.401 1800.16,693.983 1800.72,663.304 1801.28,662.896 1801.84,677.418 1802.4,674.853 1802.96,673.35 1803.52,673.948 1804.08,690.261 1804.63,708.813 1805.19,690.344 1805.75,705.246 1806.31,718.278 1806.87,717.186 1807.43,729.998 1807.99,758.38 1808.55,756.357 1809.11,752.534 1809.67,748.779 1810.23,729.535 1810.79,759.183 1811.35,722.746 1811.9,718.65 1812.46,704.738 1813.02,704.991 1813.58,702.323 1814.14,682.66 1814.7,681.144 1815.26,648.933 1815.82,636.807 1816.38,642.204 1816.94,630.857 1817.5,650.424 1818.06,668.777 1818.62,704.052 1819.18,716.757 1819.73,702.19 1820.29,700.163 1820.85,684.623 1821.41,701.43 1821.97,703.252 1822.53,718.941 1823.09,720.586 1823.65,704.693 1824.21,672.278 1824.77,675.376 1825.33,661.784 1825.89,648.423 1826.45,648.009 1827,635.617 1827.56,605.984 1828.12,643.247 1828.68,645.31 1829.24,632.412 1829.8,620.631 1830.36,656.443 1830.92,658.723 1831.48,662.014 1832.04,663.786 1832.6,666.857 1833.16,651.131 1833.72,666.59 1834.27,684.765 1834.83,734.232 1835.39,749.063 1835.95,732.003 1836.51,713.624 1837.07,710.16 1837.63,724.159 1838.19,723.863 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 690.168 L720.806 690.168 L721.365 690.168 L721.924 690.168 L722.484 690.168 L723.043 690.168 L723.602 690.168 L724.161 690.168 L724.721 690.168 L725.28 690.168 L725.839 690.168 L726.398 690.168 L726.958 690.168 L727.517 690.168 L728.076 690.168 L728.635 690.168 L729.195 690.168 L729.754 690.168 L730.313 690.168 L730.872 690.168 L731.432 690.168 L731.991 690.168 L732.55 690.168 L733.109 690.168 L733.669 690.168 L734.228 690.168 L734.787 690.168 L735.346 690.168 L735.906 690.168 L736.465 690.168 L737.024 690.168 L737.583 690.168 L738.143 690.168 L738.702 690.168 L739.261 690.168 L739.82 690.168 L740.38 690.168 L740.939 690.168 L741.498 690.168 L742.057 690.168 L742.617 690.168 L743.176 690.168 L743.735 690.168 L744.294 690.168 L744.854 690.168 L745.413 690.168 L745.972 690.168 L746.531 690.168 L747.091 690.168 L747.65 690.168 L748.209 690.168 L748.768 690.168 L749.328 690.168 L749.887 690.168 L750.446 690.168 L751.005 690.168 L751.565 690.168 L752.124 690.168 L752.683 690.168 L753.242 690.168 L753.802 690.168 L754.361 690.168 L754.92 690.168 L755.479 690.168 L756.039 690.168 L756.598 690.168 L757.157 690.168 L757.716 690.168 L758.276 690.168 L758.835 690.168 L759.394 690.168 L759.953 690.168 L760.513 690.168 L761.072 690.168 L761.631 690.168 L762.19 690.168 L762.75 690.168 L763.309 690.168 L763.868 690.168 L764.427 690.168 L764.987 690.168 L765.546 690.168 L766.105 690.168 L766.664 690.168 L767.224 690.168 L767.783 690.168 L768.342 690.168 L768.901 690.168 L769.461 690.168 L770.02 690.168 L770.579 690.168 L771.138 690.168 L771.698 690.168 L772.257 690.168 L772.816 690.168 L773.375 690.168 L773.935 690.168 L774.494 690.168 L775.053 690.168 L775.612 690.168 L776.172 690.168 L776.731 690.168 L777.29 690.168 L777.849 690.168 L778.409 690.168 L778.968 690.168 L779.527 690.168 L780.086 690.168 L780.646 690.168 L781.205 690.168 L781.764 690.168 L782.323 690.168 L782.883 690.168 L783.442 690.168 L784.001 690.168 L784.56 690.168 L785.12 690.168 L785.679 690.168 L786.238 690.168 L786.797 690.168 L787.357 690.168 L787.916 690.168 L788.475 690.168 L789.034 690.168 L789.594 690.168 L790.153 690.168 L790.712 690.168 L791.271 690.168 L791.831 690.168 L792.39 690.168 L792.949 690.168 L793.508 690.168 L794.068 690.168 L794.627 690.168 L795.186 690.168 L795.745 690.168 L796.305 690.168 L796.864 690.168 L797.423 690.168 L797.982 690.168 L798.542 690.168 L799.101 690.168 L799.66 690.168 L800.219 690.168 L800.779 690.168 L801.338 690.168 L801.897 690.168 L802.456 690.168 L803.016 690.168 L803.575 690.168 L804.134 690.168 L804.693 690.168 L805.253 690.168 L805.812 690.168 L806.371 690.168 L806.931 690.168 L807.49 690.168 L808.049 690.168 L808.608 690.168 L809.168 690.168 L809.727 690.168 L810.286 690.168 L810.845 690.168 L811.405 690.168 L811.964 690.168 L812.523 690.168 L813.082 690.168 L813.642 690.168 L814.201 690.168 L814.76 690.168 L815.319 690.168 L815.879 690.168 L816.438 690.168 L816.997 690.168 L817.556 690.168 L818.116 690.168 L818.675 690.168 L819.234 690.168 L819.793 690.168 L820.353 690.168 L820.912 690.168 L821.471 690.168 L822.03 690.168 L822.59 690.168 L823.149 690.168 L823.708 690.168 L824.267 690.168 L824.827 690.168 L825.386 690.168 L825.945 690.168 L826.504 690.168 L827.064 690.168 L827.623 690.168 L828.182 690.168 L828.741 690.168 L829.301 690.168 L829.86 690.168 L830.419 690.168 L830.978 690.168 L831.538 690.168 L832.097 690.168 L832.656 690.168 L833.215 690.168 L833.775 690.168 L834.334 690.168 L834.893 690.168 L835.452 690.168 L836.012 690.168 L836.571 690.168 L837.13 690.168 L837.689 690.168 L838.249 690.168 L838.808 690.168 L839.367 690.168 L839.926 690.168 L840.486 690.168 L841.045 690.168 L841.604 690.168 L842.163 690.168 L842.723 690.168 L843.282 690.168 L843.841 690.168 L844.4 690.168 L844.96 690.168 L845.519 690.168 L846.078 690.168 L846.637 690.168 L847.197 690.168 L847.756 690.168 L848.315 690.168 L848.874 690.168 L849.434 690.168 L849.993 690.168 L850.552 690.168 L851.111 690.168 L851.671 690.168 L852.23 690.168 L852.789 690.168 L853.348 690.168 L853.908 690.168 L854.467 690.168 L855.026 690.168 L855.585 690.168 L856.145 690.168 L856.704 690.168 L857.263 690.168 L857.822 690.168 L858.382 690.168 L858.941 690.168 L859.5 690.168 L860.059 690.168 L860.619 690.168 L861.178 690.168 L861.737 690.168 L862.296 690.168 L862.856 690.168 L863.415 690.168 L863.974 690.168 L864.533 690.168 L865.093 690.168 L865.652 690.168 L866.211 690.168 L866.77 690.168 L867.33 690.168 L867.889 690.168 L868.448 690.168 L869.007 690.168 L869.567 690.168 L870.126 690.168 L870.685 690.168 L871.244 690.168 L871.804 690.168 L872.363 690.168 L872.922 690.168 L873.481 690.168 L874.041 690.168 L874.6 690.168 L875.159 690.168 L875.718 690.168 L876.278 690.168 L876.837 690.168 L877.396 690.168 L877.955 690.168 L878.515 690.168 L879.074 690.168 L879.633 690.168 L880.192 690.168 L880.752 690.168 L881.311 690.168 L881.87 690.168 L882.429 690.168 L882.989 690.168 L883.548 690.168 L884.107 690.168 L884.666 690.168 L885.226 690.168 L885.785 690.168 L886.344 690.168 L886.903 690.168 L887.463 690.168 L888.022 690.168 L888.581 690.168 L889.14 690.168 L889.7 690.168 L890.259 690.168 L890.818 690.168 L891.377 690.168 L891.937 690.168 L892.496 690.168 L893.055 690.168 L893.614 690.168 L894.174 690.168 L894.733 690.168 L895.292 690.168 L895.851 690.168 L896.411 690.168 L896.97 690.168 L897.529 690.168 L898.088 690.168 L898.648 690.168 L899.207 690.168 L899.766 690.168 L900.325 690.168 L900.885 690.168 L901.444 690.168 L902.003 690.168 L902.562 690.168 L903.122 690.168 L903.681 690.168 L904.24 690.168 L904.799 690.168 L905.359 690.168 L905.918 690.168 L906.477 690.168 L907.036 690.168 L907.596 690.168 L908.155 690.168 L908.714 690.168 L909.273 690.168 L909.833 690.168 L910.392 690.168 L910.951 690.168 L911.51 690.168 L912.07 690.168 L912.629 690.168 L913.188 690.168 L913.747 690.168 L914.307 690.168 L914.866 690.168 L915.425 690.168 L915.984 690.168 L916.544 690.168 L917.103 690.168 L917.662 690.168 L918.221 690.168 L918.781 690.168 L919.34 690.168 L919.899 690.168 L920.458 690.168 L921.018 690.168 L921.577 690.168 L922.136 690.168 L922.695 690.168 L923.255 690.168 L923.814 690.168 L924.373 690.168 L924.932 690.168 L925.492 690.168 L926.051 690.168 L926.61 690.168 L927.169 690.168 L927.729 690.168 L928.288 690.168 L928.847 690.168 L929.406 690.168 L929.966 690.168 L930.525 690.168 L931.084 690.168 L931.644 690.168 L932.203 690.168 L932.762 690.168 L933.321 690.168 L933.881 690.168 L934.44 690.168 L934.999 690.168 L935.558 690.168 L936.118 690.168 L936.677 690.168 L937.236 690.168 L937.795 690.168 L938.355 690.168 L938.914 690.168 L939.473 690.168 L940.032 690.168 L940.592 690.168 L941.151 690.168 L941.71 690.168 L942.269 690.168 L942.829 690.168 L943.388 690.168 L943.947 690.168 L944.506 690.168 L945.066 690.168 L945.625 690.168 L946.184 690.168 L946.743 690.168 L947.303 690.168 L947.862 690.168 L948.421 690.168 L948.98 690.168 L949.54 690.168 L950.099 690.168 L950.658 690.168 L951.217 690.168 L951.777 690.168 L952.336 690.168 L952.895 690.168 L953.454 690.168 L954.014 690.168 L954.573 690.168 L955.132 690.168 L955.691 690.168 L956.251 690.168 L956.81 690.168 L957.369 690.168 L957.928 690.168 L958.488 690.168 L959.047 690.168 L959.606 690.168 L960.165 690.168 L960.725 690.168 L961.284 690.168 L961.843 690.168 L962.402 690.168 L962.962 690.168 L963.521 690.168 L964.08 690.168 L964.639 690.168 L965.199 690.168 L965.758 690.168 L966.317 690.168 L966.876 690.168 L967.436 690.168 L967.995 690.168 L968.554 690.168 L969.113 690.168 L969.673 690.168 L970.232 690.168 L970.791 690.168 L971.35 690.168 L971.91 690.168 L972.469 690.168 L973.028 690.168 L973.587 690.168 L974.147 690.168 L974.706 690.168 L975.265 690.168 L975.824 690.168 L976.384 690.168 L976.943 690.168 L977.502 690.168 L978.061 690.168 L978.621 690.168 L979.18 690.168 L979.739 690.168 L980.298 690.168 L980.858 690.168 L981.417 690.168 L981.976 690.168 L982.535 690.168 L983.095 690.168 L983.654 690.168 L984.213 690.168 L984.772 690.168 L985.332 690.168 L985.891 690.168 L986.45 690.168 L987.009 690.168 L987.569 690.168 L988.128 690.168 L988.687 690.168 L989.246 690.168 L989.806 690.168 L990.365 690.168 L990.924 690.168 L991.483 690.168 L992.043 690.168 L992.602 690.168 L993.161 690.168 L993.72 690.168 L994.28 690.168 L994.839 690.168 L995.398 690.168 L995.957 690.168 L996.517 690.168 L997.076 690.168 L997.635 690.168 L998.194 690.168 L998.754 690.168 L999.313 690.168 L999.872 690.168 L1000.43 690.168 L1000.99 690.168 L1001.55 690.168 L1002.11 690.168 L1002.67 690.168 L1003.23 690.168 L1003.79 690.168 L1004.35 690.168 L1004.91 690.168 L1005.46 690.168 L1006.02 690.168 L1006.58 690.168 L1007.14 690.168 L1007.7 690.168 L1008.26 690.168 L1008.82 690.168 L1009.38 690.168 L1009.94 690.168 L1010.5 690.168 L1011.06 690.168 L1011.62 690.168 L1012.18 690.168 L1012.73 690.168 L1013.29 690.168 L1013.85 690.168 L1014.41 690.168 L1014.97 690.168 L1015.53 690.168 L1016.09 690.168 L1016.65 690.168 L1017.21 690.168 L1017.77 690.168 L1018.33 690.168 L1018.89 690.168 L1019.45 690.168 L1020.01 690.168 L1020.56 690.168 L1021.12 690.168 L1021.68 690.168 L1022.24 690.168 L1022.8 690.168 L1023.36 690.168 L1023.92 690.168 L1024.48 690.168 L1025.04 690.168 L1025.6 690.168 L1026.16 690.168 L1026.72 690.168 L1027.28 690.168 L1027.83 690.168 L1028.39 690.168 L1028.95 690.168 L1029.51 690.168 L1030.07 690.168 L1030.63 690.168 L1031.19 690.168 L1031.75 690.168 L1032.31 690.168 L1032.87 690.168 L1033.43 690.168 L1033.99 690.168 L1034.55 690.168 L1035.1 690.168 L1035.66 690.168 L1036.22 690.168 L1036.78 690.168 L1037.34 690.168 L1037.9 690.168 L1038.46 690.168 L1039.02 690.168 L1039.58 690.168 L1040.14 690.168 L1040.7 690.168 L1041.26 690.168 L1041.82 690.168 L1042.38 690.168 L1042.93 690.168 L1043.49 690.168 L1044.05 690.168 L1044.61 690.168 L1045.17 690.168 L1045.73 690.168 L1046.29 690.168 L1046.85 690.168 L1047.41 690.168 L1047.97 690.168 L1048.53 690.168 L1049.09 690.168 L1049.65 690.168 L1050.2 690.168 L1050.76 690.168 L1051.32 690.168 L1051.88 690.168 L1052.44 690.168 L1053 690.168 L1053.56 690.168 L1054.12 690.168 L1054.68 690.168 L1055.24 690.168 L1055.8 690.168 L1056.36 690.168 L1056.92 690.168 L1057.48 690.168 L1058.03 690.168 L1058.59 690.168 L1059.15 690.168 L1059.71 690.168 L1060.27 690.168 L1060.83 690.168 L1061.39 690.168 L1061.95 690.168 L1062.51 690.168 L1063.07 690.168 L1063.63 690.168 L1064.19 690.168 L1064.75 690.168 L1065.3 690.168 L1065.86 690.168 L1066.42 690.168 L1066.98 690.168 L1067.54 690.168 L1068.1 690.168 L1068.66 690.168 L1069.22 690.168 L1069.78 690.168 L1070.34 690.168 L1070.9 690.168 L1071.46 690.168 L1072.02 690.168 L1072.57 690.168 L1073.13 690.168 L1073.69 690.168 L1074.25 690.168 L1074.81 690.168 L1075.37 690.168 L1075.93 690.168 L1076.49 690.168 L1077.05 690.168 L1077.61 690.168 L1078.17 690.168 L1078.73 690.168 L1079.29 690.168 L1079.85 690.168 L1080.4 690.168 L1080.96 690.168 L1081.52 690.168 L1082.08 690.168 L1082.64 690.168 L1083.2 690.168 L1083.76 690.168 L1084.32 690.168 L1084.88 690.168 L1085.44 690.168 L1086 690.168 L1086.56 690.168 L1087.12 690.168 L1087.67 690.168 L1088.23 690.168 L1088.79 690.168 L1089.35 690.168 L1089.91 690.168 L1090.47 690.168 L1091.03 690.168 L1091.59 690.168 L1092.15 690.168 L1092.71 690.168 L1093.27 690.168 L1093.83 690.168 L1094.39 690.168 L1094.94 690.168 L1095.5 690.168 L1096.06 690.168 L1096.62 690.168 L1097.18 690.168 L1097.74 690.168 L1098.3 690.168 L1098.86 690.168 L1099.42 690.168 L1099.98 690.168 L1100.54 690.168 L1101.1 690.168 L1101.66 690.168 L1102.22 690.168 L1102.77 690.168 L1103.33 690.168 L1103.89 690.168 L1104.45 690.168 L1105.01 690.168 L1105.57 690.168 L1106.13 690.168 L1106.69 690.168 L1107.25 690.168 L1107.81 690.168 L1108.37 690.168 L1108.93 690.168 L1109.49 690.168 L1110.04 690.168 L1110.6 690.168 L1111.16 690.168 L1111.72 690.168 L1112.28 690.168 L1112.84 690.168 L1113.4 690.168 L1113.96 690.168 L1114.52 690.168 L1115.08 690.168 L1115.64 690.168 L1116.2 690.168 L1116.76 690.168 L1117.31 690.168 L1117.87 690.168 L1118.43 690.168 L1118.99 690.168 L1119.55 690.168 L1120.11 690.168 L1120.67 690.168 L1121.23 690.168 L1121.79 690.168 L1122.35 690.168 L1122.91 690.168 L1123.47 690.168 L1124.03 690.168 L1124.59 690.168 L1125.14 690.168 L1125.7 690.168 L1126.26 690.168 L1126.82 690.168 L1127.38 690.168 L1127.94 690.168 L1128.5 690.168 L1129.06 690.168 L1129.62 690.168 L1130.18 690.168 L1130.74 690.168 L1131.3 690.168 L1131.86 690.168 L1132.41 690.168 L1132.97 690.168 L1133.53 690.168 L1134.09 690.168 L1134.65 690.168 L1135.21 690.168 L1135.77 690.168 L1136.33 690.168 L1136.89 690.168 L1137.45 690.168 L1138.01 690.168 L1138.57 690.168 L1139.13 690.168 L1139.68 690.168 L1140.24 690.168 L1140.8 690.168 L1141.36 690.168 L1141.92 690.168 L1142.48 690.168 L1143.04 690.168 L1143.6 690.168 L1144.16 690.168 L1144.72 690.168 L1145.28 690.168 L1145.84 690.168 L1146.4 690.168 L1146.96 690.168 L1147.51 690.168 L1148.07 690.168 L1148.63 690.168 L1149.19 690.168 L1149.75 690.168 L1150.31 690.168 L1150.87 690.168 L1151.43 690.168 L1151.99 690.168 L1152.55 690.168 L1153.11 690.168 L1153.67 690.168 L1154.23 690.168 L1154.78 690.168 L1155.34 690.168 L1155.9 690.168 L1156.46 690.168 L1157.02 690.168 L1157.58 690.168 L1158.14 690.168 L1158.7 690.168 L1159.26 690.168 L1159.82 690.168 L1160.38 690.168 L1160.94 690.168 L1161.5 690.168 L1162.05 690.168 L1162.61 690.168 L1163.17 690.168 L1163.73 690.168 L1164.29 690.168 L1164.85 690.168 L1165.41 690.168 L1165.97 690.168 L1166.53 690.168 L1167.09 690.168 L1167.65 690.168 L1168.21 690.168 L1168.77 690.168 L1169.33 690.168 L1169.88 690.168 L1170.44 690.168 L1171 690.168 L1171.56 690.168 L1172.12 690.168 L1172.68 690.168 L1173.24 690.168 L1173.8 690.168 L1174.36 690.168 L1174.92 690.168 L1175.48 690.168 L1176.04 690.168 L1176.6 690.168 L1177.15 690.168 L1177.71 690.168 L1178.27 690.168 L1178.83 690.168 L1179.39 690.168 L1179.95 690.168 L1180.51 690.168 L1181.07 690.168 L1181.63 690.168 L1182.19 690.168 L1182.75 690.168 L1183.31 690.168 L1183.87 690.168 L1184.43 690.168 L1184.98 690.168 L1185.54 690.168 L1186.1 690.168 L1186.66 690.168 L1187.22 690.168 L1187.78 690.168 L1188.34 690.168 L1188.9 690.168 L1189.46 690.168 L1190.02 690.168 L1190.58 690.168 L1191.14 690.168 L1191.7 690.168 L1192.25 690.168 L1192.81 690.168 L1193.37 690.168 L1193.93 690.168 L1194.49 690.168 L1195.05 690.168 L1195.61 690.168 L1196.17 690.168 L1196.73 690.168 L1197.29 690.168 L1197.85 690.168 L1198.41 690.168 L1198.97 690.168 L1199.52 690.168 L1200.08 690.168 L1200.64 690.168 L1201.2 690.168 L1201.76 690.168 L1202.32 690.168 L1202.88 690.168 L1203.44 690.168 L1204 690.168 L1204.56 690.168 L1205.12 690.168 L1205.68 690.168 L1206.24 690.168 L1206.8 690.168 L1207.35 690.168 L1207.91 690.168 L1208.47 690.168 L1209.03 690.168 L1209.59 690.168 L1210.15 690.168 L1210.71 690.168 L1211.27 690.168 L1211.83 690.168 L1212.39 690.168 L1212.95 690.168 L1213.51 690.168 L1214.07 690.168 L1214.62 690.168 L1215.18 690.168 L1215.74 690.168 L1216.3 690.168 L1216.86 690.168 L1217.42 690.168 L1217.98 690.168 L1218.54 690.168 L1219.1 690.168 L1219.66 690.168 L1220.22 690.168 L1220.78 690.168 L1221.34 690.168 L1221.89 690.168 L1222.45 690.168 L1223.01 690.168 L1223.57 690.168 L1224.13 690.168 L1224.69 690.168 L1225.25 690.168 L1225.81 690.168 L1226.37 690.168 L1226.93 690.168 L1227.49 690.168 L1228.05 690.168 L1228.61 690.168 L1229.17 690.168 L1229.72 690.168 L1230.28 690.168 L1230.84 690.168 L1231.4 690.168 L1231.96 690.168 L1232.52 690.168 L1233.08 690.168 L1233.64 690.168 L1234.2 690.168 L1234.76 690.168 L1235.32 690.168 L1235.88 690.168 L1236.44 690.168 L1236.99 690.168 L1237.55 690.168 L1238.11 690.168 L1238.67 690.168 L1239.23 690.168 L1239.79 690.168 L1240.35 690.168 L1240.91 690.168 L1241.47 690.168 L1242.03 690.168 L1242.59 690.168 L1243.15 690.168 L1243.71 690.168 L1244.26 690.168 L1244.82 690.168 L1245.38 690.168 L1245.94 690.168 L1246.5 690.168 L1247.06 690.168 L1247.62 690.168 L1248.18 690.168 L1248.74 690.168 L1249.3 690.168 L1249.86 690.168 L1250.42 690.168 L1250.98 690.168 L1251.54 690.168 L1252.09 690.168 L1252.65 690.168 L1253.21 690.168 L1253.77 690.168 L1254.33 690.168 L1254.89 690.168 L1255.45 690.168 L1256.01 690.168 L1256.57 690.168 L1257.13 690.168 L1257.69 690.168 L1258.25 690.168 L1258.81 690.168 L1259.36 690.168 L1259.92 690.168 L1260.48 690.168 L1261.04 690.168 L1261.6 690.168 L1262.16 690.168 L1262.72 690.168 L1263.28 690.168 L1263.84 690.168 L1264.4 690.168 L1264.96 690.168 L1265.52 690.168 L1266.08 690.168 L1266.63 690.168 L1267.19 690.168 L1267.75 690.168 L1268.31 690.168 L1268.87 690.168 L1269.43 690.168 L1269.99 690.168 L1270.55 690.168 L1271.11 690.168 L1271.67 690.168 L1272.23 690.168 L1272.79 690.168 L1273.35 690.168 L1273.91 690.168 L1274.46 690.168 L1275.02 690.168 L1275.58 690.168 L1276.14 690.168 L1276.7 690.168 L1277.26 690.168 L1277.82 690.168 L1278.38 690.168 L1278.94 690.168 L1279.5 690.168 L1280.06 690.168 L1280.62 690.168 L1281.18 690.168 L1281.73 690.168 L1282.29 690.168 L1282.85 690.168 L1283.41 690.168 L1283.97 690.168 L1284.53 690.168 L1285.09 690.168 L1285.65 690.168 L1286.21 690.168 L1286.77 690.168 L1287.33 690.168 L1287.89 690.168 L1288.45 690.168 L1289 690.168 L1289.56 690.168 L1290.12 690.168 L1290.68 690.168 L1291.24 690.168 L1291.8 690.168 L1292.36 690.168 L1292.92 690.168 L1293.48 690.168 L1294.04 690.168 L1294.6 690.168 L1295.16 690.168 L1295.72 690.168 L1296.28 690.168 L1296.83 690.168 L1297.39 690.168 L1297.95 690.168 L1298.51 690.168 L1299.07 690.168 L1299.63 690.168 L1300.19 690.168 L1300.75 690.168 L1301.31 690.168 L1301.87 690.168 L1302.43 690.168 L1302.99 690.168 L1303.55 690.168 L1304.1 690.168 L1304.66 690.168 L1305.22 690.168 L1305.78 690.168 L1306.34 690.168 L1306.9 690.168 L1307.46 690.168 L1308.02 690.168 L1308.58 690.168 L1309.14 690.168 L1309.7 690.168 L1310.26 690.168 L1310.82 690.168 L1311.38 690.168 L1311.93 690.168 L1312.49 690.168 L1313.05 690.168 L1313.61 690.168 L1314.17 690.168 L1314.73 690.168 L1315.29 690.168 L1315.85 690.168 L1316.41 690.168 L1316.97 690.168 L1317.53 690.168 L1318.09 690.168 L1318.65 690.168 L1319.2 690.168 L1319.76 690.168 L1320.32 690.168 L1320.88 690.168 L1321.44 690.168 L1322 690.168 L1322.56 690.168 L1323.12 690.168 L1323.68 690.168 L1324.24 690.168 L1324.8 690.168 L1325.36 690.168 L1325.92 690.168 L1326.47 690.168 L1327.03 690.168 L1327.59 690.168 L1328.15 690.168 L1328.71 690.168 L1329.27 690.168 L1329.83 690.168 L1330.39 690.168 L1330.95 690.168 L1331.51 690.168 L1332.07 690.168 L1332.63 690.168 L1333.19 690.168 L1333.75 690.168 L1334.3 690.168 L1334.86 690.168 L1335.42 690.168 L1335.98 690.168 L1336.54 690.168 L1337.1 690.168 L1337.66 690.168 L1338.22 690.168 L1338.78 690.168 L1339.34 690.168 L1339.9 690.168 L1340.46 690.168 L1341.02 690.168 L1341.57 690.168 L1342.13 690.168 L1342.69 690.168 L1343.25 690.168 L1343.81 690.168 L1344.37 690.168 L1344.93 690.168 L1345.49 690.168 L1346.05 690.168 L1346.61 690.168 L1347.17 690.168 L1347.73 690.168 L1348.29 690.168 L1348.84 690.168 L1349.4 690.168 L1349.96 690.168 L1350.52 690.168 L1351.08 690.168 L1351.64 690.168 L1352.2 690.168 L1352.76 690.168 L1353.32 690.168 L1353.88 690.168 L1354.44 690.168 L1355 690.168 L1355.56 690.168 L1356.12 690.168 L1356.67 690.168 L1357.23 690.168 L1357.79 690.168 L1358.35 690.168 L1358.91 690.168 L1359.47 690.168 L1360.03 690.168 L1360.59 690.168 L1361.15 690.168 L1361.71 690.168 L1362.27 690.168 L1362.83 690.168 L1363.39 690.168 L1363.94 690.168 L1364.5 690.168 L1365.06 690.168 L1365.62 690.168 L1366.18 690.168 L1366.74 690.168 L1367.3 690.168 L1367.86 690.168 L1368.42 690.168 L1368.98 690.168 L1369.54 690.168 L1370.1 690.168 L1370.66 690.168 L1371.21 690.168 L1371.77 690.168 L1372.33 690.168 L1372.89 690.168 L1373.45 690.168 L1374.01 690.168 L1374.57 690.168 L1375.13 690.168 L1375.69 690.168 L1376.25 690.168 L1376.81 690.168 L1377.37 690.168 L1377.93 690.168 L1378.49 690.168 L1379.04 690.168 L1379.6 690.168 L1380.16 690.168 L1380.72 690.168 L1381.28 690.168 L1381.84 690.168 L1382.4 690.168 L1382.96 690.168 L1383.52 690.168 L1384.08 690.168 L1384.64 690.168 L1385.2 690.168 L1385.76 690.168 L1386.31 690.168 L1386.87 690.168 L1387.43 690.168 L1387.99 690.168 L1388.55 690.168 L1389.11 690.168 L1389.67 690.168 L1390.23 690.168 L1390.79 690.168 L1391.35 690.168 L1391.91 690.168 L1392.47 690.168 L1393.03 690.168 L1393.58 690.168 L1394.14 690.168 L1394.7 690.168 L1395.26 690.168 L1395.82 690.168 L1396.38 690.168 L1396.94 690.168 L1397.5 690.168 L1398.06 690.168 L1398.62 690.168 L1399.18 690.168 L1399.74 690.168 L1400.3 690.168 L1400.86 690.168 L1401.41 690.168 L1401.97 690.168 L1402.53 690.168 L1403.09 690.168 L1403.65 690.168 L1404.21 690.168 L1404.77 690.168 L1405.33 690.168 L1405.89 690.168 L1406.45 690.168 L1407.01 690.168 L1407.57 690.168 L1408.13 690.168 L1408.68 690.168 L1409.24 690.168 L1409.8 690.168 L1410.36 690.168 L1410.92 690.168 L1411.48 690.168 L1412.04 690.168 L1412.6 690.168 L1413.16 690.168 L1413.72 690.168 L1414.28 690.168 L1414.84 690.168 L1415.4 690.168 L1415.95 690.168 L1416.51 690.168 L1417.07 690.168 L1417.63 690.168 L1418.19 690.168 L1418.75 690.168 L1419.31 690.168 L1419.87 690.168 L1420.43 690.168 L1420.99 690.168 L1421.55 690.168 L1422.11 690.168 L1422.67 690.168 L1423.23 690.168 L1423.78 690.168 L1424.34 690.168 L1424.9 690.168 L1425.46 690.168 L1426.02 690.168 L1426.58 690.168 L1427.14 690.168 L1427.7 690.168 L1428.26 690.168 L1428.82 690.168 L1429.38 690.168 L1429.94 690.168 L1430.5 690.168 L1431.05 690.168 L1431.61 690.168 L1432.17 690.168 L1432.73 690.168 L1433.29 690.168 L1433.85 690.168 L1434.41 690.168 L1434.97 690.168 L1435.53 690.168 L1436.09 690.168 L1436.65 690.168 L1437.21 690.168 L1437.77 690.168 L1438.33 690.168 L1438.88 690.168 L1439.44 690.168 L1440 690.168 L1440.56 690.168 L1441.12 690.168 L1441.68 690.168 L1442.24 690.168 L1442.8 690.168 L1443.36 690.168 L1443.92 690.168 L1444.48 690.168 L1445.04 690.168 L1445.6 690.168 L1446.15 690.168 L1446.71 690.168 L1447.27 690.168 L1447.83 690.168 L1448.39 690.168 L1448.95 690.168 L1449.51 690.168 L1450.07 690.168 L1450.63 690.168 L1451.19 690.168 L1451.75 690.168 L1452.31 690.168 L1452.87 690.168 L1453.42 690.168 L1453.98 690.168 L1454.54 690.168 L1455.1 690.168 L1455.66 690.168 L1456.22 690.168 L1456.78 690.168 L1457.34 690.168 L1457.9 690.168 L1458.46 690.168 L1459.02 690.168 L1459.58 690.168 L1460.14 690.168 L1460.7 690.168 L1461.25 690.168 L1461.81 690.168 L1462.37 690.168 L1462.93 690.168 L1463.49 690.168 L1464.05 690.168 L1464.61 690.168 L1465.17 690.168 L1465.73 690.168 L1466.29 690.168 L1466.85 690.168 L1467.41 690.168 L1467.97 690.168 L1468.52 690.168 L1469.08 690.168 L1469.64 690.168 L1470.2 690.168 L1470.76 690.168 L1471.32 690.168 L1471.88 690.168 L1472.44 690.168 L1473 690.168 L1473.56 690.168 L1474.12 690.168 L1474.68 690.168 L1475.24 690.168 L1475.79 690.168 L1476.35 690.168 L1476.91 690.168 L1477.47 690.168 L1478.03 690.168 L1478.59 690.168 L1479.15 690.168 L1479.71 690.168 L1480.27 690.168 L1480.83 690.168 L1481.39 690.168 L1481.95 690.168 L1482.51 690.168 L1483.07 690.168 L1483.62 690.168 L1484.18 690.168 L1484.74 690.168 L1485.3 690.168 L1485.86 690.168 L1486.42 690.168 L1486.98 690.168 L1487.54 690.168 L1488.1 690.168 L1488.66 690.168 L1489.22 690.168 L1489.78 690.168 L1490.34 690.168 L1490.89 690.168 L1491.45 690.168 L1492.01 690.168 L1492.57 690.168 L1493.13 690.168 L1493.69 690.168 L1494.25 690.168 L1494.81 690.168 L1495.37 690.168 L1495.93 690.168 L1496.49 690.168 L1497.05 690.168 L1497.61 690.168 L1498.16 690.168 L1498.72 690.168 L1499.28 690.168 L1499.84 690.168 L1500.4 690.168 L1500.96 690.168 L1501.52 690.168 L1502.08 690.168 L1502.64 690.168 L1503.2 690.168 L1503.76 690.168 L1504.32 690.168 L1504.88 690.168 L1505.44 690.168 L1505.99 690.168 L1506.55 690.168 L1507.11 690.168 L1507.67 690.168 L1508.23 690.168 L1508.79 690.168 L1509.35 690.168 L1509.91 690.168 L1510.47 690.168 L1511.03 690.168 L1511.59 690.168 L1512.15 690.168 L1512.71 690.168 L1513.26 690.168 L1513.82 690.168 L1514.38 690.168 L1514.94 690.168 L1515.5 690.168 L1516.06 690.168 L1516.62 690.168 L1517.18 690.168 L1517.74 690.168 L1518.3 690.168 L1518.86 690.168 L1519.42 690.168 L1519.98 690.168 L1520.53 690.168 L1521.09 690.168 L1521.65 690.168 L1522.21 690.168 L1522.77 690.168 L1523.33 690.168 L1523.89 690.168 L1524.45 690.168 L1525.01 690.168 L1525.57 690.168 L1526.13 690.168 L1526.69 690.168 L1527.25 690.168 L1527.81 690.168 L1528.36 690.168 L1528.92 690.168 L1529.48 690.168 L1530.04 690.168 L1530.6 690.168 L1531.16 690.168 L1531.72 690.168 L1532.28 690.168 L1532.84 690.168 L1533.4 690.168 L1533.96 690.168 L1534.52 690.168 L1535.08 690.168 L1535.63 690.168 L1536.19 690.168 L1536.75 690.168 L1537.31 690.168 L1537.87 690.168 L1538.43 690.168 L1538.99 690.168 L1539.55 690.168 L1540.11 690.168 L1540.67 690.168 L1541.23 690.168 L1541.79 690.168 L1542.35 690.168 L1542.9 690.168 L1543.46 690.168 L1544.02 690.168 L1544.58 690.168 L1545.14 690.168 L1545.7 690.168 L1546.26 690.168 L1546.82 690.168 L1547.38 690.168 L1547.94 690.168 L1548.5 690.168 L1549.06 690.168 L1549.62 690.168 L1550.18 690.168 L1550.73 690.168 L1551.29 690.168 L1551.85 690.168 L1552.41 690.168 L1552.97 690.168 L1553.53 690.168 L1554.09 690.168 L1554.65 690.168 L1555.21 690.168 L1555.77 690.168 L1556.33 690.168 L1556.89 690.168 L1557.45 690.168 L1558 690.168 L1558.56 690.168 L1559.12 690.168 L1559.68 690.168 L1560.24 690.168 L1560.8 690.168 L1561.36 690.168 L1561.92 690.168 L1562.48 690.168 L1563.04 690.168 L1563.6 690.168 L1564.16 690.168 L1564.72 690.168 L1565.28 690.168 L1565.83 690.168 L1566.39 690.168 L1566.95 690.168 L1567.51 690.168 L1568.07 690.168 L1568.63 690.168 L1569.19 690.168 L1569.75 690.168 L1570.31 690.168 L1570.87 690.168 L1571.43 690.168 L1571.99 690.168 L1572.55 690.168 L1573.1 690.168 L1573.66 690.168 L1574.22 690.168 L1574.78 690.168 L1575.34 690.168 L1575.9 690.168 L1576.46 690.168 L1577.02 690.168 L1577.58 690.168 L1578.14 690.168 L1578.7 690.168 L1579.26 690.168 L1579.82 690.168 L1580.37 690.168 L1580.93 690.168 L1581.49 690.168 L1582.05 690.168 L1582.61 690.168 L1583.17 690.168 L1583.73 690.168 L1584.29 690.168 L1584.85 690.168 L1585.41 690.168 L1585.97 690.168 L1586.53 690.168 L1587.09 690.168 L1587.65 690.168 L1588.2 690.168 L1588.76 690.168 L1589.32 690.168 L1589.88 690.168 L1590.44 690.168 L1591 690.168 L1591.56 690.168 L1592.12 690.168 L1592.68 690.168 L1593.24 690.168 L1593.8 690.168 L1594.36 690.168 L1594.92 690.168 L1595.47 690.168 L1596.03 690.168 L1596.59 690.168 L1597.15 690.168 L1597.71 690.168 L1598.27 690.168 L1598.83 690.168 L1599.39 690.168 L1599.95 690.168 L1600.51 690.168 L1601.07 690.168 L1601.63 690.168 L1602.19 690.168 L1602.74 690.168 L1603.3 690.168 L1603.86 690.168 L1604.42 690.168 L1604.98 690.168 L1605.54 690.168 L1606.1 690.168 L1606.66 690.168 L1607.22 690.168 L1607.78 690.168 L1608.34 690.168 L1608.9 690.168 L1609.46 690.168 L1610.02 690.168 L1610.57 690.168 L1611.13 690.168 L1611.69 690.168 L1612.25 690.168 L1612.81 690.168 L1613.37 690.168 L1613.93 690.168 L1614.49 690.168 L1615.05 690.168 L1615.61 690.168 L1616.17 690.168 L1616.73 690.168 L1617.29 690.168 L1617.84 690.168 L1618.4 690.168 L1618.96 690.168 L1619.52 690.168 L1620.08 690.168 L1620.64 690.168 L1621.2 690.168 L1621.76 690.168 L1622.32 690.168 L1622.88 690.168 L1623.44 690.168 L1624 690.168 L1624.56 690.168 L1625.11 690.168 L1625.67 690.168 L1626.23 690.168 L1626.79 690.168 L1627.35 690.168 L1627.91 690.168 L1628.47 690.168 L1629.03 690.168 L1629.59 690.168 L1630.15 690.168 L1630.71 690.168 L1631.27 690.168 L1631.83 690.168 L1632.39 690.168 L1632.94 690.168 L1633.5 690.168 L1634.06 690.168 L1634.62 690.168 L1635.18 690.168 L1635.74 690.168 L1636.3 690.168 L1636.86 690.168 L1637.42 690.168 L1637.98 690.168 L1638.54 690.168 L1639.1 690.168 L1639.66 690.168 L1640.21 690.168 L1640.77 690.168 L1641.33 690.168 L1641.89 690.168 L1642.45 690.168 L1643.01 690.168 L1643.57 690.168 L1644.13 690.168 L1644.69 690.168 L1645.25 690.168 L1645.81 690.168 L1646.37 690.168 L1646.93 690.168 L1647.48 690.168 L1648.04 690.168 L1648.6 690.168 L1649.16 690.168 L1649.72 690.168 L1650.28 690.168 L1650.84 690.168 L1651.4 690.168 L1651.96 690.168 L1652.52 690.168 L1653.08 690.168 L1653.64 690.168 L1654.2 690.168 L1654.76 690.168 L1655.31 690.168 L1655.87 690.168 L1656.43 690.168 L1656.99 690.168 L1657.55 690.168 L1658.11 690.168 L1658.67 690.168 L1659.23 690.168 L1659.79 690.168 L1660.35 690.168 L1660.91 690.168 L1661.47 690.168 L1662.03 690.168 L1662.58 690.168 L1663.14 690.168 L1663.7 690.168 L1664.26 690.168 L1664.82 690.168 L1665.38 690.168 L1665.94 690.168 L1666.5 690.168 L1667.06 690.168 L1667.62 690.168 L1668.18 690.168 L1668.74 690.168 L1669.3 690.168 L1669.85 690.168 L1670.41 690.168 L1670.97 690.168 L1671.53 690.168 L1672.09 690.168 L1672.65 690.168 L1673.21 690.168 L1673.77 690.168 L1674.33 690.168 L1674.89 690.168 L1675.45 690.168 L1676.01 690.168 L1676.57 690.168 L1677.13 690.168 L1677.68 690.168 L1678.24 690.168 L1678.8 690.168 L1679.36 690.168 L1679.92 690.168 L1680.48 690.168 L1681.04 690.168 L1681.6 690.168 L1682.16 690.168 L1682.72 690.168 L1683.28 690.168 L1683.84 690.168 L1684.4 690.168 L1684.95 690.168 L1685.51 690.168 L1686.07 690.168 L1686.63 690.168 L1687.19 690.168 L1687.75 690.168 L1688.31 690.168 L1688.87 690.168 L1689.43 690.168 L1689.99 690.168 L1690.55 690.168 L1691.11 690.168 L1691.67 690.168 L1692.23 690.168 L1692.78 690.168 L1693.34 690.168 L1693.9 690.168 L1694.46 690.168 L1695.02 690.168 L1695.58 690.168 L1696.14 690.168 L1696.7 690.168 L1697.26 690.168 L1697.82 690.168 L1698.38 690.168 L1698.94 690.168 L1699.5 690.168 L1700.05 690.168 L1700.61 690.168 L1701.17 690.168 L1701.73 690.168 L1702.29 690.168 L1702.85 690.168 L1703.41 690.168 L1703.97 690.168 L1704.53 690.168 L1705.09 690.168 L1705.65 690.168 L1706.21 690.168 L1706.77 690.168 L1707.32 690.168 L1707.88 690.168 L1708.44 690.168 L1709 690.168 L1709.56 690.168 L1710.12 690.168 L1710.68 690.168 L1711.24 690.168 L1711.8 690.168 L1712.36 690.168 L1712.92 690.168 L1713.48 690.168 L1714.04 690.168 L1714.6 690.168 L1715.15 690.168 L1715.71 690.168 L1716.27 690.168 L1716.83 690.168 L1717.39 690.168 L1717.95 690.168 L1718.51 690.168 L1719.07 690.168 L1719.63 690.168 L1720.19 690.168 L1720.75 690.168 L1721.31 690.168 L1721.87 690.168 L1722.42 690.168 L1722.98 690.168 L1723.54 690.168 L1724.1 690.168 L1724.66 690.168 L1725.22 690.168 L1725.78 690.168 L1726.34 690.168 L1726.9 690.168 L1727.46 690.168 L1728.02 690.168 L1728.58 690.168 L1729.14 690.168 L1729.69 690.168 L1730.25 690.168 L1730.81 690.168 L1731.37 690.168 L1731.93 690.168 L1732.49 690.168 L1733.05 690.168 L1733.61 690.168 L1734.17 690.168 L1734.73 690.168 L1735.29 690.168 L1735.85 690.168 L1736.41 690.168 L1736.97 690.168 L1737.52 690.168 L1738.08 690.168 L1738.64 690.168 L1739.2 690.168 L1739.76 690.168 L1740.32 690.168 L1740.88 690.168 L1741.44 690.168 L1742 690.168 L1742.56 690.168 L1743.12 690.168 L1743.68 690.168 L1744.24 690.168 L1744.79 690.168 L1745.35 690.168 L1745.91 690.168 L1746.47 690.168 L1747.03 690.168 L1747.59 690.168 L1748.15 690.168 L1748.71 690.168 L1749.27 690.168 L1749.83 690.168 L1750.39 690.168 L1750.95 690.168 L1751.51 690.168 L1752.06 690.168 L1752.62 690.168 L1753.18 690.168 L1753.74 690.168 L1754.3 690.168 L1754.86 690.168 L1755.42 690.168 L1755.98 690.168 L1756.54 690.168 L1757.1 690.168 L1757.66 690.168 L1758.22 690.168 L1758.78 690.168 L1759.34 690.168 L1759.89 690.168 L1760.45 690.168 L1761.01 690.168 L1761.57 690.168 L1762.13 690.168 L1762.69 690.168 L1763.25 690.168 L1763.81 690.168 L1764.37 690.168 L1764.93 690.168 L1765.49 690.168 L1766.05 690.168 L1766.61 690.168 L1767.16 690.168 L1767.72 690.168 L1768.28 690.168 L1768.84 690.168 L1769.4 690.168 L1769.96 690.168 L1770.52 690.168 L1771.08 690.168 L1771.64 690.168 L1772.2 690.168 L1772.76 690.168 L1773.32 690.168 L1773.88 690.168 L1774.43 690.168 L1774.99 690.168 L1775.55 690.168 L1776.11 690.168 L1776.67 690.168 L1777.23 690.168 L1777.79 690.168 L1778.35 690.168 L1778.91 690.168 L1779.47 690.168 L1780.03 690.168 L1780.59 690.168 L1781.15 690.168 L1781.71 690.168 L1782.26 690.168 L1782.82 690.168 L1783.38 690.168 L1783.94 690.168 L1784.5 690.168 L1785.06 690.168 L1785.62 690.168 L1786.18 690.168 L1786.74 690.168 L1787.3 690.168 L1787.86 690.168 L1788.42 690.168 L1788.98 690.168 L1789.53 690.168 L1790.09 690.168 L1790.65 690.168 L1791.21 690.168 L1791.77 690.168 L1792.33 690.168 L1792.89 690.168 L1793.45 690.168 L1794.01 690.168 L1794.57 690.168 L1795.13 690.168 L1795.69 690.168 L1796.25 690.168 L1796.8 690.168 L1797.36 690.168 L1797.92 690.168 L1798.48 690.168 L1799.04 690.168 L1799.6 690.168 L1800.16 690.168 L1800.72 690.168 L1801.28 690.168 L1801.84 690.168 L1802.4 690.168 L1802.96 690.168 L1803.52 690.168 L1804.08 690.168 L1804.63 690.168 L1805.19 690.168 L1805.75 690.168 L1806.31 690.168 L1806.87 690.168 L1807.43 690.168 L1807.99 690.168 L1808.55 690.168 L1809.11 690.168 L1809.67 690.168 L1810.23 690.168 L1810.79 690.168 L1811.35 690.168 L1811.9 690.168 L1812.46 690.168 L1813.02 690.168 L1813.58 690.168 L1814.14 690.168 L1814.7 690.168 L1815.26 690.168 L1815.82 690.168 L1816.38 690.168 L1816.94 690.168 L1817.5 690.168 L1818.06 690.168 L1818.62 690.168 L1819.18 690.168 L1819.73 690.168 L1820.29 690.168 L1820.85 690.168 L1821.41 690.168 L1821.97 690.168 L1822.53 690.168 L1823.09 690.168 L1823.65 690.168 L1824.21 690.168 L1824.77 690.168 L1825.33 690.168 L1825.89 690.168 L1826.45 690.168 L1827 690.168 L1827.56 690.168 L1828.12 690.168 L1828.68 690.168 L1829.24 690.168 L1829.8 690.168 L1830.36 690.168 L1830.92 690.168 L1831.48 690.168 L1832.04 690.168 L1832.6 690.168 L1833.16 690.168 L1833.72 690.168 L1834.27 690.168 L1834.83 690.168 L1835.39 690.168 L1835.95 690.168 L1836.51 690.168 L1837.07 690.168 L1837.63 690.168 L1838.19 690.168 L1838.19 680.893 L1837.63 680.893 L1837.07 680.893 L1836.51 680.893 L1835.95 680.893 L1835.39 680.893 L1834.83 680.893 L1834.27 680.893 L1833.72 680.893 L1833.16 680.893 L1832.6 680.893 L1832.04 680.893 L1831.48 680.893 L1830.92 680.893 L1830.36 680.893 L1829.8 680.893 L1829.24 680.893 L1828.68 680.893 L1828.12 680.893 L1827.56 680.893 L1827 680.893 L1826.45 680.893 L1825.89 680.893 L1825.33 680.893 L1824.77 680.893 L1824.21 680.893 L1823.65 680.893 L1823.09 680.893 L1822.53 680.893 L1821.97 680.893 L1821.41 680.893 L1820.85 680.893 L1820.29 680.893 L1819.73 680.893 L1819.18 680.893 L1818.62 680.893 L1818.06 680.893 L1817.5 680.893 L1816.94 680.893 L1816.38 680.893 L1815.82 680.893 L1815.26 680.893 L1814.7 680.893 L1814.14 680.893 L1813.58 680.893 L1813.02 680.893 L1812.46 680.893 L1811.9 680.893 L1811.35 680.893 L1810.79 680.893 L1810.23 680.893 L1809.67 680.893 L1809.11 680.893 L1808.55 680.893 L1807.99 680.893 L1807.43 680.893 L1806.87 680.893 L1806.31 680.893 L1805.75 680.893 L1805.19 680.893 L1804.63 680.893 L1804.08 680.893 L1803.52 680.893 L1802.96 680.893 L1802.4 680.893 L1801.84 680.893 L1801.28 680.893 L1800.72 680.893 L1800.16 680.893 L1799.6 680.893 L1799.04 680.893 L1798.48 680.893 L1797.92 680.893 L1797.36 680.893 L1796.8 680.893 L1796.25 680.893 L1795.69 680.893 L1795.13 680.893 L1794.57 680.893 L1794.01 680.893 L1793.45 680.893 L1792.89 680.893 L1792.33 680.893 L1791.77 680.893 L1791.21 680.893 L1790.65 680.893 L1790.09 680.893 L1789.53 680.893 L1788.98 680.893 L1788.42 680.893 L1787.86 680.893 L1787.3 680.893 L1786.74 680.893 L1786.18 680.893 L1785.62 680.893 L1785.06 680.893 L1784.5 680.893 L1783.94 680.893 L1783.38 680.893 L1782.82 680.893 L1782.26 680.893 L1781.71 680.893 L1781.15 680.893 L1780.59 680.893 L1780.03 680.893 L1779.47 680.893 L1778.91 680.893 L1778.35 680.893 L1777.79 680.893 L1777.23 680.893 L1776.67 680.893 L1776.11 680.893 L1775.55 680.893 L1774.99 680.893 L1774.43 680.893 L1773.88 680.893 L1773.32 680.893 L1772.76 680.893 L1772.2 680.893 L1771.64 680.893 L1771.08 680.893 L1770.52 680.893 L1769.96 680.893 L1769.4 680.893 L1768.84 680.893 L1768.28 680.893 L1767.72 680.893 L1767.16 680.893 L1766.61 680.893 L1766.05 680.893 L1765.49 680.893 L1764.93 680.893 L1764.37 680.893 L1763.81 680.893 L1763.25 680.893 L1762.69 680.893 L1762.13 680.893 L1761.57 680.893 L1761.01 680.893 L1760.45 680.893 L1759.89 680.893 L1759.34 680.893 L1758.78 680.893 L1758.22 680.893 L1757.66 680.893 L1757.1 680.893 L1756.54 680.893 L1755.98 680.893 L1755.42 680.893 L1754.86 680.893 L1754.3 680.893 L1753.74 680.893 L1753.18 680.893 L1752.62 680.893 L1752.06 680.893 L1751.51 680.893 L1750.95 680.893 L1750.39 680.893 L1749.83 680.893 L1749.27 680.893 L1748.71 680.893 L1748.15 680.893 L1747.59 680.893 L1747.03 680.893 L1746.47 680.893 L1745.91 680.893 L1745.35 680.893 L1744.79 680.893 L1744.24 680.893 L1743.68 680.893 L1743.12 680.893 L1742.56 680.893 L1742 680.893 L1741.44 680.893 L1740.88 680.893 L1740.32 680.893 L1739.76 680.893 L1739.2 680.893 L1738.64 680.893 L1738.08 680.893 L1737.52 680.893 L1736.97 680.893 L1736.41 680.893 L1735.85 680.893 L1735.29 680.893 L1734.73 680.893 L1734.17 680.893 L1733.61 680.893 L1733.05 680.893 L1732.49 680.893 L1731.93 680.893 L1731.37 680.893 L1730.81 680.893 L1730.25 680.893 L1729.69 680.893 L1729.14 680.893 L1728.58 680.893 L1728.02 680.893 L1727.46 680.893 L1726.9 680.893 L1726.34 680.893 L1725.78 680.893 L1725.22 680.893 L1724.66 680.893 L1724.1 680.893 L1723.54 680.893 L1722.98 680.893 L1722.42 680.893 L1721.87 680.893 L1721.31 680.893 L1720.75 680.893 L1720.19 680.893 L1719.63 680.893 L1719.07 680.893 L1718.51 680.893 L1717.95 680.893 L1717.39 680.893 L1716.83 680.893 L1716.27 680.893 L1715.71 680.893 L1715.15 680.893 L1714.6 680.893 L1714.04 680.893 L1713.48 680.893 L1712.92 680.893 L1712.36 680.893 L1711.8 680.893 L1711.24 680.893 L1710.68 680.893 L1710.12 680.893 L1709.56 680.893 L1709 680.893 L1708.44 680.893 L1707.88 680.893 L1707.32 680.893 L1706.77 680.893 L1706.21 680.893 L1705.65 680.893 L1705.09 680.893 L1704.53 680.893 L1703.97 680.893 L1703.41 680.893 L1702.85 680.893 L1702.29 680.893 L1701.73 680.893 L1701.17 680.893 L1700.61 680.893 L1700.05 680.893 L1699.5 680.893 L1698.94 680.893 L1698.38 680.893 L1697.82 680.893 L1697.26 680.893 L1696.7 680.893 L1696.14 680.893 L1695.58 680.893 L1695.02 680.893 L1694.46 680.893 L1693.9 680.893 L1693.34 680.893 L1692.78 680.893 L1692.23 680.893 L1691.67 680.893 L1691.11 680.893 L1690.55 680.893 L1689.99 680.893 L1689.43 680.893 L1688.87 680.893 L1688.31 680.893 L1687.75 680.893 L1687.19 680.893 L1686.63 680.893 L1686.07 680.893 L1685.51 680.893 L1684.95 680.893 L1684.4 680.893 L1683.84 680.893 L1683.28 680.893 L1682.72 680.893 L1682.16 680.893 L1681.6 680.893 L1681.04 680.893 L1680.48 680.893 L1679.92 680.893 L1679.36 680.893 L1678.8 680.893 L1678.24 680.893 L1677.68 680.893 L1677.13 680.893 L1676.57 680.893 L1676.01 680.893 L1675.45 680.893 L1674.89 680.893 L1674.33 680.893 L1673.77 680.893 L1673.21 680.893 L1672.65 680.893 L1672.09 680.893 L1671.53 680.893 L1670.97 680.893 L1670.41 680.893 L1669.85 680.893 L1669.3 680.893 L1668.74 680.893 L1668.18 680.893 L1667.62 680.893 L1667.06 680.893 L1666.5 680.893 L1665.94 680.893 L1665.38 680.893 L1664.82 680.893 L1664.26 680.893 L1663.7 680.893 L1663.14 680.893 L1662.58 680.893 L1662.03 680.893 L1661.47 680.893 L1660.91 680.893 L1660.35 680.893 L1659.79 680.893 L1659.23 680.893 L1658.67 680.893 L1658.11 680.893 L1657.55 680.893 L1656.99 680.893 L1656.43 680.893 L1655.87 680.893 L1655.31 680.893 L1654.76 680.893 L1654.2 680.893 L1653.64 680.893 L1653.08 680.893 L1652.52 680.893 L1651.96 680.893 L1651.4 680.893 L1650.84 680.893 L1650.28 680.893 L1649.72 680.893 L1649.16 680.893 L1648.6 680.893 L1648.04 680.893 L1647.48 680.893 L1646.93 680.893 L1646.37 680.893 L1645.81 680.893 L1645.25 680.893 L1644.69 680.893 L1644.13 680.893 L1643.57 680.893 L1643.01 680.893 L1642.45 680.893 L1641.89 680.893 L1641.33 680.893 L1640.77 680.893 L1640.21 680.893 L1639.66 680.893 L1639.1 680.893 L1638.54 680.893 L1637.98 680.893 L1637.42 680.893 L1636.86 680.893 L1636.3 680.893 L1635.74 680.893 L1635.18 680.893 L1634.62 680.893 L1634.06 680.893 L1633.5 680.893 L1632.94 680.893 L1632.39 680.893 L1631.83 680.893 L1631.27 680.893 L1630.71 680.893 L1630.15 680.893 L1629.59 680.893 L1629.03 680.893 L1628.47 680.893 L1627.91 680.893 L1627.35 680.893 L1626.79 680.893 L1626.23 680.893 L1625.67 680.893 L1625.11 680.893 L1624.56 680.893 L1624 680.893 L1623.44 680.893 L1622.88 680.893 L1622.32 680.893 L1621.76 680.893 L1621.2 680.893 L1620.64 680.893 L1620.08 680.893 L1619.52 680.893 L1618.96 680.893 L1618.4 680.893 L1617.84 680.893 L1617.29 680.893 L1616.73 680.893 L1616.17 680.893 L1615.61 680.893 L1615.05 680.893 L1614.49 680.893 L1613.93 680.893 L1613.37 680.893 L1612.81 680.893 L1612.25 680.893 L1611.69 680.893 L1611.13 680.893 L1610.57 680.893 L1610.02 680.893 L1609.46 680.893 L1608.9 680.893 L1608.34 680.893 L1607.78 680.893 L1607.22 680.893 L1606.66 680.893 L1606.1 680.893 L1605.54 680.893 L1604.98 680.893 L1604.42 680.893 L1603.86 680.893 L1603.3 680.893 L1602.74 680.893 L1602.19 680.893 L1601.63 680.893 L1601.07 680.893 L1600.51 680.893 L1599.95 680.893 L1599.39 680.893 L1598.83 680.893 L1598.27 680.893 L1597.71 680.893 L1597.15 680.893 L1596.59 680.893 L1596.03 680.893 L1595.47 680.893 L1594.92 680.893 L1594.36 680.893 L1593.8 680.893 L1593.24 680.893 L1592.68 680.893 L1592.12 680.893 L1591.56 680.893 L1591 680.893 L1590.44 680.893 L1589.88 680.893 L1589.32 680.893 L1588.76 680.893 L1588.2 680.893 L1587.65 680.893 L1587.09 680.893 L1586.53 680.893 L1585.97 680.893 L1585.41 680.893 L1584.85 680.893 L1584.29 680.893 L1583.73 680.893 L1583.17 680.893 L1582.61 680.893 L1582.05 680.893 L1581.49 680.893 L1580.93 680.893 L1580.37 680.893 L1579.82 680.893 L1579.26 680.893 L1578.7 680.893 L1578.14 680.893 L1577.58 680.893 L1577.02 680.893 L1576.46 680.893 L1575.9 680.893 L1575.34 680.893 L1574.78 680.893 L1574.22 680.893 L1573.66 680.893 L1573.1 680.893 L1572.55 680.893 L1571.99 680.893 L1571.43 680.893 L1570.87 680.893 L1570.31 680.893 L1569.75 680.893 L1569.19 680.893 L1568.63 680.893 L1568.07 680.893 L1567.51 680.893 L1566.95 680.893 L1566.39 680.893 L1565.83 680.893 L1565.28 680.893 L1564.72 680.893 L1564.16 680.893 L1563.6 680.893 L1563.04 680.893 L1562.48 680.893 L1561.92 680.893 L1561.36 680.893 L1560.8 680.893 L1560.24 680.893 L1559.68 680.893 L1559.12 680.893 L1558.56 680.893 L1558 680.893 L1557.45 680.893 L1556.89 680.893 L1556.33 680.893 L1555.77 680.893 L1555.21 680.893 L1554.65 680.893 L1554.09 680.893 L1553.53 680.893 L1552.97 680.893 L1552.41 680.893 L1551.85 680.893 L1551.29 680.893 L1550.73 680.893 L1550.18 680.893 L1549.62 680.893 L1549.06 680.893 L1548.5 680.893 L1547.94 680.893 L1547.38 680.893 L1546.82 680.893 L1546.26 680.893 L1545.7 680.893 L1545.14 680.893 L1544.58 680.893 L1544.02 680.893 L1543.46 680.893 L1542.9 680.893 L1542.35 680.893 L1541.79 680.893 L1541.23 680.893 L1540.67 680.893 L1540.11 680.893 L1539.55 680.893 L1538.99 680.893 L1538.43 680.893 L1537.87 680.893 L1537.31 680.893 L1536.75 680.893 L1536.19 680.893 L1535.63 680.893 L1535.08 680.893 L1534.52 680.893 L1533.96 680.893 L1533.4 680.893 L1532.84 680.893 L1532.28 680.893 L1531.72 680.893 L1531.16 680.893 L1530.6 680.893 L1530.04 680.893 L1529.48 680.893 L1528.92 680.893 L1528.36 680.893 L1527.81 680.893 L1527.25 680.893 L1526.69 680.893 L1526.13 680.893 L1525.57 680.893 L1525.01 680.893 L1524.45 680.893 L1523.89 680.893 L1523.33 680.893 L1522.77 680.893 L1522.21 680.893 L1521.65 680.893 L1521.09 680.893 L1520.53 680.893 L1519.98 680.893 L1519.42 680.893 L1518.86 680.893 L1518.3 680.893 L1517.74 680.893 L1517.18 680.893 L1516.62 680.893 L1516.06 680.893 L1515.5 680.893 L1514.94 680.893 L1514.38 680.893 L1513.82 680.893 L1513.26 680.893 L1512.71 680.893 L1512.15 680.893 L1511.59 680.893 L1511.03 680.893 L1510.47 680.893 L1509.91 680.893 L1509.35 680.893 L1508.79 680.893 L1508.23 680.893 L1507.67 680.893 L1507.11 680.893 L1506.55 680.893 L1505.99 680.893 L1505.44 680.893 L1504.88 680.893 L1504.32 680.893 L1503.76 680.893 L1503.2 680.893 L1502.64 680.893 L1502.08 680.893 L1501.52 680.893 L1500.96 680.893 L1500.4 680.893 L1499.84 680.893 L1499.28 680.893 L1498.72 680.893 L1498.16 680.893 L1497.61 680.893 L1497.05 680.893 L1496.49 680.893 L1495.93 680.893 L1495.37 680.893 L1494.81 680.893 L1494.25 680.893 L1493.69 680.893 L1493.13 680.893 L1492.57 680.893 L1492.01 680.893 L1491.45 680.893 L1490.89 680.893 L1490.34 680.893 L1489.78 680.893 L1489.22 680.893 L1488.66 680.893 L1488.1 680.893 L1487.54 680.893 L1486.98 680.893 L1486.42 680.893 L1485.86 680.893 L1485.3 680.893 L1484.74 680.893 L1484.18 680.893 L1483.62 680.893 L1483.07 680.893 L1482.51 680.893 L1481.95 680.893 L1481.39 680.893 L1480.83 680.893 L1480.27 680.893 L1479.71 680.893 L1479.15 680.893 L1478.59 680.893 L1478.03 680.893 L1477.47 680.893 L1476.91 680.893 L1476.35 680.893 L1475.79 680.893 L1475.24 680.893 L1474.68 680.893 L1474.12 680.893 L1473.56 680.893 L1473 680.893 L1472.44 680.893 L1471.88 680.893 L1471.32 680.893 L1470.76 680.893 L1470.2 680.893 L1469.64 680.893 L1469.08 680.893 L1468.52 680.893 L1467.97 680.893 L1467.41 680.893 L1466.85 680.893 L1466.29 680.893 L1465.73 680.893 L1465.17 680.893 L1464.61 680.893 L1464.05 680.893 L1463.49 680.893 L1462.93 680.893 L1462.37 680.893 L1461.81 680.893 L1461.25 680.893 L1460.7 680.893 L1460.14 680.893 L1459.58 680.893 L1459.02 680.893 L1458.46 680.893 L1457.9 680.893 L1457.34 680.893 L1456.78 680.893 L1456.22 680.893 L1455.66 680.893 L1455.1 680.893 L1454.54 680.893 L1453.98 680.893 L1453.42 680.893 L1452.87 680.893 L1452.31 680.893 L1451.75 680.893 L1451.19 680.893 L1450.63 680.893 L1450.07 680.893 L1449.51 680.893 L1448.95 680.893 L1448.39 680.893 L1447.83 680.893 L1447.27 680.893 L1446.71 680.893 L1446.15 680.893 L1445.6 680.893 L1445.04 680.893 L1444.48 680.893 L1443.92 680.893 L1443.36 680.893 L1442.8 680.893 L1442.24 680.893 L1441.68 680.893 L1441.12 680.893 L1440.56 680.893 L1440 680.893 L1439.44 680.893 L1438.88 680.893 L1438.33 680.893 L1437.77 680.893 L1437.21 680.893 L1436.65 680.893 L1436.09 680.893 L1435.53 680.893 L1434.97 680.893 L1434.41 680.893 L1433.85 680.893 L1433.29 680.893 L1432.73 680.893 L1432.17 680.893 L1431.61 680.893 L1431.05 680.893 L1430.5 680.893 L1429.94 680.893 L1429.38 680.893 L1428.82 680.893 L1428.26 680.893 L1427.7 680.893 L1427.14 680.893 L1426.58 680.893 L1426.02 680.893 L1425.46 680.893 L1424.9 680.893 L1424.34 680.893 L1423.78 680.893 L1423.23 680.893 L1422.67 680.893 L1422.11 680.893 L1421.55 680.893 L1420.99 680.893 L1420.43 680.893 L1419.87 680.893 L1419.31 680.893 L1418.75 680.893 L1418.19 680.893 L1417.63 680.893 L1417.07 680.893 L1416.51 680.893 L1415.95 680.893 L1415.4 680.893 L1414.84 680.893 L1414.28 680.893 L1413.72 680.893 L1413.16 680.893 L1412.6 680.893 L1412.04 680.893 L1411.48 680.893 L1410.92 680.893 L1410.36 680.893 L1409.8 680.893 L1409.24 680.893 L1408.68 680.893 L1408.13 680.893 L1407.57 680.893 L1407.01 680.893 L1406.45 680.893 L1405.89 680.893 L1405.33 680.893 L1404.77 680.893 L1404.21 680.893 L1403.65 680.893 L1403.09 680.893 L1402.53 680.893 L1401.97 680.893 L1401.41 680.893 L1400.86 680.893 L1400.3 680.893 L1399.74 680.893 L1399.18 680.893 L1398.62 680.893 L1398.06 680.893 L1397.5 680.893 L1396.94 680.893 L1396.38 680.893 L1395.82 680.893 L1395.26 680.893 L1394.7 680.893 L1394.14 680.893 L1393.58 680.893 L1393.03 680.893 L1392.47 680.893 L1391.91 680.893 L1391.35 680.893 L1390.79 680.893 L1390.23 680.893 L1389.67 680.893 L1389.11 680.893 L1388.55 680.893 L1387.99 680.893 L1387.43 680.893 L1386.87 680.893 L1386.31 680.893 L1385.76 680.893 L1385.2 680.893 L1384.64 680.893 L1384.08 680.893 L1383.52 680.893 L1382.96 680.893 L1382.4 680.893 L1381.84 680.893 L1381.28 680.893 L1380.72 680.893 L1380.16 680.893 L1379.6 680.893 L1379.04 680.893 L1378.49 680.893 L1377.93 680.893 L1377.37 680.893 L1376.81 680.893 L1376.25 680.893 L1375.69 680.893 L1375.13 680.893 L1374.57 680.893 L1374.01 680.893 L1373.45 680.893 L1372.89 680.893 L1372.33 680.893 L1371.77 680.893 L1371.21 680.893 L1370.66 680.893 L1370.1 680.893 L1369.54 680.893 L1368.98 680.893 L1368.42 680.893 L1367.86 680.893 L1367.3 680.893 L1366.74 680.893 L1366.18 680.893 L1365.62 680.893 L1365.06 680.893 L1364.5 680.893 L1363.94 680.893 L1363.39 680.893 L1362.83 680.893 L1362.27 680.893 L1361.71 680.893 L1361.15 680.893 L1360.59 680.893 L1360.03 680.893 L1359.47 680.893 L1358.91 680.893 L1358.35 680.893 L1357.79 680.893 L1357.23 680.893 L1356.67 680.893 L1356.12 680.893 L1355.56 680.893 L1355 680.893 L1354.44 680.893 L1353.88 680.893 L1353.32 680.893 L1352.76 680.893 L1352.2 680.893 L1351.64 680.893 L1351.08 680.893 L1350.52 680.893 L1349.96 680.893 L1349.4 680.893 L1348.84 680.893 L1348.29 680.893 L1347.73 680.893 L1347.17 680.893 L1346.61 680.893 L1346.05 680.893 L1345.49 680.893 L1344.93 680.893 L1344.37 680.893 L1343.81 680.893 L1343.25 680.893 L1342.69 680.893 L1342.13 680.893 L1341.57 680.893 L1341.02 680.893 L1340.46 680.893 L1339.9 680.893 L1339.34 680.893 L1338.78 680.893 L1338.22 680.893 L1337.66 680.893 L1337.1 680.893 L1336.54 680.893 L1335.98 680.893 L1335.42 680.893 L1334.86 680.893 L1334.3 680.893 L1333.75 680.893 L1333.19 680.893 L1332.63 680.893 L1332.07 680.893 L1331.51 680.893 L1330.95 680.893 L1330.39 680.893 L1329.83 680.893 L1329.27 680.893 L1328.71 680.893 L1328.15 680.893 L1327.59 680.893 L1327.03 680.893 L1326.47 680.893 L1325.92 680.893 L1325.36 680.893 L1324.8 680.893 L1324.24 680.893 L1323.68 680.893 L1323.12 680.893 L1322.56 680.893 L1322 680.893 L1321.44 680.893 L1320.88 680.893 L1320.32 680.893 L1319.76 680.893 L1319.2 680.893 L1318.65 680.893 L1318.09 680.893 L1317.53 680.893 L1316.97 680.893 L1316.41 680.893 L1315.85 680.893 L1315.29 680.893 L1314.73 680.893 L1314.17 680.893 L1313.61 680.893 L1313.05 680.893 L1312.49 680.893 L1311.93 680.893 L1311.38 680.893 L1310.82 680.893 L1310.26 680.893 L1309.7 680.893 L1309.14 680.893 L1308.58 680.893 L1308.02 680.893 L1307.46 680.893 L1306.9 680.893 L1306.34 680.893 L1305.78 680.893 L1305.22 680.893 L1304.66 680.893 L1304.1 680.893 L1303.55 680.893 L1302.99 680.893 L1302.43 680.893 L1301.87 680.893 L1301.31 680.893 L1300.75 680.893 L1300.19 680.893 L1299.63 680.893 L1299.07 680.893 L1298.51 680.893 L1297.95 680.893 L1297.39 680.893 L1296.83 680.893 L1296.28 680.893 L1295.72 680.893 L1295.16 680.893 L1294.6 680.893 L1294.04 680.893 L1293.48 680.893 L1292.92 680.893 L1292.36 680.893 L1291.8 680.893 L1291.24 680.893 L1290.68 680.893 L1290.12 680.893 L1289.56 680.893 L1289 680.893 L1288.45 680.893 L1287.89 680.893 L1287.33 680.893 L1286.77 680.893 L1286.21 680.893 L1285.65 680.893 L1285.09 680.893 L1284.53 680.893 L1283.97 680.893 L1283.41 680.893 L1282.85 680.893 L1282.29 680.893 L1281.73 680.893 L1281.18 680.893 L1280.62 680.893 L1280.06 680.893 L1279.5 680.893 L1278.94 680.893 L1278.38 680.893 L1277.82 680.893 L1277.26 680.893 L1276.7 680.893 L1276.14 680.893 L1275.58 680.893 L1275.02 680.893 L1274.46 680.893 L1273.91 680.893 L1273.35 680.893 L1272.79 680.893 L1272.23 680.893 L1271.67 680.893 L1271.11 680.893 L1270.55 680.893 L1269.99 680.893 L1269.43 680.893 L1268.87 680.893 L1268.31 680.893 L1267.75 680.893 L1267.19 680.893 L1266.63 680.893 L1266.08 680.893 L1265.52 680.893 L1264.96 680.893 L1264.4 680.893 L1263.84 680.893 L1263.28 680.893 L1262.72 680.893 L1262.16 680.893 L1261.6 680.893 L1261.04 680.893 L1260.48 680.893 L1259.92 680.893 L1259.36 680.893 L1258.81 680.893 L1258.25 680.893 L1257.69 680.893 L1257.13 680.893 L1256.57 680.893 L1256.01 680.893 L1255.45 680.893 L1254.89 680.893 L1254.33 680.893 L1253.77 680.893 L1253.21 680.893 L1252.65 680.893 L1252.09 680.893 L1251.54 680.893 L1250.98 680.893 L1250.42 680.893 L1249.86 680.893 L1249.3 680.893 L1248.74 680.893 L1248.18 680.893 L1247.62 680.893 L1247.06 680.893 L1246.5 680.893 L1245.94 680.893 L1245.38 680.893 L1244.82 680.893 L1244.26 680.893 L1243.71 680.893 L1243.15 680.893 L1242.59 680.893 L1242.03 680.893 L1241.47 680.893 L1240.91 680.893 L1240.35 680.893 L1239.79 680.893 L1239.23 680.893 L1238.67 680.893 L1238.11 680.893 L1237.55 680.893 L1236.99 680.893 L1236.44 680.893 L1235.88 680.893 L1235.32 680.893 L1234.76 680.893 L1234.2 680.893 L1233.64 680.893 L1233.08 680.893 L1232.52 680.893 L1231.96 680.893 L1231.4 680.893 L1230.84 680.893 L1230.28 680.893 L1229.72 680.893 L1229.17 680.893 L1228.61 680.893 L1228.05 680.893 L1227.49 680.893 L1226.93 680.893 L1226.37 680.893 L1225.81 680.893 L1225.25 680.893 L1224.69 680.893 L1224.13 680.893 L1223.57 680.893 L1223.01 680.893 L1222.45 680.893 L1221.89 680.893 L1221.34 680.893 L1220.78 680.893 L1220.22 680.893 L1219.66 680.893 L1219.1 680.893 L1218.54 680.893 L1217.98 680.893 L1217.42 680.893 L1216.86 680.893 L1216.3 680.893 L1215.74 680.893 L1215.18 680.893 L1214.62 680.893 L1214.07 680.893 L1213.51 680.893 L1212.95 680.893 L1212.39 680.893 L1211.83 680.893 L1211.27 680.893 L1210.71 680.893 L1210.15 680.893 L1209.59 680.893 L1209.03 680.893 L1208.47 680.893 L1207.91 680.893 L1207.35 680.893 L1206.8 680.893 L1206.24 680.893 L1205.68 680.893 L1205.12 680.893 L1204.56 680.893 L1204 680.893 L1203.44 680.893 L1202.88 680.893 L1202.32 680.893 L1201.76 680.893 L1201.2 680.893 L1200.64 680.893 L1200.08 680.893 L1199.52 680.893 L1198.97 680.893 L1198.41 680.893 L1197.85 680.893 L1197.29 680.893 L1196.73 680.893 L1196.17 680.893 L1195.61 680.893 L1195.05 680.893 L1194.49 680.893 L1193.93 680.893 L1193.37 680.893 L1192.81 680.893 L1192.25 680.893 L1191.7 680.893 L1191.14 680.893 L1190.58 680.893 L1190.02 680.893 L1189.46 680.893 L1188.9 680.893 L1188.34 680.893 L1187.78 680.893 L1187.22 680.893 L1186.66 680.893 L1186.1 680.893 L1185.54 680.893 L1184.98 680.893 L1184.43 680.893 L1183.87 680.893 L1183.31 680.893 L1182.75 680.893 L1182.19 680.893 L1181.63 680.893 L1181.07 680.893 L1180.51 680.893 L1179.95 680.893 L1179.39 680.893 L1178.83 680.893 L1178.27 680.893 L1177.71 680.893 L1177.15 680.893 L1176.6 680.893 L1176.04 680.893 L1175.48 680.893 L1174.92 680.893 L1174.36 680.893 L1173.8 680.893 L1173.24 680.893 L1172.68 680.893 L1172.12 680.893 L1171.56 680.893 L1171 680.893 L1170.44 680.893 L1169.88 680.893 L1169.33 680.893 L1168.77 680.893 L1168.21 680.893 L1167.65 680.893 L1167.09 680.893 L1166.53 680.893 L1165.97 680.893 L1165.41 680.893 L1164.85 680.893 L1164.29 680.893 L1163.73 680.893 L1163.17 680.893 L1162.61 680.893 L1162.05 680.893 L1161.5 680.893 L1160.94 680.893 L1160.38 680.893 L1159.82 680.893 L1159.26 680.893 L1158.7 680.893 L1158.14 680.893 L1157.58 680.893 L1157.02 680.893 L1156.46 680.893 L1155.9 680.893 L1155.34 680.893 L1154.78 680.893 L1154.23 680.893 L1153.67 680.893 L1153.11 680.893 L1152.55 680.893 L1151.99 680.893 L1151.43 680.893 L1150.87 680.893 L1150.31 680.893 L1149.75 680.893 L1149.19 680.893 L1148.63 680.893 L1148.07 680.893 L1147.51 680.893 L1146.96 680.893 L1146.4 680.893 L1145.84 680.893 L1145.28 680.893 L1144.72 680.893 L1144.16 680.893 L1143.6 680.893 L1143.04 680.893 L1142.48 680.893 L1141.92 680.893 L1141.36 680.893 L1140.8 680.893 L1140.24 680.893 L1139.68 680.893 L1139.13 680.893 L1138.57 680.893 L1138.01 680.893 L1137.45 680.893 L1136.89 680.893 L1136.33 680.893 L1135.77 680.893 L1135.21 680.893 L1134.65 680.893 L1134.09 680.893 L1133.53 680.893 L1132.97 680.893 L1132.41 680.893 L1131.86 680.893 L1131.3 680.893 L1130.74 680.893 L1130.18 680.893 L1129.62 680.893 L1129.06 680.893 L1128.5 680.893 L1127.94 680.893 L1127.38 680.893 L1126.82 680.893 L1126.26 680.893 L1125.7 680.893 L1125.14 680.893 L1124.59 680.893 L1124.03 680.893 L1123.47 680.893 L1122.91 680.893 L1122.35 680.893 L1121.79 680.893 L1121.23 680.893 L1120.67 680.893 L1120.11 680.893 L1119.55 680.893 L1118.99 680.893 L1118.43 680.893 L1117.87 680.893 L1117.31 680.893 L1116.76 680.893 L1116.2 680.893 L1115.64 680.893 L1115.08 680.893 L1114.52 680.893 L1113.96 680.893 L1113.4 680.893 L1112.84 680.893 L1112.28 680.893 L1111.72 680.893 L1111.16 680.893 L1110.6 680.893 L1110.04 680.893 L1109.49 680.893 L1108.93 680.893 L1108.37 680.893 L1107.81 680.893 L1107.25 680.893 L1106.69 680.893 L1106.13 680.893 L1105.57 680.893 L1105.01 680.893 L1104.45 680.893 L1103.89 680.893 L1103.33 680.893 L1102.77 680.893 L1102.22 680.893 L1101.66 680.893 L1101.1 680.893 L1100.54 680.893 L1099.98 680.893 L1099.42 680.893 L1098.86 680.893 L1098.3 680.893 L1097.74 680.893 L1097.18 680.893 L1096.62 680.893 L1096.06 680.893 L1095.5 680.893 L1094.94 680.893 L1094.39 680.893 L1093.83 680.893 L1093.27 680.893 L1092.71 680.893 L1092.15 680.893 L1091.59 680.893 L1091.03 680.893 L1090.47 680.893 L1089.91 680.893 L1089.35 680.893 L1088.79 680.893 L1088.23 680.893 L1087.67 680.893 L1087.12 680.893 L1086.56 680.893 L1086 680.893 L1085.44 680.893 L1084.88 680.893 L1084.32 680.893 L1083.76 680.893 L1083.2 680.893 L1082.64 680.893 L1082.08 680.893 L1081.52 680.893 L1080.96 680.893 L1080.4 680.893 L1079.85 680.893 L1079.29 680.893 L1078.73 680.893 L1078.17 680.893 L1077.61 680.893 L1077.05 680.893 L1076.49 680.893 L1075.93 680.893 L1075.37 680.893 L1074.81 680.893 L1074.25 680.893 L1073.69 680.893 L1073.13 680.893 L1072.57 680.893 L1072.02 680.893 L1071.46 680.893 L1070.9 680.893 L1070.34 680.893 L1069.78 680.893 L1069.22 680.893 L1068.66 680.893 L1068.1 680.893 L1067.54 680.893 L1066.98 680.893 L1066.42 680.893 L1065.86 680.893 L1065.3 680.893 L1064.75 680.893 L1064.19 680.893 L1063.63 680.893 L1063.07 680.893 L1062.51 680.893 L1061.95 680.893 L1061.39 680.893 L1060.83 680.893 L1060.27 680.893 L1059.71 680.893 L1059.15 680.893 L1058.59 680.893 L1058.03 680.893 L1057.48 680.893 L1056.92 680.893 L1056.36 680.893 L1055.8 680.893 L1055.24 680.893 L1054.68 680.893 L1054.12 680.893 L1053.56 680.893 L1053 680.893 L1052.44 680.893 L1051.88 680.893 L1051.32 680.893 L1050.76 680.893 L1050.2 680.893 L1049.65 680.893 L1049.09 680.893 L1048.53 680.893 L1047.97 680.893 L1047.41 680.893 L1046.85 680.893 L1046.29 680.893 L1045.73 680.893 L1045.17 680.893 L1044.61 680.893 L1044.05 680.893 L1043.49 680.893 L1042.93 680.893 L1042.38 680.893 L1041.82 680.893 L1041.26 680.893 L1040.7 680.893 L1040.14 680.893 L1039.58 680.893 L1039.02 680.893 L1038.46 680.893 L1037.9 680.893 L1037.34 680.893 L1036.78 680.893 L1036.22 680.893 L1035.66 680.893 L1035.1 680.893 L1034.55 680.893 L1033.99 680.893 L1033.43 680.893 L1032.87 680.893 L1032.31 680.893 L1031.75 680.893 L1031.19 680.893 L1030.63 680.893 L1030.07 680.893 L1029.51 680.893 L1028.95 680.893 L1028.39 680.893 L1027.83 680.893 L1027.28 680.893 L1026.72 680.893 L1026.16 680.893 L1025.6 680.893 L1025.04 680.893 L1024.48 680.893 L1023.92 680.893 L1023.36 680.893 L1022.8 680.893 L1022.24 680.893 L1021.68 680.893 L1021.12 680.893 L1020.56 680.893 L1020.01 680.893 L1019.45 680.893 L1018.89 680.893 L1018.33 680.893 L1017.77 680.893 L1017.21 680.893 L1016.65 680.893 L1016.09 680.893 L1015.53 680.893 L1014.97 680.893 L1014.41 680.893 L1013.85 680.893 L1013.29 680.893 L1012.73 680.893 L1012.18 680.893 L1011.62 680.893 L1011.06 680.893 L1010.5 680.893 L1009.94 680.893 L1009.38 680.893 L1008.82 680.893 L1008.26 680.893 L1007.7 680.893 L1007.14 680.893 L1006.58 680.893 L1006.02 680.893 L1005.46 680.893 L1004.91 680.893 L1004.35 680.893 L1003.79 680.893 L1003.23 680.893 L1002.67 680.893 L1002.11 680.893 L1001.55 680.893 L1000.99 680.893 L1000.43 680.893 L999.872 680.893 L999.313 680.893 L998.754 680.893 L998.194 680.893 L997.635 680.893 L997.076 680.893 L996.517 680.893 L995.957 680.893 L995.398 680.893 L994.839 680.893 L994.28 680.893 L993.72 680.893 L993.161 680.893 L992.602 680.893 L992.043 680.893 L991.483 680.893 L990.924 680.893 L990.365 680.893 L989.806 680.893 L989.246 680.893 L988.687 680.893 L988.128 680.893 L987.569 680.893 L987.009 680.893 L986.45 680.893 L985.891 680.893 L985.332 680.893 L984.772 680.893 L984.213 680.893 L983.654 680.893 L983.095 680.893 L982.535 680.893 L981.976 680.893 L981.417 680.893 L980.858 680.893 L980.298 680.893 L979.739 680.893 L979.18 680.893 L978.621 680.893 L978.061 680.893 L977.502 680.893 L976.943 680.893 L976.384 680.893 L975.824 680.893 L975.265 680.893 L974.706 680.893 L974.147 680.893 L973.587 680.893 L973.028 680.893 L972.469 680.893 L971.91 680.893 L971.35 680.893 L970.791 680.893 L970.232 680.893 L969.673 680.893 L969.113 680.893 L968.554 680.893 L967.995 680.893 L967.436 680.893 L966.876 680.893 L966.317 680.893 L965.758 680.893 L965.199 680.893 L964.639 680.893 L964.08 680.893 L963.521 680.893 L962.962 680.893 L962.402 680.893 L961.843 680.893 L961.284 680.893 L960.725 680.893 L960.165 680.893 L959.606 680.893 L959.047 680.893 L958.488 680.893 L957.928 680.893 L957.369 680.893 L956.81 680.893 L956.251 680.893 L955.691 680.893 L955.132 680.893 L954.573 680.893 L954.014 680.893 L953.454 680.893 L952.895 680.893 L952.336 680.893 L951.777 680.893 L951.217 680.893 L950.658 680.893 L950.099 680.893 L949.54 680.893 L948.98 680.893 L948.421 680.893 L947.862 680.893 L947.303 680.893 L946.743 680.893 L946.184 680.893 L945.625 680.893 L945.066 680.893 L944.506 680.893 L943.947 680.893 L943.388 680.893 L942.829 680.893 L942.269 680.893 L941.71 680.893 L941.151 680.893 L940.592 680.893 L940.032 680.893 L939.473 680.893 L938.914 680.893 L938.355 680.893 L937.795 680.893 L937.236 680.893 L936.677 680.893 L936.118 680.893 L935.558 680.893 L934.999 680.893 L934.44 680.893 L933.881 680.893 L933.321 680.893 L932.762 680.893 L932.203 680.893 L931.644 680.893 L931.084 680.893 L930.525 680.893 L929.966 680.893 L929.406 680.893 L928.847 680.893 L928.288 680.893 L927.729 680.893 L927.169 680.893 L926.61 680.893 L926.051 680.893 L925.492 680.893 L924.932 680.893 L924.373 680.893 L923.814 680.893 L923.255 680.893 L922.695 680.893 L922.136 680.893 L921.577 680.893 L921.018 680.893 L920.458 680.893 L919.899 680.893 L919.34 680.893 L918.781 680.893 L918.221 680.893 L917.662 680.893 L917.103 680.893 L916.544 680.893 L915.984 680.893 L915.425 680.893 L914.866 680.893 L914.307 680.893 L913.747 680.893 L913.188 680.893 L912.629 680.893 L912.07 680.893 L911.51 680.893 L910.951 680.893 L910.392 680.893 L909.833 680.893 L909.273 680.893 L908.714 680.893 L908.155 680.893 L907.596 680.893 L907.036 680.893 L906.477 680.893 L905.918 680.893 L905.359 680.893 L904.799 680.893 L904.24 680.893 L903.681 680.893 L903.122 680.893 L902.562 680.893 L902.003 680.893 L901.444 680.893 L900.885 680.893 L900.325 680.893 L899.766 680.893 L899.207 680.893 L898.648 680.893 L898.088 680.893 L897.529 680.893 L896.97 680.893 L896.411 680.893 L895.851 680.893 L895.292 680.893 L894.733 680.893 L894.174 680.893 L893.614 680.893 L893.055 680.893 L892.496 680.893 L891.937 680.893 L891.377 680.893 L890.818 680.893 L890.259 680.893 L889.7 680.893 L889.14 680.893 L888.581 680.893 L888.022 680.893 L887.463 680.893 L886.903 680.893 L886.344 680.893 L885.785 680.893 L885.226 680.893 L884.666 680.893 L884.107 680.893 L883.548 680.893 L882.989 680.893 L882.429 680.893 L881.87 680.893 L881.311 680.893 L880.752 680.893 L880.192 680.893 L879.633 680.893 L879.074 680.893 L878.515 680.893 L877.955 680.893 L877.396 680.893 L876.837 680.893 L876.278 680.893 L875.718 680.893 L875.159 680.893 L874.6 680.893 L874.041 680.893 L873.481 680.893 L872.922 680.893 L872.363 680.893 L871.804 680.893 L871.244 680.893 L870.685 680.893 L870.126 680.893 L869.567 680.893 L869.007 680.893 L868.448 680.893 L867.889 680.893 L867.33 680.893 L866.77 680.893 L866.211 680.893 L865.652 680.893 L865.093 680.893 L864.533 680.893 L863.974 680.893 L863.415 680.893 L862.856 680.893 L862.296 680.893 L861.737 680.893 L861.178 680.893 L860.619 680.893 L860.059 680.893 L859.5 680.893 L858.941 680.893 L858.382 680.893 L857.822 680.893 L857.263 680.893 L856.704 680.893 L856.145 680.893 L855.585 680.893 L855.026 680.893 L854.467 680.893 L853.908 680.893 L853.348 680.893 L852.789 680.893 L852.23 680.893 L851.671 680.893 L851.111 680.893 L850.552 680.893 L849.993 680.893 L849.434 680.893 L848.874 680.893 L848.315 680.893 L847.756 680.893 L847.197 680.893 L846.637 680.893 L846.078 680.893 L845.519 680.893 L844.96 680.893 L844.4 680.893 L843.841 680.893 L843.282 680.893 L842.723 680.893 L842.163 680.893 L841.604 680.893 L841.045 680.893 L840.486 680.893 L839.926 680.893 L839.367 680.893 L838.808 680.893 L838.249 680.893 L837.689 680.893 L837.13 680.893 L836.571 680.893 L836.012 680.893 L835.452 680.893 L834.893 680.893 L834.334 680.893 L833.775 680.893 L833.215 680.893 L832.656 680.893 L832.097 680.893 L831.538 680.893 L830.978 680.893 L830.419 680.893 L829.86 680.893 L829.301 680.893 L828.741 680.893 L828.182 680.893 L827.623 680.893 L827.064 680.893 L826.504 680.893 L825.945 680.893 L825.386 680.893 L824.827 680.893 L824.267 680.893 L823.708 680.893 L823.149 680.893 L822.59 680.893 L822.03 680.893 L821.471 680.893 L820.912 680.893 L820.353 680.893 L819.793 680.893 L819.234 680.893 L818.675 680.893 L818.116 680.893 L817.556 680.893 L816.997 680.893 L816.438 680.893 L815.879 680.893 L815.319 680.893 L814.76 680.893 L814.201 680.893 L813.642 680.893 L813.082 680.893 L812.523 680.893 L811.964 680.893 L811.405 680.893 L810.845 680.893 L810.286 680.893 L809.727 680.893 L809.168 680.893 L808.608 680.893 L808.049 680.893 L807.49 680.893 L806.931 680.893 L806.371 680.893 L805.812 680.893 L805.253 680.893 L804.693 680.893 L804.134 680.893 L803.575 680.893 L803.016 680.893 L802.456 680.893 L801.897 680.893 L801.338 680.893 L800.779 680.893 L800.219 680.893 L799.66 680.893 L799.101 680.893 L798.542 680.893 L797.982 680.893 L797.423 680.893 L796.864 680.893 L796.305 680.893 L795.745 680.893 L795.186 680.893 L794.627 680.893 L794.068 680.893 L793.508 680.893 L792.949 680.893 L792.39 680.893 L791.831 680.893 L791.271 680.893 L790.712 680.893 L790.153 680.893 L789.594 680.893 L789.034 680.893 L788.475 680.893 L787.916 680.893 L787.357 680.893 L786.797 680.893 L786.238 680.893 L785.679 680.893 L785.12 680.893 L784.56 680.893 L784.001 680.893 L783.442 680.893 L782.883 680.893 L782.323 680.893 L781.764 680.893 L781.205 680.893 L780.646 680.893 L780.086 680.893 L779.527 680.893 L778.968 680.893 L778.409 680.893 L777.849 680.893 L777.29 680.893 L776.731 680.893 L776.172 680.893 L775.612 680.893 L775.053 680.893 L774.494 680.893 L773.935 680.893 L773.375 680.893 L772.816 680.893 L772.257 680.893 L771.698 680.893 L771.138 680.893 L770.579 680.893 L770.02 680.893 L769.461 680.893 L768.901 680.893 L768.342 680.893 L767.783 680.893 L767.224 680.893 L766.664 680.893 L766.105 680.893 L765.546 680.893 L764.987 680.893 L764.427 680.893 L763.868 680.893 L763.309 680.893 L762.75 680.893 L762.19 680.893 L761.631 680.893 L761.072 680.893 L760.513 680.893 L759.953 680.893 L759.394 680.893 L758.835 680.893 L758.276 680.893 L757.716 680.893 L757.157 680.893 L756.598 680.893 L756.039 680.893 L755.479 680.893 L754.92 680.893 L754.361 680.893 L753.802 680.893 L753.242 680.893 L752.683 680.893 L752.124 680.893 L751.565 680.893 L751.005 680.893 L750.446 680.893 L749.887 680.893 L749.328 680.893 L748.768 680.893 L748.209 680.893 L747.65 680.893 L747.091 680.893 L746.531 680.893 L745.972 680.893 L745.413 680.893 L744.854 680.893 L744.294 680.893 L743.735 680.893 L743.176 680.893 L742.617 680.893 L742.057 680.893 L741.498 680.893 L740.939 680.893 L740.38 680.893 L739.82 680.893 L739.261 680.893 L738.702 680.893 L738.143 680.893 L737.583 680.893 L737.024 680.893 L736.465 680.893 L735.906 680.893 L735.346 680.893 L734.787 680.893 L734.228 680.893 L733.669 680.893 L733.109 680.893 L732.55 680.893 L731.991 680.893 L731.432 680.893 L730.872 680.893 L730.313 680.893 L729.754 680.893 L729.195 680.893 L728.635 680.893 L728.076 680.893 L727.517 680.893 L726.958 680.893 L726.398 680.893 L725.839 680.893 L725.28 680.893 L724.721 680.893 L724.161 680.893 L723.602 680.893 L723.043 680.893 L722.484 680.893 L721.924 680.893 L721.365 680.893 L720.806 680.893 L720.247 680.893  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.53 720.806,685.53 721.365,685.53 721.924,685.53 722.484,685.53 723.043,685.53 723.602,685.53 724.161,685.53 724.721,685.53 725.28,685.53 725.839,685.53 726.398,685.53 726.958,685.53 727.517,685.53 728.076,685.53 728.635,685.53 729.195,685.53 729.754,685.53 730.313,685.53 730.872,685.53 731.432,685.53 731.991,685.53 732.55,685.53 733.109,685.53 733.669,685.53 734.228,685.53 734.787,685.53 735.346,685.53 735.906,685.53 736.465,685.53 737.024,685.53 737.583,685.53 738.143,685.53 738.702,685.53 739.261,685.53 739.82,685.53 740.38,685.53 740.939,685.53 741.498,685.53 742.057,685.53 742.617,685.53 743.176,685.53 743.735,685.53 744.294,685.53 744.854,685.53 745.413,685.53 745.972,685.53 746.531,685.53 747.091,685.53 747.65,685.53 748.209,685.53 748.768,685.53 749.328,685.53 749.887,685.53 750.446,685.53 751.005,685.53 751.565,685.53 752.124,685.53 752.683,685.53 753.242,685.53 753.802,685.53 754.361,685.53 754.92,685.53 755.479,685.53 756.039,685.53 756.598,685.53 757.157,685.53 757.716,685.53 758.276,685.53 758.835,685.53 759.394,685.53 759.953,685.53 760.513,685.53 761.072,685.53 761.631,685.53 762.19,685.53 762.75,685.53 763.309,685.53 763.868,685.53 764.427,685.53 764.987,685.53 765.546,685.53 766.105,685.53 766.664,685.53 767.224,685.53 767.783,685.53 768.342,685.53 768.901,685.53 769.461,685.53 770.02,685.53 770.579,685.53 771.138,685.53 771.698,685.53 772.257,685.53 772.816,685.53 773.375,685.53 773.935,685.53 774.494,685.53 775.053,685.53 775.612,685.53 776.172,685.53 776.731,685.53 777.29,685.53 777.849,685.53 778.409,685.53 778.968,685.53 779.527,685.53 780.086,685.53 780.646,685.53 781.205,685.53 781.764,685.53 782.323,685.53 782.883,685.53 783.442,685.53 784.001,685.53 784.56,685.53 785.12,685.53 785.679,685.53 786.238,685.53 786.797,685.53 787.357,685.53 787.916,685.53 788.475,685.53 789.034,685.53 789.594,685.53 790.153,685.53 790.712,685.53 791.271,685.53 791.831,685.53 792.39,685.53 792.949,685.53 793.508,685.53 794.068,685.53 794.627,685.53 795.186,685.53 795.745,685.53 796.305,685.53 796.864,685.53 797.423,685.53 797.982,685.53 798.542,685.53 799.101,685.53 799.66,685.53 800.219,685.53 800.779,685.53 801.338,685.53 801.897,685.53 802.456,685.53 803.016,685.53 803.575,685.53 804.134,685.53 804.693,685.53 805.253,685.53 805.812,685.53 806.371,685.53 806.931,685.53 807.49,685.53 808.049,685.53 808.608,685.53 809.168,685.53 809.727,685.53 810.286,685.53 810.845,685.53 811.405,685.53 811.964,685.53 812.523,685.53 813.082,685.53 813.642,685.53 814.201,685.53 814.76,685.53 815.319,685.53 815.879,685.53 816.438,685.53 816.997,685.53 817.556,685.53 818.116,685.53 818.675,685.53 819.234,685.53 819.793,685.53 820.353,685.53 820.912,685.53 821.471,685.53 822.03,685.53 822.59,685.53 823.149,685.53 823.708,685.53 824.267,685.53 824.827,685.53 825.386,685.53 825.945,685.53 826.504,685.53 827.064,685.53 827.623,685.53 828.182,685.53 828.741,685.53 829.301,685.53 829.86,685.53 830.419,685.53 830.978,685.53 831.538,685.53 832.097,685.53 832.656,685.53 833.215,685.53 833.775,685.53 834.334,685.53 834.893,685.53 835.452,685.53 836.012,685.53 836.571,685.53 837.13,685.53 837.689,685.53 838.249,685.53 838.808,685.53 839.367,685.53 839.926,685.53 840.486,685.53 841.045,685.53 841.604,685.53 842.163,685.53 842.723,685.53 843.282,685.53 843.841,685.53 844.4,685.53 844.96,685.53 845.519,685.53 846.078,685.53 846.637,685.53 847.197,685.53 847.756,685.53 848.315,685.53 848.874,685.53 849.434,685.53 849.993,685.53 850.552,685.53 851.111,685.53 851.671,685.53 852.23,685.53 852.789,685.53 853.348,685.53 853.908,685.53 854.467,685.53 855.026,685.53 855.585,685.53 856.145,685.53 856.704,685.53 857.263,685.53 857.822,685.53 858.382,685.53 858.941,685.53 859.5,685.53 860.059,685.53 860.619,685.53 861.178,685.53 861.737,685.53 862.296,685.53 862.856,685.53 863.415,685.53 863.974,685.53 864.533,685.53 865.093,685.53 865.652,685.53 866.211,685.53 866.77,685.53 867.33,685.53 867.889,685.53 868.448,685.53 869.007,685.53 869.567,685.53 870.126,685.53 870.685,685.53 871.244,685.53 871.804,685.53 872.363,685.53 872.922,685.53 873.481,685.53 874.041,685.53 874.6,685.53 875.159,685.53 875.718,685.53 876.278,685.53 876.837,685.53 877.396,685.53 877.955,685.53 878.515,685.53 879.074,685.53 879.633,685.53 880.192,685.53 880.752,685.53 881.311,685.53 881.87,685.53 882.429,685.53 882.989,685.53 883.548,685.53 884.107,685.53 884.666,685.53 885.226,685.53 885.785,685.53 886.344,685.53 886.903,685.53 887.463,685.53 888.022,685.53 888.581,685.53 889.14,685.53 889.7,685.53 890.259,685.53 890.818,685.53 891.377,685.53 891.937,685.53 892.496,685.53 893.055,685.53 893.614,685.53 894.174,685.53 894.733,685.53 895.292,685.53 895.851,685.53 896.411,685.53 896.97,685.53 897.529,685.53 898.088,685.53 898.648,685.53 899.207,685.53 899.766,685.53 900.325,685.53 900.885,685.53 901.444,685.53 902.003,685.53 902.562,685.53 903.122,685.53 903.681,685.53 904.24,685.53 904.799,685.53 905.359,685.53 905.918,685.53 906.477,685.53 907.036,685.53 907.596,685.53 908.155,685.53 908.714,685.53 909.273,685.53 909.833,685.53 910.392,685.53 910.951,685.53 911.51,685.53 912.07,685.53 912.629,685.53 913.188,685.53 913.747,685.53 914.307,685.53 914.866,685.53 915.425,685.53 915.984,685.53 916.544,685.53 917.103,685.53 917.662,685.53 918.221,685.53 918.781,685.53 919.34,685.53 919.899,685.53 920.458,685.53 921.018,685.53 921.577,685.53 922.136,685.53 922.695,685.53 923.255,685.53 923.814,685.53 924.373,685.53 924.932,685.53 925.492,685.53 926.051,685.53 926.61,685.53 927.169,685.53 927.729,685.53 928.288,685.53 928.847,685.53 929.406,685.53 929.966,685.53 930.525,685.53 931.084,685.53 931.644,685.53 932.203,685.53 932.762,685.53 933.321,685.53 933.881,685.53 934.44,685.53 934.999,685.53 935.558,685.53 936.118,685.53 936.677,685.53 937.236,685.53 937.795,685.53 938.355,685.53 938.914,685.53 939.473,685.53 940.032,685.53 940.592,685.53 941.151,685.53 941.71,685.53 942.269,685.53 942.829,685.53 943.388,685.53 943.947,685.53 944.506,685.53 945.066,685.53 945.625,685.53 946.184,685.53 946.743,685.53 947.303,685.53 947.862,685.53 948.421,685.53 948.98,685.53 949.54,685.53 950.099,685.53 950.658,685.53 951.217,685.53 951.777,685.53 952.336,685.53 952.895,685.53 953.454,685.53 954.014,685.53 954.573,685.53 955.132,685.53 955.691,685.53 956.251,685.53 956.81,685.53 957.369,685.53 957.928,685.53 958.488,685.53 959.047,685.53 959.606,685.53 960.165,685.53 960.725,685.53 961.284,685.53 961.843,685.53 962.402,685.53 962.962,685.53 963.521,685.53 964.08,685.53 964.639,685.53 965.199,685.53 965.758,685.53 966.317,685.53 966.876,685.53 967.436,685.53 967.995,685.53 968.554,685.53 969.113,685.53 969.673,685.53 970.232,685.53 970.791,685.53 971.35,685.53 971.91,685.53 972.469,685.53 973.028,685.53 973.587,685.53 974.147,685.53 974.706,685.53 975.265,685.53 975.824,685.53 976.384,685.53 976.943,685.53 977.502,685.53 978.061,685.53 978.621,685.53 979.18,685.53 979.739,685.53 980.298,685.53 980.858,685.53 981.417,685.53 981.976,685.53 982.535,685.53 983.095,685.53 983.654,685.53 984.213,685.53 984.772,685.53 985.332,685.53 985.891,685.53 986.45,685.53 987.009,685.53 987.569,685.53 988.128,685.53 988.687,685.53 989.246,685.53 989.806,685.53 990.365,685.53 990.924,685.53 991.483,685.53 992.043,685.53 992.602,685.53 993.161,685.53 993.72,685.53 994.28,685.53 994.839,685.53 995.398,685.53 995.957,685.53 996.517,685.53 997.076,685.53 997.635,685.53 998.194,685.53 998.754,685.53 999.313,685.53 999.872,685.53 1000.43,685.53 1000.99,685.53 1001.55,685.53 1002.11,685.53 1002.67,685.53 1003.23,685.53 1003.79,685.53 1004.35,685.53 1004.91,685.53 1005.46,685.53 1006.02,685.53 1006.58,685.53 1007.14,685.53 1007.7,685.53 1008.26,685.53 1008.82,685.53 1009.38,685.53 1009.94,685.53 1010.5,685.53 1011.06,685.53 1011.62,685.53 1012.18,685.53 1012.73,685.53 1013.29,685.53 1013.85,685.53 1014.41,685.53 1014.97,685.53 1015.53,685.53 1016.09,685.53 1016.65,685.53 1017.21,685.53 1017.77,685.53 1018.33,685.53 1018.89,685.53 1019.45,685.53 1020.01,685.53 1020.56,685.53 1021.12,685.53 1021.68,685.53 1022.24,685.53 1022.8,685.53 1023.36,685.53 1023.92,685.53 1024.48,685.53 1025.04,685.53 1025.6,685.53 1026.16,685.53 1026.72,685.53 1027.28,685.53 1027.83,685.53 1028.39,685.53 1028.95,685.53 1029.51,685.53 1030.07,685.53 1030.63,685.53 1031.19,685.53 1031.75,685.53 1032.31,685.53 1032.87,685.53 1033.43,685.53 1033.99,685.53 1034.55,685.53 1035.1,685.53 1035.66,685.53 1036.22,685.53 1036.78,685.53 1037.34,685.53 1037.9,685.53 1038.46,685.53 1039.02,685.53 1039.58,685.53 1040.14,685.53 1040.7,685.53 1041.26,685.53 1041.82,685.53 1042.38,685.53 1042.93,685.53 1043.49,685.53 1044.05,685.53 1044.61,685.53 1045.17,685.53 1045.73,685.53 1046.29,685.53 1046.85,685.53 1047.41,685.53 1047.97,685.53 1048.53,685.53 1049.09,685.53 1049.65,685.53 1050.2,685.53 1050.76,685.53 1051.32,685.53 1051.88,685.53 1052.44,685.53 1053,685.53 1053.56,685.53 1054.12,685.53 1054.68,685.53 1055.24,685.53 1055.8,685.53 1056.36,685.53 1056.92,685.53 1057.48,685.53 1058.03,685.53 1058.59,685.53 1059.15,685.53 1059.71,685.53 1060.27,685.53 1060.83,685.53 1061.39,685.53 1061.95,685.53 1062.51,685.53 1063.07,685.53 1063.63,685.53 1064.19,685.53 1064.75,685.53 1065.3,685.53 1065.86,685.53 1066.42,685.53 1066.98,685.53 1067.54,685.53 1068.1,685.53 1068.66,685.53 1069.22,685.53 1069.78,685.53 1070.34,685.53 1070.9,685.53 1071.46,685.53 1072.02,685.53 1072.57,685.53 1073.13,685.53 1073.69,685.53 1074.25,685.53 1074.81,685.53 1075.37,685.53 1075.93,685.53 1076.49,685.53 1077.05,685.53 1077.61,685.53 1078.17,685.53 1078.73,685.53 1079.29,685.53 1079.85,685.53 1080.4,685.53 1080.96,685.53 1081.52,685.53 1082.08,685.53 1082.64,685.53 1083.2,685.53 1083.76,685.53 1084.32,685.53 1084.88,685.53 1085.44,685.53 1086,685.53 1086.56,685.53 1087.12,685.53 1087.67,685.53 1088.23,685.53 1088.79,685.53 1089.35,685.53 1089.91,685.53 1090.47,685.53 1091.03,685.53 1091.59,685.53 1092.15,685.53 1092.71,685.53 1093.27,685.53 1093.83,685.53 1094.39,685.53 1094.94,685.53 1095.5,685.53 1096.06,685.53 1096.62,685.53 1097.18,685.53 1097.74,685.53 1098.3,685.53 1098.86,685.53 1099.42,685.53 1099.98,685.53 1100.54,685.53 1101.1,685.53 1101.66,685.53 1102.22,685.53 1102.77,685.53 1103.33,685.53 1103.89,685.53 1104.45,685.53 1105.01,685.53 1105.57,685.53 1106.13,685.53 1106.69,685.53 1107.25,685.53 1107.81,685.53 1108.37,685.53 1108.93,685.53 1109.49,685.53 1110.04,685.53 1110.6,685.53 1111.16,685.53 1111.72,685.53 1112.28,685.53 1112.84,685.53 1113.4,685.53 1113.96,685.53 1114.52,685.53 1115.08,685.53 1115.64,685.53 1116.2,685.53 1116.76,685.53 1117.31,685.53 1117.87,685.53 1118.43,685.53 1118.99,685.53 1119.55,685.53 1120.11,685.53 1120.67,685.53 1121.23,685.53 1121.79,685.53 1122.35,685.53 1122.91,685.53 1123.47,685.53 1124.03,685.53 1124.59,685.53 1125.14,685.53 1125.7,685.53 1126.26,685.53 1126.82,685.53 1127.38,685.53 1127.94,685.53 1128.5,685.53 1129.06,685.53 1129.62,685.53 1130.18,685.53 1130.74,685.53 1131.3,685.53 1131.86,685.53 1132.41,685.53 1132.97,685.53 1133.53,685.53 1134.09,685.53 1134.65,685.53 1135.21,685.53 1135.77,685.53 1136.33,685.53 1136.89,685.53 1137.45,685.53 1138.01,685.53 1138.57,685.53 1139.13,685.53 1139.68,685.53 1140.24,685.53 1140.8,685.53 1141.36,685.53 1141.92,685.53 1142.48,685.53 1143.04,685.53 1143.6,685.53 1144.16,685.53 1144.72,685.53 1145.28,685.53 1145.84,685.53 1146.4,685.53 1146.96,685.53 1147.51,685.53 1148.07,685.53 1148.63,685.53 1149.19,685.53 1149.75,685.53 1150.31,685.53 1150.87,685.53 1151.43,685.53 1151.99,685.53 1152.55,685.53 1153.11,685.53 1153.67,685.53 1154.23,685.53 1154.78,685.53 1155.34,685.53 1155.9,685.53 1156.46,685.53 1157.02,685.53 1157.58,685.53 1158.14,685.53 1158.7,685.53 1159.26,685.53 1159.82,685.53 1160.38,685.53 1160.94,685.53 1161.5,685.53 1162.05,685.53 1162.61,685.53 1163.17,685.53 1163.73,685.53 1164.29,685.53 1164.85,685.53 1165.41,685.53 1165.97,685.53 1166.53,685.53 1167.09,685.53 1167.65,685.53 1168.21,685.53 1168.77,685.53 1169.33,685.53 1169.88,685.53 1170.44,685.53 1171,685.53 1171.56,685.53 1172.12,685.53 1172.68,685.53 1173.24,685.53 1173.8,685.53 1174.36,685.53 1174.92,685.53 1175.48,685.53 1176.04,685.53 1176.6,685.53 1177.15,685.53 1177.71,685.53 1178.27,685.53 1178.83,685.53 1179.39,685.53 1179.95,685.53 1180.51,685.53 1181.07,685.53 1181.63,685.53 1182.19,685.53 1182.75,685.53 1183.31,685.53 1183.87,685.53 1184.43,685.53 1184.98,685.53 1185.54,685.53 1186.1,685.53 1186.66,685.53 1187.22,685.53 1187.78,685.53 1188.34,685.53 1188.9,685.53 1189.46,685.53 1190.02,685.53 1190.58,685.53 1191.14,685.53 1191.7,685.53 1192.25,685.53 1192.81,685.53 1193.37,685.53 1193.93,685.53 1194.49,685.53 1195.05,685.53 1195.61,685.53 1196.17,685.53 1196.73,685.53 1197.29,685.53 1197.85,685.53 1198.41,685.53 1198.97,685.53 1199.52,685.53 1200.08,685.53 1200.64,685.53 1201.2,685.53 1201.76,685.53 1202.32,685.53 1202.88,685.53 1203.44,685.53 1204,685.53 1204.56,685.53 1205.12,685.53 1205.68,685.53 1206.24,685.53 1206.8,685.53 1207.35,685.53 1207.91,685.53 1208.47,685.53 1209.03,685.53 1209.59,685.53 1210.15,685.53 1210.71,685.53 1211.27,685.53 1211.83,685.53 1212.39,685.53 1212.95,685.53 1213.51,685.53 1214.07,685.53 1214.62,685.53 1215.18,685.53 1215.74,685.53 1216.3,685.53 1216.86,685.53 1217.42,685.53 1217.98,685.53 1218.54,685.53 1219.1,685.53 1219.66,685.53 1220.22,685.53 1220.78,685.53 1221.34,685.53 1221.89,685.53 1222.45,685.53 1223.01,685.53 1223.57,685.53 1224.13,685.53 1224.69,685.53 1225.25,685.53 1225.81,685.53 1226.37,685.53 1226.93,685.53 1227.49,685.53 1228.05,685.53 1228.61,685.53 1229.17,685.53 1229.72,685.53 1230.28,685.53 1230.84,685.53 1231.4,685.53 1231.96,685.53 1232.52,685.53 1233.08,685.53 1233.64,685.53 1234.2,685.53 1234.76,685.53 1235.32,685.53 1235.88,685.53 1236.44,685.53 1236.99,685.53 1237.55,685.53 1238.11,685.53 1238.67,685.53 1239.23,685.53 1239.79,685.53 1240.35,685.53 1240.91,685.53 1241.47,685.53 1242.03,685.53 1242.59,685.53 1243.15,685.53 1243.71,685.53 1244.26,685.53 1244.82,685.53 1245.38,685.53 1245.94,685.53 1246.5,685.53 1247.06,685.53 1247.62,685.53 1248.18,685.53 1248.74,685.53 1249.3,685.53 1249.86,685.53 1250.42,685.53 1250.98,685.53 1251.54,685.53 1252.09,685.53 1252.65,685.53 1253.21,685.53 1253.77,685.53 1254.33,685.53 1254.89,685.53 1255.45,685.53 1256.01,685.53 1256.57,685.53 1257.13,685.53 1257.69,685.53 1258.25,685.53 1258.81,685.53 1259.36,685.53 1259.92,685.53 1260.48,685.53 1261.04,685.53 1261.6,685.53 1262.16,685.53 1262.72,685.53 1263.28,685.53 1263.84,685.53 1264.4,685.53 1264.96,685.53 1265.52,685.53 1266.08,685.53 1266.63,685.53 1267.19,685.53 1267.75,685.53 1268.31,685.53 1268.87,685.53 1269.43,685.53 1269.99,685.53 1270.55,685.53 1271.11,685.53 1271.67,685.53 1272.23,685.53 1272.79,685.53 1273.35,685.53 1273.91,685.53 1274.46,685.53 1275.02,685.53 1275.58,685.53 1276.14,685.53 1276.7,685.53 1277.26,685.53 1277.82,685.53 1278.38,685.53 1278.94,685.53 1279.5,685.53 1280.06,685.53 1280.62,685.53 1281.18,685.53 1281.73,685.53 1282.29,685.53 1282.85,685.53 1283.41,685.53 1283.97,685.53 1284.53,685.53 1285.09,685.53 1285.65,685.53 1286.21,685.53 1286.77,685.53 1287.33,685.53 1287.89,685.53 1288.45,685.53 1289,685.53 1289.56,685.53 1290.12,685.53 1290.68,685.53 1291.24,685.53 1291.8,685.53 1292.36,685.53 1292.92,685.53 1293.48,685.53 1294.04,685.53 1294.6,685.53 1295.16,685.53 1295.72,685.53 1296.28,685.53 1296.83,685.53 1297.39,685.53 1297.95,685.53 1298.51,685.53 1299.07,685.53 1299.63,685.53 1300.19,685.53 1300.75,685.53 1301.31,685.53 1301.87,685.53 1302.43,685.53 1302.99,685.53 1303.55,685.53 1304.1,685.53 1304.66,685.53 1305.22,685.53 1305.78,685.53 1306.34,685.53 1306.9,685.53 1307.46,685.53 1308.02,685.53 1308.58,685.53 1309.14,685.53 1309.7,685.53 1310.26,685.53 1310.82,685.53 1311.38,685.53 1311.93,685.53 1312.49,685.53 1313.05,685.53 1313.61,685.53 1314.17,685.53 1314.73,685.53 1315.29,685.53 1315.85,685.53 1316.41,685.53 1316.97,685.53 1317.53,685.53 1318.09,685.53 1318.65,685.53 1319.2,685.53 1319.76,685.53 1320.32,685.53 1320.88,685.53 1321.44,685.53 1322,685.53 1322.56,685.53 1323.12,685.53 1323.68,685.53 1324.24,685.53 1324.8,685.53 1325.36,685.53 1325.92,685.53 1326.47,685.53 1327.03,685.53 1327.59,685.53 1328.15,685.53 1328.71,685.53 1329.27,685.53 1329.83,685.53 1330.39,685.53 1330.95,685.53 1331.51,685.53 1332.07,685.53 1332.63,685.53 1333.19,685.53 1333.75,685.53 1334.3,685.53 1334.86,685.53 1335.42,685.53 1335.98,685.53 1336.54,685.53 1337.1,685.53 1337.66,685.53 1338.22,685.53 1338.78,685.53 1339.34,685.53 1339.9,685.53 1340.46,685.53 1341.02,685.53 1341.57,685.53 1342.13,685.53 1342.69,685.53 1343.25,685.53 1343.81,685.53 1344.37,685.53 1344.93,685.53 1345.49,685.53 1346.05,685.53 1346.61,685.53 1347.17,685.53 1347.73,685.53 1348.29,685.53 1348.84,685.53 1349.4,685.53 1349.96,685.53 1350.52,685.53 1351.08,685.53 1351.64,685.53 1352.2,685.53 1352.76,685.53 1353.32,685.53 1353.88,685.53 1354.44,685.53 1355,685.53 1355.56,685.53 1356.12,685.53 1356.67,685.53 1357.23,685.53 1357.79,685.53 1358.35,685.53 1358.91,685.53 1359.47,685.53 1360.03,685.53 1360.59,685.53 1361.15,685.53 1361.71,685.53 1362.27,685.53 1362.83,685.53 1363.39,685.53 1363.94,685.53 1364.5,685.53 1365.06,685.53 1365.62,685.53 1366.18,685.53 1366.74,685.53 1367.3,685.53 1367.86,685.53 1368.42,685.53 1368.98,685.53 1369.54,685.53 1370.1,685.53 1370.66,685.53 1371.21,685.53 1371.77,685.53 1372.33,685.53 1372.89,685.53 1373.45,685.53 1374.01,685.53 1374.57,685.53 1375.13,685.53 1375.69,685.53 1376.25,685.53 1376.81,685.53 1377.37,685.53 1377.93,685.53 1378.49,685.53 1379.04,685.53 1379.6,685.53 1380.16,685.53 1380.72,685.53 1381.28,685.53 1381.84,685.53 1382.4,685.53 1382.96,685.53 1383.52,685.53 1384.08,685.53 1384.64,685.53 1385.2,685.53 1385.76,685.53 1386.31,685.53 1386.87,685.53 1387.43,685.53 1387.99,685.53 1388.55,685.53 1389.11,685.53 1389.67,685.53 1390.23,685.53 1390.79,685.53 1391.35,685.53 1391.91,685.53 1392.47,685.53 1393.03,685.53 1393.58,685.53 1394.14,685.53 1394.7,685.53 1395.26,685.53 1395.82,685.53 1396.38,685.53 1396.94,685.53 1397.5,685.53 1398.06,685.53 1398.62,685.53 1399.18,685.53 1399.74,685.53 1400.3,685.53 1400.86,685.53 1401.41,685.53 1401.97,685.53 1402.53,685.53 1403.09,685.53 1403.65,685.53 1404.21,685.53 1404.77,685.53 1405.33,685.53 1405.89,685.53 1406.45,685.53 1407.01,685.53 1407.57,685.53 1408.13,685.53 1408.68,685.53 1409.24,685.53 1409.8,685.53 1410.36,685.53 1410.92,685.53 1411.48,685.53 1412.04,685.53 1412.6,685.53 1413.16,685.53 1413.72,685.53 1414.28,685.53 1414.84,685.53 1415.4,685.53 1415.95,685.53 1416.51,685.53 1417.07,685.53 1417.63,685.53 1418.19,685.53 1418.75,685.53 1419.31,685.53 1419.87,685.53 1420.43,685.53 1420.99,685.53 1421.55,685.53 1422.11,685.53 1422.67,685.53 1423.23,685.53 1423.78,685.53 1424.34,685.53 1424.9,685.53 1425.46,685.53 1426.02,685.53 1426.58,685.53 1427.14,685.53 1427.7,685.53 1428.26,685.53 1428.82,685.53 1429.38,685.53 1429.94,685.53 1430.5,685.53 1431.05,685.53 1431.61,685.53 1432.17,685.53 1432.73,685.53 1433.29,685.53 1433.85,685.53 1434.41,685.53 1434.97,685.53 1435.53,685.53 1436.09,685.53 1436.65,685.53 1437.21,685.53 1437.77,685.53 1438.33,685.53 1438.88,685.53 1439.44,685.53 1440,685.53 1440.56,685.53 1441.12,685.53 1441.68,685.53 1442.24,685.53 1442.8,685.53 1443.36,685.53 1443.92,685.53 1444.48,685.53 1445.04,685.53 1445.6,685.53 1446.15,685.53 1446.71,685.53 1447.27,685.53 1447.83,685.53 1448.39,685.53 1448.95,685.53 1449.51,685.53 1450.07,685.53 1450.63,685.53 1451.19,685.53 1451.75,685.53 1452.31,685.53 1452.87,685.53 1453.42,685.53 1453.98,685.53 1454.54,685.53 1455.1,685.53 1455.66,685.53 1456.22,685.53 1456.78,685.53 1457.34,685.53 1457.9,685.53 1458.46,685.53 1459.02,685.53 1459.58,685.53 1460.14,685.53 1460.7,685.53 1461.25,685.53 1461.81,685.53 1462.37,685.53 1462.93,685.53 1463.49,685.53 1464.05,685.53 1464.61,685.53 1465.17,685.53 1465.73,685.53 1466.29,685.53 1466.85,685.53 1467.41,685.53 1467.97,685.53 1468.52,685.53 1469.08,685.53 1469.64,685.53 1470.2,685.53 1470.76,685.53 1471.32,685.53 1471.88,685.53 1472.44,685.53 1473,685.53 1473.56,685.53 1474.12,685.53 1474.68,685.53 1475.24,685.53 1475.79,685.53 1476.35,685.53 1476.91,685.53 1477.47,685.53 1478.03,685.53 1478.59,685.53 1479.15,685.53 1479.71,685.53 1480.27,685.53 1480.83,685.53 1481.39,685.53 1481.95,685.53 1482.51,685.53 1483.07,685.53 1483.62,685.53 1484.18,685.53 1484.74,685.53 1485.3,685.53 1485.86,685.53 1486.42,685.53 1486.98,685.53 1487.54,685.53 1488.1,685.53 1488.66,685.53 1489.22,685.53 1489.78,685.53 1490.34,685.53 1490.89,685.53 1491.45,685.53 1492.01,685.53 1492.57,685.53 1493.13,685.53 1493.69,685.53 1494.25,685.53 1494.81,685.53 1495.37,685.53 1495.93,685.53 1496.49,685.53 1497.05,685.53 1497.61,685.53 1498.16,685.53 1498.72,685.53 1499.28,685.53 1499.84,685.53 1500.4,685.53 1500.96,685.53 1501.52,685.53 1502.08,685.53 1502.64,685.53 1503.2,685.53 1503.76,685.53 1504.32,685.53 1504.88,685.53 1505.44,685.53 1505.99,685.53 1506.55,685.53 1507.11,685.53 1507.67,685.53 1508.23,685.53 1508.79,685.53 1509.35,685.53 1509.91,685.53 1510.47,685.53 1511.03,685.53 1511.59,685.53 1512.15,685.53 1512.71,685.53 1513.26,685.53 1513.82,685.53 1514.38,685.53 1514.94,685.53 1515.5,685.53 1516.06,685.53 1516.62,685.53 1517.18,685.53 1517.74,685.53 1518.3,685.53 1518.86,685.53 1519.42,685.53 1519.98,685.53 1520.53,685.53 1521.09,685.53 1521.65,685.53 1522.21,685.53 1522.77,685.53 1523.33,685.53 1523.89,685.53 1524.45,685.53 1525.01,685.53 1525.57,685.53 1526.13,685.53 1526.69,685.53 1527.25,685.53 1527.81,685.53 1528.36,685.53 1528.92,685.53 1529.48,685.53 1530.04,685.53 1530.6,685.53 1531.16,685.53 1531.72,685.53 1532.28,685.53 1532.84,685.53 1533.4,685.53 1533.96,685.53 1534.52,685.53 1535.08,685.53 1535.63,685.53 1536.19,685.53 1536.75,685.53 1537.31,685.53 1537.87,685.53 1538.43,685.53 1538.99,685.53 1539.55,685.53 1540.11,685.53 1540.67,685.53 1541.23,685.53 1541.79,685.53 1542.35,685.53 1542.9,685.53 1543.46,685.53 1544.02,685.53 1544.58,685.53 1545.14,685.53 1545.7,685.53 1546.26,685.53 1546.82,685.53 1547.38,685.53 1547.94,685.53 1548.5,685.53 1549.06,685.53 1549.62,685.53 1550.18,685.53 1550.73,685.53 1551.29,685.53 1551.85,685.53 1552.41,685.53 1552.97,685.53 1553.53,685.53 1554.09,685.53 1554.65,685.53 1555.21,685.53 1555.77,685.53 1556.33,685.53 1556.89,685.53 1557.45,685.53 1558,685.53 1558.56,685.53 1559.12,685.53 1559.68,685.53 1560.24,685.53 1560.8,685.53 1561.36,685.53 1561.92,685.53 1562.48,685.53 1563.04,685.53 1563.6,685.53 1564.16,685.53 1564.72,685.53 1565.28,685.53 1565.83,685.53 1566.39,685.53 1566.95,685.53 1567.51,685.53 1568.07,685.53 1568.63,685.53 1569.19,685.53 1569.75,685.53 1570.31,685.53 1570.87,685.53 1571.43,685.53 1571.99,685.53 1572.55,685.53 1573.1,685.53 1573.66,685.53 1574.22,685.53 1574.78,685.53 1575.34,685.53 1575.9,685.53 1576.46,685.53 1577.02,685.53 1577.58,685.53 1578.14,685.53 1578.7,685.53 1579.26,685.53 1579.82,685.53 1580.37,685.53 1580.93,685.53 1581.49,685.53 1582.05,685.53 1582.61,685.53 1583.17,685.53 1583.73,685.53 1584.29,685.53 1584.85,685.53 1585.41,685.53 1585.97,685.53 1586.53,685.53 1587.09,685.53 1587.65,685.53 1588.2,685.53 1588.76,685.53 1589.32,685.53 1589.88,685.53 1590.44,685.53 1591,685.53 1591.56,685.53 1592.12,685.53 1592.68,685.53 1593.24,685.53 1593.8,685.53 1594.36,685.53 1594.92,685.53 1595.47,685.53 1596.03,685.53 1596.59,685.53 1597.15,685.53 1597.71,685.53 1598.27,685.53 1598.83,685.53 1599.39,685.53 1599.95,685.53 1600.51,685.53 1601.07,685.53 1601.63,685.53 1602.19,685.53 1602.74,685.53 1603.3,685.53 1603.86,685.53 1604.42,685.53 1604.98,685.53 1605.54,685.53 1606.1,685.53 1606.66,685.53 1607.22,685.53 1607.78,685.53 1608.34,685.53 1608.9,685.53 1609.46,685.53 1610.02,685.53 1610.57,685.53 1611.13,685.53 1611.69,685.53 1612.25,685.53 1612.81,685.53 1613.37,685.53 1613.93,685.53 1614.49,685.53 1615.05,685.53 1615.61,685.53 1616.17,685.53 1616.73,685.53 1617.29,685.53 1617.84,685.53 1618.4,685.53 1618.96,685.53 1619.52,685.53 1620.08,685.53 1620.64,685.53 1621.2,685.53 1621.76,685.53 1622.32,685.53 1622.88,685.53 1623.44,685.53 1624,685.53 1624.56,685.53 1625.11,685.53 1625.67,685.53 1626.23,685.53 1626.79,685.53 1627.35,685.53 1627.91,685.53 1628.47,685.53 1629.03,685.53 1629.59,685.53 1630.15,685.53 1630.71,685.53 1631.27,685.53 1631.83,685.53 1632.39,685.53 1632.94,685.53 1633.5,685.53 1634.06,685.53 1634.62,685.53 1635.18,685.53 1635.74,685.53 1636.3,685.53 1636.86,685.53 1637.42,685.53 1637.98,685.53 1638.54,685.53 1639.1,685.53 1639.66,685.53 1640.21,685.53 1640.77,685.53 1641.33,685.53 1641.89,685.53 1642.45,685.53 1643.01,685.53 1643.57,685.53 1644.13,685.53 1644.69,685.53 1645.25,685.53 1645.81,685.53 1646.37,685.53 1646.93,685.53 1647.48,685.53 1648.04,685.53 1648.6,685.53 1649.16,685.53 1649.72,685.53 1650.28,685.53 1650.84,685.53 1651.4,685.53 1651.96,685.53 1652.52,685.53 1653.08,685.53 1653.64,685.53 1654.2,685.53 1654.76,685.53 1655.31,685.53 1655.87,685.53 1656.43,685.53 1656.99,685.53 1657.55,685.53 1658.11,685.53 1658.67,685.53 1659.23,685.53 1659.79,685.53 1660.35,685.53 1660.91,685.53 1661.47,685.53 1662.03,685.53 1662.58,685.53 1663.14,685.53 1663.7,685.53 1664.26,685.53 1664.82,685.53 1665.38,685.53 1665.94,685.53 1666.5,685.53 1667.06,685.53 1667.62,685.53 1668.18,685.53 1668.74,685.53 1669.3,685.53 1669.85,685.53 1670.41,685.53 1670.97,685.53 1671.53,685.53 1672.09,685.53 1672.65,685.53 1673.21,685.53 1673.77,685.53 1674.33,685.53 1674.89,685.53 1675.45,685.53 1676.01,685.53 1676.57,685.53 1677.13,685.53 1677.68,685.53 1678.24,685.53 1678.8,685.53 1679.36,685.53 1679.92,685.53 1680.48,685.53 1681.04,685.53 1681.6,685.53 1682.16,685.53 1682.72,685.53 1683.28,685.53 1683.84,685.53 1684.4,685.53 1684.95,685.53 1685.51,685.53 1686.07,685.53 1686.63,685.53 1687.19,685.53 1687.75,685.53 1688.31,685.53 1688.87,685.53 1689.43,685.53 1689.99,685.53 1690.55,685.53 1691.11,685.53 1691.67,685.53 1692.23,685.53 1692.78,685.53 1693.34,685.53 1693.9,685.53 1694.46,685.53 1695.02,685.53 1695.58,685.53 1696.14,685.53 1696.7,685.53 1697.26,685.53 1697.82,685.53 1698.38,685.53 1698.94,685.53 1699.5,685.53 1700.05,685.53 1700.61,685.53 1701.17,685.53 1701.73,685.53 1702.29,685.53 1702.85,685.53 1703.41,685.53 1703.97,685.53 1704.53,685.53 1705.09,685.53 1705.65,685.53 1706.21,685.53 1706.77,685.53 1707.32,685.53 1707.88,685.53 1708.44,685.53 1709,685.53 1709.56,685.53 1710.12,685.53 1710.68,685.53 1711.24,685.53 1711.8,685.53 1712.36,685.53 1712.92,685.53 1713.48,685.53 1714.04,685.53 1714.6,685.53 1715.15,685.53 1715.71,685.53 1716.27,685.53 1716.83,685.53 1717.39,685.53 1717.95,685.53 1718.51,685.53 1719.07,685.53 1719.63,685.53 1720.19,685.53 1720.75,685.53 1721.31,685.53 1721.87,685.53 1722.42,685.53 1722.98,685.53 1723.54,685.53 1724.1,685.53 1724.66,685.53 1725.22,685.53 1725.78,685.53 1726.34,685.53 1726.9,685.53 1727.46,685.53 1728.02,685.53 1728.58,685.53 1729.14,685.53 1729.69,685.53 1730.25,685.53 1730.81,685.53 1731.37,685.53 1731.93,685.53 1732.49,685.53 1733.05,685.53 1733.61,685.53 1734.17,685.53 1734.73,685.53 1735.29,685.53 1735.85,685.53 1736.41,685.53 1736.97,685.53 1737.52,685.53 1738.08,685.53 1738.64,685.53 1739.2,685.53 1739.76,685.53 1740.32,685.53 1740.88,685.53 1741.44,685.53 1742,685.53 1742.56,685.53 1743.12,685.53 1743.68,685.53 1744.24,685.53 1744.79,685.53 1745.35,685.53 1745.91,685.53 1746.47,685.53 1747.03,685.53 1747.59,685.53 1748.15,685.53 1748.71,685.53 1749.27,685.53 1749.83,685.53 1750.39,685.53 1750.95,685.53 1751.51,685.53 1752.06,685.53 1752.62,685.53 1753.18,685.53 1753.74,685.53 1754.3,685.53 1754.86,685.53 1755.42,685.53 1755.98,685.53 1756.54,685.53 1757.1,685.53 1757.66,685.53 1758.22,685.53 1758.78,685.53 1759.34,685.53 1759.89,685.53 1760.45,685.53 1761.01,685.53 1761.57,685.53 1762.13,685.53 1762.69,685.53 1763.25,685.53 1763.81,685.53 1764.37,685.53 1764.93,685.53 1765.49,685.53 1766.05,685.53 1766.61,685.53 1767.16,685.53 1767.72,685.53 1768.28,685.53 1768.84,685.53 1769.4,685.53 1769.96,685.53 1770.52,685.53 1771.08,685.53 1771.64,685.53 1772.2,685.53 1772.76,685.53 1773.32,685.53 1773.88,685.53 1774.43,685.53 1774.99,685.53 1775.55,685.53 1776.11,685.53 1776.67,685.53 1777.23,685.53 1777.79,685.53 1778.35,685.53 1778.91,685.53 1779.47,685.53 1780.03,685.53 1780.59,685.53 1781.15,685.53 1781.71,685.53 1782.26,685.53 1782.82,685.53 1783.38,685.53 1783.94,685.53 1784.5,685.53 1785.06,685.53 1785.62,685.53 1786.18,685.53 1786.74,685.53 1787.3,685.53 1787.86,685.53 1788.42,685.53 1788.98,685.53 1789.53,685.53 1790.09,685.53 1790.65,685.53 1791.21,685.53 1791.77,685.53 1792.33,685.53 1792.89,685.53 1793.45,685.53 1794.01,685.53 1794.57,685.53 1795.13,685.53 1795.69,685.53 1796.25,685.53 1796.8,685.53 1797.36,685.53 1797.92,685.53 1798.48,685.53 1799.04,685.53 1799.6,685.53 1800.16,685.53 1800.72,685.53 1801.28,685.53 1801.84,685.53 1802.4,685.53 1802.96,685.53 1803.52,685.53 1804.08,685.53 1804.63,685.53 1805.19,685.53 1805.75,685.53 1806.31,685.53 1806.87,685.53 1807.43,685.53 1807.99,685.53 1808.55,685.53 1809.11,685.53 1809.67,685.53 1810.23,685.53 1810.79,685.53 1811.35,685.53 1811.9,685.53 1812.46,685.53 1813.02,685.53 1813.58,685.53 1814.14,685.53 1814.7,685.53 1815.26,685.53 1815.82,685.53 1816.38,685.53 1816.94,685.53 1817.5,685.53 1818.06,685.53 1818.62,685.53 1819.18,685.53 1819.73,685.53 1820.29,685.53 1820.85,685.53 1821.41,685.53 1821.97,685.53 1822.53,685.53 1823.09,685.53 1823.65,685.53 1824.21,685.53 1824.77,685.53 1825.33,685.53 1825.89,685.53 1826.45,685.53 1827,685.53 1827.56,685.53 1828.12,685.53 1828.68,685.53 1829.24,685.53 1829.8,685.53 1830.36,685.53 1830.92,685.53 1831.48,685.53 1832.04,685.53 1832.6,685.53 1833.16,685.53 1833.72,685.53 1834.27,685.53 1834.83,685.53 1835.39,685.53 1835.95,685.53 1836.51,685.53 1837.07,685.53 1837.63,685.53 1838.19,685.53 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 683.931 L720.806 683.931 L721.365 683.931 L721.924 683.931 L722.484 683.931 L723.043 683.931 L723.602 683.931 L724.161 683.931 L724.721 683.931 L725.28 683.931 L725.839 683.931 L726.398 683.931 L726.958 683.931 L727.517 683.931 L728.076 683.931 L728.635 683.931 L729.195 683.931 L729.754 683.931 L730.313 683.931 L730.872 683.931 L731.432 683.931 L731.991 683.931 L732.55 683.931 L733.109 683.931 L733.669 683.931 L734.228 683.931 L734.787 683.931 L735.346 683.931 L735.906 683.931 L736.465 683.931 L737.024 683.931 L737.583 683.931 L738.143 683.931 L738.702 683.931 L739.261 683.931 L739.82 683.931 L740.38 683.931 L740.939 683.931 L741.498 683.931 L742.057 683.931 L742.617 683.931 L743.176 683.931 L743.735 683.931 L744.294 683.931 L744.854 683.931 L745.413 683.931 L745.972 683.931 L746.531 683.931 L747.091 683.931 L747.65 683.931 L748.209 683.931 L748.768 683.931 L749.328 683.931 L749.887 683.931 L750.446 683.931 L751.005 683.931 L751.565 683.931 L752.124 683.931 L752.683 683.931 L753.242 683.931 L753.802 683.931 L754.361 683.931 L754.92 683.931 L755.479 683.931 L756.039 683.931 L756.598 683.931 L757.157 683.931 L757.716 683.931 L758.276 683.931 L758.835 683.931 L759.394 683.931 L759.953 683.931 L760.513 683.931 L761.072 683.931 L761.631 683.931 L762.19 683.931 L762.75 683.931 L763.309 683.931 L763.868 683.931 L764.427 683.931 L764.987 683.931 L765.546 683.931 L766.105 683.931 L766.664 683.931 L767.224 683.931 L767.783 683.931 L768.342 683.931 L768.901 683.931 L769.461 683.931 L770.02 683.931 L770.579 683.931 L771.138 683.931 L771.698 683.931 L772.257 683.931 L772.816 683.931 L773.375 683.931 L773.935 683.931 L774.494 683.931 L775.053 683.931 L775.612 683.931 L776.172 683.931 L776.731 683.931 L777.29 683.931 L777.849 683.931 L778.409 683.931 L778.968 683.931 L779.527 683.931 L780.086 683.931 L780.646 683.931 L781.205 683.931 L781.764 683.931 L782.323 683.931 L782.883 683.931 L783.442 683.931 L784.001 683.931 L784.56 683.931 L785.12 683.931 L785.679 683.931 L786.238 683.931 L786.797 683.931 L787.357 683.931 L787.916 683.931 L788.475 683.931 L789.034 683.931 L789.594 683.931 L790.153 683.931 L790.712 683.931 L791.271 683.931 L791.831 683.931 L792.39 683.931 L792.949 683.931 L793.508 683.931 L794.068 683.931 L794.627 683.931 L795.186 683.931 L795.745 683.931 L796.305 683.931 L796.864 683.931 L797.423 683.931 L797.982 683.931 L798.542 683.931 L799.101 683.931 L799.66 683.931 L800.219 683.931 L800.779 683.931 L801.338 683.931 L801.897 683.931 L802.456 683.931 L803.016 683.931 L803.575 683.931 L804.134 683.931 L804.693 683.931 L805.253 683.931 L805.812 683.931 L806.371 683.931 L806.931 683.931 L807.49 683.931 L808.049 683.931 L808.608 683.931 L809.168 683.931 L809.727 683.931 L810.286 683.931 L810.845 683.931 L811.405 683.931 L811.964 683.931 L812.523 683.931 L813.082 683.931 L813.642 683.931 L814.201 683.931 L814.76 683.931 L815.319 683.931 L815.879 683.931 L816.438 683.931 L816.997 683.931 L817.556 683.931 L818.116 683.931 L818.675 683.931 L819.234 683.931 L819.793 683.931 L820.353 683.931 L820.912 683.931 L821.471 683.931 L822.03 683.931 L822.59 683.931 L823.149 683.931 L823.708 683.931 L824.267 683.931 L824.827 683.931 L825.386 683.931 L825.945 683.931 L826.504 683.931 L827.064 683.931 L827.623 683.931 L828.182 683.931 L828.741 683.931 L829.301 683.931 L829.86 683.931 L830.419 683.931 L830.978 683.931 L831.538 683.931 L832.097 683.931 L832.656 683.931 L833.215 683.931 L833.775 683.931 L834.334 683.931 L834.893 683.931 L835.452 683.931 L836.012 683.931 L836.571 683.931 L837.13 683.931 L837.689 683.931 L838.249 683.931 L838.808 683.931 L839.367 683.931 L839.926 683.931 L840.486 683.931 L841.045 683.931 L841.604 683.931 L842.163 683.931 L842.723 683.931 L843.282 683.931 L843.841 683.931 L844.4 683.931 L844.96 683.931 L845.519 683.931 L846.078 683.931 L846.637 683.931 L847.197 683.931 L847.756 683.931 L848.315 683.931 L848.874 683.931 L849.434 683.931 L849.993 683.931 L850.552 683.931 L851.111 683.931 L851.671 683.931 L852.23 683.931 L852.789 683.931 L853.348 683.931 L853.908 683.931 L854.467 683.931 L855.026 683.931 L855.585 683.931 L856.145 683.931 L856.704 683.931 L857.263 683.931 L857.822 683.931 L858.382 683.931 L858.941 683.931 L859.5 683.931 L860.059 683.931 L860.619 683.931 L861.178 683.931 L861.737 683.931 L862.296 683.931 L862.856 683.931 L863.415 683.931 L863.974 683.931 L864.533 683.931 L865.093 683.931 L865.652 683.931 L866.211 683.931 L866.77 683.931 L867.33 683.931 L867.889 683.931 L868.448 683.931 L869.007 683.931 L869.567 683.931 L870.126 683.931 L870.685 683.931 L871.244 683.931 L871.804 683.931 L872.363 683.931 L872.922 683.931 L873.481 683.931 L874.041 683.931 L874.6 683.931 L875.159 683.931 L875.718 683.931 L876.278 683.931 L876.837 683.931 L877.396 683.931 L877.955 683.931 L878.515 683.931 L879.074 683.931 L879.633 683.931 L880.192 683.931 L880.752 683.931 L881.311 683.931 L881.87 683.931 L882.429 683.931 L882.989 683.931 L883.548 683.931 L884.107 683.931 L884.666 683.931 L885.226 683.931 L885.785 683.931 L886.344 683.931 L886.903 683.931 L887.463 683.931 L888.022 683.931 L888.581 683.931 L889.14 683.931 L889.7 683.931 L890.259 683.931 L890.818 683.931 L891.377 683.931 L891.937 683.931 L892.496 683.931 L893.055 683.931 L893.614 683.931 L894.174 683.931 L894.733 683.931 L895.292 683.931 L895.851 683.931 L896.411 683.931 L896.97 683.931 L897.529 683.931 L898.088 683.931 L898.648 683.931 L899.207 683.931 L899.766 683.931 L900.325 683.931 L900.885 683.931 L901.444 683.931 L902.003 683.931 L902.562 683.931 L903.122 683.931 L903.681 683.931 L904.24 683.931 L904.799 683.931 L905.359 683.931 L905.918 683.931 L906.477 683.931 L907.036 683.931 L907.596 683.931 L908.155 683.931 L908.714 683.931 L909.273 683.931 L909.833 683.931 L910.392 683.931 L910.951 683.931 L911.51 683.931 L912.07 683.931 L912.629 683.931 L913.188 683.931 L913.747 683.931 L914.307 683.931 L914.866 683.931 L915.425 683.931 L915.984 683.931 L916.544 683.931 L917.103 683.931 L917.662 683.931 L918.221 683.931 L918.781 683.931 L919.34 683.931 L919.899 683.931 L920.458 683.931 L921.018 683.931 L921.577 683.931 L922.136 683.931 L922.695 683.931 L923.255 683.931 L923.814 683.931 L924.373 683.931 L924.932 683.931 L925.492 683.931 L926.051 683.931 L926.61 683.931 L927.169 683.931 L927.729 683.931 L928.288 683.931 L928.847 683.931 L929.406 683.931 L929.966 683.931 L930.525 683.931 L931.084 683.931 L931.644 683.931 L932.203 683.931 L932.762 683.931 L933.321 683.931 L933.881 683.931 L934.44 683.931 L934.999 683.931 L935.558 683.931 L936.118 683.931 L936.677 683.931 L937.236 683.931 L937.795 683.931 L938.355 683.931 L938.914 683.931 L939.473 683.931 L940.032 683.931 L940.592 683.931 L941.151 683.931 L941.71 683.931 L942.269 683.931 L942.829 683.931 L943.388 683.931 L943.947 683.931 L944.506 683.931 L945.066 683.931 L945.625 683.931 L946.184 683.931 L946.743 683.931 L947.303 683.931 L947.862 683.931 L948.421 683.931 L948.98 683.931 L949.54 683.931 L950.099 683.931 L950.658 683.931 L951.217 683.931 L951.777 683.931 L952.336 683.931 L952.895 683.931 L953.454 683.931 L954.014 683.931 L954.573 683.931 L955.132 683.931 L955.691 683.931 L956.251 683.931 L956.81 683.931 L957.369 683.931 L957.928 683.931 L958.488 683.931 L959.047 683.931 L959.606 683.931 L960.165 683.931 L960.725 683.931 L961.284 683.931 L961.843 683.931 L962.402 683.931 L962.962 683.931 L963.521 683.931 L964.08 683.931 L964.639 683.931 L965.199 683.931 L965.758 683.931 L966.317 683.931 L966.876 683.931 L967.436 683.931 L967.995 683.931 L968.554 683.931 L969.113 683.931 L969.673 683.931 L970.232 683.931 L970.791 683.931 L971.35 683.931 L971.91 683.931 L972.469 683.931 L973.028 683.931 L973.587 683.931 L974.147 683.931 L974.706 683.931 L975.265 683.931 L975.824 683.931 L976.384 683.931 L976.943 683.931 L977.502 683.931 L978.061 683.931 L978.621 683.931 L979.18 683.931 L979.739 683.931 L980.298 683.931 L980.858 683.931 L981.417 683.931 L981.976 683.931 L982.535 683.931 L983.095 683.931 L983.654 683.931 L984.213 683.931 L984.772 683.931 L985.332 683.931 L985.891 683.931 L986.45 683.931 L987.009 683.931 L987.569 683.931 L988.128 683.931 L988.687 683.931 L989.246 683.931 L989.806 683.931 L990.365 683.931 L990.924 683.931 L991.483 683.931 L992.043 683.931 L992.602 683.931 L993.161 683.931 L993.72 683.931 L994.28 683.931 L994.839 683.931 L995.398 683.931 L995.957 683.931 L996.517 683.931 L997.076 683.931 L997.635 683.931 L998.194 683.931 L998.754 683.931 L999.313 683.931 L999.872 683.931 L1000.43 683.931 L1000.99 683.931 L1001.55 683.931 L1002.11 683.931 L1002.67 683.931 L1003.23 683.931 L1003.79 683.931 L1004.35 683.931 L1004.91 683.931 L1005.46 683.931 L1006.02 683.931 L1006.58 683.931 L1007.14 683.931 L1007.7 683.931 L1008.26 683.931 L1008.82 683.931 L1009.38 683.931 L1009.94 683.931 L1010.5 683.931 L1011.06 683.931 L1011.62 683.931 L1012.18 683.931 L1012.73 683.931 L1013.29 683.931 L1013.85 683.931 L1014.41 683.931 L1014.97 683.931 L1015.53 683.931 L1016.09 683.931 L1016.65 683.931 L1017.21 683.931 L1017.77 683.931 L1018.33 683.931 L1018.89 683.931 L1019.45 683.931 L1020.01 683.931 L1020.56 683.931 L1021.12 683.931 L1021.68 683.931 L1022.24 683.931 L1022.8 683.931 L1023.36 683.931 L1023.92 683.931 L1024.48 683.931 L1025.04 683.931 L1025.6 683.931 L1026.16 683.931 L1026.72 683.931 L1027.28 683.931 L1027.83 683.931 L1028.39 683.931 L1028.95 683.931 L1029.51 683.931 L1030.07 683.931 L1030.63 683.931 L1031.19 683.931 L1031.75 683.931 L1032.31 683.931 L1032.87 683.931 L1033.43 683.931 L1033.99 683.931 L1034.55 683.931 L1035.1 683.931 L1035.66 683.931 L1036.22 683.931 L1036.78 683.931 L1037.34 683.931 L1037.9 683.931 L1038.46 683.931 L1039.02 683.931 L1039.58 683.931 L1040.14 683.931 L1040.7 683.931 L1041.26 683.931 L1041.82 683.931 L1042.38 683.931 L1042.93 683.931 L1043.49 683.931 L1044.05 683.931 L1044.61 683.931 L1045.17 683.931 L1045.73 683.931 L1046.29 683.931 L1046.85 683.931 L1047.41 683.931 L1047.97 683.931 L1048.53 683.931 L1049.09 683.931 L1049.65 683.931 L1050.2 683.931 L1050.76 683.931 L1051.32 683.931 L1051.88 683.931 L1052.44 683.931 L1053 683.931 L1053.56 683.931 L1054.12 683.931 L1054.68 683.931 L1055.24 683.931 L1055.8 683.931 L1056.36 683.931 L1056.92 683.931 L1057.48 683.931 L1058.03 683.931 L1058.59 683.931 L1059.15 683.931 L1059.71 683.931 L1060.27 683.931 L1060.83 683.931 L1061.39 683.931 L1061.95 683.931 L1062.51 683.931 L1063.07 683.931 L1063.63 683.931 L1064.19 683.931 L1064.75 683.931 L1065.3 683.931 L1065.86 683.931 L1066.42 683.931 L1066.98 683.931 L1067.54 683.931 L1068.1 683.931 L1068.66 683.931 L1069.22 683.931 L1069.78 683.931 L1070.34 683.931 L1070.9 683.931 L1071.46 683.931 L1072.02 683.931 L1072.57 683.931 L1073.13 683.931 L1073.69 683.931 L1074.25 683.931 L1074.81 683.931 L1075.37 683.931 L1075.93 683.931 L1076.49 683.931 L1077.05 683.931 L1077.61 683.931 L1078.17 683.931 L1078.73 683.931 L1079.29 683.931 L1079.85 683.931 L1080.4 683.931 L1080.96 683.931 L1081.52 683.931 L1082.08 683.931 L1082.64 683.931 L1083.2 683.931 L1083.76 683.931 L1084.32 683.931 L1084.88 683.931 L1085.44 683.931 L1086 683.931 L1086.56 683.931 L1087.12 683.931 L1087.67 683.931 L1088.23 683.931 L1088.79 683.931 L1089.35 683.931 L1089.91 683.931 L1090.47 683.931 L1091.03 683.931 L1091.59 683.931 L1092.15 683.931 L1092.71 683.931 L1093.27 683.931 L1093.83 683.931 L1094.39 683.931 L1094.94 683.931 L1095.5 683.931 L1096.06 683.931 L1096.62 683.931 L1097.18 683.931 L1097.74 683.931 L1098.3 683.931 L1098.86 683.931 L1099.42 683.931 L1099.98 683.931 L1100.54 683.931 L1101.1 683.931 L1101.66 683.931 L1102.22 683.931 L1102.77 683.931 L1103.33 683.931 L1103.89 683.931 L1104.45 683.931 L1105.01 683.931 L1105.57 683.931 L1106.13 683.931 L1106.69 683.931 L1107.25 683.931 L1107.81 683.931 L1108.37 683.931 L1108.93 683.931 L1109.49 683.931 L1110.04 683.931 L1110.6 683.931 L1111.16 683.931 L1111.72 683.931 L1112.28 683.931 L1112.84 683.931 L1113.4 683.931 L1113.96 683.931 L1114.52 683.931 L1115.08 683.931 L1115.64 683.931 L1116.2 683.931 L1116.76 683.931 L1117.31 683.931 L1117.87 683.931 L1118.43 683.931 L1118.99 683.931 L1119.55 683.931 L1120.11 683.931 L1120.67 683.931 L1121.23 683.931 L1121.79 683.931 L1122.35 683.931 L1122.91 683.931 L1123.47 683.931 L1124.03 683.931 L1124.59 683.931 L1125.14 683.931 L1125.7 683.931 L1126.26 683.931 L1126.82 683.931 L1127.38 683.931 L1127.94 683.931 L1128.5 683.931 L1129.06 683.931 L1129.62 683.931 L1130.18 683.931 L1130.74 683.931 L1131.3 683.931 L1131.86 683.931 L1132.41 683.931 L1132.97 683.931 L1133.53 683.931 L1134.09 683.931 L1134.65 683.931 L1135.21 683.931 L1135.77 683.931 L1136.33 683.931 L1136.89 683.931 L1137.45 683.931 L1138.01 683.931 L1138.57 683.931 L1139.13 683.931 L1139.68 683.931 L1140.24 683.931 L1140.8 683.931 L1141.36 683.931 L1141.92 683.931 L1142.48 683.931 L1143.04 683.931 L1143.6 683.931 L1144.16 683.931 L1144.72 683.931 L1145.28 683.931 L1145.84 683.931 L1146.4 683.931 L1146.96 683.931 L1147.51 683.931 L1148.07 683.931 L1148.63 683.931 L1149.19 683.931 L1149.75 683.931 L1150.31 683.931 L1150.87 683.931 L1151.43 683.931 L1151.99 683.931 L1152.55 683.931 L1153.11 683.931 L1153.67 683.931 L1154.23 683.931 L1154.78 683.931 L1155.34 683.931 L1155.9 683.931 L1156.46 683.931 L1157.02 683.931 L1157.58 683.931 L1158.14 683.931 L1158.7 683.931 L1159.26 683.931 L1159.82 683.931 L1160.38 683.931 L1160.94 683.931 L1161.5 683.931 L1162.05 683.931 L1162.61 683.931 L1163.17 683.931 L1163.73 683.931 L1164.29 683.931 L1164.85 683.931 L1165.41 683.931 L1165.97 683.931 L1166.53 683.931 L1167.09 683.931 L1167.65 683.931 L1168.21 683.931 L1168.77 683.931 L1169.33 683.931 L1169.88 683.931 L1170.44 683.931 L1171 683.931 L1171.56 683.931 L1172.12 683.931 L1172.68 683.931 L1173.24 683.931 L1173.8 683.931 L1174.36 683.931 L1174.92 683.931 L1175.48 683.931 L1176.04 683.931 L1176.6 683.931 L1177.15 683.931 L1177.71 683.931 L1178.27 683.931 L1178.83 683.931 L1179.39 683.931 L1179.95 683.931 L1180.51 683.931 L1181.07 683.931 L1181.63 683.931 L1182.19 683.931 L1182.75 683.931 L1183.31 683.931 L1183.87 683.931 L1184.43 683.931 L1184.98 683.931 L1185.54 683.931 L1186.1 683.931 L1186.66 683.931 L1187.22 683.931 L1187.78 683.931 L1188.34 683.931 L1188.9 683.931 L1189.46 683.931 L1190.02 683.931 L1190.58 683.931 L1191.14 683.931 L1191.7 683.931 L1192.25 683.931 L1192.81 683.931 L1193.37 683.931 L1193.93 683.931 L1194.49 683.931 L1195.05 683.931 L1195.61 683.931 L1196.17 683.931 L1196.73 683.931 L1197.29 683.931 L1197.85 683.931 L1198.41 683.931 L1198.97 683.931 L1199.52 683.931 L1200.08 683.931 L1200.64 683.931 L1201.2 683.931 L1201.76 683.931 L1202.32 683.931 L1202.88 683.931 L1203.44 683.931 L1204 683.931 L1204.56 683.931 L1205.12 683.931 L1205.68 683.931 L1206.24 683.931 L1206.8 683.931 L1207.35 683.931 L1207.91 683.931 L1208.47 683.931 L1209.03 683.931 L1209.59 683.931 L1210.15 683.931 L1210.71 683.931 L1211.27 683.931 L1211.83 683.931 L1212.39 683.931 L1212.95 683.931 L1213.51 683.931 L1214.07 683.931 L1214.62 683.931 L1215.18 683.931 L1215.74 683.931 L1216.3 683.931 L1216.86 683.931 L1217.42 683.931 L1217.98 683.931 L1218.54 683.931 L1219.1 683.931 L1219.66 683.931 L1220.22 683.931 L1220.78 683.931 L1221.34 683.931 L1221.89 683.931 L1222.45 683.931 L1223.01 683.931 L1223.57 683.931 L1224.13 683.931 L1224.69 683.931 L1225.25 683.931 L1225.81 683.931 L1226.37 683.931 L1226.93 683.931 L1227.49 683.931 L1228.05 683.931 L1228.61 683.931 L1229.17 683.931 L1229.72 683.931 L1230.28 683.931 L1230.84 683.931 L1231.4 683.931 L1231.96 683.931 L1232.52 683.931 L1233.08 683.931 L1233.64 683.931 L1234.2 683.931 L1234.76 683.931 L1235.32 683.931 L1235.88 683.931 L1236.44 683.931 L1236.99 683.931 L1237.55 683.931 L1238.11 683.931 L1238.67 683.931 L1239.23 683.931 L1239.79 683.931 L1240.35 683.931 L1240.91 683.931 L1241.47 683.931 L1242.03 683.931 L1242.59 683.931 L1243.15 683.931 L1243.71 683.931 L1244.26 683.931 L1244.82 683.931 L1245.38 683.931 L1245.94 683.931 L1246.5 683.931 L1247.06 683.931 L1247.62 683.931 L1248.18 683.931 L1248.74 683.931 L1249.3 683.931 L1249.86 683.931 L1250.42 683.931 L1250.98 683.931 L1251.54 683.931 L1252.09 683.931 L1252.65 683.931 L1253.21 683.931 L1253.77 683.931 L1254.33 683.931 L1254.89 683.931 L1255.45 683.931 L1256.01 683.931 L1256.57 683.931 L1257.13 683.931 L1257.69 683.931 L1258.25 683.931 L1258.81 683.931 L1259.36 683.931 L1259.92 683.931 L1260.48 683.931 L1261.04 683.931 L1261.6 683.931 L1262.16 683.931 L1262.72 683.931 L1263.28 683.931 L1263.84 683.931 L1264.4 683.931 L1264.96 683.931 L1265.52 683.931 L1266.08 683.931 L1266.63 683.931 L1267.19 683.931 L1267.75 683.931 L1268.31 683.931 L1268.87 683.931 L1269.43 683.931 L1269.99 683.931 L1270.55 683.931 L1271.11 683.931 L1271.67 683.931 L1272.23 683.931 L1272.79 683.931 L1273.35 683.931 L1273.91 683.931 L1274.46 683.931 L1275.02 683.931 L1275.58 683.931 L1276.14 683.931 L1276.7 683.931 L1277.26 683.931 L1277.82 683.931 L1278.38 683.931 L1278.94 683.931 L1279.5 683.931 L1280.06 683.931 L1280.62 683.931 L1281.18 683.931 L1281.73 683.931 L1282.29 683.931 L1282.85 683.931 L1283.41 683.931 L1283.97 683.931 L1284.53 683.931 L1285.09 683.931 L1285.65 683.931 L1286.21 683.931 L1286.77 683.931 L1287.33 683.931 L1287.89 683.931 L1288.45 683.931 L1289 683.931 L1289.56 683.931 L1290.12 683.931 L1290.68 683.931 L1291.24 683.931 L1291.8 683.931 L1292.36 683.931 L1292.92 683.931 L1293.48 683.931 L1294.04 683.931 L1294.6 683.931 L1295.16 683.931 L1295.72 683.931 L1296.28 683.931 L1296.83 683.931 L1297.39 683.931 L1297.95 683.931 L1298.51 683.931 L1299.07 683.931 L1299.63 683.931 L1300.19 683.931 L1300.75 683.931 L1301.31 683.931 L1301.87 683.931 L1302.43 683.931 L1302.99 683.931 L1303.55 683.931 L1304.1 683.931 L1304.66 683.931 L1305.22 683.931 L1305.78 683.931 L1306.34 683.931 L1306.9 683.931 L1307.46 683.931 L1308.02 683.931 L1308.58 683.931 L1309.14 683.931 L1309.7 683.931 L1310.26 683.931 L1310.82 683.931 L1311.38 683.931 L1311.93 683.931 L1312.49 683.931 L1313.05 683.931 L1313.61 683.931 L1314.17 683.931 L1314.73 683.931 L1315.29 683.931 L1315.85 683.931 L1316.41 683.931 L1316.97 683.931 L1317.53 683.931 L1318.09 683.931 L1318.65 683.931 L1319.2 683.931 L1319.76 683.931 L1320.32 683.931 L1320.88 683.931 L1321.44 683.931 L1322 683.931 L1322.56 683.931 L1323.12 683.931 L1323.68 683.931 L1324.24 683.931 L1324.8 683.931 L1325.36 683.931 L1325.92 683.931 L1326.47 683.931 L1327.03 683.931 L1327.59 683.931 L1328.15 683.931 L1328.71 683.931 L1329.27 683.931 L1329.83 683.931 L1330.39 683.931 L1330.95 683.931 L1331.51 683.931 L1332.07 683.931 L1332.63 683.931 L1333.19 683.931 L1333.75 683.931 L1334.3 683.931 L1334.86 683.931 L1335.42 683.931 L1335.98 683.931 L1336.54 683.931 L1337.1 683.931 L1337.66 683.931 L1338.22 683.931 L1338.78 683.931 L1339.34 683.931 L1339.9 683.931 L1340.46 683.931 L1341.02 683.931 L1341.57 683.931 L1342.13 683.931 L1342.69 683.931 L1343.25 683.931 L1343.81 683.931 L1344.37 683.931 L1344.93 683.931 L1345.49 683.931 L1346.05 683.931 L1346.61 683.931 L1347.17 683.931 L1347.73 683.931 L1348.29 683.931 L1348.84 683.931 L1349.4 683.931 L1349.96 683.931 L1350.52 683.931 L1351.08 683.931 L1351.64 683.931 L1352.2 683.931 L1352.76 683.931 L1353.32 683.931 L1353.88 683.931 L1354.44 683.931 L1355 683.931 L1355.56 683.931 L1356.12 683.931 L1356.67 683.931 L1357.23 683.931 L1357.79 683.931 L1358.35 683.931 L1358.91 683.931 L1359.47 683.931 L1360.03 683.931 L1360.59 683.931 L1361.15 683.931 L1361.71 683.931 L1362.27 683.931 L1362.83 683.931 L1363.39 683.931 L1363.94 683.931 L1364.5 683.931 L1365.06 683.931 L1365.62 683.931 L1366.18 683.931 L1366.74 683.931 L1367.3 683.931 L1367.86 683.931 L1368.42 683.931 L1368.98 683.931 L1369.54 683.931 L1370.1 683.931 L1370.66 683.931 L1371.21 683.931 L1371.77 683.931 L1372.33 683.931 L1372.89 683.931 L1373.45 683.931 L1374.01 683.931 L1374.57 683.931 L1375.13 683.931 L1375.69 683.931 L1376.25 683.931 L1376.81 683.931 L1377.37 683.931 L1377.93 683.931 L1378.49 683.931 L1379.04 683.931 L1379.6 683.931 L1380.16 683.931 L1380.72 683.931 L1381.28 683.931 L1381.84 683.931 L1382.4 683.931 L1382.96 683.931 L1383.52 683.931 L1384.08 683.931 L1384.64 683.931 L1385.2 683.931 L1385.76 683.931 L1386.31 683.931 L1386.87 683.931 L1387.43 683.931 L1387.99 683.931 L1388.55 683.931 L1389.11 683.931 L1389.67 683.931 L1390.23 683.931 L1390.79 683.931 L1391.35 683.931 L1391.91 683.931 L1392.47 683.931 L1393.03 683.931 L1393.58 683.931 L1394.14 683.931 L1394.7 683.931 L1395.26 683.931 L1395.82 683.931 L1396.38 683.931 L1396.94 683.931 L1397.5 683.931 L1398.06 683.931 L1398.62 683.931 L1399.18 683.931 L1399.74 683.931 L1400.3 683.931 L1400.86 683.931 L1401.41 683.931 L1401.97 683.931 L1402.53 683.931 L1403.09 683.931 L1403.65 683.931 L1404.21 683.931 L1404.77 683.931 L1405.33 683.931 L1405.89 683.931 L1406.45 683.931 L1407.01 683.931 L1407.57 683.931 L1408.13 683.931 L1408.68 683.931 L1409.24 683.931 L1409.8 683.931 L1410.36 683.931 L1410.92 683.931 L1411.48 683.931 L1412.04 683.931 L1412.6 683.931 L1413.16 683.931 L1413.72 683.931 L1414.28 683.931 L1414.84 683.931 L1415.4 683.931 L1415.95 683.931 L1416.51 683.931 L1417.07 683.931 L1417.63 683.931 L1418.19 683.931 L1418.75 683.931 L1419.31 683.931 L1419.87 683.931 L1420.43 683.931 L1420.99 683.931 L1421.55 683.931 L1422.11 683.931 L1422.67 683.931 L1423.23 683.931 L1423.78 683.931 L1424.34 683.931 L1424.9 683.931 L1425.46 683.931 L1426.02 683.931 L1426.58 683.931 L1427.14 683.931 L1427.7 683.931 L1428.26 683.931 L1428.82 683.931 L1429.38 683.931 L1429.94 683.931 L1430.5 683.931 L1431.05 683.931 L1431.61 683.931 L1432.17 683.931 L1432.73 683.931 L1433.29 683.931 L1433.85 683.931 L1434.41 683.931 L1434.97 683.931 L1435.53 683.931 L1436.09 683.931 L1436.65 683.931 L1437.21 683.931 L1437.77 683.931 L1438.33 683.931 L1438.88 683.931 L1439.44 683.931 L1440 683.931 L1440.56 683.931 L1441.12 683.931 L1441.68 683.931 L1442.24 683.931 L1442.8 683.931 L1443.36 683.931 L1443.92 683.931 L1444.48 683.931 L1445.04 683.931 L1445.6 683.931 L1446.15 683.931 L1446.71 683.931 L1447.27 683.931 L1447.83 683.931 L1448.39 683.931 L1448.95 683.931 L1449.51 683.931 L1450.07 683.931 L1450.63 683.931 L1451.19 683.931 L1451.75 683.931 L1452.31 683.931 L1452.87 683.931 L1453.42 683.931 L1453.98 683.931 L1454.54 683.931 L1455.1 683.931 L1455.66 683.931 L1456.22 683.931 L1456.78 683.931 L1457.34 683.931 L1457.9 683.931 L1458.46 683.931 L1459.02 683.931 L1459.58 683.931 L1460.14 683.931 L1460.7 683.931 L1461.25 683.931 L1461.81 683.931 L1462.37 683.931 L1462.93 683.931 L1463.49 683.931 L1464.05 683.931 L1464.61 683.931 L1465.17 683.931 L1465.73 683.931 L1466.29 683.931 L1466.85 683.931 L1467.41 683.931 L1467.97 683.931 L1468.52 683.931 L1469.08 683.931 L1469.64 683.931 L1470.2 683.931 L1470.76 683.931 L1471.32 683.931 L1471.88 683.931 L1472.44 683.931 L1473 683.931 L1473.56 683.931 L1474.12 683.931 L1474.68 683.931 L1475.24 683.931 L1475.79 683.931 L1476.35 683.931 L1476.91 683.931 L1477.47 683.931 L1478.03 683.931 L1478.59 683.931 L1479.15 683.931 L1479.71 683.931 L1480.27 683.931 L1480.83 683.931 L1481.39 683.931 L1481.95 683.931 L1482.51 683.931 L1483.07 683.931 L1483.62 683.931 L1484.18 683.931 L1484.74 683.931 L1485.3 683.931 L1485.86 683.931 L1486.42 683.931 L1486.98 683.931 L1487.54 683.931 L1488.1 683.931 L1488.66 683.931 L1489.22 683.931 L1489.78 683.931 L1490.34 683.931 L1490.89 683.931 L1491.45 683.931 L1492.01 683.931 L1492.57 683.931 L1493.13 683.931 L1493.69 683.931 L1494.25 683.931 L1494.81 683.931 L1495.37 683.931 L1495.93 683.931 L1496.49 683.931 L1497.05 683.931 L1497.61 683.931 L1498.16 683.931 L1498.72 683.931 L1499.28 683.931 L1499.84 683.931 L1500.4 683.931 L1500.96 683.931 L1501.52 683.931 L1502.08 683.931 L1502.64 683.931 L1503.2 683.931 L1503.76 683.931 L1504.32 683.931 L1504.88 683.931 L1505.44 683.931 L1505.99 683.931 L1506.55 683.931 L1507.11 683.931 L1507.67 683.931 L1508.23 683.931 L1508.79 683.931 L1509.35 683.931 L1509.91 683.931 L1510.47 683.931 L1511.03 683.931 L1511.59 683.931 L1512.15 683.931 L1512.71 683.931 L1513.26 683.931 L1513.82 683.931 L1514.38 683.931 L1514.94 683.931 L1515.5 683.931 L1516.06 683.931 L1516.62 683.931 L1517.18 683.931 L1517.74 683.931 L1518.3 683.931 L1518.86 683.931 L1519.42 683.931 L1519.98 683.931 L1520.53 683.931 L1521.09 683.931 L1521.65 683.931 L1522.21 683.931 L1522.77 683.931 L1523.33 683.931 L1523.89 683.931 L1524.45 683.931 L1525.01 683.931 L1525.57 683.931 L1526.13 683.931 L1526.69 683.931 L1527.25 683.931 L1527.81 683.931 L1528.36 683.931 L1528.92 683.931 L1529.48 683.931 L1530.04 683.931 L1530.6 683.931 L1531.16 683.931 L1531.72 683.931 L1532.28 683.931 L1532.84 683.931 L1533.4 683.931 L1533.96 683.931 L1534.52 683.931 L1535.08 683.931 L1535.63 683.931 L1536.19 683.931 L1536.75 683.931 L1537.31 683.931 L1537.87 683.931 L1538.43 683.931 L1538.99 683.931 L1539.55 683.931 L1540.11 683.931 L1540.67 683.931 L1541.23 683.931 L1541.79 683.931 L1542.35 683.931 L1542.9 683.931 L1543.46 683.931 L1544.02 683.931 L1544.58 683.931 L1545.14 683.931 L1545.7 683.931 L1546.26 683.931 L1546.82 683.931 L1547.38 683.931 L1547.94 683.931 L1548.5 683.931 L1549.06 683.931 L1549.62 683.931 L1550.18 683.931 L1550.73 683.931 L1551.29 683.931 L1551.85 683.931 L1552.41 683.931 L1552.97 683.931 L1553.53 683.931 L1554.09 683.931 L1554.65 683.931 L1555.21 683.931 L1555.77 683.931 L1556.33 683.931 L1556.89 683.931 L1557.45 683.931 L1558 683.931 L1558.56 683.931 L1559.12 683.931 L1559.68 683.931 L1560.24 683.931 L1560.8 683.931 L1561.36 683.931 L1561.92 683.931 L1562.48 683.931 L1563.04 683.931 L1563.6 683.931 L1564.16 683.931 L1564.72 683.931 L1565.28 683.931 L1565.83 683.931 L1566.39 683.931 L1566.95 683.931 L1567.51 683.931 L1568.07 683.931 L1568.63 683.931 L1569.19 683.931 L1569.75 683.931 L1570.31 683.931 L1570.87 683.931 L1571.43 683.931 L1571.99 683.931 L1572.55 683.931 L1573.1 683.931 L1573.66 683.931 L1574.22 683.931 L1574.78 683.931 L1575.34 683.931 L1575.9 683.931 L1576.46 683.931 L1577.02 683.931 L1577.58 683.931 L1578.14 683.931 L1578.7 683.931 L1579.26 683.931 L1579.82 683.931 L1580.37 683.931 L1580.93 683.931 L1581.49 683.931 L1582.05 683.931 L1582.61 683.931 L1583.17 683.931 L1583.73 683.931 L1584.29 683.931 L1584.85 683.931 L1585.41 683.931 L1585.97 683.931 L1586.53 683.931 L1587.09 683.931 L1587.65 683.931 L1588.2 683.931 L1588.76 683.931 L1589.32 683.931 L1589.88 683.931 L1590.44 683.931 L1591 683.931 L1591.56 683.931 L1592.12 683.931 L1592.68 683.931 L1593.24 683.931 L1593.8 683.931 L1594.36 683.931 L1594.92 683.931 L1595.47 683.931 L1596.03 683.931 L1596.59 683.931 L1597.15 683.931 L1597.71 683.931 L1598.27 683.931 L1598.83 683.931 L1599.39 683.931 L1599.95 683.931 L1600.51 683.931 L1601.07 683.931 L1601.63 683.931 L1602.19 683.931 L1602.74 683.931 L1603.3 683.931 L1603.86 683.931 L1604.42 683.931 L1604.98 683.931 L1605.54 683.931 L1606.1 683.931 L1606.66 683.931 L1607.22 683.931 L1607.78 683.931 L1608.34 683.931 L1608.9 683.931 L1609.46 683.931 L1610.02 683.931 L1610.57 683.931 L1611.13 683.931 L1611.69 683.931 L1612.25 683.931 L1612.81 683.931 L1613.37 683.931 L1613.93 683.931 L1614.49 683.931 L1615.05 683.931 L1615.61 683.931 L1616.17 683.931 L1616.73 683.931 L1617.29 683.931 L1617.84 683.931 L1618.4 683.931 L1618.96 683.931 L1619.52 683.931 L1620.08 683.931 L1620.64 683.931 L1621.2 683.931 L1621.76 683.931 L1622.32 683.931 L1622.88 683.931 L1623.44 683.931 L1624 683.931 L1624.56 683.931 L1625.11 683.931 L1625.67 683.931 L1626.23 683.931 L1626.79 683.931 L1627.35 683.931 L1627.91 683.931 L1628.47 683.931 L1629.03 683.931 L1629.59 683.931 L1630.15 683.931 L1630.71 683.931 L1631.27 683.931 L1631.83 683.931 L1632.39 683.931 L1632.94 683.931 L1633.5 683.931 L1634.06 683.931 L1634.62 683.931 L1635.18 683.931 L1635.74 683.931 L1636.3 683.931 L1636.86 683.931 L1637.42 683.931 L1637.98 683.931 L1638.54 683.931 L1639.1 683.931 L1639.66 683.931 L1640.21 683.931 L1640.77 683.931 L1641.33 683.931 L1641.89 683.931 L1642.45 683.931 L1643.01 683.931 L1643.57 683.931 L1644.13 683.931 L1644.69 683.931 L1645.25 683.931 L1645.81 683.931 L1646.37 683.931 L1646.93 683.931 L1647.48 683.931 L1648.04 683.931 L1648.6 683.931 L1649.16 683.931 L1649.72 683.931 L1650.28 683.931 L1650.84 683.931 L1651.4 683.931 L1651.96 683.931 L1652.52 683.931 L1653.08 683.931 L1653.64 683.931 L1654.2 683.931 L1654.76 683.931 L1655.31 683.931 L1655.87 683.931 L1656.43 683.931 L1656.99 683.931 L1657.55 683.931 L1658.11 683.931 L1658.67 683.931 L1659.23 683.931 L1659.79 683.931 L1660.35 683.931 L1660.91 683.931 L1661.47 683.931 L1662.03 683.931 L1662.58 683.931 L1663.14 683.931 L1663.7 683.931 L1664.26 683.931 L1664.82 683.931 L1665.38 683.931 L1665.94 683.931 L1666.5 683.931 L1667.06 683.931 L1667.62 683.931 L1668.18 683.931 L1668.74 683.931 L1669.3 683.931 L1669.85 683.931 L1670.41 683.931 L1670.97 683.931 L1671.53 683.931 L1672.09 683.931 L1672.65 683.931 L1673.21 683.931 L1673.77 683.931 L1674.33 683.931 L1674.89 683.931 L1675.45 683.931 L1676.01 683.931 L1676.57 683.931 L1677.13 683.931 L1677.68 683.931 L1678.24 683.931 L1678.8 683.931 L1679.36 683.931 L1679.92 683.931 L1680.48 683.931 L1681.04 683.931 L1681.6 683.931 L1682.16 683.931 L1682.72 683.931 L1683.28 683.931 L1683.84 683.931 L1684.4 683.931 L1684.95 683.931 L1685.51 683.931 L1686.07 683.931 L1686.63 683.931 L1687.19 683.931 L1687.75 683.931 L1688.31 683.931 L1688.87 683.931 L1689.43 683.931 L1689.99 683.931 L1690.55 683.931 L1691.11 683.931 L1691.67 683.931 L1692.23 683.931 L1692.78 683.931 L1693.34 683.931 L1693.9 683.931 L1694.46 683.931 L1695.02 683.931 L1695.58 683.931 L1696.14 683.931 L1696.7 683.931 L1697.26 683.931 L1697.82 683.931 L1698.38 683.931 L1698.94 683.931 L1699.5 683.931 L1700.05 683.931 L1700.61 683.931 L1701.17 683.931 L1701.73 683.931 L1702.29 683.931 L1702.85 683.931 L1703.41 683.931 L1703.97 683.931 L1704.53 683.931 L1705.09 683.931 L1705.65 683.931 L1706.21 683.931 L1706.77 683.931 L1707.32 683.931 L1707.88 683.931 L1708.44 683.931 L1709 683.931 L1709.56 683.931 L1710.12 683.931 L1710.68 683.931 L1711.24 683.931 L1711.8 683.931 L1712.36 683.931 L1712.92 683.931 L1713.48 683.931 L1714.04 683.931 L1714.6 683.931 L1715.15 683.931 L1715.71 683.931 L1716.27 683.931 L1716.83 683.931 L1717.39 683.931 L1717.95 683.931 L1718.51 683.931 L1719.07 683.931 L1719.63 683.931 L1720.19 683.931 L1720.75 683.931 L1721.31 683.931 L1721.87 683.931 L1722.42 683.931 L1722.98 683.931 L1723.54 683.931 L1724.1 683.931 L1724.66 683.931 L1725.22 683.931 L1725.78 683.931 L1726.34 683.931 L1726.9 683.931 L1727.46 683.931 L1728.02 683.931 L1728.58 683.931 L1729.14 683.931 L1729.69 683.931 L1730.25 683.931 L1730.81 683.931 L1731.37 683.931 L1731.93 683.931 L1732.49 683.931 L1733.05 683.931 L1733.61 683.931 L1734.17 683.931 L1734.73 683.931 L1735.29 683.931 L1735.85 683.931 L1736.41 683.931 L1736.97 683.931 L1737.52 683.931 L1738.08 683.931 L1738.64 683.931 L1739.2 683.931 L1739.76 683.931 L1740.32 683.931 L1740.88 683.931 L1741.44 683.931 L1742 683.931 L1742.56 683.931 L1743.12 683.931 L1743.68 683.931 L1744.24 683.931 L1744.79 683.931 L1745.35 683.931 L1745.91 683.931 L1746.47 683.931 L1747.03 683.931 L1747.59 683.931 L1748.15 683.931 L1748.71 683.931 L1749.27 683.931 L1749.83 683.931 L1750.39 683.931 L1750.95 683.931 L1751.51 683.931 L1752.06 683.931 L1752.62 683.931 L1753.18 683.931 L1753.74 683.931 L1754.3 683.931 L1754.86 683.931 L1755.42 683.931 L1755.98 683.931 L1756.54 683.931 L1757.1 683.931 L1757.66 683.931 L1758.22 683.931 L1758.78 683.931 L1759.34 683.931 L1759.89 683.931 L1760.45 683.931 L1761.01 683.931 L1761.57 683.931 L1762.13 683.931 L1762.69 683.931 L1763.25 683.931 L1763.81 683.931 L1764.37 683.931 L1764.93 683.931 L1765.49 683.931 L1766.05 683.931 L1766.61 683.931 L1767.16 683.931 L1767.72 683.931 L1768.28 683.931 L1768.84 683.931 L1769.4 683.931 L1769.96 683.931 L1770.52 683.931 L1771.08 683.931 L1771.64 683.931 L1772.2 683.931 L1772.76 683.931 L1773.32 683.931 L1773.88 683.931 L1774.43 683.931 L1774.99 683.931 L1775.55 683.931 L1776.11 683.931 L1776.67 683.931 L1777.23 683.931 L1777.79 683.931 L1778.35 683.931 L1778.91 683.931 L1779.47 683.931 L1780.03 683.931 L1780.59 683.931 L1781.15 683.931 L1781.71 683.931 L1782.26 683.931 L1782.82 683.931 L1783.38 683.931 L1783.94 683.931 L1784.5 683.931 L1785.06 683.931 L1785.62 683.931 L1786.18 683.931 L1786.74 683.931 L1787.3 683.931 L1787.86 683.931 L1788.42 683.931 L1788.98 683.931 L1789.53 683.931 L1790.09 683.931 L1790.65 683.931 L1791.21 683.931 L1791.77 683.931 L1792.33 683.931 L1792.89 683.931 L1793.45 683.931 L1794.01 683.931 L1794.57 683.931 L1795.13 683.931 L1795.69 683.931 L1796.25 683.931 L1796.8 683.931 L1797.36 683.931 L1797.92 683.931 L1798.48 683.931 L1799.04 683.931 L1799.6 683.931 L1800.16 683.931 L1800.72 683.931 L1801.28 683.931 L1801.84 683.931 L1802.4 683.931 L1802.96 683.931 L1803.52 683.931 L1804.08 683.931 L1804.63 683.931 L1805.19 683.931 L1805.75 683.931 L1806.31 683.931 L1806.87 683.931 L1807.43 683.931 L1807.99 683.931 L1808.55 683.931 L1809.11 683.931 L1809.67 683.931 L1810.23 683.931 L1810.79 683.931 L1811.35 683.931 L1811.9 683.931 L1812.46 683.931 L1813.02 683.931 L1813.58 683.931 L1814.14 683.931 L1814.7 683.931 L1815.26 683.931 L1815.82 683.931 L1816.38 683.931 L1816.94 683.931 L1817.5 683.931 L1818.06 683.931 L1818.62 683.931 L1819.18 683.931 L1819.73 683.931 L1820.29 683.931 L1820.85 683.931 L1821.41 683.931 L1821.97 683.931 L1822.53 683.931 L1823.09 683.931 L1823.65 683.931 L1824.21 683.931 L1824.77 683.931 L1825.33 683.931 L1825.89 683.931 L1826.45 683.931 L1827 683.931 L1827.56 683.931 L1828.12 683.931 L1828.68 683.931 L1829.24 683.931 L1829.8 683.931 L1830.36 683.931 L1830.92 683.931 L1831.48 683.931 L1832.04 683.931 L1832.6 683.931 L1833.16 683.931 L1833.72 683.931 L1834.27 683.931 L1834.83 683.931 L1835.39 683.931 L1835.95 683.931 L1836.51 683.931 L1837.07 683.931 L1837.63 683.931 L1838.19 683.931 L1838.19 682.214 L1837.63 682.214 L1837.07 682.214 L1836.51 682.214 L1835.95 682.214 L1835.39 682.214 L1834.83 682.214 L1834.27 682.214 L1833.72 682.214 L1833.16 682.214 L1832.6 682.214 L1832.04 682.214 L1831.48 682.214 L1830.92 682.214 L1830.36 682.214 L1829.8 682.214 L1829.24 682.214 L1828.68 682.214 L1828.12 682.214 L1827.56 682.214 L1827 682.214 L1826.45 682.214 L1825.89 682.214 L1825.33 682.214 L1824.77 682.214 L1824.21 682.214 L1823.65 682.214 L1823.09 682.214 L1822.53 682.214 L1821.97 682.214 L1821.41 682.214 L1820.85 682.214 L1820.29 682.214 L1819.73 682.214 L1819.18 682.214 L1818.62 682.214 L1818.06 682.214 L1817.5 682.214 L1816.94 682.214 L1816.38 682.214 L1815.82 682.214 L1815.26 682.214 L1814.7 682.214 L1814.14 682.214 L1813.58 682.214 L1813.02 682.214 L1812.46 682.214 L1811.9 682.214 L1811.35 682.214 L1810.79 682.214 L1810.23 682.214 L1809.67 682.214 L1809.11 682.214 L1808.55 682.214 L1807.99 682.214 L1807.43 682.214 L1806.87 682.214 L1806.31 682.214 L1805.75 682.214 L1805.19 682.214 L1804.63 682.214 L1804.08 682.214 L1803.52 682.214 L1802.96 682.214 L1802.4 682.214 L1801.84 682.214 L1801.28 682.214 L1800.72 682.214 L1800.16 682.214 L1799.6 682.214 L1799.04 682.214 L1798.48 682.214 L1797.92 682.214 L1797.36 682.214 L1796.8 682.214 L1796.25 682.214 L1795.69 682.214 L1795.13 682.214 L1794.57 682.214 L1794.01 682.214 L1793.45 682.214 L1792.89 682.214 L1792.33 682.214 L1791.77 682.214 L1791.21 682.214 L1790.65 682.214 L1790.09 682.214 L1789.53 682.214 L1788.98 682.214 L1788.42 682.214 L1787.86 682.214 L1787.3 682.214 L1786.74 682.214 L1786.18 682.214 L1785.62 682.214 L1785.06 682.214 L1784.5 682.214 L1783.94 682.214 L1783.38 682.214 L1782.82 682.214 L1782.26 682.214 L1781.71 682.214 L1781.15 682.214 L1780.59 682.214 L1780.03 682.214 L1779.47 682.214 L1778.91 682.214 L1778.35 682.214 L1777.79 682.214 L1777.23 682.214 L1776.67 682.214 L1776.11 682.214 L1775.55 682.214 L1774.99 682.214 L1774.43 682.214 L1773.88 682.214 L1773.32 682.214 L1772.76 682.214 L1772.2 682.214 L1771.64 682.214 L1771.08 682.214 L1770.52 682.214 L1769.96 682.214 L1769.4 682.214 L1768.84 682.214 L1768.28 682.214 L1767.72 682.214 L1767.16 682.214 L1766.61 682.214 L1766.05 682.214 L1765.49 682.214 L1764.93 682.214 L1764.37 682.214 L1763.81 682.214 L1763.25 682.214 L1762.69 682.214 L1762.13 682.214 L1761.57 682.214 L1761.01 682.214 L1760.45 682.214 L1759.89 682.214 L1759.34 682.214 L1758.78 682.214 L1758.22 682.214 L1757.66 682.214 L1757.1 682.214 L1756.54 682.214 L1755.98 682.214 L1755.42 682.214 L1754.86 682.214 L1754.3 682.214 L1753.74 682.214 L1753.18 682.214 L1752.62 682.214 L1752.06 682.214 L1751.51 682.214 L1750.95 682.214 L1750.39 682.214 L1749.83 682.214 L1749.27 682.214 L1748.71 682.214 L1748.15 682.214 L1747.59 682.214 L1747.03 682.214 L1746.47 682.214 L1745.91 682.214 L1745.35 682.214 L1744.79 682.214 L1744.24 682.214 L1743.68 682.214 L1743.12 682.214 L1742.56 682.214 L1742 682.214 L1741.44 682.214 L1740.88 682.214 L1740.32 682.214 L1739.76 682.214 L1739.2 682.214 L1738.64 682.214 L1738.08 682.214 L1737.52 682.214 L1736.97 682.214 L1736.41 682.214 L1735.85 682.214 L1735.29 682.214 L1734.73 682.214 L1734.17 682.214 L1733.61 682.214 L1733.05 682.214 L1732.49 682.214 L1731.93 682.214 L1731.37 682.214 L1730.81 682.214 L1730.25 682.214 L1729.69 682.214 L1729.14 682.214 L1728.58 682.214 L1728.02 682.214 L1727.46 682.214 L1726.9 682.214 L1726.34 682.214 L1725.78 682.214 L1725.22 682.214 L1724.66 682.214 L1724.1 682.214 L1723.54 682.214 L1722.98 682.214 L1722.42 682.214 L1721.87 682.214 L1721.31 682.214 L1720.75 682.214 L1720.19 682.214 L1719.63 682.214 L1719.07 682.214 L1718.51 682.214 L1717.95 682.214 L1717.39 682.214 L1716.83 682.214 L1716.27 682.214 L1715.71 682.214 L1715.15 682.214 L1714.6 682.214 L1714.04 682.214 L1713.48 682.214 L1712.92 682.214 L1712.36 682.214 L1711.8 682.214 L1711.24 682.214 L1710.68 682.214 L1710.12 682.214 L1709.56 682.214 L1709 682.214 L1708.44 682.214 L1707.88 682.214 L1707.32 682.214 L1706.77 682.214 L1706.21 682.214 L1705.65 682.214 L1705.09 682.214 L1704.53 682.214 L1703.97 682.214 L1703.41 682.214 L1702.85 682.214 L1702.29 682.214 L1701.73 682.214 L1701.17 682.214 L1700.61 682.214 L1700.05 682.214 L1699.5 682.214 L1698.94 682.214 L1698.38 682.214 L1697.82 682.214 L1697.26 682.214 L1696.7 682.214 L1696.14 682.214 L1695.58 682.214 L1695.02 682.214 L1694.46 682.214 L1693.9 682.214 L1693.34 682.214 L1692.78 682.214 L1692.23 682.214 L1691.67 682.214 L1691.11 682.214 L1690.55 682.214 L1689.99 682.214 L1689.43 682.214 L1688.87 682.214 L1688.31 682.214 L1687.75 682.214 L1687.19 682.214 L1686.63 682.214 L1686.07 682.214 L1685.51 682.214 L1684.95 682.214 L1684.4 682.214 L1683.84 682.214 L1683.28 682.214 L1682.72 682.214 L1682.16 682.214 L1681.6 682.214 L1681.04 682.214 L1680.48 682.214 L1679.92 682.214 L1679.36 682.214 L1678.8 682.214 L1678.24 682.214 L1677.68 682.214 L1677.13 682.214 L1676.57 682.214 L1676.01 682.214 L1675.45 682.214 L1674.89 682.214 L1674.33 682.214 L1673.77 682.214 L1673.21 682.214 L1672.65 682.214 L1672.09 682.214 L1671.53 682.214 L1670.97 682.214 L1670.41 682.214 L1669.85 682.214 L1669.3 682.214 L1668.74 682.214 L1668.18 682.214 L1667.62 682.214 L1667.06 682.214 L1666.5 682.214 L1665.94 682.214 L1665.38 682.214 L1664.82 682.214 L1664.26 682.214 L1663.7 682.214 L1663.14 682.214 L1662.58 682.214 L1662.03 682.214 L1661.47 682.214 L1660.91 682.214 L1660.35 682.214 L1659.79 682.214 L1659.23 682.214 L1658.67 682.214 L1658.11 682.214 L1657.55 682.214 L1656.99 682.214 L1656.43 682.214 L1655.87 682.214 L1655.31 682.214 L1654.76 682.214 L1654.2 682.214 L1653.64 682.214 L1653.08 682.214 L1652.52 682.214 L1651.96 682.214 L1651.4 682.214 L1650.84 682.214 L1650.28 682.214 L1649.72 682.214 L1649.16 682.214 L1648.6 682.214 L1648.04 682.214 L1647.48 682.214 L1646.93 682.214 L1646.37 682.214 L1645.81 682.214 L1645.25 682.214 L1644.69 682.214 L1644.13 682.214 L1643.57 682.214 L1643.01 682.214 L1642.45 682.214 L1641.89 682.214 L1641.33 682.214 L1640.77 682.214 L1640.21 682.214 L1639.66 682.214 L1639.1 682.214 L1638.54 682.214 L1637.98 682.214 L1637.42 682.214 L1636.86 682.214 L1636.3 682.214 L1635.74 682.214 L1635.18 682.214 L1634.62 682.214 L1634.06 682.214 L1633.5 682.214 L1632.94 682.214 L1632.39 682.214 L1631.83 682.214 L1631.27 682.214 L1630.71 682.214 L1630.15 682.214 L1629.59 682.214 L1629.03 682.214 L1628.47 682.214 L1627.91 682.214 L1627.35 682.214 L1626.79 682.214 L1626.23 682.214 L1625.67 682.214 L1625.11 682.214 L1624.56 682.214 L1624 682.214 L1623.44 682.214 L1622.88 682.214 L1622.32 682.214 L1621.76 682.214 L1621.2 682.214 L1620.64 682.214 L1620.08 682.214 L1619.52 682.214 L1618.96 682.214 L1618.4 682.214 L1617.84 682.214 L1617.29 682.214 L1616.73 682.214 L1616.17 682.214 L1615.61 682.214 L1615.05 682.214 L1614.49 682.214 L1613.93 682.214 L1613.37 682.214 L1612.81 682.214 L1612.25 682.214 L1611.69 682.214 L1611.13 682.214 L1610.57 682.214 L1610.02 682.214 L1609.46 682.214 L1608.9 682.214 L1608.34 682.214 L1607.78 682.214 L1607.22 682.214 L1606.66 682.214 L1606.1 682.214 L1605.54 682.214 L1604.98 682.214 L1604.42 682.214 L1603.86 682.214 L1603.3 682.214 L1602.74 682.214 L1602.19 682.214 L1601.63 682.214 L1601.07 682.214 L1600.51 682.214 L1599.95 682.214 L1599.39 682.214 L1598.83 682.214 L1598.27 682.214 L1597.71 682.214 L1597.15 682.214 L1596.59 682.214 L1596.03 682.214 L1595.47 682.214 L1594.92 682.214 L1594.36 682.214 L1593.8 682.214 L1593.24 682.214 L1592.68 682.214 L1592.12 682.214 L1591.56 682.214 L1591 682.214 L1590.44 682.214 L1589.88 682.214 L1589.32 682.214 L1588.76 682.214 L1588.2 682.214 L1587.65 682.214 L1587.09 682.214 L1586.53 682.214 L1585.97 682.214 L1585.41 682.214 L1584.85 682.214 L1584.29 682.214 L1583.73 682.214 L1583.17 682.214 L1582.61 682.214 L1582.05 682.214 L1581.49 682.214 L1580.93 682.214 L1580.37 682.214 L1579.82 682.214 L1579.26 682.214 L1578.7 682.214 L1578.14 682.214 L1577.58 682.214 L1577.02 682.214 L1576.46 682.214 L1575.9 682.214 L1575.34 682.214 L1574.78 682.214 L1574.22 682.214 L1573.66 682.214 L1573.1 682.214 L1572.55 682.214 L1571.99 682.214 L1571.43 682.214 L1570.87 682.214 L1570.31 682.214 L1569.75 682.214 L1569.19 682.214 L1568.63 682.214 L1568.07 682.214 L1567.51 682.214 L1566.95 682.214 L1566.39 682.214 L1565.83 682.214 L1565.28 682.214 L1564.72 682.214 L1564.16 682.214 L1563.6 682.214 L1563.04 682.214 L1562.48 682.214 L1561.92 682.214 L1561.36 682.214 L1560.8 682.214 L1560.24 682.214 L1559.68 682.214 L1559.12 682.214 L1558.56 682.214 L1558 682.214 L1557.45 682.214 L1556.89 682.214 L1556.33 682.214 L1555.77 682.214 L1555.21 682.214 L1554.65 682.214 L1554.09 682.214 L1553.53 682.214 L1552.97 682.214 L1552.41 682.214 L1551.85 682.214 L1551.29 682.214 L1550.73 682.214 L1550.18 682.214 L1549.62 682.214 L1549.06 682.214 L1548.5 682.214 L1547.94 682.214 L1547.38 682.214 L1546.82 682.214 L1546.26 682.214 L1545.7 682.214 L1545.14 682.214 L1544.58 682.214 L1544.02 682.214 L1543.46 682.214 L1542.9 682.214 L1542.35 682.214 L1541.79 682.214 L1541.23 682.214 L1540.67 682.214 L1540.11 682.214 L1539.55 682.214 L1538.99 682.214 L1538.43 682.214 L1537.87 682.214 L1537.31 682.214 L1536.75 682.214 L1536.19 682.214 L1535.63 682.214 L1535.08 682.214 L1534.52 682.214 L1533.96 682.214 L1533.4 682.214 L1532.84 682.214 L1532.28 682.214 L1531.72 682.214 L1531.16 682.214 L1530.6 682.214 L1530.04 682.214 L1529.48 682.214 L1528.92 682.214 L1528.36 682.214 L1527.81 682.214 L1527.25 682.214 L1526.69 682.214 L1526.13 682.214 L1525.57 682.214 L1525.01 682.214 L1524.45 682.214 L1523.89 682.214 L1523.33 682.214 L1522.77 682.214 L1522.21 682.214 L1521.65 682.214 L1521.09 682.214 L1520.53 682.214 L1519.98 682.214 L1519.42 682.214 L1518.86 682.214 L1518.3 682.214 L1517.74 682.214 L1517.18 682.214 L1516.62 682.214 L1516.06 682.214 L1515.5 682.214 L1514.94 682.214 L1514.38 682.214 L1513.82 682.214 L1513.26 682.214 L1512.71 682.214 L1512.15 682.214 L1511.59 682.214 L1511.03 682.214 L1510.47 682.214 L1509.91 682.214 L1509.35 682.214 L1508.79 682.214 L1508.23 682.214 L1507.67 682.214 L1507.11 682.214 L1506.55 682.214 L1505.99 682.214 L1505.44 682.214 L1504.88 682.214 L1504.32 682.214 L1503.76 682.214 L1503.2 682.214 L1502.64 682.214 L1502.08 682.214 L1501.52 682.214 L1500.96 682.214 L1500.4 682.214 L1499.84 682.214 L1499.28 682.214 L1498.72 682.214 L1498.16 682.214 L1497.61 682.214 L1497.05 682.214 L1496.49 682.214 L1495.93 682.214 L1495.37 682.214 L1494.81 682.214 L1494.25 682.214 L1493.69 682.214 L1493.13 682.214 L1492.57 682.214 L1492.01 682.214 L1491.45 682.214 L1490.89 682.214 L1490.34 682.214 L1489.78 682.214 L1489.22 682.214 L1488.66 682.214 L1488.1 682.214 L1487.54 682.214 L1486.98 682.214 L1486.42 682.214 L1485.86 682.214 L1485.3 682.214 L1484.74 682.214 L1484.18 682.214 L1483.62 682.214 L1483.07 682.214 L1482.51 682.214 L1481.95 682.214 L1481.39 682.214 L1480.83 682.214 L1480.27 682.214 L1479.71 682.214 L1479.15 682.214 L1478.59 682.214 L1478.03 682.214 L1477.47 682.214 L1476.91 682.214 L1476.35 682.214 L1475.79 682.214 L1475.24 682.214 L1474.68 682.214 L1474.12 682.214 L1473.56 682.214 L1473 682.214 L1472.44 682.214 L1471.88 682.214 L1471.32 682.214 L1470.76 682.214 L1470.2 682.214 L1469.64 682.214 L1469.08 682.214 L1468.52 682.214 L1467.97 682.214 L1467.41 682.214 L1466.85 682.214 L1466.29 682.214 L1465.73 682.214 L1465.17 682.214 L1464.61 682.214 L1464.05 682.214 L1463.49 682.214 L1462.93 682.214 L1462.37 682.214 L1461.81 682.214 L1461.25 682.214 L1460.7 682.214 L1460.14 682.214 L1459.58 682.214 L1459.02 682.214 L1458.46 682.214 L1457.9 682.214 L1457.34 682.214 L1456.78 682.214 L1456.22 682.214 L1455.66 682.214 L1455.1 682.214 L1454.54 682.214 L1453.98 682.214 L1453.42 682.214 L1452.87 682.214 L1452.31 682.214 L1451.75 682.214 L1451.19 682.214 L1450.63 682.214 L1450.07 682.214 L1449.51 682.214 L1448.95 682.214 L1448.39 682.214 L1447.83 682.214 L1447.27 682.214 L1446.71 682.214 L1446.15 682.214 L1445.6 682.214 L1445.04 682.214 L1444.48 682.214 L1443.92 682.214 L1443.36 682.214 L1442.8 682.214 L1442.24 682.214 L1441.68 682.214 L1441.12 682.214 L1440.56 682.214 L1440 682.214 L1439.44 682.214 L1438.88 682.214 L1438.33 682.214 L1437.77 682.214 L1437.21 682.214 L1436.65 682.214 L1436.09 682.214 L1435.53 682.214 L1434.97 682.214 L1434.41 682.214 L1433.85 682.214 L1433.29 682.214 L1432.73 682.214 L1432.17 682.214 L1431.61 682.214 L1431.05 682.214 L1430.5 682.214 L1429.94 682.214 L1429.38 682.214 L1428.82 682.214 L1428.26 682.214 L1427.7 682.214 L1427.14 682.214 L1426.58 682.214 L1426.02 682.214 L1425.46 682.214 L1424.9 682.214 L1424.34 682.214 L1423.78 682.214 L1423.23 682.214 L1422.67 682.214 L1422.11 682.214 L1421.55 682.214 L1420.99 682.214 L1420.43 682.214 L1419.87 682.214 L1419.31 682.214 L1418.75 682.214 L1418.19 682.214 L1417.63 682.214 L1417.07 682.214 L1416.51 682.214 L1415.95 682.214 L1415.4 682.214 L1414.84 682.214 L1414.28 682.214 L1413.72 682.214 L1413.16 682.214 L1412.6 682.214 L1412.04 682.214 L1411.48 682.214 L1410.92 682.214 L1410.36 682.214 L1409.8 682.214 L1409.24 682.214 L1408.68 682.214 L1408.13 682.214 L1407.57 682.214 L1407.01 682.214 L1406.45 682.214 L1405.89 682.214 L1405.33 682.214 L1404.77 682.214 L1404.21 682.214 L1403.65 682.214 L1403.09 682.214 L1402.53 682.214 L1401.97 682.214 L1401.41 682.214 L1400.86 682.214 L1400.3 682.214 L1399.74 682.214 L1399.18 682.214 L1398.62 682.214 L1398.06 682.214 L1397.5 682.214 L1396.94 682.214 L1396.38 682.214 L1395.82 682.214 L1395.26 682.214 L1394.7 682.214 L1394.14 682.214 L1393.58 682.214 L1393.03 682.214 L1392.47 682.214 L1391.91 682.214 L1391.35 682.214 L1390.79 682.214 L1390.23 682.214 L1389.67 682.214 L1389.11 682.214 L1388.55 682.214 L1387.99 682.214 L1387.43 682.214 L1386.87 682.214 L1386.31 682.214 L1385.76 682.214 L1385.2 682.214 L1384.64 682.214 L1384.08 682.214 L1383.52 682.214 L1382.96 682.214 L1382.4 682.214 L1381.84 682.214 L1381.28 682.214 L1380.72 682.214 L1380.16 682.214 L1379.6 682.214 L1379.04 682.214 L1378.49 682.214 L1377.93 682.214 L1377.37 682.214 L1376.81 682.214 L1376.25 682.214 L1375.69 682.214 L1375.13 682.214 L1374.57 682.214 L1374.01 682.214 L1373.45 682.214 L1372.89 682.214 L1372.33 682.214 L1371.77 682.214 L1371.21 682.214 L1370.66 682.214 L1370.1 682.214 L1369.54 682.214 L1368.98 682.214 L1368.42 682.214 L1367.86 682.214 L1367.3 682.214 L1366.74 682.214 L1366.18 682.214 L1365.62 682.214 L1365.06 682.214 L1364.5 682.214 L1363.94 682.214 L1363.39 682.214 L1362.83 682.214 L1362.27 682.214 L1361.71 682.214 L1361.15 682.214 L1360.59 682.214 L1360.03 682.214 L1359.47 682.214 L1358.91 682.214 L1358.35 682.214 L1357.79 682.214 L1357.23 682.214 L1356.67 682.214 L1356.12 682.214 L1355.56 682.214 L1355 682.214 L1354.44 682.214 L1353.88 682.214 L1353.32 682.214 L1352.76 682.214 L1352.2 682.214 L1351.64 682.214 L1351.08 682.214 L1350.52 682.214 L1349.96 682.214 L1349.4 682.214 L1348.84 682.214 L1348.29 682.214 L1347.73 682.214 L1347.17 682.214 L1346.61 682.214 L1346.05 682.214 L1345.49 682.214 L1344.93 682.214 L1344.37 682.214 L1343.81 682.214 L1343.25 682.214 L1342.69 682.214 L1342.13 682.214 L1341.57 682.214 L1341.02 682.214 L1340.46 682.214 L1339.9 682.214 L1339.34 682.214 L1338.78 682.214 L1338.22 682.214 L1337.66 682.214 L1337.1 682.214 L1336.54 682.214 L1335.98 682.214 L1335.42 682.214 L1334.86 682.214 L1334.3 682.214 L1333.75 682.214 L1333.19 682.214 L1332.63 682.214 L1332.07 682.214 L1331.51 682.214 L1330.95 682.214 L1330.39 682.214 L1329.83 682.214 L1329.27 682.214 L1328.71 682.214 L1328.15 682.214 L1327.59 682.214 L1327.03 682.214 L1326.47 682.214 L1325.92 682.214 L1325.36 682.214 L1324.8 682.214 L1324.24 682.214 L1323.68 682.214 L1323.12 682.214 L1322.56 682.214 L1322 682.214 L1321.44 682.214 L1320.88 682.214 L1320.32 682.214 L1319.76 682.214 L1319.2 682.214 L1318.65 682.214 L1318.09 682.214 L1317.53 682.214 L1316.97 682.214 L1316.41 682.214 L1315.85 682.214 L1315.29 682.214 L1314.73 682.214 L1314.17 682.214 L1313.61 682.214 L1313.05 682.214 L1312.49 682.214 L1311.93 682.214 L1311.38 682.214 L1310.82 682.214 L1310.26 682.214 L1309.7 682.214 L1309.14 682.214 L1308.58 682.214 L1308.02 682.214 L1307.46 682.214 L1306.9 682.214 L1306.34 682.214 L1305.78 682.214 L1305.22 682.214 L1304.66 682.214 L1304.1 682.214 L1303.55 682.214 L1302.99 682.214 L1302.43 682.214 L1301.87 682.214 L1301.31 682.214 L1300.75 682.214 L1300.19 682.214 L1299.63 682.214 L1299.07 682.214 L1298.51 682.214 L1297.95 682.214 L1297.39 682.214 L1296.83 682.214 L1296.28 682.214 L1295.72 682.214 L1295.16 682.214 L1294.6 682.214 L1294.04 682.214 L1293.48 682.214 L1292.92 682.214 L1292.36 682.214 L1291.8 682.214 L1291.24 682.214 L1290.68 682.214 L1290.12 682.214 L1289.56 682.214 L1289 682.214 L1288.45 682.214 L1287.89 682.214 L1287.33 682.214 L1286.77 682.214 L1286.21 682.214 L1285.65 682.214 L1285.09 682.214 L1284.53 682.214 L1283.97 682.214 L1283.41 682.214 L1282.85 682.214 L1282.29 682.214 L1281.73 682.214 L1281.18 682.214 L1280.62 682.214 L1280.06 682.214 L1279.5 682.214 L1278.94 682.214 L1278.38 682.214 L1277.82 682.214 L1277.26 682.214 L1276.7 682.214 L1276.14 682.214 L1275.58 682.214 L1275.02 682.214 L1274.46 682.214 L1273.91 682.214 L1273.35 682.214 L1272.79 682.214 L1272.23 682.214 L1271.67 682.214 L1271.11 682.214 L1270.55 682.214 L1269.99 682.214 L1269.43 682.214 L1268.87 682.214 L1268.31 682.214 L1267.75 682.214 L1267.19 682.214 L1266.63 682.214 L1266.08 682.214 L1265.52 682.214 L1264.96 682.214 L1264.4 682.214 L1263.84 682.214 L1263.28 682.214 L1262.72 682.214 L1262.16 682.214 L1261.6 682.214 L1261.04 682.214 L1260.48 682.214 L1259.92 682.214 L1259.36 682.214 L1258.81 682.214 L1258.25 682.214 L1257.69 682.214 L1257.13 682.214 L1256.57 682.214 L1256.01 682.214 L1255.45 682.214 L1254.89 682.214 L1254.33 682.214 L1253.77 682.214 L1253.21 682.214 L1252.65 682.214 L1252.09 682.214 L1251.54 682.214 L1250.98 682.214 L1250.42 682.214 L1249.86 682.214 L1249.3 682.214 L1248.74 682.214 L1248.18 682.214 L1247.62 682.214 L1247.06 682.214 L1246.5 682.214 L1245.94 682.214 L1245.38 682.214 L1244.82 682.214 L1244.26 682.214 L1243.71 682.214 L1243.15 682.214 L1242.59 682.214 L1242.03 682.214 L1241.47 682.214 L1240.91 682.214 L1240.35 682.214 L1239.79 682.214 L1239.23 682.214 L1238.67 682.214 L1238.11 682.214 L1237.55 682.214 L1236.99 682.214 L1236.44 682.214 L1235.88 682.214 L1235.32 682.214 L1234.76 682.214 L1234.2 682.214 L1233.64 682.214 L1233.08 682.214 L1232.52 682.214 L1231.96 682.214 L1231.4 682.214 L1230.84 682.214 L1230.28 682.214 L1229.72 682.214 L1229.17 682.214 L1228.61 682.214 L1228.05 682.214 L1227.49 682.214 L1226.93 682.214 L1226.37 682.214 L1225.81 682.214 L1225.25 682.214 L1224.69 682.214 L1224.13 682.214 L1223.57 682.214 L1223.01 682.214 L1222.45 682.214 L1221.89 682.214 L1221.34 682.214 L1220.78 682.214 L1220.22 682.214 L1219.66 682.214 L1219.1 682.214 L1218.54 682.214 L1217.98 682.214 L1217.42 682.214 L1216.86 682.214 L1216.3 682.214 L1215.74 682.214 L1215.18 682.214 L1214.62 682.214 L1214.07 682.214 L1213.51 682.214 L1212.95 682.214 L1212.39 682.214 L1211.83 682.214 L1211.27 682.214 L1210.71 682.214 L1210.15 682.214 L1209.59 682.214 L1209.03 682.214 L1208.47 682.214 L1207.91 682.214 L1207.35 682.214 L1206.8 682.214 L1206.24 682.214 L1205.68 682.214 L1205.12 682.214 L1204.56 682.214 L1204 682.214 L1203.44 682.214 L1202.88 682.214 L1202.32 682.214 L1201.76 682.214 L1201.2 682.214 L1200.64 682.214 L1200.08 682.214 L1199.52 682.214 L1198.97 682.214 L1198.41 682.214 L1197.85 682.214 L1197.29 682.214 L1196.73 682.214 L1196.17 682.214 L1195.61 682.214 L1195.05 682.214 L1194.49 682.214 L1193.93 682.214 L1193.37 682.214 L1192.81 682.214 L1192.25 682.214 L1191.7 682.214 L1191.14 682.214 L1190.58 682.214 L1190.02 682.214 L1189.46 682.214 L1188.9 682.214 L1188.34 682.214 L1187.78 682.214 L1187.22 682.214 L1186.66 682.214 L1186.1 682.214 L1185.54 682.214 L1184.98 682.214 L1184.43 682.214 L1183.87 682.214 L1183.31 682.214 L1182.75 682.214 L1182.19 682.214 L1181.63 682.214 L1181.07 682.214 L1180.51 682.214 L1179.95 682.214 L1179.39 682.214 L1178.83 682.214 L1178.27 682.214 L1177.71 682.214 L1177.15 682.214 L1176.6 682.214 L1176.04 682.214 L1175.48 682.214 L1174.92 682.214 L1174.36 682.214 L1173.8 682.214 L1173.24 682.214 L1172.68 682.214 L1172.12 682.214 L1171.56 682.214 L1171 682.214 L1170.44 682.214 L1169.88 682.214 L1169.33 682.214 L1168.77 682.214 L1168.21 682.214 L1167.65 682.214 L1167.09 682.214 L1166.53 682.214 L1165.97 682.214 L1165.41 682.214 L1164.85 682.214 L1164.29 682.214 L1163.73 682.214 L1163.17 682.214 L1162.61 682.214 L1162.05 682.214 L1161.5 682.214 L1160.94 682.214 L1160.38 682.214 L1159.82 682.214 L1159.26 682.214 L1158.7 682.214 L1158.14 682.214 L1157.58 682.214 L1157.02 682.214 L1156.46 682.214 L1155.9 682.214 L1155.34 682.214 L1154.78 682.214 L1154.23 682.214 L1153.67 682.214 L1153.11 682.214 L1152.55 682.214 L1151.99 682.214 L1151.43 682.214 L1150.87 682.214 L1150.31 682.214 L1149.75 682.214 L1149.19 682.214 L1148.63 682.214 L1148.07 682.214 L1147.51 682.214 L1146.96 682.214 L1146.4 682.214 L1145.84 682.214 L1145.28 682.214 L1144.72 682.214 L1144.16 682.214 L1143.6 682.214 L1143.04 682.214 L1142.48 682.214 L1141.92 682.214 L1141.36 682.214 L1140.8 682.214 L1140.24 682.214 L1139.68 682.214 L1139.13 682.214 L1138.57 682.214 L1138.01 682.214 L1137.45 682.214 L1136.89 682.214 L1136.33 682.214 L1135.77 682.214 L1135.21 682.214 L1134.65 682.214 L1134.09 682.214 L1133.53 682.214 L1132.97 682.214 L1132.41 682.214 L1131.86 682.214 L1131.3 682.214 L1130.74 682.214 L1130.18 682.214 L1129.62 682.214 L1129.06 682.214 L1128.5 682.214 L1127.94 682.214 L1127.38 682.214 L1126.82 682.214 L1126.26 682.214 L1125.7 682.214 L1125.14 682.214 L1124.59 682.214 L1124.03 682.214 L1123.47 682.214 L1122.91 682.214 L1122.35 682.214 L1121.79 682.214 L1121.23 682.214 L1120.67 682.214 L1120.11 682.214 L1119.55 682.214 L1118.99 682.214 L1118.43 682.214 L1117.87 682.214 L1117.31 682.214 L1116.76 682.214 L1116.2 682.214 L1115.64 682.214 L1115.08 682.214 L1114.52 682.214 L1113.96 682.214 L1113.4 682.214 L1112.84 682.214 L1112.28 682.214 L1111.72 682.214 L1111.16 682.214 L1110.6 682.214 L1110.04 682.214 L1109.49 682.214 L1108.93 682.214 L1108.37 682.214 L1107.81 682.214 L1107.25 682.214 L1106.69 682.214 L1106.13 682.214 L1105.57 682.214 L1105.01 682.214 L1104.45 682.214 L1103.89 682.214 L1103.33 682.214 L1102.77 682.214 L1102.22 682.214 L1101.66 682.214 L1101.1 682.214 L1100.54 682.214 L1099.98 682.214 L1099.42 682.214 L1098.86 682.214 L1098.3 682.214 L1097.74 682.214 L1097.18 682.214 L1096.62 682.214 L1096.06 682.214 L1095.5 682.214 L1094.94 682.214 L1094.39 682.214 L1093.83 682.214 L1093.27 682.214 L1092.71 682.214 L1092.15 682.214 L1091.59 682.214 L1091.03 682.214 L1090.47 682.214 L1089.91 682.214 L1089.35 682.214 L1088.79 682.214 L1088.23 682.214 L1087.67 682.214 L1087.12 682.214 L1086.56 682.214 L1086 682.214 L1085.44 682.214 L1084.88 682.214 L1084.32 682.214 L1083.76 682.214 L1083.2 682.214 L1082.64 682.214 L1082.08 682.214 L1081.52 682.214 L1080.96 682.214 L1080.4 682.214 L1079.85 682.214 L1079.29 682.214 L1078.73 682.214 L1078.17 682.214 L1077.61 682.214 L1077.05 682.214 L1076.49 682.214 L1075.93 682.214 L1075.37 682.214 L1074.81 682.214 L1074.25 682.214 L1073.69 682.214 L1073.13 682.214 L1072.57 682.214 L1072.02 682.214 L1071.46 682.214 L1070.9 682.214 L1070.34 682.214 L1069.78 682.214 L1069.22 682.214 L1068.66 682.214 L1068.1 682.214 L1067.54 682.214 L1066.98 682.214 L1066.42 682.214 L1065.86 682.214 L1065.3 682.214 L1064.75 682.214 L1064.19 682.214 L1063.63 682.214 L1063.07 682.214 L1062.51 682.214 L1061.95 682.214 L1061.39 682.214 L1060.83 682.214 L1060.27 682.214 L1059.71 682.214 L1059.15 682.214 L1058.59 682.214 L1058.03 682.214 L1057.48 682.214 L1056.92 682.214 L1056.36 682.214 L1055.8 682.214 L1055.24 682.214 L1054.68 682.214 L1054.12 682.214 L1053.56 682.214 L1053 682.214 L1052.44 682.214 L1051.88 682.214 L1051.32 682.214 L1050.76 682.214 L1050.2 682.214 L1049.65 682.214 L1049.09 682.214 L1048.53 682.214 L1047.97 682.214 L1047.41 682.214 L1046.85 682.214 L1046.29 682.214 L1045.73 682.214 L1045.17 682.214 L1044.61 682.214 L1044.05 682.214 L1043.49 682.214 L1042.93 682.214 L1042.38 682.214 L1041.82 682.214 L1041.26 682.214 L1040.7 682.214 L1040.14 682.214 L1039.58 682.214 L1039.02 682.214 L1038.46 682.214 L1037.9 682.214 L1037.34 682.214 L1036.78 682.214 L1036.22 682.214 L1035.66 682.214 L1035.1 682.214 L1034.55 682.214 L1033.99 682.214 L1033.43 682.214 L1032.87 682.214 L1032.31 682.214 L1031.75 682.214 L1031.19 682.214 L1030.63 682.214 L1030.07 682.214 L1029.51 682.214 L1028.95 682.214 L1028.39 682.214 L1027.83 682.214 L1027.28 682.214 L1026.72 682.214 L1026.16 682.214 L1025.6 682.214 L1025.04 682.214 L1024.48 682.214 L1023.92 682.214 L1023.36 682.214 L1022.8 682.214 L1022.24 682.214 L1021.68 682.214 L1021.12 682.214 L1020.56 682.214 L1020.01 682.214 L1019.45 682.214 L1018.89 682.214 L1018.33 682.214 L1017.77 682.214 L1017.21 682.214 L1016.65 682.214 L1016.09 682.214 L1015.53 682.214 L1014.97 682.214 L1014.41 682.214 L1013.85 682.214 L1013.29 682.214 L1012.73 682.214 L1012.18 682.214 L1011.62 682.214 L1011.06 682.214 L1010.5 682.214 L1009.94 682.214 L1009.38 682.214 L1008.82 682.214 L1008.26 682.214 L1007.7 682.214 L1007.14 682.214 L1006.58 682.214 L1006.02 682.214 L1005.46 682.214 L1004.91 682.214 L1004.35 682.214 L1003.79 682.214 L1003.23 682.214 L1002.67 682.214 L1002.11 682.214 L1001.55 682.214 L1000.99 682.214 L1000.43 682.214 L999.872 682.214 L999.313 682.214 L998.754 682.214 L998.194 682.214 L997.635 682.214 L997.076 682.214 L996.517 682.214 L995.957 682.214 L995.398 682.214 L994.839 682.214 L994.28 682.214 L993.72 682.214 L993.161 682.214 L992.602 682.214 L992.043 682.214 L991.483 682.214 L990.924 682.214 L990.365 682.214 L989.806 682.214 L989.246 682.214 L988.687 682.214 L988.128 682.214 L987.569 682.214 L987.009 682.214 L986.45 682.214 L985.891 682.214 L985.332 682.214 L984.772 682.214 L984.213 682.214 L983.654 682.214 L983.095 682.214 L982.535 682.214 L981.976 682.214 L981.417 682.214 L980.858 682.214 L980.298 682.214 L979.739 682.214 L979.18 682.214 L978.621 682.214 L978.061 682.214 L977.502 682.214 L976.943 682.214 L976.384 682.214 L975.824 682.214 L975.265 682.214 L974.706 682.214 L974.147 682.214 L973.587 682.214 L973.028 682.214 L972.469 682.214 L971.91 682.214 L971.35 682.214 L970.791 682.214 L970.232 682.214 L969.673 682.214 L969.113 682.214 L968.554 682.214 L967.995 682.214 L967.436 682.214 L966.876 682.214 L966.317 682.214 L965.758 682.214 L965.199 682.214 L964.639 682.214 L964.08 682.214 L963.521 682.214 L962.962 682.214 L962.402 682.214 L961.843 682.214 L961.284 682.214 L960.725 682.214 L960.165 682.214 L959.606 682.214 L959.047 682.214 L958.488 682.214 L957.928 682.214 L957.369 682.214 L956.81 682.214 L956.251 682.214 L955.691 682.214 L955.132 682.214 L954.573 682.214 L954.014 682.214 L953.454 682.214 L952.895 682.214 L952.336 682.214 L951.777 682.214 L951.217 682.214 L950.658 682.214 L950.099 682.214 L949.54 682.214 L948.98 682.214 L948.421 682.214 L947.862 682.214 L947.303 682.214 L946.743 682.214 L946.184 682.214 L945.625 682.214 L945.066 682.214 L944.506 682.214 L943.947 682.214 L943.388 682.214 L942.829 682.214 L942.269 682.214 L941.71 682.214 L941.151 682.214 L940.592 682.214 L940.032 682.214 L939.473 682.214 L938.914 682.214 L938.355 682.214 L937.795 682.214 L937.236 682.214 L936.677 682.214 L936.118 682.214 L935.558 682.214 L934.999 682.214 L934.44 682.214 L933.881 682.214 L933.321 682.214 L932.762 682.214 L932.203 682.214 L931.644 682.214 L931.084 682.214 L930.525 682.214 L929.966 682.214 L929.406 682.214 L928.847 682.214 L928.288 682.214 L927.729 682.214 L927.169 682.214 L926.61 682.214 L926.051 682.214 L925.492 682.214 L924.932 682.214 L924.373 682.214 L923.814 682.214 L923.255 682.214 L922.695 682.214 L922.136 682.214 L921.577 682.214 L921.018 682.214 L920.458 682.214 L919.899 682.214 L919.34 682.214 L918.781 682.214 L918.221 682.214 L917.662 682.214 L917.103 682.214 L916.544 682.214 L915.984 682.214 L915.425 682.214 L914.866 682.214 L914.307 682.214 L913.747 682.214 L913.188 682.214 L912.629 682.214 L912.07 682.214 L911.51 682.214 L910.951 682.214 L910.392 682.214 L909.833 682.214 L909.273 682.214 L908.714 682.214 L908.155 682.214 L907.596 682.214 L907.036 682.214 L906.477 682.214 L905.918 682.214 L905.359 682.214 L904.799 682.214 L904.24 682.214 L903.681 682.214 L903.122 682.214 L902.562 682.214 L902.003 682.214 L901.444 682.214 L900.885 682.214 L900.325 682.214 L899.766 682.214 L899.207 682.214 L898.648 682.214 L898.088 682.214 L897.529 682.214 L896.97 682.214 L896.411 682.214 L895.851 682.214 L895.292 682.214 L894.733 682.214 L894.174 682.214 L893.614 682.214 L893.055 682.214 L892.496 682.214 L891.937 682.214 L891.377 682.214 L890.818 682.214 L890.259 682.214 L889.7 682.214 L889.14 682.214 L888.581 682.214 L888.022 682.214 L887.463 682.214 L886.903 682.214 L886.344 682.214 L885.785 682.214 L885.226 682.214 L884.666 682.214 L884.107 682.214 L883.548 682.214 L882.989 682.214 L882.429 682.214 L881.87 682.214 L881.311 682.214 L880.752 682.214 L880.192 682.214 L879.633 682.214 L879.074 682.214 L878.515 682.214 L877.955 682.214 L877.396 682.214 L876.837 682.214 L876.278 682.214 L875.718 682.214 L875.159 682.214 L874.6 682.214 L874.041 682.214 L873.481 682.214 L872.922 682.214 L872.363 682.214 L871.804 682.214 L871.244 682.214 L870.685 682.214 L870.126 682.214 L869.567 682.214 L869.007 682.214 L868.448 682.214 L867.889 682.214 L867.33 682.214 L866.77 682.214 L866.211 682.214 L865.652 682.214 L865.093 682.214 L864.533 682.214 L863.974 682.214 L863.415 682.214 L862.856 682.214 L862.296 682.214 L861.737 682.214 L861.178 682.214 L860.619 682.214 L860.059 682.214 L859.5 682.214 L858.941 682.214 L858.382 682.214 L857.822 682.214 L857.263 682.214 L856.704 682.214 L856.145 682.214 L855.585 682.214 L855.026 682.214 L854.467 682.214 L853.908 682.214 L853.348 682.214 L852.789 682.214 L852.23 682.214 L851.671 682.214 L851.111 682.214 L850.552 682.214 L849.993 682.214 L849.434 682.214 L848.874 682.214 L848.315 682.214 L847.756 682.214 L847.197 682.214 L846.637 682.214 L846.078 682.214 L845.519 682.214 L844.96 682.214 L844.4 682.214 L843.841 682.214 L843.282 682.214 L842.723 682.214 L842.163 682.214 L841.604 682.214 L841.045 682.214 L840.486 682.214 L839.926 682.214 L839.367 682.214 L838.808 682.214 L838.249 682.214 L837.689 682.214 L837.13 682.214 L836.571 682.214 L836.012 682.214 L835.452 682.214 L834.893 682.214 L834.334 682.214 L833.775 682.214 L833.215 682.214 L832.656 682.214 L832.097 682.214 L831.538 682.214 L830.978 682.214 L830.419 682.214 L829.86 682.214 L829.301 682.214 L828.741 682.214 L828.182 682.214 L827.623 682.214 L827.064 682.214 L826.504 682.214 L825.945 682.214 L825.386 682.214 L824.827 682.214 L824.267 682.214 L823.708 682.214 L823.149 682.214 L822.59 682.214 L822.03 682.214 L821.471 682.214 L820.912 682.214 L820.353 682.214 L819.793 682.214 L819.234 682.214 L818.675 682.214 L818.116 682.214 L817.556 682.214 L816.997 682.214 L816.438 682.214 L815.879 682.214 L815.319 682.214 L814.76 682.214 L814.201 682.214 L813.642 682.214 L813.082 682.214 L812.523 682.214 L811.964 682.214 L811.405 682.214 L810.845 682.214 L810.286 682.214 L809.727 682.214 L809.168 682.214 L808.608 682.214 L808.049 682.214 L807.49 682.214 L806.931 682.214 L806.371 682.214 L805.812 682.214 L805.253 682.214 L804.693 682.214 L804.134 682.214 L803.575 682.214 L803.016 682.214 L802.456 682.214 L801.897 682.214 L801.338 682.214 L800.779 682.214 L800.219 682.214 L799.66 682.214 L799.101 682.214 L798.542 682.214 L797.982 682.214 L797.423 682.214 L796.864 682.214 L796.305 682.214 L795.745 682.214 L795.186 682.214 L794.627 682.214 L794.068 682.214 L793.508 682.214 L792.949 682.214 L792.39 682.214 L791.831 682.214 L791.271 682.214 L790.712 682.214 L790.153 682.214 L789.594 682.214 L789.034 682.214 L788.475 682.214 L787.916 682.214 L787.357 682.214 L786.797 682.214 L786.238 682.214 L785.679 682.214 L785.12 682.214 L784.56 682.214 L784.001 682.214 L783.442 682.214 L782.883 682.214 L782.323 682.214 L781.764 682.214 L781.205 682.214 L780.646 682.214 L780.086 682.214 L779.527 682.214 L778.968 682.214 L778.409 682.214 L777.849 682.214 L777.29 682.214 L776.731 682.214 L776.172 682.214 L775.612 682.214 L775.053 682.214 L774.494 682.214 L773.935 682.214 L773.375 682.214 L772.816 682.214 L772.257 682.214 L771.698 682.214 L771.138 682.214 L770.579 682.214 L770.02 682.214 L769.461 682.214 L768.901 682.214 L768.342 682.214 L767.783 682.214 L767.224 682.214 L766.664 682.214 L766.105 682.214 L765.546 682.214 L764.987 682.214 L764.427 682.214 L763.868 682.214 L763.309 682.214 L762.75 682.214 L762.19 682.214 L761.631 682.214 L761.072 682.214 L760.513 682.214 L759.953 682.214 L759.394 682.214 L758.835 682.214 L758.276 682.214 L757.716 682.214 L757.157 682.214 L756.598 682.214 L756.039 682.214 L755.479 682.214 L754.92 682.214 L754.361 682.214 L753.802 682.214 L753.242 682.214 L752.683 682.214 L752.124 682.214 L751.565 682.214 L751.005 682.214 L750.446 682.214 L749.887 682.214 L749.328 682.214 L748.768 682.214 L748.209 682.214 L747.65 682.214 L747.091 682.214 L746.531 682.214 L745.972 682.214 L745.413 682.214 L744.854 682.214 L744.294 682.214 L743.735 682.214 L743.176 682.214 L742.617 682.214 L742.057 682.214 L741.498 682.214 L740.939 682.214 L740.38 682.214 L739.82 682.214 L739.261 682.214 L738.702 682.214 L738.143 682.214 L737.583 682.214 L737.024 682.214 L736.465 682.214 L735.906 682.214 L735.346 682.214 L734.787 682.214 L734.228 682.214 L733.669 682.214 L733.109 682.214 L732.55 682.214 L731.991 682.214 L731.432 682.214 L730.872 682.214 L730.313 682.214 L729.754 682.214 L729.195 682.214 L728.635 682.214 L728.076 682.214 L727.517 682.214 L726.958 682.214 L726.398 682.214 L725.839 682.214 L725.28 682.214 L724.721 682.214 L724.161 682.214 L723.602 682.214 L723.043 682.214 L722.484 682.214 L721.924 682.214 L721.365 682.214 L720.806 682.214 L720.247 682.214  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.083 720.806,683.083 721.365,683.083 721.924,683.083 722.484,683.083 723.043,683.083 723.602,683.083 724.161,683.083 724.721,683.083 725.28,683.083 725.839,683.083 726.398,683.083 726.958,683.083 727.517,683.083 728.076,683.083 728.635,683.083 729.195,683.083 729.754,683.083 730.313,683.083 730.872,683.083 731.432,683.083 731.991,683.083 732.55,683.083 733.109,683.083 733.669,683.083 734.228,683.083 734.787,683.083 735.346,683.083 735.906,683.083 736.465,683.083 737.024,683.083 737.583,683.083 738.143,683.083 738.702,683.083 739.261,683.083 739.82,683.083 740.38,683.083 740.939,683.083 741.498,683.083 742.057,683.083 742.617,683.083 743.176,683.083 743.735,683.083 744.294,683.083 744.854,683.083 745.413,683.083 745.972,683.083 746.531,683.083 747.091,683.083 747.65,683.083 748.209,683.083 748.768,683.083 749.328,683.083 749.887,683.083 750.446,683.083 751.005,683.083 751.565,683.083 752.124,683.083 752.683,683.083 753.242,683.083 753.802,683.083 754.361,683.083 754.92,683.083 755.479,683.083 756.039,683.083 756.598,683.083 757.157,683.083 757.716,683.083 758.276,683.083 758.835,683.083 759.394,683.083 759.953,683.083 760.513,683.083 761.072,683.083 761.631,683.083 762.19,683.083 762.75,683.083 763.309,683.083 763.868,683.083 764.427,683.083 764.987,683.083 765.546,683.083 766.105,683.083 766.664,683.083 767.224,683.083 767.783,683.083 768.342,683.083 768.901,683.083 769.461,683.083 770.02,683.083 770.579,683.083 771.138,683.083 771.698,683.083 772.257,683.083 772.816,683.083 773.375,683.083 773.935,683.083 774.494,683.083 775.053,683.083 775.612,683.083 776.172,683.083 776.731,683.083 777.29,683.083 777.849,683.083 778.409,683.083 778.968,683.083 779.527,683.083 780.086,683.083 780.646,683.083 781.205,683.083 781.764,683.083 782.323,683.083 782.883,683.083 783.442,683.083 784.001,683.083 784.56,683.083 785.12,683.083 785.679,683.083 786.238,683.083 786.797,683.083 787.357,683.083 787.916,683.083 788.475,683.083 789.034,683.083 789.594,683.083 790.153,683.083 790.712,683.083 791.271,683.083 791.831,683.083 792.39,683.083 792.949,683.083 793.508,683.083 794.068,683.083 794.627,683.083 795.186,683.083 795.745,683.083 796.305,683.083 796.864,683.083 797.423,683.083 797.982,683.083 798.542,683.083 799.101,683.083 799.66,683.083 800.219,683.083 800.779,683.083 801.338,683.083 801.897,683.083 802.456,683.083 803.016,683.083 803.575,683.083 804.134,683.083 804.693,683.083 805.253,683.083 805.812,683.083 806.371,683.083 806.931,683.083 807.49,683.083 808.049,683.083 808.608,683.083 809.168,683.083 809.727,683.083 810.286,683.083 810.845,683.083 811.405,683.083 811.964,683.083 812.523,683.083 813.082,683.083 813.642,683.083 814.201,683.083 814.76,683.083 815.319,683.083 815.879,683.083 816.438,683.083 816.997,683.083 817.556,683.083 818.116,683.083 818.675,683.083 819.234,683.083 819.793,683.083 820.353,683.083 820.912,683.083 821.471,683.083 822.03,683.083 822.59,683.083 823.149,683.083 823.708,683.083 824.267,683.083 824.827,683.083 825.386,683.083 825.945,683.083 826.504,683.083 827.064,683.083 827.623,683.083 828.182,683.083 828.741,683.083 829.301,683.083 829.86,683.083 830.419,683.083 830.978,683.083 831.538,683.083 832.097,683.083 832.656,683.083 833.215,683.083 833.775,683.083 834.334,683.083 834.893,683.083 835.452,683.083 836.012,683.083 836.571,683.083 837.13,683.083 837.689,683.083 838.249,683.083 838.808,683.083 839.367,683.083 839.926,683.083 840.486,683.083 841.045,683.083 841.604,683.083 842.163,683.083 842.723,683.083 843.282,683.083 843.841,683.083 844.4,683.083 844.96,683.083 845.519,683.083 846.078,683.083 846.637,683.083 847.197,683.083 847.756,683.083 848.315,683.083 848.874,683.083 849.434,683.083 849.993,683.083 850.552,683.083 851.111,683.083 851.671,683.083 852.23,683.083 852.789,683.083 853.348,683.083 853.908,683.083 854.467,683.083 855.026,683.083 855.585,683.083 856.145,683.083 856.704,683.083 857.263,683.083 857.822,683.083 858.382,683.083 858.941,683.083 859.5,683.083 860.059,683.083 860.619,683.083 861.178,683.083 861.737,683.083 862.296,683.083 862.856,683.083 863.415,683.083 863.974,683.083 864.533,683.083 865.093,683.083 865.652,683.083 866.211,683.083 866.77,683.083 867.33,683.083 867.889,683.083 868.448,683.083 869.007,683.083 869.567,683.083 870.126,683.083 870.685,683.083 871.244,683.083 871.804,683.083 872.363,683.083 872.922,683.083 873.481,683.083 874.041,683.083 874.6,683.083 875.159,683.083 875.718,683.083 876.278,683.083 876.837,683.083 877.396,683.083 877.955,683.083 878.515,683.083 879.074,683.083 879.633,683.083 880.192,683.083 880.752,683.083 881.311,683.083 881.87,683.083 882.429,683.083 882.989,683.083 883.548,683.083 884.107,683.083 884.666,683.083 885.226,683.083 885.785,683.083 886.344,683.083 886.903,683.083 887.463,683.083 888.022,683.083 888.581,683.083 889.14,683.083 889.7,683.083 890.259,683.083 890.818,683.083 891.377,683.083 891.937,683.083 892.496,683.083 893.055,683.083 893.614,683.083 894.174,683.083 894.733,683.083 895.292,683.083 895.851,683.083 896.411,683.083 896.97,683.083 897.529,683.083 898.088,683.083 898.648,683.083 899.207,683.083 899.766,683.083 900.325,683.083 900.885,683.083 901.444,683.083 902.003,683.083 902.562,683.083 903.122,683.083 903.681,683.083 904.24,683.083 904.799,683.083 905.359,683.083 905.918,683.083 906.477,683.083 907.036,683.083 907.596,683.083 908.155,683.083 908.714,683.083 909.273,683.083 909.833,683.083 910.392,683.083 910.951,683.083 911.51,683.083 912.07,683.083 912.629,683.083 913.188,683.083 913.747,683.083 914.307,683.083 914.866,683.083 915.425,683.083 915.984,683.083 916.544,683.083 917.103,683.083 917.662,683.083 918.221,683.083 918.781,683.083 919.34,683.083 919.899,683.083 920.458,683.083 921.018,683.083 921.577,683.083 922.136,683.083 922.695,683.083 923.255,683.083 923.814,683.083 924.373,683.083 924.932,683.083 925.492,683.083 926.051,683.083 926.61,683.083 927.169,683.083 927.729,683.083 928.288,683.083 928.847,683.083 929.406,683.083 929.966,683.083 930.525,683.083 931.084,683.083 931.644,683.083 932.203,683.083 932.762,683.083 933.321,683.083 933.881,683.083 934.44,683.083 934.999,683.083 935.558,683.083 936.118,683.083 936.677,683.083 937.236,683.083 937.795,683.083 938.355,683.083 938.914,683.083 939.473,683.083 940.032,683.083 940.592,683.083 941.151,683.083 941.71,683.083 942.269,683.083 942.829,683.083 943.388,683.083 943.947,683.083 944.506,683.083 945.066,683.083 945.625,683.083 946.184,683.083 946.743,683.083 947.303,683.083 947.862,683.083 948.421,683.083 948.98,683.083 949.54,683.083 950.099,683.083 950.658,683.083 951.217,683.083 951.777,683.083 952.336,683.083 952.895,683.083 953.454,683.083 954.014,683.083 954.573,683.083 955.132,683.083 955.691,683.083 956.251,683.083 956.81,683.083 957.369,683.083 957.928,683.083 958.488,683.083 959.047,683.083 959.606,683.083 960.165,683.083 960.725,683.083 961.284,683.083 961.843,683.083 962.402,683.083 962.962,683.083 963.521,683.083 964.08,683.083 964.639,683.083 965.199,683.083 965.758,683.083 966.317,683.083 966.876,683.083 967.436,683.083 967.995,683.083 968.554,683.083 969.113,683.083 969.673,683.083 970.232,683.083 970.791,683.083 971.35,683.083 971.91,683.083 972.469,683.083 973.028,683.083 973.587,683.083 974.147,683.083 974.706,683.083 975.265,683.083 975.824,683.083 976.384,683.083 976.943,683.083 977.502,683.083 978.061,683.083 978.621,683.083 979.18,683.083 979.739,683.083 980.298,683.083 980.858,683.083 981.417,683.083 981.976,683.083 982.535,683.083 983.095,683.083 983.654,683.083 984.213,683.083 984.772,683.083 985.332,683.083 985.891,683.083 986.45,683.083 987.009,683.083 987.569,683.083 988.128,683.083 988.687,683.083 989.246,683.083 989.806,683.083 990.365,683.083 990.924,683.083 991.483,683.083 992.043,683.083 992.602,683.083 993.161,683.083 993.72,683.083 994.28,683.083 994.839,683.083 995.398,683.083 995.957,683.083 996.517,683.083 997.076,683.083 997.635,683.083 998.194,683.083 998.754,683.083 999.313,683.083 999.872,683.083 1000.43,683.083 1000.99,683.083 1001.55,683.083 1002.11,683.083 1002.67,683.083 1003.23,683.083 1003.79,683.083 1004.35,683.083 1004.91,683.083 1005.46,683.083 1006.02,683.083 1006.58,683.083 1007.14,683.083 1007.7,683.083 1008.26,683.083 1008.82,683.083 1009.38,683.083 1009.94,683.083 1010.5,683.083 1011.06,683.083 1011.62,683.083 1012.18,683.083 1012.73,683.083 1013.29,683.083 1013.85,683.083 1014.41,683.083 1014.97,683.083 1015.53,683.083 1016.09,683.083 1016.65,683.083 1017.21,683.083 1017.77,683.083 1018.33,683.083 1018.89,683.083 1019.45,683.083 1020.01,683.083 1020.56,683.083 1021.12,683.083 1021.68,683.083 1022.24,683.083 1022.8,683.083 1023.36,683.083 1023.92,683.083 1024.48,683.083 1025.04,683.083 1025.6,683.083 1026.16,683.083 1026.72,683.083 1027.28,683.083 1027.83,683.083 1028.39,683.083 1028.95,683.083 1029.51,683.083 1030.07,683.083 1030.63,683.083 1031.19,683.083 1031.75,683.083 1032.31,683.083 1032.87,683.083 1033.43,683.083 1033.99,683.083 1034.55,683.083 1035.1,683.083 1035.66,683.083 1036.22,683.083 1036.78,683.083 1037.34,683.083 1037.9,683.083 1038.46,683.083 1039.02,683.083 1039.58,683.083 1040.14,683.083 1040.7,683.083 1041.26,683.083 1041.82,683.083 1042.38,683.083 1042.93,683.083 1043.49,683.083 1044.05,683.083 1044.61,683.083 1045.17,683.083 1045.73,683.083 1046.29,683.083 1046.85,683.083 1047.41,683.083 1047.97,683.083 1048.53,683.083 1049.09,683.083 1049.65,683.083 1050.2,683.083 1050.76,683.083 1051.32,683.083 1051.88,683.083 1052.44,683.083 1053,683.083 1053.56,683.083 1054.12,683.083 1054.68,683.083 1055.24,683.083 1055.8,683.083 1056.36,683.083 1056.92,683.083 1057.48,683.083 1058.03,683.083 1058.59,683.083 1059.15,683.083 1059.71,683.083 1060.27,683.083 1060.83,683.083 1061.39,683.083 1061.95,683.083 1062.51,683.083 1063.07,683.083 1063.63,683.083 1064.19,683.083 1064.75,683.083 1065.3,683.083 1065.86,683.083 1066.42,683.083 1066.98,683.083 1067.54,683.083 1068.1,683.083 1068.66,683.083 1069.22,683.083 1069.78,683.083 1070.34,683.083 1070.9,683.083 1071.46,683.083 1072.02,683.083 1072.57,683.083 1073.13,683.083 1073.69,683.083 1074.25,683.083 1074.81,683.083 1075.37,683.083 1075.93,683.083 1076.49,683.083 1077.05,683.083 1077.61,683.083 1078.17,683.083 1078.73,683.083 1079.29,683.083 1079.85,683.083 1080.4,683.083 1080.96,683.083 1081.52,683.083 1082.08,683.083 1082.64,683.083 1083.2,683.083 1083.76,683.083 1084.32,683.083 1084.88,683.083 1085.44,683.083 1086,683.083 1086.56,683.083 1087.12,683.083 1087.67,683.083 1088.23,683.083 1088.79,683.083 1089.35,683.083 1089.91,683.083 1090.47,683.083 1091.03,683.083 1091.59,683.083 1092.15,683.083 1092.71,683.083 1093.27,683.083 1093.83,683.083 1094.39,683.083 1094.94,683.083 1095.5,683.083 1096.06,683.083 1096.62,683.083 1097.18,683.083 1097.74,683.083 1098.3,683.083 1098.86,683.083 1099.42,683.083 1099.98,683.083 1100.54,683.083 1101.1,683.083 1101.66,683.083 1102.22,683.083 1102.77,683.083 1103.33,683.083 1103.89,683.083 1104.45,683.083 1105.01,683.083 1105.57,683.083 1106.13,683.083 1106.69,683.083 1107.25,683.083 1107.81,683.083 1108.37,683.083 1108.93,683.083 1109.49,683.083 1110.04,683.083 1110.6,683.083 1111.16,683.083 1111.72,683.083 1112.28,683.083 1112.84,683.083 1113.4,683.083 1113.96,683.083 1114.52,683.083 1115.08,683.083 1115.64,683.083 1116.2,683.083 1116.76,683.083 1117.31,683.083 1117.87,683.083 1118.43,683.083 1118.99,683.083 1119.55,683.083 1120.11,683.083 1120.67,683.083 1121.23,683.083 1121.79,683.083 1122.35,683.083 1122.91,683.083 1123.47,683.083 1124.03,683.083 1124.59,683.083 1125.14,683.083 1125.7,683.083 1126.26,683.083 1126.82,683.083 1127.38,683.083 1127.94,683.083 1128.5,683.083 1129.06,683.083 1129.62,683.083 1130.18,683.083 1130.74,683.083 1131.3,683.083 1131.86,683.083 1132.41,683.083 1132.97,683.083 1133.53,683.083 1134.09,683.083 1134.65,683.083 1135.21,683.083 1135.77,683.083 1136.33,683.083 1136.89,683.083 1137.45,683.083 1138.01,683.083 1138.57,683.083 1139.13,683.083 1139.68,683.083 1140.24,683.083 1140.8,683.083 1141.36,683.083 1141.92,683.083 1142.48,683.083 1143.04,683.083 1143.6,683.083 1144.16,683.083 1144.72,683.083 1145.28,683.083 1145.84,683.083 1146.4,683.083 1146.96,683.083 1147.51,683.083 1148.07,683.083 1148.63,683.083 1149.19,683.083 1149.75,683.083 1150.31,683.083 1150.87,683.083 1151.43,683.083 1151.99,683.083 1152.55,683.083 1153.11,683.083 1153.67,683.083 1154.23,683.083 1154.78,683.083 1155.34,683.083 1155.9,683.083 1156.46,683.083 1157.02,683.083 1157.58,683.083 1158.14,683.083 1158.7,683.083 1159.26,683.083 1159.82,683.083 1160.38,683.083 1160.94,683.083 1161.5,683.083 1162.05,683.083 1162.61,683.083 1163.17,683.083 1163.73,683.083 1164.29,683.083 1164.85,683.083 1165.41,683.083 1165.97,683.083 1166.53,683.083 1167.09,683.083 1167.65,683.083 1168.21,683.083 1168.77,683.083 1169.33,683.083 1169.88,683.083 1170.44,683.083 1171,683.083 1171.56,683.083 1172.12,683.083 1172.68,683.083 1173.24,683.083 1173.8,683.083 1174.36,683.083 1174.92,683.083 1175.48,683.083 1176.04,683.083 1176.6,683.083 1177.15,683.083 1177.71,683.083 1178.27,683.083 1178.83,683.083 1179.39,683.083 1179.95,683.083 1180.51,683.083 1181.07,683.083 1181.63,683.083 1182.19,683.083 1182.75,683.083 1183.31,683.083 1183.87,683.083 1184.43,683.083 1184.98,683.083 1185.54,683.083 1186.1,683.083 1186.66,683.083 1187.22,683.083 1187.78,683.083 1188.34,683.083 1188.9,683.083 1189.46,683.083 1190.02,683.083 1190.58,683.083 1191.14,683.083 1191.7,683.083 1192.25,683.083 1192.81,683.083 1193.37,683.083 1193.93,683.083 1194.49,683.083 1195.05,683.083 1195.61,683.083 1196.17,683.083 1196.73,683.083 1197.29,683.083 1197.85,683.083 1198.41,683.083 1198.97,683.083 1199.52,683.083 1200.08,683.083 1200.64,683.083 1201.2,683.083 1201.76,683.083 1202.32,683.083 1202.88,683.083 1203.44,683.083 1204,683.083 1204.56,683.083 1205.12,683.083 1205.68,683.083 1206.24,683.083 1206.8,683.083 1207.35,683.083 1207.91,683.083 1208.47,683.083 1209.03,683.083 1209.59,683.083 1210.15,683.083 1210.71,683.083 1211.27,683.083 1211.83,683.083 1212.39,683.083 1212.95,683.083 1213.51,683.083 1214.07,683.083 1214.62,683.083 1215.18,683.083 1215.74,683.083 1216.3,683.083 1216.86,683.083 1217.42,683.083 1217.98,683.083 1218.54,683.083 1219.1,683.083 1219.66,683.083 1220.22,683.083 1220.78,683.083 1221.34,683.083 1221.89,683.083 1222.45,683.083 1223.01,683.083 1223.57,683.083 1224.13,683.083 1224.69,683.083 1225.25,683.083 1225.81,683.083 1226.37,683.083 1226.93,683.083 1227.49,683.083 1228.05,683.083 1228.61,683.083 1229.17,683.083 1229.72,683.083 1230.28,683.083 1230.84,683.083 1231.4,683.083 1231.96,683.083 1232.52,683.083 1233.08,683.083 1233.64,683.083 1234.2,683.083 1234.76,683.083 1235.32,683.083 1235.88,683.083 1236.44,683.083 1236.99,683.083 1237.55,683.083 1238.11,683.083 1238.67,683.083 1239.23,683.083 1239.79,683.083 1240.35,683.083 1240.91,683.083 1241.47,683.083 1242.03,683.083 1242.59,683.083 1243.15,683.083 1243.71,683.083 1244.26,683.083 1244.82,683.083 1245.38,683.083 1245.94,683.083 1246.5,683.083 1247.06,683.083 1247.62,683.083 1248.18,683.083 1248.74,683.083 1249.3,683.083 1249.86,683.083 1250.42,683.083 1250.98,683.083 1251.54,683.083 1252.09,683.083 1252.65,683.083 1253.21,683.083 1253.77,683.083 1254.33,683.083 1254.89,683.083 1255.45,683.083 1256.01,683.083 1256.57,683.083 1257.13,683.083 1257.69,683.083 1258.25,683.083 1258.81,683.083 1259.36,683.083 1259.92,683.083 1260.48,683.083 1261.04,683.083 1261.6,683.083 1262.16,683.083 1262.72,683.083 1263.28,683.083 1263.84,683.083 1264.4,683.083 1264.96,683.083 1265.52,683.083 1266.08,683.083 1266.63,683.083 1267.19,683.083 1267.75,683.083 1268.31,683.083 1268.87,683.083 1269.43,683.083 1269.99,683.083 1270.55,683.083 1271.11,683.083 1271.67,683.083 1272.23,683.083 1272.79,683.083 1273.35,683.083 1273.91,683.083 1274.46,683.083 1275.02,683.083 1275.58,683.083 1276.14,683.083 1276.7,683.083 1277.26,683.083 1277.82,683.083 1278.38,683.083 1278.94,683.083 1279.5,683.083 1280.06,683.083 1280.62,683.083 1281.18,683.083 1281.73,683.083 1282.29,683.083 1282.85,683.083 1283.41,683.083 1283.97,683.083 1284.53,683.083 1285.09,683.083 1285.65,683.083 1286.21,683.083 1286.77,683.083 1287.33,683.083 1287.89,683.083 1288.45,683.083 1289,683.083 1289.56,683.083 1290.12,683.083 1290.68,683.083 1291.24,683.083 1291.8,683.083 1292.36,683.083 1292.92,683.083 1293.48,683.083 1294.04,683.083 1294.6,683.083 1295.16,683.083 1295.72,683.083 1296.28,683.083 1296.83,683.083 1297.39,683.083 1297.95,683.083 1298.51,683.083 1299.07,683.083 1299.63,683.083 1300.19,683.083 1300.75,683.083 1301.31,683.083 1301.87,683.083 1302.43,683.083 1302.99,683.083 1303.55,683.083 1304.1,683.083 1304.66,683.083 1305.22,683.083 1305.78,683.083 1306.34,683.083 1306.9,683.083 1307.46,683.083 1308.02,683.083 1308.58,683.083 1309.14,683.083 1309.7,683.083 1310.26,683.083 1310.82,683.083 1311.38,683.083 1311.93,683.083 1312.49,683.083 1313.05,683.083 1313.61,683.083 1314.17,683.083 1314.73,683.083 1315.29,683.083 1315.85,683.083 1316.41,683.083 1316.97,683.083 1317.53,683.083 1318.09,683.083 1318.65,683.083 1319.2,683.083 1319.76,683.083 1320.32,683.083 1320.88,683.083 1321.44,683.083 1322,683.083 1322.56,683.083 1323.12,683.083 1323.68,683.083 1324.24,683.083 1324.8,683.083 1325.36,683.083 1325.92,683.083 1326.47,683.083 1327.03,683.083 1327.59,683.083 1328.15,683.083 1328.71,683.083 1329.27,683.083 1329.83,683.083 1330.39,683.083 1330.95,683.083 1331.51,683.083 1332.07,683.083 1332.63,683.083 1333.19,683.083 1333.75,683.083 1334.3,683.083 1334.86,683.083 1335.42,683.083 1335.98,683.083 1336.54,683.083 1337.1,683.083 1337.66,683.083 1338.22,683.083 1338.78,683.083 1339.34,683.083 1339.9,683.083 1340.46,683.083 1341.02,683.083 1341.57,683.083 1342.13,683.083 1342.69,683.083 1343.25,683.083 1343.81,683.083 1344.37,683.083 1344.93,683.083 1345.49,683.083 1346.05,683.083 1346.61,683.083 1347.17,683.083 1347.73,683.083 1348.29,683.083 1348.84,683.083 1349.4,683.083 1349.96,683.083 1350.52,683.083 1351.08,683.083 1351.64,683.083 1352.2,683.083 1352.76,683.083 1353.32,683.083 1353.88,683.083 1354.44,683.083 1355,683.083 1355.56,683.083 1356.12,683.083 1356.67,683.083 1357.23,683.083 1357.79,683.083 1358.35,683.083 1358.91,683.083 1359.47,683.083 1360.03,683.083 1360.59,683.083 1361.15,683.083 1361.71,683.083 1362.27,683.083 1362.83,683.083 1363.39,683.083 1363.94,683.083 1364.5,683.083 1365.06,683.083 1365.62,683.083 1366.18,683.083 1366.74,683.083 1367.3,683.083 1367.86,683.083 1368.42,683.083 1368.98,683.083 1369.54,683.083 1370.1,683.083 1370.66,683.083 1371.21,683.083 1371.77,683.083 1372.33,683.083 1372.89,683.083 1373.45,683.083 1374.01,683.083 1374.57,683.083 1375.13,683.083 1375.69,683.083 1376.25,683.083 1376.81,683.083 1377.37,683.083 1377.93,683.083 1378.49,683.083 1379.04,683.083 1379.6,683.083 1380.16,683.083 1380.72,683.083 1381.28,683.083 1381.84,683.083 1382.4,683.083 1382.96,683.083 1383.52,683.083 1384.08,683.083 1384.64,683.083 1385.2,683.083 1385.76,683.083 1386.31,683.083 1386.87,683.083 1387.43,683.083 1387.99,683.083 1388.55,683.083 1389.11,683.083 1389.67,683.083 1390.23,683.083 1390.79,683.083 1391.35,683.083 1391.91,683.083 1392.47,683.083 1393.03,683.083 1393.58,683.083 1394.14,683.083 1394.7,683.083 1395.26,683.083 1395.82,683.083 1396.38,683.083 1396.94,683.083 1397.5,683.083 1398.06,683.083 1398.62,683.083 1399.18,683.083 1399.74,683.083 1400.3,683.083 1400.86,683.083 1401.41,683.083 1401.97,683.083 1402.53,683.083 1403.09,683.083 1403.65,683.083 1404.21,683.083 1404.77,683.083 1405.33,683.083 1405.89,683.083 1406.45,683.083 1407.01,683.083 1407.57,683.083 1408.13,683.083 1408.68,683.083 1409.24,683.083 1409.8,683.083 1410.36,683.083 1410.92,683.083 1411.48,683.083 1412.04,683.083 1412.6,683.083 1413.16,683.083 1413.72,683.083 1414.28,683.083 1414.84,683.083 1415.4,683.083 1415.95,683.083 1416.51,683.083 1417.07,683.083 1417.63,683.083 1418.19,683.083 1418.75,683.083 1419.31,683.083 1419.87,683.083 1420.43,683.083 1420.99,683.083 1421.55,683.083 1422.11,683.083 1422.67,683.083 1423.23,683.083 1423.78,683.083 1424.34,683.083 1424.9,683.083 1425.46,683.083 1426.02,683.083 1426.58,683.083 1427.14,683.083 1427.7,683.083 1428.26,683.083 1428.82,683.083 1429.38,683.083 1429.94,683.083 1430.5,683.083 1431.05,683.083 1431.61,683.083 1432.17,683.083 1432.73,683.083 1433.29,683.083 1433.85,683.083 1434.41,683.083 1434.97,683.083 1435.53,683.083 1436.09,683.083 1436.65,683.083 1437.21,683.083 1437.77,683.083 1438.33,683.083 1438.88,683.083 1439.44,683.083 1440,683.083 1440.56,683.083 1441.12,683.083 1441.68,683.083 1442.24,683.083 1442.8,683.083 1443.36,683.083 1443.92,683.083 1444.48,683.083 1445.04,683.083 1445.6,683.083 1446.15,683.083 1446.71,683.083 1447.27,683.083 1447.83,683.083 1448.39,683.083 1448.95,683.083 1449.51,683.083 1450.07,683.083 1450.63,683.083 1451.19,683.083 1451.75,683.083 1452.31,683.083 1452.87,683.083 1453.42,683.083 1453.98,683.083 1454.54,683.083 1455.1,683.083 1455.66,683.083 1456.22,683.083 1456.78,683.083 1457.34,683.083 1457.9,683.083 1458.46,683.083 1459.02,683.083 1459.58,683.083 1460.14,683.083 1460.7,683.083 1461.25,683.083 1461.81,683.083 1462.37,683.083 1462.93,683.083 1463.49,683.083 1464.05,683.083 1464.61,683.083 1465.17,683.083 1465.73,683.083 1466.29,683.083 1466.85,683.083 1467.41,683.083 1467.97,683.083 1468.52,683.083 1469.08,683.083 1469.64,683.083 1470.2,683.083 1470.76,683.083 1471.32,683.083 1471.88,683.083 1472.44,683.083 1473,683.083 1473.56,683.083 1474.12,683.083 1474.68,683.083 1475.24,683.083 1475.79,683.083 1476.35,683.083 1476.91,683.083 1477.47,683.083 1478.03,683.083 1478.59,683.083 1479.15,683.083 1479.71,683.083 1480.27,683.083 1480.83,683.083 1481.39,683.083 1481.95,683.083 1482.51,683.083 1483.07,683.083 1483.62,683.083 1484.18,683.083 1484.74,683.083 1485.3,683.083 1485.86,683.083 1486.42,683.083 1486.98,683.083 1487.54,683.083 1488.1,683.083 1488.66,683.083 1489.22,683.083 1489.78,683.083 1490.34,683.083 1490.89,683.083 1491.45,683.083 1492.01,683.083 1492.57,683.083 1493.13,683.083 1493.69,683.083 1494.25,683.083 1494.81,683.083 1495.37,683.083 1495.93,683.083 1496.49,683.083 1497.05,683.083 1497.61,683.083 1498.16,683.083 1498.72,683.083 1499.28,683.083 1499.84,683.083 1500.4,683.083 1500.96,683.083 1501.52,683.083 1502.08,683.083 1502.64,683.083 1503.2,683.083 1503.76,683.083 1504.32,683.083 1504.88,683.083 1505.44,683.083 1505.99,683.083 1506.55,683.083 1507.11,683.083 1507.67,683.083 1508.23,683.083 1508.79,683.083 1509.35,683.083 1509.91,683.083 1510.47,683.083 1511.03,683.083 1511.59,683.083 1512.15,683.083 1512.71,683.083 1513.26,683.083 1513.82,683.083 1514.38,683.083 1514.94,683.083 1515.5,683.083 1516.06,683.083 1516.62,683.083 1517.18,683.083 1517.74,683.083 1518.3,683.083 1518.86,683.083 1519.42,683.083 1519.98,683.083 1520.53,683.083 1521.09,683.083 1521.65,683.083 1522.21,683.083 1522.77,683.083 1523.33,683.083 1523.89,683.083 1524.45,683.083 1525.01,683.083 1525.57,683.083 1526.13,683.083 1526.69,683.083 1527.25,683.083 1527.81,683.083 1528.36,683.083 1528.92,683.083 1529.48,683.083 1530.04,683.083 1530.6,683.083 1531.16,683.083 1531.72,683.083 1532.28,683.083 1532.84,683.083 1533.4,683.083 1533.96,683.083 1534.52,683.083 1535.08,683.083 1535.63,683.083 1536.19,683.083 1536.75,683.083 1537.31,683.083 1537.87,683.083 1538.43,683.083 1538.99,683.083 1539.55,683.083 1540.11,683.083 1540.67,683.083 1541.23,683.083 1541.79,683.083 1542.35,683.083 1542.9,683.083 1543.46,683.083 1544.02,683.083 1544.58,683.083 1545.14,683.083 1545.7,683.083 1546.26,683.083 1546.82,683.083 1547.38,683.083 1547.94,683.083 1548.5,683.083 1549.06,683.083 1549.62,683.083 1550.18,683.083 1550.73,683.083 1551.29,683.083 1551.85,683.083 1552.41,683.083 1552.97,683.083 1553.53,683.083 1554.09,683.083 1554.65,683.083 1555.21,683.083 1555.77,683.083 1556.33,683.083 1556.89,683.083 1557.45,683.083 1558,683.083 1558.56,683.083 1559.12,683.083 1559.68,683.083 1560.24,683.083 1560.8,683.083 1561.36,683.083 1561.92,683.083 1562.48,683.083 1563.04,683.083 1563.6,683.083 1564.16,683.083 1564.72,683.083 1565.28,683.083 1565.83,683.083 1566.39,683.083 1566.95,683.083 1567.51,683.083 1568.07,683.083 1568.63,683.083 1569.19,683.083 1569.75,683.083 1570.31,683.083 1570.87,683.083 1571.43,683.083 1571.99,683.083 1572.55,683.083 1573.1,683.083 1573.66,683.083 1574.22,683.083 1574.78,683.083 1575.34,683.083 1575.9,683.083 1576.46,683.083 1577.02,683.083 1577.58,683.083 1578.14,683.083 1578.7,683.083 1579.26,683.083 1579.82,683.083 1580.37,683.083 1580.93,683.083 1581.49,683.083 1582.05,683.083 1582.61,683.083 1583.17,683.083 1583.73,683.083 1584.29,683.083 1584.85,683.083 1585.41,683.083 1585.97,683.083 1586.53,683.083 1587.09,683.083 1587.65,683.083 1588.2,683.083 1588.76,683.083 1589.32,683.083 1589.88,683.083 1590.44,683.083 1591,683.083 1591.56,683.083 1592.12,683.083 1592.68,683.083 1593.24,683.083 1593.8,683.083 1594.36,683.083 1594.92,683.083 1595.47,683.083 1596.03,683.083 1596.59,683.083 1597.15,683.083 1597.71,683.083 1598.27,683.083 1598.83,683.083 1599.39,683.083 1599.95,683.083 1600.51,683.083 1601.07,683.083 1601.63,683.083 1602.19,683.083 1602.74,683.083 1603.3,683.083 1603.86,683.083 1604.42,683.083 1604.98,683.083 1605.54,683.083 1606.1,683.083 1606.66,683.083 1607.22,683.083 1607.78,683.083 1608.34,683.083 1608.9,683.083 1609.46,683.083 1610.02,683.083 1610.57,683.083 1611.13,683.083 1611.69,683.083 1612.25,683.083 1612.81,683.083 1613.37,683.083 1613.93,683.083 1614.49,683.083 1615.05,683.083 1615.61,683.083 1616.17,683.083 1616.73,683.083 1617.29,683.083 1617.84,683.083 1618.4,683.083 1618.96,683.083 1619.52,683.083 1620.08,683.083 1620.64,683.083 1621.2,683.083 1621.76,683.083 1622.32,683.083 1622.88,683.083 1623.44,683.083 1624,683.083 1624.56,683.083 1625.11,683.083 1625.67,683.083 1626.23,683.083 1626.79,683.083 1627.35,683.083 1627.91,683.083 1628.47,683.083 1629.03,683.083 1629.59,683.083 1630.15,683.083 1630.71,683.083 1631.27,683.083 1631.83,683.083 1632.39,683.083 1632.94,683.083 1633.5,683.083 1634.06,683.083 1634.62,683.083 1635.18,683.083 1635.74,683.083 1636.3,683.083 1636.86,683.083 1637.42,683.083 1637.98,683.083 1638.54,683.083 1639.1,683.083 1639.66,683.083 1640.21,683.083 1640.77,683.083 1641.33,683.083 1641.89,683.083 1642.45,683.083 1643.01,683.083 1643.57,683.083 1644.13,683.083 1644.69,683.083 1645.25,683.083 1645.81,683.083 1646.37,683.083 1646.93,683.083 1647.48,683.083 1648.04,683.083 1648.6,683.083 1649.16,683.083 1649.72,683.083 1650.28,683.083 1650.84,683.083 1651.4,683.083 1651.96,683.083 1652.52,683.083 1653.08,683.083 1653.64,683.083 1654.2,683.083 1654.76,683.083 1655.31,683.083 1655.87,683.083 1656.43,683.083 1656.99,683.083 1657.55,683.083 1658.11,683.083 1658.67,683.083 1659.23,683.083 1659.79,683.083 1660.35,683.083 1660.91,683.083 1661.47,683.083 1662.03,683.083 1662.58,683.083 1663.14,683.083 1663.7,683.083 1664.26,683.083 1664.82,683.083 1665.38,683.083 1665.94,683.083 1666.5,683.083 1667.06,683.083 1667.62,683.083 1668.18,683.083 1668.74,683.083 1669.3,683.083 1669.85,683.083 1670.41,683.083 1670.97,683.083 1671.53,683.083 1672.09,683.083 1672.65,683.083 1673.21,683.083 1673.77,683.083 1674.33,683.083 1674.89,683.083 1675.45,683.083 1676.01,683.083 1676.57,683.083 1677.13,683.083 1677.68,683.083 1678.24,683.083 1678.8,683.083 1679.36,683.083 1679.92,683.083 1680.48,683.083 1681.04,683.083 1681.6,683.083 1682.16,683.083 1682.72,683.083 1683.28,683.083 1683.84,683.083 1684.4,683.083 1684.95,683.083 1685.51,683.083 1686.07,683.083 1686.63,683.083 1687.19,683.083 1687.75,683.083 1688.31,683.083 1688.87,683.083 1689.43,683.083 1689.99,683.083 1690.55,683.083 1691.11,683.083 1691.67,683.083 1692.23,683.083 1692.78,683.083 1693.34,683.083 1693.9,683.083 1694.46,683.083 1695.02,683.083 1695.58,683.083 1696.14,683.083 1696.7,683.083 1697.26,683.083 1697.82,683.083 1698.38,683.083 1698.94,683.083 1699.5,683.083 1700.05,683.083 1700.61,683.083 1701.17,683.083 1701.73,683.083 1702.29,683.083 1702.85,683.083 1703.41,683.083 1703.97,683.083 1704.53,683.083 1705.09,683.083 1705.65,683.083 1706.21,683.083 1706.77,683.083 1707.32,683.083 1707.88,683.083 1708.44,683.083 1709,683.083 1709.56,683.083 1710.12,683.083 1710.68,683.083 1711.24,683.083 1711.8,683.083 1712.36,683.083 1712.92,683.083 1713.48,683.083 1714.04,683.083 1714.6,683.083 1715.15,683.083 1715.71,683.083 1716.27,683.083 1716.83,683.083 1717.39,683.083 1717.95,683.083 1718.51,683.083 1719.07,683.083 1719.63,683.083 1720.19,683.083 1720.75,683.083 1721.31,683.083 1721.87,683.083 1722.42,683.083 1722.98,683.083 1723.54,683.083 1724.1,683.083 1724.66,683.083 1725.22,683.083 1725.78,683.083 1726.34,683.083 1726.9,683.083 1727.46,683.083 1728.02,683.083 1728.58,683.083 1729.14,683.083 1729.69,683.083 1730.25,683.083 1730.81,683.083 1731.37,683.083 1731.93,683.083 1732.49,683.083 1733.05,683.083 1733.61,683.083 1734.17,683.083 1734.73,683.083 1735.29,683.083 1735.85,683.083 1736.41,683.083 1736.97,683.083 1737.52,683.083 1738.08,683.083 1738.64,683.083 1739.2,683.083 1739.76,683.083 1740.32,683.083 1740.88,683.083 1741.44,683.083 1742,683.083 1742.56,683.083 1743.12,683.083 1743.68,683.083 1744.24,683.083 1744.79,683.083 1745.35,683.083 1745.91,683.083 1746.47,683.083 1747.03,683.083 1747.59,683.083 1748.15,683.083 1748.71,683.083 1749.27,683.083 1749.83,683.083 1750.39,683.083 1750.95,683.083 1751.51,683.083 1752.06,683.083 1752.62,683.083 1753.18,683.083 1753.74,683.083 1754.3,683.083 1754.86,683.083 1755.42,683.083 1755.98,683.083 1756.54,683.083 1757.1,683.083 1757.66,683.083 1758.22,683.083 1758.78,683.083 1759.34,683.083 1759.89,683.083 1760.45,683.083 1761.01,683.083 1761.57,683.083 1762.13,683.083 1762.69,683.083 1763.25,683.083 1763.81,683.083 1764.37,683.083 1764.93,683.083 1765.49,683.083 1766.05,683.083 1766.61,683.083 1767.16,683.083 1767.72,683.083 1768.28,683.083 1768.84,683.083 1769.4,683.083 1769.96,683.083 1770.52,683.083 1771.08,683.083 1771.64,683.083 1772.2,683.083 1772.76,683.083 1773.32,683.083 1773.88,683.083 1774.43,683.083 1774.99,683.083 1775.55,683.083 1776.11,683.083 1776.67,683.083 1777.23,683.083 1777.79,683.083 1778.35,683.083 1778.91,683.083 1779.47,683.083 1780.03,683.083 1780.59,683.083 1781.15,683.083 1781.71,683.083 1782.26,683.083 1782.82,683.083 1783.38,683.083 1783.94,683.083 1784.5,683.083 1785.06,683.083 1785.62,683.083 1786.18,683.083 1786.74,683.083 1787.3,683.083 1787.86,683.083 1788.42,683.083 1788.98,683.083 1789.53,683.083 1790.09,683.083 1790.65,683.083 1791.21,683.083 1791.77,683.083 1792.33,683.083 1792.89,683.083 1793.45,683.083 1794.01,683.083 1794.57,683.083 1795.13,683.083 1795.69,683.083 1796.25,683.083 1796.8,683.083 1797.36,683.083 1797.92,683.083 1798.48,683.083 1799.04,683.083 1799.6,683.083 1800.16,683.083 1800.72,683.083 1801.28,683.083 1801.84,683.083 1802.4,683.083 1802.96,683.083 1803.52,683.083 1804.08,683.083 1804.63,683.083 1805.19,683.083 1805.75,683.083 1806.31,683.083 1806.87,683.083 1807.43,683.083 1807.99,683.083 1808.55,683.083 1809.11,683.083 1809.67,683.083 1810.23,683.083 1810.79,683.083 1811.35,683.083 1811.9,683.083 1812.46,683.083 1813.02,683.083 1813.58,683.083 1814.14,683.083 1814.7,683.083 1815.26,683.083 1815.82,683.083 1816.38,683.083 1816.94,683.083 1817.5,683.083 1818.06,683.083 1818.62,683.083 1819.18,683.083 1819.73,683.083 1820.29,683.083 1820.85,683.083 1821.41,683.083 1821.97,683.083 1822.53,683.083 1823.09,683.083 1823.65,683.083 1824.21,683.083 1824.77,683.083 1825.33,683.083 1825.89,683.083 1826.45,683.083 1827,683.083 1827.56,683.083 1828.12,683.083 1828.68,683.083 1829.24,683.083 1829.8,683.083 1830.36,683.083 1830.92,683.083 1831.48,683.083 1832.04,683.083 1832.6,683.083 1833.16,683.083 1833.72,683.083 1834.27,683.083 1834.83,683.083 1835.39,683.083 1835.95,683.083 1836.51,683.083 1837.07,683.083 1837.63,683.083 1838.19,683.083 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024879540896233 ± 0.023347674740526143\nProjected Energy: -4.012556433242613 ± (0.004269795681142163, 0.0043723276823497415)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.569606</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.2863e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1902e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.959e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.222e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.575e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.656e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613371\n -0.7590191922770924\n  0.13584182219622143\n  0.15789998694608443\n  0.876711441178136\n  1.5305929970973313\n  1.583573261186734\n  3.0728703303258644\n  3.125672653951833\n  4.86210722156217\n  6.260694850380598\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
