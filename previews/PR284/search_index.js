var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21436218144925687 ± 0.0017897948147070184\n   G2(1) = 0.9178851261647841 ± 0.0007835581610408988\n   G2(2) = 0.9802234806909993 ± 0.0005084739573667945\n   G2(3) = 0.9894206048391759 ± 0.0007242554577271637\n   G2(4) = 0.9802234806909993 ± 0.0005084739573667945\n   G2(5) = 0.9178851261647841 ± 0.0007835581610408988\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.96019945670024 ± 0.11811151100651605\n   Replica 2: -3.994278212346466 ± 0.14603140155593816\n   Replica 3: -3.935851082284609 ± 0.10731811401072296\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip420\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip421\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip422\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.57 2211.02,1003.57 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.331 2211.02,746.331 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.088 2211.02,489.088 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.844 2211.02,231.844 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.57 423.181,1003.57 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.331 423.181,746.331 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.088 423.181,489.088 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.844 423.181,231.844 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M290.043 1016.92 L306.363 1016.92 L306.363 1020.85 L284.418 1020.85 L284.418 1016.92 Q287.08 1014.17 291.664 1009.54 Q296.27 1004.88 297.451 1003.54 Q299.696 1001.02 300.576 999.281 Q301.478 997.522 301.478 995.832 Q301.478 993.077 299.534 991.341 Q297.613 989.605 294.511 989.605 Q292.312 989.605 289.858 990.369 Q287.427 991.133 284.65 992.684 L284.65 987.961 Q287.474 986.827 289.927 986.249 Q292.381 985.67 294.418 985.67 Q299.789 985.67 302.983 988.355 Q306.177 991.04 306.177 995.531 Q306.177 997.661 305.367 999.582 Q304.58 1001.48 302.474 1004.07 Q301.895 1004.74 298.793 1007.96 Q295.691 1011.16 290.043 1016.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M316.224 986.295 L334.58 986.295 L334.58 990.23 L320.506 990.23 L320.506 998.702 Q321.524 998.355 322.543 998.193 Q323.562 998.008 324.58 998.008 Q330.367 998.008 333.747 1001.18 Q337.126 1004.35 337.126 1009.77 Q337.126 1015.35 333.654 1018.45 Q330.182 1021.53 323.862 1021.53 Q321.687 1021.53 319.418 1021.16 Q317.173 1020.79 314.765 1020.04 L314.765 1015.35 Q316.849 1016.48 319.071 1017.04 Q321.293 1017.59 323.77 1017.59 Q327.774 1017.59 330.112 1015.48 Q332.45 1013.38 332.45 1009.77 Q332.45 1006.16 330.112 1004.05 Q327.774 1001.94 323.77 1001.94 Q321.895 1001.94 320.02 1002.36 Q318.168 1002.78 316.224 1003.66 L316.224 986.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M356.339 989.374 Q352.728 989.374 350.899 992.938 Q349.094 996.48 349.094 1003.61 Q349.094 1010.72 350.899 1014.28 Q352.728 1017.82 356.339 1017.82 Q359.973 1017.82 361.779 1014.28 Q363.608 1010.72 363.608 1003.61 Q363.608 996.48 361.779 992.938 Q359.973 989.374 356.339 989.374 M356.339 985.67 Q362.149 985.67 365.205 990.276 Q368.284 994.86 368.284 1003.61 Q368.284 1012.34 365.205 1016.94 Q362.149 1021.53 356.339 1021.53 Q350.529 1021.53 347.45 1016.94 Q344.395 1012.34 344.395 1003.61 Q344.395 994.86 347.45 990.276 Q350.529 985.67 356.339 985.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M286.062 729.051 L304.418 729.051 L304.418 732.987 L290.344 732.987 L290.344 741.459 Q291.363 741.111 292.381 740.949 Q293.4 740.764 294.418 740.764 Q300.205 740.764 303.585 743.936 Q306.964 747.107 306.964 752.523 Q306.964 758.102 303.492 761.204 Q300.02 764.283 293.701 764.283 Q291.525 764.283 289.256 763.912 Q287.011 763.542 284.603 762.801 L284.603 758.102 Q286.687 759.236 288.909 759.792 Q291.131 760.347 293.608 760.347 Q297.613 760.347 299.951 758.241 Q302.288 756.135 302.288 752.523 Q302.288 748.912 299.951 746.806 Q297.613 744.699 293.608 744.699 Q291.733 744.699 289.858 745.116 Q288.006 745.533 286.062 746.412 L286.062 729.051 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M326.177 732.13 Q322.566 732.13 320.737 735.695 Q318.932 739.237 318.932 746.366 Q318.932 753.473 320.737 757.037 Q322.566 760.579 326.177 760.579 Q329.811 760.579 331.617 757.037 Q333.446 753.473 333.446 746.366 Q333.446 739.237 331.617 735.695 Q329.811 732.13 326.177 732.13 M326.177 728.426 Q331.987 728.426 335.043 733.033 Q338.122 737.616 338.122 746.366 Q338.122 755.093 335.043 759.699 Q331.987 764.283 326.177 764.283 Q320.367 764.283 317.288 759.699 Q314.233 755.093 314.233 746.366 Q314.233 737.616 317.288 733.033 Q320.367 728.426 326.177 728.426 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M356.339 732.13 Q352.728 732.13 350.899 735.695 Q349.094 739.237 349.094 746.366 Q349.094 753.473 350.899 757.037 Q352.728 760.579 356.339 760.579 Q359.973 760.579 361.779 757.037 Q363.608 753.473 363.608 746.366 Q363.608 739.237 361.779 735.695 Q359.973 732.13 356.339 732.13 M356.339 728.426 Q362.149 728.426 365.205 733.033 Q368.284 737.616 368.284 746.366 Q368.284 755.093 365.205 759.699 Q362.149 764.283 356.339 764.283 Q350.529 764.283 347.45 759.699 Q344.395 755.093 344.395 746.366 Q344.395 737.616 347.45 733.033 Q350.529 728.426 356.339 728.426 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M284.835 471.808 L307.057 471.808 L307.057 473.799 L294.511 506.368 L289.627 506.368 L301.432 475.743 L284.835 475.743 L284.835 471.808 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M316.224 471.808 L334.58 471.808 L334.58 475.743 L320.506 475.743 L320.506 484.215 Q321.524 483.868 322.543 483.706 Q323.562 483.521 324.58 483.521 Q330.367 483.521 333.747 486.692 Q337.126 489.863 337.126 495.28 Q337.126 500.859 333.654 503.961 Q330.182 507.039 323.862 507.039 Q321.687 507.039 319.418 506.669 Q317.173 506.298 314.765 505.558 L314.765 500.859 Q316.849 501.993 319.071 502.548 Q321.293 503.104 323.77 503.104 Q327.774 503.104 330.112 500.998 Q332.45 498.891 332.45 495.28 Q332.45 491.669 330.112 489.562 Q327.774 487.456 323.77 487.456 Q321.895 487.456 320.02 487.873 Q318.168 488.289 316.224 489.169 L316.224 471.808 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M356.339 474.887 Q352.728 474.887 350.899 478.451 Q349.094 481.993 349.094 489.123 Q349.094 496.229 350.899 499.794 Q352.728 503.336 356.339 503.336 Q359.973 503.336 361.779 499.794 Q363.608 496.229 363.608 489.123 Q363.608 481.993 361.779 478.451 Q359.973 474.887 356.339 474.887 M356.339 471.183 Q362.149 471.183 365.205 475.789 Q368.284 480.373 368.284 489.123 Q368.284 497.849 365.205 502.456 Q362.149 507.039 356.339 507.039 Q350.529 507.039 347.45 502.456 Q344.395 497.849 344.395 489.123 Q344.395 480.373 347.45 475.789 Q350.529 471.183 356.339 471.183 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M256.664 245.189 L264.303 245.189 L264.303 218.824 L255.992 220.49 L255.992 216.231 L264.256 214.564 L268.932 214.564 L268.932 245.189 L276.571 245.189 L276.571 249.124 L256.664 249.124 L256.664 245.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M296.015 217.643 Q292.404 217.643 290.576 221.208 Q288.77 224.75 288.77 231.879 Q288.77 238.986 290.576 242.55 Q292.404 246.092 296.015 246.092 Q299.65 246.092 301.455 242.55 Q303.284 238.986 303.284 231.879 Q303.284 224.75 301.455 221.208 Q299.65 217.643 296.015 217.643 M296.015 213.939 Q301.826 213.939 304.881 218.546 Q307.96 223.129 307.96 231.879 Q307.96 240.606 304.881 245.212 Q301.826 249.796 296.015 249.796 Q290.205 249.796 287.127 245.212 Q284.071 240.606 284.071 231.879 Q284.071 223.129 287.127 218.546 Q290.205 213.939 296.015 213.939 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M326.177 217.643 Q322.566 217.643 320.737 221.208 Q318.932 224.75 318.932 231.879 Q318.932 238.986 320.737 242.55 Q322.566 246.092 326.177 246.092 Q329.811 246.092 331.617 242.55 Q333.446 238.986 333.446 231.879 Q333.446 224.75 331.617 221.208 Q329.811 217.643 326.177 217.643 M326.177 213.939 Q331.987 213.939 335.043 218.546 Q338.122 223.129 338.122 231.879 Q338.122 240.606 335.043 245.212 Q331.987 249.796 326.177 249.796 Q320.367 249.796 317.288 245.212 Q314.233 240.606 314.233 231.879 Q314.233 223.129 317.288 218.546 Q320.367 213.939 326.177 213.939 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M356.339 217.643 Q352.728 217.643 350.899 221.208 Q349.094 224.75 349.094 231.879 Q349.094 238.986 350.899 242.55 Q352.728 246.092 356.339 246.092 Q359.973 246.092 361.779 242.55 Q363.608 238.986 363.608 231.879 Q363.608 224.75 361.779 221.208 Q359.973 217.643 356.339 217.643 M356.339 213.939 Q362.149 213.939 365.205 218.546 Q368.284 223.129 368.284 231.879 Q368.284 240.606 365.205 245.212 Q362.149 249.796 356.339 249.796 Q350.529 249.796 347.45 245.212 Q344.395 240.606 344.395 231.879 Q344.395 223.129 347.45 218.546 Q350.529 213.939 356.339 213.939 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip422)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.844 4017.76,231.844 \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1248.05 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.16 462.806,1244.24 463.375,1243.23 463.943,1242.13 464.511,1240.93 465.08,1239.62 465.648,1238.21 466.216,1236.68 466.785,1235.03 467.353,1231.2 467.921,1229.25 468.49,1226.11 469.058,1221.83 469.626,1219.41 470.195,1216.84 470.763,1214.11 471.331,1211.15 471.9,1208.04 472.468,1203.74 473.036,1199.19 473.605,1194.41 474.173,1190.42 474.741,1185.18 475.31,1180.7 475.878,1176 476.446,1169.99 477.015,1164.91 477.583,1159.55 478.152,1153.94 478.72,1147.12 479.288,1141.06 479.857,1132.71 480.425,1126 480.993,1119.06 481.562,1111.8 482.13,1104.45 482.698,1095.81 483.267,1086.08 483.835,1077.23 484.403,1069.2 484.972,1061.02 485.54,1052.6 486.108,1043.94 486.677,1035.19 487.245,1025.28 487.813,1015.11 488.382,1005.79 488.95,993.265 489.518,982.826 490.087,972.205 490.655,962.612 491.224,951.867 491.792,941.038 492.36,930.226 492.929,919.318 493.497,907.319 494.065,894.432 494.634,883.641 495.202,871.754 495.77,859.891 496.339,849.051 496.907,838.31 497.475,826.562 498.044,815.903 498.612,806.332 499.18,794.644 499.749,785.187 500.317,775.674 500.885,766.185 501.454,755.768 502.022,743.306 502.59,730.944 503.159,720.89 503.727,710.847 504.295,700.961 504.864,691.33 505.432,679.705 506.001,670.244 506.569,661.064 507.137,651.796 507.706,641.865 508.274,634.056 508.842,625.412 509.411,618.851 509.979,611.075 510.547,601.68 511.116,594.296 511.684,584.977 512.252,576.873 512.821,567.781 513.389,557.733 513.957,549.162 514.526,541.924 515.094,533.527 515.662,523.273 516.231,516.247 516.799,509.569 517.367,503.988 517.936,496.538 518.504,490.199 519.072,483.785 519.641,477.834 520.209,472.823 520.778,468.909 521.346,462.925 521.914,456.915 522.483,449.227 523.051,442.638 523.619,435.272 524.188,431.085 524.756,426.076 525.324,420.155 525.893,413.453 526.461,409.019 527.029,403.914 527.598,399.683 528.166,395.514 528.734,390.497 529.303,387.673 529.871,382.701 530.439,380.082 531.008,378.408 531.576,375.805 532.144,371.988 532.713,367.373 533.281,362.984 533.85,362.049 534.418,359.714 534.986,358.197 535.555,353.677 536.123,351.448 536.691,348.219 537.26,346.149 537.828,344.938 538.396,343.002 538.965,341.982 539.533,338.834 540.101,336.744 540.67,334.941 541.238,333.015 541.806,331.124 542.375,328.244 542.943,326.396 543.511,323.679 544.08,320.945 544.648,316.234 545.216,312.697 545.785,309.322 546.353,307.358 546.921,302.332 547.49,301.491 548.058,300.902 548.627,301.216 549.195,300.308 549.763,300.284 550.332,301.458 550.9,299.233 551.468,296.208 552.037,294.366 552.605,294.56 553.173,292.607 553.742,291.922 554.31,287.978 554.878,285.338 555.447,286.005 556.015,282.378 556.583,278.099 557.152,277.016 557.72,276.987 558.288,274.851 558.857,274.779 559.425,274.76 559.993,275.728 560.562,274.635 561.13,274.336 561.698,273.258 562.267,272.161 562.835,271.908 563.404,271.745 563.972,270.36 564.54,270.203 565.109,269.902 565.677,267.65 566.245,267.755 566.814,269.682 567.382,268.465 567.95,268.295 568.519,265.872 569.087,264.871 569.655,264.857 570.224,262.63 570.792,263.73 571.36,262.717 571.929,262.701 572.497,261.854 573.065,262.992 573.634,260.613 574.202,258.649 574.77,258.916 575.339,256.894 575.907,254.938 576.476,252.213 577.044,252.886 577.612,253.384 578.181,252.78 578.749,250.136 579.317,250.761 579.886,250.303 580.454,249.594 581.022,252.166 581.591,252.511 582.159,256.023 582.727,258.204 583.296,258.005 583.864,257.65 584.432,255.47 585.001,255.221 585.569,254.307 586.137,255.367 586.706,254.083 587.274,254.041 587.842,256.266 588.411,255.033 588.979,253.992 589.547,253.907 590.116,253.85 590.684,254.948 591.253,255.959 591.821,257.735 592.389,257.065 592.958,256.58 593.526,257.109 594.094,256.493 594.663,255.941 595.231,256.56 595.799,256.053 596.368,253.574 596.936,255.275 597.504,255.764 598.073,254.339 598.641,253.718 599.209,253.206 599.778,248.701 600.346,243.666 600.914,242.95 601.483,240.271 602.051,237.698 602.619,238.475 603.188,238.127 603.756,236.669 604.325,236.538 604.893,235.323 605.461,235.222 606.03,235.115 606.598,235.188 607.166,235.906 607.735,237.641 608.303,240.252 608.871,237.607 609.44,239.436 610.008,238.145 610.576,239.995 611.145,241.565 611.713,243.069 612.281,242.364 612.85,240.608 613.418,240.956 613.986,240.432 614.555,241.101 615.123,240.436 615.691,239.709 616.26,235.994 616.828,237.89 617.396,236.523 617.965,237.207 618.533,238.902 619.102,240.48 619.67,240.887 620.238,240.192 620.807,239.339 621.375,240.97 621.943,241.11 622.512,241.477 623.08,241.093 623.648,242.385 624.217,241.621 624.785,242.816 625.353,242.122 625.922,242.445 626.49,242.581 627.058,242.587 627.627,241.886 628.195,241.127 628.763,241.511 629.332,241.922 629.9,240.056 630.468,239.203 631.037,240.673 631.605,239.928 632.173,240.011 632.742,239.16 633.31,237.555 633.879,239.15 634.447,241.623 635.015,241.676 635.584,239.98 636.152,239.986 636.72,241.196 637.289,241.375 637.857,240.583 638.425,239.7 638.994,238.236 639.562,237.526 640.13,237.781 640.699,238.39 641.267,237.588 641.835,237.918 642.404,237.266 642.972,237.615 643.54,237.892 644.109,239.669 644.677,238.877 645.245,240.329 645.814,242.773 646.382,242.717 646.951,240.686 647.519,238.714 648.087,237.703 648.656,238.029 649.224,238.218 649.792,237.343 650.361,236.55 650.929,237.191 651.497,238.706 652.066,238.846 652.634,239.958 653.202,239.194 653.771,239.196 654.339,240.52 654.907,240.713 655.476,239.528 656.044,239.657 656.612,239.818 657.181,239.981 657.749,240.2 658.317,238.19 658.886,240.554 659.454,240.567 660.022,239.46 660.591,239.748 661.159,241.874 661.728,239.717 662.296,239.711 662.864,237.733 663.433,237.879 664.001,238.275 664.569,239.874 665.138,239.853 665.706,238.786 666.274,237.878 666.843,240.081 667.411,239.145 667.979,240.181 668.548,239.034 669.116,238.009 669.684,240.267 670.253,237.015 670.821,237.43 671.389,235.724 671.958,238.101 672.526,236.157 673.094,238.19 673.663,238.297 674.231,238.406 674.799,238.502 675.368,237.517 675.936,234.279 676.505,234.518 677.073,232.8 677.641,234.215 678.21,234.549 678.778,232.864 679.346,232.481 679.915,233.042 680.483,231.162 681.051,232.801 681.62,235.414 682.188,234.597 682.756,240.084 683.325,239.967 683.893,238.988 684.461,239.842 685.03,238.646 685.598,238.686 686.166,238.478 686.735,238.409 687.303,237.22 687.871,236.079 688.44,236.268 689.008,233.504 689.577,232.734 690.145,234.265 690.713,235.507 691.282,235.35 691.85,234.526 692.418,234.71 692.987,231.931 693.555,234.397 694.123,237.606 694.692,237.544 695.26,237.539 695.828,238.75 696.397,239.728 696.965,236.425 697.533,239.757 698.102,239.609 698.67,240.504 699.238,240.225 699.807,240.099 700.375,240.885 700.943,239.667 701.512,238.294 702.08,238.069 702.648,236.948 703.217,236.829 703.785,234.776 704.354,236.999 704.922,235.89 705.49,235.095 706.059,233.941 706.627,235.985 707.195,235.954 707.764,237.791 708.332,235.899 708.9,234.984 709.469,237.082 710.037,238.225 710.605,236.761 711.174,238.607 711.742,239.436 712.31,238.175 712.879,238.873 713.447,239.544 714.015,238.275 714.584,239.361 715.152,238.097 715.72,236.756 716.289,236.559 716.857,234.262 717.425,234.363 717.994,232.521 718.562,232.601 719.131,229.731 719.699,231.138 720.267,232.686 720.836,231.748 721.404,233.17 721.972,232.38 722.541,233.413 723.109,234.637 723.677,235.622 724.246,237.572 724.814,239.311 725.382,235.952 725.951,236.834 726.519,236.616 727.087,235.396 727.656,235.527 728.224,233.519 728.792,232.626 729.361,232.813 729.929,234.271 730.497,233.413 731.066,235.431 731.634,235.344 732.203,236.419 732.771,236.501 733.339,237.366 733.908,235.01 734.476,235.05 735.044,233.976 735.613,231.234 736.181,232.383 736.749,232.546 737.318,230.698 737.886,234.211 738.454,234.42 739.023,235.267 739.591,237.107 740.159,235.851 740.728,235.732 741.296,233.594 741.864,232.635 742.433,232.744 743.001,232.747 743.569,234.843 744.138,233.833 744.706,232.781 745.274,230.794 745.843,231.836 746.411,231.969 746.98,232.212 747.548,231.21 748.116,231.472 748.685,231.62 749.253,230.671 749.821,229.971 750.39,230.726 750.958,229.08 751.526,229.603 752.095,229.992 752.663,230.213 753.231,231.641 753.8,234.046 754.368,233.196 754.936,233.232 755.505,233.337 756.073,232.263 756.641,232.407 757.21,233.408 757.778,232.491 758.346,233.593 758.915,233.409 759.483,235.516 760.052,234.511 760.62,236.611 761.188,234.292 761.757,233.464 762.325,235.609 762.893,237.558 763.462,238.423 764.03,238.192 764.598,236.958 765.167,236.783 765.735,235.652 766.303,236.565 766.872,239.354 767.44,238.986 768.008,238.483 768.577,235.039 769.145,234.988 769.713,234.969 770.282,234.728 770.85,234.494 771.418,233.52 771.987,232.206 772.555,232.575 773.123,232.704 773.692,234.01 774.26,232.975 774.829,233.013 775.397,233.026 775.965,231.928 776.534,231.943 777.102,231.909 777.67,232.165 778.239,230.304 778.807,228.399 779.375,228.777 779.944,231.169 780.512,231.401 781.08,233.538 781.649,233.291 782.217,235.273 782.785,235.036 783.354,233.771 783.922,233.86 784.49,234.901 785.059,235.769 785.627,234.57 786.195,234.421 786.764,232.162 787.332,230.263 787.9,229.385 788.469,229.545 789.037,230.97 789.606,231.272 790.174,231.42 790.742,231.522 791.311,231.803 791.879,231.779 792.447,229.828 793.016,229.144 793.584,229.156 794.152,228.501 794.721,228.719 795.289,232.189 795.857,232.138 796.426,232.295 796.994,231.411 797.562,230.622 798.131,233.735 798.699,232.74 799.267,233.013 799.836,233.161 800.404,231.184 800.972,229.186 801.541,228.313 802.109,228.097 802.678,228.598 803.246,229.046 803.814,227.309 804.383,228.94 804.951,228.046 805.519,228.622 806.088,230.228 806.656,229.665 807.224,230.241 807.793,231.596 808.361,231.2 808.929,233.751 809.498,232.853 810.066,230.951 810.634,231.244 811.203,231.477 811.771,231.922 812.339,233.244 812.908,231.601 813.476,229.875 814.044,229.203 814.613,228.547 815.181,227.893 815.749,230.505 816.318,234.053 816.886,236.043 817.455,236.223 818.023,236.158 818.591,236.994 819.16,236.769 819.728,237.662 820.296,237.547 820.865,239.664 821.433,238.546 822.001,238.176 822.57,238.819 823.138,240.636 823.706,240.459 824.275,240.051 824.843,237.627 825.411,236.339 825.98,239.44 826.548,239.968 827.116,237.251 827.685,236.084 828.253,236.767 828.821,234.346 829.39,236.462 829.958,235.273 830.526,235.232 831.095,235.155 831.663,235.813 832.232,233.464 832.8,234.328 833.368,235.253 833.937,234.144 834.505,233.045 835.073,234.018 835.642,235.041 836.21,234.748 836.778,234.514 837.347,233.352 837.915,234.159 838.483,233.91 839.052,233.896 839.62,234.882 840.188,232.562 840.757,232.516 841.325,233.309 841.893,233.149 842.462,231.906 843.03,230.818 843.598,231.788 844.167,232.697 844.735,232.779 845.304,232.711 845.872,233.567 846.44,233.594 847.009,232.397 847.577,232.455 848.145,231.28 848.714,230.277 849.282,229.697 849.85,228.963 850.419,227.907 850.987,229.36 851.555,227.36 852.124,225.88 852.692,227.293 853.26,227.66 853.829,229.137 854.397,226.236 854.965,226.932 855.534,226.175 856.102,226.64 856.67,230.421 857.239,230.523 857.807,230.656 858.375,232.013 858.944,232.182 859.512,233.292 860.081,234.505 860.649,235.448 861.217,235.363 861.786,236.323 862.354,239.093 862.922,239.666 863.491,235.999 864.059,237.04 864.627,237.769 865.196,236.261 865.764,235.844 866.332,234.774 866.901,233.601 867.469,233.485 868.037,232.439 868.606,233.48 869.174,234.511 869.742,235.246 870.311,235.104 870.879,235.184 871.447,238.046 872.016,238.573 872.584,239.104 873.152,238.569 873.721,239.228 874.289,237.657 874.858,240.277 875.426,238.492 875.994,241.195 876.563,240.704 877.131,240.17 877.699,237.316 878.268,236.739 878.836,236.418 879.404,236.065 879.973,234.8 880.541,234.461 881.109,234.114 881.678,235.747 882.246,234.315 882.814,236.156 883.383,235.768 883.951,235.606 884.519,235.359 885.088,236.181 885.656,234.613 886.224,234.269 886.793,233.076 887.361,232.946 887.93,231.708 888.498,229.488 889.066,231.588 889.635,230.34 890.203,229.459 890.771,228.489 891.34,228.811 891.908,229.756 892.476,229.806 893.045,228.879 893.613,226.857 894.181,227.293 894.75,228.541 895.318,227.737 895.886,224.966 896.455,224.481 897.023,224.029 897.591,223.5 898.16,223.147 898.728,222.874 899.296,224.668 899.865,225.229 900.433,226.901 901.001,227.983 901.57,228.355 902.138,228.512 902.707,228.783 903.275,229.107 903.843,231.47 904.412,232.589 904.98,233.27 905.548,234.335 906.117,234.22 906.685,234.095 907.253,233.992 907.822,234.983 908.39,235.822 908.958,236.748 909.527,235.378 910.095,236.137 910.663,235.815 911.232,236.657 911.8,237.323 912.368,235.933 912.937,234.633 913.505,234.294 914.073,234.324 914.642,232.145 915.21,233.177 915.779,232.072 916.347,232.119 916.915,233.098 917.484,233.095 918.052,235.005 918.62,232.665 919.189,233.656 919.757,236.674 920.325,235.317 920.894,236.091 921.462,235.682 922.03,236.398 922.599,234.867 923.167,236.573 923.735,234.103 924.304,233.96 924.872,233.634 925.44,233.564 926.009,233.314 926.577,233.083 927.145,233.913 927.714,232.774 928.282,232.254 928.85,230.02 929.419,230.048 929.987,231.193 930.556,232.145 931.124,232.078 931.692,232.012 932.261,229.869 932.829,230.064 933.397,226.933 933.966,227.222 934.534,225.538 935.102,223.875 935.671,221.32 936.239,221.119 936.807,219.895 937.376,223.862 937.944,223.287 938.512,222.999 939.081,224.576 939.649,227.361 940.217,226.624 940.786,229.102 941.354,230.577 941.922,229.819 942.491,229.18 943.059,231.526 943.627,231.56 944.196,232.917 944.764,232.796 945.333,229.758 945.901,230.111 946.469,229.1 947.038,229.268 947.606,228.289 948.174,228.388 948.743,230.521 949.311,230.748 949.879,229.952 950.448,228.281 951.016,231.795 951.584,231.658 952.153,230.594 952.721,230.641 953.289,231.965 953.858,231.038 954.426,233.245 954.994,234.254 955.563,233.162 956.131,233.138 956.699,234.212 957.268,233.084 957.836,234.05 958.405,236.018 958.973,234.711 959.541,234.567 960.11,234.44 960.678,234.402 961.246,234.522 961.815,233.636 962.383,231.536 962.951,233.576 963.52,233.517 964.088,233.638 964.656,234.609 965.225,233.604 965.793,232.41 966.361,232.381 966.93,233.57 967.498,232.601 968.066,234.619 968.635,233.231 969.203,231.161 969.771,231.325 970.34,230.631 970.908,231.893 971.476,233.049 972.045,232.916 972.613,235.074 973.182,235.872 973.75,235.405 974.318,235.031 974.887,234.787 975.455,235.718 976.023,235.444 976.592,234.299 977.16,231.977 977.728,232.962 978.297,232.124 978.865,231.999 979.433,233.019 980.002,232.95 980.57,234.065 981.138,232.774 981.707,232.771 982.275,232.773 982.843,231.646 983.412,232.749 983.98,233.818 984.548,231.906 985.117,233.826 985.685,229.516 986.253,229.704 986.822,229.901 987.39,227.035 987.959,229.543 988.527,227.48 989.095,229.62 989.664,229.566 990.232,229.791 990.8,228.88 991.369,231.349 991.937,229.383 992.505,232.857 993.074,232.795 993.642,231.69 994.21,231.643 994.779,232.623 995.347,233.739 995.915,232.627 996.484,233.732 997.052,233.906 997.62,233.885 998.189,234.835 998.757,235.886 999.325,233.683 999.894,232.488 1000.46,229.644 1001.03,231.014 1001.6,230.029 1002.17,229.343 1002.74,229.536 1003.3,231.761 1003.87,231.962 1004.44,231.084 1005.01,231.199 1005.58,231.188 1006.15,231.298 1006.71,233.377 1007.28,232.211 1007.85,233.271 1008.42,232.942 1008.99,232.812 1009.56,233.903 1010.12,233.725 1010.69,234.644 1011.26,233.306 1011.83,234.359 1012.4,233.046 1012.97,234.986 1013.53,233.755 1014.1,234.58 1014.67,234.322 1015.24,235.284 1015.81,235.241 1016.38,235.044 1016.94,233.897 1017.51,234.812 1018.08,233.718 1018.65,235.653 1019.22,234.472 1019.79,235.337 1020.35,234.069 1020.92,233.11 1021.49,229.962 1022.06,232.218 1022.63,232.046 1023.2,232.081 1023.76,232.054 1024.33,232.114 1024.9,234.298 1025.47,233.271 1026.04,232.219 1026.61,233.391 1027.17,234.513 1027.74,232.18 1028.31,232.201 1028.88,232.174 1029.45,233.243 1030.02,232.299 1030.58,232.324 1031.15,233.241 1031.72,232.158 1032.29,232.129 1032.86,232.089 1033.43,230.823 1033.99,231.026 1034.56,229.03 1035.13,229.342 1035.7,229.563 1036.27,228.675 1036.84,228.803 1037.4,228.928 1037.97,227.134 1038.54,228.5 1039.11,230.927 1039.68,229.938 1040.25,229.965 1040.81,226.905 1041.38,228.477 1041.95,225.757 1042.52,226.419 1043.09,225.751 1043.66,226.426 1044.22,228.017 1044.79,228.354 1045.36,228.752 1045.93,228.189 1046.5,226.743 1047.07,229.268 1047.63,226.825 1048.2,231.534 1048.77,231.76 1049.34,234.847 1049.91,234.45 1050.48,233.259 1051.05,233.907 1051.61,235.903 1052.18,237.726 1052.75,236.597 1053.32,237.465 1053.89,235.845 1054.46,235.541 1055.02,235.189 1055.59,232.069 1056.16,231.105 1056.73,233.31 1057.3,234.083 1057.87,233.882 1058.43,234.968 1059,235.03 1059.57,234.829 1060.14,234.722 1060.71,235.633 1061.28,235.408 1061.84,235.237 1062.41,233.91 1062.98,232.686 1063.55,231.52 1064.12,232.461 1064.69,232.669 1065.25,233.447 1065.82,233.402 1066.39,233.347 1066.96,235.204 1067.53,236.225 1068.1,236.921 1068.66,234.268 1069.23,235.139 1069.8,234.83 1070.37,233.556 1070.94,234.442 1071.51,233.298 1072.07,232.943 1072.64,232.83 1073.21,233.666 1073.78,235.727 1074.35,234.459 1074.92,232.123 1075.48,232.958 1076.05,230.652 1076.62,229.923 1077.19,228.875 1077.76,231.089 1078.33,231.121 1078.89,230.941 1079.46,230.674 1080.03,230.659 1080.6,229.932 1081.17,228.118 1081.74,226.266 1082.3,225.799 1082.87,227.363 1083.44,230.776 1084.01,233.157 1084.58,234.253 1085.15,233.932 1085.71,232.746 1086.28,234.747 1086.85,234.412 1087.42,236.025 1087.99,235.527 1088.56,232.196 1089.12,230.854 1089.69,231.951 1090.26,231.897 1090.83,231.934 1091.4,231.729 1091.97,228.754 1092.53,228.886 1093.1,230.061 1093.67,230.928 1094.24,231.937 1094.81,234.046 1095.38,233.753 1095.94,232.842 1096.51,230.589 1097.08,230.524 1097.65,230.532 1098.22,231.656 1098.79,230.369 1099.35,230.442 1099.92,229.522 1100.49,229.746 1101.06,233.033 1101.63,231.881 1102.2,233.133 1102.76,234.116 1103.33,235.186 1103.9,233.918 1104.47,232.763 1105.04,229.331 1105.61,227.415 1106.17,227.743 1106.74,227.185 1107.31,227.324 1107.88,227.926 1108.45,228.03 1109.02,229.331 1109.58,230.54 1110.15,228.49 1110.72,228.769 1111.29,228.009 1111.86,229.489 1112.43,227.686 1112.99,227.156 1113.56,228.612 1114.13,231.033 1114.7,230.971 1115.27,231.016 1115.84,231.169 1116.4,230.024 1116.97,232.415 1117.54,233.48 1118.11,233.398 1118.68,234.533 1119.25,234.295 1119.81,234.092 1120.38,233.117 1120.95,232.084 1121.52,232.943 1122.09,233.111 1122.66,234.204 1123.23,235.086 1123.79,235.833 1124.36,235.623 1124.93,235.313 1125.5,235.958 1126.07,235.729 1126.64,234.455 1127.2,234.245 1127.77,234.93 1128.34,233.616 1128.91,232.397 1129.48,233.639 1130.05,233.369 1130.61,233.143 1131.18,232.974 1131.75,232.922 1132.32,231.939 1132.89,230.888 1133.46,231.004 1134.02,230.158 1134.59,230.218 1135.16,231.503 1135.73,233.491 1136.3,232.254 1136.87,232.143 1137.43,233.272 1138,232.142 1138.57,232.052 1139.14,236.012 1139.71,233.698 1140.28,235.536 1140.84,232.17 1141.41,232.06 1141.98,231.92 1142.55,231.002 1143.12,230.798 1143.69,229.955 1144.25,230.135 1144.82,228.355 1145.39,227.311 1145.96,224.53 1146.53,225.252 1147.1,227.885 1147.66,226.032 1148.23,228.438 1148.8,229.793 1149.37,230.06 1149.94,229.118 1150.51,230.325 1151.07,232.616 1151.64,232.406 1152.21,232.491 1152.78,232.515 1153.35,233.61 1153.92,232.766 1154.48,233.804 1155.05,234.628 1155.62,234.454 1156.19,233.29 1156.76,236.267 1157.33,233.578 1157.89,233.339 1158.46,231.234 1159.03,232.55 1159.6,232.317 1160.17,233.187 1160.74,231.668 1161.3,231.463 1161.87,227.286 1162.44,227.744 1163.01,228.049 1163.58,227.395 1164.15,228.763 1164.71,226.858 1165.28,227.377 1165.85,227.734 1166.42,231.228 1166.99,231.355 1167.56,231.583 1168.12,230.699 1168.69,231.985 1169.26,232.018 1169.83,232.175 1170.4,231.027 1170.97,230.073 1171.53,229.419 1172.1,231.693 1172.67,232.641 1173.24,233.498 1173.81,235.522 1174.38,236.133 1174.94,234.883 1175.51,232.698 1176.08,233.714 1176.65,230.476 1177.22,229.59 1177.79,229.781 1178.35,230.303 1178.92,229.38 1179.49,229.595 1180.06,228.967 1180.63,228.255 1181.2,226.679 1181.76,228.077 1182.33,228.461 1182.9,227.606 1183.47,228.96 1184.04,229.351 1184.61,229.772 1185.17,226.967 1185.74,226.356 1186.31,227.961 1186.88,227.187 1187.45,228.719 1188.02,230.146 1188.58,231.552 1189.15,231.576 1189.72,231.894 1190.29,232.994 1190.86,234.924 1191.43,234.859 1192,234.805 1192.56,233.723 1193.13,233.999 1193.7,235.028 1194.27,234.765 1194.84,234.688 1195.41,234.597 1195.97,234.691 1196.54,233.595 1197.11,234.632 1197.68,233.343 1198.25,234.479 1198.82,235.51 1199.38,236.374 1199.95,238.177 1200.52,238.999 1201.09,238.377 1201.66,236.883 1202.23,235.609 1202.79,238.719 1203.36,237.971 1203.93,238.417 1204.5,238.018 1205.07,236.717 1205.64,236.405 1206.2,238.062 1206.77,238.526 1207.34,237.964 1207.91,235.591 1208.48,235.344 1209.05,236.175 1209.61,237.966 1210.18,238.475 1210.75,238.944 1211.32,238.187 1211.89,238.706 1212.46,237.303 1213.02,237.722 1213.59,237.131 1214.16,239.684 1214.73,240.043 1215.3,238.322 1215.87,237.754 1216.43,237.275 1217,236.934 1217.57,237.455 1218.14,236.728 1218.71,236.308 1219.28,234.923 1219.84,235.608 1220.41,235.322 1220.98,236.853 1221.55,235.287 1222.12,232.693 1222.69,234.409 1223.25,235.137 1223.82,234.689 1224.39,234.268 1224.96,233.952 1225.53,233.394 1226.1,229.842 1226.66,228.75 1227.23,228.649 1227.8,227.587 1228.37,229.639 1228.94,231.487 1229.51,231.686 1230.07,230.429 1230.64,229.447 1231.21,231.49 1231.78,231.419 1232.35,230.263 1232.92,229.27 1233.48,230.423 1234.05,230.246 1234.62,230.051 1235.19,229.008 1235.76,228.086 1236.33,229.412 1236.89,230.544 1237.46,231.593 1238.03,233.432 1238.6,234.118 1239.17,233.707 1239.74,234.295 1240.3,231.92 1240.87,229.837 1241.44,229.53 1242.01,228.598 1242.58,229.652 1243.15,228.643 1243.71,226.706 1244.28,224.765 1244.85,223.974 1245.42,225.394 1245.99,226.531 1246.56,226.899 1247.12,225.945 1247.69,229.315 1248.26,230.476 1248.83,226.352 1249.4,228.669 1249.97,231.797 1250.53,230.778 1251.1,230.74 1251.67,231.902 1252.24,233.88 1252.81,233.684 1253.38,232.45 1253.94,231.552 1254.51,231.419 1255.08,233.302 1255.65,231.878 1256.22,229.719 1256.79,230.884 1257.35,233.055 1257.92,232.785 1258.49,231.564 1259.06,232.704 1259.63,232.708 1260.2,232.569 1260.76,231.377 1261.33,232.272 1261.9,232.287 1262.47,230.218 1263.04,232.482 1263.61,233.283 1264.18,232.019 1264.74,230.804 1265.31,229.006 1265.88,230.115 1266.45,230.175 1267.02,232.265 1267.59,231.096 1268.15,230.127 1268.72,228.964 1269.29,228.348 1269.86,228.412 1270.43,227.845 1271,227.829 1271.56,226.992 1272.13,228.448 1272.7,227.659 1273.27,227.035 1273.84,228.343 1274.41,226.543 1274.97,224.802 1275.54,224.463 1276.11,226.946 1276.68,227.411 1277.25,229.454 1277.82,230.73 1278.38,231.956 1278.95,231.801 1279.52,232.8 1280.09,233.804 1280.66,229.705 1281.23,231.921 1281.79,231.04 1282.36,230.144 1282.93,233.423 1283.5,232.689 1284.07,233.89 1284.64,233.711 1285.2,233.493 1285.77,232.55 1286.34,231.356 1286.91,229.133 1287.48,229.528 1288.05,228.703 1288.61,226.933 1289.18,228.472 1289.75,228.697 1290.32,228.878 1290.89,229.153 1291.46,227.511 1292.02,227.855 1292.59,228.137 1293.16,228.478 1293.73,229.835 1294.3,231.018 1294.87,230.092 1295.43,231.261 1296,231.487 1296.57,231.674 1297.14,229.719 1297.71,229.061 1298.28,230.358 1298.84,229.597 1299.41,231.617 1299.98,231.714 1300.55,231.91 1301.12,231.97 1301.69,231.853 1302.25,230.886 1302.82,231.247 1303.39,229.258 1303.96,229.635 1304.53,230.786 1305.1,230.962 1305.66,230.927 1306.23,231.817 1306.8,231.915 1307.37,232.061 1307.94,229.924 1308.51,229.343 1309.07,229.402 1309.64,229.716 1310.21,229.951 1310.78,231.377 1311.35,230.475 1311.92,230.728 1312.48,230.026 1313.05,233.336 1313.62,232.442 1314.19,233.56 1314.76,233.521 1315.33,232.526 1315.89,230.455 1316.46,230.617 1317.03,230.614 1317.6,230.771 1318.17,232.002 1318.74,232.1 1319.3,231.82 1319.87,232.934 1320.44,234.833 1321.01,235.587 1321.58,234.236 1322.15,234.104 1322.71,233.145 1323.28,233.02 1323.85,234.143 1324.42,234.329 1324.99,233.266 1325.56,235.335 1326.12,234.346 1326.69,234.363 1327.26,235.194 1327.83,231.957 1328.4,232.01 1328.97,232.066 1329.53,234.216 1330.1,232.755 1330.67,231.724 1331.24,232.762 1331.81,231.812 1332.38,230.939 1332.94,232.045 1333.51,232.09 1334.08,231.211 1334.65,232.374 1335.22,233.394 1335.79,233.491 1336.36,232.627 1336.92,230.683 1337.49,231.097 1338.06,234.092 1338.63,236.126 1339.2,235.746 1339.77,234.594 1340.33,234.47 1340.9,234.163 1341.47,234.002 1342.04,235.001 1342.61,235.058 1343.18,234.84 1343.74,232.593 1344.31,232.512 1344.88,231.499 1345.45,230.528 1346.02,228.553 1346.59,227.49 1347.15,224.747 1347.72,226.196 1348.29,224.587 1348.86,223.259 1349.43,225.004 1350,225.544 1350.56,229.181 1351.13,229.252 1351.7,229.707 1352.27,228.969 1352.84,227.257 1353.41,228.621 1353.97,228.665 1354.54,228.955 1355.11,228.293 1355.68,231.82 1356.25,231.984 1356.82,233.102 1357.38,231.944 1357.95,233.148 1358.52,234.149 1359.09,233.856 1359.66,235.816 1360.23,235.521 1360.79,235.304 1361.36,235.247 1361.93,237.322 1362.5,237.928 1363.07,235.513 1363.64,235.369 1364.2,237.177 1364.77,233.766 1365.34,232.336 1365.91,233.249 1366.48,233.485 1367.05,233.5 1367.61,233.383 1368.18,233.162 1368.75,233.096 1369.32,231.681 1369.89,231.712 1370.46,232.74 1371.02,229.646 1371.59,228.871 1372.16,228.113 1372.73,227.291 1373.3,227.713 1373.87,224.875 1374.43,223.306 1375,226.887 1375.57,230.215 1376.14,230.333 1376.71,230.645 1377.28,230.737 1377.84,229.603 1378.41,230.698 1378.98,231.011 1379.55,229.937 1380.12,230.277 1380.69,230.326 1381.25,230.588 1381.82,229.897 1382.39,229.287 1382.96,230.786 1383.53,231.142 1384.1,230.176 1384.66,231.381 1385.23,233.55 1385.8,236.61 1386.37,237.447 1386.94,237.119 1387.51,237.819 1388.07,237.561 1388.64,232.139 1389.21,232.056 1389.78,231.153 1390.35,230.175 1390.92,231.542 1391.48,228.429 1392.05,227.699 1392.62,227.309 1393.19,226.654 1393.76,224.972 1394.33,227.473 1394.89,229.044 1395.46,229.309 1396.03,233.631 1396.6,235.64 1397.17,237.658 1397.74,237.503 1398.3,236.157 1398.87,235.865 1399.44,236.829 1400.01,234.75 1400.58,232.375 1401.15,230.423 1401.71,231.564 1402.28,234.778 1402.85,231.575 1403.42,231.605 1403.99,232.837 1404.56,233.839 1405.13,231.887 1405.69,231.782 1406.26,231.798 1406.83,230.728 1407.4,229.83 1407.97,231.177 1408.54,231.474 1409.1,233.605 1409.67,234.72 1410.24,235.468 1410.81,235.36 1411.38,235.108 1411.95,234.927 1412.51,234.674 1413.08,234.591 1413.65,234.44 1414.22,237.24 1414.79,235.994 1415.36,234.74 1415.92,232.57 1416.49,235.472 1417.06,234.102 1417.63,235.075 1418.2,236.743 1418.77,234.454 1419.33,235.412 1419.9,233.261 1420.47,234.118 1421.04,235.752 1421.61,235.535 1422.18,234.24 1422.74,233.112 1423.31,233.197 1423.88,234.127 1424.45,232.998 1425.02,233.873 1425.59,233.756 1426.15,231.263 1426.72,230.962 1427.29,234.81 1427.86,234.642 1428.43,235.292 1429,235.223 1429.56,236.198 1430.13,237.157 1430.7,235.6 1431.27,234.181 1431.84,232.968 1432.41,232.727 1432.97,233.83 1433.54,233.659 1434.11,234.65 1434.68,235.485 1435.25,232.11 1435.82,232.12 1436.38,229.31 1436.95,230.339 1437.52,230.578 1438.09,231.498 1438.66,232.311 1439.23,231.137 1439.79,231.231 1440.36,232.928 1440.93,230.623 1441.5,229.739 1442.07,232.056 1442.64,231.833 1443.2,231.681 1443.77,231.661 1444.34,227.57 1444.91,226.749 1445.48,227.116 1446.05,226.456 1446.61,225.789 1447.18,226.242 1447.75,227.588 1448.32,228.719 1448.89,227.876 1449.46,230.353 1450.02,227.614 1450.59,228.702 1451.16,231.966 1451.73,232.959 1452.3,231.987 1452.87,230.84 1453.43,229.889 1454,232.986 1454.57,233.056 1455.14,232.131 1455.71,232.176 1456.28,232.262 1456.84,233.345 1457.41,233.955 1457.98,234.823 1458.55,234.397 1459.12,233.231 1459.69,234.285 1460.25,235.15 1460.82,232.681 1461.39,232.815 1461.96,234.595 1462.53,237.479 1463.1,238.947 1463.66,238.242 1464.23,236.484 1464.8,236.021 1465.37,237.676 1465.94,238.949 1466.51,236.362 1467.07,236.909 1467.64,233.527 1468.21,231.252 1468.78,231.177 1469.35,232.167 1469.92,230.199 1470.48,230.072 1471.05,229.051 1471.62,229.825 1472.19,231.99 1472.76,233.071 1473.33,231.856 1473.89,230.776 1474.46,229.711 1475.03,231.781 1475.6,232.945 1476.17,233.729 1476.74,234.587 1477.31,234.472 1477.87,234.029 1478.44,231.661 1479.01,234.339 1479.58,235.246 1480.15,235.059 1480.72,234.664 1481.28,234.548 1481.85,235.062 1482.42,234.847 1482.99,234.513 1483.56,234.188 1484.13,235.169 1484.69,231.859 1485.26,231.689 1485.83,231.627 1486.4,231.602 1486.97,230.395 1487.54,230.75 1488.1,229.577 1488.67,228.546 1489.24,226.722 1489.81,226.858 1490.38,226.17 1490.95,227.228 1491.51,228.486 1492.08,228.639 1492.65,230.157 1493.22,229.04 1493.79,231.288 1494.36,228.289 1494.92,224.469 1495.49,222.912 1496.06,222.501 1496.63,223.133 1497.2,222.828 1497.77,223.421 1498.33,224.097 1498.9,225.708 1499.47,226.072 1500.04,225.579 1500.61,225.83 1501.18,226.043 1501.74,226.291 1502.31,227.745 1502.88,228.098 1503.45,231.572 1504.02,231.532 1504.59,229.526 1505.15,229.793 1505.72,230.93 1506.29,231.242 1506.86,232.238 1507.43,231.15 1508,230.22 1508.56,233.741 1509.13,232.611 1509.7,233.788 1510.27,234.868 1510.84,234.46 1511.41,234.496 1511.97,237.441 1512.54,238.096 1513.11,237.653 1513.68,238.264 1514.25,237.812 1514.82,236.352 1515.38,235.195 1515.95,234.006 1516.52,232.779 1517.09,233.651 1517.66,232.432 1518.23,231.46 1518.79,231.533 1519.36,232.606 1519.93,232.354 1520.5,231.62 1521.07,232.707 1521.64,230.437 1522.2,231.738 1522.77,232.694 1523.34,233.664 1523.91,234.618 1524.48,235.16 1525.05,232.824 1525.61,231.679 1526.18,229.899 1526.75,231.203 1527.32,230.158 1527.89,229.527 1528.46,229.062 1529.02,229.264 1529.59,232.416 1530.16,230.171 1530.73,230.327 1531.3,230.496 1531.87,231.694 1532.43,229.907 1533,228.15 1533.57,229.496 1534.14,229.847 1534.71,230.871 1535.28,229.823 1535.84,232.97 1536.41,229.789 1536.98,231.854 1537.55,229.755 1538.12,230.076 1538.69,230.588 1539.25,230.669 1539.82,230.69 1540.39,231.814 1540.96,228.542 1541.53,228.643 1542.1,228.936 1542.66,229.136 1543.23,230.302 1543.8,231.39 1544.37,233.515 1544.94,235.57 1545.51,235.414 1546.08,234.981 1546.64,235.964 1547.21,234.643 1547.78,232.684 1548.35,233.816 1548.92,234.493 1549.49,233.247 1550.05,233.156 1550.62,234.062 1551.19,235.316 1551.76,232.92 1552.33,232.677 1552.9,232.486 1553.46,232.509 1554.03,234.415 1554.6,233.971 1555.17,233.776 1555.74,234.775 1556.31,233.481 1556.87,233.294 1557.44,233.091 1558.01,233.928 1558.58,232.765 1559.15,233.443 1559.72,233.28 1560.28,232.256 1560.85,232.319 1561.42,234.208 1561.99,234.078 1562.56,233.973 1563.13,234.688 1563.69,234.629 1564.26,232.278 1564.83,232.274 1565.4,233.255 1565.97,233.109 1566.54,233.969 1567.1,234.745 1567.67,234.706 1568.24,233.548 1568.81,232.302 1569.38,231.395 1569.95,231.292 1570.51,230.443 1571.08,228.521 1571.65,230.947 1572.22,229.826 1572.79,231.852 1573.36,230.816 1573.92,231.962 1574.49,231.979 1575.06,229.723 1575.63,229.835 1576.2,231.85 1576.77,232.919 1577.33,233.999 1577.9,232.696 1578.47,231.544 1579.04,233.701 1579.61,231.46 1580.18,232.385 1580.74,228.235 1581.31,229.675 1581.88,229.911 1582.45,228.035 1583.02,227.215 1583.59,226.532 1584.15,227.907 1584.72,229.02 1585.29,228.986 1585.86,227.338 1586.43,225.543 1587,226.081 1587.56,228.627 1588.13,225.753 1588.7,226.19 1589.27,225.459 1589.84,224.929 1590.41,225.199 1590.97,224.494 1591.54,228.177 1592.11,229.629 1592.68,231.079 1593.25,231.238 1593.82,233.549 1594.38,234.777 1594.95,234.793 1595.52,235.841 1596.09,233.69 1596.66,232.64 1597.23,233.804 1597.79,230.621 1598.36,228.811 1598.93,230.098 1599.5,232.591 1600.07,232.601 1600.64,230.712 1601.2,231.993 1601.77,232.894 1602.34,235.967 1602.91,237.714 1603.48,237.492 1604.05,237.431 1604.61,237.131 1605.18,234.903 1605.75,235.886 1606.32,235.461 1606.89,232.443 1607.46,232.29 1608.02,232.273 1608.59,230.422 1609.16,229.501 1609.73,229.648 1610.3,229.844 1610.87,228.958 1611.43,228.199 1612,227.37 1612.57,224.723 1613.14,224.417 1613.71,228.119 1614.28,228.352 1614.84,228.595 1615.41,227.836 1615.98,225.262 1616.55,228.831 1617.12,227.215 1617.69,225.599 1618.26,228.206 1618.82,229.792 1619.39,229.966 1619.96,231.231 1620.53,232.477 1621.1,233.49 1621.67,235.494 1622.23,236.384 1622.8,235.151 1623.37,234.021 1623.94,230.061 1624.51,230.254 1625.08,231.428 1625.64,233.724 1626.21,231.578 1626.78,231.584 1627.35,231.725 1627.92,233.984 1628.49,233.996 1629.05,235.091 1629.62,236.122 1630.19,236.024 1630.76,237.001 1631.33,236.644 1631.9,236.445 1632.46,236.268 1633.03,233.913 1633.6,235.029 1634.17,234.596 1634.74,234.398 1635.31,234.391 1635.87,234.042 1636.44,233.798 1637.01,235.651 1637.58,238.457 1638.15,238.922 1638.72,237.594 1639.28,235.408 1639.85,234.993 1640.42,233.896 1640.99,232.647 1641.56,235.516 1642.13,236.273 1642.69,234.662 1643.26,235.522 1643.83,233.065 1644.4,232.875 1644.97,232.624 1645.54,232.652 1646.1,234.788 1646.67,233.554 1647.24,234.357 1647.81,232.076 1648.38,234.135 1648.95,232.822 1649.51,231.808 1650.08,231.86 1650.65,232.801 1651.22,235.617 1651.79,236.355 1652.36,237.979 1652.92,237.223 1653.49,236.729 1654.06,233.13 1654.63,231.767 1655.2,232.601 1655.77,231.427 1656.33,233.079 1656.9,232.733 1657.47,231.665 1658.04,232.505 1658.61,232.394 1659.18,234.126 1659.74,233.657 1660.31,232.443 1660.88,232.32 1661.45,231.949 1662.02,233.729 1662.59,232.574 1663.15,232.468 1663.72,233.482 1664.29,233.279 1664.86,235.065 1665.43,234.817 1666,234.604 1666.56,234.217 1667.13,231.813 1667.7,232.803 1668.27,232.441 1668.84,229.086 1669.41,228.881 1669.97,229.132 1670.54,230.118 1671.11,227.054 1671.68,224.973 1672.25,226.185 1672.82,226.565 1673.38,226.579 1673.95,228.09 1674.52,228.296 1675.09,227.43 1675.66,229.676 1676.23,227.756 1676.79,226.872 1677.36,227.104 1677.93,225.288 1678.5,226.706 1679.07,226.136 1679.64,224.45 1680.2,223.829 1680.77,223.295 1681.34,220.968 1681.91,223.912 1682.48,222.485 1683.05,227.268 1683.61,228.81 1684.18,226.791 1684.75,227.201 1685.32,228.838 1685.89,228.284 1686.46,228.532 1687.02,230.956 1687.59,231.13 1688.16,231.423 1688.73,231.427 1689.3,231.456 1689.87,230.535 1690.44,231.739 1691,231.081 1691.57,228.027 1692.14,229.276 1692.71,228.35 1693.28,229.687 1693.85,230.045 1694.41,233.408 1694.98,234.227 1695.55,235.276 1696.12,235.064 1696.69,235.893 1697.26,235.551 1697.82,235.452 1698.39,235.337 1698.96,237.042 1699.53,234.845 1700.1,234.662 1700.67,235.708 1701.23,235.3 1701.8,234.112 1702.37,235.006 1702.94,234.581 1703.51,233.295 1704.08,232.138 1704.64,232.128 1705.21,229.923 1705.78,229.131 1706.35,226.265 1706.92,226.815 1707.49,226.236 1708.05,225.863 1708.62,226.724 1709.19,225.242 1709.76,226.145 1710.33,227.588 1710.9,227.795 1711.46,228.059 1712.03,227.317 1712.6,226.631 1713.17,225.192 1713.74,225.799 1714.31,223.324 1714.87,224.3 1715.44,226.179 1716.01,223.911 1716.58,225.594 1717.15,226.293 1717.72,228.963 1718.28,234.605 1718.85,237.64 1719.42,237.669 1719.99,235.256 1720.56,237.447 1721.13,239.423 1721.69,240.177 1722.26,238.84 1722.83,238.34 1723.4,238.991 1723.97,238.623 1724.54,240.293 1725.1,241.781 1725.67,239.999 1726.24,240.365 1726.81,240.911 1727.38,237.241 1727.95,234.888 1728.51,234.803 1729.08,236.852 1729.65,237.595 1730.22,238.434 1730.79,240.208 1731.36,241.857 1731.92,240.082 1732.49,238.357 1733.06,237.956 1733.63,236.345 1734.2,237.199 1734.77,237.859 1735.33,240.543 1735.9,237.977 1736.47,239.444 1737.04,242.001 1737.61,240.138 1738.18,239.312 1738.74,236.755 1739.31,235.341 1739.88,232.869 1740.45,231.603 1741.02,231.321 1741.59,230.163 1742.15,229.21 1742.72,229.548 1743.29,228.577 1743.86,225.713 1744.43,227.13 1745,229.353 1745.56,229.533 1746.13,230.612 1746.7,230.593 1747.27,230.658 1747.84,231.487 1748.41,230.628 1748.97,231.703 1749.54,232.653 1750.11,232.497 1750.68,232.432 1751.25,230.159 1751.82,229.144 1752.38,229.098 1752.95,230.326 1753.52,230.481 1754.09,229.393 1754.66,230.537 1755.23,230.552 1755.79,230.803 1756.36,231 1756.93,229.922 1757.5,231.978 1758.07,231.978 1758.64,231.889 1759.21,233.649 1759.77,231.426 1760.34,232.542 1760.91,230.411 1761.48,230.548 1762.05,230.701 1762.62,229.467 1763.18,230.537 1763.75,231.512 1764.32,232.518 1764.89,231.298 1765.46,231.453 1766.03,230.241 1766.59,230.524 1767.16,230.542 1767.73,229.525 1768.3,231.539 1768.87,230.342 1769.44,231.139 1770,232.19 1770.57,232.042 1771.14,233.026 1771.71,232.785 1772.28,232.762 1772.85,233.391 1773.41,232.258 1773.98,232.027 1774.55,229.784 1775.12,228.755 1775.69,228.868 1776.26,228.871 1776.82,228.921 1777.39,229.094 1777.96,228.268 1778.53,231.524 1779.1,231.713 1779.67,232.694 1780.23,233.509 1780.8,232.288 1781.37,232.281 1781.94,228.975 1782.51,229.124 1783.08,230.539 1783.64,230.536 1784.21,230.769 1784.78,230.997 1785.35,231.192 1785.92,233.402 1786.49,231.308 1787.05,232.431 1787.62,232.531 1788.19,232.582 1788.76,233.421 1789.33,232.307 1789.9,234.315 1790.46,233.38 1791.03,232.211 1791.6,232.169 1792.17,232.068 1792.74,234.331 1793.31,235.182 1793.87,235.9 1794.44,234.461 1795.01,235.148 1795.58,234.932 1796.15,234.678 1796.72,234.295 1797.28,233.903 1797.85,234.615 1798.42,232.267 1798.99,231.23 1799.56,230.574 1800.13,228.753 1800.69,226.859 1801.26,225.21 1801.83,225.728 1802.4,226.161 1802.97,228.665 1803.54,227.927 1804.1,229.308 1804.67,229.485 1805.24,230.447 1805.81,232.666 1806.38,232.691 1806.95,232.792 1807.51,231.643 1808.08,231.527 1808.65,232.555 1809.22,230.526 1809.79,228.418 1810.36,229.831 1810.92,232.117 1811.49,233.278 1812.06,232.086 1812.63,234.181 1813.2,235.152 1813.77,235.956 1814.33,237.455 1814.9,237.9 1815.47,238.37 1816.04,236.941 1816.61,237.574 1817.18,237.039 1817.74,236.575 1818.31,237.038 1818.88,235.456 1819.45,232.789 1820.02,233.562 1820.59,233.266 1821.15,234.016 1821.72,234.877 1822.29,233.612 1822.86,233.538 1823.43,233.331 1824,232.16 1824.56,231.902 1825.13,231.895 1825.7,229.763 1826.27,231.894 1826.84,231.959 1827.41,232.745 1827.97,232.654 1828.54,230.468 1829.11,232.487 1829.68,234.45 1830.25,233.164 1830.82,231.998 1831.39,231.987 1831.95,231.742 1832.52,230.359 1833.09,230.418 1833.66,230.526 1834.23,229.587 1834.8,229.734 1835.36,230.921 1835.93,231.674 1836.5,232.617 1837.07,232.378 1837.64,233.096 1838.21,232.796 1838.77,231.623 1839.34,231.532 1839.91,230.478 1840.48,228.185 1841.05,229.036 1841.62,229.232 1842.18,229.4 1842.75,232.498 1843.32,232.7 1843.89,231.641 1844.46,231.532 1845.03,231.503 1845.59,230.341 1846.16,229.621 1846.73,231.909 1847.3,232.768 1847.87,232.636 1848.44,232.55 1849,232.329 1849.57,231.213 1850.14,231.133 1850.71,233.008 1851.28,231.807 1851.85,228.707 1852.41,228.061 1852.98,227.154 1853.55,227.231 1854.12,225.557 1854.69,227.133 1855.26,228.283 1855.82,229.468 1856.39,226.716 1856.96,226.144 1857.53,227.625 1858.1,229.156 1858.67,231.46 1859.23,233.368 1859.8,232.208 1860.37,230.954 1860.94,229.937 1861.51,230.248 1862.08,230.354 1862.64,228.397 1863.21,227.588 1863.78,228.861 1864.35,231.181 1864.92,232.043 1865.49,231.886 1866.05,233.134 1866.62,232.214 1867.19,232.222 1867.76,229.035 1868.33,228.236 1868.9,229.443 1869.46,228.527 1870.03,231.827 1870.6,231.79 1871.17,234.044 1871.74,232.92 1872.31,235.988 1872.87,235.783 1873.44,235.734 1874.01,235.488 1874.58,233.322 1875.15,233.125 1875.72,231.961 1876.28,232.055 1876.85,231.909 1877.42,229.877 1877.99,230.041 1878.56,231.285 1879.13,231.48 1879.69,231.914 1880.26,234.001 1880.83,234.752 1881.4,234.701 1881.97,235.344 1882.54,236.905 1883.1,234.684 1883.67,233.405 1884.24,236.402 1884.81,235.968 1885.38,235.646 1885.95,235.318 1886.51,234.852 1887.08,233.301 1887.65,230.991 1888.22,232.26 1888.79,231.19 1889.36,228.159 1889.92,226.443 1890.49,226.753 1891.06,228.167 1891.63,229.327 1892.2,227.552 1892.77,227.897 1893.33,228.095 1893.9,229.376 1894.47,229.36 1895.04,228.496 1895.61,228.554 1896.18,228.679 1896.74,229.011 1897.31,231.052 1897.88,231.245 1898.45,233.298 1899.02,233.193 1899.59,233.066 1900.16,232.144 1900.72,230.058 1901.29,230.04 1901.86,231.131 1902.43,230.19 1903,230.274 1903.57,232.559 1904.13,231.452 1904.7,232.497 1905.27,230.308 1905.84,230.399 1906.41,229.48 1906.98,228.566 1907.54,224.985 1908.11,222.499 1908.68,224.236 1909.25,224.701 1909.82,225.254 1910.39,226.851 1910.95,227.277 1911.52,229.741 1912.09,230.034 1912.66,231.403 1913.23,231.488 1913.8,231.718 1914.36,230.82 1914.93,232.981 1915.5,233.212 1916.07,231.136 1916.64,232.316 1917.21,232.278 1917.77,233.394 1918.34,234.214 1918.91,232.075 1919.48,232.259 1920.05,232.177 1920.62,232.171 1921.18,233.211 1921.75,233.422 1922.32,232.26 1922.89,232.278 1923.46,230.335 1924.03,232.452 1924.59,234.633 1925.16,233.467 1925.73,231.367 1926.3,231.389 1926.87,231.417 1927.44,229.545 1928,230.953 1928.57,233.157 1929.14,232.062 1929.71,233.096 1930.28,235.298 1930.85,233.853 1931.41,234.807 1931.98,233.805 1932.55,231.493 1933.12,232.566 1933.69,234.384 1934.26,235.478 1934.82,232.406 1935.39,232.573 1935.96,233.463 1936.53,234.501 1937.1,232.438 1937.67,232.44 1938.23,231.418 1938.8,232.639 1939.37,233.816 1939.94,234.666 1940.51,232.162 1941.08,231.058 1941.64,232.127 1942.21,231.048 1942.78,230.225 1943.35,229.451 1943.92,228.587 1944.49,228.807 1945.05,228.942 1945.62,229.331 1946.19,229.487 1946.76,228.529 1947.33,228.579 1947.9,226.886 1948.46,228.287 1949.03,227.548 1949.6,233.119 1950.17,230.233 1950.74,230.599 1951.31,233.856 1951.87,232.653 1952.44,231.572 1953.01,231.732 1953.58,230.686 1954.15,230.921 1954.72,229.867 1955.28,228.964 1955.85,228.31 1956.42,228.525 1956.99,228.131 1957.56,228.268 1958.13,230.528 1958.69,230.552 1959.26,231.999 1959.83,232.137 1960.4,232.25 1960.97,231.298 1961.54,230.557 1962.1,230.591 1962.67,230.738 1963.24,230.042 1963.81,230.225 1964.38,230.589 1964.95,232.118 1965.51,233.019 1966.08,235 1966.65,234.954 1967.22,231.978 1967.79,233.005 1968.36,234.033 1968.92,235.084 1969.49,235.993 1970.06,235.722 1970.63,235.649 1971.2,234.379 1971.77,233.913 1972.34,233.607 1972.9,234.506 1973.47,234.666 1974.04,236.659 1974.61,236.39 1975.18,236.191 1975.75,236.832 1976.31,235.746 1976.88,236.562 1977.45,235.45 1978.02,234.174 1978.59,233.993 1979.16,233.637 1979.72,233.489 1980.29,234.484 1980.86,237.308 1981.43,235.857 1982,235.532 1982.57,235.05 1983.13,235.958 1983.7,232.632 1984.27,232.547 1984.84,232.457 1985.41,234.431 1985.98,231.149 1986.54,230.367 1987.11,231.775 1987.68,230.916 1988.25,231.877 1988.82,231.058 1989.39,232.502 1989.95,231.385 1990.52,231.46 1991.09,233.689 1991.66,234.692 1992.23,231.494 1992.8,231.476 1993.36,229.401 1993.93,230.556 1994.5,228.484 1995.07,230.008 1995.64,230.983 1996.21,229.877 1996.77,228.895 1997.34,229.1 1997.91,229.423 1998.48,228.648 1999.05,227.602 1999.62,227.988 2000.18,229.551 2000.75,230.855 2001.32,231.825 2001.89,232.08 2002.46,233.456 2003.03,232.414 2003.59,230.383 2004.16,229.445 2004.73,228.682 2005.3,230.967 2005.87,230.989 2006.44,232.179 2007,233.388 2007.57,236.349 2008.14,235.831 2008.71,235.594 2009.28,236.505 2009.85,236.047 2010.41,237.968 2010.98,236.73 2011.55,236.602 2012.12,237.458 2012.69,237.043 2013.26,237.831 2013.82,238.36 2014.39,239.126 2014.96,238.435 2015.53,236.985 2016.1,238.568 2016.67,237.92 2017.23,238.607 2017.8,236.862 2018.37,235.49 2018.94,236.179 2019.51,234.699 2020.08,235.314 2020.64,235.216 2021.21,234.913 2021.78,232.429 2022.35,232.059 2022.92,233.993 2023.49,233.729 2024.05,235.637 2024.62,235.45 2025.19,232.979 2025.76,230.686 2026.33,231.592 2026.9,230.628 2027.46,229.56 2028.03,227.726 2028.6,226.684 2029.17,226.955 2029.74,227.927 2030.31,229.152 2030.87,229.179 2031.44,229.277 2032.01,231.711 2032.58,233.807 2033.15,233.604 2033.72,233.55 2034.28,233.185 2034.85,234.13 2035.42,234.114 2035.99,234.006 2036.56,232.734 2037.13,233.539 2037.69,234.351 2038.26,235.219 2038.83,231.776 2039.4,231.747 2039.97,229.574 2040.54,230.893 2041.11,231.086 2041.67,232.271 2042.24,234.067 2042.81,235.833 2043.38,234.417 2043.95,236.274 2044.52,236.852 2045.08,232.339 2045.65,232.026 2046.22,231.743 2046.79,231.538 2047.36,229.257 2047.93,230.379 2048.49,228.169 2049.06,229.503 2049.63,228.416 2050.2,228.242 2050.77,228.291 2051.34,226.414 2051.9,225.575 2052.47,226.054 2053.04,227.115 2053.61,230.255 2054.18,230.229 2054.75,230.367 2055.31,230.268 2055.88,230.091 2056.45,228.861 2057.02,230.764 2057.59,230.946 2058.16,228.657 2058.72,227.764 2059.29,229.078 2059.86,229.037 2060.43,230.208 2061,230.006 2061.57,231.345 2062.13,229.195 2062.7,227.198 2063.27,228.608 2063.84,227.751 2064.41,227.012 2064.98,225.296 2065.54,228.95 2066.11,228.083 2066.68,229.293 2067.25,230.364 2067.82,230.438 2068.39,228.555 2068.95,227.719 2069.52,227.953 2070.09,228.32 2070.66,228.705 2071.23,226.8 2071.8,225.194 2072.36,222.751 2072.93,220.343 2073.5,221.973 2074.07,222.684 2074.64,222.655 2075.21,224.511 2075.77,222.895 2076.34,223.659 2076.91,222.386 2077.48,226.419 2078.05,224.927 2078.62,223.554 2079.18,224.34 2079.75,225.09 2080.32,228.9 2080.89,230.579 2081.46,229.779 2082.03,230.116 2082.59,232.627 2083.16,233.819 2083.73,232.968 2084.3,236.216 2084.87,235.101 2085.44,234.149 2086,233.276 2086.57,234.478 2087.14,234.386 2087.71,232.318 2088.28,231.459 2088.85,232.722 2089.41,229.801 2089.98,230.104 2090.55,232.514 2091.12,232.615 2091.69,231.741 2092.26,233.635 2092.82,232.625 2093.39,233.746 2093.96,234.879 2094.53,233.601 2095.1,234.425 2095.67,234.376 2096.23,233.108 2096.8,235.374 2097.37,235.271 2097.94,236.191 2098.51,237.104 2099.08,239.98 2099.64,238.438 2100.21,238.984 2100.78,240.569 2101.35,239.035 2101.92,238.76 2102.49,239.4 2103.05,238.781 2103.62,238.355 2104.19,236.014 2104.76,236.661 2105.33,236.245 2105.9,235.997 2106.46,234.362 2107.03,233.062 2107.6,234.022 2108.17,233.862 2108.74,232.597 2109.31,232.531 2109.87,232.619 2110.44,233.599 2111.01,233.397 2111.58,233.164 2112.15,236.087 2112.72,232.634 2113.29,233.697 2113.85,233.799 2114.42,234.615 2114.99,235.468 2115.56,236.296 2116.13,235.035 2116.7,231.94 2117.26,231.14 2117.83,232.167 2118.4,234.951 2118.97,233.803 2119.54,230.606 2120.11,230.595 2120.67,230.66 2121.24,230.851 2121.81,233.947 2122.38,233.586 2122.95,231.237 2123.52,230.009 2124.08,231.244 2124.65,232.433 2125.22,231.338 2125.79,231.416 2126.36,230.382 2126.93,230.606 2127.49,229.79 2128.06,229.872 2128.63,229.931 2129.2,230.059 2129.77,230.079 2130.34,228.942 2130.9,230.023 2131.47,231.132 2132.04,232.255 2132.61,233.365 2133.18,232.339 2133.75,233.289 2134.31,234.128 2134.88,235.22 2135.45,234.944 2136.02,235.717 2136.59,236.581 2137.16,235.056 2137.72,236.728 2138.29,237.505 2138.86,236.13 2139.43,237.757 2140,238.381 2140.57,235.928 2141.13,236.436 2141.7,234.837 2142.27,234.423 2142.84,231.981 2143.41,233.798 2143.98,233.55 2144.54,233.377 2145.11,232.251 2145.68,230.05 2146.25,231.414 2146.82,232.243 2147.39,229.222 2147.95,229.167 2148.52,228.223 2149.09,230.325 2149.66,230.415 2150.23,230.387 2150.8,229.949 2151.36,229.081 2151.93,228.929 2152.5,229.917 2153.07,230.121 2153.64,231.244 2154.21,229.23 2154.77,227.317 2155.34,228.417 2155.91,226.595 2156.48,225.922 2157.05,227.336 2157.62,227.474 2158.18,227.734 2158.75,227.853 2159.32,231.388 2159.89,233.519 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.04 ± 0.022\n  with uncertainty of ± 0.0019732304351112425\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0156 ± (0.0039699, 0.00397818) (MC)\n  95% confidence interval: [-4.02352, -4.00791]) (MC)\n  linear error propagation: -4.01578 ± 0.00404963\n  |δ_y| = |0.00332173| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0155986416143685, val_l = 0.007920400650683668, val_u = 0.007689506833975734)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip450\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip451\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip452\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1157.27 2211.02,1157.27 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,885.441 2211.02,885.441 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,613.615 2211.02,613.615 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,341.789 2211.02,341.789 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1157.27 365.751,1157.27 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,885.441 365.751,885.441 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,613.615 365.751,613.615 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,341.789 365.751,341.789 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M298.909 1143.07 Q295.298 1143.07 293.469 1146.63 Q291.664 1150.17 291.664 1157.3 Q291.664 1164.41 293.469 1167.97 Q295.298 1171.52 298.909 1171.52 Q302.543 1171.52 304.349 1167.97 Q306.177 1164.41 306.177 1157.3 Q306.177 1150.17 304.349 1146.63 Q302.543 1143.07 298.909 1143.07 M298.909 1139.36 Q304.719 1139.36 307.775 1143.97 Q310.853 1148.55 310.853 1157.3 Q310.853 1166.03 307.775 1170.64 Q304.719 1175.22 298.909 1175.22 Q293.099 1175.22 290.02 1170.64 Q286.964 1166.03 286.964 1157.3 Q286.964 1148.55 290.02 1143.97 Q293.099 1139.36 298.909 1139.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M262.775 898.786 L279.094 898.786 L279.094 902.721 L257.15 902.721 L257.15 898.786 Q259.812 896.032 264.395 891.402 Q269.002 886.749 270.182 885.407 Q272.428 882.883 273.307 881.147 Q274.21 879.388 274.21 877.698 Q274.21 874.944 272.266 873.208 Q270.344 871.472 267.242 871.472 Q265.043 871.472 262.59 872.235 Q260.159 872.999 257.381 874.55 L257.381 869.828 Q260.205 868.694 262.659 868.115 Q265.113 867.536 267.15 867.536 Q272.52 867.536 275.715 870.222 Q278.909 872.907 278.909 877.397 Q278.909 879.527 278.099 881.448 Q277.312 883.346 275.205 885.939 Q274.627 886.61 271.525 889.828 Q268.423 893.022 262.775 898.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M298.909 871.24 Q295.298 871.24 293.469 874.805 Q291.664 878.346 291.664 885.476 Q291.664 892.582 293.469 896.147 Q295.298 899.689 298.909 899.689 Q302.543 899.689 304.349 896.147 Q306.177 892.582 306.177 885.476 Q306.177 878.346 304.349 874.805 Q302.543 871.24 298.909 871.24 M298.909 867.536 Q304.719 867.536 307.775 872.143 Q310.853 876.726 310.853 885.476 Q310.853 894.203 307.775 898.809 Q304.719 903.393 298.909 903.393 Q293.099 903.393 290.02 898.809 Q286.964 894.203 286.964 885.476 Q286.964 876.726 290.02 872.143 Q293.099 867.536 298.909 867.536 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M271.594 600.409 L259.789 618.858 L271.594 618.858 L271.594 600.409 M270.367 596.335 L276.247 596.335 L276.247 618.858 L281.177 618.858 L281.177 622.747 L276.247 622.747 L276.247 630.895 L271.594 630.895 L271.594 622.747 L255.992 622.747 L255.992 618.233 L270.367 596.335 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M298.909 599.414 Q295.298 599.414 293.469 602.978 Q291.664 606.52 291.664 613.65 Q291.664 620.756 293.469 624.321 Q295.298 627.863 298.909 627.863 Q302.543 627.863 304.349 624.321 Q306.177 620.756 306.177 613.65 Q306.177 606.52 304.349 602.978 Q302.543 599.414 298.909 599.414 M298.909 595.71 Q304.719 595.71 307.775 600.316 Q310.853 604.9 310.853 613.65 Q310.853 622.377 307.775 626.983 Q304.719 631.566 298.909 631.566 Q293.099 631.566 290.02 626.983 Q286.964 622.377 286.964 613.65 Q286.964 604.9 290.02 600.316 Q293.099 595.71 298.909 595.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M269.326 339.925 Q266.178 339.925 264.326 342.078 Q262.497 344.231 262.497 347.981 Q262.497 351.708 264.326 353.883 Q266.178 356.036 269.326 356.036 Q272.474 356.036 274.303 353.883 Q276.154 351.708 276.154 347.981 Q276.154 344.231 274.303 342.078 Q272.474 339.925 269.326 339.925 M278.608 325.273 L278.608 329.532 Q276.849 328.698 275.043 328.259 Q273.261 327.819 271.502 327.819 Q266.872 327.819 264.418 330.944 Q261.988 334.069 261.641 340.388 Q263.006 338.374 265.066 337.31 Q267.127 336.222 269.603 336.222 Q274.812 336.222 277.821 339.393 Q280.853 342.541 280.853 347.981 Q280.853 353.305 277.705 356.522 Q274.557 359.74 269.326 359.74 Q263.33 359.74 260.159 355.157 Q256.988 350.55 256.988 341.823 Q256.988 333.629 260.877 328.768 Q264.766 323.884 271.316 323.884 Q273.076 323.884 274.858 324.231 Q276.664 324.578 278.608 325.273 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M298.909 327.587 Q295.298 327.587 293.469 331.152 Q291.664 334.694 291.664 341.823 Q291.664 348.93 293.469 352.495 Q295.298 356.036 298.909 356.036 Q302.543 356.036 304.349 352.495 Q306.177 348.93 306.177 341.823 Q306.177 334.694 304.349 331.152 Q302.543 327.587 298.909 327.587 M298.909 323.884 Q304.719 323.884 307.775 328.49 Q310.853 333.073 310.853 341.823 Q310.853 350.55 307.775 355.157 Q304.719 359.74 298.909 359.74 Q293.099 359.74 290.02 355.157 Q286.964 350.55 286.964 341.823 Q286.964 333.073 290.02 328.49 Q293.099 323.884 298.909 323.884 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1057.12 400.199,965.12 400.786,880.705 401.372,803.366 401.958,732.634 402.545,668.071 403.131,609.274 403.718,555.868 404.304,507.502 404.891,463.851 405.477,424.61 406.063,389.494 406.65,358.234 407.236,330.582 407.823,306.3 408.409,285.17 408.995,266.981 409.582,251.538 410.168,238.657 410.755,228.164 411.341,219.895 411.927,293.552 412.514,287.039 413.1,316.296 413.687,371.705 414.273,367.298 414.86,364.137 415.446,362.489 416.032,363.345 416.619,364.767 417.205,387.098 417.792,409.184 418.378,430.832 418.964,436.008 419.551,457.189 420.137,464.227 420.724,472.048 421.31,493.62 421.896,501.251 422.483,509.933 423.069,519.267 423.656,538.635 424.242,548.301 424.829,576.277 425.415,587.628 426.001,599.083 426.588,611.371 427.174,622.803 427.761,641.426 428.347,665.196 428.933,681.396 429.52,691.39 430.106,701.233 430.693,711.367 431.279,721.82 431.865,731.804 432.452,746.503 433.038,761.319 433.625,771.444 434.211,794.295 434.798,807.451 435.384,820.577 435.97,829.193 436.557,841.521 437.143,853.562 437.73,865.025 438.316,876.337 438.902,890.652 439.489,907.13 440.075,916.867 440.662,929.455 441.248,941.616 441.835,950.707 442.421,959.349 443.007,970.409 443.594,978.544 444.18,983.914 444.767,994.307 445.353,999.362 445.939,1004.54 446.526,1009.68 447.112,1016.86 447.699,1028.42 448.285,1039.65 448.871,1046.07 449.458,1052.49 450.044,1058.62 450.631,1064.3 451.217,1073.85 451.804,1079.33 452.39,1084.37 452.976,1089.63 453.563,1096.17 454.149,1099.02 454.736,1103.43 455.322,1104.34 455.908,1107.43 456.495,1113.36 457.081,1116.03 457.668,1121.98 458.254,1126.06 458.84,1131.83 459.427,1139.19 460.013,1144.35 460.6,1147.56 461.186,1152.64 461.773,1160.62 462.359,1163.89 462.945,1166.76 463.532,1168.13 464.118,1172.31 464.705,1175.01 465.291,1177.91 465.877,1180.26 466.464,1181.4 467.05,1181.09 467.637,1183.75 468.223,1186.54 468.809,1191.73 469.396,1195.53 469.982,1200.49 470.569,1201.31 471.155,1203.3 471.742,1206.59 472.328,1211 472.914,1212.57 473.501,1215.09 474.087,1216.57 474.674,1218.05 475.26,1220.7 475.846,1220.65 476.433,1223.38 477.019,1223.23 477.606,1221.95 478.192,1221.88 478.778,1223.38 479.365,1225.93 479.951,1228.3 480.538,1226.49 481.124,1226.42 481.711,1225.4 482.297,1228.09 482.883,1228.08 483.47,1229.32 484.056,1229.22 484.643,1228.13 485.229,1227.94 485.815,1226.69 486.402,1228.02 486.988,1228.14 487.575,1227.96 488.161,1227.97 488.748,1227.98 489.334,1229.2 489.92,1229.26 490.507,1230.38 491.093,1231.58 491.68,1235.16 492.266,1237.44 492.852,1239.6 493.439,1240.19 494.025,1244.36 494.612,1243.79 495.198,1242.95 495.784,1241.07 496.371,1240.6 496.957,1239.13 497.544,1236.28 498.13,1237.33 498.717,1239.34 499.303,1240.05 499.889,1238.46 500.476,1239.34 501.062,1238.8 501.649,1241.99 502.235,1243.78 502.821,1241.86 503.408,1244.8 503.994,1248.55 504.581,1248.77 505.167,1247.82 505.753,1249.25 506.34,1248.41 506.926,1247.5 507.513,1245.49 508.099,1245.77 508.686,1245.18 509.272,1245.48 509.858,1245.81 510.445,1245.23 511.031,1244.55 511.618,1245.24 512.204,1244.58 512.79,1244.1 513.377,1245.79 513.963,1244.91 514.55,1241.98 515.136,1242.53 515.722,1241.93 516.309,1243.85 516.895,1244.23 517.482,1243.54 518.068,1245.31 518.655,1243.42 519.241,1243.86 519.827,1243.22 520.414,1243.5 521,1241.59 521.587,1243.56 522.173,1245.12 522.759,1244.25 523.346,1245.91 523.932,1247.53 524.519,1250.04 525.105,1248.86 525.691,1247.87 526.278,1248.07 526.864,1250.53 527.451,1249.45 528.037,1249.55 528.624,1249.94 529.21,1246.73 529.796,1245.92 530.383,1241.61 530.969,1238.68 531.556,1238.34 532.142,1238.17 532.728,1240.03 533.315,1239.8 533.901,1240.3 534.488,1238.65 535.074,1239.57 535.661,1239.14 536.247,1236.21 536.833,1237.05 537.42,1237.7 538.006,1237.32 538.593,1236.91 539.179,1235.23 539.765,1233.62 540.352,1231.14 540.938,1231.33 541.525,1231.33 542.111,1230.21 542.697,1230.35 543.284,1230.44 543.87,1229.24 544.457,1229.27 545.043,1231.48 545.63,1229.14 546.216,1228.1 546.802,1229.16 547.389,1229.37 547.975,1229.46 548.562,1233.96 549.148,1239.1 549.734,1239.63 550.321,1242.31 550.907,1244.92 551.494,1243.95 552.08,1244.19 552.666,1245.64 553.253,1245.68 553.839,1246.89 554.426,1246.93 555.012,1246.97 555.599,1246.82 556.185,1245.98 556.771,1244.01 557.358,1241.06 557.944,1243.75 558.531,1241.64 559.117,1242.88 559.703,1240.74 560.29,1238.86 560.876,1237.02 561.463,1237.55 562.049,1239.23 562.635,1238.67 563.222,1239.04 563.808,1238.14 564.395,1238.66 564.981,1239.27 565.568,1243.13 566.154,1240.99 566.74,1242.34 567.327,1241.5 567.913,1239.55 568.5,1237.69 569.086,1237.06 569.672,1237.62 570.259,1238.37 570.845,1236.44 571.432,1236.1 572.018,1235.5 572.605,1235.71 573.191,1234.11 573.777,1234.72 574.364,1233.21 574.95,1233.73 575.537,1233.16 576.123,1232.79 576.709,1232.55 577.296,1233.09 577.882,1233.7 578.469,1233.09 579.055,1232.43 579.641,1234.25 580.228,1235 580.814,1233.25 581.401,1233.87 581.987,1233.61 582.574,1234.36 583.16,1235.95 583.746,1234.1 584.333,1231.25 584.919,1230.99 585.506,1232.62 586.092,1232.44 586.678,1230.96 587.265,1230.56 587.851,1231.22 588.438,1231.99 589.024,1233.42 589.61,1234.05 590.197,1233.65 590.783,1232.87 591.37,1233.6 591.956,1233.12 592.543,1233.7 593.129,1233.21 593.715,1232.78 594.302,1230.73 594.888,1231.42 595.475,1229.69 596.061,1226.85 596.647,1226.68 597.234,1228.66 597.82,1230.62 598.407,1231.57 598.993,1231.09 599.579,1230.75 600.166,1231.57 600.752,1232.31 601.339,1231.52 601.925,1229.76 602.512,1229.46 603.098,1228.11 603.684,1228.76 604.271,1228.61 604.857,1227.01 605.444,1226.62 606.03,1227.72 606.616,1227.41 607.203,1227.07 607.789,1226.73 608.376,1226.32 608.962,1228.32 609.548,1225.62 610.135,1225.42 610.721,1226.44 611.308,1225.96 611.894,1223.48 612.481,1225.62 613.067,1225.46 613.653,1227.44 614.24,1227.15 614.826,1226.6 615.413,1224.72 615.999,1224.58 616.585,1225.56 617.172,1226.4 617.758,1223.88 618.345,1224.73 618.931,1223.45 619.518,1224.51 620.104,1225.47 620.69,1222.89 621.277,1226.24 621.863,1225.68 622.45,1227.41 623.036,1224.75 623.622,1226.73 624.209,1224.43 624.795,1224.18 625.382,1223.93 625.968,1223.69 626.554,1224.61 627.141,1228 627.727,1227.69 628.314,1229.48 628.9,1227.94 629.487,1227.52 630.073,1229.29 630.659,1229.68 631.246,1229.06 631.832,1231.06 632.419,1229.31 633.005,1226.47 633.591,1227.27 634.178,1221.27 634.764,1221.22 635.351,1222.11 635.937,1221.03 636.523,1222.16 637.11,1221.98 637.696,1222.06 638.283,1221.99 638.869,1223.14 639.456,1224.26 640.042,1223.97 640.628,1226.86 641.215,1227.66 641.801,1225.99 642.388,1224.59 642.974,1224.68 643.56,1225.5 644.147,1225.25 644.733,1228.18 645.32,1225.52 645.906,1221.99 646.492,1221.94 647.079,1221.82 647.665,1220.39 648.252,1219.18 648.838,1222.6 649.425,1218.89 650.011,1218.88 650.597,1217.74 651.184,1217.86 651.77,1217.82 652.357,1216.79 652.943,1217.92 653.529,1219.25 654.116,1219.35 654.702,1220.44 655.289,1220.46 655.875,1222.57 656.462,1220.11 657.048,1221.2 657.634,1221.97 658.221,1223.15 658.807,1220.9 659.394,1220.84 659.98,1218.77 660.566,1220.69 661.153,1221.59 661.739,1219.26 662.326,1217.91 662.912,1219.36 663.498,1217.25 664.085,1216.21 664.671,1217.42 665.258,1216.52 665.844,1215.65 666.431,1216.86 667.017,1215.55 667.603,1216.76 668.19,1218.08 668.776,1218.19 669.363,1220.57 669.949,1220.41 670.535,1222.35 671.122,1222.25 671.708,1225.32 672.295,1223.85 672.881,1222.2 673.467,1223.19 674.054,1221.66 674.64,1222.48 675.227,1221.36 675.813,1220 676.4,1218.88 676.986,1216.69 677.572,1214.68 678.159,1218.16 678.745,1217.12 679.332,1217.25 679.918,1218.47 680.504,1218.25 681.091,1220.35 681.677,1221.27 682.264,1221.06 682.85,1219.46 683.436,1220.34 684.023,1218.12 684.609,1218.14 685.196,1216.9 685.782,1216.72 686.369,1215.68 686.955,1218.12 687.541,1218.01 688.128,1219.1 688.714,1222.01 689.301,1220.78 689.887,1220.6 690.473,1222.57 691.06,1218.81 691.646,1218.53 692.233,1217.56 692.819,1215.5 693.405,1216.75 693.992,1216.79 694.578,1219.02 695.165,1220.02 695.751,1219.88 696.338,1219.86 696.924,1217.58 697.51,1218.61 698.097,1219.7 698.683,1221.82 699.27,1220.72 699.856,1220.58 700.442,1220.31 701.029,1221.39 701.615,1221.12 702.202,1220.97 702.788,1221.99 703.375,1222.77 703.961,1222 704.547,1223.79 705.134,1223.29 705.72,1222.92 706.307,1222.72 706.893,1221.21 707.479,1218.62 708.066,1219.5 708.652,1219.43 709.239,1219.29 709.825,1220.41 710.411,1220.25 710.998,1219.16 711.584,1220.11 712.171,1218.91 712.757,1219.07 713.344,1216.76 713.93,1217.77 714.516,1215.44 715.103,1217.85 715.689,1218.69 716.276,1216.34 716.862,1214.15 717.448,1213.09 718.035,1213.2 718.621,1214.41 719.208,1214.49 719.794,1215.61 720.38,1214.54 720.967,1211.41 721.553,1211.65 722.14,1212.05 722.726,1215.64 723.313,1215.62 723.899,1215.58 724.485,1215.77 725.072,1215.96 725.658,1216.96 726.245,1218.34 726.831,1217.94 727.417,1217.78 728.004,1216.36 728.59,1217.43 729.177,1217.36 729.763,1217.32 730.349,1218.48 730.936,1218.46 731.522,1218.5 732.109,1218.22 732.695,1220.22 733.282,1222.3 733.868,1221.97 734.454,1219.46 735.041,1219.22 735.627,1216.93 736.214,1217.16 736.8,1214.99 737.386,1215.17 737.973,1216.47 738.559,1216.33 739.146,1215.16 739.732,1214.16 740.318,1215.37 740.905,1215.48 741.491,1217.86 742.078,1219.9 742.664,1220.88 743.251,1220.76 743.837,1219.27 744.423,1218.97 745.01,1218.82 745.596,1218.72 746.183,1218.42 746.769,1218.45 747.355,1220.55 747.942,1221.33 748.528,1221.37 749.115,1222.13 749.701,1221.97 750.288,1218.3 750.874,1218.35 751.46,1218.17 752.047,1219.12 752.633,1219.98 753.22,1216.64 753.806,1217.68 754.392,1217.36 754.979,1217.18 755.565,1219.28 756.152,1221.45 756.738,1222.44 757.324,1222.75 757.911,1222.29 758.497,1221.88 759.084,1223.8 759.67,1222.15 760.257,1223.17 760.843,1222.63 761.429,1220.97 762.016,1221.61 762.602,1221.04 763.189,1219.61 763.775,1220.04 764.361,1217.31 764.948,1218.23 765.534,1220.26 766.121,1219.97 766.707,1219.73 767.293,1219.26 767.88,1217.83 768.466,1219.57 769.053,1221.43 769.639,1222.2 770.226,1222.96 770.812,1223.73 771.398,1221.01 771.985,1217.21 772.571,1215.01 773.158,1214.73 773.744,1214.7 774.33,1213.71 774.917,1213.84 775.503,1212.77 776.09,1212.77 776.676,1210.35 777.262,1211.4 777.849,1211.66 778.435,1210.83 779.022,1208.71 779.608,1208.71 780.195,1208.97 780.781,1211.43 781.367,1212.7 781.954,1209.25 782.54,1208.51 783.127,1211.29 783.713,1212.44 784.299,1211.61 784.886,1214.12 785.472,1211.78 786.059,1212.97 786.645,1212.94 787.232,1212.95 787.818,1212.17 788.404,1214.62 788.991,1213.66 789.577,1212.6 790.164,1213.73 790.75,1214.87 791.336,1213.79 791.923,1212.64 792.509,1212.89 793.096,1213.08 793.682,1214.28 794.268,1213.38 794.855,1213.6 795.441,1213.57 796.028,1212.46 796.614,1214.9 797.201,1214.94 797.787,1214.07 798.373,1214.21 798.96,1215.52 799.546,1216.69 800.133,1215.67 800.719,1214.69 801.305,1214.58 801.892,1214.64 802.478,1213.69 803.065,1213.63 803.651,1214.88 804.237,1214.81 804.824,1216.06 805.41,1217.16 805.997,1217.81 806.583,1218.65 807.17,1219.84 807.756,1218.36 808.342,1220.56 808.929,1222.25 809.515,1220.86 810.102,1220.56 810.688,1219.06 811.274,1222.23 811.861,1221.6 812.447,1222.52 813.034,1222.14 813.62,1218.19 814.206,1218.11 814.793,1217.99 815.379,1216.55 815.966,1216.37 816.552,1215.17 817.139,1213.82 817.725,1212.75 818.311,1212.76 818.898,1211.65 819.484,1208.55 820.071,1207.78 820.657,1211.59 821.243,1210.37 821.83,1209.47 822.416,1210.98 823.003,1211.34 823.589,1212.41 824.175,1213.61 824.762,1213.7 825.348,1214.8 825.935,1213.66 826.521,1212.51 827.108,1211.66 827.694,1211.74 828.28,1211.59 828.867,1208.42 829.453,1207.72 830.04,1207 830.626,1207.42 831.212,1206.57 831.799,1208.11 832.385,1205.15 832.972,1206.91 833.558,1203.83 834.145,1204.16 834.731,1204.56 835.317,1207.48 835.904,1207.99 836.49,1208.23 837.077,1208.51 837.663,1209.79 838.249,1210.1 838.836,1210.42 839.422,1208.6 840.009,1210.07 840.595,1208.03 841.181,1208.35 841.768,1208.45 842.354,1208.63 842.941,1207.67 843.527,1209.27 844.114,1209.59 844.7,1210.82 845.286,1210.94 845.873,1212.25 846.459,1214.64 847.046,1212.43 847.632,1213.78 848.218,1214.76 848.805,1215.85 849.391,1215.58 849.978,1214.63 850.564,1214.62 851.15,1215.66 851.737,1217.89 852.323,1217.53 852.91,1216.28 853.496,1217.22 854.083,1220.27 854.669,1220.94 855.255,1221.58 855.842,1222.31 856.428,1222.86 857.015,1223.33 857.601,1221.61 858.187,1221.16 858.774,1219.5 859.36,1218.45 859.947,1218.13 860.533,1218.03 861.119,1217.81 861.706,1217.53 862.292,1215.04 862.879,1213.85 863.465,1213.09 864.052,1211.91 864.638,1211.99 865.224,1212.07 865.811,1212.13 866.397,1211.02 866.984,1210.04 867.57,1208.96 868.156,1210.34 868.743,1209.44 869.329,1209.7 869.916,1208.7 870.502,1207.88 871.089,1209.27 871.675,1210.59 872.261,1210.89 872.848,1210.81 873.434,1213.11 874.021,1211.99 874.607,1213.15 875.193,1213.1 875.78,1212.04 876.366,1212.01 876.953,1209.92 877.539,1212.38 878.125,1211.3 878.712,1208 879.298,1209.36 879.885,1208.45 880.471,1208.8 881.058,1207.95 881.644,1209.51 882.23,1207.6 882.817,1210.17 883.403,1210.28 883.99,1210.58 884.576,1210.62 885.162,1210.85 885.749,1211.07 886.335,1210.15 886.922,1211.33 887.508,1211.88 888.094,1214.27 888.681,1214.28 889.267,1213.09 889.854,1212.08 890.44,1212.14 891.027,1212.21 891.613,1214.51 892.199,1214.34 892.786,1217.74 893.372,1217.54 893.959,1219.44 894.545,1221.35 895.131,1224.25 895.718,1224.69 896.304,1226.22 896.891,1222.23 897.477,1223.02 898.063,1223.5 898.65,1222 899.236,1219.17 899.823,1220.06 900.409,1217.51 900.996,1215.98 901.582,1216.82 902.168,1217.55 902.755,1215.08 903.341,1215.05 903.928,1213.6 904.514,1213.7 905.1,1216.96 905.687,1216.62 906.273,1217.74 906.86,1217.62 907.446,1218.73 908.032,1218.7 908.619,1216.47 909.205,1216.26 909.792,1217.14 910.378,1218.98 910.965,1215.27 911.551,1215.42 912.137,1216.57 912.724,1216.54 913.31,1215.14 913.897,1216.14 914.483,1213.78 915.069,1212.66 915.656,1213.79 916.242,1213.78 916.829,1212.6 917.415,1213.77 918.002,1212.7 918.588,1210.52 919.174,1211.85 919.761,1211.94 920.347,1212.02 920.934,1212.01 921.52,1211.82 922.106,1212.72 922.693,1214.95 923.279,1212.76 923.866,1212.78 924.452,1212.62 925.038,1211.53 925.625,1212.56 926.211,1213.81 926.798,1213.83 927.384,1212.53 927.971,1213.54 928.557,1211.35 929.143,1212.79 929.73,1214.99 930.316,1214.83 930.903,1215.59 931.489,1214.25 932.075,1213.01 932.662,1213.12 933.248,1210.77 933.835,1209.84 934.421,1210.26 935.007,1210.59 935.594,1210.78 936.18,1209.72 936.767,1209.93 937.353,1211.09 937.94,1213.55 938.526,1212.48 939.112,1213.36 939.699,1213.49 940.285,1212.39 940.872,1212.44 941.458,1211.21 942.044,1212.56 942.631,1212.54 943.217,1212.52 943.804,1213.71 944.39,1212.53 944.976,1211.35 945.563,1213.38 946.149,1211.3 946.736,1215.91 947.322,1215.75 947.909,1215.59 948.495,1218.71 949.081,1216.11 949.668,1218.38 950.254,1216.17 950.841,1216.28 951.427,1216.08 952.013,1217.1 952.6,1214.51 953.186,1216.64 953.773,1212.95 954.359,1212.99 954.945,1214.16 955.532,1214.22 956.118,1213.17 956.705,1211.95 957.291,1213.11 957.878,1211.9 958.464,1211.67 959.05,1211.65 959.637,1210.58 960.223,1209.38 960.81,1211.67 961.396,1212.92 961.982,1215.97 962.569,1214.55 963.155,1215.62 963.742,1216.4 964.328,1216.24 964.915,1213.9 965.501,1213.68 966.087,1214.63 966.674,1214.52 967.26,1214.54 967.847,1214.44 968.433,1212.21 969.019,1213.44 969.606,1212.28 970.192,1212.61 970.779,1212.73 971.365,1211.53 971.951,1211.68 972.538,1210.64 973.124,1212.03 973.711,1210.86 974.297,1212.23 974.884,1210.11 975.47,1211.37 976.056,1210.44 976.643,1210.66 977.229,1209.57 977.816,1209.54 978.402,1209.68 978.988,1210.85 979.575,1209.82 980.161,1210.94 980.748,1208.81 981.334,1210 981.92,1209.01 982.507,1210.31 983.093,1211.3 983.68,1214.66 984.266,1212.27 984.853,1212.45 985.439,1212.41 986.025,1212.43 986.612,1212.36 987.198,1210 987.785,1211.06 988.371,1212.16 988.957,1210.89 989.544,1209.65 990.13,1212.11 990.717,1212.08 991.303,1212.1 991.889,1210.94 992.476,1211.93 993.062,1211.89 993.649,1210.89 994.235,1212.03 994.822,1212.06 995.408,1212.09 995.994,1213.45 996.581,1213.26 997.167,1215.42 997.754,1215.14 998.34,1214.96 998.926,1215.96 999.513,1215.89 1000.1,1215.82 1000.69,1217.81 1001.27,1216.44 1001.86,1213.9 1002.44,1214.99 1003.03,1215 1003.62,1218.32 1004.2,1216.74 1004.79,1219.73 1005.38,1219.15 1005.96,1219.98 1006.55,1219.38 1007.14,1217.79 1007.72,1217.51 1008.31,1217.16 1008.9,1217.83 1009.48,1219.46 1010.07,1216.85 1010.65,1219.53 1011.24,1214.57 1011.83,1214.34 1012.41,1211.01 1013,1211.37 1013.59,1212.6 1014.17,1211.87 1014.76,1209.67 1015.35,1207.61 1015.93,1208.71 1016.52,1207.67 1017.11,1209.3 1017.69,1209.55 1018.28,1209.85 1018.86,1213.15 1019.45,1214.18 1020.04,1211.82 1020.62,1210.95 1021.21,1211.12 1021.8,1209.91 1022.38,1209.77 1022.97,1209.92 1023.56,1209.98 1024.14,1208.93 1024.73,1209.09 1025.32,1209.2 1025.9,1210.57 1026.49,1211.84 1027.07,1213.08 1027.66,1212.08 1028.25,1211.84 1028.83,1210.98 1029.42,1211 1030.01,1211.02 1030.59,1208.98 1031.18,1207.81 1031.77,1206.96 1032.35,1209.72 1032.94,1208.73 1033.52,1209 1034.11,1210.31 1034.7,1209.32 1035.28,1210.5 1035.87,1210.85 1036.46,1210.95 1037.04,1210.02 1037.63,1207.76 1038.22,1209.05 1038.8,1211.51 1039.39,1210.61 1039.98,1213.07 1040.56,1213.88 1041.15,1215.04 1041.73,1212.73 1042.32,1212.71 1042.91,1212.92 1043.49,1213.22 1044.08,1213.26 1044.67,1214.07 1045.25,1216.06 1045.84,1218.13 1046.43,1218.75 1047.01,1217.2 1047.6,1213.62 1048.19,1211.08 1048.77,1209.87 1049.36,1210.16 1049.94,1211.4 1050.53,1209.22 1051.12,1209.52 1051.7,1207.72 1052.29,1208.17 1052.88,1211.69 1053.46,1213.13 1054.05,1211.97 1054.64,1212.02 1055.22,1211.98 1055.81,1212.2 1056.39,1215.41 1056.98,1215.33 1057.57,1214.13 1058.15,1213.23 1058.74,1212.16 1059.33,1209.89 1059.91,1210.16 1060.5,1211.1 1061.09,1213.51 1061.67,1213.6 1062.26,1213.62 1062.85,1212.44 1063.43,1213.83 1064.02,1213.78 1064.6,1214.8 1065.19,1214.61 1065.78,1211.11 1066.36,1212.33 1066.95,1210.98 1067.54,1209.89 1068.12,1208.69 1068.71,1209.98 1069.3,1211.19 1069.88,1214.86 1070.47,1216.98 1071.06,1216.72 1071.64,1217.4 1072.23,1217.35 1072.81,1216.8 1073.4,1216.77 1073.99,1215.45 1074.57,1214.21 1075.16,1216.44 1075.75,1216.21 1076.33,1217.09 1076.92,1215.58 1077.51,1217.57 1078.09,1218.23 1078.68,1216.76 1079.26,1214.22 1079.85,1214.31 1080.44,1214.28 1081.02,1214.13 1081.61,1215.38 1082.2,1212.84 1082.78,1211.68 1083.37,1211.73 1083.96,1210.48 1084.54,1210.68 1085.13,1210.84 1085.72,1211.85 1086.3,1212.94 1086.89,1212 1087.47,1211.8 1088.06,1210.59 1088.65,1209.59 1089.23,1208.71 1089.82,1208.86 1090.41,1209.11 1090.99,1208.34 1091.58,1208.5 1092.17,1209.8 1092.75,1209.97 1093.34,1209.18 1093.93,1210.53 1094.51,1211.81 1095.1,1210.46 1095.68,1210.71 1096.27,1210.92 1096.86,1211.08 1097.44,1211.11 1098.03,1212.15 1098.62,1213.28 1099.2,1213.17 1099.79,1214.1 1100.38,1214.07 1100.96,1212.72 1101.55,1210.58 1102.14,1211.89 1102.72,1212 1103.31,1210.77 1103.89,1211.96 1104.48,1212.05 1105.07,1207.77 1105.65,1210.18 1106.24,1208.16 1106.83,1211.71 1107.41,1211.83 1108,1211.97 1108.59,1212.96 1109.17,1213.2 1109.76,1214.13 1110.34,1213.97 1110.93,1215.92 1111.52,1217.12 1112.1,1220.19 1112.69,1219.57 1113.28,1216.89 1113.86,1218.96 1114.45,1216.5 1115.04,1215.12 1115.62,1214.87 1116.21,1215.92 1116.8,1214.68 1117.38,1212.25 1117.97,1212.46 1118.55,1212.35 1119.14,1212.31 1119.73,1211.12 1120.31,1211.99 1120.9,1210.85 1121.49,1209.92 1122.07,1210.05 1122.66,1211.25 1123.25,1208 1123.83,1210.82 1124.42,1211.04 1125.01,1213.27 1125.59,1211.87 1126.18,1212.11 1126.76,1211.16 1127.35,1212.77 1127.94,1212.99 1128.52,1217.49 1129.11,1217.1 1129.7,1216.85 1130.28,1217.64 1130.87,1216.26 1131.46,1218.37 1132.04,1217.92 1132.63,1217.63 1133.21,1213.96 1133.8,1213.84 1134.39,1213.6 1134.97,1214.56 1135.56,1213.2 1136.15,1213.16 1136.73,1212.99 1137.32,1214.22 1137.91,1215.26 1138.49,1216 1139.08,1213.6 1139.67,1212.59 1140.25,1211.64 1140.84,1209.42 1141.42,1208.68 1142.01,1209.94 1142.6,1212.24 1143.18,1211.12 1143.77,1214.58 1144.36,1215.56 1144.94,1215.4 1145.53,1214.88 1146.12,1215.91 1146.7,1215.73 1147.29,1216.45 1147.88,1217.28 1148.46,1219.04 1149.05,1217.65 1149.63,1217.32 1150.22,1218.31 1150.81,1216.95 1151.39,1216.59 1151.98,1216.19 1152.57,1219.24 1153.15,1220 1153.74,1218.39 1154.33,1219.31 1154.91,1217.76 1155.5,1216.29 1156.09,1214.81 1156.67,1214.79 1157.26,1214.46 1157.84,1213.27 1158.43,1211.16 1159.02,1211.17 1159.6,1211.16 1160.19,1212.27 1160.78,1211.93 1161.36,1210.77 1161.95,1210.99 1162.54,1211.01 1163.12,1211.05 1163.71,1210.89 1164.29,1212.01 1164.88,1210.85 1165.47,1212.19 1166.05,1210.93 1166.64,1209.76 1167.23,1208.75 1167.81,1206.7 1168.4,1205.67 1168.99,1206.19 1169.57,1207.67 1170.16,1208.95 1170.75,1205.5 1171.33,1206.16 1171.92,1205.55 1172.5,1205.84 1173.09,1207.12 1173.68,1207.36 1174.26,1205.46 1174.85,1204.83 1175.44,1205.3 1176.02,1207.74 1176.61,1207.92 1177.2,1206.95 1177.78,1204.92 1178.37,1204.24 1178.96,1203.59 1179.54,1204.26 1180.13,1203.56 1180.71,1204.94 1181.3,1204.37 1181.89,1204.88 1182.47,1202 1183.06,1201.45 1183.65,1203.14 1184.23,1203.62 1184.82,1204.01 1185.41,1204.27 1185.99,1203.6 1186.58,1204.26 1187.16,1204.61 1187.75,1206.02 1188.34,1205.21 1188.92,1205.44 1189.51,1203.71 1190.1,1205.3 1190.68,1208.03 1191.27,1206.16 1191.86,1205.32 1192.44,1205.73 1193.03,1206.13 1193.62,1206.42 1194.2,1206.97 1194.79,1210.77 1195.37,1211.99 1195.96,1212.16 1196.55,1213.37 1197.13,1211.25 1197.72,1209.31 1198.31,1209.1 1198.89,1210.46 1199.48,1211.55 1200.07,1209.4 1200.65,1209.48 1201.24,1210.74 1201.83,1211.84 1202.41,1210.65 1203,1210.87 1203.58,1211.12 1204.17,1212.28 1204.76,1213.33 1205.34,1211.98 1205.93,1210.81 1206.52,1209.71 1207.1,1207.73 1207.69,1206.96 1208.28,1207.36 1208.86,1206.68 1209.45,1209.19 1210.03,1211.43 1210.62,1211.81 1211.21,1212.86 1211.79,1211.79 1212.38,1212.92 1212.97,1215.07 1213.55,1217.26 1214.14,1218.25 1214.73,1216.9 1215.31,1215.82 1215.9,1215.53 1216.49,1216.66 1217.07,1213.17 1217.66,1211.97 1218.24,1216.43 1218.83,1214.06 1219.42,1210.76 1220,1211.86 1220.59,1211.92 1221.18,1210.69 1221.76,1208.56 1222.35,1208.73 1222.94,1210.02 1223.52,1210.98 1224.11,1211.12 1224.7,1209.1 1225.28,1210.61 1225.87,1212.93 1226.45,1211.72 1227.04,1209.4 1227.63,1209.67 1228.21,1210.97 1228.8,1209.74 1229.39,1209.72 1229.97,1209.85 1230.56,1211.12 1231.15,1210.17 1231.73,1210.14 1232.32,1212.36 1232.91,1209.96 1233.49,1209.08 1234.08,1210.41 1234.66,1211.72 1235.25,1213.67 1235.84,1212.54 1236.42,1212.51 1237.01,1210.3 1237.6,1211.55 1238.18,1212.61 1238.77,1213.89 1239.36,1214.62 1239.94,1214.62 1240.53,1215.3 1241.11,1215.4 1241.7,1216.39 1242.29,1214.93 1242.87,1215.84 1243.46,1216.6 1244.05,1215.3 1244.63,1217.31 1245.22,1219.28 1245.81,1219.79 1246.39,1217.29 1246.98,1216.89 1247.57,1214.79 1248.15,1213.47 1248.74,1212.17 1249.32,1212.34 1249.91,1211.26 1250.5,1210.16 1251.08,1214.53 1251.67,1212.19 1252.26,1213.14 1252.84,1214.12 1253.43,1210.62 1254.02,1211.38 1254.6,1210.07 1255.19,1210.22 1255.78,1210.41 1256.36,1211.4 1256.95,1212.67 1257.53,1215.07 1258.12,1214.7 1258.71,1215.64 1259.29,1217.61 1259.88,1216.06 1260.47,1215.89 1261.05,1215.76 1261.64,1215.53 1262.23,1217.35 1262.81,1217.07 1263.4,1216.85 1263.98,1216.56 1264.57,1215.17 1265.16,1213.94 1265.74,1214.96 1266.33,1213.74 1266.92,1213.5 1267.5,1213.31 1268.09,1215.42 1268.68,1216.17 1269.26,1214.83 1269.85,1215.69 1270.44,1213.56 1271.02,1213.46 1271.61,1213.25 1272.19,1213.18 1272.78,1213.31 1273.37,1214.35 1273.95,1213.98 1274.54,1216.13 1275.13,1215.78 1275.71,1214.59 1276.3,1214.42 1276.89,1214.48 1277.47,1213.54 1278.06,1213.44 1278.65,1213.28 1279.23,1215.57 1279.82,1216.24 1280.4,1216.23 1280.99,1215.94 1281.58,1215.73 1282.16,1214.24 1282.75,1215.22 1283.34,1214.98 1283.92,1215.76 1284.51,1212.23 1285.1,1213.16 1285.68,1211.94 1286.27,1211.95 1286.86,1212.99 1287.44,1215.2 1288.03,1215.06 1288.61,1215.09 1289.2,1214.94 1289.79,1213.64 1290.37,1213.53 1290.96,1213.83 1291.55,1212.63 1292.13,1210.55 1292.72,1209.67 1293.31,1211.05 1293.89,1211.15 1294.48,1212.13 1295.06,1212.24 1295.65,1211.01 1296.24,1210.76 1296.82,1211.85 1297.41,1209.59 1298,1210.58 1298.58,1210.51 1299.17,1209.56 1299.76,1212.98 1300.34,1212.92 1300.93,1212.86 1301.52,1210.53 1302.1,1212.06 1302.69,1213.15 1303.27,1212.04 1303.86,1213.04 1304.45,1213.98 1305.03,1212.81 1305.62,1212.76 1306.21,1213.7 1306.79,1212.46 1307.38,1211.35 1307.97,1211.21 1308.55,1212.11 1309.14,1214.19 1309.73,1213.76 1310.31,1210.55 1310.9,1208.3 1311.48,1208.62 1312.07,1209.79 1312.66,1209.86 1313.24,1210.14 1313.83,1210.26 1314.42,1209.14 1315,1209.01 1315.59,1209.18 1316.18,1211.54 1316.76,1211.61 1317.35,1212.69 1317.93,1213.74 1318.52,1215.89 1319.11,1217.1 1319.69,1220.14 1320.28,1218.73 1320.87,1220.58 1321.45,1222.15 1322.04,1220.46 1322.63,1220.03 1323.21,1216.26 1323.8,1216.24 1324.39,1215.8 1324.97,1216.64 1325.56,1218.54 1326.14,1217.17 1326.73,1217.2 1327.32,1216.95 1327.9,1217.72 1328.49,1214 1329.08,1213.83 1329.66,1212.62 1330.25,1213.84 1330.84,1212.54 1331.42,1211.43 1332.01,1211.7 1332.6,1209.54 1333.18,1209.77 1333.77,1209.93 1334.35,1209.92 1334.94,1207.6 1335.53,1206.83 1336.11,1209.31 1336.7,1209.39 1337.29,1207.36 1337.87,1210.94 1338.46,1212.44 1339.05,1211.44 1339.63,1211.16 1340.22,1211.11 1340.8,1211.2 1341.39,1211.41 1341.98,1211.45 1342.56,1212.95 1343.15,1212.92 1343.74,1211.81 1344.32,1215.13 1344.91,1216.01 1345.5,1216.88 1346.08,1217.84 1346.67,1217.49 1347.26,1220.62 1347.84,1222.44 1348.43,1218.79 1349.01,1215.32 1349.6,1215.22 1350.19,1214.92 1350.77,1214.85 1351.36,1216.09 1351.95,1214.96 1352.53,1214.65 1353.12,1215.82 1353.71,1215.49 1354.29,1215.47 1354.88,1215.22 1355.47,1215.99 1356.05,1216.69 1356.64,1215.13 1357.22,1214.77 1357.81,1215.83 1358.4,1214.56 1358.98,1212.23 1359.57,1208.89 1360.16,1207.88 1360.74,1208.12 1361.33,1207.25 1361.92,1207.4 1362.5,1213.14 1363.09,1213.23 1363.68,1214.19 1364.26,1215.26 1364.85,1213.82 1365.43,1217.18 1366.02,1218.04 1366.61,1218.54 1367.19,1219.34 1367.78,1221.25 1368.37,1218.72 1368.95,1217.12 1369.54,1216.89 1370.13,1212.29 1370.71,1210.08 1371.3,1207.82 1371.88,1207.86 1372.47,1209.2 1373.06,1209.42 1373.64,1208.3 1374.23,1210.44 1374.82,1212.94 1375.4,1215.03 1375.99,1213.83 1376.58,1210.37 1377.16,1213.77 1377.75,1213.74 1378.34,1212.42 1378.92,1211.31 1379.51,1213.38 1380.09,1213.49 1380.68,1213.48 1381.27,1214.63 1381.85,1215.62 1382.44,1214.21 1383.03,1213.91 1383.61,1211.62 1384.2,1210.37 1384.79,1209.5 1385.37,1209.54 1385.96,1209.74 1386.55,1209.87 1387.13,1210.08 1387.72,1210.11 1388.3,1210.21 1388.89,1207.13 1389.48,1208.36 1390.06,1209.63 1390.65,1211.91 1391.24,1208.76 1391.82,1210.17 1392.41,1209.07 1393,1207.19 1393.58,1209.57 1394.17,1208.47 1394.75,1210.72 1395.34,1209.77 1395.93,1207.95 1396.51,1208.11 1397.1,1209.43 1397.69,1210.59 1398.27,1210.48 1398.86,1209.44 1399.45,1210.61 1400.03,1209.64 1400.62,1209.73 1401.21,1212.38 1401.79,1212.71 1402.38,1208.58 1402.96,1208.7 1403.55,1207.94 1404.14,1207.94 1404.72,1206.81 1405.31,1205.68 1405.9,1207.25 1406.48,1208.71 1407.07,1209.97 1407.66,1210.21 1408.24,1209 1408.83,1209.14 1409.42,1208.03 1410,1207.07 1410.59,1210.64 1411.17,1210.62 1411.76,1213.64 1412.35,1212.59 1412.93,1212.36 1413.52,1211.4 1414.11,1210.53 1414.69,1211.78 1415.28,1211.7 1415.87,1209.88 1416.45,1212.34 1417.04,1213.32 1417.63,1210.87 1418.21,1211.1 1418.8,1211.27 1419.38,1211.29 1419.97,1215.7 1420.56,1216.67 1421.14,1216.38 1421.73,1217.19 1422.32,1218.02 1422.9,1217.66 1423.49,1216.33 1424.08,1215.21 1424.66,1216.18 1425.25,1213.6 1425.83,1216.58 1426.42,1215.5 1427.01,1212.05 1427.59,1210.98 1428.18,1212 1428.77,1213.23 1429.35,1214.28 1429.94,1210.98 1430.53,1210.88 1431.11,1211.86 1431.7,1211.8 1432.29,1211.7 1432.87,1210.52 1433.46,1209.83 1434.04,1208.85 1434.63,1209.25 1435.22,1210.45 1435.8,1209.29 1436.39,1208.3 1436.98,1210.9 1437.56,1210.73 1438.15,1208.79 1438.74,1205.61 1439.32,1203.9 1439.91,1204.52 1440.5,1206.28 1441.08,1206.69 1441.67,1204.81 1442.25,1203.3 1442.84,1205.96 1443.43,1205.27 1444.01,1208.82 1444.6,1211.24 1445.19,1211.33 1445.77,1210.28 1446.36,1212.39 1446.95,1212.56 1447.53,1213.7 1448.12,1212.92 1448.7,1210.63 1449.29,1209.46 1449.88,1210.75 1450.46,1211.91 1451.05,1213.08 1451.64,1210.9 1452.22,1209.64 1452.81,1208.77 1453.4,1207.81 1453.98,1207.87 1454.57,1208.3 1455.16,1210.81 1455.74,1207.92 1456.33,1206.89 1456.91,1207.02 1457.5,1207.37 1458.09,1207.44 1458.67,1206.83 1459.26,1206.99 1459.85,1207.29 1460.43,1207.58 1461.02,1206.47 1461.61,1209.98 1462.19,1210.16 1462.78,1210.23 1463.37,1210.26 1463.95,1211.57 1464.54,1211.22 1465.12,1212.5 1465.71,1213.66 1466.3,1215.68 1466.88,1215.65 1467.47,1216.49 1468.06,1215.47 1468.64,1214.22 1469.23,1214.13 1469.82,1212.56 1470.4,1213.8 1470.99,1211.44 1471.57,1214.68 1472.16,1218.85 1472.75,1220.67 1473.33,1221.3 1473.92,1220.82 1474.51,1221.33 1475.09,1220.88 1475.68,1220.34 1476.27,1218.78 1476.85,1218.51 1477.44,1219.16 1478.03,1219.03 1478.61,1218.92 1479.2,1218.78 1479.78,1217.34 1480.37,1217.05 1480.96,1213.39 1481.54,1213.44 1482.13,1215.6 1482.72,1215.37 1483.3,1214.18 1483.89,1213.87 1484.48,1212.81 1485.06,1213.97 1485.65,1214.99 1486.24,1211.23 1486.82,1212.41 1487.41,1211.12 1487.99,1209.91 1488.58,1210.29 1489.17,1210.19 1489.75,1206.95 1490.34,1206.12 1490.93,1206.47 1491.51,1205.68 1492.1,1206.04 1492.69,1207.49 1493.27,1208.65 1493.86,1209.86 1494.45,1211.14 1495.03,1210.18 1495.62,1211.46 1496.2,1212.49 1496.79,1212.42 1497.38,1211.27 1497.96,1211.53 1498.55,1212.31 1499.14,1211.14 1499.72,1213.57 1500.31,1212.2 1500.9,1211.17 1501.48,1210.1 1502.07,1209.04 1502.65,1208.39 1503.24,1210.84 1503.83,1212.06 1504.41,1213.98 1505,1212.62 1505.59,1213.75 1506.17,1214.47 1506.76,1215.02 1507.35,1214.86 1507.93,1211.52 1508.52,1213.93 1509.11,1213.79 1509.69,1213.64 1510.28,1212.38 1510.86,1214.31 1511.45,1216.24 1512.04,1214.87 1512.62,1214.54 1513.21,1213.48 1513.8,1214.63 1514.38,1211.28 1514.97,1214.69 1515.56,1212.51 1516.14,1214.77 1516.73,1214.46 1517.32,1213.95 1517.9,1213.89 1518.49,1213.89 1519.07,1212.71 1519.66,1216.23 1520.25,1216.19 1520.83,1215.94 1521.42,1215.79 1522.01,1214.59 1522.59,1213.45 1523.18,1211.17 1523.77,1208.91 1524.35,1209 1524.94,1209.4 1525.52,1208.27 1526.11,1209.61 1526.7,1211.66 1527.28,1210.42 1527.87,1209.65 1528.46,1210.94 1529.04,1211.01 1529.63,1210 1530.22,1208.6 1530.8,1211.12 1531.39,1211.36 1531.98,1211.54 1532.56,1211.51 1533.15,1209.43 1533.73,1209.86 1534.32,1210.03 1534.91,1208.9 1535.49,1210.24 1536.08,1210.41 1536.67,1210.6 1537.25,1209.67 1537.84,1210.88 1538.43,1210.13 1539.01,1210.27 1539.6,1211.34 1540.19,1211.27 1540.77,1209.22 1541.36,1209.31 1541.94,1209.37 1542.53,1208.56 1543.12,1208.56 1543.7,1211.04 1544.29,1211.03 1544.88,1209.97 1545.46,1210.09 1546.05,1209.14 1546.64,1208.26 1547.22,1208.24 1547.81,1209.43 1548.4,1210.73 1548.98,1211.7 1549.57,1211.82 1550.15,1212.75 1550.74,1214.85 1551.33,1212.31 1551.91,1213.53 1552.5,1211.39 1553.09,1212.51 1553.67,1211.3 1554.26,1211.28 1554.85,1213.7 1555.43,1213.63 1556.02,1211.5 1556.6,1210.35 1557.19,1209.16 1557.78,1210.52 1558.36,1211.74 1558.95,1209.42 1559.54,1211.8 1560.12,1210.81 1560.71,1215.27 1561.3,1213.79 1561.88,1213.59 1562.47,1215.64 1563.06,1216.6 1563.64,1217.43 1564.23,1216.07 1564.81,1214.96 1565.4,1215.05 1565.99,1216.88 1566.57,1218.9 1567.16,1218.46 1567.75,1215.85 1568.33,1219 1568.92,1218.66 1569.51,1219.56 1570.09,1220.27 1570.68,1220.12 1571.27,1221.02 1571.85,1217.22 1572.44,1215.74 1573.02,1214.23 1573.61,1214.07 1574.2,1211.59 1574.78,1210.23 1575.37,1210.15 1575.96,1208.95 1576.54,1211.19 1577.13,1212.29 1577.72,1211.02 1578.3,1214.41 1578.89,1216.38 1579.47,1215.06 1580.06,1212.41 1580.65,1212.38 1581.23,1214.4 1581.82,1213.05 1582.41,1212.07 1582.99,1208.73 1583.58,1206.75 1584.17,1206.87 1584.75,1206.81 1585.34,1207.02 1585.93,1209.32 1586.51,1208.19 1587.1,1208.56 1587.68,1211.75 1588.27,1211.9 1588.86,1211.91 1589.44,1213.89 1590.03,1214.91 1590.62,1214.81 1591.2,1214.64 1591.79,1215.64 1592.38,1216.51 1592.96,1217.48 1593.55,1220.41 1594.14,1220.89 1594.72,1217.08 1595.31,1216.91 1595.89,1216.72 1596.48,1217.6 1597.07,1220.45 1597.65,1216.76 1598.24,1218.55 1598.83,1220.38 1599.41,1217.72 1600,1216.09 1600.59,1215.95 1601.17,1214.63 1601.76,1213.3 1602.34,1212.19 1602.93,1209.99 1603.52,1208.95 1604.1,1210.19 1604.69,1211.34 1605.28,1215.56 1605.86,1215.39 1606.45,1214.16 1607.04,1211.69 1607.62,1213.97 1608.21,1213.97 1608.8,1213.82 1609.38,1211.39 1609.97,1211.33 1610.55,1210.1 1611.14,1208.92 1611.73,1208.93 1612.31,1207.78 1612.9,1208.06 1613.49,1208.17 1614.07,1208.27 1614.66,1210.72 1615.25,1209.47 1615.83,1209.87 1616.42,1210.03 1617.01,1209.98 1617.59,1210.31 1618.18,1210.52 1618.76,1208.48 1619.35,1205.36 1619.94,1204.71 1620.52,1206 1621.11,1208.25 1621.7,1208.62 1622.28,1209.74 1622.87,1211.05 1623.46,1207.93 1624.04,1207.03 1624.63,1208.68 1625.22,1207.69 1625.8,1210.27 1626.39,1210.45 1626.97,1210.7 1627.56,1210.65 1628.15,1208.33 1628.73,1209.6 1629.32,1208.69 1629.91,1211.1 1630.49,1208.88 1631.08,1210.24 1631.67,1211.32 1632.25,1211.26 1632.84,1210.25 1633.42,1207.18 1634.01,1206.31 1634.6,1204.45 1635.18,1205.14 1635.77,1205.56 1636.36,1209.35 1636.94,1210.79 1637.53,1209.89 1638.12,1211.14 1638.7,1209.37 1639.29,1209.72 1639.88,1210.85 1640.46,1209.95 1641.05,1210.05 1641.63,1208.17 1642.22,1208.63 1642.81,1209.9 1643.39,1210.02 1643.98,1210.41 1644.57,1208.49 1645.15,1209.7 1645.74,1209.8 1646.33,1208.69 1646.91,1208.87 1647.5,1206.91 1648.09,1207.11 1648.67,1207.28 1649.26,1207.64 1649.84,1210.18 1650.43,1209.12 1651.02,1209.49 1651.6,1213.09 1652.19,1213.37 1652.78,1213.16 1653.36,1212.16 1653.95,1215.48 1654.54,1217.82 1655.12,1216.66 1655.71,1216.37 1656.29,1216.47 1656.88,1214.96 1657.47,1214.82 1658.05,1215.82 1658.64,1213.5 1659.23,1215.61 1659.81,1216.65 1660.4,1216.5 1660.99,1218.55 1661.57,1217.17 1662.16,1217.89 1662.75,1219.81 1663.33,1220.63 1663.92,1221.37 1664.5,1224.04 1665.09,1221.12 1665.68,1222.81 1666.26,1217.89 1666.85,1216.33 1667.44,1218.56 1668.02,1218.23 1668.61,1216.57 1669.2,1217.23 1669.78,1217.04 1670.37,1214.5 1670.96,1214.33 1671.54,1214.03 1672.13,1214.03 1672.71,1214.01 1673.3,1215.01 1673.89,1213.74 1674.47,1214.45 1675.06,1217.75 1675.65,1216.49 1676.23,1217.54 1676.82,1216.18 1677.41,1215.84 1677.99,1212.25 1678.58,1211.34 1679.17,1210.15 1679.75,1210.31 1680.34,1209.34 1680.92,1209.63 1681.51,1209.66 1682.1,1209.7 1682.68,1207.78 1683.27,1210.05 1683.86,1210.19 1684.44,1209 1685.03,1209.36 1685.62,1210.57 1686.2,1209.55 1686.79,1209.94 1687.37,1211.28 1687.96,1212.49 1688.55,1212.5 1689.13,1214.87 1689.72,1215.76 1690.31,1218.89 1690.89,1218.42 1691.48,1219.15 1692.07,1219.66 1692.65,1218.87 1693.24,1220.56 1693.83,1219.74 1694.41,1218.31 1695,1218.18 1695.58,1217.98 1696.17,1218.85 1696.76,1219.69 1697.34,1221.34 1697.93,1220.83 1698.52,1223.6 1699.1,1222.74 1699.69,1220.89 1700.28,1223.43 1700.86,1221.8 1701.45,1221.18 1702.04,1218.43 1702.62,1212.41 1703.21,1209.07 1703.79,1208.91 1704.38,1211.4 1704.97,1208.96 1705.55,1206.7 1706.14,1205.72 1706.73,1206.99 1707.31,1207.39 1707.9,1206.54 1708.49,1206.79 1709.07,1204.83 1709.66,1203.04 1710.24,1204.76 1710.83,1204.19 1711.42,1203.42 1712,1207.21 1712.59,1209.64 1713.18,1209.67 1713.76,1207.39 1714.35,1206.48 1714.94,1205.45 1715.52,1203.38 1716.11,1201.41 1716.7,1203.13 1717.28,1204.82 1717.87,1205.12 1718.45,1206.74 1719.04,1205.72 1719.63,1204.89 1720.21,1201.85 1720.8,1204.45 1721.39,1202.73 1721.97,1199.79 1722.56,1201.6 1723.15,1202.32 1723.73,1204.93 1724.32,1206.36 1724.91,1208.95 1725.49,1210.3 1726.08,1210.61 1726.66,1211.86 1727.25,1212.92 1727.84,1212.62 1728.42,1213.71 1729.01,1216.85 1729.6,1215.46 1730.18,1213.17 1730.77,1213.03 1731.36,1211.92 1731.94,1211.97 1732.53,1211.92 1733.11,1211.05 1733.7,1211.99 1734.29,1210.86 1734.87,1209.83 1735.46,1209.98 1736.05,1210.04 1736.63,1212.48 1737.22,1213.6 1737.81,1213.71 1738.39,1212.45 1738.98,1212.31 1739.57,1213.51 1740.15,1212.33 1740.74,1212.34 1741.32,1212.1 1741.91,1211.91 1742.5,1213.09 1743.08,1210.92 1743.67,1210.91 1744.26,1211.01 1744.84,1209.11 1745.43,1211.47 1746.02,1210.27 1746.6,1212.55 1747.19,1212.44 1747.78,1212.3 1748.36,1213.65 1748.95,1212.55 1749.53,1211.53 1750.12,1210.45 1750.71,1211.75 1751.29,1211.6 1751.88,1212.91 1752.47,1212.64 1753.05,1212.65 1753.64,1213.77 1754.23,1211.65 1754.81,1212.95 1755.4,1212.12 1755.99,1211 1756.57,1211.15 1757.16,1210.09 1757.74,1210.32 1758.33,1210.33 1758.92,1209.63 1759.5,1210.82 1760.09,1211.06 1760.68,1213.47 1761.26,1214.62 1761.85,1214.56 1762.44,1214.62 1763.02,1214.63 1763.61,1214.51 1764.19,1215.45 1764.78,1212.03 1765.37,1211.83 1765.95,1210.78 1766.54,1209.88 1767.13,1211.16 1767.71,1211.16 1768.3,1214.71 1768.89,1214.61 1769.47,1213.14 1770.06,1213.17 1770.65,1212.95 1771.23,1212.73 1771.82,1212.54 1772.4,1210.17 1772.99,1212.39 1773.58,1211.19 1774.16,1211.07 1774.75,1211 1775.34,1210.08 1775.92,1211.25 1776.51,1209.07 1777.1,1210.03 1777.68,1211.26 1778.27,1211.3 1778.86,1211.4 1779.44,1208.95 1780.03,1207.98 1780.61,1207.13 1781.2,1208.6 1781.79,1207.8 1782.37,1207.97 1782.96,1208.18 1783.55,1208.53 1784.13,1208.9 1784.72,1208.09 1785.31,1210.57 1785.89,1211.67 1786.48,1212.39 1787.06,1214.38 1787.65,1216.48 1788.24,1218.35 1788.82,1217.94 1789.41,1217.6 1790,1215.03 1790.58,1215.89 1791.17,1214.49 1791.76,1214.36 1792.34,1213.37 1792.93,1211.01 1793.52,1210.96 1794.1,1210.84 1794.69,1212.06 1795.27,1212.19 1795.86,1211.08 1796.45,1213.26 1797.03,1215.55 1797.62,1214.1 1798.21,1211.68 1798.79,1210.43 1799.38,1211.68 1799.97,1209.42 1800.55,1208.32 1801.14,1207.38 1801.73,1205.67 1802.31,1205.07 1802.9,1204.43 1803.48,1205.84 1804.07,1205.04 1804.66,1205.5 1805.24,1205.89 1805.83,1205.29 1806.42,1206.9 1807,1209.7 1807.59,1208.85 1808.18,1209.13 1808.76,1208.29 1809.35,1207.31 1809.94,1208.61 1810.52,1208.66 1811.11,1208.84 1811.69,1210.08 1812.28,1210.35 1812.87,1210.35 1813.45,1212.65 1814.04,1210.4 1814.63,1210.33 1815.21,1209.48 1815.8,1209.56 1816.39,1211.9 1816.97,1209.75 1817.56,1207.62 1818.14,1208.95 1818.73,1210.18 1819.32,1210.19 1819.9,1210.45 1820.49,1211.94 1821.08,1211.91 1821.66,1211.82 1822.25,1212.86 1822.84,1212.75 1823.42,1211.52 1824.01,1210.73 1824.6,1209.71 1825.18,1209.95 1825.77,1209.17 1826.35,1209.47 1826.94,1210.71 1827.53,1210.81 1828.11,1211.95 1828.7,1214.45 1829.29,1213.61 1829.87,1213.46 1830.46,1213.33 1831.05,1210.05 1831.63,1209.82 1832.22,1210.94 1832.81,1211.06 1833.39,1211.1 1833.98,1212.36 1834.56,1213.17 1835.15,1210.75 1835.74,1209.82 1836.32,1209.95 1836.91,1210.02 1837.5,1210.24 1838.08,1211.44 1838.67,1211.54 1839.26,1209.53 1839.84,1210.8 1840.43,1214.14 1841.01,1214.9 1841.6,1215.95 1842.19,1215.97 1842.77,1217.86 1843.36,1216.3 1843.95,1215.17 1844.53,1213.97 1845.12,1216.97 1845.71,1217.7 1846.29,1216.23 1846.88,1214.67 1847.47,1212.25 1848.05,1210.2 1848.64,1211.42 1849.22,1212.76 1849.81,1213.88 1850.4,1213.58 1850.98,1213.5 1851.57,1215.64 1852.16,1216.58 1852.74,1215.3 1853.33,1212.87 1853.92,1211.95 1854.5,1212.12 1855.09,1210.77 1855.68,1211.74 1856.26,1211.72 1856.85,1215.14 1857.43,1216.06 1858.02,1214.84 1858.61,1215.87 1859.19,1212.39 1859.78,1212.43 1860.37,1210 1860.95,1211.17 1861.54,1207.83 1862.13,1207.97 1862.71,1207.94 1863.3,1208.12 1863.88,1210.38 1864.47,1210.56 1865.06,1211.79 1865.64,1211.69 1866.23,1211.84 1866.82,1214.03 1867.4,1213.89 1867.99,1212.59 1868.58,1212.39 1869.16,1211.93 1869.75,1209.68 1870.34,1208.82 1870.92,1208.82 1871.51,1208.06 1872.09,1206.3 1872.68,1208.59 1873.27,1209.92 1873.85,1206.64 1874.44,1207.02 1875.03,1207.28 1875.61,1207.55 1876.2,1207.98 1876.79,1209.59 1877.37,1212.05 1877.96,1210.7 1878.55,1211.85 1879.13,1215.12 1879.72,1217.04 1880.3,1216.82 1880.89,1215.41 1881.48,1214.24 1882.06,1216.2 1882.65,1215.92 1883.24,1215.79 1883.82,1214.5 1884.41,1214.57 1885,1215.55 1885.58,1215.55 1886.17,1215.49 1886.76,1215.2 1887.34,1213.06 1887.93,1212.87 1888.51,1210.67 1889.1,1210.75 1889.69,1210.86 1890.27,1211.83 1890.86,1214.07 1891.45,1214.13 1892.03,1212.99 1892.62,1214.02 1893.21,1213.96 1893.79,1211.54 1894.38,1212.71 1894.96,1211.6 1895.55,1213.94 1896.14,1213.88 1896.72,1214.89 1897.31,1215.93 1897.9,1219.84 1898.48,1222.64 1899.07,1220.98 1899.66,1220.64 1900.24,1220.2 1900.83,1218.63 1901.42,1218.28 1902,1215.73 1902.59,1215.45 1903.17,1214.02 1903.76,1213.94 1904.35,1213.7 1904.93,1214.67 1905.52,1212.36 1906.11,1212.09 1906.69,1214.29 1907.28,1213.04 1907.87,1213.07 1908.45,1211.86 1909.04,1210.94 1909.63,1213.2 1910.21,1212.99 1910.8,1213.07 1911.38,1213.07 1911.97,1211.94 1912.56,1211.69 1913.14,1212.91 1913.73,1212.88 1914.32,1214.96 1914.9,1212.71 1915.49,1210.35 1916.08,1211.55 1916.66,1213.78 1917.25,1213.76 1917.83,1213.74 1918.42,1215.77 1919.01,1214.3 1919.59,1211.94 1920.18,1213.1 1920.77,1211.98 1921.35,1209.57 1921.94,1211.06 1922.53,1209.99 1923.11,1211.01 1923.7,1213.46 1924.29,1212.31 1924.87,1210.33 1925.46,1209.09 1926.04,1212.34 1926.63,1212.14 1927.22,1211.17 1927.8,1210.01 1928.39,1212.18 1928.98,1212.17 1929.56,1213.26 1930.15,1211.95 1930.74,1210.66 1931.32,1209.7 1931.91,1212.35 1932.5,1213.53 1933.08,1212.39 1933.67,1213.55 1934.25,1214.45 1934.84,1215.32 1935.43,1216.3 1936.01,1216.13 1936.6,1216.05 1937.19,1215.69 1937.77,1215.58 1938.36,1216.66 1938.95,1216.68 1939.53,1218.56 1940.12,1217.16 1940.71,1218.03 1941.29,1212.13 1941.88,1215.21 1942.46,1214.85 1943.05,1211.36 1943.64,1212.62 1944.22,1213.77 1944.81,1213.6 1945.4,1214.73 1945.98,1214.5 1946.57,1215.66 1947.16,1216.67 1947.74,1217.43 1948.33,1217.27 1948.91,1217.77 1949.5,1217.7 1950.09,1215.35 1950.67,1215.35 1951.26,1213.82 1951.85,1213.66 1952.43,1213.54 1953.02,1214.55 1953.61,1215.36 1954.19,1215.35 1954.78,1215.22 1955.37,1215.99 1955.95,1215.83 1956.54,1215.48 1957.12,1213.86 1957.71,1212.88 1958.3,1210.71 1958.88,1210.7 1959.47,1213.84 1960.06,1212.73 1960.64,1211.6 1961.23,1210.42 1961.82,1209.37 1962.4,1209.57 1962.99,1209.57 1963.58,1210.86 1964.16,1211.31 1964.75,1211.6 1965.33,1210.59 1965.92,1210.36 1966.51,1208.14 1967.09,1208.33 1967.68,1208.45 1968.27,1207.67 1968.85,1208.74 1969.44,1207.77 1970.03,1208.87 1970.61,1210.18 1971.2,1210.32 1971.78,1210.66 1972.37,1210.78 1972.96,1209.67 1973.54,1206.56 1974.13,1208.02 1974.72,1208.28 1975.3,1208.73 1975.89,1207.68 1976.48,1211.18 1977.06,1211.26 1977.65,1211.34 1978.24,1209.2 1978.82,1212.68 1979.41,1213.54 1979.99,1212.05 1980.58,1212.98 1981.17,1211.97 1981.75,1212.85 1982.34,1211.31 1982.93,1212.5 1983.51,1212.43 1984.1,1210.03 1984.69,1208.91 1985.27,1212.3 1985.86,1212.33 1986.45,1214.57 1987.03,1213.38 1987.62,1215.63 1988.2,1214.06 1988.79,1213.05 1989.38,1214.26 1989.96,1215.36 1990.55,1215.2 1991.14,1214.91 1991.72,1215.8 1992.31,1216.99 1992.9,1216.66 1993.48,1215.06 1994.07,1213.71 1994.65,1212.68 1995.24,1212.41 1995.83,1210.92 1996.41,1212.01 1997,1214.19 1997.59,1215.23 1998.17,1216.1 1998.76,1213.71 1999.35,1213.7 1999.93,1212.44 2000.52,1211.13 2001.11,1207.89 2001.69,1208.36 2002.28,1208.53 2002.86,1207.46 2003.45,1207.86 2004.04,1205.69 2004.62,1206.9 2005.21,1206.94 2005.8,1205.91 2006.38,1206.24 2006.97,1205.28 2007.56,1204.58 2008.14,1203.61 2008.73,1204.2 2009.32,1205.63 2009.9,1203.81 2010.49,1204.37 2011.07,1203.5 2011.66,1205.24 2012.25,1206.62 2012.83,1205.8 2013.42,1207.31 2014.01,1206.58 2014.59,1206.62 2015.18,1206.87 2015.77,1209.49 2016.35,1209.88 2016.94,1207.78 2017.53,1208.02 2018.11,1205.92 2018.7,1206.04 2019.28,1208.64 2019.87,1211.08 2020.46,1210.13 2021.04,1211.18 2021.63,1212.35 2022.22,1214.37 2022.8,1215.58 2023.39,1215.39 2023.98,1214.45 2024.56,1213.22 2025.15,1213.25 2025.73,1213.2 2026.32,1210.63 2026.91,1208.37 2027.49,1208.55 2028.08,1208.57 2028.67,1208.93 2029.25,1207.88 2029.84,1207.85 2030.43,1207.92 2031.01,1209.25 2031.6,1208.36 2032.19,1207.45 2032.77,1206.46 2033.36,1210.1 2033.94,1210.13 2034.53,1212.48 2035.12,1211.1 2035.7,1210.92 2036.29,1209.65 2036.88,1207.71 2037.46,1205.75 2038.05,1207.2 2038.64,1205.14 2039.22,1204.42 2039.81,1209.19 2040.4,1209.51 2040.98,1209.82 2041.57,1210.04 2042.15,1212.5 2042.74,1211.35 2043.33,1213.75 2043.91,1212.4 2044.5,1213.62 2045.09,1213.88 2045.67,1213.9 2046.26,1215.99 2046.85,1217 2047.43,1216.62 2048.02,1215.6 2048.6,1212.33 2049.19,1212.39 2049.78,1212.28 2050.36,1212.42 2050.95,1212.64 2051.54,1214 2052.12,1212.02 2052.71,1211.84 2053.3,1214.32 2053.88,1215.35 2054.47,1214.02 2055.06,1214.13 2055.64,1212.93 2056.23,1213.18 2056.81,1211.78 2057.4,1214.1 2057.99,1216.3 2058.57,1214.88 2059.16,1215.87 2059.75,1216.75 2060.33,1218.69 2060.92,1214.91 2061.51,1215.9 2062.09,1214.68 2062.68,1213.58 2063.27,1213.54 2063.85,1215.59 2064.44,1216.56 2065.02,1216.39 2065.61,1216.08 2066.2,1215.74 2066.78,1217.85 2067.37,1219.68 2067.96,1222.43 2068.54,1225.2 2069.13,1223.7 2069.72,1223.15 2070.3,1223.37 2070.89,1221.58 2071.48,1223.46 2072.06,1222.83 2072.65,1224.37 2073.23,1220.25 2073.82,1221.96 2074.41,1223.58 2074.99,1222.91 2075.58,1222.27 2076.17,1218.32 2076.75,1216.58 2077.34,1217.47 2077.93,1217.15 2078.51,1214.48 2079.1,1213.17 2079.68,1214.05 2080.27,1210.52 2080.86,1211.63 2081.44,1212.59 2082.03,1213.48 2082.62,1212.16 2083.2,1212.2 2083.79,1214.38 2084.38,1215.3 2084.96,1213.94 2085.55,1217.07 2086.14,1216.79 2086.72,1214.23 2087.31,1214.1 2087.89,1215.03 2088.48,1212.99 2089.07,1214.04 2089.65,1212.81 2090.24,1211.55 2090.83,1212.87 2091.41,1211.94 2092,1211.94 2092.59,1213.25 2093.17,1210.78 2093.76,1210.82 2094.35,1209.75 2094.93,1208.67 2095.52,1205.44 2096.1,1206.94 2096.69,1206.2 2097.28,1204.33 2097.86,1205.81 2098.45,1205.96 2099.04,1205.12 2099.62,1205.63 2100.21,1205.94 2100.8,1208.34 2101.38,1207.55 2101.97,1207.9 2102.55,1208.08 2103.14,1209.76 2103.73,1211.11 2104.31,1210.05 2104.9,1210.17 2105.49,1211.49 2106.07,1211.55 2106.66,1211.44 2107.25,1210.37 2107.83,1210.55 2108.42,1210.77 2109.01,1207.58 2109.59,1211.22 2110.18,1210.06 2110.76,1209.91 2111.35,1208.98 2111.94,1208 2112.52,1207.03 2113.11,1208.3 2113.7,1211.57 2114.28,1212.43 2114.87,1211.34 2115.46,1208.33 2116.04,1209.5 2116.63,1212.91 2117.22,1212.95 2117.8,1212.9 2118.39,1212.72 2118.97,1209.41 2119.56,1209.75 2120.15,1212.25 2120.73,1213.58 2121.32,1212.29 2121.91,1211.02 2122.49,1212.19 2123.08,1212.12 2123.67,1213.24 2124.25,1213.03 2124.84,1213.93 2125.42,1213.89 2126.01,1213.87 2126.6,1213.77 2127.18,1213.79 2127.77,1215.05 2128.36,1213.95 2128.94,1212.79 2129.53,1211.59 2130.12,1210.39 2130.7,1211.46 2131.29,1210.43 2131.88,1209.49 2132.46,1208.26 2133.05,1208.49 2133.63,1207.59 2134.22,1206.57 2134.81,1208.12 2135.39,1206.24 2135.98,1205.3 2136.57,1206.67 2137.15,1204.81 2137.74,1204.01 2138.33,1206.53 2138.91,1205.89 2139.5,1207.53 2140.09,1207.91 2140.67,1210.49 2141.26,1208.53 2141.84,1208.76 2142.43,1208.91 2143.02,1210.09 2143.6,1212.45 2144.19,1211.02 2144.78,1210.14 2145.36,1213.38 2145.95,1213.49 2146.54,1214.57 2147.12,1212.38 2147.71,1212.32 2148.3,1212.38 2148.88,1212.88 2149.47,1213.85 2150.05,1214.07 2150.64,1213.07 2151.23,1212.9 2151.81,1211.72 2152.4,1213.9 2152.99,1216.01 2153.57,1214.93 2154.16,1216.95 2154.75,1217.79 2155.33,1216.4 2155.92,1216.34 2156.5,1216.16 2157.09,1216.11 2157.68,1212.4 2158.26,1210.11 \"/>\n<path clip-path=\"url(#clip452)\" d=\"M986.025 1212.47 L986.612 1212.47 L987.198 1212.47 L987.785 1212.47 L988.371 1212.47 L988.957 1212.47 L989.544 1212.47 L990.13 1212.47 L990.717 1212.47 L991.303 1212.47 L991.889 1212.47 L992.476 1212.47 L993.062 1212.47 L993.649 1212.47 L994.235 1212.47 L994.822 1212.47 L995.408 1212.47 L995.994 1212.47 L996.581 1212.47 L997.167 1212.47 L997.754 1212.47 L998.34 1212.47 L998.926 1212.47 L999.513 1212.47 L1000.1 1212.47 L1000.69 1212.47 L1001.27 1212.47 L1001.86 1212.47 L1002.44 1212.47 L1003.03 1212.47 L1003.62 1212.47 L1004.2 1212.47 L1004.79 1212.47 L1005.38 1212.47 L1005.96 1212.47 L1006.55 1212.47 L1007.14 1212.47 L1007.72 1212.47 L1008.31 1212.47 L1008.9 1212.47 L1009.48 1212.47 L1010.07 1212.47 L1010.65 1212.47 L1011.24 1212.47 L1011.83 1212.47 L1012.41 1212.47 L1013 1212.47 L1013.59 1212.47 L1014.17 1212.47 L1014.76 1212.47 L1015.35 1212.47 L1015.93 1212.47 L1016.52 1212.47 L1017.11 1212.47 L1017.69 1212.47 L1018.28 1212.47 L1018.86 1212.47 L1019.45 1212.47 L1020.04 1212.47 L1020.62 1212.47 L1021.21 1212.47 L1021.8 1212.47 L1022.38 1212.47 L1022.97 1212.47 L1023.56 1212.47 L1024.14 1212.47 L1024.73 1212.47 L1025.32 1212.47 L1025.9 1212.47 L1026.49 1212.47 L1027.07 1212.47 L1027.66 1212.47 L1028.25 1212.47 L1028.83 1212.47 L1029.42 1212.47 L1030.01 1212.47 L1030.59 1212.47 L1031.18 1212.47 L1031.77 1212.47 L1032.35 1212.47 L1032.94 1212.47 L1033.52 1212.47 L1034.11 1212.47 L1034.7 1212.47 L1035.28 1212.47 L1035.87 1212.47 L1036.46 1212.47 L1037.04 1212.47 L1037.63 1212.47 L1038.22 1212.47 L1038.8 1212.47 L1039.39 1212.47 L1039.98 1212.47 L1040.56 1212.47 L1041.15 1212.47 L1041.73 1212.47 L1042.32 1212.47 L1042.91 1212.47 L1043.49 1212.47 L1044.08 1212.47 L1044.67 1212.47 L1045.25 1212.47 L1045.84 1212.47 L1046.43 1212.47 L1047.01 1212.47 L1047.6 1212.47 L1048.19 1212.47 L1048.77 1212.47 L1049.36 1212.47 L1049.94 1212.47 L1050.53 1212.47 L1051.12 1212.47 L1051.7 1212.47 L1052.29 1212.47 L1052.88 1212.47 L1053.46 1212.47 L1054.05 1212.47 L1054.64 1212.47 L1055.22 1212.47 L1055.81 1212.47 L1056.39 1212.47 L1056.98 1212.47 L1057.57 1212.47 L1058.15 1212.47 L1058.74 1212.47 L1059.33 1212.47 L1059.91 1212.47 L1060.5 1212.47 L1061.09 1212.47 L1061.67 1212.47 L1062.26 1212.47 L1062.85 1212.47 L1063.43 1212.47 L1064.02 1212.47 L1064.6 1212.47 L1065.19 1212.47 L1065.78 1212.47 L1066.36 1212.47 L1066.95 1212.47 L1067.54 1212.47 L1068.12 1212.47 L1068.71 1212.47 L1069.3 1212.47 L1069.88 1212.47 L1070.47 1212.47 L1071.06 1212.47 L1071.64 1212.47 L1072.23 1212.47 L1072.81 1212.47 L1073.4 1212.47 L1073.99 1212.47 L1074.57 1212.47 L1075.16 1212.47 L1075.75 1212.47 L1076.33 1212.47 L1076.92 1212.47 L1077.51 1212.47 L1078.09 1212.47 L1078.68 1212.47 L1079.26 1212.47 L1079.85 1212.47 L1080.44 1212.47 L1081.02 1212.47 L1081.61 1212.47 L1082.2 1212.47 L1082.78 1212.47 L1083.37 1212.47 L1083.96 1212.47 L1084.54 1212.47 L1085.13 1212.47 L1085.72 1212.47 L1086.3 1212.47 L1086.89 1212.47 L1087.47 1212.47 L1088.06 1212.47 L1088.65 1212.47 L1089.23 1212.47 L1089.82 1212.47 L1090.41 1212.47 L1090.99 1212.47 L1091.58 1212.47 L1092.17 1212.47 L1092.75 1212.47 L1093.34 1212.47 L1093.93 1212.47 L1094.51 1212.47 L1095.1 1212.47 L1095.68 1212.47 L1096.27 1212.47 L1096.86 1212.47 L1097.44 1212.47 L1098.03 1212.47 L1098.62 1212.47 L1099.2 1212.47 L1099.79 1212.47 L1100.38 1212.47 L1100.96 1212.47 L1101.55 1212.47 L1102.14 1212.47 L1102.72 1212.47 L1103.31 1212.47 L1103.89 1212.47 L1104.48 1212.47 L1105.07 1212.47 L1105.65 1212.47 L1106.24 1212.47 L1106.83 1212.47 L1107.41 1212.47 L1108 1212.47 L1108.59 1212.47 L1109.17 1212.47 L1109.76 1212.47 L1110.34 1212.47 L1110.93 1212.47 L1111.52 1212.47 L1112.1 1212.47 L1112.69 1212.47 L1113.28 1212.47 L1113.86 1212.47 L1114.45 1212.47 L1115.04 1212.47 L1115.62 1212.47 L1116.21 1212.47 L1116.8 1212.47 L1117.38 1212.47 L1117.97 1212.47 L1118.55 1212.47 L1119.14 1212.47 L1119.73 1212.47 L1120.31 1212.47 L1120.9 1212.47 L1121.49 1212.47 L1122.07 1212.47 L1122.66 1212.47 L1123.25 1212.47 L1123.83 1212.47 L1124.42 1212.47 L1125.01 1212.47 L1125.59 1212.47 L1126.18 1212.47 L1126.76 1212.47 L1127.35 1212.47 L1127.94 1212.47 L1128.52 1212.47 L1129.11 1212.47 L1129.7 1212.47 L1130.28 1212.47 L1130.87 1212.47 L1131.46 1212.47 L1132.04 1212.47 L1132.63 1212.47 L1133.21 1212.47 L1133.8 1212.47 L1134.39 1212.47 L1134.97 1212.47 L1135.56 1212.47 L1136.15 1212.47 L1136.73 1212.47 L1137.32 1212.47 L1137.91 1212.47 L1138.49 1212.47 L1139.08 1212.47 L1139.67 1212.47 L1140.25 1212.47 L1140.84 1212.47 L1141.42 1212.47 L1142.01 1212.47 L1142.6 1212.47 L1143.18 1212.47 L1143.77 1212.47 L1144.36 1212.47 L1144.94 1212.47 L1145.53 1212.47 L1146.12 1212.47 L1146.7 1212.47 L1147.29 1212.47 L1147.88 1212.47 L1148.46 1212.47 L1149.05 1212.47 L1149.63 1212.47 L1150.22 1212.47 L1150.81 1212.47 L1151.39 1212.47 L1151.98 1212.47 L1152.57 1212.47 L1153.15 1212.47 L1153.74 1212.47 L1154.33 1212.47 L1154.91 1212.47 L1155.5 1212.47 L1156.09 1212.47 L1156.67 1212.47 L1157.26 1212.47 L1157.84 1212.47 L1158.43 1212.47 L1159.02 1212.47 L1159.6 1212.47 L1160.19 1212.47 L1160.78 1212.47 L1161.36 1212.47 L1161.95 1212.47 L1162.54 1212.47 L1163.12 1212.47 L1163.71 1212.47 L1164.29 1212.47 L1164.88 1212.47 L1165.47 1212.47 L1166.05 1212.47 L1166.64 1212.47 L1167.23 1212.47 L1167.81 1212.47 L1168.4 1212.47 L1168.99 1212.47 L1169.57 1212.47 L1170.16 1212.47 L1170.75 1212.47 L1171.33 1212.47 L1171.92 1212.47 L1172.5 1212.47 L1173.09 1212.47 L1173.68 1212.47 L1174.26 1212.47 L1174.85 1212.47 L1175.44 1212.47 L1176.02 1212.47 L1176.61 1212.47 L1177.2 1212.47 L1177.78 1212.47 L1178.37 1212.47 L1178.96 1212.47 L1179.54 1212.47 L1180.13 1212.47 L1180.71 1212.47 L1181.3 1212.47 L1181.89 1212.47 L1182.47 1212.47 L1183.06 1212.47 L1183.65 1212.47 L1184.23 1212.47 L1184.82 1212.47 L1185.41 1212.47 L1185.99 1212.47 L1186.58 1212.47 L1187.16 1212.47 L1187.75 1212.47 L1188.34 1212.47 L1188.92 1212.47 L1189.51 1212.47 L1190.1 1212.47 L1190.68 1212.47 L1191.27 1212.47 L1191.86 1212.47 L1192.44 1212.47 L1193.03 1212.47 L1193.62 1212.47 L1194.2 1212.47 L1194.79 1212.47 L1195.37 1212.47 L1195.96 1212.47 L1196.55 1212.47 L1197.13 1212.47 L1197.72 1212.47 L1198.31 1212.47 L1198.89 1212.47 L1199.48 1212.47 L1200.07 1212.47 L1200.65 1212.47 L1201.24 1212.47 L1201.83 1212.47 L1202.41 1212.47 L1203 1212.47 L1203.58 1212.47 L1204.17 1212.47 L1204.76 1212.47 L1205.34 1212.47 L1205.93 1212.47 L1206.52 1212.47 L1207.1 1212.47 L1207.69 1212.47 L1208.28 1212.47 L1208.86 1212.47 L1209.45 1212.47 L1210.03 1212.47 L1210.62 1212.47 L1211.21 1212.47 L1211.79 1212.47 L1212.38 1212.47 L1212.97 1212.47 L1213.55 1212.47 L1214.14 1212.47 L1214.73 1212.47 L1215.31 1212.47 L1215.9 1212.47 L1216.49 1212.47 L1217.07 1212.47 L1217.66 1212.47 L1218.24 1212.47 L1218.83 1212.47 L1219.42 1212.47 L1220 1212.47 L1220.59 1212.47 L1221.18 1212.47 L1221.76 1212.47 L1222.35 1212.47 L1222.94 1212.47 L1223.52 1212.47 L1224.11 1212.47 L1224.7 1212.47 L1225.28 1212.47 L1225.87 1212.47 L1226.45 1212.47 L1227.04 1212.47 L1227.63 1212.47 L1228.21 1212.47 L1228.8 1212.47 L1229.39 1212.47 L1229.97 1212.47 L1230.56 1212.47 L1231.15 1212.47 L1231.73 1212.47 L1232.32 1212.47 L1232.91 1212.47 L1233.49 1212.47 L1234.08 1212.47 L1234.66 1212.47 L1235.25 1212.47 L1235.84 1212.47 L1236.42 1212.47 L1237.01 1212.47 L1237.6 1212.47 L1238.18 1212.47 L1238.77 1212.47 L1239.36 1212.47 L1239.94 1212.47 L1240.53 1212.47 L1241.11 1212.47 L1241.7 1212.47 L1242.29 1212.47 L1242.87 1212.47 L1243.46 1212.47 L1244.05 1212.47 L1244.63 1212.47 L1245.22 1212.47 L1245.81 1212.47 L1246.39 1212.47 L1246.98 1212.47 L1247.57 1212.47 L1248.15 1212.47 L1248.74 1212.47 L1249.32 1212.47 L1249.91 1212.47 L1250.5 1212.47 L1251.08 1212.47 L1251.67 1212.47 L1252.26 1212.47 L1252.84 1212.47 L1253.43 1212.47 L1254.02 1212.47 L1254.6 1212.47 L1255.19 1212.47 L1255.78 1212.47 L1256.36 1212.47 L1256.95 1212.47 L1257.53 1212.47 L1258.12 1212.47 L1258.71 1212.47 L1259.29 1212.47 L1259.88 1212.47 L1260.47 1212.47 L1261.05 1212.47 L1261.64 1212.47 L1262.23 1212.47 L1262.81 1212.47 L1263.4 1212.47 L1263.98 1212.47 L1264.57 1212.47 L1265.16 1212.47 L1265.74 1212.47 L1266.33 1212.47 L1266.92 1212.47 L1267.5 1212.47 L1268.09 1212.47 L1268.68 1212.47 L1269.26 1212.47 L1269.85 1212.47 L1270.44 1212.47 L1271.02 1212.47 L1271.61 1212.47 L1272.19 1212.47 L1272.78 1212.47 L1273.37 1212.47 L1273.95 1212.47 L1274.54 1212.47 L1275.13 1212.47 L1275.71 1212.47 L1276.3 1212.47 L1276.89 1212.47 L1277.47 1212.47 L1278.06 1212.47 L1278.65 1212.47 L1279.23 1212.47 L1279.82 1212.47 L1280.4 1212.47 L1280.99 1212.47 L1281.58 1212.47 L1282.16 1212.47 L1282.75 1212.47 L1283.34 1212.47 L1283.92 1212.47 L1284.51 1212.47 L1285.1 1212.47 L1285.68 1212.47 L1286.27 1212.47 L1286.86 1212.47 L1287.44 1212.47 L1288.03 1212.47 L1288.61 1212.47 L1289.2 1212.47 L1289.79 1212.47 L1290.37 1212.47 L1290.96 1212.47 L1291.55 1212.47 L1292.13 1212.47 L1292.72 1212.47 L1293.31 1212.47 L1293.89 1212.47 L1294.48 1212.47 L1295.06 1212.47 L1295.65 1212.47 L1296.24 1212.47 L1296.82 1212.47 L1297.41 1212.47 L1298 1212.47 L1298.58 1212.47 L1299.17 1212.47 L1299.76 1212.47 L1300.34 1212.47 L1300.93 1212.47 L1301.52 1212.47 L1302.1 1212.47 L1302.69 1212.47 L1303.27 1212.47 L1303.86 1212.47 L1304.45 1212.47 L1305.03 1212.47 L1305.62 1212.47 L1306.21 1212.47 L1306.79 1212.47 L1307.38 1212.47 L1307.97 1212.47 L1308.55 1212.47 L1309.14 1212.47 L1309.73 1212.47 L1310.31 1212.47 L1310.9 1212.47 L1311.48 1212.47 L1312.07 1212.47 L1312.66 1212.47 L1313.24 1212.47 L1313.83 1212.47 L1314.42 1212.47 L1315 1212.47 L1315.59 1212.47 L1316.18 1212.47 L1316.76 1212.47 L1317.35 1212.47 L1317.93 1212.47 L1318.52 1212.47 L1319.11 1212.47 L1319.69 1212.47 L1320.28 1212.47 L1320.87 1212.47 L1321.45 1212.47 L1322.04 1212.47 L1322.63 1212.47 L1323.21 1212.47 L1323.8 1212.47 L1324.39 1212.47 L1324.97 1212.47 L1325.56 1212.47 L1326.14 1212.47 L1326.73 1212.47 L1327.32 1212.47 L1327.9 1212.47 L1328.49 1212.47 L1329.08 1212.47 L1329.66 1212.47 L1330.25 1212.47 L1330.84 1212.47 L1331.42 1212.47 L1332.01 1212.47 L1332.6 1212.47 L1333.18 1212.47 L1333.77 1212.47 L1334.35 1212.47 L1334.94 1212.47 L1335.53 1212.47 L1336.11 1212.47 L1336.7 1212.47 L1337.29 1212.47 L1337.87 1212.47 L1338.46 1212.47 L1339.05 1212.47 L1339.63 1212.47 L1340.22 1212.47 L1340.8 1212.47 L1341.39 1212.47 L1341.98 1212.47 L1342.56 1212.47 L1343.15 1212.47 L1343.74 1212.47 L1344.32 1212.47 L1344.91 1212.47 L1345.5 1212.47 L1346.08 1212.47 L1346.67 1212.47 L1347.26 1212.47 L1347.84 1212.47 L1348.43 1212.47 L1349.01 1212.47 L1349.6 1212.47 L1350.19 1212.47 L1350.77 1212.47 L1351.36 1212.47 L1351.95 1212.47 L1352.53 1212.47 L1353.12 1212.47 L1353.71 1212.47 L1354.29 1212.47 L1354.88 1212.47 L1355.47 1212.47 L1356.05 1212.47 L1356.64 1212.47 L1357.22 1212.47 L1357.81 1212.47 L1358.4 1212.47 L1358.98 1212.47 L1359.57 1212.47 L1360.16 1212.47 L1360.74 1212.47 L1361.33 1212.47 L1361.92 1212.47 L1362.5 1212.47 L1363.09 1212.47 L1363.68 1212.47 L1364.26 1212.47 L1364.85 1212.47 L1365.43 1212.47 L1366.02 1212.47 L1366.61 1212.47 L1367.19 1212.47 L1367.78 1212.47 L1368.37 1212.47 L1368.95 1212.47 L1369.54 1212.47 L1370.13 1212.47 L1370.71 1212.47 L1371.3 1212.47 L1371.88 1212.47 L1372.47 1212.47 L1373.06 1212.47 L1373.64 1212.47 L1374.23 1212.47 L1374.82 1212.47 L1375.4 1212.47 L1375.99 1212.47 L1376.58 1212.47 L1377.16 1212.47 L1377.75 1212.47 L1378.34 1212.47 L1378.92 1212.47 L1379.51 1212.47 L1380.09 1212.47 L1380.68 1212.47 L1381.27 1212.47 L1381.85 1212.47 L1382.44 1212.47 L1383.03 1212.47 L1383.61 1212.47 L1384.2 1212.47 L1384.79 1212.47 L1385.37 1212.47 L1385.96 1212.47 L1386.55 1212.47 L1387.13 1212.47 L1387.72 1212.47 L1388.3 1212.47 L1388.89 1212.47 L1389.48 1212.47 L1390.06 1212.47 L1390.65 1212.47 L1391.24 1212.47 L1391.82 1212.47 L1392.41 1212.47 L1393 1212.47 L1393.58 1212.47 L1394.17 1212.47 L1394.75 1212.47 L1395.34 1212.47 L1395.93 1212.47 L1396.51 1212.47 L1397.1 1212.47 L1397.69 1212.47 L1398.27 1212.47 L1398.86 1212.47 L1399.45 1212.47 L1400.03 1212.47 L1400.62 1212.47 L1401.21 1212.47 L1401.79 1212.47 L1402.38 1212.47 L1402.96 1212.47 L1403.55 1212.47 L1404.14 1212.47 L1404.72 1212.47 L1405.31 1212.47 L1405.9 1212.47 L1406.48 1212.47 L1407.07 1212.47 L1407.66 1212.47 L1408.24 1212.47 L1408.83 1212.47 L1409.42 1212.47 L1410 1212.47 L1410.59 1212.47 L1411.17 1212.47 L1411.76 1212.47 L1412.35 1212.47 L1412.93 1212.47 L1413.52 1212.47 L1414.11 1212.47 L1414.69 1212.47 L1415.28 1212.47 L1415.87 1212.47 L1416.45 1212.47 L1417.04 1212.47 L1417.63 1212.47 L1418.21 1212.47 L1418.8 1212.47 L1419.38 1212.47 L1419.97 1212.47 L1420.56 1212.47 L1421.14 1212.47 L1421.73 1212.47 L1422.32 1212.47 L1422.9 1212.47 L1423.49 1212.47 L1424.08 1212.47 L1424.66 1212.47 L1425.25 1212.47 L1425.83 1212.47 L1426.42 1212.47 L1427.01 1212.47 L1427.59 1212.47 L1428.18 1212.47 L1428.77 1212.47 L1429.35 1212.47 L1429.94 1212.47 L1430.53 1212.47 L1431.11 1212.47 L1431.7 1212.47 L1432.29 1212.47 L1432.87 1212.47 L1433.46 1212.47 L1434.04 1212.47 L1434.63 1212.47 L1435.22 1212.47 L1435.8 1212.47 L1436.39 1212.47 L1436.98 1212.47 L1437.56 1212.47 L1438.15 1212.47 L1438.74 1212.47 L1439.32 1212.47 L1439.91 1212.47 L1440.5 1212.47 L1441.08 1212.47 L1441.67 1212.47 L1442.25 1212.47 L1442.84 1212.47 L1443.43 1212.47 L1444.01 1212.47 L1444.6 1212.47 L1445.19 1212.47 L1445.77 1212.47 L1446.36 1212.47 L1446.95 1212.47 L1447.53 1212.47 L1448.12 1212.47 L1448.7 1212.47 L1449.29 1212.47 L1449.88 1212.47 L1450.46 1212.47 L1451.05 1212.47 L1451.64 1212.47 L1452.22 1212.47 L1452.81 1212.47 L1453.4 1212.47 L1453.98 1212.47 L1454.57 1212.47 L1455.16 1212.47 L1455.74 1212.47 L1456.33 1212.47 L1456.91 1212.47 L1457.5 1212.47 L1458.09 1212.47 L1458.67 1212.47 L1459.26 1212.47 L1459.85 1212.47 L1460.43 1212.47 L1461.02 1212.47 L1461.61 1212.47 L1462.19 1212.47 L1462.78 1212.47 L1463.37 1212.47 L1463.95 1212.47 L1464.54 1212.47 L1465.12 1212.47 L1465.71 1212.47 L1466.3 1212.47 L1466.88 1212.47 L1467.47 1212.47 L1468.06 1212.47 L1468.64 1212.47 L1469.23 1212.47 L1469.82 1212.47 L1470.4 1212.47 L1470.99 1212.47 L1471.57 1212.47 L1472.16 1212.47 L1472.75 1212.47 L1473.33 1212.47 L1473.92 1212.47 L1474.51 1212.47 L1475.09 1212.47 L1475.68 1212.47 L1476.27 1212.47 L1476.85 1212.47 L1477.44 1212.47 L1478.03 1212.47 L1478.61 1212.47 L1479.2 1212.47 L1479.78 1212.47 L1480.37 1212.47 L1480.96 1212.47 L1481.54 1212.47 L1482.13 1212.47 L1482.72 1212.47 L1483.3 1212.47 L1483.89 1212.47 L1484.48 1212.47 L1485.06 1212.47 L1485.65 1212.47 L1486.24 1212.47 L1486.82 1212.47 L1487.41 1212.47 L1487.99 1212.47 L1488.58 1212.47 L1489.17 1212.47 L1489.75 1212.47 L1490.34 1212.47 L1490.93 1212.47 L1491.51 1212.47 L1492.1 1212.47 L1492.69 1212.47 L1493.27 1212.47 L1493.86 1212.47 L1494.45 1212.47 L1495.03 1212.47 L1495.62 1212.47 L1496.2 1212.47 L1496.79 1212.47 L1497.38 1212.47 L1497.96 1212.47 L1498.55 1212.47 L1499.14 1212.47 L1499.72 1212.47 L1500.31 1212.47 L1500.9 1212.47 L1501.48 1212.47 L1502.07 1212.47 L1502.65 1212.47 L1503.24 1212.47 L1503.83 1212.47 L1504.41 1212.47 L1505 1212.47 L1505.59 1212.47 L1506.17 1212.47 L1506.76 1212.47 L1507.35 1212.47 L1507.93 1212.47 L1508.52 1212.47 L1509.11 1212.47 L1509.69 1212.47 L1510.28 1212.47 L1510.86 1212.47 L1511.45 1212.47 L1512.04 1212.47 L1512.62 1212.47 L1513.21 1212.47 L1513.8 1212.47 L1514.38 1212.47 L1514.97 1212.47 L1515.56 1212.47 L1516.14 1212.47 L1516.73 1212.47 L1517.32 1212.47 L1517.9 1212.47 L1518.49 1212.47 L1519.07 1212.47 L1519.66 1212.47 L1520.25 1212.47 L1520.83 1212.47 L1521.42 1212.47 L1522.01 1212.47 L1522.59 1212.47 L1523.18 1212.47 L1523.77 1212.47 L1524.35 1212.47 L1524.94 1212.47 L1525.52 1212.47 L1526.11 1212.47 L1526.7 1212.47 L1527.28 1212.47 L1527.87 1212.47 L1528.46 1212.47 L1529.04 1212.47 L1529.63 1212.47 L1530.22 1212.47 L1530.8 1212.47 L1531.39 1212.47 L1531.98 1212.47 L1532.56 1212.47 L1533.15 1212.47 L1533.73 1212.47 L1534.32 1212.47 L1534.91 1212.47 L1535.49 1212.47 L1536.08 1212.47 L1536.67 1212.47 L1537.25 1212.47 L1537.84 1212.47 L1538.43 1212.47 L1539.01 1212.47 L1539.6 1212.47 L1540.19 1212.47 L1540.77 1212.47 L1541.36 1212.47 L1541.94 1212.47 L1542.53 1212.47 L1543.12 1212.47 L1543.7 1212.47 L1544.29 1212.47 L1544.88 1212.47 L1545.46 1212.47 L1546.05 1212.47 L1546.64 1212.47 L1547.22 1212.47 L1547.81 1212.47 L1548.4 1212.47 L1548.98 1212.47 L1549.57 1212.47 L1550.15 1212.47 L1550.74 1212.47 L1551.33 1212.47 L1551.91 1212.47 L1552.5 1212.47 L1553.09 1212.47 L1553.67 1212.47 L1554.26 1212.47 L1554.85 1212.47 L1555.43 1212.47 L1556.02 1212.47 L1556.6 1212.47 L1557.19 1212.47 L1557.78 1212.47 L1558.36 1212.47 L1558.95 1212.47 L1559.54 1212.47 L1560.12 1212.47 L1560.71 1212.47 L1561.3 1212.47 L1561.88 1212.47 L1562.47 1212.47 L1563.06 1212.47 L1563.64 1212.47 L1564.23 1212.47 L1564.81 1212.47 L1565.4 1212.47 L1565.99 1212.47 L1566.57 1212.47 L1567.16 1212.47 L1567.75 1212.47 L1568.33 1212.47 L1568.92 1212.47 L1569.51 1212.47 L1570.09 1212.47 L1570.68 1212.47 L1571.27 1212.47 L1571.85 1212.47 L1572.44 1212.47 L1573.02 1212.47 L1573.61 1212.47 L1574.2 1212.47 L1574.78 1212.47 L1575.37 1212.47 L1575.96 1212.47 L1576.54 1212.47 L1577.13 1212.47 L1577.72 1212.47 L1578.3 1212.47 L1578.89 1212.47 L1579.47 1212.47 L1580.06 1212.47 L1580.65 1212.47 L1581.23 1212.47 L1581.82 1212.47 L1582.41 1212.47 L1582.99 1212.47 L1583.58 1212.47 L1584.17 1212.47 L1584.75 1212.47 L1585.34 1212.47 L1585.93 1212.47 L1586.51 1212.47 L1587.1 1212.47 L1587.68 1212.47 L1588.27 1212.47 L1588.86 1212.47 L1589.44 1212.47 L1590.03 1212.47 L1590.62 1212.47 L1591.2 1212.47 L1591.79 1212.47 L1592.38 1212.47 L1592.96 1212.47 L1593.55 1212.47 L1594.14 1212.47 L1594.72 1212.47 L1595.31 1212.47 L1595.89 1212.47 L1596.48 1212.47 L1597.07 1212.47 L1597.65 1212.47 L1598.24 1212.47 L1598.83 1212.47 L1599.41 1212.47 L1600 1212.47 L1600.59 1212.47 L1601.17 1212.47 L1601.76 1212.47 L1602.34 1212.47 L1602.93 1212.47 L1603.52 1212.47 L1604.1 1212.47 L1604.69 1212.47 L1605.28 1212.47 L1605.86 1212.47 L1606.45 1212.47 L1607.04 1212.47 L1607.62 1212.47 L1608.21 1212.47 L1608.8 1212.47 L1609.38 1212.47 L1609.97 1212.47 L1610.55 1212.47 L1611.14 1212.47 L1611.73 1212.47 L1612.31 1212.47 L1612.9 1212.47 L1613.49 1212.47 L1614.07 1212.47 L1614.66 1212.47 L1615.25 1212.47 L1615.83 1212.47 L1616.42 1212.47 L1617.01 1212.47 L1617.59 1212.47 L1618.18 1212.47 L1618.76 1212.47 L1619.35 1212.47 L1619.94 1212.47 L1620.52 1212.47 L1621.11 1212.47 L1621.7 1212.47 L1622.28 1212.47 L1622.87 1212.47 L1623.46 1212.47 L1624.04 1212.47 L1624.63 1212.47 L1625.22 1212.47 L1625.8 1212.47 L1626.39 1212.47 L1626.97 1212.47 L1627.56 1212.47 L1628.15 1212.47 L1628.73 1212.47 L1629.32 1212.47 L1629.91 1212.47 L1630.49 1212.47 L1631.08 1212.47 L1631.67 1212.47 L1632.25 1212.47 L1632.84 1212.47 L1633.42 1212.47 L1634.01 1212.47 L1634.6 1212.47 L1635.18 1212.47 L1635.77 1212.47 L1636.36 1212.47 L1636.94 1212.47 L1637.53 1212.47 L1638.12 1212.47 L1638.7 1212.47 L1639.29 1212.47 L1639.88 1212.47 L1640.46 1212.47 L1641.05 1212.47 L1641.63 1212.47 L1642.22 1212.47 L1642.81 1212.47 L1643.39 1212.47 L1643.98 1212.47 L1644.57 1212.47 L1645.15 1212.47 L1645.74 1212.47 L1646.33 1212.47 L1646.91 1212.47 L1647.5 1212.47 L1648.09 1212.47 L1648.67 1212.47 L1649.26 1212.47 L1649.84 1212.47 L1650.43 1212.47 L1651.02 1212.47 L1651.6 1212.47 L1652.19 1212.47 L1652.78 1212.47 L1653.36 1212.47 L1653.95 1212.47 L1654.54 1212.47 L1655.12 1212.47 L1655.71 1212.47 L1656.29 1212.47 L1656.88 1212.47 L1657.47 1212.47 L1658.05 1212.47 L1658.64 1212.47 L1659.23 1212.47 L1659.81 1212.47 L1660.4 1212.47 L1660.99 1212.47 L1661.57 1212.47 L1662.16 1212.47 L1662.75 1212.47 L1663.33 1212.47 L1663.92 1212.47 L1664.5 1212.47 L1665.09 1212.47 L1665.68 1212.47 L1666.26 1212.47 L1666.85 1212.47 L1667.44 1212.47 L1668.02 1212.47 L1668.61 1212.47 L1669.2 1212.47 L1669.78 1212.47 L1670.37 1212.47 L1670.96 1212.47 L1671.54 1212.47 L1672.13 1212.47 L1672.71 1212.47 L1673.3 1212.47 L1673.89 1212.47 L1674.47 1212.47 L1675.06 1212.47 L1675.65 1212.47 L1676.23 1212.47 L1676.82 1212.47 L1677.41 1212.47 L1677.99 1212.47 L1678.58 1212.47 L1679.17 1212.47 L1679.75 1212.47 L1680.34 1212.47 L1680.92 1212.47 L1681.51 1212.47 L1682.1 1212.47 L1682.68 1212.47 L1683.27 1212.47 L1683.86 1212.47 L1684.44 1212.47 L1685.03 1212.47 L1685.62 1212.47 L1686.2 1212.47 L1686.79 1212.47 L1687.37 1212.47 L1687.96 1212.47 L1688.55 1212.47 L1689.13 1212.47 L1689.72 1212.47 L1690.31 1212.47 L1690.89 1212.47 L1691.48 1212.47 L1692.07 1212.47 L1692.65 1212.47 L1693.24 1212.47 L1693.83 1212.47 L1694.41 1212.47 L1695 1212.47 L1695.58 1212.47 L1696.17 1212.47 L1696.76 1212.47 L1697.34 1212.47 L1697.93 1212.47 L1698.52 1212.47 L1699.1 1212.47 L1699.69 1212.47 L1700.28 1212.47 L1700.86 1212.47 L1701.45 1212.47 L1702.04 1212.47 L1702.62 1212.47 L1703.21 1212.47 L1703.79 1212.47 L1704.38 1212.47 L1704.97 1212.47 L1705.55 1212.47 L1706.14 1212.47 L1706.73 1212.47 L1707.31 1212.47 L1707.9 1212.47 L1708.49 1212.47 L1709.07 1212.47 L1709.66 1212.47 L1710.24 1212.47 L1710.83 1212.47 L1711.42 1212.47 L1712 1212.47 L1712.59 1212.47 L1713.18 1212.47 L1713.76 1212.47 L1714.35 1212.47 L1714.94 1212.47 L1715.52 1212.47 L1716.11 1212.47 L1716.7 1212.47 L1717.28 1212.47 L1717.87 1212.47 L1718.45 1212.47 L1719.04 1212.47 L1719.63 1212.47 L1720.21 1212.47 L1720.8 1212.47 L1721.39 1212.47 L1721.97 1212.47 L1722.56 1212.47 L1723.15 1212.47 L1723.73 1212.47 L1724.32 1212.47 L1724.91 1212.47 L1725.49 1212.47 L1726.08 1212.47 L1726.66 1212.47 L1727.25 1212.47 L1727.84 1212.47 L1728.42 1212.47 L1729.01 1212.47 L1729.6 1212.47 L1730.18 1212.47 L1730.77 1212.47 L1731.36 1212.47 L1731.94 1212.47 L1732.53 1212.47 L1733.11 1212.47 L1733.7 1212.47 L1734.29 1212.47 L1734.87 1212.47 L1735.46 1212.47 L1736.05 1212.47 L1736.63 1212.47 L1737.22 1212.47 L1737.81 1212.47 L1738.39 1212.47 L1738.98 1212.47 L1739.57 1212.47 L1740.15 1212.47 L1740.74 1212.47 L1741.32 1212.47 L1741.91 1212.47 L1742.5 1212.47 L1743.08 1212.47 L1743.67 1212.47 L1744.26 1212.47 L1744.84 1212.47 L1745.43 1212.47 L1746.02 1212.47 L1746.6 1212.47 L1747.19 1212.47 L1747.78 1212.47 L1748.36 1212.47 L1748.95 1212.47 L1749.53 1212.47 L1750.12 1212.47 L1750.71 1212.47 L1751.29 1212.47 L1751.88 1212.47 L1752.47 1212.47 L1753.05 1212.47 L1753.64 1212.47 L1754.23 1212.47 L1754.81 1212.47 L1755.4 1212.47 L1755.99 1212.47 L1756.57 1212.47 L1757.16 1212.47 L1757.74 1212.47 L1758.33 1212.47 L1758.92 1212.47 L1759.5 1212.47 L1760.09 1212.47 L1760.68 1212.47 L1761.26 1212.47 L1761.85 1212.47 L1762.44 1212.47 L1763.02 1212.47 L1763.61 1212.47 L1764.19 1212.47 L1764.78 1212.47 L1765.37 1212.47 L1765.95 1212.47 L1766.54 1212.47 L1767.13 1212.47 L1767.71 1212.47 L1768.3 1212.47 L1768.89 1212.47 L1769.47 1212.47 L1770.06 1212.47 L1770.65 1212.47 L1771.23 1212.47 L1771.82 1212.47 L1772.4 1212.47 L1772.99 1212.47 L1773.58 1212.47 L1774.16 1212.47 L1774.75 1212.47 L1775.34 1212.47 L1775.92 1212.47 L1776.51 1212.47 L1777.1 1212.47 L1777.68 1212.47 L1778.27 1212.47 L1778.86 1212.47 L1779.44 1212.47 L1780.03 1212.47 L1780.61 1212.47 L1781.2 1212.47 L1781.79 1212.47 L1782.37 1212.47 L1782.96 1212.47 L1783.55 1212.47 L1784.13 1212.47 L1784.72 1212.47 L1785.31 1212.47 L1785.89 1212.47 L1786.48 1212.47 L1787.06 1212.47 L1787.65 1212.47 L1788.24 1212.47 L1788.82 1212.47 L1789.41 1212.47 L1790 1212.47 L1790.58 1212.47 L1791.17 1212.47 L1791.76 1212.47 L1792.34 1212.47 L1792.93 1212.47 L1793.52 1212.47 L1794.1 1212.47 L1794.69 1212.47 L1795.27 1212.47 L1795.86 1212.47 L1796.45 1212.47 L1797.03 1212.47 L1797.62 1212.47 L1798.21 1212.47 L1798.79 1212.47 L1799.38 1212.47 L1799.97 1212.47 L1800.55 1212.47 L1801.14 1212.47 L1801.73 1212.47 L1802.31 1212.47 L1802.9 1212.47 L1803.48 1212.47 L1804.07 1212.47 L1804.66 1212.47 L1805.24 1212.47 L1805.83 1212.47 L1806.42 1212.47 L1807 1212.47 L1807.59 1212.47 L1808.18 1212.47 L1808.76 1212.47 L1809.35 1212.47 L1809.94 1212.47 L1810.52 1212.47 L1811.11 1212.47 L1811.69 1212.47 L1812.28 1212.47 L1812.87 1212.47 L1813.45 1212.47 L1814.04 1212.47 L1814.63 1212.47 L1815.21 1212.47 L1815.8 1212.47 L1816.39 1212.47 L1816.97 1212.47 L1817.56 1212.47 L1818.14 1212.47 L1818.73 1212.47 L1819.32 1212.47 L1819.9 1212.47 L1820.49 1212.47 L1821.08 1212.47 L1821.66 1212.47 L1822.25 1212.47 L1822.84 1212.47 L1823.42 1212.47 L1824.01 1212.47 L1824.6 1212.47 L1825.18 1212.47 L1825.77 1212.47 L1826.35 1212.47 L1826.94 1212.47 L1827.53 1212.47 L1828.11 1212.47 L1828.7 1212.47 L1829.29 1212.47 L1829.87 1212.47 L1830.46 1212.47 L1831.05 1212.47 L1831.63 1212.47 L1832.22 1212.47 L1832.81 1212.47 L1833.39 1212.47 L1833.98 1212.47 L1834.56 1212.47 L1835.15 1212.47 L1835.74 1212.47 L1836.32 1212.47 L1836.91 1212.47 L1837.5 1212.47 L1838.08 1212.47 L1838.67 1212.47 L1839.26 1212.47 L1839.84 1212.47 L1840.43 1212.47 L1841.01 1212.47 L1841.6 1212.47 L1842.19 1212.47 L1842.77 1212.47 L1843.36 1212.47 L1843.95 1212.47 L1844.53 1212.47 L1845.12 1212.47 L1845.71 1212.47 L1846.29 1212.47 L1846.88 1212.47 L1847.47 1212.47 L1848.05 1212.47 L1848.64 1212.47 L1849.22 1212.47 L1849.81 1212.47 L1850.4 1212.47 L1850.98 1212.47 L1851.57 1212.47 L1852.16 1212.47 L1852.74 1212.47 L1853.33 1212.47 L1853.92 1212.47 L1854.5 1212.47 L1855.09 1212.47 L1855.68 1212.47 L1856.26 1212.47 L1856.85 1212.47 L1857.43 1212.47 L1858.02 1212.47 L1858.61 1212.47 L1859.19 1212.47 L1859.78 1212.47 L1860.37 1212.47 L1860.95 1212.47 L1861.54 1212.47 L1862.13 1212.47 L1862.71 1212.47 L1863.3 1212.47 L1863.88 1212.47 L1864.47 1212.47 L1865.06 1212.47 L1865.64 1212.47 L1866.23 1212.47 L1866.82 1212.47 L1867.4 1212.47 L1867.99 1212.47 L1868.58 1212.47 L1869.16 1212.47 L1869.75 1212.47 L1870.34 1212.47 L1870.92 1212.47 L1871.51 1212.47 L1872.09 1212.47 L1872.68 1212.47 L1873.27 1212.47 L1873.85 1212.47 L1874.44 1212.47 L1875.03 1212.47 L1875.61 1212.47 L1876.2 1212.47 L1876.79 1212.47 L1877.37 1212.47 L1877.96 1212.47 L1878.55 1212.47 L1879.13 1212.47 L1879.72 1212.47 L1880.3 1212.47 L1880.89 1212.47 L1881.48 1212.47 L1882.06 1212.47 L1882.65 1212.47 L1883.24 1212.47 L1883.82 1212.47 L1884.41 1212.47 L1885 1212.47 L1885.58 1212.47 L1886.17 1212.47 L1886.76 1212.47 L1887.34 1212.47 L1887.93 1212.47 L1888.51 1212.47 L1889.1 1212.47 L1889.69 1212.47 L1890.27 1212.47 L1890.86 1212.47 L1891.45 1212.47 L1892.03 1212.47 L1892.62 1212.47 L1893.21 1212.47 L1893.79 1212.47 L1894.38 1212.47 L1894.96 1212.47 L1895.55 1212.47 L1896.14 1212.47 L1896.72 1212.47 L1897.31 1212.47 L1897.9 1212.47 L1898.48 1212.47 L1899.07 1212.47 L1899.66 1212.47 L1900.24 1212.47 L1900.83 1212.47 L1901.42 1212.47 L1902 1212.47 L1902.59 1212.47 L1903.17 1212.47 L1903.76 1212.47 L1904.35 1212.47 L1904.93 1212.47 L1905.52 1212.47 L1906.11 1212.47 L1906.69 1212.47 L1907.28 1212.47 L1907.87 1212.47 L1908.45 1212.47 L1909.04 1212.47 L1909.63 1212.47 L1910.21 1212.47 L1910.8 1212.47 L1911.38 1212.47 L1911.97 1212.47 L1912.56 1212.47 L1913.14 1212.47 L1913.73 1212.47 L1914.32 1212.47 L1914.9 1212.47 L1915.49 1212.47 L1916.08 1212.47 L1916.66 1212.47 L1917.25 1212.47 L1917.83 1212.47 L1918.42 1212.47 L1919.01 1212.47 L1919.59 1212.47 L1920.18 1212.47 L1920.77 1212.47 L1921.35 1212.47 L1921.94 1212.47 L1922.53 1212.47 L1923.11 1212.47 L1923.7 1212.47 L1924.29 1212.47 L1924.87 1212.47 L1925.46 1212.47 L1926.04 1212.47 L1926.63 1212.47 L1927.22 1212.47 L1927.8 1212.47 L1928.39 1212.47 L1928.98 1212.47 L1929.56 1212.47 L1930.15 1212.47 L1930.74 1212.47 L1931.32 1212.47 L1931.91 1212.47 L1932.5 1212.47 L1933.08 1212.47 L1933.67 1212.47 L1934.25 1212.47 L1934.84 1212.47 L1935.43 1212.47 L1936.01 1212.47 L1936.6 1212.47 L1937.19 1212.47 L1937.77 1212.47 L1938.36 1212.47 L1938.95 1212.47 L1939.53 1212.47 L1940.12 1212.47 L1940.71 1212.47 L1941.29 1212.47 L1941.88 1212.47 L1942.46 1212.47 L1943.05 1212.47 L1943.64 1212.47 L1944.22 1212.47 L1944.81 1212.47 L1945.4 1212.47 L1945.98 1212.47 L1946.57 1212.47 L1947.16 1212.47 L1947.74 1212.47 L1948.33 1212.47 L1948.91 1212.47 L1949.5 1212.47 L1950.09 1212.47 L1950.67 1212.47 L1951.26 1212.47 L1951.85 1212.47 L1952.43 1212.47 L1953.02 1212.47 L1953.61 1212.47 L1954.19 1212.47 L1954.78 1212.47 L1955.37 1212.47 L1955.95 1212.47 L1956.54 1212.47 L1957.12 1212.47 L1957.71 1212.47 L1958.3 1212.47 L1958.88 1212.47 L1959.47 1212.47 L1960.06 1212.47 L1960.64 1212.47 L1961.23 1212.47 L1961.82 1212.47 L1962.4 1212.47 L1962.99 1212.47 L1963.58 1212.47 L1964.16 1212.47 L1964.75 1212.47 L1965.33 1212.47 L1965.92 1212.47 L1966.51 1212.47 L1967.09 1212.47 L1967.68 1212.47 L1968.27 1212.47 L1968.85 1212.47 L1969.44 1212.47 L1970.03 1212.47 L1970.61 1212.47 L1971.2 1212.47 L1971.78 1212.47 L1972.37 1212.47 L1972.96 1212.47 L1973.54 1212.47 L1974.13 1212.47 L1974.72 1212.47 L1975.3 1212.47 L1975.89 1212.47 L1976.48 1212.47 L1977.06 1212.47 L1977.65 1212.47 L1978.24 1212.47 L1978.82 1212.47 L1979.41 1212.47 L1979.99 1212.47 L1980.58 1212.47 L1981.17 1212.47 L1981.75 1212.47 L1982.34 1212.47 L1982.93 1212.47 L1983.51 1212.47 L1984.1 1212.47 L1984.69 1212.47 L1985.27 1212.47 L1985.86 1212.47 L1986.45 1212.47 L1987.03 1212.47 L1987.62 1212.47 L1988.2 1212.47 L1988.79 1212.47 L1989.38 1212.47 L1989.96 1212.47 L1990.55 1212.47 L1991.14 1212.47 L1991.72 1212.47 L1992.31 1212.47 L1992.9 1212.47 L1993.48 1212.47 L1994.07 1212.47 L1994.65 1212.47 L1995.24 1212.47 L1995.83 1212.47 L1996.41 1212.47 L1997 1212.47 L1997.59 1212.47 L1998.17 1212.47 L1998.76 1212.47 L1999.35 1212.47 L1999.93 1212.47 L2000.52 1212.47 L2001.11 1212.47 L2001.69 1212.47 L2002.28 1212.47 L2002.86 1212.47 L2003.45 1212.47 L2004.04 1212.47 L2004.62 1212.47 L2005.21 1212.47 L2005.8 1212.47 L2006.38 1212.47 L2006.97 1212.47 L2007.56 1212.47 L2008.14 1212.47 L2008.73 1212.47 L2009.32 1212.47 L2009.9 1212.47 L2010.49 1212.47 L2011.07 1212.47 L2011.66 1212.47 L2012.25 1212.47 L2012.83 1212.47 L2013.42 1212.47 L2014.01 1212.47 L2014.59 1212.47 L2015.18 1212.47 L2015.77 1212.47 L2016.35 1212.47 L2016.94 1212.47 L2017.53 1212.47 L2018.11 1212.47 L2018.7 1212.47 L2019.28 1212.47 L2019.87 1212.47 L2020.46 1212.47 L2021.04 1212.47 L2021.63 1212.47 L2022.22 1212.47 L2022.8 1212.47 L2023.39 1212.47 L2023.98 1212.47 L2024.56 1212.47 L2025.15 1212.47 L2025.73 1212.47 L2026.32 1212.47 L2026.91 1212.47 L2027.49 1212.47 L2028.08 1212.47 L2028.67 1212.47 L2029.25 1212.47 L2029.84 1212.47 L2030.43 1212.47 L2031.01 1212.47 L2031.6 1212.47 L2032.19 1212.47 L2032.77 1212.47 L2033.36 1212.47 L2033.94 1212.47 L2034.53 1212.47 L2035.12 1212.47 L2035.7 1212.47 L2036.29 1212.47 L2036.88 1212.47 L2037.46 1212.47 L2038.05 1212.47 L2038.64 1212.47 L2039.22 1212.47 L2039.81 1212.47 L2040.4 1212.47 L2040.98 1212.47 L2041.57 1212.47 L2042.15 1212.47 L2042.74 1212.47 L2043.33 1212.47 L2043.91 1212.47 L2044.5 1212.47 L2045.09 1212.47 L2045.67 1212.47 L2046.26 1212.47 L2046.85 1212.47 L2047.43 1212.47 L2048.02 1212.47 L2048.6 1212.47 L2049.19 1212.47 L2049.78 1212.47 L2050.36 1212.47 L2050.95 1212.47 L2051.54 1212.47 L2052.12 1212.47 L2052.71 1212.47 L2053.3 1212.47 L2053.88 1212.47 L2054.47 1212.47 L2055.06 1212.47 L2055.64 1212.47 L2056.23 1212.47 L2056.81 1212.47 L2057.4 1212.47 L2057.99 1212.47 L2058.57 1212.47 L2059.16 1212.47 L2059.75 1212.47 L2060.33 1212.47 L2060.92 1212.47 L2061.51 1212.47 L2062.09 1212.47 L2062.68 1212.47 L2063.27 1212.47 L2063.85 1212.47 L2064.44 1212.47 L2065.02 1212.47 L2065.61 1212.47 L2066.2 1212.47 L2066.78 1212.47 L2067.37 1212.47 L2067.96 1212.47 L2068.54 1212.47 L2069.13 1212.47 L2069.72 1212.47 L2070.3 1212.47 L2070.89 1212.47 L2071.48 1212.47 L2072.06 1212.47 L2072.65 1212.47 L2073.23 1212.47 L2073.82 1212.47 L2074.41 1212.47 L2074.99 1212.47 L2075.58 1212.47 L2076.17 1212.47 L2076.75 1212.47 L2077.34 1212.47 L2077.93 1212.47 L2078.51 1212.47 L2079.1 1212.47 L2079.68 1212.47 L2080.27 1212.47 L2080.86 1212.47 L2081.44 1212.47 L2082.03 1212.47 L2082.62 1212.47 L2083.2 1212.47 L2083.79 1212.47 L2084.38 1212.47 L2084.96 1212.47 L2085.55 1212.47 L2086.14 1212.47 L2086.72 1212.47 L2087.31 1212.47 L2087.89 1212.47 L2088.48 1212.47 L2089.07 1212.47 L2089.65 1212.47 L2090.24 1212.47 L2090.83 1212.47 L2091.41 1212.47 L2092 1212.47 L2092.59 1212.47 L2093.17 1212.47 L2093.76 1212.47 L2094.35 1212.47 L2094.93 1212.47 L2095.52 1212.47 L2096.1 1212.47 L2096.69 1212.47 L2097.28 1212.47 L2097.86 1212.47 L2098.45 1212.47 L2099.04 1212.47 L2099.62 1212.47 L2100.21 1212.47 L2100.8 1212.47 L2101.38 1212.47 L2101.97 1212.47 L2102.55 1212.47 L2103.14 1212.47 L2103.73 1212.47 L2104.31 1212.47 L2104.9 1212.47 L2105.49 1212.47 L2106.07 1212.47 L2106.66 1212.47 L2107.25 1212.47 L2107.83 1212.47 L2108.42 1212.47 L2109.01 1212.47 L2109.59 1212.47 L2110.18 1212.47 L2110.76 1212.47 L2111.35 1212.47 L2111.94 1212.47 L2112.52 1212.47 L2113.11 1212.47 L2113.7 1212.47 L2114.28 1212.47 L2114.87 1212.47 L2115.46 1212.47 L2116.04 1212.47 L2116.63 1212.47 L2117.22 1212.47 L2117.8 1212.47 L2118.39 1212.47 L2118.97 1212.47 L2119.56 1212.47 L2120.15 1212.47 L2120.73 1212.47 L2121.32 1212.47 L2121.91 1212.47 L2122.49 1212.47 L2123.08 1212.47 L2123.67 1212.47 L2124.25 1212.47 L2124.84 1212.47 L2125.42 1212.47 L2126.01 1212.47 L2126.6 1212.47 L2127.18 1212.47 L2127.77 1212.47 L2128.36 1212.47 L2128.94 1212.47 L2129.53 1212.47 L2130.12 1212.47 L2130.7 1212.47 L2131.29 1212.47 L2131.88 1212.47 L2132.46 1212.47 L2133.05 1212.47 L2133.63 1212.47 L2134.22 1212.47 L2134.81 1212.47 L2135.39 1212.47 L2135.98 1212.47 L2136.57 1212.47 L2137.15 1212.47 L2137.74 1212.47 L2138.33 1212.47 L2138.91 1212.47 L2139.5 1212.47 L2140.09 1212.47 L2140.67 1212.47 L2141.26 1212.47 L2141.84 1212.47 L2142.43 1212.47 L2143.02 1212.47 L2143.6 1212.47 L2144.19 1212.47 L2144.78 1212.47 L2145.36 1212.47 L2145.95 1212.47 L2146.54 1212.47 L2147.12 1212.47 L2147.71 1212.47 L2148.3 1212.47 L2148.88 1212.47 L2149.47 1212.47 L2150.05 1212.47 L2150.64 1212.47 L2151.23 1212.47 L2151.81 1212.47 L2152.4 1212.47 L2152.99 1212.47 L2153.57 1212.47 L2154.16 1212.47 L2154.75 1212.47 L2155.33 1212.47 L2155.92 1212.47 L2156.5 1212.47 L2157.09 1212.47 L2157.68 1212.47 L2158.26 1212.47 L2158.26 1211.88 L2157.68 1211.88 L2157.09 1211.88 L2156.5 1211.88 L2155.92 1211.88 L2155.33 1211.88 L2154.75 1211.88 L2154.16 1211.88 L2153.57 1211.88 L2152.99 1211.88 L2152.4 1211.88 L2151.81 1211.88 L2151.23 1211.88 L2150.64 1211.88 L2150.05 1211.88 L2149.47 1211.88 L2148.88 1211.88 L2148.3 1211.88 L2147.71 1211.88 L2147.12 1211.88 L2146.54 1211.88 L2145.95 1211.88 L2145.36 1211.88 L2144.78 1211.88 L2144.19 1211.88 L2143.6 1211.88 L2143.02 1211.88 L2142.43 1211.88 L2141.84 1211.88 L2141.26 1211.88 L2140.67 1211.88 L2140.09 1211.88 L2139.5 1211.88 L2138.91 1211.88 L2138.33 1211.88 L2137.74 1211.88 L2137.15 1211.88 L2136.57 1211.88 L2135.98 1211.88 L2135.39 1211.88 L2134.81 1211.88 L2134.22 1211.88 L2133.63 1211.88 L2133.05 1211.88 L2132.46 1211.88 L2131.88 1211.88 L2131.29 1211.88 L2130.7 1211.88 L2130.12 1211.88 L2129.53 1211.88 L2128.94 1211.88 L2128.36 1211.88 L2127.77 1211.88 L2127.18 1211.88 L2126.6 1211.88 L2126.01 1211.88 L2125.42 1211.88 L2124.84 1211.88 L2124.25 1211.88 L2123.67 1211.88 L2123.08 1211.88 L2122.49 1211.88 L2121.91 1211.88 L2121.32 1211.88 L2120.73 1211.88 L2120.15 1211.88 L2119.56 1211.88 L2118.97 1211.88 L2118.39 1211.88 L2117.8 1211.88 L2117.22 1211.88 L2116.63 1211.88 L2116.04 1211.88 L2115.46 1211.88 L2114.87 1211.88 L2114.28 1211.88 L2113.7 1211.88 L2113.11 1211.88 L2112.52 1211.88 L2111.94 1211.88 L2111.35 1211.88 L2110.76 1211.88 L2110.18 1211.88 L2109.59 1211.88 L2109.01 1211.88 L2108.42 1211.88 L2107.83 1211.88 L2107.25 1211.88 L2106.66 1211.88 L2106.07 1211.88 L2105.49 1211.88 L2104.9 1211.88 L2104.31 1211.88 L2103.73 1211.88 L2103.14 1211.88 L2102.55 1211.88 L2101.97 1211.88 L2101.38 1211.88 L2100.8 1211.88 L2100.21 1211.88 L2099.62 1211.88 L2099.04 1211.88 L2098.45 1211.88 L2097.86 1211.88 L2097.28 1211.88 L2096.69 1211.88 L2096.1 1211.88 L2095.52 1211.88 L2094.93 1211.88 L2094.35 1211.88 L2093.76 1211.88 L2093.17 1211.88 L2092.59 1211.88 L2092 1211.88 L2091.41 1211.88 L2090.83 1211.88 L2090.24 1211.88 L2089.65 1211.88 L2089.07 1211.88 L2088.48 1211.88 L2087.89 1211.88 L2087.31 1211.88 L2086.72 1211.88 L2086.14 1211.88 L2085.55 1211.88 L2084.96 1211.88 L2084.38 1211.88 L2083.79 1211.88 L2083.2 1211.88 L2082.62 1211.88 L2082.03 1211.88 L2081.44 1211.88 L2080.86 1211.88 L2080.27 1211.88 L2079.68 1211.88 L2079.1 1211.88 L2078.51 1211.88 L2077.93 1211.88 L2077.34 1211.88 L2076.75 1211.88 L2076.17 1211.88 L2075.58 1211.88 L2074.99 1211.88 L2074.41 1211.88 L2073.82 1211.88 L2073.23 1211.88 L2072.65 1211.88 L2072.06 1211.88 L2071.48 1211.88 L2070.89 1211.88 L2070.3 1211.88 L2069.72 1211.88 L2069.13 1211.88 L2068.54 1211.88 L2067.96 1211.88 L2067.37 1211.88 L2066.78 1211.88 L2066.2 1211.88 L2065.61 1211.88 L2065.02 1211.88 L2064.44 1211.88 L2063.85 1211.88 L2063.27 1211.88 L2062.68 1211.88 L2062.09 1211.88 L2061.51 1211.88 L2060.92 1211.88 L2060.33 1211.88 L2059.75 1211.88 L2059.16 1211.88 L2058.57 1211.88 L2057.99 1211.88 L2057.4 1211.88 L2056.81 1211.88 L2056.23 1211.88 L2055.64 1211.88 L2055.06 1211.88 L2054.47 1211.88 L2053.88 1211.88 L2053.3 1211.88 L2052.71 1211.88 L2052.12 1211.88 L2051.54 1211.88 L2050.95 1211.88 L2050.36 1211.88 L2049.78 1211.88 L2049.19 1211.88 L2048.6 1211.88 L2048.02 1211.88 L2047.43 1211.88 L2046.85 1211.88 L2046.26 1211.88 L2045.67 1211.88 L2045.09 1211.88 L2044.5 1211.88 L2043.91 1211.88 L2043.33 1211.88 L2042.74 1211.88 L2042.15 1211.88 L2041.57 1211.88 L2040.98 1211.88 L2040.4 1211.88 L2039.81 1211.88 L2039.22 1211.88 L2038.64 1211.88 L2038.05 1211.88 L2037.46 1211.88 L2036.88 1211.88 L2036.29 1211.88 L2035.7 1211.88 L2035.12 1211.88 L2034.53 1211.88 L2033.94 1211.88 L2033.36 1211.88 L2032.77 1211.88 L2032.19 1211.88 L2031.6 1211.88 L2031.01 1211.88 L2030.43 1211.88 L2029.84 1211.88 L2029.25 1211.88 L2028.67 1211.88 L2028.08 1211.88 L2027.49 1211.88 L2026.91 1211.88 L2026.32 1211.88 L2025.73 1211.88 L2025.15 1211.88 L2024.56 1211.88 L2023.98 1211.88 L2023.39 1211.88 L2022.8 1211.88 L2022.22 1211.88 L2021.63 1211.88 L2021.04 1211.88 L2020.46 1211.88 L2019.87 1211.88 L2019.28 1211.88 L2018.7 1211.88 L2018.11 1211.88 L2017.53 1211.88 L2016.94 1211.88 L2016.35 1211.88 L2015.77 1211.88 L2015.18 1211.88 L2014.59 1211.88 L2014.01 1211.88 L2013.42 1211.88 L2012.83 1211.88 L2012.25 1211.88 L2011.66 1211.88 L2011.07 1211.88 L2010.49 1211.88 L2009.9 1211.88 L2009.32 1211.88 L2008.73 1211.88 L2008.14 1211.88 L2007.56 1211.88 L2006.97 1211.88 L2006.38 1211.88 L2005.8 1211.88 L2005.21 1211.88 L2004.62 1211.88 L2004.04 1211.88 L2003.45 1211.88 L2002.86 1211.88 L2002.28 1211.88 L2001.69 1211.88 L2001.11 1211.88 L2000.52 1211.88 L1999.93 1211.88 L1999.35 1211.88 L1998.76 1211.88 L1998.17 1211.88 L1997.59 1211.88 L1997 1211.88 L1996.41 1211.88 L1995.83 1211.88 L1995.24 1211.88 L1994.65 1211.88 L1994.07 1211.88 L1993.48 1211.88 L1992.9 1211.88 L1992.31 1211.88 L1991.72 1211.88 L1991.14 1211.88 L1990.55 1211.88 L1989.96 1211.88 L1989.38 1211.88 L1988.79 1211.88 L1988.2 1211.88 L1987.62 1211.88 L1987.03 1211.88 L1986.45 1211.88 L1985.86 1211.88 L1985.27 1211.88 L1984.69 1211.88 L1984.1 1211.88 L1983.51 1211.88 L1982.93 1211.88 L1982.34 1211.88 L1981.75 1211.88 L1981.17 1211.88 L1980.58 1211.88 L1979.99 1211.88 L1979.41 1211.88 L1978.82 1211.88 L1978.24 1211.88 L1977.65 1211.88 L1977.06 1211.88 L1976.48 1211.88 L1975.89 1211.88 L1975.3 1211.88 L1974.72 1211.88 L1974.13 1211.88 L1973.54 1211.88 L1972.96 1211.88 L1972.37 1211.88 L1971.78 1211.88 L1971.2 1211.88 L1970.61 1211.88 L1970.03 1211.88 L1969.44 1211.88 L1968.85 1211.88 L1968.27 1211.88 L1967.68 1211.88 L1967.09 1211.88 L1966.51 1211.88 L1965.92 1211.88 L1965.33 1211.88 L1964.75 1211.88 L1964.16 1211.88 L1963.58 1211.88 L1962.99 1211.88 L1962.4 1211.88 L1961.82 1211.88 L1961.23 1211.88 L1960.64 1211.88 L1960.06 1211.88 L1959.47 1211.88 L1958.88 1211.88 L1958.3 1211.88 L1957.71 1211.88 L1957.12 1211.88 L1956.54 1211.88 L1955.95 1211.88 L1955.37 1211.88 L1954.78 1211.88 L1954.19 1211.88 L1953.61 1211.88 L1953.02 1211.88 L1952.43 1211.88 L1951.85 1211.88 L1951.26 1211.88 L1950.67 1211.88 L1950.09 1211.88 L1949.5 1211.88 L1948.91 1211.88 L1948.33 1211.88 L1947.74 1211.88 L1947.16 1211.88 L1946.57 1211.88 L1945.98 1211.88 L1945.4 1211.88 L1944.81 1211.88 L1944.22 1211.88 L1943.64 1211.88 L1943.05 1211.88 L1942.46 1211.88 L1941.88 1211.88 L1941.29 1211.88 L1940.71 1211.88 L1940.12 1211.88 L1939.53 1211.88 L1938.95 1211.88 L1938.36 1211.88 L1937.77 1211.88 L1937.19 1211.88 L1936.6 1211.88 L1936.01 1211.88 L1935.43 1211.88 L1934.84 1211.88 L1934.25 1211.88 L1933.67 1211.88 L1933.08 1211.88 L1932.5 1211.88 L1931.91 1211.88 L1931.32 1211.88 L1930.74 1211.88 L1930.15 1211.88 L1929.56 1211.88 L1928.98 1211.88 L1928.39 1211.88 L1927.8 1211.88 L1927.22 1211.88 L1926.63 1211.88 L1926.04 1211.88 L1925.46 1211.88 L1924.87 1211.88 L1924.29 1211.88 L1923.7 1211.88 L1923.11 1211.88 L1922.53 1211.88 L1921.94 1211.88 L1921.35 1211.88 L1920.77 1211.88 L1920.18 1211.88 L1919.59 1211.88 L1919.01 1211.88 L1918.42 1211.88 L1917.83 1211.88 L1917.25 1211.88 L1916.66 1211.88 L1916.08 1211.88 L1915.49 1211.88 L1914.9 1211.88 L1914.32 1211.88 L1913.73 1211.88 L1913.14 1211.88 L1912.56 1211.88 L1911.97 1211.88 L1911.38 1211.88 L1910.8 1211.88 L1910.21 1211.88 L1909.63 1211.88 L1909.04 1211.88 L1908.45 1211.88 L1907.87 1211.88 L1907.28 1211.88 L1906.69 1211.88 L1906.11 1211.88 L1905.52 1211.88 L1904.93 1211.88 L1904.35 1211.88 L1903.76 1211.88 L1903.17 1211.88 L1902.59 1211.88 L1902 1211.88 L1901.42 1211.88 L1900.83 1211.88 L1900.24 1211.88 L1899.66 1211.88 L1899.07 1211.88 L1898.48 1211.88 L1897.9 1211.88 L1897.31 1211.88 L1896.72 1211.88 L1896.14 1211.88 L1895.55 1211.88 L1894.96 1211.88 L1894.38 1211.88 L1893.79 1211.88 L1893.21 1211.88 L1892.62 1211.88 L1892.03 1211.88 L1891.45 1211.88 L1890.86 1211.88 L1890.27 1211.88 L1889.69 1211.88 L1889.1 1211.88 L1888.51 1211.88 L1887.93 1211.88 L1887.34 1211.88 L1886.76 1211.88 L1886.17 1211.88 L1885.58 1211.88 L1885 1211.88 L1884.41 1211.88 L1883.82 1211.88 L1883.24 1211.88 L1882.65 1211.88 L1882.06 1211.88 L1881.48 1211.88 L1880.89 1211.88 L1880.3 1211.88 L1879.72 1211.88 L1879.13 1211.88 L1878.55 1211.88 L1877.96 1211.88 L1877.37 1211.88 L1876.79 1211.88 L1876.2 1211.88 L1875.61 1211.88 L1875.03 1211.88 L1874.44 1211.88 L1873.85 1211.88 L1873.27 1211.88 L1872.68 1211.88 L1872.09 1211.88 L1871.51 1211.88 L1870.92 1211.88 L1870.34 1211.88 L1869.75 1211.88 L1869.16 1211.88 L1868.58 1211.88 L1867.99 1211.88 L1867.4 1211.88 L1866.82 1211.88 L1866.23 1211.88 L1865.64 1211.88 L1865.06 1211.88 L1864.47 1211.88 L1863.88 1211.88 L1863.3 1211.88 L1862.71 1211.88 L1862.13 1211.88 L1861.54 1211.88 L1860.95 1211.88 L1860.37 1211.88 L1859.78 1211.88 L1859.19 1211.88 L1858.61 1211.88 L1858.02 1211.88 L1857.43 1211.88 L1856.85 1211.88 L1856.26 1211.88 L1855.68 1211.88 L1855.09 1211.88 L1854.5 1211.88 L1853.92 1211.88 L1853.33 1211.88 L1852.74 1211.88 L1852.16 1211.88 L1851.57 1211.88 L1850.98 1211.88 L1850.4 1211.88 L1849.81 1211.88 L1849.22 1211.88 L1848.64 1211.88 L1848.05 1211.88 L1847.47 1211.88 L1846.88 1211.88 L1846.29 1211.88 L1845.71 1211.88 L1845.12 1211.88 L1844.53 1211.88 L1843.95 1211.88 L1843.36 1211.88 L1842.77 1211.88 L1842.19 1211.88 L1841.6 1211.88 L1841.01 1211.88 L1840.43 1211.88 L1839.84 1211.88 L1839.26 1211.88 L1838.67 1211.88 L1838.08 1211.88 L1837.5 1211.88 L1836.91 1211.88 L1836.32 1211.88 L1835.74 1211.88 L1835.15 1211.88 L1834.56 1211.88 L1833.98 1211.88 L1833.39 1211.88 L1832.81 1211.88 L1832.22 1211.88 L1831.63 1211.88 L1831.05 1211.88 L1830.46 1211.88 L1829.87 1211.88 L1829.29 1211.88 L1828.7 1211.88 L1828.11 1211.88 L1827.53 1211.88 L1826.94 1211.88 L1826.35 1211.88 L1825.77 1211.88 L1825.18 1211.88 L1824.6 1211.88 L1824.01 1211.88 L1823.42 1211.88 L1822.84 1211.88 L1822.25 1211.88 L1821.66 1211.88 L1821.08 1211.88 L1820.49 1211.88 L1819.9 1211.88 L1819.32 1211.88 L1818.73 1211.88 L1818.14 1211.88 L1817.56 1211.88 L1816.97 1211.88 L1816.39 1211.88 L1815.8 1211.88 L1815.21 1211.88 L1814.63 1211.88 L1814.04 1211.88 L1813.45 1211.88 L1812.87 1211.88 L1812.28 1211.88 L1811.69 1211.88 L1811.11 1211.88 L1810.52 1211.88 L1809.94 1211.88 L1809.35 1211.88 L1808.76 1211.88 L1808.18 1211.88 L1807.59 1211.88 L1807 1211.88 L1806.42 1211.88 L1805.83 1211.88 L1805.24 1211.88 L1804.66 1211.88 L1804.07 1211.88 L1803.48 1211.88 L1802.9 1211.88 L1802.31 1211.88 L1801.73 1211.88 L1801.14 1211.88 L1800.55 1211.88 L1799.97 1211.88 L1799.38 1211.88 L1798.79 1211.88 L1798.21 1211.88 L1797.62 1211.88 L1797.03 1211.88 L1796.45 1211.88 L1795.86 1211.88 L1795.27 1211.88 L1794.69 1211.88 L1794.1 1211.88 L1793.52 1211.88 L1792.93 1211.88 L1792.34 1211.88 L1791.76 1211.88 L1791.17 1211.88 L1790.58 1211.88 L1790 1211.88 L1789.41 1211.88 L1788.82 1211.88 L1788.24 1211.88 L1787.65 1211.88 L1787.06 1211.88 L1786.48 1211.88 L1785.89 1211.88 L1785.31 1211.88 L1784.72 1211.88 L1784.13 1211.88 L1783.55 1211.88 L1782.96 1211.88 L1782.37 1211.88 L1781.79 1211.88 L1781.2 1211.88 L1780.61 1211.88 L1780.03 1211.88 L1779.44 1211.88 L1778.86 1211.88 L1778.27 1211.88 L1777.68 1211.88 L1777.1 1211.88 L1776.51 1211.88 L1775.92 1211.88 L1775.34 1211.88 L1774.75 1211.88 L1774.16 1211.88 L1773.58 1211.88 L1772.99 1211.88 L1772.4 1211.88 L1771.82 1211.88 L1771.23 1211.88 L1770.65 1211.88 L1770.06 1211.88 L1769.47 1211.88 L1768.89 1211.88 L1768.3 1211.88 L1767.71 1211.88 L1767.13 1211.88 L1766.54 1211.88 L1765.95 1211.88 L1765.37 1211.88 L1764.78 1211.88 L1764.19 1211.88 L1763.61 1211.88 L1763.02 1211.88 L1762.44 1211.88 L1761.85 1211.88 L1761.26 1211.88 L1760.68 1211.88 L1760.09 1211.88 L1759.5 1211.88 L1758.92 1211.88 L1758.33 1211.88 L1757.74 1211.88 L1757.16 1211.88 L1756.57 1211.88 L1755.99 1211.88 L1755.4 1211.88 L1754.81 1211.88 L1754.23 1211.88 L1753.64 1211.88 L1753.05 1211.88 L1752.47 1211.88 L1751.88 1211.88 L1751.29 1211.88 L1750.71 1211.88 L1750.12 1211.88 L1749.53 1211.88 L1748.95 1211.88 L1748.36 1211.88 L1747.78 1211.88 L1747.19 1211.88 L1746.6 1211.88 L1746.02 1211.88 L1745.43 1211.88 L1744.84 1211.88 L1744.26 1211.88 L1743.67 1211.88 L1743.08 1211.88 L1742.5 1211.88 L1741.91 1211.88 L1741.32 1211.88 L1740.74 1211.88 L1740.15 1211.88 L1739.57 1211.88 L1738.98 1211.88 L1738.39 1211.88 L1737.81 1211.88 L1737.22 1211.88 L1736.63 1211.88 L1736.05 1211.88 L1735.46 1211.88 L1734.87 1211.88 L1734.29 1211.88 L1733.7 1211.88 L1733.11 1211.88 L1732.53 1211.88 L1731.94 1211.88 L1731.36 1211.88 L1730.77 1211.88 L1730.18 1211.88 L1729.6 1211.88 L1729.01 1211.88 L1728.42 1211.88 L1727.84 1211.88 L1727.25 1211.88 L1726.66 1211.88 L1726.08 1211.88 L1725.49 1211.88 L1724.91 1211.88 L1724.32 1211.88 L1723.73 1211.88 L1723.15 1211.88 L1722.56 1211.88 L1721.97 1211.88 L1721.39 1211.88 L1720.8 1211.88 L1720.21 1211.88 L1719.63 1211.88 L1719.04 1211.88 L1718.45 1211.88 L1717.87 1211.88 L1717.28 1211.88 L1716.7 1211.88 L1716.11 1211.88 L1715.52 1211.88 L1714.94 1211.88 L1714.35 1211.88 L1713.76 1211.88 L1713.18 1211.88 L1712.59 1211.88 L1712 1211.88 L1711.42 1211.88 L1710.83 1211.88 L1710.24 1211.88 L1709.66 1211.88 L1709.07 1211.88 L1708.49 1211.88 L1707.9 1211.88 L1707.31 1211.88 L1706.73 1211.88 L1706.14 1211.88 L1705.55 1211.88 L1704.97 1211.88 L1704.38 1211.88 L1703.79 1211.88 L1703.21 1211.88 L1702.62 1211.88 L1702.04 1211.88 L1701.45 1211.88 L1700.86 1211.88 L1700.28 1211.88 L1699.69 1211.88 L1699.1 1211.88 L1698.52 1211.88 L1697.93 1211.88 L1697.34 1211.88 L1696.76 1211.88 L1696.17 1211.88 L1695.58 1211.88 L1695 1211.88 L1694.41 1211.88 L1693.83 1211.88 L1693.24 1211.88 L1692.65 1211.88 L1692.07 1211.88 L1691.48 1211.88 L1690.89 1211.88 L1690.31 1211.88 L1689.72 1211.88 L1689.13 1211.88 L1688.55 1211.88 L1687.96 1211.88 L1687.37 1211.88 L1686.79 1211.88 L1686.2 1211.88 L1685.62 1211.88 L1685.03 1211.88 L1684.44 1211.88 L1683.86 1211.88 L1683.27 1211.88 L1682.68 1211.88 L1682.1 1211.88 L1681.51 1211.88 L1680.92 1211.88 L1680.34 1211.88 L1679.75 1211.88 L1679.17 1211.88 L1678.58 1211.88 L1677.99 1211.88 L1677.41 1211.88 L1676.82 1211.88 L1676.23 1211.88 L1675.65 1211.88 L1675.06 1211.88 L1674.47 1211.88 L1673.89 1211.88 L1673.3 1211.88 L1672.71 1211.88 L1672.13 1211.88 L1671.54 1211.88 L1670.96 1211.88 L1670.37 1211.88 L1669.78 1211.88 L1669.2 1211.88 L1668.61 1211.88 L1668.02 1211.88 L1667.44 1211.88 L1666.85 1211.88 L1666.26 1211.88 L1665.68 1211.88 L1665.09 1211.88 L1664.5 1211.88 L1663.92 1211.88 L1663.33 1211.88 L1662.75 1211.88 L1662.16 1211.88 L1661.57 1211.88 L1660.99 1211.88 L1660.4 1211.88 L1659.81 1211.88 L1659.23 1211.88 L1658.64 1211.88 L1658.05 1211.88 L1657.47 1211.88 L1656.88 1211.88 L1656.29 1211.88 L1655.71 1211.88 L1655.12 1211.88 L1654.54 1211.88 L1653.95 1211.88 L1653.36 1211.88 L1652.78 1211.88 L1652.19 1211.88 L1651.6 1211.88 L1651.02 1211.88 L1650.43 1211.88 L1649.84 1211.88 L1649.26 1211.88 L1648.67 1211.88 L1648.09 1211.88 L1647.5 1211.88 L1646.91 1211.88 L1646.33 1211.88 L1645.74 1211.88 L1645.15 1211.88 L1644.57 1211.88 L1643.98 1211.88 L1643.39 1211.88 L1642.81 1211.88 L1642.22 1211.88 L1641.63 1211.88 L1641.05 1211.88 L1640.46 1211.88 L1639.88 1211.88 L1639.29 1211.88 L1638.7 1211.88 L1638.12 1211.88 L1637.53 1211.88 L1636.94 1211.88 L1636.36 1211.88 L1635.77 1211.88 L1635.18 1211.88 L1634.6 1211.88 L1634.01 1211.88 L1633.42 1211.88 L1632.84 1211.88 L1632.25 1211.88 L1631.67 1211.88 L1631.08 1211.88 L1630.49 1211.88 L1629.91 1211.88 L1629.32 1211.88 L1628.73 1211.88 L1628.15 1211.88 L1627.56 1211.88 L1626.97 1211.88 L1626.39 1211.88 L1625.8 1211.88 L1625.22 1211.88 L1624.63 1211.88 L1624.04 1211.88 L1623.46 1211.88 L1622.87 1211.88 L1622.28 1211.88 L1621.7 1211.88 L1621.11 1211.88 L1620.52 1211.88 L1619.94 1211.88 L1619.35 1211.88 L1618.76 1211.88 L1618.18 1211.88 L1617.59 1211.88 L1617.01 1211.88 L1616.42 1211.88 L1615.83 1211.88 L1615.25 1211.88 L1614.66 1211.88 L1614.07 1211.88 L1613.49 1211.88 L1612.9 1211.88 L1612.31 1211.88 L1611.73 1211.88 L1611.14 1211.88 L1610.55 1211.88 L1609.97 1211.88 L1609.38 1211.88 L1608.8 1211.88 L1608.21 1211.88 L1607.62 1211.88 L1607.04 1211.88 L1606.45 1211.88 L1605.86 1211.88 L1605.28 1211.88 L1604.69 1211.88 L1604.1 1211.88 L1603.52 1211.88 L1602.93 1211.88 L1602.34 1211.88 L1601.76 1211.88 L1601.17 1211.88 L1600.59 1211.88 L1600 1211.88 L1599.41 1211.88 L1598.83 1211.88 L1598.24 1211.88 L1597.65 1211.88 L1597.07 1211.88 L1596.48 1211.88 L1595.89 1211.88 L1595.31 1211.88 L1594.72 1211.88 L1594.14 1211.88 L1593.55 1211.88 L1592.96 1211.88 L1592.38 1211.88 L1591.79 1211.88 L1591.2 1211.88 L1590.62 1211.88 L1590.03 1211.88 L1589.44 1211.88 L1588.86 1211.88 L1588.27 1211.88 L1587.68 1211.88 L1587.1 1211.88 L1586.51 1211.88 L1585.93 1211.88 L1585.34 1211.88 L1584.75 1211.88 L1584.17 1211.88 L1583.58 1211.88 L1582.99 1211.88 L1582.41 1211.88 L1581.82 1211.88 L1581.23 1211.88 L1580.65 1211.88 L1580.06 1211.88 L1579.47 1211.88 L1578.89 1211.88 L1578.3 1211.88 L1577.72 1211.88 L1577.13 1211.88 L1576.54 1211.88 L1575.96 1211.88 L1575.37 1211.88 L1574.78 1211.88 L1574.2 1211.88 L1573.61 1211.88 L1573.02 1211.88 L1572.44 1211.88 L1571.85 1211.88 L1571.27 1211.88 L1570.68 1211.88 L1570.09 1211.88 L1569.51 1211.88 L1568.92 1211.88 L1568.33 1211.88 L1567.75 1211.88 L1567.16 1211.88 L1566.57 1211.88 L1565.99 1211.88 L1565.4 1211.88 L1564.81 1211.88 L1564.23 1211.88 L1563.64 1211.88 L1563.06 1211.88 L1562.47 1211.88 L1561.88 1211.88 L1561.3 1211.88 L1560.71 1211.88 L1560.12 1211.88 L1559.54 1211.88 L1558.95 1211.88 L1558.36 1211.88 L1557.78 1211.88 L1557.19 1211.88 L1556.6 1211.88 L1556.02 1211.88 L1555.43 1211.88 L1554.85 1211.88 L1554.26 1211.88 L1553.67 1211.88 L1553.09 1211.88 L1552.5 1211.88 L1551.91 1211.88 L1551.33 1211.88 L1550.74 1211.88 L1550.15 1211.88 L1549.57 1211.88 L1548.98 1211.88 L1548.4 1211.88 L1547.81 1211.88 L1547.22 1211.88 L1546.64 1211.88 L1546.05 1211.88 L1545.46 1211.88 L1544.88 1211.88 L1544.29 1211.88 L1543.7 1211.88 L1543.12 1211.88 L1542.53 1211.88 L1541.94 1211.88 L1541.36 1211.88 L1540.77 1211.88 L1540.19 1211.88 L1539.6 1211.88 L1539.01 1211.88 L1538.43 1211.88 L1537.84 1211.88 L1537.25 1211.88 L1536.67 1211.88 L1536.08 1211.88 L1535.49 1211.88 L1534.91 1211.88 L1534.32 1211.88 L1533.73 1211.88 L1533.15 1211.88 L1532.56 1211.88 L1531.98 1211.88 L1531.39 1211.88 L1530.8 1211.88 L1530.22 1211.88 L1529.63 1211.88 L1529.04 1211.88 L1528.46 1211.88 L1527.87 1211.88 L1527.28 1211.88 L1526.7 1211.88 L1526.11 1211.88 L1525.52 1211.88 L1524.94 1211.88 L1524.35 1211.88 L1523.77 1211.88 L1523.18 1211.88 L1522.59 1211.88 L1522.01 1211.88 L1521.42 1211.88 L1520.83 1211.88 L1520.25 1211.88 L1519.66 1211.88 L1519.07 1211.88 L1518.49 1211.88 L1517.9 1211.88 L1517.32 1211.88 L1516.73 1211.88 L1516.14 1211.88 L1515.56 1211.88 L1514.97 1211.88 L1514.38 1211.88 L1513.8 1211.88 L1513.21 1211.88 L1512.62 1211.88 L1512.04 1211.88 L1511.45 1211.88 L1510.86 1211.88 L1510.28 1211.88 L1509.69 1211.88 L1509.11 1211.88 L1508.52 1211.88 L1507.93 1211.88 L1507.35 1211.88 L1506.76 1211.88 L1506.17 1211.88 L1505.59 1211.88 L1505 1211.88 L1504.41 1211.88 L1503.83 1211.88 L1503.24 1211.88 L1502.65 1211.88 L1502.07 1211.88 L1501.48 1211.88 L1500.9 1211.88 L1500.31 1211.88 L1499.72 1211.88 L1499.14 1211.88 L1498.55 1211.88 L1497.96 1211.88 L1497.38 1211.88 L1496.79 1211.88 L1496.2 1211.88 L1495.62 1211.88 L1495.03 1211.88 L1494.45 1211.88 L1493.86 1211.88 L1493.27 1211.88 L1492.69 1211.88 L1492.1 1211.88 L1491.51 1211.88 L1490.93 1211.88 L1490.34 1211.88 L1489.75 1211.88 L1489.17 1211.88 L1488.58 1211.88 L1487.99 1211.88 L1487.41 1211.88 L1486.82 1211.88 L1486.24 1211.88 L1485.65 1211.88 L1485.06 1211.88 L1484.48 1211.88 L1483.89 1211.88 L1483.3 1211.88 L1482.72 1211.88 L1482.13 1211.88 L1481.54 1211.88 L1480.96 1211.88 L1480.37 1211.88 L1479.78 1211.88 L1479.2 1211.88 L1478.61 1211.88 L1478.03 1211.88 L1477.44 1211.88 L1476.85 1211.88 L1476.27 1211.88 L1475.68 1211.88 L1475.09 1211.88 L1474.51 1211.88 L1473.92 1211.88 L1473.33 1211.88 L1472.75 1211.88 L1472.16 1211.88 L1471.57 1211.88 L1470.99 1211.88 L1470.4 1211.88 L1469.82 1211.88 L1469.23 1211.88 L1468.64 1211.88 L1468.06 1211.88 L1467.47 1211.88 L1466.88 1211.88 L1466.3 1211.88 L1465.71 1211.88 L1465.12 1211.88 L1464.54 1211.88 L1463.95 1211.88 L1463.37 1211.88 L1462.78 1211.88 L1462.19 1211.88 L1461.61 1211.88 L1461.02 1211.88 L1460.43 1211.88 L1459.85 1211.88 L1459.26 1211.88 L1458.67 1211.88 L1458.09 1211.88 L1457.5 1211.88 L1456.91 1211.88 L1456.33 1211.88 L1455.74 1211.88 L1455.16 1211.88 L1454.57 1211.88 L1453.98 1211.88 L1453.4 1211.88 L1452.81 1211.88 L1452.22 1211.88 L1451.64 1211.88 L1451.05 1211.88 L1450.46 1211.88 L1449.88 1211.88 L1449.29 1211.88 L1448.7 1211.88 L1448.12 1211.88 L1447.53 1211.88 L1446.95 1211.88 L1446.36 1211.88 L1445.77 1211.88 L1445.19 1211.88 L1444.6 1211.88 L1444.01 1211.88 L1443.43 1211.88 L1442.84 1211.88 L1442.25 1211.88 L1441.67 1211.88 L1441.08 1211.88 L1440.5 1211.88 L1439.91 1211.88 L1439.32 1211.88 L1438.74 1211.88 L1438.15 1211.88 L1437.56 1211.88 L1436.98 1211.88 L1436.39 1211.88 L1435.8 1211.88 L1435.22 1211.88 L1434.63 1211.88 L1434.04 1211.88 L1433.46 1211.88 L1432.87 1211.88 L1432.29 1211.88 L1431.7 1211.88 L1431.11 1211.88 L1430.53 1211.88 L1429.94 1211.88 L1429.35 1211.88 L1428.77 1211.88 L1428.18 1211.88 L1427.59 1211.88 L1427.01 1211.88 L1426.42 1211.88 L1425.83 1211.88 L1425.25 1211.88 L1424.66 1211.88 L1424.08 1211.88 L1423.49 1211.88 L1422.9 1211.88 L1422.32 1211.88 L1421.73 1211.88 L1421.14 1211.88 L1420.56 1211.88 L1419.97 1211.88 L1419.38 1211.88 L1418.8 1211.88 L1418.21 1211.88 L1417.63 1211.88 L1417.04 1211.88 L1416.45 1211.88 L1415.87 1211.88 L1415.28 1211.88 L1414.69 1211.88 L1414.11 1211.88 L1413.52 1211.88 L1412.93 1211.88 L1412.35 1211.88 L1411.76 1211.88 L1411.17 1211.88 L1410.59 1211.88 L1410 1211.88 L1409.42 1211.88 L1408.83 1211.88 L1408.24 1211.88 L1407.66 1211.88 L1407.07 1211.88 L1406.48 1211.88 L1405.9 1211.88 L1405.31 1211.88 L1404.72 1211.88 L1404.14 1211.88 L1403.55 1211.88 L1402.96 1211.88 L1402.38 1211.88 L1401.79 1211.88 L1401.21 1211.88 L1400.62 1211.88 L1400.03 1211.88 L1399.45 1211.88 L1398.86 1211.88 L1398.27 1211.88 L1397.69 1211.88 L1397.1 1211.88 L1396.51 1211.88 L1395.93 1211.88 L1395.34 1211.88 L1394.75 1211.88 L1394.17 1211.88 L1393.58 1211.88 L1393 1211.88 L1392.41 1211.88 L1391.82 1211.88 L1391.24 1211.88 L1390.65 1211.88 L1390.06 1211.88 L1389.48 1211.88 L1388.89 1211.88 L1388.3 1211.88 L1387.72 1211.88 L1387.13 1211.88 L1386.55 1211.88 L1385.96 1211.88 L1385.37 1211.88 L1384.79 1211.88 L1384.2 1211.88 L1383.61 1211.88 L1383.03 1211.88 L1382.44 1211.88 L1381.85 1211.88 L1381.27 1211.88 L1380.68 1211.88 L1380.09 1211.88 L1379.51 1211.88 L1378.92 1211.88 L1378.34 1211.88 L1377.75 1211.88 L1377.16 1211.88 L1376.58 1211.88 L1375.99 1211.88 L1375.4 1211.88 L1374.82 1211.88 L1374.23 1211.88 L1373.64 1211.88 L1373.06 1211.88 L1372.47 1211.88 L1371.88 1211.88 L1371.3 1211.88 L1370.71 1211.88 L1370.13 1211.88 L1369.54 1211.88 L1368.95 1211.88 L1368.37 1211.88 L1367.78 1211.88 L1367.19 1211.88 L1366.61 1211.88 L1366.02 1211.88 L1365.43 1211.88 L1364.85 1211.88 L1364.26 1211.88 L1363.68 1211.88 L1363.09 1211.88 L1362.5 1211.88 L1361.92 1211.88 L1361.33 1211.88 L1360.74 1211.88 L1360.16 1211.88 L1359.57 1211.88 L1358.98 1211.88 L1358.4 1211.88 L1357.81 1211.88 L1357.22 1211.88 L1356.64 1211.88 L1356.05 1211.88 L1355.47 1211.88 L1354.88 1211.88 L1354.29 1211.88 L1353.71 1211.88 L1353.12 1211.88 L1352.53 1211.88 L1351.95 1211.88 L1351.36 1211.88 L1350.77 1211.88 L1350.19 1211.88 L1349.6 1211.88 L1349.01 1211.88 L1348.43 1211.88 L1347.84 1211.88 L1347.26 1211.88 L1346.67 1211.88 L1346.08 1211.88 L1345.5 1211.88 L1344.91 1211.88 L1344.32 1211.88 L1343.74 1211.88 L1343.15 1211.88 L1342.56 1211.88 L1341.98 1211.88 L1341.39 1211.88 L1340.8 1211.88 L1340.22 1211.88 L1339.63 1211.88 L1339.05 1211.88 L1338.46 1211.88 L1337.87 1211.88 L1337.29 1211.88 L1336.7 1211.88 L1336.11 1211.88 L1335.53 1211.88 L1334.94 1211.88 L1334.35 1211.88 L1333.77 1211.88 L1333.18 1211.88 L1332.6 1211.88 L1332.01 1211.88 L1331.42 1211.88 L1330.84 1211.88 L1330.25 1211.88 L1329.66 1211.88 L1329.08 1211.88 L1328.49 1211.88 L1327.9 1211.88 L1327.32 1211.88 L1326.73 1211.88 L1326.14 1211.88 L1325.56 1211.88 L1324.97 1211.88 L1324.39 1211.88 L1323.8 1211.88 L1323.21 1211.88 L1322.63 1211.88 L1322.04 1211.88 L1321.45 1211.88 L1320.87 1211.88 L1320.28 1211.88 L1319.69 1211.88 L1319.11 1211.88 L1318.52 1211.88 L1317.93 1211.88 L1317.35 1211.88 L1316.76 1211.88 L1316.18 1211.88 L1315.59 1211.88 L1315 1211.88 L1314.42 1211.88 L1313.83 1211.88 L1313.24 1211.88 L1312.66 1211.88 L1312.07 1211.88 L1311.48 1211.88 L1310.9 1211.88 L1310.31 1211.88 L1309.73 1211.88 L1309.14 1211.88 L1308.55 1211.88 L1307.97 1211.88 L1307.38 1211.88 L1306.79 1211.88 L1306.21 1211.88 L1305.62 1211.88 L1305.03 1211.88 L1304.45 1211.88 L1303.86 1211.88 L1303.27 1211.88 L1302.69 1211.88 L1302.1 1211.88 L1301.52 1211.88 L1300.93 1211.88 L1300.34 1211.88 L1299.76 1211.88 L1299.17 1211.88 L1298.58 1211.88 L1298 1211.88 L1297.41 1211.88 L1296.82 1211.88 L1296.24 1211.88 L1295.65 1211.88 L1295.06 1211.88 L1294.48 1211.88 L1293.89 1211.88 L1293.31 1211.88 L1292.72 1211.88 L1292.13 1211.88 L1291.55 1211.88 L1290.96 1211.88 L1290.37 1211.88 L1289.79 1211.88 L1289.2 1211.88 L1288.61 1211.88 L1288.03 1211.88 L1287.44 1211.88 L1286.86 1211.88 L1286.27 1211.88 L1285.68 1211.88 L1285.1 1211.88 L1284.51 1211.88 L1283.92 1211.88 L1283.34 1211.88 L1282.75 1211.88 L1282.16 1211.88 L1281.58 1211.88 L1280.99 1211.88 L1280.4 1211.88 L1279.82 1211.88 L1279.23 1211.88 L1278.65 1211.88 L1278.06 1211.88 L1277.47 1211.88 L1276.89 1211.88 L1276.3 1211.88 L1275.71 1211.88 L1275.13 1211.88 L1274.54 1211.88 L1273.95 1211.88 L1273.37 1211.88 L1272.78 1211.88 L1272.19 1211.88 L1271.61 1211.88 L1271.02 1211.88 L1270.44 1211.88 L1269.85 1211.88 L1269.26 1211.88 L1268.68 1211.88 L1268.09 1211.88 L1267.5 1211.88 L1266.92 1211.88 L1266.33 1211.88 L1265.74 1211.88 L1265.16 1211.88 L1264.57 1211.88 L1263.98 1211.88 L1263.4 1211.88 L1262.81 1211.88 L1262.23 1211.88 L1261.64 1211.88 L1261.05 1211.88 L1260.47 1211.88 L1259.88 1211.88 L1259.29 1211.88 L1258.71 1211.88 L1258.12 1211.88 L1257.53 1211.88 L1256.95 1211.88 L1256.36 1211.88 L1255.78 1211.88 L1255.19 1211.88 L1254.6 1211.88 L1254.02 1211.88 L1253.43 1211.88 L1252.84 1211.88 L1252.26 1211.88 L1251.67 1211.88 L1251.08 1211.88 L1250.5 1211.88 L1249.91 1211.88 L1249.32 1211.88 L1248.74 1211.88 L1248.15 1211.88 L1247.57 1211.88 L1246.98 1211.88 L1246.39 1211.88 L1245.81 1211.88 L1245.22 1211.88 L1244.63 1211.88 L1244.05 1211.88 L1243.46 1211.88 L1242.87 1211.88 L1242.29 1211.88 L1241.7 1211.88 L1241.11 1211.88 L1240.53 1211.88 L1239.94 1211.88 L1239.36 1211.88 L1238.77 1211.88 L1238.18 1211.88 L1237.6 1211.88 L1237.01 1211.88 L1236.42 1211.88 L1235.84 1211.88 L1235.25 1211.88 L1234.66 1211.88 L1234.08 1211.88 L1233.49 1211.88 L1232.91 1211.88 L1232.32 1211.88 L1231.73 1211.88 L1231.15 1211.88 L1230.56 1211.88 L1229.97 1211.88 L1229.39 1211.88 L1228.8 1211.88 L1228.21 1211.88 L1227.63 1211.88 L1227.04 1211.88 L1226.45 1211.88 L1225.87 1211.88 L1225.28 1211.88 L1224.7 1211.88 L1224.11 1211.88 L1223.52 1211.88 L1222.94 1211.88 L1222.35 1211.88 L1221.76 1211.88 L1221.18 1211.88 L1220.59 1211.88 L1220 1211.88 L1219.42 1211.88 L1218.83 1211.88 L1218.24 1211.88 L1217.66 1211.88 L1217.07 1211.88 L1216.49 1211.88 L1215.9 1211.88 L1215.31 1211.88 L1214.73 1211.88 L1214.14 1211.88 L1213.55 1211.88 L1212.97 1211.88 L1212.38 1211.88 L1211.79 1211.88 L1211.21 1211.88 L1210.62 1211.88 L1210.03 1211.88 L1209.45 1211.88 L1208.86 1211.88 L1208.28 1211.88 L1207.69 1211.88 L1207.1 1211.88 L1206.52 1211.88 L1205.93 1211.88 L1205.34 1211.88 L1204.76 1211.88 L1204.17 1211.88 L1203.58 1211.88 L1203 1211.88 L1202.41 1211.88 L1201.83 1211.88 L1201.24 1211.88 L1200.65 1211.88 L1200.07 1211.88 L1199.48 1211.88 L1198.89 1211.88 L1198.31 1211.88 L1197.72 1211.88 L1197.13 1211.88 L1196.55 1211.88 L1195.96 1211.88 L1195.37 1211.88 L1194.79 1211.88 L1194.2 1211.88 L1193.62 1211.88 L1193.03 1211.88 L1192.44 1211.88 L1191.86 1211.88 L1191.27 1211.88 L1190.68 1211.88 L1190.1 1211.88 L1189.51 1211.88 L1188.92 1211.88 L1188.34 1211.88 L1187.75 1211.88 L1187.16 1211.88 L1186.58 1211.88 L1185.99 1211.88 L1185.41 1211.88 L1184.82 1211.88 L1184.23 1211.88 L1183.65 1211.88 L1183.06 1211.88 L1182.47 1211.88 L1181.89 1211.88 L1181.3 1211.88 L1180.71 1211.88 L1180.13 1211.88 L1179.54 1211.88 L1178.96 1211.88 L1178.37 1211.88 L1177.78 1211.88 L1177.2 1211.88 L1176.61 1211.88 L1176.02 1211.88 L1175.44 1211.88 L1174.85 1211.88 L1174.26 1211.88 L1173.68 1211.88 L1173.09 1211.88 L1172.5 1211.88 L1171.92 1211.88 L1171.33 1211.88 L1170.75 1211.88 L1170.16 1211.88 L1169.57 1211.88 L1168.99 1211.88 L1168.4 1211.88 L1167.81 1211.88 L1167.23 1211.88 L1166.64 1211.88 L1166.05 1211.88 L1165.47 1211.88 L1164.88 1211.88 L1164.29 1211.88 L1163.71 1211.88 L1163.12 1211.88 L1162.54 1211.88 L1161.95 1211.88 L1161.36 1211.88 L1160.78 1211.88 L1160.19 1211.88 L1159.6 1211.88 L1159.02 1211.88 L1158.43 1211.88 L1157.84 1211.88 L1157.26 1211.88 L1156.67 1211.88 L1156.09 1211.88 L1155.5 1211.88 L1154.91 1211.88 L1154.33 1211.88 L1153.74 1211.88 L1153.15 1211.88 L1152.57 1211.88 L1151.98 1211.88 L1151.39 1211.88 L1150.81 1211.88 L1150.22 1211.88 L1149.63 1211.88 L1149.05 1211.88 L1148.46 1211.88 L1147.88 1211.88 L1147.29 1211.88 L1146.7 1211.88 L1146.12 1211.88 L1145.53 1211.88 L1144.94 1211.88 L1144.36 1211.88 L1143.77 1211.88 L1143.18 1211.88 L1142.6 1211.88 L1142.01 1211.88 L1141.42 1211.88 L1140.84 1211.88 L1140.25 1211.88 L1139.67 1211.88 L1139.08 1211.88 L1138.49 1211.88 L1137.91 1211.88 L1137.32 1211.88 L1136.73 1211.88 L1136.15 1211.88 L1135.56 1211.88 L1134.97 1211.88 L1134.39 1211.88 L1133.8 1211.88 L1133.21 1211.88 L1132.63 1211.88 L1132.04 1211.88 L1131.46 1211.88 L1130.87 1211.88 L1130.28 1211.88 L1129.7 1211.88 L1129.11 1211.88 L1128.52 1211.88 L1127.94 1211.88 L1127.35 1211.88 L1126.76 1211.88 L1126.18 1211.88 L1125.59 1211.88 L1125.01 1211.88 L1124.42 1211.88 L1123.83 1211.88 L1123.25 1211.88 L1122.66 1211.88 L1122.07 1211.88 L1121.49 1211.88 L1120.9 1211.88 L1120.31 1211.88 L1119.73 1211.88 L1119.14 1211.88 L1118.55 1211.88 L1117.97 1211.88 L1117.38 1211.88 L1116.8 1211.88 L1116.21 1211.88 L1115.62 1211.88 L1115.04 1211.88 L1114.45 1211.88 L1113.86 1211.88 L1113.28 1211.88 L1112.69 1211.88 L1112.1 1211.88 L1111.52 1211.88 L1110.93 1211.88 L1110.34 1211.88 L1109.76 1211.88 L1109.17 1211.88 L1108.59 1211.88 L1108 1211.88 L1107.41 1211.88 L1106.83 1211.88 L1106.24 1211.88 L1105.65 1211.88 L1105.07 1211.88 L1104.48 1211.88 L1103.89 1211.88 L1103.31 1211.88 L1102.72 1211.88 L1102.14 1211.88 L1101.55 1211.88 L1100.96 1211.88 L1100.38 1211.88 L1099.79 1211.88 L1099.2 1211.88 L1098.62 1211.88 L1098.03 1211.88 L1097.44 1211.88 L1096.86 1211.88 L1096.27 1211.88 L1095.68 1211.88 L1095.1 1211.88 L1094.51 1211.88 L1093.93 1211.88 L1093.34 1211.88 L1092.75 1211.88 L1092.17 1211.88 L1091.58 1211.88 L1090.99 1211.88 L1090.41 1211.88 L1089.82 1211.88 L1089.23 1211.88 L1088.65 1211.88 L1088.06 1211.88 L1087.47 1211.88 L1086.89 1211.88 L1086.3 1211.88 L1085.72 1211.88 L1085.13 1211.88 L1084.54 1211.88 L1083.96 1211.88 L1083.37 1211.88 L1082.78 1211.88 L1082.2 1211.88 L1081.61 1211.88 L1081.02 1211.88 L1080.44 1211.88 L1079.85 1211.88 L1079.26 1211.88 L1078.68 1211.88 L1078.09 1211.88 L1077.51 1211.88 L1076.92 1211.88 L1076.33 1211.88 L1075.75 1211.88 L1075.16 1211.88 L1074.57 1211.88 L1073.99 1211.88 L1073.4 1211.88 L1072.81 1211.88 L1072.23 1211.88 L1071.64 1211.88 L1071.06 1211.88 L1070.47 1211.88 L1069.88 1211.88 L1069.3 1211.88 L1068.71 1211.88 L1068.12 1211.88 L1067.54 1211.88 L1066.95 1211.88 L1066.36 1211.88 L1065.78 1211.88 L1065.19 1211.88 L1064.6 1211.88 L1064.02 1211.88 L1063.43 1211.88 L1062.85 1211.88 L1062.26 1211.88 L1061.67 1211.88 L1061.09 1211.88 L1060.5 1211.88 L1059.91 1211.88 L1059.33 1211.88 L1058.74 1211.88 L1058.15 1211.88 L1057.57 1211.88 L1056.98 1211.88 L1056.39 1211.88 L1055.81 1211.88 L1055.22 1211.88 L1054.64 1211.88 L1054.05 1211.88 L1053.46 1211.88 L1052.88 1211.88 L1052.29 1211.88 L1051.7 1211.88 L1051.12 1211.88 L1050.53 1211.88 L1049.94 1211.88 L1049.36 1211.88 L1048.77 1211.88 L1048.19 1211.88 L1047.6 1211.88 L1047.01 1211.88 L1046.43 1211.88 L1045.84 1211.88 L1045.25 1211.88 L1044.67 1211.88 L1044.08 1211.88 L1043.49 1211.88 L1042.91 1211.88 L1042.32 1211.88 L1041.73 1211.88 L1041.15 1211.88 L1040.56 1211.88 L1039.98 1211.88 L1039.39 1211.88 L1038.8 1211.88 L1038.22 1211.88 L1037.63 1211.88 L1037.04 1211.88 L1036.46 1211.88 L1035.87 1211.88 L1035.28 1211.88 L1034.7 1211.88 L1034.11 1211.88 L1033.52 1211.88 L1032.94 1211.88 L1032.35 1211.88 L1031.77 1211.88 L1031.18 1211.88 L1030.59 1211.88 L1030.01 1211.88 L1029.42 1211.88 L1028.83 1211.88 L1028.25 1211.88 L1027.66 1211.88 L1027.07 1211.88 L1026.49 1211.88 L1025.9 1211.88 L1025.32 1211.88 L1024.73 1211.88 L1024.14 1211.88 L1023.56 1211.88 L1022.97 1211.88 L1022.38 1211.88 L1021.8 1211.88 L1021.21 1211.88 L1020.62 1211.88 L1020.04 1211.88 L1019.45 1211.88 L1018.86 1211.88 L1018.28 1211.88 L1017.69 1211.88 L1017.11 1211.88 L1016.52 1211.88 L1015.93 1211.88 L1015.35 1211.88 L1014.76 1211.88 L1014.17 1211.88 L1013.59 1211.88 L1013 1211.88 L1012.41 1211.88 L1011.83 1211.88 L1011.24 1211.88 L1010.65 1211.88 L1010.07 1211.88 L1009.48 1211.88 L1008.9 1211.88 L1008.31 1211.88 L1007.72 1211.88 L1007.14 1211.88 L1006.55 1211.88 L1005.96 1211.88 L1005.38 1211.88 L1004.79 1211.88 L1004.2 1211.88 L1003.62 1211.88 L1003.03 1211.88 L1002.44 1211.88 L1001.86 1211.88 L1001.27 1211.88 L1000.69 1211.88 L1000.1 1211.88 L999.513 1211.88 L998.926 1211.88 L998.34 1211.88 L997.754 1211.88 L997.167 1211.88 L996.581 1211.88 L995.994 1211.88 L995.408 1211.88 L994.822 1211.88 L994.235 1211.88 L993.649 1211.88 L993.062 1211.88 L992.476 1211.88 L991.889 1211.88 L991.303 1211.88 L990.717 1211.88 L990.13 1211.88 L989.544 1211.88 L988.957 1211.88 L988.371 1211.88 L987.785 1211.88 L987.198 1211.88 L986.612 1211.88 L986.025 1211.88  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.18 986.612,1212.18 987.198,1212.18 987.785,1212.18 988.371,1212.18 988.957,1212.18 989.544,1212.18 990.13,1212.18 990.717,1212.18 991.303,1212.18 991.889,1212.18 992.476,1212.18 993.062,1212.18 993.649,1212.18 994.235,1212.18 994.822,1212.18 995.408,1212.18 995.994,1212.18 996.581,1212.18 997.167,1212.18 997.754,1212.18 998.34,1212.18 998.926,1212.18 999.513,1212.18 1000.1,1212.18 1000.69,1212.18 1001.27,1212.18 1001.86,1212.18 1002.44,1212.18 1003.03,1212.18 1003.62,1212.18 1004.2,1212.18 1004.79,1212.18 1005.38,1212.18 1005.96,1212.18 1006.55,1212.18 1007.14,1212.18 1007.72,1212.18 1008.31,1212.18 1008.9,1212.18 1009.48,1212.18 1010.07,1212.18 1010.65,1212.18 1011.24,1212.18 1011.83,1212.18 1012.41,1212.18 1013,1212.18 1013.59,1212.18 1014.17,1212.18 1014.76,1212.18 1015.35,1212.18 1015.93,1212.18 1016.52,1212.18 1017.11,1212.18 1017.69,1212.18 1018.28,1212.18 1018.86,1212.18 1019.45,1212.18 1020.04,1212.18 1020.62,1212.18 1021.21,1212.18 1021.8,1212.18 1022.38,1212.18 1022.97,1212.18 1023.56,1212.18 1024.14,1212.18 1024.73,1212.18 1025.32,1212.18 1025.9,1212.18 1026.49,1212.18 1027.07,1212.18 1027.66,1212.18 1028.25,1212.18 1028.83,1212.18 1029.42,1212.18 1030.01,1212.18 1030.59,1212.18 1031.18,1212.18 1031.77,1212.18 1032.35,1212.18 1032.94,1212.18 1033.52,1212.18 1034.11,1212.18 1034.7,1212.18 1035.28,1212.18 1035.87,1212.18 1036.46,1212.18 1037.04,1212.18 1037.63,1212.18 1038.22,1212.18 1038.8,1212.18 1039.39,1212.18 1039.98,1212.18 1040.56,1212.18 1041.15,1212.18 1041.73,1212.18 1042.32,1212.18 1042.91,1212.18 1043.49,1212.18 1044.08,1212.18 1044.67,1212.18 1045.25,1212.18 1045.84,1212.18 1046.43,1212.18 1047.01,1212.18 1047.6,1212.18 1048.19,1212.18 1048.77,1212.18 1049.36,1212.18 1049.94,1212.18 1050.53,1212.18 1051.12,1212.18 1051.7,1212.18 1052.29,1212.18 1052.88,1212.18 1053.46,1212.18 1054.05,1212.18 1054.64,1212.18 1055.22,1212.18 1055.81,1212.18 1056.39,1212.18 1056.98,1212.18 1057.57,1212.18 1058.15,1212.18 1058.74,1212.18 1059.33,1212.18 1059.91,1212.18 1060.5,1212.18 1061.09,1212.18 1061.67,1212.18 1062.26,1212.18 1062.85,1212.18 1063.43,1212.18 1064.02,1212.18 1064.6,1212.18 1065.19,1212.18 1065.78,1212.18 1066.36,1212.18 1066.95,1212.18 1067.54,1212.18 1068.12,1212.18 1068.71,1212.18 1069.3,1212.18 1069.88,1212.18 1070.47,1212.18 1071.06,1212.18 1071.64,1212.18 1072.23,1212.18 1072.81,1212.18 1073.4,1212.18 1073.99,1212.18 1074.57,1212.18 1075.16,1212.18 1075.75,1212.18 1076.33,1212.18 1076.92,1212.18 1077.51,1212.18 1078.09,1212.18 1078.68,1212.18 1079.26,1212.18 1079.85,1212.18 1080.44,1212.18 1081.02,1212.18 1081.61,1212.18 1082.2,1212.18 1082.78,1212.18 1083.37,1212.18 1083.96,1212.18 1084.54,1212.18 1085.13,1212.18 1085.72,1212.18 1086.3,1212.18 1086.89,1212.18 1087.47,1212.18 1088.06,1212.18 1088.65,1212.18 1089.23,1212.18 1089.82,1212.18 1090.41,1212.18 1090.99,1212.18 1091.58,1212.18 1092.17,1212.18 1092.75,1212.18 1093.34,1212.18 1093.93,1212.18 1094.51,1212.18 1095.1,1212.18 1095.68,1212.18 1096.27,1212.18 1096.86,1212.18 1097.44,1212.18 1098.03,1212.18 1098.62,1212.18 1099.2,1212.18 1099.79,1212.18 1100.38,1212.18 1100.96,1212.18 1101.55,1212.18 1102.14,1212.18 1102.72,1212.18 1103.31,1212.18 1103.89,1212.18 1104.48,1212.18 1105.07,1212.18 1105.65,1212.18 1106.24,1212.18 1106.83,1212.18 1107.41,1212.18 1108,1212.18 1108.59,1212.18 1109.17,1212.18 1109.76,1212.18 1110.34,1212.18 1110.93,1212.18 1111.52,1212.18 1112.1,1212.18 1112.69,1212.18 1113.28,1212.18 1113.86,1212.18 1114.45,1212.18 1115.04,1212.18 1115.62,1212.18 1116.21,1212.18 1116.8,1212.18 1117.38,1212.18 1117.97,1212.18 1118.55,1212.18 1119.14,1212.18 1119.73,1212.18 1120.31,1212.18 1120.9,1212.18 1121.49,1212.18 1122.07,1212.18 1122.66,1212.18 1123.25,1212.18 1123.83,1212.18 1124.42,1212.18 1125.01,1212.18 1125.59,1212.18 1126.18,1212.18 1126.76,1212.18 1127.35,1212.18 1127.94,1212.18 1128.52,1212.18 1129.11,1212.18 1129.7,1212.18 1130.28,1212.18 1130.87,1212.18 1131.46,1212.18 1132.04,1212.18 1132.63,1212.18 1133.21,1212.18 1133.8,1212.18 1134.39,1212.18 1134.97,1212.18 1135.56,1212.18 1136.15,1212.18 1136.73,1212.18 1137.32,1212.18 1137.91,1212.18 1138.49,1212.18 1139.08,1212.18 1139.67,1212.18 1140.25,1212.18 1140.84,1212.18 1141.42,1212.18 1142.01,1212.18 1142.6,1212.18 1143.18,1212.18 1143.77,1212.18 1144.36,1212.18 1144.94,1212.18 1145.53,1212.18 1146.12,1212.18 1146.7,1212.18 1147.29,1212.18 1147.88,1212.18 1148.46,1212.18 1149.05,1212.18 1149.63,1212.18 1150.22,1212.18 1150.81,1212.18 1151.39,1212.18 1151.98,1212.18 1152.57,1212.18 1153.15,1212.18 1153.74,1212.18 1154.33,1212.18 1154.91,1212.18 1155.5,1212.18 1156.09,1212.18 1156.67,1212.18 1157.26,1212.18 1157.84,1212.18 1158.43,1212.18 1159.02,1212.18 1159.6,1212.18 1160.19,1212.18 1160.78,1212.18 1161.36,1212.18 1161.95,1212.18 1162.54,1212.18 1163.12,1212.18 1163.71,1212.18 1164.29,1212.18 1164.88,1212.18 1165.47,1212.18 1166.05,1212.18 1166.64,1212.18 1167.23,1212.18 1167.81,1212.18 1168.4,1212.18 1168.99,1212.18 1169.57,1212.18 1170.16,1212.18 1170.75,1212.18 1171.33,1212.18 1171.92,1212.18 1172.5,1212.18 1173.09,1212.18 1173.68,1212.18 1174.26,1212.18 1174.85,1212.18 1175.44,1212.18 1176.02,1212.18 1176.61,1212.18 1177.2,1212.18 1177.78,1212.18 1178.37,1212.18 1178.96,1212.18 1179.54,1212.18 1180.13,1212.18 1180.71,1212.18 1181.3,1212.18 1181.89,1212.18 1182.47,1212.18 1183.06,1212.18 1183.65,1212.18 1184.23,1212.18 1184.82,1212.18 1185.41,1212.18 1185.99,1212.18 1186.58,1212.18 1187.16,1212.18 1187.75,1212.18 1188.34,1212.18 1188.92,1212.18 1189.51,1212.18 1190.1,1212.18 1190.68,1212.18 1191.27,1212.18 1191.86,1212.18 1192.44,1212.18 1193.03,1212.18 1193.62,1212.18 1194.2,1212.18 1194.79,1212.18 1195.37,1212.18 1195.96,1212.18 1196.55,1212.18 1197.13,1212.18 1197.72,1212.18 1198.31,1212.18 1198.89,1212.18 1199.48,1212.18 1200.07,1212.18 1200.65,1212.18 1201.24,1212.18 1201.83,1212.18 1202.41,1212.18 1203,1212.18 1203.58,1212.18 1204.17,1212.18 1204.76,1212.18 1205.34,1212.18 1205.93,1212.18 1206.52,1212.18 1207.1,1212.18 1207.69,1212.18 1208.28,1212.18 1208.86,1212.18 1209.45,1212.18 1210.03,1212.18 1210.62,1212.18 1211.21,1212.18 1211.79,1212.18 1212.38,1212.18 1212.97,1212.18 1213.55,1212.18 1214.14,1212.18 1214.73,1212.18 1215.31,1212.18 1215.9,1212.18 1216.49,1212.18 1217.07,1212.18 1217.66,1212.18 1218.24,1212.18 1218.83,1212.18 1219.42,1212.18 1220,1212.18 1220.59,1212.18 1221.18,1212.18 1221.76,1212.18 1222.35,1212.18 1222.94,1212.18 1223.52,1212.18 1224.11,1212.18 1224.7,1212.18 1225.28,1212.18 1225.87,1212.18 1226.45,1212.18 1227.04,1212.18 1227.63,1212.18 1228.21,1212.18 1228.8,1212.18 1229.39,1212.18 1229.97,1212.18 1230.56,1212.18 1231.15,1212.18 1231.73,1212.18 1232.32,1212.18 1232.91,1212.18 1233.49,1212.18 1234.08,1212.18 1234.66,1212.18 1235.25,1212.18 1235.84,1212.18 1236.42,1212.18 1237.01,1212.18 1237.6,1212.18 1238.18,1212.18 1238.77,1212.18 1239.36,1212.18 1239.94,1212.18 1240.53,1212.18 1241.11,1212.18 1241.7,1212.18 1242.29,1212.18 1242.87,1212.18 1243.46,1212.18 1244.05,1212.18 1244.63,1212.18 1245.22,1212.18 1245.81,1212.18 1246.39,1212.18 1246.98,1212.18 1247.57,1212.18 1248.15,1212.18 1248.74,1212.18 1249.32,1212.18 1249.91,1212.18 1250.5,1212.18 1251.08,1212.18 1251.67,1212.18 1252.26,1212.18 1252.84,1212.18 1253.43,1212.18 1254.02,1212.18 1254.6,1212.18 1255.19,1212.18 1255.78,1212.18 1256.36,1212.18 1256.95,1212.18 1257.53,1212.18 1258.12,1212.18 1258.71,1212.18 1259.29,1212.18 1259.88,1212.18 1260.47,1212.18 1261.05,1212.18 1261.64,1212.18 1262.23,1212.18 1262.81,1212.18 1263.4,1212.18 1263.98,1212.18 1264.57,1212.18 1265.16,1212.18 1265.74,1212.18 1266.33,1212.18 1266.92,1212.18 1267.5,1212.18 1268.09,1212.18 1268.68,1212.18 1269.26,1212.18 1269.85,1212.18 1270.44,1212.18 1271.02,1212.18 1271.61,1212.18 1272.19,1212.18 1272.78,1212.18 1273.37,1212.18 1273.95,1212.18 1274.54,1212.18 1275.13,1212.18 1275.71,1212.18 1276.3,1212.18 1276.89,1212.18 1277.47,1212.18 1278.06,1212.18 1278.65,1212.18 1279.23,1212.18 1279.82,1212.18 1280.4,1212.18 1280.99,1212.18 1281.58,1212.18 1282.16,1212.18 1282.75,1212.18 1283.34,1212.18 1283.92,1212.18 1284.51,1212.18 1285.1,1212.18 1285.68,1212.18 1286.27,1212.18 1286.86,1212.18 1287.44,1212.18 1288.03,1212.18 1288.61,1212.18 1289.2,1212.18 1289.79,1212.18 1290.37,1212.18 1290.96,1212.18 1291.55,1212.18 1292.13,1212.18 1292.72,1212.18 1293.31,1212.18 1293.89,1212.18 1294.48,1212.18 1295.06,1212.18 1295.65,1212.18 1296.24,1212.18 1296.82,1212.18 1297.41,1212.18 1298,1212.18 1298.58,1212.18 1299.17,1212.18 1299.76,1212.18 1300.34,1212.18 1300.93,1212.18 1301.52,1212.18 1302.1,1212.18 1302.69,1212.18 1303.27,1212.18 1303.86,1212.18 1304.45,1212.18 1305.03,1212.18 1305.62,1212.18 1306.21,1212.18 1306.79,1212.18 1307.38,1212.18 1307.97,1212.18 1308.55,1212.18 1309.14,1212.18 1309.73,1212.18 1310.31,1212.18 1310.9,1212.18 1311.48,1212.18 1312.07,1212.18 1312.66,1212.18 1313.24,1212.18 1313.83,1212.18 1314.42,1212.18 1315,1212.18 1315.59,1212.18 1316.18,1212.18 1316.76,1212.18 1317.35,1212.18 1317.93,1212.18 1318.52,1212.18 1319.11,1212.18 1319.69,1212.18 1320.28,1212.18 1320.87,1212.18 1321.45,1212.18 1322.04,1212.18 1322.63,1212.18 1323.21,1212.18 1323.8,1212.18 1324.39,1212.18 1324.97,1212.18 1325.56,1212.18 1326.14,1212.18 1326.73,1212.18 1327.32,1212.18 1327.9,1212.18 1328.49,1212.18 1329.08,1212.18 1329.66,1212.18 1330.25,1212.18 1330.84,1212.18 1331.42,1212.18 1332.01,1212.18 1332.6,1212.18 1333.18,1212.18 1333.77,1212.18 1334.35,1212.18 1334.94,1212.18 1335.53,1212.18 1336.11,1212.18 1336.7,1212.18 1337.29,1212.18 1337.87,1212.18 1338.46,1212.18 1339.05,1212.18 1339.63,1212.18 1340.22,1212.18 1340.8,1212.18 1341.39,1212.18 1341.98,1212.18 1342.56,1212.18 1343.15,1212.18 1343.74,1212.18 1344.32,1212.18 1344.91,1212.18 1345.5,1212.18 1346.08,1212.18 1346.67,1212.18 1347.26,1212.18 1347.84,1212.18 1348.43,1212.18 1349.01,1212.18 1349.6,1212.18 1350.19,1212.18 1350.77,1212.18 1351.36,1212.18 1351.95,1212.18 1352.53,1212.18 1353.12,1212.18 1353.71,1212.18 1354.29,1212.18 1354.88,1212.18 1355.47,1212.18 1356.05,1212.18 1356.64,1212.18 1357.22,1212.18 1357.81,1212.18 1358.4,1212.18 1358.98,1212.18 1359.57,1212.18 1360.16,1212.18 1360.74,1212.18 1361.33,1212.18 1361.92,1212.18 1362.5,1212.18 1363.09,1212.18 1363.68,1212.18 1364.26,1212.18 1364.85,1212.18 1365.43,1212.18 1366.02,1212.18 1366.61,1212.18 1367.19,1212.18 1367.78,1212.18 1368.37,1212.18 1368.95,1212.18 1369.54,1212.18 1370.13,1212.18 1370.71,1212.18 1371.3,1212.18 1371.88,1212.18 1372.47,1212.18 1373.06,1212.18 1373.64,1212.18 1374.23,1212.18 1374.82,1212.18 1375.4,1212.18 1375.99,1212.18 1376.58,1212.18 1377.16,1212.18 1377.75,1212.18 1378.34,1212.18 1378.92,1212.18 1379.51,1212.18 1380.09,1212.18 1380.68,1212.18 1381.27,1212.18 1381.85,1212.18 1382.44,1212.18 1383.03,1212.18 1383.61,1212.18 1384.2,1212.18 1384.79,1212.18 1385.37,1212.18 1385.96,1212.18 1386.55,1212.18 1387.13,1212.18 1387.72,1212.18 1388.3,1212.18 1388.89,1212.18 1389.48,1212.18 1390.06,1212.18 1390.65,1212.18 1391.24,1212.18 1391.82,1212.18 1392.41,1212.18 1393,1212.18 1393.58,1212.18 1394.17,1212.18 1394.75,1212.18 1395.34,1212.18 1395.93,1212.18 1396.51,1212.18 1397.1,1212.18 1397.69,1212.18 1398.27,1212.18 1398.86,1212.18 1399.45,1212.18 1400.03,1212.18 1400.62,1212.18 1401.21,1212.18 1401.79,1212.18 1402.38,1212.18 1402.96,1212.18 1403.55,1212.18 1404.14,1212.18 1404.72,1212.18 1405.31,1212.18 1405.9,1212.18 1406.48,1212.18 1407.07,1212.18 1407.66,1212.18 1408.24,1212.18 1408.83,1212.18 1409.42,1212.18 1410,1212.18 1410.59,1212.18 1411.17,1212.18 1411.76,1212.18 1412.35,1212.18 1412.93,1212.18 1413.52,1212.18 1414.11,1212.18 1414.69,1212.18 1415.28,1212.18 1415.87,1212.18 1416.45,1212.18 1417.04,1212.18 1417.63,1212.18 1418.21,1212.18 1418.8,1212.18 1419.38,1212.18 1419.97,1212.18 1420.56,1212.18 1421.14,1212.18 1421.73,1212.18 1422.32,1212.18 1422.9,1212.18 1423.49,1212.18 1424.08,1212.18 1424.66,1212.18 1425.25,1212.18 1425.83,1212.18 1426.42,1212.18 1427.01,1212.18 1427.59,1212.18 1428.18,1212.18 1428.77,1212.18 1429.35,1212.18 1429.94,1212.18 1430.53,1212.18 1431.11,1212.18 1431.7,1212.18 1432.29,1212.18 1432.87,1212.18 1433.46,1212.18 1434.04,1212.18 1434.63,1212.18 1435.22,1212.18 1435.8,1212.18 1436.39,1212.18 1436.98,1212.18 1437.56,1212.18 1438.15,1212.18 1438.74,1212.18 1439.32,1212.18 1439.91,1212.18 1440.5,1212.18 1441.08,1212.18 1441.67,1212.18 1442.25,1212.18 1442.84,1212.18 1443.43,1212.18 1444.01,1212.18 1444.6,1212.18 1445.19,1212.18 1445.77,1212.18 1446.36,1212.18 1446.95,1212.18 1447.53,1212.18 1448.12,1212.18 1448.7,1212.18 1449.29,1212.18 1449.88,1212.18 1450.46,1212.18 1451.05,1212.18 1451.64,1212.18 1452.22,1212.18 1452.81,1212.18 1453.4,1212.18 1453.98,1212.18 1454.57,1212.18 1455.16,1212.18 1455.74,1212.18 1456.33,1212.18 1456.91,1212.18 1457.5,1212.18 1458.09,1212.18 1458.67,1212.18 1459.26,1212.18 1459.85,1212.18 1460.43,1212.18 1461.02,1212.18 1461.61,1212.18 1462.19,1212.18 1462.78,1212.18 1463.37,1212.18 1463.95,1212.18 1464.54,1212.18 1465.12,1212.18 1465.71,1212.18 1466.3,1212.18 1466.88,1212.18 1467.47,1212.18 1468.06,1212.18 1468.64,1212.18 1469.23,1212.18 1469.82,1212.18 1470.4,1212.18 1470.99,1212.18 1471.57,1212.18 1472.16,1212.18 1472.75,1212.18 1473.33,1212.18 1473.92,1212.18 1474.51,1212.18 1475.09,1212.18 1475.68,1212.18 1476.27,1212.18 1476.85,1212.18 1477.44,1212.18 1478.03,1212.18 1478.61,1212.18 1479.2,1212.18 1479.78,1212.18 1480.37,1212.18 1480.96,1212.18 1481.54,1212.18 1482.13,1212.18 1482.72,1212.18 1483.3,1212.18 1483.89,1212.18 1484.48,1212.18 1485.06,1212.18 1485.65,1212.18 1486.24,1212.18 1486.82,1212.18 1487.41,1212.18 1487.99,1212.18 1488.58,1212.18 1489.17,1212.18 1489.75,1212.18 1490.34,1212.18 1490.93,1212.18 1491.51,1212.18 1492.1,1212.18 1492.69,1212.18 1493.27,1212.18 1493.86,1212.18 1494.45,1212.18 1495.03,1212.18 1495.62,1212.18 1496.2,1212.18 1496.79,1212.18 1497.38,1212.18 1497.96,1212.18 1498.55,1212.18 1499.14,1212.18 1499.72,1212.18 1500.31,1212.18 1500.9,1212.18 1501.48,1212.18 1502.07,1212.18 1502.65,1212.18 1503.24,1212.18 1503.83,1212.18 1504.41,1212.18 1505,1212.18 1505.59,1212.18 1506.17,1212.18 1506.76,1212.18 1507.35,1212.18 1507.93,1212.18 1508.52,1212.18 1509.11,1212.18 1509.69,1212.18 1510.28,1212.18 1510.86,1212.18 1511.45,1212.18 1512.04,1212.18 1512.62,1212.18 1513.21,1212.18 1513.8,1212.18 1514.38,1212.18 1514.97,1212.18 1515.56,1212.18 1516.14,1212.18 1516.73,1212.18 1517.32,1212.18 1517.9,1212.18 1518.49,1212.18 1519.07,1212.18 1519.66,1212.18 1520.25,1212.18 1520.83,1212.18 1521.42,1212.18 1522.01,1212.18 1522.59,1212.18 1523.18,1212.18 1523.77,1212.18 1524.35,1212.18 1524.94,1212.18 1525.52,1212.18 1526.11,1212.18 1526.7,1212.18 1527.28,1212.18 1527.87,1212.18 1528.46,1212.18 1529.04,1212.18 1529.63,1212.18 1530.22,1212.18 1530.8,1212.18 1531.39,1212.18 1531.98,1212.18 1532.56,1212.18 1533.15,1212.18 1533.73,1212.18 1534.32,1212.18 1534.91,1212.18 1535.49,1212.18 1536.08,1212.18 1536.67,1212.18 1537.25,1212.18 1537.84,1212.18 1538.43,1212.18 1539.01,1212.18 1539.6,1212.18 1540.19,1212.18 1540.77,1212.18 1541.36,1212.18 1541.94,1212.18 1542.53,1212.18 1543.12,1212.18 1543.7,1212.18 1544.29,1212.18 1544.88,1212.18 1545.46,1212.18 1546.05,1212.18 1546.64,1212.18 1547.22,1212.18 1547.81,1212.18 1548.4,1212.18 1548.98,1212.18 1549.57,1212.18 1550.15,1212.18 1550.74,1212.18 1551.33,1212.18 1551.91,1212.18 1552.5,1212.18 1553.09,1212.18 1553.67,1212.18 1554.26,1212.18 1554.85,1212.18 1555.43,1212.18 1556.02,1212.18 1556.6,1212.18 1557.19,1212.18 1557.78,1212.18 1558.36,1212.18 1558.95,1212.18 1559.54,1212.18 1560.12,1212.18 1560.71,1212.18 1561.3,1212.18 1561.88,1212.18 1562.47,1212.18 1563.06,1212.18 1563.64,1212.18 1564.23,1212.18 1564.81,1212.18 1565.4,1212.18 1565.99,1212.18 1566.57,1212.18 1567.16,1212.18 1567.75,1212.18 1568.33,1212.18 1568.92,1212.18 1569.51,1212.18 1570.09,1212.18 1570.68,1212.18 1571.27,1212.18 1571.85,1212.18 1572.44,1212.18 1573.02,1212.18 1573.61,1212.18 1574.2,1212.18 1574.78,1212.18 1575.37,1212.18 1575.96,1212.18 1576.54,1212.18 1577.13,1212.18 1577.72,1212.18 1578.3,1212.18 1578.89,1212.18 1579.47,1212.18 1580.06,1212.18 1580.65,1212.18 1581.23,1212.18 1581.82,1212.18 1582.41,1212.18 1582.99,1212.18 1583.58,1212.18 1584.17,1212.18 1584.75,1212.18 1585.34,1212.18 1585.93,1212.18 1586.51,1212.18 1587.1,1212.18 1587.68,1212.18 1588.27,1212.18 1588.86,1212.18 1589.44,1212.18 1590.03,1212.18 1590.62,1212.18 1591.2,1212.18 1591.79,1212.18 1592.38,1212.18 1592.96,1212.18 1593.55,1212.18 1594.14,1212.18 1594.72,1212.18 1595.31,1212.18 1595.89,1212.18 1596.48,1212.18 1597.07,1212.18 1597.65,1212.18 1598.24,1212.18 1598.83,1212.18 1599.41,1212.18 1600,1212.18 1600.59,1212.18 1601.17,1212.18 1601.76,1212.18 1602.34,1212.18 1602.93,1212.18 1603.52,1212.18 1604.1,1212.18 1604.69,1212.18 1605.28,1212.18 1605.86,1212.18 1606.45,1212.18 1607.04,1212.18 1607.62,1212.18 1608.21,1212.18 1608.8,1212.18 1609.38,1212.18 1609.97,1212.18 1610.55,1212.18 1611.14,1212.18 1611.73,1212.18 1612.31,1212.18 1612.9,1212.18 1613.49,1212.18 1614.07,1212.18 1614.66,1212.18 1615.25,1212.18 1615.83,1212.18 1616.42,1212.18 1617.01,1212.18 1617.59,1212.18 1618.18,1212.18 1618.76,1212.18 1619.35,1212.18 1619.94,1212.18 1620.52,1212.18 1621.11,1212.18 1621.7,1212.18 1622.28,1212.18 1622.87,1212.18 1623.46,1212.18 1624.04,1212.18 1624.63,1212.18 1625.22,1212.18 1625.8,1212.18 1626.39,1212.18 1626.97,1212.18 1627.56,1212.18 1628.15,1212.18 1628.73,1212.18 1629.32,1212.18 1629.91,1212.18 1630.49,1212.18 1631.08,1212.18 1631.67,1212.18 1632.25,1212.18 1632.84,1212.18 1633.42,1212.18 1634.01,1212.18 1634.6,1212.18 1635.18,1212.18 1635.77,1212.18 1636.36,1212.18 1636.94,1212.18 1637.53,1212.18 1638.12,1212.18 1638.7,1212.18 1639.29,1212.18 1639.88,1212.18 1640.46,1212.18 1641.05,1212.18 1641.63,1212.18 1642.22,1212.18 1642.81,1212.18 1643.39,1212.18 1643.98,1212.18 1644.57,1212.18 1645.15,1212.18 1645.74,1212.18 1646.33,1212.18 1646.91,1212.18 1647.5,1212.18 1648.09,1212.18 1648.67,1212.18 1649.26,1212.18 1649.84,1212.18 1650.43,1212.18 1651.02,1212.18 1651.6,1212.18 1652.19,1212.18 1652.78,1212.18 1653.36,1212.18 1653.95,1212.18 1654.54,1212.18 1655.12,1212.18 1655.71,1212.18 1656.29,1212.18 1656.88,1212.18 1657.47,1212.18 1658.05,1212.18 1658.64,1212.18 1659.23,1212.18 1659.81,1212.18 1660.4,1212.18 1660.99,1212.18 1661.57,1212.18 1662.16,1212.18 1662.75,1212.18 1663.33,1212.18 1663.92,1212.18 1664.5,1212.18 1665.09,1212.18 1665.68,1212.18 1666.26,1212.18 1666.85,1212.18 1667.44,1212.18 1668.02,1212.18 1668.61,1212.18 1669.2,1212.18 1669.78,1212.18 1670.37,1212.18 1670.96,1212.18 1671.54,1212.18 1672.13,1212.18 1672.71,1212.18 1673.3,1212.18 1673.89,1212.18 1674.47,1212.18 1675.06,1212.18 1675.65,1212.18 1676.23,1212.18 1676.82,1212.18 1677.41,1212.18 1677.99,1212.18 1678.58,1212.18 1679.17,1212.18 1679.75,1212.18 1680.34,1212.18 1680.92,1212.18 1681.51,1212.18 1682.1,1212.18 1682.68,1212.18 1683.27,1212.18 1683.86,1212.18 1684.44,1212.18 1685.03,1212.18 1685.62,1212.18 1686.2,1212.18 1686.79,1212.18 1687.37,1212.18 1687.96,1212.18 1688.55,1212.18 1689.13,1212.18 1689.72,1212.18 1690.31,1212.18 1690.89,1212.18 1691.48,1212.18 1692.07,1212.18 1692.65,1212.18 1693.24,1212.18 1693.83,1212.18 1694.41,1212.18 1695,1212.18 1695.58,1212.18 1696.17,1212.18 1696.76,1212.18 1697.34,1212.18 1697.93,1212.18 1698.52,1212.18 1699.1,1212.18 1699.69,1212.18 1700.28,1212.18 1700.86,1212.18 1701.45,1212.18 1702.04,1212.18 1702.62,1212.18 1703.21,1212.18 1703.79,1212.18 1704.38,1212.18 1704.97,1212.18 1705.55,1212.18 1706.14,1212.18 1706.73,1212.18 1707.31,1212.18 1707.9,1212.18 1708.49,1212.18 1709.07,1212.18 1709.66,1212.18 1710.24,1212.18 1710.83,1212.18 1711.42,1212.18 1712,1212.18 1712.59,1212.18 1713.18,1212.18 1713.76,1212.18 1714.35,1212.18 1714.94,1212.18 1715.52,1212.18 1716.11,1212.18 1716.7,1212.18 1717.28,1212.18 1717.87,1212.18 1718.45,1212.18 1719.04,1212.18 1719.63,1212.18 1720.21,1212.18 1720.8,1212.18 1721.39,1212.18 1721.97,1212.18 1722.56,1212.18 1723.15,1212.18 1723.73,1212.18 1724.32,1212.18 1724.91,1212.18 1725.49,1212.18 1726.08,1212.18 1726.66,1212.18 1727.25,1212.18 1727.84,1212.18 1728.42,1212.18 1729.01,1212.18 1729.6,1212.18 1730.18,1212.18 1730.77,1212.18 1731.36,1212.18 1731.94,1212.18 1732.53,1212.18 1733.11,1212.18 1733.7,1212.18 1734.29,1212.18 1734.87,1212.18 1735.46,1212.18 1736.05,1212.18 1736.63,1212.18 1737.22,1212.18 1737.81,1212.18 1738.39,1212.18 1738.98,1212.18 1739.57,1212.18 1740.15,1212.18 1740.74,1212.18 1741.32,1212.18 1741.91,1212.18 1742.5,1212.18 1743.08,1212.18 1743.67,1212.18 1744.26,1212.18 1744.84,1212.18 1745.43,1212.18 1746.02,1212.18 1746.6,1212.18 1747.19,1212.18 1747.78,1212.18 1748.36,1212.18 1748.95,1212.18 1749.53,1212.18 1750.12,1212.18 1750.71,1212.18 1751.29,1212.18 1751.88,1212.18 1752.47,1212.18 1753.05,1212.18 1753.64,1212.18 1754.23,1212.18 1754.81,1212.18 1755.4,1212.18 1755.99,1212.18 1756.57,1212.18 1757.16,1212.18 1757.74,1212.18 1758.33,1212.18 1758.92,1212.18 1759.5,1212.18 1760.09,1212.18 1760.68,1212.18 1761.26,1212.18 1761.85,1212.18 1762.44,1212.18 1763.02,1212.18 1763.61,1212.18 1764.19,1212.18 1764.78,1212.18 1765.37,1212.18 1765.95,1212.18 1766.54,1212.18 1767.13,1212.18 1767.71,1212.18 1768.3,1212.18 1768.89,1212.18 1769.47,1212.18 1770.06,1212.18 1770.65,1212.18 1771.23,1212.18 1771.82,1212.18 1772.4,1212.18 1772.99,1212.18 1773.58,1212.18 1774.16,1212.18 1774.75,1212.18 1775.34,1212.18 1775.92,1212.18 1776.51,1212.18 1777.1,1212.18 1777.68,1212.18 1778.27,1212.18 1778.86,1212.18 1779.44,1212.18 1780.03,1212.18 1780.61,1212.18 1781.2,1212.18 1781.79,1212.18 1782.37,1212.18 1782.96,1212.18 1783.55,1212.18 1784.13,1212.18 1784.72,1212.18 1785.31,1212.18 1785.89,1212.18 1786.48,1212.18 1787.06,1212.18 1787.65,1212.18 1788.24,1212.18 1788.82,1212.18 1789.41,1212.18 1790,1212.18 1790.58,1212.18 1791.17,1212.18 1791.76,1212.18 1792.34,1212.18 1792.93,1212.18 1793.52,1212.18 1794.1,1212.18 1794.69,1212.18 1795.27,1212.18 1795.86,1212.18 1796.45,1212.18 1797.03,1212.18 1797.62,1212.18 1798.21,1212.18 1798.79,1212.18 1799.38,1212.18 1799.97,1212.18 1800.55,1212.18 1801.14,1212.18 1801.73,1212.18 1802.31,1212.18 1802.9,1212.18 1803.48,1212.18 1804.07,1212.18 1804.66,1212.18 1805.24,1212.18 1805.83,1212.18 1806.42,1212.18 1807,1212.18 1807.59,1212.18 1808.18,1212.18 1808.76,1212.18 1809.35,1212.18 1809.94,1212.18 1810.52,1212.18 1811.11,1212.18 1811.69,1212.18 1812.28,1212.18 1812.87,1212.18 1813.45,1212.18 1814.04,1212.18 1814.63,1212.18 1815.21,1212.18 1815.8,1212.18 1816.39,1212.18 1816.97,1212.18 1817.56,1212.18 1818.14,1212.18 1818.73,1212.18 1819.32,1212.18 1819.9,1212.18 1820.49,1212.18 1821.08,1212.18 1821.66,1212.18 1822.25,1212.18 1822.84,1212.18 1823.42,1212.18 1824.01,1212.18 1824.6,1212.18 1825.18,1212.18 1825.77,1212.18 1826.35,1212.18 1826.94,1212.18 1827.53,1212.18 1828.11,1212.18 1828.7,1212.18 1829.29,1212.18 1829.87,1212.18 1830.46,1212.18 1831.05,1212.18 1831.63,1212.18 1832.22,1212.18 1832.81,1212.18 1833.39,1212.18 1833.98,1212.18 1834.56,1212.18 1835.15,1212.18 1835.74,1212.18 1836.32,1212.18 1836.91,1212.18 1837.5,1212.18 1838.08,1212.18 1838.67,1212.18 1839.26,1212.18 1839.84,1212.18 1840.43,1212.18 1841.01,1212.18 1841.6,1212.18 1842.19,1212.18 1842.77,1212.18 1843.36,1212.18 1843.95,1212.18 1844.53,1212.18 1845.12,1212.18 1845.71,1212.18 1846.29,1212.18 1846.88,1212.18 1847.47,1212.18 1848.05,1212.18 1848.64,1212.18 1849.22,1212.18 1849.81,1212.18 1850.4,1212.18 1850.98,1212.18 1851.57,1212.18 1852.16,1212.18 1852.74,1212.18 1853.33,1212.18 1853.92,1212.18 1854.5,1212.18 1855.09,1212.18 1855.68,1212.18 1856.26,1212.18 1856.85,1212.18 1857.43,1212.18 1858.02,1212.18 1858.61,1212.18 1859.19,1212.18 1859.78,1212.18 1860.37,1212.18 1860.95,1212.18 1861.54,1212.18 1862.13,1212.18 1862.71,1212.18 1863.3,1212.18 1863.88,1212.18 1864.47,1212.18 1865.06,1212.18 1865.64,1212.18 1866.23,1212.18 1866.82,1212.18 1867.4,1212.18 1867.99,1212.18 1868.58,1212.18 1869.16,1212.18 1869.75,1212.18 1870.34,1212.18 1870.92,1212.18 1871.51,1212.18 1872.09,1212.18 1872.68,1212.18 1873.27,1212.18 1873.85,1212.18 1874.44,1212.18 1875.03,1212.18 1875.61,1212.18 1876.2,1212.18 1876.79,1212.18 1877.37,1212.18 1877.96,1212.18 1878.55,1212.18 1879.13,1212.18 1879.72,1212.18 1880.3,1212.18 1880.89,1212.18 1881.48,1212.18 1882.06,1212.18 1882.65,1212.18 1883.24,1212.18 1883.82,1212.18 1884.41,1212.18 1885,1212.18 1885.58,1212.18 1886.17,1212.18 1886.76,1212.18 1887.34,1212.18 1887.93,1212.18 1888.51,1212.18 1889.1,1212.18 1889.69,1212.18 1890.27,1212.18 1890.86,1212.18 1891.45,1212.18 1892.03,1212.18 1892.62,1212.18 1893.21,1212.18 1893.79,1212.18 1894.38,1212.18 1894.96,1212.18 1895.55,1212.18 1896.14,1212.18 1896.72,1212.18 1897.31,1212.18 1897.9,1212.18 1898.48,1212.18 1899.07,1212.18 1899.66,1212.18 1900.24,1212.18 1900.83,1212.18 1901.42,1212.18 1902,1212.18 1902.59,1212.18 1903.17,1212.18 1903.76,1212.18 1904.35,1212.18 1904.93,1212.18 1905.52,1212.18 1906.11,1212.18 1906.69,1212.18 1907.28,1212.18 1907.87,1212.18 1908.45,1212.18 1909.04,1212.18 1909.63,1212.18 1910.21,1212.18 1910.8,1212.18 1911.38,1212.18 1911.97,1212.18 1912.56,1212.18 1913.14,1212.18 1913.73,1212.18 1914.32,1212.18 1914.9,1212.18 1915.49,1212.18 1916.08,1212.18 1916.66,1212.18 1917.25,1212.18 1917.83,1212.18 1918.42,1212.18 1919.01,1212.18 1919.59,1212.18 1920.18,1212.18 1920.77,1212.18 1921.35,1212.18 1921.94,1212.18 1922.53,1212.18 1923.11,1212.18 1923.7,1212.18 1924.29,1212.18 1924.87,1212.18 1925.46,1212.18 1926.04,1212.18 1926.63,1212.18 1927.22,1212.18 1927.8,1212.18 1928.39,1212.18 1928.98,1212.18 1929.56,1212.18 1930.15,1212.18 1930.74,1212.18 1931.32,1212.18 1931.91,1212.18 1932.5,1212.18 1933.08,1212.18 1933.67,1212.18 1934.25,1212.18 1934.84,1212.18 1935.43,1212.18 1936.01,1212.18 1936.6,1212.18 1937.19,1212.18 1937.77,1212.18 1938.36,1212.18 1938.95,1212.18 1939.53,1212.18 1940.12,1212.18 1940.71,1212.18 1941.29,1212.18 1941.88,1212.18 1942.46,1212.18 1943.05,1212.18 1943.64,1212.18 1944.22,1212.18 1944.81,1212.18 1945.4,1212.18 1945.98,1212.18 1946.57,1212.18 1947.16,1212.18 1947.74,1212.18 1948.33,1212.18 1948.91,1212.18 1949.5,1212.18 1950.09,1212.18 1950.67,1212.18 1951.26,1212.18 1951.85,1212.18 1952.43,1212.18 1953.02,1212.18 1953.61,1212.18 1954.19,1212.18 1954.78,1212.18 1955.37,1212.18 1955.95,1212.18 1956.54,1212.18 1957.12,1212.18 1957.71,1212.18 1958.3,1212.18 1958.88,1212.18 1959.47,1212.18 1960.06,1212.18 1960.64,1212.18 1961.23,1212.18 1961.82,1212.18 1962.4,1212.18 1962.99,1212.18 1963.58,1212.18 1964.16,1212.18 1964.75,1212.18 1965.33,1212.18 1965.92,1212.18 1966.51,1212.18 1967.09,1212.18 1967.68,1212.18 1968.27,1212.18 1968.85,1212.18 1969.44,1212.18 1970.03,1212.18 1970.61,1212.18 1971.2,1212.18 1971.78,1212.18 1972.37,1212.18 1972.96,1212.18 1973.54,1212.18 1974.13,1212.18 1974.72,1212.18 1975.3,1212.18 1975.89,1212.18 1976.48,1212.18 1977.06,1212.18 1977.65,1212.18 1978.24,1212.18 1978.82,1212.18 1979.41,1212.18 1979.99,1212.18 1980.58,1212.18 1981.17,1212.18 1981.75,1212.18 1982.34,1212.18 1982.93,1212.18 1983.51,1212.18 1984.1,1212.18 1984.69,1212.18 1985.27,1212.18 1985.86,1212.18 1986.45,1212.18 1987.03,1212.18 1987.62,1212.18 1988.2,1212.18 1988.79,1212.18 1989.38,1212.18 1989.96,1212.18 1990.55,1212.18 1991.14,1212.18 1991.72,1212.18 1992.31,1212.18 1992.9,1212.18 1993.48,1212.18 1994.07,1212.18 1994.65,1212.18 1995.24,1212.18 1995.83,1212.18 1996.41,1212.18 1997,1212.18 1997.59,1212.18 1998.17,1212.18 1998.76,1212.18 1999.35,1212.18 1999.93,1212.18 2000.52,1212.18 2001.11,1212.18 2001.69,1212.18 2002.28,1212.18 2002.86,1212.18 2003.45,1212.18 2004.04,1212.18 2004.62,1212.18 2005.21,1212.18 2005.8,1212.18 2006.38,1212.18 2006.97,1212.18 2007.56,1212.18 2008.14,1212.18 2008.73,1212.18 2009.32,1212.18 2009.9,1212.18 2010.49,1212.18 2011.07,1212.18 2011.66,1212.18 2012.25,1212.18 2012.83,1212.18 2013.42,1212.18 2014.01,1212.18 2014.59,1212.18 2015.18,1212.18 2015.77,1212.18 2016.35,1212.18 2016.94,1212.18 2017.53,1212.18 2018.11,1212.18 2018.7,1212.18 2019.28,1212.18 2019.87,1212.18 2020.46,1212.18 2021.04,1212.18 2021.63,1212.18 2022.22,1212.18 2022.8,1212.18 2023.39,1212.18 2023.98,1212.18 2024.56,1212.18 2025.15,1212.18 2025.73,1212.18 2026.32,1212.18 2026.91,1212.18 2027.49,1212.18 2028.08,1212.18 2028.67,1212.18 2029.25,1212.18 2029.84,1212.18 2030.43,1212.18 2031.01,1212.18 2031.6,1212.18 2032.19,1212.18 2032.77,1212.18 2033.36,1212.18 2033.94,1212.18 2034.53,1212.18 2035.12,1212.18 2035.7,1212.18 2036.29,1212.18 2036.88,1212.18 2037.46,1212.18 2038.05,1212.18 2038.64,1212.18 2039.22,1212.18 2039.81,1212.18 2040.4,1212.18 2040.98,1212.18 2041.57,1212.18 2042.15,1212.18 2042.74,1212.18 2043.33,1212.18 2043.91,1212.18 2044.5,1212.18 2045.09,1212.18 2045.67,1212.18 2046.26,1212.18 2046.85,1212.18 2047.43,1212.18 2048.02,1212.18 2048.6,1212.18 2049.19,1212.18 2049.78,1212.18 2050.36,1212.18 2050.95,1212.18 2051.54,1212.18 2052.12,1212.18 2052.71,1212.18 2053.3,1212.18 2053.88,1212.18 2054.47,1212.18 2055.06,1212.18 2055.64,1212.18 2056.23,1212.18 2056.81,1212.18 2057.4,1212.18 2057.99,1212.18 2058.57,1212.18 2059.16,1212.18 2059.75,1212.18 2060.33,1212.18 2060.92,1212.18 2061.51,1212.18 2062.09,1212.18 2062.68,1212.18 2063.27,1212.18 2063.85,1212.18 2064.44,1212.18 2065.02,1212.18 2065.61,1212.18 2066.2,1212.18 2066.78,1212.18 2067.37,1212.18 2067.96,1212.18 2068.54,1212.18 2069.13,1212.18 2069.72,1212.18 2070.3,1212.18 2070.89,1212.18 2071.48,1212.18 2072.06,1212.18 2072.65,1212.18 2073.23,1212.18 2073.82,1212.18 2074.41,1212.18 2074.99,1212.18 2075.58,1212.18 2076.17,1212.18 2076.75,1212.18 2077.34,1212.18 2077.93,1212.18 2078.51,1212.18 2079.1,1212.18 2079.68,1212.18 2080.27,1212.18 2080.86,1212.18 2081.44,1212.18 2082.03,1212.18 2082.62,1212.18 2083.2,1212.18 2083.79,1212.18 2084.38,1212.18 2084.96,1212.18 2085.55,1212.18 2086.14,1212.18 2086.72,1212.18 2087.31,1212.18 2087.89,1212.18 2088.48,1212.18 2089.07,1212.18 2089.65,1212.18 2090.24,1212.18 2090.83,1212.18 2091.41,1212.18 2092,1212.18 2092.59,1212.18 2093.17,1212.18 2093.76,1212.18 2094.35,1212.18 2094.93,1212.18 2095.52,1212.18 2096.1,1212.18 2096.69,1212.18 2097.28,1212.18 2097.86,1212.18 2098.45,1212.18 2099.04,1212.18 2099.62,1212.18 2100.21,1212.18 2100.8,1212.18 2101.38,1212.18 2101.97,1212.18 2102.55,1212.18 2103.14,1212.18 2103.73,1212.18 2104.31,1212.18 2104.9,1212.18 2105.49,1212.18 2106.07,1212.18 2106.66,1212.18 2107.25,1212.18 2107.83,1212.18 2108.42,1212.18 2109.01,1212.18 2109.59,1212.18 2110.18,1212.18 2110.76,1212.18 2111.35,1212.18 2111.94,1212.18 2112.52,1212.18 2113.11,1212.18 2113.7,1212.18 2114.28,1212.18 2114.87,1212.18 2115.46,1212.18 2116.04,1212.18 2116.63,1212.18 2117.22,1212.18 2117.8,1212.18 2118.39,1212.18 2118.97,1212.18 2119.56,1212.18 2120.15,1212.18 2120.73,1212.18 2121.32,1212.18 2121.91,1212.18 2122.49,1212.18 2123.08,1212.18 2123.67,1212.18 2124.25,1212.18 2124.84,1212.18 2125.42,1212.18 2126.01,1212.18 2126.6,1212.18 2127.18,1212.18 2127.77,1212.18 2128.36,1212.18 2128.94,1212.18 2129.53,1212.18 2130.12,1212.18 2130.7,1212.18 2131.29,1212.18 2131.88,1212.18 2132.46,1212.18 2133.05,1212.18 2133.63,1212.18 2134.22,1212.18 2134.81,1212.18 2135.39,1212.18 2135.98,1212.18 2136.57,1212.18 2137.15,1212.18 2137.74,1212.18 2138.33,1212.18 2138.91,1212.18 2139.5,1212.18 2140.09,1212.18 2140.67,1212.18 2141.26,1212.18 2141.84,1212.18 2142.43,1212.18 2143.02,1212.18 2143.6,1212.18 2144.19,1212.18 2144.78,1212.18 2145.36,1212.18 2145.95,1212.18 2146.54,1212.18 2147.12,1212.18 2147.71,1212.18 2148.3,1212.18 2148.88,1212.18 2149.47,1212.18 2150.05,1212.18 2150.64,1212.18 2151.23,1212.18 2151.81,1212.18 2152.4,1212.18 2152.99,1212.18 2153.57,1212.18 2154.16,1212.18 2154.75,1212.18 2155.33,1212.18 2155.92,1212.18 2156.5,1212.18 2157.09,1212.18 2157.68,1212.18 2158.26,1212.18 \"/>\n<path clip-path=\"url(#clip452)\" d=\"M986.025 1211.95 L986.612 1211.95 L987.198 1211.95 L987.785 1211.95 L988.371 1211.95 L988.957 1211.95 L989.544 1211.95 L990.13 1211.95 L990.717 1211.95 L991.303 1211.95 L991.889 1211.95 L992.476 1211.95 L993.062 1211.95 L993.649 1211.95 L994.235 1211.95 L994.822 1211.95 L995.408 1211.95 L995.994 1211.95 L996.581 1211.95 L997.167 1211.95 L997.754 1211.95 L998.34 1211.95 L998.926 1211.95 L999.513 1211.95 L1000.1 1211.95 L1000.69 1211.95 L1001.27 1211.95 L1001.86 1211.95 L1002.44 1211.95 L1003.03 1211.95 L1003.62 1211.95 L1004.2 1211.95 L1004.79 1211.95 L1005.38 1211.95 L1005.96 1211.95 L1006.55 1211.95 L1007.14 1211.95 L1007.72 1211.95 L1008.31 1211.95 L1008.9 1211.95 L1009.48 1211.95 L1010.07 1211.95 L1010.65 1211.95 L1011.24 1211.95 L1011.83 1211.95 L1012.41 1211.95 L1013 1211.95 L1013.59 1211.95 L1014.17 1211.95 L1014.76 1211.95 L1015.35 1211.95 L1015.93 1211.95 L1016.52 1211.95 L1017.11 1211.95 L1017.69 1211.95 L1018.28 1211.95 L1018.86 1211.95 L1019.45 1211.95 L1020.04 1211.95 L1020.62 1211.95 L1021.21 1211.95 L1021.8 1211.95 L1022.38 1211.95 L1022.97 1211.95 L1023.56 1211.95 L1024.14 1211.95 L1024.73 1211.95 L1025.32 1211.95 L1025.9 1211.95 L1026.49 1211.95 L1027.07 1211.95 L1027.66 1211.95 L1028.25 1211.95 L1028.83 1211.95 L1029.42 1211.95 L1030.01 1211.95 L1030.59 1211.95 L1031.18 1211.95 L1031.77 1211.95 L1032.35 1211.95 L1032.94 1211.95 L1033.52 1211.95 L1034.11 1211.95 L1034.7 1211.95 L1035.28 1211.95 L1035.87 1211.95 L1036.46 1211.95 L1037.04 1211.95 L1037.63 1211.95 L1038.22 1211.95 L1038.8 1211.95 L1039.39 1211.95 L1039.98 1211.95 L1040.56 1211.95 L1041.15 1211.95 L1041.73 1211.95 L1042.32 1211.95 L1042.91 1211.95 L1043.49 1211.95 L1044.08 1211.95 L1044.67 1211.95 L1045.25 1211.95 L1045.84 1211.95 L1046.43 1211.95 L1047.01 1211.95 L1047.6 1211.95 L1048.19 1211.95 L1048.77 1211.95 L1049.36 1211.95 L1049.94 1211.95 L1050.53 1211.95 L1051.12 1211.95 L1051.7 1211.95 L1052.29 1211.95 L1052.88 1211.95 L1053.46 1211.95 L1054.05 1211.95 L1054.64 1211.95 L1055.22 1211.95 L1055.81 1211.95 L1056.39 1211.95 L1056.98 1211.95 L1057.57 1211.95 L1058.15 1211.95 L1058.74 1211.95 L1059.33 1211.95 L1059.91 1211.95 L1060.5 1211.95 L1061.09 1211.95 L1061.67 1211.95 L1062.26 1211.95 L1062.85 1211.95 L1063.43 1211.95 L1064.02 1211.95 L1064.6 1211.95 L1065.19 1211.95 L1065.78 1211.95 L1066.36 1211.95 L1066.95 1211.95 L1067.54 1211.95 L1068.12 1211.95 L1068.71 1211.95 L1069.3 1211.95 L1069.88 1211.95 L1070.47 1211.95 L1071.06 1211.95 L1071.64 1211.95 L1072.23 1211.95 L1072.81 1211.95 L1073.4 1211.95 L1073.99 1211.95 L1074.57 1211.95 L1075.16 1211.95 L1075.75 1211.95 L1076.33 1211.95 L1076.92 1211.95 L1077.51 1211.95 L1078.09 1211.95 L1078.68 1211.95 L1079.26 1211.95 L1079.85 1211.95 L1080.44 1211.95 L1081.02 1211.95 L1081.61 1211.95 L1082.2 1211.95 L1082.78 1211.95 L1083.37 1211.95 L1083.96 1211.95 L1084.54 1211.95 L1085.13 1211.95 L1085.72 1211.95 L1086.3 1211.95 L1086.89 1211.95 L1087.47 1211.95 L1088.06 1211.95 L1088.65 1211.95 L1089.23 1211.95 L1089.82 1211.95 L1090.41 1211.95 L1090.99 1211.95 L1091.58 1211.95 L1092.17 1211.95 L1092.75 1211.95 L1093.34 1211.95 L1093.93 1211.95 L1094.51 1211.95 L1095.1 1211.95 L1095.68 1211.95 L1096.27 1211.95 L1096.86 1211.95 L1097.44 1211.95 L1098.03 1211.95 L1098.62 1211.95 L1099.2 1211.95 L1099.79 1211.95 L1100.38 1211.95 L1100.96 1211.95 L1101.55 1211.95 L1102.14 1211.95 L1102.72 1211.95 L1103.31 1211.95 L1103.89 1211.95 L1104.48 1211.95 L1105.07 1211.95 L1105.65 1211.95 L1106.24 1211.95 L1106.83 1211.95 L1107.41 1211.95 L1108 1211.95 L1108.59 1211.95 L1109.17 1211.95 L1109.76 1211.95 L1110.34 1211.95 L1110.93 1211.95 L1111.52 1211.95 L1112.1 1211.95 L1112.69 1211.95 L1113.28 1211.95 L1113.86 1211.95 L1114.45 1211.95 L1115.04 1211.95 L1115.62 1211.95 L1116.21 1211.95 L1116.8 1211.95 L1117.38 1211.95 L1117.97 1211.95 L1118.55 1211.95 L1119.14 1211.95 L1119.73 1211.95 L1120.31 1211.95 L1120.9 1211.95 L1121.49 1211.95 L1122.07 1211.95 L1122.66 1211.95 L1123.25 1211.95 L1123.83 1211.95 L1124.42 1211.95 L1125.01 1211.95 L1125.59 1211.95 L1126.18 1211.95 L1126.76 1211.95 L1127.35 1211.95 L1127.94 1211.95 L1128.52 1211.95 L1129.11 1211.95 L1129.7 1211.95 L1130.28 1211.95 L1130.87 1211.95 L1131.46 1211.95 L1132.04 1211.95 L1132.63 1211.95 L1133.21 1211.95 L1133.8 1211.95 L1134.39 1211.95 L1134.97 1211.95 L1135.56 1211.95 L1136.15 1211.95 L1136.73 1211.95 L1137.32 1211.95 L1137.91 1211.95 L1138.49 1211.95 L1139.08 1211.95 L1139.67 1211.95 L1140.25 1211.95 L1140.84 1211.95 L1141.42 1211.95 L1142.01 1211.95 L1142.6 1211.95 L1143.18 1211.95 L1143.77 1211.95 L1144.36 1211.95 L1144.94 1211.95 L1145.53 1211.95 L1146.12 1211.95 L1146.7 1211.95 L1147.29 1211.95 L1147.88 1211.95 L1148.46 1211.95 L1149.05 1211.95 L1149.63 1211.95 L1150.22 1211.95 L1150.81 1211.95 L1151.39 1211.95 L1151.98 1211.95 L1152.57 1211.95 L1153.15 1211.95 L1153.74 1211.95 L1154.33 1211.95 L1154.91 1211.95 L1155.5 1211.95 L1156.09 1211.95 L1156.67 1211.95 L1157.26 1211.95 L1157.84 1211.95 L1158.43 1211.95 L1159.02 1211.95 L1159.6 1211.95 L1160.19 1211.95 L1160.78 1211.95 L1161.36 1211.95 L1161.95 1211.95 L1162.54 1211.95 L1163.12 1211.95 L1163.71 1211.95 L1164.29 1211.95 L1164.88 1211.95 L1165.47 1211.95 L1166.05 1211.95 L1166.64 1211.95 L1167.23 1211.95 L1167.81 1211.95 L1168.4 1211.95 L1168.99 1211.95 L1169.57 1211.95 L1170.16 1211.95 L1170.75 1211.95 L1171.33 1211.95 L1171.92 1211.95 L1172.5 1211.95 L1173.09 1211.95 L1173.68 1211.95 L1174.26 1211.95 L1174.85 1211.95 L1175.44 1211.95 L1176.02 1211.95 L1176.61 1211.95 L1177.2 1211.95 L1177.78 1211.95 L1178.37 1211.95 L1178.96 1211.95 L1179.54 1211.95 L1180.13 1211.95 L1180.71 1211.95 L1181.3 1211.95 L1181.89 1211.95 L1182.47 1211.95 L1183.06 1211.95 L1183.65 1211.95 L1184.23 1211.95 L1184.82 1211.95 L1185.41 1211.95 L1185.99 1211.95 L1186.58 1211.95 L1187.16 1211.95 L1187.75 1211.95 L1188.34 1211.95 L1188.92 1211.95 L1189.51 1211.95 L1190.1 1211.95 L1190.68 1211.95 L1191.27 1211.95 L1191.86 1211.95 L1192.44 1211.95 L1193.03 1211.95 L1193.62 1211.95 L1194.2 1211.95 L1194.79 1211.95 L1195.37 1211.95 L1195.96 1211.95 L1196.55 1211.95 L1197.13 1211.95 L1197.72 1211.95 L1198.31 1211.95 L1198.89 1211.95 L1199.48 1211.95 L1200.07 1211.95 L1200.65 1211.95 L1201.24 1211.95 L1201.83 1211.95 L1202.41 1211.95 L1203 1211.95 L1203.58 1211.95 L1204.17 1211.95 L1204.76 1211.95 L1205.34 1211.95 L1205.93 1211.95 L1206.52 1211.95 L1207.1 1211.95 L1207.69 1211.95 L1208.28 1211.95 L1208.86 1211.95 L1209.45 1211.95 L1210.03 1211.95 L1210.62 1211.95 L1211.21 1211.95 L1211.79 1211.95 L1212.38 1211.95 L1212.97 1211.95 L1213.55 1211.95 L1214.14 1211.95 L1214.73 1211.95 L1215.31 1211.95 L1215.9 1211.95 L1216.49 1211.95 L1217.07 1211.95 L1217.66 1211.95 L1218.24 1211.95 L1218.83 1211.95 L1219.42 1211.95 L1220 1211.95 L1220.59 1211.95 L1221.18 1211.95 L1221.76 1211.95 L1222.35 1211.95 L1222.94 1211.95 L1223.52 1211.95 L1224.11 1211.95 L1224.7 1211.95 L1225.28 1211.95 L1225.87 1211.95 L1226.45 1211.95 L1227.04 1211.95 L1227.63 1211.95 L1228.21 1211.95 L1228.8 1211.95 L1229.39 1211.95 L1229.97 1211.95 L1230.56 1211.95 L1231.15 1211.95 L1231.73 1211.95 L1232.32 1211.95 L1232.91 1211.95 L1233.49 1211.95 L1234.08 1211.95 L1234.66 1211.95 L1235.25 1211.95 L1235.84 1211.95 L1236.42 1211.95 L1237.01 1211.95 L1237.6 1211.95 L1238.18 1211.95 L1238.77 1211.95 L1239.36 1211.95 L1239.94 1211.95 L1240.53 1211.95 L1241.11 1211.95 L1241.7 1211.95 L1242.29 1211.95 L1242.87 1211.95 L1243.46 1211.95 L1244.05 1211.95 L1244.63 1211.95 L1245.22 1211.95 L1245.81 1211.95 L1246.39 1211.95 L1246.98 1211.95 L1247.57 1211.95 L1248.15 1211.95 L1248.74 1211.95 L1249.32 1211.95 L1249.91 1211.95 L1250.5 1211.95 L1251.08 1211.95 L1251.67 1211.95 L1252.26 1211.95 L1252.84 1211.95 L1253.43 1211.95 L1254.02 1211.95 L1254.6 1211.95 L1255.19 1211.95 L1255.78 1211.95 L1256.36 1211.95 L1256.95 1211.95 L1257.53 1211.95 L1258.12 1211.95 L1258.71 1211.95 L1259.29 1211.95 L1259.88 1211.95 L1260.47 1211.95 L1261.05 1211.95 L1261.64 1211.95 L1262.23 1211.95 L1262.81 1211.95 L1263.4 1211.95 L1263.98 1211.95 L1264.57 1211.95 L1265.16 1211.95 L1265.74 1211.95 L1266.33 1211.95 L1266.92 1211.95 L1267.5 1211.95 L1268.09 1211.95 L1268.68 1211.95 L1269.26 1211.95 L1269.85 1211.95 L1270.44 1211.95 L1271.02 1211.95 L1271.61 1211.95 L1272.19 1211.95 L1272.78 1211.95 L1273.37 1211.95 L1273.95 1211.95 L1274.54 1211.95 L1275.13 1211.95 L1275.71 1211.95 L1276.3 1211.95 L1276.89 1211.95 L1277.47 1211.95 L1278.06 1211.95 L1278.65 1211.95 L1279.23 1211.95 L1279.82 1211.95 L1280.4 1211.95 L1280.99 1211.95 L1281.58 1211.95 L1282.16 1211.95 L1282.75 1211.95 L1283.34 1211.95 L1283.92 1211.95 L1284.51 1211.95 L1285.1 1211.95 L1285.68 1211.95 L1286.27 1211.95 L1286.86 1211.95 L1287.44 1211.95 L1288.03 1211.95 L1288.61 1211.95 L1289.2 1211.95 L1289.79 1211.95 L1290.37 1211.95 L1290.96 1211.95 L1291.55 1211.95 L1292.13 1211.95 L1292.72 1211.95 L1293.31 1211.95 L1293.89 1211.95 L1294.48 1211.95 L1295.06 1211.95 L1295.65 1211.95 L1296.24 1211.95 L1296.82 1211.95 L1297.41 1211.95 L1298 1211.95 L1298.58 1211.95 L1299.17 1211.95 L1299.76 1211.95 L1300.34 1211.95 L1300.93 1211.95 L1301.52 1211.95 L1302.1 1211.95 L1302.69 1211.95 L1303.27 1211.95 L1303.86 1211.95 L1304.45 1211.95 L1305.03 1211.95 L1305.62 1211.95 L1306.21 1211.95 L1306.79 1211.95 L1307.38 1211.95 L1307.97 1211.95 L1308.55 1211.95 L1309.14 1211.95 L1309.73 1211.95 L1310.31 1211.95 L1310.9 1211.95 L1311.48 1211.95 L1312.07 1211.95 L1312.66 1211.95 L1313.24 1211.95 L1313.83 1211.95 L1314.42 1211.95 L1315 1211.95 L1315.59 1211.95 L1316.18 1211.95 L1316.76 1211.95 L1317.35 1211.95 L1317.93 1211.95 L1318.52 1211.95 L1319.11 1211.95 L1319.69 1211.95 L1320.28 1211.95 L1320.87 1211.95 L1321.45 1211.95 L1322.04 1211.95 L1322.63 1211.95 L1323.21 1211.95 L1323.8 1211.95 L1324.39 1211.95 L1324.97 1211.95 L1325.56 1211.95 L1326.14 1211.95 L1326.73 1211.95 L1327.32 1211.95 L1327.9 1211.95 L1328.49 1211.95 L1329.08 1211.95 L1329.66 1211.95 L1330.25 1211.95 L1330.84 1211.95 L1331.42 1211.95 L1332.01 1211.95 L1332.6 1211.95 L1333.18 1211.95 L1333.77 1211.95 L1334.35 1211.95 L1334.94 1211.95 L1335.53 1211.95 L1336.11 1211.95 L1336.7 1211.95 L1337.29 1211.95 L1337.87 1211.95 L1338.46 1211.95 L1339.05 1211.95 L1339.63 1211.95 L1340.22 1211.95 L1340.8 1211.95 L1341.39 1211.95 L1341.98 1211.95 L1342.56 1211.95 L1343.15 1211.95 L1343.74 1211.95 L1344.32 1211.95 L1344.91 1211.95 L1345.5 1211.95 L1346.08 1211.95 L1346.67 1211.95 L1347.26 1211.95 L1347.84 1211.95 L1348.43 1211.95 L1349.01 1211.95 L1349.6 1211.95 L1350.19 1211.95 L1350.77 1211.95 L1351.36 1211.95 L1351.95 1211.95 L1352.53 1211.95 L1353.12 1211.95 L1353.71 1211.95 L1354.29 1211.95 L1354.88 1211.95 L1355.47 1211.95 L1356.05 1211.95 L1356.64 1211.95 L1357.22 1211.95 L1357.81 1211.95 L1358.4 1211.95 L1358.98 1211.95 L1359.57 1211.95 L1360.16 1211.95 L1360.74 1211.95 L1361.33 1211.95 L1361.92 1211.95 L1362.5 1211.95 L1363.09 1211.95 L1363.68 1211.95 L1364.26 1211.95 L1364.85 1211.95 L1365.43 1211.95 L1366.02 1211.95 L1366.61 1211.95 L1367.19 1211.95 L1367.78 1211.95 L1368.37 1211.95 L1368.95 1211.95 L1369.54 1211.95 L1370.13 1211.95 L1370.71 1211.95 L1371.3 1211.95 L1371.88 1211.95 L1372.47 1211.95 L1373.06 1211.95 L1373.64 1211.95 L1374.23 1211.95 L1374.82 1211.95 L1375.4 1211.95 L1375.99 1211.95 L1376.58 1211.95 L1377.16 1211.95 L1377.75 1211.95 L1378.34 1211.95 L1378.92 1211.95 L1379.51 1211.95 L1380.09 1211.95 L1380.68 1211.95 L1381.27 1211.95 L1381.85 1211.95 L1382.44 1211.95 L1383.03 1211.95 L1383.61 1211.95 L1384.2 1211.95 L1384.79 1211.95 L1385.37 1211.95 L1385.96 1211.95 L1386.55 1211.95 L1387.13 1211.95 L1387.72 1211.95 L1388.3 1211.95 L1388.89 1211.95 L1389.48 1211.95 L1390.06 1211.95 L1390.65 1211.95 L1391.24 1211.95 L1391.82 1211.95 L1392.41 1211.95 L1393 1211.95 L1393.58 1211.95 L1394.17 1211.95 L1394.75 1211.95 L1395.34 1211.95 L1395.93 1211.95 L1396.51 1211.95 L1397.1 1211.95 L1397.69 1211.95 L1398.27 1211.95 L1398.86 1211.95 L1399.45 1211.95 L1400.03 1211.95 L1400.62 1211.95 L1401.21 1211.95 L1401.79 1211.95 L1402.38 1211.95 L1402.96 1211.95 L1403.55 1211.95 L1404.14 1211.95 L1404.72 1211.95 L1405.31 1211.95 L1405.9 1211.95 L1406.48 1211.95 L1407.07 1211.95 L1407.66 1211.95 L1408.24 1211.95 L1408.83 1211.95 L1409.42 1211.95 L1410 1211.95 L1410.59 1211.95 L1411.17 1211.95 L1411.76 1211.95 L1412.35 1211.95 L1412.93 1211.95 L1413.52 1211.95 L1414.11 1211.95 L1414.69 1211.95 L1415.28 1211.95 L1415.87 1211.95 L1416.45 1211.95 L1417.04 1211.95 L1417.63 1211.95 L1418.21 1211.95 L1418.8 1211.95 L1419.38 1211.95 L1419.97 1211.95 L1420.56 1211.95 L1421.14 1211.95 L1421.73 1211.95 L1422.32 1211.95 L1422.9 1211.95 L1423.49 1211.95 L1424.08 1211.95 L1424.66 1211.95 L1425.25 1211.95 L1425.83 1211.95 L1426.42 1211.95 L1427.01 1211.95 L1427.59 1211.95 L1428.18 1211.95 L1428.77 1211.95 L1429.35 1211.95 L1429.94 1211.95 L1430.53 1211.95 L1431.11 1211.95 L1431.7 1211.95 L1432.29 1211.95 L1432.87 1211.95 L1433.46 1211.95 L1434.04 1211.95 L1434.63 1211.95 L1435.22 1211.95 L1435.8 1211.95 L1436.39 1211.95 L1436.98 1211.95 L1437.56 1211.95 L1438.15 1211.95 L1438.74 1211.95 L1439.32 1211.95 L1439.91 1211.95 L1440.5 1211.95 L1441.08 1211.95 L1441.67 1211.95 L1442.25 1211.95 L1442.84 1211.95 L1443.43 1211.95 L1444.01 1211.95 L1444.6 1211.95 L1445.19 1211.95 L1445.77 1211.95 L1446.36 1211.95 L1446.95 1211.95 L1447.53 1211.95 L1448.12 1211.95 L1448.7 1211.95 L1449.29 1211.95 L1449.88 1211.95 L1450.46 1211.95 L1451.05 1211.95 L1451.64 1211.95 L1452.22 1211.95 L1452.81 1211.95 L1453.4 1211.95 L1453.98 1211.95 L1454.57 1211.95 L1455.16 1211.95 L1455.74 1211.95 L1456.33 1211.95 L1456.91 1211.95 L1457.5 1211.95 L1458.09 1211.95 L1458.67 1211.95 L1459.26 1211.95 L1459.85 1211.95 L1460.43 1211.95 L1461.02 1211.95 L1461.61 1211.95 L1462.19 1211.95 L1462.78 1211.95 L1463.37 1211.95 L1463.95 1211.95 L1464.54 1211.95 L1465.12 1211.95 L1465.71 1211.95 L1466.3 1211.95 L1466.88 1211.95 L1467.47 1211.95 L1468.06 1211.95 L1468.64 1211.95 L1469.23 1211.95 L1469.82 1211.95 L1470.4 1211.95 L1470.99 1211.95 L1471.57 1211.95 L1472.16 1211.95 L1472.75 1211.95 L1473.33 1211.95 L1473.92 1211.95 L1474.51 1211.95 L1475.09 1211.95 L1475.68 1211.95 L1476.27 1211.95 L1476.85 1211.95 L1477.44 1211.95 L1478.03 1211.95 L1478.61 1211.95 L1479.2 1211.95 L1479.78 1211.95 L1480.37 1211.95 L1480.96 1211.95 L1481.54 1211.95 L1482.13 1211.95 L1482.72 1211.95 L1483.3 1211.95 L1483.89 1211.95 L1484.48 1211.95 L1485.06 1211.95 L1485.65 1211.95 L1486.24 1211.95 L1486.82 1211.95 L1487.41 1211.95 L1487.99 1211.95 L1488.58 1211.95 L1489.17 1211.95 L1489.75 1211.95 L1490.34 1211.95 L1490.93 1211.95 L1491.51 1211.95 L1492.1 1211.95 L1492.69 1211.95 L1493.27 1211.95 L1493.86 1211.95 L1494.45 1211.95 L1495.03 1211.95 L1495.62 1211.95 L1496.2 1211.95 L1496.79 1211.95 L1497.38 1211.95 L1497.96 1211.95 L1498.55 1211.95 L1499.14 1211.95 L1499.72 1211.95 L1500.31 1211.95 L1500.9 1211.95 L1501.48 1211.95 L1502.07 1211.95 L1502.65 1211.95 L1503.24 1211.95 L1503.83 1211.95 L1504.41 1211.95 L1505 1211.95 L1505.59 1211.95 L1506.17 1211.95 L1506.76 1211.95 L1507.35 1211.95 L1507.93 1211.95 L1508.52 1211.95 L1509.11 1211.95 L1509.69 1211.95 L1510.28 1211.95 L1510.86 1211.95 L1511.45 1211.95 L1512.04 1211.95 L1512.62 1211.95 L1513.21 1211.95 L1513.8 1211.95 L1514.38 1211.95 L1514.97 1211.95 L1515.56 1211.95 L1516.14 1211.95 L1516.73 1211.95 L1517.32 1211.95 L1517.9 1211.95 L1518.49 1211.95 L1519.07 1211.95 L1519.66 1211.95 L1520.25 1211.95 L1520.83 1211.95 L1521.42 1211.95 L1522.01 1211.95 L1522.59 1211.95 L1523.18 1211.95 L1523.77 1211.95 L1524.35 1211.95 L1524.94 1211.95 L1525.52 1211.95 L1526.11 1211.95 L1526.7 1211.95 L1527.28 1211.95 L1527.87 1211.95 L1528.46 1211.95 L1529.04 1211.95 L1529.63 1211.95 L1530.22 1211.95 L1530.8 1211.95 L1531.39 1211.95 L1531.98 1211.95 L1532.56 1211.95 L1533.15 1211.95 L1533.73 1211.95 L1534.32 1211.95 L1534.91 1211.95 L1535.49 1211.95 L1536.08 1211.95 L1536.67 1211.95 L1537.25 1211.95 L1537.84 1211.95 L1538.43 1211.95 L1539.01 1211.95 L1539.6 1211.95 L1540.19 1211.95 L1540.77 1211.95 L1541.36 1211.95 L1541.94 1211.95 L1542.53 1211.95 L1543.12 1211.95 L1543.7 1211.95 L1544.29 1211.95 L1544.88 1211.95 L1545.46 1211.95 L1546.05 1211.95 L1546.64 1211.95 L1547.22 1211.95 L1547.81 1211.95 L1548.4 1211.95 L1548.98 1211.95 L1549.57 1211.95 L1550.15 1211.95 L1550.74 1211.95 L1551.33 1211.95 L1551.91 1211.95 L1552.5 1211.95 L1553.09 1211.95 L1553.67 1211.95 L1554.26 1211.95 L1554.85 1211.95 L1555.43 1211.95 L1556.02 1211.95 L1556.6 1211.95 L1557.19 1211.95 L1557.78 1211.95 L1558.36 1211.95 L1558.95 1211.95 L1559.54 1211.95 L1560.12 1211.95 L1560.71 1211.95 L1561.3 1211.95 L1561.88 1211.95 L1562.47 1211.95 L1563.06 1211.95 L1563.64 1211.95 L1564.23 1211.95 L1564.81 1211.95 L1565.4 1211.95 L1565.99 1211.95 L1566.57 1211.95 L1567.16 1211.95 L1567.75 1211.95 L1568.33 1211.95 L1568.92 1211.95 L1569.51 1211.95 L1570.09 1211.95 L1570.68 1211.95 L1571.27 1211.95 L1571.85 1211.95 L1572.44 1211.95 L1573.02 1211.95 L1573.61 1211.95 L1574.2 1211.95 L1574.78 1211.95 L1575.37 1211.95 L1575.96 1211.95 L1576.54 1211.95 L1577.13 1211.95 L1577.72 1211.95 L1578.3 1211.95 L1578.89 1211.95 L1579.47 1211.95 L1580.06 1211.95 L1580.65 1211.95 L1581.23 1211.95 L1581.82 1211.95 L1582.41 1211.95 L1582.99 1211.95 L1583.58 1211.95 L1584.17 1211.95 L1584.75 1211.95 L1585.34 1211.95 L1585.93 1211.95 L1586.51 1211.95 L1587.1 1211.95 L1587.68 1211.95 L1588.27 1211.95 L1588.86 1211.95 L1589.44 1211.95 L1590.03 1211.95 L1590.62 1211.95 L1591.2 1211.95 L1591.79 1211.95 L1592.38 1211.95 L1592.96 1211.95 L1593.55 1211.95 L1594.14 1211.95 L1594.72 1211.95 L1595.31 1211.95 L1595.89 1211.95 L1596.48 1211.95 L1597.07 1211.95 L1597.65 1211.95 L1598.24 1211.95 L1598.83 1211.95 L1599.41 1211.95 L1600 1211.95 L1600.59 1211.95 L1601.17 1211.95 L1601.76 1211.95 L1602.34 1211.95 L1602.93 1211.95 L1603.52 1211.95 L1604.1 1211.95 L1604.69 1211.95 L1605.28 1211.95 L1605.86 1211.95 L1606.45 1211.95 L1607.04 1211.95 L1607.62 1211.95 L1608.21 1211.95 L1608.8 1211.95 L1609.38 1211.95 L1609.97 1211.95 L1610.55 1211.95 L1611.14 1211.95 L1611.73 1211.95 L1612.31 1211.95 L1612.9 1211.95 L1613.49 1211.95 L1614.07 1211.95 L1614.66 1211.95 L1615.25 1211.95 L1615.83 1211.95 L1616.42 1211.95 L1617.01 1211.95 L1617.59 1211.95 L1618.18 1211.95 L1618.76 1211.95 L1619.35 1211.95 L1619.94 1211.95 L1620.52 1211.95 L1621.11 1211.95 L1621.7 1211.95 L1622.28 1211.95 L1622.87 1211.95 L1623.46 1211.95 L1624.04 1211.95 L1624.63 1211.95 L1625.22 1211.95 L1625.8 1211.95 L1626.39 1211.95 L1626.97 1211.95 L1627.56 1211.95 L1628.15 1211.95 L1628.73 1211.95 L1629.32 1211.95 L1629.91 1211.95 L1630.49 1211.95 L1631.08 1211.95 L1631.67 1211.95 L1632.25 1211.95 L1632.84 1211.95 L1633.42 1211.95 L1634.01 1211.95 L1634.6 1211.95 L1635.18 1211.95 L1635.77 1211.95 L1636.36 1211.95 L1636.94 1211.95 L1637.53 1211.95 L1638.12 1211.95 L1638.7 1211.95 L1639.29 1211.95 L1639.88 1211.95 L1640.46 1211.95 L1641.05 1211.95 L1641.63 1211.95 L1642.22 1211.95 L1642.81 1211.95 L1643.39 1211.95 L1643.98 1211.95 L1644.57 1211.95 L1645.15 1211.95 L1645.74 1211.95 L1646.33 1211.95 L1646.91 1211.95 L1647.5 1211.95 L1648.09 1211.95 L1648.67 1211.95 L1649.26 1211.95 L1649.84 1211.95 L1650.43 1211.95 L1651.02 1211.95 L1651.6 1211.95 L1652.19 1211.95 L1652.78 1211.95 L1653.36 1211.95 L1653.95 1211.95 L1654.54 1211.95 L1655.12 1211.95 L1655.71 1211.95 L1656.29 1211.95 L1656.88 1211.95 L1657.47 1211.95 L1658.05 1211.95 L1658.64 1211.95 L1659.23 1211.95 L1659.81 1211.95 L1660.4 1211.95 L1660.99 1211.95 L1661.57 1211.95 L1662.16 1211.95 L1662.75 1211.95 L1663.33 1211.95 L1663.92 1211.95 L1664.5 1211.95 L1665.09 1211.95 L1665.68 1211.95 L1666.26 1211.95 L1666.85 1211.95 L1667.44 1211.95 L1668.02 1211.95 L1668.61 1211.95 L1669.2 1211.95 L1669.78 1211.95 L1670.37 1211.95 L1670.96 1211.95 L1671.54 1211.95 L1672.13 1211.95 L1672.71 1211.95 L1673.3 1211.95 L1673.89 1211.95 L1674.47 1211.95 L1675.06 1211.95 L1675.65 1211.95 L1676.23 1211.95 L1676.82 1211.95 L1677.41 1211.95 L1677.99 1211.95 L1678.58 1211.95 L1679.17 1211.95 L1679.75 1211.95 L1680.34 1211.95 L1680.92 1211.95 L1681.51 1211.95 L1682.1 1211.95 L1682.68 1211.95 L1683.27 1211.95 L1683.86 1211.95 L1684.44 1211.95 L1685.03 1211.95 L1685.62 1211.95 L1686.2 1211.95 L1686.79 1211.95 L1687.37 1211.95 L1687.96 1211.95 L1688.55 1211.95 L1689.13 1211.95 L1689.72 1211.95 L1690.31 1211.95 L1690.89 1211.95 L1691.48 1211.95 L1692.07 1211.95 L1692.65 1211.95 L1693.24 1211.95 L1693.83 1211.95 L1694.41 1211.95 L1695 1211.95 L1695.58 1211.95 L1696.17 1211.95 L1696.76 1211.95 L1697.34 1211.95 L1697.93 1211.95 L1698.52 1211.95 L1699.1 1211.95 L1699.69 1211.95 L1700.28 1211.95 L1700.86 1211.95 L1701.45 1211.95 L1702.04 1211.95 L1702.62 1211.95 L1703.21 1211.95 L1703.79 1211.95 L1704.38 1211.95 L1704.97 1211.95 L1705.55 1211.95 L1706.14 1211.95 L1706.73 1211.95 L1707.31 1211.95 L1707.9 1211.95 L1708.49 1211.95 L1709.07 1211.95 L1709.66 1211.95 L1710.24 1211.95 L1710.83 1211.95 L1711.42 1211.95 L1712 1211.95 L1712.59 1211.95 L1713.18 1211.95 L1713.76 1211.95 L1714.35 1211.95 L1714.94 1211.95 L1715.52 1211.95 L1716.11 1211.95 L1716.7 1211.95 L1717.28 1211.95 L1717.87 1211.95 L1718.45 1211.95 L1719.04 1211.95 L1719.63 1211.95 L1720.21 1211.95 L1720.8 1211.95 L1721.39 1211.95 L1721.97 1211.95 L1722.56 1211.95 L1723.15 1211.95 L1723.73 1211.95 L1724.32 1211.95 L1724.91 1211.95 L1725.49 1211.95 L1726.08 1211.95 L1726.66 1211.95 L1727.25 1211.95 L1727.84 1211.95 L1728.42 1211.95 L1729.01 1211.95 L1729.6 1211.95 L1730.18 1211.95 L1730.77 1211.95 L1731.36 1211.95 L1731.94 1211.95 L1732.53 1211.95 L1733.11 1211.95 L1733.7 1211.95 L1734.29 1211.95 L1734.87 1211.95 L1735.46 1211.95 L1736.05 1211.95 L1736.63 1211.95 L1737.22 1211.95 L1737.81 1211.95 L1738.39 1211.95 L1738.98 1211.95 L1739.57 1211.95 L1740.15 1211.95 L1740.74 1211.95 L1741.32 1211.95 L1741.91 1211.95 L1742.5 1211.95 L1743.08 1211.95 L1743.67 1211.95 L1744.26 1211.95 L1744.84 1211.95 L1745.43 1211.95 L1746.02 1211.95 L1746.6 1211.95 L1747.19 1211.95 L1747.78 1211.95 L1748.36 1211.95 L1748.95 1211.95 L1749.53 1211.95 L1750.12 1211.95 L1750.71 1211.95 L1751.29 1211.95 L1751.88 1211.95 L1752.47 1211.95 L1753.05 1211.95 L1753.64 1211.95 L1754.23 1211.95 L1754.81 1211.95 L1755.4 1211.95 L1755.99 1211.95 L1756.57 1211.95 L1757.16 1211.95 L1757.74 1211.95 L1758.33 1211.95 L1758.92 1211.95 L1759.5 1211.95 L1760.09 1211.95 L1760.68 1211.95 L1761.26 1211.95 L1761.85 1211.95 L1762.44 1211.95 L1763.02 1211.95 L1763.61 1211.95 L1764.19 1211.95 L1764.78 1211.95 L1765.37 1211.95 L1765.95 1211.95 L1766.54 1211.95 L1767.13 1211.95 L1767.71 1211.95 L1768.3 1211.95 L1768.89 1211.95 L1769.47 1211.95 L1770.06 1211.95 L1770.65 1211.95 L1771.23 1211.95 L1771.82 1211.95 L1772.4 1211.95 L1772.99 1211.95 L1773.58 1211.95 L1774.16 1211.95 L1774.75 1211.95 L1775.34 1211.95 L1775.92 1211.95 L1776.51 1211.95 L1777.1 1211.95 L1777.68 1211.95 L1778.27 1211.95 L1778.86 1211.95 L1779.44 1211.95 L1780.03 1211.95 L1780.61 1211.95 L1781.2 1211.95 L1781.79 1211.95 L1782.37 1211.95 L1782.96 1211.95 L1783.55 1211.95 L1784.13 1211.95 L1784.72 1211.95 L1785.31 1211.95 L1785.89 1211.95 L1786.48 1211.95 L1787.06 1211.95 L1787.65 1211.95 L1788.24 1211.95 L1788.82 1211.95 L1789.41 1211.95 L1790 1211.95 L1790.58 1211.95 L1791.17 1211.95 L1791.76 1211.95 L1792.34 1211.95 L1792.93 1211.95 L1793.52 1211.95 L1794.1 1211.95 L1794.69 1211.95 L1795.27 1211.95 L1795.86 1211.95 L1796.45 1211.95 L1797.03 1211.95 L1797.62 1211.95 L1798.21 1211.95 L1798.79 1211.95 L1799.38 1211.95 L1799.97 1211.95 L1800.55 1211.95 L1801.14 1211.95 L1801.73 1211.95 L1802.31 1211.95 L1802.9 1211.95 L1803.48 1211.95 L1804.07 1211.95 L1804.66 1211.95 L1805.24 1211.95 L1805.83 1211.95 L1806.42 1211.95 L1807 1211.95 L1807.59 1211.95 L1808.18 1211.95 L1808.76 1211.95 L1809.35 1211.95 L1809.94 1211.95 L1810.52 1211.95 L1811.11 1211.95 L1811.69 1211.95 L1812.28 1211.95 L1812.87 1211.95 L1813.45 1211.95 L1814.04 1211.95 L1814.63 1211.95 L1815.21 1211.95 L1815.8 1211.95 L1816.39 1211.95 L1816.97 1211.95 L1817.56 1211.95 L1818.14 1211.95 L1818.73 1211.95 L1819.32 1211.95 L1819.9 1211.95 L1820.49 1211.95 L1821.08 1211.95 L1821.66 1211.95 L1822.25 1211.95 L1822.84 1211.95 L1823.42 1211.95 L1824.01 1211.95 L1824.6 1211.95 L1825.18 1211.95 L1825.77 1211.95 L1826.35 1211.95 L1826.94 1211.95 L1827.53 1211.95 L1828.11 1211.95 L1828.7 1211.95 L1829.29 1211.95 L1829.87 1211.95 L1830.46 1211.95 L1831.05 1211.95 L1831.63 1211.95 L1832.22 1211.95 L1832.81 1211.95 L1833.39 1211.95 L1833.98 1211.95 L1834.56 1211.95 L1835.15 1211.95 L1835.74 1211.95 L1836.32 1211.95 L1836.91 1211.95 L1837.5 1211.95 L1838.08 1211.95 L1838.67 1211.95 L1839.26 1211.95 L1839.84 1211.95 L1840.43 1211.95 L1841.01 1211.95 L1841.6 1211.95 L1842.19 1211.95 L1842.77 1211.95 L1843.36 1211.95 L1843.95 1211.95 L1844.53 1211.95 L1845.12 1211.95 L1845.71 1211.95 L1846.29 1211.95 L1846.88 1211.95 L1847.47 1211.95 L1848.05 1211.95 L1848.64 1211.95 L1849.22 1211.95 L1849.81 1211.95 L1850.4 1211.95 L1850.98 1211.95 L1851.57 1211.95 L1852.16 1211.95 L1852.74 1211.95 L1853.33 1211.95 L1853.92 1211.95 L1854.5 1211.95 L1855.09 1211.95 L1855.68 1211.95 L1856.26 1211.95 L1856.85 1211.95 L1857.43 1211.95 L1858.02 1211.95 L1858.61 1211.95 L1859.19 1211.95 L1859.78 1211.95 L1860.37 1211.95 L1860.95 1211.95 L1861.54 1211.95 L1862.13 1211.95 L1862.71 1211.95 L1863.3 1211.95 L1863.88 1211.95 L1864.47 1211.95 L1865.06 1211.95 L1865.64 1211.95 L1866.23 1211.95 L1866.82 1211.95 L1867.4 1211.95 L1867.99 1211.95 L1868.58 1211.95 L1869.16 1211.95 L1869.75 1211.95 L1870.34 1211.95 L1870.92 1211.95 L1871.51 1211.95 L1872.09 1211.95 L1872.68 1211.95 L1873.27 1211.95 L1873.85 1211.95 L1874.44 1211.95 L1875.03 1211.95 L1875.61 1211.95 L1876.2 1211.95 L1876.79 1211.95 L1877.37 1211.95 L1877.96 1211.95 L1878.55 1211.95 L1879.13 1211.95 L1879.72 1211.95 L1880.3 1211.95 L1880.89 1211.95 L1881.48 1211.95 L1882.06 1211.95 L1882.65 1211.95 L1883.24 1211.95 L1883.82 1211.95 L1884.41 1211.95 L1885 1211.95 L1885.58 1211.95 L1886.17 1211.95 L1886.76 1211.95 L1887.34 1211.95 L1887.93 1211.95 L1888.51 1211.95 L1889.1 1211.95 L1889.69 1211.95 L1890.27 1211.95 L1890.86 1211.95 L1891.45 1211.95 L1892.03 1211.95 L1892.62 1211.95 L1893.21 1211.95 L1893.79 1211.95 L1894.38 1211.95 L1894.96 1211.95 L1895.55 1211.95 L1896.14 1211.95 L1896.72 1211.95 L1897.31 1211.95 L1897.9 1211.95 L1898.48 1211.95 L1899.07 1211.95 L1899.66 1211.95 L1900.24 1211.95 L1900.83 1211.95 L1901.42 1211.95 L1902 1211.95 L1902.59 1211.95 L1903.17 1211.95 L1903.76 1211.95 L1904.35 1211.95 L1904.93 1211.95 L1905.52 1211.95 L1906.11 1211.95 L1906.69 1211.95 L1907.28 1211.95 L1907.87 1211.95 L1908.45 1211.95 L1909.04 1211.95 L1909.63 1211.95 L1910.21 1211.95 L1910.8 1211.95 L1911.38 1211.95 L1911.97 1211.95 L1912.56 1211.95 L1913.14 1211.95 L1913.73 1211.95 L1914.32 1211.95 L1914.9 1211.95 L1915.49 1211.95 L1916.08 1211.95 L1916.66 1211.95 L1917.25 1211.95 L1917.83 1211.95 L1918.42 1211.95 L1919.01 1211.95 L1919.59 1211.95 L1920.18 1211.95 L1920.77 1211.95 L1921.35 1211.95 L1921.94 1211.95 L1922.53 1211.95 L1923.11 1211.95 L1923.7 1211.95 L1924.29 1211.95 L1924.87 1211.95 L1925.46 1211.95 L1926.04 1211.95 L1926.63 1211.95 L1927.22 1211.95 L1927.8 1211.95 L1928.39 1211.95 L1928.98 1211.95 L1929.56 1211.95 L1930.15 1211.95 L1930.74 1211.95 L1931.32 1211.95 L1931.91 1211.95 L1932.5 1211.95 L1933.08 1211.95 L1933.67 1211.95 L1934.25 1211.95 L1934.84 1211.95 L1935.43 1211.95 L1936.01 1211.95 L1936.6 1211.95 L1937.19 1211.95 L1937.77 1211.95 L1938.36 1211.95 L1938.95 1211.95 L1939.53 1211.95 L1940.12 1211.95 L1940.71 1211.95 L1941.29 1211.95 L1941.88 1211.95 L1942.46 1211.95 L1943.05 1211.95 L1943.64 1211.95 L1944.22 1211.95 L1944.81 1211.95 L1945.4 1211.95 L1945.98 1211.95 L1946.57 1211.95 L1947.16 1211.95 L1947.74 1211.95 L1948.33 1211.95 L1948.91 1211.95 L1949.5 1211.95 L1950.09 1211.95 L1950.67 1211.95 L1951.26 1211.95 L1951.85 1211.95 L1952.43 1211.95 L1953.02 1211.95 L1953.61 1211.95 L1954.19 1211.95 L1954.78 1211.95 L1955.37 1211.95 L1955.95 1211.95 L1956.54 1211.95 L1957.12 1211.95 L1957.71 1211.95 L1958.3 1211.95 L1958.88 1211.95 L1959.47 1211.95 L1960.06 1211.95 L1960.64 1211.95 L1961.23 1211.95 L1961.82 1211.95 L1962.4 1211.95 L1962.99 1211.95 L1963.58 1211.95 L1964.16 1211.95 L1964.75 1211.95 L1965.33 1211.95 L1965.92 1211.95 L1966.51 1211.95 L1967.09 1211.95 L1967.68 1211.95 L1968.27 1211.95 L1968.85 1211.95 L1969.44 1211.95 L1970.03 1211.95 L1970.61 1211.95 L1971.2 1211.95 L1971.78 1211.95 L1972.37 1211.95 L1972.96 1211.95 L1973.54 1211.95 L1974.13 1211.95 L1974.72 1211.95 L1975.3 1211.95 L1975.89 1211.95 L1976.48 1211.95 L1977.06 1211.95 L1977.65 1211.95 L1978.24 1211.95 L1978.82 1211.95 L1979.41 1211.95 L1979.99 1211.95 L1980.58 1211.95 L1981.17 1211.95 L1981.75 1211.95 L1982.34 1211.95 L1982.93 1211.95 L1983.51 1211.95 L1984.1 1211.95 L1984.69 1211.95 L1985.27 1211.95 L1985.86 1211.95 L1986.45 1211.95 L1987.03 1211.95 L1987.62 1211.95 L1988.2 1211.95 L1988.79 1211.95 L1989.38 1211.95 L1989.96 1211.95 L1990.55 1211.95 L1991.14 1211.95 L1991.72 1211.95 L1992.31 1211.95 L1992.9 1211.95 L1993.48 1211.95 L1994.07 1211.95 L1994.65 1211.95 L1995.24 1211.95 L1995.83 1211.95 L1996.41 1211.95 L1997 1211.95 L1997.59 1211.95 L1998.17 1211.95 L1998.76 1211.95 L1999.35 1211.95 L1999.93 1211.95 L2000.52 1211.95 L2001.11 1211.95 L2001.69 1211.95 L2002.28 1211.95 L2002.86 1211.95 L2003.45 1211.95 L2004.04 1211.95 L2004.62 1211.95 L2005.21 1211.95 L2005.8 1211.95 L2006.38 1211.95 L2006.97 1211.95 L2007.56 1211.95 L2008.14 1211.95 L2008.73 1211.95 L2009.32 1211.95 L2009.9 1211.95 L2010.49 1211.95 L2011.07 1211.95 L2011.66 1211.95 L2012.25 1211.95 L2012.83 1211.95 L2013.42 1211.95 L2014.01 1211.95 L2014.59 1211.95 L2015.18 1211.95 L2015.77 1211.95 L2016.35 1211.95 L2016.94 1211.95 L2017.53 1211.95 L2018.11 1211.95 L2018.7 1211.95 L2019.28 1211.95 L2019.87 1211.95 L2020.46 1211.95 L2021.04 1211.95 L2021.63 1211.95 L2022.22 1211.95 L2022.8 1211.95 L2023.39 1211.95 L2023.98 1211.95 L2024.56 1211.95 L2025.15 1211.95 L2025.73 1211.95 L2026.32 1211.95 L2026.91 1211.95 L2027.49 1211.95 L2028.08 1211.95 L2028.67 1211.95 L2029.25 1211.95 L2029.84 1211.95 L2030.43 1211.95 L2031.01 1211.95 L2031.6 1211.95 L2032.19 1211.95 L2032.77 1211.95 L2033.36 1211.95 L2033.94 1211.95 L2034.53 1211.95 L2035.12 1211.95 L2035.7 1211.95 L2036.29 1211.95 L2036.88 1211.95 L2037.46 1211.95 L2038.05 1211.95 L2038.64 1211.95 L2039.22 1211.95 L2039.81 1211.95 L2040.4 1211.95 L2040.98 1211.95 L2041.57 1211.95 L2042.15 1211.95 L2042.74 1211.95 L2043.33 1211.95 L2043.91 1211.95 L2044.5 1211.95 L2045.09 1211.95 L2045.67 1211.95 L2046.26 1211.95 L2046.85 1211.95 L2047.43 1211.95 L2048.02 1211.95 L2048.6 1211.95 L2049.19 1211.95 L2049.78 1211.95 L2050.36 1211.95 L2050.95 1211.95 L2051.54 1211.95 L2052.12 1211.95 L2052.71 1211.95 L2053.3 1211.95 L2053.88 1211.95 L2054.47 1211.95 L2055.06 1211.95 L2055.64 1211.95 L2056.23 1211.95 L2056.81 1211.95 L2057.4 1211.95 L2057.99 1211.95 L2058.57 1211.95 L2059.16 1211.95 L2059.75 1211.95 L2060.33 1211.95 L2060.92 1211.95 L2061.51 1211.95 L2062.09 1211.95 L2062.68 1211.95 L2063.27 1211.95 L2063.85 1211.95 L2064.44 1211.95 L2065.02 1211.95 L2065.61 1211.95 L2066.2 1211.95 L2066.78 1211.95 L2067.37 1211.95 L2067.96 1211.95 L2068.54 1211.95 L2069.13 1211.95 L2069.72 1211.95 L2070.3 1211.95 L2070.89 1211.95 L2071.48 1211.95 L2072.06 1211.95 L2072.65 1211.95 L2073.23 1211.95 L2073.82 1211.95 L2074.41 1211.95 L2074.99 1211.95 L2075.58 1211.95 L2076.17 1211.95 L2076.75 1211.95 L2077.34 1211.95 L2077.93 1211.95 L2078.51 1211.95 L2079.1 1211.95 L2079.68 1211.95 L2080.27 1211.95 L2080.86 1211.95 L2081.44 1211.95 L2082.03 1211.95 L2082.62 1211.95 L2083.2 1211.95 L2083.79 1211.95 L2084.38 1211.95 L2084.96 1211.95 L2085.55 1211.95 L2086.14 1211.95 L2086.72 1211.95 L2087.31 1211.95 L2087.89 1211.95 L2088.48 1211.95 L2089.07 1211.95 L2089.65 1211.95 L2090.24 1211.95 L2090.83 1211.95 L2091.41 1211.95 L2092 1211.95 L2092.59 1211.95 L2093.17 1211.95 L2093.76 1211.95 L2094.35 1211.95 L2094.93 1211.95 L2095.52 1211.95 L2096.1 1211.95 L2096.69 1211.95 L2097.28 1211.95 L2097.86 1211.95 L2098.45 1211.95 L2099.04 1211.95 L2099.62 1211.95 L2100.21 1211.95 L2100.8 1211.95 L2101.38 1211.95 L2101.97 1211.95 L2102.55 1211.95 L2103.14 1211.95 L2103.73 1211.95 L2104.31 1211.95 L2104.9 1211.95 L2105.49 1211.95 L2106.07 1211.95 L2106.66 1211.95 L2107.25 1211.95 L2107.83 1211.95 L2108.42 1211.95 L2109.01 1211.95 L2109.59 1211.95 L2110.18 1211.95 L2110.76 1211.95 L2111.35 1211.95 L2111.94 1211.95 L2112.52 1211.95 L2113.11 1211.95 L2113.7 1211.95 L2114.28 1211.95 L2114.87 1211.95 L2115.46 1211.95 L2116.04 1211.95 L2116.63 1211.95 L2117.22 1211.95 L2117.8 1211.95 L2118.39 1211.95 L2118.97 1211.95 L2119.56 1211.95 L2120.15 1211.95 L2120.73 1211.95 L2121.32 1211.95 L2121.91 1211.95 L2122.49 1211.95 L2123.08 1211.95 L2123.67 1211.95 L2124.25 1211.95 L2124.84 1211.95 L2125.42 1211.95 L2126.01 1211.95 L2126.6 1211.95 L2127.18 1211.95 L2127.77 1211.95 L2128.36 1211.95 L2128.94 1211.95 L2129.53 1211.95 L2130.12 1211.95 L2130.7 1211.95 L2131.29 1211.95 L2131.88 1211.95 L2132.46 1211.95 L2133.05 1211.95 L2133.63 1211.95 L2134.22 1211.95 L2134.81 1211.95 L2135.39 1211.95 L2135.98 1211.95 L2136.57 1211.95 L2137.15 1211.95 L2137.74 1211.95 L2138.33 1211.95 L2138.91 1211.95 L2139.5 1211.95 L2140.09 1211.95 L2140.67 1211.95 L2141.26 1211.95 L2141.84 1211.95 L2142.43 1211.95 L2143.02 1211.95 L2143.6 1211.95 L2144.19 1211.95 L2144.78 1211.95 L2145.36 1211.95 L2145.95 1211.95 L2146.54 1211.95 L2147.12 1211.95 L2147.71 1211.95 L2148.3 1211.95 L2148.88 1211.95 L2149.47 1211.95 L2150.05 1211.95 L2150.64 1211.95 L2151.23 1211.95 L2151.81 1211.95 L2152.4 1211.95 L2152.99 1211.95 L2153.57 1211.95 L2154.16 1211.95 L2154.75 1211.95 L2155.33 1211.95 L2155.92 1211.95 L2156.5 1211.95 L2157.09 1211.95 L2157.68 1211.95 L2158.26 1211.95 L2158.26 1211.74 L2157.68 1211.74 L2157.09 1211.74 L2156.5 1211.74 L2155.92 1211.74 L2155.33 1211.74 L2154.75 1211.74 L2154.16 1211.74 L2153.57 1211.74 L2152.99 1211.74 L2152.4 1211.74 L2151.81 1211.74 L2151.23 1211.74 L2150.64 1211.74 L2150.05 1211.74 L2149.47 1211.74 L2148.88 1211.74 L2148.3 1211.74 L2147.71 1211.74 L2147.12 1211.74 L2146.54 1211.74 L2145.95 1211.74 L2145.36 1211.74 L2144.78 1211.74 L2144.19 1211.74 L2143.6 1211.74 L2143.02 1211.74 L2142.43 1211.74 L2141.84 1211.74 L2141.26 1211.74 L2140.67 1211.74 L2140.09 1211.74 L2139.5 1211.74 L2138.91 1211.74 L2138.33 1211.74 L2137.74 1211.74 L2137.15 1211.74 L2136.57 1211.74 L2135.98 1211.74 L2135.39 1211.74 L2134.81 1211.74 L2134.22 1211.74 L2133.63 1211.74 L2133.05 1211.74 L2132.46 1211.74 L2131.88 1211.74 L2131.29 1211.74 L2130.7 1211.74 L2130.12 1211.74 L2129.53 1211.74 L2128.94 1211.74 L2128.36 1211.74 L2127.77 1211.74 L2127.18 1211.74 L2126.6 1211.74 L2126.01 1211.74 L2125.42 1211.74 L2124.84 1211.74 L2124.25 1211.74 L2123.67 1211.74 L2123.08 1211.74 L2122.49 1211.74 L2121.91 1211.74 L2121.32 1211.74 L2120.73 1211.74 L2120.15 1211.74 L2119.56 1211.74 L2118.97 1211.74 L2118.39 1211.74 L2117.8 1211.74 L2117.22 1211.74 L2116.63 1211.74 L2116.04 1211.74 L2115.46 1211.74 L2114.87 1211.74 L2114.28 1211.74 L2113.7 1211.74 L2113.11 1211.74 L2112.52 1211.74 L2111.94 1211.74 L2111.35 1211.74 L2110.76 1211.74 L2110.18 1211.74 L2109.59 1211.74 L2109.01 1211.74 L2108.42 1211.74 L2107.83 1211.74 L2107.25 1211.74 L2106.66 1211.74 L2106.07 1211.74 L2105.49 1211.74 L2104.9 1211.74 L2104.31 1211.74 L2103.73 1211.74 L2103.14 1211.74 L2102.55 1211.74 L2101.97 1211.74 L2101.38 1211.74 L2100.8 1211.74 L2100.21 1211.74 L2099.62 1211.74 L2099.04 1211.74 L2098.45 1211.74 L2097.86 1211.74 L2097.28 1211.74 L2096.69 1211.74 L2096.1 1211.74 L2095.52 1211.74 L2094.93 1211.74 L2094.35 1211.74 L2093.76 1211.74 L2093.17 1211.74 L2092.59 1211.74 L2092 1211.74 L2091.41 1211.74 L2090.83 1211.74 L2090.24 1211.74 L2089.65 1211.74 L2089.07 1211.74 L2088.48 1211.74 L2087.89 1211.74 L2087.31 1211.74 L2086.72 1211.74 L2086.14 1211.74 L2085.55 1211.74 L2084.96 1211.74 L2084.38 1211.74 L2083.79 1211.74 L2083.2 1211.74 L2082.62 1211.74 L2082.03 1211.74 L2081.44 1211.74 L2080.86 1211.74 L2080.27 1211.74 L2079.68 1211.74 L2079.1 1211.74 L2078.51 1211.74 L2077.93 1211.74 L2077.34 1211.74 L2076.75 1211.74 L2076.17 1211.74 L2075.58 1211.74 L2074.99 1211.74 L2074.41 1211.74 L2073.82 1211.74 L2073.23 1211.74 L2072.65 1211.74 L2072.06 1211.74 L2071.48 1211.74 L2070.89 1211.74 L2070.3 1211.74 L2069.72 1211.74 L2069.13 1211.74 L2068.54 1211.74 L2067.96 1211.74 L2067.37 1211.74 L2066.78 1211.74 L2066.2 1211.74 L2065.61 1211.74 L2065.02 1211.74 L2064.44 1211.74 L2063.85 1211.74 L2063.27 1211.74 L2062.68 1211.74 L2062.09 1211.74 L2061.51 1211.74 L2060.92 1211.74 L2060.33 1211.74 L2059.75 1211.74 L2059.16 1211.74 L2058.57 1211.74 L2057.99 1211.74 L2057.4 1211.74 L2056.81 1211.74 L2056.23 1211.74 L2055.64 1211.74 L2055.06 1211.74 L2054.47 1211.74 L2053.88 1211.74 L2053.3 1211.74 L2052.71 1211.74 L2052.12 1211.74 L2051.54 1211.74 L2050.95 1211.74 L2050.36 1211.74 L2049.78 1211.74 L2049.19 1211.74 L2048.6 1211.74 L2048.02 1211.74 L2047.43 1211.74 L2046.85 1211.74 L2046.26 1211.74 L2045.67 1211.74 L2045.09 1211.74 L2044.5 1211.74 L2043.91 1211.74 L2043.33 1211.74 L2042.74 1211.74 L2042.15 1211.74 L2041.57 1211.74 L2040.98 1211.74 L2040.4 1211.74 L2039.81 1211.74 L2039.22 1211.74 L2038.64 1211.74 L2038.05 1211.74 L2037.46 1211.74 L2036.88 1211.74 L2036.29 1211.74 L2035.7 1211.74 L2035.12 1211.74 L2034.53 1211.74 L2033.94 1211.74 L2033.36 1211.74 L2032.77 1211.74 L2032.19 1211.74 L2031.6 1211.74 L2031.01 1211.74 L2030.43 1211.74 L2029.84 1211.74 L2029.25 1211.74 L2028.67 1211.74 L2028.08 1211.74 L2027.49 1211.74 L2026.91 1211.74 L2026.32 1211.74 L2025.73 1211.74 L2025.15 1211.74 L2024.56 1211.74 L2023.98 1211.74 L2023.39 1211.74 L2022.8 1211.74 L2022.22 1211.74 L2021.63 1211.74 L2021.04 1211.74 L2020.46 1211.74 L2019.87 1211.74 L2019.28 1211.74 L2018.7 1211.74 L2018.11 1211.74 L2017.53 1211.74 L2016.94 1211.74 L2016.35 1211.74 L2015.77 1211.74 L2015.18 1211.74 L2014.59 1211.74 L2014.01 1211.74 L2013.42 1211.74 L2012.83 1211.74 L2012.25 1211.74 L2011.66 1211.74 L2011.07 1211.74 L2010.49 1211.74 L2009.9 1211.74 L2009.32 1211.74 L2008.73 1211.74 L2008.14 1211.74 L2007.56 1211.74 L2006.97 1211.74 L2006.38 1211.74 L2005.8 1211.74 L2005.21 1211.74 L2004.62 1211.74 L2004.04 1211.74 L2003.45 1211.74 L2002.86 1211.74 L2002.28 1211.74 L2001.69 1211.74 L2001.11 1211.74 L2000.52 1211.74 L1999.93 1211.74 L1999.35 1211.74 L1998.76 1211.74 L1998.17 1211.74 L1997.59 1211.74 L1997 1211.74 L1996.41 1211.74 L1995.83 1211.74 L1995.24 1211.74 L1994.65 1211.74 L1994.07 1211.74 L1993.48 1211.74 L1992.9 1211.74 L1992.31 1211.74 L1991.72 1211.74 L1991.14 1211.74 L1990.55 1211.74 L1989.96 1211.74 L1989.38 1211.74 L1988.79 1211.74 L1988.2 1211.74 L1987.62 1211.74 L1987.03 1211.74 L1986.45 1211.74 L1985.86 1211.74 L1985.27 1211.74 L1984.69 1211.74 L1984.1 1211.74 L1983.51 1211.74 L1982.93 1211.74 L1982.34 1211.74 L1981.75 1211.74 L1981.17 1211.74 L1980.58 1211.74 L1979.99 1211.74 L1979.41 1211.74 L1978.82 1211.74 L1978.24 1211.74 L1977.65 1211.74 L1977.06 1211.74 L1976.48 1211.74 L1975.89 1211.74 L1975.3 1211.74 L1974.72 1211.74 L1974.13 1211.74 L1973.54 1211.74 L1972.96 1211.74 L1972.37 1211.74 L1971.78 1211.74 L1971.2 1211.74 L1970.61 1211.74 L1970.03 1211.74 L1969.44 1211.74 L1968.85 1211.74 L1968.27 1211.74 L1967.68 1211.74 L1967.09 1211.74 L1966.51 1211.74 L1965.92 1211.74 L1965.33 1211.74 L1964.75 1211.74 L1964.16 1211.74 L1963.58 1211.74 L1962.99 1211.74 L1962.4 1211.74 L1961.82 1211.74 L1961.23 1211.74 L1960.64 1211.74 L1960.06 1211.74 L1959.47 1211.74 L1958.88 1211.74 L1958.3 1211.74 L1957.71 1211.74 L1957.12 1211.74 L1956.54 1211.74 L1955.95 1211.74 L1955.37 1211.74 L1954.78 1211.74 L1954.19 1211.74 L1953.61 1211.74 L1953.02 1211.74 L1952.43 1211.74 L1951.85 1211.74 L1951.26 1211.74 L1950.67 1211.74 L1950.09 1211.74 L1949.5 1211.74 L1948.91 1211.74 L1948.33 1211.74 L1947.74 1211.74 L1947.16 1211.74 L1946.57 1211.74 L1945.98 1211.74 L1945.4 1211.74 L1944.81 1211.74 L1944.22 1211.74 L1943.64 1211.74 L1943.05 1211.74 L1942.46 1211.74 L1941.88 1211.74 L1941.29 1211.74 L1940.71 1211.74 L1940.12 1211.74 L1939.53 1211.74 L1938.95 1211.74 L1938.36 1211.74 L1937.77 1211.74 L1937.19 1211.74 L1936.6 1211.74 L1936.01 1211.74 L1935.43 1211.74 L1934.84 1211.74 L1934.25 1211.74 L1933.67 1211.74 L1933.08 1211.74 L1932.5 1211.74 L1931.91 1211.74 L1931.32 1211.74 L1930.74 1211.74 L1930.15 1211.74 L1929.56 1211.74 L1928.98 1211.74 L1928.39 1211.74 L1927.8 1211.74 L1927.22 1211.74 L1926.63 1211.74 L1926.04 1211.74 L1925.46 1211.74 L1924.87 1211.74 L1924.29 1211.74 L1923.7 1211.74 L1923.11 1211.74 L1922.53 1211.74 L1921.94 1211.74 L1921.35 1211.74 L1920.77 1211.74 L1920.18 1211.74 L1919.59 1211.74 L1919.01 1211.74 L1918.42 1211.74 L1917.83 1211.74 L1917.25 1211.74 L1916.66 1211.74 L1916.08 1211.74 L1915.49 1211.74 L1914.9 1211.74 L1914.32 1211.74 L1913.73 1211.74 L1913.14 1211.74 L1912.56 1211.74 L1911.97 1211.74 L1911.38 1211.74 L1910.8 1211.74 L1910.21 1211.74 L1909.63 1211.74 L1909.04 1211.74 L1908.45 1211.74 L1907.87 1211.74 L1907.28 1211.74 L1906.69 1211.74 L1906.11 1211.74 L1905.52 1211.74 L1904.93 1211.74 L1904.35 1211.74 L1903.76 1211.74 L1903.17 1211.74 L1902.59 1211.74 L1902 1211.74 L1901.42 1211.74 L1900.83 1211.74 L1900.24 1211.74 L1899.66 1211.74 L1899.07 1211.74 L1898.48 1211.74 L1897.9 1211.74 L1897.31 1211.74 L1896.72 1211.74 L1896.14 1211.74 L1895.55 1211.74 L1894.96 1211.74 L1894.38 1211.74 L1893.79 1211.74 L1893.21 1211.74 L1892.62 1211.74 L1892.03 1211.74 L1891.45 1211.74 L1890.86 1211.74 L1890.27 1211.74 L1889.69 1211.74 L1889.1 1211.74 L1888.51 1211.74 L1887.93 1211.74 L1887.34 1211.74 L1886.76 1211.74 L1886.17 1211.74 L1885.58 1211.74 L1885 1211.74 L1884.41 1211.74 L1883.82 1211.74 L1883.24 1211.74 L1882.65 1211.74 L1882.06 1211.74 L1881.48 1211.74 L1880.89 1211.74 L1880.3 1211.74 L1879.72 1211.74 L1879.13 1211.74 L1878.55 1211.74 L1877.96 1211.74 L1877.37 1211.74 L1876.79 1211.74 L1876.2 1211.74 L1875.61 1211.74 L1875.03 1211.74 L1874.44 1211.74 L1873.85 1211.74 L1873.27 1211.74 L1872.68 1211.74 L1872.09 1211.74 L1871.51 1211.74 L1870.92 1211.74 L1870.34 1211.74 L1869.75 1211.74 L1869.16 1211.74 L1868.58 1211.74 L1867.99 1211.74 L1867.4 1211.74 L1866.82 1211.74 L1866.23 1211.74 L1865.64 1211.74 L1865.06 1211.74 L1864.47 1211.74 L1863.88 1211.74 L1863.3 1211.74 L1862.71 1211.74 L1862.13 1211.74 L1861.54 1211.74 L1860.95 1211.74 L1860.37 1211.74 L1859.78 1211.74 L1859.19 1211.74 L1858.61 1211.74 L1858.02 1211.74 L1857.43 1211.74 L1856.85 1211.74 L1856.26 1211.74 L1855.68 1211.74 L1855.09 1211.74 L1854.5 1211.74 L1853.92 1211.74 L1853.33 1211.74 L1852.74 1211.74 L1852.16 1211.74 L1851.57 1211.74 L1850.98 1211.74 L1850.4 1211.74 L1849.81 1211.74 L1849.22 1211.74 L1848.64 1211.74 L1848.05 1211.74 L1847.47 1211.74 L1846.88 1211.74 L1846.29 1211.74 L1845.71 1211.74 L1845.12 1211.74 L1844.53 1211.74 L1843.95 1211.74 L1843.36 1211.74 L1842.77 1211.74 L1842.19 1211.74 L1841.6 1211.74 L1841.01 1211.74 L1840.43 1211.74 L1839.84 1211.74 L1839.26 1211.74 L1838.67 1211.74 L1838.08 1211.74 L1837.5 1211.74 L1836.91 1211.74 L1836.32 1211.74 L1835.74 1211.74 L1835.15 1211.74 L1834.56 1211.74 L1833.98 1211.74 L1833.39 1211.74 L1832.81 1211.74 L1832.22 1211.74 L1831.63 1211.74 L1831.05 1211.74 L1830.46 1211.74 L1829.87 1211.74 L1829.29 1211.74 L1828.7 1211.74 L1828.11 1211.74 L1827.53 1211.74 L1826.94 1211.74 L1826.35 1211.74 L1825.77 1211.74 L1825.18 1211.74 L1824.6 1211.74 L1824.01 1211.74 L1823.42 1211.74 L1822.84 1211.74 L1822.25 1211.74 L1821.66 1211.74 L1821.08 1211.74 L1820.49 1211.74 L1819.9 1211.74 L1819.32 1211.74 L1818.73 1211.74 L1818.14 1211.74 L1817.56 1211.74 L1816.97 1211.74 L1816.39 1211.74 L1815.8 1211.74 L1815.21 1211.74 L1814.63 1211.74 L1814.04 1211.74 L1813.45 1211.74 L1812.87 1211.74 L1812.28 1211.74 L1811.69 1211.74 L1811.11 1211.74 L1810.52 1211.74 L1809.94 1211.74 L1809.35 1211.74 L1808.76 1211.74 L1808.18 1211.74 L1807.59 1211.74 L1807 1211.74 L1806.42 1211.74 L1805.83 1211.74 L1805.24 1211.74 L1804.66 1211.74 L1804.07 1211.74 L1803.48 1211.74 L1802.9 1211.74 L1802.31 1211.74 L1801.73 1211.74 L1801.14 1211.74 L1800.55 1211.74 L1799.97 1211.74 L1799.38 1211.74 L1798.79 1211.74 L1798.21 1211.74 L1797.62 1211.74 L1797.03 1211.74 L1796.45 1211.74 L1795.86 1211.74 L1795.27 1211.74 L1794.69 1211.74 L1794.1 1211.74 L1793.52 1211.74 L1792.93 1211.74 L1792.34 1211.74 L1791.76 1211.74 L1791.17 1211.74 L1790.58 1211.74 L1790 1211.74 L1789.41 1211.74 L1788.82 1211.74 L1788.24 1211.74 L1787.65 1211.74 L1787.06 1211.74 L1786.48 1211.74 L1785.89 1211.74 L1785.31 1211.74 L1784.72 1211.74 L1784.13 1211.74 L1783.55 1211.74 L1782.96 1211.74 L1782.37 1211.74 L1781.79 1211.74 L1781.2 1211.74 L1780.61 1211.74 L1780.03 1211.74 L1779.44 1211.74 L1778.86 1211.74 L1778.27 1211.74 L1777.68 1211.74 L1777.1 1211.74 L1776.51 1211.74 L1775.92 1211.74 L1775.34 1211.74 L1774.75 1211.74 L1774.16 1211.74 L1773.58 1211.74 L1772.99 1211.74 L1772.4 1211.74 L1771.82 1211.74 L1771.23 1211.74 L1770.65 1211.74 L1770.06 1211.74 L1769.47 1211.74 L1768.89 1211.74 L1768.3 1211.74 L1767.71 1211.74 L1767.13 1211.74 L1766.54 1211.74 L1765.95 1211.74 L1765.37 1211.74 L1764.78 1211.74 L1764.19 1211.74 L1763.61 1211.74 L1763.02 1211.74 L1762.44 1211.74 L1761.85 1211.74 L1761.26 1211.74 L1760.68 1211.74 L1760.09 1211.74 L1759.5 1211.74 L1758.92 1211.74 L1758.33 1211.74 L1757.74 1211.74 L1757.16 1211.74 L1756.57 1211.74 L1755.99 1211.74 L1755.4 1211.74 L1754.81 1211.74 L1754.23 1211.74 L1753.64 1211.74 L1753.05 1211.74 L1752.47 1211.74 L1751.88 1211.74 L1751.29 1211.74 L1750.71 1211.74 L1750.12 1211.74 L1749.53 1211.74 L1748.95 1211.74 L1748.36 1211.74 L1747.78 1211.74 L1747.19 1211.74 L1746.6 1211.74 L1746.02 1211.74 L1745.43 1211.74 L1744.84 1211.74 L1744.26 1211.74 L1743.67 1211.74 L1743.08 1211.74 L1742.5 1211.74 L1741.91 1211.74 L1741.32 1211.74 L1740.74 1211.74 L1740.15 1211.74 L1739.57 1211.74 L1738.98 1211.74 L1738.39 1211.74 L1737.81 1211.74 L1737.22 1211.74 L1736.63 1211.74 L1736.05 1211.74 L1735.46 1211.74 L1734.87 1211.74 L1734.29 1211.74 L1733.7 1211.74 L1733.11 1211.74 L1732.53 1211.74 L1731.94 1211.74 L1731.36 1211.74 L1730.77 1211.74 L1730.18 1211.74 L1729.6 1211.74 L1729.01 1211.74 L1728.42 1211.74 L1727.84 1211.74 L1727.25 1211.74 L1726.66 1211.74 L1726.08 1211.74 L1725.49 1211.74 L1724.91 1211.74 L1724.32 1211.74 L1723.73 1211.74 L1723.15 1211.74 L1722.56 1211.74 L1721.97 1211.74 L1721.39 1211.74 L1720.8 1211.74 L1720.21 1211.74 L1719.63 1211.74 L1719.04 1211.74 L1718.45 1211.74 L1717.87 1211.74 L1717.28 1211.74 L1716.7 1211.74 L1716.11 1211.74 L1715.52 1211.74 L1714.94 1211.74 L1714.35 1211.74 L1713.76 1211.74 L1713.18 1211.74 L1712.59 1211.74 L1712 1211.74 L1711.42 1211.74 L1710.83 1211.74 L1710.24 1211.74 L1709.66 1211.74 L1709.07 1211.74 L1708.49 1211.74 L1707.9 1211.74 L1707.31 1211.74 L1706.73 1211.74 L1706.14 1211.74 L1705.55 1211.74 L1704.97 1211.74 L1704.38 1211.74 L1703.79 1211.74 L1703.21 1211.74 L1702.62 1211.74 L1702.04 1211.74 L1701.45 1211.74 L1700.86 1211.74 L1700.28 1211.74 L1699.69 1211.74 L1699.1 1211.74 L1698.52 1211.74 L1697.93 1211.74 L1697.34 1211.74 L1696.76 1211.74 L1696.17 1211.74 L1695.58 1211.74 L1695 1211.74 L1694.41 1211.74 L1693.83 1211.74 L1693.24 1211.74 L1692.65 1211.74 L1692.07 1211.74 L1691.48 1211.74 L1690.89 1211.74 L1690.31 1211.74 L1689.72 1211.74 L1689.13 1211.74 L1688.55 1211.74 L1687.96 1211.74 L1687.37 1211.74 L1686.79 1211.74 L1686.2 1211.74 L1685.62 1211.74 L1685.03 1211.74 L1684.44 1211.74 L1683.86 1211.74 L1683.27 1211.74 L1682.68 1211.74 L1682.1 1211.74 L1681.51 1211.74 L1680.92 1211.74 L1680.34 1211.74 L1679.75 1211.74 L1679.17 1211.74 L1678.58 1211.74 L1677.99 1211.74 L1677.41 1211.74 L1676.82 1211.74 L1676.23 1211.74 L1675.65 1211.74 L1675.06 1211.74 L1674.47 1211.74 L1673.89 1211.74 L1673.3 1211.74 L1672.71 1211.74 L1672.13 1211.74 L1671.54 1211.74 L1670.96 1211.74 L1670.37 1211.74 L1669.78 1211.74 L1669.2 1211.74 L1668.61 1211.74 L1668.02 1211.74 L1667.44 1211.74 L1666.85 1211.74 L1666.26 1211.74 L1665.68 1211.74 L1665.09 1211.74 L1664.5 1211.74 L1663.92 1211.74 L1663.33 1211.74 L1662.75 1211.74 L1662.16 1211.74 L1661.57 1211.74 L1660.99 1211.74 L1660.4 1211.74 L1659.81 1211.74 L1659.23 1211.74 L1658.64 1211.74 L1658.05 1211.74 L1657.47 1211.74 L1656.88 1211.74 L1656.29 1211.74 L1655.71 1211.74 L1655.12 1211.74 L1654.54 1211.74 L1653.95 1211.74 L1653.36 1211.74 L1652.78 1211.74 L1652.19 1211.74 L1651.6 1211.74 L1651.02 1211.74 L1650.43 1211.74 L1649.84 1211.74 L1649.26 1211.74 L1648.67 1211.74 L1648.09 1211.74 L1647.5 1211.74 L1646.91 1211.74 L1646.33 1211.74 L1645.74 1211.74 L1645.15 1211.74 L1644.57 1211.74 L1643.98 1211.74 L1643.39 1211.74 L1642.81 1211.74 L1642.22 1211.74 L1641.63 1211.74 L1641.05 1211.74 L1640.46 1211.74 L1639.88 1211.74 L1639.29 1211.74 L1638.7 1211.74 L1638.12 1211.74 L1637.53 1211.74 L1636.94 1211.74 L1636.36 1211.74 L1635.77 1211.74 L1635.18 1211.74 L1634.6 1211.74 L1634.01 1211.74 L1633.42 1211.74 L1632.84 1211.74 L1632.25 1211.74 L1631.67 1211.74 L1631.08 1211.74 L1630.49 1211.74 L1629.91 1211.74 L1629.32 1211.74 L1628.73 1211.74 L1628.15 1211.74 L1627.56 1211.74 L1626.97 1211.74 L1626.39 1211.74 L1625.8 1211.74 L1625.22 1211.74 L1624.63 1211.74 L1624.04 1211.74 L1623.46 1211.74 L1622.87 1211.74 L1622.28 1211.74 L1621.7 1211.74 L1621.11 1211.74 L1620.52 1211.74 L1619.94 1211.74 L1619.35 1211.74 L1618.76 1211.74 L1618.18 1211.74 L1617.59 1211.74 L1617.01 1211.74 L1616.42 1211.74 L1615.83 1211.74 L1615.25 1211.74 L1614.66 1211.74 L1614.07 1211.74 L1613.49 1211.74 L1612.9 1211.74 L1612.31 1211.74 L1611.73 1211.74 L1611.14 1211.74 L1610.55 1211.74 L1609.97 1211.74 L1609.38 1211.74 L1608.8 1211.74 L1608.21 1211.74 L1607.62 1211.74 L1607.04 1211.74 L1606.45 1211.74 L1605.86 1211.74 L1605.28 1211.74 L1604.69 1211.74 L1604.1 1211.74 L1603.52 1211.74 L1602.93 1211.74 L1602.34 1211.74 L1601.76 1211.74 L1601.17 1211.74 L1600.59 1211.74 L1600 1211.74 L1599.41 1211.74 L1598.83 1211.74 L1598.24 1211.74 L1597.65 1211.74 L1597.07 1211.74 L1596.48 1211.74 L1595.89 1211.74 L1595.31 1211.74 L1594.72 1211.74 L1594.14 1211.74 L1593.55 1211.74 L1592.96 1211.74 L1592.38 1211.74 L1591.79 1211.74 L1591.2 1211.74 L1590.62 1211.74 L1590.03 1211.74 L1589.44 1211.74 L1588.86 1211.74 L1588.27 1211.74 L1587.68 1211.74 L1587.1 1211.74 L1586.51 1211.74 L1585.93 1211.74 L1585.34 1211.74 L1584.75 1211.74 L1584.17 1211.74 L1583.58 1211.74 L1582.99 1211.74 L1582.41 1211.74 L1581.82 1211.74 L1581.23 1211.74 L1580.65 1211.74 L1580.06 1211.74 L1579.47 1211.74 L1578.89 1211.74 L1578.3 1211.74 L1577.72 1211.74 L1577.13 1211.74 L1576.54 1211.74 L1575.96 1211.74 L1575.37 1211.74 L1574.78 1211.74 L1574.2 1211.74 L1573.61 1211.74 L1573.02 1211.74 L1572.44 1211.74 L1571.85 1211.74 L1571.27 1211.74 L1570.68 1211.74 L1570.09 1211.74 L1569.51 1211.74 L1568.92 1211.74 L1568.33 1211.74 L1567.75 1211.74 L1567.16 1211.74 L1566.57 1211.74 L1565.99 1211.74 L1565.4 1211.74 L1564.81 1211.74 L1564.23 1211.74 L1563.64 1211.74 L1563.06 1211.74 L1562.47 1211.74 L1561.88 1211.74 L1561.3 1211.74 L1560.71 1211.74 L1560.12 1211.74 L1559.54 1211.74 L1558.95 1211.74 L1558.36 1211.74 L1557.78 1211.74 L1557.19 1211.74 L1556.6 1211.74 L1556.02 1211.74 L1555.43 1211.74 L1554.85 1211.74 L1554.26 1211.74 L1553.67 1211.74 L1553.09 1211.74 L1552.5 1211.74 L1551.91 1211.74 L1551.33 1211.74 L1550.74 1211.74 L1550.15 1211.74 L1549.57 1211.74 L1548.98 1211.74 L1548.4 1211.74 L1547.81 1211.74 L1547.22 1211.74 L1546.64 1211.74 L1546.05 1211.74 L1545.46 1211.74 L1544.88 1211.74 L1544.29 1211.74 L1543.7 1211.74 L1543.12 1211.74 L1542.53 1211.74 L1541.94 1211.74 L1541.36 1211.74 L1540.77 1211.74 L1540.19 1211.74 L1539.6 1211.74 L1539.01 1211.74 L1538.43 1211.74 L1537.84 1211.74 L1537.25 1211.74 L1536.67 1211.74 L1536.08 1211.74 L1535.49 1211.74 L1534.91 1211.74 L1534.32 1211.74 L1533.73 1211.74 L1533.15 1211.74 L1532.56 1211.74 L1531.98 1211.74 L1531.39 1211.74 L1530.8 1211.74 L1530.22 1211.74 L1529.63 1211.74 L1529.04 1211.74 L1528.46 1211.74 L1527.87 1211.74 L1527.28 1211.74 L1526.7 1211.74 L1526.11 1211.74 L1525.52 1211.74 L1524.94 1211.74 L1524.35 1211.74 L1523.77 1211.74 L1523.18 1211.74 L1522.59 1211.74 L1522.01 1211.74 L1521.42 1211.74 L1520.83 1211.74 L1520.25 1211.74 L1519.66 1211.74 L1519.07 1211.74 L1518.49 1211.74 L1517.9 1211.74 L1517.32 1211.74 L1516.73 1211.74 L1516.14 1211.74 L1515.56 1211.74 L1514.97 1211.74 L1514.38 1211.74 L1513.8 1211.74 L1513.21 1211.74 L1512.62 1211.74 L1512.04 1211.74 L1511.45 1211.74 L1510.86 1211.74 L1510.28 1211.74 L1509.69 1211.74 L1509.11 1211.74 L1508.52 1211.74 L1507.93 1211.74 L1507.35 1211.74 L1506.76 1211.74 L1506.17 1211.74 L1505.59 1211.74 L1505 1211.74 L1504.41 1211.74 L1503.83 1211.74 L1503.24 1211.74 L1502.65 1211.74 L1502.07 1211.74 L1501.48 1211.74 L1500.9 1211.74 L1500.31 1211.74 L1499.72 1211.74 L1499.14 1211.74 L1498.55 1211.74 L1497.96 1211.74 L1497.38 1211.74 L1496.79 1211.74 L1496.2 1211.74 L1495.62 1211.74 L1495.03 1211.74 L1494.45 1211.74 L1493.86 1211.74 L1493.27 1211.74 L1492.69 1211.74 L1492.1 1211.74 L1491.51 1211.74 L1490.93 1211.74 L1490.34 1211.74 L1489.75 1211.74 L1489.17 1211.74 L1488.58 1211.74 L1487.99 1211.74 L1487.41 1211.74 L1486.82 1211.74 L1486.24 1211.74 L1485.65 1211.74 L1485.06 1211.74 L1484.48 1211.74 L1483.89 1211.74 L1483.3 1211.74 L1482.72 1211.74 L1482.13 1211.74 L1481.54 1211.74 L1480.96 1211.74 L1480.37 1211.74 L1479.78 1211.74 L1479.2 1211.74 L1478.61 1211.74 L1478.03 1211.74 L1477.44 1211.74 L1476.85 1211.74 L1476.27 1211.74 L1475.68 1211.74 L1475.09 1211.74 L1474.51 1211.74 L1473.92 1211.74 L1473.33 1211.74 L1472.75 1211.74 L1472.16 1211.74 L1471.57 1211.74 L1470.99 1211.74 L1470.4 1211.74 L1469.82 1211.74 L1469.23 1211.74 L1468.64 1211.74 L1468.06 1211.74 L1467.47 1211.74 L1466.88 1211.74 L1466.3 1211.74 L1465.71 1211.74 L1465.12 1211.74 L1464.54 1211.74 L1463.95 1211.74 L1463.37 1211.74 L1462.78 1211.74 L1462.19 1211.74 L1461.61 1211.74 L1461.02 1211.74 L1460.43 1211.74 L1459.85 1211.74 L1459.26 1211.74 L1458.67 1211.74 L1458.09 1211.74 L1457.5 1211.74 L1456.91 1211.74 L1456.33 1211.74 L1455.74 1211.74 L1455.16 1211.74 L1454.57 1211.74 L1453.98 1211.74 L1453.4 1211.74 L1452.81 1211.74 L1452.22 1211.74 L1451.64 1211.74 L1451.05 1211.74 L1450.46 1211.74 L1449.88 1211.74 L1449.29 1211.74 L1448.7 1211.74 L1448.12 1211.74 L1447.53 1211.74 L1446.95 1211.74 L1446.36 1211.74 L1445.77 1211.74 L1445.19 1211.74 L1444.6 1211.74 L1444.01 1211.74 L1443.43 1211.74 L1442.84 1211.74 L1442.25 1211.74 L1441.67 1211.74 L1441.08 1211.74 L1440.5 1211.74 L1439.91 1211.74 L1439.32 1211.74 L1438.74 1211.74 L1438.15 1211.74 L1437.56 1211.74 L1436.98 1211.74 L1436.39 1211.74 L1435.8 1211.74 L1435.22 1211.74 L1434.63 1211.74 L1434.04 1211.74 L1433.46 1211.74 L1432.87 1211.74 L1432.29 1211.74 L1431.7 1211.74 L1431.11 1211.74 L1430.53 1211.74 L1429.94 1211.74 L1429.35 1211.74 L1428.77 1211.74 L1428.18 1211.74 L1427.59 1211.74 L1427.01 1211.74 L1426.42 1211.74 L1425.83 1211.74 L1425.25 1211.74 L1424.66 1211.74 L1424.08 1211.74 L1423.49 1211.74 L1422.9 1211.74 L1422.32 1211.74 L1421.73 1211.74 L1421.14 1211.74 L1420.56 1211.74 L1419.97 1211.74 L1419.38 1211.74 L1418.8 1211.74 L1418.21 1211.74 L1417.63 1211.74 L1417.04 1211.74 L1416.45 1211.74 L1415.87 1211.74 L1415.28 1211.74 L1414.69 1211.74 L1414.11 1211.74 L1413.52 1211.74 L1412.93 1211.74 L1412.35 1211.74 L1411.76 1211.74 L1411.17 1211.74 L1410.59 1211.74 L1410 1211.74 L1409.42 1211.74 L1408.83 1211.74 L1408.24 1211.74 L1407.66 1211.74 L1407.07 1211.74 L1406.48 1211.74 L1405.9 1211.74 L1405.31 1211.74 L1404.72 1211.74 L1404.14 1211.74 L1403.55 1211.74 L1402.96 1211.74 L1402.38 1211.74 L1401.79 1211.74 L1401.21 1211.74 L1400.62 1211.74 L1400.03 1211.74 L1399.45 1211.74 L1398.86 1211.74 L1398.27 1211.74 L1397.69 1211.74 L1397.1 1211.74 L1396.51 1211.74 L1395.93 1211.74 L1395.34 1211.74 L1394.75 1211.74 L1394.17 1211.74 L1393.58 1211.74 L1393 1211.74 L1392.41 1211.74 L1391.82 1211.74 L1391.24 1211.74 L1390.65 1211.74 L1390.06 1211.74 L1389.48 1211.74 L1388.89 1211.74 L1388.3 1211.74 L1387.72 1211.74 L1387.13 1211.74 L1386.55 1211.74 L1385.96 1211.74 L1385.37 1211.74 L1384.79 1211.74 L1384.2 1211.74 L1383.61 1211.74 L1383.03 1211.74 L1382.44 1211.74 L1381.85 1211.74 L1381.27 1211.74 L1380.68 1211.74 L1380.09 1211.74 L1379.51 1211.74 L1378.92 1211.74 L1378.34 1211.74 L1377.75 1211.74 L1377.16 1211.74 L1376.58 1211.74 L1375.99 1211.74 L1375.4 1211.74 L1374.82 1211.74 L1374.23 1211.74 L1373.64 1211.74 L1373.06 1211.74 L1372.47 1211.74 L1371.88 1211.74 L1371.3 1211.74 L1370.71 1211.74 L1370.13 1211.74 L1369.54 1211.74 L1368.95 1211.74 L1368.37 1211.74 L1367.78 1211.74 L1367.19 1211.74 L1366.61 1211.74 L1366.02 1211.74 L1365.43 1211.74 L1364.85 1211.74 L1364.26 1211.74 L1363.68 1211.74 L1363.09 1211.74 L1362.5 1211.74 L1361.92 1211.74 L1361.33 1211.74 L1360.74 1211.74 L1360.16 1211.74 L1359.57 1211.74 L1358.98 1211.74 L1358.4 1211.74 L1357.81 1211.74 L1357.22 1211.74 L1356.64 1211.74 L1356.05 1211.74 L1355.47 1211.74 L1354.88 1211.74 L1354.29 1211.74 L1353.71 1211.74 L1353.12 1211.74 L1352.53 1211.74 L1351.95 1211.74 L1351.36 1211.74 L1350.77 1211.74 L1350.19 1211.74 L1349.6 1211.74 L1349.01 1211.74 L1348.43 1211.74 L1347.84 1211.74 L1347.26 1211.74 L1346.67 1211.74 L1346.08 1211.74 L1345.5 1211.74 L1344.91 1211.74 L1344.32 1211.74 L1343.74 1211.74 L1343.15 1211.74 L1342.56 1211.74 L1341.98 1211.74 L1341.39 1211.74 L1340.8 1211.74 L1340.22 1211.74 L1339.63 1211.74 L1339.05 1211.74 L1338.46 1211.74 L1337.87 1211.74 L1337.29 1211.74 L1336.7 1211.74 L1336.11 1211.74 L1335.53 1211.74 L1334.94 1211.74 L1334.35 1211.74 L1333.77 1211.74 L1333.18 1211.74 L1332.6 1211.74 L1332.01 1211.74 L1331.42 1211.74 L1330.84 1211.74 L1330.25 1211.74 L1329.66 1211.74 L1329.08 1211.74 L1328.49 1211.74 L1327.9 1211.74 L1327.32 1211.74 L1326.73 1211.74 L1326.14 1211.74 L1325.56 1211.74 L1324.97 1211.74 L1324.39 1211.74 L1323.8 1211.74 L1323.21 1211.74 L1322.63 1211.74 L1322.04 1211.74 L1321.45 1211.74 L1320.87 1211.74 L1320.28 1211.74 L1319.69 1211.74 L1319.11 1211.74 L1318.52 1211.74 L1317.93 1211.74 L1317.35 1211.74 L1316.76 1211.74 L1316.18 1211.74 L1315.59 1211.74 L1315 1211.74 L1314.42 1211.74 L1313.83 1211.74 L1313.24 1211.74 L1312.66 1211.74 L1312.07 1211.74 L1311.48 1211.74 L1310.9 1211.74 L1310.31 1211.74 L1309.73 1211.74 L1309.14 1211.74 L1308.55 1211.74 L1307.97 1211.74 L1307.38 1211.74 L1306.79 1211.74 L1306.21 1211.74 L1305.62 1211.74 L1305.03 1211.74 L1304.45 1211.74 L1303.86 1211.74 L1303.27 1211.74 L1302.69 1211.74 L1302.1 1211.74 L1301.52 1211.74 L1300.93 1211.74 L1300.34 1211.74 L1299.76 1211.74 L1299.17 1211.74 L1298.58 1211.74 L1298 1211.74 L1297.41 1211.74 L1296.82 1211.74 L1296.24 1211.74 L1295.65 1211.74 L1295.06 1211.74 L1294.48 1211.74 L1293.89 1211.74 L1293.31 1211.74 L1292.72 1211.74 L1292.13 1211.74 L1291.55 1211.74 L1290.96 1211.74 L1290.37 1211.74 L1289.79 1211.74 L1289.2 1211.74 L1288.61 1211.74 L1288.03 1211.74 L1287.44 1211.74 L1286.86 1211.74 L1286.27 1211.74 L1285.68 1211.74 L1285.1 1211.74 L1284.51 1211.74 L1283.92 1211.74 L1283.34 1211.74 L1282.75 1211.74 L1282.16 1211.74 L1281.58 1211.74 L1280.99 1211.74 L1280.4 1211.74 L1279.82 1211.74 L1279.23 1211.74 L1278.65 1211.74 L1278.06 1211.74 L1277.47 1211.74 L1276.89 1211.74 L1276.3 1211.74 L1275.71 1211.74 L1275.13 1211.74 L1274.54 1211.74 L1273.95 1211.74 L1273.37 1211.74 L1272.78 1211.74 L1272.19 1211.74 L1271.61 1211.74 L1271.02 1211.74 L1270.44 1211.74 L1269.85 1211.74 L1269.26 1211.74 L1268.68 1211.74 L1268.09 1211.74 L1267.5 1211.74 L1266.92 1211.74 L1266.33 1211.74 L1265.74 1211.74 L1265.16 1211.74 L1264.57 1211.74 L1263.98 1211.74 L1263.4 1211.74 L1262.81 1211.74 L1262.23 1211.74 L1261.64 1211.74 L1261.05 1211.74 L1260.47 1211.74 L1259.88 1211.74 L1259.29 1211.74 L1258.71 1211.74 L1258.12 1211.74 L1257.53 1211.74 L1256.95 1211.74 L1256.36 1211.74 L1255.78 1211.74 L1255.19 1211.74 L1254.6 1211.74 L1254.02 1211.74 L1253.43 1211.74 L1252.84 1211.74 L1252.26 1211.74 L1251.67 1211.74 L1251.08 1211.74 L1250.5 1211.74 L1249.91 1211.74 L1249.32 1211.74 L1248.74 1211.74 L1248.15 1211.74 L1247.57 1211.74 L1246.98 1211.74 L1246.39 1211.74 L1245.81 1211.74 L1245.22 1211.74 L1244.63 1211.74 L1244.05 1211.74 L1243.46 1211.74 L1242.87 1211.74 L1242.29 1211.74 L1241.7 1211.74 L1241.11 1211.74 L1240.53 1211.74 L1239.94 1211.74 L1239.36 1211.74 L1238.77 1211.74 L1238.18 1211.74 L1237.6 1211.74 L1237.01 1211.74 L1236.42 1211.74 L1235.84 1211.74 L1235.25 1211.74 L1234.66 1211.74 L1234.08 1211.74 L1233.49 1211.74 L1232.91 1211.74 L1232.32 1211.74 L1231.73 1211.74 L1231.15 1211.74 L1230.56 1211.74 L1229.97 1211.74 L1229.39 1211.74 L1228.8 1211.74 L1228.21 1211.74 L1227.63 1211.74 L1227.04 1211.74 L1226.45 1211.74 L1225.87 1211.74 L1225.28 1211.74 L1224.7 1211.74 L1224.11 1211.74 L1223.52 1211.74 L1222.94 1211.74 L1222.35 1211.74 L1221.76 1211.74 L1221.18 1211.74 L1220.59 1211.74 L1220 1211.74 L1219.42 1211.74 L1218.83 1211.74 L1218.24 1211.74 L1217.66 1211.74 L1217.07 1211.74 L1216.49 1211.74 L1215.9 1211.74 L1215.31 1211.74 L1214.73 1211.74 L1214.14 1211.74 L1213.55 1211.74 L1212.97 1211.74 L1212.38 1211.74 L1211.79 1211.74 L1211.21 1211.74 L1210.62 1211.74 L1210.03 1211.74 L1209.45 1211.74 L1208.86 1211.74 L1208.28 1211.74 L1207.69 1211.74 L1207.1 1211.74 L1206.52 1211.74 L1205.93 1211.74 L1205.34 1211.74 L1204.76 1211.74 L1204.17 1211.74 L1203.58 1211.74 L1203 1211.74 L1202.41 1211.74 L1201.83 1211.74 L1201.24 1211.74 L1200.65 1211.74 L1200.07 1211.74 L1199.48 1211.74 L1198.89 1211.74 L1198.31 1211.74 L1197.72 1211.74 L1197.13 1211.74 L1196.55 1211.74 L1195.96 1211.74 L1195.37 1211.74 L1194.79 1211.74 L1194.2 1211.74 L1193.62 1211.74 L1193.03 1211.74 L1192.44 1211.74 L1191.86 1211.74 L1191.27 1211.74 L1190.68 1211.74 L1190.1 1211.74 L1189.51 1211.74 L1188.92 1211.74 L1188.34 1211.74 L1187.75 1211.74 L1187.16 1211.74 L1186.58 1211.74 L1185.99 1211.74 L1185.41 1211.74 L1184.82 1211.74 L1184.23 1211.74 L1183.65 1211.74 L1183.06 1211.74 L1182.47 1211.74 L1181.89 1211.74 L1181.3 1211.74 L1180.71 1211.74 L1180.13 1211.74 L1179.54 1211.74 L1178.96 1211.74 L1178.37 1211.74 L1177.78 1211.74 L1177.2 1211.74 L1176.61 1211.74 L1176.02 1211.74 L1175.44 1211.74 L1174.85 1211.74 L1174.26 1211.74 L1173.68 1211.74 L1173.09 1211.74 L1172.5 1211.74 L1171.92 1211.74 L1171.33 1211.74 L1170.75 1211.74 L1170.16 1211.74 L1169.57 1211.74 L1168.99 1211.74 L1168.4 1211.74 L1167.81 1211.74 L1167.23 1211.74 L1166.64 1211.74 L1166.05 1211.74 L1165.47 1211.74 L1164.88 1211.74 L1164.29 1211.74 L1163.71 1211.74 L1163.12 1211.74 L1162.54 1211.74 L1161.95 1211.74 L1161.36 1211.74 L1160.78 1211.74 L1160.19 1211.74 L1159.6 1211.74 L1159.02 1211.74 L1158.43 1211.74 L1157.84 1211.74 L1157.26 1211.74 L1156.67 1211.74 L1156.09 1211.74 L1155.5 1211.74 L1154.91 1211.74 L1154.33 1211.74 L1153.74 1211.74 L1153.15 1211.74 L1152.57 1211.74 L1151.98 1211.74 L1151.39 1211.74 L1150.81 1211.74 L1150.22 1211.74 L1149.63 1211.74 L1149.05 1211.74 L1148.46 1211.74 L1147.88 1211.74 L1147.29 1211.74 L1146.7 1211.74 L1146.12 1211.74 L1145.53 1211.74 L1144.94 1211.74 L1144.36 1211.74 L1143.77 1211.74 L1143.18 1211.74 L1142.6 1211.74 L1142.01 1211.74 L1141.42 1211.74 L1140.84 1211.74 L1140.25 1211.74 L1139.67 1211.74 L1139.08 1211.74 L1138.49 1211.74 L1137.91 1211.74 L1137.32 1211.74 L1136.73 1211.74 L1136.15 1211.74 L1135.56 1211.74 L1134.97 1211.74 L1134.39 1211.74 L1133.8 1211.74 L1133.21 1211.74 L1132.63 1211.74 L1132.04 1211.74 L1131.46 1211.74 L1130.87 1211.74 L1130.28 1211.74 L1129.7 1211.74 L1129.11 1211.74 L1128.52 1211.74 L1127.94 1211.74 L1127.35 1211.74 L1126.76 1211.74 L1126.18 1211.74 L1125.59 1211.74 L1125.01 1211.74 L1124.42 1211.74 L1123.83 1211.74 L1123.25 1211.74 L1122.66 1211.74 L1122.07 1211.74 L1121.49 1211.74 L1120.9 1211.74 L1120.31 1211.74 L1119.73 1211.74 L1119.14 1211.74 L1118.55 1211.74 L1117.97 1211.74 L1117.38 1211.74 L1116.8 1211.74 L1116.21 1211.74 L1115.62 1211.74 L1115.04 1211.74 L1114.45 1211.74 L1113.86 1211.74 L1113.28 1211.74 L1112.69 1211.74 L1112.1 1211.74 L1111.52 1211.74 L1110.93 1211.74 L1110.34 1211.74 L1109.76 1211.74 L1109.17 1211.74 L1108.59 1211.74 L1108 1211.74 L1107.41 1211.74 L1106.83 1211.74 L1106.24 1211.74 L1105.65 1211.74 L1105.07 1211.74 L1104.48 1211.74 L1103.89 1211.74 L1103.31 1211.74 L1102.72 1211.74 L1102.14 1211.74 L1101.55 1211.74 L1100.96 1211.74 L1100.38 1211.74 L1099.79 1211.74 L1099.2 1211.74 L1098.62 1211.74 L1098.03 1211.74 L1097.44 1211.74 L1096.86 1211.74 L1096.27 1211.74 L1095.68 1211.74 L1095.1 1211.74 L1094.51 1211.74 L1093.93 1211.74 L1093.34 1211.74 L1092.75 1211.74 L1092.17 1211.74 L1091.58 1211.74 L1090.99 1211.74 L1090.41 1211.74 L1089.82 1211.74 L1089.23 1211.74 L1088.65 1211.74 L1088.06 1211.74 L1087.47 1211.74 L1086.89 1211.74 L1086.3 1211.74 L1085.72 1211.74 L1085.13 1211.74 L1084.54 1211.74 L1083.96 1211.74 L1083.37 1211.74 L1082.78 1211.74 L1082.2 1211.74 L1081.61 1211.74 L1081.02 1211.74 L1080.44 1211.74 L1079.85 1211.74 L1079.26 1211.74 L1078.68 1211.74 L1078.09 1211.74 L1077.51 1211.74 L1076.92 1211.74 L1076.33 1211.74 L1075.75 1211.74 L1075.16 1211.74 L1074.57 1211.74 L1073.99 1211.74 L1073.4 1211.74 L1072.81 1211.74 L1072.23 1211.74 L1071.64 1211.74 L1071.06 1211.74 L1070.47 1211.74 L1069.88 1211.74 L1069.3 1211.74 L1068.71 1211.74 L1068.12 1211.74 L1067.54 1211.74 L1066.95 1211.74 L1066.36 1211.74 L1065.78 1211.74 L1065.19 1211.74 L1064.6 1211.74 L1064.02 1211.74 L1063.43 1211.74 L1062.85 1211.74 L1062.26 1211.74 L1061.67 1211.74 L1061.09 1211.74 L1060.5 1211.74 L1059.91 1211.74 L1059.33 1211.74 L1058.74 1211.74 L1058.15 1211.74 L1057.57 1211.74 L1056.98 1211.74 L1056.39 1211.74 L1055.81 1211.74 L1055.22 1211.74 L1054.64 1211.74 L1054.05 1211.74 L1053.46 1211.74 L1052.88 1211.74 L1052.29 1211.74 L1051.7 1211.74 L1051.12 1211.74 L1050.53 1211.74 L1049.94 1211.74 L1049.36 1211.74 L1048.77 1211.74 L1048.19 1211.74 L1047.6 1211.74 L1047.01 1211.74 L1046.43 1211.74 L1045.84 1211.74 L1045.25 1211.74 L1044.67 1211.74 L1044.08 1211.74 L1043.49 1211.74 L1042.91 1211.74 L1042.32 1211.74 L1041.73 1211.74 L1041.15 1211.74 L1040.56 1211.74 L1039.98 1211.74 L1039.39 1211.74 L1038.8 1211.74 L1038.22 1211.74 L1037.63 1211.74 L1037.04 1211.74 L1036.46 1211.74 L1035.87 1211.74 L1035.28 1211.74 L1034.7 1211.74 L1034.11 1211.74 L1033.52 1211.74 L1032.94 1211.74 L1032.35 1211.74 L1031.77 1211.74 L1031.18 1211.74 L1030.59 1211.74 L1030.01 1211.74 L1029.42 1211.74 L1028.83 1211.74 L1028.25 1211.74 L1027.66 1211.74 L1027.07 1211.74 L1026.49 1211.74 L1025.9 1211.74 L1025.32 1211.74 L1024.73 1211.74 L1024.14 1211.74 L1023.56 1211.74 L1022.97 1211.74 L1022.38 1211.74 L1021.8 1211.74 L1021.21 1211.74 L1020.62 1211.74 L1020.04 1211.74 L1019.45 1211.74 L1018.86 1211.74 L1018.28 1211.74 L1017.69 1211.74 L1017.11 1211.74 L1016.52 1211.74 L1015.93 1211.74 L1015.35 1211.74 L1014.76 1211.74 L1014.17 1211.74 L1013.59 1211.74 L1013 1211.74 L1012.41 1211.74 L1011.83 1211.74 L1011.24 1211.74 L1010.65 1211.74 L1010.07 1211.74 L1009.48 1211.74 L1008.9 1211.74 L1008.31 1211.74 L1007.72 1211.74 L1007.14 1211.74 L1006.55 1211.74 L1005.96 1211.74 L1005.38 1211.74 L1004.79 1211.74 L1004.2 1211.74 L1003.62 1211.74 L1003.03 1211.74 L1002.44 1211.74 L1001.86 1211.74 L1001.27 1211.74 L1000.69 1211.74 L1000.1 1211.74 L999.513 1211.74 L998.926 1211.74 L998.34 1211.74 L997.754 1211.74 L997.167 1211.74 L996.581 1211.74 L995.994 1211.74 L995.408 1211.74 L994.822 1211.74 L994.235 1211.74 L993.649 1211.74 L993.062 1211.74 L992.476 1211.74 L991.889 1211.74 L991.303 1211.74 L990.717 1211.74 L990.13 1211.74 L989.544 1211.74 L988.957 1211.74 L988.371 1211.74 L987.785 1211.74 L987.198 1211.74 L986.612 1211.74 L986.025 1211.74  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.84 986.612,1211.84 987.198,1211.84 987.785,1211.84 988.371,1211.84 988.957,1211.84 989.544,1211.84 990.13,1211.84 990.717,1211.84 991.303,1211.84 991.889,1211.84 992.476,1211.84 993.062,1211.84 993.649,1211.84 994.235,1211.84 994.822,1211.84 995.408,1211.84 995.994,1211.84 996.581,1211.84 997.167,1211.84 997.754,1211.84 998.34,1211.84 998.926,1211.84 999.513,1211.84 1000.1,1211.84 1000.69,1211.84 1001.27,1211.84 1001.86,1211.84 1002.44,1211.84 1003.03,1211.84 1003.62,1211.84 1004.2,1211.84 1004.79,1211.84 1005.38,1211.84 1005.96,1211.84 1006.55,1211.84 1007.14,1211.84 1007.72,1211.84 1008.31,1211.84 1008.9,1211.84 1009.48,1211.84 1010.07,1211.84 1010.65,1211.84 1011.24,1211.84 1011.83,1211.84 1012.41,1211.84 1013,1211.84 1013.59,1211.84 1014.17,1211.84 1014.76,1211.84 1015.35,1211.84 1015.93,1211.84 1016.52,1211.84 1017.11,1211.84 1017.69,1211.84 1018.28,1211.84 1018.86,1211.84 1019.45,1211.84 1020.04,1211.84 1020.62,1211.84 1021.21,1211.84 1021.8,1211.84 1022.38,1211.84 1022.97,1211.84 1023.56,1211.84 1024.14,1211.84 1024.73,1211.84 1025.32,1211.84 1025.9,1211.84 1026.49,1211.84 1027.07,1211.84 1027.66,1211.84 1028.25,1211.84 1028.83,1211.84 1029.42,1211.84 1030.01,1211.84 1030.59,1211.84 1031.18,1211.84 1031.77,1211.84 1032.35,1211.84 1032.94,1211.84 1033.52,1211.84 1034.11,1211.84 1034.7,1211.84 1035.28,1211.84 1035.87,1211.84 1036.46,1211.84 1037.04,1211.84 1037.63,1211.84 1038.22,1211.84 1038.8,1211.84 1039.39,1211.84 1039.98,1211.84 1040.56,1211.84 1041.15,1211.84 1041.73,1211.84 1042.32,1211.84 1042.91,1211.84 1043.49,1211.84 1044.08,1211.84 1044.67,1211.84 1045.25,1211.84 1045.84,1211.84 1046.43,1211.84 1047.01,1211.84 1047.6,1211.84 1048.19,1211.84 1048.77,1211.84 1049.36,1211.84 1049.94,1211.84 1050.53,1211.84 1051.12,1211.84 1051.7,1211.84 1052.29,1211.84 1052.88,1211.84 1053.46,1211.84 1054.05,1211.84 1054.64,1211.84 1055.22,1211.84 1055.81,1211.84 1056.39,1211.84 1056.98,1211.84 1057.57,1211.84 1058.15,1211.84 1058.74,1211.84 1059.33,1211.84 1059.91,1211.84 1060.5,1211.84 1061.09,1211.84 1061.67,1211.84 1062.26,1211.84 1062.85,1211.84 1063.43,1211.84 1064.02,1211.84 1064.6,1211.84 1065.19,1211.84 1065.78,1211.84 1066.36,1211.84 1066.95,1211.84 1067.54,1211.84 1068.12,1211.84 1068.71,1211.84 1069.3,1211.84 1069.88,1211.84 1070.47,1211.84 1071.06,1211.84 1071.64,1211.84 1072.23,1211.84 1072.81,1211.84 1073.4,1211.84 1073.99,1211.84 1074.57,1211.84 1075.16,1211.84 1075.75,1211.84 1076.33,1211.84 1076.92,1211.84 1077.51,1211.84 1078.09,1211.84 1078.68,1211.84 1079.26,1211.84 1079.85,1211.84 1080.44,1211.84 1081.02,1211.84 1081.61,1211.84 1082.2,1211.84 1082.78,1211.84 1083.37,1211.84 1083.96,1211.84 1084.54,1211.84 1085.13,1211.84 1085.72,1211.84 1086.3,1211.84 1086.89,1211.84 1087.47,1211.84 1088.06,1211.84 1088.65,1211.84 1089.23,1211.84 1089.82,1211.84 1090.41,1211.84 1090.99,1211.84 1091.58,1211.84 1092.17,1211.84 1092.75,1211.84 1093.34,1211.84 1093.93,1211.84 1094.51,1211.84 1095.1,1211.84 1095.68,1211.84 1096.27,1211.84 1096.86,1211.84 1097.44,1211.84 1098.03,1211.84 1098.62,1211.84 1099.2,1211.84 1099.79,1211.84 1100.38,1211.84 1100.96,1211.84 1101.55,1211.84 1102.14,1211.84 1102.72,1211.84 1103.31,1211.84 1103.89,1211.84 1104.48,1211.84 1105.07,1211.84 1105.65,1211.84 1106.24,1211.84 1106.83,1211.84 1107.41,1211.84 1108,1211.84 1108.59,1211.84 1109.17,1211.84 1109.76,1211.84 1110.34,1211.84 1110.93,1211.84 1111.52,1211.84 1112.1,1211.84 1112.69,1211.84 1113.28,1211.84 1113.86,1211.84 1114.45,1211.84 1115.04,1211.84 1115.62,1211.84 1116.21,1211.84 1116.8,1211.84 1117.38,1211.84 1117.97,1211.84 1118.55,1211.84 1119.14,1211.84 1119.73,1211.84 1120.31,1211.84 1120.9,1211.84 1121.49,1211.84 1122.07,1211.84 1122.66,1211.84 1123.25,1211.84 1123.83,1211.84 1124.42,1211.84 1125.01,1211.84 1125.59,1211.84 1126.18,1211.84 1126.76,1211.84 1127.35,1211.84 1127.94,1211.84 1128.52,1211.84 1129.11,1211.84 1129.7,1211.84 1130.28,1211.84 1130.87,1211.84 1131.46,1211.84 1132.04,1211.84 1132.63,1211.84 1133.21,1211.84 1133.8,1211.84 1134.39,1211.84 1134.97,1211.84 1135.56,1211.84 1136.15,1211.84 1136.73,1211.84 1137.32,1211.84 1137.91,1211.84 1138.49,1211.84 1139.08,1211.84 1139.67,1211.84 1140.25,1211.84 1140.84,1211.84 1141.42,1211.84 1142.01,1211.84 1142.6,1211.84 1143.18,1211.84 1143.77,1211.84 1144.36,1211.84 1144.94,1211.84 1145.53,1211.84 1146.12,1211.84 1146.7,1211.84 1147.29,1211.84 1147.88,1211.84 1148.46,1211.84 1149.05,1211.84 1149.63,1211.84 1150.22,1211.84 1150.81,1211.84 1151.39,1211.84 1151.98,1211.84 1152.57,1211.84 1153.15,1211.84 1153.74,1211.84 1154.33,1211.84 1154.91,1211.84 1155.5,1211.84 1156.09,1211.84 1156.67,1211.84 1157.26,1211.84 1157.84,1211.84 1158.43,1211.84 1159.02,1211.84 1159.6,1211.84 1160.19,1211.84 1160.78,1211.84 1161.36,1211.84 1161.95,1211.84 1162.54,1211.84 1163.12,1211.84 1163.71,1211.84 1164.29,1211.84 1164.88,1211.84 1165.47,1211.84 1166.05,1211.84 1166.64,1211.84 1167.23,1211.84 1167.81,1211.84 1168.4,1211.84 1168.99,1211.84 1169.57,1211.84 1170.16,1211.84 1170.75,1211.84 1171.33,1211.84 1171.92,1211.84 1172.5,1211.84 1173.09,1211.84 1173.68,1211.84 1174.26,1211.84 1174.85,1211.84 1175.44,1211.84 1176.02,1211.84 1176.61,1211.84 1177.2,1211.84 1177.78,1211.84 1178.37,1211.84 1178.96,1211.84 1179.54,1211.84 1180.13,1211.84 1180.71,1211.84 1181.3,1211.84 1181.89,1211.84 1182.47,1211.84 1183.06,1211.84 1183.65,1211.84 1184.23,1211.84 1184.82,1211.84 1185.41,1211.84 1185.99,1211.84 1186.58,1211.84 1187.16,1211.84 1187.75,1211.84 1188.34,1211.84 1188.92,1211.84 1189.51,1211.84 1190.1,1211.84 1190.68,1211.84 1191.27,1211.84 1191.86,1211.84 1192.44,1211.84 1193.03,1211.84 1193.62,1211.84 1194.2,1211.84 1194.79,1211.84 1195.37,1211.84 1195.96,1211.84 1196.55,1211.84 1197.13,1211.84 1197.72,1211.84 1198.31,1211.84 1198.89,1211.84 1199.48,1211.84 1200.07,1211.84 1200.65,1211.84 1201.24,1211.84 1201.83,1211.84 1202.41,1211.84 1203,1211.84 1203.58,1211.84 1204.17,1211.84 1204.76,1211.84 1205.34,1211.84 1205.93,1211.84 1206.52,1211.84 1207.1,1211.84 1207.69,1211.84 1208.28,1211.84 1208.86,1211.84 1209.45,1211.84 1210.03,1211.84 1210.62,1211.84 1211.21,1211.84 1211.79,1211.84 1212.38,1211.84 1212.97,1211.84 1213.55,1211.84 1214.14,1211.84 1214.73,1211.84 1215.31,1211.84 1215.9,1211.84 1216.49,1211.84 1217.07,1211.84 1217.66,1211.84 1218.24,1211.84 1218.83,1211.84 1219.42,1211.84 1220,1211.84 1220.59,1211.84 1221.18,1211.84 1221.76,1211.84 1222.35,1211.84 1222.94,1211.84 1223.52,1211.84 1224.11,1211.84 1224.7,1211.84 1225.28,1211.84 1225.87,1211.84 1226.45,1211.84 1227.04,1211.84 1227.63,1211.84 1228.21,1211.84 1228.8,1211.84 1229.39,1211.84 1229.97,1211.84 1230.56,1211.84 1231.15,1211.84 1231.73,1211.84 1232.32,1211.84 1232.91,1211.84 1233.49,1211.84 1234.08,1211.84 1234.66,1211.84 1235.25,1211.84 1235.84,1211.84 1236.42,1211.84 1237.01,1211.84 1237.6,1211.84 1238.18,1211.84 1238.77,1211.84 1239.36,1211.84 1239.94,1211.84 1240.53,1211.84 1241.11,1211.84 1241.7,1211.84 1242.29,1211.84 1242.87,1211.84 1243.46,1211.84 1244.05,1211.84 1244.63,1211.84 1245.22,1211.84 1245.81,1211.84 1246.39,1211.84 1246.98,1211.84 1247.57,1211.84 1248.15,1211.84 1248.74,1211.84 1249.32,1211.84 1249.91,1211.84 1250.5,1211.84 1251.08,1211.84 1251.67,1211.84 1252.26,1211.84 1252.84,1211.84 1253.43,1211.84 1254.02,1211.84 1254.6,1211.84 1255.19,1211.84 1255.78,1211.84 1256.36,1211.84 1256.95,1211.84 1257.53,1211.84 1258.12,1211.84 1258.71,1211.84 1259.29,1211.84 1259.88,1211.84 1260.47,1211.84 1261.05,1211.84 1261.64,1211.84 1262.23,1211.84 1262.81,1211.84 1263.4,1211.84 1263.98,1211.84 1264.57,1211.84 1265.16,1211.84 1265.74,1211.84 1266.33,1211.84 1266.92,1211.84 1267.5,1211.84 1268.09,1211.84 1268.68,1211.84 1269.26,1211.84 1269.85,1211.84 1270.44,1211.84 1271.02,1211.84 1271.61,1211.84 1272.19,1211.84 1272.78,1211.84 1273.37,1211.84 1273.95,1211.84 1274.54,1211.84 1275.13,1211.84 1275.71,1211.84 1276.3,1211.84 1276.89,1211.84 1277.47,1211.84 1278.06,1211.84 1278.65,1211.84 1279.23,1211.84 1279.82,1211.84 1280.4,1211.84 1280.99,1211.84 1281.58,1211.84 1282.16,1211.84 1282.75,1211.84 1283.34,1211.84 1283.92,1211.84 1284.51,1211.84 1285.1,1211.84 1285.68,1211.84 1286.27,1211.84 1286.86,1211.84 1287.44,1211.84 1288.03,1211.84 1288.61,1211.84 1289.2,1211.84 1289.79,1211.84 1290.37,1211.84 1290.96,1211.84 1291.55,1211.84 1292.13,1211.84 1292.72,1211.84 1293.31,1211.84 1293.89,1211.84 1294.48,1211.84 1295.06,1211.84 1295.65,1211.84 1296.24,1211.84 1296.82,1211.84 1297.41,1211.84 1298,1211.84 1298.58,1211.84 1299.17,1211.84 1299.76,1211.84 1300.34,1211.84 1300.93,1211.84 1301.52,1211.84 1302.1,1211.84 1302.69,1211.84 1303.27,1211.84 1303.86,1211.84 1304.45,1211.84 1305.03,1211.84 1305.62,1211.84 1306.21,1211.84 1306.79,1211.84 1307.38,1211.84 1307.97,1211.84 1308.55,1211.84 1309.14,1211.84 1309.73,1211.84 1310.31,1211.84 1310.9,1211.84 1311.48,1211.84 1312.07,1211.84 1312.66,1211.84 1313.24,1211.84 1313.83,1211.84 1314.42,1211.84 1315,1211.84 1315.59,1211.84 1316.18,1211.84 1316.76,1211.84 1317.35,1211.84 1317.93,1211.84 1318.52,1211.84 1319.11,1211.84 1319.69,1211.84 1320.28,1211.84 1320.87,1211.84 1321.45,1211.84 1322.04,1211.84 1322.63,1211.84 1323.21,1211.84 1323.8,1211.84 1324.39,1211.84 1324.97,1211.84 1325.56,1211.84 1326.14,1211.84 1326.73,1211.84 1327.32,1211.84 1327.9,1211.84 1328.49,1211.84 1329.08,1211.84 1329.66,1211.84 1330.25,1211.84 1330.84,1211.84 1331.42,1211.84 1332.01,1211.84 1332.6,1211.84 1333.18,1211.84 1333.77,1211.84 1334.35,1211.84 1334.94,1211.84 1335.53,1211.84 1336.11,1211.84 1336.7,1211.84 1337.29,1211.84 1337.87,1211.84 1338.46,1211.84 1339.05,1211.84 1339.63,1211.84 1340.22,1211.84 1340.8,1211.84 1341.39,1211.84 1341.98,1211.84 1342.56,1211.84 1343.15,1211.84 1343.74,1211.84 1344.32,1211.84 1344.91,1211.84 1345.5,1211.84 1346.08,1211.84 1346.67,1211.84 1347.26,1211.84 1347.84,1211.84 1348.43,1211.84 1349.01,1211.84 1349.6,1211.84 1350.19,1211.84 1350.77,1211.84 1351.36,1211.84 1351.95,1211.84 1352.53,1211.84 1353.12,1211.84 1353.71,1211.84 1354.29,1211.84 1354.88,1211.84 1355.47,1211.84 1356.05,1211.84 1356.64,1211.84 1357.22,1211.84 1357.81,1211.84 1358.4,1211.84 1358.98,1211.84 1359.57,1211.84 1360.16,1211.84 1360.74,1211.84 1361.33,1211.84 1361.92,1211.84 1362.5,1211.84 1363.09,1211.84 1363.68,1211.84 1364.26,1211.84 1364.85,1211.84 1365.43,1211.84 1366.02,1211.84 1366.61,1211.84 1367.19,1211.84 1367.78,1211.84 1368.37,1211.84 1368.95,1211.84 1369.54,1211.84 1370.13,1211.84 1370.71,1211.84 1371.3,1211.84 1371.88,1211.84 1372.47,1211.84 1373.06,1211.84 1373.64,1211.84 1374.23,1211.84 1374.82,1211.84 1375.4,1211.84 1375.99,1211.84 1376.58,1211.84 1377.16,1211.84 1377.75,1211.84 1378.34,1211.84 1378.92,1211.84 1379.51,1211.84 1380.09,1211.84 1380.68,1211.84 1381.27,1211.84 1381.85,1211.84 1382.44,1211.84 1383.03,1211.84 1383.61,1211.84 1384.2,1211.84 1384.79,1211.84 1385.37,1211.84 1385.96,1211.84 1386.55,1211.84 1387.13,1211.84 1387.72,1211.84 1388.3,1211.84 1388.89,1211.84 1389.48,1211.84 1390.06,1211.84 1390.65,1211.84 1391.24,1211.84 1391.82,1211.84 1392.41,1211.84 1393,1211.84 1393.58,1211.84 1394.17,1211.84 1394.75,1211.84 1395.34,1211.84 1395.93,1211.84 1396.51,1211.84 1397.1,1211.84 1397.69,1211.84 1398.27,1211.84 1398.86,1211.84 1399.45,1211.84 1400.03,1211.84 1400.62,1211.84 1401.21,1211.84 1401.79,1211.84 1402.38,1211.84 1402.96,1211.84 1403.55,1211.84 1404.14,1211.84 1404.72,1211.84 1405.31,1211.84 1405.9,1211.84 1406.48,1211.84 1407.07,1211.84 1407.66,1211.84 1408.24,1211.84 1408.83,1211.84 1409.42,1211.84 1410,1211.84 1410.59,1211.84 1411.17,1211.84 1411.76,1211.84 1412.35,1211.84 1412.93,1211.84 1413.52,1211.84 1414.11,1211.84 1414.69,1211.84 1415.28,1211.84 1415.87,1211.84 1416.45,1211.84 1417.04,1211.84 1417.63,1211.84 1418.21,1211.84 1418.8,1211.84 1419.38,1211.84 1419.97,1211.84 1420.56,1211.84 1421.14,1211.84 1421.73,1211.84 1422.32,1211.84 1422.9,1211.84 1423.49,1211.84 1424.08,1211.84 1424.66,1211.84 1425.25,1211.84 1425.83,1211.84 1426.42,1211.84 1427.01,1211.84 1427.59,1211.84 1428.18,1211.84 1428.77,1211.84 1429.35,1211.84 1429.94,1211.84 1430.53,1211.84 1431.11,1211.84 1431.7,1211.84 1432.29,1211.84 1432.87,1211.84 1433.46,1211.84 1434.04,1211.84 1434.63,1211.84 1435.22,1211.84 1435.8,1211.84 1436.39,1211.84 1436.98,1211.84 1437.56,1211.84 1438.15,1211.84 1438.74,1211.84 1439.32,1211.84 1439.91,1211.84 1440.5,1211.84 1441.08,1211.84 1441.67,1211.84 1442.25,1211.84 1442.84,1211.84 1443.43,1211.84 1444.01,1211.84 1444.6,1211.84 1445.19,1211.84 1445.77,1211.84 1446.36,1211.84 1446.95,1211.84 1447.53,1211.84 1448.12,1211.84 1448.7,1211.84 1449.29,1211.84 1449.88,1211.84 1450.46,1211.84 1451.05,1211.84 1451.64,1211.84 1452.22,1211.84 1452.81,1211.84 1453.4,1211.84 1453.98,1211.84 1454.57,1211.84 1455.16,1211.84 1455.74,1211.84 1456.33,1211.84 1456.91,1211.84 1457.5,1211.84 1458.09,1211.84 1458.67,1211.84 1459.26,1211.84 1459.85,1211.84 1460.43,1211.84 1461.02,1211.84 1461.61,1211.84 1462.19,1211.84 1462.78,1211.84 1463.37,1211.84 1463.95,1211.84 1464.54,1211.84 1465.12,1211.84 1465.71,1211.84 1466.3,1211.84 1466.88,1211.84 1467.47,1211.84 1468.06,1211.84 1468.64,1211.84 1469.23,1211.84 1469.82,1211.84 1470.4,1211.84 1470.99,1211.84 1471.57,1211.84 1472.16,1211.84 1472.75,1211.84 1473.33,1211.84 1473.92,1211.84 1474.51,1211.84 1475.09,1211.84 1475.68,1211.84 1476.27,1211.84 1476.85,1211.84 1477.44,1211.84 1478.03,1211.84 1478.61,1211.84 1479.2,1211.84 1479.78,1211.84 1480.37,1211.84 1480.96,1211.84 1481.54,1211.84 1482.13,1211.84 1482.72,1211.84 1483.3,1211.84 1483.89,1211.84 1484.48,1211.84 1485.06,1211.84 1485.65,1211.84 1486.24,1211.84 1486.82,1211.84 1487.41,1211.84 1487.99,1211.84 1488.58,1211.84 1489.17,1211.84 1489.75,1211.84 1490.34,1211.84 1490.93,1211.84 1491.51,1211.84 1492.1,1211.84 1492.69,1211.84 1493.27,1211.84 1493.86,1211.84 1494.45,1211.84 1495.03,1211.84 1495.62,1211.84 1496.2,1211.84 1496.79,1211.84 1497.38,1211.84 1497.96,1211.84 1498.55,1211.84 1499.14,1211.84 1499.72,1211.84 1500.31,1211.84 1500.9,1211.84 1501.48,1211.84 1502.07,1211.84 1502.65,1211.84 1503.24,1211.84 1503.83,1211.84 1504.41,1211.84 1505,1211.84 1505.59,1211.84 1506.17,1211.84 1506.76,1211.84 1507.35,1211.84 1507.93,1211.84 1508.52,1211.84 1509.11,1211.84 1509.69,1211.84 1510.28,1211.84 1510.86,1211.84 1511.45,1211.84 1512.04,1211.84 1512.62,1211.84 1513.21,1211.84 1513.8,1211.84 1514.38,1211.84 1514.97,1211.84 1515.56,1211.84 1516.14,1211.84 1516.73,1211.84 1517.32,1211.84 1517.9,1211.84 1518.49,1211.84 1519.07,1211.84 1519.66,1211.84 1520.25,1211.84 1520.83,1211.84 1521.42,1211.84 1522.01,1211.84 1522.59,1211.84 1523.18,1211.84 1523.77,1211.84 1524.35,1211.84 1524.94,1211.84 1525.52,1211.84 1526.11,1211.84 1526.7,1211.84 1527.28,1211.84 1527.87,1211.84 1528.46,1211.84 1529.04,1211.84 1529.63,1211.84 1530.22,1211.84 1530.8,1211.84 1531.39,1211.84 1531.98,1211.84 1532.56,1211.84 1533.15,1211.84 1533.73,1211.84 1534.32,1211.84 1534.91,1211.84 1535.49,1211.84 1536.08,1211.84 1536.67,1211.84 1537.25,1211.84 1537.84,1211.84 1538.43,1211.84 1539.01,1211.84 1539.6,1211.84 1540.19,1211.84 1540.77,1211.84 1541.36,1211.84 1541.94,1211.84 1542.53,1211.84 1543.12,1211.84 1543.7,1211.84 1544.29,1211.84 1544.88,1211.84 1545.46,1211.84 1546.05,1211.84 1546.64,1211.84 1547.22,1211.84 1547.81,1211.84 1548.4,1211.84 1548.98,1211.84 1549.57,1211.84 1550.15,1211.84 1550.74,1211.84 1551.33,1211.84 1551.91,1211.84 1552.5,1211.84 1553.09,1211.84 1553.67,1211.84 1554.26,1211.84 1554.85,1211.84 1555.43,1211.84 1556.02,1211.84 1556.6,1211.84 1557.19,1211.84 1557.78,1211.84 1558.36,1211.84 1558.95,1211.84 1559.54,1211.84 1560.12,1211.84 1560.71,1211.84 1561.3,1211.84 1561.88,1211.84 1562.47,1211.84 1563.06,1211.84 1563.64,1211.84 1564.23,1211.84 1564.81,1211.84 1565.4,1211.84 1565.99,1211.84 1566.57,1211.84 1567.16,1211.84 1567.75,1211.84 1568.33,1211.84 1568.92,1211.84 1569.51,1211.84 1570.09,1211.84 1570.68,1211.84 1571.27,1211.84 1571.85,1211.84 1572.44,1211.84 1573.02,1211.84 1573.61,1211.84 1574.2,1211.84 1574.78,1211.84 1575.37,1211.84 1575.96,1211.84 1576.54,1211.84 1577.13,1211.84 1577.72,1211.84 1578.3,1211.84 1578.89,1211.84 1579.47,1211.84 1580.06,1211.84 1580.65,1211.84 1581.23,1211.84 1581.82,1211.84 1582.41,1211.84 1582.99,1211.84 1583.58,1211.84 1584.17,1211.84 1584.75,1211.84 1585.34,1211.84 1585.93,1211.84 1586.51,1211.84 1587.1,1211.84 1587.68,1211.84 1588.27,1211.84 1588.86,1211.84 1589.44,1211.84 1590.03,1211.84 1590.62,1211.84 1591.2,1211.84 1591.79,1211.84 1592.38,1211.84 1592.96,1211.84 1593.55,1211.84 1594.14,1211.84 1594.72,1211.84 1595.31,1211.84 1595.89,1211.84 1596.48,1211.84 1597.07,1211.84 1597.65,1211.84 1598.24,1211.84 1598.83,1211.84 1599.41,1211.84 1600,1211.84 1600.59,1211.84 1601.17,1211.84 1601.76,1211.84 1602.34,1211.84 1602.93,1211.84 1603.52,1211.84 1604.1,1211.84 1604.69,1211.84 1605.28,1211.84 1605.86,1211.84 1606.45,1211.84 1607.04,1211.84 1607.62,1211.84 1608.21,1211.84 1608.8,1211.84 1609.38,1211.84 1609.97,1211.84 1610.55,1211.84 1611.14,1211.84 1611.73,1211.84 1612.31,1211.84 1612.9,1211.84 1613.49,1211.84 1614.07,1211.84 1614.66,1211.84 1615.25,1211.84 1615.83,1211.84 1616.42,1211.84 1617.01,1211.84 1617.59,1211.84 1618.18,1211.84 1618.76,1211.84 1619.35,1211.84 1619.94,1211.84 1620.52,1211.84 1621.11,1211.84 1621.7,1211.84 1622.28,1211.84 1622.87,1211.84 1623.46,1211.84 1624.04,1211.84 1624.63,1211.84 1625.22,1211.84 1625.8,1211.84 1626.39,1211.84 1626.97,1211.84 1627.56,1211.84 1628.15,1211.84 1628.73,1211.84 1629.32,1211.84 1629.91,1211.84 1630.49,1211.84 1631.08,1211.84 1631.67,1211.84 1632.25,1211.84 1632.84,1211.84 1633.42,1211.84 1634.01,1211.84 1634.6,1211.84 1635.18,1211.84 1635.77,1211.84 1636.36,1211.84 1636.94,1211.84 1637.53,1211.84 1638.12,1211.84 1638.7,1211.84 1639.29,1211.84 1639.88,1211.84 1640.46,1211.84 1641.05,1211.84 1641.63,1211.84 1642.22,1211.84 1642.81,1211.84 1643.39,1211.84 1643.98,1211.84 1644.57,1211.84 1645.15,1211.84 1645.74,1211.84 1646.33,1211.84 1646.91,1211.84 1647.5,1211.84 1648.09,1211.84 1648.67,1211.84 1649.26,1211.84 1649.84,1211.84 1650.43,1211.84 1651.02,1211.84 1651.6,1211.84 1652.19,1211.84 1652.78,1211.84 1653.36,1211.84 1653.95,1211.84 1654.54,1211.84 1655.12,1211.84 1655.71,1211.84 1656.29,1211.84 1656.88,1211.84 1657.47,1211.84 1658.05,1211.84 1658.64,1211.84 1659.23,1211.84 1659.81,1211.84 1660.4,1211.84 1660.99,1211.84 1661.57,1211.84 1662.16,1211.84 1662.75,1211.84 1663.33,1211.84 1663.92,1211.84 1664.5,1211.84 1665.09,1211.84 1665.68,1211.84 1666.26,1211.84 1666.85,1211.84 1667.44,1211.84 1668.02,1211.84 1668.61,1211.84 1669.2,1211.84 1669.78,1211.84 1670.37,1211.84 1670.96,1211.84 1671.54,1211.84 1672.13,1211.84 1672.71,1211.84 1673.3,1211.84 1673.89,1211.84 1674.47,1211.84 1675.06,1211.84 1675.65,1211.84 1676.23,1211.84 1676.82,1211.84 1677.41,1211.84 1677.99,1211.84 1678.58,1211.84 1679.17,1211.84 1679.75,1211.84 1680.34,1211.84 1680.92,1211.84 1681.51,1211.84 1682.1,1211.84 1682.68,1211.84 1683.27,1211.84 1683.86,1211.84 1684.44,1211.84 1685.03,1211.84 1685.62,1211.84 1686.2,1211.84 1686.79,1211.84 1687.37,1211.84 1687.96,1211.84 1688.55,1211.84 1689.13,1211.84 1689.72,1211.84 1690.31,1211.84 1690.89,1211.84 1691.48,1211.84 1692.07,1211.84 1692.65,1211.84 1693.24,1211.84 1693.83,1211.84 1694.41,1211.84 1695,1211.84 1695.58,1211.84 1696.17,1211.84 1696.76,1211.84 1697.34,1211.84 1697.93,1211.84 1698.52,1211.84 1699.1,1211.84 1699.69,1211.84 1700.28,1211.84 1700.86,1211.84 1701.45,1211.84 1702.04,1211.84 1702.62,1211.84 1703.21,1211.84 1703.79,1211.84 1704.38,1211.84 1704.97,1211.84 1705.55,1211.84 1706.14,1211.84 1706.73,1211.84 1707.31,1211.84 1707.9,1211.84 1708.49,1211.84 1709.07,1211.84 1709.66,1211.84 1710.24,1211.84 1710.83,1211.84 1711.42,1211.84 1712,1211.84 1712.59,1211.84 1713.18,1211.84 1713.76,1211.84 1714.35,1211.84 1714.94,1211.84 1715.52,1211.84 1716.11,1211.84 1716.7,1211.84 1717.28,1211.84 1717.87,1211.84 1718.45,1211.84 1719.04,1211.84 1719.63,1211.84 1720.21,1211.84 1720.8,1211.84 1721.39,1211.84 1721.97,1211.84 1722.56,1211.84 1723.15,1211.84 1723.73,1211.84 1724.32,1211.84 1724.91,1211.84 1725.49,1211.84 1726.08,1211.84 1726.66,1211.84 1727.25,1211.84 1727.84,1211.84 1728.42,1211.84 1729.01,1211.84 1729.6,1211.84 1730.18,1211.84 1730.77,1211.84 1731.36,1211.84 1731.94,1211.84 1732.53,1211.84 1733.11,1211.84 1733.7,1211.84 1734.29,1211.84 1734.87,1211.84 1735.46,1211.84 1736.05,1211.84 1736.63,1211.84 1737.22,1211.84 1737.81,1211.84 1738.39,1211.84 1738.98,1211.84 1739.57,1211.84 1740.15,1211.84 1740.74,1211.84 1741.32,1211.84 1741.91,1211.84 1742.5,1211.84 1743.08,1211.84 1743.67,1211.84 1744.26,1211.84 1744.84,1211.84 1745.43,1211.84 1746.02,1211.84 1746.6,1211.84 1747.19,1211.84 1747.78,1211.84 1748.36,1211.84 1748.95,1211.84 1749.53,1211.84 1750.12,1211.84 1750.71,1211.84 1751.29,1211.84 1751.88,1211.84 1752.47,1211.84 1753.05,1211.84 1753.64,1211.84 1754.23,1211.84 1754.81,1211.84 1755.4,1211.84 1755.99,1211.84 1756.57,1211.84 1757.16,1211.84 1757.74,1211.84 1758.33,1211.84 1758.92,1211.84 1759.5,1211.84 1760.09,1211.84 1760.68,1211.84 1761.26,1211.84 1761.85,1211.84 1762.44,1211.84 1763.02,1211.84 1763.61,1211.84 1764.19,1211.84 1764.78,1211.84 1765.37,1211.84 1765.95,1211.84 1766.54,1211.84 1767.13,1211.84 1767.71,1211.84 1768.3,1211.84 1768.89,1211.84 1769.47,1211.84 1770.06,1211.84 1770.65,1211.84 1771.23,1211.84 1771.82,1211.84 1772.4,1211.84 1772.99,1211.84 1773.58,1211.84 1774.16,1211.84 1774.75,1211.84 1775.34,1211.84 1775.92,1211.84 1776.51,1211.84 1777.1,1211.84 1777.68,1211.84 1778.27,1211.84 1778.86,1211.84 1779.44,1211.84 1780.03,1211.84 1780.61,1211.84 1781.2,1211.84 1781.79,1211.84 1782.37,1211.84 1782.96,1211.84 1783.55,1211.84 1784.13,1211.84 1784.72,1211.84 1785.31,1211.84 1785.89,1211.84 1786.48,1211.84 1787.06,1211.84 1787.65,1211.84 1788.24,1211.84 1788.82,1211.84 1789.41,1211.84 1790,1211.84 1790.58,1211.84 1791.17,1211.84 1791.76,1211.84 1792.34,1211.84 1792.93,1211.84 1793.52,1211.84 1794.1,1211.84 1794.69,1211.84 1795.27,1211.84 1795.86,1211.84 1796.45,1211.84 1797.03,1211.84 1797.62,1211.84 1798.21,1211.84 1798.79,1211.84 1799.38,1211.84 1799.97,1211.84 1800.55,1211.84 1801.14,1211.84 1801.73,1211.84 1802.31,1211.84 1802.9,1211.84 1803.48,1211.84 1804.07,1211.84 1804.66,1211.84 1805.24,1211.84 1805.83,1211.84 1806.42,1211.84 1807,1211.84 1807.59,1211.84 1808.18,1211.84 1808.76,1211.84 1809.35,1211.84 1809.94,1211.84 1810.52,1211.84 1811.11,1211.84 1811.69,1211.84 1812.28,1211.84 1812.87,1211.84 1813.45,1211.84 1814.04,1211.84 1814.63,1211.84 1815.21,1211.84 1815.8,1211.84 1816.39,1211.84 1816.97,1211.84 1817.56,1211.84 1818.14,1211.84 1818.73,1211.84 1819.32,1211.84 1819.9,1211.84 1820.49,1211.84 1821.08,1211.84 1821.66,1211.84 1822.25,1211.84 1822.84,1211.84 1823.42,1211.84 1824.01,1211.84 1824.6,1211.84 1825.18,1211.84 1825.77,1211.84 1826.35,1211.84 1826.94,1211.84 1827.53,1211.84 1828.11,1211.84 1828.7,1211.84 1829.29,1211.84 1829.87,1211.84 1830.46,1211.84 1831.05,1211.84 1831.63,1211.84 1832.22,1211.84 1832.81,1211.84 1833.39,1211.84 1833.98,1211.84 1834.56,1211.84 1835.15,1211.84 1835.74,1211.84 1836.32,1211.84 1836.91,1211.84 1837.5,1211.84 1838.08,1211.84 1838.67,1211.84 1839.26,1211.84 1839.84,1211.84 1840.43,1211.84 1841.01,1211.84 1841.6,1211.84 1842.19,1211.84 1842.77,1211.84 1843.36,1211.84 1843.95,1211.84 1844.53,1211.84 1845.12,1211.84 1845.71,1211.84 1846.29,1211.84 1846.88,1211.84 1847.47,1211.84 1848.05,1211.84 1848.64,1211.84 1849.22,1211.84 1849.81,1211.84 1850.4,1211.84 1850.98,1211.84 1851.57,1211.84 1852.16,1211.84 1852.74,1211.84 1853.33,1211.84 1853.92,1211.84 1854.5,1211.84 1855.09,1211.84 1855.68,1211.84 1856.26,1211.84 1856.85,1211.84 1857.43,1211.84 1858.02,1211.84 1858.61,1211.84 1859.19,1211.84 1859.78,1211.84 1860.37,1211.84 1860.95,1211.84 1861.54,1211.84 1862.13,1211.84 1862.71,1211.84 1863.3,1211.84 1863.88,1211.84 1864.47,1211.84 1865.06,1211.84 1865.64,1211.84 1866.23,1211.84 1866.82,1211.84 1867.4,1211.84 1867.99,1211.84 1868.58,1211.84 1869.16,1211.84 1869.75,1211.84 1870.34,1211.84 1870.92,1211.84 1871.51,1211.84 1872.09,1211.84 1872.68,1211.84 1873.27,1211.84 1873.85,1211.84 1874.44,1211.84 1875.03,1211.84 1875.61,1211.84 1876.2,1211.84 1876.79,1211.84 1877.37,1211.84 1877.96,1211.84 1878.55,1211.84 1879.13,1211.84 1879.72,1211.84 1880.3,1211.84 1880.89,1211.84 1881.48,1211.84 1882.06,1211.84 1882.65,1211.84 1883.24,1211.84 1883.82,1211.84 1884.41,1211.84 1885,1211.84 1885.58,1211.84 1886.17,1211.84 1886.76,1211.84 1887.34,1211.84 1887.93,1211.84 1888.51,1211.84 1889.1,1211.84 1889.69,1211.84 1890.27,1211.84 1890.86,1211.84 1891.45,1211.84 1892.03,1211.84 1892.62,1211.84 1893.21,1211.84 1893.79,1211.84 1894.38,1211.84 1894.96,1211.84 1895.55,1211.84 1896.14,1211.84 1896.72,1211.84 1897.31,1211.84 1897.9,1211.84 1898.48,1211.84 1899.07,1211.84 1899.66,1211.84 1900.24,1211.84 1900.83,1211.84 1901.42,1211.84 1902,1211.84 1902.59,1211.84 1903.17,1211.84 1903.76,1211.84 1904.35,1211.84 1904.93,1211.84 1905.52,1211.84 1906.11,1211.84 1906.69,1211.84 1907.28,1211.84 1907.87,1211.84 1908.45,1211.84 1909.04,1211.84 1909.63,1211.84 1910.21,1211.84 1910.8,1211.84 1911.38,1211.84 1911.97,1211.84 1912.56,1211.84 1913.14,1211.84 1913.73,1211.84 1914.32,1211.84 1914.9,1211.84 1915.49,1211.84 1916.08,1211.84 1916.66,1211.84 1917.25,1211.84 1917.83,1211.84 1918.42,1211.84 1919.01,1211.84 1919.59,1211.84 1920.18,1211.84 1920.77,1211.84 1921.35,1211.84 1921.94,1211.84 1922.53,1211.84 1923.11,1211.84 1923.7,1211.84 1924.29,1211.84 1924.87,1211.84 1925.46,1211.84 1926.04,1211.84 1926.63,1211.84 1927.22,1211.84 1927.8,1211.84 1928.39,1211.84 1928.98,1211.84 1929.56,1211.84 1930.15,1211.84 1930.74,1211.84 1931.32,1211.84 1931.91,1211.84 1932.5,1211.84 1933.08,1211.84 1933.67,1211.84 1934.25,1211.84 1934.84,1211.84 1935.43,1211.84 1936.01,1211.84 1936.6,1211.84 1937.19,1211.84 1937.77,1211.84 1938.36,1211.84 1938.95,1211.84 1939.53,1211.84 1940.12,1211.84 1940.71,1211.84 1941.29,1211.84 1941.88,1211.84 1942.46,1211.84 1943.05,1211.84 1943.64,1211.84 1944.22,1211.84 1944.81,1211.84 1945.4,1211.84 1945.98,1211.84 1946.57,1211.84 1947.16,1211.84 1947.74,1211.84 1948.33,1211.84 1948.91,1211.84 1949.5,1211.84 1950.09,1211.84 1950.67,1211.84 1951.26,1211.84 1951.85,1211.84 1952.43,1211.84 1953.02,1211.84 1953.61,1211.84 1954.19,1211.84 1954.78,1211.84 1955.37,1211.84 1955.95,1211.84 1956.54,1211.84 1957.12,1211.84 1957.71,1211.84 1958.3,1211.84 1958.88,1211.84 1959.47,1211.84 1960.06,1211.84 1960.64,1211.84 1961.23,1211.84 1961.82,1211.84 1962.4,1211.84 1962.99,1211.84 1963.58,1211.84 1964.16,1211.84 1964.75,1211.84 1965.33,1211.84 1965.92,1211.84 1966.51,1211.84 1967.09,1211.84 1967.68,1211.84 1968.27,1211.84 1968.85,1211.84 1969.44,1211.84 1970.03,1211.84 1970.61,1211.84 1971.2,1211.84 1971.78,1211.84 1972.37,1211.84 1972.96,1211.84 1973.54,1211.84 1974.13,1211.84 1974.72,1211.84 1975.3,1211.84 1975.89,1211.84 1976.48,1211.84 1977.06,1211.84 1977.65,1211.84 1978.24,1211.84 1978.82,1211.84 1979.41,1211.84 1979.99,1211.84 1980.58,1211.84 1981.17,1211.84 1981.75,1211.84 1982.34,1211.84 1982.93,1211.84 1983.51,1211.84 1984.1,1211.84 1984.69,1211.84 1985.27,1211.84 1985.86,1211.84 1986.45,1211.84 1987.03,1211.84 1987.62,1211.84 1988.2,1211.84 1988.79,1211.84 1989.38,1211.84 1989.96,1211.84 1990.55,1211.84 1991.14,1211.84 1991.72,1211.84 1992.31,1211.84 1992.9,1211.84 1993.48,1211.84 1994.07,1211.84 1994.65,1211.84 1995.24,1211.84 1995.83,1211.84 1996.41,1211.84 1997,1211.84 1997.59,1211.84 1998.17,1211.84 1998.76,1211.84 1999.35,1211.84 1999.93,1211.84 2000.52,1211.84 2001.11,1211.84 2001.69,1211.84 2002.28,1211.84 2002.86,1211.84 2003.45,1211.84 2004.04,1211.84 2004.62,1211.84 2005.21,1211.84 2005.8,1211.84 2006.38,1211.84 2006.97,1211.84 2007.56,1211.84 2008.14,1211.84 2008.73,1211.84 2009.32,1211.84 2009.9,1211.84 2010.49,1211.84 2011.07,1211.84 2011.66,1211.84 2012.25,1211.84 2012.83,1211.84 2013.42,1211.84 2014.01,1211.84 2014.59,1211.84 2015.18,1211.84 2015.77,1211.84 2016.35,1211.84 2016.94,1211.84 2017.53,1211.84 2018.11,1211.84 2018.7,1211.84 2019.28,1211.84 2019.87,1211.84 2020.46,1211.84 2021.04,1211.84 2021.63,1211.84 2022.22,1211.84 2022.8,1211.84 2023.39,1211.84 2023.98,1211.84 2024.56,1211.84 2025.15,1211.84 2025.73,1211.84 2026.32,1211.84 2026.91,1211.84 2027.49,1211.84 2028.08,1211.84 2028.67,1211.84 2029.25,1211.84 2029.84,1211.84 2030.43,1211.84 2031.01,1211.84 2031.6,1211.84 2032.19,1211.84 2032.77,1211.84 2033.36,1211.84 2033.94,1211.84 2034.53,1211.84 2035.12,1211.84 2035.7,1211.84 2036.29,1211.84 2036.88,1211.84 2037.46,1211.84 2038.05,1211.84 2038.64,1211.84 2039.22,1211.84 2039.81,1211.84 2040.4,1211.84 2040.98,1211.84 2041.57,1211.84 2042.15,1211.84 2042.74,1211.84 2043.33,1211.84 2043.91,1211.84 2044.5,1211.84 2045.09,1211.84 2045.67,1211.84 2046.26,1211.84 2046.85,1211.84 2047.43,1211.84 2048.02,1211.84 2048.6,1211.84 2049.19,1211.84 2049.78,1211.84 2050.36,1211.84 2050.95,1211.84 2051.54,1211.84 2052.12,1211.84 2052.71,1211.84 2053.3,1211.84 2053.88,1211.84 2054.47,1211.84 2055.06,1211.84 2055.64,1211.84 2056.23,1211.84 2056.81,1211.84 2057.4,1211.84 2057.99,1211.84 2058.57,1211.84 2059.16,1211.84 2059.75,1211.84 2060.33,1211.84 2060.92,1211.84 2061.51,1211.84 2062.09,1211.84 2062.68,1211.84 2063.27,1211.84 2063.85,1211.84 2064.44,1211.84 2065.02,1211.84 2065.61,1211.84 2066.2,1211.84 2066.78,1211.84 2067.37,1211.84 2067.96,1211.84 2068.54,1211.84 2069.13,1211.84 2069.72,1211.84 2070.3,1211.84 2070.89,1211.84 2071.48,1211.84 2072.06,1211.84 2072.65,1211.84 2073.23,1211.84 2073.82,1211.84 2074.41,1211.84 2074.99,1211.84 2075.58,1211.84 2076.17,1211.84 2076.75,1211.84 2077.34,1211.84 2077.93,1211.84 2078.51,1211.84 2079.1,1211.84 2079.68,1211.84 2080.27,1211.84 2080.86,1211.84 2081.44,1211.84 2082.03,1211.84 2082.62,1211.84 2083.2,1211.84 2083.79,1211.84 2084.38,1211.84 2084.96,1211.84 2085.55,1211.84 2086.14,1211.84 2086.72,1211.84 2087.31,1211.84 2087.89,1211.84 2088.48,1211.84 2089.07,1211.84 2089.65,1211.84 2090.24,1211.84 2090.83,1211.84 2091.41,1211.84 2092,1211.84 2092.59,1211.84 2093.17,1211.84 2093.76,1211.84 2094.35,1211.84 2094.93,1211.84 2095.52,1211.84 2096.1,1211.84 2096.69,1211.84 2097.28,1211.84 2097.86,1211.84 2098.45,1211.84 2099.04,1211.84 2099.62,1211.84 2100.21,1211.84 2100.8,1211.84 2101.38,1211.84 2101.97,1211.84 2102.55,1211.84 2103.14,1211.84 2103.73,1211.84 2104.31,1211.84 2104.9,1211.84 2105.49,1211.84 2106.07,1211.84 2106.66,1211.84 2107.25,1211.84 2107.83,1211.84 2108.42,1211.84 2109.01,1211.84 2109.59,1211.84 2110.18,1211.84 2110.76,1211.84 2111.35,1211.84 2111.94,1211.84 2112.52,1211.84 2113.11,1211.84 2113.7,1211.84 2114.28,1211.84 2114.87,1211.84 2115.46,1211.84 2116.04,1211.84 2116.63,1211.84 2117.22,1211.84 2117.8,1211.84 2118.39,1211.84 2118.97,1211.84 2119.56,1211.84 2120.15,1211.84 2120.73,1211.84 2121.32,1211.84 2121.91,1211.84 2122.49,1211.84 2123.08,1211.84 2123.67,1211.84 2124.25,1211.84 2124.84,1211.84 2125.42,1211.84 2126.01,1211.84 2126.6,1211.84 2127.18,1211.84 2127.77,1211.84 2128.36,1211.84 2128.94,1211.84 2129.53,1211.84 2130.12,1211.84 2130.7,1211.84 2131.29,1211.84 2131.88,1211.84 2132.46,1211.84 2133.05,1211.84 2133.63,1211.84 2134.22,1211.84 2134.81,1211.84 2135.39,1211.84 2135.98,1211.84 2136.57,1211.84 2137.15,1211.84 2137.74,1211.84 2138.33,1211.84 2138.91,1211.84 2139.5,1211.84 2140.09,1211.84 2140.67,1211.84 2141.26,1211.84 2141.84,1211.84 2142.43,1211.84 2143.02,1211.84 2143.6,1211.84 2144.19,1211.84 2144.78,1211.84 2145.36,1211.84 2145.95,1211.84 2146.54,1211.84 2147.12,1211.84 2147.71,1211.84 2148.3,1211.84 2148.88,1211.84 2149.47,1211.84 2150.05,1211.84 2150.64,1211.84 2151.23,1211.84 2151.81,1211.84 2152.4,1211.84 2152.99,1211.84 2153.57,1211.84 2154.16,1211.84 2154.75,1211.84 2155.33,1211.84 2155.92,1211.84 2156.5,1211.84 2157.09,1211.84 2157.68,1211.84 2158.26,1211.84 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.61,1196.68 1399.46,899.083 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.58 985.439,1196.68 2158.26,1196.68 2158.26,1226.58 985.439,1226.58 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip453\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip453)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-13125.1 170.503,-13350.8 171.062,-13539 171.621,-13692.4 172.18,-13813.2 172.74,-12736.8 173.299,-12831.9 173.858,-12404.4 174.417,-11594.6 174.977,-11659 175.536,-11705.2 176.095,-11729.3 176.655,-11716.8 177.214,-11696 177.773,-11369.6 178.332,-11046.8 178.892,-10730.5 179.451,-10654.8 180.01,-10345.3 180.569,-10242.4 181.129,-10128.1 181.688,-9812.85 182.247,-9701.34 182.806,-9574.45 183.366,-9438.03 183.925,-9154.98 184.484,-9013.71 185.043,-8604.86 185.603,-8438.97 186.162,-8271.56 186.721,-8091.98 187.28,-7924.9 187.84,-7652.74 188.399,-7305.35 188.958,-7068.59 189.517,-6922.54 190.077,-6778.69 190.636,-6630.58 191.195,-6477.81 191.754,-6331.9 192.314,-6117.08 192.873,-5900.55 193.432,-5752.58 193.991,-5418.63 194.551,-5226.35 195.11,-5034.53 195.669,-4908.61 196.228,-4728.44 196.788,-4552.46 197.347,-4384.93 197.906,-4219.62 198.465,-4010.4 199.025,-3769.58 199.584,-3627.29 200.143,-3443.32 200.702,-3265.59 201.262,-3132.73 201.821,-3006.43 202.38,-2844.8 202.939,-2725.9 203.499,-2647.42 204.058,-2495.53 204.617,-2421.66 205.176,-2345.91 205.736,-2270.91 206.295,-2165.92 206.854,-1997.01 207.413,-1832.81 207.973,-1739.07 208.532,-1645.29 209.091,-1555.62 209.65,-1472.62 210.21,-1333.08 210.769,-1252.9 211.328,-1179.36 211.887,-1102.37 212.447,-1006.87 213.006,-965.2 213.565,-900.757 214.124,-887.454 214.684,-842.238 215.243,-755.649 215.802,-716.648 216.361,-629.609 216.921,-569.991 217.48,-485.752 218.039,-378.065 218.598,-302.687 219.158,-255.871 219.717,-181.609 220.276,-64.9615 220.835,-17.1228 221.395,24.7966 221.954,44.7811 222.513,105.925 223.072,145.295 223.632,187.75 224.191,222.154 224.75,238.729 225.309,234.241 225.869,273.026 226.428,313.83 226.987,389.659 227.546,445.28 228.106,517.705 228.665,529.697 229.224,558.85 229.783,606.929 230.343,671.399 230.902,694.278 231.461,731.077 232.02,752.742 232.58,774.431 233.139,813.079 233.698,812.372 234.257,852.206 234.817,850.103 235.376,831.435 235.935,830.351 236.494,852.211 237.054,889.603 237.613,924.159 238.172,897.693 238.731,896.763 239.291,881.85 239.85,921.171 240.409,920.893 240.968,939.083 241.528,937.663 242.087,921.682 242.646,918.896 243.205,900.574 243.765,920.037 244.324,921.834 244.883,919.266 245.442,919.391 246.002,919.492 246.561,937.383 247.12,938.213 247.679,954.631 248.239,972.147 248.798,1024.39 249.357,1057.79 249.916,1089.37 250.476,1097.91 251.035,1158.9 251.594,1150.55 252.153,1138.24 252.713,1110.85 253.272,1104 253.831,1082.52 254.39,1040.83 254.95,1056.11 255.509,1085.5 256.068,1095.89 256.627,1072.71 257.187,1085.46 257.746,1077.57 258.305,1124.3 258.864,1150.39 259.424,1122.33 259.983,1165.34 260.542,1220.07 261.101,1223.31 261.661,1209.52 262.22,1230.41 262.779,1218.03 263.338,1204.8 263.898,1175.34 264.457,1179.46 265.016,1170.87 265.575,1175.18 266.135,1180.12 266.694,1171.55 267.253,1161.6 267.812,1171.71 268.372,1162.17 268.931,1155.01 269.49,1179.83 270.049,1166.86 270.609,1124.09 271.168,1132.08 271.727,1123.32 272.286,1151.39 272.846,1157 273.405,1146.86 273.964,1172.7 274.523,1145.18 275.083,1151.62 275.642,1142.2 276.201,1146.28 276.76,1118.4 277.32,1147.23 277.879,1170.01 278.438,1157.3 278.997,1181.52 279.557,1205.23 280.116,1241.86 280.675,1224.68 281.234,1210.11 281.794,1213.11 282.353,1249.03 282.912,1233.3 283.471,1234.75 284.031,1240.37 284.59,1193.56 285.149,1181.68 285.708,1118.67 286.268,1075.89 286.827,1070.87 287.386,1068.41 287.945,1095.53 288.505,1092.16 289.064,1099.58 289.623,1075.5 290.182,1088.82 290.742,1082.56 291.301,1039.77 291.86,1052.01 292.419,1061.55 292.979,1055.99 293.538,1050.02 294.097,1025.46 294.656,1001.96 295.216,965.743 295.775,968.462 296.334,968.403 296.893,952.137 297.453,954.174 298.012,955.387 298.571,937.861 299.13,938.312 299.69,970.695 300.249,936.514 300.808,921.309 301.368,936.796 301.927,939.774 302.486,941.185 303.045,1006.82 303.605,1081.99 304.164,1089.74 304.723,1128.88 305.282,1167.08 305.842,1152.95 306.401,1156.43 306.96,1177.56 307.519,1178.14 308.079,1195.91 308.638,1196.42 309.197,1197.07 309.756,1194.9 310.316,1182.52 310.875,1153.8 311.434,1110.59 311.993,1149.94 312.553,1119.16 313.112,1137.27 313.671,1105.98 314.23,1078.5 314.79,1051.55 315.349,1059.29 315.908,1083.94 316.467,1075.7 317.027,1081.19 317.586,1067.91 318.145,1075.59 318.704,1084.48 319.264,1140.9 319.823,1109.6 320.382,1129.38 320.941,1117.11 321.501,1088.58 322.06,1061.34 322.619,1052.19 323.178,1060.44 323.738,1071.38 324.297,1043.16 324.856,1038.1 325.415,1029.39 325.975,1032.5 326.534,1009.09 327.093,1017.97 327.652,995.93 328.212,1003.56 328.771,995.229 329.33,989.781 329.889,986.342 330.449,994.162 331.008,1003.12 331.567,994.14 332.126,984.596 332.686,1011.13 333.245,1022.12 333.804,996.501 334.363,1005.59 334.923,1001.76 335.482,1012.74 336.041,1035.91 336.6,1008.87 337.16,967.316 337.719,963.446 338.278,987.335 338.837,984.723 339.397,962.982 339.956,957.228 340.515,966.86 341.074,978.17 341.634,998.951 342.193,1008.23 342.752,1002.43 343.311,990.937 343.871,1001.62 344.43,994.616 344.989,1003.06 345.548,995.855 346.108,989.672 346.667,959.618 347.226,969.759 347.785,944.54 348.345,903.033 348.904,900.533 349.463,929.47 350.022,958.03 350.582,971.914 351.141,964.931 351.7,960.02 352.259,971.907 352.819,982.759 353.378,971.162 353.937,945.507 354.496,941.151 355.056,921.343 355.615,930.944 356.174,928.642 356.733,905.333 357.293,899.584 357.852,915.656 358.411,911.223 358.97,906.247 359.53,901.186 360.089,895.182 360.648,924.474 361.207,884.995 361.767,882.098 362.326,896.959 362.885,890.025 363.444,853.795 364.004,884.963 364.563,882.619 365.122,911.541 365.681,907.414 366.241,899.259 366.8,871.908 367.359,869.741 367.918,884.193 368.478,896.429 369.037,859.623 369.596,871.925 370.155,853.222 370.715,868.844 371.274,882.86 371.833,845.125 372.392,894.086 372.952,885.905 373.511,911.182 374.07,872.352 374.629,901.185 375.189,867.665 375.748,864.001 376.307,860.272 376.866,856.727 377.426,870.267 377.985,919.719 378.544,915.19 379.103,941.471 379.663,918.852 380.222,912.838 380.781,938.593 381.34,944.317 381.9,935.276 382.459,964.529 383.018,938.925 383.577,897.372 384.137,909.175 384.696,821.433 385.255,820.736 385.814,833.759 386.374,817.98 386.933,834.485 387.492,831.745 388.051,832.913 388.611,831.96 389.17,848.754 389.729,865.157 390.288,860.856 390.848,903.153 391.407,914.778 391.966,890.36 392.525,869.98 393.085,871.325 393.644,883.266 394.203,879.537 394.762,922.48 395.322,883.562 395.881,832.012 396.44,831.218 396.999,829.522 397.559,808.579 398.118,790.918 398.677,840.82 399.236,786.591 399.796,786.496 400.355,769.863 400.914,771.619 401.473,771.019 402.033,755.979 402.592,772.519 403.151,791.873 403.71,793.434 404.27,809.258 404.829,809.557 405.388,840.481 405.947,804.421 406.507,820.373 407.066,831.684 407.625,848.902 408.184,815.964 408.744,815.174 409.303,784.823 409.862,812.927 410.421,826.139 410.981,791.984 411.54,772.256 412.099,793.476 412.658,762.703 413.218,747.449 413.777,765.101 414.336,752.074 414.895,739.256 415.455,756.989 416.014,737.77 416.573,755.49 417.132,774.783 417.692,776.39 418.251,811.242 418.81,808.899 419.369,837.17 419.929,835.712 420.488,880.646 421.047,859.164 421.606,834.995 422.166,849.523 422.725,827.135 423.284,839.183 423.843,822.73 424.403,802.924 424.962,786.488 425.521,754.467 426.08,725.125 426.64,776.026 427.199,760.788 427.758,762.702 428.318,780.525 428.877,777.345 429.436,807.923 429.995,821.493 430.555,818.298 431.114,794.988 431.673,807.783 432.232,775.431 432.792,775.692 433.351,757.612 433.91,754.907 434.469,739.77 435.029,775.328 435.588,773.719 436.147,789.68 436.706,832.252 437.266,814.339 437.825,811.604 438.384,840.491 438.943,785.475 439.503,781.444 440.062,767.271 440.621,737.103 441.18,755.349 441.74,755.982 442.299,788.561 442.858,803.142 443.417,801.176 443.977,800.849 444.536,767.49 445.095,782.512 445.654,798.5 446.214,829.501 446.773,813.414 447.332,811.335 447.891,807.468 448.451,823.134 449.01,819.2 449.569,816.985 450.128,831.985 450.688,843.371 451.247,832.06 451.806,858.294 452.365,850.926 452.925,845.503 453.484,842.602 454.043,820.624 454.602,782.764 455.162,795.503 455.721,794.522 456.28,792.431 456.839,808.906 457.399,806.511 457.958,790.54 458.517,804.526 459.076,786.938 459.636,789.313 460.195,755.549 460.754,770.293 461.313,736.265 461.873,771.458 462.432,783.769 462.991,749.387 463.55,717.376 464.11,701.903 464.669,703.52 465.228,721.106 465.787,722.294 466.347,738.656 466.906,723.04 467.465,677.377 468.024,680.89 468.584,686.66 469.143,739.101 469.702,738.928 470.261,738.257 470.821,741.094 471.38,743.893 471.939,758.451 472.498,778.648 473.058,772.724 473.617,770.469 474.176,749.601 474.735,765.256 475.295,764.314 475.854,763.735 476.413,780.688 476.972,780.428 477.532,780.924 478.091,776.869 478.65,806.064 479.209,836.487 479.769,831.616 480.328,794.951 480.887,791.501 481.446,757.962 482.006,761.327 482.565,729.581 483.124,732.27 483.683,751.259 484.243,749.263 484.802,732.195 485.361,717.53 485.92,735.265 486.48,736.773 487.039,771.617 487.598,801.406 488.157,815.698 488.717,813.943 489.276,792.249 489.835,787.752 490.394,785.607 490.954,784.13 491.513,779.799 492.072,780.189 492.631,810.912 493.191,822.292 493.75,822.93 494.309,834.055 494.868,831.661 495.428,778.036 495.987,778.73 496.546,776.169 497.105,789.961 497.665,802.509 498.224,753.828 498.783,768.936 499.342,764.36 499.902,761.667 500.461,792.413 501.02,824.041 501.579,838.562 502.139,843.05 502.698,836.337 503.257,830.296 503.816,858.42 504.376,834.231 504.935,849.152 505.494,841.294 506.053,817.042 506.613,826.392 507.172,818.014 507.731,797.185 508.29,803.489 508.85,763.485 509.409,777.064 509.968,806.717 510.527,802.368 511.087,798.887 511.646,791.991 512.205,771.127 512.764,796.593 513.324,823.827 513.883,834.998 514.442,846.111 515.001,857.394 515.561,817.581 516.12,762.072 516.679,729.945 517.238,725.81 517.798,725.474 518.357,710.918 518.916,712.878 519.475,697.219 520.035,697.239 520.594,661.9 521.153,677.22 521.712,680.998 522.272,668.842 522.831,637.836 523.39,637.929 523.949,641.729 524.509,677.635 525.068,696.235 525.627,645.712 526.186,634.963 526.746,675.535 527.305,692.334 527.864,680.203 528.423,716.955 528.983,682.733 529.542,700.115 530.101,699.695 530.66,699.871 531.22,688.445 531.779,724.315 532.338,710.171 532.897,694.794 533.457,711.266 534.016,727.893 534.575,712.162 535.134,695.338 535.694,698.975 536.253,701.776 536.812,719.288 537.371,706.089 537.931,709.306 538.49,708.887 539.049,692.678 539.608,728.353 540.168,728.855 540.727,716.155 541.286,718.226 541.845,737.412 542.405,754.512 542.964,739.568 543.523,725.252 544.082,723.694 544.642,724.485 545.201,710.715 545.76,709.761 546.319,728.089 546.879,727.016 547.438,745.326 547.997,761.291 548.556,770.893 549.116,783.078 549.675,800.552 550.234,778.945 550.793,811.108 551.353,835.694 551.912,815.386 552.471,811.034 553.031,789.133 553.59,835.473 554.149,826.295 554.708,839.681 555.268,834.13 555.827,776.369 556.386,775.206 556.945,773.517 557.505,752.521 558.064,749.806 558.623,732.208 559.182,712.621 559.742,696.895 560.301,697.123 560.86,680.843 561.419,635.586 561.979,624.235 562.538,679.913 563.097,662.162 563.656,649.009 564.216,671.042 564.775,676.269 565.334,691.95 565.893,709.551 566.453,710.838 567.012,726.826 567.571,710.227 568.13,693.45 568.69,681.025 569.249,682.205 569.808,679.935 570.367,633.611 570.927,623.338 571.486,612.824 572.045,619.064 572.604,606.528 573.164,629.153 573.723,585.789 574.282,611.505 574.841,566.523 575.401,571.435 575.96,577.171 576.519,619.844 577.078,627.284 577.638,630.842 578.197,635.011 578.756,653.697 579.315,658.142 579.875,662.811 580.434,636.313 580.993,657.73 581.552,627.874 582.112,632.668 582.671,634.028 583.23,636.759 583.789,622.675 584.349,646.116 584.908,650.693 585.467,668.774 586.026,670.441 586.586,689.608 587.145,724.571 587.704,692.272 588.263,711.985 588.823,726.309 589.382,742.278 589.941,738.249 590.5,724.338 591.06,724.194 591.619,739.39 592.178,772.042 592.737,766.732 593.297,748.553 593.856,762.198 594.415,806.877 594.974,816.583 595.534,825.923 596.093,836.593 596.652,844.677 597.211,851.603 597.771,826.336 598.33,819.754 598.889,795.613 599.448,780.156 600.008,775.516 600.567,774.122 601.126,770.891 601.685,766.747 602.245,730.426 602.804,712.919 603.363,701.951 603.922,684.693 604.482,685.74 605.041,686.986 605.6,687.914 606.159,671.594 606.719,657.362 607.278,641.485 607.837,661.632 608.396,648.548 608.956,652.303 609.515,637.76 610.074,625.72 610.633,646.028 611.193,665.304 611.752,669.801 612.311,668.568 612.87,702.169 613.43,685.807 613.989,702.806 614.548,702.001 615.107,686.487 615.667,686.145 616.226,655.609 616.785,691.565 617.344,675.679 617.904,627.431 618.463,647.39 619.022,634.086 619.581,639.232 620.141,626.721 620.7,649.523 621.259,621.604 621.818,659.189 622.378,660.746 622.937,665.233 623.496,665.783 624.055,669.195 624.615,672.379 625.174,658.906 625.733,676.233 626.292,684.142 626.852,719.19 627.411,719.303 627.97,701.853 628.529,687.058 629.089,688.01 629.648,688.992 630.207,722.652 630.766,720.211 631.326,769.909 631.885,766.895 632.444,794.698 633.003,822.654 633.563,865.004 634.122,871.362 634.681,893.729 635.24,835.509 635.8,846.949 636.359,854.085 636.918,832.152 637.477,790.782 638.037,803.709 638.596,766.442 639.155,744.088 639.714,756.4 640.274,767.067 640.833,730.997 641.392,730.567 641.951,709.266 642.511,710.835 643.07,758.378 643.629,753.461 644.188,769.89 644.748,768.099 645.307,784.271 645.866,783.815 646.425,751.35 646.985,748.199 647.544,761.059 648.103,787.893 648.662,733.735 649.222,735.913 649.781,752.715 650.34,752.355 650.899,731.879 651.459,746.444 652.018,711.914 652.577,695.569 653.136,712.049 653.696,712.024 654.255,694.67 654.814,711.748 655.373,696.123 655.933,664.331 656.492,683.709 657.051,685.1 657.61,686.261 658.17,686.055 658.729,683.375 659.288,696.534 659.847,729.08 660.407,697.019 660.966,697.414 661.525,694.991 662.084,679.109 662.644,694.11 663.203,712.398 663.762,712.672 664.321,693.769 664.881,708.507 665.44,676.441 665.999,697.48 666.558,729.669 667.118,727.311 667.677,738.393 668.236,718.903 668.795,700.664 669.355,702.377 669.914,667.984 670.473,654.378 671.032,660.513 671.592,665.33 672.151,668.188 672.71,652.57 673.269,655.708 673.829,672.673 674.388,708.538 674.947,692.978 675.506,705.834 676.066,707.722 676.625,691.595 677.184,692.32 677.743,674.38 678.303,694.064 678.862,693.822 679.421,693.507 679.981,710.973 680.54,693.663 681.099,676.513 681.658,706.054 682.218,675.77 682.777,743.036 683.336,740.791 683.895,738.351 684.455,783.961 685.014,746.071 685.573,779.163 686.132,746.912 686.692,748.447 687.251,745.612 687.81,760.556 688.369,722.657 688.929,753.722 689.488,699.808 690.047,700.465 690.606,717.59 691.166,718.371 691.725,702.988 692.284,685.159 692.843,702.112 693.403,684.435 693.962,681.112 694.521,680.798 695.08,665.162 695.64,647.63 696.199,681.173 696.758,699.454 697.317,744.029 697.877,723.159 698.436,738.905 698.995,750.251 699.554,747.982 700.114,713.696 700.673,710.554 701.232,724.35 701.791,722.773 702.351,723.133 702.91,721.605 703.469,689.023 704.028,706.926 704.588,690.108 705.147,694.848 705.706,696.552 706.265,679.053 706.825,681.216 707.384,666.134 707.943,686.385 708.502,669.31 709.062,689.254 709.621,658.259 710.18,676.725 710.739,663.112 711.299,666.347 711.858,650.372 712.417,649.987 712.976,652.052 713.536,669.182 714.095,654.103 714.654,670.455 715.213,639.306 715.773,656.788 716.332,642.315 716.891,661.268 717.45,675.713 718.01,724.883 718.569,689.959 719.128,692.558 719.687,691.938 720.247,692.289 720.806,691.284 721.365,656.745 721.924,672.201 722.484,688.342 723.043,669.749 723.602,651.554 724.161,687.536 724.721,687.104 725.28,687.418 725.839,670.47 726.398,684.912 726.958,684.388 727.517,669.774 728.076,686.418 728.635,686.777 729.195,687.32 729.754,707.178 730.313,704.301 730.872,735.936 731.432,731.905 731.991,729.204 732.55,743.859 733.109,742.824 733.669,741.799 734.228,770.849 734.787,750.873 735.346,713.757 735.906,729.595 736.465,729.749 737.024,778.383 737.583,755.235 738.143,798.926 738.702,790.433 739.261,802.559 739.82,793.862 740.38,770.59 740.939,766.484 741.498,761.302 742.057,771.106 742.617,794.911 743.176,756.852 743.735,795.986 744.294,723.547 744.854,720.092 745.413,671.422 745.972,676.757 746.531,694.752 747.091,684.088 747.65,651.924 748.209,621.799 748.768,637.866 749.328,622.651 749.887,646.55 750.446,650.109 751.005,654.529 751.565,702.733 752.124,717.841 752.683,683.32 753.242,670.678 753.802,673.146 754.361,655.371 754.92,653.423 755.479,655.621 756.039,656.389 756.598,641.105 757.157,643.487 757.716,645.084 758.276,664.997 758.835,683.667 759.394,701.773 759.953,687.049 760.513,683.579 761.072,671.049 761.631,671.273 762.19,671.658 762.75,641.871 763.309,624.684 763.868,612.321 764.427,652.696 764.987,638.184 765.546,642.038 766.105,661.235 766.664,646.718 767.224,663.98 767.783,669.119 768.342,670.568 768.901,657.08 769.461,623.956 770.02,642.786 770.579,678.823 771.138,665.59 771.698,701.565 772.257,713.394 772.816,730.454 773.375,696.554 773.935,696.288 774.494,699.353 775.053,703.824 775.612,704.423 776.172,716.229 776.731,745.304 777.29,775.499 777.849,784.539 778.409,761.889 778.968,709.651 779.527,672.476 780.086,654.767 780.646,659.087 781.205,677.154 781.764,645.294 782.323,649.699 782.883,623.404 783.442,629.992 784.001,681.428 784.56,702.449 785.12,685.484 785.679,686.298 786.238,685.69 786.797,688.898 787.357,735.726 787.916,734.599 788.475,717.045 789.034,703.966 789.594,688.357 790.153,655.065 790.712,659.02 791.271,672.797 791.831,707.972 792.39,709.382 792.949,709.661 793.508,692.38 794.068,712.69 794.627,711.991 795.186,726.899 795.745,724.091 796.305,672.992 796.864,690.773 797.423,671.027 797.982,655.116 798.542,637.518 799.101,656.503 799.66,674.085 800.219,727.822 800.779,758.676 801.338,754.902 801.897,764.91 802.456,764.176 803.016,756.123 803.575,755.695 804.134,736.437 804.693,718.213 805.253,750.825 805.812,747.487 806.371,760.357 806.931,738.299 807.49,767.34 808.049,776.939 808.608,755.529 809.168,718.468 809.727,719.692 810.286,719.26 810.845,717.103 811.405,735.318 811.964,698.25 812.523,681.282 813.082,682.071 813.642,663.672 814.201,666.601 814.76,669.047 815.319,683.737 815.879,699.622 816.438,686.016 816.997,683.021 817.556,665.378 818.116,650.724 818.675,637.909 819.234,639.995 819.793,643.734 820.353,632.453 820.912,634.81 821.471,653.743 822.03,656.24 822.59,644.686 823.149,664.47 823.708,683.151 824.267,663.399 824.827,667.097 825.386,670.185 825.945,672.464 826.504,672.933 827.064,688.089 827.623,704.605 828.182,703.075 828.741,716.643 829.301,716.215 829.86,696.495 830.419,665.268 830.978,684.275 831.538,685.897 832.097,667.998 832.656,685.366 833.215,686.698 833.775,624.122 834.334,659.386 834.893,629.791 835.452,681.777 836.012,683.397 836.571,685.546 837.13,699.97 837.689,703.44 838.249,717.031 838.808,714.778 839.367,743.278 839.926,760.739 840.486,805.691 841.045,796.637 841.604,757.408 842.163,787.678 842.723,751.738 843.282,731.505 843.841,727.933 844.4,743.286 844.96,725.162 845.519,689.548 846.078,692.618 846.637,691.118 847.197,690.529 847.756,673.058 848.315,685.82 848.874,669.17 849.434,655.555 849.993,657.434 850.552,675.005 851.111,627.523 851.671,668.644 852.23,671.882 852.789,704.585 853.348,684.047 853.908,687.503 854.467,673.635 855.026,697.17 855.585,700.442 856.145,766.196 856.704,760.424 857.263,756.897 857.822,768.333 858.382,748.237 858.941,779.072 859.5,772.474 860.059,768.256 860.619,714.607 861.178,712.796 861.737,709.359 862.296,723.359 862.856,703.457 863.415,702.898 863.974,700.373 864.533,718.343 865.093,733.605 865.652,744.436 866.211,709.407 866.77,694.518 867.33,680.761 867.889,648.286 868.448,637.48 869.007,655.908 869.567,689.452 870.126,673.164 870.685,723.613 871.244,737.966 871.804,735.651 872.363,728.078 872.922,743.064 873.481,740.453 874.041,751.014 874.6,763.082 875.159,788.905 875.718,768.565 876.278,763.711 876.837,778.168 877.396,758.225 877.955,752.961 878.515,747.122 879.074,791.793 879.633,802.871 880.192,779.401 880.752,792.731 881.311,770.123 881.87,748.669 882.429,727.064 882.989,726.772 883.548,721.85 884.107,704.506 884.666,673.685 885.226,673.75 885.785,673.679 886.344,689.844 886.903,684.91 887.463,667.987 888.022,671.157 888.581,671.475 889.14,672.033 889.7,669.689 890.259,686.113 890.818,669.208 891.377,688.69 891.937,670.302 892.496,653.191 893.055,638.393 893.614,608.434 894.174,593.436 894.733,601.095 895.292,622.737 895.851,641.334 896.411,590.919 896.97,600.645 897.529,591.674 898.088,595.967 898.648,614.658 899.207,618.085 899.766,590.432 900.325,581.161 900.885,587.993 901.444,623.649 902.003,626.396 902.562,612.181 903.122,582.486 903.681,572.522 904.24,563.032 904.799,572.832 905.359,562.634 905.918,582.749 906.477,574.411 907.036,581.949 907.596,539.849 908.155,531.723 908.714,556.472 909.273,563.476 909.833,569.228 910.392,572.944 910.951,563.118 911.51,572.897 912.07,578.018 912.629,598.535 913.188,586.762 913.747,590.126 914.307,564.829 914.866,588.04 915.425,627.926 915.984,600.583 916.544,588.295 917.103,594.35 917.662,600.119 918.221,604.358 918.781,612.51 919.34,667.97 919.899,685.76 920.458,688.294 921.018,705.952 921.577,675.032 922.136,646.65 922.695,643.613 923.255,663.461 923.814,679.324 924.373,647.925 924.932,649.16 925.492,667.489 926.051,683.589 926.61,666.254 927.169,669.468 927.729,673.033 928.288,689.981 928.847,705.323 929.406,685.662 929.966,668.62 930.525,652.507 931.084,623.602 931.644,612.277 932.203,618.071 932.762,608.205 933.321,644.9 933.881,677.669 934.44,683.112 934.999,698.46 935.558,682.912 936.118,699.441 936.677,730.802 937.236,762.791 937.795,777.329 938.355,757.536 938.914,741.717 939.473,737.588 940.032,754.067 940.592,703.009 941.151,685.535 941.71,750.711 942.269,716.05 942.829,667.835 943.388,683.892 943.947,684.828 944.506,666.865 945.066,635.668 945.625,638.124 946.184,657.013 946.743,670.975 947.303,673.164 947.862,643.616 948.421,665.608 948.98,699.571 949.54,681.911 950.099,647.999 950.658,651.888 951.217,670.833 951.777,652.963 952.336,652.632 952.895,654.551 953.454,673.118 954.014,659.162 954.573,658.784 955.132,691.233 955.691,656.077 956.251,643.259 956.81,662.736 957.369,681.806 957.928,710.399 958.488,693.855 959.047,693.443 959.606,661.045 960.165,679.33 960.725,694.811 961.284,713.622 961.843,724.175 962.402,724.261 962.962,734.212 963.521,735.696 964.08,750.057 964.639,728.708 965.199,742.136 965.758,753.222 966.317,734.174 966.876,763.495 967.436,792.381 967.995,799.861 968.554,763.241 969.113,757.462 969.673,726.753 970.232,707.433 970.791,688.478 971.35,690.886 971.91,675.152 972.469,659.019 973.028,722.966 973.587,688.763 974.147,702.608 974.706,716.952 975.265,665.836 975.824,676.926 976.384,657.722 976.943,659.908 977.502,662.762 978.061,677.128 978.621,695.725 979.18,730.836 979.739,725.466 980.298,739.135 980.858,767.886 981.417,745.251 981.976,742.75 982.535,740.879 983.095,737.472 983.654,764.086 984.213,760.027 984.772,756.828 985.332,752.619 985.891,732.334 986.45,714.348 987.009,729.172 987.569,711.315 988.128,707.943 988.687,705.102 989.246,735.928 989.806,746.911 990.365,727.382 990.924,739.808 991.483,708.721 992.043,707.266 992.602,704.223 993.161,703.262 993.72,705.062 994.28,720.275 994.839,714.894 995.398,746.358 995.957,741.232 996.517,723.812 997.076,721.366 997.635,722.187 998.194,708.47 998.754,706.93 999.313,704.611 999.872,738.179 1000.43,747.905 1000.99,747.743 1001.55,743.559 1002.11,740.521 1002.67,718.678 1003.23,733.006 1003.79,729.45 1004.35,740.841 1004.91,689.265 1005.46,702.905 1006.02,685.09 1006.58,685.173 1007.14,700.355 1007.7,732.748 1008.26,730.63 1008.82,731.052 1009.38,728.965 1009.94,709.919 1010.5,708.316 1011.06,712.651 1011.62,695.099 1012.18,664.792 1012.73,651.95 1013.29,672.135 1013.85,673.492 1014.41,687.922 1014.97,689.494 1015.53,671.413 1016.09,667.765 1016.65,683.772 1017.21,650.659 1017.77,665.208 1018.33,664.161 1018.89,650.258 1019.45,700.292 1020.01,699.427 1020.56,698.498 1021.12,664.517 1021.68,686.838 1022.24,702.795 1022.8,686.483 1023.36,701.167 1023.92,714.917 1024.48,697.786 1025.04,697.008 1025.6,710.781 1026.16,692.65 1026.72,676.403 1027.28,674.404 1027.83,687.514 1028.39,717.899 1028.95,711.739 1029.51,664.757 1030.07,631.913 1030.63,636.594 1031.19,653.601 1031.75,654.704 1032.31,658.748 1032.87,660.561 1033.43,644.117 1033.99,642.246 1034.55,644.698 1035.1,679.231 1035.66,680.269 1036.22,696.031 1036.78,711.412 1037.34,742.856 1037.9,760.555 1038.46,804.864 1039.02,784.373 1039.58,811.303 1040.14,834.289 1040.7,809.645 1041.26,803.305 1041.82,748.209 1042.38,747.91 1042.93,741.556 1043.49,753.818 1044.05,781.563 1044.61,761.582 1045.17,761.878 1045.73,758.309 1046.29,769.589 1046.85,715.235 1047.41,712.648 1047.97,694.983 1048.53,712.844 1049.09,693.844 1049.65,677.64 1050.2,681.553 1050.76,649.965 1051.32,653.402 1051.88,655.691 1052.44,655.523 1053,621.643 1053.56,610.353 1054.12,646.694 1054.68,647.834 1055.24,618.134 1055.8,670.407 1056.36,692.365 1056.92,677.821 1057.48,673.661 1058.03,672.91 1058.59,674.244 1059.15,677.265 1059.71,677.895 1060.27,699.805 1060.83,699.378 1061.39,683.21 1061.95,731.649 1062.51,744.497 1063.07,757.309 1063.63,771.369 1064.19,766.142 1064.75,811.89 1065.3,838.564 1065.86,785.142 1066.42,734.418 1066.98,733.07 1067.54,728.625 1068.1,727.544 1068.66,745.727 1069.22,729.187 1069.78,724.615 1070.34,741.776 1070.9,737.016 1071.46,736.726 1072.02,733.071 1072.57,744.333 1073.13,754.513 1073.69,731.733 1074.25,726.465 1074.81,741.87 1075.37,723.432 1075.93,689.379 1076.49,640.508 1077.05,625.775 1077.61,629.233 1078.17,616.511 1078.73,618.75 1079.29,702.647 1079.85,703.856 1080.4,718.009 1080.96,733.609 1081.52,712.617 1082.08,761.663 1082.64,774.162 1083.2,781.567 1083.76,793.228 1084.32,821.17 1084.88,784.106 1085.44,760.795 1086,757.489 1086.56,690.217 1087.12,657.939 1087.67,624.826 1088.23,625.475 1088.79,645.038 1089.35,648.319 1089.91,631.817 1090.47,663.156 1091.03,699.726 1091.59,730.288 1092.15,712.769 1092.71,662.173 1093.27,711.787 1093.83,711.388 1094.39,692.047 1094.94,675.933 1095.5,706.106 1096.06,707.738 1096.62,707.515 1097.18,724.376 1097.74,738.844 1098.3,718.267 1098.86,713.802 1099.42,680.33 1099.98,662.177 1100.54,649.469 1101.1,650.051 1101.66,652.945 1102.22,654.8 1102.77,657.84 1103.33,658.277 1103.89,659.806 1104.45,614.727 1105.01,632.781 1105.57,651.322 1106.13,684.662 1106.69,638.635 1107.25,659.157 1107.81,643.079 1108.37,615.701 1108.93,650.379 1109.49,634.435 1110.04,667.302 1110.6,653.339 1111.16,626.819 1111.72,629.042 1112.28,648.35 1112.84,665.406 1113.4,663.688 1113.96,648.583 1114.52,665.691 1115.08,651.535 1115.64,652.75 1116.2,691.465 1116.76,696.371 1117.31,635.976 1117.87,637.712 1118.43,626.567 1118.99,626.598 1119.55,610.138 1120.11,593.606 1120.67,616.597 1121.23,637.852 1121.79,656.278 1122.35,659.724 1122.91,642.054 1123.47,644.133 1124.03,627.928 1124.59,613.867 1125.14,666.015 1125.7,665.774 1126.26,709.899 1126.82,694.503 1127.38,691.21 1127.94,677.124 1128.5,664.418 1129.06,682.76 1129.62,681.497 1130.18,654.949 1130.74,690.922 1131.3,705.211 1131.86,669.396 1132.41,672.844 1132.97,675.238 1133.53,675.606 1134.09,739.96 1134.65,754.151 1135.21,749.975 1135.77,761.777 1136.33,773.883 1136.89,768.657 1137.45,749.271 1138.01,732.836 1138.57,747.035 1139.13,709.333 1139.68,752.823 1140.24,737.048 1140.8,686.685 1141.36,670.989 1141.92,685.965 1142.48,703.991 1143.04,719.251 1143.6,671.094 1144.16,669.632 1144.72,683.84 1145.28,683.047 1145.84,681.596 1146.4,664.39 1146.96,654.297 1147.51,639.934 1148.07,645.746 1148.63,663.351 1149.19,646.288 1149.75,631.868 1150.31,669.82 1150.87,667.445 1151.43,639.061 1151.99,592.603 1152.55,567.582 1153.11,576.565 1153.67,602.415 1154.23,608.313 1154.78,580.822 1155.34,558.834 1155.9,597.611 1156.46,587.566 1157.02,639.436 1157.58,674.778 1158.14,676.137 1158.7,660.751 1159.26,691.63 1159.82,694.137 1160.38,710.725 1160.94,699.423 1161.5,665.981 1162.05,648.903 1162.61,667.662 1163.17,684.661 1163.73,701.753 1164.29,669.827 1164.85,651.502 1165.41,638.802 1165.97,624.676 1166.53,625.643 1167.09,631.829 1167.65,668.49 1168.21,626.315 1168.77,611.206 1169.33,613.11 1169.88,618.355 1170.44,619.315 1171,610.362 1171.56,612.764 1172.12,617.117 1172.68,621.418 1173.24,605.202 1173.8,656.39 1174.36,659.072 1174.92,660.084 1175.48,660.546 1176.04,679.622 1176.6,674.489 1177.15,693.269 1177.71,710.173 1178.27,739.803 1178.83,739.238 1179.39,751.558 1179.95,736.73 1180.51,718.404 1181.07,717.05 1181.63,694.175 1182.19,712.25 1182.75,677.767 1183.31,725.077 1183.87,786.027 1184.43,812.641 1184.98,821.806 1185.54,814.813 1186.1,822.246 1186.66,815.763 1187.22,807.778 1187.78,784.97 1188.34,781.154 1188.9,790.646 1189.46,788.641 1190.02,787.158 1190.58,785.068 1191.14,763.982 1191.7,759.699 1192.25,706.249 1192.81,706.953 1193.37,738.609 1193.93,735.138 1194.49,717.88 1195.05,713.253 1195.61,697.758 1196.17,714.764 1196.73,729.613 1197.29,674.647 1197.85,691.885 1198.41,673.072 1198.97,655.42 1199.52,660.928 1200.08,659.555 1200.64,612.162 1201.2,600.055 1201.76,605.136 1202.32,593.654 1202.88,598.827 1203.44,620.089 1204,636.993 1204.56,654.728 1205.12,673.419 1205.68,659.375 1206.24,678.038 1206.8,693.178 1207.35,692.148 1207.91,675.335 1208.47,679.076 1209.03,690.474 1209.59,673.419 1210.15,708.893 1210.71,688.857 1211.27,673.828 1211.83,658.258 1212.39,642.64 1212.95,633.225 1213.51,669.064 1214.07,686.806 1214.62,714.869 1215.18,694.96 1215.74,711.587 1216.3,722.029 1216.86,730.053 1217.42,727.748 1217.98,678.939 1218.54,714.1 1219.1,712.159 1219.66,709.979 1220.22,691.532 1220.78,719.706 1221.34,747.896 1221.89,727.9 1222.45,723.103 1223.01,707.612 1223.57,724.396 1224.13,675.467 1224.69,725.206 1225.25,693.349 1225.81,726.371 1226.37,721.969 1226.93,714.461 1227.49,713.587 1228.05,713.611 1228.61,696.266 1229.17,747.736 1229.72,747.169 1230.28,743.55 1230.84,741.307 1231.4,723.826 1231.96,707.173 1232.52,673.822 1233.08,640.853 1233.64,642.158 1234.2,647.903 1234.76,631.392 1235.32,650.988 1235.88,681.046 1236.44,662.93 1236.99,651.634 1237.55,670.473 1238.11,671.484 1238.67,656.783 1239.23,636.278 1239.79,673.037 1240.35,676.538 1240.91,679.281 1241.47,678.727 1242.03,648.454 1242.59,654.671 1243.15,657.092 1243.71,640.719 1244.26,660.234 1244.82,662.678 1245.38,665.438 1245.94,651.838 1246.5,669.542 1247.06,658.568 1247.62,660.644 1248.18,676.341 1248.74,675.225 1249.3,645.286 1249.86,646.603 1250.42,647.574 1250.98,635.619 1251.54,635.683 1252.09,671.911 1252.65,671.836 1253.21,656.233 1253.77,658.097 1254.33,644.136 1254.89,631.239 1255.45,630.956 1256.01,648.35 1256.57,667.465 1257.13,681.62 1257.69,683.381 1258.25,696.911 1258.81,727.542 1259.36,690.44 1259.92,708.349 1260.48,677.083 1261.04,693.386 1261.6,675.659 1262.16,675.358 1262.72,710.823 1263.28,709.711 1263.84,678.623 1264.4,661.781 1264.96,644.413 1265.52,664.289 1266.08,682.183 1266.63,648.278 1267.19,683.021 1267.75,668.58 1268.31,733.684 1268.87,712.171 1269.43,709.137 1269.99,739.193 1270.55,753.233 1271.11,765.372 1271.67,745.441 1272.23,729.189 1272.79,730.583 1273.35,757.329 1273.91,786.859 1274.46,780.37 1275.02,742.207 1275.58,788.276 1276.14,783.303 1276.7,796.487 1277.26,806.749 1277.82,804.652 1278.38,817.736 1278.94,762.282 1279.5,740.62 1280.06,718.486 1280.62,716.227 1281.18,679.995 1281.73,660.068 1282.29,658.912 1282.85,641.433 1283.41,674.173 1283.97,690.165 1284.53,671.568 1285.09,721.122 1285.65,749.938 1286.21,730.655 1286.77,691.946 1287.33,691.562 1287.89,721.068 1288.45,701.255 1289,687.008 1289.56,638.159 1290.12,609.231 1290.68,610.918 1291.24,610.146 1291.8,613.159 1292.36,646.767 1292.92,630.283 1293.48,635.745 1294.04,682.272 1294.6,684.493 1295.16,684.629 1295.72,713.626 1296.28,728.549 1296.83,726.966 1297.39,724.564 1297.95,739.108 1298.51,751.917 1299.07,766.043 1299.63,808.888 1300.19,815.856 1300.75,760.153 1301.31,757.645 1301.87,754.905 1302.43,767.811 1302.99,809.394 1303.55,755.46 1304.1,781.742 1304.66,808.492 1305.22,769.543 1305.78,745.754 1306.34,743.652 1306.9,724.33 1307.46,704.894 1308.02,688.73 1308.58,656.566 1309.14,641.369 1309.7,659.461 1310.26,676.282 1310.82,738.004 1311.38,735.512 1311.93,717.521 1312.49,681.46 1313.05,714.714 1313.61,714.708 1314.17,712.554 1314.73,676.983 1315.29,676.131 1315.85,658.167 1316.41,640.874 1316.97,641.095 1317.53,624.341 1318.09,628.401 1318.65,630.049 1319.2,631.425 1319.76,667.271 1320.32,649.007 1320.88,654.868 1321.44,657.137 1322,656.472 1322.56,661.184 1323.12,664.351 1323.68,634.482 1324.24,588.883 1324.8,579.465 1325.36,598.31 1325.92,631.127 1326.47,636.575 1327.03,652.926 1327.59,671.998 1328.15,626.465 1328.71,613.345 1329.27,637.444 1329.83,622.979 1330.39,660.643 1330.95,663.257 1331.51,666.895 1332.07,666.223 1332.63,632.254 1333.19,650.83 1333.75,637.635 1334.3,672.834 1334.86,640.292 1335.42,660.29 1335.98,675.972 1336.54,675.159 1337.1,660.328 1337.66,615.575 1338.22,602.738 1338.78,575.63 1339.34,585.702 1339.9,591.859 1340.46,647.196 1341.02,668.283 1341.57,655.163 1342.13,673.433 1342.69,647.536 1343.25,652.607 1343.81,669.158 1344.37,655.98 1344.93,657.518 1345.49,630.037 1346.05,636.731 1346.61,655.322 1347.17,657.067 1347.73,662.771 1348.29,634.667 1348.84,652.304 1349.4,653.752 1349.96,637.562 1350.52,640.268 1351.08,611.629 1351.64,614.547 1352.2,616.985 1352.76,622.249 1353.32,659.423 1353.88,643.826 1354.44,649.251 1355,701.848 1355.56,705.916 1356.12,702.898 1356.67,688.238 1357.23,736.883 1357.79,770.952 1358.35,754.087 1358.91,749.882 1359.47,751.287 1360.03,729.203 1360.59,727.134 1361.15,741.813 1361.71,707.91 1362.27,738.726 1362.83,753.852 1363.39,751.751 1363.94,781.659 1364.5,761.463 1365.06,771.977 1365.62,800.136 1366.18,812.108 1366.74,822.933 1367.3,861.861 1367.86,819.254 1368.42,843.994 1368.98,772.024 1369.54,749.247 1370.1,781.855 1370.66,776.981 1371.21,752.725 1371.77,762.352 1372.33,759.557 1372.89,722.471 1373.45,720.013 1374.01,715.613 1374.57,715.687 1375.13,715.349 1375.69,729.963 1376.25,711.429 1376.81,721.821 1377.37,770.047 1377.93,751.61 1378.49,766.942 1379.04,747.024 1379.6,742.062 1380.16,689.644 1380.72,676.238 1381.28,658.932 1381.84,661.228 1382.4,647.125 1382.96,651.279 1383.52,651.698 1384.08,652.389 1384.64,624.339 1385.2,657.472 1385.76,659.444 1386.31,642.047 1386.87,647.299 1387.43,664.985 1387.99,650.177 1388.55,655.907 1389.11,675.363 1389.67,693.147 1390.23,693.222 1390.79,727.839 1391.35,740.883 1391.91,786.675 1392.47,779.768 1393.03,790.399 1393.58,797.964 1394.14,786.326 1394.7,811.104 1395.26,799.003 1395.82,778.138 1396.38,776.208 1396.94,773.304 1397.5,786.114 1398.06,798.272 1398.62,822.412 1399.18,814.96 1399.74,855.534 1400.3,842.895 1400.86,815.806 1401.41,853.046 1401.97,829.154 1402.53,820.13 1403.09,779.952 1403.65,691.971 1404.21,643.125 1404.77,640.861 1405.33,677.235 1405.89,641.514 1406.45,608.462 1407.01,594.143 1407.57,612.779 1408.13,618.528 1408.68,606.195 1409.24,609.822 1409.8,581.213 1410.36,554.951 1410.92,580.179 1411.48,571.842 1412.04,560.531 1412.6,615.931 1413.16,651.479 1413.72,651.883 1414.28,618.566 1414.84,605.242 1415.4,590.161 1415.95,559.98 1416.51,531.182 1417.07,556.276 1417.63,581.093 1418.19,585.434 1418.75,609.048 1419.31,594.142 1419.87,582.028 1420.43,537.581 1420.99,575.596 1421.55,550.428 1422.11,507.441 1422.67,533.906 1423.23,544.449 1423.78,582.656 1424.34,603.5 1424.9,641.437 1425.46,661.074 1426.02,665.589 1426.58,683.969 1427.14,699.46 1427.7,694.964 1428.26,710.924 1428.82,756.844 1429.38,736.536 1429.94,703.081 1430.5,701.027 1431.05,684.776 1431.61,685.455 1432.17,684.81 1432.73,672.137 1433.29,685.762 1433.85,669.219 1434.41,654.29 1434.97,656.495 1435.53,657.329 1436.09,692.93 1436.65,709.408 1437.21,710.964 1437.77,692.504 1438.33,690.533 1438.88,708.055 1439.44,690.825 1440,690.992 1440.56,687.443 1441.12,684.663 1441.68,701.89 1442.24,670.116 1442.8,670.074 1443.36,671.448 1443.92,643.683 1444.48,678.154 1445.04,660.711 1445.6,694.053 1446.15,692.34 1446.71,690.333 1447.27,710.085 1447.83,693.999 1448.39,679.053 1448.95,663.311 1449.51,682.317 1450.07,680.04 1450.63,699.236 1451.19,695.281 1451.75,695.403 1452.31,711.794 1452.87,680.83 1453.42,699.771 1453.98,687.683 1454.54,671.354 1455.1,673.578 1455.66,658.004 1456.22,661.438 1456.78,661.515 1457.34,651.31 1457.9,668.69 1458.46,672.214 1459.02,707.457 1459.58,724.251 1460.14,723.432 1460.7,724.308 1461.25,724.44 1461.81,722.627 1462.37,736.444 1462.93,686.357 1463.49,683.481 1464.05,668.053 1464.61,654.943 1465.17,673.686 1465.73,673.648 1466.29,725.538 1466.85,724.077 1467.41,702.678 1467.97,703.118 1468.52,699.861 1469.08,696.606 1469.64,693.794 1470.2,659.173 1470.76,691.688 1471.32,674.166 1471.88,672.412 1472.44,671.394 1473,657.928 1473.56,675.009 1474.12,643.19 1474.68,657.185 1475.24,675.14 1475.79,675.693 1476.35,677.173 1476.91,641.414 1477.47,627.203 1478.03,614.826 1478.59,636.301 1479.15,624.644 1479.71,627.035 1480.27,630.103 1480.83,635.262 1481.39,640.701 1481.95,628.822 1482.51,665 1483.07,681.201 1483.62,691.718 1484.18,720.73 1484.74,751.406 1485.3,778.768 1485.86,772.7 1486.42,767.802 1486.98,730.284 1487.54,742.849 1488.1,722.373 1488.66,720.37 1489.22,705.978 1489.78,671.465 1490.34,670.808 1490.89,668.968 1491.45,686.772 1492.01,688.67 1492.57,672.565 1493.13,704.3 1493.69,737.825 1494.25,716.693 1494.81,681.333 1495.37,662.95 1495.93,681.297 1496.49,648.185 1497.05,632.124 1497.61,618.385 1498.16,593.392 1498.72,584.607 1499.28,575.28 1499.84,595.897 1500.4,584.285 1500.96,590.99 1501.52,596.73 1502.08,587.927 1502.64,611.356 1503.2,652.329 1503.76,639.849 1504.32,643.995 1504.88,631.723 1505.44,617.443 1505.99,636.479 1506.55,637.102 1507.11,639.839 1507.67,657.853 1508.23,661.813 1508.79,661.907 1509.35,695.448 1509.91,662.545 1510.47,661.514 1511.03,649.095 1511.59,650.24 1512.15,684.421 1512.71,653.047 1513.26,621.888 1513.82,641.368 1514.38,659.338 1514.94,659.468 1515.5,663.289 1516.06,685.092 1516.62,684.618 1517.18,683.359 1517.74,698.523 1518.3,696.92 1518.86,678.904 1519.42,667.33 1519.98,652.52 1520.53,656.043 1521.09,644.561 1521.65,648.909 1522.21,667.093 1522.77,668.6 1523.33,685.293 1523.89,721.744 1524.45,709.503 1525.01,707.291 1525.57,705.457 1526.13,657.447 1526.69,654.065 1527.25,670.487 1527.81,672.269 1528.36,672.815 1528.92,691.223 1529.48,703.006 1530.04,667.686 1530.6,654.126 1531.16,655.922 1531.72,657.027 1532.28,660.295 1532.84,677.731 1533.4,679.177 1533.96,649.866 1534.52,668.428 1535.08,717.193 1535.63,728.311 1536.19,743.692 1536.75,743.938 1537.31,771.592 1537.87,748.83 1538.43,732.235 1538.99,714.732 1539.55,758.649 1540.11,769.198 1540.67,747.728 1541.23,724.992 1541.79,689.595 1542.35,659.64 1542.9,677.461 1543.46,697.099 1544.02,713.37 1544.58,709.067 1545.14,707.893 1545.7,739.096 1546.26,752.864 1546.82,734.183 1547.38,698.631 1547.94,685.264 1548.5,687.664 1549.06,667.983 1549.62,682.094 1550.18,681.86 1550.73,731.87 1551.29,745.288 1551.85,727.439 1552.41,742.575 1552.97,691.7 1553.53,692.29 1554.09,656.76 1554.65,673.818 1555.21,625.03 1555.77,627.001 1556.33,626.558 1556.89,629.244 1557.45,662.308 1558,664.957 1558.56,682.923 1559.12,681.403 1559.68,683.633 1560.24,715.585 1560.8,713.626 1561.36,694.603 1561.92,691.715 1562.48,684.989 1563.04,652.053 1563.6,639.523 1564.16,639.428 1564.72,628.389 1565.28,602.609 1565.83,636.162 1566.39,655.488 1566.95,607.655 1567.51,613.102 1568.07,616.923 1568.63,620.925 1569.19,627.214 1569.75,650.777 1570.31,686.718 1570.87,666.996 1571.43,683.721 1571.99,731.565 1572.55,759.613 1573.1,756.425 1573.66,735.806 1574.22,718.729 1574.78,747.367 1575.34,743.278 1575.9,741.388 1576.46,722.421 1577.02,723.448 1577.58,737.783 1578.14,737.898 1578.7,736.954 1579.26,732.718 1579.82,701.501 1580.37,698.698 1580.93,666.536 1581.49,667.741 1582.05,669.321 1582.61,683.489 1583.17,716.227 1583.73,717.062 1584.29,700.454 1584.85,715.476 1585.41,714.67 1585.97,679.177 1586.53,696.396 1587.09,680.054 1587.65,714.317 1588.2,713.359 1588.76,728.248 1589.32,743.345 1589.88,800.481 1590.44,841.456 1591,817.185 1591.56,812.251 1592.12,805.803 1592.68,782.822 1593.24,777.675 1593.8,740.4 1594.36,736.44 1594.92,715.448 1595.47,714.252 1596.03,710.734 1596.59,724.922 1597.15,691.196 1597.71,687.197 1598.27,719.479 1598.83,701.119 1599.39,701.573 1599.95,683.841 1600.51,670.429 1601.07,703.42 1601.63,700.456 1602.19,701.615 1602.74,701.613 1603.3,685.111 1603.86,681.366 1604.42,699.192 1604.98,698.783 1605.54,729.247 1606.1,696.369 1606.66,661.781 1607.22,679.32 1607.78,711.913 1608.34,711.714 1608.9,711.418 1609.46,740.991 1610.02,719.558 1610.57,685.106 1611.13,701.962 1611.69,685.606 1612.25,650.446 1612.81,672.202 1613.37,656.521 1613.93,671.427 1614.49,707.267 1615.05,690.473 1615.61,661.563 1616.17,643.488 1616.73,690.852 1617.29,688.049 1617.84,673.793 1618.4,656.912 1618.96,688.631 1619.52,688.412 1620.08,704.328 1620.64,685.225 1621.2,666.413 1621.76,652.381 1622.32,691.019 1622.88,708.303 1623.44,691.715 1624,708.625 1624.56,721.813 1625.11,734.487 1625.67,748.793 1626.23,746.347 1626.79,745.153 1627.35,739.938 1627.91,738.259 1628.47,754.044 1629.03,754.286 1629.59,781.843 1630.15,761.393 1630.71,774.091 1631.27,687.79 1631.83,732.849 1632.39,727.596 1632.94,676.65 1633.5,695.002 1634.06,711.789 1634.62,709.352 1635.18,725.851 1635.74,722.514 1636.3,739.381 1636.86,754.177 1637.42,765.332 1637.98,763.042 1638.54,770.265 1639.1,769.256 1639.66,734.848 1640.21,734.863 1640.77,712.487 1641.33,710.261 1641.89,708.396 1642.45,723.267 1643.01,735.097 1643.57,734.95 1644.13,733.034 1644.69,744.318 1645.25,741.995 1645.81,736.773 1646.37,713.082 1646.93,698.798 1647.48,667.171 1648.04,666.917 1648.6,712.901 1649.16,696.676 1649.72,680.104 1650.28,662.824 1650.84,647.447 1651.4,650.451 1651.96,650.402 1652.52,669.305 1653.08,675.865 1653.64,680.065 1654.2,665.32 1654.76,661.981 1655.31,629.585 1655.87,632.352 1656.43,634.104 1656.99,622.609 1657.55,638.249 1658.11,624.129 1658.67,640.256 1659.23,659.298 1659.79,661.44 1660.35,666.399 1660.91,668.169 1661.47,651.956 1662.03,606.489 1662.58,627.759 1663.14,631.643 1663.7,638.125 1664.26,622.775 1664.82,674.031 1665.38,675.114 1665.94,676.328 1666.5,644.997 1667.06,695.934 1667.62,708.462 1668.18,686.755 1668.74,700.288 1669.3,685.458 1669.85,698.341 1670.41,675.84 1670.97,693.229 1671.53,692.197 1672.09,657.179 1672.65,640.769 1673.21,690.32 1673.77,690.717 1674.33,723.467 1674.89,706.059 1675.45,739.022 1676.01,716.112 1676.57,701.338 1677.13,718.999 1677.68,735.043 1678.24,732.737 1678.8,728.501 1679.36,741.434 1679.92,758.834 1680.48,754.087 1681.04,730.718 1681.6,710.924 1682.16,695.956 1682.72,691.939 1683.28,670.18 1683.84,686.117 1684.4,717.916 1684.95,733.117 1685.51,745.839 1686.07,710.887 1686.63,710.815 1687.19,692.336 1687.75,673.177 1688.31,625.922 1688.87,632.716 1689.43,635.233 1689.99,619.659 1690.55,625.471 1691.11,593.749 1691.67,611.47 1692.23,611.975 1692.78,596.949 1693.34,601.782 1693.9,587.689 1694.46,577.46 1695.02,563.284 1695.58,571.995 1696.14,592.924 1696.7,566.241 1697.26,574.436 1697.82,561.671 1698.38,587.211 1698.94,607.365 1699.5,595.343 1700.05,617.4 1700.61,606.801 1701.17,607.274 1701.73,611.012 1702.29,649.257 1702.85,654.915 1703.41,624.34 1703.97,627.848 1704.53,597.121 1705.09,598.911 1705.65,636.812 1706.21,672.577 1706.77,658.679 1707.32,673.931 1707.88,691.088 1708.44,720.596 1709,738.203 1709.56,735.548 1710.12,721.817 1710.68,703.783 1711.24,704.198 1711.8,703.468 1712.36,665.978 1712.92,632.965 1713.48,635.57 1714.04,635.873 1714.6,641.099 1715.15,625.78 1715.71,625.329 1716.27,626.321 1716.83,645.727 1717.39,632.757 1717.95,619.421 1718.51,604.923 1719.07,658.2 1719.63,658.682 1720.19,692.903 1720.75,672.855 1721.31,670.113 1721.87,651.679 1722.42,623.222 1722.98,594.645 1723.54,615.786 1724.1,585.63 1724.66,575.12 1725.22,644.845 1725.78,649.627 1726.34,654.028 1726.9,657.278 1727.46,693.258 1728.02,676.421 1728.58,711.589 1729.14,691.774 1729.69,709.567 1730.25,713.368 1730.81,713.705 1731.37,744.231 1731.93,759.045 1732.49,753.48 1733.05,738.63 1733.61,690.791 1734.17,691.682 1734.73,690.012 1735.29,692.027 1735.85,695.295 1736.41,715.166 1736.97,686.175 1737.52,683.632 1738.08,719.903 1738.64,734.909 1739.2,715.529 1739.76,717.03 1740.32,699.482 1740.88,703.163 1741.44,682.668 1742,716.634 1742.56,748.793 1743.12,728.103 1743.68,742.559 1744.24,755.408 1744.79,783.782 1745.35,728.493 1745.91,743.004 1746.47,725.162 1747.03,709.109 1747.59,708.409 1748.15,738.428 1748.71,752.567 1749.27,750.172 1749.83,745.61 1750.39,740.658 1750.95,771.504 1751.51,798.213 1752.06,838.447 1752.62,878.797 1753.18,856.93 1753.74,848.858 1754.3,852.132 1754.86,825.951 1755.42,853.461 1755.98,844.289 1756.54,866.682 1757.1,806.526 1757.66,831.551 1758.22,855.158 1758.78,845.419 1759.34,835.998 1759.89,778.337 1760.45,752.854 1761.01,765.827 1761.57,761.157 1762.13,722.162 1762.69,703.114 1763.25,715.94 1763.81,664.295 1764.37,680.567 1764.93,694.595 1765.49,707.651 1766.05,688.237 1766.61,688.887 1767.16,720.713 1767.72,734.109 1768.28,714.322 1768.84,760.044 1769.4,755.901 1769.96,718.499 1770.52,716.704 1771.08,730.229 1771.64,700.402 1772.2,715.775 1772.76,697.861 1773.32,679.381 1773.88,698.622 1774.43,685.067 1774.99,685.039 1775.55,704.266 1776.11,668.108 1776.67,668.637 1777.23,653.032 1777.79,637.243 1778.35,590.013 1778.91,611.955 1779.47,601.246 1780.03,573.874 1780.59,595.522 1781.15,597.651 1781.71,585.362 1782.26,592.841 1782.82,597.438 1783.38,632.493 1783.94,620.961 1784.5,626.064 1785.06,628.623 1785.62,653.177 1786.18,672.913 1786.74,657.382 1787.3,659.234 1787.86,678.567 1788.42,679.377 1788.98,677.781 1789.53,662.075 1790.09,664.731 1790.65,667.914 1791.21,621.341 1791.77,674.558 1792.33,657.541 1792.89,655.371 1793.45,641.878 1794.01,627.546 1794.57,613.326 1795.13,631.891 1795.69,679.735 1796.25,692.306 1796.8,676.345 1797.36,632.31 1797.92,649.488 1798.48,699.25 1799.04,699.811 1799.6,699.17 1800.16,696.538 1800.72,648.04 1801.28,653.092 1801.84,689.569 1802.4,709.075 1802.96,690.217 1803.52,671.678 1804.08,688.737 1804.63,687.666 1805.19,704.071 1805.75,701.01 1806.31,714.221 1806.87,713.569 1807.43,713.242 1807.99,711.827 1808.55,712.057 1809.11,730.479 1809.67,714.383 1810.23,697.495 1810.79,680.034 1811.35,662.4 1811.9,678.114 1812.46,662.979 1813.02,649.294 1813.58,631.331 1814.14,634.654 1814.7,621.479 1815.26,606.617 1815.82,629.256 1816.38,601.818 1816.94,588.007 1817.5,608.021 1818.06,580.94 1818.62,569.211 1819.18,606.035 1819.73,596.727 1820.29,620.587 1820.85,626.205 1821.41,663.919 1821.97,635.237 1822.53,638.539 1823.09,640.742 1823.65,658.025 1824.21,692.54 1824.77,671.638 1825.33,658.709 1825.89,706.128 1826.45,707.801 1827,723.445 1827.56,691.528 1828.12,690.581 1828.68,691.471 1829.24,698.81 1829.8,713.035 1830.36,716.277 1830.92,701.646 1831.48,699.034 1832.04,681.893 1832.6,713.76 1833.16,744.589 1833.72,728.729 1834.27,758.366 1834.83,770.518 1835.39,750.191 1835.95,749.413 1836.51,746.678 1837.07,746.084 1837.63,691.753 1838.19,658.302 \"/>\n<path clip-path=\"url(#clip453)\" d=\"M720.247 692.87 L720.806 692.87 L721.365 692.87 L721.924 692.87 L722.484 692.87 L723.043 692.87 L723.602 692.87 L724.161 692.87 L724.721 692.87 L725.28 692.87 L725.839 692.87 L726.398 692.87 L726.958 692.87 L727.517 692.87 L728.076 692.87 L728.635 692.87 L729.195 692.87 L729.754 692.87 L730.313 692.87 L730.872 692.87 L731.432 692.87 L731.991 692.87 L732.55 692.87 L733.109 692.87 L733.669 692.87 L734.228 692.87 L734.787 692.87 L735.346 692.87 L735.906 692.87 L736.465 692.87 L737.024 692.87 L737.583 692.87 L738.143 692.87 L738.702 692.87 L739.261 692.87 L739.82 692.87 L740.38 692.87 L740.939 692.87 L741.498 692.87 L742.057 692.87 L742.617 692.87 L743.176 692.87 L743.735 692.87 L744.294 692.87 L744.854 692.87 L745.413 692.87 L745.972 692.87 L746.531 692.87 L747.091 692.87 L747.65 692.87 L748.209 692.87 L748.768 692.87 L749.328 692.87 L749.887 692.87 L750.446 692.87 L751.005 692.87 L751.565 692.87 L752.124 692.87 L752.683 692.87 L753.242 692.87 L753.802 692.87 L754.361 692.87 L754.92 692.87 L755.479 692.87 L756.039 692.87 L756.598 692.87 L757.157 692.87 L757.716 692.87 L758.276 692.87 L758.835 692.87 L759.394 692.87 L759.953 692.87 L760.513 692.87 L761.072 692.87 L761.631 692.87 L762.19 692.87 L762.75 692.87 L763.309 692.87 L763.868 692.87 L764.427 692.87 L764.987 692.87 L765.546 692.87 L766.105 692.87 L766.664 692.87 L767.224 692.87 L767.783 692.87 L768.342 692.87 L768.901 692.87 L769.461 692.87 L770.02 692.87 L770.579 692.87 L771.138 692.87 L771.698 692.87 L772.257 692.87 L772.816 692.87 L773.375 692.87 L773.935 692.87 L774.494 692.87 L775.053 692.87 L775.612 692.87 L776.172 692.87 L776.731 692.87 L777.29 692.87 L777.849 692.87 L778.409 692.87 L778.968 692.87 L779.527 692.87 L780.086 692.87 L780.646 692.87 L781.205 692.87 L781.764 692.87 L782.323 692.87 L782.883 692.87 L783.442 692.87 L784.001 692.87 L784.56 692.87 L785.12 692.87 L785.679 692.87 L786.238 692.87 L786.797 692.87 L787.357 692.87 L787.916 692.87 L788.475 692.87 L789.034 692.87 L789.594 692.87 L790.153 692.87 L790.712 692.87 L791.271 692.87 L791.831 692.87 L792.39 692.87 L792.949 692.87 L793.508 692.87 L794.068 692.87 L794.627 692.87 L795.186 692.87 L795.745 692.87 L796.305 692.87 L796.864 692.87 L797.423 692.87 L797.982 692.87 L798.542 692.87 L799.101 692.87 L799.66 692.87 L800.219 692.87 L800.779 692.87 L801.338 692.87 L801.897 692.87 L802.456 692.87 L803.016 692.87 L803.575 692.87 L804.134 692.87 L804.693 692.87 L805.253 692.87 L805.812 692.87 L806.371 692.87 L806.931 692.87 L807.49 692.87 L808.049 692.87 L808.608 692.87 L809.168 692.87 L809.727 692.87 L810.286 692.87 L810.845 692.87 L811.405 692.87 L811.964 692.87 L812.523 692.87 L813.082 692.87 L813.642 692.87 L814.201 692.87 L814.76 692.87 L815.319 692.87 L815.879 692.87 L816.438 692.87 L816.997 692.87 L817.556 692.87 L818.116 692.87 L818.675 692.87 L819.234 692.87 L819.793 692.87 L820.353 692.87 L820.912 692.87 L821.471 692.87 L822.03 692.87 L822.59 692.87 L823.149 692.87 L823.708 692.87 L824.267 692.87 L824.827 692.87 L825.386 692.87 L825.945 692.87 L826.504 692.87 L827.064 692.87 L827.623 692.87 L828.182 692.87 L828.741 692.87 L829.301 692.87 L829.86 692.87 L830.419 692.87 L830.978 692.87 L831.538 692.87 L832.097 692.87 L832.656 692.87 L833.215 692.87 L833.775 692.87 L834.334 692.87 L834.893 692.87 L835.452 692.87 L836.012 692.87 L836.571 692.87 L837.13 692.87 L837.689 692.87 L838.249 692.87 L838.808 692.87 L839.367 692.87 L839.926 692.87 L840.486 692.87 L841.045 692.87 L841.604 692.87 L842.163 692.87 L842.723 692.87 L843.282 692.87 L843.841 692.87 L844.4 692.87 L844.96 692.87 L845.519 692.87 L846.078 692.87 L846.637 692.87 L847.197 692.87 L847.756 692.87 L848.315 692.87 L848.874 692.87 L849.434 692.87 L849.993 692.87 L850.552 692.87 L851.111 692.87 L851.671 692.87 L852.23 692.87 L852.789 692.87 L853.348 692.87 L853.908 692.87 L854.467 692.87 L855.026 692.87 L855.585 692.87 L856.145 692.87 L856.704 692.87 L857.263 692.87 L857.822 692.87 L858.382 692.87 L858.941 692.87 L859.5 692.87 L860.059 692.87 L860.619 692.87 L861.178 692.87 L861.737 692.87 L862.296 692.87 L862.856 692.87 L863.415 692.87 L863.974 692.87 L864.533 692.87 L865.093 692.87 L865.652 692.87 L866.211 692.87 L866.77 692.87 L867.33 692.87 L867.889 692.87 L868.448 692.87 L869.007 692.87 L869.567 692.87 L870.126 692.87 L870.685 692.87 L871.244 692.87 L871.804 692.87 L872.363 692.87 L872.922 692.87 L873.481 692.87 L874.041 692.87 L874.6 692.87 L875.159 692.87 L875.718 692.87 L876.278 692.87 L876.837 692.87 L877.396 692.87 L877.955 692.87 L878.515 692.87 L879.074 692.87 L879.633 692.87 L880.192 692.87 L880.752 692.87 L881.311 692.87 L881.87 692.87 L882.429 692.87 L882.989 692.87 L883.548 692.87 L884.107 692.87 L884.666 692.87 L885.226 692.87 L885.785 692.87 L886.344 692.87 L886.903 692.87 L887.463 692.87 L888.022 692.87 L888.581 692.87 L889.14 692.87 L889.7 692.87 L890.259 692.87 L890.818 692.87 L891.377 692.87 L891.937 692.87 L892.496 692.87 L893.055 692.87 L893.614 692.87 L894.174 692.87 L894.733 692.87 L895.292 692.87 L895.851 692.87 L896.411 692.87 L896.97 692.87 L897.529 692.87 L898.088 692.87 L898.648 692.87 L899.207 692.87 L899.766 692.87 L900.325 692.87 L900.885 692.87 L901.444 692.87 L902.003 692.87 L902.562 692.87 L903.122 692.87 L903.681 692.87 L904.24 692.87 L904.799 692.87 L905.359 692.87 L905.918 692.87 L906.477 692.87 L907.036 692.87 L907.596 692.87 L908.155 692.87 L908.714 692.87 L909.273 692.87 L909.833 692.87 L910.392 692.87 L910.951 692.87 L911.51 692.87 L912.07 692.87 L912.629 692.87 L913.188 692.87 L913.747 692.87 L914.307 692.87 L914.866 692.87 L915.425 692.87 L915.984 692.87 L916.544 692.87 L917.103 692.87 L917.662 692.87 L918.221 692.87 L918.781 692.87 L919.34 692.87 L919.899 692.87 L920.458 692.87 L921.018 692.87 L921.577 692.87 L922.136 692.87 L922.695 692.87 L923.255 692.87 L923.814 692.87 L924.373 692.87 L924.932 692.87 L925.492 692.87 L926.051 692.87 L926.61 692.87 L927.169 692.87 L927.729 692.87 L928.288 692.87 L928.847 692.87 L929.406 692.87 L929.966 692.87 L930.525 692.87 L931.084 692.87 L931.644 692.87 L932.203 692.87 L932.762 692.87 L933.321 692.87 L933.881 692.87 L934.44 692.87 L934.999 692.87 L935.558 692.87 L936.118 692.87 L936.677 692.87 L937.236 692.87 L937.795 692.87 L938.355 692.87 L938.914 692.87 L939.473 692.87 L940.032 692.87 L940.592 692.87 L941.151 692.87 L941.71 692.87 L942.269 692.87 L942.829 692.87 L943.388 692.87 L943.947 692.87 L944.506 692.87 L945.066 692.87 L945.625 692.87 L946.184 692.87 L946.743 692.87 L947.303 692.87 L947.862 692.87 L948.421 692.87 L948.98 692.87 L949.54 692.87 L950.099 692.87 L950.658 692.87 L951.217 692.87 L951.777 692.87 L952.336 692.87 L952.895 692.87 L953.454 692.87 L954.014 692.87 L954.573 692.87 L955.132 692.87 L955.691 692.87 L956.251 692.87 L956.81 692.87 L957.369 692.87 L957.928 692.87 L958.488 692.87 L959.047 692.87 L959.606 692.87 L960.165 692.87 L960.725 692.87 L961.284 692.87 L961.843 692.87 L962.402 692.87 L962.962 692.87 L963.521 692.87 L964.08 692.87 L964.639 692.87 L965.199 692.87 L965.758 692.87 L966.317 692.87 L966.876 692.87 L967.436 692.87 L967.995 692.87 L968.554 692.87 L969.113 692.87 L969.673 692.87 L970.232 692.87 L970.791 692.87 L971.35 692.87 L971.91 692.87 L972.469 692.87 L973.028 692.87 L973.587 692.87 L974.147 692.87 L974.706 692.87 L975.265 692.87 L975.824 692.87 L976.384 692.87 L976.943 692.87 L977.502 692.87 L978.061 692.87 L978.621 692.87 L979.18 692.87 L979.739 692.87 L980.298 692.87 L980.858 692.87 L981.417 692.87 L981.976 692.87 L982.535 692.87 L983.095 692.87 L983.654 692.87 L984.213 692.87 L984.772 692.87 L985.332 692.87 L985.891 692.87 L986.45 692.87 L987.009 692.87 L987.569 692.87 L988.128 692.87 L988.687 692.87 L989.246 692.87 L989.806 692.87 L990.365 692.87 L990.924 692.87 L991.483 692.87 L992.043 692.87 L992.602 692.87 L993.161 692.87 L993.72 692.87 L994.28 692.87 L994.839 692.87 L995.398 692.87 L995.957 692.87 L996.517 692.87 L997.076 692.87 L997.635 692.87 L998.194 692.87 L998.754 692.87 L999.313 692.87 L999.872 692.87 L1000.43 692.87 L1000.99 692.87 L1001.55 692.87 L1002.11 692.87 L1002.67 692.87 L1003.23 692.87 L1003.79 692.87 L1004.35 692.87 L1004.91 692.87 L1005.46 692.87 L1006.02 692.87 L1006.58 692.87 L1007.14 692.87 L1007.7 692.87 L1008.26 692.87 L1008.82 692.87 L1009.38 692.87 L1009.94 692.87 L1010.5 692.87 L1011.06 692.87 L1011.62 692.87 L1012.18 692.87 L1012.73 692.87 L1013.29 692.87 L1013.85 692.87 L1014.41 692.87 L1014.97 692.87 L1015.53 692.87 L1016.09 692.87 L1016.65 692.87 L1017.21 692.87 L1017.77 692.87 L1018.33 692.87 L1018.89 692.87 L1019.45 692.87 L1020.01 692.87 L1020.56 692.87 L1021.12 692.87 L1021.68 692.87 L1022.24 692.87 L1022.8 692.87 L1023.36 692.87 L1023.92 692.87 L1024.48 692.87 L1025.04 692.87 L1025.6 692.87 L1026.16 692.87 L1026.72 692.87 L1027.28 692.87 L1027.83 692.87 L1028.39 692.87 L1028.95 692.87 L1029.51 692.87 L1030.07 692.87 L1030.63 692.87 L1031.19 692.87 L1031.75 692.87 L1032.31 692.87 L1032.87 692.87 L1033.43 692.87 L1033.99 692.87 L1034.55 692.87 L1035.1 692.87 L1035.66 692.87 L1036.22 692.87 L1036.78 692.87 L1037.34 692.87 L1037.9 692.87 L1038.46 692.87 L1039.02 692.87 L1039.58 692.87 L1040.14 692.87 L1040.7 692.87 L1041.26 692.87 L1041.82 692.87 L1042.38 692.87 L1042.93 692.87 L1043.49 692.87 L1044.05 692.87 L1044.61 692.87 L1045.17 692.87 L1045.73 692.87 L1046.29 692.87 L1046.85 692.87 L1047.41 692.87 L1047.97 692.87 L1048.53 692.87 L1049.09 692.87 L1049.65 692.87 L1050.2 692.87 L1050.76 692.87 L1051.32 692.87 L1051.88 692.87 L1052.44 692.87 L1053 692.87 L1053.56 692.87 L1054.12 692.87 L1054.68 692.87 L1055.24 692.87 L1055.8 692.87 L1056.36 692.87 L1056.92 692.87 L1057.48 692.87 L1058.03 692.87 L1058.59 692.87 L1059.15 692.87 L1059.71 692.87 L1060.27 692.87 L1060.83 692.87 L1061.39 692.87 L1061.95 692.87 L1062.51 692.87 L1063.07 692.87 L1063.63 692.87 L1064.19 692.87 L1064.75 692.87 L1065.3 692.87 L1065.86 692.87 L1066.42 692.87 L1066.98 692.87 L1067.54 692.87 L1068.1 692.87 L1068.66 692.87 L1069.22 692.87 L1069.78 692.87 L1070.34 692.87 L1070.9 692.87 L1071.46 692.87 L1072.02 692.87 L1072.57 692.87 L1073.13 692.87 L1073.69 692.87 L1074.25 692.87 L1074.81 692.87 L1075.37 692.87 L1075.93 692.87 L1076.49 692.87 L1077.05 692.87 L1077.61 692.87 L1078.17 692.87 L1078.73 692.87 L1079.29 692.87 L1079.85 692.87 L1080.4 692.87 L1080.96 692.87 L1081.52 692.87 L1082.08 692.87 L1082.64 692.87 L1083.2 692.87 L1083.76 692.87 L1084.32 692.87 L1084.88 692.87 L1085.44 692.87 L1086 692.87 L1086.56 692.87 L1087.12 692.87 L1087.67 692.87 L1088.23 692.87 L1088.79 692.87 L1089.35 692.87 L1089.91 692.87 L1090.47 692.87 L1091.03 692.87 L1091.59 692.87 L1092.15 692.87 L1092.71 692.87 L1093.27 692.87 L1093.83 692.87 L1094.39 692.87 L1094.94 692.87 L1095.5 692.87 L1096.06 692.87 L1096.62 692.87 L1097.18 692.87 L1097.74 692.87 L1098.3 692.87 L1098.86 692.87 L1099.42 692.87 L1099.98 692.87 L1100.54 692.87 L1101.1 692.87 L1101.66 692.87 L1102.22 692.87 L1102.77 692.87 L1103.33 692.87 L1103.89 692.87 L1104.45 692.87 L1105.01 692.87 L1105.57 692.87 L1106.13 692.87 L1106.69 692.87 L1107.25 692.87 L1107.81 692.87 L1108.37 692.87 L1108.93 692.87 L1109.49 692.87 L1110.04 692.87 L1110.6 692.87 L1111.16 692.87 L1111.72 692.87 L1112.28 692.87 L1112.84 692.87 L1113.4 692.87 L1113.96 692.87 L1114.52 692.87 L1115.08 692.87 L1115.64 692.87 L1116.2 692.87 L1116.76 692.87 L1117.31 692.87 L1117.87 692.87 L1118.43 692.87 L1118.99 692.87 L1119.55 692.87 L1120.11 692.87 L1120.67 692.87 L1121.23 692.87 L1121.79 692.87 L1122.35 692.87 L1122.91 692.87 L1123.47 692.87 L1124.03 692.87 L1124.59 692.87 L1125.14 692.87 L1125.7 692.87 L1126.26 692.87 L1126.82 692.87 L1127.38 692.87 L1127.94 692.87 L1128.5 692.87 L1129.06 692.87 L1129.62 692.87 L1130.18 692.87 L1130.74 692.87 L1131.3 692.87 L1131.86 692.87 L1132.41 692.87 L1132.97 692.87 L1133.53 692.87 L1134.09 692.87 L1134.65 692.87 L1135.21 692.87 L1135.77 692.87 L1136.33 692.87 L1136.89 692.87 L1137.45 692.87 L1138.01 692.87 L1138.57 692.87 L1139.13 692.87 L1139.68 692.87 L1140.24 692.87 L1140.8 692.87 L1141.36 692.87 L1141.92 692.87 L1142.48 692.87 L1143.04 692.87 L1143.6 692.87 L1144.16 692.87 L1144.72 692.87 L1145.28 692.87 L1145.84 692.87 L1146.4 692.87 L1146.96 692.87 L1147.51 692.87 L1148.07 692.87 L1148.63 692.87 L1149.19 692.87 L1149.75 692.87 L1150.31 692.87 L1150.87 692.87 L1151.43 692.87 L1151.99 692.87 L1152.55 692.87 L1153.11 692.87 L1153.67 692.87 L1154.23 692.87 L1154.78 692.87 L1155.34 692.87 L1155.9 692.87 L1156.46 692.87 L1157.02 692.87 L1157.58 692.87 L1158.14 692.87 L1158.7 692.87 L1159.26 692.87 L1159.82 692.87 L1160.38 692.87 L1160.94 692.87 L1161.5 692.87 L1162.05 692.87 L1162.61 692.87 L1163.17 692.87 L1163.73 692.87 L1164.29 692.87 L1164.85 692.87 L1165.41 692.87 L1165.97 692.87 L1166.53 692.87 L1167.09 692.87 L1167.65 692.87 L1168.21 692.87 L1168.77 692.87 L1169.33 692.87 L1169.88 692.87 L1170.44 692.87 L1171 692.87 L1171.56 692.87 L1172.12 692.87 L1172.68 692.87 L1173.24 692.87 L1173.8 692.87 L1174.36 692.87 L1174.92 692.87 L1175.48 692.87 L1176.04 692.87 L1176.6 692.87 L1177.15 692.87 L1177.71 692.87 L1178.27 692.87 L1178.83 692.87 L1179.39 692.87 L1179.95 692.87 L1180.51 692.87 L1181.07 692.87 L1181.63 692.87 L1182.19 692.87 L1182.75 692.87 L1183.31 692.87 L1183.87 692.87 L1184.43 692.87 L1184.98 692.87 L1185.54 692.87 L1186.1 692.87 L1186.66 692.87 L1187.22 692.87 L1187.78 692.87 L1188.34 692.87 L1188.9 692.87 L1189.46 692.87 L1190.02 692.87 L1190.58 692.87 L1191.14 692.87 L1191.7 692.87 L1192.25 692.87 L1192.81 692.87 L1193.37 692.87 L1193.93 692.87 L1194.49 692.87 L1195.05 692.87 L1195.61 692.87 L1196.17 692.87 L1196.73 692.87 L1197.29 692.87 L1197.85 692.87 L1198.41 692.87 L1198.97 692.87 L1199.52 692.87 L1200.08 692.87 L1200.64 692.87 L1201.2 692.87 L1201.76 692.87 L1202.32 692.87 L1202.88 692.87 L1203.44 692.87 L1204 692.87 L1204.56 692.87 L1205.12 692.87 L1205.68 692.87 L1206.24 692.87 L1206.8 692.87 L1207.35 692.87 L1207.91 692.87 L1208.47 692.87 L1209.03 692.87 L1209.59 692.87 L1210.15 692.87 L1210.71 692.87 L1211.27 692.87 L1211.83 692.87 L1212.39 692.87 L1212.95 692.87 L1213.51 692.87 L1214.07 692.87 L1214.62 692.87 L1215.18 692.87 L1215.74 692.87 L1216.3 692.87 L1216.86 692.87 L1217.42 692.87 L1217.98 692.87 L1218.54 692.87 L1219.1 692.87 L1219.66 692.87 L1220.22 692.87 L1220.78 692.87 L1221.34 692.87 L1221.89 692.87 L1222.45 692.87 L1223.01 692.87 L1223.57 692.87 L1224.13 692.87 L1224.69 692.87 L1225.25 692.87 L1225.81 692.87 L1226.37 692.87 L1226.93 692.87 L1227.49 692.87 L1228.05 692.87 L1228.61 692.87 L1229.17 692.87 L1229.72 692.87 L1230.28 692.87 L1230.84 692.87 L1231.4 692.87 L1231.96 692.87 L1232.52 692.87 L1233.08 692.87 L1233.64 692.87 L1234.2 692.87 L1234.76 692.87 L1235.32 692.87 L1235.88 692.87 L1236.44 692.87 L1236.99 692.87 L1237.55 692.87 L1238.11 692.87 L1238.67 692.87 L1239.23 692.87 L1239.79 692.87 L1240.35 692.87 L1240.91 692.87 L1241.47 692.87 L1242.03 692.87 L1242.59 692.87 L1243.15 692.87 L1243.71 692.87 L1244.26 692.87 L1244.82 692.87 L1245.38 692.87 L1245.94 692.87 L1246.5 692.87 L1247.06 692.87 L1247.62 692.87 L1248.18 692.87 L1248.74 692.87 L1249.3 692.87 L1249.86 692.87 L1250.42 692.87 L1250.98 692.87 L1251.54 692.87 L1252.09 692.87 L1252.65 692.87 L1253.21 692.87 L1253.77 692.87 L1254.33 692.87 L1254.89 692.87 L1255.45 692.87 L1256.01 692.87 L1256.57 692.87 L1257.13 692.87 L1257.69 692.87 L1258.25 692.87 L1258.81 692.87 L1259.36 692.87 L1259.92 692.87 L1260.48 692.87 L1261.04 692.87 L1261.6 692.87 L1262.16 692.87 L1262.72 692.87 L1263.28 692.87 L1263.84 692.87 L1264.4 692.87 L1264.96 692.87 L1265.52 692.87 L1266.08 692.87 L1266.63 692.87 L1267.19 692.87 L1267.75 692.87 L1268.31 692.87 L1268.87 692.87 L1269.43 692.87 L1269.99 692.87 L1270.55 692.87 L1271.11 692.87 L1271.67 692.87 L1272.23 692.87 L1272.79 692.87 L1273.35 692.87 L1273.91 692.87 L1274.46 692.87 L1275.02 692.87 L1275.58 692.87 L1276.14 692.87 L1276.7 692.87 L1277.26 692.87 L1277.82 692.87 L1278.38 692.87 L1278.94 692.87 L1279.5 692.87 L1280.06 692.87 L1280.62 692.87 L1281.18 692.87 L1281.73 692.87 L1282.29 692.87 L1282.85 692.87 L1283.41 692.87 L1283.97 692.87 L1284.53 692.87 L1285.09 692.87 L1285.65 692.87 L1286.21 692.87 L1286.77 692.87 L1287.33 692.87 L1287.89 692.87 L1288.45 692.87 L1289 692.87 L1289.56 692.87 L1290.12 692.87 L1290.68 692.87 L1291.24 692.87 L1291.8 692.87 L1292.36 692.87 L1292.92 692.87 L1293.48 692.87 L1294.04 692.87 L1294.6 692.87 L1295.16 692.87 L1295.72 692.87 L1296.28 692.87 L1296.83 692.87 L1297.39 692.87 L1297.95 692.87 L1298.51 692.87 L1299.07 692.87 L1299.63 692.87 L1300.19 692.87 L1300.75 692.87 L1301.31 692.87 L1301.87 692.87 L1302.43 692.87 L1302.99 692.87 L1303.55 692.87 L1304.1 692.87 L1304.66 692.87 L1305.22 692.87 L1305.78 692.87 L1306.34 692.87 L1306.9 692.87 L1307.46 692.87 L1308.02 692.87 L1308.58 692.87 L1309.14 692.87 L1309.7 692.87 L1310.26 692.87 L1310.82 692.87 L1311.38 692.87 L1311.93 692.87 L1312.49 692.87 L1313.05 692.87 L1313.61 692.87 L1314.17 692.87 L1314.73 692.87 L1315.29 692.87 L1315.85 692.87 L1316.41 692.87 L1316.97 692.87 L1317.53 692.87 L1318.09 692.87 L1318.65 692.87 L1319.2 692.87 L1319.76 692.87 L1320.32 692.87 L1320.88 692.87 L1321.44 692.87 L1322 692.87 L1322.56 692.87 L1323.12 692.87 L1323.68 692.87 L1324.24 692.87 L1324.8 692.87 L1325.36 692.87 L1325.92 692.87 L1326.47 692.87 L1327.03 692.87 L1327.59 692.87 L1328.15 692.87 L1328.71 692.87 L1329.27 692.87 L1329.83 692.87 L1330.39 692.87 L1330.95 692.87 L1331.51 692.87 L1332.07 692.87 L1332.63 692.87 L1333.19 692.87 L1333.75 692.87 L1334.3 692.87 L1334.86 692.87 L1335.42 692.87 L1335.98 692.87 L1336.54 692.87 L1337.1 692.87 L1337.66 692.87 L1338.22 692.87 L1338.78 692.87 L1339.34 692.87 L1339.9 692.87 L1340.46 692.87 L1341.02 692.87 L1341.57 692.87 L1342.13 692.87 L1342.69 692.87 L1343.25 692.87 L1343.81 692.87 L1344.37 692.87 L1344.93 692.87 L1345.49 692.87 L1346.05 692.87 L1346.61 692.87 L1347.17 692.87 L1347.73 692.87 L1348.29 692.87 L1348.84 692.87 L1349.4 692.87 L1349.96 692.87 L1350.52 692.87 L1351.08 692.87 L1351.64 692.87 L1352.2 692.87 L1352.76 692.87 L1353.32 692.87 L1353.88 692.87 L1354.44 692.87 L1355 692.87 L1355.56 692.87 L1356.12 692.87 L1356.67 692.87 L1357.23 692.87 L1357.79 692.87 L1358.35 692.87 L1358.91 692.87 L1359.47 692.87 L1360.03 692.87 L1360.59 692.87 L1361.15 692.87 L1361.71 692.87 L1362.27 692.87 L1362.83 692.87 L1363.39 692.87 L1363.94 692.87 L1364.5 692.87 L1365.06 692.87 L1365.62 692.87 L1366.18 692.87 L1366.74 692.87 L1367.3 692.87 L1367.86 692.87 L1368.42 692.87 L1368.98 692.87 L1369.54 692.87 L1370.1 692.87 L1370.66 692.87 L1371.21 692.87 L1371.77 692.87 L1372.33 692.87 L1372.89 692.87 L1373.45 692.87 L1374.01 692.87 L1374.57 692.87 L1375.13 692.87 L1375.69 692.87 L1376.25 692.87 L1376.81 692.87 L1377.37 692.87 L1377.93 692.87 L1378.49 692.87 L1379.04 692.87 L1379.6 692.87 L1380.16 692.87 L1380.72 692.87 L1381.28 692.87 L1381.84 692.87 L1382.4 692.87 L1382.96 692.87 L1383.52 692.87 L1384.08 692.87 L1384.64 692.87 L1385.2 692.87 L1385.76 692.87 L1386.31 692.87 L1386.87 692.87 L1387.43 692.87 L1387.99 692.87 L1388.55 692.87 L1389.11 692.87 L1389.67 692.87 L1390.23 692.87 L1390.79 692.87 L1391.35 692.87 L1391.91 692.87 L1392.47 692.87 L1393.03 692.87 L1393.58 692.87 L1394.14 692.87 L1394.7 692.87 L1395.26 692.87 L1395.82 692.87 L1396.38 692.87 L1396.94 692.87 L1397.5 692.87 L1398.06 692.87 L1398.62 692.87 L1399.18 692.87 L1399.74 692.87 L1400.3 692.87 L1400.86 692.87 L1401.41 692.87 L1401.97 692.87 L1402.53 692.87 L1403.09 692.87 L1403.65 692.87 L1404.21 692.87 L1404.77 692.87 L1405.33 692.87 L1405.89 692.87 L1406.45 692.87 L1407.01 692.87 L1407.57 692.87 L1408.13 692.87 L1408.68 692.87 L1409.24 692.87 L1409.8 692.87 L1410.36 692.87 L1410.92 692.87 L1411.48 692.87 L1412.04 692.87 L1412.6 692.87 L1413.16 692.87 L1413.72 692.87 L1414.28 692.87 L1414.84 692.87 L1415.4 692.87 L1415.95 692.87 L1416.51 692.87 L1417.07 692.87 L1417.63 692.87 L1418.19 692.87 L1418.75 692.87 L1419.31 692.87 L1419.87 692.87 L1420.43 692.87 L1420.99 692.87 L1421.55 692.87 L1422.11 692.87 L1422.67 692.87 L1423.23 692.87 L1423.78 692.87 L1424.34 692.87 L1424.9 692.87 L1425.46 692.87 L1426.02 692.87 L1426.58 692.87 L1427.14 692.87 L1427.7 692.87 L1428.26 692.87 L1428.82 692.87 L1429.38 692.87 L1429.94 692.87 L1430.5 692.87 L1431.05 692.87 L1431.61 692.87 L1432.17 692.87 L1432.73 692.87 L1433.29 692.87 L1433.85 692.87 L1434.41 692.87 L1434.97 692.87 L1435.53 692.87 L1436.09 692.87 L1436.65 692.87 L1437.21 692.87 L1437.77 692.87 L1438.33 692.87 L1438.88 692.87 L1439.44 692.87 L1440 692.87 L1440.56 692.87 L1441.12 692.87 L1441.68 692.87 L1442.24 692.87 L1442.8 692.87 L1443.36 692.87 L1443.92 692.87 L1444.48 692.87 L1445.04 692.87 L1445.6 692.87 L1446.15 692.87 L1446.71 692.87 L1447.27 692.87 L1447.83 692.87 L1448.39 692.87 L1448.95 692.87 L1449.51 692.87 L1450.07 692.87 L1450.63 692.87 L1451.19 692.87 L1451.75 692.87 L1452.31 692.87 L1452.87 692.87 L1453.42 692.87 L1453.98 692.87 L1454.54 692.87 L1455.1 692.87 L1455.66 692.87 L1456.22 692.87 L1456.78 692.87 L1457.34 692.87 L1457.9 692.87 L1458.46 692.87 L1459.02 692.87 L1459.58 692.87 L1460.14 692.87 L1460.7 692.87 L1461.25 692.87 L1461.81 692.87 L1462.37 692.87 L1462.93 692.87 L1463.49 692.87 L1464.05 692.87 L1464.61 692.87 L1465.17 692.87 L1465.73 692.87 L1466.29 692.87 L1466.85 692.87 L1467.41 692.87 L1467.97 692.87 L1468.52 692.87 L1469.08 692.87 L1469.64 692.87 L1470.2 692.87 L1470.76 692.87 L1471.32 692.87 L1471.88 692.87 L1472.44 692.87 L1473 692.87 L1473.56 692.87 L1474.12 692.87 L1474.68 692.87 L1475.24 692.87 L1475.79 692.87 L1476.35 692.87 L1476.91 692.87 L1477.47 692.87 L1478.03 692.87 L1478.59 692.87 L1479.15 692.87 L1479.71 692.87 L1480.27 692.87 L1480.83 692.87 L1481.39 692.87 L1481.95 692.87 L1482.51 692.87 L1483.07 692.87 L1483.62 692.87 L1484.18 692.87 L1484.74 692.87 L1485.3 692.87 L1485.86 692.87 L1486.42 692.87 L1486.98 692.87 L1487.54 692.87 L1488.1 692.87 L1488.66 692.87 L1489.22 692.87 L1489.78 692.87 L1490.34 692.87 L1490.89 692.87 L1491.45 692.87 L1492.01 692.87 L1492.57 692.87 L1493.13 692.87 L1493.69 692.87 L1494.25 692.87 L1494.81 692.87 L1495.37 692.87 L1495.93 692.87 L1496.49 692.87 L1497.05 692.87 L1497.61 692.87 L1498.16 692.87 L1498.72 692.87 L1499.28 692.87 L1499.84 692.87 L1500.4 692.87 L1500.96 692.87 L1501.52 692.87 L1502.08 692.87 L1502.64 692.87 L1503.2 692.87 L1503.76 692.87 L1504.32 692.87 L1504.88 692.87 L1505.44 692.87 L1505.99 692.87 L1506.55 692.87 L1507.11 692.87 L1507.67 692.87 L1508.23 692.87 L1508.79 692.87 L1509.35 692.87 L1509.91 692.87 L1510.47 692.87 L1511.03 692.87 L1511.59 692.87 L1512.15 692.87 L1512.71 692.87 L1513.26 692.87 L1513.82 692.87 L1514.38 692.87 L1514.94 692.87 L1515.5 692.87 L1516.06 692.87 L1516.62 692.87 L1517.18 692.87 L1517.74 692.87 L1518.3 692.87 L1518.86 692.87 L1519.42 692.87 L1519.98 692.87 L1520.53 692.87 L1521.09 692.87 L1521.65 692.87 L1522.21 692.87 L1522.77 692.87 L1523.33 692.87 L1523.89 692.87 L1524.45 692.87 L1525.01 692.87 L1525.57 692.87 L1526.13 692.87 L1526.69 692.87 L1527.25 692.87 L1527.81 692.87 L1528.36 692.87 L1528.92 692.87 L1529.48 692.87 L1530.04 692.87 L1530.6 692.87 L1531.16 692.87 L1531.72 692.87 L1532.28 692.87 L1532.84 692.87 L1533.4 692.87 L1533.96 692.87 L1534.52 692.87 L1535.08 692.87 L1535.63 692.87 L1536.19 692.87 L1536.75 692.87 L1537.31 692.87 L1537.87 692.87 L1538.43 692.87 L1538.99 692.87 L1539.55 692.87 L1540.11 692.87 L1540.67 692.87 L1541.23 692.87 L1541.79 692.87 L1542.35 692.87 L1542.9 692.87 L1543.46 692.87 L1544.02 692.87 L1544.58 692.87 L1545.14 692.87 L1545.7 692.87 L1546.26 692.87 L1546.82 692.87 L1547.38 692.87 L1547.94 692.87 L1548.5 692.87 L1549.06 692.87 L1549.62 692.87 L1550.18 692.87 L1550.73 692.87 L1551.29 692.87 L1551.85 692.87 L1552.41 692.87 L1552.97 692.87 L1553.53 692.87 L1554.09 692.87 L1554.65 692.87 L1555.21 692.87 L1555.77 692.87 L1556.33 692.87 L1556.89 692.87 L1557.45 692.87 L1558 692.87 L1558.56 692.87 L1559.12 692.87 L1559.68 692.87 L1560.24 692.87 L1560.8 692.87 L1561.36 692.87 L1561.92 692.87 L1562.48 692.87 L1563.04 692.87 L1563.6 692.87 L1564.16 692.87 L1564.72 692.87 L1565.28 692.87 L1565.83 692.87 L1566.39 692.87 L1566.95 692.87 L1567.51 692.87 L1568.07 692.87 L1568.63 692.87 L1569.19 692.87 L1569.75 692.87 L1570.31 692.87 L1570.87 692.87 L1571.43 692.87 L1571.99 692.87 L1572.55 692.87 L1573.1 692.87 L1573.66 692.87 L1574.22 692.87 L1574.78 692.87 L1575.34 692.87 L1575.9 692.87 L1576.46 692.87 L1577.02 692.87 L1577.58 692.87 L1578.14 692.87 L1578.7 692.87 L1579.26 692.87 L1579.82 692.87 L1580.37 692.87 L1580.93 692.87 L1581.49 692.87 L1582.05 692.87 L1582.61 692.87 L1583.17 692.87 L1583.73 692.87 L1584.29 692.87 L1584.85 692.87 L1585.41 692.87 L1585.97 692.87 L1586.53 692.87 L1587.09 692.87 L1587.65 692.87 L1588.2 692.87 L1588.76 692.87 L1589.32 692.87 L1589.88 692.87 L1590.44 692.87 L1591 692.87 L1591.56 692.87 L1592.12 692.87 L1592.68 692.87 L1593.24 692.87 L1593.8 692.87 L1594.36 692.87 L1594.92 692.87 L1595.47 692.87 L1596.03 692.87 L1596.59 692.87 L1597.15 692.87 L1597.71 692.87 L1598.27 692.87 L1598.83 692.87 L1599.39 692.87 L1599.95 692.87 L1600.51 692.87 L1601.07 692.87 L1601.63 692.87 L1602.19 692.87 L1602.74 692.87 L1603.3 692.87 L1603.86 692.87 L1604.42 692.87 L1604.98 692.87 L1605.54 692.87 L1606.1 692.87 L1606.66 692.87 L1607.22 692.87 L1607.78 692.87 L1608.34 692.87 L1608.9 692.87 L1609.46 692.87 L1610.02 692.87 L1610.57 692.87 L1611.13 692.87 L1611.69 692.87 L1612.25 692.87 L1612.81 692.87 L1613.37 692.87 L1613.93 692.87 L1614.49 692.87 L1615.05 692.87 L1615.61 692.87 L1616.17 692.87 L1616.73 692.87 L1617.29 692.87 L1617.84 692.87 L1618.4 692.87 L1618.96 692.87 L1619.52 692.87 L1620.08 692.87 L1620.64 692.87 L1621.2 692.87 L1621.76 692.87 L1622.32 692.87 L1622.88 692.87 L1623.44 692.87 L1624 692.87 L1624.56 692.87 L1625.11 692.87 L1625.67 692.87 L1626.23 692.87 L1626.79 692.87 L1627.35 692.87 L1627.91 692.87 L1628.47 692.87 L1629.03 692.87 L1629.59 692.87 L1630.15 692.87 L1630.71 692.87 L1631.27 692.87 L1631.83 692.87 L1632.39 692.87 L1632.94 692.87 L1633.5 692.87 L1634.06 692.87 L1634.62 692.87 L1635.18 692.87 L1635.74 692.87 L1636.3 692.87 L1636.86 692.87 L1637.42 692.87 L1637.98 692.87 L1638.54 692.87 L1639.1 692.87 L1639.66 692.87 L1640.21 692.87 L1640.77 692.87 L1641.33 692.87 L1641.89 692.87 L1642.45 692.87 L1643.01 692.87 L1643.57 692.87 L1644.13 692.87 L1644.69 692.87 L1645.25 692.87 L1645.81 692.87 L1646.37 692.87 L1646.93 692.87 L1647.48 692.87 L1648.04 692.87 L1648.6 692.87 L1649.16 692.87 L1649.72 692.87 L1650.28 692.87 L1650.84 692.87 L1651.4 692.87 L1651.96 692.87 L1652.52 692.87 L1653.08 692.87 L1653.64 692.87 L1654.2 692.87 L1654.76 692.87 L1655.31 692.87 L1655.87 692.87 L1656.43 692.87 L1656.99 692.87 L1657.55 692.87 L1658.11 692.87 L1658.67 692.87 L1659.23 692.87 L1659.79 692.87 L1660.35 692.87 L1660.91 692.87 L1661.47 692.87 L1662.03 692.87 L1662.58 692.87 L1663.14 692.87 L1663.7 692.87 L1664.26 692.87 L1664.82 692.87 L1665.38 692.87 L1665.94 692.87 L1666.5 692.87 L1667.06 692.87 L1667.62 692.87 L1668.18 692.87 L1668.74 692.87 L1669.3 692.87 L1669.85 692.87 L1670.41 692.87 L1670.97 692.87 L1671.53 692.87 L1672.09 692.87 L1672.65 692.87 L1673.21 692.87 L1673.77 692.87 L1674.33 692.87 L1674.89 692.87 L1675.45 692.87 L1676.01 692.87 L1676.57 692.87 L1677.13 692.87 L1677.68 692.87 L1678.24 692.87 L1678.8 692.87 L1679.36 692.87 L1679.92 692.87 L1680.48 692.87 L1681.04 692.87 L1681.6 692.87 L1682.16 692.87 L1682.72 692.87 L1683.28 692.87 L1683.84 692.87 L1684.4 692.87 L1684.95 692.87 L1685.51 692.87 L1686.07 692.87 L1686.63 692.87 L1687.19 692.87 L1687.75 692.87 L1688.31 692.87 L1688.87 692.87 L1689.43 692.87 L1689.99 692.87 L1690.55 692.87 L1691.11 692.87 L1691.67 692.87 L1692.23 692.87 L1692.78 692.87 L1693.34 692.87 L1693.9 692.87 L1694.46 692.87 L1695.02 692.87 L1695.58 692.87 L1696.14 692.87 L1696.7 692.87 L1697.26 692.87 L1697.82 692.87 L1698.38 692.87 L1698.94 692.87 L1699.5 692.87 L1700.05 692.87 L1700.61 692.87 L1701.17 692.87 L1701.73 692.87 L1702.29 692.87 L1702.85 692.87 L1703.41 692.87 L1703.97 692.87 L1704.53 692.87 L1705.09 692.87 L1705.65 692.87 L1706.21 692.87 L1706.77 692.87 L1707.32 692.87 L1707.88 692.87 L1708.44 692.87 L1709 692.87 L1709.56 692.87 L1710.12 692.87 L1710.68 692.87 L1711.24 692.87 L1711.8 692.87 L1712.36 692.87 L1712.92 692.87 L1713.48 692.87 L1714.04 692.87 L1714.6 692.87 L1715.15 692.87 L1715.71 692.87 L1716.27 692.87 L1716.83 692.87 L1717.39 692.87 L1717.95 692.87 L1718.51 692.87 L1719.07 692.87 L1719.63 692.87 L1720.19 692.87 L1720.75 692.87 L1721.31 692.87 L1721.87 692.87 L1722.42 692.87 L1722.98 692.87 L1723.54 692.87 L1724.1 692.87 L1724.66 692.87 L1725.22 692.87 L1725.78 692.87 L1726.34 692.87 L1726.9 692.87 L1727.46 692.87 L1728.02 692.87 L1728.58 692.87 L1729.14 692.87 L1729.69 692.87 L1730.25 692.87 L1730.81 692.87 L1731.37 692.87 L1731.93 692.87 L1732.49 692.87 L1733.05 692.87 L1733.61 692.87 L1734.17 692.87 L1734.73 692.87 L1735.29 692.87 L1735.85 692.87 L1736.41 692.87 L1736.97 692.87 L1737.52 692.87 L1738.08 692.87 L1738.64 692.87 L1739.2 692.87 L1739.76 692.87 L1740.32 692.87 L1740.88 692.87 L1741.44 692.87 L1742 692.87 L1742.56 692.87 L1743.12 692.87 L1743.68 692.87 L1744.24 692.87 L1744.79 692.87 L1745.35 692.87 L1745.91 692.87 L1746.47 692.87 L1747.03 692.87 L1747.59 692.87 L1748.15 692.87 L1748.71 692.87 L1749.27 692.87 L1749.83 692.87 L1750.39 692.87 L1750.95 692.87 L1751.51 692.87 L1752.06 692.87 L1752.62 692.87 L1753.18 692.87 L1753.74 692.87 L1754.3 692.87 L1754.86 692.87 L1755.42 692.87 L1755.98 692.87 L1756.54 692.87 L1757.1 692.87 L1757.66 692.87 L1758.22 692.87 L1758.78 692.87 L1759.34 692.87 L1759.89 692.87 L1760.45 692.87 L1761.01 692.87 L1761.57 692.87 L1762.13 692.87 L1762.69 692.87 L1763.25 692.87 L1763.81 692.87 L1764.37 692.87 L1764.93 692.87 L1765.49 692.87 L1766.05 692.87 L1766.61 692.87 L1767.16 692.87 L1767.72 692.87 L1768.28 692.87 L1768.84 692.87 L1769.4 692.87 L1769.96 692.87 L1770.52 692.87 L1771.08 692.87 L1771.64 692.87 L1772.2 692.87 L1772.76 692.87 L1773.32 692.87 L1773.88 692.87 L1774.43 692.87 L1774.99 692.87 L1775.55 692.87 L1776.11 692.87 L1776.67 692.87 L1777.23 692.87 L1777.79 692.87 L1778.35 692.87 L1778.91 692.87 L1779.47 692.87 L1780.03 692.87 L1780.59 692.87 L1781.15 692.87 L1781.71 692.87 L1782.26 692.87 L1782.82 692.87 L1783.38 692.87 L1783.94 692.87 L1784.5 692.87 L1785.06 692.87 L1785.62 692.87 L1786.18 692.87 L1786.74 692.87 L1787.3 692.87 L1787.86 692.87 L1788.42 692.87 L1788.98 692.87 L1789.53 692.87 L1790.09 692.87 L1790.65 692.87 L1791.21 692.87 L1791.77 692.87 L1792.33 692.87 L1792.89 692.87 L1793.45 692.87 L1794.01 692.87 L1794.57 692.87 L1795.13 692.87 L1795.69 692.87 L1796.25 692.87 L1796.8 692.87 L1797.36 692.87 L1797.92 692.87 L1798.48 692.87 L1799.04 692.87 L1799.6 692.87 L1800.16 692.87 L1800.72 692.87 L1801.28 692.87 L1801.84 692.87 L1802.4 692.87 L1802.96 692.87 L1803.52 692.87 L1804.08 692.87 L1804.63 692.87 L1805.19 692.87 L1805.75 692.87 L1806.31 692.87 L1806.87 692.87 L1807.43 692.87 L1807.99 692.87 L1808.55 692.87 L1809.11 692.87 L1809.67 692.87 L1810.23 692.87 L1810.79 692.87 L1811.35 692.87 L1811.9 692.87 L1812.46 692.87 L1813.02 692.87 L1813.58 692.87 L1814.14 692.87 L1814.7 692.87 L1815.26 692.87 L1815.82 692.87 L1816.38 692.87 L1816.94 692.87 L1817.5 692.87 L1818.06 692.87 L1818.62 692.87 L1819.18 692.87 L1819.73 692.87 L1820.29 692.87 L1820.85 692.87 L1821.41 692.87 L1821.97 692.87 L1822.53 692.87 L1823.09 692.87 L1823.65 692.87 L1824.21 692.87 L1824.77 692.87 L1825.33 692.87 L1825.89 692.87 L1826.45 692.87 L1827 692.87 L1827.56 692.87 L1828.12 692.87 L1828.68 692.87 L1829.24 692.87 L1829.8 692.87 L1830.36 692.87 L1830.92 692.87 L1831.48 692.87 L1832.04 692.87 L1832.6 692.87 L1833.16 692.87 L1833.72 692.87 L1834.27 692.87 L1834.83 692.87 L1835.39 692.87 L1835.95 692.87 L1836.51 692.87 L1837.07 692.87 L1837.63 692.87 L1838.19 692.87 L1838.19 684.212 L1837.63 684.212 L1837.07 684.212 L1836.51 684.212 L1835.95 684.212 L1835.39 684.212 L1834.83 684.212 L1834.27 684.212 L1833.72 684.212 L1833.16 684.212 L1832.6 684.212 L1832.04 684.212 L1831.48 684.212 L1830.92 684.212 L1830.36 684.212 L1829.8 684.212 L1829.24 684.212 L1828.68 684.212 L1828.12 684.212 L1827.56 684.212 L1827 684.212 L1826.45 684.212 L1825.89 684.212 L1825.33 684.212 L1824.77 684.212 L1824.21 684.212 L1823.65 684.212 L1823.09 684.212 L1822.53 684.212 L1821.97 684.212 L1821.41 684.212 L1820.85 684.212 L1820.29 684.212 L1819.73 684.212 L1819.18 684.212 L1818.62 684.212 L1818.06 684.212 L1817.5 684.212 L1816.94 684.212 L1816.38 684.212 L1815.82 684.212 L1815.26 684.212 L1814.7 684.212 L1814.14 684.212 L1813.58 684.212 L1813.02 684.212 L1812.46 684.212 L1811.9 684.212 L1811.35 684.212 L1810.79 684.212 L1810.23 684.212 L1809.67 684.212 L1809.11 684.212 L1808.55 684.212 L1807.99 684.212 L1807.43 684.212 L1806.87 684.212 L1806.31 684.212 L1805.75 684.212 L1805.19 684.212 L1804.63 684.212 L1804.08 684.212 L1803.52 684.212 L1802.96 684.212 L1802.4 684.212 L1801.84 684.212 L1801.28 684.212 L1800.72 684.212 L1800.16 684.212 L1799.6 684.212 L1799.04 684.212 L1798.48 684.212 L1797.92 684.212 L1797.36 684.212 L1796.8 684.212 L1796.25 684.212 L1795.69 684.212 L1795.13 684.212 L1794.57 684.212 L1794.01 684.212 L1793.45 684.212 L1792.89 684.212 L1792.33 684.212 L1791.77 684.212 L1791.21 684.212 L1790.65 684.212 L1790.09 684.212 L1789.53 684.212 L1788.98 684.212 L1788.42 684.212 L1787.86 684.212 L1787.3 684.212 L1786.74 684.212 L1786.18 684.212 L1785.62 684.212 L1785.06 684.212 L1784.5 684.212 L1783.94 684.212 L1783.38 684.212 L1782.82 684.212 L1782.26 684.212 L1781.71 684.212 L1781.15 684.212 L1780.59 684.212 L1780.03 684.212 L1779.47 684.212 L1778.91 684.212 L1778.35 684.212 L1777.79 684.212 L1777.23 684.212 L1776.67 684.212 L1776.11 684.212 L1775.55 684.212 L1774.99 684.212 L1774.43 684.212 L1773.88 684.212 L1773.32 684.212 L1772.76 684.212 L1772.2 684.212 L1771.64 684.212 L1771.08 684.212 L1770.52 684.212 L1769.96 684.212 L1769.4 684.212 L1768.84 684.212 L1768.28 684.212 L1767.72 684.212 L1767.16 684.212 L1766.61 684.212 L1766.05 684.212 L1765.49 684.212 L1764.93 684.212 L1764.37 684.212 L1763.81 684.212 L1763.25 684.212 L1762.69 684.212 L1762.13 684.212 L1761.57 684.212 L1761.01 684.212 L1760.45 684.212 L1759.89 684.212 L1759.34 684.212 L1758.78 684.212 L1758.22 684.212 L1757.66 684.212 L1757.1 684.212 L1756.54 684.212 L1755.98 684.212 L1755.42 684.212 L1754.86 684.212 L1754.3 684.212 L1753.74 684.212 L1753.18 684.212 L1752.62 684.212 L1752.06 684.212 L1751.51 684.212 L1750.95 684.212 L1750.39 684.212 L1749.83 684.212 L1749.27 684.212 L1748.71 684.212 L1748.15 684.212 L1747.59 684.212 L1747.03 684.212 L1746.47 684.212 L1745.91 684.212 L1745.35 684.212 L1744.79 684.212 L1744.24 684.212 L1743.68 684.212 L1743.12 684.212 L1742.56 684.212 L1742 684.212 L1741.44 684.212 L1740.88 684.212 L1740.32 684.212 L1739.76 684.212 L1739.2 684.212 L1738.64 684.212 L1738.08 684.212 L1737.52 684.212 L1736.97 684.212 L1736.41 684.212 L1735.85 684.212 L1735.29 684.212 L1734.73 684.212 L1734.17 684.212 L1733.61 684.212 L1733.05 684.212 L1732.49 684.212 L1731.93 684.212 L1731.37 684.212 L1730.81 684.212 L1730.25 684.212 L1729.69 684.212 L1729.14 684.212 L1728.58 684.212 L1728.02 684.212 L1727.46 684.212 L1726.9 684.212 L1726.34 684.212 L1725.78 684.212 L1725.22 684.212 L1724.66 684.212 L1724.1 684.212 L1723.54 684.212 L1722.98 684.212 L1722.42 684.212 L1721.87 684.212 L1721.31 684.212 L1720.75 684.212 L1720.19 684.212 L1719.63 684.212 L1719.07 684.212 L1718.51 684.212 L1717.95 684.212 L1717.39 684.212 L1716.83 684.212 L1716.27 684.212 L1715.71 684.212 L1715.15 684.212 L1714.6 684.212 L1714.04 684.212 L1713.48 684.212 L1712.92 684.212 L1712.36 684.212 L1711.8 684.212 L1711.24 684.212 L1710.68 684.212 L1710.12 684.212 L1709.56 684.212 L1709 684.212 L1708.44 684.212 L1707.88 684.212 L1707.32 684.212 L1706.77 684.212 L1706.21 684.212 L1705.65 684.212 L1705.09 684.212 L1704.53 684.212 L1703.97 684.212 L1703.41 684.212 L1702.85 684.212 L1702.29 684.212 L1701.73 684.212 L1701.17 684.212 L1700.61 684.212 L1700.05 684.212 L1699.5 684.212 L1698.94 684.212 L1698.38 684.212 L1697.82 684.212 L1697.26 684.212 L1696.7 684.212 L1696.14 684.212 L1695.58 684.212 L1695.02 684.212 L1694.46 684.212 L1693.9 684.212 L1693.34 684.212 L1692.78 684.212 L1692.23 684.212 L1691.67 684.212 L1691.11 684.212 L1690.55 684.212 L1689.99 684.212 L1689.43 684.212 L1688.87 684.212 L1688.31 684.212 L1687.75 684.212 L1687.19 684.212 L1686.63 684.212 L1686.07 684.212 L1685.51 684.212 L1684.95 684.212 L1684.4 684.212 L1683.84 684.212 L1683.28 684.212 L1682.72 684.212 L1682.16 684.212 L1681.6 684.212 L1681.04 684.212 L1680.48 684.212 L1679.92 684.212 L1679.36 684.212 L1678.8 684.212 L1678.24 684.212 L1677.68 684.212 L1677.13 684.212 L1676.57 684.212 L1676.01 684.212 L1675.45 684.212 L1674.89 684.212 L1674.33 684.212 L1673.77 684.212 L1673.21 684.212 L1672.65 684.212 L1672.09 684.212 L1671.53 684.212 L1670.97 684.212 L1670.41 684.212 L1669.85 684.212 L1669.3 684.212 L1668.74 684.212 L1668.18 684.212 L1667.62 684.212 L1667.06 684.212 L1666.5 684.212 L1665.94 684.212 L1665.38 684.212 L1664.82 684.212 L1664.26 684.212 L1663.7 684.212 L1663.14 684.212 L1662.58 684.212 L1662.03 684.212 L1661.47 684.212 L1660.91 684.212 L1660.35 684.212 L1659.79 684.212 L1659.23 684.212 L1658.67 684.212 L1658.11 684.212 L1657.55 684.212 L1656.99 684.212 L1656.43 684.212 L1655.87 684.212 L1655.31 684.212 L1654.76 684.212 L1654.2 684.212 L1653.64 684.212 L1653.08 684.212 L1652.52 684.212 L1651.96 684.212 L1651.4 684.212 L1650.84 684.212 L1650.28 684.212 L1649.72 684.212 L1649.16 684.212 L1648.6 684.212 L1648.04 684.212 L1647.48 684.212 L1646.93 684.212 L1646.37 684.212 L1645.81 684.212 L1645.25 684.212 L1644.69 684.212 L1644.13 684.212 L1643.57 684.212 L1643.01 684.212 L1642.45 684.212 L1641.89 684.212 L1641.33 684.212 L1640.77 684.212 L1640.21 684.212 L1639.66 684.212 L1639.1 684.212 L1638.54 684.212 L1637.98 684.212 L1637.42 684.212 L1636.86 684.212 L1636.3 684.212 L1635.74 684.212 L1635.18 684.212 L1634.62 684.212 L1634.06 684.212 L1633.5 684.212 L1632.94 684.212 L1632.39 684.212 L1631.83 684.212 L1631.27 684.212 L1630.71 684.212 L1630.15 684.212 L1629.59 684.212 L1629.03 684.212 L1628.47 684.212 L1627.91 684.212 L1627.35 684.212 L1626.79 684.212 L1626.23 684.212 L1625.67 684.212 L1625.11 684.212 L1624.56 684.212 L1624 684.212 L1623.44 684.212 L1622.88 684.212 L1622.32 684.212 L1621.76 684.212 L1621.2 684.212 L1620.64 684.212 L1620.08 684.212 L1619.52 684.212 L1618.96 684.212 L1618.4 684.212 L1617.84 684.212 L1617.29 684.212 L1616.73 684.212 L1616.17 684.212 L1615.61 684.212 L1615.05 684.212 L1614.49 684.212 L1613.93 684.212 L1613.37 684.212 L1612.81 684.212 L1612.25 684.212 L1611.69 684.212 L1611.13 684.212 L1610.57 684.212 L1610.02 684.212 L1609.46 684.212 L1608.9 684.212 L1608.34 684.212 L1607.78 684.212 L1607.22 684.212 L1606.66 684.212 L1606.1 684.212 L1605.54 684.212 L1604.98 684.212 L1604.42 684.212 L1603.86 684.212 L1603.3 684.212 L1602.74 684.212 L1602.19 684.212 L1601.63 684.212 L1601.07 684.212 L1600.51 684.212 L1599.95 684.212 L1599.39 684.212 L1598.83 684.212 L1598.27 684.212 L1597.71 684.212 L1597.15 684.212 L1596.59 684.212 L1596.03 684.212 L1595.47 684.212 L1594.92 684.212 L1594.36 684.212 L1593.8 684.212 L1593.24 684.212 L1592.68 684.212 L1592.12 684.212 L1591.56 684.212 L1591 684.212 L1590.44 684.212 L1589.88 684.212 L1589.32 684.212 L1588.76 684.212 L1588.2 684.212 L1587.65 684.212 L1587.09 684.212 L1586.53 684.212 L1585.97 684.212 L1585.41 684.212 L1584.85 684.212 L1584.29 684.212 L1583.73 684.212 L1583.17 684.212 L1582.61 684.212 L1582.05 684.212 L1581.49 684.212 L1580.93 684.212 L1580.37 684.212 L1579.82 684.212 L1579.26 684.212 L1578.7 684.212 L1578.14 684.212 L1577.58 684.212 L1577.02 684.212 L1576.46 684.212 L1575.9 684.212 L1575.34 684.212 L1574.78 684.212 L1574.22 684.212 L1573.66 684.212 L1573.1 684.212 L1572.55 684.212 L1571.99 684.212 L1571.43 684.212 L1570.87 684.212 L1570.31 684.212 L1569.75 684.212 L1569.19 684.212 L1568.63 684.212 L1568.07 684.212 L1567.51 684.212 L1566.95 684.212 L1566.39 684.212 L1565.83 684.212 L1565.28 684.212 L1564.72 684.212 L1564.16 684.212 L1563.6 684.212 L1563.04 684.212 L1562.48 684.212 L1561.92 684.212 L1561.36 684.212 L1560.8 684.212 L1560.24 684.212 L1559.68 684.212 L1559.12 684.212 L1558.56 684.212 L1558 684.212 L1557.45 684.212 L1556.89 684.212 L1556.33 684.212 L1555.77 684.212 L1555.21 684.212 L1554.65 684.212 L1554.09 684.212 L1553.53 684.212 L1552.97 684.212 L1552.41 684.212 L1551.85 684.212 L1551.29 684.212 L1550.73 684.212 L1550.18 684.212 L1549.62 684.212 L1549.06 684.212 L1548.5 684.212 L1547.94 684.212 L1547.38 684.212 L1546.82 684.212 L1546.26 684.212 L1545.7 684.212 L1545.14 684.212 L1544.58 684.212 L1544.02 684.212 L1543.46 684.212 L1542.9 684.212 L1542.35 684.212 L1541.79 684.212 L1541.23 684.212 L1540.67 684.212 L1540.11 684.212 L1539.55 684.212 L1538.99 684.212 L1538.43 684.212 L1537.87 684.212 L1537.31 684.212 L1536.75 684.212 L1536.19 684.212 L1535.63 684.212 L1535.08 684.212 L1534.52 684.212 L1533.96 684.212 L1533.4 684.212 L1532.84 684.212 L1532.28 684.212 L1531.72 684.212 L1531.16 684.212 L1530.6 684.212 L1530.04 684.212 L1529.48 684.212 L1528.92 684.212 L1528.36 684.212 L1527.81 684.212 L1527.25 684.212 L1526.69 684.212 L1526.13 684.212 L1525.57 684.212 L1525.01 684.212 L1524.45 684.212 L1523.89 684.212 L1523.33 684.212 L1522.77 684.212 L1522.21 684.212 L1521.65 684.212 L1521.09 684.212 L1520.53 684.212 L1519.98 684.212 L1519.42 684.212 L1518.86 684.212 L1518.3 684.212 L1517.74 684.212 L1517.18 684.212 L1516.62 684.212 L1516.06 684.212 L1515.5 684.212 L1514.94 684.212 L1514.38 684.212 L1513.82 684.212 L1513.26 684.212 L1512.71 684.212 L1512.15 684.212 L1511.59 684.212 L1511.03 684.212 L1510.47 684.212 L1509.91 684.212 L1509.35 684.212 L1508.79 684.212 L1508.23 684.212 L1507.67 684.212 L1507.11 684.212 L1506.55 684.212 L1505.99 684.212 L1505.44 684.212 L1504.88 684.212 L1504.32 684.212 L1503.76 684.212 L1503.2 684.212 L1502.64 684.212 L1502.08 684.212 L1501.52 684.212 L1500.96 684.212 L1500.4 684.212 L1499.84 684.212 L1499.28 684.212 L1498.72 684.212 L1498.16 684.212 L1497.61 684.212 L1497.05 684.212 L1496.49 684.212 L1495.93 684.212 L1495.37 684.212 L1494.81 684.212 L1494.25 684.212 L1493.69 684.212 L1493.13 684.212 L1492.57 684.212 L1492.01 684.212 L1491.45 684.212 L1490.89 684.212 L1490.34 684.212 L1489.78 684.212 L1489.22 684.212 L1488.66 684.212 L1488.1 684.212 L1487.54 684.212 L1486.98 684.212 L1486.42 684.212 L1485.86 684.212 L1485.3 684.212 L1484.74 684.212 L1484.18 684.212 L1483.62 684.212 L1483.07 684.212 L1482.51 684.212 L1481.95 684.212 L1481.39 684.212 L1480.83 684.212 L1480.27 684.212 L1479.71 684.212 L1479.15 684.212 L1478.59 684.212 L1478.03 684.212 L1477.47 684.212 L1476.91 684.212 L1476.35 684.212 L1475.79 684.212 L1475.24 684.212 L1474.68 684.212 L1474.12 684.212 L1473.56 684.212 L1473 684.212 L1472.44 684.212 L1471.88 684.212 L1471.32 684.212 L1470.76 684.212 L1470.2 684.212 L1469.64 684.212 L1469.08 684.212 L1468.52 684.212 L1467.97 684.212 L1467.41 684.212 L1466.85 684.212 L1466.29 684.212 L1465.73 684.212 L1465.17 684.212 L1464.61 684.212 L1464.05 684.212 L1463.49 684.212 L1462.93 684.212 L1462.37 684.212 L1461.81 684.212 L1461.25 684.212 L1460.7 684.212 L1460.14 684.212 L1459.58 684.212 L1459.02 684.212 L1458.46 684.212 L1457.9 684.212 L1457.34 684.212 L1456.78 684.212 L1456.22 684.212 L1455.66 684.212 L1455.1 684.212 L1454.54 684.212 L1453.98 684.212 L1453.42 684.212 L1452.87 684.212 L1452.31 684.212 L1451.75 684.212 L1451.19 684.212 L1450.63 684.212 L1450.07 684.212 L1449.51 684.212 L1448.95 684.212 L1448.39 684.212 L1447.83 684.212 L1447.27 684.212 L1446.71 684.212 L1446.15 684.212 L1445.6 684.212 L1445.04 684.212 L1444.48 684.212 L1443.92 684.212 L1443.36 684.212 L1442.8 684.212 L1442.24 684.212 L1441.68 684.212 L1441.12 684.212 L1440.56 684.212 L1440 684.212 L1439.44 684.212 L1438.88 684.212 L1438.33 684.212 L1437.77 684.212 L1437.21 684.212 L1436.65 684.212 L1436.09 684.212 L1435.53 684.212 L1434.97 684.212 L1434.41 684.212 L1433.85 684.212 L1433.29 684.212 L1432.73 684.212 L1432.17 684.212 L1431.61 684.212 L1431.05 684.212 L1430.5 684.212 L1429.94 684.212 L1429.38 684.212 L1428.82 684.212 L1428.26 684.212 L1427.7 684.212 L1427.14 684.212 L1426.58 684.212 L1426.02 684.212 L1425.46 684.212 L1424.9 684.212 L1424.34 684.212 L1423.78 684.212 L1423.23 684.212 L1422.67 684.212 L1422.11 684.212 L1421.55 684.212 L1420.99 684.212 L1420.43 684.212 L1419.87 684.212 L1419.31 684.212 L1418.75 684.212 L1418.19 684.212 L1417.63 684.212 L1417.07 684.212 L1416.51 684.212 L1415.95 684.212 L1415.4 684.212 L1414.84 684.212 L1414.28 684.212 L1413.72 684.212 L1413.16 684.212 L1412.6 684.212 L1412.04 684.212 L1411.48 684.212 L1410.92 684.212 L1410.36 684.212 L1409.8 684.212 L1409.24 684.212 L1408.68 684.212 L1408.13 684.212 L1407.57 684.212 L1407.01 684.212 L1406.45 684.212 L1405.89 684.212 L1405.33 684.212 L1404.77 684.212 L1404.21 684.212 L1403.65 684.212 L1403.09 684.212 L1402.53 684.212 L1401.97 684.212 L1401.41 684.212 L1400.86 684.212 L1400.3 684.212 L1399.74 684.212 L1399.18 684.212 L1398.62 684.212 L1398.06 684.212 L1397.5 684.212 L1396.94 684.212 L1396.38 684.212 L1395.82 684.212 L1395.26 684.212 L1394.7 684.212 L1394.14 684.212 L1393.58 684.212 L1393.03 684.212 L1392.47 684.212 L1391.91 684.212 L1391.35 684.212 L1390.79 684.212 L1390.23 684.212 L1389.67 684.212 L1389.11 684.212 L1388.55 684.212 L1387.99 684.212 L1387.43 684.212 L1386.87 684.212 L1386.31 684.212 L1385.76 684.212 L1385.2 684.212 L1384.64 684.212 L1384.08 684.212 L1383.52 684.212 L1382.96 684.212 L1382.4 684.212 L1381.84 684.212 L1381.28 684.212 L1380.72 684.212 L1380.16 684.212 L1379.6 684.212 L1379.04 684.212 L1378.49 684.212 L1377.93 684.212 L1377.37 684.212 L1376.81 684.212 L1376.25 684.212 L1375.69 684.212 L1375.13 684.212 L1374.57 684.212 L1374.01 684.212 L1373.45 684.212 L1372.89 684.212 L1372.33 684.212 L1371.77 684.212 L1371.21 684.212 L1370.66 684.212 L1370.1 684.212 L1369.54 684.212 L1368.98 684.212 L1368.42 684.212 L1367.86 684.212 L1367.3 684.212 L1366.74 684.212 L1366.18 684.212 L1365.62 684.212 L1365.06 684.212 L1364.5 684.212 L1363.94 684.212 L1363.39 684.212 L1362.83 684.212 L1362.27 684.212 L1361.71 684.212 L1361.15 684.212 L1360.59 684.212 L1360.03 684.212 L1359.47 684.212 L1358.91 684.212 L1358.35 684.212 L1357.79 684.212 L1357.23 684.212 L1356.67 684.212 L1356.12 684.212 L1355.56 684.212 L1355 684.212 L1354.44 684.212 L1353.88 684.212 L1353.32 684.212 L1352.76 684.212 L1352.2 684.212 L1351.64 684.212 L1351.08 684.212 L1350.52 684.212 L1349.96 684.212 L1349.4 684.212 L1348.84 684.212 L1348.29 684.212 L1347.73 684.212 L1347.17 684.212 L1346.61 684.212 L1346.05 684.212 L1345.49 684.212 L1344.93 684.212 L1344.37 684.212 L1343.81 684.212 L1343.25 684.212 L1342.69 684.212 L1342.13 684.212 L1341.57 684.212 L1341.02 684.212 L1340.46 684.212 L1339.9 684.212 L1339.34 684.212 L1338.78 684.212 L1338.22 684.212 L1337.66 684.212 L1337.1 684.212 L1336.54 684.212 L1335.98 684.212 L1335.42 684.212 L1334.86 684.212 L1334.3 684.212 L1333.75 684.212 L1333.19 684.212 L1332.63 684.212 L1332.07 684.212 L1331.51 684.212 L1330.95 684.212 L1330.39 684.212 L1329.83 684.212 L1329.27 684.212 L1328.71 684.212 L1328.15 684.212 L1327.59 684.212 L1327.03 684.212 L1326.47 684.212 L1325.92 684.212 L1325.36 684.212 L1324.8 684.212 L1324.24 684.212 L1323.68 684.212 L1323.12 684.212 L1322.56 684.212 L1322 684.212 L1321.44 684.212 L1320.88 684.212 L1320.32 684.212 L1319.76 684.212 L1319.2 684.212 L1318.65 684.212 L1318.09 684.212 L1317.53 684.212 L1316.97 684.212 L1316.41 684.212 L1315.85 684.212 L1315.29 684.212 L1314.73 684.212 L1314.17 684.212 L1313.61 684.212 L1313.05 684.212 L1312.49 684.212 L1311.93 684.212 L1311.38 684.212 L1310.82 684.212 L1310.26 684.212 L1309.7 684.212 L1309.14 684.212 L1308.58 684.212 L1308.02 684.212 L1307.46 684.212 L1306.9 684.212 L1306.34 684.212 L1305.78 684.212 L1305.22 684.212 L1304.66 684.212 L1304.1 684.212 L1303.55 684.212 L1302.99 684.212 L1302.43 684.212 L1301.87 684.212 L1301.31 684.212 L1300.75 684.212 L1300.19 684.212 L1299.63 684.212 L1299.07 684.212 L1298.51 684.212 L1297.95 684.212 L1297.39 684.212 L1296.83 684.212 L1296.28 684.212 L1295.72 684.212 L1295.16 684.212 L1294.6 684.212 L1294.04 684.212 L1293.48 684.212 L1292.92 684.212 L1292.36 684.212 L1291.8 684.212 L1291.24 684.212 L1290.68 684.212 L1290.12 684.212 L1289.56 684.212 L1289 684.212 L1288.45 684.212 L1287.89 684.212 L1287.33 684.212 L1286.77 684.212 L1286.21 684.212 L1285.65 684.212 L1285.09 684.212 L1284.53 684.212 L1283.97 684.212 L1283.41 684.212 L1282.85 684.212 L1282.29 684.212 L1281.73 684.212 L1281.18 684.212 L1280.62 684.212 L1280.06 684.212 L1279.5 684.212 L1278.94 684.212 L1278.38 684.212 L1277.82 684.212 L1277.26 684.212 L1276.7 684.212 L1276.14 684.212 L1275.58 684.212 L1275.02 684.212 L1274.46 684.212 L1273.91 684.212 L1273.35 684.212 L1272.79 684.212 L1272.23 684.212 L1271.67 684.212 L1271.11 684.212 L1270.55 684.212 L1269.99 684.212 L1269.43 684.212 L1268.87 684.212 L1268.31 684.212 L1267.75 684.212 L1267.19 684.212 L1266.63 684.212 L1266.08 684.212 L1265.52 684.212 L1264.96 684.212 L1264.4 684.212 L1263.84 684.212 L1263.28 684.212 L1262.72 684.212 L1262.16 684.212 L1261.6 684.212 L1261.04 684.212 L1260.48 684.212 L1259.92 684.212 L1259.36 684.212 L1258.81 684.212 L1258.25 684.212 L1257.69 684.212 L1257.13 684.212 L1256.57 684.212 L1256.01 684.212 L1255.45 684.212 L1254.89 684.212 L1254.33 684.212 L1253.77 684.212 L1253.21 684.212 L1252.65 684.212 L1252.09 684.212 L1251.54 684.212 L1250.98 684.212 L1250.42 684.212 L1249.86 684.212 L1249.3 684.212 L1248.74 684.212 L1248.18 684.212 L1247.62 684.212 L1247.06 684.212 L1246.5 684.212 L1245.94 684.212 L1245.38 684.212 L1244.82 684.212 L1244.26 684.212 L1243.71 684.212 L1243.15 684.212 L1242.59 684.212 L1242.03 684.212 L1241.47 684.212 L1240.91 684.212 L1240.35 684.212 L1239.79 684.212 L1239.23 684.212 L1238.67 684.212 L1238.11 684.212 L1237.55 684.212 L1236.99 684.212 L1236.44 684.212 L1235.88 684.212 L1235.32 684.212 L1234.76 684.212 L1234.2 684.212 L1233.64 684.212 L1233.08 684.212 L1232.52 684.212 L1231.96 684.212 L1231.4 684.212 L1230.84 684.212 L1230.28 684.212 L1229.72 684.212 L1229.17 684.212 L1228.61 684.212 L1228.05 684.212 L1227.49 684.212 L1226.93 684.212 L1226.37 684.212 L1225.81 684.212 L1225.25 684.212 L1224.69 684.212 L1224.13 684.212 L1223.57 684.212 L1223.01 684.212 L1222.45 684.212 L1221.89 684.212 L1221.34 684.212 L1220.78 684.212 L1220.22 684.212 L1219.66 684.212 L1219.1 684.212 L1218.54 684.212 L1217.98 684.212 L1217.42 684.212 L1216.86 684.212 L1216.3 684.212 L1215.74 684.212 L1215.18 684.212 L1214.62 684.212 L1214.07 684.212 L1213.51 684.212 L1212.95 684.212 L1212.39 684.212 L1211.83 684.212 L1211.27 684.212 L1210.71 684.212 L1210.15 684.212 L1209.59 684.212 L1209.03 684.212 L1208.47 684.212 L1207.91 684.212 L1207.35 684.212 L1206.8 684.212 L1206.24 684.212 L1205.68 684.212 L1205.12 684.212 L1204.56 684.212 L1204 684.212 L1203.44 684.212 L1202.88 684.212 L1202.32 684.212 L1201.76 684.212 L1201.2 684.212 L1200.64 684.212 L1200.08 684.212 L1199.52 684.212 L1198.97 684.212 L1198.41 684.212 L1197.85 684.212 L1197.29 684.212 L1196.73 684.212 L1196.17 684.212 L1195.61 684.212 L1195.05 684.212 L1194.49 684.212 L1193.93 684.212 L1193.37 684.212 L1192.81 684.212 L1192.25 684.212 L1191.7 684.212 L1191.14 684.212 L1190.58 684.212 L1190.02 684.212 L1189.46 684.212 L1188.9 684.212 L1188.34 684.212 L1187.78 684.212 L1187.22 684.212 L1186.66 684.212 L1186.1 684.212 L1185.54 684.212 L1184.98 684.212 L1184.43 684.212 L1183.87 684.212 L1183.31 684.212 L1182.75 684.212 L1182.19 684.212 L1181.63 684.212 L1181.07 684.212 L1180.51 684.212 L1179.95 684.212 L1179.39 684.212 L1178.83 684.212 L1178.27 684.212 L1177.71 684.212 L1177.15 684.212 L1176.6 684.212 L1176.04 684.212 L1175.48 684.212 L1174.92 684.212 L1174.36 684.212 L1173.8 684.212 L1173.24 684.212 L1172.68 684.212 L1172.12 684.212 L1171.56 684.212 L1171 684.212 L1170.44 684.212 L1169.88 684.212 L1169.33 684.212 L1168.77 684.212 L1168.21 684.212 L1167.65 684.212 L1167.09 684.212 L1166.53 684.212 L1165.97 684.212 L1165.41 684.212 L1164.85 684.212 L1164.29 684.212 L1163.73 684.212 L1163.17 684.212 L1162.61 684.212 L1162.05 684.212 L1161.5 684.212 L1160.94 684.212 L1160.38 684.212 L1159.82 684.212 L1159.26 684.212 L1158.7 684.212 L1158.14 684.212 L1157.58 684.212 L1157.02 684.212 L1156.46 684.212 L1155.9 684.212 L1155.34 684.212 L1154.78 684.212 L1154.23 684.212 L1153.67 684.212 L1153.11 684.212 L1152.55 684.212 L1151.99 684.212 L1151.43 684.212 L1150.87 684.212 L1150.31 684.212 L1149.75 684.212 L1149.19 684.212 L1148.63 684.212 L1148.07 684.212 L1147.51 684.212 L1146.96 684.212 L1146.4 684.212 L1145.84 684.212 L1145.28 684.212 L1144.72 684.212 L1144.16 684.212 L1143.6 684.212 L1143.04 684.212 L1142.48 684.212 L1141.92 684.212 L1141.36 684.212 L1140.8 684.212 L1140.24 684.212 L1139.68 684.212 L1139.13 684.212 L1138.57 684.212 L1138.01 684.212 L1137.45 684.212 L1136.89 684.212 L1136.33 684.212 L1135.77 684.212 L1135.21 684.212 L1134.65 684.212 L1134.09 684.212 L1133.53 684.212 L1132.97 684.212 L1132.41 684.212 L1131.86 684.212 L1131.3 684.212 L1130.74 684.212 L1130.18 684.212 L1129.62 684.212 L1129.06 684.212 L1128.5 684.212 L1127.94 684.212 L1127.38 684.212 L1126.82 684.212 L1126.26 684.212 L1125.7 684.212 L1125.14 684.212 L1124.59 684.212 L1124.03 684.212 L1123.47 684.212 L1122.91 684.212 L1122.35 684.212 L1121.79 684.212 L1121.23 684.212 L1120.67 684.212 L1120.11 684.212 L1119.55 684.212 L1118.99 684.212 L1118.43 684.212 L1117.87 684.212 L1117.31 684.212 L1116.76 684.212 L1116.2 684.212 L1115.64 684.212 L1115.08 684.212 L1114.52 684.212 L1113.96 684.212 L1113.4 684.212 L1112.84 684.212 L1112.28 684.212 L1111.72 684.212 L1111.16 684.212 L1110.6 684.212 L1110.04 684.212 L1109.49 684.212 L1108.93 684.212 L1108.37 684.212 L1107.81 684.212 L1107.25 684.212 L1106.69 684.212 L1106.13 684.212 L1105.57 684.212 L1105.01 684.212 L1104.45 684.212 L1103.89 684.212 L1103.33 684.212 L1102.77 684.212 L1102.22 684.212 L1101.66 684.212 L1101.1 684.212 L1100.54 684.212 L1099.98 684.212 L1099.42 684.212 L1098.86 684.212 L1098.3 684.212 L1097.74 684.212 L1097.18 684.212 L1096.62 684.212 L1096.06 684.212 L1095.5 684.212 L1094.94 684.212 L1094.39 684.212 L1093.83 684.212 L1093.27 684.212 L1092.71 684.212 L1092.15 684.212 L1091.59 684.212 L1091.03 684.212 L1090.47 684.212 L1089.91 684.212 L1089.35 684.212 L1088.79 684.212 L1088.23 684.212 L1087.67 684.212 L1087.12 684.212 L1086.56 684.212 L1086 684.212 L1085.44 684.212 L1084.88 684.212 L1084.32 684.212 L1083.76 684.212 L1083.2 684.212 L1082.64 684.212 L1082.08 684.212 L1081.52 684.212 L1080.96 684.212 L1080.4 684.212 L1079.85 684.212 L1079.29 684.212 L1078.73 684.212 L1078.17 684.212 L1077.61 684.212 L1077.05 684.212 L1076.49 684.212 L1075.93 684.212 L1075.37 684.212 L1074.81 684.212 L1074.25 684.212 L1073.69 684.212 L1073.13 684.212 L1072.57 684.212 L1072.02 684.212 L1071.46 684.212 L1070.9 684.212 L1070.34 684.212 L1069.78 684.212 L1069.22 684.212 L1068.66 684.212 L1068.1 684.212 L1067.54 684.212 L1066.98 684.212 L1066.42 684.212 L1065.86 684.212 L1065.3 684.212 L1064.75 684.212 L1064.19 684.212 L1063.63 684.212 L1063.07 684.212 L1062.51 684.212 L1061.95 684.212 L1061.39 684.212 L1060.83 684.212 L1060.27 684.212 L1059.71 684.212 L1059.15 684.212 L1058.59 684.212 L1058.03 684.212 L1057.48 684.212 L1056.92 684.212 L1056.36 684.212 L1055.8 684.212 L1055.24 684.212 L1054.68 684.212 L1054.12 684.212 L1053.56 684.212 L1053 684.212 L1052.44 684.212 L1051.88 684.212 L1051.32 684.212 L1050.76 684.212 L1050.2 684.212 L1049.65 684.212 L1049.09 684.212 L1048.53 684.212 L1047.97 684.212 L1047.41 684.212 L1046.85 684.212 L1046.29 684.212 L1045.73 684.212 L1045.17 684.212 L1044.61 684.212 L1044.05 684.212 L1043.49 684.212 L1042.93 684.212 L1042.38 684.212 L1041.82 684.212 L1041.26 684.212 L1040.7 684.212 L1040.14 684.212 L1039.58 684.212 L1039.02 684.212 L1038.46 684.212 L1037.9 684.212 L1037.34 684.212 L1036.78 684.212 L1036.22 684.212 L1035.66 684.212 L1035.1 684.212 L1034.55 684.212 L1033.99 684.212 L1033.43 684.212 L1032.87 684.212 L1032.31 684.212 L1031.75 684.212 L1031.19 684.212 L1030.63 684.212 L1030.07 684.212 L1029.51 684.212 L1028.95 684.212 L1028.39 684.212 L1027.83 684.212 L1027.28 684.212 L1026.72 684.212 L1026.16 684.212 L1025.6 684.212 L1025.04 684.212 L1024.48 684.212 L1023.92 684.212 L1023.36 684.212 L1022.8 684.212 L1022.24 684.212 L1021.68 684.212 L1021.12 684.212 L1020.56 684.212 L1020.01 684.212 L1019.45 684.212 L1018.89 684.212 L1018.33 684.212 L1017.77 684.212 L1017.21 684.212 L1016.65 684.212 L1016.09 684.212 L1015.53 684.212 L1014.97 684.212 L1014.41 684.212 L1013.85 684.212 L1013.29 684.212 L1012.73 684.212 L1012.18 684.212 L1011.62 684.212 L1011.06 684.212 L1010.5 684.212 L1009.94 684.212 L1009.38 684.212 L1008.82 684.212 L1008.26 684.212 L1007.7 684.212 L1007.14 684.212 L1006.58 684.212 L1006.02 684.212 L1005.46 684.212 L1004.91 684.212 L1004.35 684.212 L1003.79 684.212 L1003.23 684.212 L1002.67 684.212 L1002.11 684.212 L1001.55 684.212 L1000.99 684.212 L1000.43 684.212 L999.872 684.212 L999.313 684.212 L998.754 684.212 L998.194 684.212 L997.635 684.212 L997.076 684.212 L996.517 684.212 L995.957 684.212 L995.398 684.212 L994.839 684.212 L994.28 684.212 L993.72 684.212 L993.161 684.212 L992.602 684.212 L992.043 684.212 L991.483 684.212 L990.924 684.212 L990.365 684.212 L989.806 684.212 L989.246 684.212 L988.687 684.212 L988.128 684.212 L987.569 684.212 L987.009 684.212 L986.45 684.212 L985.891 684.212 L985.332 684.212 L984.772 684.212 L984.213 684.212 L983.654 684.212 L983.095 684.212 L982.535 684.212 L981.976 684.212 L981.417 684.212 L980.858 684.212 L980.298 684.212 L979.739 684.212 L979.18 684.212 L978.621 684.212 L978.061 684.212 L977.502 684.212 L976.943 684.212 L976.384 684.212 L975.824 684.212 L975.265 684.212 L974.706 684.212 L974.147 684.212 L973.587 684.212 L973.028 684.212 L972.469 684.212 L971.91 684.212 L971.35 684.212 L970.791 684.212 L970.232 684.212 L969.673 684.212 L969.113 684.212 L968.554 684.212 L967.995 684.212 L967.436 684.212 L966.876 684.212 L966.317 684.212 L965.758 684.212 L965.199 684.212 L964.639 684.212 L964.08 684.212 L963.521 684.212 L962.962 684.212 L962.402 684.212 L961.843 684.212 L961.284 684.212 L960.725 684.212 L960.165 684.212 L959.606 684.212 L959.047 684.212 L958.488 684.212 L957.928 684.212 L957.369 684.212 L956.81 684.212 L956.251 684.212 L955.691 684.212 L955.132 684.212 L954.573 684.212 L954.014 684.212 L953.454 684.212 L952.895 684.212 L952.336 684.212 L951.777 684.212 L951.217 684.212 L950.658 684.212 L950.099 684.212 L949.54 684.212 L948.98 684.212 L948.421 684.212 L947.862 684.212 L947.303 684.212 L946.743 684.212 L946.184 684.212 L945.625 684.212 L945.066 684.212 L944.506 684.212 L943.947 684.212 L943.388 684.212 L942.829 684.212 L942.269 684.212 L941.71 684.212 L941.151 684.212 L940.592 684.212 L940.032 684.212 L939.473 684.212 L938.914 684.212 L938.355 684.212 L937.795 684.212 L937.236 684.212 L936.677 684.212 L936.118 684.212 L935.558 684.212 L934.999 684.212 L934.44 684.212 L933.881 684.212 L933.321 684.212 L932.762 684.212 L932.203 684.212 L931.644 684.212 L931.084 684.212 L930.525 684.212 L929.966 684.212 L929.406 684.212 L928.847 684.212 L928.288 684.212 L927.729 684.212 L927.169 684.212 L926.61 684.212 L926.051 684.212 L925.492 684.212 L924.932 684.212 L924.373 684.212 L923.814 684.212 L923.255 684.212 L922.695 684.212 L922.136 684.212 L921.577 684.212 L921.018 684.212 L920.458 684.212 L919.899 684.212 L919.34 684.212 L918.781 684.212 L918.221 684.212 L917.662 684.212 L917.103 684.212 L916.544 684.212 L915.984 684.212 L915.425 684.212 L914.866 684.212 L914.307 684.212 L913.747 684.212 L913.188 684.212 L912.629 684.212 L912.07 684.212 L911.51 684.212 L910.951 684.212 L910.392 684.212 L909.833 684.212 L909.273 684.212 L908.714 684.212 L908.155 684.212 L907.596 684.212 L907.036 684.212 L906.477 684.212 L905.918 684.212 L905.359 684.212 L904.799 684.212 L904.24 684.212 L903.681 684.212 L903.122 684.212 L902.562 684.212 L902.003 684.212 L901.444 684.212 L900.885 684.212 L900.325 684.212 L899.766 684.212 L899.207 684.212 L898.648 684.212 L898.088 684.212 L897.529 684.212 L896.97 684.212 L896.411 684.212 L895.851 684.212 L895.292 684.212 L894.733 684.212 L894.174 684.212 L893.614 684.212 L893.055 684.212 L892.496 684.212 L891.937 684.212 L891.377 684.212 L890.818 684.212 L890.259 684.212 L889.7 684.212 L889.14 684.212 L888.581 684.212 L888.022 684.212 L887.463 684.212 L886.903 684.212 L886.344 684.212 L885.785 684.212 L885.226 684.212 L884.666 684.212 L884.107 684.212 L883.548 684.212 L882.989 684.212 L882.429 684.212 L881.87 684.212 L881.311 684.212 L880.752 684.212 L880.192 684.212 L879.633 684.212 L879.074 684.212 L878.515 684.212 L877.955 684.212 L877.396 684.212 L876.837 684.212 L876.278 684.212 L875.718 684.212 L875.159 684.212 L874.6 684.212 L874.041 684.212 L873.481 684.212 L872.922 684.212 L872.363 684.212 L871.804 684.212 L871.244 684.212 L870.685 684.212 L870.126 684.212 L869.567 684.212 L869.007 684.212 L868.448 684.212 L867.889 684.212 L867.33 684.212 L866.77 684.212 L866.211 684.212 L865.652 684.212 L865.093 684.212 L864.533 684.212 L863.974 684.212 L863.415 684.212 L862.856 684.212 L862.296 684.212 L861.737 684.212 L861.178 684.212 L860.619 684.212 L860.059 684.212 L859.5 684.212 L858.941 684.212 L858.382 684.212 L857.822 684.212 L857.263 684.212 L856.704 684.212 L856.145 684.212 L855.585 684.212 L855.026 684.212 L854.467 684.212 L853.908 684.212 L853.348 684.212 L852.789 684.212 L852.23 684.212 L851.671 684.212 L851.111 684.212 L850.552 684.212 L849.993 684.212 L849.434 684.212 L848.874 684.212 L848.315 684.212 L847.756 684.212 L847.197 684.212 L846.637 684.212 L846.078 684.212 L845.519 684.212 L844.96 684.212 L844.4 684.212 L843.841 684.212 L843.282 684.212 L842.723 684.212 L842.163 684.212 L841.604 684.212 L841.045 684.212 L840.486 684.212 L839.926 684.212 L839.367 684.212 L838.808 684.212 L838.249 684.212 L837.689 684.212 L837.13 684.212 L836.571 684.212 L836.012 684.212 L835.452 684.212 L834.893 684.212 L834.334 684.212 L833.775 684.212 L833.215 684.212 L832.656 684.212 L832.097 684.212 L831.538 684.212 L830.978 684.212 L830.419 684.212 L829.86 684.212 L829.301 684.212 L828.741 684.212 L828.182 684.212 L827.623 684.212 L827.064 684.212 L826.504 684.212 L825.945 684.212 L825.386 684.212 L824.827 684.212 L824.267 684.212 L823.708 684.212 L823.149 684.212 L822.59 684.212 L822.03 684.212 L821.471 684.212 L820.912 684.212 L820.353 684.212 L819.793 684.212 L819.234 684.212 L818.675 684.212 L818.116 684.212 L817.556 684.212 L816.997 684.212 L816.438 684.212 L815.879 684.212 L815.319 684.212 L814.76 684.212 L814.201 684.212 L813.642 684.212 L813.082 684.212 L812.523 684.212 L811.964 684.212 L811.405 684.212 L810.845 684.212 L810.286 684.212 L809.727 684.212 L809.168 684.212 L808.608 684.212 L808.049 684.212 L807.49 684.212 L806.931 684.212 L806.371 684.212 L805.812 684.212 L805.253 684.212 L804.693 684.212 L804.134 684.212 L803.575 684.212 L803.016 684.212 L802.456 684.212 L801.897 684.212 L801.338 684.212 L800.779 684.212 L800.219 684.212 L799.66 684.212 L799.101 684.212 L798.542 684.212 L797.982 684.212 L797.423 684.212 L796.864 684.212 L796.305 684.212 L795.745 684.212 L795.186 684.212 L794.627 684.212 L794.068 684.212 L793.508 684.212 L792.949 684.212 L792.39 684.212 L791.831 684.212 L791.271 684.212 L790.712 684.212 L790.153 684.212 L789.594 684.212 L789.034 684.212 L788.475 684.212 L787.916 684.212 L787.357 684.212 L786.797 684.212 L786.238 684.212 L785.679 684.212 L785.12 684.212 L784.56 684.212 L784.001 684.212 L783.442 684.212 L782.883 684.212 L782.323 684.212 L781.764 684.212 L781.205 684.212 L780.646 684.212 L780.086 684.212 L779.527 684.212 L778.968 684.212 L778.409 684.212 L777.849 684.212 L777.29 684.212 L776.731 684.212 L776.172 684.212 L775.612 684.212 L775.053 684.212 L774.494 684.212 L773.935 684.212 L773.375 684.212 L772.816 684.212 L772.257 684.212 L771.698 684.212 L771.138 684.212 L770.579 684.212 L770.02 684.212 L769.461 684.212 L768.901 684.212 L768.342 684.212 L767.783 684.212 L767.224 684.212 L766.664 684.212 L766.105 684.212 L765.546 684.212 L764.987 684.212 L764.427 684.212 L763.868 684.212 L763.309 684.212 L762.75 684.212 L762.19 684.212 L761.631 684.212 L761.072 684.212 L760.513 684.212 L759.953 684.212 L759.394 684.212 L758.835 684.212 L758.276 684.212 L757.716 684.212 L757.157 684.212 L756.598 684.212 L756.039 684.212 L755.479 684.212 L754.92 684.212 L754.361 684.212 L753.802 684.212 L753.242 684.212 L752.683 684.212 L752.124 684.212 L751.565 684.212 L751.005 684.212 L750.446 684.212 L749.887 684.212 L749.328 684.212 L748.768 684.212 L748.209 684.212 L747.65 684.212 L747.091 684.212 L746.531 684.212 L745.972 684.212 L745.413 684.212 L744.854 684.212 L744.294 684.212 L743.735 684.212 L743.176 684.212 L742.617 684.212 L742.057 684.212 L741.498 684.212 L740.939 684.212 L740.38 684.212 L739.82 684.212 L739.261 684.212 L738.702 684.212 L738.143 684.212 L737.583 684.212 L737.024 684.212 L736.465 684.212 L735.906 684.212 L735.346 684.212 L734.787 684.212 L734.228 684.212 L733.669 684.212 L733.109 684.212 L732.55 684.212 L731.991 684.212 L731.432 684.212 L730.872 684.212 L730.313 684.212 L729.754 684.212 L729.195 684.212 L728.635 684.212 L728.076 684.212 L727.517 684.212 L726.958 684.212 L726.398 684.212 L725.839 684.212 L725.28 684.212 L724.721 684.212 L724.161 684.212 L723.602 684.212 L723.043 684.212 L722.484 684.212 L721.924 684.212 L721.365 684.212 L720.806 684.212 L720.247 684.212  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.541 720.806,688.541 721.365,688.541 721.924,688.541 722.484,688.541 723.043,688.541 723.602,688.541 724.161,688.541 724.721,688.541 725.28,688.541 725.839,688.541 726.398,688.541 726.958,688.541 727.517,688.541 728.076,688.541 728.635,688.541 729.195,688.541 729.754,688.541 730.313,688.541 730.872,688.541 731.432,688.541 731.991,688.541 732.55,688.541 733.109,688.541 733.669,688.541 734.228,688.541 734.787,688.541 735.346,688.541 735.906,688.541 736.465,688.541 737.024,688.541 737.583,688.541 738.143,688.541 738.702,688.541 739.261,688.541 739.82,688.541 740.38,688.541 740.939,688.541 741.498,688.541 742.057,688.541 742.617,688.541 743.176,688.541 743.735,688.541 744.294,688.541 744.854,688.541 745.413,688.541 745.972,688.541 746.531,688.541 747.091,688.541 747.65,688.541 748.209,688.541 748.768,688.541 749.328,688.541 749.887,688.541 750.446,688.541 751.005,688.541 751.565,688.541 752.124,688.541 752.683,688.541 753.242,688.541 753.802,688.541 754.361,688.541 754.92,688.541 755.479,688.541 756.039,688.541 756.598,688.541 757.157,688.541 757.716,688.541 758.276,688.541 758.835,688.541 759.394,688.541 759.953,688.541 760.513,688.541 761.072,688.541 761.631,688.541 762.19,688.541 762.75,688.541 763.309,688.541 763.868,688.541 764.427,688.541 764.987,688.541 765.546,688.541 766.105,688.541 766.664,688.541 767.224,688.541 767.783,688.541 768.342,688.541 768.901,688.541 769.461,688.541 770.02,688.541 770.579,688.541 771.138,688.541 771.698,688.541 772.257,688.541 772.816,688.541 773.375,688.541 773.935,688.541 774.494,688.541 775.053,688.541 775.612,688.541 776.172,688.541 776.731,688.541 777.29,688.541 777.849,688.541 778.409,688.541 778.968,688.541 779.527,688.541 780.086,688.541 780.646,688.541 781.205,688.541 781.764,688.541 782.323,688.541 782.883,688.541 783.442,688.541 784.001,688.541 784.56,688.541 785.12,688.541 785.679,688.541 786.238,688.541 786.797,688.541 787.357,688.541 787.916,688.541 788.475,688.541 789.034,688.541 789.594,688.541 790.153,688.541 790.712,688.541 791.271,688.541 791.831,688.541 792.39,688.541 792.949,688.541 793.508,688.541 794.068,688.541 794.627,688.541 795.186,688.541 795.745,688.541 796.305,688.541 796.864,688.541 797.423,688.541 797.982,688.541 798.542,688.541 799.101,688.541 799.66,688.541 800.219,688.541 800.779,688.541 801.338,688.541 801.897,688.541 802.456,688.541 803.016,688.541 803.575,688.541 804.134,688.541 804.693,688.541 805.253,688.541 805.812,688.541 806.371,688.541 806.931,688.541 807.49,688.541 808.049,688.541 808.608,688.541 809.168,688.541 809.727,688.541 810.286,688.541 810.845,688.541 811.405,688.541 811.964,688.541 812.523,688.541 813.082,688.541 813.642,688.541 814.201,688.541 814.76,688.541 815.319,688.541 815.879,688.541 816.438,688.541 816.997,688.541 817.556,688.541 818.116,688.541 818.675,688.541 819.234,688.541 819.793,688.541 820.353,688.541 820.912,688.541 821.471,688.541 822.03,688.541 822.59,688.541 823.149,688.541 823.708,688.541 824.267,688.541 824.827,688.541 825.386,688.541 825.945,688.541 826.504,688.541 827.064,688.541 827.623,688.541 828.182,688.541 828.741,688.541 829.301,688.541 829.86,688.541 830.419,688.541 830.978,688.541 831.538,688.541 832.097,688.541 832.656,688.541 833.215,688.541 833.775,688.541 834.334,688.541 834.893,688.541 835.452,688.541 836.012,688.541 836.571,688.541 837.13,688.541 837.689,688.541 838.249,688.541 838.808,688.541 839.367,688.541 839.926,688.541 840.486,688.541 841.045,688.541 841.604,688.541 842.163,688.541 842.723,688.541 843.282,688.541 843.841,688.541 844.4,688.541 844.96,688.541 845.519,688.541 846.078,688.541 846.637,688.541 847.197,688.541 847.756,688.541 848.315,688.541 848.874,688.541 849.434,688.541 849.993,688.541 850.552,688.541 851.111,688.541 851.671,688.541 852.23,688.541 852.789,688.541 853.348,688.541 853.908,688.541 854.467,688.541 855.026,688.541 855.585,688.541 856.145,688.541 856.704,688.541 857.263,688.541 857.822,688.541 858.382,688.541 858.941,688.541 859.5,688.541 860.059,688.541 860.619,688.541 861.178,688.541 861.737,688.541 862.296,688.541 862.856,688.541 863.415,688.541 863.974,688.541 864.533,688.541 865.093,688.541 865.652,688.541 866.211,688.541 866.77,688.541 867.33,688.541 867.889,688.541 868.448,688.541 869.007,688.541 869.567,688.541 870.126,688.541 870.685,688.541 871.244,688.541 871.804,688.541 872.363,688.541 872.922,688.541 873.481,688.541 874.041,688.541 874.6,688.541 875.159,688.541 875.718,688.541 876.278,688.541 876.837,688.541 877.396,688.541 877.955,688.541 878.515,688.541 879.074,688.541 879.633,688.541 880.192,688.541 880.752,688.541 881.311,688.541 881.87,688.541 882.429,688.541 882.989,688.541 883.548,688.541 884.107,688.541 884.666,688.541 885.226,688.541 885.785,688.541 886.344,688.541 886.903,688.541 887.463,688.541 888.022,688.541 888.581,688.541 889.14,688.541 889.7,688.541 890.259,688.541 890.818,688.541 891.377,688.541 891.937,688.541 892.496,688.541 893.055,688.541 893.614,688.541 894.174,688.541 894.733,688.541 895.292,688.541 895.851,688.541 896.411,688.541 896.97,688.541 897.529,688.541 898.088,688.541 898.648,688.541 899.207,688.541 899.766,688.541 900.325,688.541 900.885,688.541 901.444,688.541 902.003,688.541 902.562,688.541 903.122,688.541 903.681,688.541 904.24,688.541 904.799,688.541 905.359,688.541 905.918,688.541 906.477,688.541 907.036,688.541 907.596,688.541 908.155,688.541 908.714,688.541 909.273,688.541 909.833,688.541 910.392,688.541 910.951,688.541 911.51,688.541 912.07,688.541 912.629,688.541 913.188,688.541 913.747,688.541 914.307,688.541 914.866,688.541 915.425,688.541 915.984,688.541 916.544,688.541 917.103,688.541 917.662,688.541 918.221,688.541 918.781,688.541 919.34,688.541 919.899,688.541 920.458,688.541 921.018,688.541 921.577,688.541 922.136,688.541 922.695,688.541 923.255,688.541 923.814,688.541 924.373,688.541 924.932,688.541 925.492,688.541 926.051,688.541 926.61,688.541 927.169,688.541 927.729,688.541 928.288,688.541 928.847,688.541 929.406,688.541 929.966,688.541 930.525,688.541 931.084,688.541 931.644,688.541 932.203,688.541 932.762,688.541 933.321,688.541 933.881,688.541 934.44,688.541 934.999,688.541 935.558,688.541 936.118,688.541 936.677,688.541 937.236,688.541 937.795,688.541 938.355,688.541 938.914,688.541 939.473,688.541 940.032,688.541 940.592,688.541 941.151,688.541 941.71,688.541 942.269,688.541 942.829,688.541 943.388,688.541 943.947,688.541 944.506,688.541 945.066,688.541 945.625,688.541 946.184,688.541 946.743,688.541 947.303,688.541 947.862,688.541 948.421,688.541 948.98,688.541 949.54,688.541 950.099,688.541 950.658,688.541 951.217,688.541 951.777,688.541 952.336,688.541 952.895,688.541 953.454,688.541 954.014,688.541 954.573,688.541 955.132,688.541 955.691,688.541 956.251,688.541 956.81,688.541 957.369,688.541 957.928,688.541 958.488,688.541 959.047,688.541 959.606,688.541 960.165,688.541 960.725,688.541 961.284,688.541 961.843,688.541 962.402,688.541 962.962,688.541 963.521,688.541 964.08,688.541 964.639,688.541 965.199,688.541 965.758,688.541 966.317,688.541 966.876,688.541 967.436,688.541 967.995,688.541 968.554,688.541 969.113,688.541 969.673,688.541 970.232,688.541 970.791,688.541 971.35,688.541 971.91,688.541 972.469,688.541 973.028,688.541 973.587,688.541 974.147,688.541 974.706,688.541 975.265,688.541 975.824,688.541 976.384,688.541 976.943,688.541 977.502,688.541 978.061,688.541 978.621,688.541 979.18,688.541 979.739,688.541 980.298,688.541 980.858,688.541 981.417,688.541 981.976,688.541 982.535,688.541 983.095,688.541 983.654,688.541 984.213,688.541 984.772,688.541 985.332,688.541 985.891,688.541 986.45,688.541 987.009,688.541 987.569,688.541 988.128,688.541 988.687,688.541 989.246,688.541 989.806,688.541 990.365,688.541 990.924,688.541 991.483,688.541 992.043,688.541 992.602,688.541 993.161,688.541 993.72,688.541 994.28,688.541 994.839,688.541 995.398,688.541 995.957,688.541 996.517,688.541 997.076,688.541 997.635,688.541 998.194,688.541 998.754,688.541 999.313,688.541 999.872,688.541 1000.43,688.541 1000.99,688.541 1001.55,688.541 1002.11,688.541 1002.67,688.541 1003.23,688.541 1003.79,688.541 1004.35,688.541 1004.91,688.541 1005.46,688.541 1006.02,688.541 1006.58,688.541 1007.14,688.541 1007.7,688.541 1008.26,688.541 1008.82,688.541 1009.38,688.541 1009.94,688.541 1010.5,688.541 1011.06,688.541 1011.62,688.541 1012.18,688.541 1012.73,688.541 1013.29,688.541 1013.85,688.541 1014.41,688.541 1014.97,688.541 1015.53,688.541 1016.09,688.541 1016.65,688.541 1017.21,688.541 1017.77,688.541 1018.33,688.541 1018.89,688.541 1019.45,688.541 1020.01,688.541 1020.56,688.541 1021.12,688.541 1021.68,688.541 1022.24,688.541 1022.8,688.541 1023.36,688.541 1023.92,688.541 1024.48,688.541 1025.04,688.541 1025.6,688.541 1026.16,688.541 1026.72,688.541 1027.28,688.541 1027.83,688.541 1028.39,688.541 1028.95,688.541 1029.51,688.541 1030.07,688.541 1030.63,688.541 1031.19,688.541 1031.75,688.541 1032.31,688.541 1032.87,688.541 1033.43,688.541 1033.99,688.541 1034.55,688.541 1035.1,688.541 1035.66,688.541 1036.22,688.541 1036.78,688.541 1037.34,688.541 1037.9,688.541 1038.46,688.541 1039.02,688.541 1039.58,688.541 1040.14,688.541 1040.7,688.541 1041.26,688.541 1041.82,688.541 1042.38,688.541 1042.93,688.541 1043.49,688.541 1044.05,688.541 1044.61,688.541 1045.17,688.541 1045.73,688.541 1046.29,688.541 1046.85,688.541 1047.41,688.541 1047.97,688.541 1048.53,688.541 1049.09,688.541 1049.65,688.541 1050.2,688.541 1050.76,688.541 1051.32,688.541 1051.88,688.541 1052.44,688.541 1053,688.541 1053.56,688.541 1054.12,688.541 1054.68,688.541 1055.24,688.541 1055.8,688.541 1056.36,688.541 1056.92,688.541 1057.48,688.541 1058.03,688.541 1058.59,688.541 1059.15,688.541 1059.71,688.541 1060.27,688.541 1060.83,688.541 1061.39,688.541 1061.95,688.541 1062.51,688.541 1063.07,688.541 1063.63,688.541 1064.19,688.541 1064.75,688.541 1065.3,688.541 1065.86,688.541 1066.42,688.541 1066.98,688.541 1067.54,688.541 1068.1,688.541 1068.66,688.541 1069.22,688.541 1069.78,688.541 1070.34,688.541 1070.9,688.541 1071.46,688.541 1072.02,688.541 1072.57,688.541 1073.13,688.541 1073.69,688.541 1074.25,688.541 1074.81,688.541 1075.37,688.541 1075.93,688.541 1076.49,688.541 1077.05,688.541 1077.61,688.541 1078.17,688.541 1078.73,688.541 1079.29,688.541 1079.85,688.541 1080.4,688.541 1080.96,688.541 1081.52,688.541 1082.08,688.541 1082.64,688.541 1083.2,688.541 1083.76,688.541 1084.32,688.541 1084.88,688.541 1085.44,688.541 1086,688.541 1086.56,688.541 1087.12,688.541 1087.67,688.541 1088.23,688.541 1088.79,688.541 1089.35,688.541 1089.91,688.541 1090.47,688.541 1091.03,688.541 1091.59,688.541 1092.15,688.541 1092.71,688.541 1093.27,688.541 1093.83,688.541 1094.39,688.541 1094.94,688.541 1095.5,688.541 1096.06,688.541 1096.62,688.541 1097.18,688.541 1097.74,688.541 1098.3,688.541 1098.86,688.541 1099.42,688.541 1099.98,688.541 1100.54,688.541 1101.1,688.541 1101.66,688.541 1102.22,688.541 1102.77,688.541 1103.33,688.541 1103.89,688.541 1104.45,688.541 1105.01,688.541 1105.57,688.541 1106.13,688.541 1106.69,688.541 1107.25,688.541 1107.81,688.541 1108.37,688.541 1108.93,688.541 1109.49,688.541 1110.04,688.541 1110.6,688.541 1111.16,688.541 1111.72,688.541 1112.28,688.541 1112.84,688.541 1113.4,688.541 1113.96,688.541 1114.52,688.541 1115.08,688.541 1115.64,688.541 1116.2,688.541 1116.76,688.541 1117.31,688.541 1117.87,688.541 1118.43,688.541 1118.99,688.541 1119.55,688.541 1120.11,688.541 1120.67,688.541 1121.23,688.541 1121.79,688.541 1122.35,688.541 1122.91,688.541 1123.47,688.541 1124.03,688.541 1124.59,688.541 1125.14,688.541 1125.7,688.541 1126.26,688.541 1126.82,688.541 1127.38,688.541 1127.94,688.541 1128.5,688.541 1129.06,688.541 1129.62,688.541 1130.18,688.541 1130.74,688.541 1131.3,688.541 1131.86,688.541 1132.41,688.541 1132.97,688.541 1133.53,688.541 1134.09,688.541 1134.65,688.541 1135.21,688.541 1135.77,688.541 1136.33,688.541 1136.89,688.541 1137.45,688.541 1138.01,688.541 1138.57,688.541 1139.13,688.541 1139.68,688.541 1140.24,688.541 1140.8,688.541 1141.36,688.541 1141.92,688.541 1142.48,688.541 1143.04,688.541 1143.6,688.541 1144.16,688.541 1144.72,688.541 1145.28,688.541 1145.84,688.541 1146.4,688.541 1146.96,688.541 1147.51,688.541 1148.07,688.541 1148.63,688.541 1149.19,688.541 1149.75,688.541 1150.31,688.541 1150.87,688.541 1151.43,688.541 1151.99,688.541 1152.55,688.541 1153.11,688.541 1153.67,688.541 1154.23,688.541 1154.78,688.541 1155.34,688.541 1155.9,688.541 1156.46,688.541 1157.02,688.541 1157.58,688.541 1158.14,688.541 1158.7,688.541 1159.26,688.541 1159.82,688.541 1160.38,688.541 1160.94,688.541 1161.5,688.541 1162.05,688.541 1162.61,688.541 1163.17,688.541 1163.73,688.541 1164.29,688.541 1164.85,688.541 1165.41,688.541 1165.97,688.541 1166.53,688.541 1167.09,688.541 1167.65,688.541 1168.21,688.541 1168.77,688.541 1169.33,688.541 1169.88,688.541 1170.44,688.541 1171,688.541 1171.56,688.541 1172.12,688.541 1172.68,688.541 1173.24,688.541 1173.8,688.541 1174.36,688.541 1174.92,688.541 1175.48,688.541 1176.04,688.541 1176.6,688.541 1177.15,688.541 1177.71,688.541 1178.27,688.541 1178.83,688.541 1179.39,688.541 1179.95,688.541 1180.51,688.541 1181.07,688.541 1181.63,688.541 1182.19,688.541 1182.75,688.541 1183.31,688.541 1183.87,688.541 1184.43,688.541 1184.98,688.541 1185.54,688.541 1186.1,688.541 1186.66,688.541 1187.22,688.541 1187.78,688.541 1188.34,688.541 1188.9,688.541 1189.46,688.541 1190.02,688.541 1190.58,688.541 1191.14,688.541 1191.7,688.541 1192.25,688.541 1192.81,688.541 1193.37,688.541 1193.93,688.541 1194.49,688.541 1195.05,688.541 1195.61,688.541 1196.17,688.541 1196.73,688.541 1197.29,688.541 1197.85,688.541 1198.41,688.541 1198.97,688.541 1199.52,688.541 1200.08,688.541 1200.64,688.541 1201.2,688.541 1201.76,688.541 1202.32,688.541 1202.88,688.541 1203.44,688.541 1204,688.541 1204.56,688.541 1205.12,688.541 1205.68,688.541 1206.24,688.541 1206.8,688.541 1207.35,688.541 1207.91,688.541 1208.47,688.541 1209.03,688.541 1209.59,688.541 1210.15,688.541 1210.71,688.541 1211.27,688.541 1211.83,688.541 1212.39,688.541 1212.95,688.541 1213.51,688.541 1214.07,688.541 1214.62,688.541 1215.18,688.541 1215.74,688.541 1216.3,688.541 1216.86,688.541 1217.42,688.541 1217.98,688.541 1218.54,688.541 1219.1,688.541 1219.66,688.541 1220.22,688.541 1220.78,688.541 1221.34,688.541 1221.89,688.541 1222.45,688.541 1223.01,688.541 1223.57,688.541 1224.13,688.541 1224.69,688.541 1225.25,688.541 1225.81,688.541 1226.37,688.541 1226.93,688.541 1227.49,688.541 1228.05,688.541 1228.61,688.541 1229.17,688.541 1229.72,688.541 1230.28,688.541 1230.84,688.541 1231.4,688.541 1231.96,688.541 1232.52,688.541 1233.08,688.541 1233.64,688.541 1234.2,688.541 1234.76,688.541 1235.32,688.541 1235.88,688.541 1236.44,688.541 1236.99,688.541 1237.55,688.541 1238.11,688.541 1238.67,688.541 1239.23,688.541 1239.79,688.541 1240.35,688.541 1240.91,688.541 1241.47,688.541 1242.03,688.541 1242.59,688.541 1243.15,688.541 1243.71,688.541 1244.26,688.541 1244.82,688.541 1245.38,688.541 1245.94,688.541 1246.5,688.541 1247.06,688.541 1247.62,688.541 1248.18,688.541 1248.74,688.541 1249.3,688.541 1249.86,688.541 1250.42,688.541 1250.98,688.541 1251.54,688.541 1252.09,688.541 1252.65,688.541 1253.21,688.541 1253.77,688.541 1254.33,688.541 1254.89,688.541 1255.45,688.541 1256.01,688.541 1256.57,688.541 1257.13,688.541 1257.69,688.541 1258.25,688.541 1258.81,688.541 1259.36,688.541 1259.92,688.541 1260.48,688.541 1261.04,688.541 1261.6,688.541 1262.16,688.541 1262.72,688.541 1263.28,688.541 1263.84,688.541 1264.4,688.541 1264.96,688.541 1265.52,688.541 1266.08,688.541 1266.63,688.541 1267.19,688.541 1267.75,688.541 1268.31,688.541 1268.87,688.541 1269.43,688.541 1269.99,688.541 1270.55,688.541 1271.11,688.541 1271.67,688.541 1272.23,688.541 1272.79,688.541 1273.35,688.541 1273.91,688.541 1274.46,688.541 1275.02,688.541 1275.58,688.541 1276.14,688.541 1276.7,688.541 1277.26,688.541 1277.82,688.541 1278.38,688.541 1278.94,688.541 1279.5,688.541 1280.06,688.541 1280.62,688.541 1281.18,688.541 1281.73,688.541 1282.29,688.541 1282.85,688.541 1283.41,688.541 1283.97,688.541 1284.53,688.541 1285.09,688.541 1285.65,688.541 1286.21,688.541 1286.77,688.541 1287.33,688.541 1287.89,688.541 1288.45,688.541 1289,688.541 1289.56,688.541 1290.12,688.541 1290.68,688.541 1291.24,688.541 1291.8,688.541 1292.36,688.541 1292.92,688.541 1293.48,688.541 1294.04,688.541 1294.6,688.541 1295.16,688.541 1295.72,688.541 1296.28,688.541 1296.83,688.541 1297.39,688.541 1297.95,688.541 1298.51,688.541 1299.07,688.541 1299.63,688.541 1300.19,688.541 1300.75,688.541 1301.31,688.541 1301.87,688.541 1302.43,688.541 1302.99,688.541 1303.55,688.541 1304.1,688.541 1304.66,688.541 1305.22,688.541 1305.78,688.541 1306.34,688.541 1306.9,688.541 1307.46,688.541 1308.02,688.541 1308.58,688.541 1309.14,688.541 1309.7,688.541 1310.26,688.541 1310.82,688.541 1311.38,688.541 1311.93,688.541 1312.49,688.541 1313.05,688.541 1313.61,688.541 1314.17,688.541 1314.73,688.541 1315.29,688.541 1315.85,688.541 1316.41,688.541 1316.97,688.541 1317.53,688.541 1318.09,688.541 1318.65,688.541 1319.2,688.541 1319.76,688.541 1320.32,688.541 1320.88,688.541 1321.44,688.541 1322,688.541 1322.56,688.541 1323.12,688.541 1323.68,688.541 1324.24,688.541 1324.8,688.541 1325.36,688.541 1325.92,688.541 1326.47,688.541 1327.03,688.541 1327.59,688.541 1328.15,688.541 1328.71,688.541 1329.27,688.541 1329.83,688.541 1330.39,688.541 1330.95,688.541 1331.51,688.541 1332.07,688.541 1332.63,688.541 1333.19,688.541 1333.75,688.541 1334.3,688.541 1334.86,688.541 1335.42,688.541 1335.98,688.541 1336.54,688.541 1337.1,688.541 1337.66,688.541 1338.22,688.541 1338.78,688.541 1339.34,688.541 1339.9,688.541 1340.46,688.541 1341.02,688.541 1341.57,688.541 1342.13,688.541 1342.69,688.541 1343.25,688.541 1343.81,688.541 1344.37,688.541 1344.93,688.541 1345.49,688.541 1346.05,688.541 1346.61,688.541 1347.17,688.541 1347.73,688.541 1348.29,688.541 1348.84,688.541 1349.4,688.541 1349.96,688.541 1350.52,688.541 1351.08,688.541 1351.64,688.541 1352.2,688.541 1352.76,688.541 1353.32,688.541 1353.88,688.541 1354.44,688.541 1355,688.541 1355.56,688.541 1356.12,688.541 1356.67,688.541 1357.23,688.541 1357.79,688.541 1358.35,688.541 1358.91,688.541 1359.47,688.541 1360.03,688.541 1360.59,688.541 1361.15,688.541 1361.71,688.541 1362.27,688.541 1362.83,688.541 1363.39,688.541 1363.94,688.541 1364.5,688.541 1365.06,688.541 1365.62,688.541 1366.18,688.541 1366.74,688.541 1367.3,688.541 1367.86,688.541 1368.42,688.541 1368.98,688.541 1369.54,688.541 1370.1,688.541 1370.66,688.541 1371.21,688.541 1371.77,688.541 1372.33,688.541 1372.89,688.541 1373.45,688.541 1374.01,688.541 1374.57,688.541 1375.13,688.541 1375.69,688.541 1376.25,688.541 1376.81,688.541 1377.37,688.541 1377.93,688.541 1378.49,688.541 1379.04,688.541 1379.6,688.541 1380.16,688.541 1380.72,688.541 1381.28,688.541 1381.84,688.541 1382.4,688.541 1382.96,688.541 1383.52,688.541 1384.08,688.541 1384.64,688.541 1385.2,688.541 1385.76,688.541 1386.31,688.541 1386.87,688.541 1387.43,688.541 1387.99,688.541 1388.55,688.541 1389.11,688.541 1389.67,688.541 1390.23,688.541 1390.79,688.541 1391.35,688.541 1391.91,688.541 1392.47,688.541 1393.03,688.541 1393.58,688.541 1394.14,688.541 1394.7,688.541 1395.26,688.541 1395.82,688.541 1396.38,688.541 1396.94,688.541 1397.5,688.541 1398.06,688.541 1398.62,688.541 1399.18,688.541 1399.74,688.541 1400.3,688.541 1400.86,688.541 1401.41,688.541 1401.97,688.541 1402.53,688.541 1403.09,688.541 1403.65,688.541 1404.21,688.541 1404.77,688.541 1405.33,688.541 1405.89,688.541 1406.45,688.541 1407.01,688.541 1407.57,688.541 1408.13,688.541 1408.68,688.541 1409.24,688.541 1409.8,688.541 1410.36,688.541 1410.92,688.541 1411.48,688.541 1412.04,688.541 1412.6,688.541 1413.16,688.541 1413.72,688.541 1414.28,688.541 1414.84,688.541 1415.4,688.541 1415.95,688.541 1416.51,688.541 1417.07,688.541 1417.63,688.541 1418.19,688.541 1418.75,688.541 1419.31,688.541 1419.87,688.541 1420.43,688.541 1420.99,688.541 1421.55,688.541 1422.11,688.541 1422.67,688.541 1423.23,688.541 1423.78,688.541 1424.34,688.541 1424.9,688.541 1425.46,688.541 1426.02,688.541 1426.58,688.541 1427.14,688.541 1427.7,688.541 1428.26,688.541 1428.82,688.541 1429.38,688.541 1429.94,688.541 1430.5,688.541 1431.05,688.541 1431.61,688.541 1432.17,688.541 1432.73,688.541 1433.29,688.541 1433.85,688.541 1434.41,688.541 1434.97,688.541 1435.53,688.541 1436.09,688.541 1436.65,688.541 1437.21,688.541 1437.77,688.541 1438.33,688.541 1438.88,688.541 1439.44,688.541 1440,688.541 1440.56,688.541 1441.12,688.541 1441.68,688.541 1442.24,688.541 1442.8,688.541 1443.36,688.541 1443.92,688.541 1444.48,688.541 1445.04,688.541 1445.6,688.541 1446.15,688.541 1446.71,688.541 1447.27,688.541 1447.83,688.541 1448.39,688.541 1448.95,688.541 1449.51,688.541 1450.07,688.541 1450.63,688.541 1451.19,688.541 1451.75,688.541 1452.31,688.541 1452.87,688.541 1453.42,688.541 1453.98,688.541 1454.54,688.541 1455.1,688.541 1455.66,688.541 1456.22,688.541 1456.78,688.541 1457.34,688.541 1457.9,688.541 1458.46,688.541 1459.02,688.541 1459.58,688.541 1460.14,688.541 1460.7,688.541 1461.25,688.541 1461.81,688.541 1462.37,688.541 1462.93,688.541 1463.49,688.541 1464.05,688.541 1464.61,688.541 1465.17,688.541 1465.73,688.541 1466.29,688.541 1466.85,688.541 1467.41,688.541 1467.97,688.541 1468.52,688.541 1469.08,688.541 1469.64,688.541 1470.2,688.541 1470.76,688.541 1471.32,688.541 1471.88,688.541 1472.44,688.541 1473,688.541 1473.56,688.541 1474.12,688.541 1474.68,688.541 1475.24,688.541 1475.79,688.541 1476.35,688.541 1476.91,688.541 1477.47,688.541 1478.03,688.541 1478.59,688.541 1479.15,688.541 1479.71,688.541 1480.27,688.541 1480.83,688.541 1481.39,688.541 1481.95,688.541 1482.51,688.541 1483.07,688.541 1483.62,688.541 1484.18,688.541 1484.74,688.541 1485.3,688.541 1485.86,688.541 1486.42,688.541 1486.98,688.541 1487.54,688.541 1488.1,688.541 1488.66,688.541 1489.22,688.541 1489.78,688.541 1490.34,688.541 1490.89,688.541 1491.45,688.541 1492.01,688.541 1492.57,688.541 1493.13,688.541 1493.69,688.541 1494.25,688.541 1494.81,688.541 1495.37,688.541 1495.93,688.541 1496.49,688.541 1497.05,688.541 1497.61,688.541 1498.16,688.541 1498.72,688.541 1499.28,688.541 1499.84,688.541 1500.4,688.541 1500.96,688.541 1501.52,688.541 1502.08,688.541 1502.64,688.541 1503.2,688.541 1503.76,688.541 1504.32,688.541 1504.88,688.541 1505.44,688.541 1505.99,688.541 1506.55,688.541 1507.11,688.541 1507.67,688.541 1508.23,688.541 1508.79,688.541 1509.35,688.541 1509.91,688.541 1510.47,688.541 1511.03,688.541 1511.59,688.541 1512.15,688.541 1512.71,688.541 1513.26,688.541 1513.82,688.541 1514.38,688.541 1514.94,688.541 1515.5,688.541 1516.06,688.541 1516.62,688.541 1517.18,688.541 1517.74,688.541 1518.3,688.541 1518.86,688.541 1519.42,688.541 1519.98,688.541 1520.53,688.541 1521.09,688.541 1521.65,688.541 1522.21,688.541 1522.77,688.541 1523.33,688.541 1523.89,688.541 1524.45,688.541 1525.01,688.541 1525.57,688.541 1526.13,688.541 1526.69,688.541 1527.25,688.541 1527.81,688.541 1528.36,688.541 1528.92,688.541 1529.48,688.541 1530.04,688.541 1530.6,688.541 1531.16,688.541 1531.72,688.541 1532.28,688.541 1532.84,688.541 1533.4,688.541 1533.96,688.541 1534.52,688.541 1535.08,688.541 1535.63,688.541 1536.19,688.541 1536.75,688.541 1537.31,688.541 1537.87,688.541 1538.43,688.541 1538.99,688.541 1539.55,688.541 1540.11,688.541 1540.67,688.541 1541.23,688.541 1541.79,688.541 1542.35,688.541 1542.9,688.541 1543.46,688.541 1544.02,688.541 1544.58,688.541 1545.14,688.541 1545.7,688.541 1546.26,688.541 1546.82,688.541 1547.38,688.541 1547.94,688.541 1548.5,688.541 1549.06,688.541 1549.62,688.541 1550.18,688.541 1550.73,688.541 1551.29,688.541 1551.85,688.541 1552.41,688.541 1552.97,688.541 1553.53,688.541 1554.09,688.541 1554.65,688.541 1555.21,688.541 1555.77,688.541 1556.33,688.541 1556.89,688.541 1557.45,688.541 1558,688.541 1558.56,688.541 1559.12,688.541 1559.68,688.541 1560.24,688.541 1560.8,688.541 1561.36,688.541 1561.92,688.541 1562.48,688.541 1563.04,688.541 1563.6,688.541 1564.16,688.541 1564.72,688.541 1565.28,688.541 1565.83,688.541 1566.39,688.541 1566.95,688.541 1567.51,688.541 1568.07,688.541 1568.63,688.541 1569.19,688.541 1569.75,688.541 1570.31,688.541 1570.87,688.541 1571.43,688.541 1571.99,688.541 1572.55,688.541 1573.1,688.541 1573.66,688.541 1574.22,688.541 1574.78,688.541 1575.34,688.541 1575.9,688.541 1576.46,688.541 1577.02,688.541 1577.58,688.541 1578.14,688.541 1578.7,688.541 1579.26,688.541 1579.82,688.541 1580.37,688.541 1580.93,688.541 1581.49,688.541 1582.05,688.541 1582.61,688.541 1583.17,688.541 1583.73,688.541 1584.29,688.541 1584.85,688.541 1585.41,688.541 1585.97,688.541 1586.53,688.541 1587.09,688.541 1587.65,688.541 1588.2,688.541 1588.76,688.541 1589.32,688.541 1589.88,688.541 1590.44,688.541 1591,688.541 1591.56,688.541 1592.12,688.541 1592.68,688.541 1593.24,688.541 1593.8,688.541 1594.36,688.541 1594.92,688.541 1595.47,688.541 1596.03,688.541 1596.59,688.541 1597.15,688.541 1597.71,688.541 1598.27,688.541 1598.83,688.541 1599.39,688.541 1599.95,688.541 1600.51,688.541 1601.07,688.541 1601.63,688.541 1602.19,688.541 1602.74,688.541 1603.3,688.541 1603.86,688.541 1604.42,688.541 1604.98,688.541 1605.54,688.541 1606.1,688.541 1606.66,688.541 1607.22,688.541 1607.78,688.541 1608.34,688.541 1608.9,688.541 1609.46,688.541 1610.02,688.541 1610.57,688.541 1611.13,688.541 1611.69,688.541 1612.25,688.541 1612.81,688.541 1613.37,688.541 1613.93,688.541 1614.49,688.541 1615.05,688.541 1615.61,688.541 1616.17,688.541 1616.73,688.541 1617.29,688.541 1617.84,688.541 1618.4,688.541 1618.96,688.541 1619.52,688.541 1620.08,688.541 1620.64,688.541 1621.2,688.541 1621.76,688.541 1622.32,688.541 1622.88,688.541 1623.44,688.541 1624,688.541 1624.56,688.541 1625.11,688.541 1625.67,688.541 1626.23,688.541 1626.79,688.541 1627.35,688.541 1627.91,688.541 1628.47,688.541 1629.03,688.541 1629.59,688.541 1630.15,688.541 1630.71,688.541 1631.27,688.541 1631.83,688.541 1632.39,688.541 1632.94,688.541 1633.5,688.541 1634.06,688.541 1634.62,688.541 1635.18,688.541 1635.74,688.541 1636.3,688.541 1636.86,688.541 1637.42,688.541 1637.98,688.541 1638.54,688.541 1639.1,688.541 1639.66,688.541 1640.21,688.541 1640.77,688.541 1641.33,688.541 1641.89,688.541 1642.45,688.541 1643.01,688.541 1643.57,688.541 1644.13,688.541 1644.69,688.541 1645.25,688.541 1645.81,688.541 1646.37,688.541 1646.93,688.541 1647.48,688.541 1648.04,688.541 1648.6,688.541 1649.16,688.541 1649.72,688.541 1650.28,688.541 1650.84,688.541 1651.4,688.541 1651.96,688.541 1652.52,688.541 1653.08,688.541 1653.64,688.541 1654.2,688.541 1654.76,688.541 1655.31,688.541 1655.87,688.541 1656.43,688.541 1656.99,688.541 1657.55,688.541 1658.11,688.541 1658.67,688.541 1659.23,688.541 1659.79,688.541 1660.35,688.541 1660.91,688.541 1661.47,688.541 1662.03,688.541 1662.58,688.541 1663.14,688.541 1663.7,688.541 1664.26,688.541 1664.82,688.541 1665.38,688.541 1665.94,688.541 1666.5,688.541 1667.06,688.541 1667.62,688.541 1668.18,688.541 1668.74,688.541 1669.3,688.541 1669.85,688.541 1670.41,688.541 1670.97,688.541 1671.53,688.541 1672.09,688.541 1672.65,688.541 1673.21,688.541 1673.77,688.541 1674.33,688.541 1674.89,688.541 1675.45,688.541 1676.01,688.541 1676.57,688.541 1677.13,688.541 1677.68,688.541 1678.24,688.541 1678.8,688.541 1679.36,688.541 1679.92,688.541 1680.48,688.541 1681.04,688.541 1681.6,688.541 1682.16,688.541 1682.72,688.541 1683.28,688.541 1683.84,688.541 1684.4,688.541 1684.95,688.541 1685.51,688.541 1686.07,688.541 1686.63,688.541 1687.19,688.541 1687.75,688.541 1688.31,688.541 1688.87,688.541 1689.43,688.541 1689.99,688.541 1690.55,688.541 1691.11,688.541 1691.67,688.541 1692.23,688.541 1692.78,688.541 1693.34,688.541 1693.9,688.541 1694.46,688.541 1695.02,688.541 1695.58,688.541 1696.14,688.541 1696.7,688.541 1697.26,688.541 1697.82,688.541 1698.38,688.541 1698.94,688.541 1699.5,688.541 1700.05,688.541 1700.61,688.541 1701.17,688.541 1701.73,688.541 1702.29,688.541 1702.85,688.541 1703.41,688.541 1703.97,688.541 1704.53,688.541 1705.09,688.541 1705.65,688.541 1706.21,688.541 1706.77,688.541 1707.32,688.541 1707.88,688.541 1708.44,688.541 1709,688.541 1709.56,688.541 1710.12,688.541 1710.68,688.541 1711.24,688.541 1711.8,688.541 1712.36,688.541 1712.92,688.541 1713.48,688.541 1714.04,688.541 1714.6,688.541 1715.15,688.541 1715.71,688.541 1716.27,688.541 1716.83,688.541 1717.39,688.541 1717.95,688.541 1718.51,688.541 1719.07,688.541 1719.63,688.541 1720.19,688.541 1720.75,688.541 1721.31,688.541 1721.87,688.541 1722.42,688.541 1722.98,688.541 1723.54,688.541 1724.1,688.541 1724.66,688.541 1725.22,688.541 1725.78,688.541 1726.34,688.541 1726.9,688.541 1727.46,688.541 1728.02,688.541 1728.58,688.541 1729.14,688.541 1729.69,688.541 1730.25,688.541 1730.81,688.541 1731.37,688.541 1731.93,688.541 1732.49,688.541 1733.05,688.541 1733.61,688.541 1734.17,688.541 1734.73,688.541 1735.29,688.541 1735.85,688.541 1736.41,688.541 1736.97,688.541 1737.52,688.541 1738.08,688.541 1738.64,688.541 1739.2,688.541 1739.76,688.541 1740.32,688.541 1740.88,688.541 1741.44,688.541 1742,688.541 1742.56,688.541 1743.12,688.541 1743.68,688.541 1744.24,688.541 1744.79,688.541 1745.35,688.541 1745.91,688.541 1746.47,688.541 1747.03,688.541 1747.59,688.541 1748.15,688.541 1748.71,688.541 1749.27,688.541 1749.83,688.541 1750.39,688.541 1750.95,688.541 1751.51,688.541 1752.06,688.541 1752.62,688.541 1753.18,688.541 1753.74,688.541 1754.3,688.541 1754.86,688.541 1755.42,688.541 1755.98,688.541 1756.54,688.541 1757.1,688.541 1757.66,688.541 1758.22,688.541 1758.78,688.541 1759.34,688.541 1759.89,688.541 1760.45,688.541 1761.01,688.541 1761.57,688.541 1762.13,688.541 1762.69,688.541 1763.25,688.541 1763.81,688.541 1764.37,688.541 1764.93,688.541 1765.49,688.541 1766.05,688.541 1766.61,688.541 1767.16,688.541 1767.72,688.541 1768.28,688.541 1768.84,688.541 1769.4,688.541 1769.96,688.541 1770.52,688.541 1771.08,688.541 1771.64,688.541 1772.2,688.541 1772.76,688.541 1773.32,688.541 1773.88,688.541 1774.43,688.541 1774.99,688.541 1775.55,688.541 1776.11,688.541 1776.67,688.541 1777.23,688.541 1777.79,688.541 1778.35,688.541 1778.91,688.541 1779.47,688.541 1780.03,688.541 1780.59,688.541 1781.15,688.541 1781.71,688.541 1782.26,688.541 1782.82,688.541 1783.38,688.541 1783.94,688.541 1784.5,688.541 1785.06,688.541 1785.62,688.541 1786.18,688.541 1786.74,688.541 1787.3,688.541 1787.86,688.541 1788.42,688.541 1788.98,688.541 1789.53,688.541 1790.09,688.541 1790.65,688.541 1791.21,688.541 1791.77,688.541 1792.33,688.541 1792.89,688.541 1793.45,688.541 1794.01,688.541 1794.57,688.541 1795.13,688.541 1795.69,688.541 1796.25,688.541 1796.8,688.541 1797.36,688.541 1797.92,688.541 1798.48,688.541 1799.04,688.541 1799.6,688.541 1800.16,688.541 1800.72,688.541 1801.28,688.541 1801.84,688.541 1802.4,688.541 1802.96,688.541 1803.52,688.541 1804.08,688.541 1804.63,688.541 1805.19,688.541 1805.75,688.541 1806.31,688.541 1806.87,688.541 1807.43,688.541 1807.99,688.541 1808.55,688.541 1809.11,688.541 1809.67,688.541 1810.23,688.541 1810.79,688.541 1811.35,688.541 1811.9,688.541 1812.46,688.541 1813.02,688.541 1813.58,688.541 1814.14,688.541 1814.7,688.541 1815.26,688.541 1815.82,688.541 1816.38,688.541 1816.94,688.541 1817.5,688.541 1818.06,688.541 1818.62,688.541 1819.18,688.541 1819.73,688.541 1820.29,688.541 1820.85,688.541 1821.41,688.541 1821.97,688.541 1822.53,688.541 1823.09,688.541 1823.65,688.541 1824.21,688.541 1824.77,688.541 1825.33,688.541 1825.89,688.541 1826.45,688.541 1827,688.541 1827.56,688.541 1828.12,688.541 1828.68,688.541 1829.24,688.541 1829.8,688.541 1830.36,688.541 1830.92,688.541 1831.48,688.541 1832.04,688.541 1832.6,688.541 1833.16,688.541 1833.72,688.541 1834.27,688.541 1834.83,688.541 1835.39,688.541 1835.95,688.541 1836.51,688.541 1837.07,688.541 1837.63,688.541 1838.19,688.541 \"/>\n<path clip-path=\"url(#clip453)\" d=\"M720.247 685.26 L720.806 685.26 L721.365 685.26 L721.924 685.26 L722.484 685.26 L723.043 685.26 L723.602 685.26 L724.161 685.26 L724.721 685.26 L725.28 685.26 L725.839 685.26 L726.398 685.26 L726.958 685.26 L727.517 685.26 L728.076 685.26 L728.635 685.26 L729.195 685.26 L729.754 685.26 L730.313 685.26 L730.872 685.26 L731.432 685.26 L731.991 685.26 L732.55 685.26 L733.109 685.26 L733.669 685.26 L734.228 685.26 L734.787 685.26 L735.346 685.26 L735.906 685.26 L736.465 685.26 L737.024 685.26 L737.583 685.26 L738.143 685.26 L738.702 685.26 L739.261 685.26 L739.82 685.26 L740.38 685.26 L740.939 685.26 L741.498 685.26 L742.057 685.26 L742.617 685.26 L743.176 685.26 L743.735 685.26 L744.294 685.26 L744.854 685.26 L745.413 685.26 L745.972 685.26 L746.531 685.26 L747.091 685.26 L747.65 685.26 L748.209 685.26 L748.768 685.26 L749.328 685.26 L749.887 685.26 L750.446 685.26 L751.005 685.26 L751.565 685.26 L752.124 685.26 L752.683 685.26 L753.242 685.26 L753.802 685.26 L754.361 685.26 L754.92 685.26 L755.479 685.26 L756.039 685.26 L756.598 685.26 L757.157 685.26 L757.716 685.26 L758.276 685.26 L758.835 685.26 L759.394 685.26 L759.953 685.26 L760.513 685.26 L761.072 685.26 L761.631 685.26 L762.19 685.26 L762.75 685.26 L763.309 685.26 L763.868 685.26 L764.427 685.26 L764.987 685.26 L765.546 685.26 L766.105 685.26 L766.664 685.26 L767.224 685.26 L767.783 685.26 L768.342 685.26 L768.901 685.26 L769.461 685.26 L770.02 685.26 L770.579 685.26 L771.138 685.26 L771.698 685.26 L772.257 685.26 L772.816 685.26 L773.375 685.26 L773.935 685.26 L774.494 685.26 L775.053 685.26 L775.612 685.26 L776.172 685.26 L776.731 685.26 L777.29 685.26 L777.849 685.26 L778.409 685.26 L778.968 685.26 L779.527 685.26 L780.086 685.26 L780.646 685.26 L781.205 685.26 L781.764 685.26 L782.323 685.26 L782.883 685.26 L783.442 685.26 L784.001 685.26 L784.56 685.26 L785.12 685.26 L785.679 685.26 L786.238 685.26 L786.797 685.26 L787.357 685.26 L787.916 685.26 L788.475 685.26 L789.034 685.26 L789.594 685.26 L790.153 685.26 L790.712 685.26 L791.271 685.26 L791.831 685.26 L792.39 685.26 L792.949 685.26 L793.508 685.26 L794.068 685.26 L794.627 685.26 L795.186 685.26 L795.745 685.26 L796.305 685.26 L796.864 685.26 L797.423 685.26 L797.982 685.26 L798.542 685.26 L799.101 685.26 L799.66 685.26 L800.219 685.26 L800.779 685.26 L801.338 685.26 L801.897 685.26 L802.456 685.26 L803.016 685.26 L803.575 685.26 L804.134 685.26 L804.693 685.26 L805.253 685.26 L805.812 685.26 L806.371 685.26 L806.931 685.26 L807.49 685.26 L808.049 685.26 L808.608 685.26 L809.168 685.26 L809.727 685.26 L810.286 685.26 L810.845 685.26 L811.405 685.26 L811.964 685.26 L812.523 685.26 L813.082 685.26 L813.642 685.26 L814.201 685.26 L814.76 685.26 L815.319 685.26 L815.879 685.26 L816.438 685.26 L816.997 685.26 L817.556 685.26 L818.116 685.26 L818.675 685.26 L819.234 685.26 L819.793 685.26 L820.353 685.26 L820.912 685.26 L821.471 685.26 L822.03 685.26 L822.59 685.26 L823.149 685.26 L823.708 685.26 L824.267 685.26 L824.827 685.26 L825.386 685.26 L825.945 685.26 L826.504 685.26 L827.064 685.26 L827.623 685.26 L828.182 685.26 L828.741 685.26 L829.301 685.26 L829.86 685.26 L830.419 685.26 L830.978 685.26 L831.538 685.26 L832.097 685.26 L832.656 685.26 L833.215 685.26 L833.775 685.26 L834.334 685.26 L834.893 685.26 L835.452 685.26 L836.012 685.26 L836.571 685.26 L837.13 685.26 L837.689 685.26 L838.249 685.26 L838.808 685.26 L839.367 685.26 L839.926 685.26 L840.486 685.26 L841.045 685.26 L841.604 685.26 L842.163 685.26 L842.723 685.26 L843.282 685.26 L843.841 685.26 L844.4 685.26 L844.96 685.26 L845.519 685.26 L846.078 685.26 L846.637 685.26 L847.197 685.26 L847.756 685.26 L848.315 685.26 L848.874 685.26 L849.434 685.26 L849.993 685.26 L850.552 685.26 L851.111 685.26 L851.671 685.26 L852.23 685.26 L852.789 685.26 L853.348 685.26 L853.908 685.26 L854.467 685.26 L855.026 685.26 L855.585 685.26 L856.145 685.26 L856.704 685.26 L857.263 685.26 L857.822 685.26 L858.382 685.26 L858.941 685.26 L859.5 685.26 L860.059 685.26 L860.619 685.26 L861.178 685.26 L861.737 685.26 L862.296 685.26 L862.856 685.26 L863.415 685.26 L863.974 685.26 L864.533 685.26 L865.093 685.26 L865.652 685.26 L866.211 685.26 L866.77 685.26 L867.33 685.26 L867.889 685.26 L868.448 685.26 L869.007 685.26 L869.567 685.26 L870.126 685.26 L870.685 685.26 L871.244 685.26 L871.804 685.26 L872.363 685.26 L872.922 685.26 L873.481 685.26 L874.041 685.26 L874.6 685.26 L875.159 685.26 L875.718 685.26 L876.278 685.26 L876.837 685.26 L877.396 685.26 L877.955 685.26 L878.515 685.26 L879.074 685.26 L879.633 685.26 L880.192 685.26 L880.752 685.26 L881.311 685.26 L881.87 685.26 L882.429 685.26 L882.989 685.26 L883.548 685.26 L884.107 685.26 L884.666 685.26 L885.226 685.26 L885.785 685.26 L886.344 685.26 L886.903 685.26 L887.463 685.26 L888.022 685.26 L888.581 685.26 L889.14 685.26 L889.7 685.26 L890.259 685.26 L890.818 685.26 L891.377 685.26 L891.937 685.26 L892.496 685.26 L893.055 685.26 L893.614 685.26 L894.174 685.26 L894.733 685.26 L895.292 685.26 L895.851 685.26 L896.411 685.26 L896.97 685.26 L897.529 685.26 L898.088 685.26 L898.648 685.26 L899.207 685.26 L899.766 685.26 L900.325 685.26 L900.885 685.26 L901.444 685.26 L902.003 685.26 L902.562 685.26 L903.122 685.26 L903.681 685.26 L904.24 685.26 L904.799 685.26 L905.359 685.26 L905.918 685.26 L906.477 685.26 L907.036 685.26 L907.596 685.26 L908.155 685.26 L908.714 685.26 L909.273 685.26 L909.833 685.26 L910.392 685.26 L910.951 685.26 L911.51 685.26 L912.07 685.26 L912.629 685.26 L913.188 685.26 L913.747 685.26 L914.307 685.26 L914.866 685.26 L915.425 685.26 L915.984 685.26 L916.544 685.26 L917.103 685.26 L917.662 685.26 L918.221 685.26 L918.781 685.26 L919.34 685.26 L919.899 685.26 L920.458 685.26 L921.018 685.26 L921.577 685.26 L922.136 685.26 L922.695 685.26 L923.255 685.26 L923.814 685.26 L924.373 685.26 L924.932 685.26 L925.492 685.26 L926.051 685.26 L926.61 685.26 L927.169 685.26 L927.729 685.26 L928.288 685.26 L928.847 685.26 L929.406 685.26 L929.966 685.26 L930.525 685.26 L931.084 685.26 L931.644 685.26 L932.203 685.26 L932.762 685.26 L933.321 685.26 L933.881 685.26 L934.44 685.26 L934.999 685.26 L935.558 685.26 L936.118 685.26 L936.677 685.26 L937.236 685.26 L937.795 685.26 L938.355 685.26 L938.914 685.26 L939.473 685.26 L940.032 685.26 L940.592 685.26 L941.151 685.26 L941.71 685.26 L942.269 685.26 L942.829 685.26 L943.388 685.26 L943.947 685.26 L944.506 685.26 L945.066 685.26 L945.625 685.26 L946.184 685.26 L946.743 685.26 L947.303 685.26 L947.862 685.26 L948.421 685.26 L948.98 685.26 L949.54 685.26 L950.099 685.26 L950.658 685.26 L951.217 685.26 L951.777 685.26 L952.336 685.26 L952.895 685.26 L953.454 685.26 L954.014 685.26 L954.573 685.26 L955.132 685.26 L955.691 685.26 L956.251 685.26 L956.81 685.26 L957.369 685.26 L957.928 685.26 L958.488 685.26 L959.047 685.26 L959.606 685.26 L960.165 685.26 L960.725 685.26 L961.284 685.26 L961.843 685.26 L962.402 685.26 L962.962 685.26 L963.521 685.26 L964.08 685.26 L964.639 685.26 L965.199 685.26 L965.758 685.26 L966.317 685.26 L966.876 685.26 L967.436 685.26 L967.995 685.26 L968.554 685.26 L969.113 685.26 L969.673 685.26 L970.232 685.26 L970.791 685.26 L971.35 685.26 L971.91 685.26 L972.469 685.26 L973.028 685.26 L973.587 685.26 L974.147 685.26 L974.706 685.26 L975.265 685.26 L975.824 685.26 L976.384 685.26 L976.943 685.26 L977.502 685.26 L978.061 685.26 L978.621 685.26 L979.18 685.26 L979.739 685.26 L980.298 685.26 L980.858 685.26 L981.417 685.26 L981.976 685.26 L982.535 685.26 L983.095 685.26 L983.654 685.26 L984.213 685.26 L984.772 685.26 L985.332 685.26 L985.891 685.26 L986.45 685.26 L987.009 685.26 L987.569 685.26 L988.128 685.26 L988.687 685.26 L989.246 685.26 L989.806 685.26 L990.365 685.26 L990.924 685.26 L991.483 685.26 L992.043 685.26 L992.602 685.26 L993.161 685.26 L993.72 685.26 L994.28 685.26 L994.839 685.26 L995.398 685.26 L995.957 685.26 L996.517 685.26 L997.076 685.26 L997.635 685.26 L998.194 685.26 L998.754 685.26 L999.313 685.26 L999.872 685.26 L1000.43 685.26 L1000.99 685.26 L1001.55 685.26 L1002.11 685.26 L1002.67 685.26 L1003.23 685.26 L1003.79 685.26 L1004.35 685.26 L1004.91 685.26 L1005.46 685.26 L1006.02 685.26 L1006.58 685.26 L1007.14 685.26 L1007.7 685.26 L1008.26 685.26 L1008.82 685.26 L1009.38 685.26 L1009.94 685.26 L1010.5 685.26 L1011.06 685.26 L1011.62 685.26 L1012.18 685.26 L1012.73 685.26 L1013.29 685.26 L1013.85 685.26 L1014.41 685.26 L1014.97 685.26 L1015.53 685.26 L1016.09 685.26 L1016.65 685.26 L1017.21 685.26 L1017.77 685.26 L1018.33 685.26 L1018.89 685.26 L1019.45 685.26 L1020.01 685.26 L1020.56 685.26 L1021.12 685.26 L1021.68 685.26 L1022.24 685.26 L1022.8 685.26 L1023.36 685.26 L1023.92 685.26 L1024.48 685.26 L1025.04 685.26 L1025.6 685.26 L1026.16 685.26 L1026.72 685.26 L1027.28 685.26 L1027.83 685.26 L1028.39 685.26 L1028.95 685.26 L1029.51 685.26 L1030.07 685.26 L1030.63 685.26 L1031.19 685.26 L1031.75 685.26 L1032.31 685.26 L1032.87 685.26 L1033.43 685.26 L1033.99 685.26 L1034.55 685.26 L1035.1 685.26 L1035.66 685.26 L1036.22 685.26 L1036.78 685.26 L1037.34 685.26 L1037.9 685.26 L1038.46 685.26 L1039.02 685.26 L1039.58 685.26 L1040.14 685.26 L1040.7 685.26 L1041.26 685.26 L1041.82 685.26 L1042.38 685.26 L1042.93 685.26 L1043.49 685.26 L1044.05 685.26 L1044.61 685.26 L1045.17 685.26 L1045.73 685.26 L1046.29 685.26 L1046.85 685.26 L1047.41 685.26 L1047.97 685.26 L1048.53 685.26 L1049.09 685.26 L1049.65 685.26 L1050.2 685.26 L1050.76 685.26 L1051.32 685.26 L1051.88 685.26 L1052.44 685.26 L1053 685.26 L1053.56 685.26 L1054.12 685.26 L1054.68 685.26 L1055.24 685.26 L1055.8 685.26 L1056.36 685.26 L1056.92 685.26 L1057.48 685.26 L1058.03 685.26 L1058.59 685.26 L1059.15 685.26 L1059.71 685.26 L1060.27 685.26 L1060.83 685.26 L1061.39 685.26 L1061.95 685.26 L1062.51 685.26 L1063.07 685.26 L1063.63 685.26 L1064.19 685.26 L1064.75 685.26 L1065.3 685.26 L1065.86 685.26 L1066.42 685.26 L1066.98 685.26 L1067.54 685.26 L1068.1 685.26 L1068.66 685.26 L1069.22 685.26 L1069.78 685.26 L1070.34 685.26 L1070.9 685.26 L1071.46 685.26 L1072.02 685.26 L1072.57 685.26 L1073.13 685.26 L1073.69 685.26 L1074.25 685.26 L1074.81 685.26 L1075.37 685.26 L1075.93 685.26 L1076.49 685.26 L1077.05 685.26 L1077.61 685.26 L1078.17 685.26 L1078.73 685.26 L1079.29 685.26 L1079.85 685.26 L1080.4 685.26 L1080.96 685.26 L1081.52 685.26 L1082.08 685.26 L1082.64 685.26 L1083.2 685.26 L1083.76 685.26 L1084.32 685.26 L1084.88 685.26 L1085.44 685.26 L1086 685.26 L1086.56 685.26 L1087.12 685.26 L1087.67 685.26 L1088.23 685.26 L1088.79 685.26 L1089.35 685.26 L1089.91 685.26 L1090.47 685.26 L1091.03 685.26 L1091.59 685.26 L1092.15 685.26 L1092.71 685.26 L1093.27 685.26 L1093.83 685.26 L1094.39 685.26 L1094.94 685.26 L1095.5 685.26 L1096.06 685.26 L1096.62 685.26 L1097.18 685.26 L1097.74 685.26 L1098.3 685.26 L1098.86 685.26 L1099.42 685.26 L1099.98 685.26 L1100.54 685.26 L1101.1 685.26 L1101.66 685.26 L1102.22 685.26 L1102.77 685.26 L1103.33 685.26 L1103.89 685.26 L1104.45 685.26 L1105.01 685.26 L1105.57 685.26 L1106.13 685.26 L1106.69 685.26 L1107.25 685.26 L1107.81 685.26 L1108.37 685.26 L1108.93 685.26 L1109.49 685.26 L1110.04 685.26 L1110.6 685.26 L1111.16 685.26 L1111.72 685.26 L1112.28 685.26 L1112.84 685.26 L1113.4 685.26 L1113.96 685.26 L1114.52 685.26 L1115.08 685.26 L1115.64 685.26 L1116.2 685.26 L1116.76 685.26 L1117.31 685.26 L1117.87 685.26 L1118.43 685.26 L1118.99 685.26 L1119.55 685.26 L1120.11 685.26 L1120.67 685.26 L1121.23 685.26 L1121.79 685.26 L1122.35 685.26 L1122.91 685.26 L1123.47 685.26 L1124.03 685.26 L1124.59 685.26 L1125.14 685.26 L1125.7 685.26 L1126.26 685.26 L1126.82 685.26 L1127.38 685.26 L1127.94 685.26 L1128.5 685.26 L1129.06 685.26 L1129.62 685.26 L1130.18 685.26 L1130.74 685.26 L1131.3 685.26 L1131.86 685.26 L1132.41 685.26 L1132.97 685.26 L1133.53 685.26 L1134.09 685.26 L1134.65 685.26 L1135.21 685.26 L1135.77 685.26 L1136.33 685.26 L1136.89 685.26 L1137.45 685.26 L1138.01 685.26 L1138.57 685.26 L1139.13 685.26 L1139.68 685.26 L1140.24 685.26 L1140.8 685.26 L1141.36 685.26 L1141.92 685.26 L1142.48 685.26 L1143.04 685.26 L1143.6 685.26 L1144.16 685.26 L1144.72 685.26 L1145.28 685.26 L1145.84 685.26 L1146.4 685.26 L1146.96 685.26 L1147.51 685.26 L1148.07 685.26 L1148.63 685.26 L1149.19 685.26 L1149.75 685.26 L1150.31 685.26 L1150.87 685.26 L1151.43 685.26 L1151.99 685.26 L1152.55 685.26 L1153.11 685.26 L1153.67 685.26 L1154.23 685.26 L1154.78 685.26 L1155.34 685.26 L1155.9 685.26 L1156.46 685.26 L1157.02 685.26 L1157.58 685.26 L1158.14 685.26 L1158.7 685.26 L1159.26 685.26 L1159.82 685.26 L1160.38 685.26 L1160.94 685.26 L1161.5 685.26 L1162.05 685.26 L1162.61 685.26 L1163.17 685.26 L1163.73 685.26 L1164.29 685.26 L1164.85 685.26 L1165.41 685.26 L1165.97 685.26 L1166.53 685.26 L1167.09 685.26 L1167.65 685.26 L1168.21 685.26 L1168.77 685.26 L1169.33 685.26 L1169.88 685.26 L1170.44 685.26 L1171 685.26 L1171.56 685.26 L1172.12 685.26 L1172.68 685.26 L1173.24 685.26 L1173.8 685.26 L1174.36 685.26 L1174.92 685.26 L1175.48 685.26 L1176.04 685.26 L1176.6 685.26 L1177.15 685.26 L1177.71 685.26 L1178.27 685.26 L1178.83 685.26 L1179.39 685.26 L1179.95 685.26 L1180.51 685.26 L1181.07 685.26 L1181.63 685.26 L1182.19 685.26 L1182.75 685.26 L1183.31 685.26 L1183.87 685.26 L1184.43 685.26 L1184.98 685.26 L1185.54 685.26 L1186.1 685.26 L1186.66 685.26 L1187.22 685.26 L1187.78 685.26 L1188.34 685.26 L1188.9 685.26 L1189.46 685.26 L1190.02 685.26 L1190.58 685.26 L1191.14 685.26 L1191.7 685.26 L1192.25 685.26 L1192.81 685.26 L1193.37 685.26 L1193.93 685.26 L1194.49 685.26 L1195.05 685.26 L1195.61 685.26 L1196.17 685.26 L1196.73 685.26 L1197.29 685.26 L1197.85 685.26 L1198.41 685.26 L1198.97 685.26 L1199.52 685.26 L1200.08 685.26 L1200.64 685.26 L1201.2 685.26 L1201.76 685.26 L1202.32 685.26 L1202.88 685.26 L1203.44 685.26 L1204 685.26 L1204.56 685.26 L1205.12 685.26 L1205.68 685.26 L1206.24 685.26 L1206.8 685.26 L1207.35 685.26 L1207.91 685.26 L1208.47 685.26 L1209.03 685.26 L1209.59 685.26 L1210.15 685.26 L1210.71 685.26 L1211.27 685.26 L1211.83 685.26 L1212.39 685.26 L1212.95 685.26 L1213.51 685.26 L1214.07 685.26 L1214.62 685.26 L1215.18 685.26 L1215.74 685.26 L1216.3 685.26 L1216.86 685.26 L1217.42 685.26 L1217.98 685.26 L1218.54 685.26 L1219.1 685.26 L1219.66 685.26 L1220.22 685.26 L1220.78 685.26 L1221.34 685.26 L1221.89 685.26 L1222.45 685.26 L1223.01 685.26 L1223.57 685.26 L1224.13 685.26 L1224.69 685.26 L1225.25 685.26 L1225.81 685.26 L1226.37 685.26 L1226.93 685.26 L1227.49 685.26 L1228.05 685.26 L1228.61 685.26 L1229.17 685.26 L1229.72 685.26 L1230.28 685.26 L1230.84 685.26 L1231.4 685.26 L1231.96 685.26 L1232.52 685.26 L1233.08 685.26 L1233.64 685.26 L1234.2 685.26 L1234.76 685.26 L1235.32 685.26 L1235.88 685.26 L1236.44 685.26 L1236.99 685.26 L1237.55 685.26 L1238.11 685.26 L1238.67 685.26 L1239.23 685.26 L1239.79 685.26 L1240.35 685.26 L1240.91 685.26 L1241.47 685.26 L1242.03 685.26 L1242.59 685.26 L1243.15 685.26 L1243.71 685.26 L1244.26 685.26 L1244.82 685.26 L1245.38 685.26 L1245.94 685.26 L1246.5 685.26 L1247.06 685.26 L1247.62 685.26 L1248.18 685.26 L1248.74 685.26 L1249.3 685.26 L1249.86 685.26 L1250.42 685.26 L1250.98 685.26 L1251.54 685.26 L1252.09 685.26 L1252.65 685.26 L1253.21 685.26 L1253.77 685.26 L1254.33 685.26 L1254.89 685.26 L1255.45 685.26 L1256.01 685.26 L1256.57 685.26 L1257.13 685.26 L1257.69 685.26 L1258.25 685.26 L1258.81 685.26 L1259.36 685.26 L1259.92 685.26 L1260.48 685.26 L1261.04 685.26 L1261.6 685.26 L1262.16 685.26 L1262.72 685.26 L1263.28 685.26 L1263.84 685.26 L1264.4 685.26 L1264.96 685.26 L1265.52 685.26 L1266.08 685.26 L1266.63 685.26 L1267.19 685.26 L1267.75 685.26 L1268.31 685.26 L1268.87 685.26 L1269.43 685.26 L1269.99 685.26 L1270.55 685.26 L1271.11 685.26 L1271.67 685.26 L1272.23 685.26 L1272.79 685.26 L1273.35 685.26 L1273.91 685.26 L1274.46 685.26 L1275.02 685.26 L1275.58 685.26 L1276.14 685.26 L1276.7 685.26 L1277.26 685.26 L1277.82 685.26 L1278.38 685.26 L1278.94 685.26 L1279.5 685.26 L1280.06 685.26 L1280.62 685.26 L1281.18 685.26 L1281.73 685.26 L1282.29 685.26 L1282.85 685.26 L1283.41 685.26 L1283.97 685.26 L1284.53 685.26 L1285.09 685.26 L1285.65 685.26 L1286.21 685.26 L1286.77 685.26 L1287.33 685.26 L1287.89 685.26 L1288.45 685.26 L1289 685.26 L1289.56 685.26 L1290.12 685.26 L1290.68 685.26 L1291.24 685.26 L1291.8 685.26 L1292.36 685.26 L1292.92 685.26 L1293.48 685.26 L1294.04 685.26 L1294.6 685.26 L1295.16 685.26 L1295.72 685.26 L1296.28 685.26 L1296.83 685.26 L1297.39 685.26 L1297.95 685.26 L1298.51 685.26 L1299.07 685.26 L1299.63 685.26 L1300.19 685.26 L1300.75 685.26 L1301.31 685.26 L1301.87 685.26 L1302.43 685.26 L1302.99 685.26 L1303.55 685.26 L1304.1 685.26 L1304.66 685.26 L1305.22 685.26 L1305.78 685.26 L1306.34 685.26 L1306.9 685.26 L1307.46 685.26 L1308.02 685.26 L1308.58 685.26 L1309.14 685.26 L1309.7 685.26 L1310.26 685.26 L1310.82 685.26 L1311.38 685.26 L1311.93 685.26 L1312.49 685.26 L1313.05 685.26 L1313.61 685.26 L1314.17 685.26 L1314.73 685.26 L1315.29 685.26 L1315.85 685.26 L1316.41 685.26 L1316.97 685.26 L1317.53 685.26 L1318.09 685.26 L1318.65 685.26 L1319.2 685.26 L1319.76 685.26 L1320.32 685.26 L1320.88 685.26 L1321.44 685.26 L1322 685.26 L1322.56 685.26 L1323.12 685.26 L1323.68 685.26 L1324.24 685.26 L1324.8 685.26 L1325.36 685.26 L1325.92 685.26 L1326.47 685.26 L1327.03 685.26 L1327.59 685.26 L1328.15 685.26 L1328.71 685.26 L1329.27 685.26 L1329.83 685.26 L1330.39 685.26 L1330.95 685.26 L1331.51 685.26 L1332.07 685.26 L1332.63 685.26 L1333.19 685.26 L1333.75 685.26 L1334.3 685.26 L1334.86 685.26 L1335.42 685.26 L1335.98 685.26 L1336.54 685.26 L1337.1 685.26 L1337.66 685.26 L1338.22 685.26 L1338.78 685.26 L1339.34 685.26 L1339.9 685.26 L1340.46 685.26 L1341.02 685.26 L1341.57 685.26 L1342.13 685.26 L1342.69 685.26 L1343.25 685.26 L1343.81 685.26 L1344.37 685.26 L1344.93 685.26 L1345.49 685.26 L1346.05 685.26 L1346.61 685.26 L1347.17 685.26 L1347.73 685.26 L1348.29 685.26 L1348.84 685.26 L1349.4 685.26 L1349.96 685.26 L1350.52 685.26 L1351.08 685.26 L1351.64 685.26 L1352.2 685.26 L1352.76 685.26 L1353.32 685.26 L1353.88 685.26 L1354.44 685.26 L1355 685.26 L1355.56 685.26 L1356.12 685.26 L1356.67 685.26 L1357.23 685.26 L1357.79 685.26 L1358.35 685.26 L1358.91 685.26 L1359.47 685.26 L1360.03 685.26 L1360.59 685.26 L1361.15 685.26 L1361.71 685.26 L1362.27 685.26 L1362.83 685.26 L1363.39 685.26 L1363.94 685.26 L1364.5 685.26 L1365.06 685.26 L1365.62 685.26 L1366.18 685.26 L1366.74 685.26 L1367.3 685.26 L1367.86 685.26 L1368.42 685.26 L1368.98 685.26 L1369.54 685.26 L1370.1 685.26 L1370.66 685.26 L1371.21 685.26 L1371.77 685.26 L1372.33 685.26 L1372.89 685.26 L1373.45 685.26 L1374.01 685.26 L1374.57 685.26 L1375.13 685.26 L1375.69 685.26 L1376.25 685.26 L1376.81 685.26 L1377.37 685.26 L1377.93 685.26 L1378.49 685.26 L1379.04 685.26 L1379.6 685.26 L1380.16 685.26 L1380.72 685.26 L1381.28 685.26 L1381.84 685.26 L1382.4 685.26 L1382.96 685.26 L1383.52 685.26 L1384.08 685.26 L1384.64 685.26 L1385.2 685.26 L1385.76 685.26 L1386.31 685.26 L1386.87 685.26 L1387.43 685.26 L1387.99 685.26 L1388.55 685.26 L1389.11 685.26 L1389.67 685.26 L1390.23 685.26 L1390.79 685.26 L1391.35 685.26 L1391.91 685.26 L1392.47 685.26 L1393.03 685.26 L1393.58 685.26 L1394.14 685.26 L1394.7 685.26 L1395.26 685.26 L1395.82 685.26 L1396.38 685.26 L1396.94 685.26 L1397.5 685.26 L1398.06 685.26 L1398.62 685.26 L1399.18 685.26 L1399.74 685.26 L1400.3 685.26 L1400.86 685.26 L1401.41 685.26 L1401.97 685.26 L1402.53 685.26 L1403.09 685.26 L1403.65 685.26 L1404.21 685.26 L1404.77 685.26 L1405.33 685.26 L1405.89 685.26 L1406.45 685.26 L1407.01 685.26 L1407.57 685.26 L1408.13 685.26 L1408.68 685.26 L1409.24 685.26 L1409.8 685.26 L1410.36 685.26 L1410.92 685.26 L1411.48 685.26 L1412.04 685.26 L1412.6 685.26 L1413.16 685.26 L1413.72 685.26 L1414.28 685.26 L1414.84 685.26 L1415.4 685.26 L1415.95 685.26 L1416.51 685.26 L1417.07 685.26 L1417.63 685.26 L1418.19 685.26 L1418.75 685.26 L1419.31 685.26 L1419.87 685.26 L1420.43 685.26 L1420.99 685.26 L1421.55 685.26 L1422.11 685.26 L1422.67 685.26 L1423.23 685.26 L1423.78 685.26 L1424.34 685.26 L1424.9 685.26 L1425.46 685.26 L1426.02 685.26 L1426.58 685.26 L1427.14 685.26 L1427.7 685.26 L1428.26 685.26 L1428.82 685.26 L1429.38 685.26 L1429.94 685.26 L1430.5 685.26 L1431.05 685.26 L1431.61 685.26 L1432.17 685.26 L1432.73 685.26 L1433.29 685.26 L1433.85 685.26 L1434.41 685.26 L1434.97 685.26 L1435.53 685.26 L1436.09 685.26 L1436.65 685.26 L1437.21 685.26 L1437.77 685.26 L1438.33 685.26 L1438.88 685.26 L1439.44 685.26 L1440 685.26 L1440.56 685.26 L1441.12 685.26 L1441.68 685.26 L1442.24 685.26 L1442.8 685.26 L1443.36 685.26 L1443.92 685.26 L1444.48 685.26 L1445.04 685.26 L1445.6 685.26 L1446.15 685.26 L1446.71 685.26 L1447.27 685.26 L1447.83 685.26 L1448.39 685.26 L1448.95 685.26 L1449.51 685.26 L1450.07 685.26 L1450.63 685.26 L1451.19 685.26 L1451.75 685.26 L1452.31 685.26 L1452.87 685.26 L1453.42 685.26 L1453.98 685.26 L1454.54 685.26 L1455.1 685.26 L1455.66 685.26 L1456.22 685.26 L1456.78 685.26 L1457.34 685.26 L1457.9 685.26 L1458.46 685.26 L1459.02 685.26 L1459.58 685.26 L1460.14 685.26 L1460.7 685.26 L1461.25 685.26 L1461.81 685.26 L1462.37 685.26 L1462.93 685.26 L1463.49 685.26 L1464.05 685.26 L1464.61 685.26 L1465.17 685.26 L1465.73 685.26 L1466.29 685.26 L1466.85 685.26 L1467.41 685.26 L1467.97 685.26 L1468.52 685.26 L1469.08 685.26 L1469.64 685.26 L1470.2 685.26 L1470.76 685.26 L1471.32 685.26 L1471.88 685.26 L1472.44 685.26 L1473 685.26 L1473.56 685.26 L1474.12 685.26 L1474.68 685.26 L1475.24 685.26 L1475.79 685.26 L1476.35 685.26 L1476.91 685.26 L1477.47 685.26 L1478.03 685.26 L1478.59 685.26 L1479.15 685.26 L1479.71 685.26 L1480.27 685.26 L1480.83 685.26 L1481.39 685.26 L1481.95 685.26 L1482.51 685.26 L1483.07 685.26 L1483.62 685.26 L1484.18 685.26 L1484.74 685.26 L1485.3 685.26 L1485.86 685.26 L1486.42 685.26 L1486.98 685.26 L1487.54 685.26 L1488.1 685.26 L1488.66 685.26 L1489.22 685.26 L1489.78 685.26 L1490.34 685.26 L1490.89 685.26 L1491.45 685.26 L1492.01 685.26 L1492.57 685.26 L1493.13 685.26 L1493.69 685.26 L1494.25 685.26 L1494.81 685.26 L1495.37 685.26 L1495.93 685.26 L1496.49 685.26 L1497.05 685.26 L1497.61 685.26 L1498.16 685.26 L1498.72 685.26 L1499.28 685.26 L1499.84 685.26 L1500.4 685.26 L1500.96 685.26 L1501.52 685.26 L1502.08 685.26 L1502.64 685.26 L1503.2 685.26 L1503.76 685.26 L1504.32 685.26 L1504.88 685.26 L1505.44 685.26 L1505.99 685.26 L1506.55 685.26 L1507.11 685.26 L1507.67 685.26 L1508.23 685.26 L1508.79 685.26 L1509.35 685.26 L1509.91 685.26 L1510.47 685.26 L1511.03 685.26 L1511.59 685.26 L1512.15 685.26 L1512.71 685.26 L1513.26 685.26 L1513.82 685.26 L1514.38 685.26 L1514.94 685.26 L1515.5 685.26 L1516.06 685.26 L1516.62 685.26 L1517.18 685.26 L1517.74 685.26 L1518.3 685.26 L1518.86 685.26 L1519.42 685.26 L1519.98 685.26 L1520.53 685.26 L1521.09 685.26 L1521.65 685.26 L1522.21 685.26 L1522.77 685.26 L1523.33 685.26 L1523.89 685.26 L1524.45 685.26 L1525.01 685.26 L1525.57 685.26 L1526.13 685.26 L1526.69 685.26 L1527.25 685.26 L1527.81 685.26 L1528.36 685.26 L1528.92 685.26 L1529.48 685.26 L1530.04 685.26 L1530.6 685.26 L1531.16 685.26 L1531.72 685.26 L1532.28 685.26 L1532.84 685.26 L1533.4 685.26 L1533.96 685.26 L1534.52 685.26 L1535.08 685.26 L1535.63 685.26 L1536.19 685.26 L1536.75 685.26 L1537.31 685.26 L1537.87 685.26 L1538.43 685.26 L1538.99 685.26 L1539.55 685.26 L1540.11 685.26 L1540.67 685.26 L1541.23 685.26 L1541.79 685.26 L1542.35 685.26 L1542.9 685.26 L1543.46 685.26 L1544.02 685.26 L1544.58 685.26 L1545.14 685.26 L1545.7 685.26 L1546.26 685.26 L1546.82 685.26 L1547.38 685.26 L1547.94 685.26 L1548.5 685.26 L1549.06 685.26 L1549.62 685.26 L1550.18 685.26 L1550.73 685.26 L1551.29 685.26 L1551.85 685.26 L1552.41 685.26 L1552.97 685.26 L1553.53 685.26 L1554.09 685.26 L1554.65 685.26 L1555.21 685.26 L1555.77 685.26 L1556.33 685.26 L1556.89 685.26 L1557.45 685.26 L1558 685.26 L1558.56 685.26 L1559.12 685.26 L1559.68 685.26 L1560.24 685.26 L1560.8 685.26 L1561.36 685.26 L1561.92 685.26 L1562.48 685.26 L1563.04 685.26 L1563.6 685.26 L1564.16 685.26 L1564.72 685.26 L1565.28 685.26 L1565.83 685.26 L1566.39 685.26 L1566.95 685.26 L1567.51 685.26 L1568.07 685.26 L1568.63 685.26 L1569.19 685.26 L1569.75 685.26 L1570.31 685.26 L1570.87 685.26 L1571.43 685.26 L1571.99 685.26 L1572.55 685.26 L1573.1 685.26 L1573.66 685.26 L1574.22 685.26 L1574.78 685.26 L1575.34 685.26 L1575.9 685.26 L1576.46 685.26 L1577.02 685.26 L1577.58 685.26 L1578.14 685.26 L1578.7 685.26 L1579.26 685.26 L1579.82 685.26 L1580.37 685.26 L1580.93 685.26 L1581.49 685.26 L1582.05 685.26 L1582.61 685.26 L1583.17 685.26 L1583.73 685.26 L1584.29 685.26 L1584.85 685.26 L1585.41 685.26 L1585.97 685.26 L1586.53 685.26 L1587.09 685.26 L1587.65 685.26 L1588.2 685.26 L1588.76 685.26 L1589.32 685.26 L1589.88 685.26 L1590.44 685.26 L1591 685.26 L1591.56 685.26 L1592.12 685.26 L1592.68 685.26 L1593.24 685.26 L1593.8 685.26 L1594.36 685.26 L1594.92 685.26 L1595.47 685.26 L1596.03 685.26 L1596.59 685.26 L1597.15 685.26 L1597.71 685.26 L1598.27 685.26 L1598.83 685.26 L1599.39 685.26 L1599.95 685.26 L1600.51 685.26 L1601.07 685.26 L1601.63 685.26 L1602.19 685.26 L1602.74 685.26 L1603.3 685.26 L1603.86 685.26 L1604.42 685.26 L1604.98 685.26 L1605.54 685.26 L1606.1 685.26 L1606.66 685.26 L1607.22 685.26 L1607.78 685.26 L1608.34 685.26 L1608.9 685.26 L1609.46 685.26 L1610.02 685.26 L1610.57 685.26 L1611.13 685.26 L1611.69 685.26 L1612.25 685.26 L1612.81 685.26 L1613.37 685.26 L1613.93 685.26 L1614.49 685.26 L1615.05 685.26 L1615.61 685.26 L1616.17 685.26 L1616.73 685.26 L1617.29 685.26 L1617.84 685.26 L1618.4 685.26 L1618.96 685.26 L1619.52 685.26 L1620.08 685.26 L1620.64 685.26 L1621.2 685.26 L1621.76 685.26 L1622.32 685.26 L1622.88 685.26 L1623.44 685.26 L1624 685.26 L1624.56 685.26 L1625.11 685.26 L1625.67 685.26 L1626.23 685.26 L1626.79 685.26 L1627.35 685.26 L1627.91 685.26 L1628.47 685.26 L1629.03 685.26 L1629.59 685.26 L1630.15 685.26 L1630.71 685.26 L1631.27 685.26 L1631.83 685.26 L1632.39 685.26 L1632.94 685.26 L1633.5 685.26 L1634.06 685.26 L1634.62 685.26 L1635.18 685.26 L1635.74 685.26 L1636.3 685.26 L1636.86 685.26 L1637.42 685.26 L1637.98 685.26 L1638.54 685.26 L1639.1 685.26 L1639.66 685.26 L1640.21 685.26 L1640.77 685.26 L1641.33 685.26 L1641.89 685.26 L1642.45 685.26 L1643.01 685.26 L1643.57 685.26 L1644.13 685.26 L1644.69 685.26 L1645.25 685.26 L1645.81 685.26 L1646.37 685.26 L1646.93 685.26 L1647.48 685.26 L1648.04 685.26 L1648.6 685.26 L1649.16 685.26 L1649.72 685.26 L1650.28 685.26 L1650.84 685.26 L1651.4 685.26 L1651.96 685.26 L1652.52 685.26 L1653.08 685.26 L1653.64 685.26 L1654.2 685.26 L1654.76 685.26 L1655.31 685.26 L1655.87 685.26 L1656.43 685.26 L1656.99 685.26 L1657.55 685.26 L1658.11 685.26 L1658.67 685.26 L1659.23 685.26 L1659.79 685.26 L1660.35 685.26 L1660.91 685.26 L1661.47 685.26 L1662.03 685.26 L1662.58 685.26 L1663.14 685.26 L1663.7 685.26 L1664.26 685.26 L1664.82 685.26 L1665.38 685.26 L1665.94 685.26 L1666.5 685.26 L1667.06 685.26 L1667.62 685.26 L1668.18 685.26 L1668.74 685.26 L1669.3 685.26 L1669.85 685.26 L1670.41 685.26 L1670.97 685.26 L1671.53 685.26 L1672.09 685.26 L1672.65 685.26 L1673.21 685.26 L1673.77 685.26 L1674.33 685.26 L1674.89 685.26 L1675.45 685.26 L1676.01 685.26 L1676.57 685.26 L1677.13 685.26 L1677.68 685.26 L1678.24 685.26 L1678.8 685.26 L1679.36 685.26 L1679.92 685.26 L1680.48 685.26 L1681.04 685.26 L1681.6 685.26 L1682.16 685.26 L1682.72 685.26 L1683.28 685.26 L1683.84 685.26 L1684.4 685.26 L1684.95 685.26 L1685.51 685.26 L1686.07 685.26 L1686.63 685.26 L1687.19 685.26 L1687.75 685.26 L1688.31 685.26 L1688.87 685.26 L1689.43 685.26 L1689.99 685.26 L1690.55 685.26 L1691.11 685.26 L1691.67 685.26 L1692.23 685.26 L1692.78 685.26 L1693.34 685.26 L1693.9 685.26 L1694.46 685.26 L1695.02 685.26 L1695.58 685.26 L1696.14 685.26 L1696.7 685.26 L1697.26 685.26 L1697.82 685.26 L1698.38 685.26 L1698.94 685.26 L1699.5 685.26 L1700.05 685.26 L1700.61 685.26 L1701.17 685.26 L1701.73 685.26 L1702.29 685.26 L1702.85 685.26 L1703.41 685.26 L1703.97 685.26 L1704.53 685.26 L1705.09 685.26 L1705.65 685.26 L1706.21 685.26 L1706.77 685.26 L1707.32 685.26 L1707.88 685.26 L1708.44 685.26 L1709 685.26 L1709.56 685.26 L1710.12 685.26 L1710.68 685.26 L1711.24 685.26 L1711.8 685.26 L1712.36 685.26 L1712.92 685.26 L1713.48 685.26 L1714.04 685.26 L1714.6 685.26 L1715.15 685.26 L1715.71 685.26 L1716.27 685.26 L1716.83 685.26 L1717.39 685.26 L1717.95 685.26 L1718.51 685.26 L1719.07 685.26 L1719.63 685.26 L1720.19 685.26 L1720.75 685.26 L1721.31 685.26 L1721.87 685.26 L1722.42 685.26 L1722.98 685.26 L1723.54 685.26 L1724.1 685.26 L1724.66 685.26 L1725.22 685.26 L1725.78 685.26 L1726.34 685.26 L1726.9 685.26 L1727.46 685.26 L1728.02 685.26 L1728.58 685.26 L1729.14 685.26 L1729.69 685.26 L1730.25 685.26 L1730.81 685.26 L1731.37 685.26 L1731.93 685.26 L1732.49 685.26 L1733.05 685.26 L1733.61 685.26 L1734.17 685.26 L1734.73 685.26 L1735.29 685.26 L1735.85 685.26 L1736.41 685.26 L1736.97 685.26 L1737.52 685.26 L1738.08 685.26 L1738.64 685.26 L1739.2 685.26 L1739.76 685.26 L1740.32 685.26 L1740.88 685.26 L1741.44 685.26 L1742 685.26 L1742.56 685.26 L1743.12 685.26 L1743.68 685.26 L1744.24 685.26 L1744.79 685.26 L1745.35 685.26 L1745.91 685.26 L1746.47 685.26 L1747.03 685.26 L1747.59 685.26 L1748.15 685.26 L1748.71 685.26 L1749.27 685.26 L1749.83 685.26 L1750.39 685.26 L1750.95 685.26 L1751.51 685.26 L1752.06 685.26 L1752.62 685.26 L1753.18 685.26 L1753.74 685.26 L1754.3 685.26 L1754.86 685.26 L1755.42 685.26 L1755.98 685.26 L1756.54 685.26 L1757.1 685.26 L1757.66 685.26 L1758.22 685.26 L1758.78 685.26 L1759.34 685.26 L1759.89 685.26 L1760.45 685.26 L1761.01 685.26 L1761.57 685.26 L1762.13 685.26 L1762.69 685.26 L1763.25 685.26 L1763.81 685.26 L1764.37 685.26 L1764.93 685.26 L1765.49 685.26 L1766.05 685.26 L1766.61 685.26 L1767.16 685.26 L1767.72 685.26 L1768.28 685.26 L1768.84 685.26 L1769.4 685.26 L1769.96 685.26 L1770.52 685.26 L1771.08 685.26 L1771.64 685.26 L1772.2 685.26 L1772.76 685.26 L1773.32 685.26 L1773.88 685.26 L1774.43 685.26 L1774.99 685.26 L1775.55 685.26 L1776.11 685.26 L1776.67 685.26 L1777.23 685.26 L1777.79 685.26 L1778.35 685.26 L1778.91 685.26 L1779.47 685.26 L1780.03 685.26 L1780.59 685.26 L1781.15 685.26 L1781.71 685.26 L1782.26 685.26 L1782.82 685.26 L1783.38 685.26 L1783.94 685.26 L1784.5 685.26 L1785.06 685.26 L1785.62 685.26 L1786.18 685.26 L1786.74 685.26 L1787.3 685.26 L1787.86 685.26 L1788.42 685.26 L1788.98 685.26 L1789.53 685.26 L1790.09 685.26 L1790.65 685.26 L1791.21 685.26 L1791.77 685.26 L1792.33 685.26 L1792.89 685.26 L1793.45 685.26 L1794.01 685.26 L1794.57 685.26 L1795.13 685.26 L1795.69 685.26 L1796.25 685.26 L1796.8 685.26 L1797.36 685.26 L1797.92 685.26 L1798.48 685.26 L1799.04 685.26 L1799.6 685.26 L1800.16 685.26 L1800.72 685.26 L1801.28 685.26 L1801.84 685.26 L1802.4 685.26 L1802.96 685.26 L1803.52 685.26 L1804.08 685.26 L1804.63 685.26 L1805.19 685.26 L1805.75 685.26 L1806.31 685.26 L1806.87 685.26 L1807.43 685.26 L1807.99 685.26 L1808.55 685.26 L1809.11 685.26 L1809.67 685.26 L1810.23 685.26 L1810.79 685.26 L1811.35 685.26 L1811.9 685.26 L1812.46 685.26 L1813.02 685.26 L1813.58 685.26 L1814.14 685.26 L1814.7 685.26 L1815.26 685.26 L1815.82 685.26 L1816.38 685.26 L1816.94 685.26 L1817.5 685.26 L1818.06 685.26 L1818.62 685.26 L1819.18 685.26 L1819.73 685.26 L1820.29 685.26 L1820.85 685.26 L1821.41 685.26 L1821.97 685.26 L1822.53 685.26 L1823.09 685.26 L1823.65 685.26 L1824.21 685.26 L1824.77 685.26 L1825.33 685.26 L1825.89 685.26 L1826.45 685.26 L1827 685.26 L1827.56 685.26 L1828.12 685.26 L1828.68 685.26 L1829.24 685.26 L1829.8 685.26 L1830.36 685.26 L1830.92 685.26 L1831.48 685.26 L1832.04 685.26 L1832.6 685.26 L1833.16 685.26 L1833.72 685.26 L1834.27 685.26 L1834.83 685.26 L1835.39 685.26 L1835.95 685.26 L1836.51 685.26 L1837.07 685.26 L1837.63 685.26 L1838.19 685.26 L1838.19 682.159 L1837.63 682.159 L1837.07 682.159 L1836.51 682.159 L1835.95 682.159 L1835.39 682.159 L1834.83 682.159 L1834.27 682.159 L1833.72 682.159 L1833.16 682.159 L1832.6 682.159 L1832.04 682.159 L1831.48 682.159 L1830.92 682.159 L1830.36 682.159 L1829.8 682.159 L1829.24 682.159 L1828.68 682.159 L1828.12 682.159 L1827.56 682.159 L1827 682.159 L1826.45 682.159 L1825.89 682.159 L1825.33 682.159 L1824.77 682.159 L1824.21 682.159 L1823.65 682.159 L1823.09 682.159 L1822.53 682.159 L1821.97 682.159 L1821.41 682.159 L1820.85 682.159 L1820.29 682.159 L1819.73 682.159 L1819.18 682.159 L1818.62 682.159 L1818.06 682.159 L1817.5 682.159 L1816.94 682.159 L1816.38 682.159 L1815.82 682.159 L1815.26 682.159 L1814.7 682.159 L1814.14 682.159 L1813.58 682.159 L1813.02 682.159 L1812.46 682.159 L1811.9 682.159 L1811.35 682.159 L1810.79 682.159 L1810.23 682.159 L1809.67 682.159 L1809.11 682.159 L1808.55 682.159 L1807.99 682.159 L1807.43 682.159 L1806.87 682.159 L1806.31 682.159 L1805.75 682.159 L1805.19 682.159 L1804.63 682.159 L1804.08 682.159 L1803.52 682.159 L1802.96 682.159 L1802.4 682.159 L1801.84 682.159 L1801.28 682.159 L1800.72 682.159 L1800.16 682.159 L1799.6 682.159 L1799.04 682.159 L1798.48 682.159 L1797.92 682.159 L1797.36 682.159 L1796.8 682.159 L1796.25 682.159 L1795.69 682.159 L1795.13 682.159 L1794.57 682.159 L1794.01 682.159 L1793.45 682.159 L1792.89 682.159 L1792.33 682.159 L1791.77 682.159 L1791.21 682.159 L1790.65 682.159 L1790.09 682.159 L1789.53 682.159 L1788.98 682.159 L1788.42 682.159 L1787.86 682.159 L1787.3 682.159 L1786.74 682.159 L1786.18 682.159 L1785.62 682.159 L1785.06 682.159 L1784.5 682.159 L1783.94 682.159 L1783.38 682.159 L1782.82 682.159 L1782.26 682.159 L1781.71 682.159 L1781.15 682.159 L1780.59 682.159 L1780.03 682.159 L1779.47 682.159 L1778.91 682.159 L1778.35 682.159 L1777.79 682.159 L1777.23 682.159 L1776.67 682.159 L1776.11 682.159 L1775.55 682.159 L1774.99 682.159 L1774.43 682.159 L1773.88 682.159 L1773.32 682.159 L1772.76 682.159 L1772.2 682.159 L1771.64 682.159 L1771.08 682.159 L1770.52 682.159 L1769.96 682.159 L1769.4 682.159 L1768.84 682.159 L1768.28 682.159 L1767.72 682.159 L1767.16 682.159 L1766.61 682.159 L1766.05 682.159 L1765.49 682.159 L1764.93 682.159 L1764.37 682.159 L1763.81 682.159 L1763.25 682.159 L1762.69 682.159 L1762.13 682.159 L1761.57 682.159 L1761.01 682.159 L1760.45 682.159 L1759.89 682.159 L1759.34 682.159 L1758.78 682.159 L1758.22 682.159 L1757.66 682.159 L1757.1 682.159 L1756.54 682.159 L1755.98 682.159 L1755.42 682.159 L1754.86 682.159 L1754.3 682.159 L1753.74 682.159 L1753.18 682.159 L1752.62 682.159 L1752.06 682.159 L1751.51 682.159 L1750.95 682.159 L1750.39 682.159 L1749.83 682.159 L1749.27 682.159 L1748.71 682.159 L1748.15 682.159 L1747.59 682.159 L1747.03 682.159 L1746.47 682.159 L1745.91 682.159 L1745.35 682.159 L1744.79 682.159 L1744.24 682.159 L1743.68 682.159 L1743.12 682.159 L1742.56 682.159 L1742 682.159 L1741.44 682.159 L1740.88 682.159 L1740.32 682.159 L1739.76 682.159 L1739.2 682.159 L1738.64 682.159 L1738.08 682.159 L1737.52 682.159 L1736.97 682.159 L1736.41 682.159 L1735.85 682.159 L1735.29 682.159 L1734.73 682.159 L1734.17 682.159 L1733.61 682.159 L1733.05 682.159 L1732.49 682.159 L1731.93 682.159 L1731.37 682.159 L1730.81 682.159 L1730.25 682.159 L1729.69 682.159 L1729.14 682.159 L1728.58 682.159 L1728.02 682.159 L1727.46 682.159 L1726.9 682.159 L1726.34 682.159 L1725.78 682.159 L1725.22 682.159 L1724.66 682.159 L1724.1 682.159 L1723.54 682.159 L1722.98 682.159 L1722.42 682.159 L1721.87 682.159 L1721.31 682.159 L1720.75 682.159 L1720.19 682.159 L1719.63 682.159 L1719.07 682.159 L1718.51 682.159 L1717.95 682.159 L1717.39 682.159 L1716.83 682.159 L1716.27 682.159 L1715.71 682.159 L1715.15 682.159 L1714.6 682.159 L1714.04 682.159 L1713.48 682.159 L1712.92 682.159 L1712.36 682.159 L1711.8 682.159 L1711.24 682.159 L1710.68 682.159 L1710.12 682.159 L1709.56 682.159 L1709 682.159 L1708.44 682.159 L1707.88 682.159 L1707.32 682.159 L1706.77 682.159 L1706.21 682.159 L1705.65 682.159 L1705.09 682.159 L1704.53 682.159 L1703.97 682.159 L1703.41 682.159 L1702.85 682.159 L1702.29 682.159 L1701.73 682.159 L1701.17 682.159 L1700.61 682.159 L1700.05 682.159 L1699.5 682.159 L1698.94 682.159 L1698.38 682.159 L1697.82 682.159 L1697.26 682.159 L1696.7 682.159 L1696.14 682.159 L1695.58 682.159 L1695.02 682.159 L1694.46 682.159 L1693.9 682.159 L1693.34 682.159 L1692.78 682.159 L1692.23 682.159 L1691.67 682.159 L1691.11 682.159 L1690.55 682.159 L1689.99 682.159 L1689.43 682.159 L1688.87 682.159 L1688.31 682.159 L1687.75 682.159 L1687.19 682.159 L1686.63 682.159 L1686.07 682.159 L1685.51 682.159 L1684.95 682.159 L1684.4 682.159 L1683.84 682.159 L1683.28 682.159 L1682.72 682.159 L1682.16 682.159 L1681.6 682.159 L1681.04 682.159 L1680.48 682.159 L1679.92 682.159 L1679.36 682.159 L1678.8 682.159 L1678.24 682.159 L1677.68 682.159 L1677.13 682.159 L1676.57 682.159 L1676.01 682.159 L1675.45 682.159 L1674.89 682.159 L1674.33 682.159 L1673.77 682.159 L1673.21 682.159 L1672.65 682.159 L1672.09 682.159 L1671.53 682.159 L1670.97 682.159 L1670.41 682.159 L1669.85 682.159 L1669.3 682.159 L1668.74 682.159 L1668.18 682.159 L1667.62 682.159 L1667.06 682.159 L1666.5 682.159 L1665.94 682.159 L1665.38 682.159 L1664.82 682.159 L1664.26 682.159 L1663.7 682.159 L1663.14 682.159 L1662.58 682.159 L1662.03 682.159 L1661.47 682.159 L1660.91 682.159 L1660.35 682.159 L1659.79 682.159 L1659.23 682.159 L1658.67 682.159 L1658.11 682.159 L1657.55 682.159 L1656.99 682.159 L1656.43 682.159 L1655.87 682.159 L1655.31 682.159 L1654.76 682.159 L1654.2 682.159 L1653.64 682.159 L1653.08 682.159 L1652.52 682.159 L1651.96 682.159 L1651.4 682.159 L1650.84 682.159 L1650.28 682.159 L1649.72 682.159 L1649.16 682.159 L1648.6 682.159 L1648.04 682.159 L1647.48 682.159 L1646.93 682.159 L1646.37 682.159 L1645.81 682.159 L1645.25 682.159 L1644.69 682.159 L1644.13 682.159 L1643.57 682.159 L1643.01 682.159 L1642.45 682.159 L1641.89 682.159 L1641.33 682.159 L1640.77 682.159 L1640.21 682.159 L1639.66 682.159 L1639.1 682.159 L1638.54 682.159 L1637.98 682.159 L1637.42 682.159 L1636.86 682.159 L1636.3 682.159 L1635.74 682.159 L1635.18 682.159 L1634.62 682.159 L1634.06 682.159 L1633.5 682.159 L1632.94 682.159 L1632.39 682.159 L1631.83 682.159 L1631.27 682.159 L1630.71 682.159 L1630.15 682.159 L1629.59 682.159 L1629.03 682.159 L1628.47 682.159 L1627.91 682.159 L1627.35 682.159 L1626.79 682.159 L1626.23 682.159 L1625.67 682.159 L1625.11 682.159 L1624.56 682.159 L1624 682.159 L1623.44 682.159 L1622.88 682.159 L1622.32 682.159 L1621.76 682.159 L1621.2 682.159 L1620.64 682.159 L1620.08 682.159 L1619.52 682.159 L1618.96 682.159 L1618.4 682.159 L1617.84 682.159 L1617.29 682.159 L1616.73 682.159 L1616.17 682.159 L1615.61 682.159 L1615.05 682.159 L1614.49 682.159 L1613.93 682.159 L1613.37 682.159 L1612.81 682.159 L1612.25 682.159 L1611.69 682.159 L1611.13 682.159 L1610.57 682.159 L1610.02 682.159 L1609.46 682.159 L1608.9 682.159 L1608.34 682.159 L1607.78 682.159 L1607.22 682.159 L1606.66 682.159 L1606.1 682.159 L1605.54 682.159 L1604.98 682.159 L1604.42 682.159 L1603.86 682.159 L1603.3 682.159 L1602.74 682.159 L1602.19 682.159 L1601.63 682.159 L1601.07 682.159 L1600.51 682.159 L1599.95 682.159 L1599.39 682.159 L1598.83 682.159 L1598.27 682.159 L1597.71 682.159 L1597.15 682.159 L1596.59 682.159 L1596.03 682.159 L1595.47 682.159 L1594.92 682.159 L1594.36 682.159 L1593.8 682.159 L1593.24 682.159 L1592.68 682.159 L1592.12 682.159 L1591.56 682.159 L1591 682.159 L1590.44 682.159 L1589.88 682.159 L1589.32 682.159 L1588.76 682.159 L1588.2 682.159 L1587.65 682.159 L1587.09 682.159 L1586.53 682.159 L1585.97 682.159 L1585.41 682.159 L1584.85 682.159 L1584.29 682.159 L1583.73 682.159 L1583.17 682.159 L1582.61 682.159 L1582.05 682.159 L1581.49 682.159 L1580.93 682.159 L1580.37 682.159 L1579.82 682.159 L1579.26 682.159 L1578.7 682.159 L1578.14 682.159 L1577.58 682.159 L1577.02 682.159 L1576.46 682.159 L1575.9 682.159 L1575.34 682.159 L1574.78 682.159 L1574.22 682.159 L1573.66 682.159 L1573.1 682.159 L1572.55 682.159 L1571.99 682.159 L1571.43 682.159 L1570.87 682.159 L1570.31 682.159 L1569.75 682.159 L1569.19 682.159 L1568.63 682.159 L1568.07 682.159 L1567.51 682.159 L1566.95 682.159 L1566.39 682.159 L1565.83 682.159 L1565.28 682.159 L1564.72 682.159 L1564.16 682.159 L1563.6 682.159 L1563.04 682.159 L1562.48 682.159 L1561.92 682.159 L1561.36 682.159 L1560.8 682.159 L1560.24 682.159 L1559.68 682.159 L1559.12 682.159 L1558.56 682.159 L1558 682.159 L1557.45 682.159 L1556.89 682.159 L1556.33 682.159 L1555.77 682.159 L1555.21 682.159 L1554.65 682.159 L1554.09 682.159 L1553.53 682.159 L1552.97 682.159 L1552.41 682.159 L1551.85 682.159 L1551.29 682.159 L1550.73 682.159 L1550.18 682.159 L1549.62 682.159 L1549.06 682.159 L1548.5 682.159 L1547.94 682.159 L1547.38 682.159 L1546.82 682.159 L1546.26 682.159 L1545.7 682.159 L1545.14 682.159 L1544.58 682.159 L1544.02 682.159 L1543.46 682.159 L1542.9 682.159 L1542.35 682.159 L1541.79 682.159 L1541.23 682.159 L1540.67 682.159 L1540.11 682.159 L1539.55 682.159 L1538.99 682.159 L1538.43 682.159 L1537.87 682.159 L1537.31 682.159 L1536.75 682.159 L1536.19 682.159 L1535.63 682.159 L1535.08 682.159 L1534.52 682.159 L1533.96 682.159 L1533.4 682.159 L1532.84 682.159 L1532.28 682.159 L1531.72 682.159 L1531.16 682.159 L1530.6 682.159 L1530.04 682.159 L1529.48 682.159 L1528.92 682.159 L1528.36 682.159 L1527.81 682.159 L1527.25 682.159 L1526.69 682.159 L1526.13 682.159 L1525.57 682.159 L1525.01 682.159 L1524.45 682.159 L1523.89 682.159 L1523.33 682.159 L1522.77 682.159 L1522.21 682.159 L1521.65 682.159 L1521.09 682.159 L1520.53 682.159 L1519.98 682.159 L1519.42 682.159 L1518.86 682.159 L1518.3 682.159 L1517.74 682.159 L1517.18 682.159 L1516.62 682.159 L1516.06 682.159 L1515.5 682.159 L1514.94 682.159 L1514.38 682.159 L1513.82 682.159 L1513.26 682.159 L1512.71 682.159 L1512.15 682.159 L1511.59 682.159 L1511.03 682.159 L1510.47 682.159 L1509.91 682.159 L1509.35 682.159 L1508.79 682.159 L1508.23 682.159 L1507.67 682.159 L1507.11 682.159 L1506.55 682.159 L1505.99 682.159 L1505.44 682.159 L1504.88 682.159 L1504.32 682.159 L1503.76 682.159 L1503.2 682.159 L1502.64 682.159 L1502.08 682.159 L1501.52 682.159 L1500.96 682.159 L1500.4 682.159 L1499.84 682.159 L1499.28 682.159 L1498.72 682.159 L1498.16 682.159 L1497.61 682.159 L1497.05 682.159 L1496.49 682.159 L1495.93 682.159 L1495.37 682.159 L1494.81 682.159 L1494.25 682.159 L1493.69 682.159 L1493.13 682.159 L1492.57 682.159 L1492.01 682.159 L1491.45 682.159 L1490.89 682.159 L1490.34 682.159 L1489.78 682.159 L1489.22 682.159 L1488.66 682.159 L1488.1 682.159 L1487.54 682.159 L1486.98 682.159 L1486.42 682.159 L1485.86 682.159 L1485.3 682.159 L1484.74 682.159 L1484.18 682.159 L1483.62 682.159 L1483.07 682.159 L1482.51 682.159 L1481.95 682.159 L1481.39 682.159 L1480.83 682.159 L1480.27 682.159 L1479.71 682.159 L1479.15 682.159 L1478.59 682.159 L1478.03 682.159 L1477.47 682.159 L1476.91 682.159 L1476.35 682.159 L1475.79 682.159 L1475.24 682.159 L1474.68 682.159 L1474.12 682.159 L1473.56 682.159 L1473 682.159 L1472.44 682.159 L1471.88 682.159 L1471.32 682.159 L1470.76 682.159 L1470.2 682.159 L1469.64 682.159 L1469.08 682.159 L1468.52 682.159 L1467.97 682.159 L1467.41 682.159 L1466.85 682.159 L1466.29 682.159 L1465.73 682.159 L1465.17 682.159 L1464.61 682.159 L1464.05 682.159 L1463.49 682.159 L1462.93 682.159 L1462.37 682.159 L1461.81 682.159 L1461.25 682.159 L1460.7 682.159 L1460.14 682.159 L1459.58 682.159 L1459.02 682.159 L1458.46 682.159 L1457.9 682.159 L1457.34 682.159 L1456.78 682.159 L1456.22 682.159 L1455.66 682.159 L1455.1 682.159 L1454.54 682.159 L1453.98 682.159 L1453.42 682.159 L1452.87 682.159 L1452.31 682.159 L1451.75 682.159 L1451.19 682.159 L1450.63 682.159 L1450.07 682.159 L1449.51 682.159 L1448.95 682.159 L1448.39 682.159 L1447.83 682.159 L1447.27 682.159 L1446.71 682.159 L1446.15 682.159 L1445.6 682.159 L1445.04 682.159 L1444.48 682.159 L1443.92 682.159 L1443.36 682.159 L1442.8 682.159 L1442.24 682.159 L1441.68 682.159 L1441.12 682.159 L1440.56 682.159 L1440 682.159 L1439.44 682.159 L1438.88 682.159 L1438.33 682.159 L1437.77 682.159 L1437.21 682.159 L1436.65 682.159 L1436.09 682.159 L1435.53 682.159 L1434.97 682.159 L1434.41 682.159 L1433.85 682.159 L1433.29 682.159 L1432.73 682.159 L1432.17 682.159 L1431.61 682.159 L1431.05 682.159 L1430.5 682.159 L1429.94 682.159 L1429.38 682.159 L1428.82 682.159 L1428.26 682.159 L1427.7 682.159 L1427.14 682.159 L1426.58 682.159 L1426.02 682.159 L1425.46 682.159 L1424.9 682.159 L1424.34 682.159 L1423.78 682.159 L1423.23 682.159 L1422.67 682.159 L1422.11 682.159 L1421.55 682.159 L1420.99 682.159 L1420.43 682.159 L1419.87 682.159 L1419.31 682.159 L1418.75 682.159 L1418.19 682.159 L1417.63 682.159 L1417.07 682.159 L1416.51 682.159 L1415.95 682.159 L1415.4 682.159 L1414.84 682.159 L1414.28 682.159 L1413.72 682.159 L1413.16 682.159 L1412.6 682.159 L1412.04 682.159 L1411.48 682.159 L1410.92 682.159 L1410.36 682.159 L1409.8 682.159 L1409.24 682.159 L1408.68 682.159 L1408.13 682.159 L1407.57 682.159 L1407.01 682.159 L1406.45 682.159 L1405.89 682.159 L1405.33 682.159 L1404.77 682.159 L1404.21 682.159 L1403.65 682.159 L1403.09 682.159 L1402.53 682.159 L1401.97 682.159 L1401.41 682.159 L1400.86 682.159 L1400.3 682.159 L1399.74 682.159 L1399.18 682.159 L1398.62 682.159 L1398.06 682.159 L1397.5 682.159 L1396.94 682.159 L1396.38 682.159 L1395.82 682.159 L1395.26 682.159 L1394.7 682.159 L1394.14 682.159 L1393.58 682.159 L1393.03 682.159 L1392.47 682.159 L1391.91 682.159 L1391.35 682.159 L1390.79 682.159 L1390.23 682.159 L1389.67 682.159 L1389.11 682.159 L1388.55 682.159 L1387.99 682.159 L1387.43 682.159 L1386.87 682.159 L1386.31 682.159 L1385.76 682.159 L1385.2 682.159 L1384.64 682.159 L1384.08 682.159 L1383.52 682.159 L1382.96 682.159 L1382.4 682.159 L1381.84 682.159 L1381.28 682.159 L1380.72 682.159 L1380.16 682.159 L1379.6 682.159 L1379.04 682.159 L1378.49 682.159 L1377.93 682.159 L1377.37 682.159 L1376.81 682.159 L1376.25 682.159 L1375.69 682.159 L1375.13 682.159 L1374.57 682.159 L1374.01 682.159 L1373.45 682.159 L1372.89 682.159 L1372.33 682.159 L1371.77 682.159 L1371.21 682.159 L1370.66 682.159 L1370.1 682.159 L1369.54 682.159 L1368.98 682.159 L1368.42 682.159 L1367.86 682.159 L1367.3 682.159 L1366.74 682.159 L1366.18 682.159 L1365.62 682.159 L1365.06 682.159 L1364.5 682.159 L1363.94 682.159 L1363.39 682.159 L1362.83 682.159 L1362.27 682.159 L1361.71 682.159 L1361.15 682.159 L1360.59 682.159 L1360.03 682.159 L1359.47 682.159 L1358.91 682.159 L1358.35 682.159 L1357.79 682.159 L1357.23 682.159 L1356.67 682.159 L1356.12 682.159 L1355.56 682.159 L1355 682.159 L1354.44 682.159 L1353.88 682.159 L1353.32 682.159 L1352.76 682.159 L1352.2 682.159 L1351.64 682.159 L1351.08 682.159 L1350.52 682.159 L1349.96 682.159 L1349.4 682.159 L1348.84 682.159 L1348.29 682.159 L1347.73 682.159 L1347.17 682.159 L1346.61 682.159 L1346.05 682.159 L1345.49 682.159 L1344.93 682.159 L1344.37 682.159 L1343.81 682.159 L1343.25 682.159 L1342.69 682.159 L1342.13 682.159 L1341.57 682.159 L1341.02 682.159 L1340.46 682.159 L1339.9 682.159 L1339.34 682.159 L1338.78 682.159 L1338.22 682.159 L1337.66 682.159 L1337.1 682.159 L1336.54 682.159 L1335.98 682.159 L1335.42 682.159 L1334.86 682.159 L1334.3 682.159 L1333.75 682.159 L1333.19 682.159 L1332.63 682.159 L1332.07 682.159 L1331.51 682.159 L1330.95 682.159 L1330.39 682.159 L1329.83 682.159 L1329.27 682.159 L1328.71 682.159 L1328.15 682.159 L1327.59 682.159 L1327.03 682.159 L1326.47 682.159 L1325.92 682.159 L1325.36 682.159 L1324.8 682.159 L1324.24 682.159 L1323.68 682.159 L1323.12 682.159 L1322.56 682.159 L1322 682.159 L1321.44 682.159 L1320.88 682.159 L1320.32 682.159 L1319.76 682.159 L1319.2 682.159 L1318.65 682.159 L1318.09 682.159 L1317.53 682.159 L1316.97 682.159 L1316.41 682.159 L1315.85 682.159 L1315.29 682.159 L1314.73 682.159 L1314.17 682.159 L1313.61 682.159 L1313.05 682.159 L1312.49 682.159 L1311.93 682.159 L1311.38 682.159 L1310.82 682.159 L1310.26 682.159 L1309.7 682.159 L1309.14 682.159 L1308.58 682.159 L1308.02 682.159 L1307.46 682.159 L1306.9 682.159 L1306.34 682.159 L1305.78 682.159 L1305.22 682.159 L1304.66 682.159 L1304.1 682.159 L1303.55 682.159 L1302.99 682.159 L1302.43 682.159 L1301.87 682.159 L1301.31 682.159 L1300.75 682.159 L1300.19 682.159 L1299.63 682.159 L1299.07 682.159 L1298.51 682.159 L1297.95 682.159 L1297.39 682.159 L1296.83 682.159 L1296.28 682.159 L1295.72 682.159 L1295.16 682.159 L1294.6 682.159 L1294.04 682.159 L1293.48 682.159 L1292.92 682.159 L1292.36 682.159 L1291.8 682.159 L1291.24 682.159 L1290.68 682.159 L1290.12 682.159 L1289.56 682.159 L1289 682.159 L1288.45 682.159 L1287.89 682.159 L1287.33 682.159 L1286.77 682.159 L1286.21 682.159 L1285.65 682.159 L1285.09 682.159 L1284.53 682.159 L1283.97 682.159 L1283.41 682.159 L1282.85 682.159 L1282.29 682.159 L1281.73 682.159 L1281.18 682.159 L1280.62 682.159 L1280.06 682.159 L1279.5 682.159 L1278.94 682.159 L1278.38 682.159 L1277.82 682.159 L1277.26 682.159 L1276.7 682.159 L1276.14 682.159 L1275.58 682.159 L1275.02 682.159 L1274.46 682.159 L1273.91 682.159 L1273.35 682.159 L1272.79 682.159 L1272.23 682.159 L1271.67 682.159 L1271.11 682.159 L1270.55 682.159 L1269.99 682.159 L1269.43 682.159 L1268.87 682.159 L1268.31 682.159 L1267.75 682.159 L1267.19 682.159 L1266.63 682.159 L1266.08 682.159 L1265.52 682.159 L1264.96 682.159 L1264.4 682.159 L1263.84 682.159 L1263.28 682.159 L1262.72 682.159 L1262.16 682.159 L1261.6 682.159 L1261.04 682.159 L1260.48 682.159 L1259.92 682.159 L1259.36 682.159 L1258.81 682.159 L1258.25 682.159 L1257.69 682.159 L1257.13 682.159 L1256.57 682.159 L1256.01 682.159 L1255.45 682.159 L1254.89 682.159 L1254.33 682.159 L1253.77 682.159 L1253.21 682.159 L1252.65 682.159 L1252.09 682.159 L1251.54 682.159 L1250.98 682.159 L1250.42 682.159 L1249.86 682.159 L1249.3 682.159 L1248.74 682.159 L1248.18 682.159 L1247.62 682.159 L1247.06 682.159 L1246.5 682.159 L1245.94 682.159 L1245.38 682.159 L1244.82 682.159 L1244.26 682.159 L1243.71 682.159 L1243.15 682.159 L1242.59 682.159 L1242.03 682.159 L1241.47 682.159 L1240.91 682.159 L1240.35 682.159 L1239.79 682.159 L1239.23 682.159 L1238.67 682.159 L1238.11 682.159 L1237.55 682.159 L1236.99 682.159 L1236.44 682.159 L1235.88 682.159 L1235.32 682.159 L1234.76 682.159 L1234.2 682.159 L1233.64 682.159 L1233.08 682.159 L1232.52 682.159 L1231.96 682.159 L1231.4 682.159 L1230.84 682.159 L1230.28 682.159 L1229.72 682.159 L1229.17 682.159 L1228.61 682.159 L1228.05 682.159 L1227.49 682.159 L1226.93 682.159 L1226.37 682.159 L1225.81 682.159 L1225.25 682.159 L1224.69 682.159 L1224.13 682.159 L1223.57 682.159 L1223.01 682.159 L1222.45 682.159 L1221.89 682.159 L1221.34 682.159 L1220.78 682.159 L1220.22 682.159 L1219.66 682.159 L1219.1 682.159 L1218.54 682.159 L1217.98 682.159 L1217.42 682.159 L1216.86 682.159 L1216.3 682.159 L1215.74 682.159 L1215.18 682.159 L1214.62 682.159 L1214.07 682.159 L1213.51 682.159 L1212.95 682.159 L1212.39 682.159 L1211.83 682.159 L1211.27 682.159 L1210.71 682.159 L1210.15 682.159 L1209.59 682.159 L1209.03 682.159 L1208.47 682.159 L1207.91 682.159 L1207.35 682.159 L1206.8 682.159 L1206.24 682.159 L1205.68 682.159 L1205.12 682.159 L1204.56 682.159 L1204 682.159 L1203.44 682.159 L1202.88 682.159 L1202.32 682.159 L1201.76 682.159 L1201.2 682.159 L1200.64 682.159 L1200.08 682.159 L1199.52 682.159 L1198.97 682.159 L1198.41 682.159 L1197.85 682.159 L1197.29 682.159 L1196.73 682.159 L1196.17 682.159 L1195.61 682.159 L1195.05 682.159 L1194.49 682.159 L1193.93 682.159 L1193.37 682.159 L1192.81 682.159 L1192.25 682.159 L1191.7 682.159 L1191.14 682.159 L1190.58 682.159 L1190.02 682.159 L1189.46 682.159 L1188.9 682.159 L1188.34 682.159 L1187.78 682.159 L1187.22 682.159 L1186.66 682.159 L1186.1 682.159 L1185.54 682.159 L1184.98 682.159 L1184.43 682.159 L1183.87 682.159 L1183.31 682.159 L1182.75 682.159 L1182.19 682.159 L1181.63 682.159 L1181.07 682.159 L1180.51 682.159 L1179.95 682.159 L1179.39 682.159 L1178.83 682.159 L1178.27 682.159 L1177.71 682.159 L1177.15 682.159 L1176.6 682.159 L1176.04 682.159 L1175.48 682.159 L1174.92 682.159 L1174.36 682.159 L1173.8 682.159 L1173.24 682.159 L1172.68 682.159 L1172.12 682.159 L1171.56 682.159 L1171 682.159 L1170.44 682.159 L1169.88 682.159 L1169.33 682.159 L1168.77 682.159 L1168.21 682.159 L1167.65 682.159 L1167.09 682.159 L1166.53 682.159 L1165.97 682.159 L1165.41 682.159 L1164.85 682.159 L1164.29 682.159 L1163.73 682.159 L1163.17 682.159 L1162.61 682.159 L1162.05 682.159 L1161.5 682.159 L1160.94 682.159 L1160.38 682.159 L1159.82 682.159 L1159.26 682.159 L1158.7 682.159 L1158.14 682.159 L1157.58 682.159 L1157.02 682.159 L1156.46 682.159 L1155.9 682.159 L1155.34 682.159 L1154.78 682.159 L1154.23 682.159 L1153.67 682.159 L1153.11 682.159 L1152.55 682.159 L1151.99 682.159 L1151.43 682.159 L1150.87 682.159 L1150.31 682.159 L1149.75 682.159 L1149.19 682.159 L1148.63 682.159 L1148.07 682.159 L1147.51 682.159 L1146.96 682.159 L1146.4 682.159 L1145.84 682.159 L1145.28 682.159 L1144.72 682.159 L1144.16 682.159 L1143.6 682.159 L1143.04 682.159 L1142.48 682.159 L1141.92 682.159 L1141.36 682.159 L1140.8 682.159 L1140.24 682.159 L1139.68 682.159 L1139.13 682.159 L1138.57 682.159 L1138.01 682.159 L1137.45 682.159 L1136.89 682.159 L1136.33 682.159 L1135.77 682.159 L1135.21 682.159 L1134.65 682.159 L1134.09 682.159 L1133.53 682.159 L1132.97 682.159 L1132.41 682.159 L1131.86 682.159 L1131.3 682.159 L1130.74 682.159 L1130.18 682.159 L1129.62 682.159 L1129.06 682.159 L1128.5 682.159 L1127.94 682.159 L1127.38 682.159 L1126.82 682.159 L1126.26 682.159 L1125.7 682.159 L1125.14 682.159 L1124.59 682.159 L1124.03 682.159 L1123.47 682.159 L1122.91 682.159 L1122.35 682.159 L1121.79 682.159 L1121.23 682.159 L1120.67 682.159 L1120.11 682.159 L1119.55 682.159 L1118.99 682.159 L1118.43 682.159 L1117.87 682.159 L1117.31 682.159 L1116.76 682.159 L1116.2 682.159 L1115.64 682.159 L1115.08 682.159 L1114.52 682.159 L1113.96 682.159 L1113.4 682.159 L1112.84 682.159 L1112.28 682.159 L1111.72 682.159 L1111.16 682.159 L1110.6 682.159 L1110.04 682.159 L1109.49 682.159 L1108.93 682.159 L1108.37 682.159 L1107.81 682.159 L1107.25 682.159 L1106.69 682.159 L1106.13 682.159 L1105.57 682.159 L1105.01 682.159 L1104.45 682.159 L1103.89 682.159 L1103.33 682.159 L1102.77 682.159 L1102.22 682.159 L1101.66 682.159 L1101.1 682.159 L1100.54 682.159 L1099.98 682.159 L1099.42 682.159 L1098.86 682.159 L1098.3 682.159 L1097.74 682.159 L1097.18 682.159 L1096.62 682.159 L1096.06 682.159 L1095.5 682.159 L1094.94 682.159 L1094.39 682.159 L1093.83 682.159 L1093.27 682.159 L1092.71 682.159 L1092.15 682.159 L1091.59 682.159 L1091.03 682.159 L1090.47 682.159 L1089.91 682.159 L1089.35 682.159 L1088.79 682.159 L1088.23 682.159 L1087.67 682.159 L1087.12 682.159 L1086.56 682.159 L1086 682.159 L1085.44 682.159 L1084.88 682.159 L1084.32 682.159 L1083.76 682.159 L1083.2 682.159 L1082.64 682.159 L1082.08 682.159 L1081.52 682.159 L1080.96 682.159 L1080.4 682.159 L1079.85 682.159 L1079.29 682.159 L1078.73 682.159 L1078.17 682.159 L1077.61 682.159 L1077.05 682.159 L1076.49 682.159 L1075.93 682.159 L1075.37 682.159 L1074.81 682.159 L1074.25 682.159 L1073.69 682.159 L1073.13 682.159 L1072.57 682.159 L1072.02 682.159 L1071.46 682.159 L1070.9 682.159 L1070.34 682.159 L1069.78 682.159 L1069.22 682.159 L1068.66 682.159 L1068.1 682.159 L1067.54 682.159 L1066.98 682.159 L1066.42 682.159 L1065.86 682.159 L1065.3 682.159 L1064.75 682.159 L1064.19 682.159 L1063.63 682.159 L1063.07 682.159 L1062.51 682.159 L1061.95 682.159 L1061.39 682.159 L1060.83 682.159 L1060.27 682.159 L1059.71 682.159 L1059.15 682.159 L1058.59 682.159 L1058.03 682.159 L1057.48 682.159 L1056.92 682.159 L1056.36 682.159 L1055.8 682.159 L1055.24 682.159 L1054.68 682.159 L1054.12 682.159 L1053.56 682.159 L1053 682.159 L1052.44 682.159 L1051.88 682.159 L1051.32 682.159 L1050.76 682.159 L1050.2 682.159 L1049.65 682.159 L1049.09 682.159 L1048.53 682.159 L1047.97 682.159 L1047.41 682.159 L1046.85 682.159 L1046.29 682.159 L1045.73 682.159 L1045.17 682.159 L1044.61 682.159 L1044.05 682.159 L1043.49 682.159 L1042.93 682.159 L1042.38 682.159 L1041.82 682.159 L1041.26 682.159 L1040.7 682.159 L1040.14 682.159 L1039.58 682.159 L1039.02 682.159 L1038.46 682.159 L1037.9 682.159 L1037.34 682.159 L1036.78 682.159 L1036.22 682.159 L1035.66 682.159 L1035.1 682.159 L1034.55 682.159 L1033.99 682.159 L1033.43 682.159 L1032.87 682.159 L1032.31 682.159 L1031.75 682.159 L1031.19 682.159 L1030.63 682.159 L1030.07 682.159 L1029.51 682.159 L1028.95 682.159 L1028.39 682.159 L1027.83 682.159 L1027.28 682.159 L1026.72 682.159 L1026.16 682.159 L1025.6 682.159 L1025.04 682.159 L1024.48 682.159 L1023.92 682.159 L1023.36 682.159 L1022.8 682.159 L1022.24 682.159 L1021.68 682.159 L1021.12 682.159 L1020.56 682.159 L1020.01 682.159 L1019.45 682.159 L1018.89 682.159 L1018.33 682.159 L1017.77 682.159 L1017.21 682.159 L1016.65 682.159 L1016.09 682.159 L1015.53 682.159 L1014.97 682.159 L1014.41 682.159 L1013.85 682.159 L1013.29 682.159 L1012.73 682.159 L1012.18 682.159 L1011.62 682.159 L1011.06 682.159 L1010.5 682.159 L1009.94 682.159 L1009.38 682.159 L1008.82 682.159 L1008.26 682.159 L1007.7 682.159 L1007.14 682.159 L1006.58 682.159 L1006.02 682.159 L1005.46 682.159 L1004.91 682.159 L1004.35 682.159 L1003.79 682.159 L1003.23 682.159 L1002.67 682.159 L1002.11 682.159 L1001.55 682.159 L1000.99 682.159 L1000.43 682.159 L999.872 682.159 L999.313 682.159 L998.754 682.159 L998.194 682.159 L997.635 682.159 L997.076 682.159 L996.517 682.159 L995.957 682.159 L995.398 682.159 L994.839 682.159 L994.28 682.159 L993.72 682.159 L993.161 682.159 L992.602 682.159 L992.043 682.159 L991.483 682.159 L990.924 682.159 L990.365 682.159 L989.806 682.159 L989.246 682.159 L988.687 682.159 L988.128 682.159 L987.569 682.159 L987.009 682.159 L986.45 682.159 L985.891 682.159 L985.332 682.159 L984.772 682.159 L984.213 682.159 L983.654 682.159 L983.095 682.159 L982.535 682.159 L981.976 682.159 L981.417 682.159 L980.858 682.159 L980.298 682.159 L979.739 682.159 L979.18 682.159 L978.621 682.159 L978.061 682.159 L977.502 682.159 L976.943 682.159 L976.384 682.159 L975.824 682.159 L975.265 682.159 L974.706 682.159 L974.147 682.159 L973.587 682.159 L973.028 682.159 L972.469 682.159 L971.91 682.159 L971.35 682.159 L970.791 682.159 L970.232 682.159 L969.673 682.159 L969.113 682.159 L968.554 682.159 L967.995 682.159 L967.436 682.159 L966.876 682.159 L966.317 682.159 L965.758 682.159 L965.199 682.159 L964.639 682.159 L964.08 682.159 L963.521 682.159 L962.962 682.159 L962.402 682.159 L961.843 682.159 L961.284 682.159 L960.725 682.159 L960.165 682.159 L959.606 682.159 L959.047 682.159 L958.488 682.159 L957.928 682.159 L957.369 682.159 L956.81 682.159 L956.251 682.159 L955.691 682.159 L955.132 682.159 L954.573 682.159 L954.014 682.159 L953.454 682.159 L952.895 682.159 L952.336 682.159 L951.777 682.159 L951.217 682.159 L950.658 682.159 L950.099 682.159 L949.54 682.159 L948.98 682.159 L948.421 682.159 L947.862 682.159 L947.303 682.159 L946.743 682.159 L946.184 682.159 L945.625 682.159 L945.066 682.159 L944.506 682.159 L943.947 682.159 L943.388 682.159 L942.829 682.159 L942.269 682.159 L941.71 682.159 L941.151 682.159 L940.592 682.159 L940.032 682.159 L939.473 682.159 L938.914 682.159 L938.355 682.159 L937.795 682.159 L937.236 682.159 L936.677 682.159 L936.118 682.159 L935.558 682.159 L934.999 682.159 L934.44 682.159 L933.881 682.159 L933.321 682.159 L932.762 682.159 L932.203 682.159 L931.644 682.159 L931.084 682.159 L930.525 682.159 L929.966 682.159 L929.406 682.159 L928.847 682.159 L928.288 682.159 L927.729 682.159 L927.169 682.159 L926.61 682.159 L926.051 682.159 L925.492 682.159 L924.932 682.159 L924.373 682.159 L923.814 682.159 L923.255 682.159 L922.695 682.159 L922.136 682.159 L921.577 682.159 L921.018 682.159 L920.458 682.159 L919.899 682.159 L919.34 682.159 L918.781 682.159 L918.221 682.159 L917.662 682.159 L917.103 682.159 L916.544 682.159 L915.984 682.159 L915.425 682.159 L914.866 682.159 L914.307 682.159 L913.747 682.159 L913.188 682.159 L912.629 682.159 L912.07 682.159 L911.51 682.159 L910.951 682.159 L910.392 682.159 L909.833 682.159 L909.273 682.159 L908.714 682.159 L908.155 682.159 L907.596 682.159 L907.036 682.159 L906.477 682.159 L905.918 682.159 L905.359 682.159 L904.799 682.159 L904.24 682.159 L903.681 682.159 L903.122 682.159 L902.562 682.159 L902.003 682.159 L901.444 682.159 L900.885 682.159 L900.325 682.159 L899.766 682.159 L899.207 682.159 L898.648 682.159 L898.088 682.159 L897.529 682.159 L896.97 682.159 L896.411 682.159 L895.851 682.159 L895.292 682.159 L894.733 682.159 L894.174 682.159 L893.614 682.159 L893.055 682.159 L892.496 682.159 L891.937 682.159 L891.377 682.159 L890.818 682.159 L890.259 682.159 L889.7 682.159 L889.14 682.159 L888.581 682.159 L888.022 682.159 L887.463 682.159 L886.903 682.159 L886.344 682.159 L885.785 682.159 L885.226 682.159 L884.666 682.159 L884.107 682.159 L883.548 682.159 L882.989 682.159 L882.429 682.159 L881.87 682.159 L881.311 682.159 L880.752 682.159 L880.192 682.159 L879.633 682.159 L879.074 682.159 L878.515 682.159 L877.955 682.159 L877.396 682.159 L876.837 682.159 L876.278 682.159 L875.718 682.159 L875.159 682.159 L874.6 682.159 L874.041 682.159 L873.481 682.159 L872.922 682.159 L872.363 682.159 L871.804 682.159 L871.244 682.159 L870.685 682.159 L870.126 682.159 L869.567 682.159 L869.007 682.159 L868.448 682.159 L867.889 682.159 L867.33 682.159 L866.77 682.159 L866.211 682.159 L865.652 682.159 L865.093 682.159 L864.533 682.159 L863.974 682.159 L863.415 682.159 L862.856 682.159 L862.296 682.159 L861.737 682.159 L861.178 682.159 L860.619 682.159 L860.059 682.159 L859.5 682.159 L858.941 682.159 L858.382 682.159 L857.822 682.159 L857.263 682.159 L856.704 682.159 L856.145 682.159 L855.585 682.159 L855.026 682.159 L854.467 682.159 L853.908 682.159 L853.348 682.159 L852.789 682.159 L852.23 682.159 L851.671 682.159 L851.111 682.159 L850.552 682.159 L849.993 682.159 L849.434 682.159 L848.874 682.159 L848.315 682.159 L847.756 682.159 L847.197 682.159 L846.637 682.159 L846.078 682.159 L845.519 682.159 L844.96 682.159 L844.4 682.159 L843.841 682.159 L843.282 682.159 L842.723 682.159 L842.163 682.159 L841.604 682.159 L841.045 682.159 L840.486 682.159 L839.926 682.159 L839.367 682.159 L838.808 682.159 L838.249 682.159 L837.689 682.159 L837.13 682.159 L836.571 682.159 L836.012 682.159 L835.452 682.159 L834.893 682.159 L834.334 682.159 L833.775 682.159 L833.215 682.159 L832.656 682.159 L832.097 682.159 L831.538 682.159 L830.978 682.159 L830.419 682.159 L829.86 682.159 L829.301 682.159 L828.741 682.159 L828.182 682.159 L827.623 682.159 L827.064 682.159 L826.504 682.159 L825.945 682.159 L825.386 682.159 L824.827 682.159 L824.267 682.159 L823.708 682.159 L823.149 682.159 L822.59 682.159 L822.03 682.159 L821.471 682.159 L820.912 682.159 L820.353 682.159 L819.793 682.159 L819.234 682.159 L818.675 682.159 L818.116 682.159 L817.556 682.159 L816.997 682.159 L816.438 682.159 L815.879 682.159 L815.319 682.159 L814.76 682.159 L814.201 682.159 L813.642 682.159 L813.082 682.159 L812.523 682.159 L811.964 682.159 L811.405 682.159 L810.845 682.159 L810.286 682.159 L809.727 682.159 L809.168 682.159 L808.608 682.159 L808.049 682.159 L807.49 682.159 L806.931 682.159 L806.371 682.159 L805.812 682.159 L805.253 682.159 L804.693 682.159 L804.134 682.159 L803.575 682.159 L803.016 682.159 L802.456 682.159 L801.897 682.159 L801.338 682.159 L800.779 682.159 L800.219 682.159 L799.66 682.159 L799.101 682.159 L798.542 682.159 L797.982 682.159 L797.423 682.159 L796.864 682.159 L796.305 682.159 L795.745 682.159 L795.186 682.159 L794.627 682.159 L794.068 682.159 L793.508 682.159 L792.949 682.159 L792.39 682.159 L791.831 682.159 L791.271 682.159 L790.712 682.159 L790.153 682.159 L789.594 682.159 L789.034 682.159 L788.475 682.159 L787.916 682.159 L787.357 682.159 L786.797 682.159 L786.238 682.159 L785.679 682.159 L785.12 682.159 L784.56 682.159 L784.001 682.159 L783.442 682.159 L782.883 682.159 L782.323 682.159 L781.764 682.159 L781.205 682.159 L780.646 682.159 L780.086 682.159 L779.527 682.159 L778.968 682.159 L778.409 682.159 L777.849 682.159 L777.29 682.159 L776.731 682.159 L776.172 682.159 L775.612 682.159 L775.053 682.159 L774.494 682.159 L773.935 682.159 L773.375 682.159 L772.816 682.159 L772.257 682.159 L771.698 682.159 L771.138 682.159 L770.579 682.159 L770.02 682.159 L769.461 682.159 L768.901 682.159 L768.342 682.159 L767.783 682.159 L767.224 682.159 L766.664 682.159 L766.105 682.159 L765.546 682.159 L764.987 682.159 L764.427 682.159 L763.868 682.159 L763.309 682.159 L762.75 682.159 L762.19 682.159 L761.631 682.159 L761.072 682.159 L760.513 682.159 L759.953 682.159 L759.394 682.159 L758.835 682.159 L758.276 682.159 L757.716 682.159 L757.157 682.159 L756.598 682.159 L756.039 682.159 L755.479 682.159 L754.92 682.159 L754.361 682.159 L753.802 682.159 L753.242 682.159 L752.683 682.159 L752.124 682.159 L751.565 682.159 L751.005 682.159 L750.446 682.159 L749.887 682.159 L749.328 682.159 L748.768 682.159 L748.209 682.159 L747.65 682.159 L747.091 682.159 L746.531 682.159 L745.972 682.159 L745.413 682.159 L744.854 682.159 L744.294 682.159 L743.735 682.159 L743.176 682.159 L742.617 682.159 L742.057 682.159 L741.498 682.159 L740.939 682.159 L740.38 682.159 L739.82 682.159 L739.261 682.159 L738.702 682.159 L738.143 682.159 L737.583 682.159 L737.024 682.159 L736.465 682.159 L735.906 682.159 L735.346 682.159 L734.787 682.159 L734.228 682.159 L733.669 682.159 L733.109 682.159 L732.55 682.159 L731.991 682.159 L731.432 682.159 L730.872 682.159 L730.313 682.159 L729.754 682.159 L729.195 682.159 L728.635 682.159 L728.076 682.159 L727.517 682.159 L726.958 682.159 L726.398 682.159 L725.839 682.159 L725.28 682.159 L724.721 682.159 L724.161 682.159 L723.602 682.159 L723.043 682.159 L722.484 682.159 L721.924 682.159 L721.365 682.159 L720.806 682.159 L720.247 682.159  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip453)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.687 720.806,683.687 721.365,683.687 721.924,683.687 722.484,683.687 723.043,683.687 723.602,683.687 724.161,683.687 724.721,683.687 725.28,683.687 725.839,683.687 726.398,683.687 726.958,683.687 727.517,683.687 728.076,683.687 728.635,683.687 729.195,683.687 729.754,683.687 730.313,683.687 730.872,683.687 731.432,683.687 731.991,683.687 732.55,683.687 733.109,683.687 733.669,683.687 734.228,683.687 734.787,683.687 735.346,683.687 735.906,683.687 736.465,683.687 737.024,683.687 737.583,683.687 738.143,683.687 738.702,683.687 739.261,683.687 739.82,683.687 740.38,683.687 740.939,683.687 741.498,683.687 742.057,683.687 742.617,683.687 743.176,683.687 743.735,683.687 744.294,683.687 744.854,683.687 745.413,683.687 745.972,683.687 746.531,683.687 747.091,683.687 747.65,683.687 748.209,683.687 748.768,683.687 749.328,683.687 749.887,683.687 750.446,683.687 751.005,683.687 751.565,683.687 752.124,683.687 752.683,683.687 753.242,683.687 753.802,683.687 754.361,683.687 754.92,683.687 755.479,683.687 756.039,683.687 756.598,683.687 757.157,683.687 757.716,683.687 758.276,683.687 758.835,683.687 759.394,683.687 759.953,683.687 760.513,683.687 761.072,683.687 761.631,683.687 762.19,683.687 762.75,683.687 763.309,683.687 763.868,683.687 764.427,683.687 764.987,683.687 765.546,683.687 766.105,683.687 766.664,683.687 767.224,683.687 767.783,683.687 768.342,683.687 768.901,683.687 769.461,683.687 770.02,683.687 770.579,683.687 771.138,683.687 771.698,683.687 772.257,683.687 772.816,683.687 773.375,683.687 773.935,683.687 774.494,683.687 775.053,683.687 775.612,683.687 776.172,683.687 776.731,683.687 777.29,683.687 777.849,683.687 778.409,683.687 778.968,683.687 779.527,683.687 780.086,683.687 780.646,683.687 781.205,683.687 781.764,683.687 782.323,683.687 782.883,683.687 783.442,683.687 784.001,683.687 784.56,683.687 785.12,683.687 785.679,683.687 786.238,683.687 786.797,683.687 787.357,683.687 787.916,683.687 788.475,683.687 789.034,683.687 789.594,683.687 790.153,683.687 790.712,683.687 791.271,683.687 791.831,683.687 792.39,683.687 792.949,683.687 793.508,683.687 794.068,683.687 794.627,683.687 795.186,683.687 795.745,683.687 796.305,683.687 796.864,683.687 797.423,683.687 797.982,683.687 798.542,683.687 799.101,683.687 799.66,683.687 800.219,683.687 800.779,683.687 801.338,683.687 801.897,683.687 802.456,683.687 803.016,683.687 803.575,683.687 804.134,683.687 804.693,683.687 805.253,683.687 805.812,683.687 806.371,683.687 806.931,683.687 807.49,683.687 808.049,683.687 808.608,683.687 809.168,683.687 809.727,683.687 810.286,683.687 810.845,683.687 811.405,683.687 811.964,683.687 812.523,683.687 813.082,683.687 813.642,683.687 814.201,683.687 814.76,683.687 815.319,683.687 815.879,683.687 816.438,683.687 816.997,683.687 817.556,683.687 818.116,683.687 818.675,683.687 819.234,683.687 819.793,683.687 820.353,683.687 820.912,683.687 821.471,683.687 822.03,683.687 822.59,683.687 823.149,683.687 823.708,683.687 824.267,683.687 824.827,683.687 825.386,683.687 825.945,683.687 826.504,683.687 827.064,683.687 827.623,683.687 828.182,683.687 828.741,683.687 829.301,683.687 829.86,683.687 830.419,683.687 830.978,683.687 831.538,683.687 832.097,683.687 832.656,683.687 833.215,683.687 833.775,683.687 834.334,683.687 834.893,683.687 835.452,683.687 836.012,683.687 836.571,683.687 837.13,683.687 837.689,683.687 838.249,683.687 838.808,683.687 839.367,683.687 839.926,683.687 840.486,683.687 841.045,683.687 841.604,683.687 842.163,683.687 842.723,683.687 843.282,683.687 843.841,683.687 844.4,683.687 844.96,683.687 845.519,683.687 846.078,683.687 846.637,683.687 847.197,683.687 847.756,683.687 848.315,683.687 848.874,683.687 849.434,683.687 849.993,683.687 850.552,683.687 851.111,683.687 851.671,683.687 852.23,683.687 852.789,683.687 853.348,683.687 853.908,683.687 854.467,683.687 855.026,683.687 855.585,683.687 856.145,683.687 856.704,683.687 857.263,683.687 857.822,683.687 858.382,683.687 858.941,683.687 859.5,683.687 860.059,683.687 860.619,683.687 861.178,683.687 861.737,683.687 862.296,683.687 862.856,683.687 863.415,683.687 863.974,683.687 864.533,683.687 865.093,683.687 865.652,683.687 866.211,683.687 866.77,683.687 867.33,683.687 867.889,683.687 868.448,683.687 869.007,683.687 869.567,683.687 870.126,683.687 870.685,683.687 871.244,683.687 871.804,683.687 872.363,683.687 872.922,683.687 873.481,683.687 874.041,683.687 874.6,683.687 875.159,683.687 875.718,683.687 876.278,683.687 876.837,683.687 877.396,683.687 877.955,683.687 878.515,683.687 879.074,683.687 879.633,683.687 880.192,683.687 880.752,683.687 881.311,683.687 881.87,683.687 882.429,683.687 882.989,683.687 883.548,683.687 884.107,683.687 884.666,683.687 885.226,683.687 885.785,683.687 886.344,683.687 886.903,683.687 887.463,683.687 888.022,683.687 888.581,683.687 889.14,683.687 889.7,683.687 890.259,683.687 890.818,683.687 891.377,683.687 891.937,683.687 892.496,683.687 893.055,683.687 893.614,683.687 894.174,683.687 894.733,683.687 895.292,683.687 895.851,683.687 896.411,683.687 896.97,683.687 897.529,683.687 898.088,683.687 898.648,683.687 899.207,683.687 899.766,683.687 900.325,683.687 900.885,683.687 901.444,683.687 902.003,683.687 902.562,683.687 903.122,683.687 903.681,683.687 904.24,683.687 904.799,683.687 905.359,683.687 905.918,683.687 906.477,683.687 907.036,683.687 907.596,683.687 908.155,683.687 908.714,683.687 909.273,683.687 909.833,683.687 910.392,683.687 910.951,683.687 911.51,683.687 912.07,683.687 912.629,683.687 913.188,683.687 913.747,683.687 914.307,683.687 914.866,683.687 915.425,683.687 915.984,683.687 916.544,683.687 917.103,683.687 917.662,683.687 918.221,683.687 918.781,683.687 919.34,683.687 919.899,683.687 920.458,683.687 921.018,683.687 921.577,683.687 922.136,683.687 922.695,683.687 923.255,683.687 923.814,683.687 924.373,683.687 924.932,683.687 925.492,683.687 926.051,683.687 926.61,683.687 927.169,683.687 927.729,683.687 928.288,683.687 928.847,683.687 929.406,683.687 929.966,683.687 930.525,683.687 931.084,683.687 931.644,683.687 932.203,683.687 932.762,683.687 933.321,683.687 933.881,683.687 934.44,683.687 934.999,683.687 935.558,683.687 936.118,683.687 936.677,683.687 937.236,683.687 937.795,683.687 938.355,683.687 938.914,683.687 939.473,683.687 940.032,683.687 940.592,683.687 941.151,683.687 941.71,683.687 942.269,683.687 942.829,683.687 943.388,683.687 943.947,683.687 944.506,683.687 945.066,683.687 945.625,683.687 946.184,683.687 946.743,683.687 947.303,683.687 947.862,683.687 948.421,683.687 948.98,683.687 949.54,683.687 950.099,683.687 950.658,683.687 951.217,683.687 951.777,683.687 952.336,683.687 952.895,683.687 953.454,683.687 954.014,683.687 954.573,683.687 955.132,683.687 955.691,683.687 956.251,683.687 956.81,683.687 957.369,683.687 957.928,683.687 958.488,683.687 959.047,683.687 959.606,683.687 960.165,683.687 960.725,683.687 961.284,683.687 961.843,683.687 962.402,683.687 962.962,683.687 963.521,683.687 964.08,683.687 964.639,683.687 965.199,683.687 965.758,683.687 966.317,683.687 966.876,683.687 967.436,683.687 967.995,683.687 968.554,683.687 969.113,683.687 969.673,683.687 970.232,683.687 970.791,683.687 971.35,683.687 971.91,683.687 972.469,683.687 973.028,683.687 973.587,683.687 974.147,683.687 974.706,683.687 975.265,683.687 975.824,683.687 976.384,683.687 976.943,683.687 977.502,683.687 978.061,683.687 978.621,683.687 979.18,683.687 979.739,683.687 980.298,683.687 980.858,683.687 981.417,683.687 981.976,683.687 982.535,683.687 983.095,683.687 983.654,683.687 984.213,683.687 984.772,683.687 985.332,683.687 985.891,683.687 986.45,683.687 987.009,683.687 987.569,683.687 988.128,683.687 988.687,683.687 989.246,683.687 989.806,683.687 990.365,683.687 990.924,683.687 991.483,683.687 992.043,683.687 992.602,683.687 993.161,683.687 993.72,683.687 994.28,683.687 994.839,683.687 995.398,683.687 995.957,683.687 996.517,683.687 997.076,683.687 997.635,683.687 998.194,683.687 998.754,683.687 999.313,683.687 999.872,683.687 1000.43,683.687 1000.99,683.687 1001.55,683.687 1002.11,683.687 1002.67,683.687 1003.23,683.687 1003.79,683.687 1004.35,683.687 1004.91,683.687 1005.46,683.687 1006.02,683.687 1006.58,683.687 1007.14,683.687 1007.7,683.687 1008.26,683.687 1008.82,683.687 1009.38,683.687 1009.94,683.687 1010.5,683.687 1011.06,683.687 1011.62,683.687 1012.18,683.687 1012.73,683.687 1013.29,683.687 1013.85,683.687 1014.41,683.687 1014.97,683.687 1015.53,683.687 1016.09,683.687 1016.65,683.687 1017.21,683.687 1017.77,683.687 1018.33,683.687 1018.89,683.687 1019.45,683.687 1020.01,683.687 1020.56,683.687 1021.12,683.687 1021.68,683.687 1022.24,683.687 1022.8,683.687 1023.36,683.687 1023.92,683.687 1024.48,683.687 1025.04,683.687 1025.6,683.687 1026.16,683.687 1026.72,683.687 1027.28,683.687 1027.83,683.687 1028.39,683.687 1028.95,683.687 1029.51,683.687 1030.07,683.687 1030.63,683.687 1031.19,683.687 1031.75,683.687 1032.31,683.687 1032.87,683.687 1033.43,683.687 1033.99,683.687 1034.55,683.687 1035.1,683.687 1035.66,683.687 1036.22,683.687 1036.78,683.687 1037.34,683.687 1037.9,683.687 1038.46,683.687 1039.02,683.687 1039.58,683.687 1040.14,683.687 1040.7,683.687 1041.26,683.687 1041.82,683.687 1042.38,683.687 1042.93,683.687 1043.49,683.687 1044.05,683.687 1044.61,683.687 1045.17,683.687 1045.73,683.687 1046.29,683.687 1046.85,683.687 1047.41,683.687 1047.97,683.687 1048.53,683.687 1049.09,683.687 1049.65,683.687 1050.2,683.687 1050.76,683.687 1051.32,683.687 1051.88,683.687 1052.44,683.687 1053,683.687 1053.56,683.687 1054.12,683.687 1054.68,683.687 1055.24,683.687 1055.8,683.687 1056.36,683.687 1056.92,683.687 1057.48,683.687 1058.03,683.687 1058.59,683.687 1059.15,683.687 1059.71,683.687 1060.27,683.687 1060.83,683.687 1061.39,683.687 1061.95,683.687 1062.51,683.687 1063.07,683.687 1063.63,683.687 1064.19,683.687 1064.75,683.687 1065.3,683.687 1065.86,683.687 1066.42,683.687 1066.98,683.687 1067.54,683.687 1068.1,683.687 1068.66,683.687 1069.22,683.687 1069.78,683.687 1070.34,683.687 1070.9,683.687 1071.46,683.687 1072.02,683.687 1072.57,683.687 1073.13,683.687 1073.69,683.687 1074.25,683.687 1074.81,683.687 1075.37,683.687 1075.93,683.687 1076.49,683.687 1077.05,683.687 1077.61,683.687 1078.17,683.687 1078.73,683.687 1079.29,683.687 1079.85,683.687 1080.4,683.687 1080.96,683.687 1081.52,683.687 1082.08,683.687 1082.64,683.687 1083.2,683.687 1083.76,683.687 1084.32,683.687 1084.88,683.687 1085.44,683.687 1086,683.687 1086.56,683.687 1087.12,683.687 1087.67,683.687 1088.23,683.687 1088.79,683.687 1089.35,683.687 1089.91,683.687 1090.47,683.687 1091.03,683.687 1091.59,683.687 1092.15,683.687 1092.71,683.687 1093.27,683.687 1093.83,683.687 1094.39,683.687 1094.94,683.687 1095.5,683.687 1096.06,683.687 1096.62,683.687 1097.18,683.687 1097.74,683.687 1098.3,683.687 1098.86,683.687 1099.42,683.687 1099.98,683.687 1100.54,683.687 1101.1,683.687 1101.66,683.687 1102.22,683.687 1102.77,683.687 1103.33,683.687 1103.89,683.687 1104.45,683.687 1105.01,683.687 1105.57,683.687 1106.13,683.687 1106.69,683.687 1107.25,683.687 1107.81,683.687 1108.37,683.687 1108.93,683.687 1109.49,683.687 1110.04,683.687 1110.6,683.687 1111.16,683.687 1111.72,683.687 1112.28,683.687 1112.84,683.687 1113.4,683.687 1113.96,683.687 1114.52,683.687 1115.08,683.687 1115.64,683.687 1116.2,683.687 1116.76,683.687 1117.31,683.687 1117.87,683.687 1118.43,683.687 1118.99,683.687 1119.55,683.687 1120.11,683.687 1120.67,683.687 1121.23,683.687 1121.79,683.687 1122.35,683.687 1122.91,683.687 1123.47,683.687 1124.03,683.687 1124.59,683.687 1125.14,683.687 1125.7,683.687 1126.26,683.687 1126.82,683.687 1127.38,683.687 1127.94,683.687 1128.5,683.687 1129.06,683.687 1129.62,683.687 1130.18,683.687 1130.74,683.687 1131.3,683.687 1131.86,683.687 1132.41,683.687 1132.97,683.687 1133.53,683.687 1134.09,683.687 1134.65,683.687 1135.21,683.687 1135.77,683.687 1136.33,683.687 1136.89,683.687 1137.45,683.687 1138.01,683.687 1138.57,683.687 1139.13,683.687 1139.68,683.687 1140.24,683.687 1140.8,683.687 1141.36,683.687 1141.92,683.687 1142.48,683.687 1143.04,683.687 1143.6,683.687 1144.16,683.687 1144.72,683.687 1145.28,683.687 1145.84,683.687 1146.4,683.687 1146.96,683.687 1147.51,683.687 1148.07,683.687 1148.63,683.687 1149.19,683.687 1149.75,683.687 1150.31,683.687 1150.87,683.687 1151.43,683.687 1151.99,683.687 1152.55,683.687 1153.11,683.687 1153.67,683.687 1154.23,683.687 1154.78,683.687 1155.34,683.687 1155.9,683.687 1156.46,683.687 1157.02,683.687 1157.58,683.687 1158.14,683.687 1158.7,683.687 1159.26,683.687 1159.82,683.687 1160.38,683.687 1160.94,683.687 1161.5,683.687 1162.05,683.687 1162.61,683.687 1163.17,683.687 1163.73,683.687 1164.29,683.687 1164.85,683.687 1165.41,683.687 1165.97,683.687 1166.53,683.687 1167.09,683.687 1167.65,683.687 1168.21,683.687 1168.77,683.687 1169.33,683.687 1169.88,683.687 1170.44,683.687 1171,683.687 1171.56,683.687 1172.12,683.687 1172.68,683.687 1173.24,683.687 1173.8,683.687 1174.36,683.687 1174.92,683.687 1175.48,683.687 1176.04,683.687 1176.6,683.687 1177.15,683.687 1177.71,683.687 1178.27,683.687 1178.83,683.687 1179.39,683.687 1179.95,683.687 1180.51,683.687 1181.07,683.687 1181.63,683.687 1182.19,683.687 1182.75,683.687 1183.31,683.687 1183.87,683.687 1184.43,683.687 1184.98,683.687 1185.54,683.687 1186.1,683.687 1186.66,683.687 1187.22,683.687 1187.78,683.687 1188.34,683.687 1188.9,683.687 1189.46,683.687 1190.02,683.687 1190.58,683.687 1191.14,683.687 1191.7,683.687 1192.25,683.687 1192.81,683.687 1193.37,683.687 1193.93,683.687 1194.49,683.687 1195.05,683.687 1195.61,683.687 1196.17,683.687 1196.73,683.687 1197.29,683.687 1197.85,683.687 1198.41,683.687 1198.97,683.687 1199.52,683.687 1200.08,683.687 1200.64,683.687 1201.2,683.687 1201.76,683.687 1202.32,683.687 1202.88,683.687 1203.44,683.687 1204,683.687 1204.56,683.687 1205.12,683.687 1205.68,683.687 1206.24,683.687 1206.8,683.687 1207.35,683.687 1207.91,683.687 1208.47,683.687 1209.03,683.687 1209.59,683.687 1210.15,683.687 1210.71,683.687 1211.27,683.687 1211.83,683.687 1212.39,683.687 1212.95,683.687 1213.51,683.687 1214.07,683.687 1214.62,683.687 1215.18,683.687 1215.74,683.687 1216.3,683.687 1216.86,683.687 1217.42,683.687 1217.98,683.687 1218.54,683.687 1219.1,683.687 1219.66,683.687 1220.22,683.687 1220.78,683.687 1221.34,683.687 1221.89,683.687 1222.45,683.687 1223.01,683.687 1223.57,683.687 1224.13,683.687 1224.69,683.687 1225.25,683.687 1225.81,683.687 1226.37,683.687 1226.93,683.687 1227.49,683.687 1228.05,683.687 1228.61,683.687 1229.17,683.687 1229.72,683.687 1230.28,683.687 1230.84,683.687 1231.4,683.687 1231.96,683.687 1232.52,683.687 1233.08,683.687 1233.64,683.687 1234.2,683.687 1234.76,683.687 1235.32,683.687 1235.88,683.687 1236.44,683.687 1236.99,683.687 1237.55,683.687 1238.11,683.687 1238.67,683.687 1239.23,683.687 1239.79,683.687 1240.35,683.687 1240.91,683.687 1241.47,683.687 1242.03,683.687 1242.59,683.687 1243.15,683.687 1243.71,683.687 1244.26,683.687 1244.82,683.687 1245.38,683.687 1245.94,683.687 1246.5,683.687 1247.06,683.687 1247.62,683.687 1248.18,683.687 1248.74,683.687 1249.3,683.687 1249.86,683.687 1250.42,683.687 1250.98,683.687 1251.54,683.687 1252.09,683.687 1252.65,683.687 1253.21,683.687 1253.77,683.687 1254.33,683.687 1254.89,683.687 1255.45,683.687 1256.01,683.687 1256.57,683.687 1257.13,683.687 1257.69,683.687 1258.25,683.687 1258.81,683.687 1259.36,683.687 1259.92,683.687 1260.48,683.687 1261.04,683.687 1261.6,683.687 1262.16,683.687 1262.72,683.687 1263.28,683.687 1263.84,683.687 1264.4,683.687 1264.96,683.687 1265.52,683.687 1266.08,683.687 1266.63,683.687 1267.19,683.687 1267.75,683.687 1268.31,683.687 1268.87,683.687 1269.43,683.687 1269.99,683.687 1270.55,683.687 1271.11,683.687 1271.67,683.687 1272.23,683.687 1272.79,683.687 1273.35,683.687 1273.91,683.687 1274.46,683.687 1275.02,683.687 1275.58,683.687 1276.14,683.687 1276.7,683.687 1277.26,683.687 1277.82,683.687 1278.38,683.687 1278.94,683.687 1279.5,683.687 1280.06,683.687 1280.62,683.687 1281.18,683.687 1281.73,683.687 1282.29,683.687 1282.85,683.687 1283.41,683.687 1283.97,683.687 1284.53,683.687 1285.09,683.687 1285.65,683.687 1286.21,683.687 1286.77,683.687 1287.33,683.687 1287.89,683.687 1288.45,683.687 1289,683.687 1289.56,683.687 1290.12,683.687 1290.68,683.687 1291.24,683.687 1291.8,683.687 1292.36,683.687 1292.92,683.687 1293.48,683.687 1294.04,683.687 1294.6,683.687 1295.16,683.687 1295.72,683.687 1296.28,683.687 1296.83,683.687 1297.39,683.687 1297.95,683.687 1298.51,683.687 1299.07,683.687 1299.63,683.687 1300.19,683.687 1300.75,683.687 1301.31,683.687 1301.87,683.687 1302.43,683.687 1302.99,683.687 1303.55,683.687 1304.1,683.687 1304.66,683.687 1305.22,683.687 1305.78,683.687 1306.34,683.687 1306.9,683.687 1307.46,683.687 1308.02,683.687 1308.58,683.687 1309.14,683.687 1309.7,683.687 1310.26,683.687 1310.82,683.687 1311.38,683.687 1311.93,683.687 1312.49,683.687 1313.05,683.687 1313.61,683.687 1314.17,683.687 1314.73,683.687 1315.29,683.687 1315.85,683.687 1316.41,683.687 1316.97,683.687 1317.53,683.687 1318.09,683.687 1318.65,683.687 1319.2,683.687 1319.76,683.687 1320.32,683.687 1320.88,683.687 1321.44,683.687 1322,683.687 1322.56,683.687 1323.12,683.687 1323.68,683.687 1324.24,683.687 1324.8,683.687 1325.36,683.687 1325.92,683.687 1326.47,683.687 1327.03,683.687 1327.59,683.687 1328.15,683.687 1328.71,683.687 1329.27,683.687 1329.83,683.687 1330.39,683.687 1330.95,683.687 1331.51,683.687 1332.07,683.687 1332.63,683.687 1333.19,683.687 1333.75,683.687 1334.3,683.687 1334.86,683.687 1335.42,683.687 1335.98,683.687 1336.54,683.687 1337.1,683.687 1337.66,683.687 1338.22,683.687 1338.78,683.687 1339.34,683.687 1339.9,683.687 1340.46,683.687 1341.02,683.687 1341.57,683.687 1342.13,683.687 1342.69,683.687 1343.25,683.687 1343.81,683.687 1344.37,683.687 1344.93,683.687 1345.49,683.687 1346.05,683.687 1346.61,683.687 1347.17,683.687 1347.73,683.687 1348.29,683.687 1348.84,683.687 1349.4,683.687 1349.96,683.687 1350.52,683.687 1351.08,683.687 1351.64,683.687 1352.2,683.687 1352.76,683.687 1353.32,683.687 1353.88,683.687 1354.44,683.687 1355,683.687 1355.56,683.687 1356.12,683.687 1356.67,683.687 1357.23,683.687 1357.79,683.687 1358.35,683.687 1358.91,683.687 1359.47,683.687 1360.03,683.687 1360.59,683.687 1361.15,683.687 1361.71,683.687 1362.27,683.687 1362.83,683.687 1363.39,683.687 1363.94,683.687 1364.5,683.687 1365.06,683.687 1365.62,683.687 1366.18,683.687 1366.74,683.687 1367.3,683.687 1367.86,683.687 1368.42,683.687 1368.98,683.687 1369.54,683.687 1370.1,683.687 1370.66,683.687 1371.21,683.687 1371.77,683.687 1372.33,683.687 1372.89,683.687 1373.45,683.687 1374.01,683.687 1374.57,683.687 1375.13,683.687 1375.69,683.687 1376.25,683.687 1376.81,683.687 1377.37,683.687 1377.93,683.687 1378.49,683.687 1379.04,683.687 1379.6,683.687 1380.16,683.687 1380.72,683.687 1381.28,683.687 1381.84,683.687 1382.4,683.687 1382.96,683.687 1383.52,683.687 1384.08,683.687 1384.64,683.687 1385.2,683.687 1385.76,683.687 1386.31,683.687 1386.87,683.687 1387.43,683.687 1387.99,683.687 1388.55,683.687 1389.11,683.687 1389.67,683.687 1390.23,683.687 1390.79,683.687 1391.35,683.687 1391.91,683.687 1392.47,683.687 1393.03,683.687 1393.58,683.687 1394.14,683.687 1394.7,683.687 1395.26,683.687 1395.82,683.687 1396.38,683.687 1396.94,683.687 1397.5,683.687 1398.06,683.687 1398.62,683.687 1399.18,683.687 1399.74,683.687 1400.3,683.687 1400.86,683.687 1401.41,683.687 1401.97,683.687 1402.53,683.687 1403.09,683.687 1403.65,683.687 1404.21,683.687 1404.77,683.687 1405.33,683.687 1405.89,683.687 1406.45,683.687 1407.01,683.687 1407.57,683.687 1408.13,683.687 1408.68,683.687 1409.24,683.687 1409.8,683.687 1410.36,683.687 1410.92,683.687 1411.48,683.687 1412.04,683.687 1412.6,683.687 1413.16,683.687 1413.72,683.687 1414.28,683.687 1414.84,683.687 1415.4,683.687 1415.95,683.687 1416.51,683.687 1417.07,683.687 1417.63,683.687 1418.19,683.687 1418.75,683.687 1419.31,683.687 1419.87,683.687 1420.43,683.687 1420.99,683.687 1421.55,683.687 1422.11,683.687 1422.67,683.687 1423.23,683.687 1423.78,683.687 1424.34,683.687 1424.9,683.687 1425.46,683.687 1426.02,683.687 1426.58,683.687 1427.14,683.687 1427.7,683.687 1428.26,683.687 1428.82,683.687 1429.38,683.687 1429.94,683.687 1430.5,683.687 1431.05,683.687 1431.61,683.687 1432.17,683.687 1432.73,683.687 1433.29,683.687 1433.85,683.687 1434.41,683.687 1434.97,683.687 1435.53,683.687 1436.09,683.687 1436.65,683.687 1437.21,683.687 1437.77,683.687 1438.33,683.687 1438.88,683.687 1439.44,683.687 1440,683.687 1440.56,683.687 1441.12,683.687 1441.68,683.687 1442.24,683.687 1442.8,683.687 1443.36,683.687 1443.92,683.687 1444.48,683.687 1445.04,683.687 1445.6,683.687 1446.15,683.687 1446.71,683.687 1447.27,683.687 1447.83,683.687 1448.39,683.687 1448.95,683.687 1449.51,683.687 1450.07,683.687 1450.63,683.687 1451.19,683.687 1451.75,683.687 1452.31,683.687 1452.87,683.687 1453.42,683.687 1453.98,683.687 1454.54,683.687 1455.1,683.687 1455.66,683.687 1456.22,683.687 1456.78,683.687 1457.34,683.687 1457.9,683.687 1458.46,683.687 1459.02,683.687 1459.58,683.687 1460.14,683.687 1460.7,683.687 1461.25,683.687 1461.81,683.687 1462.37,683.687 1462.93,683.687 1463.49,683.687 1464.05,683.687 1464.61,683.687 1465.17,683.687 1465.73,683.687 1466.29,683.687 1466.85,683.687 1467.41,683.687 1467.97,683.687 1468.52,683.687 1469.08,683.687 1469.64,683.687 1470.2,683.687 1470.76,683.687 1471.32,683.687 1471.88,683.687 1472.44,683.687 1473,683.687 1473.56,683.687 1474.12,683.687 1474.68,683.687 1475.24,683.687 1475.79,683.687 1476.35,683.687 1476.91,683.687 1477.47,683.687 1478.03,683.687 1478.59,683.687 1479.15,683.687 1479.71,683.687 1480.27,683.687 1480.83,683.687 1481.39,683.687 1481.95,683.687 1482.51,683.687 1483.07,683.687 1483.62,683.687 1484.18,683.687 1484.74,683.687 1485.3,683.687 1485.86,683.687 1486.42,683.687 1486.98,683.687 1487.54,683.687 1488.1,683.687 1488.66,683.687 1489.22,683.687 1489.78,683.687 1490.34,683.687 1490.89,683.687 1491.45,683.687 1492.01,683.687 1492.57,683.687 1493.13,683.687 1493.69,683.687 1494.25,683.687 1494.81,683.687 1495.37,683.687 1495.93,683.687 1496.49,683.687 1497.05,683.687 1497.61,683.687 1498.16,683.687 1498.72,683.687 1499.28,683.687 1499.84,683.687 1500.4,683.687 1500.96,683.687 1501.52,683.687 1502.08,683.687 1502.64,683.687 1503.2,683.687 1503.76,683.687 1504.32,683.687 1504.88,683.687 1505.44,683.687 1505.99,683.687 1506.55,683.687 1507.11,683.687 1507.67,683.687 1508.23,683.687 1508.79,683.687 1509.35,683.687 1509.91,683.687 1510.47,683.687 1511.03,683.687 1511.59,683.687 1512.15,683.687 1512.71,683.687 1513.26,683.687 1513.82,683.687 1514.38,683.687 1514.94,683.687 1515.5,683.687 1516.06,683.687 1516.62,683.687 1517.18,683.687 1517.74,683.687 1518.3,683.687 1518.86,683.687 1519.42,683.687 1519.98,683.687 1520.53,683.687 1521.09,683.687 1521.65,683.687 1522.21,683.687 1522.77,683.687 1523.33,683.687 1523.89,683.687 1524.45,683.687 1525.01,683.687 1525.57,683.687 1526.13,683.687 1526.69,683.687 1527.25,683.687 1527.81,683.687 1528.36,683.687 1528.92,683.687 1529.48,683.687 1530.04,683.687 1530.6,683.687 1531.16,683.687 1531.72,683.687 1532.28,683.687 1532.84,683.687 1533.4,683.687 1533.96,683.687 1534.52,683.687 1535.08,683.687 1535.63,683.687 1536.19,683.687 1536.75,683.687 1537.31,683.687 1537.87,683.687 1538.43,683.687 1538.99,683.687 1539.55,683.687 1540.11,683.687 1540.67,683.687 1541.23,683.687 1541.79,683.687 1542.35,683.687 1542.9,683.687 1543.46,683.687 1544.02,683.687 1544.58,683.687 1545.14,683.687 1545.7,683.687 1546.26,683.687 1546.82,683.687 1547.38,683.687 1547.94,683.687 1548.5,683.687 1549.06,683.687 1549.62,683.687 1550.18,683.687 1550.73,683.687 1551.29,683.687 1551.85,683.687 1552.41,683.687 1552.97,683.687 1553.53,683.687 1554.09,683.687 1554.65,683.687 1555.21,683.687 1555.77,683.687 1556.33,683.687 1556.89,683.687 1557.45,683.687 1558,683.687 1558.56,683.687 1559.12,683.687 1559.68,683.687 1560.24,683.687 1560.8,683.687 1561.36,683.687 1561.92,683.687 1562.48,683.687 1563.04,683.687 1563.6,683.687 1564.16,683.687 1564.72,683.687 1565.28,683.687 1565.83,683.687 1566.39,683.687 1566.95,683.687 1567.51,683.687 1568.07,683.687 1568.63,683.687 1569.19,683.687 1569.75,683.687 1570.31,683.687 1570.87,683.687 1571.43,683.687 1571.99,683.687 1572.55,683.687 1573.1,683.687 1573.66,683.687 1574.22,683.687 1574.78,683.687 1575.34,683.687 1575.9,683.687 1576.46,683.687 1577.02,683.687 1577.58,683.687 1578.14,683.687 1578.7,683.687 1579.26,683.687 1579.82,683.687 1580.37,683.687 1580.93,683.687 1581.49,683.687 1582.05,683.687 1582.61,683.687 1583.17,683.687 1583.73,683.687 1584.29,683.687 1584.85,683.687 1585.41,683.687 1585.97,683.687 1586.53,683.687 1587.09,683.687 1587.65,683.687 1588.2,683.687 1588.76,683.687 1589.32,683.687 1589.88,683.687 1590.44,683.687 1591,683.687 1591.56,683.687 1592.12,683.687 1592.68,683.687 1593.24,683.687 1593.8,683.687 1594.36,683.687 1594.92,683.687 1595.47,683.687 1596.03,683.687 1596.59,683.687 1597.15,683.687 1597.71,683.687 1598.27,683.687 1598.83,683.687 1599.39,683.687 1599.95,683.687 1600.51,683.687 1601.07,683.687 1601.63,683.687 1602.19,683.687 1602.74,683.687 1603.3,683.687 1603.86,683.687 1604.42,683.687 1604.98,683.687 1605.54,683.687 1606.1,683.687 1606.66,683.687 1607.22,683.687 1607.78,683.687 1608.34,683.687 1608.9,683.687 1609.46,683.687 1610.02,683.687 1610.57,683.687 1611.13,683.687 1611.69,683.687 1612.25,683.687 1612.81,683.687 1613.37,683.687 1613.93,683.687 1614.49,683.687 1615.05,683.687 1615.61,683.687 1616.17,683.687 1616.73,683.687 1617.29,683.687 1617.84,683.687 1618.4,683.687 1618.96,683.687 1619.52,683.687 1620.08,683.687 1620.64,683.687 1621.2,683.687 1621.76,683.687 1622.32,683.687 1622.88,683.687 1623.44,683.687 1624,683.687 1624.56,683.687 1625.11,683.687 1625.67,683.687 1626.23,683.687 1626.79,683.687 1627.35,683.687 1627.91,683.687 1628.47,683.687 1629.03,683.687 1629.59,683.687 1630.15,683.687 1630.71,683.687 1631.27,683.687 1631.83,683.687 1632.39,683.687 1632.94,683.687 1633.5,683.687 1634.06,683.687 1634.62,683.687 1635.18,683.687 1635.74,683.687 1636.3,683.687 1636.86,683.687 1637.42,683.687 1637.98,683.687 1638.54,683.687 1639.1,683.687 1639.66,683.687 1640.21,683.687 1640.77,683.687 1641.33,683.687 1641.89,683.687 1642.45,683.687 1643.01,683.687 1643.57,683.687 1644.13,683.687 1644.69,683.687 1645.25,683.687 1645.81,683.687 1646.37,683.687 1646.93,683.687 1647.48,683.687 1648.04,683.687 1648.6,683.687 1649.16,683.687 1649.72,683.687 1650.28,683.687 1650.84,683.687 1651.4,683.687 1651.96,683.687 1652.52,683.687 1653.08,683.687 1653.64,683.687 1654.2,683.687 1654.76,683.687 1655.31,683.687 1655.87,683.687 1656.43,683.687 1656.99,683.687 1657.55,683.687 1658.11,683.687 1658.67,683.687 1659.23,683.687 1659.79,683.687 1660.35,683.687 1660.91,683.687 1661.47,683.687 1662.03,683.687 1662.58,683.687 1663.14,683.687 1663.7,683.687 1664.26,683.687 1664.82,683.687 1665.38,683.687 1665.94,683.687 1666.5,683.687 1667.06,683.687 1667.62,683.687 1668.18,683.687 1668.74,683.687 1669.3,683.687 1669.85,683.687 1670.41,683.687 1670.97,683.687 1671.53,683.687 1672.09,683.687 1672.65,683.687 1673.21,683.687 1673.77,683.687 1674.33,683.687 1674.89,683.687 1675.45,683.687 1676.01,683.687 1676.57,683.687 1677.13,683.687 1677.68,683.687 1678.24,683.687 1678.8,683.687 1679.36,683.687 1679.92,683.687 1680.48,683.687 1681.04,683.687 1681.6,683.687 1682.16,683.687 1682.72,683.687 1683.28,683.687 1683.84,683.687 1684.4,683.687 1684.95,683.687 1685.51,683.687 1686.07,683.687 1686.63,683.687 1687.19,683.687 1687.75,683.687 1688.31,683.687 1688.87,683.687 1689.43,683.687 1689.99,683.687 1690.55,683.687 1691.11,683.687 1691.67,683.687 1692.23,683.687 1692.78,683.687 1693.34,683.687 1693.9,683.687 1694.46,683.687 1695.02,683.687 1695.58,683.687 1696.14,683.687 1696.7,683.687 1697.26,683.687 1697.82,683.687 1698.38,683.687 1698.94,683.687 1699.5,683.687 1700.05,683.687 1700.61,683.687 1701.17,683.687 1701.73,683.687 1702.29,683.687 1702.85,683.687 1703.41,683.687 1703.97,683.687 1704.53,683.687 1705.09,683.687 1705.65,683.687 1706.21,683.687 1706.77,683.687 1707.32,683.687 1707.88,683.687 1708.44,683.687 1709,683.687 1709.56,683.687 1710.12,683.687 1710.68,683.687 1711.24,683.687 1711.8,683.687 1712.36,683.687 1712.92,683.687 1713.48,683.687 1714.04,683.687 1714.6,683.687 1715.15,683.687 1715.71,683.687 1716.27,683.687 1716.83,683.687 1717.39,683.687 1717.95,683.687 1718.51,683.687 1719.07,683.687 1719.63,683.687 1720.19,683.687 1720.75,683.687 1721.31,683.687 1721.87,683.687 1722.42,683.687 1722.98,683.687 1723.54,683.687 1724.1,683.687 1724.66,683.687 1725.22,683.687 1725.78,683.687 1726.34,683.687 1726.9,683.687 1727.46,683.687 1728.02,683.687 1728.58,683.687 1729.14,683.687 1729.69,683.687 1730.25,683.687 1730.81,683.687 1731.37,683.687 1731.93,683.687 1732.49,683.687 1733.05,683.687 1733.61,683.687 1734.17,683.687 1734.73,683.687 1735.29,683.687 1735.85,683.687 1736.41,683.687 1736.97,683.687 1737.52,683.687 1738.08,683.687 1738.64,683.687 1739.2,683.687 1739.76,683.687 1740.32,683.687 1740.88,683.687 1741.44,683.687 1742,683.687 1742.56,683.687 1743.12,683.687 1743.68,683.687 1744.24,683.687 1744.79,683.687 1745.35,683.687 1745.91,683.687 1746.47,683.687 1747.03,683.687 1747.59,683.687 1748.15,683.687 1748.71,683.687 1749.27,683.687 1749.83,683.687 1750.39,683.687 1750.95,683.687 1751.51,683.687 1752.06,683.687 1752.62,683.687 1753.18,683.687 1753.74,683.687 1754.3,683.687 1754.86,683.687 1755.42,683.687 1755.98,683.687 1756.54,683.687 1757.1,683.687 1757.66,683.687 1758.22,683.687 1758.78,683.687 1759.34,683.687 1759.89,683.687 1760.45,683.687 1761.01,683.687 1761.57,683.687 1762.13,683.687 1762.69,683.687 1763.25,683.687 1763.81,683.687 1764.37,683.687 1764.93,683.687 1765.49,683.687 1766.05,683.687 1766.61,683.687 1767.16,683.687 1767.72,683.687 1768.28,683.687 1768.84,683.687 1769.4,683.687 1769.96,683.687 1770.52,683.687 1771.08,683.687 1771.64,683.687 1772.2,683.687 1772.76,683.687 1773.32,683.687 1773.88,683.687 1774.43,683.687 1774.99,683.687 1775.55,683.687 1776.11,683.687 1776.67,683.687 1777.23,683.687 1777.79,683.687 1778.35,683.687 1778.91,683.687 1779.47,683.687 1780.03,683.687 1780.59,683.687 1781.15,683.687 1781.71,683.687 1782.26,683.687 1782.82,683.687 1783.38,683.687 1783.94,683.687 1784.5,683.687 1785.06,683.687 1785.62,683.687 1786.18,683.687 1786.74,683.687 1787.3,683.687 1787.86,683.687 1788.42,683.687 1788.98,683.687 1789.53,683.687 1790.09,683.687 1790.65,683.687 1791.21,683.687 1791.77,683.687 1792.33,683.687 1792.89,683.687 1793.45,683.687 1794.01,683.687 1794.57,683.687 1795.13,683.687 1795.69,683.687 1796.25,683.687 1796.8,683.687 1797.36,683.687 1797.92,683.687 1798.48,683.687 1799.04,683.687 1799.6,683.687 1800.16,683.687 1800.72,683.687 1801.28,683.687 1801.84,683.687 1802.4,683.687 1802.96,683.687 1803.52,683.687 1804.08,683.687 1804.63,683.687 1805.19,683.687 1805.75,683.687 1806.31,683.687 1806.87,683.687 1807.43,683.687 1807.99,683.687 1808.55,683.687 1809.11,683.687 1809.67,683.687 1810.23,683.687 1810.79,683.687 1811.35,683.687 1811.9,683.687 1812.46,683.687 1813.02,683.687 1813.58,683.687 1814.14,683.687 1814.7,683.687 1815.26,683.687 1815.82,683.687 1816.38,683.687 1816.94,683.687 1817.5,683.687 1818.06,683.687 1818.62,683.687 1819.18,683.687 1819.73,683.687 1820.29,683.687 1820.85,683.687 1821.41,683.687 1821.97,683.687 1822.53,683.687 1823.09,683.687 1823.65,683.687 1824.21,683.687 1824.77,683.687 1825.33,683.687 1825.89,683.687 1826.45,683.687 1827,683.687 1827.56,683.687 1828.12,683.687 1828.68,683.687 1829.24,683.687 1829.8,683.687 1830.36,683.687 1830.92,683.687 1831.48,683.687 1832.04,683.687 1832.6,683.687 1833.16,683.687 1833.72,683.687 1834.27,683.687 1834.83,683.687 1835.39,683.687 1835.95,683.687 1836.51,683.687 1837.07,683.687 1837.63,683.687 1838.19,683.687 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.040038155510915 ± 0.021795042525905174\nProjected Energy: -4.0155986416143685 ± (0.007920400650683668, 0.007689506833975734)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.456973</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3105e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.037e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.037e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.483e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">4.188e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.1802e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133655\n -0.7590191922770853\n  0.13584182219621788\n  0.15789998694608265\n  0.8767114411781307\n  1.5305929970973269\n  1.58357326118675\n  3.0728703303258698\n  3.125672653951839\n  4.862107221562173\n  6.260694850380594\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
