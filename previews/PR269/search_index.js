var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20969465849864538 ± 0.0013723243254424118\n   G2(1) = 0.9186384139706147 ± 0.0006379182704924231\n   G2(2) = 0.981662953045217 ± 0.0006225327428411862\n   G2(3) = 0.9897026074696913 ± 0.0008786839931909359\n   G2(4) = 0.981662953045217 ± 0.0006225327428411862\n   G2(5) = 0.9186384139706147 ± 0.0006379182704924231\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.004733550975049 ± 0.15609862946323816\n   Replica 2: -3.9800649211150536 ± 0.1282933195876158\n   Replica 3: -3.949903982413981 ± 0.1340444584525883\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.02 2211.02,1003.02 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.208 2211.02,745.208 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.391 2211.02,487.391 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.574 2211.02,229.574 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.02 423.181,1003.02 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.208 423.181,745.208 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.391 423.181,487.391 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.574 423.181,229.574 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M290.043 1016.37 L306.363 1016.37 L306.363 1020.3 L284.418 1020.3 L284.418 1016.37 Q287.08 1013.61 291.664 1008.99 Q296.27 1004.33 297.451 1002.99 Q299.696 1000.47 300.576 998.731 Q301.478 996.971 301.478 995.282 Q301.478 992.527 299.534 990.791 Q297.613 989.055 294.511 989.055 Q292.312 989.055 289.858 989.819 Q287.427 990.582 284.65 992.133 L284.65 987.411 Q287.474 986.277 289.927 985.698 Q292.381 985.12 294.418 985.12 Q299.789 985.12 302.983 987.805 Q306.177 990.49 306.177 994.981 Q306.177 997.11 305.367 999.032 Q304.58 1000.93 302.474 1003.52 Q301.895 1004.19 298.793 1007.41 Q295.691 1010.61 290.043 1016.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 985.745 L334.58 985.745 L334.58 989.68 L320.506 989.68 L320.506 998.152 Q321.524 997.805 322.543 997.643 Q323.562 997.457 324.58 997.457 Q330.367 997.457 333.747 1000.63 Q337.126 1003.8 337.126 1009.22 Q337.126 1014.8 333.654 1017.9 Q330.182 1020.98 323.862 1020.98 Q321.687 1020.98 319.418 1020.61 Q317.173 1020.24 314.765 1019.49 L314.765 1014.8 Q316.849 1015.93 319.071 1016.49 Q321.293 1017.04 323.77 1017.04 Q327.774 1017.04 330.112 1014.93 Q332.45 1012.83 332.45 1009.22 Q332.45 1005.61 330.112 1003.5 Q327.774 1001.39 323.77 1001.39 Q321.895 1001.39 320.02 1001.81 Q318.168 1002.23 316.224 1003.11 L316.224 985.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 988.823 Q352.728 988.823 350.899 992.388 Q349.094 995.93 349.094 1003.06 Q349.094 1010.17 350.899 1013.73 Q352.728 1017.27 356.339 1017.27 Q359.973 1017.27 361.779 1013.73 Q363.608 1010.17 363.608 1003.06 Q363.608 995.93 361.779 992.388 Q359.973 988.823 356.339 988.823 M356.339 985.12 Q362.149 985.12 365.205 989.726 Q368.284 994.309 368.284 1003.06 Q368.284 1011.79 365.205 1016.39 Q362.149 1020.98 356.339 1020.98 Q350.529 1020.98 347.45 1016.39 Q344.395 1011.79 344.395 1003.06 Q344.395 994.309 347.45 989.726 Q350.529 985.12 356.339 985.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M286.062 727.928 L304.418 727.928 L304.418 731.863 L290.344 731.863 L290.344 740.335 Q291.363 739.988 292.381 739.826 Q293.4 739.641 294.418 739.641 Q300.205 739.641 303.585 742.812 Q306.964 745.983 306.964 751.4 Q306.964 756.979 303.492 760.08 Q300.02 763.159 293.701 763.159 Q291.525 763.159 289.256 762.789 Q287.011 762.418 284.603 761.678 L284.603 756.979 Q286.687 758.113 288.909 758.668 Q291.131 759.224 293.608 759.224 Q297.613 759.224 299.951 757.118 Q302.288 755.011 302.288 751.4 Q302.288 747.789 299.951 745.682 Q297.613 743.576 293.608 743.576 Q291.733 743.576 289.858 743.993 Q288.006 744.409 286.062 745.289 L286.062 727.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 731.007 Q322.566 731.007 320.737 734.571 Q318.932 738.113 318.932 745.243 Q318.932 752.349 320.737 755.914 Q322.566 759.455 326.177 759.455 Q329.811 759.455 331.617 755.914 Q333.446 752.349 333.446 745.243 Q333.446 738.113 331.617 734.571 Q329.811 731.007 326.177 731.007 M326.177 727.303 Q331.987 727.303 335.043 731.909 Q338.122 736.493 338.122 745.243 Q338.122 753.969 335.043 758.576 Q331.987 763.159 326.177 763.159 Q320.367 763.159 317.288 758.576 Q314.233 753.969 314.233 745.243 Q314.233 736.493 317.288 731.909 Q320.367 727.303 326.177 727.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 731.007 Q352.728 731.007 350.899 734.571 Q349.094 738.113 349.094 745.243 Q349.094 752.349 350.899 755.914 Q352.728 759.455 356.339 759.455 Q359.973 759.455 361.779 755.914 Q363.608 752.349 363.608 745.243 Q363.608 738.113 361.779 734.571 Q359.973 731.007 356.339 731.007 M356.339 727.303 Q362.149 727.303 365.205 731.909 Q368.284 736.493 368.284 745.243 Q368.284 753.969 365.205 758.576 Q362.149 763.159 356.339 763.159 Q350.529 763.159 347.45 758.576 Q344.395 753.969 344.395 745.243 Q344.395 736.493 347.45 731.909 Q350.529 727.303 356.339 727.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M284.835 470.111 L307.057 470.111 L307.057 472.102 L294.511 504.671 L289.627 504.671 L301.432 474.046 L284.835 474.046 L284.835 470.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 470.111 L334.58 470.111 L334.58 474.046 L320.506 474.046 L320.506 482.519 Q321.524 482.171 322.543 482.009 Q323.562 481.824 324.58 481.824 Q330.367 481.824 333.747 484.995 Q337.126 488.167 337.126 493.583 Q337.126 499.162 333.654 502.264 Q330.182 505.342 323.862 505.342 Q321.687 505.342 319.418 504.972 Q317.173 504.602 314.765 503.861 L314.765 499.162 Q316.849 500.296 319.071 500.852 Q321.293 501.407 323.77 501.407 Q327.774 501.407 330.112 499.301 Q332.45 497.194 332.45 493.583 Q332.45 489.972 330.112 487.866 Q327.774 485.759 323.77 485.759 Q321.895 485.759 320.02 486.176 Q318.168 486.593 316.224 487.472 L316.224 470.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 473.19 Q352.728 473.19 350.899 476.755 Q349.094 480.296 349.094 487.426 Q349.094 494.532 350.899 498.097 Q352.728 501.639 356.339 501.639 Q359.973 501.639 361.779 498.097 Q363.608 494.532 363.608 487.426 Q363.608 480.296 361.779 476.755 Q359.973 473.19 356.339 473.19 M356.339 469.486 Q362.149 469.486 365.205 474.093 Q368.284 478.676 368.284 487.426 Q368.284 496.153 365.205 500.759 Q362.149 505.342 356.339 505.342 Q350.529 505.342 347.45 500.759 Q344.395 496.153 344.395 487.426 Q344.395 478.676 347.45 474.093 Q350.529 469.486 356.339 469.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M256.664 242.919 L264.303 242.919 L264.303 216.554 L255.992 218.22 L255.992 213.961 L264.256 212.294 L268.932 212.294 L268.932 242.919 L276.571 242.919 L276.571 246.854 L256.664 246.854 L256.664 242.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M296.015 215.373 Q292.404 215.373 290.576 218.938 Q288.77 222.48 288.77 229.609 Q288.77 236.716 290.576 240.28 Q292.404 243.822 296.015 243.822 Q299.65 243.822 301.455 240.28 Q303.284 236.716 303.284 229.609 Q303.284 222.48 301.455 218.938 Q299.65 215.373 296.015 215.373 M296.015 211.669 Q301.826 211.669 304.881 216.276 Q307.96 220.859 307.96 229.609 Q307.96 238.336 304.881 242.942 Q301.826 247.526 296.015 247.526 Q290.205 247.526 287.127 242.942 Q284.071 238.336 284.071 229.609 Q284.071 220.859 287.127 216.276 Q290.205 211.669 296.015 211.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 215.373 Q322.566 215.373 320.737 218.938 Q318.932 222.48 318.932 229.609 Q318.932 236.716 320.737 240.28 Q322.566 243.822 326.177 243.822 Q329.811 243.822 331.617 240.28 Q333.446 236.716 333.446 229.609 Q333.446 222.48 331.617 218.938 Q329.811 215.373 326.177 215.373 M326.177 211.669 Q331.987 211.669 335.043 216.276 Q338.122 220.859 338.122 229.609 Q338.122 238.336 335.043 242.942 Q331.987 247.526 326.177 247.526 Q320.367 247.526 317.288 242.942 Q314.233 238.336 314.233 229.609 Q314.233 220.859 317.288 216.276 Q320.367 211.669 326.177 211.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 215.373 Q352.728 215.373 350.899 218.938 Q349.094 222.48 349.094 229.609 Q349.094 236.716 350.899 240.28 Q352.728 243.822 356.339 243.822 Q359.973 243.822 361.779 240.28 Q363.608 236.716 363.608 229.609 Q363.608 222.48 361.779 218.938 Q359.973 215.373 356.339 215.373 M356.339 211.669 Q362.149 211.669 365.205 216.276 Q368.284 220.859 368.284 229.609 Q368.284 238.336 365.205 242.942 Q362.149 247.526 356.339 247.526 Q350.529 247.526 347.45 242.942 Q344.395 238.336 344.395 229.609 Q344.395 220.859 347.45 216.276 Q350.529 211.669 356.339 211.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.574 4017.76,229.574 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.16 459.396,1247.73 459.964,1247.22 460.533,1246.64 461.101,1245.96 461.669,1245.23 462.238,1244.41 462.806,1243.49 463.375,1242.48 463.943,1241.4 464.511,1240.22 465.08,1237.9 465.648,1236.5 466.216,1234.99 466.785,1233.36 467.353,1231.6 467.921,1229.71 468.49,1227.66 469.058,1225.49 469.626,1223.16 470.195,1220.67 470.763,1216.98 471.331,1214.08 471.9,1209.97 472.468,1206.69 473.036,1202.21 473.605,1198.51 474.173,1193.53 474.741,1185.24 475.31,1179.86 475.878,1174.35 476.446,1168.58 477.015,1161.53 477.583,1156.17 478.152,1150.66 478.72,1144.94 479.288,1137.98 479.857,1130.77 480.425,1123.44 480.993,1116.76 481.562,1109.91 482.13,1102.84 482.698,1094.58 483.267,1086.23 483.835,1078.64 484.403,1070.91 484.972,1062.94 485.54,1054.75 486.108,1044.35 486.677,1033.83 487.245,1025.11 487.813,1015.19 488.382,1005.18 488.95,995.021 489.518,985.881 490.087,976.685 490.655,965.192 491.224,955.726 491.792,944.088 492.36,933.505 492.929,922.896 493.497,911.233 494.065,899.424 494.634,888.696 495.202,877.861 495.77,867.164 496.339,856.366 496.907,844.748 497.475,834.12 498.044,824.59 498.612,813.905 499.18,802.343 499.749,791.825 500.317,781.278 500.885,766.619 501.454,753.33 502.022,742.321 502.59,733.296 503.159,722.219 503.727,710.271 504.295,701.751 504.864,690.061 505.432,681.564 506.001,671.334 506.569,657.948 507.137,649.024 507.706,640.178 508.274,630.569 508.842,623.11 509.411,613.656 509.979,606.415 510.547,599.257 511.116,590.96 511.684,582.858 512.252,572.663 512.821,564.81 513.389,558.115 513.957,550.496 514.526,542.12 515.094,535.773 515.662,528.644 516.231,520.301 516.799,513.269 517.367,507.58 517.936,500.869 518.504,494.389 519.072,487.834 519.641,481.602 520.209,476.326 520.778,469.416 521.346,463.501 521.914,457.671 522.483,455.08 523.051,449.357 523.619,444.768 524.188,440.321 524.756,429.71 525.324,425.716 525.893,421.791 526.461,415.825 527.029,414.089 527.598,409.209 528.166,404.448 528.734,399.788 529.303,395.219 529.871,390.992 530.439,387.661 531.008,383.615 531.576,379.56 532.144,372.622 532.713,368.031 533.281,365.481 533.85,363.002 534.418,360.596 534.986,359.275 535.555,357.82 536.123,353.238 536.691,349.867 537.26,347.469 537.828,345.1 538.396,338.803 538.965,336.554 539.533,334.505 540.101,330.94 540.67,325.198 541.238,322.696 541.806,321.404 542.375,318.026 542.943,315.658 543.511,313.476 544.08,309.311 544.648,307.294 545.216,306.443 545.785,305.536 546.353,301.687 546.921,298.995 547.49,297.585 548.058,297.881 548.627,298.41 549.195,297.71 549.763,296.853 550.332,294.108 550.9,290.281 551.468,290.981 552.037,289.505 552.605,289.113 553.173,288.627 553.742,286.967 554.31,287.451 554.878,284.758 555.447,284.117 556.015,283.604 556.583,284.23 557.152,284.662 557.72,284.009 558.288,284.273 558.857,282.432 559.425,277.971 559.993,277.682 560.562,281.177 561.13,281.48 561.698,279.334 562.267,278.463 562.835,277.61 563.404,276.883 563.972,275.995 564.54,274.155 565.109,273.714 565.677,272.154 566.245,271.415 566.814,269.859 567.382,267.207 567.95,266.688 568.519,263.338 569.087,263.052 569.655,261.874 570.224,260.81 570.792,259.643 571.36,256.612 571.929,255.571 572.497,255.716 573.065,254.735 573.634,256.022 574.202,252.952 574.77,254.173 575.339,254.417 575.907,252.668 576.476,253.093 577.044,253.218 577.612,251.391 578.181,250.484 578.749,249.841 579.317,248.073 579.886,250.635 580.454,250.824 581.022,251.117 581.591,248.319 582.159,245.619 582.727,245.083 583.296,242.609 583.864,241.217 584.432,241.114 585.001,240.933 585.569,241.831 586.137,242.666 586.706,247.528 587.274,245.872 587.842,246.346 588.411,245.916 588.979,248.268 589.547,250.34 590.116,250.169 590.684,251.29 591.253,248.013 591.821,247.083 592.389,248.504 592.958,248.537 593.526,245.526 594.094,246.805 594.663,245.731 595.231,246.934 595.799,245.815 596.368,246.976 596.936,245.069 597.504,246.466 598.073,245.422 598.641,245.993 599.209,244.015 599.778,244.356 600.346,244.895 600.914,245.178 601.483,243.611 602.051,243.146 602.619,242.453 603.188,243.79 603.756,243.927 604.325,241.957 604.893,244.431 605.461,244.813 606.03,246.923 606.598,246.77 607.166,246.728 607.735,247.593 608.303,248.467 608.871,248.206 609.44,249.003 610.008,247.505 610.576,246.396 611.145,247.25 611.713,246.876 612.281,246.817 612.85,246.319 613.418,244.117 613.986,241.837 614.555,239.851 615.123,239.9 615.691,240.098 616.26,238.377 616.828,240.009 617.396,239.306 617.965,237.479 618.533,236.659 619.102,236.878 619.67,238.206 620.238,236.339 620.807,237.747 621.375,236.893 621.943,238.447 622.512,238.582 623.08,240.725 623.648,240.674 624.217,243.752 624.785,244.779 625.353,244.261 625.922,241.955 626.49,245.003 627.058,243.606 627.627,241.253 628.195,240.152 628.763,241.193 629.332,242.187 629.9,242.076 630.468,245.094 631.037,244.687 631.605,242.145 632.173,242.05 632.742,242.788 633.31,239.471 633.879,239.414 634.447,239.332 635.015,239.703 635.584,240.907 636.152,241.905 636.72,241.778 637.289,241.536 637.857,240.359 638.425,240.412 638.994,241.381 639.562,241.1 640.13,238.945 640.699,237.595 641.267,237.45 641.835,236.397 642.404,237.28 642.972,238.313 643.54,237.118 644.109,234.026 644.677,230.109 645.245,231.583 645.814,232.04 646.382,234.36 646.951,233.439 647.519,235.936 648.087,234.891 648.656,234.67 649.224,234.415 649.792,233.537 650.361,233.829 650.929,233.848 651.497,233.131 652.066,233.406 652.634,233.582 653.202,231.966 653.771,231.293 654.339,231.905 654.907,232.326 655.476,232.755 656.044,232.229 656.612,233.606 657.181,233.844 657.749,237.354 658.317,238.344 658.886,238.285 659.454,238.138 660.022,238.923 660.591,238.549 661.159,239.419 661.728,239.029 662.296,239.865 662.864,240.612 663.433,237.164 664.001,236.994 664.569,234.775 665.138,234.966 665.706,234.13 666.274,233.182 666.843,231.113 667.411,231.546 667.979,230.726 668.548,231.148 669.116,231.376 669.684,232.483 670.253,230.889 670.821,230.078 671.389,231.586 671.958,233.728 672.526,230.679 673.094,231.953 673.663,230.214 674.231,229.672 674.799,228.925 675.368,228.243 675.936,229.041 676.505,229.625 677.073,228.854 677.641,227.214 678.21,227.841 678.778,227.265 679.346,226.042 679.915,226.711 680.483,226.202 681.051,227.756 681.62,228.306 682.188,228.759 682.756,229.369 683.325,228.729 683.893,230.51 684.461,229.875 685.03,231.117 685.598,230.55 686.166,230.977 686.735,232.568 687.303,231.872 687.871,232.196 688.44,231.558 689.008,232.848 689.577,233.195 690.145,233.509 690.713,233.821 691.282,233.931 691.85,234.006 692.418,233.096 692.987,234.413 693.555,231.532 694.123,230.806 694.692,228.889 695.26,229.482 695.828,229.739 696.397,230.296 696.965,229.756 697.533,231.049 698.102,231.373 698.67,232.9 699.238,235.208 699.807,234.191 700.375,233.295 700.943,235.803 701.512,233.726 702.08,233.921 702.648,236.115 703.217,235.03 703.785,236.223 704.354,237.169 704.922,237.097 705.49,237.164 706.059,238.049 706.627,239.729 707.195,239.515 707.764,239.123 708.332,238.031 708.9,237.921 709.469,236.75 710.037,237.736 710.605,238.546 711.174,240.266 711.742,240.727 712.31,240.214 712.879,238.933 713.447,238.669 714.015,236.222 714.584,236.154 715.152,234.784 715.72,234.616 716.289,233.215 716.857,231.92 717.425,233.133 717.994,231.976 718.562,233.214 719.131,231.111 719.699,230.459 720.267,229.553 720.836,230.95 721.404,231.808 721.972,230.891 722.541,230.957 723.109,232.248 723.677,231.168 724.246,231.208 724.814,231.396 725.382,231.491 725.951,231.499 726.519,230.445 727.087,228.386 727.656,228.572 728.224,231.968 728.792,227.902 729.361,228.287 729.929,229.593 730.497,225.641 731.066,227.134 731.634,227.461 732.203,226.898 732.771,225.254 733.339,223.622 733.908,224.336 734.476,226.088 735.044,227.579 735.613,230.321 736.181,229.478 736.749,231.976 737.318,232.201 737.886,234.451 738.454,233.584 739.023,234.855 739.591,234.627 740.159,232.429 740.728,232.506 741.296,235.563 741.864,235.197 742.433,235.137 743.001,235.12 743.569,236.281 744.138,238.004 744.706,234.882 745.274,235.825 745.843,235.621 746.411,234.468 746.98,233.344 747.548,233.342 748.116,231.21 748.685,231.314 749.253,230.504 749.821,230.58 750.39,230.666 750.958,229.797 751.526,229.904 752.095,229.196 752.663,229.389 753.231,231.808 753.8,230.884 754.368,233.111 754.936,234.154 755.505,234.014 756.073,232.835 756.641,232.676 757.21,231.755 757.778,230.714 758.346,228.892 758.915,228.1 759.483,229.253 760.052,227.358 760.62,229.73 761.188,230.753 761.757,229.878 762.325,230.979 762.893,231.973 763.462,232.896 764.03,230.781 764.598,229.692 765.167,229.815 765.735,231.072 766.303,232.318 766.872,232.316 767.44,232.176 768.008,231.374 768.577,232.534 769.145,231.374 769.713,233.577 770.282,233.349 770.85,233.236 771.418,231.08 771.987,233.378 772.555,235.473 773.123,235.16 773.692,236.936 774.26,236.626 774.829,235.127 775.397,233.938 775.965,233.884 776.534,232.749 777.102,232.709 777.67,233.683 778.239,233.639 778.807,231.248 779.375,232.343 779.944,233.224 780.512,234.068 781.08,231.421 781.649,230.474 782.217,230.532 782.785,225.561 783.354,225.027 783.922,224.438 784.49,224.034 785.059,225.456 785.627,227.032 786.195,225.475 786.764,225.962 787.332,228.299 787.9,229.432 788.469,231.716 789.037,230.69 789.606,230.876 790.174,230.807 790.742,229.829 791.311,229.06 791.879,230.379 792.447,228.198 793.016,227.451 793.584,226.524 794.152,223.883 794.721,225.601 795.289,224.057 795.857,225.655 796.426,225.079 796.994,226.687 797.562,228.017 798.131,232.342 798.699,232.461 799.267,234.865 799.836,232.718 800.404,233.538 800.972,232.316 801.541,233.342 802.109,233.276 802.678,232.103 803.246,232.978 803.814,233 804.383,233.869 804.951,231.744 805.519,232.829 806.088,232.793 806.656,232.918 807.224,232.751 807.793,232.39 808.361,234.394 808.929,234.987 809.498,234.651 810.066,234.446 810.634,235.244 811.203,235.046 811.771,235.522 812.339,234.272 812.908,233.022 813.476,232.873 814.044,233.687 814.613,234.24 815.181,237.05 815.749,237.739 816.318,235.072 816.886,235.022 817.455,233.525 818.023,231.397 818.591,231.23 819.16,231.108 819.728,231.924 820.296,230.698 820.865,230.576 821.433,230.516 822.001,230.543 822.57,229.614 823.138,228.477 823.706,228.566 824.275,227.789 824.843,226.779 825.411,227.066 825.98,226.411 826.548,226.62 827.116,226.695 827.685,227.869 828.253,228.219 828.821,230.482 829.39,230.298 829.958,229.398 830.526,228.386 831.095,229.441 831.663,230.687 832.232,230.755 832.8,229.722 833.368,231.874 833.937,228.97 834.505,229.059 835.073,230.075 835.642,231.216 836.21,230.152 836.778,230.206 837.347,229.408 837.915,229.492 838.483,229.593 839.052,227.782 839.62,230.247 840.188,230.286 840.757,227.193 841.325,227.577 841.893,228.804 842.462,229.305 843.03,228.393 843.598,228.768 844.167,230.084 844.735,231.126 845.304,231.262 845.872,230.973 846.44,231.002 847.009,231.901 847.577,231.794 848.145,231.863 848.714,233.747 849.282,234.476 849.85,235.134 850.419,235.696 850.987,233.389 851.555,233.106 852.124,235.023 852.692,235.824 853.26,233.288 853.829,232.859 854.397,231.553 854.965,231.497 855.534,230.345 856.102,229.361 856.67,229.391 857.239,231.497 857.807,231.206 858.375,230.084 858.944,229.006 859.512,230.068 860.081,229.108 860.649,229.126 861.217,227.306 861.786,225.358 862.354,224.765 862.922,224.111 863.491,223.594 864.059,226.406 864.627,226.741 865.196,226.175 865.764,224.331 866.332,222.707 866.901,226.32 867.469,225.48 868.037,225.914 868.606,225.245 869.174,227.616 869.742,228.957 870.311,229.425 870.879,229.699 871.447,228.728 872.016,230.973 872.584,231.944 873.152,232.945 873.721,231.984 874.289,232.915 874.858,232.865 875.426,230.75 875.994,230.572 876.563,229.512 877.131,228.768 877.699,228.974 878.268,230.243 878.836,230.359 879.404,229.273 879.973,231.255 880.541,233.326 881.109,233.071 881.678,231.919 882.246,232.044 882.814,230.986 883.383,230.92 883.951,232.015 884.519,230.001 885.088,231.305 885.656,231.356 886.224,230.286 886.793,232.45 887.361,232.436 887.93,232.367 888.498,232.29 889.066,235.286 889.635,233.846 890.203,233.456 890.771,233.343 891.34,231.862 891.908,233.729 892.476,233.518 893.045,233.375 893.613,233.058 894.181,233.796 894.75,233.391 895.318,233.308 895.886,235.273 896.455,235.82 897.023,234.466 897.591,233.031 898.16,231.716 898.728,231.562 899.296,233.729 899.865,233.44 900.433,233.12 901.001,233.944 901.57,232.478 902.138,232.095 902.707,233.845 903.275,233.507 903.843,233.246 904.412,231.987 904.98,229.75 905.548,232.988 906.117,234.884 906.685,233.28 907.253,232.797 907.822,231.401 908.39,229.048 908.958,227.839 909.527,229.96 910.095,230.017 910.663,228.743 911.232,226.717 911.8,228.107 912.368,228.201 912.937,226.241 913.505,226.6 914.073,225.666 914.642,223.827 915.21,223.3 915.779,223.615 916.347,220.073 916.915,220.684 917.484,222.285 918.052,222.74 918.62,224.228 919.189,229.776 919.757,228.916 920.325,229.221 920.894,230.112 921.462,229.917 922.03,231.012 922.599,231.852 923.167,232.824 923.735,228.405 924.304,230.471 924.872,230.447 925.44,232.271 926.009,232.001 926.577,232.874 927.145,234.7 927.714,234.267 928.282,231.924 928.85,232.872 929.419,232.652 929.987,232.496 930.556,232.283 931.124,232.087 931.692,230.672 932.261,231.575 932.829,229.513 933.397,229.528 933.966,229.581 934.534,227.647 935.102,227.731 935.671,226.845 936.239,225.998 936.807,225.365 937.376,226.991 937.944,228.424 938.512,227.299 939.081,227.622 939.649,228.818 940.217,228.957 940.786,228.338 941.354,230.449 941.922,230.593 942.491,230.474 943.059,230.368 943.627,229.536 944.196,230.604 944.764,229.423 945.333,229.305 945.901,228.349 946.469,227.475 947.038,229.886 947.606,228.864 948.174,230.015 948.743,230.99 949.311,231.065 949.879,232.155 950.448,231.836 951.016,229.476 951.584,229.435 952.153,231.347 952.721,234.378 953.289,234.213 953.858,234.963 954.426,235.769 954.994,235.447 955.563,233.75 956.131,232.389 956.699,233.329 957.268,231.076 957.836,231.002 958.405,231.069 958.973,230.049 959.541,228.923 960.11,229.884 960.678,229.907 961.246,232.026 961.815,231.645 962.383,230.333 962.951,232.373 963.52,232.089 964.088,231.99 964.656,232.918 965.225,231.847 965.793,231.658 966.361,233.58 966.93,234.238 967.498,232.791 968.066,232.498 968.635,232.287 969.203,231.942 969.771,231.567 970.34,230.43 970.908,230.346 971.476,229.137 972.045,228.211 972.613,228.291 973.182,226.334 973.75,225.617 974.318,224.87 974.887,224.113 975.455,224.339 976.023,224.699 976.592,225.31 977.16,224.464 977.728,226.762 978.297,227.123 978.865,228.485 979.433,227.601 980.002,229.69 980.57,231.796 981.138,230.82 981.707,229.73 982.275,229.632 982.843,230.753 983.412,229.546 983.98,228.495 984.548,230.569 985.117,229.592 985.685,229.79 986.253,229.766 986.822,228.873 987.39,228.048 987.959,226.142 988.527,227.461 989.095,228.743 989.664,229.068 990.232,230.439 990.8,230.267 991.369,230.129 991.937,232.33 992.505,228.873 993.074,228.726 993.642,229.685 994.21,229.814 994.779,228.905 995.347,227.901 995.915,226.952 996.484,225.919 997.052,226.191 997.62,226.469 998.189,224.753 998.757,225.228 999.325,226.524 999.894,223.915 1000.46,222.581 1001.03,223.027 1001.6,221.466 1002.17,223.353 1002.74,221.685 1003.3,221.347 1003.87,219.895 1004.44,220.635 1005.01,222.445 1005.58,220.951 1006.15,222.859 1006.71,223.225 1007.28,226.083 1007.85,229.577 1008.42,230.79 1008.99,230.972 1009.56,234.227 1010.12,234.316 1010.69,233.315 1011.26,231.32 1011.83,232.76 1012.4,231.911 1012.97,231.764 1013.53,230.785 1014.1,232.791 1014.67,232.773 1015.24,232.778 1015.81,232.63 1016.38,232.672 1016.94,233.573 1017.51,231.537 1018.08,233.547 1018.65,232.275 1019.22,233.254 1019.79,230.967 1020.35,232.98 1020.92,232.979 1021.49,233.72 1022.06,234.61 1022.63,234.495 1023.2,235.227 1023.76,236.106 1024.33,234.636 1024.9,232.08 1025.47,231.861 1026.04,232.49 1026.61,232.313 1027.17,232.1 1027.74,230.737 1028.31,233.894 1028.88,230.297 1029.45,229.419 1030.02,229.183 1030.58,229.214 1031.15,229.209 1031.72,230.417 1032.29,230.509 1032.86,232.547 1033.43,232.382 1033.99,231.12 1034.56,230.873 1035.13,230.611 1035.7,229.526 1036.27,230.412 1036.84,231.423 1037.4,231.26 1037.97,232.095 1038.54,231.847 1039.11,231.68 1039.68,229.406 1040.25,227.374 1040.81,229.447 1041.38,230.349 1041.95,229.328 1042.52,228.389 1043.09,229.518 1043.66,230.527 1044.22,232.48 1044.79,231.26 1045.36,231.149 1045.93,231.947 1046.5,231.638 1047.07,231.633 1047.63,231.343 1048.2,232.147 1048.77,232.117 1049.34,234.049 1049.91,233.446 1050.48,230.125 1051.05,229.971 1051.61,234.118 1052.18,234.707 1052.75,232.041 1053.32,230.874 1053.89,230.666 1054.46,231.624 1055.02,231.455 1055.59,229.444 1056.16,229.477 1056.73,229.404 1057.3,231.335 1057.87,231.055 1058.43,230.931 1059,229.61 1059.57,230.439 1060.14,229.603 1060.71,231.588 1061.28,229.045 1061.84,226.853 1062.41,226.136 1062.98,227.216 1063.55,227.193 1064.12,227.178 1064.69,228.314 1065.25,228.25 1065.82,229.35 1066.39,231.47 1066.96,231.238 1067.53,230.036 1068.1,230.2 1068.66,230.333 1069.23,230.231 1069.8,230.074 1070.37,228.953 1070.94,227.901 1071.51,226.969 1072.07,228.092 1072.64,227.149 1073.21,229.429 1073.78,230.519 1074.35,232.78 1074.92,230.533 1075.48,230.584 1076.05,229.45 1076.62,231.745 1077.19,231.575 1077.76,230.426 1078.33,230.246 1078.89,229.114 1079.46,232.274 1080.03,232.013 1080.6,231.525 1081.17,230.042 1081.74,229.985 1082.3,228.963 1082.87,230.096 1083.44,229.934 1084.01,230.954 1084.58,229.81 1085.15,226.476 1085.71,225.669 1086.28,225.998 1086.85,226.39 1087.42,226.768 1087.99,223.625 1088.56,225.023 1089.12,225.44 1089.69,224.761 1090.26,226.269 1090.83,224.251 1091.4,225.873 1091.97,227.143 1092.53,228.289 1093.1,228.349 1093.67,226.473 1094.24,226.945 1094.81,227.155 1095.38,225.31 1095.94,226.484 1096.51,226.731 1097.08,225.995 1097.65,226.385 1098.22,226.751 1098.79,229.031 1099.35,231.375 1099.92,229.187 1100.49,229.429 1101.06,228.671 1101.63,227.672 1102.2,231.06 1102.76,229.007 1103.33,229.29 1103.9,230.261 1104.47,230.525 1105.04,229.45 1105.61,230.478 1106.17,229.349 1106.74,229.411 1107.31,229.405 1107.88,230.609 1108.45,231.612 1109.02,230.441 1109.58,230.103 1110.15,229.137 1110.72,232.372 1111.29,233.142 1111.86,231.878 1112.43,229.578 1112.99,228.708 1113.56,229.698 1114.13,230.692 1114.7,232.803 1115.27,232.402 1115.84,230.014 1116.4,230.115 1116.97,230.192 1117.54,231.166 1118.11,233.201 1118.68,233.945 1119.25,235.885 1119.81,235.28 1120.38,235.936 1120.95,235.7 1121.52,235.118 1122.09,235.98 1122.66,235.365 1123.23,233.788 1123.79,232.565 1124.36,233.214 1124.93,232.012 1125.5,231.643 1126.07,232.278 1126.64,230.832 1127.2,231.754 1127.77,228.433 1128.34,226.201 1128.91,224.318 1129.48,225.758 1130.05,224.049 1130.61,222.147 1131.18,223.815 1131.75,223.173 1132.32,223.792 1132.89,226.297 1133.46,225.493 1134.02,224.817 1134.59,226.213 1135.16,226.457 1135.73,227.832 1136.3,228.087 1136.87,229.202 1137.43,229.06 1138,226.987 1138.57,228.325 1139.14,228.283 1139.71,226.406 1140.28,228.57 1140.84,228.719 1141.41,229.006 1141.98,230.313 1142.55,231.256 1143.12,231.252 1143.69,232.013 1144.25,229.847 1144.82,229.908 1145.39,227.853 1145.96,229.242 1146.53,229.164 1147.1,229.164 1147.66,228.323 1148.23,227.482 1148.8,229.683 1149.37,227.599 1149.94,226.778 1150.51,229.067 1151.07,232.263 1151.64,234.157 1152.21,233.157 1152.78,232.078 1153.35,232.791 1153.92,233.525 1154.48,233.186 1155.05,231.861 1155.62,232.071 1156.19,232.787 1156.76,233.417 1157.33,232.218 1157.89,233.907 1158.46,233.557 1159.03,234.417 1159.6,234.956 1160.17,233.472 1160.74,233.087 1161.3,234.056 1161.87,233.939 1162.44,231.66 1163.01,227.504 1163.58,227.74 1164.15,228.922 1164.71,229.907 1165.28,228.928 1165.85,229.993 1166.42,231.162 1166.99,230.052 1167.56,227.859 1168.12,226.86 1168.69,228.081 1169.26,226.004 1169.83,226.112 1170.4,226.52 1170.97,227.832 1171.53,227.772 1172.1,228.935 1172.67,230.077 1173.24,230.938 1173.81,230.681 1174.38,228.549 1174.94,229.674 1175.51,228.566 1176.08,227.448 1176.65,226.69 1177.22,225.719 1177.79,225.9 1178.35,229.522 1178.92,228.492 1179.49,227.587 1180.06,227.688 1180.63,230.865 1181.2,229.68 1181.76,229.692 1182.33,228.7 1182.9,231.873 1183.47,230.595 1184.04,229.254 1184.61,227.083 1185.17,228.095 1185.74,228.087 1186.31,226.099 1186.88,227.401 1187.45,226.701 1188.02,224.99 1188.58,224.348 1189.15,226.632 1189.72,225.934 1190.29,226.168 1190.86,226.628 1191.43,225.787 1192,225.945 1192.56,228.402 1193.13,228.502 1193.7,229.518 1194.27,227.57 1194.84,227.793 1195.41,226.801 1195.97,227.348 1196.54,226.53 1197.11,227.683 1197.68,227.919 1198.25,226.916 1198.82,227.289 1199.38,230.579 1199.95,230.646 1200.52,228.545 1201.09,228.774 1201.66,228.017 1202.23,228.153 1202.79,228.409 1203.36,229.528 1203.93,229.591 1204.5,229.676 1205.07,231.796 1205.64,231.605 1206.2,232.451 1206.77,231.124 1207.34,230.106 1207.91,230.137 1208.48,231.194 1209.05,233.318 1209.61,237.339 1210.18,234.651 1210.75,231.261 1211.32,230.093 1211.89,229.294 1212.46,228.655 1213.02,227.635 1213.59,230.027 1214.16,231.975 1214.73,232.084 1215.3,231.879 1215.87,232.754 1216.43,232.695 1217,232.549 1217.57,231.348 1218.14,230.276 1218.71,232.383 1219.28,230.917 1219.84,230.791 1220.41,230.911 1220.98,230.807 1221.55,231.694 1222.12,229.507 1222.69,228.501 1223.25,227.321 1223.82,228.466 1224.39,228.673 1224.96,229.713 1225.53,227.818 1226.1,228.014 1226.66,228.295 1227.23,228.46 1227.8,226.882 1228.37,226.852 1228.94,227.071 1229.51,226.138 1230.07,225.393 1230.64,223.615 1231.21,224.018 1231.78,225.391 1232.35,228.549 1232.92,230.772 1233.48,231.768 1234.05,231.825 1234.62,231.687 1235.19,233.535 1235.76,234.255 1236.33,233.872 1236.89,232.653 1237.46,233.502 1238.03,232.216 1238.6,232.103 1239.17,230.775 1239.74,229.716 1240.3,228.836 1240.87,229.961 1241.44,228.912 1242.01,232.036 1242.58,230.795 1243.15,228.489 1243.71,227.881 1244.28,227.177 1244.85,225.317 1245.42,225.669 1245.99,225.816 1246.56,224.117 1247.12,223.51 1247.69,225.048 1248.26,226.651 1248.83,229.896 1249.4,232.052 1249.97,233.167 1250.53,235.979 1251.1,233.45 1251.67,234.201 1252.24,235.052 1252.81,235.708 1253.38,235.022 1253.94,233.668 1254.51,232.485 1255.08,233.375 1255.65,232.032 1256.22,231.887 1256.79,232.931 1257.35,235.401 1257.92,235.996 1258.49,236.38 1259.06,236.773 1259.63,236.257 1260.2,235.945 1260.76,237.283 1261.33,237.931 1261.9,238.27 1262.47,235.326 1263.04,237.798 1263.61,236.869 1264.18,235.233 1264.74,235.828 1265.31,233.225 1265.88,231.842 1266.45,232.616 1267.02,231.365 1267.59,231.15 1268.15,230.968 1268.72,230.585 1269.29,228.311 1269.86,228.135 1270.43,228.002 1271,228.955 1271.56,227.921 1272.13,226.837 1272.7,224.803 1273.27,226.32 1273.84,227.556 1274.41,226.596 1274.97,227.62 1275.54,228.956 1276.11,231.107 1276.68,230.908 1277.25,229.734 1277.82,230.495 1278.38,229.258 1278.95,229.227 1279.52,227.137 1280.09,226.317 1280.66,226.286 1281.23,226.293 1281.79,227.455 1282.36,226.513 1282.93,226.725 1283.5,224.7 1284.07,225.082 1284.64,226.401 1285.2,225.296 1285.77,224.464 1286.34,226.102 1286.91,226.179 1287.48,225.255 1288.05,225.629 1288.61,226.9 1289.18,227.155 1289.75,224.269 1290.32,223.455 1290.89,221.677 1291.46,222.114 1292.02,224.537 1292.59,225.88 1293.16,225.016 1293.73,224.313 1294.3,223.531 1294.87,222.912 1295.43,224.385 1296,223.952 1296.57,223.394 1297.14,225.798 1297.71,227.14 1298.28,228.429 1298.84,228.601 1299.41,227.671 1299.98,227.5 1300.55,227.746 1301.12,227.692 1301.69,225.918 1302.25,226.184 1302.82,228.638 1303.39,227.636 1303.96,228.754 1304.53,227.824 1305.1,227.004 1305.66,228.384 1306.23,227.512 1306.8,227.762 1307.37,227.897 1307.94,229.159 1308.51,231.39 1309.07,233.484 1309.64,233.464 1310.21,234.464 1310.78,235.226 1311.35,234.026 1311.92,232.969 1312.48,231.738 1313.05,232.994 1313.62,232.835 1314.19,233.755 1314.76,235.496 1315.33,235.014 1315.89,232.756 1316.46,231.841 1317.03,232.67 1317.6,233.57 1318.17,234.404 1318.74,234.248 1319.3,233.108 1319.87,231.943 1320.44,231.764 1321.01,233.689 1321.58,234.274 1322.15,231.934 1322.71,231.696 1323.28,230.416 1323.85,228.58 1324.42,227.481 1324.99,227.412 1325.56,227.295 1326.12,227.463 1326.69,227.731 1327.26,229.015 1327.83,228.23 1328.4,229.387 1328.97,231.403 1329.53,230.269 1330.1,231.213 1330.67,229.998 1331.24,230.054 1331.81,230.044 1332.38,231.955 1332.94,232.747 1333.51,233.664 1334.08,231.142 1334.65,229.873 1335.22,228.818 1335.79,229.105 1336.36,229.99 1336.92,229.885 1337.49,229.828 1338.06,229.467 1338.63,229.486 1339.2,229.753 1339.77,226.498 1340.33,226.743 1340.9,229 1341.47,227.812 1342.04,227.96 1342.61,225.964 1343.18,226.267 1343.74,225.535 1344.31,224.951 1344.88,225.385 1345.45,224.686 1346.02,224.066 1346.59,226.539 1347.15,227.689 1347.72,228.87 1348.29,229.111 1348.86,230.207 1349.43,229.16 1350,229.257 1350.56,228.224 1351.13,228.376 1351.7,229.654 1352.27,228.811 1352.84,230.084 1353.41,226.805 1353.97,227.042 1354.54,230.422 1355.11,229.282 1355.68,230.626 1356.25,230.813 1356.82,231.6 1357.38,231.461 1357.95,233.456 1358.52,233.216 1359.09,234.085 1359.66,235.893 1360.23,233.396 1360.79,234.322 1361.36,235.072 1361.93,233.754 1362.5,233.492 1363.07,230 1363.64,230.737 1364.2,232.767 1364.77,232.447 1365.34,233.106 1365.91,232.61 1366.48,232.389 1367.05,231.215 1367.61,231.238 1368.18,232.289 1368.75,231.966 1369.32,233.7 1369.89,234.215 1370.46,234.88 1371.02,234.607 1371.59,235.145 1372.16,235.883 1372.73,235.194 1373.3,234.794 1373.87,235.567 1374.43,233.242 1375,233.75 1375.57,233.127 1376.14,232.697 1376.71,232.126 1377.28,230.894 1377.84,231.631 1378.41,230.39 1378.98,228.951 1379.55,227.881 1380.12,226.847 1380.69,225.792 1381.25,223.933 1381.82,224.389 1382.39,225.722 1382.96,226.239 1383.53,226.647 1384.1,226.793 1384.66,226.861 1385.23,227.159 1385.8,229.295 1386.37,227.101 1386.94,227.224 1387.51,228.265 1388.07,227.434 1388.64,228.489 1389.21,227.515 1389.78,226.577 1390.35,224.807 1390.92,226.072 1391.48,226.219 1392.05,228.411 1392.62,230.61 1393.19,230.487 1393.76,231.503 1394.33,228.362 1394.89,227.472 1395.46,227.749 1396.03,226.736 1396.6,226.843 1397.17,228.924 1397.74,231.191 1398.3,230.957 1398.87,232.738 1399.44,231.224 1400.01,232.013 1400.58,231.886 1401.15,232.865 1401.71,233.733 1402.28,235.244 1402.85,233.426 1403.42,233.162 1403.99,231.791 1404.56,231.619 1405.13,232.363 1405.69,232.019 1406.26,230.603 1406.83,230.485 1407.4,232.592 1407.97,232.477 1408.54,231.049 1409.1,228.774 1409.67,226.784 1410.24,225.808 1410.81,225.054 1411.38,225.199 1411.95,224.359 1412.51,225.711 1413.08,225.921 1413.65,224.229 1414.22,222.487 1414.79,220.821 1415.36,221.281 1415.92,223.904 1416.49,225.294 1417.06,225.706 1417.63,224.016 1418.2,224.256 1418.77,225.584 1419.33,226.899 1419.9,226.098 1420.47,226.47 1421.04,226.643 1421.61,229.006 1422.18,229.003 1422.74,225.072 1423.31,224.383 1423.88,225.709 1424.45,227.823 1425.02,229.07 1425.59,226.139 1426.15,227.611 1426.72,226.896 1427.29,228.307 1427.86,228.523 1428.43,228.461 1429,228.436 1429.56,227.547 1430.13,227.899 1430.7,228.073 1431.27,227.517 1431.84,228.72 1432.41,229.968 1432.97,228.815 1433.54,228.939 1434.11,228.004 1434.68,228.462 1435.25,228.81 1435.82,224.769 1436.38,223.953 1436.95,224.487 1437.52,224.72 1438.09,228.131 1438.66,226.117 1439.23,226.403 1439.79,226.673 1440.36,229.96 1440.93,232.146 1441.5,233.131 1442.07,232.79 1442.64,230.648 1443.2,228.726 1443.77,227.888 1444.34,230.286 1444.91,229.43 1445.48,230.613 1446.05,231.776 1446.61,231.569 1447.18,231.628 1447.75,232.358 1448.32,230.921 1448.89,233.948 1449.46,233.746 1450.02,233.624 1450.59,233.201 1451.16,232.829 1451.73,233.742 1452.3,233.124 1452.87,231.847 1453.43,231.729 1454,231.337 1454.57,233.289 1455.14,230.163 1455.71,229.079 1456.28,229.209 1456.84,230.252 1457.41,228.302 1457.98,229.441 1458.55,228.597 1459.12,230.814 1459.69,230.648 1460.25,230.689 1460.82,229.805 1461.39,230.014 1461.96,229.916 1462.53,231.055 1463.1,232.103 1463.66,230.956 1464.23,232.951 1464.8,231.699 1465.37,232.539 1465.94,231.46 1466.51,231.408 1467.07,232.457 1467.64,233.604 1468.21,234.252 1468.78,233.117 1469.35,228.756 1469.92,228.981 1470.48,228.92 1471.05,231.847 1471.62,231.866 1472.19,230.837 1472.76,230.993 1473.33,229.746 1473.89,229.834 1474.46,230.018 1475.03,229.095 1475.6,226.976 1476.17,226.987 1476.74,231.325 1477.31,232.366 1477.87,234.193 1478.44,238.048 1479.01,236.295 1479.58,236.051 1480.15,235.734 1480.72,236.392 1481.28,235.715 1481.85,235.227 1482.42,233.842 1482.99,233.629 1483.56,232.012 1484.13,231.498 1484.69,228.025 1485.26,226.966 1485.83,227.244 1486.4,227.338 1486.97,227.294 1487.54,226.165 1488.1,227.354 1488.67,229.702 1489.24,232.747 1489.81,232.536 1490.38,233.272 1490.95,230.78 1491.51,230.53 1492.08,230.462 1492.65,228.345 1493.22,230.352 1493.79,230.335 1494.36,229.274 1494.92,229.194 1495.49,228.177 1496.06,229.244 1496.63,228.975 1497.2,228.696 1497.77,227.555 1498.33,229.551 1498.9,229.624 1499.47,227.494 1500.04,227.685 1500.61,226.669 1501.18,227.94 1501.74,227.732 1502.31,228.643 1502.88,228.598 1503.45,229.663 1504.02,228.538 1504.59,227.379 1505.15,227.473 1505.72,228.475 1506.29,227.375 1506.86,224.287 1507.43,225.593 1508,224.703 1508.56,222.035 1509.13,225.313 1509.7,225.668 1510.27,227.067 1510.84,226.369 1511.41,226.412 1511.97,226.596 1512.54,228.976 1513.11,231.149 1513.68,232.116 1514.25,230.943 1514.82,229.863 1515.38,228.82 1515.95,229.762 1516.52,228.616 1517.09,227.609 1517.66,228.047 1518.23,227.37 1518.79,227.493 1519.36,227.958 1519.93,227.057 1520.5,230.389 1521.07,230.165 1521.64,231.062 1522.2,230.094 1522.77,230.221 1523.34,230.32 1523.91,232.325 1524.48,230.929 1525.05,229.937 1525.61,228.889 1526.18,229.091 1526.75,228.138 1527.32,229.307 1527.89,230.395 1528.46,228.272 1529.02,224.264 1529.59,223.691 1530.16,224.089 1530.73,223.27 1531.3,224.762 1531.87,223.336 1532.43,223.073 1533,221.404 1533.57,223.984 1534.14,225.407 1534.71,228.054 1535.28,228.175 1535.84,230.46 1536.41,231.435 1536.98,232.348 1537.55,234.513 1538.12,231.237 1538.69,231.08 1539.25,229.899 1539.82,230.001 1540.39,228.815 1540.96,229.86 1541.53,229.892 1542.1,229.935 1542.66,231.003 1543.23,229.999 1543.8,231.039 1544.37,230.964 1544.94,230.808 1545.51,230.511 1546.08,229.322 1546.64,231.623 1547.21,230.343 1547.78,231.128 1548.35,231.064 1548.92,229.951 1549.49,229.048 1550.05,231.303 1550.62,231.441 1551.19,233.586 1551.76,230.089 1552.33,231.024 1552.9,231.255 1553.46,232.32 1554.03,230.166 1554.6,231.2 1555.17,233.203 1555.74,233.847 1556.31,235.606 1556.87,237.106 1557.44,235.414 1558.01,236.243 1558.58,234.77 1559.15,234.36 1559.72,235.151 1560.28,236.451 1560.85,235.988 1561.42,235.393 1561.99,234.677 1562.56,234.219 1563.13,233.628 1563.69,233.332 1564.26,229.734 1564.83,229.577 1565.4,227.484 1565.97,227.378 1566.54,227.354 1567.1,225.474 1567.67,224.51 1568.24,226.824 1568.81,227.163 1569.38,228.418 1569.95,224.391 1570.51,224.624 1571.08,225.89 1571.65,226.15 1572.22,226.431 1572.79,227.491 1573.36,227.801 1573.92,226.927 1574.49,227.065 1575.06,226.235 1575.63,224.39 1576.2,226.008 1576.77,226.294 1577.33,226.539 1577.9,226.497 1578.47,226.712 1579.04,228.163 1579.61,228.385 1580.18,228.305 1580.74,228.131 1581.31,227.385 1581.88,228.653 1582.45,229.825 1583.02,230.734 1583.59,231.689 1584.15,231.386 1584.72,229.979 1585.29,228.88 1585.86,226.864 1586.43,227.085 1587,228.353 1587.56,229.373 1588.13,232.617 1588.7,233.561 1589.27,233.208 1589.84,234.242 1590.41,232.927 1590.97,229.559 1591.54,229.507 1592.11,229.36 1592.68,225.338 1593.25,226.632 1593.82,227.967 1594.38,226.224 1594.95,227.372 1595.52,227.417 1596.09,227.525 1596.66,227.517 1597.23,228.793 1597.79,229.984 1598.36,231.018 1598.93,231.966 1599.5,232.956 1600.07,232.705 1600.64,231.442 1601.2,233.334 1601.77,233.179 1602.34,233.014 1602.91,232.793 1603.48,232.566 1604.05,233.342 1604.61,234.259 1605.18,233.833 1605.75,233.487 1606.32,234.115 1606.89,235.683 1607.46,234.307 1608.02,231.845 1608.59,230.581 1609.16,229.654 1609.73,229.779 1610.3,229.703 1610.87,227.504 1611.43,228.841 1612,228.707 1612.57,227.628 1613.14,230.565 1613.71,229.423 1614.28,229.354 1614.84,233.356 1615.41,232.912 1615.98,233.812 1616.55,232.4 1617.12,231.29 1617.69,233.047 1618.26,232.764 1618.82,231.645 1619.39,232.439 1619.96,232.158 1620.53,233.215 1621.1,232.878 1621.67,232.535 1622.23,229.439 1622.8,229.401 1623.37,228.256 1623.94,226.184 1624.51,226.551 1625.08,227.601 1625.64,227.692 1626.21,227.878 1626.78,226.975 1627.35,229.187 1627.92,228.133 1628.49,228.17 1629.05,228.117 1629.62,227.203 1630.19,227.411 1630.76,225.403 1631.33,224.684 1631.9,223.84 1632.46,222.326 1633.03,222.809 1633.6,225.333 1634.17,227.572 1634.74,227.915 1635.31,228.293 1635.87,228.391 1636.44,227.427 1637.01,227.565 1637.58,227.926 1638.15,228.947 1638.72,230.243 1639.28,228.043 1639.85,228.921 1640.42,229.961 1640.99,229.705 1641.56,228.751 1642.13,230.873 1642.69,230.753 1643.26,230.632 1643.83,230.645 1644.4,229.57 1644.97,229.507 1645.54,231.768 1646.1,233.579 1646.67,234.228 1647.24,233.879 1647.81,235.487 1648.38,235.074 1648.95,234.442 1649.51,233.962 1650.08,234.679 1650.65,234.285 1651.22,233.787 1651.79,234.367 1652.36,232.923 1652.92,232.46 1653.49,231.976 1654.06,231.783 1654.63,231.54 1655.2,231.451 1655.77,230.189 1656.33,229.148 1656.9,228.069 1657.47,226.939 1658.04,228.056 1658.61,228.945 1659.18,228.913 1659.74,227.763 1660.31,228.696 1660.88,228.483 1661.45,229.445 1662.02,228.154 1662.59,228.185 1663.15,228.183 1663.72,230.369 1664.29,230.122 1664.86,229.999 1665.43,232.008 1666,233.757 1666.56,235.503 1667.13,234.821 1667.7,236.651 1668.27,234.126 1668.84,234.918 1669.41,234.372 1669.97,232.762 1670.54,230.079 1671.11,229.006 1671.68,228.015 1672.25,226.206 1672.82,226.388 1673.38,224.703 1673.95,225.103 1674.52,225.448 1675.09,224.805 1675.66,225.94 1676.23,225.099 1676.79,225.053 1677.36,226.372 1677.93,226.236 1678.5,224.637 1679.07,224.786 1679.64,229.057 1680.2,229.181 1680.77,228.118 1681.34,229.154 1681.91,229.959 1682.48,228.858 1683.05,229.899 1683.61,230.848 1684.18,230.712 1684.75,229.566 1685.32,230.683 1685.89,231.593 1686.46,231.3 1687.02,229.175 1687.59,230.138 1688.16,230.12 1688.73,229.866 1689.3,231.7 1689.87,230.478 1690.44,229.084 1691,230.215 1691.57,229.092 1692.14,229.013 1692.71,228.022 1693.28,228.195 1693.85,231.384 1694.41,233.353 1694.98,233.987 1695.55,231.449 1696.12,229.144 1696.69,227.222 1697.26,230.194 1697.82,228.828 1698.39,226.76 1698.96,225.864 1699.53,225.968 1700.1,225.176 1700.67,225.346 1701.23,228.563 1701.8,229.806 1702.37,229.849 1702.94,229.82 1703.51,227.769 1704.08,228.692 1704.64,227.68 1705.21,228.638 1705.78,225.577 1706.35,224.603 1706.92,224.76 1707.49,222.865 1708.05,224.306 1708.62,222.434 1709.19,224.109 1709.76,223.454 1710.33,222.98 1710.9,222.229 1711.46,224.839 1712.03,226.272 1712.6,226.482 1713.17,225.741 1713.74,226.337 1714.31,226.794 1714.87,227.12 1715.44,229.436 1716.01,228.602 1716.58,228.774 1717.15,227.876 1717.72,228.159 1718.28,226.238 1718.85,225.434 1719.42,226.647 1719.99,227.012 1720.56,228.465 1721.13,228.654 1721.69,229.889 1722.26,229.874 1722.83,229.964 1723.4,229.068 1723.97,231.33 1724.54,231.445 1725.1,230.507 1725.67,229.532 1726.24,228.699 1726.81,229.016 1727.38,228.193 1727.95,230.319 1728.51,231.283 1729.08,229.187 1729.65,228.309 1730.22,227.578 1730.79,227.649 1731.36,226.664 1731.92,226.926 1732.49,228.101 1733.06,229.36 1733.63,227.537 1734.2,229.737 1734.77,230.804 1735.33,231.609 1735.9,230.754 1736.47,231.004 1737.04,228.826 1737.61,230.947 1738.18,228.064 1738.74,227.837 1739.31,229.066 1739.88,228.07 1740.45,226.185 1741.02,226.457 1741.59,224.673 1742.15,227.139 1742.72,229.586 1743.29,228.522 1743.86,228.66 1744.43,228.866 1745,230.891 1745.56,231.808 1746.13,231.632 1746.7,232.567 1747.27,234.574 1747.84,233.173 1748.41,232.852 1748.97,229.864 1749.54,229.964 1750.11,229.115 1750.68,229.359 1751.25,230.529 1751.82,230.537 1752.38,230.517 1752.95,231.626 1753.52,230.721 1754.09,229.787 1754.66,228.972 1755.23,229.09 1755.79,229.138 1756.36,228.213 1756.93,228.333 1757.5,228.657 1758.07,229.846 1758.64,229.716 1759.21,228.909 1759.77,229.066 1760.34,230.242 1760.91,229.09 1761.48,228.048 1762.05,227.1 1762.62,226.295 1763.18,226.889 1763.75,226.922 1764.32,228.327 1764.89,228.515 1765.46,228.586 1766.03,228.821 1766.59,227.828 1767.16,227.253 1767.73,227.555 1768.3,225.845 1768.87,227.137 1769.44,226.35 1770,228.895 1770.57,230.206 1771.14,230.382 1771.71,233.489 1772.28,232.288 1772.85,231.16 1773.41,232.112 1773.98,233.145 1774.55,232.053 1775.12,233.046 1775.69,234.158 1776.26,232.619 1776.82,232.526 1777.39,233.491 1777.96,233.341 1778.53,231.143 1779.1,233.178 1779.67,232.967 1780.23,231.832 1780.8,231.865 1781.37,232.652 1781.94,233.556 1782.51,231.193 1783.08,229.953 1783.64,231.082 1784.21,231.301 1784.78,230.292 1785.35,229.099 1785.92,230.362 1786.49,231.337 1787.05,231.489 1787.62,234.454 1788.19,234.062 1788.76,234.96 1789.33,234.719 1789.9,234.259 1790.46,232.868 1791.03,232.436 1791.6,232.371 1792.17,233.422 1792.74,233.138 1793.31,231.942 1793.87,232.815 1794.44,232.728 1795.01,232.367 1795.58,232.183 1796.15,232.888 1796.72,231.521 1797.28,231.197 1797.85,228.992 1798.42,230.168 1798.99,230.22 1799.56,230.098 1800.13,231.17 1800.69,230.002 1801.26,229.966 1801.83,230.801 1802.4,230.566 1802.97,231.769 1803.54,231.515 1804.1,230.369 1804.67,229.446 1805.24,230.378 1805.81,226.112 1806.38,228.271 1806.95,228.038 1807.51,229.297 1808.08,230.046 1808.65,230.994 1809.22,231.816 1809.79,231.389 1810.36,232.226 1810.92,229.82 1811.49,227.69 1812.06,228.815 1812.63,228.783 1813.2,228.673 1813.77,228.365 1814.33,231.6 1814.9,230.488 1815.47,231.34 1816.04,231.046 1816.61,229.753 1817.18,229.641 1817.74,226.477 1818.31,225.498 1818.88,225.562 1819.45,223.665 1820.02,226.165 1820.59,225.593 1821.15,224.99 1821.72,225.373 1822.29,225.813 1822.86,224.778 1823.43,228.173 1824,226.135 1824.56,227.369 1825.13,229.783 1825.7,230.871 1826.27,230.861 1826.84,230.925 1827.41,229.603 1827.97,228.578 1828.54,228.823 1829.11,228.866 1829.68,227.78 1830.25,228.742 1830.82,227.569 1831.39,226.923 1831.95,227.172 1832.52,228.473 1833.09,229.73 1833.66,229.679 1834.23,230.849 1834.8,229.628 1835.36,229.437 1835.93,228.532 1836.5,228.851 1837.07,227.934 1837.64,228.294 1838.21,228.377 1838.77,227.417 1839.34,227.728 1839.91,229.979 1840.48,229.854 1841.05,229.954 1841.62,226.791 1842.18,225.676 1842.75,227.059 1843.32,228.17 1843.89,227.166 1844.46,225.067 1845.03,225.203 1845.59,228.62 1846.16,227.713 1846.73,229.865 1847.3,230.829 1847.87,229.81 1848.44,229.787 1849,228.923 1849.57,231.032 1850.14,230.759 1850.71,230.549 1851.28,230.604 1851.85,232.715 1852.41,230.531 1852.98,231.523 1853.55,231.383 1854.12,232.162 1854.69,232.975 1855.26,234.9 1855.82,235.495 1856.39,234.102 1856.96,233.676 1857.53,234.579 1858.1,231.055 1858.67,231.133 1859.23,228.749 1859.8,227.814 1860.37,227.984 1860.94,230.268 1861.51,230.313 1862.08,232.441 1862.64,231.164 1863.21,231.112 1863.78,230.923 1864.35,229.955 1864.92,229.898 1865.49,229.69 1866.05,229.83 1866.62,225.776 1867.19,226.012 1867.76,228.414 1868.33,228.737 1868.9,226.762 1869.46,229.285 1870.03,227.034 1870.6,225.226 1871.17,227.822 1871.74,228.215 1872.31,229.339 1872.87,229.32 1873.44,231.491 1874.01,232.258 1874.58,232.114 1875.15,232.136 1875.72,234.09 1876.28,235.623 1876.85,235.018 1877.42,232.668 1877.99,232.2 1878.56,231.01 1879.13,229.057 1879.69,231.115 1880.26,231.091 1880.83,232.147 1881.4,232.012 1881.97,232.862 1882.54,232.484 1883.1,230.371 1883.67,230.32 1884.24,231.307 1884.81,230.203 1885.38,231.326 1885.95,232.159 1886.51,230.718 1887.08,230.528 1887.65,230.303 1888.22,228.972 1888.79,227.959 1889.36,226.693 1889.92,227.017 1890.49,226.049 1891.06,225.981 1891.63,226.353 1892.2,226.48 1892.77,227.771 1893.33,230.053 1893.9,231.991 1894.47,230.799 1895.04,231.477 1895.61,232.187 1896.18,232.02 1896.74,231.911 1897.31,231.545 1897.88,230.435 1898.45,230.392 1899.02,229.465 1899.59,228.356 1900.16,229.633 1900.72,231.611 1901.29,232.581 1901.86,232.308 1902.43,229.959 1903,231.855 1903.57,229.826 1904.13,229.723 1904.7,228.637 1905.27,227.326 1905.84,230.612 1906.41,229.43 1906.98,232.408 1907.54,230.086 1908.11,228.895 1908.68,226.795 1909.25,225.816 1909.82,224.067 1910.39,222.46 1910.95,224.09 1911.52,225.456 1912.09,225.764 1912.66,224.999 1913.23,223.989 1913.8,224.327 1914.36,224.81 1914.93,221.908 1915.5,220.444 1916.07,222.115 1916.64,223.772 1917.21,225.103 1917.77,226.541 1918.34,226.673 1918.91,224.767 1919.48,223.031 1920.05,224.752 1920.62,225.072 1921.18,226.57 1921.75,227.874 1922.32,231.157 1922.89,231.141 1923.46,230.95 1924.03,231.009 1924.59,231.941 1925.16,232.899 1925.73,233.794 1926.3,234.356 1926.87,233.894 1927.44,231.63 1928,232.414 1928.57,231.431 1929.14,230.428 1929.71,231.398 1930.28,232.269 1930.85,232.071 1931.41,232.845 1931.98,233.728 1932.55,232.433 1933.12,232.192 1933.69,229.996 1934.26,232.013 1934.82,230.727 1935.39,230.453 1935.96,228.483 1936.53,229.439 1937.1,230.456 1937.67,229.436 1938.23,230.179 1938.8,230.336 1939.37,230.332 1939.94,232.224 1940.51,233.021 1941.08,232.826 1941.64,230.389 1942.21,231.382 1942.78,232.337 1943.35,231.062 1943.92,229.887 1944.49,228.883 1945.05,227.915 1945.62,228.17 1946.19,227.455 1946.76,228.636 1947.33,229.853 1947.9,230.885 1948.46,230.806 1949.03,231.755 1949.6,230.546 1950.17,229.551 1950.74,229.617 1951.31,227.85 1951.87,229.011 1952.44,228.039 1953.01,227.206 1953.58,227.269 1954.15,226.242 1954.72,227.612 1955.28,227.786 1955.85,228.029 1956.42,228.185 1956.99,229.163 1957.56,228.031 1958.13,227.188 1958.69,230.453 1959.26,231.234 1959.83,229.121 1960.4,228.187 1960.97,228.52 1961.54,227.576 1962.1,228.725 1962.67,229.909 1963.24,231.821 1963.81,232.479 1964.38,232.524 1964.95,232.362 1965.51,231.234 1966.08,230.007 1966.65,228.876 1967.22,228.694 1967.79,229.669 1968.36,231.656 1968.92,232.49 1969.49,231.224 1970.06,232.116 1970.63,234.043 1971.2,232.797 1971.77,232.598 1972.34,232.231 1972.9,234.002 1973.47,233.659 1974.04,234.312 1974.61,234.983 1975.18,233.691 1975.75,233.494 1976.31,235.236 1976.88,232.897 1977.45,232.65 1978.02,232.272 1978.59,232.206 1979.16,231.601 1979.72,233.443 1980.29,232.102 1980.86,231.926 1981.43,229.744 1982,229.507 1982.57,230.463 1983.13,231.45 1983.7,230.25 1984.27,227.959 1984.84,228.195 1985.41,228.2 1985.98,228.097 1986.54,229.096 1987.11,229.126 1987.68,227.199 1988.25,228.575 1988.82,228.477 1989.39,227.788 1989.95,227.901 1990.52,231.015 1991.09,229.675 1991.66,227.662 1992.23,228.806 1992.8,227.768 1993.36,229.814 1993.93,230.928 1994.5,228.644 1995.07,229.755 1995.64,228.66 1996.21,229.666 1996.77,231.723 1997.34,231.598 1997.91,228.253 1998.48,227.308 1999.05,226.519 1999.62,226.659 2000.18,228.685 2000.75,229.971 2001.32,230 2001.89,231.012 2002.46,230.772 2003.03,229.487 2003.59,229.312 2004.16,228.016 2004.73,224.146 2005.3,225.516 2005.87,226.043 2006.44,225.149 2007,224.307 2007.57,224.757 2008.14,226.29 2008.71,226.321 2009.28,225.75 2009.85,226.917 2010.41,227.098 2010.98,223.774 2011.55,225.158 2012.12,226.334 2012.69,227.67 2013.26,227.607 2013.82,227.102 2014.39,227.243 2014.96,226.518 2015.53,228.809 2016.1,226.564 2016.67,227.684 2017.23,227.766 2017.8,229.054 2018.37,229.03 2018.94,227.069 2019.51,230.384 2020.08,232.227 2020.64,232.002 2021.21,232.943 2021.78,232.965 2022.35,232.834 2022.92,232.767 2023.49,231.637 2024.05,231.584 2024.62,233.479 2025.19,231.277 2025.76,233.19 2026.33,230.963 2026.9,231.916 2027.46,231.715 2028.03,232.643 2028.6,231.182 2029.17,231.15 2029.74,231.319 2030.31,231.364 2030.87,233.249 2031.44,231.692 2032.01,229.251 2032.58,229.023 2033.15,227.062 2033.72,230.326 2034.28,230.128 2034.85,230.103 2035.42,229.956 2035.99,230.909 2036.56,230.788 2037.13,231.636 2037.69,230.42 2038.26,230.291 2038.83,226.28 2039.4,225.711 2039.97,225.014 2040.54,225.258 2041.11,224.612 2041.67,225.06 2042.24,226.285 2042.81,224.571 2043.38,226.056 2043.95,224.285 2044.52,225.614 2045.08,222.715 2045.65,224.131 2046.22,222.447 2046.79,224.904 2047.36,221.16 2047.93,221.909 2048.49,222.546 2049.06,223.067 2049.63,225.461 2050.2,225.887 2050.77,225.096 2051.34,224.426 2051.9,224.835 2052.47,224.13 2053.04,225.846 2053.61,226.242 2054.18,226.663 2054.75,226.925 2055.31,227.454 2055.88,227.497 2056.45,228.957 2057.02,229.087 2057.59,230.274 2058.16,230.555 2058.72,230.418 2059.29,233.582 2059.86,233.411 2060.43,233.154 2061,232.892 2061.57,232.791 2062.13,232.692 2062.7,232.582 2063.27,233.451 2063.84,232.4 2064.41,234.242 2064.98,232.874 2065.54,233.63 2066.11,233.473 2066.68,232.144 2067.25,232.121 2067.82,231.026 2068.39,231.291 2068.95,227.937 2069.52,230.333 2070.09,231.252 2070.66,229.292 2071.23,227.625 2071.8,227.743 2072.36,228.897 2072.93,229.998 2073.5,232.264 2074.07,233.268 2074.64,232.789 2075.21,231.558 2075.77,228.376 2076.34,228.248 2076.91,226.505 2077.48,228.01 2078.05,229.393 2078.62,232.493 2079.18,230.153 2079.75,229.093 2080.32,231.157 2080.89,232.215 2081.46,233.238 2082.03,237.055 2082.59,235.549 2083.16,236.443 2083.73,236.021 2084.3,235.311 2084.87,236.185 2085.44,234.734 2086,235.144 2086.57,233.68 2087.14,232.531 2087.71,230.327 2088.28,229.527 2088.85,229.525 2089.41,232.661 2089.98,233.433 2090.55,234.964 2091.12,233.342 2091.69,232.847 2092.26,232.468 2092.82,232.226 2093.39,232.214 2093.96,232.888 2094.53,233.821 2095.1,233.497 2095.67,232.17 2096.23,234.152 2096.8,231.723 2097.37,234.424 2097.94,232.928 2098.51,231.785 2099.08,231.519 2099.64,231.158 2100.21,233.767 2100.78,232.211 2101.35,231.877 2101.92,231.539 2102.49,231.359 2103.05,232.171 2103.62,229.656 2104.19,228.424 2104.76,227.166 2105.33,228.23 2105.9,228.278 2106.46,226.089 2107.03,226.342 2107.6,227.323 2108.17,227.769 2108.74,226.943 2109.31,224.883 2109.87,226.115 2110.44,226.386 2111.01,226.49 2111.58,224.394 2112.15,225.739 2112.72,226.181 2113.29,225.32 2113.85,226.679 2114.42,226.89 2114.99,225.855 2115.56,225.148 2116.13,226.514 2116.7,226.679 2117.26,223.713 2117.83,224.14 2118.4,225.549 2118.97,223.87 2119.54,223.395 2120.11,222.851 2120.67,223.456 2121.24,223.86 2121.81,225.495 2122.38,227.944 2122.95,226.989 2123.52,228.065 2124.08,231.382 2124.65,232.565 2125.22,230.221 2125.79,230.254 2126.36,231.063 2126.93,231.076 2127.49,229.819 2128.06,229.987 2128.63,228.802 2129.2,229.986 2129.77,229.009 2130.34,229.289 2130.9,228.253 2131.47,229.49 2132.04,228.58 2132.61,227.872 2133.18,229.006 2133.75,230.109 2134.31,231.12 2134.88,230.998 2135.45,232.284 2136.02,232.27 2136.59,233.318 2137.16,234.102 2137.72,233.811 2138.29,233.489 2138.86,231.085 2139.43,230.095 2140,231.031 2140.57,231.86 2141.13,232.518 2141.7,232.506 2142.27,231.115 2142.84,233.063 2143.41,232.778 2143.98,231.552 2144.54,229.418 2145.11,228.505 2145.68,231.559 2146.25,230.456 2146.82,233.513 2147.39,234.389 2147.95,233.945 2148.52,232.467 2149.09,235.423 2149.66,236.053 2150.23,235.586 2150.8,234.043 2151.36,233.585 2151.93,233.258 2152.5,232.957 2153.07,231.668 2153.64,228.499 2154.21,223.399 2154.77,222.785 2155.34,223.3 2155.91,224.745 2156.48,224.98 2157.05,224.228 2157.62,224.611 2158.18,223.876 2158.75,224.231 2159.32,224.454 2159.89,222.762 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.019\n  with uncertainty of ± 0.0017480069745215582\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01463 ± (0.00266896, 0.00265739) (MC)\n  95% confidence interval: [-4.01989, -4.00956]) (MC)\n  linear error propagation: -4.01463 ± 0.00268128\n  |δ_y| = |0.0012341| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014632327165835, val_l = 0.0052572244458533035, val_u = 0.005075129903299391)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.52 2211.02,1150.52 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1006.47 2211.02,1006.47 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,862.413 2211.02,862.413 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,718.36 2211.02,718.36 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,574.307 2211.02,574.307 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,430.254 2211.02,430.254 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,286.201 2211.02,286.201 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.52 365.751,1150.52 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1006.47 365.751,1006.47 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,862.413 365.751,862.413 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,718.36 365.751,718.36 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,574.307 365.751,574.307 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,430.254 365.751,430.254 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,286.201 365.751,286.201 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M298.909 1136.32 Q295.298 1136.32 293.469 1139.88 Q291.664 1143.42 291.664 1150.55 Q291.664 1157.66 293.469 1161.22 Q295.298 1164.77 298.909 1164.77 Q302.543 1164.77 304.349 1161.22 Q306.177 1157.66 306.177 1150.55 Q306.177 1143.42 304.349 1139.88 Q302.543 1136.32 298.909 1136.32 M298.909 1132.61 Q304.719 1132.61 307.775 1137.22 Q310.853 1141.8 310.853 1150.55 Q310.853 1159.28 307.775 1163.89 Q304.719 1168.47 298.909 1168.47 Q293.099 1168.47 290.02 1163.89 Q286.964 1159.28 286.964 1150.55 Q286.964 1141.8 290.02 1137.22 Q293.099 1132.61 298.909 1132.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M259.557 1019.81 L267.196 1019.81 L267.196 993.445 L258.886 995.112 L258.886 990.852 L267.15 989.186 L271.826 989.186 L271.826 1019.81 L279.465 1019.81 L279.465 1023.75 L259.557 1023.75 L259.557 1019.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 992.265 Q295.298 992.265 293.469 995.829 Q291.664 999.371 291.664 1006.5 Q291.664 1013.61 293.469 1017.17 Q295.298 1020.71 298.909 1020.71 Q302.543 1020.71 304.349 1017.17 Q306.177 1013.61 306.177 1006.5 Q306.177 999.371 304.349 995.829 Q302.543 992.265 298.909 992.265 M298.909 988.561 Q304.719 988.561 307.775 993.167 Q310.853 997.751 310.853 1006.5 Q310.853 1015.23 307.775 1019.83 Q304.719 1024.42 298.909 1024.42 Q293.099 1024.42 290.02 1019.83 Q286.964 1015.23 286.964 1006.5 Q286.964 997.751 290.02 993.167 Q293.099 988.561 298.909 988.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M262.775 875.758 L279.094 875.758 L279.094 879.693 L257.15 879.693 L257.15 875.758 Q259.812 873.003 264.395 868.373 Q269.002 863.721 270.182 862.378 Q272.428 859.855 273.307 858.119 Q274.21 856.36 274.21 854.67 Q274.21 851.915 272.266 850.179 Q270.344 848.443 267.242 848.443 Q265.043 848.443 262.59 849.207 Q260.159 849.971 257.381 851.522 L257.381 846.799 Q260.205 845.665 262.659 845.087 Q265.113 844.508 267.15 844.508 Q272.52 844.508 275.715 847.193 Q278.909 849.878 278.909 854.369 Q278.909 856.498 278.099 858.42 Q277.312 860.318 275.205 862.91 Q274.627 863.582 271.525 866.799 Q268.423 869.994 262.775 875.758 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 848.211 Q295.298 848.211 293.469 851.776 Q291.664 855.318 291.664 862.448 Q291.664 869.554 293.469 873.119 Q295.298 876.66 298.909 876.66 Q302.543 876.66 304.349 873.119 Q306.177 869.554 306.177 862.448 Q306.177 855.318 304.349 851.776 Q302.543 848.211 298.909 848.211 M298.909 844.508 Q304.719 844.508 307.775 849.114 Q310.853 853.698 310.853 862.448 Q310.853 871.174 307.775 875.781 Q304.719 880.364 298.909 880.364 Q293.099 880.364 290.02 875.781 Q286.964 871.174 286.964 862.448 Q286.964 853.698 290.02 849.114 Q293.099 844.508 298.909 844.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M272.914 717.006 Q276.27 717.723 278.145 719.992 Q280.043 722.26 280.043 725.594 Q280.043 730.709 276.525 733.51 Q273.006 736.311 266.525 736.311 Q264.349 736.311 262.034 735.871 Q259.742 735.455 257.289 734.598 L257.289 730.084 Q259.233 731.219 261.548 731.797 Q263.863 732.376 266.386 732.376 Q270.784 732.376 273.076 730.64 Q275.39 728.904 275.39 725.594 Q275.39 722.538 273.238 720.825 Q271.108 719.089 267.289 719.089 L263.261 719.089 L263.261 715.246 L267.474 715.246 Q270.923 715.246 272.752 713.881 Q274.58 712.492 274.58 709.899 Q274.58 707.237 272.682 705.825 Q270.807 704.39 267.289 704.39 Q265.367 704.39 263.168 704.807 Q260.969 705.223 258.33 706.103 L258.33 701.936 Q260.992 701.196 263.307 700.825 Q265.645 700.455 267.705 700.455 Q273.029 700.455 276.131 702.885 Q279.233 705.293 279.233 709.413 Q279.233 712.283 277.59 714.274 Q275.946 716.242 272.914 717.006 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 704.158 Q295.298 704.158 293.469 707.723 Q291.664 711.265 291.664 718.395 Q291.664 725.501 293.469 729.066 Q295.298 732.607 298.909 732.607 Q302.543 732.607 304.349 729.066 Q306.177 725.501 306.177 718.395 Q306.177 711.265 304.349 707.723 Q302.543 704.158 298.909 704.158 M298.909 700.455 Q304.719 700.455 307.775 705.061 Q310.853 709.645 310.853 718.395 Q310.853 727.121 307.775 731.728 Q304.719 736.311 298.909 736.311 Q293.099 736.311 290.02 731.728 Q286.964 727.121 286.964 718.395 Q286.964 709.645 290.02 705.061 Q293.099 700.455 298.909 700.455 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M271.594 561.101 L259.789 579.55 L271.594 579.55 L271.594 561.101 M270.367 557.027 L276.247 557.027 L276.247 579.55 L281.177 579.55 L281.177 583.439 L276.247 583.439 L276.247 591.587 L271.594 591.587 L271.594 583.439 L255.992 583.439 L255.992 578.925 L270.367 557.027 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 560.105 Q295.298 560.105 293.469 563.67 Q291.664 567.212 291.664 574.341 Q291.664 581.448 293.469 585.013 Q295.298 588.554 298.909 588.554 Q302.543 588.554 304.349 585.013 Q306.177 581.448 306.177 574.341 Q306.177 567.212 304.349 563.67 Q302.543 560.105 298.909 560.105 M298.909 556.402 Q304.719 556.402 307.775 561.008 Q310.853 565.592 310.853 574.341 Q310.853 583.068 307.775 587.675 Q304.719 592.258 298.909 592.258 Q293.099 592.258 290.02 587.675 Q286.964 583.068 286.964 574.341 Q286.964 565.592 290.02 561.008 Q293.099 556.402 298.909 556.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M258.793 412.974 L277.15 412.974 L277.15 416.909 L263.076 416.909 L263.076 425.381 Q264.094 425.034 265.113 424.872 Q266.131 424.687 267.15 424.687 Q272.937 424.687 276.316 427.858 Q279.696 431.029 279.696 436.446 Q279.696 442.025 276.224 445.126 Q272.752 448.205 266.432 448.205 Q264.256 448.205 261.988 447.835 Q259.742 447.464 257.335 446.724 L257.335 442.025 Q259.418 443.159 261.641 443.714 Q263.863 444.27 266.34 444.27 Q270.344 444.27 272.682 442.163 Q275.02 440.057 275.02 436.446 Q275.02 432.835 272.682 430.728 Q270.344 428.622 266.34 428.622 Q264.465 428.622 262.59 429.038 Q260.738 429.455 258.793 430.335 L258.793 412.974 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 416.052 Q295.298 416.052 293.469 419.617 Q291.664 423.159 291.664 430.288 Q291.664 437.395 293.469 440.96 Q295.298 444.501 298.909 444.501 Q302.543 444.501 304.349 440.96 Q306.177 437.395 306.177 430.288 Q306.177 423.159 304.349 419.617 Q302.543 416.052 298.909 416.052 M298.909 412.349 Q304.719 412.349 307.775 416.955 Q310.853 421.539 310.853 430.288 Q310.853 439.015 307.775 443.622 Q304.719 448.205 298.909 448.205 Q293.099 448.205 290.02 443.622 Q286.964 439.015 286.964 430.288 Q286.964 421.539 290.02 416.955 Q293.099 412.349 298.909 412.349 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M269.326 284.337 Q266.178 284.337 264.326 286.49 Q262.497 288.643 262.497 292.393 Q262.497 296.12 264.326 298.296 Q266.178 300.448 269.326 300.448 Q272.474 300.448 274.303 298.296 Q276.154 296.12 276.154 292.393 Q276.154 288.643 274.303 286.49 Q272.474 284.337 269.326 284.337 M278.608 269.685 L278.608 273.944 Q276.849 273.111 275.043 272.671 Q273.261 272.231 271.502 272.231 Q266.872 272.231 264.418 275.356 Q261.988 278.481 261.641 284.8 Q263.006 282.786 265.066 281.722 Q267.127 280.634 269.603 280.634 Q274.812 280.634 277.821 283.805 Q280.853 286.953 280.853 292.393 Q280.853 297.717 277.705 300.934 Q274.557 304.152 269.326 304.152 Q263.33 304.152 260.159 299.569 Q256.988 294.962 256.988 286.235 Q256.988 278.041 260.877 273.18 Q264.766 268.296 271.316 268.296 Q273.076 268.296 274.858 268.643 Q276.664 268.99 278.608 269.685 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 271.999 Q295.298 271.999 293.469 275.564 Q291.664 279.106 291.664 286.235 Q291.664 293.342 293.469 296.907 Q295.298 300.448 298.909 300.448 Q302.543 300.448 304.349 296.907 Q306.177 293.342 306.177 286.235 Q306.177 279.106 304.349 275.564 Q302.543 271.999 298.909 271.999 M298.909 268.296 Q304.719 268.296 307.775 272.902 Q310.853 277.485 310.853 286.235 Q310.853 294.962 307.775 299.569 Q304.719 304.152 298.909 304.152 Q293.099 304.152 290.02 299.569 Q286.964 294.962 286.964 286.235 Q286.964 277.485 290.02 272.902 Q293.099 268.296 298.909 268.296 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1044.38 400.199,946.864 400.786,857.393 401.372,883.102 401.958,802.83 402.545,729.404 403.131,662.05 403.718,599.269 404.304,543.609 404.891,493.243 405.477,449.178 406.063,408.209 406.65,371.528 407.236,340.278 407.823,312.703 408.409,287.128 408.995,264.837 409.582,299.684 410.168,281.952 410.755,266.239 411.341,253.104 411.927,242.373 412.514,233.88 413.1,228.182 413.687,223.665 414.273,220.947 414.86,219.895 415.446,248.353 416.032,250.662 416.619,278.563 417.205,282.537 417.792,308.066 418.378,313.97 418.964,339.641 419.551,413.288 420.137,433.858 420.724,452.568 421.31,471.378 421.896,502.268 422.483,510.116 423.069,517.686 423.656,525.668 424.242,543.757 424.829,561.771 425.415,578.552 426.001,587.868 426.588,597.088 427.174,606.591 427.761,623.296 428.347,638.805 428.933,647.904 429.52,656.751 430.106,666.078 430.693,675.723 431.279,696.476 431.865,716.27 432.452,725.676 433.038,740.159 433.625,754.007 434.211,767.679 434.798,776.169 435.384,784.371 435.97,801.268 436.557,809.519 437.143,825.451 437.73,836.874 438.316,847.919 438.902,862.088 439.489,876.205 440.075,886.422 440.662,896.664 441.248,906.215 441.835,915.827 442.421,927.542 443.007,936.27 443.594,941.894 444.18,950.508 444.767,961.261 445.353,969.238 445.939,977.219 446.526,994.964 447.112,1009.2 447.699,1018.08 448.285,1022.52 448.871,1031.5 449.458,1042.32 450.044,1045.9 450.631,1056.12 451.217,1059.85 451.804,1067.14 452.39,1080.64 452.976,1085.54 453.563,1090.38 454.149,1096.73 454.736,1099.21 455.322,1105.43 455.908,1107.78 456.495,1110.08 457.081,1114.5 457.668,1118.69 458.254,1126.56 458.84,1130.58 459.427,1132.77 460.013,1136.6 460.6,1141.79 461.186,1143.8 461.773,1147.19 462.359,1152.61 462.945,1156.09 463.532,1157.58 464.118,1160.77 464.705,1163.71 465.291,1166.88 465.877,1169.68 466.464,1171.15 467.05,1175.16 467.637,1177.81 468.223,1180.44 468.809,1178.47 469.396,1181.1 469.982,1182.2 470.569,1183.2 471.155,1193.03 471.742,1193.7 472.328,1194.34 472.914,1197.92 473.501,1195.74 474.087,1197.95 474.674,1200.09 475.26,1202.19 475.846,1204.25 476.433,1205.94 477.019,1206.51 477.606,1208.11 478.192,1209.8 478.778,1215.4 479.365,1218.02 479.951,1218.05 480.538,1218.04 481.124,1217.99 481.711,1216.58 482.297,1215.38 482.883,1218.27 483.47,1219.68 484.056,1219.92 484.643,1220.16 485.229,1225.48 485.815,1225.76 486.402,1225.84 486.988,1227.88 487.575,1232.73 488.161,1233.63 488.748,1233.07 489.334,1235.14 489.92,1236.02 490.507,1236.72 491.093,1239.92 491.68,1240.55 492.266,1239.8 492.852,1239.13 493.439,1242.09 494.025,1243.72 494.612,1243.83 495.198,1241.9 495.784,1239.67 496.371,1238.93 496.957,1238.4 497.544,1240.19 498.13,1243.35 498.717,1241.1 499.303,1241.47 499.889,1240.57 500.476,1239.78 501.062,1240.43 501.649,1238.53 502.235,1240.44 502.821,1239.95 503.408,1239.31 503.994,1237.32 504.581,1235.54 505.167,1235.06 505.753,1233.5 506.34,1234.45 506.926,1238.59 507.513,1237.83 508.099,1232.54 508.686,1230.99 509.272,1232.37 509.858,1232.28 510.445,1232.18 511.031,1231.95 511.618,1231.93 512.204,1233.06 512.79,1232.57 513.377,1233.41 513.963,1233.32 514.55,1234.21 515.136,1236.44 515.722,1236.19 516.309,1239.3 516.895,1238.87 517.482,1239.5 518.068,1240.02 518.655,1240.68 519.241,1243.55 519.827,1244.16 520.414,1243.4 521,1243.95 521.587,1241.88 522.173,1244.86 522.759,1242.91 523.346,1242.07 523.932,1243.55 524.519,1242.53 525.105,1241.85 525.691,1243.45 526.278,1244.01 526.864,1244.29 527.451,1245.88 528.037,1242.49 528.624,1241.79 529.21,1240.97 529.796,1243.74 530.383,1246.45 530.969,1246.71 531.556,1249.22 532.142,1250.53 532.728,1250.39 533.315,1250.33 533.901,1249.04 534.488,1247.8 535.074,1241.88 535.661,1243.4 536.247,1242.48 536.833,1242.6 537.42,1239.51 538.006,1236.68 538.593,1236.41 539.179,1234.64 539.765,1237.96 540.352,1238.62 540.938,1236.58 541.525,1236.11 542.111,1239.17 542.697,1237.33 543.284,1238.19 543.87,1236.43 544.457,1237.34 545.043,1235.63 545.63,1237.44 546.216,1235.48 546.802,1236.31 547.389,1235.29 547.975,1237.21 548.562,1236.49 549.148,1235.53 549.734,1234.86 550.321,1236.32 550.907,1236.54 551.494,1237.03 552.08,1235.2 552.666,1234.72 553.253,1236.67 553.839,1233.54 554.426,1232.76 555.012,1229.97 555.599,1229.76 556.185,1229.42 556.771,1228.03 557.358,1226.61 557.944,1226.49 558.531,1225.14 559.117,1226.44 559.703,1227.33 560.29,1225.96 560.876,1225.99 561.463,1225.67 562.049,1225.86 562.635,1228.03 563.222,1230.34 563.808,1232.35 564.395,1232.06 564.981,1231.6 565.568,1233.35 566.154,1231.27 566.74,1231.84 567.327,1233.73 567.913,1234.49 568.5,1234.08 569.086,1232.39 569.672,1234.34 570.259,1232.57 570.845,1233.37 571.432,1231.42 572.018,1231.07 572.605,1228.4 573.191,1228.21 573.777,1224.41 574.364,1222.9 574.95,1223.16 575.537,1225.49 576.123,1221.69 576.709,1222.96 577.296,1225.36 577.882,1226.36 578.469,1224.92 579.055,1223.52 579.641,1223.36 580.228,1219.59 580.814,1219.71 581.401,1222.31 581.987,1222.14 582.574,1221.01 583.16,1224.53 583.746,1224.38 584.333,1224.25 584.919,1223.6 585.506,1221.99 586.092,1220.58 586.678,1220.45 587.265,1220.46 587.851,1221.54 588.438,1221.24 589.024,1219.88 589.61,1219.94 590.197,1222.16 590.783,1223.5 591.37,1223.49 591.956,1224.52 592.543,1223.36 593.129,1222 593.715,1223.17 594.302,1226.55 594.888,1230.92 595.475,1229.23 596.061,1228.66 596.647,1225.95 597.234,1226.9 597.82,1223.95 598.407,1225.01 598.993,1225.14 599.579,1225.32 600.166,1226.22 600.752,1225.8 601.339,1225.68 601.925,1226.4 602.512,1226.01 603.098,1225.72 603.684,1227.48 604.271,1228.19 604.857,1227.46 605.444,1226.92 606.03,1226.37 606.616,1226.9 607.203,1225.27 607.789,1224.91 608.376,1220.79 608.962,1219.47 609.548,1219.35 610.135,1219.32 610.721,1218.22 611.308,1218.44 611.894,1217.24 612.481,1217.47 613.067,1216.29 613.653,1215.2 614.24,1218.92 614.826,1218.95 615.413,1221.32 615.999,1220.99 616.585,1221.83 617.172,1222.81 617.758,1225.09 618.345,1224.56 618.931,1225.46 619.518,1224.95 620.104,1224.65 620.69,1223.35 621.277,1225.1 621.863,1226 622.45,1224.27 623.036,1221.77 623.622,1225.16 624.209,1223.68 624.795,1225.62 625.382,1226.22 625.968,1227.07 626.554,1227.86 627.141,1226.98 627.727,1226.33 628.314,1227.2 628.9,1229.09 629.487,1228.43 630.073,1229.12 630.659,1230.56 631.246,1229.88 631.832,1230.52 632.419,1228.83 633.005,1228.25 633.591,1227.76 634.178,1227.08 634.764,1227.82 635.351,1225.8 635.937,1226.51 636.523,1225.08 637.11,1225.7 637.696,1225.19 638.283,1223.34 638.869,1224.07 639.456,1223.65 640.042,1224.32 640.628,1222.8 641.215,1222.33 641.801,1221.89 642.388,1221.44 642.974,1221.22 643.56,1221.04 644.147,1221.98 644.733,1220.39 645.32,1223.58 645.906,1224.37 646.492,1226.52 647.079,1225.86 647.665,1225.57 648.252,1224.93 648.838,1225.53 649.425,1224.05 650.011,1223.65 650.597,1221.87 651.184,1219.15 651.77,1220.19 652.357,1221.11 652.943,1218.15 653.529,1220.39 654.116,1220.08 654.702,1217.47 655.289,1218.56 655.875,1217.07 656.462,1215.84 657.048,1215.75 657.634,1215.5 658.221,1214.32 658.807,1212.2 659.394,1212.21 659.98,1212.44 660.566,1213.48 661.153,1213.42 661.739,1214.58 662.326,1213.28 662.912,1212.17 663.498,1209.99 664.085,1209.22 664.671,1209.56 665.258,1210.79 665.844,1210.89 666.431,1213.49 667.017,1213.42 667.603,1214.85 668.19,1214.92 668.776,1216.41 669.363,1217.81 669.949,1216.37 670.535,1217.62 671.122,1216.15 671.708,1218.47 672.295,1219.18 672.881,1220.19 673.467,1218.6 674.054,1217.59 674.64,1218.58 675.227,1218.48 675.813,1216.97 676.4,1218.15 676.986,1218.07 677.572,1217.82 678.159,1217.67 678.745,1217.61 679.332,1218.77 679.918,1221.1 680.504,1220.92 681.091,1217.07 681.677,1221.65 682.264,1221.25 682.85,1219.79 683.436,1224.28 684.023,1222.67 684.609,1222.36 685.196,1223.04 685.782,1224.97 686.369,1226.92 686.955,1226.24 687.541,1224.37 688.128,1222.75 688.714,1219.67 689.301,1220.62 689.887,1217.77 690.473,1217.46 691.06,1214.83 691.646,1215.71 692.233,1214.17 692.819,1214.31 693.405,1216.71 693.992,1216.56 694.578,1212.99 695.165,1213.28 695.751,1213.22 696.338,1213.12 696.924,1211.66 697.51,1209.53 698.097,1212.92 698.683,1211.72 699.27,1211.82 699.856,1213 700.442,1214.18 701.029,1214.1 701.615,1216.45 702.202,1216.3 702.788,1217.18 703.375,1217.07 703.961,1216.95 704.547,1217.92 705.134,1217.79 705.72,1218.59 706.307,1218.38 706.893,1215.63 707.479,1216.63 708.066,1214.06 708.652,1212.78 709.239,1212.84 709.825,1214.09 710.411,1214.2 710.998,1215.18 711.584,1216.32 712.171,1218.37 712.757,1219.29 713.344,1218.01 713.93,1220.18 714.516,1217.52 715.103,1216.35 715.689,1217.33 716.276,1216.06 716.862,1214.9 717.448,1213.79 718.035,1216.13 718.621,1217.34 719.208,1217.2 719.794,1215.76 720.38,1214.31 720.967,1214.25 721.553,1214.35 722.14,1215.2 722.726,1213.84 723.313,1215.1 723.899,1212.54 724.485,1212.71 725.072,1212.75 725.658,1215.14 726.245,1212.48 726.831,1209.99 727.417,1210.22 728.004,1208.06 728.59,1208.25 729.177,1209.81 729.763,1211.05 730.349,1211.01 730.936,1212.21 731.522,1212.19 732.109,1211 732.695,1210.96 733.282,1213.6 733.868,1212.31 734.454,1211.24 735.041,1210.2 735.627,1213.12 736.214,1214.16 736.8,1214.08 737.386,1219.71 737.973,1220.41 738.559,1221.18 739.146,1221.75 739.732,1220.26 740.318,1218.56 740.905,1220.39 741.491,1219.93 742.078,1217.35 742.664,1216.09 743.251,1213.48 743.837,1214.61 744.423,1214.37 745.01,1214.42 745.596,1215.51 746.183,1216.38 746.769,1214.89 747.355,1217.35 747.942,1218.23 748.528,1219.34 749.115,1222.4 749.701,1220.58 750.288,1222.42 750.874,1220.73 751.46,1221.47 752.047,1219.75 752.633,1218.3 753.22,1213.4 753.806,1213.2 754.392,1210.38 754.979,1212.72 755.565,1211.72 756.152,1213.02 756.738,1211.79 757.324,1211.78 757.911,1213.04 758.497,1211.98 759.084,1211.88 759.67,1210.81 760.257,1213.14 760.843,1211.86 761.429,1211.82 762.016,1211.61 762.602,1211.72 763.189,1212.07 763.775,1209.71 764.361,1208.92 764.948,1209.19 765.534,1209.31 766.121,1208.28 766.707,1208.38 767.293,1207.72 767.88,1209.02 768.466,1210.34 769.053,1210.43 769.639,1209.43 770.226,1208.7 770.812,1205.38 771.398,1204.42 771.985,1207.29 772.571,1207.23 773.158,1208.82 773.744,1211.16 774.33,1211.31 774.917,1211.42 775.503,1210.45 776.09,1211.8 776.676,1211.91 777.262,1211.96 777.849,1211.91 778.435,1212.94 779.022,1214.24 779.608,1214.16 780.195,1215.07 780.781,1216.26 781.367,1215.99 781.954,1216.79 782.54,1216.63 783.127,1216.61 783.713,1215.34 784.299,1214.98 784.886,1212.43 785.472,1212.62 786.059,1213.63 786.645,1214.78 787.232,1213.61 787.818,1212.19 788.404,1212.09 788.991,1213.24 789.577,1210.78 790.164,1214.04 790.75,1213.95 791.336,1212.81 791.923,1211.5 792.509,1212.67 793.096,1212.6 793.682,1213.49 794.268,1213.4 794.855,1213.29 795.441,1215.35 796.028,1212.58 796.614,1212.52 797.201,1216.03 797.787,1215.65 798.373,1214.29 798.96,1213.74 799.546,1214.79 800.133,1214.38 800.719,1212.9 801.305,1211.7 801.892,1211.51 802.478,1211.8 803.065,1211.74 803.651,1210.68 804.237,1210.75 804.824,1210.62 805.41,1208.42 805.997,1207.49 806.583,1206.63 807.17,1205.86 807.756,1208.36 808.342,1208.6 808.929,1206.33 809.515,1205.29 810.102,1208.05 810.688,1208.46 811.274,1209.88 811.861,1209.9 812.447,1211.17 813.034,1212.27 813.62,1212.24 814.206,1209.85 814.793,1210.14 815.379,1211.38 815.966,1212.6 816.552,1211.4 817.139,1212.48 817.725,1212.47 818.311,1214.55 818.898,1216.82 819.484,1217.58 820.071,1218.43 820.657,1219.14 821.243,1216.08 821.83,1215.77 822.416,1216.48 823.003,1218.65 823.589,1220.61 824.175,1216.66 824.762,1217.69 825.348,1217.29 825.935,1218.13 826.521,1215.53 827.108,1214.05 827.694,1213.53 828.28,1213.22 828.867,1214.32 829.453,1211.78 830.04,1210.64 830.626,1209.44 831.212,1210.47 831.799,1209.35 832.385,1209.33 832.972,1211.67 833.558,1211.85 834.145,1213.04 834.731,1213.89 835.317,1213.67 835.904,1212.24 836.49,1212.09 837.077,1213.31 837.663,1211.06 838.249,1208.65 838.836,1208.86 839.422,1210.1 840.009,1209.9 840.595,1211.06 841.181,1211.1 841.768,1209.82 842.354,1212.06 842.941,1210.57 843.527,1210.47 844.114,1211.65 844.7,1209.16 845.286,1209.11 845.873,1209.13 846.459,1209.15 847.046,1205.66 847.632,1207.19 848.218,1207.54 848.805,1207.58 849.391,1209.19 849.978,1207 850.564,1207.15 851.15,1207.23 851.737,1207.5 852.323,1206.58 852.91,1206.95 853.496,1206.96 854.083,1204.63 854.669,1203.87 855.255,1205.28 855.842,1206.82 856.428,1208.24 857.015,1208.37 857.601,1205.85 858.187,1206.08 858.774,1206.36 859.36,1205.34 859.947,1206.92 860.533,1207.29 861.119,1205.24 861.706,1205.53 862.292,1205.74 862.879,1207.09 863.465,1209.59 864.052,1205.89 864.638,1203.65 865.224,1205.36 865.811,1205.83 866.397,1207.36 866.984,1210 867.57,1211.39 868.156,1209.01 868.743,1208.94 869.329,1210.38 869.916,1212.7 870.502,1211.18 871.089,1211.11 871.675,1213.37 872.261,1213.04 872.848,1214.16 873.434,1216.34 874.021,1217.06 874.607,1216.85 875.193,1220.99 875.78,1220.51 876.366,1218.89 876.953,1218.54 877.539,1217.01 878.125,1210.82 878.712,1211.79 879.298,1211.46 879.885,1210.45 880.471,1210.66 881.058,1209.41 881.644,1208.42 882.23,1207.25 882.817,1212.22 883.403,1209.89 883.99,1209.9 884.576,1207.8 885.162,1208.05 885.749,1207 886.335,1204.83 886.922,1205.21 887.508,1207.79 888.094,1206.65 888.681,1206.83 889.267,1206.94 889.854,1207.12 890.44,1207.28 891.027,1208.84 891.613,1207.78 892.199,1210.09 892.786,1210.08 893.372,1210.02 893.959,1212.22 894.545,1212.17 895.131,1213.22 895.718,1214.24 896.304,1215.04 896.891,1213.28 897.477,1211.71 898.063,1213.02 898.65,1212.7 899.236,1211.38 899.823,1211.24 900.409,1211.96 900.996,1209.58 901.582,1209.4 902.168,1209.51 902.755,1209.61 903.341,1210.54 903.928,1209.33 904.514,1210.65 905.1,1210.79 905.687,1211.88 906.273,1212.9 906.86,1210.2 907.446,1211.36 908.032,1210.07 908.619,1208.95 909.205,1208.83 909.792,1207.55 910.378,1207.86 910.965,1210.5 911.551,1210.55 912.137,1208.37 912.724,1204.86 913.31,1204.94 913.897,1203.98 914.483,1202.94 915.069,1203.17 915.656,1204.98 916.242,1206.44 916.829,1205.31 917.415,1207.8 918.002,1207.85 918.588,1207.74 919.174,1208.87 919.761,1210.14 920.347,1209.06 920.934,1209.03 921.52,1206.6 922.106,1206.98 922.693,1208.43 923.279,1206.09 923.866,1206.35 924.452,1206.41 925.038,1205.29 925.625,1206.44 926.211,1206.61 926.798,1204.36 927.384,1203.52 927.971,1205.07 928.557,1205.33 929.143,1205.51 929.73,1205.84 930.316,1206.22 930.903,1207.47 931.489,1207.55 932.075,1208.91 932.662,1209.97 933.248,1209.91 933.835,1212.17 934.421,1213.05 935.007,1213.99 935.594,1214.95 936.18,1214.82 936.767,1214.53 937.353,1213.94 937.94,1215 938.526,1212.5 939.112,1212.15 939.699,1210.66 940.285,1211.69 940.872,1209.35 941.458,1206.95 942.044,1208.01 942.631,1209.23 943.217,1209.34 943.804,1208.06 944.39,1209.41 944.976,1210.61 945.563,1208.27 946.149,1209.36 946.736,1209.13 947.322,1209.15 947.909,1210.17 948.495,1211.12 949.081,1213.32 949.668,1211.9 950.254,1210.49 950.841,1210.14 951.427,1208.59 952.013,1208.76 952.6,1208.9 953.186,1206.38 953.773,1210.26 954.359,1210.44 954.945,1209.37 955.532,1209.22 956.118,1210.25 956.705,1211.41 957.291,1212.53 957.878,1213.76 958.464,1213.53 959.05,1213.29 959.637,1215.31 960.223,1214.88 960.81,1213.5 961.396,1216.53 961.982,1218.17 962.569,1217.82 963.155,1219.73 963.742,1217.78 964.328,1219.8 964.915,1220.36 965.501,1222.19 966.087,1221.57 966.674,1219.72 967.26,1221.57 967.847,1219.6 968.433,1219.33 969.019,1216.23 969.606,1212.34 970.192,1210.95 970.779,1210.72 971.365,1206.97 971.951,1206.76 972.538,1207.8 973.124,1210 973.711,1208.31 974.297,1209.21 974.884,1209.32 975.47,1210.39 976.056,1208.08 976.643,1208.02 977.229,1207.95 977.816,1208.04 978.402,1207.93 978.988,1206.83 979.575,1209.07 980.161,1206.72 980.748,1208.09 981.334,1206.91 981.92,1209.44 982.507,1207.11 983.093,1207.03 983.68,1206.11 984.266,1205 984.853,1205.02 985.439,1204.07 986.025,1202.93 986.612,1204.47 987.198,1207.28 987.785,1207.48 988.371,1206.71 988.957,1206.84 989.544,1207.03 990.13,1208.53 990.717,1204.89 991.303,1208.91 991.889,1209.89 992.476,1210.16 993.062,1210.14 993.649,1210.15 994.235,1208.78 994.822,1208.66 995.408,1206.31 995.994,1206.43 996.581,1207.81 997.167,1208.06 997.754,1208.33 998.34,1209.54 998.926,1208.53 999.513,1207.36 1000.1,1207.5 1000.69,1206.51 1001.27,1206.74 1001.86,1206.88 1002.44,1209.43 1003.03,1211.75 1003.62,1209.43 1004.2,1208.41 1004.79,1209.55 1005.38,1210.63 1005.96,1209.37 1006.55,1208.22 1007.14,1205.97 1007.72,1207.3 1008.31,1207.39 1008.9,1206.44 1009.48,1206.74 1010.07,1206.7 1010.65,1206.99 1011.24,1206.03 1011.83,1206 1012.41,1203.74 1013,1204.33 1013.59,1208.03 1014.17,1208.2 1014.76,1203.45 1015.35,1202.67 1015.93,1205.61 1016.52,1206.89 1017.11,1207.09 1017.69,1205.98 1018.28,1206.12 1018.86,1208.38 1019.45,1208.34 1020.04,1208.43 1020.62,1206.23 1021.21,1206.51 1021.8,1206.62 1022.38,1208.09 1022.97,1207.15 1023.56,1208.08 1024.14,1205.81 1024.73,1208.67 1025.32,1211.18 1025.9,1212.05 1026.49,1210.9 1027.07,1210.98 1027.66,1211.05 1028.25,1209.81 1028.83,1209.91 1029.42,1208.69 1030.01,1206.28 1030.59,1206.5 1031.18,1207.83 1031.77,1207.64 1032.35,1207.47 1032.94,1207.57 1033.52,1207.73 1034.11,1209 1034.7,1210.21 1035.28,1211.31 1035.87,1210.09 1036.46,1211.2 1037.04,1208.65 1037.63,1207.41 1038.22,1204.81 1038.8,1207.31 1039.39,1207.23 1039.98,1208.5 1040.56,1205.88 1041.15,1206.03 1041.73,1207.29 1042.32,1207.48 1042.91,1208.75 1043.49,1205.16 1044.08,1205.4 1044.67,1205.9 1045.25,1207.55 1045.84,1207.6 1046.43,1208.76 1047.01,1207.48 1047.6,1207.66 1048.19,1206.48 1048.77,1207.76 1049.36,1211.55 1049.94,1212.53 1050.53,1212.25 1051.12,1211.88 1051.7,1211.52 1052.29,1215.15 1052.88,1213.7 1053.46,1213.33 1054.05,1214.19 1054.64,1212.58 1055.22,1214.95 1055.81,1213.23 1056.39,1211.87 1056.98,1210.62 1057.57,1210.58 1058.15,1212.74 1058.74,1212.27 1059.33,1212.09 1059.91,1214.24 1060.5,1213 1061.09,1212.79 1061.67,1213.69 1062.26,1213.33 1062.85,1212.98 1063.43,1210.45 1064.02,1207.79 1064.6,1210.25 1065.19,1209.98 1065.78,1210.85 1066.36,1212 1066.95,1208.18 1067.54,1210.49 1068.12,1210.18 1068.71,1209.08 1069.3,1208.77 1069.88,1209.97 1070.47,1208.8 1071.06,1210.07 1071.64,1210 1072.23,1210.01 1072.81,1208.64 1073.4,1207.48 1073.99,1208.77 1074.57,1209.13 1075.16,1210.22 1075.75,1206.54 1076.33,1205.6 1076.92,1206.96 1077.51,1209.54 1078.09,1210.53 1078.68,1209.42 1079.26,1208.28 1079.85,1205.85 1080.44,1206.23 1081.02,1208.89 1081.61,1208.77 1082.2,1208.67 1082.78,1207.54 1083.37,1205.18 1083.96,1204.25 1084.54,1201.93 1085.13,1202.48 1085.72,1201.6 1086.3,1201.73 1086.89,1202.26 1087.47,1201.15 1088.06,1201.71 1088.65,1203.39 1089.23,1204.69 1089.82,1203.88 1090.41,1205.17 1090.99,1205.54 1091.58,1204.77 1092.17,1206.36 1092.75,1205.28 1093.34,1209.02 1093.93,1211.58 1094.51,1213.79 1095.1,1212.28 1095.68,1214.3 1096.27,1216.58 1096.86,1214.86 1097.44,1215.71 1098.03,1215.15 1098.62,1212.44 1099.2,1213.42 1099.79,1214.28 1100.38,1212.8 1100.96,1212.6 1101.55,1211.11 1102.14,1210.86 1102.72,1209.62 1103.31,1209.79 1103.89,1212.16 1104.48,1210.7 1105.07,1210.77 1105.65,1212.94 1106.24,1210.54 1106.83,1210.4 1107.41,1210.09 1108,1208.61 1108.59,1207.52 1109.17,1207.49 1109.76,1206.58 1110.34,1209 1110.93,1208.92 1111.52,1211.26 1112.1,1209.71 1112.69,1209.81 1113.28,1209.82 1113.86,1210.79 1114.45,1211.77 1115.04,1209.31 1115.62,1211.68 1116.21,1212.66 1116.8,1210.12 1117.38,1206.48 1117.97,1204.25 1118.55,1205.3 1119.14,1206.45 1119.73,1205.58 1120.31,1204.67 1120.9,1204.97 1121.49,1206.4 1122.07,1206.11 1122.66,1205.23 1123.25,1204.44 1123.83,1205.73 1124.42,1203.74 1125.01,1204.04 1125.59,1202.97 1126.18,1202.24 1126.76,1203.82 1127.35,1204.17 1127.94,1202.98 1128.52,1203.02 1129.11,1205.53 1129.7,1210.22 1130.28,1209.99 1130.87,1208.69 1131.46,1207.58 1132.04,1208.69 1132.63,1207.49 1133.21,1206.15 1133.8,1207.38 1134.39,1209.87 1134.97,1211.04 1135.56,1209.71 1136.15,1212.11 1136.73,1212.06 1137.32,1211.68 1137.91,1210.25 1138.49,1210.36 1139.08,1209.08 1139.67,1207.79 1140.25,1206.8 1140.84,1207.06 1141.42,1209.46 1142.01,1208.21 1142.6,1209.47 1143.18,1210.76 1143.77,1211.67 1144.36,1212.84 1144.94,1212.72 1145.53,1208.68 1146.12,1209.85 1146.7,1210.91 1147.29,1210.84 1147.88,1207.26 1148.46,1208.58 1149.05,1208.57 1149.63,1209.69 1150.22,1206.09 1150.81,1207.5 1151.39,1209.01 1151.98,1211.49 1152.57,1210.39 1153.15,1210.43 1153.74,1212.73 1154.33,1211.32 1154.91,1212.17 1155.5,1214.18 1156.09,1215.01 1156.67,1212.53 1157.26,1213.39 1157.84,1213.2 1158.43,1212.76 1159.02,1213.78 1159.6,1213.68 1160.19,1210.97 1160.78,1210.88 1161.36,1209.75 1161.95,1211.97 1162.54,1211.76 1163.12,1212.93 1163.71,1212.37 1164.29,1213.35 1164.88,1212.1 1165.47,1211.88 1166.05,1213.06 1166.64,1212.69 1167.23,1208.99 1167.81,1208.9 1168.4,1211.27 1168.99,1211.03 1169.57,1211.91 1170.16,1211.79 1170.75,1211.53 1171.33,1210.28 1171.92,1210.21 1172.5,1210.11 1173.09,1207.69 1173.68,1207.86 1174.26,1206.85 1174.85,1208.3 1175.44,1209.43 1176.02,1209.38 1176.61,1208.16 1177.2,1205.7 1177.78,1201 1178.37,1203.91 1178.96,1207.68 1179.54,1208.97 1180.13,1209.87 1180.71,1210.6 1181.3,1211.79 1181.89,1209.1 1182.47,1206.87 1183.06,1206.69 1183.65,1206.87 1184.23,1205.82 1184.82,1205.81 1185.41,1205.91 1185.99,1207.22 1186.58,1208.4 1187.16,1205.98 1187.75,1207.59 1188.34,1207.7 1188.92,1207.54 1189.51,1207.63 1190.1,1206.59 1190.68,1209.04 1191.27,1210.18 1191.86,1211.55 1192.44,1210.3 1193.03,1210.09 1193.62,1208.92 1194.2,1211.08 1194.79,1210.89 1195.37,1210.61 1195.96,1210.45 1196.55,1212.27 1197.13,1212.36 1197.72,1212.18 1198.31,1213.29 1198.89,1214.22 1199.48,1216.33 1200.07,1216 1200.65,1214.57 1201.24,1211.07 1201.83,1208.56 1202.41,1207.4 1203,1207.28 1203.58,1207.39 1204.17,1205.23 1204.76,1204.32 1205.34,1204.65 1205.93,1205.95 1206.52,1204.91 1207.1,1206.29 1207.69,1206.36 1208.28,1207.82 1208.86,1209 1209.45,1210 1210.03,1208.73 1210.62,1209.92 1211.21,1206.37 1211.79,1207.73 1212.38,1210.34 1212.97,1211.05 1213.55,1211.89 1214.14,1214.06 1214.73,1213.75 1215.31,1213.67 1215.9,1215.68 1216.49,1216.49 1217.07,1214.89 1217.66,1213.17 1218.24,1209.54 1218.83,1207.07 1219.42,1205.74 1220,1202.44 1220.59,1205.19 1221.18,1204.24 1221.76,1203.17 1222.35,1202.29 1222.94,1202.94 1223.52,1204.37 1224.11,1205.63 1224.7,1204.55 1225.28,1206 1225.87,1206.11 1226.45,1204.86 1227.04,1201.96 1227.63,1201.15 1228.21,1200.56 1228.8,1199.96 1229.39,1200.39 1229.97,1200.6 1230.56,1198.92 1231.15,1198 1231.73,1197.43 1232.32,1200.61 1232.91,1197.64 1233.49,1198.53 1234.08,1200.24 1234.66,1199.43 1235.25,1202.27 1235.84,1203.77 1236.42,1202.84 1237.01,1204.2 1237.6,1204.4 1238.18,1204.57 1238.77,1204.98 1239.36,1207.55 1239.94,1207.78 1240.53,1207.96 1241.11,1206.91 1241.7,1208.1 1242.29,1209.37 1242.87,1211.74 1243.46,1210.13 1244.05,1208.8 1244.63,1209.93 1245.22,1208.83 1245.81,1207.36 1246.39,1204.92 1246.98,1205.11 1247.57,1206.42 1248.15,1205.55 1248.74,1206.94 1249.32,1206.98 1249.91,1209.37 1250.5,1210.35 1251.08,1210.46 1251.67,1210.53 1252.26,1209.28 1252.84,1210.4 1253.43,1210.22 1254.02,1212.59 1254.6,1212.26 1255.19,1210.87 1255.78,1212.19 1256.36,1213.23 1256.95,1211.49 1257.53,1211.48 1258.12,1212.6 1258.71,1212.27 1259.29,1210.92 1259.88,1210.69 1260.47,1214.02 1261.05,1215.06 1261.64,1217.21 1262.23,1216.89 1262.81,1214.31 1263.4,1212.9 1263.98,1213.96 1264.57,1214.86 1265.16,1215.86 1265.74,1216.7 1266.33,1215.18 1266.92,1215.79 1267.5,1216.54 1268.09,1213.95 1268.68,1212.51 1269.26,1211.1 1269.85,1210.93 1270.44,1212.01 1271.02,1212.25 1271.61,1212.01 1272.19,1212.12 1272.78,1214.18 1273.37,1213.95 1273.95,1211.24 1274.54,1212.4 1275.13,1211.17 1275.71,1212.25 1276.3,1213.22 1276.89,1211.71 1277.47,1212.73 1278.06,1212.49 1278.65,1212.38 1279.23,1210.98 1279.82,1208.44 1280.4,1206.01 1280.99,1205.94 1281.58,1204.71 1282.16,1203.73 1282.75,1204.97 1283.34,1206.08 1283.92,1207.41 1284.51,1205.93 1285.1,1206.04 1285.68,1204.91 1286.27,1202.82 1286.86,1203.24 1287.44,1205.71 1288.03,1206.68 1288.61,1205.68 1289.2,1204.58 1289.79,1203.54 1290.37,1203.61 1290.96,1204.81 1291.55,1206.06 1292.13,1206.21 1292.72,1203.96 1293.31,1203.2 1293.89,1205.77 1294.48,1205.99 1295.06,1207.41 1295.65,1209.48 1296.24,1210.75 1296.82,1210.88 1297.41,1211.06 1298,1210.92 1298.58,1210.66 1299.17,1209.24 1299.76,1210.15 1300.34,1208.86 1300.93,1206.56 1301.52,1207.82 1302.1,1206.72 1302.69,1208.07 1303.27,1208 1303.86,1208 1304.45,1205.81 1305.03,1204.85 1305.62,1203.73 1306.21,1206.52 1306.79,1207.93 1307.38,1209.13 1307.97,1208.82 1308.55,1207.82 1309.14,1207.93 1309.73,1207.99 1310.31,1208.4 1310.9,1208.38 1311.48,1208.08 1312.07,1211.78 1312.66,1211.57 1313.24,1209.06 1313.83,1210.43 1314.42,1210.3 1315,1212.6 1315.59,1212.34 1316.18,1213.24 1316.76,1214 1317.35,1213.61 1317.93,1214.49 1318.52,1215.31 1319.11,1212.62 1319.69,1211.38 1320.28,1210.08 1320.87,1209.82 1321.45,1208.58 1322.04,1209.76 1322.63,1209.66 1323.21,1210.84 1323.8,1210.7 1324.39,1209.27 1324.97,1210.23 1325.56,1208.8 1326.14,1212.52 1326.73,1212.31 1327.32,1208.52 1327.9,1209.8 1328.49,1208.27 1329.08,1208.04 1329.66,1207.11 1330.25,1207.22 1330.84,1204.9 1331.42,1205.09 1332.01,1204.01 1332.6,1201.84 1333.18,1204.56 1333.77,1203.41 1334.35,1202.45 1334.94,1203.83 1335.53,1204.04 1336.11,1207.94 1336.7,1207.09 1337.29,1204.75 1337.87,1205.04 1338.46,1204.22 1339.05,1204.71 1339.63,1204.89 1340.22,1206.17 1340.8,1206.11 1341.39,1204.87 1341.98,1205.18 1342.56,1203.14 1343.15,1202.46 1343.74,1201.6 1344.32,1201.79 1344.91,1201.06 1345.5,1200.09 1346.08,1200.74 1346.67,1201.07 1347.26,1200.07 1347.84,1202.6 1348.43,1201.93 1349.01,1202.55 1349.6,1202.97 1350.19,1203.55 1350.77,1204.9 1351.36,1204.03 1351.95,1205.4 1352.53,1207.02 1353.12,1208.25 1353.71,1209.47 1354.29,1210.73 1354.88,1212.92 1355.47,1212.53 1356.05,1211.13 1356.64,1210.63 1357.22,1210.24 1357.81,1210.14 1358.4,1210.12 1358.98,1209.85 1359.57,1207.47 1360.16,1209.97 1360.74,1209.89 1361.33,1208.76 1361.92,1209.73 1362.5,1208.58 1363.09,1209.71 1363.68,1210.82 1364.26,1212.9 1364.85,1211.57 1365.43,1211.48 1366.02,1209.06 1366.61,1206.58 1367.19,1206.7 1367.78,1205.52 1368.37,1209.06 1368.95,1210.1 1369.54,1209.83 1370.13,1211.02 1370.71,1210.96 1371.3,1208.66 1371.88,1206.09 1372.47,1206.32 1373.06,1204.25 1373.64,1205.91 1374.23,1204.97 1374.82,1205.06 1375.4,1203.89 1375.99,1202.83 1376.58,1201 1377.16,1202.96 1377.75,1203.17 1378.34,1204.66 1378.92,1204.81 1379.51,1203.91 1380.09,1204.24 1380.68,1205.8 1381.27,1205.92 1381.85,1203.49 1382.44,1203.55 1383.03,1205.12 1383.61,1207.68 1384.2,1209.96 1384.79,1211.13 1385.37,1212.07 1385.96,1212.01 1386.55,1213.06 1387.13,1211.64 1387.72,1211.49 1388.3,1213.49 1388.89,1215.58 1389.48,1217.63 1390.06,1217.3 1390.65,1214.52 1391.24,1213.07 1391.82,1212.69 1392.41,1214.7 1393,1214.55 1393.58,1213.16 1394.17,1211.76 1394.75,1212.73 1395.34,1212.38 1395.93,1212.25 1396.51,1209.63 1397.1,1209.65 1397.69,1214.13 1398.27,1215.01 1398.86,1213.62 1399.45,1211.3 1400.03,1209.92 1400.62,1213.27 1401.21,1211.67 1401.79,1212.53 1402.38,1210.98 1402.96,1210.77 1403.55,1210.86 1404.14,1210.91 1404.72,1211.95 1405.31,1211.6 1405.9,1211.44 1406.48,1212.1 1407.07,1210.78 1407.66,1209.37 1408.24,1210.68 1408.83,1210.56 1409.42,1211.63 1410,1211.15 1410.59,1210.78 1411.17,1215.39 1411.76,1216.42 1412.35,1215.94 1412.93,1215.79 1413.52,1212.02 1414.11,1214.34 1414.69,1214.1 1415.28,1213.86 1415.87,1210.18 1416.45,1207.68 1417.04,1206.5 1417.63,1206.81 1418.21,1209.18 1418.8,1211.35 1419.38,1212.32 1419.97,1209.63 1420.56,1210.59 1421.14,1209.24 1421.73,1207.89 1422.32,1208.08 1422.9,1207.96 1423.49,1207.08 1424.08,1208.66 1424.66,1205.17 1425.25,1205.31 1425.83,1205.35 1426.42,1205.75 1427.01,1206.09 1427.59,1204.97 1428.18,1205.59 1428.77,1206.97 1429.35,1207.05 1429.94,1207.45 1430.53,1205.18 1431.11,1208.67 1431.7,1209.89 1432.29,1209.75 1432.87,1208.57 1433.46,1210.78 1434.04,1209.51 1434.63,1210.47 1435.22,1207.97 1435.8,1208.13 1436.39,1208.06 1436.98,1209.04 1437.56,1208.8 1438.15,1208.9 1438.74,1207.59 1439.32,1206.36 1439.91,1207.62 1440.5,1205.31 1441.08,1206.66 1441.67,1205.66 1442.25,1206.82 1442.84,1206.84 1443.43,1205.6 1444.01,1204.22 1444.6,1203.39 1445.19,1204.59 1445.77,1209.48 1446.36,1209.25 1446.95,1209.33 1447.53,1206 1448.12,1205.93 1448.7,1207.06 1449.29,1206.85 1449.88,1208.24 1450.46,1208.14 1451.05,1207.92 1451.64,1208.96 1452.22,1211.38 1452.81,1211.43 1453.4,1206.54 1453.98,1205.32 1454.57,1203.16 1455.16,1198.64 1455.74,1200.46 1456.33,1200.59 1456.91,1200.81 1457.5,1199.92 1458.09,1200.54 1458.67,1200.96 1459.26,1202.42 1459.85,1202.57 1460.43,1204.33 1461.02,1204.86 1461.61,1208.78 1462.19,1210.02 1462.78,1209.76 1463.37,1209.7 1463.95,1209.8 1464.54,1211.14 1465.12,1209.86 1465.71,1207.24 1466.3,1203.76 1466.88,1203.93 1467.47,1203.02 1468.06,1205.79 1468.64,1206.04 1469.23,1206.1 1469.82,1208.49 1470.4,1206.23 1470.99,1206.23 1471.57,1207.43 1472.16,1207.52 1472.75,1208.69 1473.33,1207.51 1473.92,1207.82 1474.51,1208.15 1475.09,1209.47 1475.68,1207.24 1476.27,1207.16 1476.85,1209.59 1477.44,1209.41 1478.03,1210.61 1478.61,1209.23 1479.2,1209.5 1479.78,1208.51 1480.37,1208.58 1480.96,1207.39 1481.54,1208.67 1482.13,1210.01 1482.72,1209.95 1483.3,1208.86 1483.89,1210.14 1484.48,1213.69 1485.06,1212.33 1485.65,1213.43 1486.24,1216.56 1486.82,1213.01 1487.41,1212.7 1487.99,1211.2 1488.58,1212.05 1489.17,1212.07 1489.75,1211.93 1490.34,1209.29 1490.93,1206.83 1491.51,1205.69 1492.1,1206.97 1492.69,1208.17 1493.27,1209.35 1493.86,1208.3 1494.45,1209.6 1495.03,1210.77 1495.62,1210.31 1496.2,1211.12 1496.79,1211.03 1497.38,1210.54 1497.96,1211.61 1498.55,1207.87 1499.14,1208.1 1499.72,1207.07 1500.31,1208.14 1500.9,1207.98 1501.48,1207.85 1502.07,1205.55 1502.65,1207.08 1503.24,1208.18 1503.83,1209.37 1504.41,1209.15 1505,1210.25 1505.59,1208.95 1506.17,1207.72 1506.76,1210.12 1507.35,1214.7 1507.93,1215.47 1508.52,1215.15 1509.11,1216.2 1509.69,1214.65 1510.28,1216.37 1510.86,1216.81 1511.45,1218.84 1512.04,1216.1 1512.62,1214.61 1513.21,1211.7 1513.8,1211.59 1514.38,1209.02 1514.97,1207.89 1515.56,1206.8 1516.14,1204.26 1516.73,1207.9 1517.32,1208.04 1517.9,1209.36 1518.49,1209.23 1519.07,1210.57 1519.66,1209.4 1520.25,1209.36 1520.83,1209.3 1521.42,1208.08 1522.01,1209.19 1522.59,1207.99 1523.18,1208.05 1523.77,1208.19 1524.35,1208.5 1524.94,1209.84 1525.52,1207.22 1526.11,1208.63 1526.7,1207.72 1527.28,1207.76 1527.87,1209 1528.46,1210.02 1529.04,1207.46 1529.63,1207.26 1530.22,1204.77 1530.8,1208.67 1531.39,1207.59 1531.98,1207.3 1532.56,1206.04 1533.15,1208.44 1533.73,1207.25 1534.32,1204.92 1534.91,1204.1 1535.49,1201.99 1536.08,1200.14 1536.67,1201.91 1537.25,1200.83 1537.84,1202.37 1538.43,1202.72 1539.01,1201.71 1539.6,1200.09 1540.19,1200.47 1540.77,1201.01 1541.36,1201.7 1541.94,1202.11 1542.53,1202.68 1543.12,1202.93 1543.7,1206.95 1544.29,1207.13 1544.88,1209.51 1545.46,1209.68 1546.05,1209.75 1546.64,1211.94 1547.22,1213.13 1547.81,1210.61 1548.4,1210.29 1548.98,1208.91 1549.57,1213.51 1550.15,1213.37 1550.74,1212.04 1551.33,1211.83 1551.91,1211.58 1552.5,1210.45 1553.09,1210.14 1553.67,1211.18 1554.26,1211.08 1554.85,1212.08 1555.43,1214.25 1556.02,1212.53 1556.6,1212.28 1557.19,1212.08 1557.78,1212.19 1558.36,1212.01 1558.95,1210.43 1559.54,1210.21 1560.12,1210.32 1560.71,1210.55 1561.3,1211.43 1561.88,1210.04 1562.47,1208.72 1563.06,1207.68 1563.64,1206.56 1564.23,1206.86 1564.81,1208.43 1565.4,1209.67 1565.99,1211.98 1566.57,1211.79 1567.16,1210.4 1567.75,1209.27 1568.33,1205.57 1568.92,1204.42 1569.51,1204.74 1570.09,1203.47 1570.68,1204.87 1571.27,1208.64 1571.85,1208.7 1572.44,1208.87 1573.02,1213.45 1573.61,1212.07 1574.2,1210.62 1574.78,1212.64 1575.37,1211.41 1575.96,1211.41 1576.54,1211.33 1577.13,1211.39 1577.72,1209.98 1578.3,1208.64 1578.89,1207.45 1579.47,1206.34 1580.06,1205.15 1580.65,1205.36 1581.23,1206.74 1581.82,1204.53 1582.41,1204.63 1582.99,1204.73 1583.58,1204.91 1584.17,1205.1 1584.75,1204.14 1585.34,1203.01 1585.93,1203.39 1586.51,1203.69 1587.1,1202.89 1587.68,1200.99 1588.27,1202.43 1588.86,1205.14 1589.44,1206.53 1590.03,1207.57 1590.62,1207.42 1591.2,1207.5 1591.79,1210 1592.38,1208.53 1592.96,1208.7 1593.55,1209.94 1594.14,1206.64 1594.72,1207.92 1595.31,1208 1595.89,1203.44 1596.48,1203.86 1597.07,1202.76 1597.65,1204.28 1598.24,1205.48 1598.83,1203.44 1599.41,1203.68 1600,1204.89 1600.59,1203.94 1601.17,1204.19 1601.76,1202.93 1602.34,1203.23 1602.93,1203.55 1603.52,1207.02 1604.1,1207.06 1604.69,1208.37 1605.28,1210.76 1605.86,1210.42 1606.45,1209.29 1607.04,1209.23 1607.62,1209.06 1608.21,1210.13 1608.8,1207.67 1609.38,1208.87 1609.97,1208.87 1610.55,1208.96 1611.14,1210.03 1611.73,1209.85 1612.31,1212.17 1612.9,1213.08 1613.49,1214.15 1614.07,1215.99 1614.66,1215.61 1615.25,1212.9 1615.83,1210.45 1616.42,1210.1 1617.01,1209.71 1617.59,1209.63 1618.18,1210.75 1618.76,1210.64 1619.35,1210.27 1619.94,1209.15 1620.52,1207.69 1621.11,1210.18 1621.7,1209.21 1622.28,1208.04 1622.87,1208.32 1623.46,1209.41 1624.04,1207.01 1624.63,1207.11 1625.22,1207.23 1625.8,1207.19 1626.39,1208.39 1626.97,1208.46 1627.56,1205.88 1628.15,1203.76 1628.73,1202.93 1629.32,1203.23 1629.91,1201.29 1630.49,1201.63 1631.08,1202.23 1631.67,1202.67 1632.25,1201.75 1632.84,1202.09 1633.42,1202.55 1634.01,1201.79 1634.6,1203.34 1635.18,1203.79 1635.77,1204.28 1636.36,1204.45 1636.94,1204.68 1637.53,1204.73 1638.12,1206.13 1638.7,1207.31 1639.29,1208.54 1639.88,1209.86 1640.46,1208.65 1641.05,1207.67 1641.63,1207.72 1642.22,1209.05 1642.81,1208.03 1643.39,1208.29 1643.98,1207.22 1644.57,1208.69 1645.15,1208.69 1645.74,1208.72 1646.33,1206.26 1646.91,1206.52 1647.5,1206.65 1648.09,1204.35 1648.67,1202.3 1649.26,1200.2 1649.84,1200.85 1650.43,1198.63 1651.02,1201.37 1651.6,1200.36 1652.19,1200.87 1652.78,1202.6 1653.36,1205.59 1653.95,1206.81 1654.54,1207.95 1655.12,1210.04 1655.71,1209.91 1656.29,1211.89 1656.88,1211.55 1657.47,1211.25 1658.05,1212.08 1658.64,1210.89 1659.23,1211.93 1659.81,1212.08 1660.4,1210.68 1660.99,1210.91 1661.57,1212.8 1662.16,1212.74 1662.75,1207.99 1663.33,1207.86 1663.92,1209.08 1664.5,1207.94 1665.09,1207.03 1665.68,1208.27 1666.26,1207.1 1666.85,1206.01 1667.44,1206.14 1668.02,1207.42 1668.61,1206.15 1669.2,1205.08 1669.78,1205.37 1670.37,1207.76 1670.96,1206.67 1671.54,1206.68 1672.13,1206.95 1672.71,1204.86 1673.3,1206.2 1673.89,1207.77 1674.47,1206.49 1675.06,1207.76 1675.65,1207.86 1676.23,1209 1676.82,1208.84 1677.41,1205.23 1677.99,1202.94 1678.58,1202.13 1679.17,1204.94 1679.75,1207.52 1680.34,1209.72 1680.92,1206.39 1681.51,1207.93 1682.1,1210.3 1682.68,1211.38 1683.27,1211.35 1683.86,1212.33 1684.44,1212.23 1685.03,1208.67 1685.62,1207.27 1686.2,1207.22 1686.79,1207.25 1687.37,1209.58 1687.96,1208.57 1688.55,1209.74 1689.13,1208.69 1689.72,1212.19 1690.31,1213.39 1690.89,1213.32 1691.48,1215.57 1692.07,1214.09 1692.65,1216.33 1693.24,1214.59 1693.83,1215.46 1694.41,1216.13 1695,1217.13 1695.58,1214.33 1696.17,1212.81 1696.76,1212.65 1697.34,1213.56 1697.93,1212.96 1698.52,1212.52 1699.1,1212.21 1699.69,1209.63 1700.28,1210.58 1700.86,1210.41 1701.45,1211.45 1702.04,1211.16 1702.62,1213.38 1703.21,1214.37 1703.79,1213.08 1704.38,1212.73 1704.97,1211.13 1705.55,1210.94 1706.14,1209.56 1706.73,1209.57 1707.31,1209.46 1707.9,1210.47 1708.49,1207.9 1709.07,1207.73 1709.66,1208.76 1710.24,1209.85 1710.83,1210.8 1711.42,1210.46 1712,1211.41 1712.59,1209.02 1713.18,1207.9 1713.76,1210.25 1714.35,1211.26 1714.94,1212.12 1715.52,1212.09 1716.11,1213.25 1716.7,1213.02 1717.28,1211.74 1717.87,1210.34 1718.45,1212.42 1719.04,1209.96 1719.63,1208.74 1720.21,1207.79 1720.8,1208.72 1721.39,1208.41 1721.97,1210.86 1722.56,1208.46 1723.15,1211.72 1723.73,1212.01 1724.32,1210.65 1724.91,1211.79 1725.49,1213.97 1726.08,1213.74 1726.66,1215.83 1727.25,1213.14 1727.84,1210.41 1728.42,1211.62 1729.01,1211.49 1729.6,1211.27 1730.18,1208.98 1730.77,1207.9 1731.36,1208.05 1731.94,1206.94 1732.53,1204.58 1733.11,1206.07 1733.7,1206.35 1734.29,1209.69 1734.87,1209.57 1735.46,1210.53 1736.05,1210.26 1736.63,1208.93 1737.22,1208.9 1737.81,1208.9 1738.39,1207.62 1738.98,1208.61 1739.57,1209.64 1740.15,1210.57 1740.74,1210.45 1741.32,1210.4 1741.91,1211.47 1742.5,1211.36 1743.08,1211.02 1743.67,1209.69 1744.26,1209.83 1744.84,1210.74 1745.43,1210.58 1746.02,1209.25 1746.6,1210.55 1747.19,1211.75 1747.78,1212.86 1748.36,1213.83 1748.95,1213.23 1749.53,1213.25 1750.12,1211.71 1750.71,1211.52 1751.29,1211.47 1751.88,1211.22 1752.47,1212.37 1753.05,1213.06 1753.64,1212.77 1754.23,1214.76 1754.81,1213.37 1755.4,1214.32 1755.99,1211.5 1756.57,1210.02 1757.16,1209.81 1757.74,1206.24 1758.33,1207.52 1758.92,1208.75 1759.5,1207.63 1760.09,1206.39 1760.68,1207.56 1761.26,1206.37 1761.85,1205.02 1762.44,1206.68 1763.02,1206.72 1763.61,1205.54 1764.19,1205.63 1764.78,1208.06 1765.37,1205.7 1765.95,1205.86 1766.54,1207.08 1767.13,1206.99 1767.71,1206.04 1768.3,1204.94 1768.89,1207.55 1769.47,1208.93 1770.06,1207.63 1770.65,1207.35 1771.23,1208.46 1771.82,1209.8 1772.4,1208.37 1772.99,1207.24 1773.58,1207.03 1774.16,1203.6 1774.75,1203.94 1775.34,1202.81 1775.92,1202.96 1776.51,1203.37 1777.1,1204.86 1777.68,1205.28 1778.27,1205.29 1778.86,1204.03 1779.44,1204.27 1780.03,1205.55 1780.61,1204.5 1781.2,1204.53 1781.79,1204.87 1782.37,1205.02 1782.96,1204.16 1783.55,1205.64 1784.13,1205.97 1784.72,1208.45 1785.31,1207.12 1785.89,1207.05 1786.48,1207.17 1787.06,1205.94 1787.65,1207.23 1788.24,1207.27 1788.82,1206.31 1789.41,1206.55 1790,1205.15 1790.58,1205.39 1791.17,1206.66 1791.76,1207.69 1792.34,1206.63 1792.93,1211.47 1793.52,1209.09 1794.1,1209.39 1794.69,1207.99 1795.27,1207.14 1795.86,1206.05 1796.45,1205.08 1797.03,1205.51 1797.62,1204.52 1798.21,1207.2 1798.79,1209.62 1799.38,1208.39 1799.97,1208.44 1800.55,1208.58 1801.14,1208.95 1801.73,1205.29 1802.31,1206.52 1802.9,1205.52 1803.48,1205.82 1804.07,1207.26 1804.66,1207.38 1805.24,1210.98 1805.83,1212.17 1806.42,1212.18 1807,1214.42 1807.59,1211.72 1808.18,1212.44 1808.76,1213.22 1809.35,1212.89 1809.94,1212.48 1810.52,1213.74 1811.11,1209.99 1811.69,1212.34 1812.28,1211.01 1812.87,1208.31 1813.45,1207.06 1814.04,1207.05 1814.63,1206.95 1815.21,1208.42 1815.8,1209.59 1816.39,1209.33 1816.97,1209.3 1817.56,1210.55 1818.14,1209.5 1818.73,1210.85 1819.32,1211.63 1819.9,1211.41 1820.49,1209.98 1821.08,1208.57 1821.66,1208.63 1822.25,1207.29 1822.84,1208.66 1823.42,1208.87 1824.01,1209.91 1824.6,1209.57 1825.18,1210.63 1825.77,1210.25 1826.35,1210.19 1826.94,1211.31 1827.53,1211 1828.11,1208.48 1828.7,1208.61 1829.29,1208.49 1829.87,1212.08 1830.46,1213.41 1831.05,1211.93 1831.63,1210.72 1832.22,1211.89 1832.81,1214.33 1833.39,1214.28 1833.98,1210.49 1834.56,1211.55 1835.15,1209.14 1835.74,1208.03 1836.32,1209.16 1836.91,1209.18 1837.5,1210.17 1838.08,1207.77 1838.67,1208.05 1839.26,1208.27 1839.84,1208.18 1840.43,1205.75 1841.01,1208.17 1841.6,1207.02 1842.19,1207.13 1842.77,1206.2 1843.36,1205.22 1843.95,1202.94 1844.53,1202.14 1845.12,1203.6 1845.71,1203.99 1846.29,1202.86 1846.88,1206.78 1847.47,1206.66 1848.05,1209.34 1848.64,1210.42 1849.22,1210.27 1849.81,1207.7 1850.4,1207.63 1850.98,1205.19 1851.57,1206.58 1852.16,1206.61 1852.74,1206.79 1853.33,1207.86 1853.92,1207.92 1854.5,1208.15 1855.09,1207.99 1855.68,1212.59 1856.26,1212.41 1856.85,1209.76 1857.43,1209.41 1858.02,1211.68 1858.61,1208.87 1859.19,1211.44 1859.78,1213.55 1860.37,1210.7 1860.95,1210.29 1861.54,1209.04 1862.13,1209.07 1862.71,1206.6 1863.3,1205.68 1863.88,1205.78 1864.47,1205.7 1865.06,1203.41 1865.64,1201.55 1866.23,1202.11 1866.82,1204.68 1867.4,1205.14 1867.99,1206.44 1868.58,1208.64 1869.16,1206.3 1869.75,1206.29 1870.34,1205.05 1870.92,1205.15 1871.51,1204.13 1872.09,1204.48 1872.68,1206.83 1873.27,1206.87 1873.85,1205.73 1874.44,1206.95 1875.03,1205.65 1875.61,1204.66 1876.2,1206.25 1876.79,1206.44 1877.37,1206.68 1877.96,1208.18 1878.55,1209.35 1879.13,1210.82 1879.72,1210.52 1880.3,1211.67 1880.89,1211.83 1881.48,1211.49 1882.06,1211.42 1882.65,1210.02 1883.24,1207.46 1883.82,1205.23 1884.41,1206.54 1885,1205.74 1885.58,1204.89 1886.17,1205.02 1886.76,1205.09 1887.34,1205.45 1887.93,1206.68 1888.51,1206.71 1889.1,1207.75 1889.69,1209.01 1890.27,1207.58 1890.86,1205.33 1891.45,1204.17 1892.03,1204.42 1892.62,1207.04 1893.21,1204.86 1893.79,1207.13 1894.38,1207.24 1894.96,1208.48 1895.55,1209.99 1896.14,1206.29 1896.72,1207.62 1897.31,1204.22 1897.9,1206.81 1898.48,1208.16 1899.07,1210.56 1899.66,1211.74 1900.24,1213.81 1900.83,1215.75 1901.42,1214.06 1902,1212.63 1902.59,1212.38 1903.17,1213.33 1903.76,1214.58 1904.35,1214.32 1904.93,1213.89 1905.52,1217.28 1906.11,1219.11 1906.69,1217.42 1907.28,1215.71 1907.87,1214.33 1908.45,1212.8 1909.04,1212.71 1909.63,1214.94 1910.21,1217.02 1910.8,1215.21 1911.38,1214.96 1911.97,1213.36 1912.56,1211.94 1913.14,1208.24 1913.73,1208.22 1914.32,1208.4 1914.9,1208.3 1915.49,1207.21 1916.08,1206.06 1916.66,1204.96 1917.25,1204.22 1917.83,1204.65 1918.42,1207.14 1919.01,1206.2 1919.59,1207.26 1920.18,1208.36 1920.77,1207.23 1921.35,1206.2 1921.94,1206.36 1922.53,1205.42 1923.11,1204.34 1923.7,1205.73 1924.29,1205.94 1924.87,1208.39 1925.46,1206.08 1926.04,1207.49 1926.63,1207.78 1927.22,1210 1927.8,1208.94 1928.39,1207.78 1928.98,1208.92 1929.56,1208.08 1930.15,1207.89 1930.74,1207.87 1931.32,1205.7 1931.91,1204.73 1932.5,1204.87 1933.08,1207.58 1933.67,1206.43 1934.25,1205.3 1934.84,1206.69 1935.43,1208 1936.01,1209.14 1936.6,1210.26 1937.19,1210 1937.77,1210.85 1938.36,1209.55 1938.95,1208.19 1939.53,1207 1940.12,1207.06 1940.71,1205.95 1941.29,1207.28 1941.88,1208.4 1942.46,1208.32 1943.05,1210.33 1943.64,1209.05 1944.22,1210.17 1944.81,1211.15 1945.4,1211.13 1945.98,1212.35 1946.57,1210.87 1947.16,1210.71 1947.74,1210.48 1948.33,1210.33 1948.91,1209.25 1949.5,1210.55 1950.09,1211.54 1950.67,1207.88 1951.26,1206.97 1951.85,1209.34 1952.43,1210.41 1953.02,1210.07 1953.61,1211.16 1954.19,1209.9 1954.78,1208.57 1955.37,1206.38 1955.95,1205.58 1956.54,1205.46 1957.12,1205.58 1957.71,1206.81 1958.3,1208.17 1958.88,1209.45 1959.47,1209.67 1960.06,1208.58 1960.64,1206.31 1961.23,1205.31 1961.82,1206.69 1962.4,1205.64 1962.99,1203.38 1963.58,1204.7 1964.16,1204.86 1964.75,1205.21 1965.33,1203.12 1965.92,1203.42 1966.51,1202.58 1967.09,1201.7 1967.68,1203.06 1968.27,1203.19 1968.85,1201.11 1969.44,1203.66 1970.03,1203.87 1970.61,1204.23 1971.2,1204.25 1971.78,1204.88 1972.37,1202.73 1972.96,1204.18 1973.54,1204.32 1974.13,1206.76 1974.72,1207.03 1975.3,1205.94 1975.89,1204.79 1976.48,1206.12 1977.06,1208.71 1977.65,1208.48 1978.24,1208.51 1978.82,1208.65 1979.41,1207.55 1979.99,1207.53 1980.58,1209.73 1981.17,1208.22 1981.75,1208.35 1982.34,1209.16 1982.93,1209.07 1983.51,1205.56 1984.1,1207.06 1984.69,1209.35 1985.27,1208.09 1985.86,1209.28 1986.45,1206.99 1987.03,1205.72 1987.62,1208.29 1988.2,1207.05 1988.79,1208.29 1989.38,1207.17 1989.96,1204.82 1990.55,1204.91 1991.14,1208.68 1991.72,1209.78 1992.31,1210.73 1992.9,1210.64 1993.48,1208.4 1994.07,1206.96 1994.65,1206.91 1995.24,1205.75 1995.83,1205.99 1996.41,1207.43 1997,1207.63 1997.59,1209.11 1998.17,1213.54 1998.76,1212.11 1999.35,1211.6 1999.93,1212.7 2000.52,1213.75 2001.11,1213.36 2001.69,1211.72 2002.28,1211.76 2002.86,1212.48 2003.45,1211.24 2004.04,1211.1 2004.62,1214.93 2005.21,1213.48 2005.8,1212.25 2006.38,1210.8 2006.97,1210.91 2007.56,1211.53 2008.14,1211.43 2008.73,1212.3 2009.32,1209.77 2009.9,1212.34 2010.49,1211.13 2011.07,1211.08 2011.66,1209.65 2012.25,1209.69 2012.83,1211.94 2013.42,1208.22 2014.01,1206.1 2014.59,1206.29 2015.18,1205.16 2015.77,1205.06 2016.35,1205.14 2016.94,1205.14 2017.53,1206.36 2018.11,1206.37 2018.7,1204.16 2019.28,1206.59 2019.87,1204.37 2020.46,1206.83 2021.04,1205.71 2021.63,1205.89 2022.22,1204.78 2022.8,1206.38 2023.39,1206.38 2023.98,1206.15 2024.56,1206.06 2025.15,1203.87 2025.73,1205.57 2026.32,1208.3 2026.91,1208.57 2027.49,1210.82 2028.08,1207.15 2028.67,1207.36 2029.25,1207.38 2029.84,1207.54 2030.43,1206.44 2031.01,1206.55 2031.6,1205.55 2032.19,1206.89 2032.77,1207.02 2033.36,1211.57 2033.94,1212.29 2034.53,1213.17 2035.12,1213 2035.7,1213.82 2036.29,1213.43 2036.88,1212.14 2037.46,1214.16 2038.05,1212.58 2038.64,1214.67 2039.22,1213.28 2039.81,1216.66 2040.4,1215.2 2040.98,1217.23 2041.57,1214.61 2042.15,1218.95 2042.74,1218.29 2043.33,1217.74 2043.91,1217.31 2044.5,1214.74 2045.09,1214.35 2045.67,1215.33 2046.26,1216.19 2046.85,1215.84 2047.43,1216.74 2048.02,1214.92 2048.6,1214.55 2049.19,1214.15 2049.78,1213.91 2050.36,1213.37 2050.95,1213.37 2051.54,1211.75 2052.12,1211.62 2052.71,1210.28 2053.3,1209.94 2053.88,1210.08 2054.47,1206.44 2055.06,1206.55 2055.64,1206.76 2056.23,1206.97 2056.81,1207.02 2057.4,1207.06 2057.99,1207.11 2058.57,1206.05 2059.16,1207.17 2059.75,1205 2060.33,1206.46 2060.92,1205.52 2061.51,1205.61 2062.09,1207.04 2062.68,1207.01 2063.27,1208.2 2063.85,1207.87 2064.44,1211.65 2065.02,1208.96 2065.61,1207.89 2066.2,1210.09 2066.78,1212 2067.37,1211.91 2067.96,1210.63 2068.54,1209.39 2069.13,1206.8 2069.72,1205.59 2070.3,1206.05 2070.89,1207.39 2071.48,1210.97 2072.06,1211.14 2072.65,1213.16 2073.23,1211.51 2073.82,1209.97 2074.41,1206.44 2074.99,1209.05 2075.58,1210.24 2076.17,1207.9 2076.75,1206.65 2077.34,1205.43 2077.93,1200.97 2078.51,1202.53 2079.1,1201.37 2079.68,1201.7 2080.27,1202.37 2080.86,1201.24 2081.44,1202.75 2082.03,1202.17 2082.62,1203.72 2083.2,1204.94 2083.79,1207.39 2084.38,1208.29 2084.96,1208.29 2085.55,1204.71 2086.14,1203.76 2086.72,1201.92 2087.31,1203.66 2087.89,1204.14 2088.48,1204.5 2089.07,1204.71 2089.65,1204.67 2090.24,1203.84 2090.83,1202.7 2091.41,1202.97 2092,1204.4 2092.59,1202.08 2093.17,1204.75 2093.76,1201.61 2094.35,1203.22 2094.93,1204.45 2095.52,1204.7 2096.1,1205.07 2096.69,1202.05 2097.28,1203.74 2097.86,1204.06 2098.45,1204.4 2099.04,1204.56 2099.62,1203.59 2100.21,1206.4 2100.8,1207.8 2101.38,1209.26 2101.97,1208.1 2102.55,1208.08 2103.14,1210.6 2103.73,1210.39 2104.31,1209.35 2104.9,1208.89 2105.49,1209.87 2106.07,1212.27 2106.66,1210.97 2107.25,1210.74 2107.83,1210.69 2108.42,1213.14 2109.01,1211.73 2109.59,1211.32 2110.18,1212.37 2110.76,1210.92 2111.35,1210.75 2111.94,1211.98 2112.52,1212.87 2113.11,1211.41 2113.7,1211.3 2114.28,1214.73 2114.87,1214.37 2115.46,1212.89 2116.04,1214.89 2116.63,1215.55 2117.22,1216.31 2117.8,1215.77 2118.39,1215.45 2118.97,1213.72 2119.56,1211.03 2120.15,1212.15 2120.73,1210.99 2121.32,1207.24 2121.91,1205.85 2122.49,1208.46 2123.08,1208.41 2123.67,1207.47 2124.25,1207.42 2124.84,1208.82 2125.42,1208.62 2126.01,1209.96 2126.6,1208.63 2127.18,1209.74 2127.77,1209.43 2128.36,1210.62 2128.94,1209.24 2129.53,1210.27 2130.12,1211.1 2130.7,1209.85 2131.29,1208.61 2131.88,1207.44 2132.46,1207.54 2133.05,1206.04 2133.63,1206 2134.22,1204.74 2134.81,1203.76 2135.39,1203.99 2135.98,1204.27 2136.57,1206.93 2137.15,1208.02 2137.74,1206.94 2138.33,1205.96 2138.91,1205.16 2139.5,1205.11 2140.09,1206.63 2140.67,1204.37 2141.26,1204.62 2141.84,1205.95 2142.43,1208.34 2143.02,1209.38 2143.6,1205.92 2144.19,1207.14 2144.78,1203.62 2145.36,1202.53 2145.95,1202.93 2146.54,1204.53 2147.12,1201.08 2147.71,1200.22 2148.3,1200.61 2148.88,1202.25 2149.47,1202.67 2150.05,1202.96 2150.64,1203.22 2151.23,1204.62 2151.81,1208.18 2152.4,1214 2152.99,1214.83 2153.57,1214.4 2154.16,1212.9 2154.75,1212.74 2155.33,1213.7 2155.92,1213.38 2156.5,1214.33 2157.09,1214.05 2157.68,1213.92 2158.26,1215.95 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1208.79 L986.612 1208.79 L987.198 1208.79 L987.785 1208.79 L988.371 1208.79 L988.957 1208.79 L989.544 1208.79 L990.13 1208.79 L990.717 1208.79 L991.303 1208.79 L991.889 1208.79 L992.476 1208.79 L993.062 1208.79 L993.649 1208.79 L994.235 1208.79 L994.822 1208.79 L995.408 1208.79 L995.994 1208.79 L996.581 1208.79 L997.167 1208.79 L997.754 1208.79 L998.34 1208.79 L998.926 1208.79 L999.513 1208.79 L1000.1 1208.79 L1000.69 1208.79 L1001.27 1208.79 L1001.86 1208.79 L1002.44 1208.79 L1003.03 1208.79 L1003.62 1208.79 L1004.2 1208.79 L1004.79 1208.79 L1005.38 1208.79 L1005.96 1208.79 L1006.55 1208.79 L1007.14 1208.79 L1007.72 1208.79 L1008.31 1208.79 L1008.9 1208.79 L1009.48 1208.79 L1010.07 1208.79 L1010.65 1208.79 L1011.24 1208.79 L1011.83 1208.79 L1012.41 1208.79 L1013 1208.79 L1013.59 1208.79 L1014.17 1208.79 L1014.76 1208.79 L1015.35 1208.79 L1015.93 1208.79 L1016.52 1208.79 L1017.11 1208.79 L1017.69 1208.79 L1018.28 1208.79 L1018.86 1208.79 L1019.45 1208.79 L1020.04 1208.79 L1020.62 1208.79 L1021.21 1208.79 L1021.8 1208.79 L1022.38 1208.79 L1022.97 1208.79 L1023.56 1208.79 L1024.14 1208.79 L1024.73 1208.79 L1025.32 1208.79 L1025.9 1208.79 L1026.49 1208.79 L1027.07 1208.79 L1027.66 1208.79 L1028.25 1208.79 L1028.83 1208.79 L1029.42 1208.79 L1030.01 1208.79 L1030.59 1208.79 L1031.18 1208.79 L1031.77 1208.79 L1032.35 1208.79 L1032.94 1208.79 L1033.52 1208.79 L1034.11 1208.79 L1034.7 1208.79 L1035.28 1208.79 L1035.87 1208.79 L1036.46 1208.79 L1037.04 1208.79 L1037.63 1208.79 L1038.22 1208.79 L1038.8 1208.79 L1039.39 1208.79 L1039.98 1208.79 L1040.56 1208.79 L1041.15 1208.79 L1041.73 1208.79 L1042.32 1208.79 L1042.91 1208.79 L1043.49 1208.79 L1044.08 1208.79 L1044.67 1208.79 L1045.25 1208.79 L1045.84 1208.79 L1046.43 1208.79 L1047.01 1208.79 L1047.6 1208.79 L1048.19 1208.79 L1048.77 1208.79 L1049.36 1208.79 L1049.94 1208.79 L1050.53 1208.79 L1051.12 1208.79 L1051.7 1208.79 L1052.29 1208.79 L1052.88 1208.79 L1053.46 1208.79 L1054.05 1208.79 L1054.64 1208.79 L1055.22 1208.79 L1055.81 1208.79 L1056.39 1208.79 L1056.98 1208.79 L1057.57 1208.79 L1058.15 1208.79 L1058.74 1208.79 L1059.33 1208.79 L1059.91 1208.79 L1060.5 1208.79 L1061.09 1208.79 L1061.67 1208.79 L1062.26 1208.79 L1062.85 1208.79 L1063.43 1208.79 L1064.02 1208.79 L1064.6 1208.79 L1065.19 1208.79 L1065.78 1208.79 L1066.36 1208.79 L1066.95 1208.79 L1067.54 1208.79 L1068.12 1208.79 L1068.71 1208.79 L1069.3 1208.79 L1069.88 1208.79 L1070.47 1208.79 L1071.06 1208.79 L1071.64 1208.79 L1072.23 1208.79 L1072.81 1208.79 L1073.4 1208.79 L1073.99 1208.79 L1074.57 1208.79 L1075.16 1208.79 L1075.75 1208.79 L1076.33 1208.79 L1076.92 1208.79 L1077.51 1208.79 L1078.09 1208.79 L1078.68 1208.79 L1079.26 1208.79 L1079.85 1208.79 L1080.44 1208.79 L1081.02 1208.79 L1081.61 1208.79 L1082.2 1208.79 L1082.78 1208.79 L1083.37 1208.79 L1083.96 1208.79 L1084.54 1208.79 L1085.13 1208.79 L1085.72 1208.79 L1086.3 1208.79 L1086.89 1208.79 L1087.47 1208.79 L1088.06 1208.79 L1088.65 1208.79 L1089.23 1208.79 L1089.82 1208.79 L1090.41 1208.79 L1090.99 1208.79 L1091.58 1208.79 L1092.17 1208.79 L1092.75 1208.79 L1093.34 1208.79 L1093.93 1208.79 L1094.51 1208.79 L1095.1 1208.79 L1095.68 1208.79 L1096.27 1208.79 L1096.86 1208.79 L1097.44 1208.79 L1098.03 1208.79 L1098.62 1208.79 L1099.2 1208.79 L1099.79 1208.79 L1100.38 1208.79 L1100.96 1208.79 L1101.55 1208.79 L1102.14 1208.79 L1102.72 1208.79 L1103.31 1208.79 L1103.89 1208.79 L1104.48 1208.79 L1105.07 1208.79 L1105.65 1208.79 L1106.24 1208.79 L1106.83 1208.79 L1107.41 1208.79 L1108 1208.79 L1108.59 1208.79 L1109.17 1208.79 L1109.76 1208.79 L1110.34 1208.79 L1110.93 1208.79 L1111.52 1208.79 L1112.1 1208.79 L1112.69 1208.79 L1113.28 1208.79 L1113.86 1208.79 L1114.45 1208.79 L1115.04 1208.79 L1115.62 1208.79 L1116.21 1208.79 L1116.8 1208.79 L1117.38 1208.79 L1117.97 1208.79 L1118.55 1208.79 L1119.14 1208.79 L1119.73 1208.79 L1120.31 1208.79 L1120.9 1208.79 L1121.49 1208.79 L1122.07 1208.79 L1122.66 1208.79 L1123.25 1208.79 L1123.83 1208.79 L1124.42 1208.79 L1125.01 1208.79 L1125.59 1208.79 L1126.18 1208.79 L1126.76 1208.79 L1127.35 1208.79 L1127.94 1208.79 L1128.52 1208.79 L1129.11 1208.79 L1129.7 1208.79 L1130.28 1208.79 L1130.87 1208.79 L1131.46 1208.79 L1132.04 1208.79 L1132.63 1208.79 L1133.21 1208.79 L1133.8 1208.79 L1134.39 1208.79 L1134.97 1208.79 L1135.56 1208.79 L1136.15 1208.79 L1136.73 1208.79 L1137.32 1208.79 L1137.91 1208.79 L1138.49 1208.79 L1139.08 1208.79 L1139.67 1208.79 L1140.25 1208.79 L1140.84 1208.79 L1141.42 1208.79 L1142.01 1208.79 L1142.6 1208.79 L1143.18 1208.79 L1143.77 1208.79 L1144.36 1208.79 L1144.94 1208.79 L1145.53 1208.79 L1146.12 1208.79 L1146.7 1208.79 L1147.29 1208.79 L1147.88 1208.79 L1148.46 1208.79 L1149.05 1208.79 L1149.63 1208.79 L1150.22 1208.79 L1150.81 1208.79 L1151.39 1208.79 L1151.98 1208.79 L1152.57 1208.79 L1153.15 1208.79 L1153.74 1208.79 L1154.33 1208.79 L1154.91 1208.79 L1155.5 1208.79 L1156.09 1208.79 L1156.67 1208.79 L1157.26 1208.79 L1157.84 1208.79 L1158.43 1208.79 L1159.02 1208.79 L1159.6 1208.79 L1160.19 1208.79 L1160.78 1208.79 L1161.36 1208.79 L1161.95 1208.79 L1162.54 1208.79 L1163.12 1208.79 L1163.71 1208.79 L1164.29 1208.79 L1164.88 1208.79 L1165.47 1208.79 L1166.05 1208.79 L1166.64 1208.79 L1167.23 1208.79 L1167.81 1208.79 L1168.4 1208.79 L1168.99 1208.79 L1169.57 1208.79 L1170.16 1208.79 L1170.75 1208.79 L1171.33 1208.79 L1171.92 1208.79 L1172.5 1208.79 L1173.09 1208.79 L1173.68 1208.79 L1174.26 1208.79 L1174.85 1208.79 L1175.44 1208.79 L1176.02 1208.79 L1176.61 1208.79 L1177.2 1208.79 L1177.78 1208.79 L1178.37 1208.79 L1178.96 1208.79 L1179.54 1208.79 L1180.13 1208.79 L1180.71 1208.79 L1181.3 1208.79 L1181.89 1208.79 L1182.47 1208.79 L1183.06 1208.79 L1183.65 1208.79 L1184.23 1208.79 L1184.82 1208.79 L1185.41 1208.79 L1185.99 1208.79 L1186.58 1208.79 L1187.16 1208.79 L1187.75 1208.79 L1188.34 1208.79 L1188.92 1208.79 L1189.51 1208.79 L1190.1 1208.79 L1190.68 1208.79 L1191.27 1208.79 L1191.86 1208.79 L1192.44 1208.79 L1193.03 1208.79 L1193.62 1208.79 L1194.2 1208.79 L1194.79 1208.79 L1195.37 1208.79 L1195.96 1208.79 L1196.55 1208.79 L1197.13 1208.79 L1197.72 1208.79 L1198.31 1208.79 L1198.89 1208.79 L1199.48 1208.79 L1200.07 1208.79 L1200.65 1208.79 L1201.24 1208.79 L1201.83 1208.79 L1202.41 1208.79 L1203 1208.79 L1203.58 1208.79 L1204.17 1208.79 L1204.76 1208.79 L1205.34 1208.79 L1205.93 1208.79 L1206.52 1208.79 L1207.1 1208.79 L1207.69 1208.79 L1208.28 1208.79 L1208.86 1208.79 L1209.45 1208.79 L1210.03 1208.79 L1210.62 1208.79 L1211.21 1208.79 L1211.79 1208.79 L1212.38 1208.79 L1212.97 1208.79 L1213.55 1208.79 L1214.14 1208.79 L1214.73 1208.79 L1215.31 1208.79 L1215.9 1208.79 L1216.49 1208.79 L1217.07 1208.79 L1217.66 1208.79 L1218.24 1208.79 L1218.83 1208.79 L1219.42 1208.79 L1220 1208.79 L1220.59 1208.79 L1221.18 1208.79 L1221.76 1208.79 L1222.35 1208.79 L1222.94 1208.79 L1223.52 1208.79 L1224.11 1208.79 L1224.7 1208.79 L1225.28 1208.79 L1225.87 1208.79 L1226.45 1208.79 L1227.04 1208.79 L1227.63 1208.79 L1228.21 1208.79 L1228.8 1208.79 L1229.39 1208.79 L1229.97 1208.79 L1230.56 1208.79 L1231.15 1208.79 L1231.73 1208.79 L1232.32 1208.79 L1232.91 1208.79 L1233.49 1208.79 L1234.08 1208.79 L1234.66 1208.79 L1235.25 1208.79 L1235.84 1208.79 L1236.42 1208.79 L1237.01 1208.79 L1237.6 1208.79 L1238.18 1208.79 L1238.77 1208.79 L1239.36 1208.79 L1239.94 1208.79 L1240.53 1208.79 L1241.11 1208.79 L1241.7 1208.79 L1242.29 1208.79 L1242.87 1208.79 L1243.46 1208.79 L1244.05 1208.79 L1244.63 1208.79 L1245.22 1208.79 L1245.81 1208.79 L1246.39 1208.79 L1246.98 1208.79 L1247.57 1208.79 L1248.15 1208.79 L1248.74 1208.79 L1249.32 1208.79 L1249.91 1208.79 L1250.5 1208.79 L1251.08 1208.79 L1251.67 1208.79 L1252.26 1208.79 L1252.84 1208.79 L1253.43 1208.79 L1254.02 1208.79 L1254.6 1208.79 L1255.19 1208.79 L1255.78 1208.79 L1256.36 1208.79 L1256.95 1208.79 L1257.53 1208.79 L1258.12 1208.79 L1258.71 1208.79 L1259.29 1208.79 L1259.88 1208.79 L1260.47 1208.79 L1261.05 1208.79 L1261.64 1208.79 L1262.23 1208.79 L1262.81 1208.79 L1263.4 1208.79 L1263.98 1208.79 L1264.57 1208.79 L1265.16 1208.79 L1265.74 1208.79 L1266.33 1208.79 L1266.92 1208.79 L1267.5 1208.79 L1268.09 1208.79 L1268.68 1208.79 L1269.26 1208.79 L1269.85 1208.79 L1270.44 1208.79 L1271.02 1208.79 L1271.61 1208.79 L1272.19 1208.79 L1272.78 1208.79 L1273.37 1208.79 L1273.95 1208.79 L1274.54 1208.79 L1275.13 1208.79 L1275.71 1208.79 L1276.3 1208.79 L1276.89 1208.79 L1277.47 1208.79 L1278.06 1208.79 L1278.65 1208.79 L1279.23 1208.79 L1279.82 1208.79 L1280.4 1208.79 L1280.99 1208.79 L1281.58 1208.79 L1282.16 1208.79 L1282.75 1208.79 L1283.34 1208.79 L1283.92 1208.79 L1284.51 1208.79 L1285.1 1208.79 L1285.68 1208.79 L1286.27 1208.79 L1286.86 1208.79 L1287.44 1208.79 L1288.03 1208.79 L1288.61 1208.79 L1289.2 1208.79 L1289.79 1208.79 L1290.37 1208.79 L1290.96 1208.79 L1291.55 1208.79 L1292.13 1208.79 L1292.72 1208.79 L1293.31 1208.79 L1293.89 1208.79 L1294.48 1208.79 L1295.06 1208.79 L1295.65 1208.79 L1296.24 1208.79 L1296.82 1208.79 L1297.41 1208.79 L1298 1208.79 L1298.58 1208.79 L1299.17 1208.79 L1299.76 1208.79 L1300.34 1208.79 L1300.93 1208.79 L1301.52 1208.79 L1302.1 1208.79 L1302.69 1208.79 L1303.27 1208.79 L1303.86 1208.79 L1304.45 1208.79 L1305.03 1208.79 L1305.62 1208.79 L1306.21 1208.79 L1306.79 1208.79 L1307.38 1208.79 L1307.97 1208.79 L1308.55 1208.79 L1309.14 1208.79 L1309.73 1208.79 L1310.31 1208.79 L1310.9 1208.79 L1311.48 1208.79 L1312.07 1208.79 L1312.66 1208.79 L1313.24 1208.79 L1313.83 1208.79 L1314.42 1208.79 L1315 1208.79 L1315.59 1208.79 L1316.18 1208.79 L1316.76 1208.79 L1317.35 1208.79 L1317.93 1208.79 L1318.52 1208.79 L1319.11 1208.79 L1319.69 1208.79 L1320.28 1208.79 L1320.87 1208.79 L1321.45 1208.79 L1322.04 1208.79 L1322.63 1208.79 L1323.21 1208.79 L1323.8 1208.79 L1324.39 1208.79 L1324.97 1208.79 L1325.56 1208.79 L1326.14 1208.79 L1326.73 1208.79 L1327.32 1208.79 L1327.9 1208.79 L1328.49 1208.79 L1329.08 1208.79 L1329.66 1208.79 L1330.25 1208.79 L1330.84 1208.79 L1331.42 1208.79 L1332.01 1208.79 L1332.6 1208.79 L1333.18 1208.79 L1333.77 1208.79 L1334.35 1208.79 L1334.94 1208.79 L1335.53 1208.79 L1336.11 1208.79 L1336.7 1208.79 L1337.29 1208.79 L1337.87 1208.79 L1338.46 1208.79 L1339.05 1208.79 L1339.63 1208.79 L1340.22 1208.79 L1340.8 1208.79 L1341.39 1208.79 L1341.98 1208.79 L1342.56 1208.79 L1343.15 1208.79 L1343.74 1208.79 L1344.32 1208.79 L1344.91 1208.79 L1345.5 1208.79 L1346.08 1208.79 L1346.67 1208.79 L1347.26 1208.79 L1347.84 1208.79 L1348.43 1208.79 L1349.01 1208.79 L1349.6 1208.79 L1350.19 1208.79 L1350.77 1208.79 L1351.36 1208.79 L1351.95 1208.79 L1352.53 1208.79 L1353.12 1208.79 L1353.71 1208.79 L1354.29 1208.79 L1354.88 1208.79 L1355.47 1208.79 L1356.05 1208.79 L1356.64 1208.79 L1357.22 1208.79 L1357.81 1208.79 L1358.4 1208.79 L1358.98 1208.79 L1359.57 1208.79 L1360.16 1208.79 L1360.74 1208.79 L1361.33 1208.79 L1361.92 1208.79 L1362.5 1208.79 L1363.09 1208.79 L1363.68 1208.79 L1364.26 1208.79 L1364.85 1208.79 L1365.43 1208.79 L1366.02 1208.79 L1366.61 1208.79 L1367.19 1208.79 L1367.78 1208.79 L1368.37 1208.79 L1368.95 1208.79 L1369.54 1208.79 L1370.13 1208.79 L1370.71 1208.79 L1371.3 1208.79 L1371.88 1208.79 L1372.47 1208.79 L1373.06 1208.79 L1373.64 1208.79 L1374.23 1208.79 L1374.82 1208.79 L1375.4 1208.79 L1375.99 1208.79 L1376.58 1208.79 L1377.16 1208.79 L1377.75 1208.79 L1378.34 1208.79 L1378.92 1208.79 L1379.51 1208.79 L1380.09 1208.79 L1380.68 1208.79 L1381.27 1208.79 L1381.85 1208.79 L1382.44 1208.79 L1383.03 1208.79 L1383.61 1208.79 L1384.2 1208.79 L1384.79 1208.79 L1385.37 1208.79 L1385.96 1208.79 L1386.55 1208.79 L1387.13 1208.79 L1387.72 1208.79 L1388.3 1208.79 L1388.89 1208.79 L1389.48 1208.79 L1390.06 1208.79 L1390.65 1208.79 L1391.24 1208.79 L1391.82 1208.79 L1392.41 1208.79 L1393 1208.79 L1393.58 1208.79 L1394.17 1208.79 L1394.75 1208.79 L1395.34 1208.79 L1395.93 1208.79 L1396.51 1208.79 L1397.1 1208.79 L1397.69 1208.79 L1398.27 1208.79 L1398.86 1208.79 L1399.45 1208.79 L1400.03 1208.79 L1400.62 1208.79 L1401.21 1208.79 L1401.79 1208.79 L1402.38 1208.79 L1402.96 1208.79 L1403.55 1208.79 L1404.14 1208.79 L1404.72 1208.79 L1405.31 1208.79 L1405.9 1208.79 L1406.48 1208.79 L1407.07 1208.79 L1407.66 1208.79 L1408.24 1208.79 L1408.83 1208.79 L1409.42 1208.79 L1410 1208.79 L1410.59 1208.79 L1411.17 1208.79 L1411.76 1208.79 L1412.35 1208.79 L1412.93 1208.79 L1413.52 1208.79 L1414.11 1208.79 L1414.69 1208.79 L1415.28 1208.79 L1415.87 1208.79 L1416.45 1208.79 L1417.04 1208.79 L1417.63 1208.79 L1418.21 1208.79 L1418.8 1208.79 L1419.38 1208.79 L1419.97 1208.79 L1420.56 1208.79 L1421.14 1208.79 L1421.73 1208.79 L1422.32 1208.79 L1422.9 1208.79 L1423.49 1208.79 L1424.08 1208.79 L1424.66 1208.79 L1425.25 1208.79 L1425.83 1208.79 L1426.42 1208.79 L1427.01 1208.79 L1427.59 1208.79 L1428.18 1208.79 L1428.77 1208.79 L1429.35 1208.79 L1429.94 1208.79 L1430.53 1208.79 L1431.11 1208.79 L1431.7 1208.79 L1432.29 1208.79 L1432.87 1208.79 L1433.46 1208.79 L1434.04 1208.79 L1434.63 1208.79 L1435.22 1208.79 L1435.8 1208.79 L1436.39 1208.79 L1436.98 1208.79 L1437.56 1208.79 L1438.15 1208.79 L1438.74 1208.79 L1439.32 1208.79 L1439.91 1208.79 L1440.5 1208.79 L1441.08 1208.79 L1441.67 1208.79 L1442.25 1208.79 L1442.84 1208.79 L1443.43 1208.79 L1444.01 1208.79 L1444.6 1208.79 L1445.19 1208.79 L1445.77 1208.79 L1446.36 1208.79 L1446.95 1208.79 L1447.53 1208.79 L1448.12 1208.79 L1448.7 1208.79 L1449.29 1208.79 L1449.88 1208.79 L1450.46 1208.79 L1451.05 1208.79 L1451.64 1208.79 L1452.22 1208.79 L1452.81 1208.79 L1453.4 1208.79 L1453.98 1208.79 L1454.57 1208.79 L1455.16 1208.79 L1455.74 1208.79 L1456.33 1208.79 L1456.91 1208.79 L1457.5 1208.79 L1458.09 1208.79 L1458.67 1208.79 L1459.26 1208.79 L1459.85 1208.79 L1460.43 1208.79 L1461.02 1208.79 L1461.61 1208.79 L1462.19 1208.79 L1462.78 1208.79 L1463.37 1208.79 L1463.95 1208.79 L1464.54 1208.79 L1465.12 1208.79 L1465.71 1208.79 L1466.3 1208.79 L1466.88 1208.79 L1467.47 1208.79 L1468.06 1208.79 L1468.64 1208.79 L1469.23 1208.79 L1469.82 1208.79 L1470.4 1208.79 L1470.99 1208.79 L1471.57 1208.79 L1472.16 1208.79 L1472.75 1208.79 L1473.33 1208.79 L1473.92 1208.79 L1474.51 1208.79 L1475.09 1208.79 L1475.68 1208.79 L1476.27 1208.79 L1476.85 1208.79 L1477.44 1208.79 L1478.03 1208.79 L1478.61 1208.79 L1479.2 1208.79 L1479.78 1208.79 L1480.37 1208.79 L1480.96 1208.79 L1481.54 1208.79 L1482.13 1208.79 L1482.72 1208.79 L1483.3 1208.79 L1483.89 1208.79 L1484.48 1208.79 L1485.06 1208.79 L1485.65 1208.79 L1486.24 1208.79 L1486.82 1208.79 L1487.41 1208.79 L1487.99 1208.79 L1488.58 1208.79 L1489.17 1208.79 L1489.75 1208.79 L1490.34 1208.79 L1490.93 1208.79 L1491.51 1208.79 L1492.1 1208.79 L1492.69 1208.79 L1493.27 1208.79 L1493.86 1208.79 L1494.45 1208.79 L1495.03 1208.79 L1495.62 1208.79 L1496.2 1208.79 L1496.79 1208.79 L1497.38 1208.79 L1497.96 1208.79 L1498.55 1208.79 L1499.14 1208.79 L1499.72 1208.79 L1500.31 1208.79 L1500.9 1208.79 L1501.48 1208.79 L1502.07 1208.79 L1502.65 1208.79 L1503.24 1208.79 L1503.83 1208.79 L1504.41 1208.79 L1505 1208.79 L1505.59 1208.79 L1506.17 1208.79 L1506.76 1208.79 L1507.35 1208.79 L1507.93 1208.79 L1508.52 1208.79 L1509.11 1208.79 L1509.69 1208.79 L1510.28 1208.79 L1510.86 1208.79 L1511.45 1208.79 L1512.04 1208.79 L1512.62 1208.79 L1513.21 1208.79 L1513.8 1208.79 L1514.38 1208.79 L1514.97 1208.79 L1515.56 1208.79 L1516.14 1208.79 L1516.73 1208.79 L1517.32 1208.79 L1517.9 1208.79 L1518.49 1208.79 L1519.07 1208.79 L1519.66 1208.79 L1520.25 1208.79 L1520.83 1208.79 L1521.42 1208.79 L1522.01 1208.79 L1522.59 1208.79 L1523.18 1208.79 L1523.77 1208.79 L1524.35 1208.79 L1524.94 1208.79 L1525.52 1208.79 L1526.11 1208.79 L1526.7 1208.79 L1527.28 1208.79 L1527.87 1208.79 L1528.46 1208.79 L1529.04 1208.79 L1529.63 1208.79 L1530.22 1208.79 L1530.8 1208.79 L1531.39 1208.79 L1531.98 1208.79 L1532.56 1208.79 L1533.15 1208.79 L1533.73 1208.79 L1534.32 1208.79 L1534.91 1208.79 L1535.49 1208.79 L1536.08 1208.79 L1536.67 1208.79 L1537.25 1208.79 L1537.84 1208.79 L1538.43 1208.79 L1539.01 1208.79 L1539.6 1208.79 L1540.19 1208.79 L1540.77 1208.79 L1541.36 1208.79 L1541.94 1208.79 L1542.53 1208.79 L1543.12 1208.79 L1543.7 1208.79 L1544.29 1208.79 L1544.88 1208.79 L1545.46 1208.79 L1546.05 1208.79 L1546.64 1208.79 L1547.22 1208.79 L1547.81 1208.79 L1548.4 1208.79 L1548.98 1208.79 L1549.57 1208.79 L1550.15 1208.79 L1550.74 1208.79 L1551.33 1208.79 L1551.91 1208.79 L1552.5 1208.79 L1553.09 1208.79 L1553.67 1208.79 L1554.26 1208.79 L1554.85 1208.79 L1555.43 1208.79 L1556.02 1208.79 L1556.6 1208.79 L1557.19 1208.79 L1557.78 1208.79 L1558.36 1208.79 L1558.95 1208.79 L1559.54 1208.79 L1560.12 1208.79 L1560.71 1208.79 L1561.3 1208.79 L1561.88 1208.79 L1562.47 1208.79 L1563.06 1208.79 L1563.64 1208.79 L1564.23 1208.79 L1564.81 1208.79 L1565.4 1208.79 L1565.99 1208.79 L1566.57 1208.79 L1567.16 1208.79 L1567.75 1208.79 L1568.33 1208.79 L1568.92 1208.79 L1569.51 1208.79 L1570.09 1208.79 L1570.68 1208.79 L1571.27 1208.79 L1571.85 1208.79 L1572.44 1208.79 L1573.02 1208.79 L1573.61 1208.79 L1574.2 1208.79 L1574.78 1208.79 L1575.37 1208.79 L1575.96 1208.79 L1576.54 1208.79 L1577.13 1208.79 L1577.72 1208.79 L1578.3 1208.79 L1578.89 1208.79 L1579.47 1208.79 L1580.06 1208.79 L1580.65 1208.79 L1581.23 1208.79 L1581.82 1208.79 L1582.41 1208.79 L1582.99 1208.79 L1583.58 1208.79 L1584.17 1208.79 L1584.75 1208.79 L1585.34 1208.79 L1585.93 1208.79 L1586.51 1208.79 L1587.1 1208.79 L1587.68 1208.79 L1588.27 1208.79 L1588.86 1208.79 L1589.44 1208.79 L1590.03 1208.79 L1590.62 1208.79 L1591.2 1208.79 L1591.79 1208.79 L1592.38 1208.79 L1592.96 1208.79 L1593.55 1208.79 L1594.14 1208.79 L1594.72 1208.79 L1595.31 1208.79 L1595.89 1208.79 L1596.48 1208.79 L1597.07 1208.79 L1597.65 1208.79 L1598.24 1208.79 L1598.83 1208.79 L1599.41 1208.79 L1600 1208.79 L1600.59 1208.79 L1601.17 1208.79 L1601.76 1208.79 L1602.34 1208.79 L1602.93 1208.79 L1603.52 1208.79 L1604.1 1208.79 L1604.69 1208.79 L1605.28 1208.79 L1605.86 1208.79 L1606.45 1208.79 L1607.04 1208.79 L1607.62 1208.79 L1608.21 1208.79 L1608.8 1208.79 L1609.38 1208.79 L1609.97 1208.79 L1610.55 1208.79 L1611.14 1208.79 L1611.73 1208.79 L1612.31 1208.79 L1612.9 1208.79 L1613.49 1208.79 L1614.07 1208.79 L1614.66 1208.79 L1615.25 1208.79 L1615.83 1208.79 L1616.42 1208.79 L1617.01 1208.79 L1617.59 1208.79 L1618.18 1208.79 L1618.76 1208.79 L1619.35 1208.79 L1619.94 1208.79 L1620.52 1208.79 L1621.11 1208.79 L1621.7 1208.79 L1622.28 1208.79 L1622.87 1208.79 L1623.46 1208.79 L1624.04 1208.79 L1624.63 1208.79 L1625.22 1208.79 L1625.8 1208.79 L1626.39 1208.79 L1626.97 1208.79 L1627.56 1208.79 L1628.15 1208.79 L1628.73 1208.79 L1629.32 1208.79 L1629.91 1208.79 L1630.49 1208.79 L1631.08 1208.79 L1631.67 1208.79 L1632.25 1208.79 L1632.84 1208.79 L1633.42 1208.79 L1634.01 1208.79 L1634.6 1208.79 L1635.18 1208.79 L1635.77 1208.79 L1636.36 1208.79 L1636.94 1208.79 L1637.53 1208.79 L1638.12 1208.79 L1638.7 1208.79 L1639.29 1208.79 L1639.88 1208.79 L1640.46 1208.79 L1641.05 1208.79 L1641.63 1208.79 L1642.22 1208.79 L1642.81 1208.79 L1643.39 1208.79 L1643.98 1208.79 L1644.57 1208.79 L1645.15 1208.79 L1645.74 1208.79 L1646.33 1208.79 L1646.91 1208.79 L1647.5 1208.79 L1648.09 1208.79 L1648.67 1208.79 L1649.26 1208.79 L1649.84 1208.79 L1650.43 1208.79 L1651.02 1208.79 L1651.6 1208.79 L1652.19 1208.79 L1652.78 1208.79 L1653.36 1208.79 L1653.95 1208.79 L1654.54 1208.79 L1655.12 1208.79 L1655.71 1208.79 L1656.29 1208.79 L1656.88 1208.79 L1657.47 1208.79 L1658.05 1208.79 L1658.64 1208.79 L1659.23 1208.79 L1659.81 1208.79 L1660.4 1208.79 L1660.99 1208.79 L1661.57 1208.79 L1662.16 1208.79 L1662.75 1208.79 L1663.33 1208.79 L1663.92 1208.79 L1664.5 1208.79 L1665.09 1208.79 L1665.68 1208.79 L1666.26 1208.79 L1666.85 1208.79 L1667.44 1208.79 L1668.02 1208.79 L1668.61 1208.79 L1669.2 1208.79 L1669.78 1208.79 L1670.37 1208.79 L1670.96 1208.79 L1671.54 1208.79 L1672.13 1208.79 L1672.71 1208.79 L1673.3 1208.79 L1673.89 1208.79 L1674.47 1208.79 L1675.06 1208.79 L1675.65 1208.79 L1676.23 1208.79 L1676.82 1208.79 L1677.41 1208.79 L1677.99 1208.79 L1678.58 1208.79 L1679.17 1208.79 L1679.75 1208.79 L1680.34 1208.79 L1680.92 1208.79 L1681.51 1208.79 L1682.1 1208.79 L1682.68 1208.79 L1683.27 1208.79 L1683.86 1208.79 L1684.44 1208.79 L1685.03 1208.79 L1685.62 1208.79 L1686.2 1208.79 L1686.79 1208.79 L1687.37 1208.79 L1687.96 1208.79 L1688.55 1208.79 L1689.13 1208.79 L1689.72 1208.79 L1690.31 1208.79 L1690.89 1208.79 L1691.48 1208.79 L1692.07 1208.79 L1692.65 1208.79 L1693.24 1208.79 L1693.83 1208.79 L1694.41 1208.79 L1695 1208.79 L1695.58 1208.79 L1696.17 1208.79 L1696.76 1208.79 L1697.34 1208.79 L1697.93 1208.79 L1698.52 1208.79 L1699.1 1208.79 L1699.69 1208.79 L1700.28 1208.79 L1700.86 1208.79 L1701.45 1208.79 L1702.04 1208.79 L1702.62 1208.79 L1703.21 1208.79 L1703.79 1208.79 L1704.38 1208.79 L1704.97 1208.79 L1705.55 1208.79 L1706.14 1208.79 L1706.73 1208.79 L1707.31 1208.79 L1707.9 1208.79 L1708.49 1208.79 L1709.07 1208.79 L1709.66 1208.79 L1710.24 1208.79 L1710.83 1208.79 L1711.42 1208.79 L1712 1208.79 L1712.59 1208.79 L1713.18 1208.79 L1713.76 1208.79 L1714.35 1208.79 L1714.94 1208.79 L1715.52 1208.79 L1716.11 1208.79 L1716.7 1208.79 L1717.28 1208.79 L1717.87 1208.79 L1718.45 1208.79 L1719.04 1208.79 L1719.63 1208.79 L1720.21 1208.79 L1720.8 1208.79 L1721.39 1208.79 L1721.97 1208.79 L1722.56 1208.79 L1723.15 1208.79 L1723.73 1208.79 L1724.32 1208.79 L1724.91 1208.79 L1725.49 1208.79 L1726.08 1208.79 L1726.66 1208.79 L1727.25 1208.79 L1727.84 1208.79 L1728.42 1208.79 L1729.01 1208.79 L1729.6 1208.79 L1730.18 1208.79 L1730.77 1208.79 L1731.36 1208.79 L1731.94 1208.79 L1732.53 1208.79 L1733.11 1208.79 L1733.7 1208.79 L1734.29 1208.79 L1734.87 1208.79 L1735.46 1208.79 L1736.05 1208.79 L1736.63 1208.79 L1737.22 1208.79 L1737.81 1208.79 L1738.39 1208.79 L1738.98 1208.79 L1739.57 1208.79 L1740.15 1208.79 L1740.74 1208.79 L1741.32 1208.79 L1741.91 1208.79 L1742.5 1208.79 L1743.08 1208.79 L1743.67 1208.79 L1744.26 1208.79 L1744.84 1208.79 L1745.43 1208.79 L1746.02 1208.79 L1746.6 1208.79 L1747.19 1208.79 L1747.78 1208.79 L1748.36 1208.79 L1748.95 1208.79 L1749.53 1208.79 L1750.12 1208.79 L1750.71 1208.79 L1751.29 1208.79 L1751.88 1208.79 L1752.47 1208.79 L1753.05 1208.79 L1753.64 1208.79 L1754.23 1208.79 L1754.81 1208.79 L1755.4 1208.79 L1755.99 1208.79 L1756.57 1208.79 L1757.16 1208.79 L1757.74 1208.79 L1758.33 1208.79 L1758.92 1208.79 L1759.5 1208.79 L1760.09 1208.79 L1760.68 1208.79 L1761.26 1208.79 L1761.85 1208.79 L1762.44 1208.79 L1763.02 1208.79 L1763.61 1208.79 L1764.19 1208.79 L1764.78 1208.79 L1765.37 1208.79 L1765.95 1208.79 L1766.54 1208.79 L1767.13 1208.79 L1767.71 1208.79 L1768.3 1208.79 L1768.89 1208.79 L1769.47 1208.79 L1770.06 1208.79 L1770.65 1208.79 L1771.23 1208.79 L1771.82 1208.79 L1772.4 1208.79 L1772.99 1208.79 L1773.58 1208.79 L1774.16 1208.79 L1774.75 1208.79 L1775.34 1208.79 L1775.92 1208.79 L1776.51 1208.79 L1777.1 1208.79 L1777.68 1208.79 L1778.27 1208.79 L1778.86 1208.79 L1779.44 1208.79 L1780.03 1208.79 L1780.61 1208.79 L1781.2 1208.79 L1781.79 1208.79 L1782.37 1208.79 L1782.96 1208.79 L1783.55 1208.79 L1784.13 1208.79 L1784.72 1208.79 L1785.31 1208.79 L1785.89 1208.79 L1786.48 1208.79 L1787.06 1208.79 L1787.65 1208.79 L1788.24 1208.79 L1788.82 1208.79 L1789.41 1208.79 L1790 1208.79 L1790.58 1208.79 L1791.17 1208.79 L1791.76 1208.79 L1792.34 1208.79 L1792.93 1208.79 L1793.52 1208.79 L1794.1 1208.79 L1794.69 1208.79 L1795.27 1208.79 L1795.86 1208.79 L1796.45 1208.79 L1797.03 1208.79 L1797.62 1208.79 L1798.21 1208.79 L1798.79 1208.79 L1799.38 1208.79 L1799.97 1208.79 L1800.55 1208.79 L1801.14 1208.79 L1801.73 1208.79 L1802.31 1208.79 L1802.9 1208.79 L1803.48 1208.79 L1804.07 1208.79 L1804.66 1208.79 L1805.24 1208.79 L1805.83 1208.79 L1806.42 1208.79 L1807 1208.79 L1807.59 1208.79 L1808.18 1208.79 L1808.76 1208.79 L1809.35 1208.79 L1809.94 1208.79 L1810.52 1208.79 L1811.11 1208.79 L1811.69 1208.79 L1812.28 1208.79 L1812.87 1208.79 L1813.45 1208.79 L1814.04 1208.79 L1814.63 1208.79 L1815.21 1208.79 L1815.8 1208.79 L1816.39 1208.79 L1816.97 1208.79 L1817.56 1208.79 L1818.14 1208.79 L1818.73 1208.79 L1819.32 1208.79 L1819.9 1208.79 L1820.49 1208.79 L1821.08 1208.79 L1821.66 1208.79 L1822.25 1208.79 L1822.84 1208.79 L1823.42 1208.79 L1824.01 1208.79 L1824.6 1208.79 L1825.18 1208.79 L1825.77 1208.79 L1826.35 1208.79 L1826.94 1208.79 L1827.53 1208.79 L1828.11 1208.79 L1828.7 1208.79 L1829.29 1208.79 L1829.87 1208.79 L1830.46 1208.79 L1831.05 1208.79 L1831.63 1208.79 L1832.22 1208.79 L1832.81 1208.79 L1833.39 1208.79 L1833.98 1208.79 L1834.56 1208.79 L1835.15 1208.79 L1835.74 1208.79 L1836.32 1208.79 L1836.91 1208.79 L1837.5 1208.79 L1838.08 1208.79 L1838.67 1208.79 L1839.26 1208.79 L1839.84 1208.79 L1840.43 1208.79 L1841.01 1208.79 L1841.6 1208.79 L1842.19 1208.79 L1842.77 1208.79 L1843.36 1208.79 L1843.95 1208.79 L1844.53 1208.79 L1845.12 1208.79 L1845.71 1208.79 L1846.29 1208.79 L1846.88 1208.79 L1847.47 1208.79 L1848.05 1208.79 L1848.64 1208.79 L1849.22 1208.79 L1849.81 1208.79 L1850.4 1208.79 L1850.98 1208.79 L1851.57 1208.79 L1852.16 1208.79 L1852.74 1208.79 L1853.33 1208.79 L1853.92 1208.79 L1854.5 1208.79 L1855.09 1208.79 L1855.68 1208.79 L1856.26 1208.79 L1856.85 1208.79 L1857.43 1208.79 L1858.02 1208.79 L1858.61 1208.79 L1859.19 1208.79 L1859.78 1208.79 L1860.37 1208.79 L1860.95 1208.79 L1861.54 1208.79 L1862.13 1208.79 L1862.71 1208.79 L1863.3 1208.79 L1863.88 1208.79 L1864.47 1208.79 L1865.06 1208.79 L1865.64 1208.79 L1866.23 1208.79 L1866.82 1208.79 L1867.4 1208.79 L1867.99 1208.79 L1868.58 1208.79 L1869.16 1208.79 L1869.75 1208.79 L1870.34 1208.79 L1870.92 1208.79 L1871.51 1208.79 L1872.09 1208.79 L1872.68 1208.79 L1873.27 1208.79 L1873.85 1208.79 L1874.44 1208.79 L1875.03 1208.79 L1875.61 1208.79 L1876.2 1208.79 L1876.79 1208.79 L1877.37 1208.79 L1877.96 1208.79 L1878.55 1208.79 L1879.13 1208.79 L1879.72 1208.79 L1880.3 1208.79 L1880.89 1208.79 L1881.48 1208.79 L1882.06 1208.79 L1882.65 1208.79 L1883.24 1208.79 L1883.82 1208.79 L1884.41 1208.79 L1885 1208.79 L1885.58 1208.79 L1886.17 1208.79 L1886.76 1208.79 L1887.34 1208.79 L1887.93 1208.79 L1888.51 1208.79 L1889.1 1208.79 L1889.69 1208.79 L1890.27 1208.79 L1890.86 1208.79 L1891.45 1208.79 L1892.03 1208.79 L1892.62 1208.79 L1893.21 1208.79 L1893.79 1208.79 L1894.38 1208.79 L1894.96 1208.79 L1895.55 1208.79 L1896.14 1208.79 L1896.72 1208.79 L1897.31 1208.79 L1897.9 1208.79 L1898.48 1208.79 L1899.07 1208.79 L1899.66 1208.79 L1900.24 1208.79 L1900.83 1208.79 L1901.42 1208.79 L1902 1208.79 L1902.59 1208.79 L1903.17 1208.79 L1903.76 1208.79 L1904.35 1208.79 L1904.93 1208.79 L1905.52 1208.79 L1906.11 1208.79 L1906.69 1208.79 L1907.28 1208.79 L1907.87 1208.79 L1908.45 1208.79 L1909.04 1208.79 L1909.63 1208.79 L1910.21 1208.79 L1910.8 1208.79 L1911.38 1208.79 L1911.97 1208.79 L1912.56 1208.79 L1913.14 1208.79 L1913.73 1208.79 L1914.32 1208.79 L1914.9 1208.79 L1915.49 1208.79 L1916.08 1208.79 L1916.66 1208.79 L1917.25 1208.79 L1917.83 1208.79 L1918.42 1208.79 L1919.01 1208.79 L1919.59 1208.79 L1920.18 1208.79 L1920.77 1208.79 L1921.35 1208.79 L1921.94 1208.79 L1922.53 1208.79 L1923.11 1208.79 L1923.7 1208.79 L1924.29 1208.79 L1924.87 1208.79 L1925.46 1208.79 L1926.04 1208.79 L1926.63 1208.79 L1927.22 1208.79 L1927.8 1208.79 L1928.39 1208.79 L1928.98 1208.79 L1929.56 1208.79 L1930.15 1208.79 L1930.74 1208.79 L1931.32 1208.79 L1931.91 1208.79 L1932.5 1208.79 L1933.08 1208.79 L1933.67 1208.79 L1934.25 1208.79 L1934.84 1208.79 L1935.43 1208.79 L1936.01 1208.79 L1936.6 1208.79 L1937.19 1208.79 L1937.77 1208.79 L1938.36 1208.79 L1938.95 1208.79 L1939.53 1208.79 L1940.12 1208.79 L1940.71 1208.79 L1941.29 1208.79 L1941.88 1208.79 L1942.46 1208.79 L1943.05 1208.79 L1943.64 1208.79 L1944.22 1208.79 L1944.81 1208.79 L1945.4 1208.79 L1945.98 1208.79 L1946.57 1208.79 L1947.16 1208.79 L1947.74 1208.79 L1948.33 1208.79 L1948.91 1208.79 L1949.5 1208.79 L1950.09 1208.79 L1950.67 1208.79 L1951.26 1208.79 L1951.85 1208.79 L1952.43 1208.79 L1953.02 1208.79 L1953.61 1208.79 L1954.19 1208.79 L1954.78 1208.79 L1955.37 1208.79 L1955.95 1208.79 L1956.54 1208.79 L1957.12 1208.79 L1957.71 1208.79 L1958.3 1208.79 L1958.88 1208.79 L1959.47 1208.79 L1960.06 1208.79 L1960.64 1208.79 L1961.23 1208.79 L1961.82 1208.79 L1962.4 1208.79 L1962.99 1208.79 L1963.58 1208.79 L1964.16 1208.79 L1964.75 1208.79 L1965.33 1208.79 L1965.92 1208.79 L1966.51 1208.79 L1967.09 1208.79 L1967.68 1208.79 L1968.27 1208.79 L1968.85 1208.79 L1969.44 1208.79 L1970.03 1208.79 L1970.61 1208.79 L1971.2 1208.79 L1971.78 1208.79 L1972.37 1208.79 L1972.96 1208.79 L1973.54 1208.79 L1974.13 1208.79 L1974.72 1208.79 L1975.3 1208.79 L1975.89 1208.79 L1976.48 1208.79 L1977.06 1208.79 L1977.65 1208.79 L1978.24 1208.79 L1978.82 1208.79 L1979.41 1208.79 L1979.99 1208.79 L1980.58 1208.79 L1981.17 1208.79 L1981.75 1208.79 L1982.34 1208.79 L1982.93 1208.79 L1983.51 1208.79 L1984.1 1208.79 L1984.69 1208.79 L1985.27 1208.79 L1985.86 1208.79 L1986.45 1208.79 L1987.03 1208.79 L1987.62 1208.79 L1988.2 1208.79 L1988.79 1208.79 L1989.38 1208.79 L1989.96 1208.79 L1990.55 1208.79 L1991.14 1208.79 L1991.72 1208.79 L1992.31 1208.79 L1992.9 1208.79 L1993.48 1208.79 L1994.07 1208.79 L1994.65 1208.79 L1995.24 1208.79 L1995.83 1208.79 L1996.41 1208.79 L1997 1208.79 L1997.59 1208.79 L1998.17 1208.79 L1998.76 1208.79 L1999.35 1208.79 L1999.93 1208.79 L2000.52 1208.79 L2001.11 1208.79 L2001.69 1208.79 L2002.28 1208.79 L2002.86 1208.79 L2003.45 1208.79 L2004.04 1208.79 L2004.62 1208.79 L2005.21 1208.79 L2005.8 1208.79 L2006.38 1208.79 L2006.97 1208.79 L2007.56 1208.79 L2008.14 1208.79 L2008.73 1208.79 L2009.32 1208.79 L2009.9 1208.79 L2010.49 1208.79 L2011.07 1208.79 L2011.66 1208.79 L2012.25 1208.79 L2012.83 1208.79 L2013.42 1208.79 L2014.01 1208.79 L2014.59 1208.79 L2015.18 1208.79 L2015.77 1208.79 L2016.35 1208.79 L2016.94 1208.79 L2017.53 1208.79 L2018.11 1208.79 L2018.7 1208.79 L2019.28 1208.79 L2019.87 1208.79 L2020.46 1208.79 L2021.04 1208.79 L2021.63 1208.79 L2022.22 1208.79 L2022.8 1208.79 L2023.39 1208.79 L2023.98 1208.79 L2024.56 1208.79 L2025.15 1208.79 L2025.73 1208.79 L2026.32 1208.79 L2026.91 1208.79 L2027.49 1208.79 L2028.08 1208.79 L2028.67 1208.79 L2029.25 1208.79 L2029.84 1208.79 L2030.43 1208.79 L2031.01 1208.79 L2031.6 1208.79 L2032.19 1208.79 L2032.77 1208.79 L2033.36 1208.79 L2033.94 1208.79 L2034.53 1208.79 L2035.12 1208.79 L2035.7 1208.79 L2036.29 1208.79 L2036.88 1208.79 L2037.46 1208.79 L2038.05 1208.79 L2038.64 1208.79 L2039.22 1208.79 L2039.81 1208.79 L2040.4 1208.79 L2040.98 1208.79 L2041.57 1208.79 L2042.15 1208.79 L2042.74 1208.79 L2043.33 1208.79 L2043.91 1208.79 L2044.5 1208.79 L2045.09 1208.79 L2045.67 1208.79 L2046.26 1208.79 L2046.85 1208.79 L2047.43 1208.79 L2048.02 1208.79 L2048.6 1208.79 L2049.19 1208.79 L2049.78 1208.79 L2050.36 1208.79 L2050.95 1208.79 L2051.54 1208.79 L2052.12 1208.79 L2052.71 1208.79 L2053.3 1208.79 L2053.88 1208.79 L2054.47 1208.79 L2055.06 1208.79 L2055.64 1208.79 L2056.23 1208.79 L2056.81 1208.79 L2057.4 1208.79 L2057.99 1208.79 L2058.57 1208.79 L2059.16 1208.79 L2059.75 1208.79 L2060.33 1208.79 L2060.92 1208.79 L2061.51 1208.79 L2062.09 1208.79 L2062.68 1208.79 L2063.27 1208.79 L2063.85 1208.79 L2064.44 1208.79 L2065.02 1208.79 L2065.61 1208.79 L2066.2 1208.79 L2066.78 1208.79 L2067.37 1208.79 L2067.96 1208.79 L2068.54 1208.79 L2069.13 1208.79 L2069.72 1208.79 L2070.3 1208.79 L2070.89 1208.79 L2071.48 1208.79 L2072.06 1208.79 L2072.65 1208.79 L2073.23 1208.79 L2073.82 1208.79 L2074.41 1208.79 L2074.99 1208.79 L2075.58 1208.79 L2076.17 1208.79 L2076.75 1208.79 L2077.34 1208.79 L2077.93 1208.79 L2078.51 1208.79 L2079.1 1208.79 L2079.68 1208.79 L2080.27 1208.79 L2080.86 1208.79 L2081.44 1208.79 L2082.03 1208.79 L2082.62 1208.79 L2083.2 1208.79 L2083.79 1208.79 L2084.38 1208.79 L2084.96 1208.79 L2085.55 1208.79 L2086.14 1208.79 L2086.72 1208.79 L2087.31 1208.79 L2087.89 1208.79 L2088.48 1208.79 L2089.07 1208.79 L2089.65 1208.79 L2090.24 1208.79 L2090.83 1208.79 L2091.41 1208.79 L2092 1208.79 L2092.59 1208.79 L2093.17 1208.79 L2093.76 1208.79 L2094.35 1208.79 L2094.93 1208.79 L2095.52 1208.79 L2096.1 1208.79 L2096.69 1208.79 L2097.28 1208.79 L2097.86 1208.79 L2098.45 1208.79 L2099.04 1208.79 L2099.62 1208.79 L2100.21 1208.79 L2100.8 1208.79 L2101.38 1208.79 L2101.97 1208.79 L2102.55 1208.79 L2103.14 1208.79 L2103.73 1208.79 L2104.31 1208.79 L2104.9 1208.79 L2105.49 1208.79 L2106.07 1208.79 L2106.66 1208.79 L2107.25 1208.79 L2107.83 1208.79 L2108.42 1208.79 L2109.01 1208.79 L2109.59 1208.79 L2110.18 1208.79 L2110.76 1208.79 L2111.35 1208.79 L2111.94 1208.79 L2112.52 1208.79 L2113.11 1208.79 L2113.7 1208.79 L2114.28 1208.79 L2114.87 1208.79 L2115.46 1208.79 L2116.04 1208.79 L2116.63 1208.79 L2117.22 1208.79 L2117.8 1208.79 L2118.39 1208.79 L2118.97 1208.79 L2119.56 1208.79 L2120.15 1208.79 L2120.73 1208.79 L2121.32 1208.79 L2121.91 1208.79 L2122.49 1208.79 L2123.08 1208.79 L2123.67 1208.79 L2124.25 1208.79 L2124.84 1208.79 L2125.42 1208.79 L2126.01 1208.79 L2126.6 1208.79 L2127.18 1208.79 L2127.77 1208.79 L2128.36 1208.79 L2128.94 1208.79 L2129.53 1208.79 L2130.12 1208.79 L2130.7 1208.79 L2131.29 1208.79 L2131.88 1208.79 L2132.46 1208.79 L2133.05 1208.79 L2133.63 1208.79 L2134.22 1208.79 L2134.81 1208.79 L2135.39 1208.79 L2135.98 1208.79 L2136.57 1208.79 L2137.15 1208.79 L2137.74 1208.79 L2138.33 1208.79 L2138.91 1208.79 L2139.5 1208.79 L2140.09 1208.79 L2140.67 1208.79 L2141.26 1208.79 L2141.84 1208.79 L2142.43 1208.79 L2143.02 1208.79 L2143.6 1208.79 L2144.19 1208.79 L2144.78 1208.79 L2145.36 1208.79 L2145.95 1208.79 L2146.54 1208.79 L2147.12 1208.79 L2147.71 1208.79 L2148.3 1208.79 L2148.88 1208.79 L2149.47 1208.79 L2150.05 1208.79 L2150.64 1208.79 L2151.23 1208.79 L2151.81 1208.79 L2152.4 1208.79 L2152.99 1208.79 L2153.57 1208.79 L2154.16 1208.79 L2154.75 1208.79 L2155.33 1208.79 L2155.92 1208.79 L2156.5 1208.79 L2157.09 1208.79 L2157.68 1208.79 L2158.26 1208.79 L2158.26 1208.23 L2157.68 1208.23 L2157.09 1208.23 L2156.5 1208.23 L2155.92 1208.23 L2155.33 1208.23 L2154.75 1208.23 L2154.16 1208.23 L2153.57 1208.23 L2152.99 1208.23 L2152.4 1208.23 L2151.81 1208.23 L2151.23 1208.23 L2150.64 1208.23 L2150.05 1208.23 L2149.47 1208.23 L2148.88 1208.23 L2148.3 1208.23 L2147.71 1208.23 L2147.12 1208.23 L2146.54 1208.23 L2145.95 1208.23 L2145.36 1208.23 L2144.78 1208.23 L2144.19 1208.23 L2143.6 1208.23 L2143.02 1208.23 L2142.43 1208.23 L2141.84 1208.23 L2141.26 1208.23 L2140.67 1208.23 L2140.09 1208.23 L2139.5 1208.23 L2138.91 1208.23 L2138.33 1208.23 L2137.74 1208.23 L2137.15 1208.23 L2136.57 1208.23 L2135.98 1208.23 L2135.39 1208.23 L2134.81 1208.23 L2134.22 1208.23 L2133.63 1208.23 L2133.05 1208.23 L2132.46 1208.23 L2131.88 1208.23 L2131.29 1208.23 L2130.7 1208.23 L2130.12 1208.23 L2129.53 1208.23 L2128.94 1208.23 L2128.36 1208.23 L2127.77 1208.23 L2127.18 1208.23 L2126.6 1208.23 L2126.01 1208.23 L2125.42 1208.23 L2124.84 1208.23 L2124.25 1208.23 L2123.67 1208.23 L2123.08 1208.23 L2122.49 1208.23 L2121.91 1208.23 L2121.32 1208.23 L2120.73 1208.23 L2120.15 1208.23 L2119.56 1208.23 L2118.97 1208.23 L2118.39 1208.23 L2117.8 1208.23 L2117.22 1208.23 L2116.63 1208.23 L2116.04 1208.23 L2115.46 1208.23 L2114.87 1208.23 L2114.28 1208.23 L2113.7 1208.23 L2113.11 1208.23 L2112.52 1208.23 L2111.94 1208.23 L2111.35 1208.23 L2110.76 1208.23 L2110.18 1208.23 L2109.59 1208.23 L2109.01 1208.23 L2108.42 1208.23 L2107.83 1208.23 L2107.25 1208.23 L2106.66 1208.23 L2106.07 1208.23 L2105.49 1208.23 L2104.9 1208.23 L2104.31 1208.23 L2103.73 1208.23 L2103.14 1208.23 L2102.55 1208.23 L2101.97 1208.23 L2101.38 1208.23 L2100.8 1208.23 L2100.21 1208.23 L2099.62 1208.23 L2099.04 1208.23 L2098.45 1208.23 L2097.86 1208.23 L2097.28 1208.23 L2096.69 1208.23 L2096.1 1208.23 L2095.52 1208.23 L2094.93 1208.23 L2094.35 1208.23 L2093.76 1208.23 L2093.17 1208.23 L2092.59 1208.23 L2092 1208.23 L2091.41 1208.23 L2090.83 1208.23 L2090.24 1208.23 L2089.65 1208.23 L2089.07 1208.23 L2088.48 1208.23 L2087.89 1208.23 L2087.31 1208.23 L2086.72 1208.23 L2086.14 1208.23 L2085.55 1208.23 L2084.96 1208.23 L2084.38 1208.23 L2083.79 1208.23 L2083.2 1208.23 L2082.62 1208.23 L2082.03 1208.23 L2081.44 1208.23 L2080.86 1208.23 L2080.27 1208.23 L2079.68 1208.23 L2079.1 1208.23 L2078.51 1208.23 L2077.93 1208.23 L2077.34 1208.23 L2076.75 1208.23 L2076.17 1208.23 L2075.58 1208.23 L2074.99 1208.23 L2074.41 1208.23 L2073.82 1208.23 L2073.23 1208.23 L2072.65 1208.23 L2072.06 1208.23 L2071.48 1208.23 L2070.89 1208.23 L2070.3 1208.23 L2069.72 1208.23 L2069.13 1208.23 L2068.54 1208.23 L2067.96 1208.23 L2067.37 1208.23 L2066.78 1208.23 L2066.2 1208.23 L2065.61 1208.23 L2065.02 1208.23 L2064.44 1208.23 L2063.85 1208.23 L2063.27 1208.23 L2062.68 1208.23 L2062.09 1208.23 L2061.51 1208.23 L2060.92 1208.23 L2060.33 1208.23 L2059.75 1208.23 L2059.16 1208.23 L2058.57 1208.23 L2057.99 1208.23 L2057.4 1208.23 L2056.81 1208.23 L2056.23 1208.23 L2055.64 1208.23 L2055.06 1208.23 L2054.47 1208.23 L2053.88 1208.23 L2053.3 1208.23 L2052.71 1208.23 L2052.12 1208.23 L2051.54 1208.23 L2050.95 1208.23 L2050.36 1208.23 L2049.78 1208.23 L2049.19 1208.23 L2048.6 1208.23 L2048.02 1208.23 L2047.43 1208.23 L2046.85 1208.23 L2046.26 1208.23 L2045.67 1208.23 L2045.09 1208.23 L2044.5 1208.23 L2043.91 1208.23 L2043.33 1208.23 L2042.74 1208.23 L2042.15 1208.23 L2041.57 1208.23 L2040.98 1208.23 L2040.4 1208.23 L2039.81 1208.23 L2039.22 1208.23 L2038.64 1208.23 L2038.05 1208.23 L2037.46 1208.23 L2036.88 1208.23 L2036.29 1208.23 L2035.7 1208.23 L2035.12 1208.23 L2034.53 1208.23 L2033.94 1208.23 L2033.36 1208.23 L2032.77 1208.23 L2032.19 1208.23 L2031.6 1208.23 L2031.01 1208.23 L2030.43 1208.23 L2029.84 1208.23 L2029.25 1208.23 L2028.67 1208.23 L2028.08 1208.23 L2027.49 1208.23 L2026.91 1208.23 L2026.32 1208.23 L2025.73 1208.23 L2025.15 1208.23 L2024.56 1208.23 L2023.98 1208.23 L2023.39 1208.23 L2022.8 1208.23 L2022.22 1208.23 L2021.63 1208.23 L2021.04 1208.23 L2020.46 1208.23 L2019.87 1208.23 L2019.28 1208.23 L2018.7 1208.23 L2018.11 1208.23 L2017.53 1208.23 L2016.94 1208.23 L2016.35 1208.23 L2015.77 1208.23 L2015.18 1208.23 L2014.59 1208.23 L2014.01 1208.23 L2013.42 1208.23 L2012.83 1208.23 L2012.25 1208.23 L2011.66 1208.23 L2011.07 1208.23 L2010.49 1208.23 L2009.9 1208.23 L2009.32 1208.23 L2008.73 1208.23 L2008.14 1208.23 L2007.56 1208.23 L2006.97 1208.23 L2006.38 1208.23 L2005.8 1208.23 L2005.21 1208.23 L2004.62 1208.23 L2004.04 1208.23 L2003.45 1208.23 L2002.86 1208.23 L2002.28 1208.23 L2001.69 1208.23 L2001.11 1208.23 L2000.52 1208.23 L1999.93 1208.23 L1999.35 1208.23 L1998.76 1208.23 L1998.17 1208.23 L1997.59 1208.23 L1997 1208.23 L1996.41 1208.23 L1995.83 1208.23 L1995.24 1208.23 L1994.65 1208.23 L1994.07 1208.23 L1993.48 1208.23 L1992.9 1208.23 L1992.31 1208.23 L1991.72 1208.23 L1991.14 1208.23 L1990.55 1208.23 L1989.96 1208.23 L1989.38 1208.23 L1988.79 1208.23 L1988.2 1208.23 L1987.62 1208.23 L1987.03 1208.23 L1986.45 1208.23 L1985.86 1208.23 L1985.27 1208.23 L1984.69 1208.23 L1984.1 1208.23 L1983.51 1208.23 L1982.93 1208.23 L1982.34 1208.23 L1981.75 1208.23 L1981.17 1208.23 L1980.58 1208.23 L1979.99 1208.23 L1979.41 1208.23 L1978.82 1208.23 L1978.24 1208.23 L1977.65 1208.23 L1977.06 1208.23 L1976.48 1208.23 L1975.89 1208.23 L1975.3 1208.23 L1974.72 1208.23 L1974.13 1208.23 L1973.54 1208.23 L1972.96 1208.23 L1972.37 1208.23 L1971.78 1208.23 L1971.2 1208.23 L1970.61 1208.23 L1970.03 1208.23 L1969.44 1208.23 L1968.85 1208.23 L1968.27 1208.23 L1967.68 1208.23 L1967.09 1208.23 L1966.51 1208.23 L1965.92 1208.23 L1965.33 1208.23 L1964.75 1208.23 L1964.16 1208.23 L1963.58 1208.23 L1962.99 1208.23 L1962.4 1208.23 L1961.82 1208.23 L1961.23 1208.23 L1960.64 1208.23 L1960.06 1208.23 L1959.47 1208.23 L1958.88 1208.23 L1958.3 1208.23 L1957.71 1208.23 L1957.12 1208.23 L1956.54 1208.23 L1955.95 1208.23 L1955.37 1208.23 L1954.78 1208.23 L1954.19 1208.23 L1953.61 1208.23 L1953.02 1208.23 L1952.43 1208.23 L1951.85 1208.23 L1951.26 1208.23 L1950.67 1208.23 L1950.09 1208.23 L1949.5 1208.23 L1948.91 1208.23 L1948.33 1208.23 L1947.74 1208.23 L1947.16 1208.23 L1946.57 1208.23 L1945.98 1208.23 L1945.4 1208.23 L1944.81 1208.23 L1944.22 1208.23 L1943.64 1208.23 L1943.05 1208.23 L1942.46 1208.23 L1941.88 1208.23 L1941.29 1208.23 L1940.71 1208.23 L1940.12 1208.23 L1939.53 1208.23 L1938.95 1208.23 L1938.36 1208.23 L1937.77 1208.23 L1937.19 1208.23 L1936.6 1208.23 L1936.01 1208.23 L1935.43 1208.23 L1934.84 1208.23 L1934.25 1208.23 L1933.67 1208.23 L1933.08 1208.23 L1932.5 1208.23 L1931.91 1208.23 L1931.32 1208.23 L1930.74 1208.23 L1930.15 1208.23 L1929.56 1208.23 L1928.98 1208.23 L1928.39 1208.23 L1927.8 1208.23 L1927.22 1208.23 L1926.63 1208.23 L1926.04 1208.23 L1925.46 1208.23 L1924.87 1208.23 L1924.29 1208.23 L1923.7 1208.23 L1923.11 1208.23 L1922.53 1208.23 L1921.94 1208.23 L1921.35 1208.23 L1920.77 1208.23 L1920.18 1208.23 L1919.59 1208.23 L1919.01 1208.23 L1918.42 1208.23 L1917.83 1208.23 L1917.25 1208.23 L1916.66 1208.23 L1916.08 1208.23 L1915.49 1208.23 L1914.9 1208.23 L1914.32 1208.23 L1913.73 1208.23 L1913.14 1208.23 L1912.56 1208.23 L1911.97 1208.23 L1911.38 1208.23 L1910.8 1208.23 L1910.21 1208.23 L1909.63 1208.23 L1909.04 1208.23 L1908.45 1208.23 L1907.87 1208.23 L1907.28 1208.23 L1906.69 1208.23 L1906.11 1208.23 L1905.52 1208.23 L1904.93 1208.23 L1904.35 1208.23 L1903.76 1208.23 L1903.17 1208.23 L1902.59 1208.23 L1902 1208.23 L1901.42 1208.23 L1900.83 1208.23 L1900.24 1208.23 L1899.66 1208.23 L1899.07 1208.23 L1898.48 1208.23 L1897.9 1208.23 L1897.31 1208.23 L1896.72 1208.23 L1896.14 1208.23 L1895.55 1208.23 L1894.96 1208.23 L1894.38 1208.23 L1893.79 1208.23 L1893.21 1208.23 L1892.62 1208.23 L1892.03 1208.23 L1891.45 1208.23 L1890.86 1208.23 L1890.27 1208.23 L1889.69 1208.23 L1889.1 1208.23 L1888.51 1208.23 L1887.93 1208.23 L1887.34 1208.23 L1886.76 1208.23 L1886.17 1208.23 L1885.58 1208.23 L1885 1208.23 L1884.41 1208.23 L1883.82 1208.23 L1883.24 1208.23 L1882.65 1208.23 L1882.06 1208.23 L1881.48 1208.23 L1880.89 1208.23 L1880.3 1208.23 L1879.72 1208.23 L1879.13 1208.23 L1878.55 1208.23 L1877.96 1208.23 L1877.37 1208.23 L1876.79 1208.23 L1876.2 1208.23 L1875.61 1208.23 L1875.03 1208.23 L1874.44 1208.23 L1873.85 1208.23 L1873.27 1208.23 L1872.68 1208.23 L1872.09 1208.23 L1871.51 1208.23 L1870.92 1208.23 L1870.34 1208.23 L1869.75 1208.23 L1869.16 1208.23 L1868.58 1208.23 L1867.99 1208.23 L1867.4 1208.23 L1866.82 1208.23 L1866.23 1208.23 L1865.64 1208.23 L1865.06 1208.23 L1864.47 1208.23 L1863.88 1208.23 L1863.3 1208.23 L1862.71 1208.23 L1862.13 1208.23 L1861.54 1208.23 L1860.95 1208.23 L1860.37 1208.23 L1859.78 1208.23 L1859.19 1208.23 L1858.61 1208.23 L1858.02 1208.23 L1857.43 1208.23 L1856.85 1208.23 L1856.26 1208.23 L1855.68 1208.23 L1855.09 1208.23 L1854.5 1208.23 L1853.92 1208.23 L1853.33 1208.23 L1852.74 1208.23 L1852.16 1208.23 L1851.57 1208.23 L1850.98 1208.23 L1850.4 1208.23 L1849.81 1208.23 L1849.22 1208.23 L1848.64 1208.23 L1848.05 1208.23 L1847.47 1208.23 L1846.88 1208.23 L1846.29 1208.23 L1845.71 1208.23 L1845.12 1208.23 L1844.53 1208.23 L1843.95 1208.23 L1843.36 1208.23 L1842.77 1208.23 L1842.19 1208.23 L1841.6 1208.23 L1841.01 1208.23 L1840.43 1208.23 L1839.84 1208.23 L1839.26 1208.23 L1838.67 1208.23 L1838.08 1208.23 L1837.5 1208.23 L1836.91 1208.23 L1836.32 1208.23 L1835.74 1208.23 L1835.15 1208.23 L1834.56 1208.23 L1833.98 1208.23 L1833.39 1208.23 L1832.81 1208.23 L1832.22 1208.23 L1831.63 1208.23 L1831.05 1208.23 L1830.46 1208.23 L1829.87 1208.23 L1829.29 1208.23 L1828.7 1208.23 L1828.11 1208.23 L1827.53 1208.23 L1826.94 1208.23 L1826.35 1208.23 L1825.77 1208.23 L1825.18 1208.23 L1824.6 1208.23 L1824.01 1208.23 L1823.42 1208.23 L1822.84 1208.23 L1822.25 1208.23 L1821.66 1208.23 L1821.08 1208.23 L1820.49 1208.23 L1819.9 1208.23 L1819.32 1208.23 L1818.73 1208.23 L1818.14 1208.23 L1817.56 1208.23 L1816.97 1208.23 L1816.39 1208.23 L1815.8 1208.23 L1815.21 1208.23 L1814.63 1208.23 L1814.04 1208.23 L1813.45 1208.23 L1812.87 1208.23 L1812.28 1208.23 L1811.69 1208.23 L1811.11 1208.23 L1810.52 1208.23 L1809.94 1208.23 L1809.35 1208.23 L1808.76 1208.23 L1808.18 1208.23 L1807.59 1208.23 L1807 1208.23 L1806.42 1208.23 L1805.83 1208.23 L1805.24 1208.23 L1804.66 1208.23 L1804.07 1208.23 L1803.48 1208.23 L1802.9 1208.23 L1802.31 1208.23 L1801.73 1208.23 L1801.14 1208.23 L1800.55 1208.23 L1799.97 1208.23 L1799.38 1208.23 L1798.79 1208.23 L1798.21 1208.23 L1797.62 1208.23 L1797.03 1208.23 L1796.45 1208.23 L1795.86 1208.23 L1795.27 1208.23 L1794.69 1208.23 L1794.1 1208.23 L1793.52 1208.23 L1792.93 1208.23 L1792.34 1208.23 L1791.76 1208.23 L1791.17 1208.23 L1790.58 1208.23 L1790 1208.23 L1789.41 1208.23 L1788.82 1208.23 L1788.24 1208.23 L1787.65 1208.23 L1787.06 1208.23 L1786.48 1208.23 L1785.89 1208.23 L1785.31 1208.23 L1784.72 1208.23 L1784.13 1208.23 L1783.55 1208.23 L1782.96 1208.23 L1782.37 1208.23 L1781.79 1208.23 L1781.2 1208.23 L1780.61 1208.23 L1780.03 1208.23 L1779.44 1208.23 L1778.86 1208.23 L1778.27 1208.23 L1777.68 1208.23 L1777.1 1208.23 L1776.51 1208.23 L1775.92 1208.23 L1775.34 1208.23 L1774.75 1208.23 L1774.16 1208.23 L1773.58 1208.23 L1772.99 1208.23 L1772.4 1208.23 L1771.82 1208.23 L1771.23 1208.23 L1770.65 1208.23 L1770.06 1208.23 L1769.47 1208.23 L1768.89 1208.23 L1768.3 1208.23 L1767.71 1208.23 L1767.13 1208.23 L1766.54 1208.23 L1765.95 1208.23 L1765.37 1208.23 L1764.78 1208.23 L1764.19 1208.23 L1763.61 1208.23 L1763.02 1208.23 L1762.44 1208.23 L1761.85 1208.23 L1761.26 1208.23 L1760.68 1208.23 L1760.09 1208.23 L1759.5 1208.23 L1758.92 1208.23 L1758.33 1208.23 L1757.74 1208.23 L1757.16 1208.23 L1756.57 1208.23 L1755.99 1208.23 L1755.4 1208.23 L1754.81 1208.23 L1754.23 1208.23 L1753.64 1208.23 L1753.05 1208.23 L1752.47 1208.23 L1751.88 1208.23 L1751.29 1208.23 L1750.71 1208.23 L1750.12 1208.23 L1749.53 1208.23 L1748.95 1208.23 L1748.36 1208.23 L1747.78 1208.23 L1747.19 1208.23 L1746.6 1208.23 L1746.02 1208.23 L1745.43 1208.23 L1744.84 1208.23 L1744.26 1208.23 L1743.67 1208.23 L1743.08 1208.23 L1742.5 1208.23 L1741.91 1208.23 L1741.32 1208.23 L1740.74 1208.23 L1740.15 1208.23 L1739.57 1208.23 L1738.98 1208.23 L1738.39 1208.23 L1737.81 1208.23 L1737.22 1208.23 L1736.63 1208.23 L1736.05 1208.23 L1735.46 1208.23 L1734.87 1208.23 L1734.29 1208.23 L1733.7 1208.23 L1733.11 1208.23 L1732.53 1208.23 L1731.94 1208.23 L1731.36 1208.23 L1730.77 1208.23 L1730.18 1208.23 L1729.6 1208.23 L1729.01 1208.23 L1728.42 1208.23 L1727.84 1208.23 L1727.25 1208.23 L1726.66 1208.23 L1726.08 1208.23 L1725.49 1208.23 L1724.91 1208.23 L1724.32 1208.23 L1723.73 1208.23 L1723.15 1208.23 L1722.56 1208.23 L1721.97 1208.23 L1721.39 1208.23 L1720.8 1208.23 L1720.21 1208.23 L1719.63 1208.23 L1719.04 1208.23 L1718.45 1208.23 L1717.87 1208.23 L1717.28 1208.23 L1716.7 1208.23 L1716.11 1208.23 L1715.52 1208.23 L1714.94 1208.23 L1714.35 1208.23 L1713.76 1208.23 L1713.18 1208.23 L1712.59 1208.23 L1712 1208.23 L1711.42 1208.23 L1710.83 1208.23 L1710.24 1208.23 L1709.66 1208.23 L1709.07 1208.23 L1708.49 1208.23 L1707.9 1208.23 L1707.31 1208.23 L1706.73 1208.23 L1706.14 1208.23 L1705.55 1208.23 L1704.97 1208.23 L1704.38 1208.23 L1703.79 1208.23 L1703.21 1208.23 L1702.62 1208.23 L1702.04 1208.23 L1701.45 1208.23 L1700.86 1208.23 L1700.28 1208.23 L1699.69 1208.23 L1699.1 1208.23 L1698.52 1208.23 L1697.93 1208.23 L1697.34 1208.23 L1696.76 1208.23 L1696.17 1208.23 L1695.58 1208.23 L1695 1208.23 L1694.41 1208.23 L1693.83 1208.23 L1693.24 1208.23 L1692.65 1208.23 L1692.07 1208.23 L1691.48 1208.23 L1690.89 1208.23 L1690.31 1208.23 L1689.72 1208.23 L1689.13 1208.23 L1688.55 1208.23 L1687.96 1208.23 L1687.37 1208.23 L1686.79 1208.23 L1686.2 1208.23 L1685.62 1208.23 L1685.03 1208.23 L1684.44 1208.23 L1683.86 1208.23 L1683.27 1208.23 L1682.68 1208.23 L1682.1 1208.23 L1681.51 1208.23 L1680.92 1208.23 L1680.34 1208.23 L1679.75 1208.23 L1679.17 1208.23 L1678.58 1208.23 L1677.99 1208.23 L1677.41 1208.23 L1676.82 1208.23 L1676.23 1208.23 L1675.65 1208.23 L1675.06 1208.23 L1674.47 1208.23 L1673.89 1208.23 L1673.3 1208.23 L1672.71 1208.23 L1672.13 1208.23 L1671.54 1208.23 L1670.96 1208.23 L1670.37 1208.23 L1669.78 1208.23 L1669.2 1208.23 L1668.61 1208.23 L1668.02 1208.23 L1667.44 1208.23 L1666.85 1208.23 L1666.26 1208.23 L1665.68 1208.23 L1665.09 1208.23 L1664.5 1208.23 L1663.92 1208.23 L1663.33 1208.23 L1662.75 1208.23 L1662.16 1208.23 L1661.57 1208.23 L1660.99 1208.23 L1660.4 1208.23 L1659.81 1208.23 L1659.23 1208.23 L1658.64 1208.23 L1658.05 1208.23 L1657.47 1208.23 L1656.88 1208.23 L1656.29 1208.23 L1655.71 1208.23 L1655.12 1208.23 L1654.54 1208.23 L1653.95 1208.23 L1653.36 1208.23 L1652.78 1208.23 L1652.19 1208.23 L1651.6 1208.23 L1651.02 1208.23 L1650.43 1208.23 L1649.84 1208.23 L1649.26 1208.23 L1648.67 1208.23 L1648.09 1208.23 L1647.5 1208.23 L1646.91 1208.23 L1646.33 1208.23 L1645.74 1208.23 L1645.15 1208.23 L1644.57 1208.23 L1643.98 1208.23 L1643.39 1208.23 L1642.81 1208.23 L1642.22 1208.23 L1641.63 1208.23 L1641.05 1208.23 L1640.46 1208.23 L1639.88 1208.23 L1639.29 1208.23 L1638.7 1208.23 L1638.12 1208.23 L1637.53 1208.23 L1636.94 1208.23 L1636.36 1208.23 L1635.77 1208.23 L1635.18 1208.23 L1634.6 1208.23 L1634.01 1208.23 L1633.42 1208.23 L1632.84 1208.23 L1632.25 1208.23 L1631.67 1208.23 L1631.08 1208.23 L1630.49 1208.23 L1629.91 1208.23 L1629.32 1208.23 L1628.73 1208.23 L1628.15 1208.23 L1627.56 1208.23 L1626.97 1208.23 L1626.39 1208.23 L1625.8 1208.23 L1625.22 1208.23 L1624.63 1208.23 L1624.04 1208.23 L1623.46 1208.23 L1622.87 1208.23 L1622.28 1208.23 L1621.7 1208.23 L1621.11 1208.23 L1620.52 1208.23 L1619.94 1208.23 L1619.35 1208.23 L1618.76 1208.23 L1618.18 1208.23 L1617.59 1208.23 L1617.01 1208.23 L1616.42 1208.23 L1615.83 1208.23 L1615.25 1208.23 L1614.66 1208.23 L1614.07 1208.23 L1613.49 1208.23 L1612.9 1208.23 L1612.31 1208.23 L1611.73 1208.23 L1611.14 1208.23 L1610.55 1208.23 L1609.97 1208.23 L1609.38 1208.23 L1608.8 1208.23 L1608.21 1208.23 L1607.62 1208.23 L1607.04 1208.23 L1606.45 1208.23 L1605.86 1208.23 L1605.28 1208.23 L1604.69 1208.23 L1604.1 1208.23 L1603.52 1208.23 L1602.93 1208.23 L1602.34 1208.23 L1601.76 1208.23 L1601.17 1208.23 L1600.59 1208.23 L1600 1208.23 L1599.41 1208.23 L1598.83 1208.23 L1598.24 1208.23 L1597.65 1208.23 L1597.07 1208.23 L1596.48 1208.23 L1595.89 1208.23 L1595.31 1208.23 L1594.72 1208.23 L1594.14 1208.23 L1593.55 1208.23 L1592.96 1208.23 L1592.38 1208.23 L1591.79 1208.23 L1591.2 1208.23 L1590.62 1208.23 L1590.03 1208.23 L1589.44 1208.23 L1588.86 1208.23 L1588.27 1208.23 L1587.68 1208.23 L1587.1 1208.23 L1586.51 1208.23 L1585.93 1208.23 L1585.34 1208.23 L1584.75 1208.23 L1584.17 1208.23 L1583.58 1208.23 L1582.99 1208.23 L1582.41 1208.23 L1581.82 1208.23 L1581.23 1208.23 L1580.65 1208.23 L1580.06 1208.23 L1579.47 1208.23 L1578.89 1208.23 L1578.3 1208.23 L1577.72 1208.23 L1577.13 1208.23 L1576.54 1208.23 L1575.96 1208.23 L1575.37 1208.23 L1574.78 1208.23 L1574.2 1208.23 L1573.61 1208.23 L1573.02 1208.23 L1572.44 1208.23 L1571.85 1208.23 L1571.27 1208.23 L1570.68 1208.23 L1570.09 1208.23 L1569.51 1208.23 L1568.92 1208.23 L1568.33 1208.23 L1567.75 1208.23 L1567.16 1208.23 L1566.57 1208.23 L1565.99 1208.23 L1565.4 1208.23 L1564.81 1208.23 L1564.23 1208.23 L1563.64 1208.23 L1563.06 1208.23 L1562.47 1208.23 L1561.88 1208.23 L1561.3 1208.23 L1560.71 1208.23 L1560.12 1208.23 L1559.54 1208.23 L1558.95 1208.23 L1558.36 1208.23 L1557.78 1208.23 L1557.19 1208.23 L1556.6 1208.23 L1556.02 1208.23 L1555.43 1208.23 L1554.85 1208.23 L1554.26 1208.23 L1553.67 1208.23 L1553.09 1208.23 L1552.5 1208.23 L1551.91 1208.23 L1551.33 1208.23 L1550.74 1208.23 L1550.15 1208.23 L1549.57 1208.23 L1548.98 1208.23 L1548.4 1208.23 L1547.81 1208.23 L1547.22 1208.23 L1546.64 1208.23 L1546.05 1208.23 L1545.46 1208.23 L1544.88 1208.23 L1544.29 1208.23 L1543.7 1208.23 L1543.12 1208.23 L1542.53 1208.23 L1541.94 1208.23 L1541.36 1208.23 L1540.77 1208.23 L1540.19 1208.23 L1539.6 1208.23 L1539.01 1208.23 L1538.43 1208.23 L1537.84 1208.23 L1537.25 1208.23 L1536.67 1208.23 L1536.08 1208.23 L1535.49 1208.23 L1534.91 1208.23 L1534.32 1208.23 L1533.73 1208.23 L1533.15 1208.23 L1532.56 1208.23 L1531.98 1208.23 L1531.39 1208.23 L1530.8 1208.23 L1530.22 1208.23 L1529.63 1208.23 L1529.04 1208.23 L1528.46 1208.23 L1527.87 1208.23 L1527.28 1208.23 L1526.7 1208.23 L1526.11 1208.23 L1525.52 1208.23 L1524.94 1208.23 L1524.35 1208.23 L1523.77 1208.23 L1523.18 1208.23 L1522.59 1208.23 L1522.01 1208.23 L1521.42 1208.23 L1520.83 1208.23 L1520.25 1208.23 L1519.66 1208.23 L1519.07 1208.23 L1518.49 1208.23 L1517.9 1208.23 L1517.32 1208.23 L1516.73 1208.23 L1516.14 1208.23 L1515.56 1208.23 L1514.97 1208.23 L1514.38 1208.23 L1513.8 1208.23 L1513.21 1208.23 L1512.62 1208.23 L1512.04 1208.23 L1511.45 1208.23 L1510.86 1208.23 L1510.28 1208.23 L1509.69 1208.23 L1509.11 1208.23 L1508.52 1208.23 L1507.93 1208.23 L1507.35 1208.23 L1506.76 1208.23 L1506.17 1208.23 L1505.59 1208.23 L1505 1208.23 L1504.41 1208.23 L1503.83 1208.23 L1503.24 1208.23 L1502.65 1208.23 L1502.07 1208.23 L1501.48 1208.23 L1500.9 1208.23 L1500.31 1208.23 L1499.72 1208.23 L1499.14 1208.23 L1498.55 1208.23 L1497.96 1208.23 L1497.38 1208.23 L1496.79 1208.23 L1496.2 1208.23 L1495.62 1208.23 L1495.03 1208.23 L1494.45 1208.23 L1493.86 1208.23 L1493.27 1208.23 L1492.69 1208.23 L1492.1 1208.23 L1491.51 1208.23 L1490.93 1208.23 L1490.34 1208.23 L1489.75 1208.23 L1489.17 1208.23 L1488.58 1208.23 L1487.99 1208.23 L1487.41 1208.23 L1486.82 1208.23 L1486.24 1208.23 L1485.65 1208.23 L1485.06 1208.23 L1484.48 1208.23 L1483.89 1208.23 L1483.3 1208.23 L1482.72 1208.23 L1482.13 1208.23 L1481.54 1208.23 L1480.96 1208.23 L1480.37 1208.23 L1479.78 1208.23 L1479.2 1208.23 L1478.61 1208.23 L1478.03 1208.23 L1477.44 1208.23 L1476.85 1208.23 L1476.27 1208.23 L1475.68 1208.23 L1475.09 1208.23 L1474.51 1208.23 L1473.92 1208.23 L1473.33 1208.23 L1472.75 1208.23 L1472.16 1208.23 L1471.57 1208.23 L1470.99 1208.23 L1470.4 1208.23 L1469.82 1208.23 L1469.23 1208.23 L1468.64 1208.23 L1468.06 1208.23 L1467.47 1208.23 L1466.88 1208.23 L1466.3 1208.23 L1465.71 1208.23 L1465.12 1208.23 L1464.54 1208.23 L1463.95 1208.23 L1463.37 1208.23 L1462.78 1208.23 L1462.19 1208.23 L1461.61 1208.23 L1461.02 1208.23 L1460.43 1208.23 L1459.85 1208.23 L1459.26 1208.23 L1458.67 1208.23 L1458.09 1208.23 L1457.5 1208.23 L1456.91 1208.23 L1456.33 1208.23 L1455.74 1208.23 L1455.16 1208.23 L1454.57 1208.23 L1453.98 1208.23 L1453.4 1208.23 L1452.81 1208.23 L1452.22 1208.23 L1451.64 1208.23 L1451.05 1208.23 L1450.46 1208.23 L1449.88 1208.23 L1449.29 1208.23 L1448.7 1208.23 L1448.12 1208.23 L1447.53 1208.23 L1446.95 1208.23 L1446.36 1208.23 L1445.77 1208.23 L1445.19 1208.23 L1444.6 1208.23 L1444.01 1208.23 L1443.43 1208.23 L1442.84 1208.23 L1442.25 1208.23 L1441.67 1208.23 L1441.08 1208.23 L1440.5 1208.23 L1439.91 1208.23 L1439.32 1208.23 L1438.74 1208.23 L1438.15 1208.23 L1437.56 1208.23 L1436.98 1208.23 L1436.39 1208.23 L1435.8 1208.23 L1435.22 1208.23 L1434.63 1208.23 L1434.04 1208.23 L1433.46 1208.23 L1432.87 1208.23 L1432.29 1208.23 L1431.7 1208.23 L1431.11 1208.23 L1430.53 1208.23 L1429.94 1208.23 L1429.35 1208.23 L1428.77 1208.23 L1428.18 1208.23 L1427.59 1208.23 L1427.01 1208.23 L1426.42 1208.23 L1425.83 1208.23 L1425.25 1208.23 L1424.66 1208.23 L1424.08 1208.23 L1423.49 1208.23 L1422.9 1208.23 L1422.32 1208.23 L1421.73 1208.23 L1421.14 1208.23 L1420.56 1208.23 L1419.97 1208.23 L1419.38 1208.23 L1418.8 1208.23 L1418.21 1208.23 L1417.63 1208.23 L1417.04 1208.23 L1416.45 1208.23 L1415.87 1208.23 L1415.28 1208.23 L1414.69 1208.23 L1414.11 1208.23 L1413.52 1208.23 L1412.93 1208.23 L1412.35 1208.23 L1411.76 1208.23 L1411.17 1208.23 L1410.59 1208.23 L1410 1208.23 L1409.42 1208.23 L1408.83 1208.23 L1408.24 1208.23 L1407.66 1208.23 L1407.07 1208.23 L1406.48 1208.23 L1405.9 1208.23 L1405.31 1208.23 L1404.72 1208.23 L1404.14 1208.23 L1403.55 1208.23 L1402.96 1208.23 L1402.38 1208.23 L1401.79 1208.23 L1401.21 1208.23 L1400.62 1208.23 L1400.03 1208.23 L1399.45 1208.23 L1398.86 1208.23 L1398.27 1208.23 L1397.69 1208.23 L1397.1 1208.23 L1396.51 1208.23 L1395.93 1208.23 L1395.34 1208.23 L1394.75 1208.23 L1394.17 1208.23 L1393.58 1208.23 L1393 1208.23 L1392.41 1208.23 L1391.82 1208.23 L1391.24 1208.23 L1390.65 1208.23 L1390.06 1208.23 L1389.48 1208.23 L1388.89 1208.23 L1388.3 1208.23 L1387.72 1208.23 L1387.13 1208.23 L1386.55 1208.23 L1385.96 1208.23 L1385.37 1208.23 L1384.79 1208.23 L1384.2 1208.23 L1383.61 1208.23 L1383.03 1208.23 L1382.44 1208.23 L1381.85 1208.23 L1381.27 1208.23 L1380.68 1208.23 L1380.09 1208.23 L1379.51 1208.23 L1378.92 1208.23 L1378.34 1208.23 L1377.75 1208.23 L1377.16 1208.23 L1376.58 1208.23 L1375.99 1208.23 L1375.4 1208.23 L1374.82 1208.23 L1374.23 1208.23 L1373.64 1208.23 L1373.06 1208.23 L1372.47 1208.23 L1371.88 1208.23 L1371.3 1208.23 L1370.71 1208.23 L1370.13 1208.23 L1369.54 1208.23 L1368.95 1208.23 L1368.37 1208.23 L1367.78 1208.23 L1367.19 1208.23 L1366.61 1208.23 L1366.02 1208.23 L1365.43 1208.23 L1364.85 1208.23 L1364.26 1208.23 L1363.68 1208.23 L1363.09 1208.23 L1362.5 1208.23 L1361.92 1208.23 L1361.33 1208.23 L1360.74 1208.23 L1360.16 1208.23 L1359.57 1208.23 L1358.98 1208.23 L1358.4 1208.23 L1357.81 1208.23 L1357.22 1208.23 L1356.64 1208.23 L1356.05 1208.23 L1355.47 1208.23 L1354.88 1208.23 L1354.29 1208.23 L1353.71 1208.23 L1353.12 1208.23 L1352.53 1208.23 L1351.95 1208.23 L1351.36 1208.23 L1350.77 1208.23 L1350.19 1208.23 L1349.6 1208.23 L1349.01 1208.23 L1348.43 1208.23 L1347.84 1208.23 L1347.26 1208.23 L1346.67 1208.23 L1346.08 1208.23 L1345.5 1208.23 L1344.91 1208.23 L1344.32 1208.23 L1343.74 1208.23 L1343.15 1208.23 L1342.56 1208.23 L1341.98 1208.23 L1341.39 1208.23 L1340.8 1208.23 L1340.22 1208.23 L1339.63 1208.23 L1339.05 1208.23 L1338.46 1208.23 L1337.87 1208.23 L1337.29 1208.23 L1336.7 1208.23 L1336.11 1208.23 L1335.53 1208.23 L1334.94 1208.23 L1334.35 1208.23 L1333.77 1208.23 L1333.18 1208.23 L1332.6 1208.23 L1332.01 1208.23 L1331.42 1208.23 L1330.84 1208.23 L1330.25 1208.23 L1329.66 1208.23 L1329.08 1208.23 L1328.49 1208.23 L1327.9 1208.23 L1327.32 1208.23 L1326.73 1208.23 L1326.14 1208.23 L1325.56 1208.23 L1324.97 1208.23 L1324.39 1208.23 L1323.8 1208.23 L1323.21 1208.23 L1322.63 1208.23 L1322.04 1208.23 L1321.45 1208.23 L1320.87 1208.23 L1320.28 1208.23 L1319.69 1208.23 L1319.11 1208.23 L1318.52 1208.23 L1317.93 1208.23 L1317.35 1208.23 L1316.76 1208.23 L1316.18 1208.23 L1315.59 1208.23 L1315 1208.23 L1314.42 1208.23 L1313.83 1208.23 L1313.24 1208.23 L1312.66 1208.23 L1312.07 1208.23 L1311.48 1208.23 L1310.9 1208.23 L1310.31 1208.23 L1309.73 1208.23 L1309.14 1208.23 L1308.55 1208.23 L1307.97 1208.23 L1307.38 1208.23 L1306.79 1208.23 L1306.21 1208.23 L1305.62 1208.23 L1305.03 1208.23 L1304.45 1208.23 L1303.86 1208.23 L1303.27 1208.23 L1302.69 1208.23 L1302.1 1208.23 L1301.52 1208.23 L1300.93 1208.23 L1300.34 1208.23 L1299.76 1208.23 L1299.17 1208.23 L1298.58 1208.23 L1298 1208.23 L1297.41 1208.23 L1296.82 1208.23 L1296.24 1208.23 L1295.65 1208.23 L1295.06 1208.23 L1294.48 1208.23 L1293.89 1208.23 L1293.31 1208.23 L1292.72 1208.23 L1292.13 1208.23 L1291.55 1208.23 L1290.96 1208.23 L1290.37 1208.23 L1289.79 1208.23 L1289.2 1208.23 L1288.61 1208.23 L1288.03 1208.23 L1287.44 1208.23 L1286.86 1208.23 L1286.27 1208.23 L1285.68 1208.23 L1285.1 1208.23 L1284.51 1208.23 L1283.92 1208.23 L1283.34 1208.23 L1282.75 1208.23 L1282.16 1208.23 L1281.58 1208.23 L1280.99 1208.23 L1280.4 1208.23 L1279.82 1208.23 L1279.23 1208.23 L1278.65 1208.23 L1278.06 1208.23 L1277.47 1208.23 L1276.89 1208.23 L1276.3 1208.23 L1275.71 1208.23 L1275.13 1208.23 L1274.54 1208.23 L1273.95 1208.23 L1273.37 1208.23 L1272.78 1208.23 L1272.19 1208.23 L1271.61 1208.23 L1271.02 1208.23 L1270.44 1208.23 L1269.85 1208.23 L1269.26 1208.23 L1268.68 1208.23 L1268.09 1208.23 L1267.5 1208.23 L1266.92 1208.23 L1266.33 1208.23 L1265.74 1208.23 L1265.16 1208.23 L1264.57 1208.23 L1263.98 1208.23 L1263.4 1208.23 L1262.81 1208.23 L1262.23 1208.23 L1261.64 1208.23 L1261.05 1208.23 L1260.47 1208.23 L1259.88 1208.23 L1259.29 1208.23 L1258.71 1208.23 L1258.12 1208.23 L1257.53 1208.23 L1256.95 1208.23 L1256.36 1208.23 L1255.78 1208.23 L1255.19 1208.23 L1254.6 1208.23 L1254.02 1208.23 L1253.43 1208.23 L1252.84 1208.23 L1252.26 1208.23 L1251.67 1208.23 L1251.08 1208.23 L1250.5 1208.23 L1249.91 1208.23 L1249.32 1208.23 L1248.74 1208.23 L1248.15 1208.23 L1247.57 1208.23 L1246.98 1208.23 L1246.39 1208.23 L1245.81 1208.23 L1245.22 1208.23 L1244.63 1208.23 L1244.05 1208.23 L1243.46 1208.23 L1242.87 1208.23 L1242.29 1208.23 L1241.7 1208.23 L1241.11 1208.23 L1240.53 1208.23 L1239.94 1208.23 L1239.36 1208.23 L1238.77 1208.23 L1238.18 1208.23 L1237.6 1208.23 L1237.01 1208.23 L1236.42 1208.23 L1235.84 1208.23 L1235.25 1208.23 L1234.66 1208.23 L1234.08 1208.23 L1233.49 1208.23 L1232.91 1208.23 L1232.32 1208.23 L1231.73 1208.23 L1231.15 1208.23 L1230.56 1208.23 L1229.97 1208.23 L1229.39 1208.23 L1228.8 1208.23 L1228.21 1208.23 L1227.63 1208.23 L1227.04 1208.23 L1226.45 1208.23 L1225.87 1208.23 L1225.28 1208.23 L1224.7 1208.23 L1224.11 1208.23 L1223.52 1208.23 L1222.94 1208.23 L1222.35 1208.23 L1221.76 1208.23 L1221.18 1208.23 L1220.59 1208.23 L1220 1208.23 L1219.42 1208.23 L1218.83 1208.23 L1218.24 1208.23 L1217.66 1208.23 L1217.07 1208.23 L1216.49 1208.23 L1215.9 1208.23 L1215.31 1208.23 L1214.73 1208.23 L1214.14 1208.23 L1213.55 1208.23 L1212.97 1208.23 L1212.38 1208.23 L1211.79 1208.23 L1211.21 1208.23 L1210.62 1208.23 L1210.03 1208.23 L1209.45 1208.23 L1208.86 1208.23 L1208.28 1208.23 L1207.69 1208.23 L1207.1 1208.23 L1206.52 1208.23 L1205.93 1208.23 L1205.34 1208.23 L1204.76 1208.23 L1204.17 1208.23 L1203.58 1208.23 L1203 1208.23 L1202.41 1208.23 L1201.83 1208.23 L1201.24 1208.23 L1200.65 1208.23 L1200.07 1208.23 L1199.48 1208.23 L1198.89 1208.23 L1198.31 1208.23 L1197.72 1208.23 L1197.13 1208.23 L1196.55 1208.23 L1195.96 1208.23 L1195.37 1208.23 L1194.79 1208.23 L1194.2 1208.23 L1193.62 1208.23 L1193.03 1208.23 L1192.44 1208.23 L1191.86 1208.23 L1191.27 1208.23 L1190.68 1208.23 L1190.1 1208.23 L1189.51 1208.23 L1188.92 1208.23 L1188.34 1208.23 L1187.75 1208.23 L1187.16 1208.23 L1186.58 1208.23 L1185.99 1208.23 L1185.41 1208.23 L1184.82 1208.23 L1184.23 1208.23 L1183.65 1208.23 L1183.06 1208.23 L1182.47 1208.23 L1181.89 1208.23 L1181.3 1208.23 L1180.71 1208.23 L1180.13 1208.23 L1179.54 1208.23 L1178.96 1208.23 L1178.37 1208.23 L1177.78 1208.23 L1177.2 1208.23 L1176.61 1208.23 L1176.02 1208.23 L1175.44 1208.23 L1174.85 1208.23 L1174.26 1208.23 L1173.68 1208.23 L1173.09 1208.23 L1172.5 1208.23 L1171.92 1208.23 L1171.33 1208.23 L1170.75 1208.23 L1170.16 1208.23 L1169.57 1208.23 L1168.99 1208.23 L1168.4 1208.23 L1167.81 1208.23 L1167.23 1208.23 L1166.64 1208.23 L1166.05 1208.23 L1165.47 1208.23 L1164.88 1208.23 L1164.29 1208.23 L1163.71 1208.23 L1163.12 1208.23 L1162.54 1208.23 L1161.95 1208.23 L1161.36 1208.23 L1160.78 1208.23 L1160.19 1208.23 L1159.6 1208.23 L1159.02 1208.23 L1158.43 1208.23 L1157.84 1208.23 L1157.26 1208.23 L1156.67 1208.23 L1156.09 1208.23 L1155.5 1208.23 L1154.91 1208.23 L1154.33 1208.23 L1153.74 1208.23 L1153.15 1208.23 L1152.57 1208.23 L1151.98 1208.23 L1151.39 1208.23 L1150.81 1208.23 L1150.22 1208.23 L1149.63 1208.23 L1149.05 1208.23 L1148.46 1208.23 L1147.88 1208.23 L1147.29 1208.23 L1146.7 1208.23 L1146.12 1208.23 L1145.53 1208.23 L1144.94 1208.23 L1144.36 1208.23 L1143.77 1208.23 L1143.18 1208.23 L1142.6 1208.23 L1142.01 1208.23 L1141.42 1208.23 L1140.84 1208.23 L1140.25 1208.23 L1139.67 1208.23 L1139.08 1208.23 L1138.49 1208.23 L1137.91 1208.23 L1137.32 1208.23 L1136.73 1208.23 L1136.15 1208.23 L1135.56 1208.23 L1134.97 1208.23 L1134.39 1208.23 L1133.8 1208.23 L1133.21 1208.23 L1132.63 1208.23 L1132.04 1208.23 L1131.46 1208.23 L1130.87 1208.23 L1130.28 1208.23 L1129.7 1208.23 L1129.11 1208.23 L1128.52 1208.23 L1127.94 1208.23 L1127.35 1208.23 L1126.76 1208.23 L1126.18 1208.23 L1125.59 1208.23 L1125.01 1208.23 L1124.42 1208.23 L1123.83 1208.23 L1123.25 1208.23 L1122.66 1208.23 L1122.07 1208.23 L1121.49 1208.23 L1120.9 1208.23 L1120.31 1208.23 L1119.73 1208.23 L1119.14 1208.23 L1118.55 1208.23 L1117.97 1208.23 L1117.38 1208.23 L1116.8 1208.23 L1116.21 1208.23 L1115.62 1208.23 L1115.04 1208.23 L1114.45 1208.23 L1113.86 1208.23 L1113.28 1208.23 L1112.69 1208.23 L1112.1 1208.23 L1111.52 1208.23 L1110.93 1208.23 L1110.34 1208.23 L1109.76 1208.23 L1109.17 1208.23 L1108.59 1208.23 L1108 1208.23 L1107.41 1208.23 L1106.83 1208.23 L1106.24 1208.23 L1105.65 1208.23 L1105.07 1208.23 L1104.48 1208.23 L1103.89 1208.23 L1103.31 1208.23 L1102.72 1208.23 L1102.14 1208.23 L1101.55 1208.23 L1100.96 1208.23 L1100.38 1208.23 L1099.79 1208.23 L1099.2 1208.23 L1098.62 1208.23 L1098.03 1208.23 L1097.44 1208.23 L1096.86 1208.23 L1096.27 1208.23 L1095.68 1208.23 L1095.1 1208.23 L1094.51 1208.23 L1093.93 1208.23 L1093.34 1208.23 L1092.75 1208.23 L1092.17 1208.23 L1091.58 1208.23 L1090.99 1208.23 L1090.41 1208.23 L1089.82 1208.23 L1089.23 1208.23 L1088.65 1208.23 L1088.06 1208.23 L1087.47 1208.23 L1086.89 1208.23 L1086.3 1208.23 L1085.72 1208.23 L1085.13 1208.23 L1084.54 1208.23 L1083.96 1208.23 L1083.37 1208.23 L1082.78 1208.23 L1082.2 1208.23 L1081.61 1208.23 L1081.02 1208.23 L1080.44 1208.23 L1079.85 1208.23 L1079.26 1208.23 L1078.68 1208.23 L1078.09 1208.23 L1077.51 1208.23 L1076.92 1208.23 L1076.33 1208.23 L1075.75 1208.23 L1075.16 1208.23 L1074.57 1208.23 L1073.99 1208.23 L1073.4 1208.23 L1072.81 1208.23 L1072.23 1208.23 L1071.64 1208.23 L1071.06 1208.23 L1070.47 1208.23 L1069.88 1208.23 L1069.3 1208.23 L1068.71 1208.23 L1068.12 1208.23 L1067.54 1208.23 L1066.95 1208.23 L1066.36 1208.23 L1065.78 1208.23 L1065.19 1208.23 L1064.6 1208.23 L1064.02 1208.23 L1063.43 1208.23 L1062.85 1208.23 L1062.26 1208.23 L1061.67 1208.23 L1061.09 1208.23 L1060.5 1208.23 L1059.91 1208.23 L1059.33 1208.23 L1058.74 1208.23 L1058.15 1208.23 L1057.57 1208.23 L1056.98 1208.23 L1056.39 1208.23 L1055.81 1208.23 L1055.22 1208.23 L1054.64 1208.23 L1054.05 1208.23 L1053.46 1208.23 L1052.88 1208.23 L1052.29 1208.23 L1051.7 1208.23 L1051.12 1208.23 L1050.53 1208.23 L1049.94 1208.23 L1049.36 1208.23 L1048.77 1208.23 L1048.19 1208.23 L1047.6 1208.23 L1047.01 1208.23 L1046.43 1208.23 L1045.84 1208.23 L1045.25 1208.23 L1044.67 1208.23 L1044.08 1208.23 L1043.49 1208.23 L1042.91 1208.23 L1042.32 1208.23 L1041.73 1208.23 L1041.15 1208.23 L1040.56 1208.23 L1039.98 1208.23 L1039.39 1208.23 L1038.8 1208.23 L1038.22 1208.23 L1037.63 1208.23 L1037.04 1208.23 L1036.46 1208.23 L1035.87 1208.23 L1035.28 1208.23 L1034.7 1208.23 L1034.11 1208.23 L1033.52 1208.23 L1032.94 1208.23 L1032.35 1208.23 L1031.77 1208.23 L1031.18 1208.23 L1030.59 1208.23 L1030.01 1208.23 L1029.42 1208.23 L1028.83 1208.23 L1028.25 1208.23 L1027.66 1208.23 L1027.07 1208.23 L1026.49 1208.23 L1025.9 1208.23 L1025.32 1208.23 L1024.73 1208.23 L1024.14 1208.23 L1023.56 1208.23 L1022.97 1208.23 L1022.38 1208.23 L1021.8 1208.23 L1021.21 1208.23 L1020.62 1208.23 L1020.04 1208.23 L1019.45 1208.23 L1018.86 1208.23 L1018.28 1208.23 L1017.69 1208.23 L1017.11 1208.23 L1016.52 1208.23 L1015.93 1208.23 L1015.35 1208.23 L1014.76 1208.23 L1014.17 1208.23 L1013.59 1208.23 L1013 1208.23 L1012.41 1208.23 L1011.83 1208.23 L1011.24 1208.23 L1010.65 1208.23 L1010.07 1208.23 L1009.48 1208.23 L1008.9 1208.23 L1008.31 1208.23 L1007.72 1208.23 L1007.14 1208.23 L1006.55 1208.23 L1005.96 1208.23 L1005.38 1208.23 L1004.79 1208.23 L1004.2 1208.23 L1003.62 1208.23 L1003.03 1208.23 L1002.44 1208.23 L1001.86 1208.23 L1001.27 1208.23 L1000.69 1208.23 L1000.1 1208.23 L999.513 1208.23 L998.926 1208.23 L998.34 1208.23 L997.754 1208.23 L997.167 1208.23 L996.581 1208.23 L995.994 1208.23 L995.408 1208.23 L994.822 1208.23 L994.235 1208.23 L993.649 1208.23 L993.062 1208.23 L992.476 1208.23 L991.889 1208.23 L991.303 1208.23 L990.717 1208.23 L990.13 1208.23 L989.544 1208.23 L988.957 1208.23 L988.371 1208.23 L987.785 1208.23 L987.198 1208.23 L986.612 1208.23 L986.025 1208.23  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.51 986.612,1208.51 987.198,1208.51 987.785,1208.51 988.371,1208.51 988.957,1208.51 989.544,1208.51 990.13,1208.51 990.717,1208.51 991.303,1208.51 991.889,1208.51 992.476,1208.51 993.062,1208.51 993.649,1208.51 994.235,1208.51 994.822,1208.51 995.408,1208.51 995.994,1208.51 996.581,1208.51 997.167,1208.51 997.754,1208.51 998.34,1208.51 998.926,1208.51 999.513,1208.51 1000.1,1208.51 1000.69,1208.51 1001.27,1208.51 1001.86,1208.51 1002.44,1208.51 1003.03,1208.51 1003.62,1208.51 1004.2,1208.51 1004.79,1208.51 1005.38,1208.51 1005.96,1208.51 1006.55,1208.51 1007.14,1208.51 1007.72,1208.51 1008.31,1208.51 1008.9,1208.51 1009.48,1208.51 1010.07,1208.51 1010.65,1208.51 1011.24,1208.51 1011.83,1208.51 1012.41,1208.51 1013,1208.51 1013.59,1208.51 1014.17,1208.51 1014.76,1208.51 1015.35,1208.51 1015.93,1208.51 1016.52,1208.51 1017.11,1208.51 1017.69,1208.51 1018.28,1208.51 1018.86,1208.51 1019.45,1208.51 1020.04,1208.51 1020.62,1208.51 1021.21,1208.51 1021.8,1208.51 1022.38,1208.51 1022.97,1208.51 1023.56,1208.51 1024.14,1208.51 1024.73,1208.51 1025.32,1208.51 1025.9,1208.51 1026.49,1208.51 1027.07,1208.51 1027.66,1208.51 1028.25,1208.51 1028.83,1208.51 1029.42,1208.51 1030.01,1208.51 1030.59,1208.51 1031.18,1208.51 1031.77,1208.51 1032.35,1208.51 1032.94,1208.51 1033.52,1208.51 1034.11,1208.51 1034.7,1208.51 1035.28,1208.51 1035.87,1208.51 1036.46,1208.51 1037.04,1208.51 1037.63,1208.51 1038.22,1208.51 1038.8,1208.51 1039.39,1208.51 1039.98,1208.51 1040.56,1208.51 1041.15,1208.51 1041.73,1208.51 1042.32,1208.51 1042.91,1208.51 1043.49,1208.51 1044.08,1208.51 1044.67,1208.51 1045.25,1208.51 1045.84,1208.51 1046.43,1208.51 1047.01,1208.51 1047.6,1208.51 1048.19,1208.51 1048.77,1208.51 1049.36,1208.51 1049.94,1208.51 1050.53,1208.51 1051.12,1208.51 1051.7,1208.51 1052.29,1208.51 1052.88,1208.51 1053.46,1208.51 1054.05,1208.51 1054.64,1208.51 1055.22,1208.51 1055.81,1208.51 1056.39,1208.51 1056.98,1208.51 1057.57,1208.51 1058.15,1208.51 1058.74,1208.51 1059.33,1208.51 1059.91,1208.51 1060.5,1208.51 1061.09,1208.51 1061.67,1208.51 1062.26,1208.51 1062.85,1208.51 1063.43,1208.51 1064.02,1208.51 1064.6,1208.51 1065.19,1208.51 1065.78,1208.51 1066.36,1208.51 1066.95,1208.51 1067.54,1208.51 1068.12,1208.51 1068.71,1208.51 1069.3,1208.51 1069.88,1208.51 1070.47,1208.51 1071.06,1208.51 1071.64,1208.51 1072.23,1208.51 1072.81,1208.51 1073.4,1208.51 1073.99,1208.51 1074.57,1208.51 1075.16,1208.51 1075.75,1208.51 1076.33,1208.51 1076.92,1208.51 1077.51,1208.51 1078.09,1208.51 1078.68,1208.51 1079.26,1208.51 1079.85,1208.51 1080.44,1208.51 1081.02,1208.51 1081.61,1208.51 1082.2,1208.51 1082.78,1208.51 1083.37,1208.51 1083.96,1208.51 1084.54,1208.51 1085.13,1208.51 1085.72,1208.51 1086.3,1208.51 1086.89,1208.51 1087.47,1208.51 1088.06,1208.51 1088.65,1208.51 1089.23,1208.51 1089.82,1208.51 1090.41,1208.51 1090.99,1208.51 1091.58,1208.51 1092.17,1208.51 1092.75,1208.51 1093.34,1208.51 1093.93,1208.51 1094.51,1208.51 1095.1,1208.51 1095.68,1208.51 1096.27,1208.51 1096.86,1208.51 1097.44,1208.51 1098.03,1208.51 1098.62,1208.51 1099.2,1208.51 1099.79,1208.51 1100.38,1208.51 1100.96,1208.51 1101.55,1208.51 1102.14,1208.51 1102.72,1208.51 1103.31,1208.51 1103.89,1208.51 1104.48,1208.51 1105.07,1208.51 1105.65,1208.51 1106.24,1208.51 1106.83,1208.51 1107.41,1208.51 1108,1208.51 1108.59,1208.51 1109.17,1208.51 1109.76,1208.51 1110.34,1208.51 1110.93,1208.51 1111.52,1208.51 1112.1,1208.51 1112.69,1208.51 1113.28,1208.51 1113.86,1208.51 1114.45,1208.51 1115.04,1208.51 1115.62,1208.51 1116.21,1208.51 1116.8,1208.51 1117.38,1208.51 1117.97,1208.51 1118.55,1208.51 1119.14,1208.51 1119.73,1208.51 1120.31,1208.51 1120.9,1208.51 1121.49,1208.51 1122.07,1208.51 1122.66,1208.51 1123.25,1208.51 1123.83,1208.51 1124.42,1208.51 1125.01,1208.51 1125.59,1208.51 1126.18,1208.51 1126.76,1208.51 1127.35,1208.51 1127.94,1208.51 1128.52,1208.51 1129.11,1208.51 1129.7,1208.51 1130.28,1208.51 1130.87,1208.51 1131.46,1208.51 1132.04,1208.51 1132.63,1208.51 1133.21,1208.51 1133.8,1208.51 1134.39,1208.51 1134.97,1208.51 1135.56,1208.51 1136.15,1208.51 1136.73,1208.51 1137.32,1208.51 1137.91,1208.51 1138.49,1208.51 1139.08,1208.51 1139.67,1208.51 1140.25,1208.51 1140.84,1208.51 1141.42,1208.51 1142.01,1208.51 1142.6,1208.51 1143.18,1208.51 1143.77,1208.51 1144.36,1208.51 1144.94,1208.51 1145.53,1208.51 1146.12,1208.51 1146.7,1208.51 1147.29,1208.51 1147.88,1208.51 1148.46,1208.51 1149.05,1208.51 1149.63,1208.51 1150.22,1208.51 1150.81,1208.51 1151.39,1208.51 1151.98,1208.51 1152.57,1208.51 1153.15,1208.51 1153.74,1208.51 1154.33,1208.51 1154.91,1208.51 1155.5,1208.51 1156.09,1208.51 1156.67,1208.51 1157.26,1208.51 1157.84,1208.51 1158.43,1208.51 1159.02,1208.51 1159.6,1208.51 1160.19,1208.51 1160.78,1208.51 1161.36,1208.51 1161.95,1208.51 1162.54,1208.51 1163.12,1208.51 1163.71,1208.51 1164.29,1208.51 1164.88,1208.51 1165.47,1208.51 1166.05,1208.51 1166.64,1208.51 1167.23,1208.51 1167.81,1208.51 1168.4,1208.51 1168.99,1208.51 1169.57,1208.51 1170.16,1208.51 1170.75,1208.51 1171.33,1208.51 1171.92,1208.51 1172.5,1208.51 1173.09,1208.51 1173.68,1208.51 1174.26,1208.51 1174.85,1208.51 1175.44,1208.51 1176.02,1208.51 1176.61,1208.51 1177.2,1208.51 1177.78,1208.51 1178.37,1208.51 1178.96,1208.51 1179.54,1208.51 1180.13,1208.51 1180.71,1208.51 1181.3,1208.51 1181.89,1208.51 1182.47,1208.51 1183.06,1208.51 1183.65,1208.51 1184.23,1208.51 1184.82,1208.51 1185.41,1208.51 1185.99,1208.51 1186.58,1208.51 1187.16,1208.51 1187.75,1208.51 1188.34,1208.51 1188.92,1208.51 1189.51,1208.51 1190.1,1208.51 1190.68,1208.51 1191.27,1208.51 1191.86,1208.51 1192.44,1208.51 1193.03,1208.51 1193.62,1208.51 1194.2,1208.51 1194.79,1208.51 1195.37,1208.51 1195.96,1208.51 1196.55,1208.51 1197.13,1208.51 1197.72,1208.51 1198.31,1208.51 1198.89,1208.51 1199.48,1208.51 1200.07,1208.51 1200.65,1208.51 1201.24,1208.51 1201.83,1208.51 1202.41,1208.51 1203,1208.51 1203.58,1208.51 1204.17,1208.51 1204.76,1208.51 1205.34,1208.51 1205.93,1208.51 1206.52,1208.51 1207.1,1208.51 1207.69,1208.51 1208.28,1208.51 1208.86,1208.51 1209.45,1208.51 1210.03,1208.51 1210.62,1208.51 1211.21,1208.51 1211.79,1208.51 1212.38,1208.51 1212.97,1208.51 1213.55,1208.51 1214.14,1208.51 1214.73,1208.51 1215.31,1208.51 1215.9,1208.51 1216.49,1208.51 1217.07,1208.51 1217.66,1208.51 1218.24,1208.51 1218.83,1208.51 1219.42,1208.51 1220,1208.51 1220.59,1208.51 1221.18,1208.51 1221.76,1208.51 1222.35,1208.51 1222.94,1208.51 1223.52,1208.51 1224.11,1208.51 1224.7,1208.51 1225.28,1208.51 1225.87,1208.51 1226.45,1208.51 1227.04,1208.51 1227.63,1208.51 1228.21,1208.51 1228.8,1208.51 1229.39,1208.51 1229.97,1208.51 1230.56,1208.51 1231.15,1208.51 1231.73,1208.51 1232.32,1208.51 1232.91,1208.51 1233.49,1208.51 1234.08,1208.51 1234.66,1208.51 1235.25,1208.51 1235.84,1208.51 1236.42,1208.51 1237.01,1208.51 1237.6,1208.51 1238.18,1208.51 1238.77,1208.51 1239.36,1208.51 1239.94,1208.51 1240.53,1208.51 1241.11,1208.51 1241.7,1208.51 1242.29,1208.51 1242.87,1208.51 1243.46,1208.51 1244.05,1208.51 1244.63,1208.51 1245.22,1208.51 1245.81,1208.51 1246.39,1208.51 1246.98,1208.51 1247.57,1208.51 1248.15,1208.51 1248.74,1208.51 1249.32,1208.51 1249.91,1208.51 1250.5,1208.51 1251.08,1208.51 1251.67,1208.51 1252.26,1208.51 1252.84,1208.51 1253.43,1208.51 1254.02,1208.51 1254.6,1208.51 1255.19,1208.51 1255.78,1208.51 1256.36,1208.51 1256.95,1208.51 1257.53,1208.51 1258.12,1208.51 1258.71,1208.51 1259.29,1208.51 1259.88,1208.51 1260.47,1208.51 1261.05,1208.51 1261.64,1208.51 1262.23,1208.51 1262.81,1208.51 1263.4,1208.51 1263.98,1208.51 1264.57,1208.51 1265.16,1208.51 1265.74,1208.51 1266.33,1208.51 1266.92,1208.51 1267.5,1208.51 1268.09,1208.51 1268.68,1208.51 1269.26,1208.51 1269.85,1208.51 1270.44,1208.51 1271.02,1208.51 1271.61,1208.51 1272.19,1208.51 1272.78,1208.51 1273.37,1208.51 1273.95,1208.51 1274.54,1208.51 1275.13,1208.51 1275.71,1208.51 1276.3,1208.51 1276.89,1208.51 1277.47,1208.51 1278.06,1208.51 1278.65,1208.51 1279.23,1208.51 1279.82,1208.51 1280.4,1208.51 1280.99,1208.51 1281.58,1208.51 1282.16,1208.51 1282.75,1208.51 1283.34,1208.51 1283.92,1208.51 1284.51,1208.51 1285.1,1208.51 1285.68,1208.51 1286.27,1208.51 1286.86,1208.51 1287.44,1208.51 1288.03,1208.51 1288.61,1208.51 1289.2,1208.51 1289.79,1208.51 1290.37,1208.51 1290.96,1208.51 1291.55,1208.51 1292.13,1208.51 1292.72,1208.51 1293.31,1208.51 1293.89,1208.51 1294.48,1208.51 1295.06,1208.51 1295.65,1208.51 1296.24,1208.51 1296.82,1208.51 1297.41,1208.51 1298,1208.51 1298.58,1208.51 1299.17,1208.51 1299.76,1208.51 1300.34,1208.51 1300.93,1208.51 1301.52,1208.51 1302.1,1208.51 1302.69,1208.51 1303.27,1208.51 1303.86,1208.51 1304.45,1208.51 1305.03,1208.51 1305.62,1208.51 1306.21,1208.51 1306.79,1208.51 1307.38,1208.51 1307.97,1208.51 1308.55,1208.51 1309.14,1208.51 1309.73,1208.51 1310.31,1208.51 1310.9,1208.51 1311.48,1208.51 1312.07,1208.51 1312.66,1208.51 1313.24,1208.51 1313.83,1208.51 1314.42,1208.51 1315,1208.51 1315.59,1208.51 1316.18,1208.51 1316.76,1208.51 1317.35,1208.51 1317.93,1208.51 1318.52,1208.51 1319.11,1208.51 1319.69,1208.51 1320.28,1208.51 1320.87,1208.51 1321.45,1208.51 1322.04,1208.51 1322.63,1208.51 1323.21,1208.51 1323.8,1208.51 1324.39,1208.51 1324.97,1208.51 1325.56,1208.51 1326.14,1208.51 1326.73,1208.51 1327.32,1208.51 1327.9,1208.51 1328.49,1208.51 1329.08,1208.51 1329.66,1208.51 1330.25,1208.51 1330.84,1208.51 1331.42,1208.51 1332.01,1208.51 1332.6,1208.51 1333.18,1208.51 1333.77,1208.51 1334.35,1208.51 1334.94,1208.51 1335.53,1208.51 1336.11,1208.51 1336.7,1208.51 1337.29,1208.51 1337.87,1208.51 1338.46,1208.51 1339.05,1208.51 1339.63,1208.51 1340.22,1208.51 1340.8,1208.51 1341.39,1208.51 1341.98,1208.51 1342.56,1208.51 1343.15,1208.51 1343.74,1208.51 1344.32,1208.51 1344.91,1208.51 1345.5,1208.51 1346.08,1208.51 1346.67,1208.51 1347.26,1208.51 1347.84,1208.51 1348.43,1208.51 1349.01,1208.51 1349.6,1208.51 1350.19,1208.51 1350.77,1208.51 1351.36,1208.51 1351.95,1208.51 1352.53,1208.51 1353.12,1208.51 1353.71,1208.51 1354.29,1208.51 1354.88,1208.51 1355.47,1208.51 1356.05,1208.51 1356.64,1208.51 1357.22,1208.51 1357.81,1208.51 1358.4,1208.51 1358.98,1208.51 1359.57,1208.51 1360.16,1208.51 1360.74,1208.51 1361.33,1208.51 1361.92,1208.51 1362.5,1208.51 1363.09,1208.51 1363.68,1208.51 1364.26,1208.51 1364.85,1208.51 1365.43,1208.51 1366.02,1208.51 1366.61,1208.51 1367.19,1208.51 1367.78,1208.51 1368.37,1208.51 1368.95,1208.51 1369.54,1208.51 1370.13,1208.51 1370.71,1208.51 1371.3,1208.51 1371.88,1208.51 1372.47,1208.51 1373.06,1208.51 1373.64,1208.51 1374.23,1208.51 1374.82,1208.51 1375.4,1208.51 1375.99,1208.51 1376.58,1208.51 1377.16,1208.51 1377.75,1208.51 1378.34,1208.51 1378.92,1208.51 1379.51,1208.51 1380.09,1208.51 1380.68,1208.51 1381.27,1208.51 1381.85,1208.51 1382.44,1208.51 1383.03,1208.51 1383.61,1208.51 1384.2,1208.51 1384.79,1208.51 1385.37,1208.51 1385.96,1208.51 1386.55,1208.51 1387.13,1208.51 1387.72,1208.51 1388.3,1208.51 1388.89,1208.51 1389.48,1208.51 1390.06,1208.51 1390.65,1208.51 1391.24,1208.51 1391.82,1208.51 1392.41,1208.51 1393,1208.51 1393.58,1208.51 1394.17,1208.51 1394.75,1208.51 1395.34,1208.51 1395.93,1208.51 1396.51,1208.51 1397.1,1208.51 1397.69,1208.51 1398.27,1208.51 1398.86,1208.51 1399.45,1208.51 1400.03,1208.51 1400.62,1208.51 1401.21,1208.51 1401.79,1208.51 1402.38,1208.51 1402.96,1208.51 1403.55,1208.51 1404.14,1208.51 1404.72,1208.51 1405.31,1208.51 1405.9,1208.51 1406.48,1208.51 1407.07,1208.51 1407.66,1208.51 1408.24,1208.51 1408.83,1208.51 1409.42,1208.51 1410,1208.51 1410.59,1208.51 1411.17,1208.51 1411.76,1208.51 1412.35,1208.51 1412.93,1208.51 1413.52,1208.51 1414.11,1208.51 1414.69,1208.51 1415.28,1208.51 1415.87,1208.51 1416.45,1208.51 1417.04,1208.51 1417.63,1208.51 1418.21,1208.51 1418.8,1208.51 1419.38,1208.51 1419.97,1208.51 1420.56,1208.51 1421.14,1208.51 1421.73,1208.51 1422.32,1208.51 1422.9,1208.51 1423.49,1208.51 1424.08,1208.51 1424.66,1208.51 1425.25,1208.51 1425.83,1208.51 1426.42,1208.51 1427.01,1208.51 1427.59,1208.51 1428.18,1208.51 1428.77,1208.51 1429.35,1208.51 1429.94,1208.51 1430.53,1208.51 1431.11,1208.51 1431.7,1208.51 1432.29,1208.51 1432.87,1208.51 1433.46,1208.51 1434.04,1208.51 1434.63,1208.51 1435.22,1208.51 1435.8,1208.51 1436.39,1208.51 1436.98,1208.51 1437.56,1208.51 1438.15,1208.51 1438.74,1208.51 1439.32,1208.51 1439.91,1208.51 1440.5,1208.51 1441.08,1208.51 1441.67,1208.51 1442.25,1208.51 1442.84,1208.51 1443.43,1208.51 1444.01,1208.51 1444.6,1208.51 1445.19,1208.51 1445.77,1208.51 1446.36,1208.51 1446.95,1208.51 1447.53,1208.51 1448.12,1208.51 1448.7,1208.51 1449.29,1208.51 1449.88,1208.51 1450.46,1208.51 1451.05,1208.51 1451.64,1208.51 1452.22,1208.51 1452.81,1208.51 1453.4,1208.51 1453.98,1208.51 1454.57,1208.51 1455.16,1208.51 1455.74,1208.51 1456.33,1208.51 1456.91,1208.51 1457.5,1208.51 1458.09,1208.51 1458.67,1208.51 1459.26,1208.51 1459.85,1208.51 1460.43,1208.51 1461.02,1208.51 1461.61,1208.51 1462.19,1208.51 1462.78,1208.51 1463.37,1208.51 1463.95,1208.51 1464.54,1208.51 1465.12,1208.51 1465.71,1208.51 1466.3,1208.51 1466.88,1208.51 1467.47,1208.51 1468.06,1208.51 1468.64,1208.51 1469.23,1208.51 1469.82,1208.51 1470.4,1208.51 1470.99,1208.51 1471.57,1208.51 1472.16,1208.51 1472.75,1208.51 1473.33,1208.51 1473.92,1208.51 1474.51,1208.51 1475.09,1208.51 1475.68,1208.51 1476.27,1208.51 1476.85,1208.51 1477.44,1208.51 1478.03,1208.51 1478.61,1208.51 1479.2,1208.51 1479.78,1208.51 1480.37,1208.51 1480.96,1208.51 1481.54,1208.51 1482.13,1208.51 1482.72,1208.51 1483.3,1208.51 1483.89,1208.51 1484.48,1208.51 1485.06,1208.51 1485.65,1208.51 1486.24,1208.51 1486.82,1208.51 1487.41,1208.51 1487.99,1208.51 1488.58,1208.51 1489.17,1208.51 1489.75,1208.51 1490.34,1208.51 1490.93,1208.51 1491.51,1208.51 1492.1,1208.51 1492.69,1208.51 1493.27,1208.51 1493.86,1208.51 1494.45,1208.51 1495.03,1208.51 1495.62,1208.51 1496.2,1208.51 1496.79,1208.51 1497.38,1208.51 1497.96,1208.51 1498.55,1208.51 1499.14,1208.51 1499.72,1208.51 1500.31,1208.51 1500.9,1208.51 1501.48,1208.51 1502.07,1208.51 1502.65,1208.51 1503.24,1208.51 1503.83,1208.51 1504.41,1208.51 1505,1208.51 1505.59,1208.51 1506.17,1208.51 1506.76,1208.51 1507.35,1208.51 1507.93,1208.51 1508.52,1208.51 1509.11,1208.51 1509.69,1208.51 1510.28,1208.51 1510.86,1208.51 1511.45,1208.51 1512.04,1208.51 1512.62,1208.51 1513.21,1208.51 1513.8,1208.51 1514.38,1208.51 1514.97,1208.51 1515.56,1208.51 1516.14,1208.51 1516.73,1208.51 1517.32,1208.51 1517.9,1208.51 1518.49,1208.51 1519.07,1208.51 1519.66,1208.51 1520.25,1208.51 1520.83,1208.51 1521.42,1208.51 1522.01,1208.51 1522.59,1208.51 1523.18,1208.51 1523.77,1208.51 1524.35,1208.51 1524.94,1208.51 1525.52,1208.51 1526.11,1208.51 1526.7,1208.51 1527.28,1208.51 1527.87,1208.51 1528.46,1208.51 1529.04,1208.51 1529.63,1208.51 1530.22,1208.51 1530.8,1208.51 1531.39,1208.51 1531.98,1208.51 1532.56,1208.51 1533.15,1208.51 1533.73,1208.51 1534.32,1208.51 1534.91,1208.51 1535.49,1208.51 1536.08,1208.51 1536.67,1208.51 1537.25,1208.51 1537.84,1208.51 1538.43,1208.51 1539.01,1208.51 1539.6,1208.51 1540.19,1208.51 1540.77,1208.51 1541.36,1208.51 1541.94,1208.51 1542.53,1208.51 1543.12,1208.51 1543.7,1208.51 1544.29,1208.51 1544.88,1208.51 1545.46,1208.51 1546.05,1208.51 1546.64,1208.51 1547.22,1208.51 1547.81,1208.51 1548.4,1208.51 1548.98,1208.51 1549.57,1208.51 1550.15,1208.51 1550.74,1208.51 1551.33,1208.51 1551.91,1208.51 1552.5,1208.51 1553.09,1208.51 1553.67,1208.51 1554.26,1208.51 1554.85,1208.51 1555.43,1208.51 1556.02,1208.51 1556.6,1208.51 1557.19,1208.51 1557.78,1208.51 1558.36,1208.51 1558.95,1208.51 1559.54,1208.51 1560.12,1208.51 1560.71,1208.51 1561.3,1208.51 1561.88,1208.51 1562.47,1208.51 1563.06,1208.51 1563.64,1208.51 1564.23,1208.51 1564.81,1208.51 1565.4,1208.51 1565.99,1208.51 1566.57,1208.51 1567.16,1208.51 1567.75,1208.51 1568.33,1208.51 1568.92,1208.51 1569.51,1208.51 1570.09,1208.51 1570.68,1208.51 1571.27,1208.51 1571.85,1208.51 1572.44,1208.51 1573.02,1208.51 1573.61,1208.51 1574.2,1208.51 1574.78,1208.51 1575.37,1208.51 1575.96,1208.51 1576.54,1208.51 1577.13,1208.51 1577.72,1208.51 1578.3,1208.51 1578.89,1208.51 1579.47,1208.51 1580.06,1208.51 1580.65,1208.51 1581.23,1208.51 1581.82,1208.51 1582.41,1208.51 1582.99,1208.51 1583.58,1208.51 1584.17,1208.51 1584.75,1208.51 1585.34,1208.51 1585.93,1208.51 1586.51,1208.51 1587.1,1208.51 1587.68,1208.51 1588.27,1208.51 1588.86,1208.51 1589.44,1208.51 1590.03,1208.51 1590.62,1208.51 1591.2,1208.51 1591.79,1208.51 1592.38,1208.51 1592.96,1208.51 1593.55,1208.51 1594.14,1208.51 1594.72,1208.51 1595.31,1208.51 1595.89,1208.51 1596.48,1208.51 1597.07,1208.51 1597.65,1208.51 1598.24,1208.51 1598.83,1208.51 1599.41,1208.51 1600,1208.51 1600.59,1208.51 1601.17,1208.51 1601.76,1208.51 1602.34,1208.51 1602.93,1208.51 1603.52,1208.51 1604.1,1208.51 1604.69,1208.51 1605.28,1208.51 1605.86,1208.51 1606.45,1208.51 1607.04,1208.51 1607.62,1208.51 1608.21,1208.51 1608.8,1208.51 1609.38,1208.51 1609.97,1208.51 1610.55,1208.51 1611.14,1208.51 1611.73,1208.51 1612.31,1208.51 1612.9,1208.51 1613.49,1208.51 1614.07,1208.51 1614.66,1208.51 1615.25,1208.51 1615.83,1208.51 1616.42,1208.51 1617.01,1208.51 1617.59,1208.51 1618.18,1208.51 1618.76,1208.51 1619.35,1208.51 1619.94,1208.51 1620.52,1208.51 1621.11,1208.51 1621.7,1208.51 1622.28,1208.51 1622.87,1208.51 1623.46,1208.51 1624.04,1208.51 1624.63,1208.51 1625.22,1208.51 1625.8,1208.51 1626.39,1208.51 1626.97,1208.51 1627.56,1208.51 1628.15,1208.51 1628.73,1208.51 1629.32,1208.51 1629.91,1208.51 1630.49,1208.51 1631.08,1208.51 1631.67,1208.51 1632.25,1208.51 1632.84,1208.51 1633.42,1208.51 1634.01,1208.51 1634.6,1208.51 1635.18,1208.51 1635.77,1208.51 1636.36,1208.51 1636.94,1208.51 1637.53,1208.51 1638.12,1208.51 1638.7,1208.51 1639.29,1208.51 1639.88,1208.51 1640.46,1208.51 1641.05,1208.51 1641.63,1208.51 1642.22,1208.51 1642.81,1208.51 1643.39,1208.51 1643.98,1208.51 1644.57,1208.51 1645.15,1208.51 1645.74,1208.51 1646.33,1208.51 1646.91,1208.51 1647.5,1208.51 1648.09,1208.51 1648.67,1208.51 1649.26,1208.51 1649.84,1208.51 1650.43,1208.51 1651.02,1208.51 1651.6,1208.51 1652.19,1208.51 1652.78,1208.51 1653.36,1208.51 1653.95,1208.51 1654.54,1208.51 1655.12,1208.51 1655.71,1208.51 1656.29,1208.51 1656.88,1208.51 1657.47,1208.51 1658.05,1208.51 1658.64,1208.51 1659.23,1208.51 1659.81,1208.51 1660.4,1208.51 1660.99,1208.51 1661.57,1208.51 1662.16,1208.51 1662.75,1208.51 1663.33,1208.51 1663.92,1208.51 1664.5,1208.51 1665.09,1208.51 1665.68,1208.51 1666.26,1208.51 1666.85,1208.51 1667.44,1208.51 1668.02,1208.51 1668.61,1208.51 1669.2,1208.51 1669.78,1208.51 1670.37,1208.51 1670.96,1208.51 1671.54,1208.51 1672.13,1208.51 1672.71,1208.51 1673.3,1208.51 1673.89,1208.51 1674.47,1208.51 1675.06,1208.51 1675.65,1208.51 1676.23,1208.51 1676.82,1208.51 1677.41,1208.51 1677.99,1208.51 1678.58,1208.51 1679.17,1208.51 1679.75,1208.51 1680.34,1208.51 1680.92,1208.51 1681.51,1208.51 1682.1,1208.51 1682.68,1208.51 1683.27,1208.51 1683.86,1208.51 1684.44,1208.51 1685.03,1208.51 1685.62,1208.51 1686.2,1208.51 1686.79,1208.51 1687.37,1208.51 1687.96,1208.51 1688.55,1208.51 1689.13,1208.51 1689.72,1208.51 1690.31,1208.51 1690.89,1208.51 1691.48,1208.51 1692.07,1208.51 1692.65,1208.51 1693.24,1208.51 1693.83,1208.51 1694.41,1208.51 1695,1208.51 1695.58,1208.51 1696.17,1208.51 1696.76,1208.51 1697.34,1208.51 1697.93,1208.51 1698.52,1208.51 1699.1,1208.51 1699.69,1208.51 1700.28,1208.51 1700.86,1208.51 1701.45,1208.51 1702.04,1208.51 1702.62,1208.51 1703.21,1208.51 1703.79,1208.51 1704.38,1208.51 1704.97,1208.51 1705.55,1208.51 1706.14,1208.51 1706.73,1208.51 1707.31,1208.51 1707.9,1208.51 1708.49,1208.51 1709.07,1208.51 1709.66,1208.51 1710.24,1208.51 1710.83,1208.51 1711.42,1208.51 1712,1208.51 1712.59,1208.51 1713.18,1208.51 1713.76,1208.51 1714.35,1208.51 1714.94,1208.51 1715.52,1208.51 1716.11,1208.51 1716.7,1208.51 1717.28,1208.51 1717.87,1208.51 1718.45,1208.51 1719.04,1208.51 1719.63,1208.51 1720.21,1208.51 1720.8,1208.51 1721.39,1208.51 1721.97,1208.51 1722.56,1208.51 1723.15,1208.51 1723.73,1208.51 1724.32,1208.51 1724.91,1208.51 1725.49,1208.51 1726.08,1208.51 1726.66,1208.51 1727.25,1208.51 1727.84,1208.51 1728.42,1208.51 1729.01,1208.51 1729.6,1208.51 1730.18,1208.51 1730.77,1208.51 1731.36,1208.51 1731.94,1208.51 1732.53,1208.51 1733.11,1208.51 1733.7,1208.51 1734.29,1208.51 1734.87,1208.51 1735.46,1208.51 1736.05,1208.51 1736.63,1208.51 1737.22,1208.51 1737.81,1208.51 1738.39,1208.51 1738.98,1208.51 1739.57,1208.51 1740.15,1208.51 1740.74,1208.51 1741.32,1208.51 1741.91,1208.51 1742.5,1208.51 1743.08,1208.51 1743.67,1208.51 1744.26,1208.51 1744.84,1208.51 1745.43,1208.51 1746.02,1208.51 1746.6,1208.51 1747.19,1208.51 1747.78,1208.51 1748.36,1208.51 1748.95,1208.51 1749.53,1208.51 1750.12,1208.51 1750.71,1208.51 1751.29,1208.51 1751.88,1208.51 1752.47,1208.51 1753.05,1208.51 1753.64,1208.51 1754.23,1208.51 1754.81,1208.51 1755.4,1208.51 1755.99,1208.51 1756.57,1208.51 1757.16,1208.51 1757.74,1208.51 1758.33,1208.51 1758.92,1208.51 1759.5,1208.51 1760.09,1208.51 1760.68,1208.51 1761.26,1208.51 1761.85,1208.51 1762.44,1208.51 1763.02,1208.51 1763.61,1208.51 1764.19,1208.51 1764.78,1208.51 1765.37,1208.51 1765.95,1208.51 1766.54,1208.51 1767.13,1208.51 1767.71,1208.51 1768.3,1208.51 1768.89,1208.51 1769.47,1208.51 1770.06,1208.51 1770.65,1208.51 1771.23,1208.51 1771.82,1208.51 1772.4,1208.51 1772.99,1208.51 1773.58,1208.51 1774.16,1208.51 1774.75,1208.51 1775.34,1208.51 1775.92,1208.51 1776.51,1208.51 1777.1,1208.51 1777.68,1208.51 1778.27,1208.51 1778.86,1208.51 1779.44,1208.51 1780.03,1208.51 1780.61,1208.51 1781.2,1208.51 1781.79,1208.51 1782.37,1208.51 1782.96,1208.51 1783.55,1208.51 1784.13,1208.51 1784.72,1208.51 1785.31,1208.51 1785.89,1208.51 1786.48,1208.51 1787.06,1208.51 1787.65,1208.51 1788.24,1208.51 1788.82,1208.51 1789.41,1208.51 1790,1208.51 1790.58,1208.51 1791.17,1208.51 1791.76,1208.51 1792.34,1208.51 1792.93,1208.51 1793.52,1208.51 1794.1,1208.51 1794.69,1208.51 1795.27,1208.51 1795.86,1208.51 1796.45,1208.51 1797.03,1208.51 1797.62,1208.51 1798.21,1208.51 1798.79,1208.51 1799.38,1208.51 1799.97,1208.51 1800.55,1208.51 1801.14,1208.51 1801.73,1208.51 1802.31,1208.51 1802.9,1208.51 1803.48,1208.51 1804.07,1208.51 1804.66,1208.51 1805.24,1208.51 1805.83,1208.51 1806.42,1208.51 1807,1208.51 1807.59,1208.51 1808.18,1208.51 1808.76,1208.51 1809.35,1208.51 1809.94,1208.51 1810.52,1208.51 1811.11,1208.51 1811.69,1208.51 1812.28,1208.51 1812.87,1208.51 1813.45,1208.51 1814.04,1208.51 1814.63,1208.51 1815.21,1208.51 1815.8,1208.51 1816.39,1208.51 1816.97,1208.51 1817.56,1208.51 1818.14,1208.51 1818.73,1208.51 1819.32,1208.51 1819.9,1208.51 1820.49,1208.51 1821.08,1208.51 1821.66,1208.51 1822.25,1208.51 1822.84,1208.51 1823.42,1208.51 1824.01,1208.51 1824.6,1208.51 1825.18,1208.51 1825.77,1208.51 1826.35,1208.51 1826.94,1208.51 1827.53,1208.51 1828.11,1208.51 1828.7,1208.51 1829.29,1208.51 1829.87,1208.51 1830.46,1208.51 1831.05,1208.51 1831.63,1208.51 1832.22,1208.51 1832.81,1208.51 1833.39,1208.51 1833.98,1208.51 1834.56,1208.51 1835.15,1208.51 1835.74,1208.51 1836.32,1208.51 1836.91,1208.51 1837.5,1208.51 1838.08,1208.51 1838.67,1208.51 1839.26,1208.51 1839.84,1208.51 1840.43,1208.51 1841.01,1208.51 1841.6,1208.51 1842.19,1208.51 1842.77,1208.51 1843.36,1208.51 1843.95,1208.51 1844.53,1208.51 1845.12,1208.51 1845.71,1208.51 1846.29,1208.51 1846.88,1208.51 1847.47,1208.51 1848.05,1208.51 1848.64,1208.51 1849.22,1208.51 1849.81,1208.51 1850.4,1208.51 1850.98,1208.51 1851.57,1208.51 1852.16,1208.51 1852.74,1208.51 1853.33,1208.51 1853.92,1208.51 1854.5,1208.51 1855.09,1208.51 1855.68,1208.51 1856.26,1208.51 1856.85,1208.51 1857.43,1208.51 1858.02,1208.51 1858.61,1208.51 1859.19,1208.51 1859.78,1208.51 1860.37,1208.51 1860.95,1208.51 1861.54,1208.51 1862.13,1208.51 1862.71,1208.51 1863.3,1208.51 1863.88,1208.51 1864.47,1208.51 1865.06,1208.51 1865.64,1208.51 1866.23,1208.51 1866.82,1208.51 1867.4,1208.51 1867.99,1208.51 1868.58,1208.51 1869.16,1208.51 1869.75,1208.51 1870.34,1208.51 1870.92,1208.51 1871.51,1208.51 1872.09,1208.51 1872.68,1208.51 1873.27,1208.51 1873.85,1208.51 1874.44,1208.51 1875.03,1208.51 1875.61,1208.51 1876.2,1208.51 1876.79,1208.51 1877.37,1208.51 1877.96,1208.51 1878.55,1208.51 1879.13,1208.51 1879.72,1208.51 1880.3,1208.51 1880.89,1208.51 1881.48,1208.51 1882.06,1208.51 1882.65,1208.51 1883.24,1208.51 1883.82,1208.51 1884.41,1208.51 1885,1208.51 1885.58,1208.51 1886.17,1208.51 1886.76,1208.51 1887.34,1208.51 1887.93,1208.51 1888.51,1208.51 1889.1,1208.51 1889.69,1208.51 1890.27,1208.51 1890.86,1208.51 1891.45,1208.51 1892.03,1208.51 1892.62,1208.51 1893.21,1208.51 1893.79,1208.51 1894.38,1208.51 1894.96,1208.51 1895.55,1208.51 1896.14,1208.51 1896.72,1208.51 1897.31,1208.51 1897.9,1208.51 1898.48,1208.51 1899.07,1208.51 1899.66,1208.51 1900.24,1208.51 1900.83,1208.51 1901.42,1208.51 1902,1208.51 1902.59,1208.51 1903.17,1208.51 1903.76,1208.51 1904.35,1208.51 1904.93,1208.51 1905.52,1208.51 1906.11,1208.51 1906.69,1208.51 1907.28,1208.51 1907.87,1208.51 1908.45,1208.51 1909.04,1208.51 1909.63,1208.51 1910.21,1208.51 1910.8,1208.51 1911.38,1208.51 1911.97,1208.51 1912.56,1208.51 1913.14,1208.51 1913.73,1208.51 1914.32,1208.51 1914.9,1208.51 1915.49,1208.51 1916.08,1208.51 1916.66,1208.51 1917.25,1208.51 1917.83,1208.51 1918.42,1208.51 1919.01,1208.51 1919.59,1208.51 1920.18,1208.51 1920.77,1208.51 1921.35,1208.51 1921.94,1208.51 1922.53,1208.51 1923.11,1208.51 1923.7,1208.51 1924.29,1208.51 1924.87,1208.51 1925.46,1208.51 1926.04,1208.51 1926.63,1208.51 1927.22,1208.51 1927.8,1208.51 1928.39,1208.51 1928.98,1208.51 1929.56,1208.51 1930.15,1208.51 1930.74,1208.51 1931.32,1208.51 1931.91,1208.51 1932.5,1208.51 1933.08,1208.51 1933.67,1208.51 1934.25,1208.51 1934.84,1208.51 1935.43,1208.51 1936.01,1208.51 1936.6,1208.51 1937.19,1208.51 1937.77,1208.51 1938.36,1208.51 1938.95,1208.51 1939.53,1208.51 1940.12,1208.51 1940.71,1208.51 1941.29,1208.51 1941.88,1208.51 1942.46,1208.51 1943.05,1208.51 1943.64,1208.51 1944.22,1208.51 1944.81,1208.51 1945.4,1208.51 1945.98,1208.51 1946.57,1208.51 1947.16,1208.51 1947.74,1208.51 1948.33,1208.51 1948.91,1208.51 1949.5,1208.51 1950.09,1208.51 1950.67,1208.51 1951.26,1208.51 1951.85,1208.51 1952.43,1208.51 1953.02,1208.51 1953.61,1208.51 1954.19,1208.51 1954.78,1208.51 1955.37,1208.51 1955.95,1208.51 1956.54,1208.51 1957.12,1208.51 1957.71,1208.51 1958.3,1208.51 1958.88,1208.51 1959.47,1208.51 1960.06,1208.51 1960.64,1208.51 1961.23,1208.51 1961.82,1208.51 1962.4,1208.51 1962.99,1208.51 1963.58,1208.51 1964.16,1208.51 1964.75,1208.51 1965.33,1208.51 1965.92,1208.51 1966.51,1208.51 1967.09,1208.51 1967.68,1208.51 1968.27,1208.51 1968.85,1208.51 1969.44,1208.51 1970.03,1208.51 1970.61,1208.51 1971.2,1208.51 1971.78,1208.51 1972.37,1208.51 1972.96,1208.51 1973.54,1208.51 1974.13,1208.51 1974.72,1208.51 1975.3,1208.51 1975.89,1208.51 1976.48,1208.51 1977.06,1208.51 1977.65,1208.51 1978.24,1208.51 1978.82,1208.51 1979.41,1208.51 1979.99,1208.51 1980.58,1208.51 1981.17,1208.51 1981.75,1208.51 1982.34,1208.51 1982.93,1208.51 1983.51,1208.51 1984.1,1208.51 1984.69,1208.51 1985.27,1208.51 1985.86,1208.51 1986.45,1208.51 1987.03,1208.51 1987.62,1208.51 1988.2,1208.51 1988.79,1208.51 1989.38,1208.51 1989.96,1208.51 1990.55,1208.51 1991.14,1208.51 1991.72,1208.51 1992.31,1208.51 1992.9,1208.51 1993.48,1208.51 1994.07,1208.51 1994.65,1208.51 1995.24,1208.51 1995.83,1208.51 1996.41,1208.51 1997,1208.51 1997.59,1208.51 1998.17,1208.51 1998.76,1208.51 1999.35,1208.51 1999.93,1208.51 2000.52,1208.51 2001.11,1208.51 2001.69,1208.51 2002.28,1208.51 2002.86,1208.51 2003.45,1208.51 2004.04,1208.51 2004.62,1208.51 2005.21,1208.51 2005.8,1208.51 2006.38,1208.51 2006.97,1208.51 2007.56,1208.51 2008.14,1208.51 2008.73,1208.51 2009.32,1208.51 2009.9,1208.51 2010.49,1208.51 2011.07,1208.51 2011.66,1208.51 2012.25,1208.51 2012.83,1208.51 2013.42,1208.51 2014.01,1208.51 2014.59,1208.51 2015.18,1208.51 2015.77,1208.51 2016.35,1208.51 2016.94,1208.51 2017.53,1208.51 2018.11,1208.51 2018.7,1208.51 2019.28,1208.51 2019.87,1208.51 2020.46,1208.51 2021.04,1208.51 2021.63,1208.51 2022.22,1208.51 2022.8,1208.51 2023.39,1208.51 2023.98,1208.51 2024.56,1208.51 2025.15,1208.51 2025.73,1208.51 2026.32,1208.51 2026.91,1208.51 2027.49,1208.51 2028.08,1208.51 2028.67,1208.51 2029.25,1208.51 2029.84,1208.51 2030.43,1208.51 2031.01,1208.51 2031.6,1208.51 2032.19,1208.51 2032.77,1208.51 2033.36,1208.51 2033.94,1208.51 2034.53,1208.51 2035.12,1208.51 2035.7,1208.51 2036.29,1208.51 2036.88,1208.51 2037.46,1208.51 2038.05,1208.51 2038.64,1208.51 2039.22,1208.51 2039.81,1208.51 2040.4,1208.51 2040.98,1208.51 2041.57,1208.51 2042.15,1208.51 2042.74,1208.51 2043.33,1208.51 2043.91,1208.51 2044.5,1208.51 2045.09,1208.51 2045.67,1208.51 2046.26,1208.51 2046.85,1208.51 2047.43,1208.51 2048.02,1208.51 2048.6,1208.51 2049.19,1208.51 2049.78,1208.51 2050.36,1208.51 2050.95,1208.51 2051.54,1208.51 2052.12,1208.51 2052.71,1208.51 2053.3,1208.51 2053.88,1208.51 2054.47,1208.51 2055.06,1208.51 2055.64,1208.51 2056.23,1208.51 2056.81,1208.51 2057.4,1208.51 2057.99,1208.51 2058.57,1208.51 2059.16,1208.51 2059.75,1208.51 2060.33,1208.51 2060.92,1208.51 2061.51,1208.51 2062.09,1208.51 2062.68,1208.51 2063.27,1208.51 2063.85,1208.51 2064.44,1208.51 2065.02,1208.51 2065.61,1208.51 2066.2,1208.51 2066.78,1208.51 2067.37,1208.51 2067.96,1208.51 2068.54,1208.51 2069.13,1208.51 2069.72,1208.51 2070.3,1208.51 2070.89,1208.51 2071.48,1208.51 2072.06,1208.51 2072.65,1208.51 2073.23,1208.51 2073.82,1208.51 2074.41,1208.51 2074.99,1208.51 2075.58,1208.51 2076.17,1208.51 2076.75,1208.51 2077.34,1208.51 2077.93,1208.51 2078.51,1208.51 2079.1,1208.51 2079.68,1208.51 2080.27,1208.51 2080.86,1208.51 2081.44,1208.51 2082.03,1208.51 2082.62,1208.51 2083.2,1208.51 2083.79,1208.51 2084.38,1208.51 2084.96,1208.51 2085.55,1208.51 2086.14,1208.51 2086.72,1208.51 2087.31,1208.51 2087.89,1208.51 2088.48,1208.51 2089.07,1208.51 2089.65,1208.51 2090.24,1208.51 2090.83,1208.51 2091.41,1208.51 2092,1208.51 2092.59,1208.51 2093.17,1208.51 2093.76,1208.51 2094.35,1208.51 2094.93,1208.51 2095.52,1208.51 2096.1,1208.51 2096.69,1208.51 2097.28,1208.51 2097.86,1208.51 2098.45,1208.51 2099.04,1208.51 2099.62,1208.51 2100.21,1208.51 2100.8,1208.51 2101.38,1208.51 2101.97,1208.51 2102.55,1208.51 2103.14,1208.51 2103.73,1208.51 2104.31,1208.51 2104.9,1208.51 2105.49,1208.51 2106.07,1208.51 2106.66,1208.51 2107.25,1208.51 2107.83,1208.51 2108.42,1208.51 2109.01,1208.51 2109.59,1208.51 2110.18,1208.51 2110.76,1208.51 2111.35,1208.51 2111.94,1208.51 2112.52,1208.51 2113.11,1208.51 2113.7,1208.51 2114.28,1208.51 2114.87,1208.51 2115.46,1208.51 2116.04,1208.51 2116.63,1208.51 2117.22,1208.51 2117.8,1208.51 2118.39,1208.51 2118.97,1208.51 2119.56,1208.51 2120.15,1208.51 2120.73,1208.51 2121.32,1208.51 2121.91,1208.51 2122.49,1208.51 2123.08,1208.51 2123.67,1208.51 2124.25,1208.51 2124.84,1208.51 2125.42,1208.51 2126.01,1208.51 2126.6,1208.51 2127.18,1208.51 2127.77,1208.51 2128.36,1208.51 2128.94,1208.51 2129.53,1208.51 2130.12,1208.51 2130.7,1208.51 2131.29,1208.51 2131.88,1208.51 2132.46,1208.51 2133.05,1208.51 2133.63,1208.51 2134.22,1208.51 2134.81,1208.51 2135.39,1208.51 2135.98,1208.51 2136.57,1208.51 2137.15,1208.51 2137.74,1208.51 2138.33,1208.51 2138.91,1208.51 2139.5,1208.51 2140.09,1208.51 2140.67,1208.51 2141.26,1208.51 2141.84,1208.51 2142.43,1208.51 2143.02,1208.51 2143.6,1208.51 2144.19,1208.51 2144.78,1208.51 2145.36,1208.51 2145.95,1208.51 2146.54,1208.51 2147.12,1208.51 2147.71,1208.51 2148.3,1208.51 2148.88,1208.51 2149.47,1208.51 2150.05,1208.51 2150.64,1208.51 2151.23,1208.51 2151.81,1208.51 2152.4,1208.51 2152.99,1208.51 2153.57,1208.51 2154.16,1208.51 2154.75,1208.51 2155.33,1208.51 2155.92,1208.51 2156.5,1208.51 2157.09,1208.51 2157.68,1208.51 2158.26,1208.51 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1208.43 L986.612 1208.43 L987.198 1208.43 L987.785 1208.43 L988.371 1208.43 L988.957 1208.43 L989.544 1208.43 L990.13 1208.43 L990.717 1208.43 L991.303 1208.43 L991.889 1208.43 L992.476 1208.43 L993.062 1208.43 L993.649 1208.43 L994.235 1208.43 L994.822 1208.43 L995.408 1208.43 L995.994 1208.43 L996.581 1208.43 L997.167 1208.43 L997.754 1208.43 L998.34 1208.43 L998.926 1208.43 L999.513 1208.43 L1000.1 1208.43 L1000.69 1208.43 L1001.27 1208.43 L1001.86 1208.43 L1002.44 1208.43 L1003.03 1208.43 L1003.62 1208.43 L1004.2 1208.43 L1004.79 1208.43 L1005.38 1208.43 L1005.96 1208.43 L1006.55 1208.43 L1007.14 1208.43 L1007.72 1208.43 L1008.31 1208.43 L1008.9 1208.43 L1009.48 1208.43 L1010.07 1208.43 L1010.65 1208.43 L1011.24 1208.43 L1011.83 1208.43 L1012.41 1208.43 L1013 1208.43 L1013.59 1208.43 L1014.17 1208.43 L1014.76 1208.43 L1015.35 1208.43 L1015.93 1208.43 L1016.52 1208.43 L1017.11 1208.43 L1017.69 1208.43 L1018.28 1208.43 L1018.86 1208.43 L1019.45 1208.43 L1020.04 1208.43 L1020.62 1208.43 L1021.21 1208.43 L1021.8 1208.43 L1022.38 1208.43 L1022.97 1208.43 L1023.56 1208.43 L1024.14 1208.43 L1024.73 1208.43 L1025.32 1208.43 L1025.9 1208.43 L1026.49 1208.43 L1027.07 1208.43 L1027.66 1208.43 L1028.25 1208.43 L1028.83 1208.43 L1029.42 1208.43 L1030.01 1208.43 L1030.59 1208.43 L1031.18 1208.43 L1031.77 1208.43 L1032.35 1208.43 L1032.94 1208.43 L1033.52 1208.43 L1034.11 1208.43 L1034.7 1208.43 L1035.28 1208.43 L1035.87 1208.43 L1036.46 1208.43 L1037.04 1208.43 L1037.63 1208.43 L1038.22 1208.43 L1038.8 1208.43 L1039.39 1208.43 L1039.98 1208.43 L1040.56 1208.43 L1041.15 1208.43 L1041.73 1208.43 L1042.32 1208.43 L1042.91 1208.43 L1043.49 1208.43 L1044.08 1208.43 L1044.67 1208.43 L1045.25 1208.43 L1045.84 1208.43 L1046.43 1208.43 L1047.01 1208.43 L1047.6 1208.43 L1048.19 1208.43 L1048.77 1208.43 L1049.36 1208.43 L1049.94 1208.43 L1050.53 1208.43 L1051.12 1208.43 L1051.7 1208.43 L1052.29 1208.43 L1052.88 1208.43 L1053.46 1208.43 L1054.05 1208.43 L1054.64 1208.43 L1055.22 1208.43 L1055.81 1208.43 L1056.39 1208.43 L1056.98 1208.43 L1057.57 1208.43 L1058.15 1208.43 L1058.74 1208.43 L1059.33 1208.43 L1059.91 1208.43 L1060.5 1208.43 L1061.09 1208.43 L1061.67 1208.43 L1062.26 1208.43 L1062.85 1208.43 L1063.43 1208.43 L1064.02 1208.43 L1064.6 1208.43 L1065.19 1208.43 L1065.78 1208.43 L1066.36 1208.43 L1066.95 1208.43 L1067.54 1208.43 L1068.12 1208.43 L1068.71 1208.43 L1069.3 1208.43 L1069.88 1208.43 L1070.47 1208.43 L1071.06 1208.43 L1071.64 1208.43 L1072.23 1208.43 L1072.81 1208.43 L1073.4 1208.43 L1073.99 1208.43 L1074.57 1208.43 L1075.16 1208.43 L1075.75 1208.43 L1076.33 1208.43 L1076.92 1208.43 L1077.51 1208.43 L1078.09 1208.43 L1078.68 1208.43 L1079.26 1208.43 L1079.85 1208.43 L1080.44 1208.43 L1081.02 1208.43 L1081.61 1208.43 L1082.2 1208.43 L1082.78 1208.43 L1083.37 1208.43 L1083.96 1208.43 L1084.54 1208.43 L1085.13 1208.43 L1085.72 1208.43 L1086.3 1208.43 L1086.89 1208.43 L1087.47 1208.43 L1088.06 1208.43 L1088.65 1208.43 L1089.23 1208.43 L1089.82 1208.43 L1090.41 1208.43 L1090.99 1208.43 L1091.58 1208.43 L1092.17 1208.43 L1092.75 1208.43 L1093.34 1208.43 L1093.93 1208.43 L1094.51 1208.43 L1095.1 1208.43 L1095.68 1208.43 L1096.27 1208.43 L1096.86 1208.43 L1097.44 1208.43 L1098.03 1208.43 L1098.62 1208.43 L1099.2 1208.43 L1099.79 1208.43 L1100.38 1208.43 L1100.96 1208.43 L1101.55 1208.43 L1102.14 1208.43 L1102.72 1208.43 L1103.31 1208.43 L1103.89 1208.43 L1104.48 1208.43 L1105.07 1208.43 L1105.65 1208.43 L1106.24 1208.43 L1106.83 1208.43 L1107.41 1208.43 L1108 1208.43 L1108.59 1208.43 L1109.17 1208.43 L1109.76 1208.43 L1110.34 1208.43 L1110.93 1208.43 L1111.52 1208.43 L1112.1 1208.43 L1112.69 1208.43 L1113.28 1208.43 L1113.86 1208.43 L1114.45 1208.43 L1115.04 1208.43 L1115.62 1208.43 L1116.21 1208.43 L1116.8 1208.43 L1117.38 1208.43 L1117.97 1208.43 L1118.55 1208.43 L1119.14 1208.43 L1119.73 1208.43 L1120.31 1208.43 L1120.9 1208.43 L1121.49 1208.43 L1122.07 1208.43 L1122.66 1208.43 L1123.25 1208.43 L1123.83 1208.43 L1124.42 1208.43 L1125.01 1208.43 L1125.59 1208.43 L1126.18 1208.43 L1126.76 1208.43 L1127.35 1208.43 L1127.94 1208.43 L1128.52 1208.43 L1129.11 1208.43 L1129.7 1208.43 L1130.28 1208.43 L1130.87 1208.43 L1131.46 1208.43 L1132.04 1208.43 L1132.63 1208.43 L1133.21 1208.43 L1133.8 1208.43 L1134.39 1208.43 L1134.97 1208.43 L1135.56 1208.43 L1136.15 1208.43 L1136.73 1208.43 L1137.32 1208.43 L1137.91 1208.43 L1138.49 1208.43 L1139.08 1208.43 L1139.67 1208.43 L1140.25 1208.43 L1140.84 1208.43 L1141.42 1208.43 L1142.01 1208.43 L1142.6 1208.43 L1143.18 1208.43 L1143.77 1208.43 L1144.36 1208.43 L1144.94 1208.43 L1145.53 1208.43 L1146.12 1208.43 L1146.7 1208.43 L1147.29 1208.43 L1147.88 1208.43 L1148.46 1208.43 L1149.05 1208.43 L1149.63 1208.43 L1150.22 1208.43 L1150.81 1208.43 L1151.39 1208.43 L1151.98 1208.43 L1152.57 1208.43 L1153.15 1208.43 L1153.74 1208.43 L1154.33 1208.43 L1154.91 1208.43 L1155.5 1208.43 L1156.09 1208.43 L1156.67 1208.43 L1157.26 1208.43 L1157.84 1208.43 L1158.43 1208.43 L1159.02 1208.43 L1159.6 1208.43 L1160.19 1208.43 L1160.78 1208.43 L1161.36 1208.43 L1161.95 1208.43 L1162.54 1208.43 L1163.12 1208.43 L1163.71 1208.43 L1164.29 1208.43 L1164.88 1208.43 L1165.47 1208.43 L1166.05 1208.43 L1166.64 1208.43 L1167.23 1208.43 L1167.81 1208.43 L1168.4 1208.43 L1168.99 1208.43 L1169.57 1208.43 L1170.16 1208.43 L1170.75 1208.43 L1171.33 1208.43 L1171.92 1208.43 L1172.5 1208.43 L1173.09 1208.43 L1173.68 1208.43 L1174.26 1208.43 L1174.85 1208.43 L1175.44 1208.43 L1176.02 1208.43 L1176.61 1208.43 L1177.2 1208.43 L1177.78 1208.43 L1178.37 1208.43 L1178.96 1208.43 L1179.54 1208.43 L1180.13 1208.43 L1180.71 1208.43 L1181.3 1208.43 L1181.89 1208.43 L1182.47 1208.43 L1183.06 1208.43 L1183.65 1208.43 L1184.23 1208.43 L1184.82 1208.43 L1185.41 1208.43 L1185.99 1208.43 L1186.58 1208.43 L1187.16 1208.43 L1187.75 1208.43 L1188.34 1208.43 L1188.92 1208.43 L1189.51 1208.43 L1190.1 1208.43 L1190.68 1208.43 L1191.27 1208.43 L1191.86 1208.43 L1192.44 1208.43 L1193.03 1208.43 L1193.62 1208.43 L1194.2 1208.43 L1194.79 1208.43 L1195.37 1208.43 L1195.96 1208.43 L1196.55 1208.43 L1197.13 1208.43 L1197.72 1208.43 L1198.31 1208.43 L1198.89 1208.43 L1199.48 1208.43 L1200.07 1208.43 L1200.65 1208.43 L1201.24 1208.43 L1201.83 1208.43 L1202.41 1208.43 L1203 1208.43 L1203.58 1208.43 L1204.17 1208.43 L1204.76 1208.43 L1205.34 1208.43 L1205.93 1208.43 L1206.52 1208.43 L1207.1 1208.43 L1207.69 1208.43 L1208.28 1208.43 L1208.86 1208.43 L1209.45 1208.43 L1210.03 1208.43 L1210.62 1208.43 L1211.21 1208.43 L1211.79 1208.43 L1212.38 1208.43 L1212.97 1208.43 L1213.55 1208.43 L1214.14 1208.43 L1214.73 1208.43 L1215.31 1208.43 L1215.9 1208.43 L1216.49 1208.43 L1217.07 1208.43 L1217.66 1208.43 L1218.24 1208.43 L1218.83 1208.43 L1219.42 1208.43 L1220 1208.43 L1220.59 1208.43 L1221.18 1208.43 L1221.76 1208.43 L1222.35 1208.43 L1222.94 1208.43 L1223.52 1208.43 L1224.11 1208.43 L1224.7 1208.43 L1225.28 1208.43 L1225.87 1208.43 L1226.45 1208.43 L1227.04 1208.43 L1227.63 1208.43 L1228.21 1208.43 L1228.8 1208.43 L1229.39 1208.43 L1229.97 1208.43 L1230.56 1208.43 L1231.15 1208.43 L1231.73 1208.43 L1232.32 1208.43 L1232.91 1208.43 L1233.49 1208.43 L1234.08 1208.43 L1234.66 1208.43 L1235.25 1208.43 L1235.84 1208.43 L1236.42 1208.43 L1237.01 1208.43 L1237.6 1208.43 L1238.18 1208.43 L1238.77 1208.43 L1239.36 1208.43 L1239.94 1208.43 L1240.53 1208.43 L1241.11 1208.43 L1241.7 1208.43 L1242.29 1208.43 L1242.87 1208.43 L1243.46 1208.43 L1244.05 1208.43 L1244.63 1208.43 L1245.22 1208.43 L1245.81 1208.43 L1246.39 1208.43 L1246.98 1208.43 L1247.57 1208.43 L1248.15 1208.43 L1248.74 1208.43 L1249.32 1208.43 L1249.91 1208.43 L1250.5 1208.43 L1251.08 1208.43 L1251.67 1208.43 L1252.26 1208.43 L1252.84 1208.43 L1253.43 1208.43 L1254.02 1208.43 L1254.6 1208.43 L1255.19 1208.43 L1255.78 1208.43 L1256.36 1208.43 L1256.95 1208.43 L1257.53 1208.43 L1258.12 1208.43 L1258.71 1208.43 L1259.29 1208.43 L1259.88 1208.43 L1260.47 1208.43 L1261.05 1208.43 L1261.64 1208.43 L1262.23 1208.43 L1262.81 1208.43 L1263.4 1208.43 L1263.98 1208.43 L1264.57 1208.43 L1265.16 1208.43 L1265.74 1208.43 L1266.33 1208.43 L1266.92 1208.43 L1267.5 1208.43 L1268.09 1208.43 L1268.68 1208.43 L1269.26 1208.43 L1269.85 1208.43 L1270.44 1208.43 L1271.02 1208.43 L1271.61 1208.43 L1272.19 1208.43 L1272.78 1208.43 L1273.37 1208.43 L1273.95 1208.43 L1274.54 1208.43 L1275.13 1208.43 L1275.71 1208.43 L1276.3 1208.43 L1276.89 1208.43 L1277.47 1208.43 L1278.06 1208.43 L1278.65 1208.43 L1279.23 1208.43 L1279.82 1208.43 L1280.4 1208.43 L1280.99 1208.43 L1281.58 1208.43 L1282.16 1208.43 L1282.75 1208.43 L1283.34 1208.43 L1283.92 1208.43 L1284.51 1208.43 L1285.1 1208.43 L1285.68 1208.43 L1286.27 1208.43 L1286.86 1208.43 L1287.44 1208.43 L1288.03 1208.43 L1288.61 1208.43 L1289.2 1208.43 L1289.79 1208.43 L1290.37 1208.43 L1290.96 1208.43 L1291.55 1208.43 L1292.13 1208.43 L1292.72 1208.43 L1293.31 1208.43 L1293.89 1208.43 L1294.48 1208.43 L1295.06 1208.43 L1295.65 1208.43 L1296.24 1208.43 L1296.82 1208.43 L1297.41 1208.43 L1298 1208.43 L1298.58 1208.43 L1299.17 1208.43 L1299.76 1208.43 L1300.34 1208.43 L1300.93 1208.43 L1301.52 1208.43 L1302.1 1208.43 L1302.69 1208.43 L1303.27 1208.43 L1303.86 1208.43 L1304.45 1208.43 L1305.03 1208.43 L1305.62 1208.43 L1306.21 1208.43 L1306.79 1208.43 L1307.38 1208.43 L1307.97 1208.43 L1308.55 1208.43 L1309.14 1208.43 L1309.73 1208.43 L1310.31 1208.43 L1310.9 1208.43 L1311.48 1208.43 L1312.07 1208.43 L1312.66 1208.43 L1313.24 1208.43 L1313.83 1208.43 L1314.42 1208.43 L1315 1208.43 L1315.59 1208.43 L1316.18 1208.43 L1316.76 1208.43 L1317.35 1208.43 L1317.93 1208.43 L1318.52 1208.43 L1319.11 1208.43 L1319.69 1208.43 L1320.28 1208.43 L1320.87 1208.43 L1321.45 1208.43 L1322.04 1208.43 L1322.63 1208.43 L1323.21 1208.43 L1323.8 1208.43 L1324.39 1208.43 L1324.97 1208.43 L1325.56 1208.43 L1326.14 1208.43 L1326.73 1208.43 L1327.32 1208.43 L1327.9 1208.43 L1328.49 1208.43 L1329.08 1208.43 L1329.66 1208.43 L1330.25 1208.43 L1330.84 1208.43 L1331.42 1208.43 L1332.01 1208.43 L1332.6 1208.43 L1333.18 1208.43 L1333.77 1208.43 L1334.35 1208.43 L1334.94 1208.43 L1335.53 1208.43 L1336.11 1208.43 L1336.7 1208.43 L1337.29 1208.43 L1337.87 1208.43 L1338.46 1208.43 L1339.05 1208.43 L1339.63 1208.43 L1340.22 1208.43 L1340.8 1208.43 L1341.39 1208.43 L1341.98 1208.43 L1342.56 1208.43 L1343.15 1208.43 L1343.74 1208.43 L1344.32 1208.43 L1344.91 1208.43 L1345.5 1208.43 L1346.08 1208.43 L1346.67 1208.43 L1347.26 1208.43 L1347.84 1208.43 L1348.43 1208.43 L1349.01 1208.43 L1349.6 1208.43 L1350.19 1208.43 L1350.77 1208.43 L1351.36 1208.43 L1351.95 1208.43 L1352.53 1208.43 L1353.12 1208.43 L1353.71 1208.43 L1354.29 1208.43 L1354.88 1208.43 L1355.47 1208.43 L1356.05 1208.43 L1356.64 1208.43 L1357.22 1208.43 L1357.81 1208.43 L1358.4 1208.43 L1358.98 1208.43 L1359.57 1208.43 L1360.16 1208.43 L1360.74 1208.43 L1361.33 1208.43 L1361.92 1208.43 L1362.5 1208.43 L1363.09 1208.43 L1363.68 1208.43 L1364.26 1208.43 L1364.85 1208.43 L1365.43 1208.43 L1366.02 1208.43 L1366.61 1208.43 L1367.19 1208.43 L1367.78 1208.43 L1368.37 1208.43 L1368.95 1208.43 L1369.54 1208.43 L1370.13 1208.43 L1370.71 1208.43 L1371.3 1208.43 L1371.88 1208.43 L1372.47 1208.43 L1373.06 1208.43 L1373.64 1208.43 L1374.23 1208.43 L1374.82 1208.43 L1375.4 1208.43 L1375.99 1208.43 L1376.58 1208.43 L1377.16 1208.43 L1377.75 1208.43 L1378.34 1208.43 L1378.92 1208.43 L1379.51 1208.43 L1380.09 1208.43 L1380.68 1208.43 L1381.27 1208.43 L1381.85 1208.43 L1382.44 1208.43 L1383.03 1208.43 L1383.61 1208.43 L1384.2 1208.43 L1384.79 1208.43 L1385.37 1208.43 L1385.96 1208.43 L1386.55 1208.43 L1387.13 1208.43 L1387.72 1208.43 L1388.3 1208.43 L1388.89 1208.43 L1389.48 1208.43 L1390.06 1208.43 L1390.65 1208.43 L1391.24 1208.43 L1391.82 1208.43 L1392.41 1208.43 L1393 1208.43 L1393.58 1208.43 L1394.17 1208.43 L1394.75 1208.43 L1395.34 1208.43 L1395.93 1208.43 L1396.51 1208.43 L1397.1 1208.43 L1397.69 1208.43 L1398.27 1208.43 L1398.86 1208.43 L1399.45 1208.43 L1400.03 1208.43 L1400.62 1208.43 L1401.21 1208.43 L1401.79 1208.43 L1402.38 1208.43 L1402.96 1208.43 L1403.55 1208.43 L1404.14 1208.43 L1404.72 1208.43 L1405.31 1208.43 L1405.9 1208.43 L1406.48 1208.43 L1407.07 1208.43 L1407.66 1208.43 L1408.24 1208.43 L1408.83 1208.43 L1409.42 1208.43 L1410 1208.43 L1410.59 1208.43 L1411.17 1208.43 L1411.76 1208.43 L1412.35 1208.43 L1412.93 1208.43 L1413.52 1208.43 L1414.11 1208.43 L1414.69 1208.43 L1415.28 1208.43 L1415.87 1208.43 L1416.45 1208.43 L1417.04 1208.43 L1417.63 1208.43 L1418.21 1208.43 L1418.8 1208.43 L1419.38 1208.43 L1419.97 1208.43 L1420.56 1208.43 L1421.14 1208.43 L1421.73 1208.43 L1422.32 1208.43 L1422.9 1208.43 L1423.49 1208.43 L1424.08 1208.43 L1424.66 1208.43 L1425.25 1208.43 L1425.83 1208.43 L1426.42 1208.43 L1427.01 1208.43 L1427.59 1208.43 L1428.18 1208.43 L1428.77 1208.43 L1429.35 1208.43 L1429.94 1208.43 L1430.53 1208.43 L1431.11 1208.43 L1431.7 1208.43 L1432.29 1208.43 L1432.87 1208.43 L1433.46 1208.43 L1434.04 1208.43 L1434.63 1208.43 L1435.22 1208.43 L1435.8 1208.43 L1436.39 1208.43 L1436.98 1208.43 L1437.56 1208.43 L1438.15 1208.43 L1438.74 1208.43 L1439.32 1208.43 L1439.91 1208.43 L1440.5 1208.43 L1441.08 1208.43 L1441.67 1208.43 L1442.25 1208.43 L1442.84 1208.43 L1443.43 1208.43 L1444.01 1208.43 L1444.6 1208.43 L1445.19 1208.43 L1445.77 1208.43 L1446.36 1208.43 L1446.95 1208.43 L1447.53 1208.43 L1448.12 1208.43 L1448.7 1208.43 L1449.29 1208.43 L1449.88 1208.43 L1450.46 1208.43 L1451.05 1208.43 L1451.64 1208.43 L1452.22 1208.43 L1452.81 1208.43 L1453.4 1208.43 L1453.98 1208.43 L1454.57 1208.43 L1455.16 1208.43 L1455.74 1208.43 L1456.33 1208.43 L1456.91 1208.43 L1457.5 1208.43 L1458.09 1208.43 L1458.67 1208.43 L1459.26 1208.43 L1459.85 1208.43 L1460.43 1208.43 L1461.02 1208.43 L1461.61 1208.43 L1462.19 1208.43 L1462.78 1208.43 L1463.37 1208.43 L1463.95 1208.43 L1464.54 1208.43 L1465.12 1208.43 L1465.71 1208.43 L1466.3 1208.43 L1466.88 1208.43 L1467.47 1208.43 L1468.06 1208.43 L1468.64 1208.43 L1469.23 1208.43 L1469.82 1208.43 L1470.4 1208.43 L1470.99 1208.43 L1471.57 1208.43 L1472.16 1208.43 L1472.75 1208.43 L1473.33 1208.43 L1473.92 1208.43 L1474.51 1208.43 L1475.09 1208.43 L1475.68 1208.43 L1476.27 1208.43 L1476.85 1208.43 L1477.44 1208.43 L1478.03 1208.43 L1478.61 1208.43 L1479.2 1208.43 L1479.78 1208.43 L1480.37 1208.43 L1480.96 1208.43 L1481.54 1208.43 L1482.13 1208.43 L1482.72 1208.43 L1483.3 1208.43 L1483.89 1208.43 L1484.48 1208.43 L1485.06 1208.43 L1485.65 1208.43 L1486.24 1208.43 L1486.82 1208.43 L1487.41 1208.43 L1487.99 1208.43 L1488.58 1208.43 L1489.17 1208.43 L1489.75 1208.43 L1490.34 1208.43 L1490.93 1208.43 L1491.51 1208.43 L1492.1 1208.43 L1492.69 1208.43 L1493.27 1208.43 L1493.86 1208.43 L1494.45 1208.43 L1495.03 1208.43 L1495.62 1208.43 L1496.2 1208.43 L1496.79 1208.43 L1497.38 1208.43 L1497.96 1208.43 L1498.55 1208.43 L1499.14 1208.43 L1499.72 1208.43 L1500.31 1208.43 L1500.9 1208.43 L1501.48 1208.43 L1502.07 1208.43 L1502.65 1208.43 L1503.24 1208.43 L1503.83 1208.43 L1504.41 1208.43 L1505 1208.43 L1505.59 1208.43 L1506.17 1208.43 L1506.76 1208.43 L1507.35 1208.43 L1507.93 1208.43 L1508.52 1208.43 L1509.11 1208.43 L1509.69 1208.43 L1510.28 1208.43 L1510.86 1208.43 L1511.45 1208.43 L1512.04 1208.43 L1512.62 1208.43 L1513.21 1208.43 L1513.8 1208.43 L1514.38 1208.43 L1514.97 1208.43 L1515.56 1208.43 L1516.14 1208.43 L1516.73 1208.43 L1517.32 1208.43 L1517.9 1208.43 L1518.49 1208.43 L1519.07 1208.43 L1519.66 1208.43 L1520.25 1208.43 L1520.83 1208.43 L1521.42 1208.43 L1522.01 1208.43 L1522.59 1208.43 L1523.18 1208.43 L1523.77 1208.43 L1524.35 1208.43 L1524.94 1208.43 L1525.52 1208.43 L1526.11 1208.43 L1526.7 1208.43 L1527.28 1208.43 L1527.87 1208.43 L1528.46 1208.43 L1529.04 1208.43 L1529.63 1208.43 L1530.22 1208.43 L1530.8 1208.43 L1531.39 1208.43 L1531.98 1208.43 L1532.56 1208.43 L1533.15 1208.43 L1533.73 1208.43 L1534.32 1208.43 L1534.91 1208.43 L1535.49 1208.43 L1536.08 1208.43 L1536.67 1208.43 L1537.25 1208.43 L1537.84 1208.43 L1538.43 1208.43 L1539.01 1208.43 L1539.6 1208.43 L1540.19 1208.43 L1540.77 1208.43 L1541.36 1208.43 L1541.94 1208.43 L1542.53 1208.43 L1543.12 1208.43 L1543.7 1208.43 L1544.29 1208.43 L1544.88 1208.43 L1545.46 1208.43 L1546.05 1208.43 L1546.64 1208.43 L1547.22 1208.43 L1547.81 1208.43 L1548.4 1208.43 L1548.98 1208.43 L1549.57 1208.43 L1550.15 1208.43 L1550.74 1208.43 L1551.33 1208.43 L1551.91 1208.43 L1552.5 1208.43 L1553.09 1208.43 L1553.67 1208.43 L1554.26 1208.43 L1554.85 1208.43 L1555.43 1208.43 L1556.02 1208.43 L1556.6 1208.43 L1557.19 1208.43 L1557.78 1208.43 L1558.36 1208.43 L1558.95 1208.43 L1559.54 1208.43 L1560.12 1208.43 L1560.71 1208.43 L1561.3 1208.43 L1561.88 1208.43 L1562.47 1208.43 L1563.06 1208.43 L1563.64 1208.43 L1564.23 1208.43 L1564.81 1208.43 L1565.4 1208.43 L1565.99 1208.43 L1566.57 1208.43 L1567.16 1208.43 L1567.75 1208.43 L1568.33 1208.43 L1568.92 1208.43 L1569.51 1208.43 L1570.09 1208.43 L1570.68 1208.43 L1571.27 1208.43 L1571.85 1208.43 L1572.44 1208.43 L1573.02 1208.43 L1573.61 1208.43 L1574.2 1208.43 L1574.78 1208.43 L1575.37 1208.43 L1575.96 1208.43 L1576.54 1208.43 L1577.13 1208.43 L1577.72 1208.43 L1578.3 1208.43 L1578.89 1208.43 L1579.47 1208.43 L1580.06 1208.43 L1580.65 1208.43 L1581.23 1208.43 L1581.82 1208.43 L1582.41 1208.43 L1582.99 1208.43 L1583.58 1208.43 L1584.17 1208.43 L1584.75 1208.43 L1585.34 1208.43 L1585.93 1208.43 L1586.51 1208.43 L1587.1 1208.43 L1587.68 1208.43 L1588.27 1208.43 L1588.86 1208.43 L1589.44 1208.43 L1590.03 1208.43 L1590.62 1208.43 L1591.2 1208.43 L1591.79 1208.43 L1592.38 1208.43 L1592.96 1208.43 L1593.55 1208.43 L1594.14 1208.43 L1594.72 1208.43 L1595.31 1208.43 L1595.89 1208.43 L1596.48 1208.43 L1597.07 1208.43 L1597.65 1208.43 L1598.24 1208.43 L1598.83 1208.43 L1599.41 1208.43 L1600 1208.43 L1600.59 1208.43 L1601.17 1208.43 L1601.76 1208.43 L1602.34 1208.43 L1602.93 1208.43 L1603.52 1208.43 L1604.1 1208.43 L1604.69 1208.43 L1605.28 1208.43 L1605.86 1208.43 L1606.45 1208.43 L1607.04 1208.43 L1607.62 1208.43 L1608.21 1208.43 L1608.8 1208.43 L1609.38 1208.43 L1609.97 1208.43 L1610.55 1208.43 L1611.14 1208.43 L1611.73 1208.43 L1612.31 1208.43 L1612.9 1208.43 L1613.49 1208.43 L1614.07 1208.43 L1614.66 1208.43 L1615.25 1208.43 L1615.83 1208.43 L1616.42 1208.43 L1617.01 1208.43 L1617.59 1208.43 L1618.18 1208.43 L1618.76 1208.43 L1619.35 1208.43 L1619.94 1208.43 L1620.52 1208.43 L1621.11 1208.43 L1621.7 1208.43 L1622.28 1208.43 L1622.87 1208.43 L1623.46 1208.43 L1624.04 1208.43 L1624.63 1208.43 L1625.22 1208.43 L1625.8 1208.43 L1626.39 1208.43 L1626.97 1208.43 L1627.56 1208.43 L1628.15 1208.43 L1628.73 1208.43 L1629.32 1208.43 L1629.91 1208.43 L1630.49 1208.43 L1631.08 1208.43 L1631.67 1208.43 L1632.25 1208.43 L1632.84 1208.43 L1633.42 1208.43 L1634.01 1208.43 L1634.6 1208.43 L1635.18 1208.43 L1635.77 1208.43 L1636.36 1208.43 L1636.94 1208.43 L1637.53 1208.43 L1638.12 1208.43 L1638.7 1208.43 L1639.29 1208.43 L1639.88 1208.43 L1640.46 1208.43 L1641.05 1208.43 L1641.63 1208.43 L1642.22 1208.43 L1642.81 1208.43 L1643.39 1208.43 L1643.98 1208.43 L1644.57 1208.43 L1645.15 1208.43 L1645.74 1208.43 L1646.33 1208.43 L1646.91 1208.43 L1647.5 1208.43 L1648.09 1208.43 L1648.67 1208.43 L1649.26 1208.43 L1649.84 1208.43 L1650.43 1208.43 L1651.02 1208.43 L1651.6 1208.43 L1652.19 1208.43 L1652.78 1208.43 L1653.36 1208.43 L1653.95 1208.43 L1654.54 1208.43 L1655.12 1208.43 L1655.71 1208.43 L1656.29 1208.43 L1656.88 1208.43 L1657.47 1208.43 L1658.05 1208.43 L1658.64 1208.43 L1659.23 1208.43 L1659.81 1208.43 L1660.4 1208.43 L1660.99 1208.43 L1661.57 1208.43 L1662.16 1208.43 L1662.75 1208.43 L1663.33 1208.43 L1663.92 1208.43 L1664.5 1208.43 L1665.09 1208.43 L1665.68 1208.43 L1666.26 1208.43 L1666.85 1208.43 L1667.44 1208.43 L1668.02 1208.43 L1668.61 1208.43 L1669.2 1208.43 L1669.78 1208.43 L1670.37 1208.43 L1670.96 1208.43 L1671.54 1208.43 L1672.13 1208.43 L1672.71 1208.43 L1673.3 1208.43 L1673.89 1208.43 L1674.47 1208.43 L1675.06 1208.43 L1675.65 1208.43 L1676.23 1208.43 L1676.82 1208.43 L1677.41 1208.43 L1677.99 1208.43 L1678.58 1208.43 L1679.17 1208.43 L1679.75 1208.43 L1680.34 1208.43 L1680.92 1208.43 L1681.51 1208.43 L1682.1 1208.43 L1682.68 1208.43 L1683.27 1208.43 L1683.86 1208.43 L1684.44 1208.43 L1685.03 1208.43 L1685.62 1208.43 L1686.2 1208.43 L1686.79 1208.43 L1687.37 1208.43 L1687.96 1208.43 L1688.55 1208.43 L1689.13 1208.43 L1689.72 1208.43 L1690.31 1208.43 L1690.89 1208.43 L1691.48 1208.43 L1692.07 1208.43 L1692.65 1208.43 L1693.24 1208.43 L1693.83 1208.43 L1694.41 1208.43 L1695 1208.43 L1695.58 1208.43 L1696.17 1208.43 L1696.76 1208.43 L1697.34 1208.43 L1697.93 1208.43 L1698.52 1208.43 L1699.1 1208.43 L1699.69 1208.43 L1700.28 1208.43 L1700.86 1208.43 L1701.45 1208.43 L1702.04 1208.43 L1702.62 1208.43 L1703.21 1208.43 L1703.79 1208.43 L1704.38 1208.43 L1704.97 1208.43 L1705.55 1208.43 L1706.14 1208.43 L1706.73 1208.43 L1707.31 1208.43 L1707.9 1208.43 L1708.49 1208.43 L1709.07 1208.43 L1709.66 1208.43 L1710.24 1208.43 L1710.83 1208.43 L1711.42 1208.43 L1712 1208.43 L1712.59 1208.43 L1713.18 1208.43 L1713.76 1208.43 L1714.35 1208.43 L1714.94 1208.43 L1715.52 1208.43 L1716.11 1208.43 L1716.7 1208.43 L1717.28 1208.43 L1717.87 1208.43 L1718.45 1208.43 L1719.04 1208.43 L1719.63 1208.43 L1720.21 1208.43 L1720.8 1208.43 L1721.39 1208.43 L1721.97 1208.43 L1722.56 1208.43 L1723.15 1208.43 L1723.73 1208.43 L1724.32 1208.43 L1724.91 1208.43 L1725.49 1208.43 L1726.08 1208.43 L1726.66 1208.43 L1727.25 1208.43 L1727.84 1208.43 L1728.42 1208.43 L1729.01 1208.43 L1729.6 1208.43 L1730.18 1208.43 L1730.77 1208.43 L1731.36 1208.43 L1731.94 1208.43 L1732.53 1208.43 L1733.11 1208.43 L1733.7 1208.43 L1734.29 1208.43 L1734.87 1208.43 L1735.46 1208.43 L1736.05 1208.43 L1736.63 1208.43 L1737.22 1208.43 L1737.81 1208.43 L1738.39 1208.43 L1738.98 1208.43 L1739.57 1208.43 L1740.15 1208.43 L1740.74 1208.43 L1741.32 1208.43 L1741.91 1208.43 L1742.5 1208.43 L1743.08 1208.43 L1743.67 1208.43 L1744.26 1208.43 L1744.84 1208.43 L1745.43 1208.43 L1746.02 1208.43 L1746.6 1208.43 L1747.19 1208.43 L1747.78 1208.43 L1748.36 1208.43 L1748.95 1208.43 L1749.53 1208.43 L1750.12 1208.43 L1750.71 1208.43 L1751.29 1208.43 L1751.88 1208.43 L1752.47 1208.43 L1753.05 1208.43 L1753.64 1208.43 L1754.23 1208.43 L1754.81 1208.43 L1755.4 1208.43 L1755.99 1208.43 L1756.57 1208.43 L1757.16 1208.43 L1757.74 1208.43 L1758.33 1208.43 L1758.92 1208.43 L1759.5 1208.43 L1760.09 1208.43 L1760.68 1208.43 L1761.26 1208.43 L1761.85 1208.43 L1762.44 1208.43 L1763.02 1208.43 L1763.61 1208.43 L1764.19 1208.43 L1764.78 1208.43 L1765.37 1208.43 L1765.95 1208.43 L1766.54 1208.43 L1767.13 1208.43 L1767.71 1208.43 L1768.3 1208.43 L1768.89 1208.43 L1769.47 1208.43 L1770.06 1208.43 L1770.65 1208.43 L1771.23 1208.43 L1771.82 1208.43 L1772.4 1208.43 L1772.99 1208.43 L1773.58 1208.43 L1774.16 1208.43 L1774.75 1208.43 L1775.34 1208.43 L1775.92 1208.43 L1776.51 1208.43 L1777.1 1208.43 L1777.68 1208.43 L1778.27 1208.43 L1778.86 1208.43 L1779.44 1208.43 L1780.03 1208.43 L1780.61 1208.43 L1781.2 1208.43 L1781.79 1208.43 L1782.37 1208.43 L1782.96 1208.43 L1783.55 1208.43 L1784.13 1208.43 L1784.72 1208.43 L1785.31 1208.43 L1785.89 1208.43 L1786.48 1208.43 L1787.06 1208.43 L1787.65 1208.43 L1788.24 1208.43 L1788.82 1208.43 L1789.41 1208.43 L1790 1208.43 L1790.58 1208.43 L1791.17 1208.43 L1791.76 1208.43 L1792.34 1208.43 L1792.93 1208.43 L1793.52 1208.43 L1794.1 1208.43 L1794.69 1208.43 L1795.27 1208.43 L1795.86 1208.43 L1796.45 1208.43 L1797.03 1208.43 L1797.62 1208.43 L1798.21 1208.43 L1798.79 1208.43 L1799.38 1208.43 L1799.97 1208.43 L1800.55 1208.43 L1801.14 1208.43 L1801.73 1208.43 L1802.31 1208.43 L1802.9 1208.43 L1803.48 1208.43 L1804.07 1208.43 L1804.66 1208.43 L1805.24 1208.43 L1805.83 1208.43 L1806.42 1208.43 L1807 1208.43 L1807.59 1208.43 L1808.18 1208.43 L1808.76 1208.43 L1809.35 1208.43 L1809.94 1208.43 L1810.52 1208.43 L1811.11 1208.43 L1811.69 1208.43 L1812.28 1208.43 L1812.87 1208.43 L1813.45 1208.43 L1814.04 1208.43 L1814.63 1208.43 L1815.21 1208.43 L1815.8 1208.43 L1816.39 1208.43 L1816.97 1208.43 L1817.56 1208.43 L1818.14 1208.43 L1818.73 1208.43 L1819.32 1208.43 L1819.9 1208.43 L1820.49 1208.43 L1821.08 1208.43 L1821.66 1208.43 L1822.25 1208.43 L1822.84 1208.43 L1823.42 1208.43 L1824.01 1208.43 L1824.6 1208.43 L1825.18 1208.43 L1825.77 1208.43 L1826.35 1208.43 L1826.94 1208.43 L1827.53 1208.43 L1828.11 1208.43 L1828.7 1208.43 L1829.29 1208.43 L1829.87 1208.43 L1830.46 1208.43 L1831.05 1208.43 L1831.63 1208.43 L1832.22 1208.43 L1832.81 1208.43 L1833.39 1208.43 L1833.98 1208.43 L1834.56 1208.43 L1835.15 1208.43 L1835.74 1208.43 L1836.32 1208.43 L1836.91 1208.43 L1837.5 1208.43 L1838.08 1208.43 L1838.67 1208.43 L1839.26 1208.43 L1839.84 1208.43 L1840.43 1208.43 L1841.01 1208.43 L1841.6 1208.43 L1842.19 1208.43 L1842.77 1208.43 L1843.36 1208.43 L1843.95 1208.43 L1844.53 1208.43 L1845.12 1208.43 L1845.71 1208.43 L1846.29 1208.43 L1846.88 1208.43 L1847.47 1208.43 L1848.05 1208.43 L1848.64 1208.43 L1849.22 1208.43 L1849.81 1208.43 L1850.4 1208.43 L1850.98 1208.43 L1851.57 1208.43 L1852.16 1208.43 L1852.74 1208.43 L1853.33 1208.43 L1853.92 1208.43 L1854.5 1208.43 L1855.09 1208.43 L1855.68 1208.43 L1856.26 1208.43 L1856.85 1208.43 L1857.43 1208.43 L1858.02 1208.43 L1858.61 1208.43 L1859.19 1208.43 L1859.78 1208.43 L1860.37 1208.43 L1860.95 1208.43 L1861.54 1208.43 L1862.13 1208.43 L1862.71 1208.43 L1863.3 1208.43 L1863.88 1208.43 L1864.47 1208.43 L1865.06 1208.43 L1865.64 1208.43 L1866.23 1208.43 L1866.82 1208.43 L1867.4 1208.43 L1867.99 1208.43 L1868.58 1208.43 L1869.16 1208.43 L1869.75 1208.43 L1870.34 1208.43 L1870.92 1208.43 L1871.51 1208.43 L1872.09 1208.43 L1872.68 1208.43 L1873.27 1208.43 L1873.85 1208.43 L1874.44 1208.43 L1875.03 1208.43 L1875.61 1208.43 L1876.2 1208.43 L1876.79 1208.43 L1877.37 1208.43 L1877.96 1208.43 L1878.55 1208.43 L1879.13 1208.43 L1879.72 1208.43 L1880.3 1208.43 L1880.89 1208.43 L1881.48 1208.43 L1882.06 1208.43 L1882.65 1208.43 L1883.24 1208.43 L1883.82 1208.43 L1884.41 1208.43 L1885 1208.43 L1885.58 1208.43 L1886.17 1208.43 L1886.76 1208.43 L1887.34 1208.43 L1887.93 1208.43 L1888.51 1208.43 L1889.1 1208.43 L1889.69 1208.43 L1890.27 1208.43 L1890.86 1208.43 L1891.45 1208.43 L1892.03 1208.43 L1892.62 1208.43 L1893.21 1208.43 L1893.79 1208.43 L1894.38 1208.43 L1894.96 1208.43 L1895.55 1208.43 L1896.14 1208.43 L1896.72 1208.43 L1897.31 1208.43 L1897.9 1208.43 L1898.48 1208.43 L1899.07 1208.43 L1899.66 1208.43 L1900.24 1208.43 L1900.83 1208.43 L1901.42 1208.43 L1902 1208.43 L1902.59 1208.43 L1903.17 1208.43 L1903.76 1208.43 L1904.35 1208.43 L1904.93 1208.43 L1905.52 1208.43 L1906.11 1208.43 L1906.69 1208.43 L1907.28 1208.43 L1907.87 1208.43 L1908.45 1208.43 L1909.04 1208.43 L1909.63 1208.43 L1910.21 1208.43 L1910.8 1208.43 L1911.38 1208.43 L1911.97 1208.43 L1912.56 1208.43 L1913.14 1208.43 L1913.73 1208.43 L1914.32 1208.43 L1914.9 1208.43 L1915.49 1208.43 L1916.08 1208.43 L1916.66 1208.43 L1917.25 1208.43 L1917.83 1208.43 L1918.42 1208.43 L1919.01 1208.43 L1919.59 1208.43 L1920.18 1208.43 L1920.77 1208.43 L1921.35 1208.43 L1921.94 1208.43 L1922.53 1208.43 L1923.11 1208.43 L1923.7 1208.43 L1924.29 1208.43 L1924.87 1208.43 L1925.46 1208.43 L1926.04 1208.43 L1926.63 1208.43 L1927.22 1208.43 L1927.8 1208.43 L1928.39 1208.43 L1928.98 1208.43 L1929.56 1208.43 L1930.15 1208.43 L1930.74 1208.43 L1931.32 1208.43 L1931.91 1208.43 L1932.5 1208.43 L1933.08 1208.43 L1933.67 1208.43 L1934.25 1208.43 L1934.84 1208.43 L1935.43 1208.43 L1936.01 1208.43 L1936.6 1208.43 L1937.19 1208.43 L1937.77 1208.43 L1938.36 1208.43 L1938.95 1208.43 L1939.53 1208.43 L1940.12 1208.43 L1940.71 1208.43 L1941.29 1208.43 L1941.88 1208.43 L1942.46 1208.43 L1943.05 1208.43 L1943.64 1208.43 L1944.22 1208.43 L1944.81 1208.43 L1945.4 1208.43 L1945.98 1208.43 L1946.57 1208.43 L1947.16 1208.43 L1947.74 1208.43 L1948.33 1208.43 L1948.91 1208.43 L1949.5 1208.43 L1950.09 1208.43 L1950.67 1208.43 L1951.26 1208.43 L1951.85 1208.43 L1952.43 1208.43 L1953.02 1208.43 L1953.61 1208.43 L1954.19 1208.43 L1954.78 1208.43 L1955.37 1208.43 L1955.95 1208.43 L1956.54 1208.43 L1957.12 1208.43 L1957.71 1208.43 L1958.3 1208.43 L1958.88 1208.43 L1959.47 1208.43 L1960.06 1208.43 L1960.64 1208.43 L1961.23 1208.43 L1961.82 1208.43 L1962.4 1208.43 L1962.99 1208.43 L1963.58 1208.43 L1964.16 1208.43 L1964.75 1208.43 L1965.33 1208.43 L1965.92 1208.43 L1966.51 1208.43 L1967.09 1208.43 L1967.68 1208.43 L1968.27 1208.43 L1968.85 1208.43 L1969.44 1208.43 L1970.03 1208.43 L1970.61 1208.43 L1971.2 1208.43 L1971.78 1208.43 L1972.37 1208.43 L1972.96 1208.43 L1973.54 1208.43 L1974.13 1208.43 L1974.72 1208.43 L1975.3 1208.43 L1975.89 1208.43 L1976.48 1208.43 L1977.06 1208.43 L1977.65 1208.43 L1978.24 1208.43 L1978.82 1208.43 L1979.41 1208.43 L1979.99 1208.43 L1980.58 1208.43 L1981.17 1208.43 L1981.75 1208.43 L1982.34 1208.43 L1982.93 1208.43 L1983.51 1208.43 L1984.1 1208.43 L1984.69 1208.43 L1985.27 1208.43 L1985.86 1208.43 L1986.45 1208.43 L1987.03 1208.43 L1987.62 1208.43 L1988.2 1208.43 L1988.79 1208.43 L1989.38 1208.43 L1989.96 1208.43 L1990.55 1208.43 L1991.14 1208.43 L1991.72 1208.43 L1992.31 1208.43 L1992.9 1208.43 L1993.48 1208.43 L1994.07 1208.43 L1994.65 1208.43 L1995.24 1208.43 L1995.83 1208.43 L1996.41 1208.43 L1997 1208.43 L1997.59 1208.43 L1998.17 1208.43 L1998.76 1208.43 L1999.35 1208.43 L1999.93 1208.43 L2000.52 1208.43 L2001.11 1208.43 L2001.69 1208.43 L2002.28 1208.43 L2002.86 1208.43 L2003.45 1208.43 L2004.04 1208.43 L2004.62 1208.43 L2005.21 1208.43 L2005.8 1208.43 L2006.38 1208.43 L2006.97 1208.43 L2007.56 1208.43 L2008.14 1208.43 L2008.73 1208.43 L2009.32 1208.43 L2009.9 1208.43 L2010.49 1208.43 L2011.07 1208.43 L2011.66 1208.43 L2012.25 1208.43 L2012.83 1208.43 L2013.42 1208.43 L2014.01 1208.43 L2014.59 1208.43 L2015.18 1208.43 L2015.77 1208.43 L2016.35 1208.43 L2016.94 1208.43 L2017.53 1208.43 L2018.11 1208.43 L2018.7 1208.43 L2019.28 1208.43 L2019.87 1208.43 L2020.46 1208.43 L2021.04 1208.43 L2021.63 1208.43 L2022.22 1208.43 L2022.8 1208.43 L2023.39 1208.43 L2023.98 1208.43 L2024.56 1208.43 L2025.15 1208.43 L2025.73 1208.43 L2026.32 1208.43 L2026.91 1208.43 L2027.49 1208.43 L2028.08 1208.43 L2028.67 1208.43 L2029.25 1208.43 L2029.84 1208.43 L2030.43 1208.43 L2031.01 1208.43 L2031.6 1208.43 L2032.19 1208.43 L2032.77 1208.43 L2033.36 1208.43 L2033.94 1208.43 L2034.53 1208.43 L2035.12 1208.43 L2035.7 1208.43 L2036.29 1208.43 L2036.88 1208.43 L2037.46 1208.43 L2038.05 1208.43 L2038.64 1208.43 L2039.22 1208.43 L2039.81 1208.43 L2040.4 1208.43 L2040.98 1208.43 L2041.57 1208.43 L2042.15 1208.43 L2042.74 1208.43 L2043.33 1208.43 L2043.91 1208.43 L2044.5 1208.43 L2045.09 1208.43 L2045.67 1208.43 L2046.26 1208.43 L2046.85 1208.43 L2047.43 1208.43 L2048.02 1208.43 L2048.6 1208.43 L2049.19 1208.43 L2049.78 1208.43 L2050.36 1208.43 L2050.95 1208.43 L2051.54 1208.43 L2052.12 1208.43 L2052.71 1208.43 L2053.3 1208.43 L2053.88 1208.43 L2054.47 1208.43 L2055.06 1208.43 L2055.64 1208.43 L2056.23 1208.43 L2056.81 1208.43 L2057.4 1208.43 L2057.99 1208.43 L2058.57 1208.43 L2059.16 1208.43 L2059.75 1208.43 L2060.33 1208.43 L2060.92 1208.43 L2061.51 1208.43 L2062.09 1208.43 L2062.68 1208.43 L2063.27 1208.43 L2063.85 1208.43 L2064.44 1208.43 L2065.02 1208.43 L2065.61 1208.43 L2066.2 1208.43 L2066.78 1208.43 L2067.37 1208.43 L2067.96 1208.43 L2068.54 1208.43 L2069.13 1208.43 L2069.72 1208.43 L2070.3 1208.43 L2070.89 1208.43 L2071.48 1208.43 L2072.06 1208.43 L2072.65 1208.43 L2073.23 1208.43 L2073.82 1208.43 L2074.41 1208.43 L2074.99 1208.43 L2075.58 1208.43 L2076.17 1208.43 L2076.75 1208.43 L2077.34 1208.43 L2077.93 1208.43 L2078.51 1208.43 L2079.1 1208.43 L2079.68 1208.43 L2080.27 1208.43 L2080.86 1208.43 L2081.44 1208.43 L2082.03 1208.43 L2082.62 1208.43 L2083.2 1208.43 L2083.79 1208.43 L2084.38 1208.43 L2084.96 1208.43 L2085.55 1208.43 L2086.14 1208.43 L2086.72 1208.43 L2087.31 1208.43 L2087.89 1208.43 L2088.48 1208.43 L2089.07 1208.43 L2089.65 1208.43 L2090.24 1208.43 L2090.83 1208.43 L2091.41 1208.43 L2092 1208.43 L2092.59 1208.43 L2093.17 1208.43 L2093.76 1208.43 L2094.35 1208.43 L2094.93 1208.43 L2095.52 1208.43 L2096.1 1208.43 L2096.69 1208.43 L2097.28 1208.43 L2097.86 1208.43 L2098.45 1208.43 L2099.04 1208.43 L2099.62 1208.43 L2100.21 1208.43 L2100.8 1208.43 L2101.38 1208.43 L2101.97 1208.43 L2102.55 1208.43 L2103.14 1208.43 L2103.73 1208.43 L2104.31 1208.43 L2104.9 1208.43 L2105.49 1208.43 L2106.07 1208.43 L2106.66 1208.43 L2107.25 1208.43 L2107.83 1208.43 L2108.42 1208.43 L2109.01 1208.43 L2109.59 1208.43 L2110.18 1208.43 L2110.76 1208.43 L2111.35 1208.43 L2111.94 1208.43 L2112.52 1208.43 L2113.11 1208.43 L2113.7 1208.43 L2114.28 1208.43 L2114.87 1208.43 L2115.46 1208.43 L2116.04 1208.43 L2116.63 1208.43 L2117.22 1208.43 L2117.8 1208.43 L2118.39 1208.43 L2118.97 1208.43 L2119.56 1208.43 L2120.15 1208.43 L2120.73 1208.43 L2121.32 1208.43 L2121.91 1208.43 L2122.49 1208.43 L2123.08 1208.43 L2123.67 1208.43 L2124.25 1208.43 L2124.84 1208.43 L2125.42 1208.43 L2126.01 1208.43 L2126.6 1208.43 L2127.18 1208.43 L2127.77 1208.43 L2128.36 1208.43 L2128.94 1208.43 L2129.53 1208.43 L2130.12 1208.43 L2130.7 1208.43 L2131.29 1208.43 L2131.88 1208.43 L2132.46 1208.43 L2133.05 1208.43 L2133.63 1208.43 L2134.22 1208.43 L2134.81 1208.43 L2135.39 1208.43 L2135.98 1208.43 L2136.57 1208.43 L2137.15 1208.43 L2137.74 1208.43 L2138.33 1208.43 L2138.91 1208.43 L2139.5 1208.43 L2140.09 1208.43 L2140.67 1208.43 L2141.26 1208.43 L2141.84 1208.43 L2142.43 1208.43 L2143.02 1208.43 L2143.6 1208.43 L2144.19 1208.43 L2144.78 1208.43 L2145.36 1208.43 L2145.95 1208.43 L2146.54 1208.43 L2147.12 1208.43 L2147.71 1208.43 L2148.3 1208.43 L2148.88 1208.43 L2149.47 1208.43 L2150.05 1208.43 L2150.64 1208.43 L2151.23 1208.43 L2151.81 1208.43 L2152.4 1208.43 L2152.99 1208.43 L2153.57 1208.43 L2154.16 1208.43 L2154.75 1208.43 L2155.33 1208.43 L2155.92 1208.43 L2156.5 1208.43 L2157.09 1208.43 L2157.68 1208.43 L2158.26 1208.43 L2158.26 1208.28 L2157.68 1208.28 L2157.09 1208.28 L2156.5 1208.28 L2155.92 1208.28 L2155.33 1208.28 L2154.75 1208.28 L2154.16 1208.28 L2153.57 1208.28 L2152.99 1208.28 L2152.4 1208.28 L2151.81 1208.28 L2151.23 1208.28 L2150.64 1208.28 L2150.05 1208.28 L2149.47 1208.28 L2148.88 1208.28 L2148.3 1208.28 L2147.71 1208.28 L2147.12 1208.28 L2146.54 1208.28 L2145.95 1208.28 L2145.36 1208.28 L2144.78 1208.28 L2144.19 1208.28 L2143.6 1208.28 L2143.02 1208.28 L2142.43 1208.28 L2141.84 1208.28 L2141.26 1208.28 L2140.67 1208.28 L2140.09 1208.28 L2139.5 1208.28 L2138.91 1208.28 L2138.33 1208.28 L2137.74 1208.28 L2137.15 1208.28 L2136.57 1208.28 L2135.98 1208.28 L2135.39 1208.28 L2134.81 1208.28 L2134.22 1208.28 L2133.63 1208.28 L2133.05 1208.28 L2132.46 1208.28 L2131.88 1208.28 L2131.29 1208.28 L2130.7 1208.28 L2130.12 1208.28 L2129.53 1208.28 L2128.94 1208.28 L2128.36 1208.28 L2127.77 1208.28 L2127.18 1208.28 L2126.6 1208.28 L2126.01 1208.28 L2125.42 1208.28 L2124.84 1208.28 L2124.25 1208.28 L2123.67 1208.28 L2123.08 1208.28 L2122.49 1208.28 L2121.91 1208.28 L2121.32 1208.28 L2120.73 1208.28 L2120.15 1208.28 L2119.56 1208.28 L2118.97 1208.28 L2118.39 1208.28 L2117.8 1208.28 L2117.22 1208.28 L2116.63 1208.28 L2116.04 1208.28 L2115.46 1208.28 L2114.87 1208.28 L2114.28 1208.28 L2113.7 1208.28 L2113.11 1208.28 L2112.52 1208.28 L2111.94 1208.28 L2111.35 1208.28 L2110.76 1208.28 L2110.18 1208.28 L2109.59 1208.28 L2109.01 1208.28 L2108.42 1208.28 L2107.83 1208.28 L2107.25 1208.28 L2106.66 1208.28 L2106.07 1208.28 L2105.49 1208.28 L2104.9 1208.28 L2104.31 1208.28 L2103.73 1208.28 L2103.14 1208.28 L2102.55 1208.28 L2101.97 1208.28 L2101.38 1208.28 L2100.8 1208.28 L2100.21 1208.28 L2099.62 1208.28 L2099.04 1208.28 L2098.45 1208.28 L2097.86 1208.28 L2097.28 1208.28 L2096.69 1208.28 L2096.1 1208.28 L2095.52 1208.28 L2094.93 1208.28 L2094.35 1208.28 L2093.76 1208.28 L2093.17 1208.28 L2092.59 1208.28 L2092 1208.28 L2091.41 1208.28 L2090.83 1208.28 L2090.24 1208.28 L2089.65 1208.28 L2089.07 1208.28 L2088.48 1208.28 L2087.89 1208.28 L2087.31 1208.28 L2086.72 1208.28 L2086.14 1208.28 L2085.55 1208.28 L2084.96 1208.28 L2084.38 1208.28 L2083.79 1208.28 L2083.2 1208.28 L2082.62 1208.28 L2082.03 1208.28 L2081.44 1208.28 L2080.86 1208.28 L2080.27 1208.28 L2079.68 1208.28 L2079.1 1208.28 L2078.51 1208.28 L2077.93 1208.28 L2077.34 1208.28 L2076.75 1208.28 L2076.17 1208.28 L2075.58 1208.28 L2074.99 1208.28 L2074.41 1208.28 L2073.82 1208.28 L2073.23 1208.28 L2072.65 1208.28 L2072.06 1208.28 L2071.48 1208.28 L2070.89 1208.28 L2070.3 1208.28 L2069.72 1208.28 L2069.13 1208.28 L2068.54 1208.28 L2067.96 1208.28 L2067.37 1208.28 L2066.78 1208.28 L2066.2 1208.28 L2065.61 1208.28 L2065.02 1208.28 L2064.44 1208.28 L2063.85 1208.28 L2063.27 1208.28 L2062.68 1208.28 L2062.09 1208.28 L2061.51 1208.28 L2060.92 1208.28 L2060.33 1208.28 L2059.75 1208.28 L2059.16 1208.28 L2058.57 1208.28 L2057.99 1208.28 L2057.4 1208.28 L2056.81 1208.28 L2056.23 1208.28 L2055.64 1208.28 L2055.06 1208.28 L2054.47 1208.28 L2053.88 1208.28 L2053.3 1208.28 L2052.71 1208.28 L2052.12 1208.28 L2051.54 1208.28 L2050.95 1208.28 L2050.36 1208.28 L2049.78 1208.28 L2049.19 1208.28 L2048.6 1208.28 L2048.02 1208.28 L2047.43 1208.28 L2046.85 1208.28 L2046.26 1208.28 L2045.67 1208.28 L2045.09 1208.28 L2044.5 1208.28 L2043.91 1208.28 L2043.33 1208.28 L2042.74 1208.28 L2042.15 1208.28 L2041.57 1208.28 L2040.98 1208.28 L2040.4 1208.28 L2039.81 1208.28 L2039.22 1208.28 L2038.64 1208.28 L2038.05 1208.28 L2037.46 1208.28 L2036.88 1208.28 L2036.29 1208.28 L2035.7 1208.28 L2035.12 1208.28 L2034.53 1208.28 L2033.94 1208.28 L2033.36 1208.28 L2032.77 1208.28 L2032.19 1208.28 L2031.6 1208.28 L2031.01 1208.28 L2030.43 1208.28 L2029.84 1208.28 L2029.25 1208.28 L2028.67 1208.28 L2028.08 1208.28 L2027.49 1208.28 L2026.91 1208.28 L2026.32 1208.28 L2025.73 1208.28 L2025.15 1208.28 L2024.56 1208.28 L2023.98 1208.28 L2023.39 1208.28 L2022.8 1208.28 L2022.22 1208.28 L2021.63 1208.28 L2021.04 1208.28 L2020.46 1208.28 L2019.87 1208.28 L2019.28 1208.28 L2018.7 1208.28 L2018.11 1208.28 L2017.53 1208.28 L2016.94 1208.28 L2016.35 1208.28 L2015.77 1208.28 L2015.18 1208.28 L2014.59 1208.28 L2014.01 1208.28 L2013.42 1208.28 L2012.83 1208.28 L2012.25 1208.28 L2011.66 1208.28 L2011.07 1208.28 L2010.49 1208.28 L2009.9 1208.28 L2009.32 1208.28 L2008.73 1208.28 L2008.14 1208.28 L2007.56 1208.28 L2006.97 1208.28 L2006.38 1208.28 L2005.8 1208.28 L2005.21 1208.28 L2004.62 1208.28 L2004.04 1208.28 L2003.45 1208.28 L2002.86 1208.28 L2002.28 1208.28 L2001.69 1208.28 L2001.11 1208.28 L2000.52 1208.28 L1999.93 1208.28 L1999.35 1208.28 L1998.76 1208.28 L1998.17 1208.28 L1997.59 1208.28 L1997 1208.28 L1996.41 1208.28 L1995.83 1208.28 L1995.24 1208.28 L1994.65 1208.28 L1994.07 1208.28 L1993.48 1208.28 L1992.9 1208.28 L1992.31 1208.28 L1991.72 1208.28 L1991.14 1208.28 L1990.55 1208.28 L1989.96 1208.28 L1989.38 1208.28 L1988.79 1208.28 L1988.2 1208.28 L1987.62 1208.28 L1987.03 1208.28 L1986.45 1208.28 L1985.86 1208.28 L1985.27 1208.28 L1984.69 1208.28 L1984.1 1208.28 L1983.51 1208.28 L1982.93 1208.28 L1982.34 1208.28 L1981.75 1208.28 L1981.17 1208.28 L1980.58 1208.28 L1979.99 1208.28 L1979.41 1208.28 L1978.82 1208.28 L1978.24 1208.28 L1977.65 1208.28 L1977.06 1208.28 L1976.48 1208.28 L1975.89 1208.28 L1975.3 1208.28 L1974.72 1208.28 L1974.13 1208.28 L1973.54 1208.28 L1972.96 1208.28 L1972.37 1208.28 L1971.78 1208.28 L1971.2 1208.28 L1970.61 1208.28 L1970.03 1208.28 L1969.44 1208.28 L1968.85 1208.28 L1968.27 1208.28 L1967.68 1208.28 L1967.09 1208.28 L1966.51 1208.28 L1965.92 1208.28 L1965.33 1208.28 L1964.75 1208.28 L1964.16 1208.28 L1963.58 1208.28 L1962.99 1208.28 L1962.4 1208.28 L1961.82 1208.28 L1961.23 1208.28 L1960.64 1208.28 L1960.06 1208.28 L1959.47 1208.28 L1958.88 1208.28 L1958.3 1208.28 L1957.71 1208.28 L1957.12 1208.28 L1956.54 1208.28 L1955.95 1208.28 L1955.37 1208.28 L1954.78 1208.28 L1954.19 1208.28 L1953.61 1208.28 L1953.02 1208.28 L1952.43 1208.28 L1951.85 1208.28 L1951.26 1208.28 L1950.67 1208.28 L1950.09 1208.28 L1949.5 1208.28 L1948.91 1208.28 L1948.33 1208.28 L1947.74 1208.28 L1947.16 1208.28 L1946.57 1208.28 L1945.98 1208.28 L1945.4 1208.28 L1944.81 1208.28 L1944.22 1208.28 L1943.64 1208.28 L1943.05 1208.28 L1942.46 1208.28 L1941.88 1208.28 L1941.29 1208.28 L1940.71 1208.28 L1940.12 1208.28 L1939.53 1208.28 L1938.95 1208.28 L1938.36 1208.28 L1937.77 1208.28 L1937.19 1208.28 L1936.6 1208.28 L1936.01 1208.28 L1935.43 1208.28 L1934.84 1208.28 L1934.25 1208.28 L1933.67 1208.28 L1933.08 1208.28 L1932.5 1208.28 L1931.91 1208.28 L1931.32 1208.28 L1930.74 1208.28 L1930.15 1208.28 L1929.56 1208.28 L1928.98 1208.28 L1928.39 1208.28 L1927.8 1208.28 L1927.22 1208.28 L1926.63 1208.28 L1926.04 1208.28 L1925.46 1208.28 L1924.87 1208.28 L1924.29 1208.28 L1923.7 1208.28 L1923.11 1208.28 L1922.53 1208.28 L1921.94 1208.28 L1921.35 1208.28 L1920.77 1208.28 L1920.18 1208.28 L1919.59 1208.28 L1919.01 1208.28 L1918.42 1208.28 L1917.83 1208.28 L1917.25 1208.28 L1916.66 1208.28 L1916.08 1208.28 L1915.49 1208.28 L1914.9 1208.28 L1914.32 1208.28 L1913.73 1208.28 L1913.14 1208.28 L1912.56 1208.28 L1911.97 1208.28 L1911.38 1208.28 L1910.8 1208.28 L1910.21 1208.28 L1909.63 1208.28 L1909.04 1208.28 L1908.45 1208.28 L1907.87 1208.28 L1907.28 1208.28 L1906.69 1208.28 L1906.11 1208.28 L1905.52 1208.28 L1904.93 1208.28 L1904.35 1208.28 L1903.76 1208.28 L1903.17 1208.28 L1902.59 1208.28 L1902 1208.28 L1901.42 1208.28 L1900.83 1208.28 L1900.24 1208.28 L1899.66 1208.28 L1899.07 1208.28 L1898.48 1208.28 L1897.9 1208.28 L1897.31 1208.28 L1896.72 1208.28 L1896.14 1208.28 L1895.55 1208.28 L1894.96 1208.28 L1894.38 1208.28 L1893.79 1208.28 L1893.21 1208.28 L1892.62 1208.28 L1892.03 1208.28 L1891.45 1208.28 L1890.86 1208.28 L1890.27 1208.28 L1889.69 1208.28 L1889.1 1208.28 L1888.51 1208.28 L1887.93 1208.28 L1887.34 1208.28 L1886.76 1208.28 L1886.17 1208.28 L1885.58 1208.28 L1885 1208.28 L1884.41 1208.28 L1883.82 1208.28 L1883.24 1208.28 L1882.65 1208.28 L1882.06 1208.28 L1881.48 1208.28 L1880.89 1208.28 L1880.3 1208.28 L1879.72 1208.28 L1879.13 1208.28 L1878.55 1208.28 L1877.96 1208.28 L1877.37 1208.28 L1876.79 1208.28 L1876.2 1208.28 L1875.61 1208.28 L1875.03 1208.28 L1874.44 1208.28 L1873.85 1208.28 L1873.27 1208.28 L1872.68 1208.28 L1872.09 1208.28 L1871.51 1208.28 L1870.92 1208.28 L1870.34 1208.28 L1869.75 1208.28 L1869.16 1208.28 L1868.58 1208.28 L1867.99 1208.28 L1867.4 1208.28 L1866.82 1208.28 L1866.23 1208.28 L1865.64 1208.28 L1865.06 1208.28 L1864.47 1208.28 L1863.88 1208.28 L1863.3 1208.28 L1862.71 1208.28 L1862.13 1208.28 L1861.54 1208.28 L1860.95 1208.28 L1860.37 1208.28 L1859.78 1208.28 L1859.19 1208.28 L1858.61 1208.28 L1858.02 1208.28 L1857.43 1208.28 L1856.85 1208.28 L1856.26 1208.28 L1855.68 1208.28 L1855.09 1208.28 L1854.5 1208.28 L1853.92 1208.28 L1853.33 1208.28 L1852.74 1208.28 L1852.16 1208.28 L1851.57 1208.28 L1850.98 1208.28 L1850.4 1208.28 L1849.81 1208.28 L1849.22 1208.28 L1848.64 1208.28 L1848.05 1208.28 L1847.47 1208.28 L1846.88 1208.28 L1846.29 1208.28 L1845.71 1208.28 L1845.12 1208.28 L1844.53 1208.28 L1843.95 1208.28 L1843.36 1208.28 L1842.77 1208.28 L1842.19 1208.28 L1841.6 1208.28 L1841.01 1208.28 L1840.43 1208.28 L1839.84 1208.28 L1839.26 1208.28 L1838.67 1208.28 L1838.08 1208.28 L1837.5 1208.28 L1836.91 1208.28 L1836.32 1208.28 L1835.74 1208.28 L1835.15 1208.28 L1834.56 1208.28 L1833.98 1208.28 L1833.39 1208.28 L1832.81 1208.28 L1832.22 1208.28 L1831.63 1208.28 L1831.05 1208.28 L1830.46 1208.28 L1829.87 1208.28 L1829.29 1208.28 L1828.7 1208.28 L1828.11 1208.28 L1827.53 1208.28 L1826.94 1208.28 L1826.35 1208.28 L1825.77 1208.28 L1825.18 1208.28 L1824.6 1208.28 L1824.01 1208.28 L1823.42 1208.28 L1822.84 1208.28 L1822.25 1208.28 L1821.66 1208.28 L1821.08 1208.28 L1820.49 1208.28 L1819.9 1208.28 L1819.32 1208.28 L1818.73 1208.28 L1818.14 1208.28 L1817.56 1208.28 L1816.97 1208.28 L1816.39 1208.28 L1815.8 1208.28 L1815.21 1208.28 L1814.63 1208.28 L1814.04 1208.28 L1813.45 1208.28 L1812.87 1208.28 L1812.28 1208.28 L1811.69 1208.28 L1811.11 1208.28 L1810.52 1208.28 L1809.94 1208.28 L1809.35 1208.28 L1808.76 1208.28 L1808.18 1208.28 L1807.59 1208.28 L1807 1208.28 L1806.42 1208.28 L1805.83 1208.28 L1805.24 1208.28 L1804.66 1208.28 L1804.07 1208.28 L1803.48 1208.28 L1802.9 1208.28 L1802.31 1208.28 L1801.73 1208.28 L1801.14 1208.28 L1800.55 1208.28 L1799.97 1208.28 L1799.38 1208.28 L1798.79 1208.28 L1798.21 1208.28 L1797.62 1208.28 L1797.03 1208.28 L1796.45 1208.28 L1795.86 1208.28 L1795.27 1208.28 L1794.69 1208.28 L1794.1 1208.28 L1793.52 1208.28 L1792.93 1208.28 L1792.34 1208.28 L1791.76 1208.28 L1791.17 1208.28 L1790.58 1208.28 L1790 1208.28 L1789.41 1208.28 L1788.82 1208.28 L1788.24 1208.28 L1787.65 1208.28 L1787.06 1208.28 L1786.48 1208.28 L1785.89 1208.28 L1785.31 1208.28 L1784.72 1208.28 L1784.13 1208.28 L1783.55 1208.28 L1782.96 1208.28 L1782.37 1208.28 L1781.79 1208.28 L1781.2 1208.28 L1780.61 1208.28 L1780.03 1208.28 L1779.44 1208.28 L1778.86 1208.28 L1778.27 1208.28 L1777.68 1208.28 L1777.1 1208.28 L1776.51 1208.28 L1775.92 1208.28 L1775.34 1208.28 L1774.75 1208.28 L1774.16 1208.28 L1773.58 1208.28 L1772.99 1208.28 L1772.4 1208.28 L1771.82 1208.28 L1771.23 1208.28 L1770.65 1208.28 L1770.06 1208.28 L1769.47 1208.28 L1768.89 1208.28 L1768.3 1208.28 L1767.71 1208.28 L1767.13 1208.28 L1766.54 1208.28 L1765.95 1208.28 L1765.37 1208.28 L1764.78 1208.28 L1764.19 1208.28 L1763.61 1208.28 L1763.02 1208.28 L1762.44 1208.28 L1761.85 1208.28 L1761.26 1208.28 L1760.68 1208.28 L1760.09 1208.28 L1759.5 1208.28 L1758.92 1208.28 L1758.33 1208.28 L1757.74 1208.28 L1757.16 1208.28 L1756.57 1208.28 L1755.99 1208.28 L1755.4 1208.28 L1754.81 1208.28 L1754.23 1208.28 L1753.64 1208.28 L1753.05 1208.28 L1752.47 1208.28 L1751.88 1208.28 L1751.29 1208.28 L1750.71 1208.28 L1750.12 1208.28 L1749.53 1208.28 L1748.95 1208.28 L1748.36 1208.28 L1747.78 1208.28 L1747.19 1208.28 L1746.6 1208.28 L1746.02 1208.28 L1745.43 1208.28 L1744.84 1208.28 L1744.26 1208.28 L1743.67 1208.28 L1743.08 1208.28 L1742.5 1208.28 L1741.91 1208.28 L1741.32 1208.28 L1740.74 1208.28 L1740.15 1208.28 L1739.57 1208.28 L1738.98 1208.28 L1738.39 1208.28 L1737.81 1208.28 L1737.22 1208.28 L1736.63 1208.28 L1736.05 1208.28 L1735.46 1208.28 L1734.87 1208.28 L1734.29 1208.28 L1733.7 1208.28 L1733.11 1208.28 L1732.53 1208.28 L1731.94 1208.28 L1731.36 1208.28 L1730.77 1208.28 L1730.18 1208.28 L1729.6 1208.28 L1729.01 1208.28 L1728.42 1208.28 L1727.84 1208.28 L1727.25 1208.28 L1726.66 1208.28 L1726.08 1208.28 L1725.49 1208.28 L1724.91 1208.28 L1724.32 1208.28 L1723.73 1208.28 L1723.15 1208.28 L1722.56 1208.28 L1721.97 1208.28 L1721.39 1208.28 L1720.8 1208.28 L1720.21 1208.28 L1719.63 1208.28 L1719.04 1208.28 L1718.45 1208.28 L1717.87 1208.28 L1717.28 1208.28 L1716.7 1208.28 L1716.11 1208.28 L1715.52 1208.28 L1714.94 1208.28 L1714.35 1208.28 L1713.76 1208.28 L1713.18 1208.28 L1712.59 1208.28 L1712 1208.28 L1711.42 1208.28 L1710.83 1208.28 L1710.24 1208.28 L1709.66 1208.28 L1709.07 1208.28 L1708.49 1208.28 L1707.9 1208.28 L1707.31 1208.28 L1706.73 1208.28 L1706.14 1208.28 L1705.55 1208.28 L1704.97 1208.28 L1704.38 1208.28 L1703.79 1208.28 L1703.21 1208.28 L1702.62 1208.28 L1702.04 1208.28 L1701.45 1208.28 L1700.86 1208.28 L1700.28 1208.28 L1699.69 1208.28 L1699.1 1208.28 L1698.52 1208.28 L1697.93 1208.28 L1697.34 1208.28 L1696.76 1208.28 L1696.17 1208.28 L1695.58 1208.28 L1695 1208.28 L1694.41 1208.28 L1693.83 1208.28 L1693.24 1208.28 L1692.65 1208.28 L1692.07 1208.28 L1691.48 1208.28 L1690.89 1208.28 L1690.31 1208.28 L1689.72 1208.28 L1689.13 1208.28 L1688.55 1208.28 L1687.96 1208.28 L1687.37 1208.28 L1686.79 1208.28 L1686.2 1208.28 L1685.62 1208.28 L1685.03 1208.28 L1684.44 1208.28 L1683.86 1208.28 L1683.27 1208.28 L1682.68 1208.28 L1682.1 1208.28 L1681.51 1208.28 L1680.92 1208.28 L1680.34 1208.28 L1679.75 1208.28 L1679.17 1208.28 L1678.58 1208.28 L1677.99 1208.28 L1677.41 1208.28 L1676.82 1208.28 L1676.23 1208.28 L1675.65 1208.28 L1675.06 1208.28 L1674.47 1208.28 L1673.89 1208.28 L1673.3 1208.28 L1672.71 1208.28 L1672.13 1208.28 L1671.54 1208.28 L1670.96 1208.28 L1670.37 1208.28 L1669.78 1208.28 L1669.2 1208.28 L1668.61 1208.28 L1668.02 1208.28 L1667.44 1208.28 L1666.85 1208.28 L1666.26 1208.28 L1665.68 1208.28 L1665.09 1208.28 L1664.5 1208.28 L1663.92 1208.28 L1663.33 1208.28 L1662.75 1208.28 L1662.16 1208.28 L1661.57 1208.28 L1660.99 1208.28 L1660.4 1208.28 L1659.81 1208.28 L1659.23 1208.28 L1658.64 1208.28 L1658.05 1208.28 L1657.47 1208.28 L1656.88 1208.28 L1656.29 1208.28 L1655.71 1208.28 L1655.12 1208.28 L1654.54 1208.28 L1653.95 1208.28 L1653.36 1208.28 L1652.78 1208.28 L1652.19 1208.28 L1651.6 1208.28 L1651.02 1208.28 L1650.43 1208.28 L1649.84 1208.28 L1649.26 1208.28 L1648.67 1208.28 L1648.09 1208.28 L1647.5 1208.28 L1646.91 1208.28 L1646.33 1208.28 L1645.74 1208.28 L1645.15 1208.28 L1644.57 1208.28 L1643.98 1208.28 L1643.39 1208.28 L1642.81 1208.28 L1642.22 1208.28 L1641.63 1208.28 L1641.05 1208.28 L1640.46 1208.28 L1639.88 1208.28 L1639.29 1208.28 L1638.7 1208.28 L1638.12 1208.28 L1637.53 1208.28 L1636.94 1208.28 L1636.36 1208.28 L1635.77 1208.28 L1635.18 1208.28 L1634.6 1208.28 L1634.01 1208.28 L1633.42 1208.28 L1632.84 1208.28 L1632.25 1208.28 L1631.67 1208.28 L1631.08 1208.28 L1630.49 1208.28 L1629.91 1208.28 L1629.32 1208.28 L1628.73 1208.28 L1628.15 1208.28 L1627.56 1208.28 L1626.97 1208.28 L1626.39 1208.28 L1625.8 1208.28 L1625.22 1208.28 L1624.63 1208.28 L1624.04 1208.28 L1623.46 1208.28 L1622.87 1208.28 L1622.28 1208.28 L1621.7 1208.28 L1621.11 1208.28 L1620.52 1208.28 L1619.94 1208.28 L1619.35 1208.28 L1618.76 1208.28 L1618.18 1208.28 L1617.59 1208.28 L1617.01 1208.28 L1616.42 1208.28 L1615.83 1208.28 L1615.25 1208.28 L1614.66 1208.28 L1614.07 1208.28 L1613.49 1208.28 L1612.9 1208.28 L1612.31 1208.28 L1611.73 1208.28 L1611.14 1208.28 L1610.55 1208.28 L1609.97 1208.28 L1609.38 1208.28 L1608.8 1208.28 L1608.21 1208.28 L1607.62 1208.28 L1607.04 1208.28 L1606.45 1208.28 L1605.86 1208.28 L1605.28 1208.28 L1604.69 1208.28 L1604.1 1208.28 L1603.52 1208.28 L1602.93 1208.28 L1602.34 1208.28 L1601.76 1208.28 L1601.17 1208.28 L1600.59 1208.28 L1600 1208.28 L1599.41 1208.28 L1598.83 1208.28 L1598.24 1208.28 L1597.65 1208.28 L1597.07 1208.28 L1596.48 1208.28 L1595.89 1208.28 L1595.31 1208.28 L1594.72 1208.28 L1594.14 1208.28 L1593.55 1208.28 L1592.96 1208.28 L1592.38 1208.28 L1591.79 1208.28 L1591.2 1208.28 L1590.62 1208.28 L1590.03 1208.28 L1589.44 1208.28 L1588.86 1208.28 L1588.27 1208.28 L1587.68 1208.28 L1587.1 1208.28 L1586.51 1208.28 L1585.93 1208.28 L1585.34 1208.28 L1584.75 1208.28 L1584.17 1208.28 L1583.58 1208.28 L1582.99 1208.28 L1582.41 1208.28 L1581.82 1208.28 L1581.23 1208.28 L1580.65 1208.28 L1580.06 1208.28 L1579.47 1208.28 L1578.89 1208.28 L1578.3 1208.28 L1577.72 1208.28 L1577.13 1208.28 L1576.54 1208.28 L1575.96 1208.28 L1575.37 1208.28 L1574.78 1208.28 L1574.2 1208.28 L1573.61 1208.28 L1573.02 1208.28 L1572.44 1208.28 L1571.85 1208.28 L1571.27 1208.28 L1570.68 1208.28 L1570.09 1208.28 L1569.51 1208.28 L1568.92 1208.28 L1568.33 1208.28 L1567.75 1208.28 L1567.16 1208.28 L1566.57 1208.28 L1565.99 1208.28 L1565.4 1208.28 L1564.81 1208.28 L1564.23 1208.28 L1563.64 1208.28 L1563.06 1208.28 L1562.47 1208.28 L1561.88 1208.28 L1561.3 1208.28 L1560.71 1208.28 L1560.12 1208.28 L1559.54 1208.28 L1558.95 1208.28 L1558.36 1208.28 L1557.78 1208.28 L1557.19 1208.28 L1556.6 1208.28 L1556.02 1208.28 L1555.43 1208.28 L1554.85 1208.28 L1554.26 1208.28 L1553.67 1208.28 L1553.09 1208.28 L1552.5 1208.28 L1551.91 1208.28 L1551.33 1208.28 L1550.74 1208.28 L1550.15 1208.28 L1549.57 1208.28 L1548.98 1208.28 L1548.4 1208.28 L1547.81 1208.28 L1547.22 1208.28 L1546.64 1208.28 L1546.05 1208.28 L1545.46 1208.28 L1544.88 1208.28 L1544.29 1208.28 L1543.7 1208.28 L1543.12 1208.28 L1542.53 1208.28 L1541.94 1208.28 L1541.36 1208.28 L1540.77 1208.28 L1540.19 1208.28 L1539.6 1208.28 L1539.01 1208.28 L1538.43 1208.28 L1537.84 1208.28 L1537.25 1208.28 L1536.67 1208.28 L1536.08 1208.28 L1535.49 1208.28 L1534.91 1208.28 L1534.32 1208.28 L1533.73 1208.28 L1533.15 1208.28 L1532.56 1208.28 L1531.98 1208.28 L1531.39 1208.28 L1530.8 1208.28 L1530.22 1208.28 L1529.63 1208.28 L1529.04 1208.28 L1528.46 1208.28 L1527.87 1208.28 L1527.28 1208.28 L1526.7 1208.28 L1526.11 1208.28 L1525.52 1208.28 L1524.94 1208.28 L1524.35 1208.28 L1523.77 1208.28 L1523.18 1208.28 L1522.59 1208.28 L1522.01 1208.28 L1521.42 1208.28 L1520.83 1208.28 L1520.25 1208.28 L1519.66 1208.28 L1519.07 1208.28 L1518.49 1208.28 L1517.9 1208.28 L1517.32 1208.28 L1516.73 1208.28 L1516.14 1208.28 L1515.56 1208.28 L1514.97 1208.28 L1514.38 1208.28 L1513.8 1208.28 L1513.21 1208.28 L1512.62 1208.28 L1512.04 1208.28 L1511.45 1208.28 L1510.86 1208.28 L1510.28 1208.28 L1509.69 1208.28 L1509.11 1208.28 L1508.52 1208.28 L1507.93 1208.28 L1507.35 1208.28 L1506.76 1208.28 L1506.17 1208.28 L1505.59 1208.28 L1505 1208.28 L1504.41 1208.28 L1503.83 1208.28 L1503.24 1208.28 L1502.65 1208.28 L1502.07 1208.28 L1501.48 1208.28 L1500.9 1208.28 L1500.31 1208.28 L1499.72 1208.28 L1499.14 1208.28 L1498.55 1208.28 L1497.96 1208.28 L1497.38 1208.28 L1496.79 1208.28 L1496.2 1208.28 L1495.62 1208.28 L1495.03 1208.28 L1494.45 1208.28 L1493.86 1208.28 L1493.27 1208.28 L1492.69 1208.28 L1492.1 1208.28 L1491.51 1208.28 L1490.93 1208.28 L1490.34 1208.28 L1489.75 1208.28 L1489.17 1208.28 L1488.58 1208.28 L1487.99 1208.28 L1487.41 1208.28 L1486.82 1208.28 L1486.24 1208.28 L1485.65 1208.28 L1485.06 1208.28 L1484.48 1208.28 L1483.89 1208.28 L1483.3 1208.28 L1482.72 1208.28 L1482.13 1208.28 L1481.54 1208.28 L1480.96 1208.28 L1480.37 1208.28 L1479.78 1208.28 L1479.2 1208.28 L1478.61 1208.28 L1478.03 1208.28 L1477.44 1208.28 L1476.85 1208.28 L1476.27 1208.28 L1475.68 1208.28 L1475.09 1208.28 L1474.51 1208.28 L1473.92 1208.28 L1473.33 1208.28 L1472.75 1208.28 L1472.16 1208.28 L1471.57 1208.28 L1470.99 1208.28 L1470.4 1208.28 L1469.82 1208.28 L1469.23 1208.28 L1468.64 1208.28 L1468.06 1208.28 L1467.47 1208.28 L1466.88 1208.28 L1466.3 1208.28 L1465.71 1208.28 L1465.12 1208.28 L1464.54 1208.28 L1463.95 1208.28 L1463.37 1208.28 L1462.78 1208.28 L1462.19 1208.28 L1461.61 1208.28 L1461.02 1208.28 L1460.43 1208.28 L1459.85 1208.28 L1459.26 1208.28 L1458.67 1208.28 L1458.09 1208.28 L1457.5 1208.28 L1456.91 1208.28 L1456.33 1208.28 L1455.74 1208.28 L1455.16 1208.28 L1454.57 1208.28 L1453.98 1208.28 L1453.4 1208.28 L1452.81 1208.28 L1452.22 1208.28 L1451.64 1208.28 L1451.05 1208.28 L1450.46 1208.28 L1449.88 1208.28 L1449.29 1208.28 L1448.7 1208.28 L1448.12 1208.28 L1447.53 1208.28 L1446.95 1208.28 L1446.36 1208.28 L1445.77 1208.28 L1445.19 1208.28 L1444.6 1208.28 L1444.01 1208.28 L1443.43 1208.28 L1442.84 1208.28 L1442.25 1208.28 L1441.67 1208.28 L1441.08 1208.28 L1440.5 1208.28 L1439.91 1208.28 L1439.32 1208.28 L1438.74 1208.28 L1438.15 1208.28 L1437.56 1208.28 L1436.98 1208.28 L1436.39 1208.28 L1435.8 1208.28 L1435.22 1208.28 L1434.63 1208.28 L1434.04 1208.28 L1433.46 1208.28 L1432.87 1208.28 L1432.29 1208.28 L1431.7 1208.28 L1431.11 1208.28 L1430.53 1208.28 L1429.94 1208.28 L1429.35 1208.28 L1428.77 1208.28 L1428.18 1208.28 L1427.59 1208.28 L1427.01 1208.28 L1426.42 1208.28 L1425.83 1208.28 L1425.25 1208.28 L1424.66 1208.28 L1424.08 1208.28 L1423.49 1208.28 L1422.9 1208.28 L1422.32 1208.28 L1421.73 1208.28 L1421.14 1208.28 L1420.56 1208.28 L1419.97 1208.28 L1419.38 1208.28 L1418.8 1208.28 L1418.21 1208.28 L1417.63 1208.28 L1417.04 1208.28 L1416.45 1208.28 L1415.87 1208.28 L1415.28 1208.28 L1414.69 1208.28 L1414.11 1208.28 L1413.52 1208.28 L1412.93 1208.28 L1412.35 1208.28 L1411.76 1208.28 L1411.17 1208.28 L1410.59 1208.28 L1410 1208.28 L1409.42 1208.28 L1408.83 1208.28 L1408.24 1208.28 L1407.66 1208.28 L1407.07 1208.28 L1406.48 1208.28 L1405.9 1208.28 L1405.31 1208.28 L1404.72 1208.28 L1404.14 1208.28 L1403.55 1208.28 L1402.96 1208.28 L1402.38 1208.28 L1401.79 1208.28 L1401.21 1208.28 L1400.62 1208.28 L1400.03 1208.28 L1399.45 1208.28 L1398.86 1208.28 L1398.27 1208.28 L1397.69 1208.28 L1397.1 1208.28 L1396.51 1208.28 L1395.93 1208.28 L1395.34 1208.28 L1394.75 1208.28 L1394.17 1208.28 L1393.58 1208.28 L1393 1208.28 L1392.41 1208.28 L1391.82 1208.28 L1391.24 1208.28 L1390.65 1208.28 L1390.06 1208.28 L1389.48 1208.28 L1388.89 1208.28 L1388.3 1208.28 L1387.72 1208.28 L1387.13 1208.28 L1386.55 1208.28 L1385.96 1208.28 L1385.37 1208.28 L1384.79 1208.28 L1384.2 1208.28 L1383.61 1208.28 L1383.03 1208.28 L1382.44 1208.28 L1381.85 1208.28 L1381.27 1208.28 L1380.68 1208.28 L1380.09 1208.28 L1379.51 1208.28 L1378.92 1208.28 L1378.34 1208.28 L1377.75 1208.28 L1377.16 1208.28 L1376.58 1208.28 L1375.99 1208.28 L1375.4 1208.28 L1374.82 1208.28 L1374.23 1208.28 L1373.64 1208.28 L1373.06 1208.28 L1372.47 1208.28 L1371.88 1208.28 L1371.3 1208.28 L1370.71 1208.28 L1370.13 1208.28 L1369.54 1208.28 L1368.95 1208.28 L1368.37 1208.28 L1367.78 1208.28 L1367.19 1208.28 L1366.61 1208.28 L1366.02 1208.28 L1365.43 1208.28 L1364.85 1208.28 L1364.26 1208.28 L1363.68 1208.28 L1363.09 1208.28 L1362.5 1208.28 L1361.92 1208.28 L1361.33 1208.28 L1360.74 1208.28 L1360.16 1208.28 L1359.57 1208.28 L1358.98 1208.28 L1358.4 1208.28 L1357.81 1208.28 L1357.22 1208.28 L1356.64 1208.28 L1356.05 1208.28 L1355.47 1208.28 L1354.88 1208.28 L1354.29 1208.28 L1353.71 1208.28 L1353.12 1208.28 L1352.53 1208.28 L1351.95 1208.28 L1351.36 1208.28 L1350.77 1208.28 L1350.19 1208.28 L1349.6 1208.28 L1349.01 1208.28 L1348.43 1208.28 L1347.84 1208.28 L1347.26 1208.28 L1346.67 1208.28 L1346.08 1208.28 L1345.5 1208.28 L1344.91 1208.28 L1344.32 1208.28 L1343.74 1208.28 L1343.15 1208.28 L1342.56 1208.28 L1341.98 1208.28 L1341.39 1208.28 L1340.8 1208.28 L1340.22 1208.28 L1339.63 1208.28 L1339.05 1208.28 L1338.46 1208.28 L1337.87 1208.28 L1337.29 1208.28 L1336.7 1208.28 L1336.11 1208.28 L1335.53 1208.28 L1334.94 1208.28 L1334.35 1208.28 L1333.77 1208.28 L1333.18 1208.28 L1332.6 1208.28 L1332.01 1208.28 L1331.42 1208.28 L1330.84 1208.28 L1330.25 1208.28 L1329.66 1208.28 L1329.08 1208.28 L1328.49 1208.28 L1327.9 1208.28 L1327.32 1208.28 L1326.73 1208.28 L1326.14 1208.28 L1325.56 1208.28 L1324.97 1208.28 L1324.39 1208.28 L1323.8 1208.28 L1323.21 1208.28 L1322.63 1208.28 L1322.04 1208.28 L1321.45 1208.28 L1320.87 1208.28 L1320.28 1208.28 L1319.69 1208.28 L1319.11 1208.28 L1318.52 1208.28 L1317.93 1208.28 L1317.35 1208.28 L1316.76 1208.28 L1316.18 1208.28 L1315.59 1208.28 L1315 1208.28 L1314.42 1208.28 L1313.83 1208.28 L1313.24 1208.28 L1312.66 1208.28 L1312.07 1208.28 L1311.48 1208.28 L1310.9 1208.28 L1310.31 1208.28 L1309.73 1208.28 L1309.14 1208.28 L1308.55 1208.28 L1307.97 1208.28 L1307.38 1208.28 L1306.79 1208.28 L1306.21 1208.28 L1305.62 1208.28 L1305.03 1208.28 L1304.45 1208.28 L1303.86 1208.28 L1303.27 1208.28 L1302.69 1208.28 L1302.1 1208.28 L1301.52 1208.28 L1300.93 1208.28 L1300.34 1208.28 L1299.76 1208.28 L1299.17 1208.28 L1298.58 1208.28 L1298 1208.28 L1297.41 1208.28 L1296.82 1208.28 L1296.24 1208.28 L1295.65 1208.28 L1295.06 1208.28 L1294.48 1208.28 L1293.89 1208.28 L1293.31 1208.28 L1292.72 1208.28 L1292.13 1208.28 L1291.55 1208.28 L1290.96 1208.28 L1290.37 1208.28 L1289.79 1208.28 L1289.2 1208.28 L1288.61 1208.28 L1288.03 1208.28 L1287.44 1208.28 L1286.86 1208.28 L1286.27 1208.28 L1285.68 1208.28 L1285.1 1208.28 L1284.51 1208.28 L1283.92 1208.28 L1283.34 1208.28 L1282.75 1208.28 L1282.16 1208.28 L1281.58 1208.28 L1280.99 1208.28 L1280.4 1208.28 L1279.82 1208.28 L1279.23 1208.28 L1278.65 1208.28 L1278.06 1208.28 L1277.47 1208.28 L1276.89 1208.28 L1276.3 1208.28 L1275.71 1208.28 L1275.13 1208.28 L1274.54 1208.28 L1273.95 1208.28 L1273.37 1208.28 L1272.78 1208.28 L1272.19 1208.28 L1271.61 1208.28 L1271.02 1208.28 L1270.44 1208.28 L1269.85 1208.28 L1269.26 1208.28 L1268.68 1208.28 L1268.09 1208.28 L1267.5 1208.28 L1266.92 1208.28 L1266.33 1208.28 L1265.74 1208.28 L1265.16 1208.28 L1264.57 1208.28 L1263.98 1208.28 L1263.4 1208.28 L1262.81 1208.28 L1262.23 1208.28 L1261.64 1208.28 L1261.05 1208.28 L1260.47 1208.28 L1259.88 1208.28 L1259.29 1208.28 L1258.71 1208.28 L1258.12 1208.28 L1257.53 1208.28 L1256.95 1208.28 L1256.36 1208.28 L1255.78 1208.28 L1255.19 1208.28 L1254.6 1208.28 L1254.02 1208.28 L1253.43 1208.28 L1252.84 1208.28 L1252.26 1208.28 L1251.67 1208.28 L1251.08 1208.28 L1250.5 1208.28 L1249.91 1208.28 L1249.32 1208.28 L1248.74 1208.28 L1248.15 1208.28 L1247.57 1208.28 L1246.98 1208.28 L1246.39 1208.28 L1245.81 1208.28 L1245.22 1208.28 L1244.63 1208.28 L1244.05 1208.28 L1243.46 1208.28 L1242.87 1208.28 L1242.29 1208.28 L1241.7 1208.28 L1241.11 1208.28 L1240.53 1208.28 L1239.94 1208.28 L1239.36 1208.28 L1238.77 1208.28 L1238.18 1208.28 L1237.6 1208.28 L1237.01 1208.28 L1236.42 1208.28 L1235.84 1208.28 L1235.25 1208.28 L1234.66 1208.28 L1234.08 1208.28 L1233.49 1208.28 L1232.91 1208.28 L1232.32 1208.28 L1231.73 1208.28 L1231.15 1208.28 L1230.56 1208.28 L1229.97 1208.28 L1229.39 1208.28 L1228.8 1208.28 L1228.21 1208.28 L1227.63 1208.28 L1227.04 1208.28 L1226.45 1208.28 L1225.87 1208.28 L1225.28 1208.28 L1224.7 1208.28 L1224.11 1208.28 L1223.52 1208.28 L1222.94 1208.28 L1222.35 1208.28 L1221.76 1208.28 L1221.18 1208.28 L1220.59 1208.28 L1220 1208.28 L1219.42 1208.28 L1218.83 1208.28 L1218.24 1208.28 L1217.66 1208.28 L1217.07 1208.28 L1216.49 1208.28 L1215.9 1208.28 L1215.31 1208.28 L1214.73 1208.28 L1214.14 1208.28 L1213.55 1208.28 L1212.97 1208.28 L1212.38 1208.28 L1211.79 1208.28 L1211.21 1208.28 L1210.62 1208.28 L1210.03 1208.28 L1209.45 1208.28 L1208.86 1208.28 L1208.28 1208.28 L1207.69 1208.28 L1207.1 1208.28 L1206.52 1208.28 L1205.93 1208.28 L1205.34 1208.28 L1204.76 1208.28 L1204.17 1208.28 L1203.58 1208.28 L1203 1208.28 L1202.41 1208.28 L1201.83 1208.28 L1201.24 1208.28 L1200.65 1208.28 L1200.07 1208.28 L1199.48 1208.28 L1198.89 1208.28 L1198.31 1208.28 L1197.72 1208.28 L1197.13 1208.28 L1196.55 1208.28 L1195.96 1208.28 L1195.37 1208.28 L1194.79 1208.28 L1194.2 1208.28 L1193.62 1208.28 L1193.03 1208.28 L1192.44 1208.28 L1191.86 1208.28 L1191.27 1208.28 L1190.68 1208.28 L1190.1 1208.28 L1189.51 1208.28 L1188.92 1208.28 L1188.34 1208.28 L1187.75 1208.28 L1187.16 1208.28 L1186.58 1208.28 L1185.99 1208.28 L1185.41 1208.28 L1184.82 1208.28 L1184.23 1208.28 L1183.65 1208.28 L1183.06 1208.28 L1182.47 1208.28 L1181.89 1208.28 L1181.3 1208.28 L1180.71 1208.28 L1180.13 1208.28 L1179.54 1208.28 L1178.96 1208.28 L1178.37 1208.28 L1177.78 1208.28 L1177.2 1208.28 L1176.61 1208.28 L1176.02 1208.28 L1175.44 1208.28 L1174.85 1208.28 L1174.26 1208.28 L1173.68 1208.28 L1173.09 1208.28 L1172.5 1208.28 L1171.92 1208.28 L1171.33 1208.28 L1170.75 1208.28 L1170.16 1208.28 L1169.57 1208.28 L1168.99 1208.28 L1168.4 1208.28 L1167.81 1208.28 L1167.23 1208.28 L1166.64 1208.28 L1166.05 1208.28 L1165.47 1208.28 L1164.88 1208.28 L1164.29 1208.28 L1163.71 1208.28 L1163.12 1208.28 L1162.54 1208.28 L1161.95 1208.28 L1161.36 1208.28 L1160.78 1208.28 L1160.19 1208.28 L1159.6 1208.28 L1159.02 1208.28 L1158.43 1208.28 L1157.84 1208.28 L1157.26 1208.28 L1156.67 1208.28 L1156.09 1208.28 L1155.5 1208.28 L1154.91 1208.28 L1154.33 1208.28 L1153.74 1208.28 L1153.15 1208.28 L1152.57 1208.28 L1151.98 1208.28 L1151.39 1208.28 L1150.81 1208.28 L1150.22 1208.28 L1149.63 1208.28 L1149.05 1208.28 L1148.46 1208.28 L1147.88 1208.28 L1147.29 1208.28 L1146.7 1208.28 L1146.12 1208.28 L1145.53 1208.28 L1144.94 1208.28 L1144.36 1208.28 L1143.77 1208.28 L1143.18 1208.28 L1142.6 1208.28 L1142.01 1208.28 L1141.42 1208.28 L1140.84 1208.28 L1140.25 1208.28 L1139.67 1208.28 L1139.08 1208.28 L1138.49 1208.28 L1137.91 1208.28 L1137.32 1208.28 L1136.73 1208.28 L1136.15 1208.28 L1135.56 1208.28 L1134.97 1208.28 L1134.39 1208.28 L1133.8 1208.28 L1133.21 1208.28 L1132.63 1208.28 L1132.04 1208.28 L1131.46 1208.28 L1130.87 1208.28 L1130.28 1208.28 L1129.7 1208.28 L1129.11 1208.28 L1128.52 1208.28 L1127.94 1208.28 L1127.35 1208.28 L1126.76 1208.28 L1126.18 1208.28 L1125.59 1208.28 L1125.01 1208.28 L1124.42 1208.28 L1123.83 1208.28 L1123.25 1208.28 L1122.66 1208.28 L1122.07 1208.28 L1121.49 1208.28 L1120.9 1208.28 L1120.31 1208.28 L1119.73 1208.28 L1119.14 1208.28 L1118.55 1208.28 L1117.97 1208.28 L1117.38 1208.28 L1116.8 1208.28 L1116.21 1208.28 L1115.62 1208.28 L1115.04 1208.28 L1114.45 1208.28 L1113.86 1208.28 L1113.28 1208.28 L1112.69 1208.28 L1112.1 1208.28 L1111.52 1208.28 L1110.93 1208.28 L1110.34 1208.28 L1109.76 1208.28 L1109.17 1208.28 L1108.59 1208.28 L1108 1208.28 L1107.41 1208.28 L1106.83 1208.28 L1106.24 1208.28 L1105.65 1208.28 L1105.07 1208.28 L1104.48 1208.28 L1103.89 1208.28 L1103.31 1208.28 L1102.72 1208.28 L1102.14 1208.28 L1101.55 1208.28 L1100.96 1208.28 L1100.38 1208.28 L1099.79 1208.28 L1099.2 1208.28 L1098.62 1208.28 L1098.03 1208.28 L1097.44 1208.28 L1096.86 1208.28 L1096.27 1208.28 L1095.68 1208.28 L1095.1 1208.28 L1094.51 1208.28 L1093.93 1208.28 L1093.34 1208.28 L1092.75 1208.28 L1092.17 1208.28 L1091.58 1208.28 L1090.99 1208.28 L1090.41 1208.28 L1089.82 1208.28 L1089.23 1208.28 L1088.65 1208.28 L1088.06 1208.28 L1087.47 1208.28 L1086.89 1208.28 L1086.3 1208.28 L1085.72 1208.28 L1085.13 1208.28 L1084.54 1208.28 L1083.96 1208.28 L1083.37 1208.28 L1082.78 1208.28 L1082.2 1208.28 L1081.61 1208.28 L1081.02 1208.28 L1080.44 1208.28 L1079.85 1208.28 L1079.26 1208.28 L1078.68 1208.28 L1078.09 1208.28 L1077.51 1208.28 L1076.92 1208.28 L1076.33 1208.28 L1075.75 1208.28 L1075.16 1208.28 L1074.57 1208.28 L1073.99 1208.28 L1073.4 1208.28 L1072.81 1208.28 L1072.23 1208.28 L1071.64 1208.28 L1071.06 1208.28 L1070.47 1208.28 L1069.88 1208.28 L1069.3 1208.28 L1068.71 1208.28 L1068.12 1208.28 L1067.54 1208.28 L1066.95 1208.28 L1066.36 1208.28 L1065.78 1208.28 L1065.19 1208.28 L1064.6 1208.28 L1064.02 1208.28 L1063.43 1208.28 L1062.85 1208.28 L1062.26 1208.28 L1061.67 1208.28 L1061.09 1208.28 L1060.5 1208.28 L1059.91 1208.28 L1059.33 1208.28 L1058.74 1208.28 L1058.15 1208.28 L1057.57 1208.28 L1056.98 1208.28 L1056.39 1208.28 L1055.81 1208.28 L1055.22 1208.28 L1054.64 1208.28 L1054.05 1208.28 L1053.46 1208.28 L1052.88 1208.28 L1052.29 1208.28 L1051.7 1208.28 L1051.12 1208.28 L1050.53 1208.28 L1049.94 1208.28 L1049.36 1208.28 L1048.77 1208.28 L1048.19 1208.28 L1047.6 1208.28 L1047.01 1208.28 L1046.43 1208.28 L1045.84 1208.28 L1045.25 1208.28 L1044.67 1208.28 L1044.08 1208.28 L1043.49 1208.28 L1042.91 1208.28 L1042.32 1208.28 L1041.73 1208.28 L1041.15 1208.28 L1040.56 1208.28 L1039.98 1208.28 L1039.39 1208.28 L1038.8 1208.28 L1038.22 1208.28 L1037.63 1208.28 L1037.04 1208.28 L1036.46 1208.28 L1035.87 1208.28 L1035.28 1208.28 L1034.7 1208.28 L1034.11 1208.28 L1033.52 1208.28 L1032.94 1208.28 L1032.35 1208.28 L1031.77 1208.28 L1031.18 1208.28 L1030.59 1208.28 L1030.01 1208.28 L1029.42 1208.28 L1028.83 1208.28 L1028.25 1208.28 L1027.66 1208.28 L1027.07 1208.28 L1026.49 1208.28 L1025.9 1208.28 L1025.32 1208.28 L1024.73 1208.28 L1024.14 1208.28 L1023.56 1208.28 L1022.97 1208.28 L1022.38 1208.28 L1021.8 1208.28 L1021.21 1208.28 L1020.62 1208.28 L1020.04 1208.28 L1019.45 1208.28 L1018.86 1208.28 L1018.28 1208.28 L1017.69 1208.28 L1017.11 1208.28 L1016.52 1208.28 L1015.93 1208.28 L1015.35 1208.28 L1014.76 1208.28 L1014.17 1208.28 L1013.59 1208.28 L1013 1208.28 L1012.41 1208.28 L1011.83 1208.28 L1011.24 1208.28 L1010.65 1208.28 L1010.07 1208.28 L1009.48 1208.28 L1008.9 1208.28 L1008.31 1208.28 L1007.72 1208.28 L1007.14 1208.28 L1006.55 1208.28 L1005.96 1208.28 L1005.38 1208.28 L1004.79 1208.28 L1004.2 1208.28 L1003.62 1208.28 L1003.03 1208.28 L1002.44 1208.28 L1001.86 1208.28 L1001.27 1208.28 L1000.69 1208.28 L1000.1 1208.28 L999.513 1208.28 L998.926 1208.28 L998.34 1208.28 L997.754 1208.28 L997.167 1208.28 L996.581 1208.28 L995.994 1208.28 L995.408 1208.28 L994.822 1208.28 L994.235 1208.28 L993.649 1208.28 L993.062 1208.28 L992.476 1208.28 L991.889 1208.28 L991.303 1208.28 L990.717 1208.28 L990.13 1208.28 L989.544 1208.28 L988.957 1208.28 L988.371 1208.28 L987.785 1208.28 L987.198 1208.28 L986.612 1208.28 L986.025 1208.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.35 986.612,1208.35 987.198,1208.35 987.785,1208.35 988.371,1208.35 988.957,1208.35 989.544,1208.35 990.13,1208.35 990.717,1208.35 991.303,1208.35 991.889,1208.35 992.476,1208.35 993.062,1208.35 993.649,1208.35 994.235,1208.35 994.822,1208.35 995.408,1208.35 995.994,1208.35 996.581,1208.35 997.167,1208.35 997.754,1208.35 998.34,1208.35 998.926,1208.35 999.513,1208.35 1000.1,1208.35 1000.69,1208.35 1001.27,1208.35 1001.86,1208.35 1002.44,1208.35 1003.03,1208.35 1003.62,1208.35 1004.2,1208.35 1004.79,1208.35 1005.38,1208.35 1005.96,1208.35 1006.55,1208.35 1007.14,1208.35 1007.72,1208.35 1008.31,1208.35 1008.9,1208.35 1009.48,1208.35 1010.07,1208.35 1010.65,1208.35 1011.24,1208.35 1011.83,1208.35 1012.41,1208.35 1013,1208.35 1013.59,1208.35 1014.17,1208.35 1014.76,1208.35 1015.35,1208.35 1015.93,1208.35 1016.52,1208.35 1017.11,1208.35 1017.69,1208.35 1018.28,1208.35 1018.86,1208.35 1019.45,1208.35 1020.04,1208.35 1020.62,1208.35 1021.21,1208.35 1021.8,1208.35 1022.38,1208.35 1022.97,1208.35 1023.56,1208.35 1024.14,1208.35 1024.73,1208.35 1025.32,1208.35 1025.9,1208.35 1026.49,1208.35 1027.07,1208.35 1027.66,1208.35 1028.25,1208.35 1028.83,1208.35 1029.42,1208.35 1030.01,1208.35 1030.59,1208.35 1031.18,1208.35 1031.77,1208.35 1032.35,1208.35 1032.94,1208.35 1033.52,1208.35 1034.11,1208.35 1034.7,1208.35 1035.28,1208.35 1035.87,1208.35 1036.46,1208.35 1037.04,1208.35 1037.63,1208.35 1038.22,1208.35 1038.8,1208.35 1039.39,1208.35 1039.98,1208.35 1040.56,1208.35 1041.15,1208.35 1041.73,1208.35 1042.32,1208.35 1042.91,1208.35 1043.49,1208.35 1044.08,1208.35 1044.67,1208.35 1045.25,1208.35 1045.84,1208.35 1046.43,1208.35 1047.01,1208.35 1047.6,1208.35 1048.19,1208.35 1048.77,1208.35 1049.36,1208.35 1049.94,1208.35 1050.53,1208.35 1051.12,1208.35 1051.7,1208.35 1052.29,1208.35 1052.88,1208.35 1053.46,1208.35 1054.05,1208.35 1054.64,1208.35 1055.22,1208.35 1055.81,1208.35 1056.39,1208.35 1056.98,1208.35 1057.57,1208.35 1058.15,1208.35 1058.74,1208.35 1059.33,1208.35 1059.91,1208.35 1060.5,1208.35 1061.09,1208.35 1061.67,1208.35 1062.26,1208.35 1062.85,1208.35 1063.43,1208.35 1064.02,1208.35 1064.6,1208.35 1065.19,1208.35 1065.78,1208.35 1066.36,1208.35 1066.95,1208.35 1067.54,1208.35 1068.12,1208.35 1068.71,1208.35 1069.3,1208.35 1069.88,1208.35 1070.47,1208.35 1071.06,1208.35 1071.64,1208.35 1072.23,1208.35 1072.81,1208.35 1073.4,1208.35 1073.99,1208.35 1074.57,1208.35 1075.16,1208.35 1075.75,1208.35 1076.33,1208.35 1076.92,1208.35 1077.51,1208.35 1078.09,1208.35 1078.68,1208.35 1079.26,1208.35 1079.85,1208.35 1080.44,1208.35 1081.02,1208.35 1081.61,1208.35 1082.2,1208.35 1082.78,1208.35 1083.37,1208.35 1083.96,1208.35 1084.54,1208.35 1085.13,1208.35 1085.72,1208.35 1086.3,1208.35 1086.89,1208.35 1087.47,1208.35 1088.06,1208.35 1088.65,1208.35 1089.23,1208.35 1089.82,1208.35 1090.41,1208.35 1090.99,1208.35 1091.58,1208.35 1092.17,1208.35 1092.75,1208.35 1093.34,1208.35 1093.93,1208.35 1094.51,1208.35 1095.1,1208.35 1095.68,1208.35 1096.27,1208.35 1096.86,1208.35 1097.44,1208.35 1098.03,1208.35 1098.62,1208.35 1099.2,1208.35 1099.79,1208.35 1100.38,1208.35 1100.96,1208.35 1101.55,1208.35 1102.14,1208.35 1102.72,1208.35 1103.31,1208.35 1103.89,1208.35 1104.48,1208.35 1105.07,1208.35 1105.65,1208.35 1106.24,1208.35 1106.83,1208.35 1107.41,1208.35 1108,1208.35 1108.59,1208.35 1109.17,1208.35 1109.76,1208.35 1110.34,1208.35 1110.93,1208.35 1111.52,1208.35 1112.1,1208.35 1112.69,1208.35 1113.28,1208.35 1113.86,1208.35 1114.45,1208.35 1115.04,1208.35 1115.62,1208.35 1116.21,1208.35 1116.8,1208.35 1117.38,1208.35 1117.97,1208.35 1118.55,1208.35 1119.14,1208.35 1119.73,1208.35 1120.31,1208.35 1120.9,1208.35 1121.49,1208.35 1122.07,1208.35 1122.66,1208.35 1123.25,1208.35 1123.83,1208.35 1124.42,1208.35 1125.01,1208.35 1125.59,1208.35 1126.18,1208.35 1126.76,1208.35 1127.35,1208.35 1127.94,1208.35 1128.52,1208.35 1129.11,1208.35 1129.7,1208.35 1130.28,1208.35 1130.87,1208.35 1131.46,1208.35 1132.04,1208.35 1132.63,1208.35 1133.21,1208.35 1133.8,1208.35 1134.39,1208.35 1134.97,1208.35 1135.56,1208.35 1136.15,1208.35 1136.73,1208.35 1137.32,1208.35 1137.91,1208.35 1138.49,1208.35 1139.08,1208.35 1139.67,1208.35 1140.25,1208.35 1140.84,1208.35 1141.42,1208.35 1142.01,1208.35 1142.6,1208.35 1143.18,1208.35 1143.77,1208.35 1144.36,1208.35 1144.94,1208.35 1145.53,1208.35 1146.12,1208.35 1146.7,1208.35 1147.29,1208.35 1147.88,1208.35 1148.46,1208.35 1149.05,1208.35 1149.63,1208.35 1150.22,1208.35 1150.81,1208.35 1151.39,1208.35 1151.98,1208.35 1152.57,1208.35 1153.15,1208.35 1153.74,1208.35 1154.33,1208.35 1154.91,1208.35 1155.5,1208.35 1156.09,1208.35 1156.67,1208.35 1157.26,1208.35 1157.84,1208.35 1158.43,1208.35 1159.02,1208.35 1159.6,1208.35 1160.19,1208.35 1160.78,1208.35 1161.36,1208.35 1161.95,1208.35 1162.54,1208.35 1163.12,1208.35 1163.71,1208.35 1164.29,1208.35 1164.88,1208.35 1165.47,1208.35 1166.05,1208.35 1166.64,1208.35 1167.23,1208.35 1167.81,1208.35 1168.4,1208.35 1168.99,1208.35 1169.57,1208.35 1170.16,1208.35 1170.75,1208.35 1171.33,1208.35 1171.92,1208.35 1172.5,1208.35 1173.09,1208.35 1173.68,1208.35 1174.26,1208.35 1174.85,1208.35 1175.44,1208.35 1176.02,1208.35 1176.61,1208.35 1177.2,1208.35 1177.78,1208.35 1178.37,1208.35 1178.96,1208.35 1179.54,1208.35 1180.13,1208.35 1180.71,1208.35 1181.3,1208.35 1181.89,1208.35 1182.47,1208.35 1183.06,1208.35 1183.65,1208.35 1184.23,1208.35 1184.82,1208.35 1185.41,1208.35 1185.99,1208.35 1186.58,1208.35 1187.16,1208.35 1187.75,1208.35 1188.34,1208.35 1188.92,1208.35 1189.51,1208.35 1190.1,1208.35 1190.68,1208.35 1191.27,1208.35 1191.86,1208.35 1192.44,1208.35 1193.03,1208.35 1193.62,1208.35 1194.2,1208.35 1194.79,1208.35 1195.37,1208.35 1195.96,1208.35 1196.55,1208.35 1197.13,1208.35 1197.72,1208.35 1198.31,1208.35 1198.89,1208.35 1199.48,1208.35 1200.07,1208.35 1200.65,1208.35 1201.24,1208.35 1201.83,1208.35 1202.41,1208.35 1203,1208.35 1203.58,1208.35 1204.17,1208.35 1204.76,1208.35 1205.34,1208.35 1205.93,1208.35 1206.52,1208.35 1207.1,1208.35 1207.69,1208.35 1208.28,1208.35 1208.86,1208.35 1209.45,1208.35 1210.03,1208.35 1210.62,1208.35 1211.21,1208.35 1211.79,1208.35 1212.38,1208.35 1212.97,1208.35 1213.55,1208.35 1214.14,1208.35 1214.73,1208.35 1215.31,1208.35 1215.9,1208.35 1216.49,1208.35 1217.07,1208.35 1217.66,1208.35 1218.24,1208.35 1218.83,1208.35 1219.42,1208.35 1220,1208.35 1220.59,1208.35 1221.18,1208.35 1221.76,1208.35 1222.35,1208.35 1222.94,1208.35 1223.52,1208.35 1224.11,1208.35 1224.7,1208.35 1225.28,1208.35 1225.87,1208.35 1226.45,1208.35 1227.04,1208.35 1227.63,1208.35 1228.21,1208.35 1228.8,1208.35 1229.39,1208.35 1229.97,1208.35 1230.56,1208.35 1231.15,1208.35 1231.73,1208.35 1232.32,1208.35 1232.91,1208.35 1233.49,1208.35 1234.08,1208.35 1234.66,1208.35 1235.25,1208.35 1235.84,1208.35 1236.42,1208.35 1237.01,1208.35 1237.6,1208.35 1238.18,1208.35 1238.77,1208.35 1239.36,1208.35 1239.94,1208.35 1240.53,1208.35 1241.11,1208.35 1241.7,1208.35 1242.29,1208.35 1242.87,1208.35 1243.46,1208.35 1244.05,1208.35 1244.63,1208.35 1245.22,1208.35 1245.81,1208.35 1246.39,1208.35 1246.98,1208.35 1247.57,1208.35 1248.15,1208.35 1248.74,1208.35 1249.32,1208.35 1249.91,1208.35 1250.5,1208.35 1251.08,1208.35 1251.67,1208.35 1252.26,1208.35 1252.84,1208.35 1253.43,1208.35 1254.02,1208.35 1254.6,1208.35 1255.19,1208.35 1255.78,1208.35 1256.36,1208.35 1256.95,1208.35 1257.53,1208.35 1258.12,1208.35 1258.71,1208.35 1259.29,1208.35 1259.88,1208.35 1260.47,1208.35 1261.05,1208.35 1261.64,1208.35 1262.23,1208.35 1262.81,1208.35 1263.4,1208.35 1263.98,1208.35 1264.57,1208.35 1265.16,1208.35 1265.74,1208.35 1266.33,1208.35 1266.92,1208.35 1267.5,1208.35 1268.09,1208.35 1268.68,1208.35 1269.26,1208.35 1269.85,1208.35 1270.44,1208.35 1271.02,1208.35 1271.61,1208.35 1272.19,1208.35 1272.78,1208.35 1273.37,1208.35 1273.95,1208.35 1274.54,1208.35 1275.13,1208.35 1275.71,1208.35 1276.3,1208.35 1276.89,1208.35 1277.47,1208.35 1278.06,1208.35 1278.65,1208.35 1279.23,1208.35 1279.82,1208.35 1280.4,1208.35 1280.99,1208.35 1281.58,1208.35 1282.16,1208.35 1282.75,1208.35 1283.34,1208.35 1283.92,1208.35 1284.51,1208.35 1285.1,1208.35 1285.68,1208.35 1286.27,1208.35 1286.86,1208.35 1287.44,1208.35 1288.03,1208.35 1288.61,1208.35 1289.2,1208.35 1289.79,1208.35 1290.37,1208.35 1290.96,1208.35 1291.55,1208.35 1292.13,1208.35 1292.72,1208.35 1293.31,1208.35 1293.89,1208.35 1294.48,1208.35 1295.06,1208.35 1295.65,1208.35 1296.24,1208.35 1296.82,1208.35 1297.41,1208.35 1298,1208.35 1298.58,1208.35 1299.17,1208.35 1299.76,1208.35 1300.34,1208.35 1300.93,1208.35 1301.52,1208.35 1302.1,1208.35 1302.69,1208.35 1303.27,1208.35 1303.86,1208.35 1304.45,1208.35 1305.03,1208.35 1305.62,1208.35 1306.21,1208.35 1306.79,1208.35 1307.38,1208.35 1307.97,1208.35 1308.55,1208.35 1309.14,1208.35 1309.73,1208.35 1310.31,1208.35 1310.9,1208.35 1311.48,1208.35 1312.07,1208.35 1312.66,1208.35 1313.24,1208.35 1313.83,1208.35 1314.42,1208.35 1315,1208.35 1315.59,1208.35 1316.18,1208.35 1316.76,1208.35 1317.35,1208.35 1317.93,1208.35 1318.52,1208.35 1319.11,1208.35 1319.69,1208.35 1320.28,1208.35 1320.87,1208.35 1321.45,1208.35 1322.04,1208.35 1322.63,1208.35 1323.21,1208.35 1323.8,1208.35 1324.39,1208.35 1324.97,1208.35 1325.56,1208.35 1326.14,1208.35 1326.73,1208.35 1327.32,1208.35 1327.9,1208.35 1328.49,1208.35 1329.08,1208.35 1329.66,1208.35 1330.25,1208.35 1330.84,1208.35 1331.42,1208.35 1332.01,1208.35 1332.6,1208.35 1333.18,1208.35 1333.77,1208.35 1334.35,1208.35 1334.94,1208.35 1335.53,1208.35 1336.11,1208.35 1336.7,1208.35 1337.29,1208.35 1337.87,1208.35 1338.46,1208.35 1339.05,1208.35 1339.63,1208.35 1340.22,1208.35 1340.8,1208.35 1341.39,1208.35 1341.98,1208.35 1342.56,1208.35 1343.15,1208.35 1343.74,1208.35 1344.32,1208.35 1344.91,1208.35 1345.5,1208.35 1346.08,1208.35 1346.67,1208.35 1347.26,1208.35 1347.84,1208.35 1348.43,1208.35 1349.01,1208.35 1349.6,1208.35 1350.19,1208.35 1350.77,1208.35 1351.36,1208.35 1351.95,1208.35 1352.53,1208.35 1353.12,1208.35 1353.71,1208.35 1354.29,1208.35 1354.88,1208.35 1355.47,1208.35 1356.05,1208.35 1356.64,1208.35 1357.22,1208.35 1357.81,1208.35 1358.4,1208.35 1358.98,1208.35 1359.57,1208.35 1360.16,1208.35 1360.74,1208.35 1361.33,1208.35 1361.92,1208.35 1362.5,1208.35 1363.09,1208.35 1363.68,1208.35 1364.26,1208.35 1364.85,1208.35 1365.43,1208.35 1366.02,1208.35 1366.61,1208.35 1367.19,1208.35 1367.78,1208.35 1368.37,1208.35 1368.95,1208.35 1369.54,1208.35 1370.13,1208.35 1370.71,1208.35 1371.3,1208.35 1371.88,1208.35 1372.47,1208.35 1373.06,1208.35 1373.64,1208.35 1374.23,1208.35 1374.82,1208.35 1375.4,1208.35 1375.99,1208.35 1376.58,1208.35 1377.16,1208.35 1377.75,1208.35 1378.34,1208.35 1378.92,1208.35 1379.51,1208.35 1380.09,1208.35 1380.68,1208.35 1381.27,1208.35 1381.85,1208.35 1382.44,1208.35 1383.03,1208.35 1383.61,1208.35 1384.2,1208.35 1384.79,1208.35 1385.37,1208.35 1385.96,1208.35 1386.55,1208.35 1387.13,1208.35 1387.72,1208.35 1388.3,1208.35 1388.89,1208.35 1389.48,1208.35 1390.06,1208.35 1390.65,1208.35 1391.24,1208.35 1391.82,1208.35 1392.41,1208.35 1393,1208.35 1393.58,1208.35 1394.17,1208.35 1394.75,1208.35 1395.34,1208.35 1395.93,1208.35 1396.51,1208.35 1397.1,1208.35 1397.69,1208.35 1398.27,1208.35 1398.86,1208.35 1399.45,1208.35 1400.03,1208.35 1400.62,1208.35 1401.21,1208.35 1401.79,1208.35 1402.38,1208.35 1402.96,1208.35 1403.55,1208.35 1404.14,1208.35 1404.72,1208.35 1405.31,1208.35 1405.9,1208.35 1406.48,1208.35 1407.07,1208.35 1407.66,1208.35 1408.24,1208.35 1408.83,1208.35 1409.42,1208.35 1410,1208.35 1410.59,1208.35 1411.17,1208.35 1411.76,1208.35 1412.35,1208.35 1412.93,1208.35 1413.52,1208.35 1414.11,1208.35 1414.69,1208.35 1415.28,1208.35 1415.87,1208.35 1416.45,1208.35 1417.04,1208.35 1417.63,1208.35 1418.21,1208.35 1418.8,1208.35 1419.38,1208.35 1419.97,1208.35 1420.56,1208.35 1421.14,1208.35 1421.73,1208.35 1422.32,1208.35 1422.9,1208.35 1423.49,1208.35 1424.08,1208.35 1424.66,1208.35 1425.25,1208.35 1425.83,1208.35 1426.42,1208.35 1427.01,1208.35 1427.59,1208.35 1428.18,1208.35 1428.77,1208.35 1429.35,1208.35 1429.94,1208.35 1430.53,1208.35 1431.11,1208.35 1431.7,1208.35 1432.29,1208.35 1432.87,1208.35 1433.46,1208.35 1434.04,1208.35 1434.63,1208.35 1435.22,1208.35 1435.8,1208.35 1436.39,1208.35 1436.98,1208.35 1437.56,1208.35 1438.15,1208.35 1438.74,1208.35 1439.32,1208.35 1439.91,1208.35 1440.5,1208.35 1441.08,1208.35 1441.67,1208.35 1442.25,1208.35 1442.84,1208.35 1443.43,1208.35 1444.01,1208.35 1444.6,1208.35 1445.19,1208.35 1445.77,1208.35 1446.36,1208.35 1446.95,1208.35 1447.53,1208.35 1448.12,1208.35 1448.7,1208.35 1449.29,1208.35 1449.88,1208.35 1450.46,1208.35 1451.05,1208.35 1451.64,1208.35 1452.22,1208.35 1452.81,1208.35 1453.4,1208.35 1453.98,1208.35 1454.57,1208.35 1455.16,1208.35 1455.74,1208.35 1456.33,1208.35 1456.91,1208.35 1457.5,1208.35 1458.09,1208.35 1458.67,1208.35 1459.26,1208.35 1459.85,1208.35 1460.43,1208.35 1461.02,1208.35 1461.61,1208.35 1462.19,1208.35 1462.78,1208.35 1463.37,1208.35 1463.95,1208.35 1464.54,1208.35 1465.12,1208.35 1465.71,1208.35 1466.3,1208.35 1466.88,1208.35 1467.47,1208.35 1468.06,1208.35 1468.64,1208.35 1469.23,1208.35 1469.82,1208.35 1470.4,1208.35 1470.99,1208.35 1471.57,1208.35 1472.16,1208.35 1472.75,1208.35 1473.33,1208.35 1473.92,1208.35 1474.51,1208.35 1475.09,1208.35 1475.68,1208.35 1476.27,1208.35 1476.85,1208.35 1477.44,1208.35 1478.03,1208.35 1478.61,1208.35 1479.2,1208.35 1479.78,1208.35 1480.37,1208.35 1480.96,1208.35 1481.54,1208.35 1482.13,1208.35 1482.72,1208.35 1483.3,1208.35 1483.89,1208.35 1484.48,1208.35 1485.06,1208.35 1485.65,1208.35 1486.24,1208.35 1486.82,1208.35 1487.41,1208.35 1487.99,1208.35 1488.58,1208.35 1489.17,1208.35 1489.75,1208.35 1490.34,1208.35 1490.93,1208.35 1491.51,1208.35 1492.1,1208.35 1492.69,1208.35 1493.27,1208.35 1493.86,1208.35 1494.45,1208.35 1495.03,1208.35 1495.62,1208.35 1496.2,1208.35 1496.79,1208.35 1497.38,1208.35 1497.96,1208.35 1498.55,1208.35 1499.14,1208.35 1499.72,1208.35 1500.31,1208.35 1500.9,1208.35 1501.48,1208.35 1502.07,1208.35 1502.65,1208.35 1503.24,1208.35 1503.83,1208.35 1504.41,1208.35 1505,1208.35 1505.59,1208.35 1506.17,1208.35 1506.76,1208.35 1507.35,1208.35 1507.93,1208.35 1508.52,1208.35 1509.11,1208.35 1509.69,1208.35 1510.28,1208.35 1510.86,1208.35 1511.45,1208.35 1512.04,1208.35 1512.62,1208.35 1513.21,1208.35 1513.8,1208.35 1514.38,1208.35 1514.97,1208.35 1515.56,1208.35 1516.14,1208.35 1516.73,1208.35 1517.32,1208.35 1517.9,1208.35 1518.49,1208.35 1519.07,1208.35 1519.66,1208.35 1520.25,1208.35 1520.83,1208.35 1521.42,1208.35 1522.01,1208.35 1522.59,1208.35 1523.18,1208.35 1523.77,1208.35 1524.35,1208.35 1524.94,1208.35 1525.52,1208.35 1526.11,1208.35 1526.7,1208.35 1527.28,1208.35 1527.87,1208.35 1528.46,1208.35 1529.04,1208.35 1529.63,1208.35 1530.22,1208.35 1530.8,1208.35 1531.39,1208.35 1531.98,1208.35 1532.56,1208.35 1533.15,1208.35 1533.73,1208.35 1534.32,1208.35 1534.91,1208.35 1535.49,1208.35 1536.08,1208.35 1536.67,1208.35 1537.25,1208.35 1537.84,1208.35 1538.43,1208.35 1539.01,1208.35 1539.6,1208.35 1540.19,1208.35 1540.77,1208.35 1541.36,1208.35 1541.94,1208.35 1542.53,1208.35 1543.12,1208.35 1543.7,1208.35 1544.29,1208.35 1544.88,1208.35 1545.46,1208.35 1546.05,1208.35 1546.64,1208.35 1547.22,1208.35 1547.81,1208.35 1548.4,1208.35 1548.98,1208.35 1549.57,1208.35 1550.15,1208.35 1550.74,1208.35 1551.33,1208.35 1551.91,1208.35 1552.5,1208.35 1553.09,1208.35 1553.67,1208.35 1554.26,1208.35 1554.85,1208.35 1555.43,1208.35 1556.02,1208.35 1556.6,1208.35 1557.19,1208.35 1557.78,1208.35 1558.36,1208.35 1558.95,1208.35 1559.54,1208.35 1560.12,1208.35 1560.71,1208.35 1561.3,1208.35 1561.88,1208.35 1562.47,1208.35 1563.06,1208.35 1563.64,1208.35 1564.23,1208.35 1564.81,1208.35 1565.4,1208.35 1565.99,1208.35 1566.57,1208.35 1567.16,1208.35 1567.75,1208.35 1568.33,1208.35 1568.92,1208.35 1569.51,1208.35 1570.09,1208.35 1570.68,1208.35 1571.27,1208.35 1571.85,1208.35 1572.44,1208.35 1573.02,1208.35 1573.61,1208.35 1574.2,1208.35 1574.78,1208.35 1575.37,1208.35 1575.96,1208.35 1576.54,1208.35 1577.13,1208.35 1577.72,1208.35 1578.3,1208.35 1578.89,1208.35 1579.47,1208.35 1580.06,1208.35 1580.65,1208.35 1581.23,1208.35 1581.82,1208.35 1582.41,1208.35 1582.99,1208.35 1583.58,1208.35 1584.17,1208.35 1584.75,1208.35 1585.34,1208.35 1585.93,1208.35 1586.51,1208.35 1587.1,1208.35 1587.68,1208.35 1588.27,1208.35 1588.86,1208.35 1589.44,1208.35 1590.03,1208.35 1590.62,1208.35 1591.2,1208.35 1591.79,1208.35 1592.38,1208.35 1592.96,1208.35 1593.55,1208.35 1594.14,1208.35 1594.72,1208.35 1595.31,1208.35 1595.89,1208.35 1596.48,1208.35 1597.07,1208.35 1597.65,1208.35 1598.24,1208.35 1598.83,1208.35 1599.41,1208.35 1600,1208.35 1600.59,1208.35 1601.17,1208.35 1601.76,1208.35 1602.34,1208.35 1602.93,1208.35 1603.52,1208.35 1604.1,1208.35 1604.69,1208.35 1605.28,1208.35 1605.86,1208.35 1606.45,1208.35 1607.04,1208.35 1607.62,1208.35 1608.21,1208.35 1608.8,1208.35 1609.38,1208.35 1609.97,1208.35 1610.55,1208.35 1611.14,1208.35 1611.73,1208.35 1612.31,1208.35 1612.9,1208.35 1613.49,1208.35 1614.07,1208.35 1614.66,1208.35 1615.25,1208.35 1615.83,1208.35 1616.42,1208.35 1617.01,1208.35 1617.59,1208.35 1618.18,1208.35 1618.76,1208.35 1619.35,1208.35 1619.94,1208.35 1620.52,1208.35 1621.11,1208.35 1621.7,1208.35 1622.28,1208.35 1622.87,1208.35 1623.46,1208.35 1624.04,1208.35 1624.63,1208.35 1625.22,1208.35 1625.8,1208.35 1626.39,1208.35 1626.97,1208.35 1627.56,1208.35 1628.15,1208.35 1628.73,1208.35 1629.32,1208.35 1629.91,1208.35 1630.49,1208.35 1631.08,1208.35 1631.67,1208.35 1632.25,1208.35 1632.84,1208.35 1633.42,1208.35 1634.01,1208.35 1634.6,1208.35 1635.18,1208.35 1635.77,1208.35 1636.36,1208.35 1636.94,1208.35 1637.53,1208.35 1638.12,1208.35 1638.7,1208.35 1639.29,1208.35 1639.88,1208.35 1640.46,1208.35 1641.05,1208.35 1641.63,1208.35 1642.22,1208.35 1642.81,1208.35 1643.39,1208.35 1643.98,1208.35 1644.57,1208.35 1645.15,1208.35 1645.74,1208.35 1646.33,1208.35 1646.91,1208.35 1647.5,1208.35 1648.09,1208.35 1648.67,1208.35 1649.26,1208.35 1649.84,1208.35 1650.43,1208.35 1651.02,1208.35 1651.6,1208.35 1652.19,1208.35 1652.78,1208.35 1653.36,1208.35 1653.95,1208.35 1654.54,1208.35 1655.12,1208.35 1655.71,1208.35 1656.29,1208.35 1656.88,1208.35 1657.47,1208.35 1658.05,1208.35 1658.64,1208.35 1659.23,1208.35 1659.81,1208.35 1660.4,1208.35 1660.99,1208.35 1661.57,1208.35 1662.16,1208.35 1662.75,1208.35 1663.33,1208.35 1663.92,1208.35 1664.5,1208.35 1665.09,1208.35 1665.68,1208.35 1666.26,1208.35 1666.85,1208.35 1667.44,1208.35 1668.02,1208.35 1668.61,1208.35 1669.2,1208.35 1669.78,1208.35 1670.37,1208.35 1670.96,1208.35 1671.54,1208.35 1672.13,1208.35 1672.71,1208.35 1673.3,1208.35 1673.89,1208.35 1674.47,1208.35 1675.06,1208.35 1675.65,1208.35 1676.23,1208.35 1676.82,1208.35 1677.41,1208.35 1677.99,1208.35 1678.58,1208.35 1679.17,1208.35 1679.75,1208.35 1680.34,1208.35 1680.92,1208.35 1681.51,1208.35 1682.1,1208.35 1682.68,1208.35 1683.27,1208.35 1683.86,1208.35 1684.44,1208.35 1685.03,1208.35 1685.62,1208.35 1686.2,1208.35 1686.79,1208.35 1687.37,1208.35 1687.96,1208.35 1688.55,1208.35 1689.13,1208.35 1689.72,1208.35 1690.31,1208.35 1690.89,1208.35 1691.48,1208.35 1692.07,1208.35 1692.65,1208.35 1693.24,1208.35 1693.83,1208.35 1694.41,1208.35 1695,1208.35 1695.58,1208.35 1696.17,1208.35 1696.76,1208.35 1697.34,1208.35 1697.93,1208.35 1698.52,1208.35 1699.1,1208.35 1699.69,1208.35 1700.28,1208.35 1700.86,1208.35 1701.45,1208.35 1702.04,1208.35 1702.62,1208.35 1703.21,1208.35 1703.79,1208.35 1704.38,1208.35 1704.97,1208.35 1705.55,1208.35 1706.14,1208.35 1706.73,1208.35 1707.31,1208.35 1707.9,1208.35 1708.49,1208.35 1709.07,1208.35 1709.66,1208.35 1710.24,1208.35 1710.83,1208.35 1711.42,1208.35 1712,1208.35 1712.59,1208.35 1713.18,1208.35 1713.76,1208.35 1714.35,1208.35 1714.94,1208.35 1715.52,1208.35 1716.11,1208.35 1716.7,1208.35 1717.28,1208.35 1717.87,1208.35 1718.45,1208.35 1719.04,1208.35 1719.63,1208.35 1720.21,1208.35 1720.8,1208.35 1721.39,1208.35 1721.97,1208.35 1722.56,1208.35 1723.15,1208.35 1723.73,1208.35 1724.32,1208.35 1724.91,1208.35 1725.49,1208.35 1726.08,1208.35 1726.66,1208.35 1727.25,1208.35 1727.84,1208.35 1728.42,1208.35 1729.01,1208.35 1729.6,1208.35 1730.18,1208.35 1730.77,1208.35 1731.36,1208.35 1731.94,1208.35 1732.53,1208.35 1733.11,1208.35 1733.7,1208.35 1734.29,1208.35 1734.87,1208.35 1735.46,1208.35 1736.05,1208.35 1736.63,1208.35 1737.22,1208.35 1737.81,1208.35 1738.39,1208.35 1738.98,1208.35 1739.57,1208.35 1740.15,1208.35 1740.74,1208.35 1741.32,1208.35 1741.91,1208.35 1742.5,1208.35 1743.08,1208.35 1743.67,1208.35 1744.26,1208.35 1744.84,1208.35 1745.43,1208.35 1746.02,1208.35 1746.6,1208.35 1747.19,1208.35 1747.78,1208.35 1748.36,1208.35 1748.95,1208.35 1749.53,1208.35 1750.12,1208.35 1750.71,1208.35 1751.29,1208.35 1751.88,1208.35 1752.47,1208.35 1753.05,1208.35 1753.64,1208.35 1754.23,1208.35 1754.81,1208.35 1755.4,1208.35 1755.99,1208.35 1756.57,1208.35 1757.16,1208.35 1757.74,1208.35 1758.33,1208.35 1758.92,1208.35 1759.5,1208.35 1760.09,1208.35 1760.68,1208.35 1761.26,1208.35 1761.85,1208.35 1762.44,1208.35 1763.02,1208.35 1763.61,1208.35 1764.19,1208.35 1764.78,1208.35 1765.37,1208.35 1765.95,1208.35 1766.54,1208.35 1767.13,1208.35 1767.71,1208.35 1768.3,1208.35 1768.89,1208.35 1769.47,1208.35 1770.06,1208.35 1770.65,1208.35 1771.23,1208.35 1771.82,1208.35 1772.4,1208.35 1772.99,1208.35 1773.58,1208.35 1774.16,1208.35 1774.75,1208.35 1775.34,1208.35 1775.92,1208.35 1776.51,1208.35 1777.1,1208.35 1777.68,1208.35 1778.27,1208.35 1778.86,1208.35 1779.44,1208.35 1780.03,1208.35 1780.61,1208.35 1781.2,1208.35 1781.79,1208.35 1782.37,1208.35 1782.96,1208.35 1783.55,1208.35 1784.13,1208.35 1784.72,1208.35 1785.31,1208.35 1785.89,1208.35 1786.48,1208.35 1787.06,1208.35 1787.65,1208.35 1788.24,1208.35 1788.82,1208.35 1789.41,1208.35 1790,1208.35 1790.58,1208.35 1791.17,1208.35 1791.76,1208.35 1792.34,1208.35 1792.93,1208.35 1793.52,1208.35 1794.1,1208.35 1794.69,1208.35 1795.27,1208.35 1795.86,1208.35 1796.45,1208.35 1797.03,1208.35 1797.62,1208.35 1798.21,1208.35 1798.79,1208.35 1799.38,1208.35 1799.97,1208.35 1800.55,1208.35 1801.14,1208.35 1801.73,1208.35 1802.31,1208.35 1802.9,1208.35 1803.48,1208.35 1804.07,1208.35 1804.66,1208.35 1805.24,1208.35 1805.83,1208.35 1806.42,1208.35 1807,1208.35 1807.59,1208.35 1808.18,1208.35 1808.76,1208.35 1809.35,1208.35 1809.94,1208.35 1810.52,1208.35 1811.11,1208.35 1811.69,1208.35 1812.28,1208.35 1812.87,1208.35 1813.45,1208.35 1814.04,1208.35 1814.63,1208.35 1815.21,1208.35 1815.8,1208.35 1816.39,1208.35 1816.97,1208.35 1817.56,1208.35 1818.14,1208.35 1818.73,1208.35 1819.32,1208.35 1819.9,1208.35 1820.49,1208.35 1821.08,1208.35 1821.66,1208.35 1822.25,1208.35 1822.84,1208.35 1823.42,1208.35 1824.01,1208.35 1824.6,1208.35 1825.18,1208.35 1825.77,1208.35 1826.35,1208.35 1826.94,1208.35 1827.53,1208.35 1828.11,1208.35 1828.7,1208.35 1829.29,1208.35 1829.87,1208.35 1830.46,1208.35 1831.05,1208.35 1831.63,1208.35 1832.22,1208.35 1832.81,1208.35 1833.39,1208.35 1833.98,1208.35 1834.56,1208.35 1835.15,1208.35 1835.74,1208.35 1836.32,1208.35 1836.91,1208.35 1837.5,1208.35 1838.08,1208.35 1838.67,1208.35 1839.26,1208.35 1839.84,1208.35 1840.43,1208.35 1841.01,1208.35 1841.6,1208.35 1842.19,1208.35 1842.77,1208.35 1843.36,1208.35 1843.95,1208.35 1844.53,1208.35 1845.12,1208.35 1845.71,1208.35 1846.29,1208.35 1846.88,1208.35 1847.47,1208.35 1848.05,1208.35 1848.64,1208.35 1849.22,1208.35 1849.81,1208.35 1850.4,1208.35 1850.98,1208.35 1851.57,1208.35 1852.16,1208.35 1852.74,1208.35 1853.33,1208.35 1853.92,1208.35 1854.5,1208.35 1855.09,1208.35 1855.68,1208.35 1856.26,1208.35 1856.85,1208.35 1857.43,1208.35 1858.02,1208.35 1858.61,1208.35 1859.19,1208.35 1859.78,1208.35 1860.37,1208.35 1860.95,1208.35 1861.54,1208.35 1862.13,1208.35 1862.71,1208.35 1863.3,1208.35 1863.88,1208.35 1864.47,1208.35 1865.06,1208.35 1865.64,1208.35 1866.23,1208.35 1866.82,1208.35 1867.4,1208.35 1867.99,1208.35 1868.58,1208.35 1869.16,1208.35 1869.75,1208.35 1870.34,1208.35 1870.92,1208.35 1871.51,1208.35 1872.09,1208.35 1872.68,1208.35 1873.27,1208.35 1873.85,1208.35 1874.44,1208.35 1875.03,1208.35 1875.61,1208.35 1876.2,1208.35 1876.79,1208.35 1877.37,1208.35 1877.96,1208.35 1878.55,1208.35 1879.13,1208.35 1879.72,1208.35 1880.3,1208.35 1880.89,1208.35 1881.48,1208.35 1882.06,1208.35 1882.65,1208.35 1883.24,1208.35 1883.82,1208.35 1884.41,1208.35 1885,1208.35 1885.58,1208.35 1886.17,1208.35 1886.76,1208.35 1887.34,1208.35 1887.93,1208.35 1888.51,1208.35 1889.1,1208.35 1889.69,1208.35 1890.27,1208.35 1890.86,1208.35 1891.45,1208.35 1892.03,1208.35 1892.62,1208.35 1893.21,1208.35 1893.79,1208.35 1894.38,1208.35 1894.96,1208.35 1895.55,1208.35 1896.14,1208.35 1896.72,1208.35 1897.31,1208.35 1897.9,1208.35 1898.48,1208.35 1899.07,1208.35 1899.66,1208.35 1900.24,1208.35 1900.83,1208.35 1901.42,1208.35 1902,1208.35 1902.59,1208.35 1903.17,1208.35 1903.76,1208.35 1904.35,1208.35 1904.93,1208.35 1905.52,1208.35 1906.11,1208.35 1906.69,1208.35 1907.28,1208.35 1907.87,1208.35 1908.45,1208.35 1909.04,1208.35 1909.63,1208.35 1910.21,1208.35 1910.8,1208.35 1911.38,1208.35 1911.97,1208.35 1912.56,1208.35 1913.14,1208.35 1913.73,1208.35 1914.32,1208.35 1914.9,1208.35 1915.49,1208.35 1916.08,1208.35 1916.66,1208.35 1917.25,1208.35 1917.83,1208.35 1918.42,1208.35 1919.01,1208.35 1919.59,1208.35 1920.18,1208.35 1920.77,1208.35 1921.35,1208.35 1921.94,1208.35 1922.53,1208.35 1923.11,1208.35 1923.7,1208.35 1924.29,1208.35 1924.87,1208.35 1925.46,1208.35 1926.04,1208.35 1926.63,1208.35 1927.22,1208.35 1927.8,1208.35 1928.39,1208.35 1928.98,1208.35 1929.56,1208.35 1930.15,1208.35 1930.74,1208.35 1931.32,1208.35 1931.91,1208.35 1932.5,1208.35 1933.08,1208.35 1933.67,1208.35 1934.25,1208.35 1934.84,1208.35 1935.43,1208.35 1936.01,1208.35 1936.6,1208.35 1937.19,1208.35 1937.77,1208.35 1938.36,1208.35 1938.95,1208.35 1939.53,1208.35 1940.12,1208.35 1940.71,1208.35 1941.29,1208.35 1941.88,1208.35 1942.46,1208.35 1943.05,1208.35 1943.64,1208.35 1944.22,1208.35 1944.81,1208.35 1945.4,1208.35 1945.98,1208.35 1946.57,1208.35 1947.16,1208.35 1947.74,1208.35 1948.33,1208.35 1948.91,1208.35 1949.5,1208.35 1950.09,1208.35 1950.67,1208.35 1951.26,1208.35 1951.85,1208.35 1952.43,1208.35 1953.02,1208.35 1953.61,1208.35 1954.19,1208.35 1954.78,1208.35 1955.37,1208.35 1955.95,1208.35 1956.54,1208.35 1957.12,1208.35 1957.71,1208.35 1958.3,1208.35 1958.88,1208.35 1959.47,1208.35 1960.06,1208.35 1960.64,1208.35 1961.23,1208.35 1961.82,1208.35 1962.4,1208.35 1962.99,1208.35 1963.58,1208.35 1964.16,1208.35 1964.75,1208.35 1965.33,1208.35 1965.92,1208.35 1966.51,1208.35 1967.09,1208.35 1967.68,1208.35 1968.27,1208.35 1968.85,1208.35 1969.44,1208.35 1970.03,1208.35 1970.61,1208.35 1971.2,1208.35 1971.78,1208.35 1972.37,1208.35 1972.96,1208.35 1973.54,1208.35 1974.13,1208.35 1974.72,1208.35 1975.3,1208.35 1975.89,1208.35 1976.48,1208.35 1977.06,1208.35 1977.65,1208.35 1978.24,1208.35 1978.82,1208.35 1979.41,1208.35 1979.99,1208.35 1980.58,1208.35 1981.17,1208.35 1981.75,1208.35 1982.34,1208.35 1982.93,1208.35 1983.51,1208.35 1984.1,1208.35 1984.69,1208.35 1985.27,1208.35 1985.86,1208.35 1986.45,1208.35 1987.03,1208.35 1987.62,1208.35 1988.2,1208.35 1988.79,1208.35 1989.38,1208.35 1989.96,1208.35 1990.55,1208.35 1991.14,1208.35 1991.72,1208.35 1992.31,1208.35 1992.9,1208.35 1993.48,1208.35 1994.07,1208.35 1994.65,1208.35 1995.24,1208.35 1995.83,1208.35 1996.41,1208.35 1997,1208.35 1997.59,1208.35 1998.17,1208.35 1998.76,1208.35 1999.35,1208.35 1999.93,1208.35 2000.52,1208.35 2001.11,1208.35 2001.69,1208.35 2002.28,1208.35 2002.86,1208.35 2003.45,1208.35 2004.04,1208.35 2004.62,1208.35 2005.21,1208.35 2005.8,1208.35 2006.38,1208.35 2006.97,1208.35 2007.56,1208.35 2008.14,1208.35 2008.73,1208.35 2009.32,1208.35 2009.9,1208.35 2010.49,1208.35 2011.07,1208.35 2011.66,1208.35 2012.25,1208.35 2012.83,1208.35 2013.42,1208.35 2014.01,1208.35 2014.59,1208.35 2015.18,1208.35 2015.77,1208.35 2016.35,1208.35 2016.94,1208.35 2017.53,1208.35 2018.11,1208.35 2018.7,1208.35 2019.28,1208.35 2019.87,1208.35 2020.46,1208.35 2021.04,1208.35 2021.63,1208.35 2022.22,1208.35 2022.8,1208.35 2023.39,1208.35 2023.98,1208.35 2024.56,1208.35 2025.15,1208.35 2025.73,1208.35 2026.32,1208.35 2026.91,1208.35 2027.49,1208.35 2028.08,1208.35 2028.67,1208.35 2029.25,1208.35 2029.84,1208.35 2030.43,1208.35 2031.01,1208.35 2031.6,1208.35 2032.19,1208.35 2032.77,1208.35 2033.36,1208.35 2033.94,1208.35 2034.53,1208.35 2035.12,1208.35 2035.7,1208.35 2036.29,1208.35 2036.88,1208.35 2037.46,1208.35 2038.05,1208.35 2038.64,1208.35 2039.22,1208.35 2039.81,1208.35 2040.4,1208.35 2040.98,1208.35 2041.57,1208.35 2042.15,1208.35 2042.74,1208.35 2043.33,1208.35 2043.91,1208.35 2044.5,1208.35 2045.09,1208.35 2045.67,1208.35 2046.26,1208.35 2046.85,1208.35 2047.43,1208.35 2048.02,1208.35 2048.6,1208.35 2049.19,1208.35 2049.78,1208.35 2050.36,1208.35 2050.95,1208.35 2051.54,1208.35 2052.12,1208.35 2052.71,1208.35 2053.3,1208.35 2053.88,1208.35 2054.47,1208.35 2055.06,1208.35 2055.64,1208.35 2056.23,1208.35 2056.81,1208.35 2057.4,1208.35 2057.99,1208.35 2058.57,1208.35 2059.16,1208.35 2059.75,1208.35 2060.33,1208.35 2060.92,1208.35 2061.51,1208.35 2062.09,1208.35 2062.68,1208.35 2063.27,1208.35 2063.85,1208.35 2064.44,1208.35 2065.02,1208.35 2065.61,1208.35 2066.2,1208.35 2066.78,1208.35 2067.37,1208.35 2067.96,1208.35 2068.54,1208.35 2069.13,1208.35 2069.72,1208.35 2070.3,1208.35 2070.89,1208.35 2071.48,1208.35 2072.06,1208.35 2072.65,1208.35 2073.23,1208.35 2073.82,1208.35 2074.41,1208.35 2074.99,1208.35 2075.58,1208.35 2076.17,1208.35 2076.75,1208.35 2077.34,1208.35 2077.93,1208.35 2078.51,1208.35 2079.1,1208.35 2079.68,1208.35 2080.27,1208.35 2080.86,1208.35 2081.44,1208.35 2082.03,1208.35 2082.62,1208.35 2083.2,1208.35 2083.79,1208.35 2084.38,1208.35 2084.96,1208.35 2085.55,1208.35 2086.14,1208.35 2086.72,1208.35 2087.31,1208.35 2087.89,1208.35 2088.48,1208.35 2089.07,1208.35 2089.65,1208.35 2090.24,1208.35 2090.83,1208.35 2091.41,1208.35 2092,1208.35 2092.59,1208.35 2093.17,1208.35 2093.76,1208.35 2094.35,1208.35 2094.93,1208.35 2095.52,1208.35 2096.1,1208.35 2096.69,1208.35 2097.28,1208.35 2097.86,1208.35 2098.45,1208.35 2099.04,1208.35 2099.62,1208.35 2100.21,1208.35 2100.8,1208.35 2101.38,1208.35 2101.97,1208.35 2102.55,1208.35 2103.14,1208.35 2103.73,1208.35 2104.31,1208.35 2104.9,1208.35 2105.49,1208.35 2106.07,1208.35 2106.66,1208.35 2107.25,1208.35 2107.83,1208.35 2108.42,1208.35 2109.01,1208.35 2109.59,1208.35 2110.18,1208.35 2110.76,1208.35 2111.35,1208.35 2111.94,1208.35 2112.52,1208.35 2113.11,1208.35 2113.7,1208.35 2114.28,1208.35 2114.87,1208.35 2115.46,1208.35 2116.04,1208.35 2116.63,1208.35 2117.22,1208.35 2117.8,1208.35 2118.39,1208.35 2118.97,1208.35 2119.56,1208.35 2120.15,1208.35 2120.73,1208.35 2121.32,1208.35 2121.91,1208.35 2122.49,1208.35 2123.08,1208.35 2123.67,1208.35 2124.25,1208.35 2124.84,1208.35 2125.42,1208.35 2126.01,1208.35 2126.6,1208.35 2127.18,1208.35 2127.77,1208.35 2128.36,1208.35 2128.94,1208.35 2129.53,1208.35 2130.12,1208.35 2130.7,1208.35 2131.29,1208.35 2131.88,1208.35 2132.46,1208.35 2133.05,1208.35 2133.63,1208.35 2134.22,1208.35 2134.81,1208.35 2135.39,1208.35 2135.98,1208.35 2136.57,1208.35 2137.15,1208.35 2137.74,1208.35 2138.33,1208.35 2138.91,1208.35 2139.5,1208.35 2140.09,1208.35 2140.67,1208.35 2141.26,1208.35 2141.84,1208.35 2142.43,1208.35 2143.02,1208.35 2143.6,1208.35 2144.19,1208.35 2144.78,1208.35 2145.36,1208.35 2145.95,1208.35 2146.54,1208.35 2147.12,1208.35 2147.71,1208.35 2148.3,1208.35 2148.88,1208.35 2149.47,1208.35 2150.05,1208.35 2150.64,1208.35 2151.23,1208.35 2151.81,1208.35 2152.4,1208.35 2152.99,1208.35 2153.57,1208.35 2154.16,1208.35 2154.75,1208.35 2155.33,1208.35 2155.92,1208.35 2156.5,1208.35 2157.09,1208.35 2157.68,1208.35 2158.26,1208.35 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.05,1192.29 1400.25,899.083 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.99 985.439,1192.29 2158.26,1192.29 2158.26,1223.99 985.439,1223.99 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip223\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5920.59 164.351,-6849.3 164.91,-7714.98 165.469,-8482.47 166.029,-9176.95 166.588,-9784.55 167.147,-10349.5 167.706,-10855.3 168.266,-11286.1 168.825,-11666.4 169.384,-12019 169.943,-12326.4 170.503,-11845.9 171.062,-12090.4 171.621,-12307.1 172.18,-12488.2 172.74,-12636.1 173.299,-12753.2 173.858,-12831.8 174.417,-12894.1 174.977,-12931.6 175.536,-12946.1 176.095,-12553.7 176.655,-12521.8 177.214,-12137.1 177.773,-12082.3 178.332,-11730.3 178.892,-11648.9 179.451,-11294.9 180.01,-10279.4 180.569,-9995.79 181.129,-9737.8 181.688,-9478.44 182.247,-9052.51 182.806,-8944.3 183.366,-8839.91 183.925,-8729.85 184.484,-8480.42 185.043,-8232.03 185.603,-8000.65 186.162,-7872.19 186.721,-7745.05 187.28,-7614.03 187.84,-7383.69 188.399,-7169.83 188.958,-7044.37 189.517,-6922.37 190.077,-6793.76 190.636,-6660.78 191.195,-6374.62 191.754,-6101.69 192.314,-5971.99 192.873,-5772.29 193.432,-5581.34 193.991,-5392.81 194.551,-5275.75 195.11,-5162.65 195.669,-4929.67 196.228,-4815.9 196.788,-4596.21 197.347,-4438.71 197.906,-4286.41 198.465,-4091.04 199.025,-3896.38 199.584,-3755.5 200.143,-3614.27 200.702,-3482.58 201.262,-3350.05 201.821,-3188.51 202.38,-3068.16 202.939,-2990.61 203.499,-2871.83 204.058,-2723.56 204.617,-2613.57 205.176,-2503.53 205.736,-2258.85 206.295,-2062.56 206.854,-1940.05 207.413,-1878.87 207.973,-1755.11 208.532,-1605.91 209.091,-1556.48 209.65,-1415.63 210.21,-1364.11 210.769,-1263.68 211.328,-1077.5 211.887,-1009.93 212.447,-943.196 213.006,-855.567 213.565,-821.368 214.124,-735.594 214.684,-703.31 215.243,-671.538 215.802,-610.607 216.361,-552.857 216.921,-444.244 217.48,-388.893 218.039,-358.675 218.598,-305.798 219.158,-234.273 219.717,-206.527 220.276,-159.887 220.835,-85.0897 221.395,-37.1484 221.954,-16.5264 222.513,27.4134 223.072,67.999 223.632,111.726 224.191,150.268 224.75,170.579 225.309,225.797 225.869,262.351 226.428,298.683 226.987,271.437 227.546,307.734 228.106,322.965 228.665,336.656 229.224,472.266 229.783,481.409 230.343,490.361 230.902,539.646 231.461,509.602 232.02,540.092 232.58,569.635 233.139,598.536 233.698,626.985 234.257,650.294 234.817,658.134 235.376,680.181 235.935,703.529 236.494,780.685 237.054,816.776 237.613,817.193 238.172,817.085 238.731,816.436 239.291,797.012 239.85,780.448 240.409,820.264 240.968,839.771 241.528,842.964 242.087,846.365 242.646,919.669 243.205,923.576 243.765,924.672 244.324,952.822 244.883,1019.71 245.442,1032.08 246.002,1024.3 246.561,1052.84 247.12,1065 247.679,1074.67 248.239,1118.8 248.798,1127.55 249.357,1117.11 249.916,1107.88 250.476,1148.74 251.035,1171.13 251.594,1172.72 252.153,1146.05 252.713,1115.37 253.272,1105.21 253.831,1097.9 254.39,1122.54 254.95,1166.04 255.509,1135.07 256.068,1140.2 256.627,1127.73 257.187,1116.92 257.746,1125.83 258.305,1099.58 258.864,1126 259.424,1119.16 259.983,1110.4 260.542,1082.92 261.101,1058.44 261.661,1051.83 262.22,1030.21 262.779,1043.42 263.338,1100.43 263.898,1089.92 264.457,1017.02 265.016,995.701 265.575,1014.75 266.135,1013.41 266.694,1012.05 267.253,1008.87 267.812,1008.57 268.372,1024.18 268.931,1017.38 269.49,1029.07 270.049,1027.79 270.609,1040.08 271.168,1070.74 271.727,1067.4 272.286,1110.28 272.846,1104.34 273.405,1112.98 273.964,1120.11 274.523,1129.24 275.083,1168.84 275.642,1177.19 276.201,1166.73 276.76,1174.39 277.32,1145.79 277.879,1186.97 278.438,1160.04 278.997,1148.44 279.557,1168.83 280.116,1154.81 280.675,1145.47 281.234,1167.45 281.794,1175.21 282.353,1179.02 282.912,1201.03 283.471,1154.22 284.031,1144.63 284.59,1133.31 285.149,1171.45 285.708,1208.78 286.268,1212.36 286.827,1246.97 287.386,1265.07 287.945,1263.1 288.505,1262.4 289.064,1244.61 289.623,1227.51 290.182,1145.87 290.742,1166.75 291.301,1154.12 291.86,1155.79 292.419,1113.11 292.979,1074.1 293.538,1070.37 294.097,1045.97 294.656,1091.73 295.216,1100.88 295.775,1072.7 296.334,1066.28 296.893,1108.51 297.453,1083.13 298.012,1094.94 298.571,1070.69 299.13,1083.19 299.69,1059.59 300.249,1084.63 300.808,1057.51 301.368,1068.95 301.927,1054.91 302.486,1081.37 303.045,1071.44 303.605,1058.27 304.164,1048.98 304.723,1069.13 305.282,1072.19 305.842,1079 306.401,1053.71 306.96,1047.12 307.519,1074.04 308.079,1030.8 308.638,1020.1 309.197,981.66 309.756,978.712 310.316,974.043 310.875,954.888 311.434,935.29 311.993,933.597 312.553,915.049 313.112,932.982 313.671,945.136 314.23,926.246 314.79,926.736 315.349,922.306 315.908,924.903 316.467,954.845 317.027,986.637 317.586,1014.4 318.145,1010.44 318.704,1004.08 319.264,1028.14 319.823,999.525 320.382,1007.45 320.941,1033.39 321.501,1043.93 322.06,1038.27 322.619,1014.98 323.178,1041.87 323.738,1017.49 324.297,1028.49 324.856,1001.61 325.415,996.722 325.975,959.913 326.534,957.265 327.093,904.864 327.652,884.09 328.212,887.628 328.771,919.794 329.33,867.395 329.889,884.88 330.449,917.963 331.008,931.845 331.567,912.03 332.126,892.625 332.686,890.482 333.245,838.507 333.804,840.188 334.363,875.982 334.923,873.598 335.482,857.985 336.041,906.615 336.6,904.461 337.16,902.712 337.719,893.805 338.278,871.549 338.837,852.156 339.397,850.358 339.956,850.42 340.515,865.424 341.074,861.237 341.634,842.478 342.193,843.296 342.752,873.943 343.311,892.427 343.871,892.24 344.43,906.479 344.989,890.401 345.548,871.649 346.108,887.879 346.667,934.417 347.226,994.764 347.785,971.402 348.345,963.572 348.904,926.233 349.463,939.278 350.022,898.648 350.582,913.208 351.141,915.052 351.7,917.501 352.259,929.866 352.819,924.039 353.378,922.417 353.937,932.41 354.496,926.976 355.056,923.023 355.615,947.261 356.174,957.113 356.733,946.96 357.293,939.596 357.852,931.984 358.411,939.297 358.97,916.762 359.53,911.769 360.089,854.952 360.648,836.863 361.207,835.092 361.767,834.716 362.326,819.622 362.885,822.654 363.444,806.079 364.004,809.215 364.563,793.022 365.122,777.985 365.681,829.251 366.241,829.59 366.8,862.377 367.359,857.763 367.918,869.298 368.478,882.847 369.037,914.335 369.596,907.044 370.155,919.345 370.715,912.35 371.274,908.276 371.833,890.27 372.392,914.476 372.952,926.842 373.511,902.954 374.07,868.562 374.629,915.323 375.189,894.921 375.748,921.569 376.307,929.885 376.866,941.595 377.426,952.505 377.985,940.39 378.544,931.369 379.103,943.469 379.663,969.428 380.222,960.328 380.781,969.895 381.34,989.773 381.9,980.374 382.459,989.223 383.018,965.902 383.577,957.83 384.137,951.105 384.696,941.784 385.255,951.897 385.814,924.162 386.374,933.857 386.933,914.227 387.492,922.683 388.051,915.666 388.611,890.167 389.17,900.217 389.729,894.393 390.288,903.642 390.848,882.698 391.407,876.21 391.966,870.139 392.525,864.011 393.085,860.953 393.644,858.428 394.203,871.421 394.762,849.556 395.322,893.483 395.881,904.316 396.44,934.07 396.999,924.962 397.559,920.946 398.118,912.146 398.677,920.416 399.236,900.014 399.796,894.463 400.355,869.854 400.914,832.382 401.473,846.704 402.033,859.423 402.592,818.673 403.151,849.554 403.71,845.199 404.27,809.19 404.829,824.318 405.388,803.768 405.947,786.738 406.507,785.524 407.066,782.14 407.625,765.774 408.184,736.516 408.744,736.765 409.303,739.903 409.862,754.264 410.421,753.388 410.981,769.347 411.54,751.512 412.099,736.161 412.658,706.083 413.218,695.448 413.777,700.137 414.336,717.174 414.895,718.46 415.455,754.412 416.014,753.42 416.573,773.048 417.132,774.1 417.692,794.64 418.251,813.936 418.81,794.087 419.369,811.239 419.929,790.969 420.488,822.987 421.047,832.778 421.606,846.745 422.166,824.783 422.725,810.842 423.284,824.605 423.843,823.153 424.403,802.402 424.962,818.576 425.521,817.459 426.08,813.998 426.64,811.941 427.199,811.224 427.758,827.219 428.318,859.3 428.877,856.742 429.436,803.654 429.995,866.839 430.555,861.313 431.114,841.196 431.673,903.185 432.232,880.997 432.792,876.626 433.351,886.103 433.91,912.673 434.469,939.52 435.029,930.196 435.588,904.391 436.147,882.093 436.706,839.627 437.266,852.65 437.825,813.374 438.384,809.089 438.943,772.783 439.503,784.965 440.062,763.665 440.621,765.64 441.18,798.746 441.74,796.652 442.299,747.494 442.858,751.436 443.417,750.641 443.977,749.198 444.536,729.122 445.095,699.772 445.654,746.56 446.214,730.015 446.773,731.31 447.332,747.651 447.891,763.88 448.451,762.756 449.01,795.193 449.569,793.047 450.128,805.25 450.688,803.774 451.247,802.108 451.806,815.447 452.365,813.686 452.925,824.711 453.484,821.795 454.043,783.798 454.602,797.664 455.162,762.173 455.721,744.619 456.28,745.42 456.839,762.646 457.399,764.145 457.958,777.694 458.517,793.421 459.076,821.701 459.636,834.352 460.195,816.702 460.754,846.547 461.313,809.99 461.873,793.855 462.432,807.253 462.991,789.831 463.55,773.755 464.11,758.463 464.669,790.753 465.228,807.507 465.787,805.534 466.347,785.692 466.906,765.601 467.465,764.792 468.024,766.147 468.584,777.984 469.143,759.143 469.702,776.517 470.261,741.24 470.821,743.592 471.38,744.206 471.939,777.05 472.498,740.382 473.058,706.121 473.617,709.248 474.176,679.436 474.735,682.058 475.295,703.576 475.854,720.646 476.413,720.145 476.972,736.721 477.532,736.374 478.091,720.05 478.65,719.473 479.209,755.9 479.769,738.13 480.328,723.392 480.887,708.95 481.446,749.292 482.006,763.626 482.565,762.435 483.124,840.159 483.683,849.742 484.243,860.35 484.802,868.25 485.361,847.707 485.92,824.282 486.48,849.457 487.039,843.096 487.598,807.56 488.157,790.166 488.717,754.276 489.276,769.762 489.835,766.5 490.394,767.184 490.954,782.185 491.513,794.184 492.072,773.609 492.631,807.639 493.191,819.779 493.75,834.961 494.309,877.235 494.868,852.104 495.428,877.488 495.987,854.174 496.546,864.407 497.105,840.609 497.665,820.626 498.224,753.098 498.783,750.367 499.342,711.541 499.902,743.788 500.461,729.891 501.02,747.935 501.579,730.914 502.139,730.795 502.698,748.143 503.257,733.571 503.816,732.176 504.376,717.397 504.935,749.579 505.494,731.815 506.053,731.374 506.613,728.409 507.172,730.018 507.731,734.717 508.29,702.247 508.85,691.389 509.409,695.017 509.968,696.689 510.527,682.571 511.087,683.947 511.646,674.735 512.205,692.656 512.764,710.918 513.324,712.201 513.883,698.348 514.442,688.346 515.001,642.484 515.561,629.261 516.12,668.933 516.679,668.018 517.238,689.982 517.798,722.294 518.357,724.36 518.916,725.775 519.475,712.452 520.035,731.027 520.594,732.594 521.153,733.235 521.712,732.519 522.272,746.824 522.831,764.67 523.39,763.613 523.949,776.128 524.509,792.509 525.068,788.876 525.627,799.908 526.186,797.613 526.746,797.349 527.305,779.827 527.864,774.851 528.423,739.715 528.983,742.327 529.542,756.246 530.101,772.202 530.66,756.001 531.22,736.444 531.779,735.031 532.338,750.91 532.897,717.012 533.457,761.98 534.016,760.768 534.575,744.947 535.134,726.85 535.694,743.089 536.253,742.057 536.812,754.404 537.371,753.13 537.931,751.571 538.49,780.001 539.049,741.839 539.608,741.021 540.168,789.369 540.727,784.085 541.286,765.442 541.845,757.798 542.405,772.219 542.964,766.692 543.523,746.25 544.082,729.698 544.642,727.088 545.201,731.117 545.76,730.23 546.319,715.638 546.879,716.603 547.438,714.829 547.997,684.413 548.556,671.624 549.116,659.706 549.675,649.112 550.234,683.652 550.793,686.948 551.353,655.582 551.912,641.236 552.471,679.366 553.031,684.987 553.59,704.542 554.149,704.823 554.708,722.361 555.268,737.594 555.827,737.18 556.386,704.108 556.945,708.104 557.505,725.244 558.064,742.042 558.623,725.526 559.182,740.461 559.742,740.318 560.301,769.028 560.86,800.236 561.419,810.81 561.979,822.516 562.538,832.283 563.097,790.126 563.656,785.852 564.216,795.582 564.775,825.494 565.334,852.482 565.893,798.088 566.453,812.24 567.012,806.702 567.571,818.295 568.13,782.484 568.69,762.031 569.249,754.875 569.808,750.611 570.367,765.825 570.927,730.79 571.486,715.069 572.045,698.572 572.604,712.672 573.164,697.254 573.723,697.022 574.282,729.31 574.841,731.756 575.401,748.116 575.96,759.821 576.519,756.839 577.078,737.077 577.638,735.037 578.197,751.87 578.756,720.797 579.315,687.633 579.875,690.503 580.434,707.579 580.993,704.894 581.552,720.787 582.112,721.391 582.671,703.733 583.23,734.674 583.789,714.029 584.349,712.693 584.908,728.979 585.467,694.692 586.026,694.018 586.586,694.234 587.145,694.573 587.704,646.461 588.263,667.433 588.823,672.268 589.382,672.859 589.941,695.041 590.5,664.901 591.06,666.938 591.619,667.976 592.178,671.816 592.737,659.084 593.297,664.178 593.856,664.302 594.415,632.124 594.974,621.727 595.534,641.183 596.093,662.319 596.652,681.975 597.211,683.737 597.771,648.972 598.33,652.24 598.889,656.098 599.448,641.999 600.008,663.781 600.567,668.92 601.126,640.537 601.685,644.563 602.245,647.47 602.804,666.174 603.363,700.638 603.922,649.601 604.482,618.617 605.041,642.3 605.6,648.771 606.159,669.779 606.719,706.221 607.278,725.365 607.837,692.575 608.396,691.559 608.956,711.443 609.515,743.488 610.074,722.566 610.633,721.539 611.193,752.709 611.752,748.095 612.311,763.645 612.87,793.618 613.43,803.621 613.989,800.624 614.548,857.713 615.107,851.103 615.667,828.876 616.226,824.012 616.785,802.852 617.344,717.514 617.904,730.969 618.463,726.374 619.022,712.492 619.581,715.393 620.141,698.06 620.7,684.38 621.259,668.362 621.818,736.879 622.378,704.774 622.937,704.875 623.496,675.895 624.055,679.322 624.615,664.806 625.174,634.97 625.733,640.228 626.292,675.732 626.852,660.059 627.411,662.518 627.97,664.029 628.529,666.483 629.089,668.728 629.648,690.238 630.207,675.69 630.766,707.505 631.326,707.285 631.885,706.465 632.444,736.834 633.003,736.114 633.563,750.572 634.122,764.678 634.681,775.702 635.24,751.523 635.8,729.835 636.359,747.834 636.918,743.467 637.477,725.302 638.037,723.347 638.596,733.267 639.155,700.472 639.714,697.935 640.274,699.493 640.833,700.885 641.392,713.717 641.951,696.931 642.511,715.195 643.07,717.098 643.629,732.188 644.188,746.285 644.748,709.058 645.307,725.027 645.866,707.155 646.425,691.688 646.985,690.072 647.544,672.444 648.103,676.682 648.662,713.111 649.222,713.784 649.781,683.749 650.34,635.413 650.899,636.528 651.459,623.254 652.018,608.853 652.577,612.03 653.136,637.019 653.696,657.197 654.255,641.508 654.814,675.84 655.373,676.547 655.933,675.043 656.492,690.631 657.051,708.177 657.61,693.284 658.17,692.819 658.729,659.381 659.288,664.618 659.847,684.629 660.407,652.281 660.966,655.884 661.525,656.679 662.084,641.309 662.644,657.145 663.203,659.432 663.762,628.489 664.321,616.855 664.881,638.25 665.44,641.884 665.999,644.298 666.558,648.901 667.118,654.069 667.677,671.355 668.236,672.414 668.795,691.183 669.355,705.859 669.914,705.026 670.473,736.106 671.032,748.327 671.592,761.246 672.151,774.531 672.71,772.667 673.269,768.656 673.829,760.593 674.388,775.133 674.947,740.728 675.506,735.94 676.066,715.325 676.625,729.533 677.184,697.333 677.743,664.155 678.303,678.837 678.862,695.6 679.421,697.091 679.981,679.445 680.54,698.057 681.099,714.579 681.658,682.314 682.218,697.381 682.777,694.263 683.336,694.566 683.895,708.545 684.455,721.709 685.014,752.058 685.573,732.443 686.132,712.972 686.692,708.128 687.251,686.736 687.81,689.172 688.369,691.119 688.929,656.303 689.488,709.843 690.047,712.362 690.606,697.565 691.166,695.508 691.725,709.707 692.284,725.671 692.843,741.078 693.403,758.073 693.962,754.941 694.521,751.625 695.08,779.451 695.64,773.496 696.199,754.541 696.758,796.31 697.317,818.88 697.877,814.072 698.436,840.441 698.995,813.483 699.554,841.431 700.114,849.123 700.673,874.263 701.232,865.709 701.791,840.229 702.351,865.723 702.91,838.604 703.469,834.948 704.028,792.196 704.588,738.451 705.147,719.362 705.706,716.122 706.265,664.392 706.825,661.548 707.384,675.88 707.943,706.166 708.502,682.931 709.062,695.337 709.621,696.924 710.18,711.671 710.739,679.692 711.299,678.987 711.858,677.914 712.417,679.264 712.976,677.662 713.536,662.5 714.095,693.352 714.654,661.066 715.213,679.901 715.773,663.626 716.332,698.519 716.891,666.38 717.45,665.345 718.01,652.607 718.569,637.283 719.128,637.535 719.687,624.446 720.247,608.817 720.806,630.022 721.365,668.779 721.924,671.452 722.484,660.834 723.043,662.726 723.602,665.249 724.161,685.928 724.721,635.812 725.28,691.147 725.839,704.734 726.398,708.488 726.958,708.117 727.517,708.306 728.076,689.428 728.635,687.728 729.195,655.348 729.754,657.038 730.313,676.036 730.872,679.452 731.432,683.174 731.991,699.912 732.55,685.997 733.109,669.83 733.669,671.823 734.228,658.16 734.787,661.286 735.346,663.221 735.906,698.347 736.465,730.296 737.024,698.424 737.583,684.29 738.143,700.09 738.702,714.913 739.261,697.543 739.82,681.697 740.38,650.653 740.939,668.981 741.498,670.207 742.057,657.153 742.617,661.291 743.176,660.724 743.735,664.663 744.294,651.454 744.854,651.134 745.413,619.875 745.972,628.005 746.531,679.119 747.091,681.372 747.65,615.919 748.209,605.219 748.768,645.69 749.328,663.306 749.887,666.175 750.446,650.756 751.005,652.792 751.565,683.846 752.124,683.355 752.683,684.536 753.242,654.22 753.802,658.085 754.361,659.576 754.92,679.942 755.479,666.886 756.039,679.769 756.598,648.527 757.157,687.904 757.716,722.462 758.276,734.547 758.835,718.675 759.394,719.756 759.953,720.72 760.513,703.642 761.072,705.03 761.631,688.162 762.19,654.881 762.75,657.95 763.309,676.356 763.868,673.626 764.427,671.351 764.987,672.717 765.546,674.989 766.105,692.444 766.664,709.158 767.224,724.284 767.783,707.48 768.342,722.73 768.901,687.687 769.461,670.587 770.02,634.688 770.579,669.085 771.138,667.995 771.698,685.504 772.257,649.443 772.816,651.456 773.375,668.917 773.935,671.485 774.494,689.065 775.053,639.488 775.612,642.771 776.172,649.706 776.731,672.434 777.29,673.191 777.849,689.125 778.409,671.502 778.968,673.902 779.527,657.739 780.086,675.308 780.646,727.567 781.205,741.156 781.764,737.202 782.323,732.164 782.883,727.216 783.442,777.28 784.001,757.242 784.56,752.116 785.12,764.006 785.679,741.878 786.238,774.487 786.797,750.744 787.357,731.979 787.916,714.754 788.475,714.202 789.034,744.009 789.594,737.561 790.153,735.07 790.712,764.717 791.271,747.645 791.831,744.735 792.39,757.137 792.949,752.13 793.508,747.367 794.068,712.46 794.627,675.772 795.186,709.623 795.745,705.94 796.305,717.901 796.864,733.862 797.423,681.199 797.982,713.025 798.542,708.756 799.101,693.573 799.66,689.216 800.219,705.824 800.779,689.698 801.338,707.178 801.897,706.268 802.456,706.413 803.016,687.525 803.575,671.419 804.134,689.233 804.693,694.271 805.253,709.292 805.812,658.529 806.371,645.53 806.931,664.341 807.49,699.824 808.049,713.489 808.608,698.204 809.168,682.538 809.727,648.945 810.286,654.272 810.845,690.986 811.405,689.254 811.964,687.892 812.523,672.369 813.082,639.818 813.642,626.962 814.201,594.948 814.76,602.567 815.319,590.437 815.879,592.205 816.438,599.5 816.997,584.174 817.556,591.91 818.116,615.029 818.675,633.013 819.234,621.853 819.793,639.689 820.353,644.746 820.912,634.106 821.471,656.034 822.03,641.14 822.59,692.686 823.149,728.032 823.708,758.549 824.267,737.633 824.827,765.548 825.386,796.946 825.945,773.182 826.504,784.989 827.064,777.271 827.623,739.857 828.182,753.452 828.741,765.298 829.301,744.906 829.86,742.111 830.419,721.514 830.978,718.049 831.538,700.996 832.097,703.344 832.656,736.035 833.215,715.843 833.775,716.888 834.334,746.721 834.893,713.742 835.452,711.716 836.012,707.469 836.571,687.102 837.13,672.038 837.689,671.581 838.249,659.082 838.808,692.417 839.367,691.374 839.926,723.544 840.486,702.263 841.045,703.602 841.604,703.724 842.163,717.062 842.723,730.632 843.282,696.721 843.841,729.412 844.4,742.903 844.96,707.844 845.519,657.717 846.078,627.005 846.637,641.378 847.197,657.274 847.756,645.268 848.315,632.698 848.874,636.818 849.434,656.597 849.993,652.579 850.552,640.527 851.111,629.594 851.671,647.312 852.23,619.869 852.789,624.047 853.348,609.239 853.908,599.238 854.467,621 855.026,625.872 855.585,609.494 856.145,609.962 856.704,644.544 857.263,709.225 857.822,706.161 858.382,688.162 858.941,672.889 859.5,688.165 860.059,671.631 860.619,653.108 861.178,670.078 861.737,704.386 862.296,720.577 862.856,702.264 863.415,735.284 863.974,734.694 864.533,729.37 865.093,709.74 865.652,711.209 866.211,693.512 866.77,675.764 867.33,662.055 867.889,665.685 868.448,698.85 869.007,681.494 869.567,698.876 870.126,716.726 870.685,729.273 871.244,745.369 871.804,743.711 872.363,688.019 872.922,704.213 873.481,718.76 874.041,717.788 874.6,668.441 875.159,686.679 875.718,686.466 876.278,702.008 876.837,652.373 877.396,671.785 877.955,692.559 878.515,726.731 879.074,711.616 879.633,712.207 880.192,743.824 880.752,724.485 881.311,736.137 881.87,763.816 882.429,775.261 882.989,741.113 883.548,752.964 884.107,750.415 884.666,744.261 885.226,758.34 885.785,757.025 886.344,719.618 886.903,718.414 887.463,702.783 888.022,733.386 888.581,730.494 889.14,746.602 889.7,738.89 890.259,752.392 890.818,735.244 891.377,732.129 891.937,748.376 892.496,743.336 893.055,692.367 893.614,691.011 894.174,723.698 894.733,720.419 895.292,732.543 895.851,730.892 896.411,727.306 896.97,710.096 897.529,709.126 898.088,707.784 898.648,674.389 899.207,676.708 899.766,662.756 900.325,682.768 900.885,698.313 901.444,697.651 902.003,680.852 902.562,646.882 903.122,582.173 903.681,622.28 904.24,674.179 904.799,692.024 905.359,704.423 905.918,714.554 906.477,730.849 907.036,693.879 907.596,663.083 908.155,660.612 908.714,663.067 909.273,648.569 909.833,648.525 910.392,649.856 910.951,667.869 911.51,684.188 912.07,650.798 912.629,673.011 913.188,674.581 913.747,672.316 914.307,673.538 914.866,659.21 915.425,692.96 915.984,708.783 916.544,727.631 917.103,710.352 917.662,707.443 918.221,691.389 918.781,721.105 919.34,718.568 919.899,714.643 920.458,712.434 921.018,737.532 921.577,738.842 922.136,736.242 922.695,751.633 923.255,764.36 923.814,793.452 924.373,788.982 924.932,769.214 925.492,720.999 926.051,686.371 926.61,670.324 927.169,668.75 927.729,670.223 928.288,640.436 928.847,627.854 929.406,632.457 929.966,650.356 930.525,636.012 931.084,655.08 931.644,656.047 932.203,676.179 932.762,692.461 933.321,706.244 933.881,688.783 934.44,705.157 934.999,656.224 935.558,674.997 936.118,710.864 936.677,720.744 937.236,732.316 937.795,762.189 938.355,757.982 938.914,756.882 939.473,784.618 940.032,795.782 940.592,773.604 941.151,749.898 941.71,699.851 942.269,665.83 942.829,647.477 943.388,601.958 943.947,639.928 944.506,626.875 945.066,612.006 945.625,599.95 946.184,608.891 946.743,628.597 947.303,645.991 947.862,631.057 948.421,651.059 948.98,652.581 949.54,635.413 950.099,595.377 950.658,584.168 951.217,576.119 951.777,567.787 952.336,573.736 952.895,576.593 953.454,553.448 954.014,540.804 954.573,532.853 955.132,576.752 955.691,535.854 956.251,548.032 956.81,571.644 957.369,560.498 957.928,599.662 958.488,620.337 959.047,607.443 959.606,626.207 960.165,629.038 960.725,631.427 961.284,637.019 961.843,672.439 962.402,675.591 962.962,678.13 963.521,663.651 964.08,680.069 964.639,697.589 965.199,730.28 965.758,707.988 966.317,689.624 966.876,705.294 967.436,690.156 967.995,669.785 968.554,636.149 969.113,638.819 969.673,656.861 970.232,644.855 970.791,664.02 971.35,664.593 971.91,697.511 972.469,711.105 973.028,712.595 973.587,713.494 974.147,696.303 974.706,711.724 975.265,709.33 975.824,741.925 976.384,737.449 976.943,718.175 977.502,736.452 978.061,750.785 978.621,726.714 979.18,726.585 979.739,742.087 980.298,737.563 980.858,718.876 981.417,715.693 981.976,761.623 982.535,775.981 983.095,805.619 983.654,801.223 984.213,765.657 984.772,746.198 985.332,760.856 985.891,773.256 986.45,787.095 987.009,798.616 987.569,777.649 988.128,786.019 988.687,796.461 989.246,760.765 989.806,740.899 990.365,721.424 990.924,719.074 991.483,733.965 992.043,737.228 992.602,734.015 993.161,735.419 993.72,763.809 994.28,760.761 994.839,723.317 995.398,739.332 995.957,722.381 996.517,737.232 997.076,750.634 997.635,729.786 998.194,743.823 998.754,740.545 999.313,738.985 999.872,719.687 1000.43,684.727 1000.99,651.166 1001.55,650.275 1002.11,633.283 1002.67,619.731 1003.23,636.946 1003.79,652.24 1004.35,670.589 1004.91,650.139 1005.46,651.587 1006.02,636.064 1006.58,607.279 1007.14,613.072 1007.7,647.032 1008.26,660.466 1008.82,646.702 1009.38,631.556 1009.94,617.145 1010.5,618.123 1011.06,634.669 1011.62,651.942 1012.18,654.034 1012.73,623.009 1013.29,612.506 1013.85,647.946 1014.41,650.974 1014.97,670.462 1015.53,699.068 1016.09,716.621 1016.65,718.349 1017.21,720.842 1017.77,718.902 1018.33,715.361 1018.89,695.771 1019.45,708.258 1020.01,690.508 1020.56,658.852 1021.12,676.137 1021.68,661.068 1022.24,679.675 1022.8,678.661 1023.36,678.68 1023.92,648.461 1024.48,635.239 1025.04,619.799 1025.6,658.278 1026.16,677.759 1026.72,694.25 1027.28,689.972 1027.83,676.21 1028.39,677.73 1028.95,678.537 1029.51,684.12 1030.07,683.865 1030.63,679.694 1031.19,730.727 1031.75,727.834 1032.31,693.281 1032.87,712.112 1033.43,710.336 1033.99,742.129 1034.55,738.489 1035.1,750.972 1035.66,761.353 1036.22,755.975 1036.78,768.203 1037.34,779.4 1037.9,742.387 1038.46,725.294 1039.02,707.334 1039.58,703.763 1040.14,686.68 1040.7,702.941 1041.26,701.548 1041.82,717.872 1042.38,715.898 1042.93,696.191 1043.49,709.422 1044.05,689.65 1044.61,740.964 1045.17,738.109 1045.73,685.81 1046.29,703.472 1046.85,682.421 1047.41,679.154 1047.97,666.393 1048.53,667.943 1049.09,635.919 1049.65,638.508 1050.2,623.682 1050.76,593.711 1051.32,631.195 1051.88,615.401 1052.44,602.102 1053,621.207 1053.56,624.056 1054.12,677.844 1054.68,666.113 1055.24,633.79 1055.8,637.853 1056.36,626.577 1056.92,633.306 1057.48,635.841 1058.03,653.462 1058.59,652.606 1059.15,635.531 1059.71,639.787 1060.27,611.702 1060.83,602.302 1061.39,590.369 1061.95,593.041 1062.51,582.985 1063.07,569.608 1063.63,578.539 1064.19,583.126 1064.75,569.296 1065.3,604.155 1065.86,595.006 1066.42,603.557 1066.98,609.239 1067.54,617.279 1068.1,635.885 1068.66,623.867 1069.22,642.772 1069.78,665.143 1070.34,682.122 1070.9,698.868 1071.46,716.233 1072.02,746.479 1072.57,741.083 1073.13,721.821 1073.69,714.903 1074.25,709.544 1074.81,708.159 1075.37,707.942 1075.93,704.117 1076.49,671.328 1077.05,705.845 1077.61,704.678 1078.17,689.079 1078.73,702.522 1079.29,686.615 1079.85,702.244 1080.4,717.58 1080.96,746.217 1081.52,727.88 1082.08,726.661 1082.64,693.308 1083.2,659.111 1083.76,660.729 1084.32,644.447 1084.88,693.247 1085.44,707.579 1086,703.877 1086.56,720.329 1087.12,719.525 1087.67,687.707 1088.23,652.261 1088.79,655.453 1089.35,626.969 1089.91,649.851 1090.47,636.913 1091.03,638.168 1091.59,622.014 1092.15,607.306 1092.71,582.158 1093.27,609.114 1093.83,612.095 1094.39,632.591 1094.94,634.622 1095.5,622.269 1096.06,626.829 1096.62,648.373 1097.18,649.912 1097.74,616.44 1098.3,617.326 1098.86,638.928 1099.42,674.243 1099.98,705.71 1100.54,721.857 1101.1,734.811 1101.66,733.946 1102.22,748.421 1102.77,728.876 1103.33,726.769 1103.89,754.368 1104.45,783.226 1105.01,811.391 1105.57,806.903 1106.13,768.5 1106.69,748.509 1107.25,743.37 1107.81,771 1108.37,768.963 1108.93,749.814 1109.49,730.447 1110.04,743.821 1110.6,739.065 1111.16,737.305 1111.72,701.136 1112.28,701.347 1112.84,763.152 1113.4,775.32 1113.96,756.172 1114.52,724.226 1115.08,705.179 1115.64,751.311 1116.2,729.302 1116.76,741.12 1117.31,719.803 1117.87,716.799 1118.43,718.1 1118.99,718.842 1119.55,733.14 1120.11,728.245 1120.67,726.031 1121.23,735.217 1121.79,716.96 1122.35,697.613 1122.91,715.609 1123.47,713.906 1124.03,728.775 1124.59,722.068 1125.14,716.945 1125.7,780.521 1126.26,794.767 1126.82,788.146 1127.38,786.058 1127.94,734.112 1128.5,766.138 1129.06,762.714 1129.62,759.467 1130.18,708.76 1130.74,674.227 1131.3,657.912 1131.86,662.18 1132.41,694.933 1132.97,724.813 1133.53,738.23 1134.09,701.078 1134.65,714.32 1135.21,695.756 1135.77,677.135 1136.33,679.714 1136.89,678.161 1137.45,666.027 1138.01,687.801 1138.57,639.681 1139.13,641.519 1139.68,642.157 1140.24,647.58 1140.8,652.33 1141.36,636.911 1141.92,645.378 1142.48,664.417 1143.04,665.568 1143.6,671.082 1144.16,639.773 1144.72,687.853 1145.28,704.71 1145.84,702.829 1146.4,686.545 1146.96,716.968 1147.51,699.483 1148.07,712.772 1148.63,678.222 1149.19,680.458 1149.75,679.486 1150.31,693.047 1150.87,689.681 1151.43,691.096 1151.99,673.062 1152.55,656.1 1153.11,673.385 1153.67,641.528 1154.23,660.218 1154.78,646.335 1155.34,662.411 1155.9,662.656 1156.46,645.564 1157.02,626.582 1157.58,615.118 1158.14,631.579 1158.7,699.118 1159.26,695.829 1159.82,696.981 1160.38,651.146 1160.94,650.135 1161.5,665.636 1162.05,662.788 1162.61,681.964 1163.17,680.525 1163.73,677.554 1164.29,691.923 1164.85,725.326 1165.41,725.946 1165.97,658.595 1166.53,641.656 1167.09,611.984 1167.65,549.572 1168.21,574.71 1168.77,576.489 1169.33,579.511 1169.88,567.195 1170.44,575.789 1171,581.615 1171.56,601.731 1172.12,603.787 1172.68,628.022 1173.24,635.368 1173.8,689.362 1174.36,706.459 1174.92,702.898 1175.48,702.142 1176.04,703.521 1176.6,721.912 1177.15,704.329 1177.71,668.153 1178.27,620.174 1178.83,622.522 1179.39,610.002 1179.95,648.128 1180.51,651.682 1181.07,652.451 1181.63,685.444 1182.19,654.291 1182.75,654.319 1183.31,670.759 1183.87,672.107 1184.43,688.197 1184.98,671.883 1185.54,676.197 1186.1,680.773 1186.66,698.954 1187.22,668.23 1187.78,667.086 1188.34,700.515 1188.9,698.167 1189.46,714.67 1190.02,695.641 1190.58,699.404 1191.14,685.67 1191.7,686.673 1192.25,670.234 1192.81,687.881 1193.37,706.397 1193.93,705.587 1194.49,690.518 1195.05,708.107 1195.61,757.153 1196.17,738.335 1196.73,753.486 1197.29,796.668 1197.85,747.765 1198.41,743.512 1198.97,722.8 1199.52,734.504 1200.08,734.82 1200.64,732.911 1201.2,696.49 1201.76,662.492 1202.32,646.793 1202.88,664.47 1203.44,681.04 1204,697.34 1204.56,682.773 1205.12,700.724 1205.68,716.813 1206.24,710.554 1206.8,721.642 1207.35,720.394 1207.91,713.739 1208.47,728.373 1209.03,676.813 1209.59,680.093 1210.15,665.795 1210.71,680.57 1211.27,678.399 1211.83,676.644 1212.39,644.848 1212.95,665.983 1213.51,681.17 1214.07,697.535 1214.62,694.567 1215.18,709.686 1215.74,691.772 1216.3,674.755 1216.86,707.858 1217.42,771.052 1217.98,781.634 1218.54,777.228 1219.1,791.714 1219.66,770.318 1220.22,794.098 1220.78,800.119 1221.34,828.158 1221.89,790.39 1222.45,769.854 1223.01,729.64 1223.57,728.212 1224.13,692.736 1224.69,677.113 1225.25,662.171 1225.81,627.148 1226.37,677.286 1226.93,679.236 1227.49,697.349 1228.05,695.646 1228.61,714.15 1229.17,697.971 1229.72,697.375 1230.28,696.609 1230.84,679.695 1231.4,695.044 1231.96,678.55 1232.52,679.291 1233.08,681.314 1233.64,685.609 1234.2,704.009 1234.76,667.892 1235.32,687.402 1235.88,674.811 1236.44,675.336 1236.99,692.389 1237.55,706.464 1238.11,671.163 1238.67,668.455 1239.23,634.074 1239.79,687.916 1240.35,673.05 1240.91,668.975 1241.47,651.682 1242.03,684.739 1242.59,668.281 1243.15,636.231 1243.71,624.941 1244.26,595.84 1244.82,570.244 1245.38,594.678 1245.94,579.76 1246.5,600.991 1247.06,605.856 1247.62,591.884 1248.18,569.602 1248.74,574.807 1249.3,582.233 1249.86,591.743 1250.42,597.399 1250.98,605.296 1251.54,608.708 1252.09,664.202 1252.65,666.627 1253.21,699.487 1253.77,701.801 1254.33,702.851 1254.89,732.99 1255.45,749.338 1256.01,714.663 1256.57,710.2 1257.13,691.25 1257.69,754.697 1258.25,752.641 1258.81,734.35 1259.36,731.414 1259.92,728.065 1260.48,712.417 1261.04,708.192 1261.6,722.441 1262.16,721.094 1262.72,734.873 1263.28,764.783 1263.84,741.059 1264.4,737.672 1264.96,734.847 1265.52,736.442 1266.08,734.007 1266.63,712.143 1267.19,709.082 1267.75,710.706 1268.31,713.833 1268.87,725.982 1269.43,706.749 1269.99,688.621 1270.55,674.243 1271.11,658.864 1271.67,662.984 1272.23,684.55 1272.79,701.709 1273.35,733.55 1273.91,730.914 1274.46,711.794 1275.02,696.143 1275.58,645.154 1276.14,629.324 1276.7,633.668 1277.26,616.224 1277.82,635.53 1278.38,687.518 1278.94,688.348 1279.5,690.68 1280.06,753.817 1280.62,734.844 1281.18,714.814 1281.73,742.643 1282.29,725.685 1282.85,725.646 1283.41,724.628 1283.97,725.379 1284.53,705.982 1285.09,687.518 1285.65,671.125 1286.21,655.746 1286.77,639.405 1287.33,642.324 1287.89,661.244 1288.45,630.858 1289,632.14 1289.56,633.63 1290.12,636.056 1290.68,638.633 1291.24,625.477 1291.8,609.839 1292.36,615.117 1292.92,619.27 1293.48,608.148 1294.04,581.97 1294.6,601.819 1295.16,639.186 1295.72,658.39 1296.28,672.662 1296.83,670.673 1297.39,671.803 1297.95,706.294 1298.51,685.943 1299.07,688.269 1299.63,705.472 1300.19,659.935 1300.75,677.583 1301.31,678.711 1301.87,615.767 1302.43,621.611 1302.99,606.381 1303.55,627.342 1304.1,643.949 1304.66,615.744 1305.22,619.129 1305.78,635.782 1306.34,622.627 1306.9,626.181 1307.46,608.715 1308.02,612.9 1308.58,617.297 1309.14,665.098 1309.7,665.75 1310.26,683.782 1310.82,716.673 1311.38,711.973 1311.93,696.44 1312.49,695.625 1313.05,693.283 1313.61,707.962 1314.17,674.051 1314.73,690.717 1315.29,690.591 1315.85,691.845 1316.41,706.629 1316.97,704.098 1317.53,736.224 1318.09,748.768 1318.65,763.464 1319.2,788.874 1319.76,783.564 1320.32,746.179 1320.88,712.395 1321.44,707.632 1322,702.211 1322.56,701.068 1323.12,716.559 1323.68,715.055 1324.24,710.006 1324.8,694.499 1325.36,674.315 1325.92,708.67 1326.47,695.361 1327.03,679.212 1327.59,683.123 1328.15,698.078 1328.71,664.962 1329.27,666.451 1329.83,667.997 1330.39,667.462 1330.95,684.03 1331.51,685.034 1332.07,649.479 1332.63,620.254 1333.19,608.771 1333.75,612.851 1334.3,586.109 1334.86,590.812 1335.42,599.1 1335.98,605.168 1336.54,592.504 1337.1,597.146 1337.66,603.551 1338.22,593.087 1338.78,614.404 1339.34,620.659 1339.9,627.394 1340.46,629.698 1341.02,632.841 1341.57,633.635 1342.13,652.911 1342.69,669.094 1343.25,686.168 1343.81,704.348 1344.37,687.641 1344.93,674.158 1345.49,674.845 1346.05,693.11 1346.61,679.022 1347.17,682.637 1347.73,667.868 1348.29,688.168 1348.84,688.133 1349.4,688.594 1349.96,654.671 1350.52,658.302 1351.08,660.067 1351.64,628.329 1352.2,599.994 1352.76,571.131 1353.32,580.064 1353.88,549.518 1354.44,587.235 1355,573.328 1355.56,580.304 1356.12,604.22 1356.67,645.478 1357.23,662.192 1357.79,677.925 1358.35,706.769 1358.91,704.956 1359.47,732.312 1360.03,727.545 1360.59,723.525 1361.15,734.855 1361.71,718.555 1362.27,732.846 1362.83,734.942 1363.39,715.668 1363.94,718.793 1364.5,744.856 1365.06,744.03 1365.62,678.555 1366.18,676.771 1366.74,693.571 1367.3,677.764 1367.86,665.235 1368.42,682.412 1368.98,666.276 1369.54,651.248 1370.1,653.004 1370.66,670.675 1371.21,653.106 1371.77,638.438 1372.33,642.43 1372.89,675.328 1373.45,660.308 1374.01,660.421 1374.57,664.244 1375.13,635.3 1375.69,653.875 1376.25,675.511 1376.81,657.883 1377.37,675.337 1377.93,676.72 1378.49,692.464 1379.04,690.23 1379.6,640.516 1380.16,608.929 1380.72,597.759 1381.28,636.411 1381.84,672.081 1382.4,702.385 1382.96,656.437 1383.52,677.703 1384.08,710.387 1384.64,725.296 1385.2,724.803 1385.76,738.306 1386.31,736.996 1386.87,687.873 1387.43,668.651 1387.99,667.909 1388.55,668.282 1389.11,700.414 1389.67,686.477 1390.23,702.642 1390.79,688.183 1391.35,736.471 1391.91,752.935 1392.47,752.007 1393.03,783.105 1393.58,762.656 1394.14,793.513 1394.7,769.542 1395.26,781.462 1395.82,790.753 1396.38,804.492 1396.94,765.965 1397.5,744.997 1398.06,742.725 1398.62,755.28 1399.18,747.116 1399.74,740.954 1400.3,736.702 1400.86,701.101 1401.41,714.238 1401.97,711.845 1402.53,726.189 1403.09,722.261 1403.65,752.82 1404.21,766.436 1404.77,748.722 1405.33,743.89 1405.89,721.885 1406.45,719.26 1407.01,700.146 1407.57,700.279 1408.13,698.779 1408.68,712.733 1409.24,677.325 1409.8,674.962 1410.36,689.152 1410.92,704.19 1411.48,717.296 1412.04,712.579 1412.6,725.675 1413.16,692.699 1413.72,677.301 1414.28,709.736 1414.84,723.655 1415.4,735.502 1415.95,735.002 1416.51,751.041 1417.07,747.831 1417.63,730.223 1418.19,710.903 1418.75,739.591 1419.31,705.667 1419.87,688.846 1420.43,675.795 1420.99,688.619 1421.55,684.324 1422.11,718.124 1422.67,685.01 1423.23,729.89 1423.78,733.921 1424.34,715.167 1424.9,730.954 1425.46,760.969 1426.02,757.758 1426.58,786.642 1427.14,749.532 1427.7,711.869 1428.26,728.582 1428.82,726.729 1429.38,723.779 1429.94,692.17 1430.5,677.318 1431.05,679.404 1431.61,664.038 1432.17,631.446 1432.73,652.009 1433.29,655.968 1433.85,701.999 1434.41,700.342 1434.97,713.558 1435.53,709.873 1436.09,691.532 1436.65,691.127 1437.21,691.129 1437.77,673.383 1438.33,687.009 1438.88,701.338 1439.44,714.08 1440,712.414 1440.56,711.802 1441.12,726.474 1441.68,724.996 1442.24,720.303 1442.8,701.896 1443.36,703.867 1443.92,716.503 1444.48,714.235 1445.04,695.915 1445.6,713.816 1446.15,730.317 1446.71,745.656 1447.27,759.036 1447.83,750.734 1448.39,751.053 1448.95,729.82 1449.51,727.256 1450.07,726.472 1450.63,723.09 1451.19,738.899 1451.75,748.465 1452.31,744.433 1452.87,771.855 1453.42,752.769 1453.98,765.846 1454.54,726.915 1455.1,706.515 1455.66,703.553 1456.22,654.362 1456.78,672.095 1457.34,689.028 1457.9,673.541 1458.46,656.477 1459.02,672.592 1459.58,656.168 1460.14,637.547 1460.7,660.407 1461.25,660.943 1461.81,644.805 1462.37,645.972 1462.93,679.443 1463.49,646.89 1464.05,649.106 1464.61,665.949 1465.17,664.732 1465.73,651.618 1466.29,636.421 1466.85,672.42 1467.41,691.442 1467.97,673.553 1468.52,669.647 1469.08,684.99 1469.64,703.528 1470.2,683.813 1470.76,668.229 1471.32,665.296 1471.88,617.955 1472.44,622.638 1473,607.055 1473.56,609.212 1474.12,614.884 1474.68,635.379 1475.24,641.175 1475.79,641.313 1476.35,623.887 1476.91,627.175 1477.47,644.926 1478.03,630.441 1478.59,630.807 1479.15,635.529 1479.71,637.567 1480.27,625.645 1480.83,646.168 1481.39,650.66 1481.95,684.836 1482.51,666.539 1483.07,665.528 1483.62,667.248 1484.18,650.218 1484.74,668.108 1485.3,668.538 1485.86,655.292 1486.42,658.612 1486.98,639.37 1487.54,642.692 1488.1,660.127 1488.66,674.397 1489.22,659.783 1489.78,726.485 1490.34,693.7 1490.89,697.756 1491.45,678.463 1492.01,666.774 1492.57,651.721 1493.13,638.334 1493.69,644.368 1494.25,630.618 1494.81,667.674 1495.37,701.051 1495.93,683.978 1496.49,684.707 1497.05,686.687 1497.61,691.8 1498.16,641.296 1498.72,658.184 1499.28,644.497 1499.84,648.573 1500.4,668.45 1500.96,670.16 1501.52,719.796 1502.08,736.089 1502.64,736.328 1503.2,767.236 1503.76,729.937 1504.32,739.945 1504.88,750.61 1505.44,746.021 1505.99,740.425 1506.55,757.789 1507.11,706.06 1507.67,738.457 1508.23,720.175 1508.79,682.948 1509.35,665.761 1509.91,665.518 1510.47,664.12 1511.03,684.487 1511.59,700.586 1512.15,697.049 1512.71,696.61 1513.26,713.868 1513.82,699.315 1514.38,717.983 1514.94,728.738 1515.5,725.643 1516.06,705.977 1516.62,686.564 1517.18,687.321 1517.74,668.884 1518.3,687.702 1518.86,690.675 1519.42,704.94 1519.98,700.259 1520.53,714.878 1521.09,709.724 1521.65,708.821 1522.21,724.255 1522.77,720.032 1523.33,685.247 1523.89,687.093 1524.45,685.439 1525.01,734.972 1525.57,753.301 1526.13,732.831 1526.69,716.179 1527.25,732.358 1527.81,765.98 1528.36,765.228 1528.92,713.018 1529.48,727.541 1530.04,694.312 1530.6,679.065 1531.16,694.713 1531.72,694.989 1532.28,708.513 1532.84,675.546 1533.4,679.393 1533.96,682.331 1534.52,681.173 1535.08,647.599 1535.63,681.022 1536.19,665.122 1536.75,666.727 1537.31,653.89 1537.87,640.278 1538.43,608.842 1538.99,597.802 1539.55,617.984 1540.11,623.305 1540.67,607.777 1541.23,661.791 1541.79,660.112 1542.35,697.11 1542.9,712.046 1543.46,709.919 1544.02,674.527 1544.58,673.604 1545.14,639.87 1545.7,659.108 1546.26,659.425 1546.82,661.929 1547.38,676.74 1547.94,677.527 1548.5,680.697 1549.06,678.451 1549.62,741.976 1550.18,739.457 1550.73,702.886 1551.29,698.165 1551.85,729.41 1552.41,690.683 1552.97,726.11 1553.53,755.211 1554.09,715.866 1554.65,710.24 1555.21,692.999 1555.77,693.379 1556.33,659.3 1556.89,646.631 1557.45,648.072 1558,646.95 1558.56,615.328 1559.12,589.718 1559.68,597.416 1560.24,632.826 1560.8,639.245 1561.36,657.167 1561.92,687.443 1562.48,655.234 1563.04,655.137 1563.6,638.039 1564.16,639.37 1564.72,625.229 1565.28,630.172 1565.83,662.534 1566.39,663.103 1566.95,647.339 1567.51,664.178 1568.07,646.305 1568.63,632.649 1569.19,654.549 1569.75,657.177 1570.31,660.423 1570.87,681.119 1571.43,697.205 1571.99,717.556 1572.55,713.363 1573.1,729.317 1573.66,731.48 1574.22,726.747 1574.78,725.76 1575.34,706.466 1575.9,671.172 1576.46,640.529 1577.02,658.547 1577.58,647.498 1578.14,635.721 1578.7,637.549 1579.26,638.523 1579.82,643.556 1580.37,660.421 1580.93,660.839 1581.49,675.151 1582.05,692.608 1582.61,672.923 1583.17,641.786 1583.73,625.877 1584.29,629.246 1584.85,665.374 1585.41,635.423 1585.97,666.657 1586.53,668.19 1587.09,685.207 1587.65,706.074 1588.2,655.141 1588.76,673.417 1589.32,626.587 1589.88,662.272 1590.44,680.831 1591,713.996 1591.56,730.188 1592.12,758.707 1592.68,785.499 1593.24,762.225 1593.8,742.539 1594.36,738.986 1594.92,752.123 1595.47,769.34 1596.03,765.763 1596.59,759.83 1597.15,806.627 1597.71,831.809 1598.27,808.558 1598.83,784.959 1599.39,765.929 1599.95,744.79 1600.51,743.656 1601.07,774.391 1601.63,803.003 1602.19,778.112 1602.74,774.596 1603.3,752.517 1603.86,732.989 1604.42,681.928 1604.98,681.693 1605.54,684.202 1606.1,682.862 1606.66,667.745 1607.22,651.906 1607.78,636.759 1608.34,626.594 1608.9,632.407 1609.46,666.77 1610.02,653.781 1610.57,668.394 1611.13,683.609 1611.69,668.08 1612.25,653.799 1612.81,656.082 1613.37,643.104 1613.93,628.179 1614.49,647.309 1615.05,650.224 1615.61,683.982 1616.17,652.115 1616.73,671.608 1617.29,675.561 1617.84,706.25 1618.4,691.569 1618.96,675.628 1619.52,691.39 1620.08,679.746 1620.64,677.089 1621.2,676.915 1621.76,646.905 1622.32,633.514 1622.88,635.525 1623.44,672.899 1624,657.035 1624.56,641.431 1625.11,660.659 1625.67,678.685 1626.23,694.358 1626.79,709.777 1627.35,706.284 1627.91,717.928 1628.47,700.05 1629.03,681.218 1629.59,664.898 1630.15,665.744 1630.71,650.414 1631.27,668.774 1631.83,684.122 1632.39,683.088 1632.94,710.823 1633.5,693.137 1634.06,708.563 1634.62,722.106 1635.18,721.849 1635.74,738.653 1636.3,718.206 1636.86,716.074 1637.42,712.819 1637.98,710.846 1638.54,695.917 1639.1,713.817 1639.66,727.522 1640.21,676.976 1640.77,664.418 1641.33,697.13 1641.89,711.941 1642.45,707.131 1643.01,722.268 1643.57,704.856 1644.13,686.51 1644.69,656.322 1645.25,645.256 1645.81,643.661 1646.37,645.295 1646.93,662.207 1647.48,680.99 1648.04,698.637 1648.6,701.703 1649.16,686.657 1649.72,655.366 1650.28,641.586 1650.84,660.639 1651.4,646.073 1651.96,614.907 1652.52,633.183 1653.08,635.317 1653.64,640.173 1654.2,611.425 1654.76,615.472 1655.31,603.904 1655.87,591.831 1656.43,610.565 1656.99,612.401 1657.55,583.679 1658.11,618.863 1658.67,621.729 1659.23,626.742 1659.79,626.949 1660.35,635.666 1660.91,605.997 1661.47,625.954 1662.03,627.938 1662.58,661.548 1663.14,665.234 1663.7,650.218 1664.26,634.409 1664.82,652.717 1665.38,688.494 1665.94,685.292 1666.5,685.641 1667.06,687.683 1667.62,672.452 1668.18,672.129 1668.74,702.507 1669.3,681.648 1669.85,683.489 1670.41,694.648 1670.97,693.418 1671.53,644.999 1672.09,665.637 1672.65,697.209 1673.21,679.842 1673.77,696.374 1674.33,664.792 1674.89,647.203 1675.45,682.684 1676.01,665.517 1676.57,682.664 1677.13,667.145 1677.68,634.746 1678.24,636.058 1678.8,688.022 1679.36,703.26 1679.92,716.319 1680.48,715.069 1681.04,684.186 1681.6,664.253 1682.16,663.679 1682.72,647.628 1683.28,650.961 1683.84,670.789 1684.4,673.566 1684.95,693.995 1685.51,755.097 1686.07,735.34 1686.63,728.326 1687.19,743.417 1687.75,757.94 1688.31,752.524 1688.87,730.003 1689.43,730.532 1689.99,740.475 1690.55,723.374 1691.11,721.351 1691.67,774.145 1692.23,754.283 1692.78,737.23 1693.34,717.283 1693.9,718.85 1694.46,727.388 1695.02,725.934 1695.58,738.018 1696.14,703.015 1696.7,738.465 1697.26,721.828 1697.82,721.133 1698.38,701.467 1698.94,702.011 1699.5,732.952 1700.05,681.66 1700.61,652.4 1701.17,655.123 1701.73,639.547 1702.29,638.159 1702.85,639.176 1703.41,639.231 1703.97,656.046 1704.53,656.236 1705.09,625.754 1705.65,659.249 1706.21,628.589 1706.77,662.552 1707.32,647.123 1707.88,649.562 1708.44,634.279 1709,656.346 1709.56,656.361 1710.12,653.214 1710.68,651.964 1711.24,621.713 1711.8,645.116 1712.36,682.861 1712.92,686.536 1713.48,717.481 1714.04,666.995 1714.6,669.876 1715.15,670.109 1715.71,672.247 1716.27,657.148 1716.83,658.64 1717.39,644.921 1717.95,663.413 1718.51,665.187 1719.07,727.931 1719.63,737.859 1720.19,749.958 1720.75,747.539 1721.31,758.965 1721.87,753.492 1722.42,735.698 1722.98,763.538 1723.54,741.827 1724.1,770.631 1724.66,751.463 1725.22,798.005 1725.78,777.989 1726.34,805.974 1726.9,769.755 1727.46,829.675 1728.02,820.578 1728.58,812.992 1729.14,807.004 1729.69,771.574 1730.25,766.167 1730.81,779.683 1731.37,791.55 1731.93,786.73 1732.49,799.214 1733.05,774.036 1733.61,768.983 1734.17,763.405 1734.73,760.204 1735.29,752.713 1735.85,752.698 1736.41,730.425 1736.97,728.562 1737.52,710.068 1738.08,705.418 1738.64,707.279 1739.2,657.174 1739.76,658.638 1740.32,661.494 1740.88,664.524 1741.44,665.089 1742,665.671 1742.56,666.444 1743.12,651.801 1743.68,667.178 1744.24,637.244 1744.79,657.388 1745.35,644.445 1745.91,645.682 1746.47,665.432 1747.03,664.991 1747.59,681.46 1748.15,676.828 1748.71,729.015 1749.27,691.887 1749.83,677.195 1750.39,707.496 1750.95,733.753 1751.51,732.513 1752.06,714.947 1752.62,697.862 1753.18,662.064 1753.74,645.407 1754.3,651.819 1754.86,670.226 1755.42,719.645 1755.98,722.012 1756.54,749.762 1757.1,727.102 1757.66,705.868 1758.22,657.133 1758.78,693.079 1759.34,709.567 1759.89,677.249 1760.45,660.107 1761.01,643.165 1761.57,581.706 1762.13,603.226 1762.69,587.236 1763.25,591.786 1763.81,601.027 1764.37,585.425 1764.93,606.321 1765.49,598.249 1766.05,619.643 1766.61,636.5 1767.16,670.282 1767.72,682.639 1768.28,682.682 1768.84,633.336 1769.4,620.206 1769.96,594.854 1770.52,618.793 1771.08,625.436 1771.64,630.392 1772.2,633.324 1772.76,632.689 1773.32,621.246 1773.88,605.511 1774.43,609.315 1774.99,629.016 1775.55,596.96 1776.11,633.848 1776.67,590.591 1777.23,612.7 1777.79,629.669 1778.35,633.187 1778.91,638.273 1779.47,596.652 1780.03,619.9 1780.59,624.35 1781.15,628.955 1781.71,631.193 1782.26,617.851 1782.82,656.628 1783.38,675.954 1783.94,696.051 1784.5,680.094 1785.06,679.753 1785.62,714.48 1786.18,711.589 1786.74,697.203 1787.3,690.903 1787.86,704.408 1788.42,737.481 1788.98,719.639 1789.53,716.454 1790.09,715.811 1790.65,749.565 1791.21,730.12 1791.77,724.369 1792.33,738.908 1792.89,718.918 1793.45,716.511 1794.01,733.548 1794.57,745.758 1795.13,725.727 1795.69,724.096 1796.25,771.406 1796.8,766.523 1797.36,746.147 1797.92,773.648 1798.48,782.827 1799.04,793.231 1799.6,785.845 1800.16,781.407 1800.72,757.596 1801.28,720.453 1801.84,735.939 1802.4,719.852 1802.96,668.182 1803.52,648.991 1804.08,684.978 1804.63,684.245 1805.19,671.319 1805.75,670.655 1806.31,689.966 1806.87,687.244 1807.43,705.739 1807.99,687.377 1808.55,702.599 1809.11,698.368 1809.67,714.732 1810.23,695.71 1810.79,710.024 1811.35,721.453 1811.9,704.172 1812.46,687.012 1813.02,670.945 1813.58,672.38 1814.14,651.697 1814.7,651.078 1815.26,633.721 1815.82,620.188 1816.38,623.397 1816.94,627.158 1817.5,663.841 1818.06,678.947 1818.62,664.064 1819.18,650.566 1819.73,639.485 1820.29,638.767 1820.85,659.777 1821.41,628.599 1821.97,632.015 1822.53,650.344 1823.09,683.314 1823.65,697.706 1824.21,650 1824.77,666.75 1825.33,618.319 1825.89,603.275 1826.45,608.803 1827,630.762 1827.56,583.21 1828.12,571.444 1828.68,576.826 1829.24,599.338 1829.8,605.192 1830.36,609.107 1830.92,612.718 1831.48,631.989 1832.04,681.172 1832.6,761.383 1833.16,772.869 1833.72,766.919 1834.27,746.26 1834.83,744.057 1835.39,757.24 1835.95,752.889 1836.51,765.909 1837.07,762.112 1837.63,760.261 1838.19,788.274 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 689.558 L720.806 689.558 L721.365 689.558 L721.924 689.558 L722.484 689.558 L723.043 689.558 L723.602 689.558 L724.161 689.558 L724.721 689.558 L725.28 689.558 L725.839 689.558 L726.398 689.558 L726.958 689.558 L727.517 689.558 L728.076 689.558 L728.635 689.558 L729.195 689.558 L729.754 689.558 L730.313 689.558 L730.872 689.558 L731.432 689.558 L731.991 689.558 L732.55 689.558 L733.109 689.558 L733.669 689.558 L734.228 689.558 L734.787 689.558 L735.346 689.558 L735.906 689.558 L736.465 689.558 L737.024 689.558 L737.583 689.558 L738.143 689.558 L738.702 689.558 L739.261 689.558 L739.82 689.558 L740.38 689.558 L740.939 689.558 L741.498 689.558 L742.057 689.558 L742.617 689.558 L743.176 689.558 L743.735 689.558 L744.294 689.558 L744.854 689.558 L745.413 689.558 L745.972 689.558 L746.531 689.558 L747.091 689.558 L747.65 689.558 L748.209 689.558 L748.768 689.558 L749.328 689.558 L749.887 689.558 L750.446 689.558 L751.005 689.558 L751.565 689.558 L752.124 689.558 L752.683 689.558 L753.242 689.558 L753.802 689.558 L754.361 689.558 L754.92 689.558 L755.479 689.558 L756.039 689.558 L756.598 689.558 L757.157 689.558 L757.716 689.558 L758.276 689.558 L758.835 689.558 L759.394 689.558 L759.953 689.558 L760.513 689.558 L761.072 689.558 L761.631 689.558 L762.19 689.558 L762.75 689.558 L763.309 689.558 L763.868 689.558 L764.427 689.558 L764.987 689.558 L765.546 689.558 L766.105 689.558 L766.664 689.558 L767.224 689.558 L767.783 689.558 L768.342 689.558 L768.901 689.558 L769.461 689.558 L770.02 689.558 L770.579 689.558 L771.138 689.558 L771.698 689.558 L772.257 689.558 L772.816 689.558 L773.375 689.558 L773.935 689.558 L774.494 689.558 L775.053 689.558 L775.612 689.558 L776.172 689.558 L776.731 689.558 L777.29 689.558 L777.849 689.558 L778.409 689.558 L778.968 689.558 L779.527 689.558 L780.086 689.558 L780.646 689.558 L781.205 689.558 L781.764 689.558 L782.323 689.558 L782.883 689.558 L783.442 689.558 L784.001 689.558 L784.56 689.558 L785.12 689.558 L785.679 689.558 L786.238 689.558 L786.797 689.558 L787.357 689.558 L787.916 689.558 L788.475 689.558 L789.034 689.558 L789.594 689.558 L790.153 689.558 L790.712 689.558 L791.271 689.558 L791.831 689.558 L792.39 689.558 L792.949 689.558 L793.508 689.558 L794.068 689.558 L794.627 689.558 L795.186 689.558 L795.745 689.558 L796.305 689.558 L796.864 689.558 L797.423 689.558 L797.982 689.558 L798.542 689.558 L799.101 689.558 L799.66 689.558 L800.219 689.558 L800.779 689.558 L801.338 689.558 L801.897 689.558 L802.456 689.558 L803.016 689.558 L803.575 689.558 L804.134 689.558 L804.693 689.558 L805.253 689.558 L805.812 689.558 L806.371 689.558 L806.931 689.558 L807.49 689.558 L808.049 689.558 L808.608 689.558 L809.168 689.558 L809.727 689.558 L810.286 689.558 L810.845 689.558 L811.405 689.558 L811.964 689.558 L812.523 689.558 L813.082 689.558 L813.642 689.558 L814.201 689.558 L814.76 689.558 L815.319 689.558 L815.879 689.558 L816.438 689.558 L816.997 689.558 L817.556 689.558 L818.116 689.558 L818.675 689.558 L819.234 689.558 L819.793 689.558 L820.353 689.558 L820.912 689.558 L821.471 689.558 L822.03 689.558 L822.59 689.558 L823.149 689.558 L823.708 689.558 L824.267 689.558 L824.827 689.558 L825.386 689.558 L825.945 689.558 L826.504 689.558 L827.064 689.558 L827.623 689.558 L828.182 689.558 L828.741 689.558 L829.301 689.558 L829.86 689.558 L830.419 689.558 L830.978 689.558 L831.538 689.558 L832.097 689.558 L832.656 689.558 L833.215 689.558 L833.775 689.558 L834.334 689.558 L834.893 689.558 L835.452 689.558 L836.012 689.558 L836.571 689.558 L837.13 689.558 L837.689 689.558 L838.249 689.558 L838.808 689.558 L839.367 689.558 L839.926 689.558 L840.486 689.558 L841.045 689.558 L841.604 689.558 L842.163 689.558 L842.723 689.558 L843.282 689.558 L843.841 689.558 L844.4 689.558 L844.96 689.558 L845.519 689.558 L846.078 689.558 L846.637 689.558 L847.197 689.558 L847.756 689.558 L848.315 689.558 L848.874 689.558 L849.434 689.558 L849.993 689.558 L850.552 689.558 L851.111 689.558 L851.671 689.558 L852.23 689.558 L852.789 689.558 L853.348 689.558 L853.908 689.558 L854.467 689.558 L855.026 689.558 L855.585 689.558 L856.145 689.558 L856.704 689.558 L857.263 689.558 L857.822 689.558 L858.382 689.558 L858.941 689.558 L859.5 689.558 L860.059 689.558 L860.619 689.558 L861.178 689.558 L861.737 689.558 L862.296 689.558 L862.856 689.558 L863.415 689.558 L863.974 689.558 L864.533 689.558 L865.093 689.558 L865.652 689.558 L866.211 689.558 L866.77 689.558 L867.33 689.558 L867.889 689.558 L868.448 689.558 L869.007 689.558 L869.567 689.558 L870.126 689.558 L870.685 689.558 L871.244 689.558 L871.804 689.558 L872.363 689.558 L872.922 689.558 L873.481 689.558 L874.041 689.558 L874.6 689.558 L875.159 689.558 L875.718 689.558 L876.278 689.558 L876.837 689.558 L877.396 689.558 L877.955 689.558 L878.515 689.558 L879.074 689.558 L879.633 689.558 L880.192 689.558 L880.752 689.558 L881.311 689.558 L881.87 689.558 L882.429 689.558 L882.989 689.558 L883.548 689.558 L884.107 689.558 L884.666 689.558 L885.226 689.558 L885.785 689.558 L886.344 689.558 L886.903 689.558 L887.463 689.558 L888.022 689.558 L888.581 689.558 L889.14 689.558 L889.7 689.558 L890.259 689.558 L890.818 689.558 L891.377 689.558 L891.937 689.558 L892.496 689.558 L893.055 689.558 L893.614 689.558 L894.174 689.558 L894.733 689.558 L895.292 689.558 L895.851 689.558 L896.411 689.558 L896.97 689.558 L897.529 689.558 L898.088 689.558 L898.648 689.558 L899.207 689.558 L899.766 689.558 L900.325 689.558 L900.885 689.558 L901.444 689.558 L902.003 689.558 L902.562 689.558 L903.122 689.558 L903.681 689.558 L904.24 689.558 L904.799 689.558 L905.359 689.558 L905.918 689.558 L906.477 689.558 L907.036 689.558 L907.596 689.558 L908.155 689.558 L908.714 689.558 L909.273 689.558 L909.833 689.558 L910.392 689.558 L910.951 689.558 L911.51 689.558 L912.07 689.558 L912.629 689.558 L913.188 689.558 L913.747 689.558 L914.307 689.558 L914.866 689.558 L915.425 689.558 L915.984 689.558 L916.544 689.558 L917.103 689.558 L917.662 689.558 L918.221 689.558 L918.781 689.558 L919.34 689.558 L919.899 689.558 L920.458 689.558 L921.018 689.558 L921.577 689.558 L922.136 689.558 L922.695 689.558 L923.255 689.558 L923.814 689.558 L924.373 689.558 L924.932 689.558 L925.492 689.558 L926.051 689.558 L926.61 689.558 L927.169 689.558 L927.729 689.558 L928.288 689.558 L928.847 689.558 L929.406 689.558 L929.966 689.558 L930.525 689.558 L931.084 689.558 L931.644 689.558 L932.203 689.558 L932.762 689.558 L933.321 689.558 L933.881 689.558 L934.44 689.558 L934.999 689.558 L935.558 689.558 L936.118 689.558 L936.677 689.558 L937.236 689.558 L937.795 689.558 L938.355 689.558 L938.914 689.558 L939.473 689.558 L940.032 689.558 L940.592 689.558 L941.151 689.558 L941.71 689.558 L942.269 689.558 L942.829 689.558 L943.388 689.558 L943.947 689.558 L944.506 689.558 L945.066 689.558 L945.625 689.558 L946.184 689.558 L946.743 689.558 L947.303 689.558 L947.862 689.558 L948.421 689.558 L948.98 689.558 L949.54 689.558 L950.099 689.558 L950.658 689.558 L951.217 689.558 L951.777 689.558 L952.336 689.558 L952.895 689.558 L953.454 689.558 L954.014 689.558 L954.573 689.558 L955.132 689.558 L955.691 689.558 L956.251 689.558 L956.81 689.558 L957.369 689.558 L957.928 689.558 L958.488 689.558 L959.047 689.558 L959.606 689.558 L960.165 689.558 L960.725 689.558 L961.284 689.558 L961.843 689.558 L962.402 689.558 L962.962 689.558 L963.521 689.558 L964.08 689.558 L964.639 689.558 L965.199 689.558 L965.758 689.558 L966.317 689.558 L966.876 689.558 L967.436 689.558 L967.995 689.558 L968.554 689.558 L969.113 689.558 L969.673 689.558 L970.232 689.558 L970.791 689.558 L971.35 689.558 L971.91 689.558 L972.469 689.558 L973.028 689.558 L973.587 689.558 L974.147 689.558 L974.706 689.558 L975.265 689.558 L975.824 689.558 L976.384 689.558 L976.943 689.558 L977.502 689.558 L978.061 689.558 L978.621 689.558 L979.18 689.558 L979.739 689.558 L980.298 689.558 L980.858 689.558 L981.417 689.558 L981.976 689.558 L982.535 689.558 L983.095 689.558 L983.654 689.558 L984.213 689.558 L984.772 689.558 L985.332 689.558 L985.891 689.558 L986.45 689.558 L987.009 689.558 L987.569 689.558 L988.128 689.558 L988.687 689.558 L989.246 689.558 L989.806 689.558 L990.365 689.558 L990.924 689.558 L991.483 689.558 L992.043 689.558 L992.602 689.558 L993.161 689.558 L993.72 689.558 L994.28 689.558 L994.839 689.558 L995.398 689.558 L995.957 689.558 L996.517 689.558 L997.076 689.558 L997.635 689.558 L998.194 689.558 L998.754 689.558 L999.313 689.558 L999.872 689.558 L1000.43 689.558 L1000.99 689.558 L1001.55 689.558 L1002.11 689.558 L1002.67 689.558 L1003.23 689.558 L1003.79 689.558 L1004.35 689.558 L1004.91 689.558 L1005.46 689.558 L1006.02 689.558 L1006.58 689.558 L1007.14 689.558 L1007.7 689.558 L1008.26 689.558 L1008.82 689.558 L1009.38 689.558 L1009.94 689.558 L1010.5 689.558 L1011.06 689.558 L1011.62 689.558 L1012.18 689.558 L1012.73 689.558 L1013.29 689.558 L1013.85 689.558 L1014.41 689.558 L1014.97 689.558 L1015.53 689.558 L1016.09 689.558 L1016.65 689.558 L1017.21 689.558 L1017.77 689.558 L1018.33 689.558 L1018.89 689.558 L1019.45 689.558 L1020.01 689.558 L1020.56 689.558 L1021.12 689.558 L1021.68 689.558 L1022.24 689.558 L1022.8 689.558 L1023.36 689.558 L1023.92 689.558 L1024.48 689.558 L1025.04 689.558 L1025.6 689.558 L1026.16 689.558 L1026.72 689.558 L1027.28 689.558 L1027.83 689.558 L1028.39 689.558 L1028.95 689.558 L1029.51 689.558 L1030.07 689.558 L1030.63 689.558 L1031.19 689.558 L1031.75 689.558 L1032.31 689.558 L1032.87 689.558 L1033.43 689.558 L1033.99 689.558 L1034.55 689.558 L1035.1 689.558 L1035.66 689.558 L1036.22 689.558 L1036.78 689.558 L1037.34 689.558 L1037.9 689.558 L1038.46 689.558 L1039.02 689.558 L1039.58 689.558 L1040.14 689.558 L1040.7 689.558 L1041.26 689.558 L1041.82 689.558 L1042.38 689.558 L1042.93 689.558 L1043.49 689.558 L1044.05 689.558 L1044.61 689.558 L1045.17 689.558 L1045.73 689.558 L1046.29 689.558 L1046.85 689.558 L1047.41 689.558 L1047.97 689.558 L1048.53 689.558 L1049.09 689.558 L1049.65 689.558 L1050.2 689.558 L1050.76 689.558 L1051.32 689.558 L1051.88 689.558 L1052.44 689.558 L1053 689.558 L1053.56 689.558 L1054.12 689.558 L1054.68 689.558 L1055.24 689.558 L1055.8 689.558 L1056.36 689.558 L1056.92 689.558 L1057.48 689.558 L1058.03 689.558 L1058.59 689.558 L1059.15 689.558 L1059.71 689.558 L1060.27 689.558 L1060.83 689.558 L1061.39 689.558 L1061.95 689.558 L1062.51 689.558 L1063.07 689.558 L1063.63 689.558 L1064.19 689.558 L1064.75 689.558 L1065.3 689.558 L1065.86 689.558 L1066.42 689.558 L1066.98 689.558 L1067.54 689.558 L1068.1 689.558 L1068.66 689.558 L1069.22 689.558 L1069.78 689.558 L1070.34 689.558 L1070.9 689.558 L1071.46 689.558 L1072.02 689.558 L1072.57 689.558 L1073.13 689.558 L1073.69 689.558 L1074.25 689.558 L1074.81 689.558 L1075.37 689.558 L1075.93 689.558 L1076.49 689.558 L1077.05 689.558 L1077.61 689.558 L1078.17 689.558 L1078.73 689.558 L1079.29 689.558 L1079.85 689.558 L1080.4 689.558 L1080.96 689.558 L1081.52 689.558 L1082.08 689.558 L1082.64 689.558 L1083.2 689.558 L1083.76 689.558 L1084.32 689.558 L1084.88 689.558 L1085.44 689.558 L1086 689.558 L1086.56 689.558 L1087.12 689.558 L1087.67 689.558 L1088.23 689.558 L1088.79 689.558 L1089.35 689.558 L1089.91 689.558 L1090.47 689.558 L1091.03 689.558 L1091.59 689.558 L1092.15 689.558 L1092.71 689.558 L1093.27 689.558 L1093.83 689.558 L1094.39 689.558 L1094.94 689.558 L1095.5 689.558 L1096.06 689.558 L1096.62 689.558 L1097.18 689.558 L1097.74 689.558 L1098.3 689.558 L1098.86 689.558 L1099.42 689.558 L1099.98 689.558 L1100.54 689.558 L1101.1 689.558 L1101.66 689.558 L1102.22 689.558 L1102.77 689.558 L1103.33 689.558 L1103.89 689.558 L1104.45 689.558 L1105.01 689.558 L1105.57 689.558 L1106.13 689.558 L1106.69 689.558 L1107.25 689.558 L1107.81 689.558 L1108.37 689.558 L1108.93 689.558 L1109.49 689.558 L1110.04 689.558 L1110.6 689.558 L1111.16 689.558 L1111.72 689.558 L1112.28 689.558 L1112.84 689.558 L1113.4 689.558 L1113.96 689.558 L1114.52 689.558 L1115.08 689.558 L1115.64 689.558 L1116.2 689.558 L1116.76 689.558 L1117.31 689.558 L1117.87 689.558 L1118.43 689.558 L1118.99 689.558 L1119.55 689.558 L1120.11 689.558 L1120.67 689.558 L1121.23 689.558 L1121.79 689.558 L1122.35 689.558 L1122.91 689.558 L1123.47 689.558 L1124.03 689.558 L1124.59 689.558 L1125.14 689.558 L1125.7 689.558 L1126.26 689.558 L1126.82 689.558 L1127.38 689.558 L1127.94 689.558 L1128.5 689.558 L1129.06 689.558 L1129.62 689.558 L1130.18 689.558 L1130.74 689.558 L1131.3 689.558 L1131.86 689.558 L1132.41 689.558 L1132.97 689.558 L1133.53 689.558 L1134.09 689.558 L1134.65 689.558 L1135.21 689.558 L1135.77 689.558 L1136.33 689.558 L1136.89 689.558 L1137.45 689.558 L1138.01 689.558 L1138.57 689.558 L1139.13 689.558 L1139.68 689.558 L1140.24 689.558 L1140.8 689.558 L1141.36 689.558 L1141.92 689.558 L1142.48 689.558 L1143.04 689.558 L1143.6 689.558 L1144.16 689.558 L1144.72 689.558 L1145.28 689.558 L1145.84 689.558 L1146.4 689.558 L1146.96 689.558 L1147.51 689.558 L1148.07 689.558 L1148.63 689.558 L1149.19 689.558 L1149.75 689.558 L1150.31 689.558 L1150.87 689.558 L1151.43 689.558 L1151.99 689.558 L1152.55 689.558 L1153.11 689.558 L1153.67 689.558 L1154.23 689.558 L1154.78 689.558 L1155.34 689.558 L1155.9 689.558 L1156.46 689.558 L1157.02 689.558 L1157.58 689.558 L1158.14 689.558 L1158.7 689.558 L1159.26 689.558 L1159.82 689.558 L1160.38 689.558 L1160.94 689.558 L1161.5 689.558 L1162.05 689.558 L1162.61 689.558 L1163.17 689.558 L1163.73 689.558 L1164.29 689.558 L1164.85 689.558 L1165.41 689.558 L1165.97 689.558 L1166.53 689.558 L1167.09 689.558 L1167.65 689.558 L1168.21 689.558 L1168.77 689.558 L1169.33 689.558 L1169.88 689.558 L1170.44 689.558 L1171 689.558 L1171.56 689.558 L1172.12 689.558 L1172.68 689.558 L1173.24 689.558 L1173.8 689.558 L1174.36 689.558 L1174.92 689.558 L1175.48 689.558 L1176.04 689.558 L1176.6 689.558 L1177.15 689.558 L1177.71 689.558 L1178.27 689.558 L1178.83 689.558 L1179.39 689.558 L1179.95 689.558 L1180.51 689.558 L1181.07 689.558 L1181.63 689.558 L1182.19 689.558 L1182.75 689.558 L1183.31 689.558 L1183.87 689.558 L1184.43 689.558 L1184.98 689.558 L1185.54 689.558 L1186.1 689.558 L1186.66 689.558 L1187.22 689.558 L1187.78 689.558 L1188.34 689.558 L1188.9 689.558 L1189.46 689.558 L1190.02 689.558 L1190.58 689.558 L1191.14 689.558 L1191.7 689.558 L1192.25 689.558 L1192.81 689.558 L1193.37 689.558 L1193.93 689.558 L1194.49 689.558 L1195.05 689.558 L1195.61 689.558 L1196.17 689.558 L1196.73 689.558 L1197.29 689.558 L1197.85 689.558 L1198.41 689.558 L1198.97 689.558 L1199.52 689.558 L1200.08 689.558 L1200.64 689.558 L1201.2 689.558 L1201.76 689.558 L1202.32 689.558 L1202.88 689.558 L1203.44 689.558 L1204 689.558 L1204.56 689.558 L1205.12 689.558 L1205.68 689.558 L1206.24 689.558 L1206.8 689.558 L1207.35 689.558 L1207.91 689.558 L1208.47 689.558 L1209.03 689.558 L1209.59 689.558 L1210.15 689.558 L1210.71 689.558 L1211.27 689.558 L1211.83 689.558 L1212.39 689.558 L1212.95 689.558 L1213.51 689.558 L1214.07 689.558 L1214.62 689.558 L1215.18 689.558 L1215.74 689.558 L1216.3 689.558 L1216.86 689.558 L1217.42 689.558 L1217.98 689.558 L1218.54 689.558 L1219.1 689.558 L1219.66 689.558 L1220.22 689.558 L1220.78 689.558 L1221.34 689.558 L1221.89 689.558 L1222.45 689.558 L1223.01 689.558 L1223.57 689.558 L1224.13 689.558 L1224.69 689.558 L1225.25 689.558 L1225.81 689.558 L1226.37 689.558 L1226.93 689.558 L1227.49 689.558 L1228.05 689.558 L1228.61 689.558 L1229.17 689.558 L1229.72 689.558 L1230.28 689.558 L1230.84 689.558 L1231.4 689.558 L1231.96 689.558 L1232.52 689.558 L1233.08 689.558 L1233.64 689.558 L1234.2 689.558 L1234.76 689.558 L1235.32 689.558 L1235.88 689.558 L1236.44 689.558 L1236.99 689.558 L1237.55 689.558 L1238.11 689.558 L1238.67 689.558 L1239.23 689.558 L1239.79 689.558 L1240.35 689.558 L1240.91 689.558 L1241.47 689.558 L1242.03 689.558 L1242.59 689.558 L1243.15 689.558 L1243.71 689.558 L1244.26 689.558 L1244.82 689.558 L1245.38 689.558 L1245.94 689.558 L1246.5 689.558 L1247.06 689.558 L1247.62 689.558 L1248.18 689.558 L1248.74 689.558 L1249.3 689.558 L1249.86 689.558 L1250.42 689.558 L1250.98 689.558 L1251.54 689.558 L1252.09 689.558 L1252.65 689.558 L1253.21 689.558 L1253.77 689.558 L1254.33 689.558 L1254.89 689.558 L1255.45 689.558 L1256.01 689.558 L1256.57 689.558 L1257.13 689.558 L1257.69 689.558 L1258.25 689.558 L1258.81 689.558 L1259.36 689.558 L1259.92 689.558 L1260.48 689.558 L1261.04 689.558 L1261.6 689.558 L1262.16 689.558 L1262.72 689.558 L1263.28 689.558 L1263.84 689.558 L1264.4 689.558 L1264.96 689.558 L1265.52 689.558 L1266.08 689.558 L1266.63 689.558 L1267.19 689.558 L1267.75 689.558 L1268.31 689.558 L1268.87 689.558 L1269.43 689.558 L1269.99 689.558 L1270.55 689.558 L1271.11 689.558 L1271.67 689.558 L1272.23 689.558 L1272.79 689.558 L1273.35 689.558 L1273.91 689.558 L1274.46 689.558 L1275.02 689.558 L1275.58 689.558 L1276.14 689.558 L1276.7 689.558 L1277.26 689.558 L1277.82 689.558 L1278.38 689.558 L1278.94 689.558 L1279.5 689.558 L1280.06 689.558 L1280.62 689.558 L1281.18 689.558 L1281.73 689.558 L1282.29 689.558 L1282.85 689.558 L1283.41 689.558 L1283.97 689.558 L1284.53 689.558 L1285.09 689.558 L1285.65 689.558 L1286.21 689.558 L1286.77 689.558 L1287.33 689.558 L1287.89 689.558 L1288.45 689.558 L1289 689.558 L1289.56 689.558 L1290.12 689.558 L1290.68 689.558 L1291.24 689.558 L1291.8 689.558 L1292.36 689.558 L1292.92 689.558 L1293.48 689.558 L1294.04 689.558 L1294.6 689.558 L1295.16 689.558 L1295.72 689.558 L1296.28 689.558 L1296.83 689.558 L1297.39 689.558 L1297.95 689.558 L1298.51 689.558 L1299.07 689.558 L1299.63 689.558 L1300.19 689.558 L1300.75 689.558 L1301.31 689.558 L1301.87 689.558 L1302.43 689.558 L1302.99 689.558 L1303.55 689.558 L1304.1 689.558 L1304.66 689.558 L1305.22 689.558 L1305.78 689.558 L1306.34 689.558 L1306.9 689.558 L1307.46 689.558 L1308.02 689.558 L1308.58 689.558 L1309.14 689.558 L1309.7 689.558 L1310.26 689.558 L1310.82 689.558 L1311.38 689.558 L1311.93 689.558 L1312.49 689.558 L1313.05 689.558 L1313.61 689.558 L1314.17 689.558 L1314.73 689.558 L1315.29 689.558 L1315.85 689.558 L1316.41 689.558 L1316.97 689.558 L1317.53 689.558 L1318.09 689.558 L1318.65 689.558 L1319.2 689.558 L1319.76 689.558 L1320.32 689.558 L1320.88 689.558 L1321.44 689.558 L1322 689.558 L1322.56 689.558 L1323.12 689.558 L1323.68 689.558 L1324.24 689.558 L1324.8 689.558 L1325.36 689.558 L1325.92 689.558 L1326.47 689.558 L1327.03 689.558 L1327.59 689.558 L1328.15 689.558 L1328.71 689.558 L1329.27 689.558 L1329.83 689.558 L1330.39 689.558 L1330.95 689.558 L1331.51 689.558 L1332.07 689.558 L1332.63 689.558 L1333.19 689.558 L1333.75 689.558 L1334.3 689.558 L1334.86 689.558 L1335.42 689.558 L1335.98 689.558 L1336.54 689.558 L1337.1 689.558 L1337.66 689.558 L1338.22 689.558 L1338.78 689.558 L1339.34 689.558 L1339.9 689.558 L1340.46 689.558 L1341.02 689.558 L1341.57 689.558 L1342.13 689.558 L1342.69 689.558 L1343.25 689.558 L1343.81 689.558 L1344.37 689.558 L1344.93 689.558 L1345.49 689.558 L1346.05 689.558 L1346.61 689.558 L1347.17 689.558 L1347.73 689.558 L1348.29 689.558 L1348.84 689.558 L1349.4 689.558 L1349.96 689.558 L1350.52 689.558 L1351.08 689.558 L1351.64 689.558 L1352.2 689.558 L1352.76 689.558 L1353.32 689.558 L1353.88 689.558 L1354.44 689.558 L1355 689.558 L1355.56 689.558 L1356.12 689.558 L1356.67 689.558 L1357.23 689.558 L1357.79 689.558 L1358.35 689.558 L1358.91 689.558 L1359.47 689.558 L1360.03 689.558 L1360.59 689.558 L1361.15 689.558 L1361.71 689.558 L1362.27 689.558 L1362.83 689.558 L1363.39 689.558 L1363.94 689.558 L1364.5 689.558 L1365.06 689.558 L1365.62 689.558 L1366.18 689.558 L1366.74 689.558 L1367.3 689.558 L1367.86 689.558 L1368.42 689.558 L1368.98 689.558 L1369.54 689.558 L1370.1 689.558 L1370.66 689.558 L1371.21 689.558 L1371.77 689.558 L1372.33 689.558 L1372.89 689.558 L1373.45 689.558 L1374.01 689.558 L1374.57 689.558 L1375.13 689.558 L1375.69 689.558 L1376.25 689.558 L1376.81 689.558 L1377.37 689.558 L1377.93 689.558 L1378.49 689.558 L1379.04 689.558 L1379.6 689.558 L1380.16 689.558 L1380.72 689.558 L1381.28 689.558 L1381.84 689.558 L1382.4 689.558 L1382.96 689.558 L1383.52 689.558 L1384.08 689.558 L1384.64 689.558 L1385.2 689.558 L1385.76 689.558 L1386.31 689.558 L1386.87 689.558 L1387.43 689.558 L1387.99 689.558 L1388.55 689.558 L1389.11 689.558 L1389.67 689.558 L1390.23 689.558 L1390.79 689.558 L1391.35 689.558 L1391.91 689.558 L1392.47 689.558 L1393.03 689.558 L1393.58 689.558 L1394.14 689.558 L1394.7 689.558 L1395.26 689.558 L1395.82 689.558 L1396.38 689.558 L1396.94 689.558 L1397.5 689.558 L1398.06 689.558 L1398.62 689.558 L1399.18 689.558 L1399.74 689.558 L1400.3 689.558 L1400.86 689.558 L1401.41 689.558 L1401.97 689.558 L1402.53 689.558 L1403.09 689.558 L1403.65 689.558 L1404.21 689.558 L1404.77 689.558 L1405.33 689.558 L1405.89 689.558 L1406.45 689.558 L1407.01 689.558 L1407.57 689.558 L1408.13 689.558 L1408.68 689.558 L1409.24 689.558 L1409.8 689.558 L1410.36 689.558 L1410.92 689.558 L1411.48 689.558 L1412.04 689.558 L1412.6 689.558 L1413.16 689.558 L1413.72 689.558 L1414.28 689.558 L1414.84 689.558 L1415.4 689.558 L1415.95 689.558 L1416.51 689.558 L1417.07 689.558 L1417.63 689.558 L1418.19 689.558 L1418.75 689.558 L1419.31 689.558 L1419.87 689.558 L1420.43 689.558 L1420.99 689.558 L1421.55 689.558 L1422.11 689.558 L1422.67 689.558 L1423.23 689.558 L1423.78 689.558 L1424.34 689.558 L1424.9 689.558 L1425.46 689.558 L1426.02 689.558 L1426.58 689.558 L1427.14 689.558 L1427.7 689.558 L1428.26 689.558 L1428.82 689.558 L1429.38 689.558 L1429.94 689.558 L1430.5 689.558 L1431.05 689.558 L1431.61 689.558 L1432.17 689.558 L1432.73 689.558 L1433.29 689.558 L1433.85 689.558 L1434.41 689.558 L1434.97 689.558 L1435.53 689.558 L1436.09 689.558 L1436.65 689.558 L1437.21 689.558 L1437.77 689.558 L1438.33 689.558 L1438.88 689.558 L1439.44 689.558 L1440 689.558 L1440.56 689.558 L1441.12 689.558 L1441.68 689.558 L1442.24 689.558 L1442.8 689.558 L1443.36 689.558 L1443.92 689.558 L1444.48 689.558 L1445.04 689.558 L1445.6 689.558 L1446.15 689.558 L1446.71 689.558 L1447.27 689.558 L1447.83 689.558 L1448.39 689.558 L1448.95 689.558 L1449.51 689.558 L1450.07 689.558 L1450.63 689.558 L1451.19 689.558 L1451.75 689.558 L1452.31 689.558 L1452.87 689.558 L1453.42 689.558 L1453.98 689.558 L1454.54 689.558 L1455.1 689.558 L1455.66 689.558 L1456.22 689.558 L1456.78 689.558 L1457.34 689.558 L1457.9 689.558 L1458.46 689.558 L1459.02 689.558 L1459.58 689.558 L1460.14 689.558 L1460.7 689.558 L1461.25 689.558 L1461.81 689.558 L1462.37 689.558 L1462.93 689.558 L1463.49 689.558 L1464.05 689.558 L1464.61 689.558 L1465.17 689.558 L1465.73 689.558 L1466.29 689.558 L1466.85 689.558 L1467.41 689.558 L1467.97 689.558 L1468.52 689.558 L1469.08 689.558 L1469.64 689.558 L1470.2 689.558 L1470.76 689.558 L1471.32 689.558 L1471.88 689.558 L1472.44 689.558 L1473 689.558 L1473.56 689.558 L1474.12 689.558 L1474.68 689.558 L1475.24 689.558 L1475.79 689.558 L1476.35 689.558 L1476.91 689.558 L1477.47 689.558 L1478.03 689.558 L1478.59 689.558 L1479.15 689.558 L1479.71 689.558 L1480.27 689.558 L1480.83 689.558 L1481.39 689.558 L1481.95 689.558 L1482.51 689.558 L1483.07 689.558 L1483.62 689.558 L1484.18 689.558 L1484.74 689.558 L1485.3 689.558 L1485.86 689.558 L1486.42 689.558 L1486.98 689.558 L1487.54 689.558 L1488.1 689.558 L1488.66 689.558 L1489.22 689.558 L1489.78 689.558 L1490.34 689.558 L1490.89 689.558 L1491.45 689.558 L1492.01 689.558 L1492.57 689.558 L1493.13 689.558 L1493.69 689.558 L1494.25 689.558 L1494.81 689.558 L1495.37 689.558 L1495.93 689.558 L1496.49 689.558 L1497.05 689.558 L1497.61 689.558 L1498.16 689.558 L1498.72 689.558 L1499.28 689.558 L1499.84 689.558 L1500.4 689.558 L1500.96 689.558 L1501.52 689.558 L1502.08 689.558 L1502.64 689.558 L1503.2 689.558 L1503.76 689.558 L1504.32 689.558 L1504.88 689.558 L1505.44 689.558 L1505.99 689.558 L1506.55 689.558 L1507.11 689.558 L1507.67 689.558 L1508.23 689.558 L1508.79 689.558 L1509.35 689.558 L1509.91 689.558 L1510.47 689.558 L1511.03 689.558 L1511.59 689.558 L1512.15 689.558 L1512.71 689.558 L1513.26 689.558 L1513.82 689.558 L1514.38 689.558 L1514.94 689.558 L1515.5 689.558 L1516.06 689.558 L1516.62 689.558 L1517.18 689.558 L1517.74 689.558 L1518.3 689.558 L1518.86 689.558 L1519.42 689.558 L1519.98 689.558 L1520.53 689.558 L1521.09 689.558 L1521.65 689.558 L1522.21 689.558 L1522.77 689.558 L1523.33 689.558 L1523.89 689.558 L1524.45 689.558 L1525.01 689.558 L1525.57 689.558 L1526.13 689.558 L1526.69 689.558 L1527.25 689.558 L1527.81 689.558 L1528.36 689.558 L1528.92 689.558 L1529.48 689.558 L1530.04 689.558 L1530.6 689.558 L1531.16 689.558 L1531.72 689.558 L1532.28 689.558 L1532.84 689.558 L1533.4 689.558 L1533.96 689.558 L1534.52 689.558 L1535.08 689.558 L1535.63 689.558 L1536.19 689.558 L1536.75 689.558 L1537.31 689.558 L1537.87 689.558 L1538.43 689.558 L1538.99 689.558 L1539.55 689.558 L1540.11 689.558 L1540.67 689.558 L1541.23 689.558 L1541.79 689.558 L1542.35 689.558 L1542.9 689.558 L1543.46 689.558 L1544.02 689.558 L1544.58 689.558 L1545.14 689.558 L1545.7 689.558 L1546.26 689.558 L1546.82 689.558 L1547.38 689.558 L1547.94 689.558 L1548.5 689.558 L1549.06 689.558 L1549.62 689.558 L1550.18 689.558 L1550.73 689.558 L1551.29 689.558 L1551.85 689.558 L1552.41 689.558 L1552.97 689.558 L1553.53 689.558 L1554.09 689.558 L1554.65 689.558 L1555.21 689.558 L1555.77 689.558 L1556.33 689.558 L1556.89 689.558 L1557.45 689.558 L1558 689.558 L1558.56 689.558 L1559.12 689.558 L1559.68 689.558 L1560.24 689.558 L1560.8 689.558 L1561.36 689.558 L1561.92 689.558 L1562.48 689.558 L1563.04 689.558 L1563.6 689.558 L1564.16 689.558 L1564.72 689.558 L1565.28 689.558 L1565.83 689.558 L1566.39 689.558 L1566.95 689.558 L1567.51 689.558 L1568.07 689.558 L1568.63 689.558 L1569.19 689.558 L1569.75 689.558 L1570.31 689.558 L1570.87 689.558 L1571.43 689.558 L1571.99 689.558 L1572.55 689.558 L1573.1 689.558 L1573.66 689.558 L1574.22 689.558 L1574.78 689.558 L1575.34 689.558 L1575.9 689.558 L1576.46 689.558 L1577.02 689.558 L1577.58 689.558 L1578.14 689.558 L1578.7 689.558 L1579.26 689.558 L1579.82 689.558 L1580.37 689.558 L1580.93 689.558 L1581.49 689.558 L1582.05 689.558 L1582.61 689.558 L1583.17 689.558 L1583.73 689.558 L1584.29 689.558 L1584.85 689.558 L1585.41 689.558 L1585.97 689.558 L1586.53 689.558 L1587.09 689.558 L1587.65 689.558 L1588.2 689.558 L1588.76 689.558 L1589.32 689.558 L1589.88 689.558 L1590.44 689.558 L1591 689.558 L1591.56 689.558 L1592.12 689.558 L1592.68 689.558 L1593.24 689.558 L1593.8 689.558 L1594.36 689.558 L1594.92 689.558 L1595.47 689.558 L1596.03 689.558 L1596.59 689.558 L1597.15 689.558 L1597.71 689.558 L1598.27 689.558 L1598.83 689.558 L1599.39 689.558 L1599.95 689.558 L1600.51 689.558 L1601.07 689.558 L1601.63 689.558 L1602.19 689.558 L1602.74 689.558 L1603.3 689.558 L1603.86 689.558 L1604.42 689.558 L1604.98 689.558 L1605.54 689.558 L1606.1 689.558 L1606.66 689.558 L1607.22 689.558 L1607.78 689.558 L1608.34 689.558 L1608.9 689.558 L1609.46 689.558 L1610.02 689.558 L1610.57 689.558 L1611.13 689.558 L1611.69 689.558 L1612.25 689.558 L1612.81 689.558 L1613.37 689.558 L1613.93 689.558 L1614.49 689.558 L1615.05 689.558 L1615.61 689.558 L1616.17 689.558 L1616.73 689.558 L1617.29 689.558 L1617.84 689.558 L1618.4 689.558 L1618.96 689.558 L1619.52 689.558 L1620.08 689.558 L1620.64 689.558 L1621.2 689.558 L1621.76 689.558 L1622.32 689.558 L1622.88 689.558 L1623.44 689.558 L1624 689.558 L1624.56 689.558 L1625.11 689.558 L1625.67 689.558 L1626.23 689.558 L1626.79 689.558 L1627.35 689.558 L1627.91 689.558 L1628.47 689.558 L1629.03 689.558 L1629.59 689.558 L1630.15 689.558 L1630.71 689.558 L1631.27 689.558 L1631.83 689.558 L1632.39 689.558 L1632.94 689.558 L1633.5 689.558 L1634.06 689.558 L1634.62 689.558 L1635.18 689.558 L1635.74 689.558 L1636.3 689.558 L1636.86 689.558 L1637.42 689.558 L1637.98 689.558 L1638.54 689.558 L1639.1 689.558 L1639.66 689.558 L1640.21 689.558 L1640.77 689.558 L1641.33 689.558 L1641.89 689.558 L1642.45 689.558 L1643.01 689.558 L1643.57 689.558 L1644.13 689.558 L1644.69 689.558 L1645.25 689.558 L1645.81 689.558 L1646.37 689.558 L1646.93 689.558 L1647.48 689.558 L1648.04 689.558 L1648.6 689.558 L1649.16 689.558 L1649.72 689.558 L1650.28 689.558 L1650.84 689.558 L1651.4 689.558 L1651.96 689.558 L1652.52 689.558 L1653.08 689.558 L1653.64 689.558 L1654.2 689.558 L1654.76 689.558 L1655.31 689.558 L1655.87 689.558 L1656.43 689.558 L1656.99 689.558 L1657.55 689.558 L1658.11 689.558 L1658.67 689.558 L1659.23 689.558 L1659.79 689.558 L1660.35 689.558 L1660.91 689.558 L1661.47 689.558 L1662.03 689.558 L1662.58 689.558 L1663.14 689.558 L1663.7 689.558 L1664.26 689.558 L1664.82 689.558 L1665.38 689.558 L1665.94 689.558 L1666.5 689.558 L1667.06 689.558 L1667.62 689.558 L1668.18 689.558 L1668.74 689.558 L1669.3 689.558 L1669.85 689.558 L1670.41 689.558 L1670.97 689.558 L1671.53 689.558 L1672.09 689.558 L1672.65 689.558 L1673.21 689.558 L1673.77 689.558 L1674.33 689.558 L1674.89 689.558 L1675.45 689.558 L1676.01 689.558 L1676.57 689.558 L1677.13 689.558 L1677.68 689.558 L1678.24 689.558 L1678.8 689.558 L1679.36 689.558 L1679.92 689.558 L1680.48 689.558 L1681.04 689.558 L1681.6 689.558 L1682.16 689.558 L1682.72 689.558 L1683.28 689.558 L1683.84 689.558 L1684.4 689.558 L1684.95 689.558 L1685.51 689.558 L1686.07 689.558 L1686.63 689.558 L1687.19 689.558 L1687.75 689.558 L1688.31 689.558 L1688.87 689.558 L1689.43 689.558 L1689.99 689.558 L1690.55 689.558 L1691.11 689.558 L1691.67 689.558 L1692.23 689.558 L1692.78 689.558 L1693.34 689.558 L1693.9 689.558 L1694.46 689.558 L1695.02 689.558 L1695.58 689.558 L1696.14 689.558 L1696.7 689.558 L1697.26 689.558 L1697.82 689.558 L1698.38 689.558 L1698.94 689.558 L1699.5 689.558 L1700.05 689.558 L1700.61 689.558 L1701.17 689.558 L1701.73 689.558 L1702.29 689.558 L1702.85 689.558 L1703.41 689.558 L1703.97 689.558 L1704.53 689.558 L1705.09 689.558 L1705.65 689.558 L1706.21 689.558 L1706.77 689.558 L1707.32 689.558 L1707.88 689.558 L1708.44 689.558 L1709 689.558 L1709.56 689.558 L1710.12 689.558 L1710.68 689.558 L1711.24 689.558 L1711.8 689.558 L1712.36 689.558 L1712.92 689.558 L1713.48 689.558 L1714.04 689.558 L1714.6 689.558 L1715.15 689.558 L1715.71 689.558 L1716.27 689.558 L1716.83 689.558 L1717.39 689.558 L1717.95 689.558 L1718.51 689.558 L1719.07 689.558 L1719.63 689.558 L1720.19 689.558 L1720.75 689.558 L1721.31 689.558 L1721.87 689.558 L1722.42 689.558 L1722.98 689.558 L1723.54 689.558 L1724.1 689.558 L1724.66 689.558 L1725.22 689.558 L1725.78 689.558 L1726.34 689.558 L1726.9 689.558 L1727.46 689.558 L1728.02 689.558 L1728.58 689.558 L1729.14 689.558 L1729.69 689.558 L1730.25 689.558 L1730.81 689.558 L1731.37 689.558 L1731.93 689.558 L1732.49 689.558 L1733.05 689.558 L1733.61 689.558 L1734.17 689.558 L1734.73 689.558 L1735.29 689.558 L1735.85 689.558 L1736.41 689.558 L1736.97 689.558 L1737.52 689.558 L1738.08 689.558 L1738.64 689.558 L1739.2 689.558 L1739.76 689.558 L1740.32 689.558 L1740.88 689.558 L1741.44 689.558 L1742 689.558 L1742.56 689.558 L1743.12 689.558 L1743.68 689.558 L1744.24 689.558 L1744.79 689.558 L1745.35 689.558 L1745.91 689.558 L1746.47 689.558 L1747.03 689.558 L1747.59 689.558 L1748.15 689.558 L1748.71 689.558 L1749.27 689.558 L1749.83 689.558 L1750.39 689.558 L1750.95 689.558 L1751.51 689.558 L1752.06 689.558 L1752.62 689.558 L1753.18 689.558 L1753.74 689.558 L1754.3 689.558 L1754.86 689.558 L1755.42 689.558 L1755.98 689.558 L1756.54 689.558 L1757.1 689.558 L1757.66 689.558 L1758.22 689.558 L1758.78 689.558 L1759.34 689.558 L1759.89 689.558 L1760.45 689.558 L1761.01 689.558 L1761.57 689.558 L1762.13 689.558 L1762.69 689.558 L1763.25 689.558 L1763.81 689.558 L1764.37 689.558 L1764.93 689.558 L1765.49 689.558 L1766.05 689.558 L1766.61 689.558 L1767.16 689.558 L1767.72 689.558 L1768.28 689.558 L1768.84 689.558 L1769.4 689.558 L1769.96 689.558 L1770.52 689.558 L1771.08 689.558 L1771.64 689.558 L1772.2 689.558 L1772.76 689.558 L1773.32 689.558 L1773.88 689.558 L1774.43 689.558 L1774.99 689.558 L1775.55 689.558 L1776.11 689.558 L1776.67 689.558 L1777.23 689.558 L1777.79 689.558 L1778.35 689.558 L1778.91 689.558 L1779.47 689.558 L1780.03 689.558 L1780.59 689.558 L1781.15 689.558 L1781.71 689.558 L1782.26 689.558 L1782.82 689.558 L1783.38 689.558 L1783.94 689.558 L1784.5 689.558 L1785.06 689.558 L1785.62 689.558 L1786.18 689.558 L1786.74 689.558 L1787.3 689.558 L1787.86 689.558 L1788.42 689.558 L1788.98 689.558 L1789.53 689.558 L1790.09 689.558 L1790.65 689.558 L1791.21 689.558 L1791.77 689.558 L1792.33 689.558 L1792.89 689.558 L1793.45 689.558 L1794.01 689.558 L1794.57 689.558 L1795.13 689.558 L1795.69 689.558 L1796.25 689.558 L1796.8 689.558 L1797.36 689.558 L1797.92 689.558 L1798.48 689.558 L1799.04 689.558 L1799.6 689.558 L1800.16 689.558 L1800.72 689.558 L1801.28 689.558 L1801.84 689.558 L1802.4 689.558 L1802.96 689.558 L1803.52 689.558 L1804.08 689.558 L1804.63 689.558 L1805.19 689.558 L1805.75 689.558 L1806.31 689.558 L1806.87 689.558 L1807.43 689.558 L1807.99 689.558 L1808.55 689.558 L1809.11 689.558 L1809.67 689.558 L1810.23 689.558 L1810.79 689.558 L1811.35 689.558 L1811.9 689.558 L1812.46 689.558 L1813.02 689.558 L1813.58 689.558 L1814.14 689.558 L1814.7 689.558 L1815.26 689.558 L1815.82 689.558 L1816.38 689.558 L1816.94 689.558 L1817.5 689.558 L1818.06 689.558 L1818.62 689.558 L1819.18 689.558 L1819.73 689.558 L1820.29 689.558 L1820.85 689.558 L1821.41 689.558 L1821.97 689.558 L1822.53 689.558 L1823.09 689.558 L1823.65 689.558 L1824.21 689.558 L1824.77 689.558 L1825.33 689.558 L1825.89 689.558 L1826.45 689.558 L1827 689.558 L1827.56 689.558 L1828.12 689.558 L1828.68 689.558 L1829.24 689.558 L1829.8 689.558 L1830.36 689.558 L1830.92 689.558 L1831.48 689.558 L1832.04 689.558 L1832.6 689.558 L1833.16 689.558 L1833.72 689.558 L1834.27 689.558 L1834.83 689.558 L1835.39 689.558 L1835.95 689.558 L1836.51 689.558 L1837.07 689.558 L1837.63 689.558 L1838.19 689.558 L1838.19 681.888 L1837.63 681.888 L1837.07 681.888 L1836.51 681.888 L1835.95 681.888 L1835.39 681.888 L1834.83 681.888 L1834.27 681.888 L1833.72 681.888 L1833.16 681.888 L1832.6 681.888 L1832.04 681.888 L1831.48 681.888 L1830.92 681.888 L1830.36 681.888 L1829.8 681.888 L1829.24 681.888 L1828.68 681.888 L1828.12 681.888 L1827.56 681.888 L1827 681.888 L1826.45 681.888 L1825.89 681.888 L1825.33 681.888 L1824.77 681.888 L1824.21 681.888 L1823.65 681.888 L1823.09 681.888 L1822.53 681.888 L1821.97 681.888 L1821.41 681.888 L1820.85 681.888 L1820.29 681.888 L1819.73 681.888 L1819.18 681.888 L1818.62 681.888 L1818.06 681.888 L1817.5 681.888 L1816.94 681.888 L1816.38 681.888 L1815.82 681.888 L1815.26 681.888 L1814.7 681.888 L1814.14 681.888 L1813.58 681.888 L1813.02 681.888 L1812.46 681.888 L1811.9 681.888 L1811.35 681.888 L1810.79 681.888 L1810.23 681.888 L1809.67 681.888 L1809.11 681.888 L1808.55 681.888 L1807.99 681.888 L1807.43 681.888 L1806.87 681.888 L1806.31 681.888 L1805.75 681.888 L1805.19 681.888 L1804.63 681.888 L1804.08 681.888 L1803.52 681.888 L1802.96 681.888 L1802.4 681.888 L1801.84 681.888 L1801.28 681.888 L1800.72 681.888 L1800.16 681.888 L1799.6 681.888 L1799.04 681.888 L1798.48 681.888 L1797.92 681.888 L1797.36 681.888 L1796.8 681.888 L1796.25 681.888 L1795.69 681.888 L1795.13 681.888 L1794.57 681.888 L1794.01 681.888 L1793.45 681.888 L1792.89 681.888 L1792.33 681.888 L1791.77 681.888 L1791.21 681.888 L1790.65 681.888 L1790.09 681.888 L1789.53 681.888 L1788.98 681.888 L1788.42 681.888 L1787.86 681.888 L1787.3 681.888 L1786.74 681.888 L1786.18 681.888 L1785.62 681.888 L1785.06 681.888 L1784.5 681.888 L1783.94 681.888 L1783.38 681.888 L1782.82 681.888 L1782.26 681.888 L1781.71 681.888 L1781.15 681.888 L1780.59 681.888 L1780.03 681.888 L1779.47 681.888 L1778.91 681.888 L1778.35 681.888 L1777.79 681.888 L1777.23 681.888 L1776.67 681.888 L1776.11 681.888 L1775.55 681.888 L1774.99 681.888 L1774.43 681.888 L1773.88 681.888 L1773.32 681.888 L1772.76 681.888 L1772.2 681.888 L1771.64 681.888 L1771.08 681.888 L1770.52 681.888 L1769.96 681.888 L1769.4 681.888 L1768.84 681.888 L1768.28 681.888 L1767.72 681.888 L1767.16 681.888 L1766.61 681.888 L1766.05 681.888 L1765.49 681.888 L1764.93 681.888 L1764.37 681.888 L1763.81 681.888 L1763.25 681.888 L1762.69 681.888 L1762.13 681.888 L1761.57 681.888 L1761.01 681.888 L1760.45 681.888 L1759.89 681.888 L1759.34 681.888 L1758.78 681.888 L1758.22 681.888 L1757.66 681.888 L1757.1 681.888 L1756.54 681.888 L1755.98 681.888 L1755.42 681.888 L1754.86 681.888 L1754.3 681.888 L1753.74 681.888 L1753.18 681.888 L1752.62 681.888 L1752.06 681.888 L1751.51 681.888 L1750.95 681.888 L1750.39 681.888 L1749.83 681.888 L1749.27 681.888 L1748.71 681.888 L1748.15 681.888 L1747.59 681.888 L1747.03 681.888 L1746.47 681.888 L1745.91 681.888 L1745.35 681.888 L1744.79 681.888 L1744.24 681.888 L1743.68 681.888 L1743.12 681.888 L1742.56 681.888 L1742 681.888 L1741.44 681.888 L1740.88 681.888 L1740.32 681.888 L1739.76 681.888 L1739.2 681.888 L1738.64 681.888 L1738.08 681.888 L1737.52 681.888 L1736.97 681.888 L1736.41 681.888 L1735.85 681.888 L1735.29 681.888 L1734.73 681.888 L1734.17 681.888 L1733.61 681.888 L1733.05 681.888 L1732.49 681.888 L1731.93 681.888 L1731.37 681.888 L1730.81 681.888 L1730.25 681.888 L1729.69 681.888 L1729.14 681.888 L1728.58 681.888 L1728.02 681.888 L1727.46 681.888 L1726.9 681.888 L1726.34 681.888 L1725.78 681.888 L1725.22 681.888 L1724.66 681.888 L1724.1 681.888 L1723.54 681.888 L1722.98 681.888 L1722.42 681.888 L1721.87 681.888 L1721.31 681.888 L1720.75 681.888 L1720.19 681.888 L1719.63 681.888 L1719.07 681.888 L1718.51 681.888 L1717.95 681.888 L1717.39 681.888 L1716.83 681.888 L1716.27 681.888 L1715.71 681.888 L1715.15 681.888 L1714.6 681.888 L1714.04 681.888 L1713.48 681.888 L1712.92 681.888 L1712.36 681.888 L1711.8 681.888 L1711.24 681.888 L1710.68 681.888 L1710.12 681.888 L1709.56 681.888 L1709 681.888 L1708.44 681.888 L1707.88 681.888 L1707.32 681.888 L1706.77 681.888 L1706.21 681.888 L1705.65 681.888 L1705.09 681.888 L1704.53 681.888 L1703.97 681.888 L1703.41 681.888 L1702.85 681.888 L1702.29 681.888 L1701.73 681.888 L1701.17 681.888 L1700.61 681.888 L1700.05 681.888 L1699.5 681.888 L1698.94 681.888 L1698.38 681.888 L1697.82 681.888 L1697.26 681.888 L1696.7 681.888 L1696.14 681.888 L1695.58 681.888 L1695.02 681.888 L1694.46 681.888 L1693.9 681.888 L1693.34 681.888 L1692.78 681.888 L1692.23 681.888 L1691.67 681.888 L1691.11 681.888 L1690.55 681.888 L1689.99 681.888 L1689.43 681.888 L1688.87 681.888 L1688.31 681.888 L1687.75 681.888 L1687.19 681.888 L1686.63 681.888 L1686.07 681.888 L1685.51 681.888 L1684.95 681.888 L1684.4 681.888 L1683.84 681.888 L1683.28 681.888 L1682.72 681.888 L1682.16 681.888 L1681.6 681.888 L1681.04 681.888 L1680.48 681.888 L1679.92 681.888 L1679.36 681.888 L1678.8 681.888 L1678.24 681.888 L1677.68 681.888 L1677.13 681.888 L1676.57 681.888 L1676.01 681.888 L1675.45 681.888 L1674.89 681.888 L1674.33 681.888 L1673.77 681.888 L1673.21 681.888 L1672.65 681.888 L1672.09 681.888 L1671.53 681.888 L1670.97 681.888 L1670.41 681.888 L1669.85 681.888 L1669.3 681.888 L1668.74 681.888 L1668.18 681.888 L1667.62 681.888 L1667.06 681.888 L1666.5 681.888 L1665.94 681.888 L1665.38 681.888 L1664.82 681.888 L1664.26 681.888 L1663.7 681.888 L1663.14 681.888 L1662.58 681.888 L1662.03 681.888 L1661.47 681.888 L1660.91 681.888 L1660.35 681.888 L1659.79 681.888 L1659.23 681.888 L1658.67 681.888 L1658.11 681.888 L1657.55 681.888 L1656.99 681.888 L1656.43 681.888 L1655.87 681.888 L1655.31 681.888 L1654.76 681.888 L1654.2 681.888 L1653.64 681.888 L1653.08 681.888 L1652.52 681.888 L1651.96 681.888 L1651.4 681.888 L1650.84 681.888 L1650.28 681.888 L1649.72 681.888 L1649.16 681.888 L1648.6 681.888 L1648.04 681.888 L1647.48 681.888 L1646.93 681.888 L1646.37 681.888 L1645.81 681.888 L1645.25 681.888 L1644.69 681.888 L1644.13 681.888 L1643.57 681.888 L1643.01 681.888 L1642.45 681.888 L1641.89 681.888 L1641.33 681.888 L1640.77 681.888 L1640.21 681.888 L1639.66 681.888 L1639.1 681.888 L1638.54 681.888 L1637.98 681.888 L1637.42 681.888 L1636.86 681.888 L1636.3 681.888 L1635.74 681.888 L1635.18 681.888 L1634.62 681.888 L1634.06 681.888 L1633.5 681.888 L1632.94 681.888 L1632.39 681.888 L1631.83 681.888 L1631.27 681.888 L1630.71 681.888 L1630.15 681.888 L1629.59 681.888 L1629.03 681.888 L1628.47 681.888 L1627.91 681.888 L1627.35 681.888 L1626.79 681.888 L1626.23 681.888 L1625.67 681.888 L1625.11 681.888 L1624.56 681.888 L1624 681.888 L1623.44 681.888 L1622.88 681.888 L1622.32 681.888 L1621.76 681.888 L1621.2 681.888 L1620.64 681.888 L1620.08 681.888 L1619.52 681.888 L1618.96 681.888 L1618.4 681.888 L1617.84 681.888 L1617.29 681.888 L1616.73 681.888 L1616.17 681.888 L1615.61 681.888 L1615.05 681.888 L1614.49 681.888 L1613.93 681.888 L1613.37 681.888 L1612.81 681.888 L1612.25 681.888 L1611.69 681.888 L1611.13 681.888 L1610.57 681.888 L1610.02 681.888 L1609.46 681.888 L1608.9 681.888 L1608.34 681.888 L1607.78 681.888 L1607.22 681.888 L1606.66 681.888 L1606.1 681.888 L1605.54 681.888 L1604.98 681.888 L1604.42 681.888 L1603.86 681.888 L1603.3 681.888 L1602.74 681.888 L1602.19 681.888 L1601.63 681.888 L1601.07 681.888 L1600.51 681.888 L1599.95 681.888 L1599.39 681.888 L1598.83 681.888 L1598.27 681.888 L1597.71 681.888 L1597.15 681.888 L1596.59 681.888 L1596.03 681.888 L1595.47 681.888 L1594.92 681.888 L1594.36 681.888 L1593.8 681.888 L1593.24 681.888 L1592.68 681.888 L1592.12 681.888 L1591.56 681.888 L1591 681.888 L1590.44 681.888 L1589.88 681.888 L1589.32 681.888 L1588.76 681.888 L1588.2 681.888 L1587.65 681.888 L1587.09 681.888 L1586.53 681.888 L1585.97 681.888 L1585.41 681.888 L1584.85 681.888 L1584.29 681.888 L1583.73 681.888 L1583.17 681.888 L1582.61 681.888 L1582.05 681.888 L1581.49 681.888 L1580.93 681.888 L1580.37 681.888 L1579.82 681.888 L1579.26 681.888 L1578.7 681.888 L1578.14 681.888 L1577.58 681.888 L1577.02 681.888 L1576.46 681.888 L1575.9 681.888 L1575.34 681.888 L1574.78 681.888 L1574.22 681.888 L1573.66 681.888 L1573.1 681.888 L1572.55 681.888 L1571.99 681.888 L1571.43 681.888 L1570.87 681.888 L1570.31 681.888 L1569.75 681.888 L1569.19 681.888 L1568.63 681.888 L1568.07 681.888 L1567.51 681.888 L1566.95 681.888 L1566.39 681.888 L1565.83 681.888 L1565.28 681.888 L1564.72 681.888 L1564.16 681.888 L1563.6 681.888 L1563.04 681.888 L1562.48 681.888 L1561.92 681.888 L1561.36 681.888 L1560.8 681.888 L1560.24 681.888 L1559.68 681.888 L1559.12 681.888 L1558.56 681.888 L1558 681.888 L1557.45 681.888 L1556.89 681.888 L1556.33 681.888 L1555.77 681.888 L1555.21 681.888 L1554.65 681.888 L1554.09 681.888 L1553.53 681.888 L1552.97 681.888 L1552.41 681.888 L1551.85 681.888 L1551.29 681.888 L1550.73 681.888 L1550.18 681.888 L1549.62 681.888 L1549.06 681.888 L1548.5 681.888 L1547.94 681.888 L1547.38 681.888 L1546.82 681.888 L1546.26 681.888 L1545.7 681.888 L1545.14 681.888 L1544.58 681.888 L1544.02 681.888 L1543.46 681.888 L1542.9 681.888 L1542.35 681.888 L1541.79 681.888 L1541.23 681.888 L1540.67 681.888 L1540.11 681.888 L1539.55 681.888 L1538.99 681.888 L1538.43 681.888 L1537.87 681.888 L1537.31 681.888 L1536.75 681.888 L1536.19 681.888 L1535.63 681.888 L1535.08 681.888 L1534.52 681.888 L1533.96 681.888 L1533.4 681.888 L1532.84 681.888 L1532.28 681.888 L1531.72 681.888 L1531.16 681.888 L1530.6 681.888 L1530.04 681.888 L1529.48 681.888 L1528.92 681.888 L1528.36 681.888 L1527.81 681.888 L1527.25 681.888 L1526.69 681.888 L1526.13 681.888 L1525.57 681.888 L1525.01 681.888 L1524.45 681.888 L1523.89 681.888 L1523.33 681.888 L1522.77 681.888 L1522.21 681.888 L1521.65 681.888 L1521.09 681.888 L1520.53 681.888 L1519.98 681.888 L1519.42 681.888 L1518.86 681.888 L1518.3 681.888 L1517.74 681.888 L1517.18 681.888 L1516.62 681.888 L1516.06 681.888 L1515.5 681.888 L1514.94 681.888 L1514.38 681.888 L1513.82 681.888 L1513.26 681.888 L1512.71 681.888 L1512.15 681.888 L1511.59 681.888 L1511.03 681.888 L1510.47 681.888 L1509.91 681.888 L1509.35 681.888 L1508.79 681.888 L1508.23 681.888 L1507.67 681.888 L1507.11 681.888 L1506.55 681.888 L1505.99 681.888 L1505.44 681.888 L1504.88 681.888 L1504.32 681.888 L1503.76 681.888 L1503.2 681.888 L1502.64 681.888 L1502.08 681.888 L1501.52 681.888 L1500.96 681.888 L1500.4 681.888 L1499.84 681.888 L1499.28 681.888 L1498.72 681.888 L1498.16 681.888 L1497.61 681.888 L1497.05 681.888 L1496.49 681.888 L1495.93 681.888 L1495.37 681.888 L1494.81 681.888 L1494.25 681.888 L1493.69 681.888 L1493.13 681.888 L1492.57 681.888 L1492.01 681.888 L1491.45 681.888 L1490.89 681.888 L1490.34 681.888 L1489.78 681.888 L1489.22 681.888 L1488.66 681.888 L1488.1 681.888 L1487.54 681.888 L1486.98 681.888 L1486.42 681.888 L1485.86 681.888 L1485.3 681.888 L1484.74 681.888 L1484.18 681.888 L1483.62 681.888 L1483.07 681.888 L1482.51 681.888 L1481.95 681.888 L1481.39 681.888 L1480.83 681.888 L1480.27 681.888 L1479.71 681.888 L1479.15 681.888 L1478.59 681.888 L1478.03 681.888 L1477.47 681.888 L1476.91 681.888 L1476.35 681.888 L1475.79 681.888 L1475.24 681.888 L1474.68 681.888 L1474.12 681.888 L1473.56 681.888 L1473 681.888 L1472.44 681.888 L1471.88 681.888 L1471.32 681.888 L1470.76 681.888 L1470.2 681.888 L1469.64 681.888 L1469.08 681.888 L1468.52 681.888 L1467.97 681.888 L1467.41 681.888 L1466.85 681.888 L1466.29 681.888 L1465.73 681.888 L1465.17 681.888 L1464.61 681.888 L1464.05 681.888 L1463.49 681.888 L1462.93 681.888 L1462.37 681.888 L1461.81 681.888 L1461.25 681.888 L1460.7 681.888 L1460.14 681.888 L1459.58 681.888 L1459.02 681.888 L1458.46 681.888 L1457.9 681.888 L1457.34 681.888 L1456.78 681.888 L1456.22 681.888 L1455.66 681.888 L1455.1 681.888 L1454.54 681.888 L1453.98 681.888 L1453.42 681.888 L1452.87 681.888 L1452.31 681.888 L1451.75 681.888 L1451.19 681.888 L1450.63 681.888 L1450.07 681.888 L1449.51 681.888 L1448.95 681.888 L1448.39 681.888 L1447.83 681.888 L1447.27 681.888 L1446.71 681.888 L1446.15 681.888 L1445.6 681.888 L1445.04 681.888 L1444.48 681.888 L1443.92 681.888 L1443.36 681.888 L1442.8 681.888 L1442.24 681.888 L1441.68 681.888 L1441.12 681.888 L1440.56 681.888 L1440 681.888 L1439.44 681.888 L1438.88 681.888 L1438.33 681.888 L1437.77 681.888 L1437.21 681.888 L1436.65 681.888 L1436.09 681.888 L1435.53 681.888 L1434.97 681.888 L1434.41 681.888 L1433.85 681.888 L1433.29 681.888 L1432.73 681.888 L1432.17 681.888 L1431.61 681.888 L1431.05 681.888 L1430.5 681.888 L1429.94 681.888 L1429.38 681.888 L1428.82 681.888 L1428.26 681.888 L1427.7 681.888 L1427.14 681.888 L1426.58 681.888 L1426.02 681.888 L1425.46 681.888 L1424.9 681.888 L1424.34 681.888 L1423.78 681.888 L1423.23 681.888 L1422.67 681.888 L1422.11 681.888 L1421.55 681.888 L1420.99 681.888 L1420.43 681.888 L1419.87 681.888 L1419.31 681.888 L1418.75 681.888 L1418.19 681.888 L1417.63 681.888 L1417.07 681.888 L1416.51 681.888 L1415.95 681.888 L1415.4 681.888 L1414.84 681.888 L1414.28 681.888 L1413.72 681.888 L1413.16 681.888 L1412.6 681.888 L1412.04 681.888 L1411.48 681.888 L1410.92 681.888 L1410.36 681.888 L1409.8 681.888 L1409.24 681.888 L1408.68 681.888 L1408.13 681.888 L1407.57 681.888 L1407.01 681.888 L1406.45 681.888 L1405.89 681.888 L1405.33 681.888 L1404.77 681.888 L1404.21 681.888 L1403.65 681.888 L1403.09 681.888 L1402.53 681.888 L1401.97 681.888 L1401.41 681.888 L1400.86 681.888 L1400.3 681.888 L1399.74 681.888 L1399.18 681.888 L1398.62 681.888 L1398.06 681.888 L1397.5 681.888 L1396.94 681.888 L1396.38 681.888 L1395.82 681.888 L1395.26 681.888 L1394.7 681.888 L1394.14 681.888 L1393.58 681.888 L1393.03 681.888 L1392.47 681.888 L1391.91 681.888 L1391.35 681.888 L1390.79 681.888 L1390.23 681.888 L1389.67 681.888 L1389.11 681.888 L1388.55 681.888 L1387.99 681.888 L1387.43 681.888 L1386.87 681.888 L1386.31 681.888 L1385.76 681.888 L1385.2 681.888 L1384.64 681.888 L1384.08 681.888 L1383.52 681.888 L1382.96 681.888 L1382.4 681.888 L1381.84 681.888 L1381.28 681.888 L1380.72 681.888 L1380.16 681.888 L1379.6 681.888 L1379.04 681.888 L1378.49 681.888 L1377.93 681.888 L1377.37 681.888 L1376.81 681.888 L1376.25 681.888 L1375.69 681.888 L1375.13 681.888 L1374.57 681.888 L1374.01 681.888 L1373.45 681.888 L1372.89 681.888 L1372.33 681.888 L1371.77 681.888 L1371.21 681.888 L1370.66 681.888 L1370.1 681.888 L1369.54 681.888 L1368.98 681.888 L1368.42 681.888 L1367.86 681.888 L1367.3 681.888 L1366.74 681.888 L1366.18 681.888 L1365.62 681.888 L1365.06 681.888 L1364.5 681.888 L1363.94 681.888 L1363.39 681.888 L1362.83 681.888 L1362.27 681.888 L1361.71 681.888 L1361.15 681.888 L1360.59 681.888 L1360.03 681.888 L1359.47 681.888 L1358.91 681.888 L1358.35 681.888 L1357.79 681.888 L1357.23 681.888 L1356.67 681.888 L1356.12 681.888 L1355.56 681.888 L1355 681.888 L1354.44 681.888 L1353.88 681.888 L1353.32 681.888 L1352.76 681.888 L1352.2 681.888 L1351.64 681.888 L1351.08 681.888 L1350.52 681.888 L1349.96 681.888 L1349.4 681.888 L1348.84 681.888 L1348.29 681.888 L1347.73 681.888 L1347.17 681.888 L1346.61 681.888 L1346.05 681.888 L1345.49 681.888 L1344.93 681.888 L1344.37 681.888 L1343.81 681.888 L1343.25 681.888 L1342.69 681.888 L1342.13 681.888 L1341.57 681.888 L1341.02 681.888 L1340.46 681.888 L1339.9 681.888 L1339.34 681.888 L1338.78 681.888 L1338.22 681.888 L1337.66 681.888 L1337.1 681.888 L1336.54 681.888 L1335.98 681.888 L1335.42 681.888 L1334.86 681.888 L1334.3 681.888 L1333.75 681.888 L1333.19 681.888 L1332.63 681.888 L1332.07 681.888 L1331.51 681.888 L1330.95 681.888 L1330.39 681.888 L1329.83 681.888 L1329.27 681.888 L1328.71 681.888 L1328.15 681.888 L1327.59 681.888 L1327.03 681.888 L1326.47 681.888 L1325.92 681.888 L1325.36 681.888 L1324.8 681.888 L1324.24 681.888 L1323.68 681.888 L1323.12 681.888 L1322.56 681.888 L1322 681.888 L1321.44 681.888 L1320.88 681.888 L1320.32 681.888 L1319.76 681.888 L1319.2 681.888 L1318.65 681.888 L1318.09 681.888 L1317.53 681.888 L1316.97 681.888 L1316.41 681.888 L1315.85 681.888 L1315.29 681.888 L1314.73 681.888 L1314.17 681.888 L1313.61 681.888 L1313.05 681.888 L1312.49 681.888 L1311.93 681.888 L1311.38 681.888 L1310.82 681.888 L1310.26 681.888 L1309.7 681.888 L1309.14 681.888 L1308.58 681.888 L1308.02 681.888 L1307.46 681.888 L1306.9 681.888 L1306.34 681.888 L1305.78 681.888 L1305.22 681.888 L1304.66 681.888 L1304.1 681.888 L1303.55 681.888 L1302.99 681.888 L1302.43 681.888 L1301.87 681.888 L1301.31 681.888 L1300.75 681.888 L1300.19 681.888 L1299.63 681.888 L1299.07 681.888 L1298.51 681.888 L1297.95 681.888 L1297.39 681.888 L1296.83 681.888 L1296.28 681.888 L1295.72 681.888 L1295.16 681.888 L1294.6 681.888 L1294.04 681.888 L1293.48 681.888 L1292.92 681.888 L1292.36 681.888 L1291.8 681.888 L1291.24 681.888 L1290.68 681.888 L1290.12 681.888 L1289.56 681.888 L1289 681.888 L1288.45 681.888 L1287.89 681.888 L1287.33 681.888 L1286.77 681.888 L1286.21 681.888 L1285.65 681.888 L1285.09 681.888 L1284.53 681.888 L1283.97 681.888 L1283.41 681.888 L1282.85 681.888 L1282.29 681.888 L1281.73 681.888 L1281.18 681.888 L1280.62 681.888 L1280.06 681.888 L1279.5 681.888 L1278.94 681.888 L1278.38 681.888 L1277.82 681.888 L1277.26 681.888 L1276.7 681.888 L1276.14 681.888 L1275.58 681.888 L1275.02 681.888 L1274.46 681.888 L1273.91 681.888 L1273.35 681.888 L1272.79 681.888 L1272.23 681.888 L1271.67 681.888 L1271.11 681.888 L1270.55 681.888 L1269.99 681.888 L1269.43 681.888 L1268.87 681.888 L1268.31 681.888 L1267.75 681.888 L1267.19 681.888 L1266.63 681.888 L1266.08 681.888 L1265.52 681.888 L1264.96 681.888 L1264.4 681.888 L1263.84 681.888 L1263.28 681.888 L1262.72 681.888 L1262.16 681.888 L1261.6 681.888 L1261.04 681.888 L1260.48 681.888 L1259.92 681.888 L1259.36 681.888 L1258.81 681.888 L1258.25 681.888 L1257.69 681.888 L1257.13 681.888 L1256.57 681.888 L1256.01 681.888 L1255.45 681.888 L1254.89 681.888 L1254.33 681.888 L1253.77 681.888 L1253.21 681.888 L1252.65 681.888 L1252.09 681.888 L1251.54 681.888 L1250.98 681.888 L1250.42 681.888 L1249.86 681.888 L1249.3 681.888 L1248.74 681.888 L1248.18 681.888 L1247.62 681.888 L1247.06 681.888 L1246.5 681.888 L1245.94 681.888 L1245.38 681.888 L1244.82 681.888 L1244.26 681.888 L1243.71 681.888 L1243.15 681.888 L1242.59 681.888 L1242.03 681.888 L1241.47 681.888 L1240.91 681.888 L1240.35 681.888 L1239.79 681.888 L1239.23 681.888 L1238.67 681.888 L1238.11 681.888 L1237.55 681.888 L1236.99 681.888 L1236.44 681.888 L1235.88 681.888 L1235.32 681.888 L1234.76 681.888 L1234.2 681.888 L1233.64 681.888 L1233.08 681.888 L1232.52 681.888 L1231.96 681.888 L1231.4 681.888 L1230.84 681.888 L1230.28 681.888 L1229.72 681.888 L1229.17 681.888 L1228.61 681.888 L1228.05 681.888 L1227.49 681.888 L1226.93 681.888 L1226.37 681.888 L1225.81 681.888 L1225.25 681.888 L1224.69 681.888 L1224.13 681.888 L1223.57 681.888 L1223.01 681.888 L1222.45 681.888 L1221.89 681.888 L1221.34 681.888 L1220.78 681.888 L1220.22 681.888 L1219.66 681.888 L1219.1 681.888 L1218.54 681.888 L1217.98 681.888 L1217.42 681.888 L1216.86 681.888 L1216.3 681.888 L1215.74 681.888 L1215.18 681.888 L1214.62 681.888 L1214.07 681.888 L1213.51 681.888 L1212.95 681.888 L1212.39 681.888 L1211.83 681.888 L1211.27 681.888 L1210.71 681.888 L1210.15 681.888 L1209.59 681.888 L1209.03 681.888 L1208.47 681.888 L1207.91 681.888 L1207.35 681.888 L1206.8 681.888 L1206.24 681.888 L1205.68 681.888 L1205.12 681.888 L1204.56 681.888 L1204 681.888 L1203.44 681.888 L1202.88 681.888 L1202.32 681.888 L1201.76 681.888 L1201.2 681.888 L1200.64 681.888 L1200.08 681.888 L1199.52 681.888 L1198.97 681.888 L1198.41 681.888 L1197.85 681.888 L1197.29 681.888 L1196.73 681.888 L1196.17 681.888 L1195.61 681.888 L1195.05 681.888 L1194.49 681.888 L1193.93 681.888 L1193.37 681.888 L1192.81 681.888 L1192.25 681.888 L1191.7 681.888 L1191.14 681.888 L1190.58 681.888 L1190.02 681.888 L1189.46 681.888 L1188.9 681.888 L1188.34 681.888 L1187.78 681.888 L1187.22 681.888 L1186.66 681.888 L1186.1 681.888 L1185.54 681.888 L1184.98 681.888 L1184.43 681.888 L1183.87 681.888 L1183.31 681.888 L1182.75 681.888 L1182.19 681.888 L1181.63 681.888 L1181.07 681.888 L1180.51 681.888 L1179.95 681.888 L1179.39 681.888 L1178.83 681.888 L1178.27 681.888 L1177.71 681.888 L1177.15 681.888 L1176.6 681.888 L1176.04 681.888 L1175.48 681.888 L1174.92 681.888 L1174.36 681.888 L1173.8 681.888 L1173.24 681.888 L1172.68 681.888 L1172.12 681.888 L1171.56 681.888 L1171 681.888 L1170.44 681.888 L1169.88 681.888 L1169.33 681.888 L1168.77 681.888 L1168.21 681.888 L1167.65 681.888 L1167.09 681.888 L1166.53 681.888 L1165.97 681.888 L1165.41 681.888 L1164.85 681.888 L1164.29 681.888 L1163.73 681.888 L1163.17 681.888 L1162.61 681.888 L1162.05 681.888 L1161.5 681.888 L1160.94 681.888 L1160.38 681.888 L1159.82 681.888 L1159.26 681.888 L1158.7 681.888 L1158.14 681.888 L1157.58 681.888 L1157.02 681.888 L1156.46 681.888 L1155.9 681.888 L1155.34 681.888 L1154.78 681.888 L1154.23 681.888 L1153.67 681.888 L1153.11 681.888 L1152.55 681.888 L1151.99 681.888 L1151.43 681.888 L1150.87 681.888 L1150.31 681.888 L1149.75 681.888 L1149.19 681.888 L1148.63 681.888 L1148.07 681.888 L1147.51 681.888 L1146.96 681.888 L1146.4 681.888 L1145.84 681.888 L1145.28 681.888 L1144.72 681.888 L1144.16 681.888 L1143.6 681.888 L1143.04 681.888 L1142.48 681.888 L1141.92 681.888 L1141.36 681.888 L1140.8 681.888 L1140.24 681.888 L1139.68 681.888 L1139.13 681.888 L1138.57 681.888 L1138.01 681.888 L1137.45 681.888 L1136.89 681.888 L1136.33 681.888 L1135.77 681.888 L1135.21 681.888 L1134.65 681.888 L1134.09 681.888 L1133.53 681.888 L1132.97 681.888 L1132.41 681.888 L1131.86 681.888 L1131.3 681.888 L1130.74 681.888 L1130.18 681.888 L1129.62 681.888 L1129.06 681.888 L1128.5 681.888 L1127.94 681.888 L1127.38 681.888 L1126.82 681.888 L1126.26 681.888 L1125.7 681.888 L1125.14 681.888 L1124.59 681.888 L1124.03 681.888 L1123.47 681.888 L1122.91 681.888 L1122.35 681.888 L1121.79 681.888 L1121.23 681.888 L1120.67 681.888 L1120.11 681.888 L1119.55 681.888 L1118.99 681.888 L1118.43 681.888 L1117.87 681.888 L1117.31 681.888 L1116.76 681.888 L1116.2 681.888 L1115.64 681.888 L1115.08 681.888 L1114.52 681.888 L1113.96 681.888 L1113.4 681.888 L1112.84 681.888 L1112.28 681.888 L1111.72 681.888 L1111.16 681.888 L1110.6 681.888 L1110.04 681.888 L1109.49 681.888 L1108.93 681.888 L1108.37 681.888 L1107.81 681.888 L1107.25 681.888 L1106.69 681.888 L1106.13 681.888 L1105.57 681.888 L1105.01 681.888 L1104.45 681.888 L1103.89 681.888 L1103.33 681.888 L1102.77 681.888 L1102.22 681.888 L1101.66 681.888 L1101.1 681.888 L1100.54 681.888 L1099.98 681.888 L1099.42 681.888 L1098.86 681.888 L1098.3 681.888 L1097.74 681.888 L1097.18 681.888 L1096.62 681.888 L1096.06 681.888 L1095.5 681.888 L1094.94 681.888 L1094.39 681.888 L1093.83 681.888 L1093.27 681.888 L1092.71 681.888 L1092.15 681.888 L1091.59 681.888 L1091.03 681.888 L1090.47 681.888 L1089.91 681.888 L1089.35 681.888 L1088.79 681.888 L1088.23 681.888 L1087.67 681.888 L1087.12 681.888 L1086.56 681.888 L1086 681.888 L1085.44 681.888 L1084.88 681.888 L1084.32 681.888 L1083.76 681.888 L1083.2 681.888 L1082.64 681.888 L1082.08 681.888 L1081.52 681.888 L1080.96 681.888 L1080.4 681.888 L1079.85 681.888 L1079.29 681.888 L1078.73 681.888 L1078.17 681.888 L1077.61 681.888 L1077.05 681.888 L1076.49 681.888 L1075.93 681.888 L1075.37 681.888 L1074.81 681.888 L1074.25 681.888 L1073.69 681.888 L1073.13 681.888 L1072.57 681.888 L1072.02 681.888 L1071.46 681.888 L1070.9 681.888 L1070.34 681.888 L1069.78 681.888 L1069.22 681.888 L1068.66 681.888 L1068.1 681.888 L1067.54 681.888 L1066.98 681.888 L1066.42 681.888 L1065.86 681.888 L1065.3 681.888 L1064.75 681.888 L1064.19 681.888 L1063.63 681.888 L1063.07 681.888 L1062.51 681.888 L1061.95 681.888 L1061.39 681.888 L1060.83 681.888 L1060.27 681.888 L1059.71 681.888 L1059.15 681.888 L1058.59 681.888 L1058.03 681.888 L1057.48 681.888 L1056.92 681.888 L1056.36 681.888 L1055.8 681.888 L1055.24 681.888 L1054.68 681.888 L1054.12 681.888 L1053.56 681.888 L1053 681.888 L1052.44 681.888 L1051.88 681.888 L1051.32 681.888 L1050.76 681.888 L1050.2 681.888 L1049.65 681.888 L1049.09 681.888 L1048.53 681.888 L1047.97 681.888 L1047.41 681.888 L1046.85 681.888 L1046.29 681.888 L1045.73 681.888 L1045.17 681.888 L1044.61 681.888 L1044.05 681.888 L1043.49 681.888 L1042.93 681.888 L1042.38 681.888 L1041.82 681.888 L1041.26 681.888 L1040.7 681.888 L1040.14 681.888 L1039.58 681.888 L1039.02 681.888 L1038.46 681.888 L1037.9 681.888 L1037.34 681.888 L1036.78 681.888 L1036.22 681.888 L1035.66 681.888 L1035.1 681.888 L1034.55 681.888 L1033.99 681.888 L1033.43 681.888 L1032.87 681.888 L1032.31 681.888 L1031.75 681.888 L1031.19 681.888 L1030.63 681.888 L1030.07 681.888 L1029.51 681.888 L1028.95 681.888 L1028.39 681.888 L1027.83 681.888 L1027.28 681.888 L1026.72 681.888 L1026.16 681.888 L1025.6 681.888 L1025.04 681.888 L1024.48 681.888 L1023.92 681.888 L1023.36 681.888 L1022.8 681.888 L1022.24 681.888 L1021.68 681.888 L1021.12 681.888 L1020.56 681.888 L1020.01 681.888 L1019.45 681.888 L1018.89 681.888 L1018.33 681.888 L1017.77 681.888 L1017.21 681.888 L1016.65 681.888 L1016.09 681.888 L1015.53 681.888 L1014.97 681.888 L1014.41 681.888 L1013.85 681.888 L1013.29 681.888 L1012.73 681.888 L1012.18 681.888 L1011.62 681.888 L1011.06 681.888 L1010.5 681.888 L1009.94 681.888 L1009.38 681.888 L1008.82 681.888 L1008.26 681.888 L1007.7 681.888 L1007.14 681.888 L1006.58 681.888 L1006.02 681.888 L1005.46 681.888 L1004.91 681.888 L1004.35 681.888 L1003.79 681.888 L1003.23 681.888 L1002.67 681.888 L1002.11 681.888 L1001.55 681.888 L1000.99 681.888 L1000.43 681.888 L999.872 681.888 L999.313 681.888 L998.754 681.888 L998.194 681.888 L997.635 681.888 L997.076 681.888 L996.517 681.888 L995.957 681.888 L995.398 681.888 L994.839 681.888 L994.28 681.888 L993.72 681.888 L993.161 681.888 L992.602 681.888 L992.043 681.888 L991.483 681.888 L990.924 681.888 L990.365 681.888 L989.806 681.888 L989.246 681.888 L988.687 681.888 L988.128 681.888 L987.569 681.888 L987.009 681.888 L986.45 681.888 L985.891 681.888 L985.332 681.888 L984.772 681.888 L984.213 681.888 L983.654 681.888 L983.095 681.888 L982.535 681.888 L981.976 681.888 L981.417 681.888 L980.858 681.888 L980.298 681.888 L979.739 681.888 L979.18 681.888 L978.621 681.888 L978.061 681.888 L977.502 681.888 L976.943 681.888 L976.384 681.888 L975.824 681.888 L975.265 681.888 L974.706 681.888 L974.147 681.888 L973.587 681.888 L973.028 681.888 L972.469 681.888 L971.91 681.888 L971.35 681.888 L970.791 681.888 L970.232 681.888 L969.673 681.888 L969.113 681.888 L968.554 681.888 L967.995 681.888 L967.436 681.888 L966.876 681.888 L966.317 681.888 L965.758 681.888 L965.199 681.888 L964.639 681.888 L964.08 681.888 L963.521 681.888 L962.962 681.888 L962.402 681.888 L961.843 681.888 L961.284 681.888 L960.725 681.888 L960.165 681.888 L959.606 681.888 L959.047 681.888 L958.488 681.888 L957.928 681.888 L957.369 681.888 L956.81 681.888 L956.251 681.888 L955.691 681.888 L955.132 681.888 L954.573 681.888 L954.014 681.888 L953.454 681.888 L952.895 681.888 L952.336 681.888 L951.777 681.888 L951.217 681.888 L950.658 681.888 L950.099 681.888 L949.54 681.888 L948.98 681.888 L948.421 681.888 L947.862 681.888 L947.303 681.888 L946.743 681.888 L946.184 681.888 L945.625 681.888 L945.066 681.888 L944.506 681.888 L943.947 681.888 L943.388 681.888 L942.829 681.888 L942.269 681.888 L941.71 681.888 L941.151 681.888 L940.592 681.888 L940.032 681.888 L939.473 681.888 L938.914 681.888 L938.355 681.888 L937.795 681.888 L937.236 681.888 L936.677 681.888 L936.118 681.888 L935.558 681.888 L934.999 681.888 L934.44 681.888 L933.881 681.888 L933.321 681.888 L932.762 681.888 L932.203 681.888 L931.644 681.888 L931.084 681.888 L930.525 681.888 L929.966 681.888 L929.406 681.888 L928.847 681.888 L928.288 681.888 L927.729 681.888 L927.169 681.888 L926.61 681.888 L926.051 681.888 L925.492 681.888 L924.932 681.888 L924.373 681.888 L923.814 681.888 L923.255 681.888 L922.695 681.888 L922.136 681.888 L921.577 681.888 L921.018 681.888 L920.458 681.888 L919.899 681.888 L919.34 681.888 L918.781 681.888 L918.221 681.888 L917.662 681.888 L917.103 681.888 L916.544 681.888 L915.984 681.888 L915.425 681.888 L914.866 681.888 L914.307 681.888 L913.747 681.888 L913.188 681.888 L912.629 681.888 L912.07 681.888 L911.51 681.888 L910.951 681.888 L910.392 681.888 L909.833 681.888 L909.273 681.888 L908.714 681.888 L908.155 681.888 L907.596 681.888 L907.036 681.888 L906.477 681.888 L905.918 681.888 L905.359 681.888 L904.799 681.888 L904.24 681.888 L903.681 681.888 L903.122 681.888 L902.562 681.888 L902.003 681.888 L901.444 681.888 L900.885 681.888 L900.325 681.888 L899.766 681.888 L899.207 681.888 L898.648 681.888 L898.088 681.888 L897.529 681.888 L896.97 681.888 L896.411 681.888 L895.851 681.888 L895.292 681.888 L894.733 681.888 L894.174 681.888 L893.614 681.888 L893.055 681.888 L892.496 681.888 L891.937 681.888 L891.377 681.888 L890.818 681.888 L890.259 681.888 L889.7 681.888 L889.14 681.888 L888.581 681.888 L888.022 681.888 L887.463 681.888 L886.903 681.888 L886.344 681.888 L885.785 681.888 L885.226 681.888 L884.666 681.888 L884.107 681.888 L883.548 681.888 L882.989 681.888 L882.429 681.888 L881.87 681.888 L881.311 681.888 L880.752 681.888 L880.192 681.888 L879.633 681.888 L879.074 681.888 L878.515 681.888 L877.955 681.888 L877.396 681.888 L876.837 681.888 L876.278 681.888 L875.718 681.888 L875.159 681.888 L874.6 681.888 L874.041 681.888 L873.481 681.888 L872.922 681.888 L872.363 681.888 L871.804 681.888 L871.244 681.888 L870.685 681.888 L870.126 681.888 L869.567 681.888 L869.007 681.888 L868.448 681.888 L867.889 681.888 L867.33 681.888 L866.77 681.888 L866.211 681.888 L865.652 681.888 L865.093 681.888 L864.533 681.888 L863.974 681.888 L863.415 681.888 L862.856 681.888 L862.296 681.888 L861.737 681.888 L861.178 681.888 L860.619 681.888 L860.059 681.888 L859.5 681.888 L858.941 681.888 L858.382 681.888 L857.822 681.888 L857.263 681.888 L856.704 681.888 L856.145 681.888 L855.585 681.888 L855.026 681.888 L854.467 681.888 L853.908 681.888 L853.348 681.888 L852.789 681.888 L852.23 681.888 L851.671 681.888 L851.111 681.888 L850.552 681.888 L849.993 681.888 L849.434 681.888 L848.874 681.888 L848.315 681.888 L847.756 681.888 L847.197 681.888 L846.637 681.888 L846.078 681.888 L845.519 681.888 L844.96 681.888 L844.4 681.888 L843.841 681.888 L843.282 681.888 L842.723 681.888 L842.163 681.888 L841.604 681.888 L841.045 681.888 L840.486 681.888 L839.926 681.888 L839.367 681.888 L838.808 681.888 L838.249 681.888 L837.689 681.888 L837.13 681.888 L836.571 681.888 L836.012 681.888 L835.452 681.888 L834.893 681.888 L834.334 681.888 L833.775 681.888 L833.215 681.888 L832.656 681.888 L832.097 681.888 L831.538 681.888 L830.978 681.888 L830.419 681.888 L829.86 681.888 L829.301 681.888 L828.741 681.888 L828.182 681.888 L827.623 681.888 L827.064 681.888 L826.504 681.888 L825.945 681.888 L825.386 681.888 L824.827 681.888 L824.267 681.888 L823.708 681.888 L823.149 681.888 L822.59 681.888 L822.03 681.888 L821.471 681.888 L820.912 681.888 L820.353 681.888 L819.793 681.888 L819.234 681.888 L818.675 681.888 L818.116 681.888 L817.556 681.888 L816.997 681.888 L816.438 681.888 L815.879 681.888 L815.319 681.888 L814.76 681.888 L814.201 681.888 L813.642 681.888 L813.082 681.888 L812.523 681.888 L811.964 681.888 L811.405 681.888 L810.845 681.888 L810.286 681.888 L809.727 681.888 L809.168 681.888 L808.608 681.888 L808.049 681.888 L807.49 681.888 L806.931 681.888 L806.371 681.888 L805.812 681.888 L805.253 681.888 L804.693 681.888 L804.134 681.888 L803.575 681.888 L803.016 681.888 L802.456 681.888 L801.897 681.888 L801.338 681.888 L800.779 681.888 L800.219 681.888 L799.66 681.888 L799.101 681.888 L798.542 681.888 L797.982 681.888 L797.423 681.888 L796.864 681.888 L796.305 681.888 L795.745 681.888 L795.186 681.888 L794.627 681.888 L794.068 681.888 L793.508 681.888 L792.949 681.888 L792.39 681.888 L791.831 681.888 L791.271 681.888 L790.712 681.888 L790.153 681.888 L789.594 681.888 L789.034 681.888 L788.475 681.888 L787.916 681.888 L787.357 681.888 L786.797 681.888 L786.238 681.888 L785.679 681.888 L785.12 681.888 L784.56 681.888 L784.001 681.888 L783.442 681.888 L782.883 681.888 L782.323 681.888 L781.764 681.888 L781.205 681.888 L780.646 681.888 L780.086 681.888 L779.527 681.888 L778.968 681.888 L778.409 681.888 L777.849 681.888 L777.29 681.888 L776.731 681.888 L776.172 681.888 L775.612 681.888 L775.053 681.888 L774.494 681.888 L773.935 681.888 L773.375 681.888 L772.816 681.888 L772.257 681.888 L771.698 681.888 L771.138 681.888 L770.579 681.888 L770.02 681.888 L769.461 681.888 L768.901 681.888 L768.342 681.888 L767.783 681.888 L767.224 681.888 L766.664 681.888 L766.105 681.888 L765.546 681.888 L764.987 681.888 L764.427 681.888 L763.868 681.888 L763.309 681.888 L762.75 681.888 L762.19 681.888 L761.631 681.888 L761.072 681.888 L760.513 681.888 L759.953 681.888 L759.394 681.888 L758.835 681.888 L758.276 681.888 L757.716 681.888 L757.157 681.888 L756.598 681.888 L756.039 681.888 L755.479 681.888 L754.92 681.888 L754.361 681.888 L753.802 681.888 L753.242 681.888 L752.683 681.888 L752.124 681.888 L751.565 681.888 L751.005 681.888 L750.446 681.888 L749.887 681.888 L749.328 681.888 L748.768 681.888 L748.209 681.888 L747.65 681.888 L747.091 681.888 L746.531 681.888 L745.972 681.888 L745.413 681.888 L744.854 681.888 L744.294 681.888 L743.735 681.888 L743.176 681.888 L742.617 681.888 L742.057 681.888 L741.498 681.888 L740.939 681.888 L740.38 681.888 L739.82 681.888 L739.261 681.888 L738.702 681.888 L738.143 681.888 L737.583 681.888 L737.024 681.888 L736.465 681.888 L735.906 681.888 L735.346 681.888 L734.787 681.888 L734.228 681.888 L733.669 681.888 L733.109 681.888 L732.55 681.888 L731.991 681.888 L731.432 681.888 L730.872 681.888 L730.313 681.888 L729.754 681.888 L729.195 681.888 L728.635 681.888 L728.076 681.888 L727.517 681.888 L726.958 681.888 L726.398 681.888 L725.839 681.888 L725.28 681.888 L724.721 681.888 L724.161 681.888 L723.602 681.888 L723.043 681.888 L722.484 681.888 L721.924 681.888 L721.365 681.888 L720.806 681.888 L720.247 681.888  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.723 720.806,685.723 721.365,685.723 721.924,685.723 722.484,685.723 723.043,685.723 723.602,685.723 724.161,685.723 724.721,685.723 725.28,685.723 725.839,685.723 726.398,685.723 726.958,685.723 727.517,685.723 728.076,685.723 728.635,685.723 729.195,685.723 729.754,685.723 730.313,685.723 730.872,685.723 731.432,685.723 731.991,685.723 732.55,685.723 733.109,685.723 733.669,685.723 734.228,685.723 734.787,685.723 735.346,685.723 735.906,685.723 736.465,685.723 737.024,685.723 737.583,685.723 738.143,685.723 738.702,685.723 739.261,685.723 739.82,685.723 740.38,685.723 740.939,685.723 741.498,685.723 742.057,685.723 742.617,685.723 743.176,685.723 743.735,685.723 744.294,685.723 744.854,685.723 745.413,685.723 745.972,685.723 746.531,685.723 747.091,685.723 747.65,685.723 748.209,685.723 748.768,685.723 749.328,685.723 749.887,685.723 750.446,685.723 751.005,685.723 751.565,685.723 752.124,685.723 752.683,685.723 753.242,685.723 753.802,685.723 754.361,685.723 754.92,685.723 755.479,685.723 756.039,685.723 756.598,685.723 757.157,685.723 757.716,685.723 758.276,685.723 758.835,685.723 759.394,685.723 759.953,685.723 760.513,685.723 761.072,685.723 761.631,685.723 762.19,685.723 762.75,685.723 763.309,685.723 763.868,685.723 764.427,685.723 764.987,685.723 765.546,685.723 766.105,685.723 766.664,685.723 767.224,685.723 767.783,685.723 768.342,685.723 768.901,685.723 769.461,685.723 770.02,685.723 770.579,685.723 771.138,685.723 771.698,685.723 772.257,685.723 772.816,685.723 773.375,685.723 773.935,685.723 774.494,685.723 775.053,685.723 775.612,685.723 776.172,685.723 776.731,685.723 777.29,685.723 777.849,685.723 778.409,685.723 778.968,685.723 779.527,685.723 780.086,685.723 780.646,685.723 781.205,685.723 781.764,685.723 782.323,685.723 782.883,685.723 783.442,685.723 784.001,685.723 784.56,685.723 785.12,685.723 785.679,685.723 786.238,685.723 786.797,685.723 787.357,685.723 787.916,685.723 788.475,685.723 789.034,685.723 789.594,685.723 790.153,685.723 790.712,685.723 791.271,685.723 791.831,685.723 792.39,685.723 792.949,685.723 793.508,685.723 794.068,685.723 794.627,685.723 795.186,685.723 795.745,685.723 796.305,685.723 796.864,685.723 797.423,685.723 797.982,685.723 798.542,685.723 799.101,685.723 799.66,685.723 800.219,685.723 800.779,685.723 801.338,685.723 801.897,685.723 802.456,685.723 803.016,685.723 803.575,685.723 804.134,685.723 804.693,685.723 805.253,685.723 805.812,685.723 806.371,685.723 806.931,685.723 807.49,685.723 808.049,685.723 808.608,685.723 809.168,685.723 809.727,685.723 810.286,685.723 810.845,685.723 811.405,685.723 811.964,685.723 812.523,685.723 813.082,685.723 813.642,685.723 814.201,685.723 814.76,685.723 815.319,685.723 815.879,685.723 816.438,685.723 816.997,685.723 817.556,685.723 818.116,685.723 818.675,685.723 819.234,685.723 819.793,685.723 820.353,685.723 820.912,685.723 821.471,685.723 822.03,685.723 822.59,685.723 823.149,685.723 823.708,685.723 824.267,685.723 824.827,685.723 825.386,685.723 825.945,685.723 826.504,685.723 827.064,685.723 827.623,685.723 828.182,685.723 828.741,685.723 829.301,685.723 829.86,685.723 830.419,685.723 830.978,685.723 831.538,685.723 832.097,685.723 832.656,685.723 833.215,685.723 833.775,685.723 834.334,685.723 834.893,685.723 835.452,685.723 836.012,685.723 836.571,685.723 837.13,685.723 837.689,685.723 838.249,685.723 838.808,685.723 839.367,685.723 839.926,685.723 840.486,685.723 841.045,685.723 841.604,685.723 842.163,685.723 842.723,685.723 843.282,685.723 843.841,685.723 844.4,685.723 844.96,685.723 845.519,685.723 846.078,685.723 846.637,685.723 847.197,685.723 847.756,685.723 848.315,685.723 848.874,685.723 849.434,685.723 849.993,685.723 850.552,685.723 851.111,685.723 851.671,685.723 852.23,685.723 852.789,685.723 853.348,685.723 853.908,685.723 854.467,685.723 855.026,685.723 855.585,685.723 856.145,685.723 856.704,685.723 857.263,685.723 857.822,685.723 858.382,685.723 858.941,685.723 859.5,685.723 860.059,685.723 860.619,685.723 861.178,685.723 861.737,685.723 862.296,685.723 862.856,685.723 863.415,685.723 863.974,685.723 864.533,685.723 865.093,685.723 865.652,685.723 866.211,685.723 866.77,685.723 867.33,685.723 867.889,685.723 868.448,685.723 869.007,685.723 869.567,685.723 870.126,685.723 870.685,685.723 871.244,685.723 871.804,685.723 872.363,685.723 872.922,685.723 873.481,685.723 874.041,685.723 874.6,685.723 875.159,685.723 875.718,685.723 876.278,685.723 876.837,685.723 877.396,685.723 877.955,685.723 878.515,685.723 879.074,685.723 879.633,685.723 880.192,685.723 880.752,685.723 881.311,685.723 881.87,685.723 882.429,685.723 882.989,685.723 883.548,685.723 884.107,685.723 884.666,685.723 885.226,685.723 885.785,685.723 886.344,685.723 886.903,685.723 887.463,685.723 888.022,685.723 888.581,685.723 889.14,685.723 889.7,685.723 890.259,685.723 890.818,685.723 891.377,685.723 891.937,685.723 892.496,685.723 893.055,685.723 893.614,685.723 894.174,685.723 894.733,685.723 895.292,685.723 895.851,685.723 896.411,685.723 896.97,685.723 897.529,685.723 898.088,685.723 898.648,685.723 899.207,685.723 899.766,685.723 900.325,685.723 900.885,685.723 901.444,685.723 902.003,685.723 902.562,685.723 903.122,685.723 903.681,685.723 904.24,685.723 904.799,685.723 905.359,685.723 905.918,685.723 906.477,685.723 907.036,685.723 907.596,685.723 908.155,685.723 908.714,685.723 909.273,685.723 909.833,685.723 910.392,685.723 910.951,685.723 911.51,685.723 912.07,685.723 912.629,685.723 913.188,685.723 913.747,685.723 914.307,685.723 914.866,685.723 915.425,685.723 915.984,685.723 916.544,685.723 917.103,685.723 917.662,685.723 918.221,685.723 918.781,685.723 919.34,685.723 919.899,685.723 920.458,685.723 921.018,685.723 921.577,685.723 922.136,685.723 922.695,685.723 923.255,685.723 923.814,685.723 924.373,685.723 924.932,685.723 925.492,685.723 926.051,685.723 926.61,685.723 927.169,685.723 927.729,685.723 928.288,685.723 928.847,685.723 929.406,685.723 929.966,685.723 930.525,685.723 931.084,685.723 931.644,685.723 932.203,685.723 932.762,685.723 933.321,685.723 933.881,685.723 934.44,685.723 934.999,685.723 935.558,685.723 936.118,685.723 936.677,685.723 937.236,685.723 937.795,685.723 938.355,685.723 938.914,685.723 939.473,685.723 940.032,685.723 940.592,685.723 941.151,685.723 941.71,685.723 942.269,685.723 942.829,685.723 943.388,685.723 943.947,685.723 944.506,685.723 945.066,685.723 945.625,685.723 946.184,685.723 946.743,685.723 947.303,685.723 947.862,685.723 948.421,685.723 948.98,685.723 949.54,685.723 950.099,685.723 950.658,685.723 951.217,685.723 951.777,685.723 952.336,685.723 952.895,685.723 953.454,685.723 954.014,685.723 954.573,685.723 955.132,685.723 955.691,685.723 956.251,685.723 956.81,685.723 957.369,685.723 957.928,685.723 958.488,685.723 959.047,685.723 959.606,685.723 960.165,685.723 960.725,685.723 961.284,685.723 961.843,685.723 962.402,685.723 962.962,685.723 963.521,685.723 964.08,685.723 964.639,685.723 965.199,685.723 965.758,685.723 966.317,685.723 966.876,685.723 967.436,685.723 967.995,685.723 968.554,685.723 969.113,685.723 969.673,685.723 970.232,685.723 970.791,685.723 971.35,685.723 971.91,685.723 972.469,685.723 973.028,685.723 973.587,685.723 974.147,685.723 974.706,685.723 975.265,685.723 975.824,685.723 976.384,685.723 976.943,685.723 977.502,685.723 978.061,685.723 978.621,685.723 979.18,685.723 979.739,685.723 980.298,685.723 980.858,685.723 981.417,685.723 981.976,685.723 982.535,685.723 983.095,685.723 983.654,685.723 984.213,685.723 984.772,685.723 985.332,685.723 985.891,685.723 986.45,685.723 987.009,685.723 987.569,685.723 988.128,685.723 988.687,685.723 989.246,685.723 989.806,685.723 990.365,685.723 990.924,685.723 991.483,685.723 992.043,685.723 992.602,685.723 993.161,685.723 993.72,685.723 994.28,685.723 994.839,685.723 995.398,685.723 995.957,685.723 996.517,685.723 997.076,685.723 997.635,685.723 998.194,685.723 998.754,685.723 999.313,685.723 999.872,685.723 1000.43,685.723 1000.99,685.723 1001.55,685.723 1002.11,685.723 1002.67,685.723 1003.23,685.723 1003.79,685.723 1004.35,685.723 1004.91,685.723 1005.46,685.723 1006.02,685.723 1006.58,685.723 1007.14,685.723 1007.7,685.723 1008.26,685.723 1008.82,685.723 1009.38,685.723 1009.94,685.723 1010.5,685.723 1011.06,685.723 1011.62,685.723 1012.18,685.723 1012.73,685.723 1013.29,685.723 1013.85,685.723 1014.41,685.723 1014.97,685.723 1015.53,685.723 1016.09,685.723 1016.65,685.723 1017.21,685.723 1017.77,685.723 1018.33,685.723 1018.89,685.723 1019.45,685.723 1020.01,685.723 1020.56,685.723 1021.12,685.723 1021.68,685.723 1022.24,685.723 1022.8,685.723 1023.36,685.723 1023.92,685.723 1024.48,685.723 1025.04,685.723 1025.6,685.723 1026.16,685.723 1026.72,685.723 1027.28,685.723 1027.83,685.723 1028.39,685.723 1028.95,685.723 1029.51,685.723 1030.07,685.723 1030.63,685.723 1031.19,685.723 1031.75,685.723 1032.31,685.723 1032.87,685.723 1033.43,685.723 1033.99,685.723 1034.55,685.723 1035.1,685.723 1035.66,685.723 1036.22,685.723 1036.78,685.723 1037.34,685.723 1037.9,685.723 1038.46,685.723 1039.02,685.723 1039.58,685.723 1040.14,685.723 1040.7,685.723 1041.26,685.723 1041.82,685.723 1042.38,685.723 1042.93,685.723 1043.49,685.723 1044.05,685.723 1044.61,685.723 1045.17,685.723 1045.73,685.723 1046.29,685.723 1046.85,685.723 1047.41,685.723 1047.97,685.723 1048.53,685.723 1049.09,685.723 1049.65,685.723 1050.2,685.723 1050.76,685.723 1051.32,685.723 1051.88,685.723 1052.44,685.723 1053,685.723 1053.56,685.723 1054.12,685.723 1054.68,685.723 1055.24,685.723 1055.8,685.723 1056.36,685.723 1056.92,685.723 1057.48,685.723 1058.03,685.723 1058.59,685.723 1059.15,685.723 1059.71,685.723 1060.27,685.723 1060.83,685.723 1061.39,685.723 1061.95,685.723 1062.51,685.723 1063.07,685.723 1063.63,685.723 1064.19,685.723 1064.75,685.723 1065.3,685.723 1065.86,685.723 1066.42,685.723 1066.98,685.723 1067.54,685.723 1068.1,685.723 1068.66,685.723 1069.22,685.723 1069.78,685.723 1070.34,685.723 1070.9,685.723 1071.46,685.723 1072.02,685.723 1072.57,685.723 1073.13,685.723 1073.69,685.723 1074.25,685.723 1074.81,685.723 1075.37,685.723 1075.93,685.723 1076.49,685.723 1077.05,685.723 1077.61,685.723 1078.17,685.723 1078.73,685.723 1079.29,685.723 1079.85,685.723 1080.4,685.723 1080.96,685.723 1081.52,685.723 1082.08,685.723 1082.64,685.723 1083.2,685.723 1083.76,685.723 1084.32,685.723 1084.88,685.723 1085.44,685.723 1086,685.723 1086.56,685.723 1087.12,685.723 1087.67,685.723 1088.23,685.723 1088.79,685.723 1089.35,685.723 1089.91,685.723 1090.47,685.723 1091.03,685.723 1091.59,685.723 1092.15,685.723 1092.71,685.723 1093.27,685.723 1093.83,685.723 1094.39,685.723 1094.94,685.723 1095.5,685.723 1096.06,685.723 1096.62,685.723 1097.18,685.723 1097.74,685.723 1098.3,685.723 1098.86,685.723 1099.42,685.723 1099.98,685.723 1100.54,685.723 1101.1,685.723 1101.66,685.723 1102.22,685.723 1102.77,685.723 1103.33,685.723 1103.89,685.723 1104.45,685.723 1105.01,685.723 1105.57,685.723 1106.13,685.723 1106.69,685.723 1107.25,685.723 1107.81,685.723 1108.37,685.723 1108.93,685.723 1109.49,685.723 1110.04,685.723 1110.6,685.723 1111.16,685.723 1111.72,685.723 1112.28,685.723 1112.84,685.723 1113.4,685.723 1113.96,685.723 1114.52,685.723 1115.08,685.723 1115.64,685.723 1116.2,685.723 1116.76,685.723 1117.31,685.723 1117.87,685.723 1118.43,685.723 1118.99,685.723 1119.55,685.723 1120.11,685.723 1120.67,685.723 1121.23,685.723 1121.79,685.723 1122.35,685.723 1122.91,685.723 1123.47,685.723 1124.03,685.723 1124.59,685.723 1125.14,685.723 1125.7,685.723 1126.26,685.723 1126.82,685.723 1127.38,685.723 1127.94,685.723 1128.5,685.723 1129.06,685.723 1129.62,685.723 1130.18,685.723 1130.74,685.723 1131.3,685.723 1131.86,685.723 1132.41,685.723 1132.97,685.723 1133.53,685.723 1134.09,685.723 1134.65,685.723 1135.21,685.723 1135.77,685.723 1136.33,685.723 1136.89,685.723 1137.45,685.723 1138.01,685.723 1138.57,685.723 1139.13,685.723 1139.68,685.723 1140.24,685.723 1140.8,685.723 1141.36,685.723 1141.92,685.723 1142.48,685.723 1143.04,685.723 1143.6,685.723 1144.16,685.723 1144.72,685.723 1145.28,685.723 1145.84,685.723 1146.4,685.723 1146.96,685.723 1147.51,685.723 1148.07,685.723 1148.63,685.723 1149.19,685.723 1149.75,685.723 1150.31,685.723 1150.87,685.723 1151.43,685.723 1151.99,685.723 1152.55,685.723 1153.11,685.723 1153.67,685.723 1154.23,685.723 1154.78,685.723 1155.34,685.723 1155.9,685.723 1156.46,685.723 1157.02,685.723 1157.58,685.723 1158.14,685.723 1158.7,685.723 1159.26,685.723 1159.82,685.723 1160.38,685.723 1160.94,685.723 1161.5,685.723 1162.05,685.723 1162.61,685.723 1163.17,685.723 1163.73,685.723 1164.29,685.723 1164.85,685.723 1165.41,685.723 1165.97,685.723 1166.53,685.723 1167.09,685.723 1167.65,685.723 1168.21,685.723 1168.77,685.723 1169.33,685.723 1169.88,685.723 1170.44,685.723 1171,685.723 1171.56,685.723 1172.12,685.723 1172.68,685.723 1173.24,685.723 1173.8,685.723 1174.36,685.723 1174.92,685.723 1175.48,685.723 1176.04,685.723 1176.6,685.723 1177.15,685.723 1177.71,685.723 1178.27,685.723 1178.83,685.723 1179.39,685.723 1179.95,685.723 1180.51,685.723 1181.07,685.723 1181.63,685.723 1182.19,685.723 1182.75,685.723 1183.31,685.723 1183.87,685.723 1184.43,685.723 1184.98,685.723 1185.54,685.723 1186.1,685.723 1186.66,685.723 1187.22,685.723 1187.78,685.723 1188.34,685.723 1188.9,685.723 1189.46,685.723 1190.02,685.723 1190.58,685.723 1191.14,685.723 1191.7,685.723 1192.25,685.723 1192.81,685.723 1193.37,685.723 1193.93,685.723 1194.49,685.723 1195.05,685.723 1195.61,685.723 1196.17,685.723 1196.73,685.723 1197.29,685.723 1197.85,685.723 1198.41,685.723 1198.97,685.723 1199.52,685.723 1200.08,685.723 1200.64,685.723 1201.2,685.723 1201.76,685.723 1202.32,685.723 1202.88,685.723 1203.44,685.723 1204,685.723 1204.56,685.723 1205.12,685.723 1205.68,685.723 1206.24,685.723 1206.8,685.723 1207.35,685.723 1207.91,685.723 1208.47,685.723 1209.03,685.723 1209.59,685.723 1210.15,685.723 1210.71,685.723 1211.27,685.723 1211.83,685.723 1212.39,685.723 1212.95,685.723 1213.51,685.723 1214.07,685.723 1214.62,685.723 1215.18,685.723 1215.74,685.723 1216.3,685.723 1216.86,685.723 1217.42,685.723 1217.98,685.723 1218.54,685.723 1219.1,685.723 1219.66,685.723 1220.22,685.723 1220.78,685.723 1221.34,685.723 1221.89,685.723 1222.45,685.723 1223.01,685.723 1223.57,685.723 1224.13,685.723 1224.69,685.723 1225.25,685.723 1225.81,685.723 1226.37,685.723 1226.93,685.723 1227.49,685.723 1228.05,685.723 1228.61,685.723 1229.17,685.723 1229.72,685.723 1230.28,685.723 1230.84,685.723 1231.4,685.723 1231.96,685.723 1232.52,685.723 1233.08,685.723 1233.64,685.723 1234.2,685.723 1234.76,685.723 1235.32,685.723 1235.88,685.723 1236.44,685.723 1236.99,685.723 1237.55,685.723 1238.11,685.723 1238.67,685.723 1239.23,685.723 1239.79,685.723 1240.35,685.723 1240.91,685.723 1241.47,685.723 1242.03,685.723 1242.59,685.723 1243.15,685.723 1243.71,685.723 1244.26,685.723 1244.82,685.723 1245.38,685.723 1245.94,685.723 1246.5,685.723 1247.06,685.723 1247.62,685.723 1248.18,685.723 1248.74,685.723 1249.3,685.723 1249.86,685.723 1250.42,685.723 1250.98,685.723 1251.54,685.723 1252.09,685.723 1252.65,685.723 1253.21,685.723 1253.77,685.723 1254.33,685.723 1254.89,685.723 1255.45,685.723 1256.01,685.723 1256.57,685.723 1257.13,685.723 1257.69,685.723 1258.25,685.723 1258.81,685.723 1259.36,685.723 1259.92,685.723 1260.48,685.723 1261.04,685.723 1261.6,685.723 1262.16,685.723 1262.72,685.723 1263.28,685.723 1263.84,685.723 1264.4,685.723 1264.96,685.723 1265.52,685.723 1266.08,685.723 1266.63,685.723 1267.19,685.723 1267.75,685.723 1268.31,685.723 1268.87,685.723 1269.43,685.723 1269.99,685.723 1270.55,685.723 1271.11,685.723 1271.67,685.723 1272.23,685.723 1272.79,685.723 1273.35,685.723 1273.91,685.723 1274.46,685.723 1275.02,685.723 1275.58,685.723 1276.14,685.723 1276.7,685.723 1277.26,685.723 1277.82,685.723 1278.38,685.723 1278.94,685.723 1279.5,685.723 1280.06,685.723 1280.62,685.723 1281.18,685.723 1281.73,685.723 1282.29,685.723 1282.85,685.723 1283.41,685.723 1283.97,685.723 1284.53,685.723 1285.09,685.723 1285.65,685.723 1286.21,685.723 1286.77,685.723 1287.33,685.723 1287.89,685.723 1288.45,685.723 1289,685.723 1289.56,685.723 1290.12,685.723 1290.68,685.723 1291.24,685.723 1291.8,685.723 1292.36,685.723 1292.92,685.723 1293.48,685.723 1294.04,685.723 1294.6,685.723 1295.16,685.723 1295.72,685.723 1296.28,685.723 1296.83,685.723 1297.39,685.723 1297.95,685.723 1298.51,685.723 1299.07,685.723 1299.63,685.723 1300.19,685.723 1300.75,685.723 1301.31,685.723 1301.87,685.723 1302.43,685.723 1302.99,685.723 1303.55,685.723 1304.1,685.723 1304.66,685.723 1305.22,685.723 1305.78,685.723 1306.34,685.723 1306.9,685.723 1307.46,685.723 1308.02,685.723 1308.58,685.723 1309.14,685.723 1309.7,685.723 1310.26,685.723 1310.82,685.723 1311.38,685.723 1311.93,685.723 1312.49,685.723 1313.05,685.723 1313.61,685.723 1314.17,685.723 1314.73,685.723 1315.29,685.723 1315.85,685.723 1316.41,685.723 1316.97,685.723 1317.53,685.723 1318.09,685.723 1318.65,685.723 1319.2,685.723 1319.76,685.723 1320.32,685.723 1320.88,685.723 1321.44,685.723 1322,685.723 1322.56,685.723 1323.12,685.723 1323.68,685.723 1324.24,685.723 1324.8,685.723 1325.36,685.723 1325.92,685.723 1326.47,685.723 1327.03,685.723 1327.59,685.723 1328.15,685.723 1328.71,685.723 1329.27,685.723 1329.83,685.723 1330.39,685.723 1330.95,685.723 1331.51,685.723 1332.07,685.723 1332.63,685.723 1333.19,685.723 1333.75,685.723 1334.3,685.723 1334.86,685.723 1335.42,685.723 1335.98,685.723 1336.54,685.723 1337.1,685.723 1337.66,685.723 1338.22,685.723 1338.78,685.723 1339.34,685.723 1339.9,685.723 1340.46,685.723 1341.02,685.723 1341.57,685.723 1342.13,685.723 1342.69,685.723 1343.25,685.723 1343.81,685.723 1344.37,685.723 1344.93,685.723 1345.49,685.723 1346.05,685.723 1346.61,685.723 1347.17,685.723 1347.73,685.723 1348.29,685.723 1348.84,685.723 1349.4,685.723 1349.96,685.723 1350.52,685.723 1351.08,685.723 1351.64,685.723 1352.2,685.723 1352.76,685.723 1353.32,685.723 1353.88,685.723 1354.44,685.723 1355,685.723 1355.56,685.723 1356.12,685.723 1356.67,685.723 1357.23,685.723 1357.79,685.723 1358.35,685.723 1358.91,685.723 1359.47,685.723 1360.03,685.723 1360.59,685.723 1361.15,685.723 1361.71,685.723 1362.27,685.723 1362.83,685.723 1363.39,685.723 1363.94,685.723 1364.5,685.723 1365.06,685.723 1365.62,685.723 1366.18,685.723 1366.74,685.723 1367.3,685.723 1367.86,685.723 1368.42,685.723 1368.98,685.723 1369.54,685.723 1370.1,685.723 1370.66,685.723 1371.21,685.723 1371.77,685.723 1372.33,685.723 1372.89,685.723 1373.45,685.723 1374.01,685.723 1374.57,685.723 1375.13,685.723 1375.69,685.723 1376.25,685.723 1376.81,685.723 1377.37,685.723 1377.93,685.723 1378.49,685.723 1379.04,685.723 1379.6,685.723 1380.16,685.723 1380.72,685.723 1381.28,685.723 1381.84,685.723 1382.4,685.723 1382.96,685.723 1383.52,685.723 1384.08,685.723 1384.64,685.723 1385.2,685.723 1385.76,685.723 1386.31,685.723 1386.87,685.723 1387.43,685.723 1387.99,685.723 1388.55,685.723 1389.11,685.723 1389.67,685.723 1390.23,685.723 1390.79,685.723 1391.35,685.723 1391.91,685.723 1392.47,685.723 1393.03,685.723 1393.58,685.723 1394.14,685.723 1394.7,685.723 1395.26,685.723 1395.82,685.723 1396.38,685.723 1396.94,685.723 1397.5,685.723 1398.06,685.723 1398.62,685.723 1399.18,685.723 1399.74,685.723 1400.3,685.723 1400.86,685.723 1401.41,685.723 1401.97,685.723 1402.53,685.723 1403.09,685.723 1403.65,685.723 1404.21,685.723 1404.77,685.723 1405.33,685.723 1405.89,685.723 1406.45,685.723 1407.01,685.723 1407.57,685.723 1408.13,685.723 1408.68,685.723 1409.24,685.723 1409.8,685.723 1410.36,685.723 1410.92,685.723 1411.48,685.723 1412.04,685.723 1412.6,685.723 1413.16,685.723 1413.72,685.723 1414.28,685.723 1414.84,685.723 1415.4,685.723 1415.95,685.723 1416.51,685.723 1417.07,685.723 1417.63,685.723 1418.19,685.723 1418.75,685.723 1419.31,685.723 1419.87,685.723 1420.43,685.723 1420.99,685.723 1421.55,685.723 1422.11,685.723 1422.67,685.723 1423.23,685.723 1423.78,685.723 1424.34,685.723 1424.9,685.723 1425.46,685.723 1426.02,685.723 1426.58,685.723 1427.14,685.723 1427.7,685.723 1428.26,685.723 1428.82,685.723 1429.38,685.723 1429.94,685.723 1430.5,685.723 1431.05,685.723 1431.61,685.723 1432.17,685.723 1432.73,685.723 1433.29,685.723 1433.85,685.723 1434.41,685.723 1434.97,685.723 1435.53,685.723 1436.09,685.723 1436.65,685.723 1437.21,685.723 1437.77,685.723 1438.33,685.723 1438.88,685.723 1439.44,685.723 1440,685.723 1440.56,685.723 1441.12,685.723 1441.68,685.723 1442.24,685.723 1442.8,685.723 1443.36,685.723 1443.92,685.723 1444.48,685.723 1445.04,685.723 1445.6,685.723 1446.15,685.723 1446.71,685.723 1447.27,685.723 1447.83,685.723 1448.39,685.723 1448.95,685.723 1449.51,685.723 1450.07,685.723 1450.63,685.723 1451.19,685.723 1451.75,685.723 1452.31,685.723 1452.87,685.723 1453.42,685.723 1453.98,685.723 1454.54,685.723 1455.1,685.723 1455.66,685.723 1456.22,685.723 1456.78,685.723 1457.34,685.723 1457.9,685.723 1458.46,685.723 1459.02,685.723 1459.58,685.723 1460.14,685.723 1460.7,685.723 1461.25,685.723 1461.81,685.723 1462.37,685.723 1462.93,685.723 1463.49,685.723 1464.05,685.723 1464.61,685.723 1465.17,685.723 1465.73,685.723 1466.29,685.723 1466.85,685.723 1467.41,685.723 1467.97,685.723 1468.52,685.723 1469.08,685.723 1469.64,685.723 1470.2,685.723 1470.76,685.723 1471.32,685.723 1471.88,685.723 1472.44,685.723 1473,685.723 1473.56,685.723 1474.12,685.723 1474.68,685.723 1475.24,685.723 1475.79,685.723 1476.35,685.723 1476.91,685.723 1477.47,685.723 1478.03,685.723 1478.59,685.723 1479.15,685.723 1479.71,685.723 1480.27,685.723 1480.83,685.723 1481.39,685.723 1481.95,685.723 1482.51,685.723 1483.07,685.723 1483.62,685.723 1484.18,685.723 1484.74,685.723 1485.3,685.723 1485.86,685.723 1486.42,685.723 1486.98,685.723 1487.54,685.723 1488.1,685.723 1488.66,685.723 1489.22,685.723 1489.78,685.723 1490.34,685.723 1490.89,685.723 1491.45,685.723 1492.01,685.723 1492.57,685.723 1493.13,685.723 1493.69,685.723 1494.25,685.723 1494.81,685.723 1495.37,685.723 1495.93,685.723 1496.49,685.723 1497.05,685.723 1497.61,685.723 1498.16,685.723 1498.72,685.723 1499.28,685.723 1499.84,685.723 1500.4,685.723 1500.96,685.723 1501.52,685.723 1502.08,685.723 1502.64,685.723 1503.2,685.723 1503.76,685.723 1504.32,685.723 1504.88,685.723 1505.44,685.723 1505.99,685.723 1506.55,685.723 1507.11,685.723 1507.67,685.723 1508.23,685.723 1508.79,685.723 1509.35,685.723 1509.91,685.723 1510.47,685.723 1511.03,685.723 1511.59,685.723 1512.15,685.723 1512.71,685.723 1513.26,685.723 1513.82,685.723 1514.38,685.723 1514.94,685.723 1515.5,685.723 1516.06,685.723 1516.62,685.723 1517.18,685.723 1517.74,685.723 1518.3,685.723 1518.86,685.723 1519.42,685.723 1519.98,685.723 1520.53,685.723 1521.09,685.723 1521.65,685.723 1522.21,685.723 1522.77,685.723 1523.33,685.723 1523.89,685.723 1524.45,685.723 1525.01,685.723 1525.57,685.723 1526.13,685.723 1526.69,685.723 1527.25,685.723 1527.81,685.723 1528.36,685.723 1528.92,685.723 1529.48,685.723 1530.04,685.723 1530.6,685.723 1531.16,685.723 1531.72,685.723 1532.28,685.723 1532.84,685.723 1533.4,685.723 1533.96,685.723 1534.52,685.723 1535.08,685.723 1535.63,685.723 1536.19,685.723 1536.75,685.723 1537.31,685.723 1537.87,685.723 1538.43,685.723 1538.99,685.723 1539.55,685.723 1540.11,685.723 1540.67,685.723 1541.23,685.723 1541.79,685.723 1542.35,685.723 1542.9,685.723 1543.46,685.723 1544.02,685.723 1544.58,685.723 1545.14,685.723 1545.7,685.723 1546.26,685.723 1546.82,685.723 1547.38,685.723 1547.94,685.723 1548.5,685.723 1549.06,685.723 1549.62,685.723 1550.18,685.723 1550.73,685.723 1551.29,685.723 1551.85,685.723 1552.41,685.723 1552.97,685.723 1553.53,685.723 1554.09,685.723 1554.65,685.723 1555.21,685.723 1555.77,685.723 1556.33,685.723 1556.89,685.723 1557.45,685.723 1558,685.723 1558.56,685.723 1559.12,685.723 1559.68,685.723 1560.24,685.723 1560.8,685.723 1561.36,685.723 1561.92,685.723 1562.48,685.723 1563.04,685.723 1563.6,685.723 1564.16,685.723 1564.72,685.723 1565.28,685.723 1565.83,685.723 1566.39,685.723 1566.95,685.723 1567.51,685.723 1568.07,685.723 1568.63,685.723 1569.19,685.723 1569.75,685.723 1570.31,685.723 1570.87,685.723 1571.43,685.723 1571.99,685.723 1572.55,685.723 1573.1,685.723 1573.66,685.723 1574.22,685.723 1574.78,685.723 1575.34,685.723 1575.9,685.723 1576.46,685.723 1577.02,685.723 1577.58,685.723 1578.14,685.723 1578.7,685.723 1579.26,685.723 1579.82,685.723 1580.37,685.723 1580.93,685.723 1581.49,685.723 1582.05,685.723 1582.61,685.723 1583.17,685.723 1583.73,685.723 1584.29,685.723 1584.85,685.723 1585.41,685.723 1585.97,685.723 1586.53,685.723 1587.09,685.723 1587.65,685.723 1588.2,685.723 1588.76,685.723 1589.32,685.723 1589.88,685.723 1590.44,685.723 1591,685.723 1591.56,685.723 1592.12,685.723 1592.68,685.723 1593.24,685.723 1593.8,685.723 1594.36,685.723 1594.92,685.723 1595.47,685.723 1596.03,685.723 1596.59,685.723 1597.15,685.723 1597.71,685.723 1598.27,685.723 1598.83,685.723 1599.39,685.723 1599.95,685.723 1600.51,685.723 1601.07,685.723 1601.63,685.723 1602.19,685.723 1602.74,685.723 1603.3,685.723 1603.86,685.723 1604.42,685.723 1604.98,685.723 1605.54,685.723 1606.1,685.723 1606.66,685.723 1607.22,685.723 1607.78,685.723 1608.34,685.723 1608.9,685.723 1609.46,685.723 1610.02,685.723 1610.57,685.723 1611.13,685.723 1611.69,685.723 1612.25,685.723 1612.81,685.723 1613.37,685.723 1613.93,685.723 1614.49,685.723 1615.05,685.723 1615.61,685.723 1616.17,685.723 1616.73,685.723 1617.29,685.723 1617.84,685.723 1618.4,685.723 1618.96,685.723 1619.52,685.723 1620.08,685.723 1620.64,685.723 1621.2,685.723 1621.76,685.723 1622.32,685.723 1622.88,685.723 1623.44,685.723 1624,685.723 1624.56,685.723 1625.11,685.723 1625.67,685.723 1626.23,685.723 1626.79,685.723 1627.35,685.723 1627.91,685.723 1628.47,685.723 1629.03,685.723 1629.59,685.723 1630.15,685.723 1630.71,685.723 1631.27,685.723 1631.83,685.723 1632.39,685.723 1632.94,685.723 1633.5,685.723 1634.06,685.723 1634.62,685.723 1635.18,685.723 1635.74,685.723 1636.3,685.723 1636.86,685.723 1637.42,685.723 1637.98,685.723 1638.54,685.723 1639.1,685.723 1639.66,685.723 1640.21,685.723 1640.77,685.723 1641.33,685.723 1641.89,685.723 1642.45,685.723 1643.01,685.723 1643.57,685.723 1644.13,685.723 1644.69,685.723 1645.25,685.723 1645.81,685.723 1646.37,685.723 1646.93,685.723 1647.48,685.723 1648.04,685.723 1648.6,685.723 1649.16,685.723 1649.72,685.723 1650.28,685.723 1650.84,685.723 1651.4,685.723 1651.96,685.723 1652.52,685.723 1653.08,685.723 1653.64,685.723 1654.2,685.723 1654.76,685.723 1655.31,685.723 1655.87,685.723 1656.43,685.723 1656.99,685.723 1657.55,685.723 1658.11,685.723 1658.67,685.723 1659.23,685.723 1659.79,685.723 1660.35,685.723 1660.91,685.723 1661.47,685.723 1662.03,685.723 1662.58,685.723 1663.14,685.723 1663.7,685.723 1664.26,685.723 1664.82,685.723 1665.38,685.723 1665.94,685.723 1666.5,685.723 1667.06,685.723 1667.62,685.723 1668.18,685.723 1668.74,685.723 1669.3,685.723 1669.85,685.723 1670.41,685.723 1670.97,685.723 1671.53,685.723 1672.09,685.723 1672.65,685.723 1673.21,685.723 1673.77,685.723 1674.33,685.723 1674.89,685.723 1675.45,685.723 1676.01,685.723 1676.57,685.723 1677.13,685.723 1677.68,685.723 1678.24,685.723 1678.8,685.723 1679.36,685.723 1679.92,685.723 1680.48,685.723 1681.04,685.723 1681.6,685.723 1682.16,685.723 1682.72,685.723 1683.28,685.723 1683.84,685.723 1684.4,685.723 1684.95,685.723 1685.51,685.723 1686.07,685.723 1686.63,685.723 1687.19,685.723 1687.75,685.723 1688.31,685.723 1688.87,685.723 1689.43,685.723 1689.99,685.723 1690.55,685.723 1691.11,685.723 1691.67,685.723 1692.23,685.723 1692.78,685.723 1693.34,685.723 1693.9,685.723 1694.46,685.723 1695.02,685.723 1695.58,685.723 1696.14,685.723 1696.7,685.723 1697.26,685.723 1697.82,685.723 1698.38,685.723 1698.94,685.723 1699.5,685.723 1700.05,685.723 1700.61,685.723 1701.17,685.723 1701.73,685.723 1702.29,685.723 1702.85,685.723 1703.41,685.723 1703.97,685.723 1704.53,685.723 1705.09,685.723 1705.65,685.723 1706.21,685.723 1706.77,685.723 1707.32,685.723 1707.88,685.723 1708.44,685.723 1709,685.723 1709.56,685.723 1710.12,685.723 1710.68,685.723 1711.24,685.723 1711.8,685.723 1712.36,685.723 1712.92,685.723 1713.48,685.723 1714.04,685.723 1714.6,685.723 1715.15,685.723 1715.71,685.723 1716.27,685.723 1716.83,685.723 1717.39,685.723 1717.95,685.723 1718.51,685.723 1719.07,685.723 1719.63,685.723 1720.19,685.723 1720.75,685.723 1721.31,685.723 1721.87,685.723 1722.42,685.723 1722.98,685.723 1723.54,685.723 1724.1,685.723 1724.66,685.723 1725.22,685.723 1725.78,685.723 1726.34,685.723 1726.9,685.723 1727.46,685.723 1728.02,685.723 1728.58,685.723 1729.14,685.723 1729.69,685.723 1730.25,685.723 1730.81,685.723 1731.37,685.723 1731.93,685.723 1732.49,685.723 1733.05,685.723 1733.61,685.723 1734.17,685.723 1734.73,685.723 1735.29,685.723 1735.85,685.723 1736.41,685.723 1736.97,685.723 1737.52,685.723 1738.08,685.723 1738.64,685.723 1739.2,685.723 1739.76,685.723 1740.32,685.723 1740.88,685.723 1741.44,685.723 1742,685.723 1742.56,685.723 1743.12,685.723 1743.68,685.723 1744.24,685.723 1744.79,685.723 1745.35,685.723 1745.91,685.723 1746.47,685.723 1747.03,685.723 1747.59,685.723 1748.15,685.723 1748.71,685.723 1749.27,685.723 1749.83,685.723 1750.39,685.723 1750.95,685.723 1751.51,685.723 1752.06,685.723 1752.62,685.723 1753.18,685.723 1753.74,685.723 1754.3,685.723 1754.86,685.723 1755.42,685.723 1755.98,685.723 1756.54,685.723 1757.1,685.723 1757.66,685.723 1758.22,685.723 1758.78,685.723 1759.34,685.723 1759.89,685.723 1760.45,685.723 1761.01,685.723 1761.57,685.723 1762.13,685.723 1762.69,685.723 1763.25,685.723 1763.81,685.723 1764.37,685.723 1764.93,685.723 1765.49,685.723 1766.05,685.723 1766.61,685.723 1767.16,685.723 1767.72,685.723 1768.28,685.723 1768.84,685.723 1769.4,685.723 1769.96,685.723 1770.52,685.723 1771.08,685.723 1771.64,685.723 1772.2,685.723 1772.76,685.723 1773.32,685.723 1773.88,685.723 1774.43,685.723 1774.99,685.723 1775.55,685.723 1776.11,685.723 1776.67,685.723 1777.23,685.723 1777.79,685.723 1778.35,685.723 1778.91,685.723 1779.47,685.723 1780.03,685.723 1780.59,685.723 1781.15,685.723 1781.71,685.723 1782.26,685.723 1782.82,685.723 1783.38,685.723 1783.94,685.723 1784.5,685.723 1785.06,685.723 1785.62,685.723 1786.18,685.723 1786.74,685.723 1787.3,685.723 1787.86,685.723 1788.42,685.723 1788.98,685.723 1789.53,685.723 1790.09,685.723 1790.65,685.723 1791.21,685.723 1791.77,685.723 1792.33,685.723 1792.89,685.723 1793.45,685.723 1794.01,685.723 1794.57,685.723 1795.13,685.723 1795.69,685.723 1796.25,685.723 1796.8,685.723 1797.36,685.723 1797.92,685.723 1798.48,685.723 1799.04,685.723 1799.6,685.723 1800.16,685.723 1800.72,685.723 1801.28,685.723 1801.84,685.723 1802.4,685.723 1802.96,685.723 1803.52,685.723 1804.08,685.723 1804.63,685.723 1805.19,685.723 1805.75,685.723 1806.31,685.723 1806.87,685.723 1807.43,685.723 1807.99,685.723 1808.55,685.723 1809.11,685.723 1809.67,685.723 1810.23,685.723 1810.79,685.723 1811.35,685.723 1811.9,685.723 1812.46,685.723 1813.02,685.723 1813.58,685.723 1814.14,685.723 1814.7,685.723 1815.26,685.723 1815.82,685.723 1816.38,685.723 1816.94,685.723 1817.5,685.723 1818.06,685.723 1818.62,685.723 1819.18,685.723 1819.73,685.723 1820.29,685.723 1820.85,685.723 1821.41,685.723 1821.97,685.723 1822.53,685.723 1823.09,685.723 1823.65,685.723 1824.21,685.723 1824.77,685.723 1825.33,685.723 1825.89,685.723 1826.45,685.723 1827,685.723 1827.56,685.723 1828.12,685.723 1828.68,685.723 1829.24,685.723 1829.8,685.723 1830.36,685.723 1830.92,685.723 1831.48,685.723 1832.04,685.723 1832.6,685.723 1833.16,685.723 1833.72,685.723 1834.27,685.723 1834.83,685.723 1835.39,685.723 1835.95,685.723 1836.51,685.723 1837.07,685.723 1837.63,685.723 1838.19,685.723 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 684.539 L720.806 684.539 L721.365 684.539 L721.924 684.539 L722.484 684.539 L723.043 684.539 L723.602 684.539 L724.161 684.539 L724.721 684.539 L725.28 684.539 L725.839 684.539 L726.398 684.539 L726.958 684.539 L727.517 684.539 L728.076 684.539 L728.635 684.539 L729.195 684.539 L729.754 684.539 L730.313 684.539 L730.872 684.539 L731.432 684.539 L731.991 684.539 L732.55 684.539 L733.109 684.539 L733.669 684.539 L734.228 684.539 L734.787 684.539 L735.346 684.539 L735.906 684.539 L736.465 684.539 L737.024 684.539 L737.583 684.539 L738.143 684.539 L738.702 684.539 L739.261 684.539 L739.82 684.539 L740.38 684.539 L740.939 684.539 L741.498 684.539 L742.057 684.539 L742.617 684.539 L743.176 684.539 L743.735 684.539 L744.294 684.539 L744.854 684.539 L745.413 684.539 L745.972 684.539 L746.531 684.539 L747.091 684.539 L747.65 684.539 L748.209 684.539 L748.768 684.539 L749.328 684.539 L749.887 684.539 L750.446 684.539 L751.005 684.539 L751.565 684.539 L752.124 684.539 L752.683 684.539 L753.242 684.539 L753.802 684.539 L754.361 684.539 L754.92 684.539 L755.479 684.539 L756.039 684.539 L756.598 684.539 L757.157 684.539 L757.716 684.539 L758.276 684.539 L758.835 684.539 L759.394 684.539 L759.953 684.539 L760.513 684.539 L761.072 684.539 L761.631 684.539 L762.19 684.539 L762.75 684.539 L763.309 684.539 L763.868 684.539 L764.427 684.539 L764.987 684.539 L765.546 684.539 L766.105 684.539 L766.664 684.539 L767.224 684.539 L767.783 684.539 L768.342 684.539 L768.901 684.539 L769.461 684.539 L770.02 684.539 L770.579 684.539 L771.138 684.539 L771.698 684.539 L772.257 684.539 L772.816 684.539 L773.375 684.539 L773.935 684.539 L774.494 684.539 L775.053 684.539 L775.612 684.539 L776.172 684.539 L776.731 684.539 L777.29 684.539 L777.849 684.539 L778.409 684.539 L778.968 684.539 L779.527 684.539 L780.086 684.539 L780.646 684.539 L781.205 684.539 L781.764 684.539 L782.323 684.539 L782.883 684.539 L783.442 684.539 L784.001 684.539 L784.56 684.539 L785.12 684.539 L785.679 684.539 L786.238 684.539 L786.797 684.539 L787.357 684.539 L787.916 684.539 L788.475 684.539 L789.034 684.539 L789.594 684.539 L790.153 684.539 L790.712 684.539 L791.271 684.539 L791.831 684.539 L792.39 684.539 L792.949 684.539 L793.508 684.539 L794.068 684.539 L794.627 684.539 L795.186 684.539 L795.745 684.539 L796.305 684.539 L796.864 684.539 L797.423 684.539 L797.982 684.539 L798.542 684.539 L799.101 684.539 L799.66 684.539 L800.219 684.539 L800.779 684.539 L801.338 684.539 L801.897 684.539 L802.456 684.539 L803.016 684.539 L803.575 684.539 L804.134 684.539 L804.693 684.539 L805.253 684.539 L805.812 684.539 L806.371 684.539 L806.931 684.539 L807.49 684.539 L808.049 684.539 L808.608 684.539 L809.168 684.539 L809.727 684.539 L810.286 684.539 L810.845 684.539 L811.405 684.539 L811.964 684.539 L812.523 684.539 L813.082 684.539 L813.642 684.539 L814.201 684.539 L814.76 684.539 L815.319 684.539 L815.879 684.539 L816.438 684.539 L816.997 684.539 L817.556 684.539 L818.116 684.539 L818.675 684.539 L819.234 684.539 L819.793 684.539 L820.353 684.539 L820.912 684.539 L821.471 684.539 L822.03 684.539 L822.59 684.539 L823.149 684.539 L823.708 684.539 L824.267 684.539 L824.827 684.539 L825.386 684.539 L825.945 684.539 L826.504 684.539 L827.064 684.539 L827.623 684.539 L828.182 684.539 L828.741 684.539 L829.301 684.539 L829.86 684.539 L830.419 684.539 L830.978 684.539 L831.538 684.539 L832.097 684.539 L832.656 684.539 L833.215 684.539 L833.775 684.539 L834.334 684.539 L834.893 684.539 L835.452 684.539 L836.012 684.539 L836.571 684.539 L837.13 684.539 L837.689 684.539 L838.249 684.539 L838.808 684.539 L839.367 684.539 L839.926 684.539 L840.486 684.539 L841.045 684.539 L841.604 684.539 L842.163 684.539 L842.723 684.539 L843.282 684.539 L843.841 684.539 L844.4 684.539 L844.96 684.539 L845.519 684.539 L846.078 684.539 L846.637 684.539 L847.197 684.539 L847.756 684.539 L848.315 684.539 L848.874 684.539 L849.434 684.539 L849.993 684.539 L850.552 684.539 L851.111 684.539 L851.671 684.539 L852.23 684.539 L852.789 684.539 L853.348 684.539 L853.908 684.539 L854.467 684.539 L855.026 684.539 L855.585 684.539 L856.145 684.539 L856.704 684.539 L857.263 684.539 L857.822 684.539 L858.382 684.539 L858.941 684.539 L859.5 684.539 L860.059 684.539 L860.619 684.539 L861.178 684.539 L861.737 684.539 L862.296 684.539 L862.856 684.539 L863.415 684.539 L863.974 684.539 L864.533 684.539 L865.093 684.539 L865.652 684.539 L866.211 684.539 L866.77 684.539 L867.33 684.539 L867.889 684.539 L868.448 684.539 L869.007 684.539 L869.567 684.539 L870.126 684.539 L870.685 684.539 L871.244 684.539 L871.804 684.539 L872.363 684.539 L872.922 684.539 L873.481 684.539 L874.041 684.539 L874.6 684.539 L875.159 684.539 L875.718 684.539 L876.278 684.539 L876.837 684.539 L877.396 684.539 L877.955 684.539 L878.515 684.539 L879.074 684.539 L879.633 684.539 L880.192 684.539 L880.752 684.539 L881.311 684.539 L881.87 684.539 L882.429 684.539 L882.989 684.539 L883.548 684.539 L884.107 684.539 L884.666 684.539 L885.226 684.539 L885.785 684.539 L886.344 684.539 L886.903 684.539 L887.463 684.539 L888.022 684.539 L888.581 684.539 L889.14 684.539 L889.7 684.539 L890.259 684.539 L890.818 684.539 L891.377 684.539 L891.937 684.539 L892.496 684.539 L893.055 684.539 L893.614 684.539 L894.174 684.539 L894.733 684.539 L895.292 684.539 L895.851 684.539 L896.411 684.539 L896.97 684.539 L897.529 684.539 L898.088 684.539 L898.648 684.539 L899.207 684.539 L899.766 684.539 L900.325 684.539 L900.885 684.539 L901.444 684.539 L902.003 684.539 L902.562 684.539 L903.122 684.539 L903.681 684.539 L904.24 684.539 L904.799 684.539 L905.359 684.539 L905.918 684.539 L906.477 684.539 L907.036 684.539 L907.596 684.539 L908.155 684.539 L908.714 684.539 L909.273 684.539 L909.833 684.539 L910.392 684.539 L910.951 684.539 L911.51 684.539 L912.07 684.539 L912.629 684.539 L913.188 684.539 L913.747 684.539 L914.307 684.539 L914.866 684.539 L915.425 684.539 L915.984 684.539 L916.544 684.539 L917.103 684.539 L917.662 684.539 L918.221 684.539 L918.781 684.539 L919.34 684.539 L919.899 684.539 L920.458 684.539 L921.018 684.539 L921.577 684.539 L922.136 684.539 L922.695 684.539 L923.255 684.539 L923.814 684.539 L924.373 684.539 L924.932 684.539 L925.492 684.539 L926.051 684.539 L926.61 684.539 L927.169 684.539 L927.729 684.539 L928.288 684.539 L928.847 684.539 L929.406 684.539 L929.966 684.539 L930.525 684.539 L931.084 684.539 L931.644 684.539 L932.203 684.539 L932.762 684.539 L933.321 684.539 L933.881 684.539 L934.44 684.539 L934.999 684.539 L935.558 684.539 L936.118 684.539 L936.677 684.539 L937.236 684.539 L937.795 684.539 L938.355 684.539 L938.914 684.539 L939.473 684.539 L940.032 684.539 L940.592 684.539 L941.151 684.539 L941.71 684.539 L942.269 684.539 L942.829 684.539 L943.388 684.539 L943.947 684.539 L944.506 684.539 L945.066 684.539 L945.625 684.539 L946.184 684.539 L946.743 684.539 L947.303 684.539 L947.862 684.539 L948.421 684.539 L948.98 684.539 L949.54 684.539 L950.099 684.539 L950.658 684.539 L951.217 684.539 L951.777 684.539 L952.336 684.539 L952.895 684.539 L953.454 684.539 L954.014 684.539 L954.573 684.539 L955.132 684.539 L955.691 684.539 L956.251 684.539 L956.81 684.539 L957.369 684.539 L957.928 684.539 L958.488 684.539 L959.047 684.539 L959.606 684.539 L960.165 684.539 L960.725 684.539 L961.284 684.539 L961.843 684.539 L962.402 684.539 L962.962 684.539 L963.521 684.539 L964.08 684.539 L964.639 684.539 L965.199 684.539 L965.758 684.539 L966.317 684.539 L966.876 684.539 L967.436 684.539 L967.995 684.539 L968.554 684.539 L969.113 684.539 L969.673 684.539 L970.232 684.539 L970.791 684.539 L971.35 684.539 L971.91 684.539 L972.469 684.539 L973.028 684.539 L973.587 684.539 L974.147 684.539 L974.706 684.539 L975.265 684.539 L975.824 684.539 L976.384 684.539 L976.943 684.539 L977.502 684.539 L978.061 684.539 L978.621 684.539 L979.18 684.539 L979.739 684.539 L980.298 684.539 L980.858 684.539 L981.417 684.539 L981.976 684.539 L982.535 684.539 L983.095 684.539 L983.654 684.539 L984.213 684.539 L984.772 684.539 L985.332 684.539 L985.891 684.539 L986.45 684.539 L987.009 684.539 L987.569 684.539 L988.128 684.539 L988.687 684.539 L989.246 684.539 L989.806 684.539 L990.365 684.539 L990.924 684.539 L991.483 684.539 L992.043 684.539 L992.602 684.539 L993.161 684.539 L993.72 684.539 L994.28 684.539 L994.839 684.539 L995.398 684.539 L995.957 684.539 L996.517 684.539 L997.076 684.539 L997.635 684.539 L998.194 684.539 L998.754 684.539 L999.313 684.539 L999.872 684.539 L1000.43 684.539 L1000.99 684.539 L1001.55 684.539 L1002.11 684.539 L1002.67 684.539 L1003.23 684.539 L1003.79 684.539 L1004.35 684.539 L1004.91 684.539 L1005.46 684.539 L1006.02 684.539 L1006.58 684.539 L1007.14 684.539 L1007.7 684.539 L1008.26 684.539 L1008.82 684.539 L1009.38 684.539 L1009.94 684.539 L1010.5 684.539 L1011.06 684.539 L1011.62 684.539 L1012.18 684.539 L1012.73 684.539 L1013.29 684.539 L1013.85 684.539 L1014.41 684.539 L1014.97 684.539 L1015.53 684.539 L1016.09 684.539 L1016.65 684.539 L1017.21 684.539 L1017.77 684.539 L1018.33 684.539 L1018.89 684.539 L1019.45 684.539 L1020.01 684.539 L1020.56 684.539 L1021.12 684.539 L1021.68 684.539 L1022.24 684.539 L1022.8 684.539 L1023.36 684.539 L1023.92 684.539 L1024.48 684.539 L1025.04 684.539 L1025.6 684.539 L1026.16 684.539 L1026.72 684.539 L1027.28 684.539 L1027.83 684.539 L1028.39 684.539 L1028.95 684.539 L1029.51 684.539 L1030.07 684.539 L1030.63 684.539 L1031.19 684.539 L1031.75 684.539 L1032.31 684.539 L1032.87 684.539 L1033.43 684.539 L1033.99 684.539 L1034.55 684.539 L1035.1 684.539 L1035.66 684.539 L1036.22 684.539 L1036.78 684.539 L1037.34 684.539 L1037.9 684.539 L1038.46 684.539 L1039.02 684.539 L1039.58 684.539 L1040.14 684.539 L1040.7 684.539 L1041.26 684.539 L1041.82 684.539 L1042.38 684.539 L1042.93 684.539 L1043.49 684.539 L1044.05 684.539 L1044.61 684.539 L1045.17 684.539 L1045.73 684.539 L1046.29 684.539 L1046.85 684.539 L1047.41 684.539 L1047.97 684.539 L1048.53 684.539 L1049.09 684.539 L1049.65 684.539 L1050.2 684.539 L1050.76 684.539 L1051.32 684.539 L1051.88 684.539 L1052.44 684.539 L1053 684.539 L1053.56 684.539 L1054.12 684.539 L1054.68 684.539 L1055.24 684.539 L1055.8 684.539 L1056.36 684.539 L1056.92 684.539 L1057.48 684.539 L1058.03 684.539 L1058.59 684.539 L1059.15 684.539 L1059.71 684.539 L1060.27 684.539 L1060.83 684.539 L1061.39 684.539 L1061.95 684.539 L1062.51 684.539 L1063.07 684.539 L1063.63 684.539 L1064.19 684.539 L1064.75 684.539 L1065.3 684.539 L1065.86 684.539 L1066.42 684.539 L1066.98 684.539 L1067.54 684.539 L1068.1 684.539 L1068.66 684.539 L1069.22 684.539 L1069.78 684.539 L1070.34 684.539 L1070.9 684.539 L1071.46 684.539 L1072.02 684.539 L1072.57 684.539 L1073.13 684.539 L1073.69 684.539 L1074.25 684.539 L1074.81 684.539 L1075.37 684.539 L1075.93 684.539 L1076.49 684.539 L1077.05 684.539 L1077.61 684.539 L1078.17 684.539 L1078.73 684.539 L1079.29 684.539 L1079.85 684.539 L1080.4 684.539 L1080.96 684.539 L1081.52 684.539 L1082.08 684.539 L1082.64 684.539 L1083.2 684.539 L1083.76 684.539 L1084.32 684.539 L1084.88 684.539 L1085.44 684.539 L1086 684.539 L1086.56 684.539 L1087.12 684.539 L1087.67 684.539 L1088.23 684.539 L1088.79 684.539 L1089.35 684.539 L1089.91 684.539 L1090.47 684.539 L1091.03 684.539 L1091.59 684.539 L1092.15 684.539 L1092.71 684.539 L1093.27 684.539 L1093.83 684.539 L1094.39 684.539 L1094.94 684.539 L1095.5 684.539 L1096.06 684.539 L1096.62 684.539 L1097.18 684.539 L1097.74 684.539 L1098.3 684.539 L1098.86 684.539 L1099.42 684.539 L1099.98 684.539 L1100.54 684.539 L1101.1 684.539 L1101.66 684.539 L1102.22 684.539 L1102.77 684.539 L1103.33 684.539 L1103.89 684.539 L1104.45 684.539 L1105.01 684.539 L1105.57 684.539 L1106.13 684.539 L1106.69 684.539 L1107.25 684.539 L1107.81 684.539 L1108.37 684.539 L1108.93 684.539 L1109.49 684.539 L1110.04 684.539 L1110.6 684.539 L1111.16 684.539 L1111.72 684.539 L1112.28 684.539 L1112.84 684.539 L1113.4 684.539 L1113.96 684.539 L1114.52 684.539 L1115.08 684.539 L1115.64 684.539 L1116.2 684.539 L1116.76 684.539 L1117.31 684.539 L1117.87 684.539 L1118.43 684.539 L1118.99 684.539 L1119.55 684.539 L1120.11 684.539 L1120.67 684.539 L1121.23 684.539 L1121.79 684.539 L1122.35 684.539 L1122.91 684.539 L1123.47 684.539 L1124.03 684.539 L1124.59 684.539 L1125.14 684.539 L1125.7 684.539 L1126.26 684.539 L1126.82 684.539 L1127.38 684.539 L1127.94 684.539 L1128.5 684.539 L1129.06 684.539 L1129.62 684.539 L1130.18 684.539 L1130.74 684.539 L1131.3 684.539 L1131.86 684.539 L1132.41 684.539 L1132.97 684.539 L1133.53 684.539 L1134.09 684.539 L1134.65 684.539 L1135.21 684.539 L1135.77 684.539 L1136.33 684.539 L1136.89 684.539 L1137.45 684.539 L1138.01 684.539 L1138.57 684.539 L1139.13 684.539 L1139.68 684.539 L1140.24 684.539 L1140.8 684.539 L1141.36 684.539 L1141.92 684.539 L1142.48 684.539 L1143.04 684.539 L1143.6 684.539 L1144.16 684.539 L1144.72 684.539 L1145.28 684.539 L1145.84 684.539 L1146.4 684.539 L1146.96 684.539 L1147.51 684.539 L1148.07 684.539 L1148.63 684.539 L1149.19 684.539 L1149.75 684.539 L1150.31 684.539 L1150.87 684.539 L1151.43 684.539 L1151.99 684.539 L1152.55 684.539 L1153.11 684.539 L1153.67 684.539 L1154.23 684.539 L1154.78 684.539 L1155.34 684.539 L1155.9 684.539 L1156.46 684.539 L1157.02 684.539 L1157.58 684.539 L1158.14 684.539 L1158.7 684.539 L1159.26 684.539 L1159.82 684.539 L1160.38 684.539 L1160.94 684.539 L1161.5 684.539 L1162.05 684.539 L1162.61 684.539 L1163.17 684.539 L1163.73 684.539 L1164.29 684.539 L1164.85 684.539 L1165.41 684.539 L1165.97 684.539 L1166.53 684.539 L1167.09 684.539 L1167.65 684.539 L1168.21 684.539 L1168.77 684.539 L1169.33 684.539 L1169.88 684.539 L1170.44 684.539 L1171 684.539 L1171.56 684.539 L1172.12 684.539 L1172.68 684.539 L1173.24 684.539 L1173.8 684.539 L1174.36 684.539 L1174.92 684.539 L1175.48 684.539 L1176.04 684.539 L1176.6 684.539 L1177.15 684.539 L1177.71 684.539 L1178.27 684.539 L1178.83 684.539 L1179.39 684.539 L1179.95 684.539 L1180.51 684.539 L1181.07 684.539 L1181.63 684.539 L1182.19 684.539 L1182.75 684.539 L1183.31 684.539 L1183.87 684.539 L1184.43 684.539 L1184.98 684.539 L1185.54 684.539 L1186.1 684.539 L1186.66 684.539 L1187.22 684.539 L1187.78 684.539 L1188.34 684.539 L1188.9 684.539 L1189.46 684.539 L1190.02 684.539 L1190.58 684.539 L1191.14 684.539 L1191.7 684.539 L1192.25 684.539 L1192.81 684.539 L1193.37 684.539 L1193.93 684.539 L1194.49 684.539 L1195.05 684.539 L1195.61 684.539 L1196.17 684.539 L1196.73 684.539 L1197.29 684.539 L1197.85 684.539 L1198.41 684.539 L1198.97 684.539 L1199.52 684.539 L1200.08 684.539 L1200.64 684.539 L1201.2 684.539 L1201.76 684.539 L1202.32 684.539 L1202.88 684.539 L1203.44 684.539 L1204 684.539 L1204.56 684.539 L1205.12 684.539 L1205.68 684.539 L1206.24 684.539 L1206.8 684.539 L1207.35 684.539 L1207.91 684.539 L1208.47 684.539 L1209.03 684.539 L1209.59 684.539 L1210.15 684.539 L1210.71 684.539 L1211.27 684.539 L1211.83 684.539 L1212.39 684.539 L1212.95 684.539 L1213.51 684.539 L1214.07 684.539 L1214.62 684.539 L1215.18 684.539 L1215.74 684.539 L1216.3 684.539 L1216.86 684.539 L1217.42 684.539 L1217.98 684.539 L1218.54 684.539 L1219.1 684.539 L1219.66 684.539 L1220.22 684.539 L1220.78 684.539 L1221.34 684.539 L1221.89 684.539 L1222.45 684.539 L1223.01 684.539 L1223.57 684.539 L1224.13 684.539 L1224.69 684.539 L1225.25 684.539 L1225.81 684.539 L1226.37 684.539 L1226.93 684.539 L1227.49 684.539 L1228.05 684.539 L1228.61 684.539 L1229.17 684.539 L1229.72 684.539 L1230.28 684.539 L1230.84 684.539 L1231.4 684.539 L1231.96 684.539 L1232.52 684.539 L1233.08 684.539 L1233.64 684.539 L1234.2 684.539 L1234.76 684.539 L1235.32 684.539 L1235.88 684.539 L1236.44 684.539 L1236.99 684.539 L1237.55 684.539 L1238.11 684.539 L1238.67 684.539 L1239.23 684.539 L1239.79 684.539 L1240.35 684.539 L1240.91 684.539 L1241.47 684.539 L1242.03 684.539 L1242.59 684.539 L1243.15 684.539 L1243.71 684.539 L1244.26 684.539 L1244.82 684.539 L1245.38 684.539 L1245.94 684.539 L1246.5 684.539 L1247.06 684.539 L1247.62 684.539 L1248.18 684.539 L1248.74 684.539 L1249.3 684.539 L1249.86 684.539 L1250.42 684.539 L1250.98 684.539 L1251.54 684.539 L1252.09 684.539 L1252.65 684.539 L1253.21 684.539 L1253.77 684.539 L1254.33 684.539 L1254.89 684.539 L1255.45 684.539 L1256.01 684.539 L1256.57 684.539 L1257.13 684.539 L1257.69 684.539 L1258.25 684.539 L1258.81 684.539 L1259.36 684.539 L1259.92 684.539 L1260.48 684.539 L1261.04 684.539 L1261.6 684.539 L1262.16 684.539 L1262.72 684.539 L1263.28 684.539 L1263.84 684.539 L1264.4 684.539 L1264.96 684.539 L1265.52 684.539 L1266.08 684.539 L1266.63 684.539 L1267.19 684.539 L1267.75 684.539 L1268.31 684.539 L1268.87 684.539 L1269.43 684.539 L1269.99 684.539 L1270.55 684.539 L1271.11 684.539 L1271.67 684.539 L1272.23 684.539 L1272.79 684.539 L1273.35 684.539 L1273.91 684.539 L1274.46 684.539 L1275.02 684.539 L1275.58 684.539 L1276.14 684.539 L1276.7 684.539 L1277.26 684.539 L1277.82 684.539 L1278.38 684.539 L1278.94 684.539 L1279.5 684.539 L1280.06 684.539 L1280.62 684.539 L1281.18 684.539 L1281.73 684.539 L1282.29 684.539 L1282.85 684.539 L1283.41 684.539 L1283.97 684.539 L1284.53 684.539 L1285.09 684.539 L1285.65 684.539 L1286.21 684.539 L1286.77 684.539 L1287.33 684.539 L1287.89 684.539 L1288.45 684.539 L1289 684.539 L1289.56 684.539 L1290.12 684.539 L1290.68 684.539 L1291.24 684.539 L1291.8 684.539 L1292.36 684.539 L1292.92 684.539 L1293.48 684.539 L1294.04 684.539 L1294.6 684.539 L1295.16 684.539 L1295.72 684.539 L1296.28 684.539 L1296.83 684.539 L1297.39 684.539 L1297.95 684.539 L1298.51 684.539 L1299.07 684.539 L1299.63 684.539 L1300.19 684.539 L1300.75 684.539 L1301.31 684.539 L1301.87 684.539 L1302.43 684.539 L1302.99 684.539 L1303.55 684.539 L1304.1 684.539 L1304.66 684.539 L1305.22 684.539 L1305.78 684.539 L1306.34 684.539 L1306.9 684.539 L1307.46 684.539 L1308.02 684.539 L1308.58 684.539 L1309.14 684.539 L1309.7 684.539 L1310.26 684.539 L1310.82 684.539 L1311.38 684.539 L1311.93 684.539 L1312.49 684.539 L1313.05 684.539 L1313.61 684.539 L1314.17 684.539 L1314.73 684.539 L1315.29 684.539 L1315.85 684.539 L1316.41 684.539 L1316.97 684.539 L1317.53 684.539 L1318.09 684.539 L1318.65 684.539 L1319.2 684.539 L1319.76 684.539 L1320.32 684.539 L1320.88 684.539 L1321.44 684.539 L1322 684.539 L1322.56 684.539 L1323.12 684.539 L1323.68 684.539 L1324.24 684.539 L1324.8 684.539 L1325.36 684.539 L1325.92 684.539 L1326.47 684.539 L1327.03 684.539 L1327.59 684.539 L1328.15 684.539 L1328.71 684.539 L1329.27 684.539 L1329.83 684.539 L1330.39 684.539 L1330.95 684.539 L1331.51 684.539 L1332.07 684.539 L1332.63 684.539 L1333.19 684.539 L1333.75 684.539 L1334.3 684.539 L1334.86 684.539 L1335.42 684.539 L1335.98 684.539 L1336.54 684.539 L1337.1 684.539 L1337.66 684.539 L1338.22 684.539 L1338.78 684.539 L1339.34 684.539 L1339.9 684.539 L1340.46 684.539 L1341.02 684.539 L1341.57 684.539 L1342.13 684.539 L1342.69 684.539 L1343.25 684.539 L1343.81 684.539 L1344.37 684.539 L1344.93 684.539 L1345.49 684.539 L1346.05 684.539 L1346.61 684.539 L1347.17 684.539 L1347.73 684.539 L1348.29 684.539 L1348.84 684.539 L1349.4 684.539 L1349.96 684.539 L1350.52 684.539 L1351.08 684.539 L1351.64 684.539 L1352.2 684.539 L1352.76 684.539 L1353.32 684.539 L1353.88 684.539 L1354.44 684.539 L1355 684.539 L1355.56 684.539 L1356.12 684.539 L1356.67 684.539 L1357.23 684.539 L1357.79 684.539 L1358.35 684.539 L1358.91 684.539 L1359.47 684.539 L1360.03 684.539 L1360.59 684.539 L1361.15 684.539 L1361.71 684.539 L1362.27 684.539 L1362.83 684.539 L1363.39 684.539 L1363.94 684.539 L1364.5 684.539 L1365.06 684.539 L1365.62 684.539 L1366.18 684.539 L1366.74 684.539 L1367.3 684.539 L1367.86 684.539 L1368.42 684.539 L1368.98 684.539 L1369.54 684.539 L1370.1 684.539 L1370.66 684.539 L1371.21 684.539 L1371.77 684.539 L1372.33 684.539 L1372.89 684.539 L1373.45 684.539 L1374.01 684.539 L1374.57 684.539 L1375.13 684.539 L1375.69 684.539 L1376.25 684.539 L1376.81 684.539 L1377.37 684.539 L1377.93 684.539 L1378.49 684.539 L1379.04 684.539 L1379.6 684.539 L1380.16 684.539 L1380.72 684.539 L1381.28 684.539 L1381.84 684.539 L1382.4 684.539 L1382.96 684.539 L1383.52 684.539 L1384.08 684.539 L1384.64 684.539 L1385.2 684.539 L1385.76 684.539 L1386.31 684.539 L1386.87 684.539 L1387.43 684.539 L1387.99 684.539 L1388.55 684.539 L1389.11 684.539 L1389.67 684.539 L1390.23 684.539 L1390.79 684.539 L1391.35 684.539 L1391.91 684.539 L1392.47 684.539 L1393.03 684.539 L1393.58 684.539 L1394.14 684.539 L1394.7 684.539 L1395.26 684.539 L1395.82 684.539 L1396.38 684.539 L1396.94 684.539 L1397.5 684.539 L1398.06 684.539 L1398.62 684.539 L1399.18 684.539 L1399.74 684.539 L1400.3 684.539 L1400.86 684.539 L1401.41 684.539 L1401.97 684.539 L1402.53 684.539 L1403.09 684.539 L1403.65 684.539 L1404.21 684.539 L1404.77 684.539 L1405.33 684.539 L1405.89 684.539 L1406.45 684.539 L1407.01 684.539 L1407.57 684.539 L1408.13 684.539 L1408.68 684.539 L1409.24 684.539 L1409.8 684.539 L1410.36 684.539 L1410.92 684.539 L1411.48 684.539 L1412.04 684.539 L1412.6 684.539 L1413.16 684.539 L1413.72 684.539 L1414.28 684.539 L1414.84 684.539 L1415.4 684.539 L1415.95 684.539 L1416.51 684.539 L1417.07 684.539 L1417.63 684.539 L1418.19 684.539 L1418.75 684.539 L1419.31 684.539 L1419.87 684.539 L1420.43 684.539 L1420.99 684.539 L1421.55 684.539 L1422.11 684.539 L1422.67 684.539 L1423.23 684.539 L1423.78 684.539 L1424.34 684.539 L1424.9 684.539 L1425.46 684.539 L1426.02 684.539 L1426.58 684.539 L1427.14 684.539 L1427.7 684.539 L1428.26 684.539 L1428.82 684.539 L1429.38 684.539 L1429.94 684.539 L1430.5 684.539 L1431.05 684.539 L1431.61 684.539 L1432.17 684.539 L1432.73 684.539 L1433.29 684.539 L1433.85 684.539 L1434.41 684.539 L1434.97 684.539 L1435.53 684.539 L1436.09 684.539 L1436.65 684.539 L1437.21 684.539 L1437.77 684.539 L1438.33 684.539 L1438.88 684.539 L1439.44 684.539 L1440 684.539 L1440.56 684.539 L1441.12 684.539 L1441.68 684.539 L1442.24 684.539 L1442.8 684.539 L1443.36 684.539 L1443.92 684.539 L1444.48 684.539 L1445.04 684.539 L1445.6 684.539 L1446.15 684.539 L1446.71 684.539 L1447.27 684.539 L1447.83 684.539 L1448.39 684.539 L1448.95 684.539 L1449.51 684.539 L1450.07 684.539 L1450.63 684.539 L1451.19 684.539 L1451.75 684.539 L1452.31 684.539 L1452.87 684.539 L1453.42 684.539 L1453.98 684.539 L1454.54 684.539 L1455.1 684.539 L1455.66 684.539 L1456.22 684.539 L1456.78 684.539 L1457.34 684.539 L1457.9 684.539 L1458.46 684.539 L1459.02 684.539 L1459.58 684.539 L1460.14 684.539 L1460.7 684.539 L1461.25 684.539 L1461.81 684.539 L1462.37 684.539 L1462.93 684.539 L1463.49 684.539 L1464.05 684.539 L1464.61 684.539 L1465.17 684.539 L1465.73 684.539 L1466.29 684.539 L1466.85 684.539 L1467.41 684.539 L1467.97 684.539 L1468.52 684.539 L1469.08 684.539 L1469.64 684.539 L1470.2 684.539 L1470.76 684.539 L1471.32 684.539 L1471.88 684.539 L1472.44 684.539 L1473 684.539 L1473.56 684.539 L1474.12 684.539 L1474.68 684.539 L1475.24 684.539 L1475.79 684.539 L1476.35 684.539 L1476.91 684.539 L1477.47 684.539 L1478.03 684.539 L1478.59 684.539 L1479.15 684.539 L1479.71 684.539 L1480.27 684.539 L1480.83 684.539 L1481.39 684.539 L1481.95 684.539 L1482.51 684.539 L1483.07 684.539 L1483.62 684.539 L1484.18 684.539 L1484.74 684.539 L1485.3 684.539 L1485.86 684.539 L1486.42 684.539 L1486.98 684.539 L1487.54 684.539 L1488.1 684.539 L1488.66 684.539 L1489.22 684.539 L1489.78 684.539 L1490.34 684.539 L1490.89 684.539 L1491.45 684.539 L1492.01 684.539 L1492.57 684.539 L1493.13 684.539 L1493.69 684.539 L1494.25 684.539 L1494.81 684.539 L1495.37 684.539 L1495.93 684.539 L1496.49 684.539 L1497.05 684.539 L1497.61 684.539 L1498.16 684.539 L1498.72 684.539 L1499.28 684.539 L1499.84 684.539 L1500.4 684.539 L1500.96 684.539 L1501.52 684.539 L1502.08 684.539 L1502.64 684.539 L1503.2 684.539 L1503.76 684.539 L1504.32 684.539 L1504.88 684.539 L1505.44 684.539 L1505.99 684.539 L1506.55 684.539 L1507.11 684.539 L1507.67 684.539 L1508.23 684.539 L1508.79 684.539 L1509.35 684.539 L1509.91 684.539 L1510.47 684.539 L1511.03 684.539 L1511.59 684.539 L1512.15 684.539 L1512.71 684.539 L1513.26 684.539 L1513.82 684.539 L1514.38 684.539 L1514.94 684.539 L1515.5 684.539 L1516.06 684.539 L1516.62 684.539 L1517.18 684.539 L1517.74 684.539 L1518.3 684.539 L1518.86 684.539 L1519.42 684.539 L1519.98 684.539 L1520.53 684.539 L1521.09 684.539 L1521.65 684.539 L1522.21 684.539 L1522.77 684.539 L1523.33 684.539 L1523.89 684.539 L1524.45 684.539 L1525.01 684.539 L1525.57 684.539 L1526.13 684.539 L1526.69 684.539 L1527.25 684.539 L1527.81 684.539 L1528.36 684.539 L1528.92 684.539 L1529.48 684.539 L1530.04 684.539 L1530.6 684.539 L1531.16 684.539 L1531.72 684.539 L1532.28 684.539 L1532.84 684.539 L1533.4 684.539 L1533.96 684.539 L1534.52 684.539 L1535.08 684.539 L1535.63 684.539 L1536.19 684.539 L1536.75 684.539 L1537.31 684.539 L1537.87 684.539 L1538.43 684.539 L1538.99 684.539 L1539.55 684.539 L1540.11 684.539 L1540.67 684.539 L1541.23 684.539 L1541.79 684.539 L1542.35 684.539 L1542.9 684.539 L1543.46 684.539 L1544.02 684.539 L1544.58 684.539 L1545.14 684.539 L1545.7 684.539 L1546.26 684.539 L1546.82 684.539 L1547.38 684.539 L1547.94 684.539 L1548.5 684.539 L1549.06 684.539 L1549.62 684.539 L1550.18 684.539 L1550.73 684.539 L1551.29 684.539 L1551.85 684.539 L1552.41 684.539 L1552.97 684.539 L1553.53 684.539 L1554.09 684.539 L1554.65 684.539 L1555.21 684.539 L1555.77 684.539 L1556.33 684.539 L1556.89 684.539 L1557.45 684.539 L1558 684.539 L1558.56 684.539 L1559.12 684.539 L1559.68 684.539 L1560.24 684.539 L1560.8 684.539 L1561.36 684.539 L1561.92 684.539 L1562.48 684.539 L1563.04 684.539 L1563.6 684.539 L1564.16 684.539 L1564.72 684.539 L1565.28 684.539 L1565.83 684.539 L1566.39 684.539 L1566.95 684.539 L1567.51 684.539 L1568.07 684.539 L1568.63 684.539 L1569.19 684.539 L1569.75 684.539 L1570.31 684.539 L1570.87 684.539 L1571.43 684.539 L1571.99 684.539 L1572.55 684.539 L1573.1 684.539 L1573.66 684.539 L1574.22 684.539 L1574.78 684.539 L1575.34 684.539 L1575.9 684.539 L1576.46 684.539 L1577.02 684.539 L1577.58 684.539 L1578.14 684.539 L1578.7 684.539 L1579.26 684.539 L1579.82 684.539 L1580.37 684.539 L1580.93 684.539 L1581.49 684.539 L1582.05 684.539 L1582.61 684.539 L1583.17 684.539 L1583.73 684.539 L1584.29 684.539 L1584.85 684.539 L1585.41 684.539 L1585.97 684.539 L1586.53 684.539 L1587.09 684.539 L1587.65 684.539 L1588.2 684.539 L1588.76 684.539 L1589.32 684.539 L1589.88 684.539 L1590.44 684.539 L1591 684.539 L1591.56 684.539 L1592.12 684.539 L1592.68 684.539 L1593.24 684.539 L1593.8 684.539 L1594.36 684.539 L1594.92 684.539 L1595.47 684.539 L1596.03 684.539 L1596.59 684.539 L1597.15 684.539 L1597.71 684.539 L1598.27 684.539 L1598.83 684.539 L1599.39 684.539 L1599.95 684.539 L1600.51 684.539 L1601.07 684.539 L1601.63 684.539 L1602.19 684.539 L1602.74 684.539 L1603.3 684.539 L1603.86 684.539 L1604.42 684.539 L1604.98 684.539 L1605.54 684.539 L1606.1 684.539 L1606.66 684.539 L1607.22 684.539 L1607.78 684.539 L1608.34 684.539 L1608.9 684.539 L1609.46 684.539 L1610.02 684.539 L1610.57 684.539 L1611.13 684.539 L1611.69 684.539 L1612.25 684.539 L1612.81 684.539 L1613.37 684.539 L1613.93 684.539 L1614.49 684.539 L1615.05 684.539 L1615.61 684.539 L1616.17 684.539 L1616.73 684.539 L1617.29 684.539 L1617.84 684.539 L1618.4 684.539 L1618.96 684.539 L1619.52 684.539 L1620.08 684.539 L1620.64 684.539 L1621.2 684.539 L1621.76 684.539 L1622.32 684.539 L1622.88 684.539 L1623.44 684.539 L1624 684.539 L1624.56 684.539 L1625.11 684.539 L1625.67 684.539 L1626.23 684.539 L1626.79 684.539 L1627.35 684.539 L1627.91 684.539 L1628.47 684.539 L1629.03 684.539 L1629.59 684.539 L1630.15 684.539 L1630.71 684.539 L1631.27 684.539 L1631.83 684.539 L1632.39 684.539 L1632.94 684.539 L1633.5 684.539 L1634.06 684.539 L1634.62 684.539 L1635.18 684.539 L1635.74 684.539 L1636.3 684.539 L1636.86 684.539 L1637.42 684.539 L1637.98 684.539 L1638.54 684.539 L1639.1 684.539 L1639.66 684.539 L1640.21 684.539 L1640.77 684.539 L1641.33 684.539 L1641.89 684.539 L1642.45 684.539 L1643.01 684.539 L1643.57 684.539 L1644.13 684.539 L1644.69 684.539 L1645.25 684.539 L1645.81 684.539 L1646.37 684.539 L1646.93 684.539 L1647.48 684.539 L1648.04 684.539 L1648.6 684.539 L1649.16 684.539 L1649.72 684.539 L1650.28 684.539 L1650.84 684.539 L1651.4 684.539 L1651.96 684.539 L1652.52 684.539 L1653.08 684.539 L1653.64 684.539 L1654.2 684.539 L1654.76 684.539 L1655.31 684.539 L1655.87 684.539 L1656.43 684.539 L1656.99 684.539 L1657.55 684.539 L1658.11 684.539 L1658.67 684.539 L1659.23 684.539 L1659.79 684.539 L1660.35 684.539 L1660.91 684.539 L1661.47 684.539 L1662.03 684.539 L1662.58 684.539 L1663.14 684.539 L1663.7 684.539 L1664.26 684.539 L1664.82 684.539 L1665.38 684.539 L1665.94 684.539 L1666.5 684.539 L1667.06 684.539 L1667.62 684.539 L1668.18 684.539 L1668.74 684.539 L1669.3 684.539 L1669.85 684.539 L1670.41 684.539 L1670.97 684.539 L1671.53 684.539 L1672.09 684.539 L1672.65 684.539 L1673.21 684.539 L1673.77 684.539 L1674.33 684.539 L1674.89 684.539 L1675.45 684.539 L1676.01 684.539 L1676.57 684.539 L1677.13 684.539 L1677.68 684.539 L1678.24 684.539 L1678.8 684.539 L1679.36 684.539 L1679.92 684.539 L1680.48 684.539 L1681.04 684.539 L1681.6 684.539 L1682.16 684.539 L1682.72 684.539 L1683.28 684.539 L1683.84 684.539 L1684.4 684.539 L1684.95 684.539 L1685.51 684.539 L1686.07 684.539 L1686.63 684.539 L1687.19 684.539 L1687.75 684.539 L1688.31 684.539 L1688.87 684.539 L1689.43 684.539 L1689.99 684.539 L1690.55 684.539 L1691.11 684.539 L1691.67 684.539 L1692.23 684.539 L1692.78 684.539 L1693.34 684.539 L1693.9 684.539 L1694.46 684.539 L1695.02 684.539 L1695.58 684.539 L1696.14 684.539 L1696.7 684.539 L1697.26 684.539 L1697.82 684.539 L1698.38 684.539 L1698.94 684.539 L1699.5 684.539 L1700.05 684.539 L1700.61 684.539 L1701.17 684.539 L1701.73 684.539 L1702.29 684.539 L1702.85 684.539 L1703.41 684.539 L1703.97 684.539 L1704.53 684.539 L1705.09 684.539 L1705.65 684.539 L1706.21 684.539 L1706.77 684.539 L1707.32 684.539 L1707.88 684.539 L1708.44 684.539 L1709 684.539 L1709.56 684.539 L1710.12 684.539 L1710.68 684.539 L1711.24 684.539 L1711.8 684.539 L1712.36 684.539 L1712.92 684.539 L1713.48 684.539 L1714.04 684.539 L1714.6 684.539 L1715.15 684.539 L1715.71 684.539 L1716.27 684.539 L1716.83 684.539 L1717.39 684.539 L1717.95 684.539 L1718.51 684.539 L1719.07 684.539 L1719.63 684.539 L1720.19 684.539 L1720.75 684.539 L1721.31 684.539 L1721.87 684.539 L1722.42 684.539 L1722.98 684.539 L1723.54 684.539 L1724.1 684.539 L1724.66 684.539 L1725.22 684.539 L1725.78 684.539 L1726.34 684.539 L1726.9 684.539 L1727.46 684.539 L1728.02 684.539 L1728.58 684.539 L1729.14 684.539 L1729.69 684.539 L1730.25 684.539 L1730.81 684.539 L1731.37 684.539 L1731.93 684.539 L1732.49 684.539 L1733.05 684.539 L1733.61 684.539 L1734.17 684.539 L1734.73 684.539 L1735.29 684.539 L1735.85 684.539 L1736.41 684.539 L1736.97 684.539 L1737.52 684.539 L1738.08 684.539 L1738.64 684.539 L1739.2 684.539 L1739.76 684.539 L1740.32 684.539 L1740.88 684.539 L1741.44 684.539 L1742 684.539 L1742.56 684.539 L1743.12 684.539 L1743.68 684.539 L1744.24 684.539 L1744.79 684.539 L1745.35 684.539 L1745.91 684.539 L1746.47 684.539 L1747.03 684.539 L1747.59 684.539 L1748.15 684.539 L1748.71 684.539 L1749.27 684.539 L1749.83 684.539 L1750.39 684.539 L1750.95 684.539 L1751.51 684.539 L1752.06 684.539 L1752.62 684.539 L1753.18 684.539 L1753.74 684.539 L1754.3 684.539 L1754.86 684.539 L1755.42 684.539 L1755.98 684.539 L1756.54 684.539 L1757.1 684.539 L1757.66 684.539 L1758.22 684.539 L1758.78 684.539 L1759.34 684.539 L1759.89 684.539 L1760.45 684.539 L1761.01 684.539 L1761.57 684.539 L1762.13 684.539 L1762.69 684.539 L1763.25 684.539 L1763.81 684.539 L1764.37 684.539 L1764.93 684.539 L1765.49 684.539 L1766.05 684.539 L1766.61 684.539 L1767.16 684.539 L1767.72 684.539 L1768.28 684.539 L1768.84 684.539 L1769.4 684.539 L1769.96 684.539 L1770.52 684.539 L1771.08 684.539 L1771.64 684.539 L1772.2 684.539 L1772.76 684.539 L1773.32 684.539 L1773.88 684.539 L1774.43 684.539 L1774.99 684.539 L1775.55 684.539 L1776.11 684.539 L1776.67 684.539 L1777.23 684.539 L1777.79 684.539 L1778.35 684.539 L1778.91 684.539 L1779.47 684.539 L1780.03 684.539 L1780.59 684.539 L1781.15 684.539 L1781.71 684.539 L1782.26 684.539 L1782.82 684.539 L1783.38 684.539 L1783.94 684.539 L1784.5 684.539 L1785.06 684.539 L1785.62 684.539 L1786.18 684.539 L1786.74 684.539 L1787.3 684.539 L1787.86 684.539 L1788.42 684.539 L1788.98 684.539 L1789.53 684.539 L1790.09 684.539 L1790.65 684.539 L1791.21 684.539 L1791.77 684.539 L1792.33 684.539 L1792.89 684.539 L1793.45 684.539 L1794.01 684.539 L1794.57 684.539 L1795.13 684.539 L1795.69 684.539 L1796.25 684.539 L1796.8 684.539 L1797.36 684.539 L1797.92 684.539 L1798.48 684.539 L1799.04 684.539 L1799.6 684.539 L1800.16 684.539 L1800.72 684.539 L1801.28 684.539 L1801.84 684.539 L1802.4 684.539 L1802.96 684.539 L1803.52 684.539 L1804.08 684.539 L1804.63 684.539 L1805.19 684.539 L1805.75 684.539 L1806.31 684.539 L1806.87 684.539 L1807.43 684.539 L1807.99 684.539 L1808.55 684.539 L1809.11 684.539 L1809.67 684.539 L1810.23 684.539 L1810.79 684.539 L1811.35 684.539 L1811.9 684.539 L1812.46 684.539 L1813.02 684.539 L1813.58 684.539 L1814.14 684.539 L1814.7 684.539 L1815.26 684.539 L1815.82 684.539 L1816.38 684.539 L1816.94 684.539 L1817.5 684.539 L1818.06 684.539 L1818.62 684.539 L1819.18 684.539 L1819.73 684.539 L1820.29 684.539 L1820.85 684.539 L1821.41 684.539 L1821.97 684.539 L1822.53 684.539 L1823.09 684.539 L1823.65 684.539 L1824.21 684.539 L1824.77 684.539 L1825.33 684.539 L1825.89 684.539 L1826.45 684.539 L1827 684.539 L1827.56 684.539 L1828.12 684.539 L1828.68 684.539 L1829.24 684.539 L1829.8 684.539 L1830.36 684.539 L1830.92 684.539 L1831.48 684.539 L1832.04 684.539 L1832.6 684.539 L1833.16 684.539 L1833.72 684.539 L1834.27 684.539 L1834.83 684.539 L1835.39 684.539 L1835.95 684.539 L1836.51 684.539 L1837.07 684.539 L1837.63 684.539 L1838.19 684.539 L1838.19 682.487 L1837.63 682.487 L1837.07 682.487 L1836.51 682.487 L1835.95 682.487 L1835.39 682.487 L1834.83 682.487 L1834.27 682.487 L1833.72 682.487 L1833.16 682.487 L1832.6 682.487 L1832.04 682.487 L1831.48 682.487 L1830.92 682.487 L1830.36 682.487 L1829.8 682.487 L1829.24 682.487 L1828.68 682.487 L1828.12 682.487 L1827.56 682.487 L1827 682.487 L1826.45 682.487 L1825.89 682.487 L1825.33 682.487 L1824.77 682.487 L1824.21 682.487 L1823.65 682.487 L1823.09 682.487 L1822.53 682.487 L1821.97 682.487 L1821.41 682.487 L1820.85 682.487 L1820.29 682.487 L1819.73 682.487 L1819.18 682.487 L1818.62 682.487 L1818.06 682.487 L1817.5 682.487 L1816.94 682.487 L1816.38 682.487 L1815.82 682.487 L1815.26 682.487 L1814.7 682.487 L1814.14 682.487 L1813.58 682.487 L1813.02 682.487 L1812.46 682.487 L1811.9 682.487 L1811.35 682.487 L1810.79 682.487 L1810.23 682.487 L1809.67 682.487 L1809.11 682.487 L1808.55 682.487 L1807.99 682.487 L1807.43 682.487 L1806.87 682.487 L1806.31 682.487 L1805.75 682.487 L1805.19 682.487 L1804.63 682.487 L1804.08 682.487 L1803.52 682.487 L1802.96 682.487 L1802.4 682.487 L1801.84 682.487 L1801.28 682.487 L1800.72 682.487 L1800.16 682.487 L1799.6 682.487 L1799.04 682.487 L1798.48 682.487 L1797.92 682.487 L1797.36 682.487 L1796.8 682.487 L1796.25 682.487 L1795.69 682.487 L1795.13 682.487 L1794.57 682.487 L1794.01 682.487 L1793.45 682.487 L1792.89 682.487 L1792.33 682.487 L1791.77 682.487 L1791.21 682.487 L1790.65 682.487 L1790.09 682.487 L1789.53 682.487 L1788.98 682.487 L1788.42 682.487 L1787.86 682.487 L1787.3 682.487 L1786.74 682.487 L1786.18 682.487 L1785.62 682.487 L1785.06 682.487 L1784.5 682.487 L1783.94 682.487 L1783.38 682.487 L1782.82 682.487 L1782.26 682.487 L1781.71 682.487 L1781.15 682.487 L1780.59 682.487 L1780.03 682.487 L1779.47 682.487 L1778.91 682.487 L1778.35 682.487 L1777.79 682.487 L1777.23 682.487 L1776.67 682.487 L1776.11 682.487 L1775.55 682.487 L1774.99 682.487 L1774.43 682.487 L1773.88 682.487 L1773.32 682.487 L1772.76 682.487 L1772.2 682.487 L1771.64 682.487 L1771.08 682.487 L1770.52 682.487 L1769.96 682.487 L1769.4 682.487 L1768.84 682.487 L1768.28 682.487 L1767.72 682.487 L1767.16 682.487 L1766.61 682.487 L1766.05 682.487 L1765.49 682.487 L1764.93 682.487 L1764.37 682.487 L1763.81 682.487 L1763.25 682.487 L1762.69 682.487 L1762.13 682.487 L1761.57 682.487 L1761.01 682.487 L1760.45 682.487 L1759.89 682.487 L1759.34 682.487 L1758.78 682.487 L1758.22 682.487 L1757.66 682.487 L1757.1 682.487 L1756.54 682.487 L1755.98 682.487 L1755.42 682.487 L1754.86 682.487 L1754.3 682.487 L1753.74 682.487 L1753.18 682.487 L1752.62 682.487 L1752.06 682.487 L1751.51 682.487 L1750.95 682.487 L1750.39 682.487 L1749.83 682.487 L1749.27 682.487 L1748.71 682.487 L1748.15 682.487 L1747.59 682.487 L1747.03 682.487 L1746.47 682.487 L1745.91 682.487 L1745.35 682.487 L1744.79 682.487 L1744.24 682.487 L1743.68 682.487 L1743.12 682.487 L1742.56 682.487 L1742 682.487 L1741.44 682.487 L1740.88 682.487 L1740.32 682.487 L1739.76 682.487 L1739.2 682.487 L1738.64 682.487 L1738.08 682.487 L1737.52 682.487 L1736.97 682.487 L1736.41 682.487 L1735.85 682.487 L1735.29 682.487 L1734.73 682.487 L1734.17 682.487 L1733.61 682.487 L1733.05 682.487 L1732.49 682.487 L1731.93 682.487 L1731.37 682.487 L1730.81 682.487 L1730.25 682.487 L1729.69 682.487 L1729.14 682.487 L1728.58 682.487 L1728.02 682.487 L1727.46 682.487 L1726.9 682.487 L1726.34 682.487 L1725.78 682.487 L1725.22 682.487 L1724.66 682.487 L1724.1 682.487 L1723.54 682.487 L1722.98 682.487 L1722.42 682.487 L1721.87 682.487 L1721.31 682.487 L1720.75 682.487 L1720.19 682.487 L1719.63 682.487 L1719.07 682.487 L1718.51 682.487 L1717.95 682.487 L1717.39 682.487 L1716.83 682.487 L1716.27 682.487 L1715.71 682.487 L1715.15 682.487 L1714.6 682.487 L1714.04 682.487 L1713.48 682.487 L1712.92 682.487 L1712.36 682.487 L1711.8 682.487 L1711.24 682.487 L1710.68 682.487 L1710.12 682.487 L1709.56 682.487 L1709 682.487 L1708.44 682.487 L1707.88 682.487 L1707.32 682.487 L1706.77 682.487 L1706.21 682.487 L1705.65 682.487 L1705.09 682.487 L1704.53 682.487 L1703.97 682.487 L1703.41 682.487 L1702.85 682.487 L1702.29 682.487 L1701.73 682.487 L1701.17 682.487 L1700.61 682.487 L1700.05 682.487 L1699.5 682.487 L1698.94 682.487 L1698.38 682.487 L1697.82 682.487 L1697.26 682.487 L1696.7 682.487 L1696.14 682.487 L1695.58 682.487 L1695.02 682.487 L1694.46 682.487 L1693.9 682.487 L1693.34 682.487 L1692.78 682.487 L1692.23 682.487 L1691.67 682.487 L1691.11 682.487 L1690.55 682.487 L1689.99 682.487 L1689.43 682.487 L1688.87 682.487 L1688.31 682.487 L1687.75 682.487 L1687.19 682.487 L1686.63 682.487 L1686.07 682.487 L1685.51 682.487 L1684.95 682.487 L1684.4 682.487 L1683.84 682.487 L1683.28 682.487 L1682.72 682.487 L1682.16 682.487 L1681.6 682.487 L1681.04 682.487 L1680.48 682.487 L1679.92 682.487 L1679.36 682.487 L1678.8 682.487 L1678.24 682.487 L1677.68 682.487 L1677.13 682.487 L1676.57 682.487 L1676.01 682.487 L1675.45 682.487 L1674.89 682.487 L1674.33 682.487 L1673.77 682.487 L1673.21 682.487 L1672.65 682.487 L1672.09 682.487 L1671.53 682.487 L1670.97 682.487 L1670.41 682.487 L1669.85 682.487 L1669.3 682.487 L1668.74 682.487 L1668.18 682.487 L1667.62 682.487 L1667.06 682.487 L1666.5 682.487 L1665.94 682.487 L1665.38 682.487 L1664.82 682.487 L1664.26 682.487 L1663.7 682.487 L1663.14 682.487 L1662.58 682.487 L1662.03 682.487 L1661.47 682.487 L1660.91 682.487 L1660.35 682.487 L1659.79 682.487 L1659.23 682.487 L1658.67 682.487 L1658.11 682.487 L1657.55 682.487 L1656.99 682.487 L1656.43 682.487 L1655.87 682.487 L1655.31 682.487 L1654.76 682.487 L1654.2 682.487 L1653.64 682.487 L1653.08 682.487 L1652.52 682.487 L1651.96 682.487 L1651.4 682.487 L1650.84 682.487 L1650.28 682.487 L1649.72 682.487 L1649.16 682.487 L1648.6 682.487 L1648.04 682.487 L1647.48 682.487 L1646.93 682.487 L1646.37 682.487 L1645.81 682.487 L1645.25 682.487 L1644.69 682.487 L1644.13 682.487 L1643.57 682.487 L1643.01 682.487 L1642.45 682.487 L1641.89 682.487 L1641.33 682.487 L1640.77 682.487 L1640.21 682.487 L1639.66 682.487 L1639.1 682.487 L1638.54 682.487 L1637.98 682.487 L1637.42 682.487 L1636.86 682.487 L1636.3 682.487 L1635.74 682.487 L1635.18 682.487 L1634.62 682.487 L1634.06 682.487 L1633.5 682.487 L1632.94 682.487 L1632.39 682.487 L1631.83 682.487 L1631.27 682.487 L1630.71 682.487 L1630.15 682.487 L1629.59 682.487 L1629.03 682.487 L1628.47 682.487 L1627.91 682.487 L1627.35 682.487 L1626.79 682.487 L1626.23 682.487 L1625.67 682.487 L1625.11 682.487 L1624.56 682.487 L1624 682.487 L1623.44 682.487 L1622.88 682.487 L1622.32 682.487 L1621.76 682.487 L1621.2 682.487 L1620.64 682.487 L1620.08 682.487 L1619.52 682.487 L1618.96 682.487 L1618.4 682.487 L1617.84 682.487 L1617.29 682.487 L1616.73 682.487 L1616.17 682.487 L1615.61 682.487 L1615.05 682.487 L1614.49 682.487 L1613.93 682.487 L1613.37 682.487 L1612.81 682.487 L1612.25 682.487 L1611.69 682.487 L1611.13 682.487 L1610.57 682.487 L1610.02 682.487 L1609.46 682.487 L1608.9 682.487 L1608.34 682.487 L1607.78 682.487 L1607.22 682.487 L1606.66 682.487 L1606.1 682.487 L1605.54 682.487 L1604.98 682.487 L1604.42 682.487 L1603.86 682.487 L1603.3 682.487 L1602.74 682.487 L1602.19 682.487 L1601.63 682.487 L1601.07 682.487 L1600.51 682.487 L1599.95 682.487 L1599.39 682.487 L1598.83 682.487 L1598.27 682.487 L1597.71 682.487 L1597.15 682.487 L1596.59 682.487 L1596.03 682.487 L1595.47 682.487 L1594.92 682.487 L1594.36 682.487 L1593.8 682.487 L1593.24 682.487 L1592.68 682.487 L1592.12 682.487 L1591.56 682.487 L1591 682.487 L1590.44 682.487 L1589.88 682.487 L1589.32 682.487 L1588.76 682.487 L1588.2 682.487 L1587.65 682.487 L1587.09 682.487 L1586.53 682.487 L1585.97 682.487 L1585.41 682.487 L1584.85 682.487 L1584.29 682.487 L1583.73 682.487 L1583.17 682.487 L1582.61 682.487 L1582.05 682.487 L1581.49 682.487 L1580.93 682.487 L1580.37 682.487 L1579.82 682.487 L1579.26 682.487 L1578.7 682.487 L1578.14 682.487 L1577.58 682.487 L1577.02 682.487 L1576.46 682.487 L1575.9 682.487 L1575.34 682.487 L1574.78 682.487 L1574.22 682.487 L1573.66 682.487 L1573.1 682.487 L1572.55 682.487 L1571.99 682.487 L1571.43 682.487 L1570.87 682.487 L1570.31 682.487 L1569.75 682.487 L1569.19 682.487 L1568.63 682.487 L1568.07 682.487 L1567.51 682.487 L1566.95 682.487 L1566.39 682.487 L1565.83 682.487 L1565.28 682.487 L1564.72 682.487 L1564.16 682.487 L1563.6 682.487 L1563.04 682.487 L1562.48 682.487 L1561.92 682.487 L1561.36 682.487 L1560.8 682.487 L1560.24 682.487 L1559.68 682.487 L1559.12 682.487 L1558.56 682.487 L1558 682.487 L1557.45 682.487 L1556.89 682.487 L1556.33 682.487 L1555.77 682.487 L1555.21 682.487 L1554.65 682.487 L1554.09 682.487 L1553.53 682.487 L1552.97 682.487 L1552.41 682.487 L1551.85 682.487 L1551.29 682.487 L1550.73 682.487 L1550.18 682.487 L1549.62 682.487 L1549.06 682.487 L1548.5 682.487 L1547.94 682.487 L1547.38 682.487 L1546.82 682.487 L1546.26 682.487 L1545.7 682.487 L1545.14 682.487 L1544.58 682.487 L1544.02 682.487 L1543.46 682.487 L1542.9 682.487 L1542.35 682.487 L1541.79 682.487 L1541.23 682.487 L1540.67 682.487 L1540.11 682.487 L1539.55 682.487 L1538.99 682.487 L1538.43 682.487 L1537.87 682.487 L1537.31 682.487 L1536.75 682.487 L1536.19 682.487 L1535.63 682.487 L1535.08 682.487 L1534.52 682.487 L1533.96 682.487 L1533.4 682.487 L1532.84 682.487 L1532.28 682.487 L1531.72 682.487 L1531.16 682.487 L1530.6 682.487 L1530.04 682.487 L1529.48 682.487 L1528.92 682.487 L1528.36 682.487 L1527.81 682.487 L1527.25 682.487 L1526.69 682.487 L1526.13 682.487 L1525.57 682.487 L1525.01 682.487 L1524.45 682.487 L1523.89 682.487 L1523.33 682.487 L1522.77 682.487 L1522.21 682.487 L1521.65 682.487 L1521.09 682.487 L1520.53 682.487 L1519.98 682.487 L1519.42 682.487 L1518.86 682.487 L1518.3 682.487 L1517.74 682.487 L1517.18 682.487 L1516.62 682.487 L1516.06 682.487 L1515.5 682.487 L1514.94 682.487 L1514.38 682.487 L1513.82 682.487 L1513.26 682.487 L1512.71 682.487 L1512.15 682.487 L1511.59 682.487 L1511.03 682.487 L1510.47 682.487 L1509.91 682.487 L1509.35 682.487 L1508.79 682.487 L1508.23 682.487 L1507.67 682.487 L1507.11 682.487 L1506.55 682.487 L1505.99 682.487 L1505.44 682.487 L1504.88 682.487 L1504.32 682.487 L1503.76 682.487 L1503.2 682.487 L1502.64 682.487 L1502.08 682.487 L1501.52 682.487 L1500.96 682.487 L1500.4 682.487 L1499.84 682.487 L1499.28 682.487 L1498.72 682.487 L1498.16 682.487 L1497.61 682.487 L1497.05 682.487 L1496.49 682.487 L1495.93 682.487 L1495.37 682.487 L1494.81 682.487 L1494.25 682.487 L1493.69 682.487 L1493.13 682.487 L1492.57 682.487 L1492.01 682.487 L1491.45 682.487 L1490.89 682.487 L1490.34 682.487 L1489.78 682.487 L1489.22 682.487 L1488.66 682.487 L1488.1 682.487 L1487.54 682.487 L1486.98 682.487 L1486.42 682.487 L1485.86 682.487 L1485.3 682.487 L1484.74 682.487 L1484.18 682.487 L1483.62 682.487 L1483.07 682.487 L1482.51 682.487 L1481.95 682.487 L1481.39 682.487 L1480.83 682.487 L1480.27 682.487 L1479.71 682.487 L1479.15 682.487 L1478.59 682.487 L1478.03 682.487 L1477.47 682.487 L1476.91 682.487 L1476.35 682.487 L1475.79 682.487 L1475.24 682.487 L1474.68 682.487 L1474.12 682.487 L1473.56 682.487 L1473 682.487 L1472.44 682.487 L1471.88 682.487 L1471.32 682.487 L1470.76 682.487 L1470.2 682.487 L1469.64 682.487 L1469.08 682.487 L1468.52 682.487 L1467.97 682.487 L1467.41 682.487 L1466.85 682.487 L1466.29 682.487 L1465.73 682.487 L1465.17 682.487 L1464.61 682.487 L1464.05 682.487 L1463.49 682.487 L1462.93 682.487 L1462.37 682.487 L1461.81 682.487 L1461.25 682.487 L1460.7 682.487 L1460.14 682.487 L1459.58 682.487 L1459.02 682.487 L1458.46 682.487 L1457.9 682.487 L1457.34 682.487 L1456.78 682.487 L1456.22 682.487 L1455.66 682.487 L1455.1 682.487 L1454.54 682.487 L1453.98 682.487 L1453.42 682.487 L1452.87 682.487 L1452.31 682.487 L1451.75 682.487 L1451.19 682.487 L1450.63 682.487 L1450.07 682.487 L1449.51 682.487 L1448.95 682.487 L1448.39 682.487 L1447.83 682.487 L1447.27 682.487 L1446.71 682.487 L1446.15 682.487 L1445.6 682.487 L1445.04 682.487 L1444.48 682.487 L1443.92 682.487 L1443.36 682.487 L1442.8 682.487 L1442.24 682.487 L1441.68 682.487 L1441.12 682.487 L1440.56 682.487 L1440 682.487 L1439.44 682.487 L1438.88 682.487 L1438.33 682.487 L1437.77 682.487 L1437.21 682.487 L1436.65 682.487 L1436.09 682.487 L1435.53 682.487 L1434.97 682.487 L1434.41 682.487 L1433.85 682.487 L1433.29 682.487 L1432.73 682.487 L1432.17 682.487 L1431.61 682.487 L1431.05 682.487 L1430.5 682.487 L1429.94 682.487 L1429.38 682.487 L1428.82 682.487 L1428.26 682.487 L1427.7 682.487 L1427.14 682.487 L1426.58 682.487 L1426.02 682.487 L1425.46 682.487 L1424.9 682.487 L1424.34 682.487 L1423.78 682.487 L1423.23 682.487 L1422.67 682.487 L1422.11 682.487 L1421.55 682.487 L1420.99 682.487 L1420.43 682.487 L1419.87 682.487 L1419.31 682.487 L1418.75 682.487 L1418.19 682.487 L1417.63 682.487 L1417.07 682.487 L1416.51 682.487 L1415.95 682.487 L1415.4 682.487 L1414.84 682.487 L1414.28 682.487 L1413.72 682.487 L1413.16 682.487 L1412.6 682.487 L1412.04 682.487 L1411.48 682.487 L1410.92 682.487 L1410.36 682.487 L1409.8 682.487 L1409.24 682.487 L1408.68 682.487 L1408.13 682.487 L1407.57 682.487 L1407.01 682.487 L1406.45 682.487 L1405.89 682.487 L1405.33 682.487 L1404.77 682.487 L1404.21 682.487 L1403.65 682.487 L1403.09 682.487 L1402.53 682.487 L1401.97 682.487 L1401.41 682.487 L1400.86 682.487 L1400.3 682.487 L1399.74 682.487 L1399.18 682.487 L1398.62 682.487 L1398.06 682.487 L1397.5 682.487 L1396.94 682.487 L1396.38 682.487 L1395.82 682.487 L1395.26 682.487 L1394.7 682.487 L1394.14 682.487 L1393.58 682.487 L1393.03 682.487 L1392.47 682.487 L1391.91 682.487 L1391.35 682.487 L1390.79 682.487 L1390.23 682.487 L1389.67 682.487 L1389.11 682.487 L1388.55 682.487 L1387.99 682.487 L1387.43 682.487 L1386.87 682.487 L1386.31 682.487 L1385.76 682.487 L1385.2 682.487 L1384.64 682.487 L1384.08 682.487 L1383.52 682.487 L1382.96 682.487 L1382.4 682.487 L1381.84 682.487 L1381.28 682.487 L1380.72 682.487 L1380.16 682.487 L1379.6 682.487 L1379.04 682.487 L1378.49 682.487 L1377.93 682.487 L1377.37 682.487 L1376.81 682.487 L1376.25 682.487 L1375.69 682.487 L1375.13 682.487 L1374.57 682.487 L1374.01 682.487 L1373.45 682.487 L1372.89 682.487 L1372.33 682.487 L1371.77 682.487 L1371.21 682.487 L1370.66 682.487 L1370.1 682.487 L1369.54 682.487 L1368.98 682.487 L1368.42 682.487 L1367.86 682.487 L1367.3 682.487 L1366.74 682.487 L1366.18 682.487 L1365.62 682.487 L1365.06 682.487 L1364.5 682.487 L1363.94 682.487 L1363.39 682.487 L1362.83 682.487 L1362.27 682.487 L1361.71 682.487 L1361.15 682.487 L1360.59 682.487 L1360.03 682.487 L1359.47 682.487 L1358.91 682.487 L1358.35 682.487 L1357.79 682.487 L1357.23 682.487 L1356.67 682.487 L1356.12 682.487 L1355.56 682.487 L1355 682.487 L1354.44 682.487 L1353.88 682.487 L1353.32 682.487 L1352.76 682.487 L1352.2 682.487 L1351.64 682.487 L1351.08 682.487 L1350.52 682.487 L1349.96 682.487 L1349.4 682.487 L1348.84 682.487 L1348.29 682.487 L1347.73 682.487 L1347.17 682.487 L1346.61 682.487 L1346.05 682.487 L1345.49 682.487 L1344.93 682.487 L1344.37 682.487 L1343.81 682.487 L1343.25 682.487 L1342.69 682.487 L1342.13 682.487 L1341.57 682.487 L1341.02 682.487 L1340.46 682.487 L1339.9 682.487 L1339.34 682.487 L1338.78 682.487 L1338.22 682.487 L1337.66 682.487 L1337.1 682.487 L1336.54 682.487 L1335.98 682.487 L1335.42 682.487 L1334.86 682.487 L1334.3 682.487 L1333.75 682.487 L1333.19 682.487 L1332.63 682.487 L1332.07 682.487 L1331.51 682.487 L1330.95 682.487 L1330.39 682.487 L1329.83 682.487 L1329.27 682.487 L1328.71 682.487 L1328.15 682.487 L1327.59 682.487 L1327.03 682.487 L1326.47 682.487 L1325.92 682.487 L1325.36 682.487 L1324.8 682.487 L1324.24 682.487 L1323.68 682.487 L1323.12 682.487 L1322.56 682.487 L1322 682.487 L1321.44 682.487 L1320.88 682.487 L1320.32 682.487 L1319.76 682.487 L1319.2 682.487 L1318.65 682.487 L1318.09 682.487 L1317.53 682.487 L1316.97 682.487 L1316.41 682.487 L1315.85 682.487 L1315.29 682.487 L1314.73 682.487 L1314.17 682.487 L1313.61 682.487 L1313.05 682.487 L1312.49 682.487 L1311.93 682.487 L1311.38 682.487 L1310.82 682.487 L1310.26 682.487 L1309.7 682.487 L1309.14 682.487 L1308.58 682.487 L1308.02 682.487 L1307.46 682.487 L1306.9 682.487 L1306.34 682.487 L1305.78 682.487 L1305.22 682.487 L1304.66 682.487 L1304.1 682.487 L1303.55 682.487 L1302.99 682.487 L1302.43 682.487 L1301.87 682.487 L1301.31 682.487 L1300.75 682.487 L1300.19 682.487 L1299.63 682.487 L1299.07 682.487 L1298.51 682.487 L1297.95 682.487 L1297.39 682.487 L1296.83 682.487 L1296.28 682.487 L1295.72 682.487 L1295.16 682.487 L1294.6 682.487 L1294.04 682.487 L1293.48 682.487 L1292.92 682.487 L1292.36 682.487 L1291.8 682.487 L1291.24 682.487 L1290.68 682.487 L1290.12 682.487 L1289.56 682.487 L1289 682.487 L1288.45 682.487 L1287.89 682.487 L1287.33 682.487 L1286.77 682.487 L1286.21 682.487 L1285.65 682.487 L1285.09 682.487 L1284.53 682.487 L1283.97 682.487 L1283.41 682.487 L1282.85 682.487 L1282.29 682.487 L1281.73 682.487 L1281.18 682.487 L1280.62 682.487 L1280.06 682.487 L1279.5 682.487 L1278.94 682.487 L1278.38 682.487 L1277.82 682.487 L1277.26 682.487 L1276.7 682.487 L1276.14 682.487 L1275.58 682.487 L1275.02 682.487 L1274.46 682.487 L1273.91 682.487 L1273.35 682.487 L1272.79 682.487 L1272.23 682.487 L1271.67 682.487 L1271.11 682.487 L1270.55 682.487 L1269.99 682.487 L1269.43 682.487 L1268.87 682.487 L1268.31 682.487 L1267.75 682.487 L1267.19 682.487 L1266.63 682.487 L1266.08 682.487 L1265.52 682.487 L1264.96 682.487 L1264.4 682.487 L1263.84 682.487 L1263.28 682.487 L1262.72 682.487 L1262.16 682.487 L1261.6 682.487 L1261.04 682.487 L1260.48 682.487 L1259.92 682.487 L1259.36 682.487 L1258.81 682.487 L1258.25 682.487 L1257.69 682.487 L1257.13 682.487 L1256.57 682.487 L1256.01 682.487 L1255.45 682.487 L1254.89 682.487 L1254.33 682.487 L1253.77 682.487 L1253.21 682.487 L1252.65 682.487 L1252.09 682.487 L1251.54 682.487 L1250.98 682.487 L1250.42 682.487 L1249.86 682.487 L1249.3 682.487 L1248.74 682.487 L1248.18 682.487 L1247.62 682.487 L1247.06 682.487 L1246.5 682.487 L1245.94 682.487 L1245.38 682.487 L1244.82 682.487 L1244.26 682.487 L1243.71 682.487 L1243.15 682.487 L1242.59 682.487 L1242.03 682.487 L1241.47 682.487 L1240.91 682.487 L1240.35 682.487 L1239.79 682.487 L1239.23 682.487 L1238.67 682.487 L1238.11 682.487 L1237.55 682.487 L1236.99 682.487 L1236.44 682.487 L1235.88 682.487 L1235.32 682.487 L1234.76 682.487 L1234.2 682.487 L1233.64 682.487 L1233.08 682.487 L1232.52 682.487 L1231.96 682.487 L1231.4 682.487 L1230.84 682.487 L1230.28 682.487 L1229.72 682.487 L1229.17 682.487 L1228.61 682.487 L1228.05 682.487 L1227.49 682.487 L1226.93 682.487 L1226.37 682.487 L1225.81 682.487 L1225.25 682.487 L1224.69 682.487 L1224.13 682.487 L1223.57 682.487 L1223.01 682.487 L1222.45 682.487 L1221.89 682.487 L1221.34 682.487 L1220.78 682.487 L1220.22 682.487 L1219.66 682.487 L1219.1 682.487 L1218.54 682.487 L1217.98 682.487 L1217.42 682.487 L1216.86 682.487 L1216.3 682.487 L1215.74 682.487 L1215.18 682.487 L1214.62 682.487 L1214.07 682.487 L1213.51 682.487 L1212.95 682.487 L1212.39 682.487 L1211.83 682.487 L1211.27 682.487 L1210.71 682.487 L1210.15 682.487 L1209.59 682.487 L1209.03 682.487 L1208.47 682.487 L1207.91 682.487 L1207.35 682.487 L1206.8 682.487 L1206.24 682.487 L1205.68 682.487 L1205.12 682.487 L1204.56 682.487 L1204 682.487 L1203.44 682.487 L1202.88 682.487 L1202.32 682.487 L1201.76 682.487 L1201.2 682.487 L1200.64 682.487 L1200.08 682.487 L1199.52 682.487 L1198.97 682.487 L1198.41 682.487 L1197.85 682.487 L1197.29 682.487 L1196.73 682.487 L1196.17 682.487 L1195.61 682.487 L1195.05 682.487 L1194.49 682.487 L1193.93 682.487 L1193.37 682.487 L1192.81 682.487 L1192.25 682.487 L1191.7 682.487 L1191.14 682.487 L1190.58 682.487 L1190.02 682.487 L1189.46 682.487 L1188.9 682.487 L1188.34 682.487 L1187.78 682.487 L1187.22 682.487 L1186.66 682.487 L1186.1 682.487 L1185.54 682.487 L1184.98 682.487 L1184.43 682.487 L1183.87 682.487 L1183.31 682.487 L1182.75 682.487 L1182.19 682.487 L1181.63 682.487 L1181.07 682.487 L1180.51 682.487 L1179.95 682.487 L1179.39 682.487 L1178.83 682.487 L1178.27 682.487 L1177.71 682.487 L1177.15 682.487 L1176.6 682.487 L1176.04 682.487 L1175.48 682.487 L1174.92 682.487 L1174.36 682.487 L1173.8 682.487 L1173.24 682.487 L1172.68 682.487 L1172.12 682.487 L1171.56 682.487 L1171 682.487 L1170.44 682.487 L1169.88 682.487 L1169.33 682.487 L1168.77 682.487 L1168.21 682.487 L1167.65 682.487 L1167.09 682.487 L1166.53 682.487 L1165.97 682.487 L1165.41 682.487 L1164.85 682.487 L1164.29 682.487 L1163.73 682.487 L1163.17 682.487 L1162.61 682.487 L1162.05 682.487 L1161.5 682.487 L1160.94 682.487 L1160.38 682.487 L1159.82 682.487 L1159.26 682.487 L1158.7 682.487 L1158.14 682.487 L1157.58 682.487 L1157.02 682.487 L1156.46 682.487 L1155.9 682.487 L1155.34 682.487 L1154.78 682.487 L1154.23 682.487 L1153.67 682.487 L1153.11 682.487 L1152.55 682.487 L1151.99 682.487 L1151.43 682.487 L1150.87 682.487 L1150.31 682.487 L1149.75 682.487 L1149.19 682.487 L1148.63 682.487 L1148.07 682.487 L1147.51 682.487 L1146.96 682.487 L1146.4 682.487 L1145.84 682.487 L1145.28 682.487 L1144.72 682.487 L1144.16 682.487 L1143.6 682.487 L1143.04 682.487 L1142.48 682.487 L1141.92 682.487 L1141.36 682.487 L1140.8 682.487 L1140.24 682.487 L1139.68 682.487 L1139.13 682.487 L1138.57 682.487 L1138.01 682.487 L1137.45 682.487 L1136.89 682.487 L1136.33 682.487 L1135.77 682.487 L1135.21 682.487 L1134.65 682.487 L1134.09 682.487 L1133.53 682.487 L1132.97 682.487 L1132.41 682.487 L1131.86 682.487 L1131.3 682.487 L1130.74 682.487 L1130.18 682.487 L1129.62 682.487 L1129.06 682.487 L1128.5 682.487 L1127.94 682.487 L1127.38 682.487 L1126.82 682.487 L1126.26 682.487 L1125.7 682.487 L1125.14 682.487 L1124.59 682.487 L1124.03 682.487 L1123.47 682.487 L1122.91 682.487 L1122.35 682.487 L1121.79 682.487 L1121.23 682.487 L1120.67 682.487 L1120.11 682.487 L1119.55 682.487 L1118.99 682.487 L1118.43 682.487 L1117.87 682.487 L1117.31 682.487 L1116.76 682.487 L1116.2 682.487 L1115.64 682.487 L1115.08 682.487 L1114.52 682.487 L1113.96 682.487 L1113.4 682.487 L1112.84 682.487 L1112.28 682.487 L1111.72 682.487 L1111.16 682.487 L1110.6 682.487 L1110.04 682.487 L1109.49 682.487 L1108.93 682.487 L1108.37 682.487 L1107.81 682.487 L1107.25 682.487 L1106.69 682.487 L1106.13 682.487 L1105.57 682.487 L1105.01 682.487 L1104.45 682.487 L1103.89 682.487 L1103.33 682.487 L1102.77 682.487 L1102.22 682.487 L1101.66 682.487 L1101.1 682.487 L1100.54 682.487 L1099.98 682.487 L1099.42 682.487 L1098.86 682.487 L1098.3 682.487 L1097.74 682.487 L1097.18 682.487 L1096.62 682.487 L1096.06 682.487 L1095.5 682.487 L1094.94 682.487 L1094.39 682.487 L1093.83 682.487 L1093.27 682.487 L1092.71 682.487 L1092.15 682.487 L1091.59 682.487 L1091.03 682.487 L1090.47 682.487 L1089.91 682.487 L1089.35 682.487 L1088.79 682.487 L1088.23 682.487 L1087.67 682.487 L1087.12 682.487 L1086.56 682.487 L1086 682.487 L1085.44 682.487 L1084.88 682.487 L1084.32 682.487 L1083.76 682.487 L1083.2 682.487 L1082.64 682.487 L1082.08 682.487 L1081.52 682.487 L1080.96 682.487 L1080.4 682.487 L1079.85 682.487 L1079.29 682.487 L1078.73 682.487 L1078.17 682.487 L1077.61 682.487 L1077.05 682.487 L1076.49 682.487 L1075.93 682.487 L1075.37 682.487 L1074.81 682.487 L1074.25 682.487 L1073.69 682.487 L1073.13 682.487 L1072.57 682.487 L1072.02 682.487 L1071.46 682.487 L1070.9 682.487 L1070.34 682.487 L1069.78 682.487 L1069.22 682.487 L1068.66 682.487 L1068.1 682.487 L1067.54 682.487 L1066.98 682.487 L1066.42 682.487 L1065.86 682.487 L1065.3 682.487 L1064.75 682.487 L1064.19 682.487 L1063.63 682.487 L1063.07 682.487 L1062.51 682.487 L1061.95 682.487 L1061.39 682.487 L1060.83 682.487 L1060.27 682.487 L1059.71 682.487 L1059.15 682.487 L1058.59 682.487 L1058.03 682.487 L1057.48 682.487 L1056.92 682.487 L1056.36 682.487 L1055.8 682.487 L1055.24 682.487 L1054.68 682.487 L1054.12 682.487 L1053.56 682.487 L1053 682.487 L1052.44 682.487 L1051.88 682.487 L1051.32 682.487 L1050.76 682.487 L1050.2 682.487 L1049.65 682.487 L1049.09 682.487 L1048.53 682.487 L1047.97 682.487 L1047.41 682.487 L1046.85 682.487 L1046.29 682.487 L1045.73 682.487 L1045.17 682.487 L1044.61 682.487 L1044.05 682.487 L1043.49 682.487 L1042.93 682.487 L1042.38 682.487 L1041.82 682.487 L1041.26 682.487 L1040.7 682.487 L1040.14 682.487 L1039.58 682.487 L1039.02 682.487 L1038.46 682.487 L1037.9 682.487 L1037.34 682.487 L1036.78 682.487 L1036.22 682.487 L1035.66 682.487 L1035.1 682.487 L1034.55 682.487 L1033.99 682.487 L1033.43 682.487 L1032.87 682.487 L1032.31 682.487 L1031.75 682.487 L1031.19 682.487 L1030.63 682.487 L1030.07 682.487 L1029.51 682.487 L1028.95 682.487 L1028.39 682.487 L1027.83 682.487 L1027.28 682.487 L1026.72 682.487 L1026.16 682.487 L1025.6 682.487 L1025.04 682.487 L1024.48 682.487 L1023.92 682.487 L1023.36 682.487 L1022.8 682.487 L1022.24 682.487 L1021.68 682.487 L1021.12 682.487 L1020.56 682.487 L1020.01 682.487 L1019.45 682.487 L1018.89 682.487 L1018.33 682.487 L1017.77 682.487 L1017.21 682.487 L1016.65 682.487 L1016.09 682.487 L1015.53 682.487 L1014.97 682.487 L1014.41 682.487 L1013.85 682.487 L1013.29 682.487 L1012.73 682.487 L1012.18 682.487 L1011.62 682.487 L1011.06 682.487 L1010.5 682.487 L1009.94 682.487 L1009.38 682.487 L1008.82 682.487 L1008.26 682.487 L1007.7 682.487 L1007.14 682.487 L1006.58 682.487 L1006.02 682.487 L1005.46 682.487 L1004.91 682.487 L1004.35 682.487 L1003.79 682.487 L1003.23 682.487 L1002.67 682.487 L1002.11 682.487 L1001.55 682.487 L1000.99 682.487 L1000.43 682.487 L999.872 682.487 L999.313 682.487 L998.754 682.487 L998.194 682.487 L997.635 682.487 L997.076 682.487 L996.517 682.487 L995.957 682.487 L995.398 682.487 L994.839 682.487 L994.28 682.487 L993.72 682.487 L993.161 682.487 L992.602 682.487 L992.043 682.487 L991.483 682.487 L990.924 682.487 L990.365 682.487 L989.806 682.487 L989.246 682.487 L988.687 682.487 L988.128 682.487 L987.569 682.487 L987.009 682.487 L986.45 682.487 L985.891 682.487 L985.332 682.487 L984.772 682.487 L984.213 682.487 L983.654 682.487 L983.095 682.487 L982.535 682.487 L981.976 682.487 L981.417 682.487 L980.858 682.487 L980.298 682.487 L979.739 682.487 L979.18 682.487 L978.621 682.487 L978.061 682.487 L977.502 682.487 L976.943 682.487 L976.384 682.487 L975.824 682.487 L975.265 682.487 L974.706 682.487 L974.147 682.487 L973.587 682.487 L973.028 682.487 L972.469 682.487 L971.91 682.487 L971.35 682.487 L970.791 682.487 L970.232 682.487 L969.673 682.487 L969.113 682.487 L968.554 682.487 L967.995 682.487 L967.436 682.487 L966.876 682.487 L966.317 682.487 L965.758 682.487 L965.199 682.487 L964.639 682.487 L964.08 682.487 L963.521 682.487 L962.962 682.487 L962.402 682.487 L961.843 682.487 L961.284 682.487 L960.725 682.487 L960.165 682.487 L959.606 682.487 L959.047 682.487 L958.488 682.487 L957.928 682.487 L957.369 682.487 L956.81 682.487 L956.251 682.487 L955.691 682.487 L955.132 682.487 L954.573 682.487 L954.014 682.487 L953.454 682.487 L952.895 682.487 L952.336 682.487 L951.777 682.487 L951.217 682.487 L950.658 682.487 L950.099 682.487 L949.54 682.487 L948.98 682.487 L948.421 682.487 L947.862 682.487 L947.303 682.487 L946.743 682.487 L946.184 682.487 L945.625 682.487 L945.066 682.487 L944.506 682.487 L943.947 682.487 L943.388 682.487 L942.829 682.487 L942.269 682.487 L941.71 682.487 L941.151 682.487 L940.592 682.487 L940.032 682.487 L939.473 682.487 L938.914 682.487 L938.355 682.487 L937.795 682.487 L937.236 682.487 L936.677 682.487 L936.118 682.487 L935.558 682.487 L934.999 682.487 L934.44 682.487 L933.881 682.487 L933.321 682.487 L932.762 682.487 L932.203 682.487 L931.644 682.487 L931.084 682.487 L930.525 682.487 L929.966 682.487 L929.406 682.487 L928.847 682.487 L928.288 682.487 L927.729 682.487 L927.169 682.487 L926.61 682.487 L926.051 682.487 L925.492 682.487 L924.932 682.487 L924.373 682.487 L923.814 682.487 L923.255 682.487 L922.695 682.487 L922.136 682.487 L921.577 682.487 L921.018 682.487 L920.458 682.487 L919.899 682.487 L919.34 682.487 L918.781 682.487 L918.221 682.487 L917.662 682.487 L917.103 682.487 L916.544 682.487 L915.984 682.487 L915.425 682.487 L914.866 682.487 L914.307 682.487 L913.747 682.487 L913.188 682.487 L912.629 682.487 L912.07 682.487 L911.51 682.487 L910.951 682.487 L910.392 682.487 L909.833 682.487 L909.273 682.487 L908.714 682.487 L908.155 682.487 L907.596 682.487 L907.036 682.487 L906.477 682.487 L905.918 682.487 L905.359 682.487 L904.799 682.487 L904.24 682.487 L903.681 682.487 L903.122 682.487 L902.562 682.487 L902.003 682.487 L901.444 682.487 L900.885 682.487 L900.325 682.487 L899.766 682.487 L899.207 682.487 L898.648 682.487 L898.088 682.487 L897.529 682.487 L896.97 682.487 L896.411 682.487 L895.851 682.487 L895.292 682.487 L894.733 682.487 L894.174 682.487 L893.614 682.487 L893.055 682.487 L892.496 682.487 L891.937 682.487 L891.377 682.487 L890.818 682.487 L890.259 682.487 L889.7 682.487 L889.14 682.487 L888.581 682.487 L888.022 682.487 L887.463 682.487 L886.903 682.487 L886.344 682.487 L885.785 682.487 L885.226 682.487 L884.666 682.487 L884.107 682.487 L883.548 682.487 L882.989 682.487 L882.429 682.487 L881.87 682.487 L881.311 682.487 L880.752 682.487 L880.192 682.487 L879.633 682.487 L879.074 682.487 L878.515 682.487 L877.955 682.487 L877.396 682.487 L876.837 682.487 L876.278 682.487 L875.718 682.487 L875.159 682.487 L874.6 682.487 L874.041 682.487 L873.481 682.487 L872.922 682.487 L872.363 682.487 L871.804 682.487 L871.244 682.487 L870.685 682.487 L870.126 682.487 L869.567 682.487 L869.007 682.487 L868.448 682.487 L867.889 682.487 L867.33 682.487 L866.77 682.487 L866.211 682.487 L865.652 682.487 L865.093 682.487 L864.533 682.487 L863.974 682.487 L863.415 682.487 L862.856 682.487 L862.296 682.487 L861.737 682.487 L861.178 682.487 L860.619 682.487 L860.059 682.487 L859.5 682.487 L858.941 682.487 L858.382 682.487 L857.822 682.487 L857.263 682.487 L856.704 682.487 L856.145 682.487 L855.585 682.487 L855.026 682.487 L854.467 682.487 L853.908 682.487 L853.348 682.487 L852.789 682.487 L852.23 682.487 L851.671 682.487 L851.111 682.487 L850.552 682.487 L849.993 682.487 L849.434 682.487 L848.874 682.487 L848.315 682.487 L847.756 682.487 L847.197 682.487 L846.637 682.487 L846.078 682.487 L845.519 682.487 L844.96 682.487 L844.4 682.487 L843.841 682.487 L843.282 682.487 L842.723 682.487 L842.163 682.487 L841.604 682.487 L841.045 682.487 L840.486 682.487 L839.926 682.487 L839.367 682.487 L838.808 682.487 L838.249 682.487 L837.689 682.487 L837.13 682.487 L836.571 682.487 L836.012 682.487 L835.452 682.487 L834.893 682.487 L834.334 682.487 L833.775 682.487 L833.215 682.487 L832.656 682.487 L832.097 682.487 L831.538 682.487 L830.978 682.487 L830.419 682.487 L829.86 682.487 L829.301 682.487 L828.741 682.487 L828.182 682.487 L827.623 682.487 L827.064 682.487 L826.504 682.487 L825.945 682.487 L825.386 682.487 L824.827 682.487 L824.267 682.487 L823.708 682.487 L823.149 682.487 L822.59 682.487 L822.03 682.487 L821.471 682.487 L820.912 682.487 L820.353 682.487 L819.793 682.487 L819.234 682.487 L818.675 682.487 L818.116 682.487 L817.556 682.487 L816.997 682.487 L816.438 682.487 L815.879 682.487 L815.319 682.487 L814.76 682.487 L814.201 682.487 L813.642 682.487 L813.082 682.487 L812.523 682.487 L811.964 682.487 L811.405 682.487 L810.845 682.487 L810.286 682.487 L809.727 682.487 L809.168 682.487 L808.608 682.487 L808.049 682.487 L807.49 682.487 L806.931 682.487 L806.371 682.487 L805.812 682.487 L805.253 682.487 L804.693 682.487 L804.134 682.487 L803.575 682.487 L803.016 682.487 L802.456 682.487 L801.897 682.487 L801.338 682.487 L800.779 682.487 L800.219 682.487 L799.66 682.487 L799.101 682.487 L798.542 682.487 L797.982 682.487 L797.423 682.487 L796.864 682.487 L796.305 682.487 L795.745 682.487 L795.186 682.487 L794.627 682.487 L794.068 682.487 L793.508 682.487 L792.949 682.487 L792.39 682.487 L791.831 682.487 L791.271 682.487 L790.712 682.487 L790.153 682.487 L789.594 682.487 L789.034 682.487 L788.475 682.487 L787.916 682.487 L787.357 682.487 L786.797 682.487 L786.238 682.487 L785.679 682.487 L785.12 682.487 L784.56 682.487 L784.001 682.487 L783.442 682.487 L782.883 682.487 L782.323 682.487 L781.764 682.487 L781.205 682.487 L780.646 682.487 L780.086 682.487 L779.527 682.487 L778.968 682.487 L778.409 682.487 L777.849 682.487 L777.29 682.487 L776.731 682.487 L776.172 682.487 L775.612 682.487 L775.053 682.487 L774.494 682.487 L773.935 682.487 L773.375 682.487 L772.816 682.487 L772.257 682.487 L771.698 682.487 L771.138 682.487 L770.579 682.487 L770.02 682.487 L769.461 682.487 L768.901 682.487 L768.342 682.487 L767.783 682.487 L767.224 682.487 L766.664 682.487 L766.105 682.487 L765.546 682.487 L764.987 682.487 L764.427 682.487 L763.868 682.487 L763.309 682.487 L762.75 682.487 L762.19 682.487 L761.631 682.487 L761.072 682.487 L760.513 682.487 L759.953 682.487 L759.394 682.487 L758.835 682.487 L758.276 682.487 L757.716 682.487 L757.157 682.487 L756.598 682.487 L756.039 682.487 L755.479 682.487 L754.92 682.487 L754.361 682.487 L753.802 682.487 L753.242 682.487 L752.683 682.487 L752.124 682.487 L751.565 682.487 L751.005 682.487 L750.446 682.487 L749.887 682.487 L749.328 682.487 L748.768 682.487 L748.209 682.487 L747.65 682.487 L747.091 682.487 L746.531 682.487 L745.972 682.487 L745.413 682.487 L744.854 682.487 L744.294 682.487 L743.735 682.487 L743.176 682.487 L742.617 682.487 L742.057 682.487 L741.498 682.487 L740.939 682.487 L740.38 682.487 L739.82 682.487 L739.261 682.487 L738.702 682.487 L738.143 682.487 L737.583 682.487 L737.024 682.487 L736.465 682.487 L735.906 682.487 L735.346 682.487 L734.787 682.487 L734.228 682.487 L733.669 682.487 L733.109 682.487 L732.55 682.487 L731.991 682.487 L731.432 682.487 L730.872 682.487 L730.313 682.487 L729.754 682.487 L729.195 682.487 L728.635 682.487 L728.076 682.487 L727.517 682.487 L726.958 682.487 L726.398 682.487 L725.839 682.487 L725.28 682.487 L724.721 682.487 L724.161 682.487 L723.602 682.487 L723.043 682.487 L722.484 682.487 L721.924 682.487 L721.365 682.487 L720.806 682.487 L720.247 682.487  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.495 720.806,683.495 721.365,683.495 721.924,683.495 722.484,683.495 723.043,683.495 723.602,683.495 724.161,683.495 724.721,683.495 725.28,683.495 725.839,683.495 726.398,683.495 726.958,683.495 727.517,683.495 728.076,683.495 728.635,683.495 729.195,683.495 729.754,683.495 730.313,683.495 730.872,683.495 731.432,683.495 731.991,683.495 732.55,683.495 733.109,683.495 733.669,683.495 734.228,683.495 734.787,683.495 735.346,683.495 735.906,683.495 736.465,683.495 737.024,683.495 737.583,683.495 738.143,683.495 738.702,683.495 739.261,683.495 739.82,683.495 740.38,683.495 740.939,683.495 741.498,683.495 742.057,683.495 742.617,683.495 743.176,683.495 743.735,683.495 744.294,683.495 744.854,683.495 745.413,683.495 745.972,683.495 746.531,683.495 747.091,683.495 747.65,683.495 748.209,683.495 748.768,683.495 749.328,683.495 749.887,683.495 750.446,683.495 751.005,683.495 751.565,683.495 752.124,683.495 752.683,683.495 753.242,683.495 753.802,683.495 754.361,683.495 754.92,683.495 755.479,683.495 756.039,683.495 756.598,683.495 757.157,683.495 757.716,683.495 758.276,683.495 758.835,683.495 759.394,683.495 759.953,683.495 760.513,683.495 761.072,683.495 761.631,683.495 762.19,683.495 762.75,683.495 763.309,683.495 763.868,683.495 764.427,683.495 764.987,683.495 765.546,683.495 766.105,683.495 766.664,683.495 767.224,683.495 767.783,683.495 768.342,683.495 768.901,683.495 769.461,683.495 770.02,683.495 770.579,683.495 771.138,683.495 771.698,683.495 772.257,683.495 772.816,683.495 773.375,683.495 773.935,683.495 774.494,683.495 775.053,683.495 775.612,683.495 776.172,683.495 776.731,683.495 777.29,683.495 777.849,683.495 778.409,683.495 778.968,683.495 779.527,683.495 780.086,683.495 780.646,683.495 781.205,683.495 781.764,683.495 782.323,683.495 782.883,683.495 783.442,683.495 784.001,683.495 784.56,683.495 785.12,683.495 785.679,683.495 786.238,683.495 786.797,683.495 787.357,683.495 787.916,683.495 788.475,683.495 789.034,683.495 789.594,683.495 790.153,683.495 790.712,683.495 791.271,683.495 791.831,683.495 792.39,683.495 792.949,683.495 793.508,683.495 794.068,683.495 794.627,683.495 795.186,683.495 795.745,683.495 796.305,683.495 796.864,683.495 797.423,683.495 797.982,683.495 798.542,683.495 799.101,683.495 799.66,683.495 800.219,683.495 800.779,683.495 801.338,683.495 801.897,683.495 802.456,683.495 803.016,683.495 803.575,683.495 804.134,683.495 804.693,683.495 805.253,683.495 805.812,683.495 806.371,683.495 806.931,683.495 807.49,683.495 808.049,683.495 808.608,683.495 809.168,683.495 809.727,683.495 810.286,683.495 810.845,683.495 811.405,683.495 811.964,683.495 812.523,683.495 813.082,683.495 813.642,683.495 814.201,683.495 814.76,683.495 815.319,683.495 815.879,683.495 816.438,683.495 816.997,683.495 817.556,683.495 818.116,683.495 818.675,683.495 819.234,683.495 819.793,683.495 820.353,683.495 820.912,683.495 821.471,683.495 822.03,683.495 822.59,683.495 823.149,683.495 823.708,683.495 824.267,683.495 824.827,683.495 825.386,683.495 825.945,683.495 826.504,683.495 827.064,683.495 827.623,683.495 828.182,683.495 828.741,683.495 829.301,683.495 829.86,683.495 830.419,683.495 830.978,683.495 831.538,683.495 832.097,683.495 832.656,683.495 833.215,683.495 833.775,683.495 834.334,683.495 834.893,683.495 835.452,683.495 836.012,683.495 836.571,683.495 837.13,683.495 837.689,683.495 838.249,683.495 838.808,683.495 839.367,683.495 839.926,683.495 840.486,683.495 841.045,683.495 841.604,683.495 842.163,683.495 842.723,683.495 843.282,683.495 843.841,683.495 844.4,683.495 844.96,683.495 845.519,683.495 846.078,683.495 846.637,683.495 847.197,683.495 847.756,683.495 848.315,683.495 848.874,683.495 849.434,683.495 849.993,683.495 850.552,683.495 851.111,683.495 851.671,683.495 852.23,683.495 852.789,683.495 853.348,683.495 853.908,683.495 854.467,683.495 855.026,683.495 855.585,683.495 856.145,683.495 856.704,683.495 857.263,683.495 857.822,683.495 858.382,683.495 858.941,683.495 859.5,683.495 860.059,683.495 860.619,683.495 861.178,683.495 861.737,683.495 862.296,683.495 862.856,683.495 863.415,683.495 863.974,683.495 864.533,683.495 865.093,683.495 865.652,683.495 866.211,683.495 866.77,683.495 867.33,683.495 867.889,683.495 868.448,683.495 869.007,683.495 869.567,683.495 870.126,683.495 870.685,683.495 871.244,683.495 871.804,683.495 872.363,683.495 872.922,683.495 873.481,683.495 874.041,683.495 874.6,683.495 875.159,683.495 875.718,683.495 876.278,683.495 876.837,683.495 877.396,683.495 877.955,683.495 878.515,683.495 879.074,683.495 879.633,683.495 880.192,683.495 880.752,683.495 881.311,683.495 881.87,683.495 882.429,683.495 882.989,683.495 883.548,683.495 884.107,683.495 884.666,683.495 885.226,683.495 885.785,683.495 886.344,683.495 886.903,683.495 887.463,683.495 888.022,683.495 888.581,683.495 889.14,683.495 889.7,683.495 890.259,683.495 890.818,683.495 891.377,683.495 891.937,683.495 892.496,683.495 893.055,683.495 893.614,683.495 894.174,683.495 894.733,683.495 895.292,683.495 895.851,683.495 896.411,683.495 896.97,683.495 897.529,683.495 898.088,683.495 898.648,683.495 899.207,683.495 899.766,683.495 900.325,683.495 900.885,683.495 901.444,683.495 902.003,683.495 902.562,683.495 903.122,683.495 903.681,683.495 904.24,683.495 904.799,683.495 905.359,683.495 905.918,683.495 906.477,683.495 907.036,683.495 907.596,683.495 908.155,683.495 908.714,683.495 909.273,683.495 909.833,683.495 910.392,683.495 910.951,683.495 911.51,683.495 912.07,683.495 912.629,683.495 913.188,683.495 913.747,683.495 914.307,683.495 914.866,683.495 915.425,683.495 915.984,683.495 916.544,683.495 917.103,683.495 917.662,683.495 918.221,683.495 918.781,683.495 919.34,683.495 919.899,683.495 920.458,683.495 921.018,683.495 921.577,683.495 922.136,683.495 922.695,683.495 923.255,683.495 923.814,683.495 924.373,683.495 924.932,683.495 925.492,683.495 926.051,683.495 926.61,683.495 927.169,683.495 927.729,683.495 928.288,683.495 928.847,683.495 929.406,683.495 929.966,683.495 930.525,683.495 931.084,683.495 931.644,683.495 932.203,683.495 932.762,683.495 933.321,683.495 933.881,683.495 934.44,683.495 934.999,683.495 935.558,683.495 936.118,683.495 936.677,683.495 937.236,683.495 937.795,683.495 938.355,683.495 938.914,683.495 939.473,683.495 940.032,683.495 940.592,683.495 941.151,683.495 941.71,683.495 942.269,683.495 942.829,683.495 943.388,683.495 943.947,683.495 944.506,683.495 945.066,683.495 945.625,683.495 946.184,683.495 946.743,683.495 947.303,683.495 947.862,683.495 948.421,683.495 948.98,683.495 949.54,683.495 950.099,683.495 950.658,683.495 951.217,683.495 951.777,683.495 952.336,683.495 952.895,683.495 953.454,683.495 954.014,683.495 954.573,683.495 955.132,683.495 955.691,683.495 956.251,683.495 956.81,683.495 957.369,683.495 957.928,683.495 958.488,683.495 959.047,683.495 959.606,683.495 960.165,683.495 960.725,683.495 961.284,683.495 961.843,683.495 962.402,683.495 962.962,683.495 963.521,683.495 964.08,683.495 964.639,683.495 965.199,683.495 965.758,683.495 966.317,683.495 966.876,683.495 967.436,683.495 967.995,683.495 968.554,683.495 969.113,683.495 969.673,683.495 970.232,683.495 970.791,683.495 971.35,683.495 971.91,683.495 972.469,683.495 973.028,683.495 973.587,683.495 974.147,683.495 974.706,683.495 975.265,683.495 975.824,683.495 976.384,683.495 976.943,683.495 977.502,683.495 978.061,683.495 978.621,683.495 979.18,683.495 979.739,683.495 980.298,683.495 980.858,683.495 981.417,683.495 981.976,683.495 982.535,683.495 983.095,683.495 983.654,683.495 984.213,683.495 984.772,683.495 985.332,683.495 985.891,683.495 986.45,683.495 987.009,683.495 987.569,683.495 988.128,683.495 988.687,683.495 989.246,683.495 989.806,683.495 990.365,683.495 990.924,683.495 991.483,683.495 992.043,683.495 992.602,683.495 993.161,683.495 993.72,683.495 994.28,683.495 994.839,683.495 995.398,683.495 995.957,683.495 996.517,683.495 997.076,683.495 997.635,683.495 998.194,683.495 998.754,683.495 999.313,683.495 999.872,683.495 1000.43,683.495 1000.99,683.495 1001.55,683.495 1002.11,683.495 1002.67,683.495 1003.23,683.495 1003.79,683.495 1004.35,683.495 1004.91,683.495 1005.46,683.495 1006.02,683.495 1006.58,683.495 1007.14,683.495 1007.7,683.495 1008.26,683.495 1008.82,683.495 1009.38,683.495 1009.94,683.495 1010.5,683.495 1011.06,683.495 1011.62,683.495 1012.18,683.495 1012.73,683.495 1013.29,683.495 1013.85,683.495 1014.41,683.495 1014.97,683.495 1015.53,683.495 1016.09,683.495 1016.65,683.495 1017.21,683.495 1017.77,683.495 1018.33,683.495 1018.89,683.495 1019.45,683.495 1020.01,683.495 1020.56,683.495 1021.12,683.495 1021.68,683.495 1022.24,683.495 1022.8,683.495 1023.36,683.495 1023.92,683.495 1024.48,683.495 1025.04,683.495 1025.6,683.495 1026.16,683.495 1026.72,683.495 1027.28,683.495 1027.83,683.495 1028.39,683.495 1028.95,683.495 1029.51,683.495 1030.07,683.495 1030.63,683.495 1031.19,683.495 1031.75,683.495 1032.31,683.495 1032.87,683.495 1033.43,683.495 1033.99,683.495 1034.55,683.495 1035.1,683.495 1035.66,683.495 1036.22,683.495 1036.78,683.495 1037.34,683.495 1037.9,683.495 1038.46,683.495 1039.02,683.495 1039.58,683.495 1040.14,683.495 1040.7,683.495 1041.26,683.495 1041.82,683.495 1042.38,683.495 1042.93,683.495 1043.49,683.495 1044.05,683.495 1044.61,683.495 1045.17,683.495 1045.73,683.495 1046.29,683.495 1046.85,683.495 1047.41,683.495 1047.97,683.495 1048.53,683.495 1049.09,683.495 1049.65,683.495 1050.2,683.495 1050.76,683.495 1051.32,683.495 1051.88,683.495 1052.44,683.495 1053,683.495 1053.56,683.495 1054.12,683.495 1054.68,683.495 1055.24,683.495 1055.8,683.495 1056.36,683.495 1056.92,683.495 1057.48,683.495 1058.03,683.495 1058.59,683.495 1059.15,683.495 1059.71,683.495 1060.27,683.495 1060.83,683.495 1061.39,683.495 1061.95,683.495 1062.51,683.495 1063.07,683.495 1063.63,683.495 1064.19,683.495 1064.75,683.495 1065.3,683.495 1065.86,683.495 1066.42,683.495 1066.98,683.495 1067.54,683.495 1068.1,683.495 1068.66,683.495 1069.22,683.495 1069.78,683.495 1070.34,683.495 1070.9,683.495 1071.46,683.495 1072.02,683.495 1072.57,683.495 1073.13,683.495 1073.69,683.495 1074.25,683.495 1074.81,683.495 1075.37,683.495 1075.93,683.495 1076.49,683.495 1077.05,683.495 1077.61,683.495 1078.17,683.495 1078.73,683.495 1079.29,683.495 1079.85,683.495 1080.4,683.495 1080.96,683.495 1081.52,683.495 1082.08,683.495 1082.64,683.495 1083.2,683.495 1083.76,683.495 1084.32,683.495 1084.88,683.495 1085.44,683.495 1086,683.495 1086.56,683.495 1087.12,683.495 1087.67,683.495 1088.23,683.495 1088.79,683.495 1089.35,683.495 1089.91,683.495 1090.47,683.495 1091.03,683.495 1091.59,683.495 1092.15,683.495 1092.71,683.495 1093.27,683.495 1093.83,683.495 1094.39,683.495 1094.94,683.495 1095.5,683.495 1096.06,683.495 1096.62,683.495 1097.18,683.495 1097.74,683.495 1098.3,683.495 1098.86,683.495 1099.42,683.495 1099.98,683.495 1100.54,683.495 1101.1,683.495 1101.66,683.495 1102.22,683.495 1102.77,683.495 1103.33,683.495 1103.89,683.495 1104.45,683.495 1105.01,683.495 1105.57,683.495 1106.13,683.495 1106.69,683.495 1107.25,683.495 1107.81,683.495 1108.37,683.495 1108.93,683.495 1109.49,683.495 1110.04,683.495 1110.6,683.495 1111.16,683.495 1111.72,683.495 1112.28,683.495 1112.84,683.495 1113.4,683.495 1113.96,683.495 1114.52,683.495 1115.08,683.495 1115.64,683.495 1116.2,683.495 1116.76,683.495 1117.31,683.495 1117.87,683.495 1118.43,683.495 1118.99,683.495 1119.55,683.495 1120.11,683.495 1120.67,683.495 1121.23,683.495 1121.79,683.495 1122.35,683.495 1122.91,683.495 1123.47,683.495 1124.03,683.495 1124.59,683.495 1125.14,683.495 1125.7,683.495 1126.26,683.495 1126.82,683.495 1127.38,683.495 1127.94,683.495 1128.5,683.495 1129.06,683.495 1129.62,683.495 1130.18,683.495 1130.74,683.495 1131.3,683.495 1131.86,683.495 1132.41,683.495 1132.97,683.495 1133.53,683.495 1134.09,683.495 1134.65,683.495 1135.21,683.495 1135.77,683.495 1136.33,683.495 1136.89,683.495 1137.45,683.495 1138.01,683.495 1138.57,683.495 1139.13,683.495 1139.68,683.495 1140.24,683.495 1140.8,683.495 1141.36,683.495 1141.92,683.495 1142.48,683.495 1143.04,683.495 1143.6,683.495 1144.16,683.495 1144.72,683.495 1145.28,683.495 1145.84,683.495 1146.4,683.495 1146.96,683.495 1147.51,683.495 1148.07,683.495 1148.63,683.495 1149.19,683.495 1149.75,683.495 1150.31,683.495 1150.87,683.495 1151.43,683.495 1151.99,683.495 1152.55,683.495 1153.11,683.495 1153.67,683.495 1154.23,683.495 1154.78,683.495 1155.34,683.495 1155.9,683.495 1156.46,683.495 1157.02,683.495 1157.58,683.495 1158.14,683.495 1158.7,683.495 1159.26,683.495 1159.82,683.495 1160.38,683.495 1160.94,683.495 1161.5,683.495 1162.05,683.495 1162.61,683.495 1163.17,683.495 1163.73,683.495 1164.29,683.495 1164.85,683.495 1165.41,683.495 1165.97,683.495 1166.53,683.495 1167.09,683.495 1167.65,683.495 1168.21,683.495 1168.77,683.495 1169.33,683.495 1169.88,683.495 1170.44,683.495 1171,683.495 1171.56,683.495 1172.12,683.495 1172.68,683.495 1173.24,683.495 1173.8,683.495 1174.36,683.495 1174.92,683.495 1175.48,683.495 1176.04,683.495 1176.6,683.495 1177.15,683.495 1177.71,683.495 1178.27,683.495 1178.83,683.495 1179.39,683.495 1179.95,683.495 1180.51,683.495 1181.07,683.495 1181.63,683.495 1182.19,683.495 1182.75,683.495 1183.31,683.495 1183.87,683.495 1184.43,683.495 1184.98,683.495 1185.54,683.495 1186.1,683.495 1186.66,683.495 1187.22,683.495 1187.78,683.495 1188.34,683.495 1188.9,683.495 1189.46,683.495 1190.02,683.495 1190.58,683.495 1191.14,683.495 1191.7,683.495 1192.25,683.495 1192.81,683.495 1193.37,683.495 1193.93,683.495 1194.49,683.495 1195.05,683.495 1195.61,683.495 1196.17,683.495 1196.73,683.495 1197.29,683.495 1197.85,683.495 1198.41,683.495 1198.97,683.495 1199.52,683.495 1200.08,683.495 1200.64,683.495 1201.2,683.495 1201.76,683.495 1202.32,683.495 1202.88,683.495 1203.44,683.495 1204,683.495 1204.56,683.495 1205.12,683.495 1205.68,683.495 1206.24,683.495 1206.8,683.495 1207.35,683.495 1207.91,683.495 1208.47,683.495 1209.03,683.495 1209.59,683.495 1210.15,683.495 1210.71,683.495 1211.27,683.495 1211.83,683.495 1212.39,683.495 1212.95,683.495 1213.51,683.495 1214.07,683.495 1214.62,683.495 1215.18,683.495 1215.74,683.495 1216.3,683.495 1216.86,683.495 1217.42,683.495 1217.98,683.495 1218.54,683.495 1219.1,683.495 1219.66,683.495 1220.22,683.495 1220.78,683.495 1221.34,683.495 1221.89,683.495 1222.45,683.495 1223.01,683.495 1223.57,683.495 1224.13,683.495 1224.69,683.495 1225.25,683.495 1225.81,683.495 1226.37,683.495 1226.93,683.495 1227.49,683.495 1228.05,683.495 1228.61,683.495 1229.17,683.495 1229.72,683.495 1230.28,683.495 1230.84,683.495 1231.4,683.495 1231.96,683.495 1232.52,683.495 1233.08,683.495 1233.64,683.495 1234.2,683.495 1234.76,683.495 1235.32,683.495 1235.88,683.495 1236.44,683.495 1236.99,683.495 1237.55,683.495 1238.11,683.495 1238.67,683.495 1239.23,683.495 1239.79,683.495 1240.35,683.495 1240.91,683.495 1241.47,683.495 1242.03,683.495 1242.59,683.495 1243.15,683.495 1243.71,683.495 1244.26,683.495 1244.82,683.495 1245.38,683.495 1245.94,683.495 1246.5,683.495 1247.06,683.495 1247.62,683.495 1248.18,683.495 1248.74,683.495 1249.3,683.495 1249.86,683.495 1250.42,683.495 1250.98,683.495 1251.54,683.495 1252.09,683.495 1252.65,683.495 1253.21,683.495 1253.77,683.495 1254.33,683.495 1254.89,683.495 1255.45,683.495 1256.01,683.495 1256.57,683.495 1257.13,683.495 1257.69,683.495 1258.25,683.495 1258.81,683.495 1259.36,683.495 1259.92,683.495 1260.48,683.495 1261.04,683.495 1261.6,683.495 1262.16,683.495 1262.72,683.495 1263.28,683.495 1263.84,683.495 1264.4,683.495 1264.96,683.495 1265.52,683.495 1266.08,683.495 1266.63,683.495 1267.19,683.495 1267.75,683.495 1268.31,683.495 1268.87,683.495 1269.43,683.495 1269.99,683.495 1270.55,683.495 1271.11,683.495 1271.67,683.495 1272.23,683.495 1272.79,683.495 1273.35,683.495 1273.91,683.495 1274.46,683.495 1275.02,683.495 1275.58,683.495 1276.14,683.495 1276.7,683.495 1277.26,683.495 1277.82,683.495 1278.38,683.495 1278.94,683.495 1279.5,683.495 1280.06,683.495 1280.62,683.495 1281.18,683.495 1281.73,683.495 1282.29,683.495 1282.85,683.495 1283.41,683.495 1283.97,683.495 1284.53,683.495 1285.09,683.495 1285.65,683.495 1286.21,683.495 1286.77,683.495 1287.33,683.495 1287.89,683.495 1288.45,683.495 1289,683.495 1289.56,683.495 1290.12,683.495 1290.68,683.495 1291.24,683.495 1291.8,683.495 1292.36,683.495 1292.92,683.495 1293.48,683.495 1294.04,683.495 1294.6,683.495 1295.16,683.495 1295.72,683.495 1296.28,683.495 1296.83,683.495 1297.39,683.495 1297.95,683.495 1298.51,683.495 1299.07,683.495 1299.63,683.495 1300.19,683.495 1300.75,683.495 1301.31,683.495 1301.87,683.495 1302.43,683.495 1302.99,683.495 1303.55,683.495 1304.1,683.495 1304.66,683.495 1305.22,683.495 1305.78,683.495 1306.34,683.495 1306.9,683.495 1307.46,683.495 1308.02,683.495 1308.58,683.495 1309.14,683.495 1309.7,683.495 1310.26,683.495 1310.82,683.495 1311.38,683.495 1311.93,683.495 1312.49,683.495 1313.05,683.495 1313.61,683.495 1314.17,683.495 1314.73,683.495 1315.29,683.495 1315.85,683.495 1316.41,683.495 1316.97,683.495 1317.53,683.495 1318.09,683.495 1318.65,683.495 1319.2,683.495 1319.76,683.495 1320.32,683.495 1320.88,683.495 1321.44,683.495 1322,683.495 1322.56,683.495 1323.12,683.495 1323.68,683.495 1324.24,683.495 1324.8,683.495 1325.36,683.495 1325.92,683.495 1326.47,683.495 1327.03,683.495 1327.59,683.495 1328.15,683.495 1328.71,683.495 1329.27,683.495 1329.83,683.495 1330.39,683.495 1330.95,683.495 1331.51,683.495 1332.07,683.495 1332.63,683.495 1333.19,683.495 1333.75,683.495 1334.3,683.495 1334.86,683.495 1335.42,683.495 1335.98,683.495 1336.54,683.495 1337.1,683.495 1337.66,683.495 1338.22,683.495 1338.78,683.495 1339.34,683.495 1339.9,683.495 1340.46,683.495 1341.02,683.495 1341.57,683.495 1342.13,683.495 1342.69,683.495 1343.25,683.495 1343.81,683.495 1344.37,683.495 1344.93,683.495 1345.49,683.495 1346.05,683.495 1346.61,683.495 1347.17,683.495 1347.73,683.495 1348.29,683.495 1348.84,683.495 1349.4,683.495 1349.96,683.495 1350.52,683.495 1351.08,683.495 1351.64,683.495 1352.2,683.495 1352.76,683.495 1353.32,683.495 1353.88,683.495 1354.44,683.495 1355,683.495 1355.56,683.495 1356.12,683.495 1356.67,683.495 1357.23,683.495 1357.79,683.495 1358.35,683.495 1358.91,683.495 1359.47,683.495 1360.03,683.495 1360.59,683.495 1361.15,683.495 1361.71,683.495 1362.27,683.495 1362.83,683.495 1363.39,683.495 1363.94,683.495 1364.5,683.495 1365.06,683.495 1365.62,683.495 1366.18,683.495 1366.74,683.495 1367.3,683.495 1367.86,683.495 1368.42,683.495 1368.98,683.495 1369.54,683.495 1370.1,683.495 1370.66,683.495 1371.21,683.495 1371.77,683.495 1372.33,683.495 1372.89,683.495 1373.45,683.495 1374.01,683.495 1374.57,683.495 1375.13,683.495 1375.69,683.495 1376.25,683.495 1376.81,683.495 1377.37,683.495 1377.93,683.495 1378.49,683.495 1379.04,683.495 1379.6,683.495 1380.16,683.495 1380.72,683.495 1381.28,683.495 1381.84,683.495 1382.4,683.495 1382.96,683.495 1383.52,683.495 1384.08,683.495 1384.64,683.495 1385.2,683.495 1385.76,683.495 1386.31,683.495 1386.87,683.495 1387.43,683.495 1387.99,683.495 1388.55,683.495 1389.11,683.495 1389.67,683.495 1390.23,683.495 1390.79,683.495 1391.35,683.495 1391.91,683.495 1392.47,683.495 1393.03,683.495 1393.58,683.495 1394.14,683.495 1394.7,683.495 1395.26,683.495 1395.82,683.495 1396.38,683.495 1396.94,683.495 1397.5,683.495 1398.06,683.495 1398.62,683.495 1399.18,683.495 1399.74,683.495 1400.3,683.495 1400.86,683.495 1401.41,683.495 1401.97,683.495 1402.53,683.495 1403.09,683.495 1403.65,683.495 1404.21,683.495 1404.77,683.495 1405.33,683.495 1405.89,683.495 1406.45,683.495 1407.01,683.495 1407.57,683.495 1408.13,683.495 1408.68,683.495 1409.24,683.495 1409.8,683.495 1410.36,683.495 1410.92,683.495 1411.48,683.495 1412.04,683.495 1412.6,683.495 1413.16,683.495 1413.72,683.495 1414.28,683.495 1414.84,683.495 1415.4,683.495 1415.95,683.495 1416.51,683.495 1417.07,683.495 1417.63,683.495 1418.19,683.495 1418.75,683.495 1419.31,683.495 1419.87,683.495 1420.43,683.495 1420.99,683.495 1421.55,683.495 1422.11,683.495 1422.67,683.495 1423.23,683.495 1423.78,683.495 1424.34,683.495 1424.9,683.495 1425.46,683.495 1426.02,683.495 1426.58,683.495 1427.14,683.495 1427.7,683.495 1428.26,683.495 1428.82,683.495 1429.38,683.495 1429.94,683.495 1430.5,683.495 1431.05,683.495 1431.61,683.495 1432.17,683.495 1432.73,683.495 1433.29,683.495 1433.85,683.495 1434.41,683.495 1434.97,683.495 1435.53,683.495 1436.09,683.495 1436.65,683.495 1437.21,683.495 1437.77,683.495 1438.33,683.495 1438.88,683.495 1439.44,683.495 1440,683.495 1440.56,683.495 1441.12,683.495 1441.68,683.495 1442.24,683.495 1442.8,683.495 1443.36,683.495 1443.92,683.495 1444.48,683.495 1445.04,683.495 1445.6,683.495 1446.15,683.495 1446.71,683.495 1447.27,683.495 1447.83,683.495 1448.39,683.495 1448.95,683.495 1449.51,683.495 1450.07,683.495 1450.63,683.495 1451.19,683.495 1451.75,683.495 1452.31,683.495 1452.87,683.495 1453.42,683.495 1453.98,683.495 1454.54,683.495 1455.1,683.495 1455.66,683.495 1456.22,683.495 1456.78,683.495 1457.34,683.495 1457.9,683.495 1458.46,683.495 1459.02,683.495 1459.58,683.495 1460.14,683.495 1460.7,683.495 1461.25,683.495 1461.81,683.495 1462.37,683.495 1462.93,683.495 1463.49,683.495 1464.05,683.495 1464.61,683.495 1465.17,683.495 1465.73,683.495 1466.29,683.495 1466.85,683.495 1467.41,683.495 1467.97,683.495 1468.52,683.495 1469.08,683.495 1469.64,683.495 1470.2,683.495 1470.76,683.495 1471.32,683.495 1471.88,683.495 1472.44,683.495 1473,683.495 1473.56,683.495 1474.12,683.495 1474.68,683.495 1475.24,683.495 1475.79,683.495 1476.35,683.495 1476.91,683.495 1477.47,683.495 1478.03,683.495 1478.59,683.495 1479.15,683.495 1479.71,683.495 1480.27,683.495 1480.83,683.495 1481.39,683.495 1481.95,683.495 1482.51,683.495 1483.07,683.495 1483.62,683.495 1484.18,683.495 1484.74,683.495 1485.3,683.495 1485.86,683.495 1486.42,683.495 1486.98,683.495 1487.54,683.495 1488.1,683.495 1488.66,683.495 1489.22,683.495 1489.78,683.495 1490.34,683.495 1490.89,683.495 1491.45,683.495 1492.01,683.495 1492.57,683.495 1493.13,683.495 1493.69,683.495 1494.25,683.495 1494.81,683.495 1495.37,683.495 1495.93,683.495 1496.49,683.495 1497.05,683.495 1497.61,683.495 1498.16,683.495 1498.72,683.495 1499.28,683.495 1499.84,683.495 1500.4,683.495 1500.96,683.495 1501.52,683.495 1502.08,683.495 1502.64,683.495 1503.2,683.495 1503.76,683.495 1504.32,683.495 1504.88,683.495 1505.44,683.495 1505.99,683.495 1506.55,683.495 1507.11,683.495 1507.67,683.495 1508.23,683.495 1508.79,683.495 1509.35,683.495 1509.91,683.495 1510.47,683.495 1511.03,683.495 1511.59,683.495 1512.15,683.495 1512.71,683.495 1513.26,683.495 1513.82,683.495 1514.38,683.495 1514.94,683.495 1515.5,683.495 1516.06,683.495 1516.62,683.495 1517.18,683.495 1517.74,683.495 1518.3,683.495 1518.86,683.495 1519.42,683.495 1519.98,683.495 1520.53,683.495 1521.09,683.495 1521.65,683.495 1522.21,683.495 1522.77,683.495 1523.33,683.495 1523.89,683.495 1524.45,683.495 1525.01,683.495 1525.57,683.495 1526.13,683.495 1526.69,683.495 1527.25,683.495 1527.81,683.495 1528.36,683.495 1528.92,683.495 1529.48,683.495 1530.04,683.495 1530.6,683.495 1531.16,683.495 1531.72,683.495 1532.28,683.495 1532.84,683.495 1533.4,683.495 1533.96,683.495 1534.52,683.495 1535.08,683.495 1535.63,683.495 1536.19,683.495 1536.75,683.495 1537.31,683.495 1537.87,683.495 1538.43,683.495 1538.99,683.495 1539.55,683.495 1540.11,683.495 1540.67,683.495 1541.23,683.495 1541.79,683.495 1542.35,683.495 1542.9,683.495 1543.46,683.495 1544.02,683.495 1544.58,683.495 1545.14,683.495 1545.7,683.495 1546.26,683.495 1546.82,683.495 1547.38,683.495 1547.94,683.495 1548.5,683.495 1549.06,683.495 1549.62,683.495 1550.18,683.495 1550.73,683.495 1551.29,683.495 1551.85,683.495 1552.41,683.495 1552.97,683.495 1553.53,683.495 1554.09,683.495 1554.65,683.495 1555.21,683.495 1555.77,683.495 1556.33,683.495 1556.89,683.495 1557.45,683.495 1558,683.495 1558.56,683.495 1559.12,683.495 1559.68,683.495 1560.24,683.495 1560.8,683.495 1561.36,683.495 1561.92,683.495 1562.48,683.495 1563.04,683.495 1563.6,683.495 1564.16,683.495 1564.72,683.495 1565.28,683.495 1565.83,683.495 1566.39,683.495 1566.95,683.495 1567.51,683.495 1568.07,683.495 1568.63,683.495 1569.19,683.495 1569.75,683.495 1570.31,683.495 1570.87,683.495 1571.43,683.495 1571.99,683.495 1572.55,683.495 1573.1,683.495 1573.66,683.495 1574.22,683.495 1574.78,683.495 1575.34,683.495 1575.9,683.495 1576.46,683.495 1577.02,683.495 1577.58,683.495 1578.14,683.495 1578.7,683.495 1579.26,683.495 1579.82,683.495 1580.37,683.495 1580.93,683.495 1581.49,683.495 1582.05,683.495 1582.61,683.495 1583.17,683.495 1583.73,683.495 1584.29,683.495 1584.85,683.495 1585.41,683.495 1585.97,683.495 1586.53,683.495 1587.09,683.495 1587.65,683.495 1588.2,683.495 1588.76,683.495 1589.32,683.495 1589.88,683.495 1590.44,683.495 1591,683.495 1591.56,683.495 1592.12,683.495 1592.68,683.495 1593.24,683.495 1593.8,683.495 1594.36,683.495 1594.92,683.495 1595.47,683.495 1596.03,683.495 1596.59,683.495 1597.15,683.495 1597.71,683.495 1598.27,683.495 1598.83,683.495 1599.39,683.495 1599.95,683.495 1600.51,683.495 1601.07,683.495 1601.63,683.495 1602.19,683.495 1602.74,683.495 1603.3,683.495 1603.86,683.495 1604.42,683.495 1604.98,683.495 1605.54,683.495 1606.1,683.495 1606.66,683.495 1607.22,683.495 1607.78,683.495 1608.34,683.495 1608.9,683.495 1609.46,683.495 1610.02,683.495 1610.57,683.495 1611.13,683.495 1611.69,683.495 1612.25,683.495 1612.81,683.495 1613.37,683.495 1613.93,683.495 1614.49,683.495 1615.05,683.495 1615.61,683.495 1616.17,683.495 1616.73,683.495 1617.29,683.495 1617.84,683.495 1618.4,683.495 1618.96,683.495 1619.52,683.495 1620.08,683.495 1620.64,683.495 1621.2,683.495 1621.76,683.495 1622.32,683.495 1622.88,683.495 1623.44,683.495 1624,683.495 1624.56,683.495 1625.11,683.495 1625.67,683.495 1626.23,683.495 1626.79,683.495 1627.35,683.495 1627.91,683.495 1628.47,683.495 1629.03,683.495 1629.59,683.495 1630.15,683.495 1630.71,683.495 1631.27,683.495 1631.83,683.495 1632.39,683.495 1632.94,683.495 1633.5,683.495 1634.06,683.495 1634.62,683.495 1635.18,683.495 1635.74,683.495 1636.3,683.495 1636.86,683.495 1637.42,683.495 1637.98,683.495 1638.54,683.495 1639.1,683.495 1639.66,683.495 1640.21,683.495 1640.77,683.495 1641.33,683.495 1641.89,683.495 1642.45,683.495 1643.01,683.495 1643.57,683.495 1644.13,683.495 1644.69,683.495 1645.25,683.495 1645.81,683.495 1646.37,683.495 1646.93,683.495 1647.48,683.495 1648.04,683.495 1648.6,683.495 1649.16,683.495 1649.72,683.495 1650.28,683.495 1650.84,683.495 1651.4,683.495 1651.96,683.495 1652.52,683.495 1653.08,683.495 1653.64,683.495 1654.2,683.495 1654.76,683.495 1655.31,683.495 1655.87,683.495 1656.43,683.495 1656.99,683.495 1657.55,683.495 1658.11,683.495 1658.67,683.495 1659.23,683.495 1659.79,683.495 1660.35,683.495 1660.91,683.495 1661.47,683.495 1662.03,683.495 1662.58,683.495 1663.14,683.495 1663.7,683.495 1664.26,683.495 1664.82,683.495 1665.38,683.495 1665.94,683.495 1666.5,683.495 1667.06,683.495 1667.62,683.495 1668.18,683.495 1668.74,683.495 1669.3,683.495 1669.85,683.495 1670.41,683.495 1670.97,683.495 1671.53,683.495 1672.09,683.495 1672.65,683.495 1673.21,683.495 1673.77,683.495 1674.33,683.495 1674.89,683.495 1675.45,683.495 1676.01,683.495 1676.57,683.495 1677.13,683.495 1677.68,683.495 1678.24,683.495 1678.8,683.495 1679.36,683.495 1679.92,683.495 1680.48,683.495 1681.04,683.495 1681.6,683.495 1682.16,683.495 1682.72,683.495 1683.28,683.495 1683.84,683.495 1684.4,683.495 1684.95,683.495 1685.51,683.495 1686.07,683.495 1686.63,683.495 1687.19,683.495 1687.75,683.495 1688.31,683.495 1688.87,683.495 1689.43,683.495 1689.99,683.495 1690.55,683.495 1691.11,683.495 1691.67,683.495 1692.23,683.495 1692.78,683.495 1693.34,683.495 1693.9,683.495 1694.46,683.495 1695.02,683.495 1695.58,683.495 1696.14,683.495 1696.7,683.495 1697.26,683.495 1697.82,683.495 1698.38,683.495 1698.94,683.495 1699.5,683.495 1700.05,683.495 1700.61,683.495 1701.17,683.495 1701.73,683.495 1702.29,683.495 1702.85,683.495 1703.41,683.495 1703.97,683.495 1704.53,683.495 1705.09,683.495 1705.65,683.495 1706.21,683.495 1706.77,683.495 1707.32,683.495 1707.88,683.495 1708.44,683.495 1709,683.495 1709.56,683.495 1710.12,683.495 1710.68,683.495 1711.24,683.495 1711.8,683.495 1712.36,683.495 1712.92,683.495 1713.48,683.495 1714.04,683.495 1714.6,683.495 1715.15,683.495 1715.71,683.495 1716.27,683.495 1716.83,683.495 1717.39,683.495 1717.95,683.495 1718.51,683.495 1719.07,683.495 1719.63,683.495 1720.19,683.495 1720.75,683.495 1721.31,683.495 1721.87,683.495 1722.42,683.495 1722.98,683.495 1723.54,683.495 1724.1,683.495 1724.66,683.495 1725.22,683.495 1725.78,683.495 1726.34,683.495 1726.9,683.495 1727.46,683.495 1728.02,683.495 1728.58,683.495 1729.14,683.495 1729.69,683.495 1730.25,683.495 1730.81,683.495 1731.37,683.495 1731.93,683.495 1732.49,683.495 1733.05,683.495 1733.61,683.495 1734.17,683.495 1734.73,683.495 1735.29,683.495 1735.85,683.495 1736.41,683.495 1736.97,683.495 1737.52,683.495 1738.08,683.495 1738.64,683.495 1739.2,683.495 1739.76,683.495 1740.32,683.495 1740.88,683.495 1741.44,683.495 1742,683.495 1742.56,683.495 1743.12,683.495 1743.68,683.495 1744.24,683.495 1744.79,683.495 1745.35,683.495 1745.91,683.495 1746.47,683.495 1747.03,683.495 1747.59,683.495 1748.15,683.495 1748.71,683.495 1749.27,683.495 1749.83,683.495 1750.39,683.495 1750.95,683.495 1751.51,683.495 1752.06,683.495 1752.62,683.495 1753.18,683.495 1753.74,683.495 1754.3,683.495 1754.86,683.495 1755.42,683.495 1755.98,683.495 1756.54,683.495 1757.1,683.495 1757.66,683.495 1758.22,683.495 1758.78,683.495 1759.34,683.495 1759.89,683.495 1760.45,683.495 1761.01,683.495 1761.57,683.495 1762.13,683.495 1762.69,683.495 1763.25,683.495 1763.81,683.495 1764.37,683.495 1764.93,683.495 1765.49,683.495 1766.05,683.495 1766.61,683.495 1767.16,683.495 1767.72,683.495 1768.28,683.495 1768.84,683.495 1769.4,683.495 1769.96,683.495 1770.52,683.495 1771.08,683.495 1771.64,683.495 1772.2,683.495 1772.76,683.495 1773.32,683.495 1773.88,683.495 1774.43,683.495 1774.99,683.495 1775.55,683.495 1776.11,683.495 1776.67,683.495 1777.23,683.495 1777.79,683.495 1778.35,683.495 1778.91,683.495 1779.47,683.495 1780.03,683.495 1780.59,683.495 1781.15,683.495 1781.71,683.495 1782.26,683.495 1782.82,683.495 1783.38,683.495 1783.94,683.495 1784.5,683.495 1785.06,683.495 1785.62,683.495 1786.18,683.495 1786.74,683.495 1787.3,683.495 1787.86,683.495 1788.42,683.495 1788.98,683.495 1789.53,683.495 1790.09,683.495 1790.65,683.495 1791.21,683.495 1791.77,683.495 1792.33,683.495 1792.89,683.495 1793.45,683.495 1794.01,683.495 1794.57,683.495 1795.13,683.495 1795.69,683.495 1796.25,683.495 1796.8,683.495 1797.36,683.495 1797.92,683.495 1798.48,683.495 1799.04,683.495 1799.6,683.495 1800.16,683.495 1800.72,683.495 1801.28,683.495 1801.84,683.495 1802.4,683.495 1802.96,683.495 1803.52,683.495 1804.08,683.495 1804.63,683.495 1805.19,683.495 1805.75,683.495 1806.31,683.495 1806.87,683.495 1807.43,683.495 1807.99,683.495 1808.55,683.495 1809.11,683.495 1809.67,683.495 1810.23,683.495 1810.79,683.495 1811.35,683.495 1811.9,683.495 1812.46,683.495 1813.02,683.495 1813.58,683.495 1814.14,683.495 1814.7,683.495 1815.26,683.495 1815.82,683.495 1816.38,683.495 1816.94,683.495 1817.5,683.495 1818.06,683.495 1818.62,683.495 1819.18,683.495 1819.73,683.495 1820.29,683.495 1820.85,683.495 1821.41,683.495 1821.97,683.495 1822.53,683.495 1823.09,683.495 1823.65,683.495 1824.21,683.495 1824.77,683.495 1825.33,683.495 1825.89,683.495 1826.45,683.495 1827,683.495 1827.56,683.495 1828.12,683.495 1828.68,683.495 1829.24,683.495 1829.8,683.495 1830.36,683.495 1830.92,683.495 1831.48,683.495 1832.04,683.495 1832.6,683.495 1833.16,683.495 1833.72,683.495 1834.27,683.495 1834.83,683.495 1835.39,683.495 1835.95,683.495 1836.51,683.495 1837.07,683.495 1837.63,683.495 1838.19,683.495 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025849549047127 ± 0.019307368094151865\nProjected Energy: -4.014632327165835 ± (0.0052572244458533035, 0.005075129903299391)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.465946</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3345e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0209e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.907e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.373e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.895e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.416e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321591\n -3.363124291613362\n -0.7590191922770888\n  0.13584182219622143\n  0.1578999869460862\n  0.8767114411781503\n  1.5305929970973322\n  1.583573261186741\n  3.072870330325858\n  3.1256726539518382\n  4.862107221562163\n  6.260694850380594\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
