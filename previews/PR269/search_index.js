var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20849266625829774 ± 0.0015935136652689065\n   G2(1) = 0.9182475281477506 ± 0.0007091532170611321\n   G2(2) = 0.9821477217336251 ± 0.00045016164239027913\n   G2(3) = 0.9907168339789512 ± 0.0006765336805810237\n   G2(4) = 0.9821477217336251 ± 0.00045016164239027913\n   G2(5) = 0.9182475281477506 ± 0.0007091532170611321\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0615740950856045 ± 0.1437999547842385\n   Replica 2: -3.980335720052324 ± 0.12363319419025555\n   Replica 3: -3.978082322255727 ± 0.13489035349021353\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.37 2211.02,1003.37 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.905 2211.02,745.905 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.444 2211.02,488.444 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.983 2211.02,230.983 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.37 423.181,1003.37 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.905 423.181,745.905 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.444 423.181,488.444 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.983 423.181,230.983 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M290.043 1016.71 L306.363 1016.71 L306.363 1020.65 L284.418 1020.65 L284.418 1016.71 Q287.08 1013.96 291.664 1009.33 Q296.27 1004.67 297.451 1003.33 Q299.696 1000.81 300.576 999.072 Q301.478 997.313 301.478 995.623 Q301.478 992.868 299.534 991.132 Q297.613 989.396 294.511 989.396 Q292.312 989.396 289.858 990.16 Q287.427 990.924 284.65 992.475 L284.65 987.753 Q287.474 986.618 289.927 986.04 Q292.381 985.461 294.418 985.461 Q299.789 985.461 302.983 988.146 Q306.177 990.831 306.177 995.322 Q306.177 997.452 305.367 999.373 Q304.58 1001.27 302.474 1003.86 Q301.895 1004.54 298.793 1007.75 Q295.691 1010.95 290.043 1016.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 986.086 L334.58 986.086 L334.58 990.021 L320.506 990.021 L320.506 998.493 Q321.524 998.146 322.543 997.984 Q323.562 997.799 324.58 997.799 Q330.367 997.799 333.747 1000.97 Q337.126 1004.14 337.126 1009.56 Q337.126 1015.14 333.654 1018.24 Q330.182 1021.32 323.862 1021.32 Q321.687 1021.32 319.418 1020.95 Q317.173 1020.58 314.765 1019.84 L314.765 1015.14 Q316.849 1016.27 319.071 1016.83 Q321.293 1017.38 323.77 1017.38 Q327.774 1017.38 330.112 1015.28 Q332.45 1013.17 332.45 1009.56 Q332.45 1005.95 330.112 1003.84 Q327.774 1001.73 323.77 1001.73 Q321.895 1001.73 320.02 1002.15 Q318.168 1002.57 316.224 1003.45 L316.224 986.086 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 989.165 Q352.728 989.165 350.899 992.73 Q349.094 996.271 349.094 1003.4 Q349.094 1010.51 350.899 1014.07 Q352.728 1017.61 356.339 1017.61 Q359.973 1017.61 361.779 1014.07 Q363.608 1010.51 363.608 1003.4 Q363.608 996.271 361.779 992.73 Q359.973 989.165 356.339 989.165 M356.339 985.461 Q362.149 985.461 365.205 990.068 Q368.284 994.651 368.284 1003.4 Q368.284 1012.13 365.205 1016.73 Q362.149 1021.32 356.339 1021.32 Q350.529 1021.32 347.45 1016.73 Q344.395 1012.13 344.395 1003.4 Q344.395 994.651 347.45 990.068 Q350.529 985.461 356.339 985.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M286.062 728.625 L304.418 728.625 L304.418 732.56 L290.344 732.56 L290.344 741.033 Q291.363 740.685 292.381 740.523 Q293.4 740.338 294.418 740.338 Q300.205 740.338 303.585 743.509 Q306.964 746.681 306.964 752.097 Q306.964 757.676 303.492 760.778 Q300.02 763.856 293.701 763.856 Q291.525 763.856 289.256 763.486 Q287.011 763.116 284.603 762.375 L284.603 757.676 Q286.687 758.81 288.909 759.366 Q291.131 759.921 293.608 759.921 Q297.613 759.921 299.951 757.815 Q302.288 755.708 302.288 752.097 Q302.288 748.486 299.951 746.38 Q297.613 744.273 293.608 744.273 Q291.733 744.273 289.858 744.69 Q288.006 745.107 286.062 745.986 L286.062 728.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 731.704 Q322.566 731.704 320.737 735.269 Q318.932 738.81 318.932 745.94 Q318.932 753.046 320.737 756.611 Q322.566 760.153 326.177 760.153 Q329.811 760.153 331.617 756.611 Q333.446 753.046 333.446 745.94 Q333.446 738.81 331.617 735.269 Q329.811 731.704 326.177 731.704 M326.177 728 Q331.987 728 335.043 732.607 Q338.122 737.19 338.122 745.94 Q338.122 754.667 335.043 759.273 Q331.987 763.856 326.177 763.856 Q320.367 763.856 317.288 759.273 Q314.233 754.667 314.233 745.94 Q314.233 737.19 317.288 732.607 Q320.367 728 326.177 728 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 731.704 Q352.728 731.704 350.899 735.269 Q349.094 738.81 349.094 745.94 Q349.094 753.046 350.899 756.611 Q352.728 760.153 356.339 760.153 Q359.973 760.153 361.779 756.611 Q363.608 753.046 363.608 745.94 Q363.608 738.81 361.779 735.269 Q359.973 731.704 356.339 731.704 M356.339 728 Q362.149 728 365.205 732.607 Q368.284 737.19 368.284 745.94 Q368.284 754.667 365.205 759.273 Q362.149 763.856 356.339 763.856 Q350.529 763.856 347.45 759.273 Q344.395 754.667 344.395 745.94 Q344.395 737.19 347.45 732.607 Q350.529 728 356.339 728 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M284.835 471.164 L307.057 471.164 L307.057 473.155 L294.511 505.724 L289.627 505.724 L301.432 475.099 L284.835 475.099 L284.835 471.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 471.164 L334.58 471.164 L334.58 475.099 L320.506 475.099 L320.506 483.572 Q321.524 483.224 322.543 483.062 Q323.562 482.877 324.58 482.877 Q330.367 482.877 333.747 486.048 Q337.126 489.22 337.126 494.636 Q337.126 500.215 333.654 503.317 Q330.182 506.396 323.862 506.396 Q321.687 506.396 319.418 506.025 Q317.173 505.655 314.765 504.914 L314.765 500.215 Q316.849 501.349 319.071 501.905 Q321.293 502.46 323.77 502.46 Q327.774 502.46 330.112 500.354 Q332.45 498.247 332.45 494.636 Q332.45 491.025 330.112 488.919 Q327.774 486.812 323.77 486.812 Q321.895 486.812 320.02 487.229 Q318.168 487.646 316.224 488.525 L316.224 471.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 474.243 Q352.728 474.243 350.899 477.808 Q349.094 481.349 349.094 488.479 Q349.094 495.585 350.899 499.15 Q352.728 502.692 356.339 502.692 Q359.973 502.692 361.779 499.15 Q363.608 495.585 363.608 488.479 Q363.608 481.349 361.779 477.808 Q359.973 474.243 356.339 474.243 M356.339 470.539 Q362.149 470.539 365.205 475.146 Q368.284 479.729 368.284 488.479 Q368.284 497.206 365.205 501.812 Q362.149 506.396 356.339 506.396 Q350.529 506.396 347.45 501.812 Q344.395 497.206 344.395 488.479 Q344.395 479.729 347.45 475.146 Q350.529 470.539 356.339 470.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M256.664 244.328 L264.303 244.328 L264.303 217.963 L255.992 219.629 L255.992 215.37 L264.256 213.703 L268.932 213.703 L268.932 244.328 L276.571 244.328 L276.571 248.263 L256.664 248.263 L256.664 244.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M296.015 216.782 Q292.404 216.782 290.576 220.347 Q288.77 223.889 288.77 231.018 Q288.77 238.125 290.576 241.689 Q292.404 245.231 296.015 245.231 Q299.65 245.231 301.455 241.689 Q303.284 238.125 303.284 231.018 Q303.284 223.889 301.455 220.347 Q299.65 216.782 296.015 216.782 M296.015 213.078 Q301.826 213.078 304.881 217.685 Q307.96 222.268 307.96 231.018 Q307.96 239.745 304.881 244.351 Q301.826 248.935 296.015 248.935 Q290.205 248.935 287.127 244.351 Q284.071 239.745 284.071 231.018 Q284.071 222.268 287.127 217.685 Q290.205 213.078 296.015 213.078 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 216.782 Q322.566 216.782 320.737 220.347 Q318.932 223.889 318.932 231.018 Q318.932 238.125 320.737 241.689 Q322.566 245.231 326.177 245.231 Q329.811 245.231 331.617 241.689 Q333.446 238.125 333.446 231.018 Q333.446 223.889 331.617 220.347 Q329.811 216.782 326.177 216.782 M326.177 213.078 Q331.987 213.078 335.043 217.685 Q338.122 222.268 338.122 231.018 Q338.122 239.745 335.043 244.351 Q331.987 248.935 326.177 248.935 Q320.367 248.935 317.288 244.351 Q314.233 239.745 314.233 231.018 Q314.233 222.268 317.288 217.685 Q320.367 213.078 326.177 213.078 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 216.782 Q352.728 216.782 350.899 220.347 Q349.094 223.889 349.094 231.018 Q349.094 238.125 350.899 241.689 Q352.728 245.231 356.339 245.231 Q359.973 245.231 361.779 241.689 Q363.608 238.125 363.608 231.018 Q363.608 223.889 361.779 220.347 Q359.973 216.782 356.339 216.782 M356.339 213.078 Q362.149 213.078 365.205 217.685 Q368.284 222.268 368.284 231.018 Q368.284 239.745 365.205 244.351 Q362.149 248.935 356.339 248.935 Q350.529 248.935 347.45 244.351 Q344.395 239.745 344.395 231.018 Q344.395 222.268 347.45 217.685 Q350.529 213.078 356.339 213.078 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.983 4017.76,230.983 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.32 457.123,1249.14 457.691,1248.88 458.259,1248.6 458.828,1248.24 459.396,1247.8 459.964,1247.27 460.533,1246.71 461.101,1245.03 461.669,1243.29 462.238,1242.5 462.806,1240.61 463.375,1239.69 463.943,1238.67 464.511,1237.56 465.08,1236.33 465.648,1235 466.216,1233.58 466.785,1232.01 467.353,1230.3 467.921,1228.5 468.49,1226.56 469.058,1223.42 469.626,1221.13 470.195,1218.7 470.763,1216.1 471.331,1213.39 471.9,1210.49 472.468,1206.3 473.036,1203 473.605,1197.41 474.173,1193.65 474.741,1188.69 475.31,1184.59 475.878,1180.28 476.446,1173.68 477.015,1167.88 477.583,1160.88 478.152,1155.72 478.72,1150.36 479.288,1144.66 479.857,1138.73 480.425,1132.58 480.993,1126.22 481.562,1119.6 482.13,1111.75 482.698,1104.74 483.267,1095.31 483.835,1087.98 484.403,1079.4 484.972,1070.62 485.54,1061.54 486.108,1052.12 486.677,1042.55 487.245,1032.67 487.813,1023.65 488.382,1014.58 488.95,1004.31 489.518,995.047 490.087,984.55 490.655,973.927 491.224,962.29 491.792,951.557 492.36,939.646 492.929,927.599 493.497,917.683 494.065,905.767 494.634,894.818 495.202,884.92 495.77,871.8 496.339,858.654 496.907,847.802 497.475,835.956 498.044,826.266 498.612,816.654 499.18,804.85 499.749,792.031 500.317,779.369 500.885,767.861 501.454,757.783 502.022,748.705 502.59,737.549 503.159,726.604 503.727,716.686 504.295,703.754 504.864,692.142 505.432,683.746 506.001,674.547 506.569,663.358 507.137,652.244 507.706,643.401 508.274,633.681 508.842,624.068 509.411,613.825 509.979,606.691 510.547,597.771 511.116,586.638 511.684,578.888 512.252,571.555 512.821,563.188 513.389,555.84 513.957,549.682 514.526,542.625 515.094,535.684 515.662,528.891 516.231,523.027 516.799,515.412 517.367,507.801 517.936,502.289 518.504,496.878 519.072,489.503 519.641,483.43 520.209,478.516 520.778,471.519 521.346,465.691 521.914,458.87 522.483,454.438 523.051,449.96 523.619,445.697 524.188,439.287 524.756,433.068 525.324,427.102 525.893,422.113 526.461,416.224 527.029,410.614 527.598,403.239 528.166,399.191 528.734,395.268 529.303,389.591 529.871,387.071 530.439,384.558 531.008,382.078 531.576,378.463 532.144,373.667 532.713,371.287 533.281,368.834 533.85,366.404 534.418,363.116 534.986,359.631 535.555,358.512 536.123,355.157 536.691,353.904 537.26,349.684 537.828,346.678 538.396,344.507 538.965,341.497 539.533,341.375 540.101,339.381 540.67,337.347 541.238,334.343 541.806,332.364 542.375,329.362 542.943,326.68 543.511,324.929 544.08,321.417 544.648,316.048 545.216,314.577 545.785,312.267 546.353,308.97 546.921,305.954 547.49,306.013 548.058,304.798 548.627,302.546 549.195,301.629 549.763,300.461 550.332,300.306 550.9,298.129 551.468,297.176 552.037,294.157 552.605,294.235 553.173,290.876 553.742,288.924 554.31,285.108 554.878,285.604 555.447,284.926 556.015,284.349 556.583,283.821 557.152,282.127 557.72,282.655 558.288,278.912 558.857,277.43 559.425,276.027 559.993,276.575 560.562,276.028 561.13,276.826 561.698,276.946 562.267,276.307 562.835,274.721 563.404,275.249 563.972,275.635 564.54,276.923 565.109,274.993 565.677,273.03 566.245,271.091 566.814,270.633 567.382,268.012 567.95,267.529 568.519,266.059 569.087,265.048 569.655,263.801 570.224,262.438 570.792,262.361 571.36,261.075 571.929,260.96 572.497,258.724 573.065,257.593 573.634,256.582 574.202,256.669 574.77,256.479 575.339,253.489 575.907,253.59 576.476,254.857 577.044,259.105 577.612,258.943 578.181,258.487 578.749,259.234 579.317,258.955 579.886,258.62 580.454,257.224 581.022,257.024 581.591,257.849 582.159,257.357 582.727,256.033 583.296,253.79 583.864,250.577 584.432,248.434 585.001,249.565 585.569,249.584 586.137,249.528 586.706,249.445 587.274,249.388 587.842,248.124 588.411,248.357 588.979,248.544 589.547,248.568 590.116,245.375 590.684,245.398 591.253,245.72 591.821,243.903 592.389,242.059 592.958,242.678 593.526,242.269 594.094,242.737 594.663,241.178 595.231,241.598 595.799,242.017 596.368,243.495 596.936,243.903 597.504,239.845 598.073,240.65 598.641,243.297 599.209,245.639 599.778,246.744 600.346,248.753 600.914,248.566 601.483,250.352 602.051,249.042 602.619,248.819 603.188,250.728 603.756,250.387 604.325,250.866 604.893,250.127 605.461,247.628 606.03,245.285 606.598,241.03 607.166,241.296 607.735,240.246 608.303,240.547 608.871,240.828 609.44,240.206 610.008,241.38 610.576,240.445 611.145,238.735 611.713,237.16 612.281,236.769 612.85,238.31 613.418,239.687 613.986,238.053 614.555,237.202 615.123,239.667 615.691,237.768 616.26,236.146 616.828,235.574 617.396,235.144 617.965,233.817 618.533,236.642 619.102,238.025 619.67,241.54 620.238,241.578 620.807,240.534 621.375,236.648 621.943,236.807 622.512,238.176 623.08,238.531 623.648,236.77 624.217,235.079 624.785,237.568 625.353,237.742 625.922,237.174 626.49,238.742 627.058,238.859 627.627,241.207 628.195,240.203 628.763,238.941 629.332,238.076 629.9,238.25 630.468,238.428 631.037,237.45 631.605,237.805 632.173,239.164 632.742,236.449 633.31,237.929 633.879,238.172 634.447,238.429 635.015,237.78 635.584,238.137 636.152,238.299 636.72,237.622 637.289,236.67 637.857,235.789 638.425,237.04 638.994,237.311 639.562,236.454 640.13,238.089 640.699,238.259 641.267,237.659 641.835,238.067 642.404,237.313 642.972,238.52 643.54,235.417 644.109,236.832 644.677,234.969 645.245,234.274 645.814,233.667 646.382,235.224 646.951,235.521 647.519,234.876 648.087,233.113 648.656,232.691 649.224,232.194 649.792,232.872 650.361,232.61 650.929,234.303 651.497,235.793 652.066,235.016 652.634,235.371 653.202,232.76 653.771,233.401 654.339,236.797 654.907,235.998 655.476,238.305 656.044,237.529 656.612,236.885 657.181,239.193 657.749,242.546 658.317,243.617 658.886,243.387 659.454,243.228 660.022,241.909 660.591,241.623 661.159,241.328 661.728,240.086 662.296,237.872 662.864,239.968 663.433,240.912 664.001,238.746 664.569,240.856 665.138,242.592 665.706,241.131 666.274,239.878 666.843,238.64 667.411,237.725 667.979,238.971 668.548,239.76 669.116,237.5 669.684,237.57 670.253,235.333 670.821,237.635 671.389,236.523 671.958,236.347 672.526,237.342 673.094,237.332 673.663,237.074 674.231,238.132 674.799,240.334 675.368,239.177 675.936,236.881 676.505,236.638 677.073,233.682 677.641,232.968 678.21,233.247 678.778,232.399 679.346,232.591 679.915,233.805 680.483,233.072 681.051,234.271 681.62,234.598 682.188,235.819 682.756,234.827 683.325,234.166 683.893,234.463 684.461,233.527 685.03,233.609 685.598,235.003 686.166,236.131 686.735,237.123 687.303,237.022 687.871,237.004 688.44,239.073 689.008,237.886 689.577,238.705 690.145,239.456 690.713,240.335 691.282,240.99 691.85,240.727 692.418,239.272 692.987,238.747 693.555,238.318 694.123,237.966 694.692,236.78 695.26,236.381 695.828,236.24 696.397,236.848 696.965,237.676 697.533,238.331 698.102,237.877 698.67,236.569 699.238,235.602 699.807,234.647 700.375,232.533 700.943,232.702 701.512,232.795 702.08,233.884 702.648,233.719 703.217,232.814 703.785,230.781 704.354,229.784 704.922,230.988 705.49,231.111 706.059,231.222 706.627,230.448 707.195,230.575 707.764,230.787 708.332,230.095 708.9,230.321 709.469,230.519 710.037,229.612 710.605,228.702 711.174,230.332 711.742,229.465 712.31,228.926 712.879,228.151 713.447,228.719 714.015,230.203 714.584,229.415 715.152,229.717 715.72,228.998 716.289,230.54 716.857,228.696 717.425,229.058 717.994,228.62 718.562,230.05 719.131,230.007 719.699,230.442 720.267,230.753 720.836,231.999 721.404,230.975 721.972,229.229 722.541,228.532 723.109,229.779 723.677,230.309 724.246,229.751 724.814,231.151 725.382,231.328 725.951,232.624 726.519,230.939 727.087,234.479 727.656,234.545 728.224,234.936 728.792,232.84 729.361,232.969 729.929,236.189 730.497,235.112 731.066,236.219 731.634,235.137 732.203,236.094 732.771,237.224 733.339,235.226 733.908,235.035 734.476,233.788 735.044,233.816 735.613,231.611 736.181,232.879 736.749,231.899 737.318,233.256 737.886,235.25 738.454,233.011 739.023,233.129 739.591,233.312 740.159,232.49 740.728,234.496 741.296,235.34 741.864,236.514 742.433,236.564 743.001,235.464 743.569,230.224 744.138,228.332 744.706,226.686 745.274,226.113 745.843,228.008 746.411,227.479 746.98,228.045 747.548,229.484 748.116,228.911 748.685,232.444 749.253,232.675 749.821,233.845 750.39,235.002 750.958,234.836 751.526,232.727 752.095,231.8 752.663,231.003 753.231,231.149 753.8,229.257 754.368,230.791 754.936,229.312 755.505,228.497 756.073,227.193 756.641,226.645 757.21,226.174 757.778,228.733 758.346,230.284 758.915,230.676 759.483,234.317 760.052,234.522 760.62,235.722 761.188,237.532 761.757,236.274 762.325,235.021 762.893,236.218 763.462,238.186 764.03,237.096 764.598,235.936 765.167,234.834 765.735,234.777 766.303,234.864 766.872,233.639 767.44,234.79 768.008,236.008 768.577,234.763 769.145,234.683 769.713,237.762 770.282,237.477 770.85,236.157 771.418,235.908 771.987,235.831 772.555,235.69 773.123,235.625 773.692,235.419 774.26,233.344 774.829,233.288 775.397,233.121 775.965,233.04 776.534,234.095 777.102,233.917 777.67,233.922 778.239,231.706 778.807,230.654 779.375,229.789 779.944,230.004 780.512,231.242 781.08,233.56 781.649,233.451 782.217,233.393 782.785,233.531 783.354,233.276 783.922,231.219 784.49,231.584 785.059,234.803 785.627,234.638 786.195,232.447 786.764,234.667 787.332,234.486 787.9,237.648 788.469,237.359 789.037,235.146 789.606,234.037 790.174,234.996 790.742,234.722 791.311,233.474 791.879,232.198 792.447,232.343 793.016,235.651 793.584,234.547 794.152,236.259 794.721,233.768 795.289,233.732 795.857,234.699 796.426,233.777 796.994,235.593 797.562,235.459 798.131,237.239 798.699,236.774 799.267,237.629 799.836,232.983 800.404,233.803 800.972,234.608 801.541,232.391 802.109,233.263 802.678,231.118 803.246,232.225 803.814,234.301 804.383,234.097 804.951,234.824 805.519,232.589 806.088,231.507 806.656,231.624 807.224,232.654 807.793,231.653 808.361,230.743 808.929,229.8 809.498,228.86 810.066,229.144 810.634,230.328 811.203,230.71 811.771,230.899 812.339,233.314 812.908,231.123 813.476,230.347 814.044,229.486 814.613,231.737 815.181,231.579 815.749,231.855 816.318,232.796 816.886,233.89 817.455,233.697 818.023,233.57 818.591,235.227 819.16,233.855 819.728,232.689 820.296,232.345 820.865,231.138 821.433,231.315 822.001,231.366 822.57,232.447 823.138,232.372 823.706,234.457 824.275,234.141 824.843,234.943 825.411,234.354 825.98,234.023 826.548,232.599 827.116,229.314 827.685,227.446 828.253,228.652 828.821,227.796 829.39,228.963 829.958,229.006 830.526,230.3 831.095,226.563 831.663,226.864 832.232,227.19 832.8,227.378 833.368,226.492 833.937,224.788 834.505,224.268 835.073,224.88 835.642,228.214 836.21,228.468 836.778,228.862 837.347,228.893 837.915,227.102 838.483,228.602 839.052,227.785 839.62,228.16 840.188,227.348 840.757,226.648 841.325,225.985 841.893,227.438 842.462,227.903 843.03,229.469 843.598,231.616 844.167,230.773 844.735,231.847 845.304,233.955 845.872,231.851 846.44,231.008 847.009,231.229 847.577,231.34 848.145,233.335 848.714,233.242 849.282,231.294 849.85,232.504 850.419,230.748 850.987,231.731 851.555,232.01 852.124,233.102 852.692,231.899 853.26,232.105 853.829,231.132 854.397,232.516 854.965,231.547 855.534,229.712 856.102,229.861 856.67,231.175 857.239,231.301 857.807,229.408 858.375,229.472 858.944,229.779 859.512,226.93 860.081,226.116 860.649,227.757 861.217,226.03 861.786,225.651 862.354,225.333 862.922,225.885 863.491,227.557 864.059,228 864.627,228.427 865.196,229.735 865.764,231.038 866.332,231.218 866.901,230.235 867.469,230.401 868.037,232.547 868.606,231.744 869.174,230.915 869.742,231.166 870.311,232.48 870.879,230.421 871.447,229.547 872.016,230.961 872.584,227.233 873.152,228.772 873.721,230.145 874.289,230.453 874.858,232.866 875.426,232.897 875.994,236.106 876.563,235.803 877.131,235.829 877.699,235.832 878.268,236.735 878.836,237.469 879.404,239.048 879.973,239.774 880.541,240.276 881.109,239.686 881.678,240.161 882.246,240.938 882.814,239.168 883.383,237.539 883.951,237.327 884.519,236.23 885.088,234.981 885.656,231.644 886.224,230.714 886.793,232.595 887.361,234.548 887.93,234.291 888.498,233.071 889.066,232.173 889.635,232.294 890.203,233.388 890.771,232.145 891.34,232.244 891.908,231.483 892.476,230.47 893.045,228.35 893.613,229.661 894.181,229.899 894.75,229.892 895.318,232.402 895.886,232.444 896.455,232.64 897.023,232.441 897.591,230.281 898.16,230.447 898.728,231.462 899.296,230.403 899.865,230.733 900.433,232.712 901.001,233.711 901.57,233.497 902.138,232.234 902.707,232.251 903.275,234.261 903.843,236.321 904.412,236.048 904.98,237.77 905.548,237.386 906.117,237.085 906.685,234.625 907.253,235.486 907.822,234.122 908.39,233.751 908.958,233.663 909.527,233.342 910.095,230.122 910.663,231.522 911.232,234.626 911.8,233.416 912.368,236.371 912.937,235.941 913.505,234.654 914.073,234.367 914.642,233.124 915.21,233.151 915.779,235.113 916.347,233.677 916.915,233.618 917.484,233.529 918.052,233.26 918.62,236.316 919.189,234.694 919.757,232.38 920.325,232.233 920.894,232.389 921.462,231.279 922.03,233.107 922.599,232.861 923.167,233.687 923.735,231.389 924.304,230.081 924.872,230.26 925.44,233.161 926.009,236.053 926.577,236.691 927.145,238.256 927.714,235.752 928.282,234.268 928.85,233.007 929.419,233.931 929.987,232.524 930.556,231.346 931.124,230.333 931.692,229.313 932.261,230.36 932.829,229.307 933.397,230.602 933.966,230.658 934.534,232.66 935.102,231.438 935.671,229.222 936.239,230.43 936.807,228.384 937.376,228.49 937.944,227.589 938.512,225.845 939.081,226.003 939.649,228.393 940.217,228.42 940.786,228.577 941.354,229.788 941.922,229.741 942.491,227.82 943.059,227.181 943.627,227.545 944.196,228.821 944.764,231.106 945.333,231.146 945.901,232.158 946.469,232.285 947.038,232.429 947.606,232.286 948.174,233.266 948.743,233.132 949.311,230.981 949.879,231.937 950.448,231.568 951.016,230.497 951.584,229.418 952.153,230.383 952.721,229.39 953.289,226.343 953.858,226.511 954.426,225.741 954.994,227.447 955.563,228.582 956.131,229.773 956.699,228.801 957.268,231.053 957.836,231.078 958.405,230.867 958.973,230.851 959.541,230.891 960.11,229.554 960.678,227.698 961.246,228.081 961.815,229.316 962.383,229.607 962.951,229.607 963.52,229.778 964.088,230.872 964.656,229.809 965.225,232.89 965.793,232.808 966.361,234.759 966.93,234.393 967.498,234.12 968.066,233.941 968.635,232.978 969.203,231.742 969.771,228.392 970.34,229.592 970.908,228.363 971.476,229.591 972.045,228.608 972.613,230.715 973.182,230.627 973.75,232.52 974.318,233.324 974.887,233.188 975.455,230.955 976.023,234.087 976.592,233.79 977.16,233.605 977.728,233.499 978.297,233.195 978.865,231.988 979.433,233.069 980.002,234.113 980.57,233.847 981.138,235.912 981.707,234.467 982.275,234.158 982.843,233.929 983.412,235.084 983.98,233.701 984.548,232.53 985.117,233.318 985.685,232.241 986.253,233.028 986.822,233.875 987.39,233.599 987.959,229.267 988.527,227.329 989.095,227.45 989.664,230.036 990.232,231.185 990.8,230.175 991.369,232.134 991.937,229.935 992.505,229.845 993.074,227.983 993.642,231.361 994.21,229.393 994.779,229.414 995.347,230.449 995.915,229.487 996.484,229.744 997.052,228.815 997.62,229.233 998.189,229.42 998.757,228.524 999.325,227.785 999.894,228.046 1000.46,228.36 1001.03,228.521 1001.6,227.851 1002.17,226.114 1002.74,224.355 1003.3,225.009 1003.87,223.286 1004.44,223.083 1005.01,220.584 1005.58,220.437 1006.15,220.186 1006.71,222.018 1007.28,222.645 1007.85,222.21 1008.42,219.895 1008.99,221.851 1009.56,221.628 1010.12,221.582 1010.69,223.505 1011.26,225.23 1011.83,223.954 1012.4,224.775 1012.97,224.15 1013.53,224.899 1014.1,227.739 1014.67,229.265 1015.24,233.671 1015.81,234.732 1016.38,234.6 1016.94,235.531 1017.51,232.346 1018.08,232.592 1018.65,228.514 1019.22,228.678 1019.79,229.986 1020.35,230.071 1020.92,229.174 1021.49,229.42 1022.06,232.727 1022.63,232.967 1023.2,233.111 1023.76,234.243 1024.33,234.339 1024.9,233.31 1025.47,233.438 1026.04,234.533 1026.61,235.318 1027.17,234.143 1027.74,236.27 1028.31,235.937 1028.88,234.72 1029.45,232.761 1030.02,235.693 1030.58,238.43 1031.15,237.191 1031.72,236.99 1032.29,236.567 1032.86,236.406 1033.43,235.952 1033.99,236.678 1034.56,240.493 1035.13,239.861 1035.7,242.443 1036.27,245.699 1036.84,244.707 1037.4,242.549 1037.97,242.667 1038.54,241.789 1039.11,241.19 1039.68,236.721 1040.25,237.236 1040.81,236.621 1041.38,237.009 1041.95,235.401 1042.52,236.037 1043.09,235.622 1043.66,235.433 1044.22,233.885 1044.79,232.44 1045.36,232.303 1045.93,233.227 1046.5,235.087 1047.07,236.927 1047.63,238.431 1048.2,236.61 1048.77,236.099 1049.34,234.479 1049.91,229.976 1050.48,228.987 1051.05,228.063 1051.61,228.964 1052.18,228.029 1052.75,227.007 1053.32,229.4 1053.89,229.344 1054.46,228.392 1055.02,229.42 1055.59,230.483 1056.16,232.329 1056.73,231.024 1057.3,232.034 1057.87,233.007 1058.43,235.93 1059,235.55 1059.57,236.146 1060.14,235.371 1060.71,236.044 1061.28,235.357 1061.84,234.962 1062.41,233.651 1062.98,234.234 1063.55,232.782 1064.12,231.523 1064.69,231.319 1065.25,231.254 1065.82,230.436 1066.39,230.315 1066.96,230.394 1067.53,230.48 1068.1,230.156 1068.66,227.981 1069.23,225.911 1069.8,224.997 1070.37,226.66 1070.94,227.833 1071.51,227.883 1072.07,228.06 1072.64,229.071 1073.21,227.988 1073.78,226.218 1074.35,226.313 1074.92,228.547 1075.48,227.511 1076.05,226.419 1076.62,226.726 1077.19,225.912 1077.76,224.545 1078.33,223.811 1078.89,224.034 1079.46,225.584 1080.03,227.008 1080.6,227.453 1081.17,225.579 1081.74,227.987 1082.3,227.288 1082.87,229.647 1083.44,229.506 1084.01,229.764 1084.58,230.905 1085.15,230.844 1085.71,234.041 1086.28,232.756 1086.85,232.508 1087.42,232.129 1087.99,230.268 1088.56,230.287 1089.12,227.112 1089.69,225.108 1090.26,225.492 1090.83,226.026 1091.4,225.725 1091.97,225.386 1092.53,223.818 1093.1,225.576 1093.67,228.294 1094.24,228.642 1094.81,227.805 1095.38,233.315 1095.94,237.41 1096.51,235.905 1097.08,235.662 1097.65,236.151 1098.22,235.78 1098.79,235.612 1099.35,235.186 1099.92,235.005 1100.49,233.699 1101.06,233.646 1101.63,233.787 1102.2,231.551 1102.76,229.579 1103.33,231.873 1103.9,232.965 1104.47,234.91 1105.04,234.84 1105.61,234.566 1106.17,235.311 1106.74,235.161 1107.31,233.897 1107.88,232.545 1108.45,232.423 1109.02,232.377 1109.58,229.279 1110.15,228.537 1110.72,226.642 1111.29,225.91 1111.86,227.396 1112.43,224.636 1112.99,226.034 1113.56,223.345 1114.13,222.71 1114.7,223.311 1115.27,225.16 1115.84,228.548 1116.4,228.588 1116.97,227.765 1117.54,227.166 1118.11,229.616 1118.68,225.483 1119.25,228.544 1119.81,229.695 1120.38,227.822 1120.95,227.047 1121.52,227.39 1122.09,226.795 1122.66,229.025 1123.23,228.24 1123.79,227.961 1124.36,231.382 1124.93,234.363 1125.5,234.226 1126.07,232.865 1126.64,233.903 1127.2,231.611 1127.77,231.657 1128.34,230.711 1128.91,232.976 1129.48,232.051 1130.05,235.08 1130.61,236.897 1131.18,236.566 1131.75,235.3 1132.32,236.133 1132.89,233.909 1133.46,233.83 1134.02,233.616 1134.59,234.388 1135.16,233.269 1135.73,232.976 1136.3,231.803 1136.87,232.988 1137.43,232.652 1138,234.62 1138.57,234.45 1139.14,233.411 1139.71,233.308 1140.28,232.326 1140.84,231.46 1141.41,229.19 1141.98,229.289 1142.55,229.54 1143.12,228.552 1143.69,228.761 1144.25,228.828 1144.82,229.06 1145.39,229.119 1145.96,229.268 1146.53,228.405 1147.1,230.892 1147.66,229.017 1148.23,228.151 1148.8,227.556 1149.37,225.93 1149.94,225.576 1150.51,224.998 1151.07,226.36 1151.64,227.932 1152.21,229.209 1152.78,229.392 1153.35,229.566 1153.92,229.655 1154.48,228.251 1155.05,228.559 1155.62,227.667 1156.19,230.824 1156.76,234.053 1157.33,232.069 1157.89,232.212 1158.46,232.198 1159.03,233.162 1159.6,234.105 1160.17,235.152 1160.74,233.858 1161.3,234.659 1161.87,237.604 1162.44,235.013 1163.01,232.643 1163.58,233.593 1164.15,232.509 1164.71,233.661 1165.28,233.696 1165.85,235.608 1166.42,235.359 1166.99,236.368 1167.56,235.187 1168.12,233.851 1168.69,232.4 1169.26,236.468 1169.83,236.991 1170.4,238.583 1170.97,239.177 1171.53,239.498 1172.1,238.842 1172.67,237.122 1173.24,235.87 1173.81,237.448 1174.38,237.091 1174.94,236.416 1175.51,230.834 1176.08,229.614 1176.65,228.957 1177.22,228.064 1177.79,229.076 1178.35,228.073 1178.92,227.115 1179.49,230.432 1180.06,231.528 1180.63,231.414 1181.2,230.32 1181.76,232.598 1182.33,232.325 1182.9,233.158 1183.47,230.742 1184.04,231.655 1184.61,234.598 1185.17,235.064 1185.74,234.593 1186.31,234.28 1186.88,234.136 1187.45,232.894 1188.02,231.418 1188.58,230.294 1189.15,232.243 1189.72,232.06 1190.29,232.835 1190.86,232.606 1191.43,233.398 1192,232.314 1192.56,229.985 1193.13,229.9 1193.7,230.016 1194.27,228.932 1194.84,229.007 1195.41,229.111 1195.97,230.367 1196.54,230.362 1197.11,232.362 1197.68,231.229 1198.25,230.089 1198.82,229.052 1199.38,228.052 1199.95,229.373 1200.52,228.365 1201.09,227.451 1201.66,229.817 1202.23,229.825 1202.79,229.759 1203.36,230.798 1203.93,230.59 1204.5,229.536 1205.07,230.554 1205.64,228.245 1206.2,230.408 1206.77,231.407 1207.34,230.273 1207.91,229.123 1208.48,228.145 1209.05,229.266 1209.61,226.356 1210.18,225.562 1210.75,226.902 1211.32,227.481 1211.89,226.615 1212.46,224.753 1213.02,227.314 1213.59,226.404 1214.16,226.677 1214.73,226.71 1215.3,228.165 1215.87,229.41 1216.43,229.39 1217,229.409 1217.57,231.585 1218.14,230.633 1218.71,230.416 1219.28,230.293 1219.84,229.418 1220.41,229.479 1220.98,229.752 1221.55,230.958 1222.12,231.202 1222.69,232.408 1223.25,234.583 1223.82,232.197 1224.39,237.206 1224.96,235.92 1225.53,234.619 1226.1,235.449 1226.66,235.304 1227.23,235.035 1227.8,234.728 1228.37,235.535 1228.94,237.333 1229.51,236.799 1230.07,237.373 1230.64,234.909 1231.21,234.644 1231.78,238.601 1232.35,236.98 1232.92,237.046 1233.48,236.784 1234.05,235.311 1234.62,234.89 1235.19,236.827 1235.76,236.491 1236.33,238.288 1236.89,235.558 1237.46,232.14 1238.03,232.888 1238.6,232.449 1239.17,233.031 1239.74,230.564 1240.3,230.261 1240.87,230.19 1241.44,229.08 1242.01,229.144 1242.58,231.487 1243.15,233.575 1243.71,235.505 1244.28,231.009 1244.85,230.945 1245.42,227.65 1245.99,226.719 1246.56,227.667 1247.12,227.572 1247.69,227.515 1248.26,227.739 1248.83,227.899 1249.4,227.249 1249.97,226.314 1250.53,225.579 1251.1,225.872 1251.67,226.186 1252.24,227.327 1252.81,229.807 1253.38,228.915 1253.94,228.011 1254.51,228.844 1255.08,227.874 1255.65,228.927 1256.22,229.086 1256.79,229.05 1257.35,229.266 1257.92,230.435 1258.49,230.193 1259.06,229.273 1259.63,230.599 1260.2,231.571 1260.76,232.498 1261.33,234.334 1261.9,233.102 1262.47,232.196 1263.04,231.087 1263.61,231.998 1264.18,231.854 1264.74,231.69 1265.31,232.731 1265.88,232.706 1266.45,232.619 1267.02,233.537 1267.59,234.243 1268.15,233.845 1268.72,233.407 1269.29,232.087 1269.86,230.927 1270.43,229.898 1271,231.801 1271.56,231.512 1272.13,230.375 1272.7,231.48 1273.27,231.409 1273.84,231.102 1274.41,231.053 1274.97,231.03 1275.54,231.775 1276.11,230.712 1276.68,229.739 1277.25,229.944 1277.82,229.972 1278.38,229.151 1278.95,229.185 1279.52,226.267 1280.09,227.477 1280.66,226.565 1281.23,226.925 1281.79,228.129 1282.36,229.311 1282.93,226.252 1283.5,228.503 1284.07,226.526 1284.64,228.133 1285.2,230.285 1285.77,230.559 1286.34,229.427 1286.91,229.617 1287.48,227.537 1288.05,228.766 1288.61,229.971 1289.18,229.936 1289.75,229.005 1290.32,229.157 1290.89,233.657 1291.46,234.203 1292.02,232.896 1292.59,231.887 1293.16,231.823 1293.73,230.885 1294.3,229.977 1294.87,229.109 1295.43,230.383 1296,231.727 1296.57,231.92 1297.14,231.008 1297.71,232.109 1298.28,233.102 1298.84,230.893 1299.41,229.699 1299.98,229.802 1300.55,232.026 1301.12,231.064 1301.69,229.935 1302.25,230.008 1302.82,230.229 1303.39,229.231 1303.96,230.562 1304.53,231.693 1305.1,231.508 1305.66,232.427 1306.23,232.488 1306.8,230.257 1307.37,231.226 1307.94,231.297 1308.51,231.023 1309.07,231.738 1309.64,229.528 1310.21,229.539 1310.78,228.661 1311.35,226.845 1311.92,227.309 1312.48,227.57 1313.05,228.627 1313.62,228.832 1314.19,230.807 1314.76,229.87 1315.33,228.956 1315.89,229.26 1316.46,231.339 1317.03,231.104 1317.6,231.027 1318.17,231.924 1318.74,232.622 1319.3,233.468 1319.87,235.221 1320.44,236.841 1321.01,235.262 1321.58,235.054 1322.15,234.78 1322.71,235.421 1323.28,233.968 1323.85,233.707 1324.42,233.572 1324.99,232.312 1325.56,232.027 1326.12,230.866 1326.69,233.047 1327.26,232.077 1327.83,232.899 1328.4,231.94 1328.97,231.832 1329.53,229.424 1330.1,230.573 1330.67,230.533 1331.24,230.491 1331.81,230.568 1332.38,231.957 1332.94,230.014 1333.51,231.037 1334.08,230.935 1334.65,233.177 1335.22,234.131 1335.79,234.907 1336.36,233.366 1336.92,233.136 1337.49,234.125 1338.06,234.721 1338.63,233.376 1339.2,230.126 1339.77,233.231 1340.33,232.948 1340.9,230.912 1341.47,231.812 1342.04,229.782 1342.61,230.658 1343.18,230.369 1343.74,230.261 1344.31,229.305 1344.88,228.301 1345.45,228.525 1346.02,228.58 1346.59,227.56 1347.15,225.873 1347.72,227.091 1348.29,227.465 1348.86,228.559 1349.43,227.649 1350,226.87 1350.56,227.051 1351.13,228.397 1351.7,228.747 1352.27,229.01 1352.84,228.133 1353.41,230.248 1353.97,230.205 1354.54,229.898 1355.11,227.983 1355.68,229.138 1356.25,229.242 1356.82,228.267 1357.38,227.6 1357.95,226.741 1358.52,225.938 1359.09,224.21 1359.66,225.766 1360.23,229.326 1360.79,231.67 1361.36,229.498 1361.93,226.645 1362.5,225.043 1363.07,224.176 1363.64,223.87 1364.2,222.535 1364.77,222.234 1365.34,224.154 1365.91,226.787 1366.48,227.068 1367.05,226.225 1367.61,227.383 1368.18,227.837 1368.75,227.049 1369.32,226.47 1369.89,226.11 1370.46,227.41 1371.02,226.981 1371.59,229.612 1372.16,229.767 1372.73,228.921 1373.3,231.147 1373.87,227.362 1374.43,228.942 1375,233.454 1375.57,232.609 1376.14,232.81 1376.71,232.933 1377.28,231.964 1377.84,233.937 1378.41,237.061 1378.98,236.639 1379.55,236.322 1380.12,236.092 1380.69,234.877 1381.25,234.868 1381.82,235.755 1382.39,233.461 1382.96,234.286 1383.53,233.986 1384.1,234.767 1384.66,233.609 1385.23,233.391 1385.8,231.375 1386.37,230.309 1386.94,232.482 1387.51,232.55 1388.07,232.584 1388.64,233.599 1389.21,234.696 1389.78,235.478 1390.35,238.344 1390.92,239.989 1391.48,240.227 1392.05,241.745 1392.62,240.909 1393.19,240.229 1393.76,237.465 1394.33,236.93 1394.89,234.439 1395.46,234.284 1396.03,236.068 1396.6,235.817 1397.17,232.166 1397.74,233.179 1398.3,233.805 1398.87,234.657 1399.44,235.409 1400.01,234.899 1400.58,234.435 1401.15,235.309 1401.71,235.032 1402.28,234.841 1402.85,235.56 1403.42,232.277 1403.99,231.113 1404.56,234.124 1405.13,233.037 1405.69,231.593 1406.26,229.409 1406.83,231.571 1407.4,230.09 1407.97,230.942 1408.54,232.749 1409.1,231.511 1409.67,231.592 1410.24,229.247 1410.81,230.018 1411.38,227.854 1411.95,229.91 1412.51,229.887 1413.08,231.009 1413.65,230.041 1414.22,228.974 1414.79,227.937 1415.36,228.038 1415.92,227.393 1416.49,227.556 1417.06,226.525 1417.63,227.703 1418.2,226.885 1418.77,228.026 1419.33,228.209 1419.9,226.519 1420.47,227.905 1421.04,226.929 1421.61,227.274 1422.18,227.736 1422.74,227.001 1423.31,224.907 1423.88,227.558 1424.45,227.754 1425.02,227.238 1425.59,227.623 1426.15,228.095 1426.72,230.373 1427.29,230.4 1427.86,230.524 1428.43,232.501 1429,233.363 1429.56,233.317 1430.13,234.254 1430.7,233.844 1431.27,233.784 1431.84,232.343 1432.41,233.421 1432.97,231.109 1433.54,227.061 1434.11,229.37 1434.68,228.386 1435.25,227.49 1435.82,229.75 1436.38,232.12 1436.95,234.301 1437.52,236.113 1438.09,234.725 1438.66,234.503 1439.23,235.333 1439.79,236.065 1440.36,235.901 1440.93,234.571 1441.5,234.162 1442.07,233.712 1442.64,232.366 1443.2,232.969 1443.77,232.767 1444.34,233.658 1444.91,234.446 1445.48,235.004 1446.05,234.506 1446.61,233.142 1447.18,231.892 1447.75,231.877 1448.32,230.971 1448.89,230.75 1449.46,233.705 1450.02,233.619 1450.59,233.246 1451.16,232.029 1451.73,231.944 1452.3,233.665 1452.87,234.488 1453.43,234.048 1454,232.702 1454.57,231.62 1455.14,231.392 1455.71,231.342 1456.28,229.991 1456.84,228.71 1457.41,228.857 1457.98,226.808 1458.55,228.226 1459.12,230.406 1459.69,227.408 1460.25,228.824 1460.82,229.103 1461.39,228.063 1461.96,228.342 1462.53,227.635 1463.1,228.787 1463.66,228.967 1464.23,228.988 1464.8,230.351 1465.37,232.226 1465.94,233.19 1466.51,233.647 1467.07,233.224 1467.64,232.84 1468.21,230.471 1468.78,230.477 1469.35,230.306 1469.92,230.171 1470.48,230.072 1471.05,228.98 1471.62,228.932 1472.19,229.138 1472.76,228.121 1473.33,229.35 1473.89,228.637 1474.46,226.677 1475.03,227.163 1475.6,227.316 1476.17,227.71 1476.74,228.845 1477.31,228.994 1477.87,229.324 1478.44,229.505 1479.01,228.446 1479.58,228.473 1480.15,226.556 1480.72,227.085 1481.28,227.468 1481.85,226.713 1482.42,226.934 1482.99,228.058 1483.56,228.106 1484.13,230.444 1484.69,231.814 1485.26,233.715 1485.83,233.569 1486.4,232.36 1486.97,231.328 1487.54,233.439 1488.1,232.357 1488.67,229.225 1489.24,230.372 1489.81,228.423 1490.38,229.579 1490.95,228.824 1491.51,229.125 1492.08,230.389 1492.65,229.526 1493.22,228.481 1493.79,229.775 1494.36,229.87 1494.92,227.781 1495.49,228.913 1496.06,231.312 1496.63,231.58 1497.2,232.495 1497.77,230.403 1498.33,232.472 1498.9,232.544 1499.47,231.337 1500.04,233.552 1500.61,229.512 1501.18,229.719 1501.74,229.613 1502.31,228.706 1502.88,227.747 1503.45,227.75 1504.02,226.924 1504.59,226.345 1505.15,229.022 1505.72,227.388 1506.29,228.565 1506.86,228 1507.43,227.272 1508,225.491 1508.56,224.896 1509.13,225.445 1509.7,228.094 1510.27,228.312 1510.84,228.598 1511.41,229.882 1511.97,231.176 1512.54,231.15 1513.11,230.147 1513.68,229.019 1514.25,230.081 1514.82,229.265 1515.38,229.346 1515.95,228.532 1516.52,228.803 1517.09,227.356 1517.66,229.849 1518.23,230.171 1518.79,229.283 1519.36,231.375 1519.93,233.55 1520.5,233.541 1521.07,233.38 1521.64,232.294 1522.2,232.348 1522.77,233.287 1523.34,236.423 1523.91,237.166 1524.48,235.705 1525.05,234.532 1525.61,234.246 1526.18,234.114 1526.75,234.093 1527.32,231.748 1527.89,231.844 1528.46,231.903 1529.02,232.075 1529.59,232.838 1530.16,232.943 1530.73,229.768 1531.3,226.766 1531.87,228.119 1532.43,230.491 1533,231.919 1533.57,231.998 1534.14,231.859 1534.71,230.985 1535.28,231.882 1535.84,232.014 1536.41,230.945 1536.98,228.766 1537.55,229.809 1538.12,231.001 1538.69,231.79 1539.25,232.671 1539.82,233.787 1540.39,234.532 1540.96,234.184 1541.53,234.984 1542.1,234.891 1542.66,233.728 1543.23,234.581 1543.8,235.237 1544.37,234.85 1544.94,234.598 1545.51,233.331 1546.08,233.062 1546.64,233.984 1547.21,233.636 1547.78,231.224 1548.35,233.157 1548.92,233.146 1549.49,232.911 1550.05,233.937 1550.62,232.549 1551.19,232.527 1551.76,232.271 1552.33,232.302 1552.9,231.177 1553.46,230.008 1554.03,232.124 1554.6,232.106 1555.17,231.792 1555.74,230.902 1556.31,230.958 1556.87,230.871 1557.44,228.755 1558.01,230.043 1558.58,232.271 1559.15,234.349 1559.72,234.079 1560.28,231.726 1560.85,232.724 1561.42,233.743 1561.99,233.416 1562.56,232.189 1563.13,230.124 1563.69,229.055 1564.26,229.3 1564.83,230.403 1565.4,228.333 1565.97,229.388 1566.54,227.56 1567.1,228.873 1567.67,227.87 1568.24,228.104 1568.81,229.387 1569.38,231.625 1569.95,233.493 1570.51,233.306 1571.08,234.094 1571.65,233.818 1572.22,233.615 1572.79,233.346 1573.36,234.221 1573.92,233.96 1574.49,234.88 1575.06,233.771 1575.63,232.478 1576.2,232.245 1576.77,231.996 1577.33,231.922 1577.9,232.851 1578.47,232.722 1579.04,229.593 1579.61,231.618 1580.18,235.871 1580.74,234.32 1581.31,232.782 1581.88,231.61 1582.45,232.487 1583.02,233.392 1583.59,231.187 1584.15,232.318 1584.72,232.136 1585.29,232.123 1585.86,232.001 1586.43,233.157 1587,232.868 1587.56,231.849 1588.13,230.702 1588.7,230.778 1589.27,228.678 1589.84,227.791 1590.41,228.088 1590.97,227.31 1591.54,227.657 1592.11,227.914 1592.68,226.339 1593.25,230.673 1593.82,229.659 1594.38,229.791 1594.95,230.898 1595.52,231.894 1596.09,231.634 1596.66,229.685 1597.23,229.538 1597.79,229.411 1598.36,230.557 1598.93,231.517 1599.5,230.474 1600.07,229.432 1600.64,231.467 1601.2,231.592 1601.77,232.542 1602.34,230.06 1602.91,230.94 1603.48,231.023 1604.05,230.109 1604.61,230.084 1605.18,231.163 1605.75,232.048 1606.32,228.813 1606.89,229.882 1607.46,230.056 1608.02,231.235 1608.59,231.091 1609.16,229.027 1609.73,229.004 1610.3,228.927 1610.87,226.064 1611.43,224.396 1612,225.852 1612.57,227.124 1613.14,226.353 1613.71,225.606 1614.28,227.003 1614.84,227.193 1615.41,226.242 1615.98,226.771 1616.55,225.975 1617.12,227.439 1617.69,228.998 1618.26,228.197 1618.82,230.478 1619.39,231.617 1619.96,235.579 1620.53,234.291 1621.1,233.104 1621.67,232.931 1622.23,232.6 1622.8,232.437 1623.37,231.404 1623.94,230.208 1624.51,229.334 1625.08,230.904 1625.64,230.759 1626.21,231.866 1626.78,230.925 1627.35,230.912 1627.92,233.384 1628.49,233.246 1629.05,234.2 1629.62,234.064 1630.19,232.923 1630.76,232.787 1631.33,232.731 1631.9,233.471 1632.46,232.22 1633.03,231.991 1633.6,231.847 1634.17,233.701 1634.74,233.413 1635.31,234.269 1635.87,232.918 1636.44,231.663 1637.01,233.64 1637.58,233.474 1638.15,230.315 1638.72,229.093 1639.28,229.245 1639.85,229.483 1640.42,228.503 1640.99,228.8 1641.56,227.964 1642.13,228.002 1642.69,229.106 1643.26,228.244 1643.83,229.573 1644.4,231.763 1644.97,233.799 1645.54,232.317 1646.1,232.466 1646.67,232.123 1647.24,230.908 1647.81,230.893 1648.38,230.998 1648.95,232.175 1649.51,230.079 1650.08,230.189 1650.65,227.305 1651.22,226.487 1651.79,227.994 1652.36,230.291 1652.92,229.338 1653.49,230.659 1654.06,230.501 1654.63,228.505 1655.2,227.482 1655.77,228.792 1656.33,228.851 1656.9,225.993 1657.47,225.485 1658.04,221.073 1658.61,220.855 1659.18,222.669 1659.74,223.404 1660.31,223.94 1660.88,225.521 1661.45,225.029 1662.02,226.786 1662.59,228.396 1663.15,230.704 1663.72,231.769 1664.29,232.909 1664.86,230.792 1665.43,232.026 1666,230.967 1666.56,231.824 1667.13,232.064 1667.7,233.31 1668.27,233.413 1668.84,233.34 1669.41,232.512 1669.97,232.606 1670.54,232.619 1671.11,233.372 1671.68,232.2 1672.25,232.305 1672.82,233.342 1673.38,234.134 1673.95,234.109 1674.52,232.874 1675.09,233.96 1675.66,232.866 1676.23,232.834 1676.79,232.787 1677.36,232.562 1677.93,230.383 1678.5,230.678 1679.07,231.904 1679.64,232.01 1680.2,233.046 1680.77,232.955 1681.34,234.923 1681.91,234.562 1682.48,236.622 1683.05,237.293 1683.61,237.005 1684.18,237.551 1684.75,237.105 1685.32,238.895 1685.89,237.185 1686.46,237.702 1687.02,237.404 1687.59,235.968 1688.16,235.802 1688.73,233.517 1689.3,232.328 1689.87,233.139 1690.44,234.993 1691,233.458 1691.57,233.215 1692.14,231.216 1692.71,231.24 1693.28,230.328 1693.85,230.369 1694.41,231.24 1694.98,229.241 1695.55,227.151 1696.12,224.255 1696.69,223.595 1697.26,223.997 1697.82,225.429 1698.39,225.647 1698.96,227.086 1699.53,227.502 1700.1,228.684 1700.67,226.676 1701.23,229.942 1701.8,229.907 1702.37,231.002 1702.94,231.963 1703.51,232.021 1704.08,232.002 1704.64,231.803 1705.21,231.662 1705.78,235.632 1706.35,236.641 1706.92,235.116 1707.49,234.763 1708.05,234.339 1708.62,233.117 1709.19,232.868 1709.76,233.639 1710.33,232.553 1710.9,234.419 1711.46,234.186 1712.03,234.055 1712.6,233.935 1713.17,231.512 1713.74,231.255 1714.31,231.378 1714.87,231.319 1715.44,230.041 1716.01,233.196 1716.58,229.967 1717.15,230.032 1717.72,232.093 1718.28,231.972 1718.85,234.076 1719.42,234.798 1719.99,233.413 1720.56,233 1721.13,233.811 1721.69,230.673 1722.26,231.624 1722.83,230.535 1723.4,228.495 1723.97,228.638 1724.54,229.681 1725.1,230.802 1725.67,229.508 1726.24,228.805 1726.81,230.923 1727.38,229.594 1727.95,231.676 1728.51,231.712 1729.08,231.722 1729.65,232.521 1730.22,233.349 1730.79,234.95 1731.36,235.654 1731.92,233.177 1732.49,233.986 1733.06,233.824 1733.63,234.449 1734.2,233.179 1734.77,233.04 1735.33,230.721 1735.9,230.683 1736.47,230.594 1737.04,230.56 1737.61,230.453 1738.18,228.289 1738.74,225.442 1739.31,223.63 1739.88,223.958 1740.45,224.328 1741.02,224.614 1741.59,226.149 1742.15,226.54 1742.72,225.663 1743.29,223.133 1743.86,225.666 1744.43,225.941 1745,228.32 1745.56,228.764 1746.13,231.026 1746.7,230.859 1747.27,227.42 1747.84,228.617 1748.41,230.846 1748.97,232.979 1749.54,229.808 1750.11,230.006 1750.68,229.07 1751.25,228.24 1751.82,227.444 1752.38,227.808 1752.95,228.138 1753.52,228.501 1754.09,226.653 1754.66,227.078 1755.23,228.355 1755.79,224.271 1756.36,223.902 1756.93,225.408 1757.5,226.904 1758.07,228.167 1758.64,229.429 1759.21,230.613 1759.77,230.69 1760.34,231.856 1760.91,232.985 1761.48,234.062 1762.05,235.857 1762.62,237.403 1763.18,238.066 1763.75,236.591 1764.32,236.528 1764.89,236.476 1765.46,237.211 1766.03,237.838 1766.59,236.33 1767.16,237.116 1767.73,232.743 1768.3,233.566 1768.87,233.33 1769.44,232.966 1770,231.632 1770.57,231.576 1771.14,231.603 1771.71,229.662 1772.28,228.625 1772.85,231.976 1773.41,231.922 1773.98,234.071 1774.55,233.645 1775.12,230.337 1775.69,230.395 1776.26,229.368 1776.82,231.529 1777.39,231.48 1777.96,232.485 1778.53,232.403 1779.1,231.211 1779.67,232.228 1780.23,233.243 1780.8,234.069 1781.37,234.677 1781.94,235.293 1782.51,232.87 1783.08,229.803 1783.64,232.015 1784.21,231.913 1784.78,231.774 1785.35,228.695 1785.92,229.864 1786.49,230.966 1787.05,229.951 1787.62,229.889 1788.19,231.067 1788.76,229.894 1789.33,229.816 1789.9,229.733 1790.46,229.597 1791.03,228.713 1791.6,229.978 1792.17,230.227 1792.74,231.275 1793.31,232.289 1793.87,231.259 1794.44,232.333 1795.01,232.116 1795.58,232.074 1796.15,233.068 1796.72,234.006 1797.28,234.544 1797.85,236.433 1798.42,235.808 1798.99,236.447 1799.56,236.046 1800.13,237.685 1800.69,237.136 1801.26,236.558 1801.83,233.806 1802.4,233.497 1802.97,232.159 1803.54,232.779 1804.1,230.434 1804.67,230.34 1805.24,230.225 1805.81,230.324 1806.38,231.172 1806.95,231.96 1807.51,231.693 1808.08,231.294 1808.65,231.176 1809.22,231.171 1809.79,233.92 1810.36,233.42 1810.92,233.978 1811.49,233.025 1812.06,233.871 1812.63,233.481 1813.2,234.391 1813.77,235.748 1814.33,235.411 1814.9,234.864 1815.47,234.365 1816.04,232.861 1816.61,232.56 1817.18,233.201 1817.74,232.861 1818.31,232.461 1818.88,233.324 1819.45,233.027 1820.02,231.54 1820.59,231.211 1821.15,232.101 1821.72,230.761 1822.29,229.503 1822.86,230.321 1823.43,232.111 1824,231.011 1824.56,230.991 1825.13,229.661 1825.7,229.588 1826.27,231.741 1826.84,232.457 1827.41,231.012 1827.97,230.833 1828.54,228.437 1829.11,227.507 1829.68,226.534 1830.25,225.624 1830.82,225.82 1831.39,227.089 1831.95,226.423 1832.52,226.676 1833.09,226.796 1833.66,227.043 1834.23,228.088 1834.8,227.182 1835.36,226.439 1835.93,226.735 1836.5,225.014 1837.07,224.529 1837.64,224.881 1838.21,225.126 1838.77,226.395 1839.34,226.758 1839.91,225.905 1840.48,226.326 1841.05,225.749 1841.62,225.903 1842.18,225.447 1842.75,226.781 1843.32,227.107 1843.89,228.396 1844.46,228.685 1845.03,228.15 1845.59,227.374 1846.16,227.658 1846.73,226.908 1847.3,228.231 1847.87,226.395 1848.44,226.804 1849,226.225 1849.57,225.737 1850.14,226.14 1850.71,225.62 1851.28,226.204 1851.85,227.6 1852.41,229.919 1852.98,232.276 1853.55,230.955 1854.12,232.398 1854.69,231.48 1855.26,231.561 1855.82,230.63 1856.39,231.579 1856.96,233.742 1857.53,233.657 1858.1,233.725 1858.67,234.601 1859.23,234.481 1859.8,233.235 1860.37,230.265 1860.94,229.593 1861.51,230.683 1862.08,229.629 1862.64,231.813 1863.21,230.679 1863.78,231.35 1864.35,231.254 1864.92,231.226 1865.49,231.202 1866.05,230.155 1866.62,227.316 1867.19,227.553 1867.76,227.895 1868.33,230.216 1868.9,230.448 1869.46,231.483 1870.03,230.307 1870.6,232.768 1871.17,231.402 1871.74,233.516 1872.31,232.478 1872.87,236.298 1873.44,235.929 1874.01,234.468 1874.58,234.294 1875.15,232.966 1875.72,233.897 1876.28,232.844 1876.85,232.681 1877.42,233.477 1877.99,230.37 1878.56,231.363 1879.13,231.273 1879.69,230.301 1880.26,232.441 1880.83,230.366 1881.4,231.346 1881.97,231.159 1882.54,231.093 1883.1,231.085 1883.67,233.21 1884.24,233.045 1884.81,231.972 1885.38,230.965 1885.95,230.242 1886.51,228.225 1887.08,228.518 1887.65,228.57 1888.22,231.734 1888.79,230.907 1889.36,228.956 1889.92,230.489 1890.49,230.414 1891.06,234.565 1891.63,234.402 1892.2,234.107 1892.77,232.869 1893.33,232.811 1893.9,234.673 1894.47,234.41 1895.04,231.283 1895.61,233.325 1896.18,230.043 1896.74,229.129 1897.31,227.471 1897.88,225.665 1898.45,226.153 1899.02,226.517 1899.59,225.758 1900.16,229.208 1900.72,228.459 1901.29,226.773 1901.86,226.092 1902.43,226.584 1903,226.898 1903.57,227.034 1904.13,227.077 1904.7,226.336 1905.27,226.744 1905.84,226.097 1906.41,228.787 1906.98,227.749 1907.54,228.004 1908.11,228.245 1908.68,229.443 1909.25,229.639 1909.82,229.718 1910.39,228.582 1910.95,227.073 1911.52,226.536 1912.09,228.075 1912.66,229.567 1913.23,231.806 1913.8,231.634 1914.36,230.699 1914.93,231.729 1915.5,233.608 1916.07,232.525 1916.64,234.427 1917.21,231.244 1917.77,229.029 1918.34,228.042 1918.91,227.218 1919.48,226.697 1920.05,229.06 1920.62,228.262 1921.18,230.811 1921.75,228.766 1922.32,229.27 1922.89,229.452 1923.46,229.849 1924.03,229.998 1924.59,229.472 1925.16,230.712 1925.73,234.079 1926.3,233.963 1926.87,232.843 1927.44,232.759 1928,233.689 1928.57,235.731 1929.14,235.634 1929.71,234.467 1930.28,237.582 1930.85,238.346 1931.41,238.03 1931.98,237.423 1932.55,236.85 1933.12,236.586 1933.69,236.211 1934.26,235.737 1934.82,234.413 1935.39,234.073 1935.96,233.933 1936.53,235.911 1937.1,235.474 1937.67,235.16 1938.23,235.951 1938.8,234.515 1939.37,233.481 1939.94,232.379 1940.51,234.392 1941.08,234.134 1941.64,234.08 1942.21,233.84 1942.78,234.806 1943.35,231.575 1943.92,229.376 1944.49,229.204 1945.05,229.218 1945.62,228.359 1946.19,228.57 1946.76,229.979 1947.33,231.066 1947.9,230.877 1948.46,231.996 1949.03,231.805 1949.6,229.493 1950.17,230.494 1950.74,233.59 1951.31,233.268 1951.87,233.987 1952.44,233.834 1953.01,233.685 1953.58,235.57 1954.15,236.081 1954.72,234.444 1955.28,233.056 1955.85,233.072 1956.42,232.779 1956.99,233.712 1957.56,234.58 1958.13,233.147 1958.69,234.041 1959.26,233.853 1959.83,233.578 1960.4,233.525 1960.97,232.01 1961.54,233.861 1962.1,232.358 1962.67,230.921 1963.24,229.618 1963.81,228.683 1964.38,232.187 1964.95,231.806 1965.51,230.591 1966.08,230.578 1966.65,230.524 1967.22,229.478 1967.79,230.525 1968.36,230.657 1968.92,231.601 1969.49,234.642 1970.06,234.235 1970.63,235.798 1971.2,235.436 1971.77,234.901 1972.34,234.469 1972.9,233.138 1973.47,234.005 1974.04,234.546 1974.61,232.087 1975.18,231.026 1975.75,231.089 1976.31,230.953 1976.88,229.537 1977.45,229.585 1978.02,229.485 1978.59,229.705 1979.16,230.705 1979.72,232.873 1980.29,231.847 1980.86,230.538 1981.43,228.481 1982,229.458 1982.57,227.277 1983.13,225.203 1983.7,224.708 1984.27,225.149 1984.84,225.356 1985.41,226.846 1985.98,226.873 1986.54,228.069 1987.11,228.4 1987.68,228.845 1988.25,230.03 1988.82,229.969 1989.39,229.95 1989.95,229.984 1990.52,228.712 1991.09,228.839 1991.66,227.936 1992.23,228.161 1992.8,227.226 1993.36,226.39 1993.93,225.584 1994.5,228.044 1995.07,229.4 1995.64,228.581 1996.21,230.16 1996.77,230.386 1997.34,229.309 1997.91,227.568 1998.48,225.551 1999.05,226.977 1999.62,228.359 2000.18,229.561 2000.75,227.647 2001.32,227.84 2001.89,229.052 2002.46,229.324 2003.03,230.758 2003.59,231.009 2004.16,232.088 2004.73,235.268 2005.3,233.838 2005.87,233.631 2006.44,233.674 2007,233.516 2007.57,234.458 2008.14,234.065 2008.71,234.824 2009.28,234.53 2009.85,232.145 2010.41,232.13 2010.98,231.151 2011.55,232.904 2012.12,231.838 2012.69,230.633 2013.26,230.567 2013.82,228.474 2014.39,228.774 2014.96,227.052 2015.53,226.186 2016.1,226.616 2016.67,225.738 2017.23,228.176 2017.8,227.218 2018.37,227.078 2018.94,229.209 2019.51,230.07 2020.08,227.987 2020.64,228.312 2021.21,226.486 2021.78,225.776 2022.35,225.118 2022.92,225.694 2023.49,225.105 2024.05,225.618 2024.62,228.22 2025.19,229.501 2025.76,229.801 2026.33,232.869 2026.9,234.962 2027.46,234.772 2028.03,234.602 2028.6,233.567 2029.17,232.523 2029.74,232.41 2030.31,231.463 2030.87,230.492 2031.44,229.777 2032.01,230.938 2032.58,229.147 2033.15,229.565 2033.72,230.7 2034.28,228.594 2034.85,229.899 2035.42,231.014 2035.99,231.187 2036.56,231.206 2037.13,229.162 2037.69,227.107 2038.26,228.304 2038.83,228.687 2039.4,227.793 2039.97,230.074 2040.54,231.173 2041.11,231.228 2041.67,233.436 2042.24,235.232 2042.81,234.972 2043.38,234.849 2043.95,235.7 2044.52,234.42 2045.08,233.246 2045.65,233.097 2046.22,233.989 2046.79,232.632 2047.36,232.39 2047.93,232.352 2048.49,233.551 2049.06,231.288 2049.63,231.332 2050.2,231.298 2050.77,232.3 2051.34,232.105 2051.9,231.994 2052.47,230.122 2053.04,229.583 2053.61,229.671 2054.18,229.854 2054.75,228.902 2055.31,228.238 2055.88,229.359 2056.45,227.485 2057.02,229.931 2057.59,230.968 2058.16,232.984 2058.72,232.989 2059.29,233.955 2059.86,234.835 2060.43,236.653 2061,237.299 2061.57,237.012 2062.13,237.586 2062.7,236.181 2063.27,235.716 2063.84,232.35 2064.41,232.233 2064.98,232.397 2065.54,234.339 2066.11,235.168 2066.68,232.71 2067.25,234.538 2067.82,233.977 2068.39,233.776 2068.95,235.484 2069.52,234.947 2070.09,237.704 2070.66,237.084 2071.23,236.598 2071.8,236.181 2072.36,233.602 2072.93,233.272 2073.5,233.881 2074.07,231.607 2074.64,229.441 2075.21,230.436 2075.77,230.352 2076.34,228.121 2076.91,226.146 2077.48,226.452 2078.05,226.889 2078.62,229.225 2079.18,227.145 2079.75,227.649 2080.32,230.945 2080.89,230.932 2081.46,229.025 2082.03,230.048 2082.59,228.865 2083.16,231.031 2083.73,230.993 2084.3,231.036 2084.87,231.974 2085.44,230.825 2086,231.821 2086.57,233.739 2087.14,234.539 2087.71,231.03 2088.28,230.863 2088.85,230.732 2089.41,231.032 2089.98,231.015 2090.55,230.848 2091.12,230.931 2091.69,229.908 2092.26,229.849 2092.82,231.731 2093.39,230.738 2093.96,229.904 2094.53,230.089 2095.1,229.148 2095.67,230.175 2096.23,233.338 2096.8,232.112 2097.37,231.156 2097.94,230.989 2098.51,230.991 2099.08,230.046 2099.64,229.038 2100.21,229.122 2100.78,229.294 2101.35,229.527 2101.92,229.457 2102.49,229.355 2103.05,228.589 2103.62,227.622 2104.19,229.01 2104.76,228.263 2105.33,228.365 2105.9,228.461 2106.46,228.551 2107.03,229.914 2107.6,231.281 2108.17,231.297 2108.74,227.472 2109.31,224.537 2109.87,226.228 2110.44,228.658 2111.01,227.949 2111.58,228.196 2112.15,230.58 2112.72,231.62 2113.29,230.8 2113.85,230.929 2114.42,232.19 2114.99,232.156 2115.56,233.149 2116.13,231.926 2116.7,233.029 2117.26,231.975 2117.83,234.09 2118.4,234.04 2118.97,233.013 2119.54,231.948 2120.11,231.986 2120.67,231.01 2121.24,231.956 2121.81,231.852 2122.38,232.695 2122.95,233.459 2123.52,231.178 2124.08,232.113 2124.65,232.113 2125.22,231.881 2125.79,232.012 2126.36,233.003 2126.93,232.95 2127.49,233.934 2128.06,233.736 2128.63,233.406 2129.2,231.85 2129.77,231.793 2130.34,232.767 2130.9,235.706 2131.47,234.436 2132.04,234.28 2132.61,233.106 2133.18,231.751 2133.75,228.836 2134.31,228.908 2134.88,227.878 2135.45,226.317 2136.02,225.703 2136.59,225.933 2137.16,226.145 2137.72,227.427 2138.29,225.664 2138.86,228.956 2139.43,229.073 2140,228.005 2140.57,227.145 2141.13,226.436 2141.7,226.795 2142.27,229.15 2142.84,229.403 2143.41,230.429 2143.98,231.641 2144.54,231.699 2145.11,231.76 2145.68,231.762 2146.25,232.75 2146.82,231.843 2147.39,230.999 2147.95,231.987 2148.52,229.782 2149.09,227.766 2149.66,227.214 2150.23,229.445 2150.8,233.728 2151.36,232.554 2151.93,233.372 2152.5,231.106 2153.07,229.99 2153.64,231.081 2154.21,229.915 2154.77,228.056 2155.34,231.248 2155.91,231.12 2156.48,229.052 2157.05,229.985 2157.62,231.172 2158.18,231.248 2158.75,230.012 2159.32,229.116 2159.89,228.176 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.014 ± 0.02\n  with uncertainty of ± 0.001853434679768042\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01164 ± (0.00230136, 0.00242749) (MC)\n  95% confidence interval: [-4.01658, -4.00697] (MC)\n  linear error propagation: -4.01191 ± 0.00243706\n  |δ_y| = |0.000939111| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.011637400158087, val_l = 0.004942397082995598, val_u = 0.004670464371207217)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip810\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip811\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip812\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.27 2211.02,1151.27 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,993.929 2211.02,993.929 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,836.588 2211.02,836.588 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,679.247 2211.02,679.247 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,521.906 2211.02,521.906 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,364.565 2211.02,364.565 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,207.224 2211.02,207.224 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.27 365.751,1151.27 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,993.929 365.751,993.929 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,836.588 365.751,836.588 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,679.247 365.751,679.247 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,521.906 365.751,521.906 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,364.565 365.751,364.565 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,207.224 365.751,207.224 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M298.909 1137.07 Q295.298 1137.07 293.469 1140.63 Q291.664 1144.17 291.664 1151.3 Q291.664 1158.41 293.469 1161.98 Q295.298 1165.52 298.909 1165.52 Q302.543 1165.52 304.349 1161.98 Q306.177 1158.41 306.177 1151.3 Q306.177 1144.17 304.349 1140.63 Q302.543 1137.07 298.909 1137.07 M298.909 1133.36 Q304.719 1133.36 307.775 1137.97 Q310.853 1142.55 310.853 1151.3 Q310.853 1160.03 307.775 1164.64 Q304.719 1169.22 298.909 1169.22 Q293.099 1169.22 290.02 1164.64 Q286.964 1160.03 286.964 1151.3 Q286.964 1142.55 290.02 1137.97 Q293.099 1133.36 298.909 1133.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M259.557 1007.27 L267.196 1007.27 L267.196 980.908 L258.886 982.575 L258.886 978.315 L267.15 976.649 L271.826 976.649 L271.826 1007.27 L279.465 1007.27 L279.465 1011.21 L259.557 1011.21 L259.557 1007.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 979.727 Q295.298 979.727 293.469 983.292 Q291.664 986.834 291.664 993.963 Q291.664 1001.07 293.469 1004.63 Q295.298 1008.18 298.909 1008.18 Q302.543 1008.18 304.349 1004.63 Q306.177 1001.07 306.177 993.963 Q306.177 986.834 304.349 983.292 Q302.543 979.727 298.909 979.727 M298.909 976.024 Q304.719 976.024 307.775 980.63 Q310.853 985.214 310.853 993.963 Q310.853 1002.69 307.775 1007.3 Q304.719 1011.88 298.909 1011.88 Q293.099 1011.88 290.02 1007.3 Q286.964 1002.69 286.964 993.963 Q286.964 985.214 290.02 980.63 Q293.099 976.024 298.909 976.024 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M262.775 849.933 L279.094 849.933 L279.094 853.868 L257.15 853.868 L257.15 849.933 Q259.812 847.178 264.395 842.548 Q269.002 837.896 270.182 836.553 Q272.428 834.03 273.307 832.294 Q274.21 830.535 274.21 828.845 Q274.21 826.09 272.266 824.354 Q270.344 822.618 267.242 822.618 Q265.043 822.618 262.59 823.382 Q260.159 824.146 257.381 825.697 L257.381 820.974 Q260.205 819.84 262.659 819.261 Q265.113 818.683 267.15 818.683 Q272.52 818.683 275.715 821.368 Q278.909 824.053 278.909 828.544 Q278.909 830.673 278.099 832.595 Q277.312 834.493 275.205 837.085 Q274.627 837.757 271.525 840.974 Q268.423 844.169 262.775 849.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 822.386 Q295.298 822.386 293.469 825.951 Q291.664 829.493 291.664 836.622 Q291.664 843.729 293.469 847.294 Q295.298 850.835 298.909 850.835 Q302.543 850.835 304.349 847.294 Q306.177 843.729 306.177 836.622 Q306.177 829.493 304.349 825.951 Q302.543 822.386 298.909 822.386 M298.909 818.683 Q304.719 818.683 307.775 823.289 Q310.853 827.873 310.853 836.622 Q310.853 845.349 307.775 849.956 Q304.719 854.539 298.909 854.539 Q293.099 854.539 290.02 849.956 Q286.964 845.349 286.964 836.622 Q286.964 827.873 290.02 823.289 Q293.099 818.683 298.909 818.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M272.914 677.893 Q276.27 678.61 278.145 680.879 Q280.043 683.147 280.043 686.481 Q280.043 691.596 276.525 694.397 Q273.006 697.198 266.525 697.198 Q264.349 697.198 262.034 696.758 Q259.742 696.342 257.289 695.485 L257.289 690.971 Q259.233 692.106 261.548 692.684 Q263.863 693.263 266.386 693.263 Q270.784 693.263 273.076 691.527 Q275.39 689.791 275.39 686.481 Q275.39 683.425 273.238 681.712 Q271.108 679.976 267.289 679.976 L263.261 679.976 L263.261 676.133 L267.474 676.133 Q270.923 676.133 272.752 674.768 Q274.58 673.379 274.58 670.786 Q274.58 668.124 272.682 666.712 Q270.807 665.277 267.289 665.277 Q265.367 665.277 263.168 665.694 Q260.969 666.11 258.33 666.99 L258.33 662.823 Q260.992 662.083 263.307 661.712 Q265.645 661.342 267.705 661.342 Q273.029 661.342 276.131 663.772 Q279.233 666.18 279.233 670.3 Q279.233 673.17 277.59 675.161 Q275.946 677.129 272.914 677.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 665.045 Q295.298 665.045 293.469 668.61 Q291.664 672.152 291.664 679.282 Q291.664 686.388 293.469 689.953 Q295.298 693.494 298.909 693.494 Q302.543 693.494 304.349 689.953 Q306.177 686.388 306.177 679.282 Q306.177 672.152 304.349 668.61 Q302.543 665.045 298.909 665.045 M298.909 661.342 Q304.719 661.342 307.775 665.948 Q310.853 670.532 310.853 679.282 Q310.853 688.008 307.775 692.615 Q304.719 697.198 298.909 697.198 Q293.099 697.198 290.02 692.615 Q286.964 688.008 286.964 679.282 Q286.964 670.532 290.02 665.948 Q293.099 661.342 298.909 661.342 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M271.594 508.7 L259.789 527.149 L271.594 527.149 L271.594 508.7 M270.367 504.626 L276.247 504.626 L276.247 527.149 L281.177 527.149 L281.177 531.038 L276.247 531.038 L276.247 539.186 L271.594 539.186 L271.594 531.038 L255.992 531.038 L255.992 526.524 L270.367 504.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 507.705 Q295.298 507.705 293.469 511.269 Q291.664 514.811 291.664 521.941 Q291.664 529.047 293.469 532.612 Q295.298 536.153 298.909 536.153 Q302.543 536.153 304.349 532.612 Q306.177 529.047 306.177 521.941 Q306.177 514.811 304.349 511.269 Q302.543 507.705 298.909 507.705 M298.909 504.001 Q304.719 504.001 307.775 508.607 Q310.853 513.191 310.853 521.941 Q310.853 530.667 307.775 535.274 Q304.719 539.857 298.909 539.857 Q293.099 539.857 290.02 535.274 Q286.964 530.667 286.964 521.941 Q286.964 513.191 290.02 508.607 Q293.099 504.001 298.909 504.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M258.793 347.285 L277.15 347.285 L277.15 351.22 L263.076 351.22 L263.076 359.692 Q264.094 359.345 265.113 359.183 Q266.131 358.998 267.15 358.998 Q272.937 358.998 276.316 362.169 Q279.696 365.34 279.696 370.757 Q279.696 376.336 276.224 379.437 Q272.752 382.516 266.432 382.516 Q264.256 382.516 261.988 382.146 Q259.742 381.775 257.335 381.035 L257.335 376.336 Q259.418 377.47 261.641 378.025 Q263.863 378.581 266.34 378.581 Q270.344 378.581 272.682 376.475 Q275.02 374.368 275.02 370.757 Q275.02 367.146 272.682 365.039 Q270.344 362.933 266.34 362.933 Q264.465 362.933 262.59 363.35 Q260.738 363.766 258.793 364.646 L258.793 347.285 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 350.364 Q295.298 350.364 293.469 353.928 Q291.664 357.47 291.664 364.6 Q291.664 371.706 293.469 375.271 Q295.298 378.812 298.909 378.812 Q302.543 378.812 304.349 375.271 Q306.177 371.706 306.177 364.6 Q306.177 357.47 304.349 353.928 Q302.543 350.364 298.909 350.364 M298.909 346.66 Q304.719 346.66 307.775 351.266 Q310.853 355.85 310.853 364.6 Q310.853 373.326 307.775 377.933 Q304.719 382.516 298.909 382.516 Q293.099 382.516 290.02 377.933 Q286.964 373.326 286.964 364.6 Q286.964 355.85 290.02 351.266 Q293.099 346.66 298.909 346.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M269.326 205.36 Q266.178 205.36 264.326 207.513 Q262.497 209.666 262.497 213.416 Q262.497 217.143 264.326 219.319 Q266.178 221.472 269.326 221.472 Q272.474 221.472 274.303 219.319 Q276.154 217.143 276.154 213.416 Q276.154 209.666 274.303 207.513 Q272.474 205.36 269.326 205.36 M278.608 190.708 L278.608 194.967 Q276.849 194.134 275.043 193.694 Q273.261 193.254 271.502 193.254 Q266.872 193.254 264.418 196.379 Q261.988 199.504 261.641 205.823 Q263.006 203.81 265.066 202.745 Q267.127 201.657 269.603 201.657 Q274.812 201.657 277.821 204.828 Q280.853 207.976 280.853 213.416 Q280.853 218.74 277.705 221.958 Q274.557 225.175 269.326 225.175 Q263.33 225.175 260.159 220.592 Q256.988 215.985 256.988 207.259 Q256.988 199.064 260.877 194.203 Q264.766 189.319 271.316 189.319 Q273.076 189.319 274.858 189.666 Q276.664 190.013 278.608 190.708 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 193.023 Q295.298 193.023 293.469 196.587 Q291.664 200.129 291.664 207.259 Q291.664 214.365 293.469 217.93 Q295.298 221.472 298.909 221.472 Q302.543 221.472 304.349 217.93 Q306.177 214.365 306.177 207.259 Q306.177 200.129 304.349 196.587 Q302.543 193.023 298.909 193.023 M298.909 189.319 Q304.719 189.319 307.775 193.925 Q310.853 198.509 310.853 207.259 Q310.853 215.985 307.775 220.592 Q304.719 225.175 298.909 225.175 Q293.099 225.175 290.02 220.592 Q286.964 215.985 286.964 207.259 Q286.964 198.509 290.02 193.925 Q293.099 189.319 298.909 189.319 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1035.34 400.199,1050.34 400.786,948.431 401.372,854.931 401.958,770.967 402.545,688.71 403.131,613.585 403.718,546.854 404.304,487.954 404.891,431.221 405.477,468.05 406.063,496.924 406.65,450.829 407.236,475.047 407.823,433.544 408.409,396.333 408.995,362.499 409.582,333.212 410.168,306.806 410.755,282.751 411.341,263.373 411.927,247.271 412.514,231.999 413.1,219.895 413.687,246.665 414.273,239.529 414.86,234.045 415.446,230.371 416.032,226.884 416.619,225.624 417.205,252.161 417.792,253.679 418.378,299.752 418.964,303.569 419.551,326.217 420.137,330.202 420.724,335.305 421.31,372.287 421.896,392.921 422.483,425.58 423.069,431.401 423.656,437.841 424.242,446.297 424.829,455.272 425.415,464.697 426.001,474.331 426.588,484.764 427.174,504.224 427.761,514.545 428.347,542.329 428.933,551.965 429.52,569.237 430.106,586.236 430.693,603.552 431.279,621.481 431.865,638.911 432.452,656.663 433.038,668.522 433.625,679.707 434.211,696.178 434.798,706.72 435.384,722.354 435.97,737.671 436.557,756.546 437.143,770.719 437.73,788.956 438.316,806.898 438.902,816.143 439.489,832.304 440.075,844.488 440.662,852.703 441.248,871.381 441.835,889.54 442.421,900.055 443.007,913.358 443.594,920.022 444.18,926.39 444.767,938.895 445.353,953.981 445.939,968.385 446.526,979.573 447.112,987.008 447.699,991.933 448.285,1002.02 448.871,1011.55 449.458,1018.64 450.044,1032.74 450.631,1043.76 451.217,1047.62 451.804,1053.35 452.39,1063.44 452.976,1073.39 453.563,1078.67 454.149,1085.85 454.736,1092.89 455.322,1101.28 455.908,1103.66 456.495,1109.62 457.081,1119.91 457.668,1123.92 458.254,1127.28 458.84,1132.66 459.427,1136.31 460.013,1137.94 460.6,1141.29 461.186,1144.57 461.773,1147.71 462.359,1149.36 462.945,1154.14 463.532,1159.05 464.118,1160.53 464.705,1161.96 465.291,1166.78 465.877,1169.57 466.464,1170.58 467.05,1175.09 467.637,1177.84 468.223,1182.3 468.809,1183.07 469.396,1184.03 469.982,1184.74 470.569,1188.91 471.155,1192.91 471.742,1196.63 472.328,1198.97 472.914,1202.78 473.501,1206.29 474.087,1212.55 474.674,1213.99 475.26,1215.34 475.846,1219.35 476.433,1218.85 477.019,1218.4 477.606,1217.97 478.192,1219.24 478.778,1222.31 479.365,1222 479.951,1221.84 480.538,1221.72 481.124,1222.88 481.711,1224.4 482.297,1222.63 482.883,1224.07 483.47,1222.61 484.056,1225.37 484.643,1226.52 485.229,1226.56 485.815,1227.83 486.402,1225.14 486.988,1225.07 487.575,1225.1 488.161,1226.53 488.748,1226.61 489.334,1228.14 489.92,1229.31 490.507,1229.25 491.093,1231.65 491.68,1236.66 492.266,1236.48 492.852,1237.48 493.439,1239.87 494.025,1241.95 494.612,1239.97 495.198,1239.7 495.784,1240.84 496.371,1240.26 496.957,1240.03 497.544,1238.48 498.13,1239.63 498.717,1239.21 499.303,1241.55 499.889,1239.85 500.476,1242.71 501.062,1243.78 501.649,1247.36 502.235,1245.34 502.821,1244.87 503.408,1244.27 503.994,1243.62 504.581,1244.52 505.167,1242.55 505.753,1246.15 506.34,1246.89 506.926,1247.56 507.513,1245.72 508.099,1245.29 508.686,1243.13 509.272,1241.82 509.858,1241.51 510.445,1242.44 511.031,1240.66 511.618,1239.05 512.204,1236.26 512.79,1237.62 513.377,1239.08 513.963,1240.55 514.55,1240.14 515.136,1242.55 515.722,1242.25 516.309,1243.24 516.895,1243.67 517.482,1244.43 518.068,1245.37 518.655,1244.69 519.241,1245.56 519.827,1244.96 520.414,1247.09 521,1247.85 521.587,1248.48 522.173,1247.74 522.759,1247.34 523.346,1250.53 523.932,1249.84 524.519,1247.67 525.105,1241.64 525.691,1241.16 526.278,1241.05 526.864,1239.41 527.451,1239.07 528.037,1238.8 528.624,1239.9 529.21,1239.51 529.796,1237.81 530.383,1237.77 530.969,1238.81 531.556,1241.06 532.142,1244.58 532.728,1246.82 533.315,1244.95 533.901,1244.47 534.488,1244.08 535.074,1243.73 535.661,1243.35 536.247,1244.5 536.833,1243.78 537.42,1243.11 538.006,1242.65 538.593,1246.26 539.179,1245.88 539.765,1245.12 540.352,1247.05 540.938,1249.06 541.525,1248.01 542.111,1248.23 542.697,1247.36 543.284,1249.04 543.87,1248.26 544.457,1247.47 545.043,1245.34 545.63,1244.52 546.216,1249.31 546.802,1248.08 547.389,1244.51 547.975,1241.25 548.562,1239.49 549.148,1236.55 549.734,1236.35 550.321,1233.65 550.907,1234.84 551.494,1234.67 552.08,1231.81 552.666,1231.76 553.253,1230.67 553.839,1231.12 554.426,1233.81 555.012,1236.37 555.599,1241.39 556.185,1240.8 556.771,1241.87 557.358,1241.27 557.944,1240.68 558.531,1241.22 559.117,1239.52 559.703,1240.44 560.29,1242.35 560.876,1244.14 561.463,1244.48 562.049,1242.4 562.635,1240.49 563.222,1242.33 563.808,1243.23 564.395,1239.98 564.981,1242.15 565.568,1244.02 566.154,1244.61 566.74,1245.03 567.327,1246.59 567.913,1242.99 568.5,1241.11 569.086,1236.52 569.672,1236.21 570.259,1237.27 570.845,1241.91 571.432,1241.58 572.018,1239.72 572.605,1239.09 573.191,1241.12 573.777,1243.09 574.364,1239.87 574.95,1239.5 575.537,1240.04 576.123,1237.92 576.709,1237.58 577.296,1234.44 577.882,1235.45 578.469,1236.81 579.055,1237.7 579.641,1237.31 580.228,1236.91 580.814,1237.95 581.401,1237.35 581.987,1235.48 582.574,1238.68 583.16,1236.69 583.746,1236.22 584.333,1235.72 584.919,1236.35 585.506,1235.73 586.092,1235.35 586.678,1236.02 587.265,1237.06 587.851,1238.02 588.438,1236.34 589.024,1235.85 589.61,1236.77 590.197,1234.58 590.783,1234.19 591.37,1234.77 591.956,1234.09 592.543,1234.87 593.129,1233.19 593.715,1236.9 594.302,1235.02 594.888,1237.21 595.475,1237.98 596.061,1238.66 596.647,1236.65 597.234,1236.17 597.82,1236.87 598.407,1238.98 598.993,1239.45 599.579,1240.03 600.166,1239.15 600.752,1239.43 601.339,1237.28 601.925,1235.33 602.512,1236.19 603.098,1235.65 603.684,1238.8 604.271,1237.96 604.857,1233.65 605.444,1234.51 606.03,1231.49 606.616,1232.28 607.203,1232.93 607.789,1229.89 608.376,1225.47 608.962,1223.83 609.548,1223.81 610.135,1223.71 610.721,1225.07 611.308,1225.16 611.894,1225.27 612.481,1226.58 613.067,1229.14 613.653,1226.34 614.24,1224.93 614.826,1227.41 615.413,1224.56 615.999,1222.14 616.585,1223.69 617.172,1225.02 617.758,1226.36 618.345,1227.32 618.931,1225.59 619.518,1224.4 620.104,1227.02 620.69,1226.77 621.277,1229.42 621.863,1226.42 622.45,1227.66 623.036,1227.74 623.622,1226.36 624.209,1226.22 624.795,1226.39 625.382,1224.91 625.968,1221.97 626.554,1223.19 627.141,1225.87 627.727,1226.03 628.314,1229.59 628.9,1230.42 629.487,1230.02 630.073,1231.03 630.659,1230.75 631.246,1229.2 631.832,1230.04 632.419,1228.49 633.005,1228 633.591,1226.39 634.178,1227.51 634.764,1228.24 635.351,1227.79 635.937,1228.88 636.523,1228.71 637.11,1226.91 637.696,1225.4 638.283,1224.03 638.869,1224 639.456,1223.88 640.042,1221.13 640.628,1222.42 641.215,1221.23 641.801,1220.09 642.388,1218.78 642.974,1217.73 643.56,1217.81 644.147,1219.4 644.733,1219.86 645.32,1220.21 645.906,1220.47 646.492,1221.79 647.079,1222.14 647.665,1222.19 648.252,1221.3 648.838,1220.11 649.425,1219.13 650.011,1219.52 650.597,1220.99 651.184,1222.06 651.77,1223.15 652.357,1225.7 652.943,1225.45 653.529,1225.29 654.116,1223.89 654.702,1224.02 655.289,1225.08 655.875,1227.58 656.462,1228.82 657.048,1227.35 657.634,1227.2 658.221,1227.06 658.807,1228.02 659.394,1227.87 659.98,1227.62 660.566,1228.49 661.153,1228.22 661.739,1227.99 662.326,1229.14 662.912,1230.3 663.498,1228.33 664.085,1229.42 664.671,1230.13 665.258,1231.15 665.844,1230.51 666.431,1228.72 667.017,1229.72 667.603,1229.38 668.19,1230.31 668.776,1228.43 669.363,1230.74 669.949,1230.35 670.535,1230.94 671.122,1229.22 671.708,1229.29 672.295,1228.77 672.881,1228.4 673.467,1226.85 674.054,1228.1 674.64,1230.28 675.227,1231.19 675.813,1229.7 676.4,1229.07 676.986,1229.78 677.572,1228.06 678.159,1227.84 678.745,1226.21 679.332,1228.27 679.918,1223.85 680.504,1223.69 681.091,1223.11 681.677,1225.63 682.264,1225.43 682.85,1221.35 683.436,1222.57 684.023,1221.08 684.609,1222.31 685.196,1221.01 685.782,1219.47 686.369,1221.82 686.955,1221.95 687.541,1223.41 688.128,1223.31 688.714,1226 689.301,1224.4 689.887,1225.57 690.473,1223.86 691.06,1221.31 691.646,1224 692.233,1223.81 692.819,1223.53 693.405,1224.5 693.992,1221.95 694.578,1220.81 695.165,1219.23 695.751,1219.03 696.338,1220.27 696.924,1226.71 697.51,1229.08 698.097,1231.19 698.683,1232.01 699.27,1229.77 699.856,1230.5 700.442,1229.89 701.029,1228.17 701.615,1228.92 702.202,1224.57 702.788,1224.24 703.375,1222.74 703.961,1221.22 704.547,1221.33 705.134,1223.87 705.72,1224.99 706.307,1225.96 706.893,1225.78 707.479,1228.13 708.066,1226.26 708.652,1228.11 709.239,1229.16 709.825,1230.85 710.411,1231.62 710.998,1232.31 711.584,1229.25 712.171,1227.37 712.757,1226.9 713.344,1222.36 713.93,1222.02 714.516,1220.43 715.103,1218.05 715.689,1219.47 716.276,1220.91 716.862,1219.31 717.448,1216.71 718.035,1217.9 718.621,1219.21 719.208,1220.46 719.794,1220.44 720.38,1220.24 720.967,1221.68 721.553,1220.17 722.14,1218.55 722.726,1219.99 723.313,1220 723.899,1216.05 724.485,1216.24 725.072,1217.74 725.658,1217.92 726.245,1217.9 726.831,1217.95 727.417,1217.92 728.004,1218.06 728.59,1220.55 729.177,1220.56 729.763,1220.72 730.349,1220.76 730.936,1219.4 731.522,1219.54 732.109,1219.46 732.695,1222.16 733.282,1223.45 733.868,1224.54 734.454,1224.3 735.041,1222.78 735.627,1219.88 736.214,1219.96 736.8,1219.97 737.386,1219.74 737.973,1219.99 738.559,1222.5 739.146,1222.04 739.732,1218.01 740.318,1218.12 740.905,1220.77 741.491,1217.96 742.078,1218.09 742.664,1214.05 743.251,1214.25 743.837,1216.86 744.423,1218.15 745.01,1216.87 745.596,1217.12 746.183,1218.59 746.769,1220.12 747.355,1219.91 747.942,1215.74 748.528,1217.01 749.115,1214.78 749.701,1217.76 750.288,1217.74 750.874,1216.46 751.46,1217.53 752.047,1215.19 752.633,1215.24 753.22,1212.9 753.806,1213.33 754.392,1212.12 754.979,1217.77 755.565,1216.7 756.152,1215.62 756.738,1218.3 757.324,1217.18 757.911,1219.8 758.497,1218.42 759.084,1215.79 759.67,1215.97 760.257,1214.98 760.843,1217.68 761.429,1218.99 762.016,1218.83 762.602,1217.53 763.189,1218.74 763.775,1219.86 764.361,1221.04 764.948,1222.24 765.534,1221.94 766.121,1220.51 766.707,1220.05 767.293,1219.82 767.88,1216.81 768.466,1219.48 769.053,1220.45 769.639,1221.53 770.226,1218.77 770.812,1218.94 771.398,1218.59 771.985,1217.39 772.571,1215.98 773.158,1216.15 773.744,1216.24 774.33,1214.1 774.917,1215.72 775.503,1217.1 776.09,1217.49 776.676,1218.96 777.262,1218.74 777.849,1218.67 778.435,1217.31 779.022,1217.37 779.608,1214.73 780.195,1215.04 780.781,1213.96 781.367,1214.6 781.954,1214.93 782.54,1216.63 783.127,1220.69 783.713,1223.05 784.299,1221.64 784.886,1222.76 785.472,1221.39 786.059,1221.38 786.645,1219.82 787.232,1224.49 787.818,1224.22 788.404,1223.92 788.991,1223.77 789.577,1224.96 790.164,1227.19 790.75,1227.98 791.336,1227.39 791.923,1223.4 792.509,1223.15 793.096,1222.72 793.682,1222.73 794.268,1225.01 794.855,1223.24 795.441,1224.31 796.028,1223.93 796.614,1225 797.201,1225.96 797.787,1226.89 798.373,1225.21 798.96,1224.72 799.546,1222.85 800.133,1220.21 800.719,1221.24 801.305,1219.91 801.892,1217.25 802.478,1219.81 803.065,1220.84 803.651,1220.56 804.237,1220.42 804.824,1217.92 805.41,1217.98 805.997,1220.35 806.583,1218.84 807.17,1220.99 807.756,1219.77 808.342,1219.4 808.929,1218.02 809.515,1219.46 810.102,1219.19 810.688,1220.37 811.274,1218.64 811.861,1219.81 812.447,1222.09 813.034,1221.93 813.62,1220.32 814.206,1220.16 814.793,1222.51 815.379,1222.47 815.966,1222.12 816.552,1225.7 817.139,1226.81 817.725,1224.89 818.311,1227.11 818.898,1227.7 819.484,1228.23 820.071,1227.68 820.657,1225.73 821.243,1225.26 821.83,1224.8 822.416,1223.24 823.003,1221.64 823.589,1221.42 824.175,1222.64 824.762,1222.45 825.348,1219.79 825.935,1220.75 826.521,1221.77 827.108,1221.45 827.694,1219.81 828.28,1222.34 828.867,1223.44 829.453,1221.72 830.04,1226.36 830.626,1224.54 831.212,1222.88 831.799,1222.52 832.385,1219.52 832.972,1219.44 833.558,1215.37 834.145,1215.63 834.731,1215.48 835.317,1215.36 835.904,1214.11 836.49,1213.04 837.077,1210.9 837.663,1209.79 838.249,1208.94 838.836,1209.46 839.422,1208.65 840.009,1207.44 840.595,1209.43 841.181,1211.27 841.768,1211.38 842.354,1212.6 842.941,1214.03 843.527,1218.1 844.114,1219.25 844.7,1216.91 845.286,1214.43 845.873,1214.66 846.459,1216.1 847.046,1217.17 847.632,1216.99 848.218,1215.6 848.805,1217.09 849.391,1216.94 849.978,1217.86 850.564,1219.11 851.15,1221.76 851.737,1220.19 852.323,1219.93 852.91,1219.96 853.496,1216.86 854.083,1216.77 854.669,1216.49 855.255,1216.7 855.842,1219.36 856.428,1219.17 857.015,1217.92 857.601,1219.22 858.187,1218.83 858.774,1216.36 859.36,1215.07 859.947,1215.27 860.533,1216.79 861.119,1216.74 861.706,1214.2 862.292,1211.54 862.879,1211.75 863.465,1209.47 864.052,1209.78 864.638,1210 865.224,1212.93 865.811,1211.77 866.397,1213.36 866.984,1213.75 867.57,1213.79 868.156,1214.13 868.743,1218.09 869.329,1216.36 869.916,1212.47 870.502,1213.9 871.089,1210.14 871.675,1210.55 872.261,1212.03 872.848,1212.3 873.434,1213.77 874.021,1213.69 874.607,1211.18 875.193,1212.88 875.78,1212.89 876.366,1212.93 876.953,1213.21 877.539,1209.33 878.125,1211.23 878.712,1214.03 879.298,1214.18 879.885,1213.95 880.471,1215.3 881.058,1213.01 881.644,1213.27 882.23,1212.19 882.817,1214.99 883.403,1216.61 883.99,1216.41 884.576,1212.81 885.162,1209.14 885.749,1208.22 886.335,1206.11 886.922,1209.07 887.508,1210.81 888.094,1212.31 888.681,1211.11 889.267,1212.79 889.854,1214.22 890.44,1215.48 891.027,1216.76 891.613,1215.5 892.199,1216.83 892.786,1215.26 893.372,1215.2 893.959,1212.71 894.545,1214.19 895.131,1216.94 895.718,1215.48 896.304,1218.04 896.891,1217.97 897.477,1219.15 898.063,1221.4 898.65,1221.33 899.236,1218.48 899.823,1218.51 900.409,1218.38 900.996,1216.93 901.582,1217.02 902.168,1219.44 902.755,1220.31 903.341,1219.95 903.928,1218.45 904.514,1215.65 905.1,1215.6 905.687,1214.34 906.273,1214.15 906.86,1213.94 907.446,1214.08 908.032,1212.82 908.619,1212.94 909.205,1215.57 909.792,1214.37 910.378,1214.81 910.965,1216.13 911.551,1217.49 912.137,1216.33 912.724,1217.58 913.31,1221.4 913.897,1221.31 914.483,1222.37 915.069,1220.38 915.656,1219.06 916.242,1217.63 916.829,1218.87 917.415,1216.12 918.002,1216.09 918.588,1216.35 919.174,1216.37 919.761,1216.32 920.347,1217.99 920.934,1220.34 921.52,1219.94 922.106,1218.47 922.693,1218.15 923.279,1218.19 923.866,1218.01 924.452,1216.67 925.038,1218 925.625,1214.19 926.211,1214.24 926.798,1211.76 927.384,1212.13 927.971,1212.38 928.557,1212.53 929.143,1213.66 929.73,1215.16 930.316,1219.31 930.903,1217.88 931.489,1219.44 932.075,1217.98 932.662,1219.24 933.248,1216.67 933.835,1216.79 934.421,1214.43 935.007,1213.39 935.594,1213.51 936.18,1216.24 936.767,1212.33 937.353,1212.62 937.94,1212.79 938.526,1212.85 939.112,1213.17 939.699,1214.63 940.285,1213.25 940.872,1211.9 941.458,1212.15 942.044,1209.5 942.631,1211.19 943.217,1211.49 943.804,1211.69 944.39,1210.18 944.976,1211.81 945.563,1213.2 946.149,1212.18 946.736,1213.47 947.322,1212.46 947.909,1211.35 948.495,1211.62 949.081,1216.96 949.668,1219.41 950.254,1219.35 950.841,1216.22 951.427,1214.81 952.013,1216.07 952.6,1213.64 953.186,1216.36 953.773,1216.49 954.359,1218.84 954.945,1214.71 955.532,1217.15 956.118,1217.16 956.705,1215.91 957.291,1217.12 957.878,1216.84 958.464,1218.03 959.05,1217.56 959.637,1217.37 960.223,1218.52 960.81,1219.5 961.396,1219.25 961.982,1218.94 962.569,1218.8 963.155,1219.69 963.742,1221.93 964.328,1224.23 964.915,1223.58 965.501,1225.86 966.087,1226.29 966.674,1229.57 967.26,1230.01 967.847,1230.58 968.433,1228.58 969.019,1228.02 969.606,1228.76 970.192,1231.83 970.779,1229.69 971.365,1230.18 971.951,1230.47 972.538,1228.32 973.124,1226.37 973.711,1228.09 974.297,1227.24 974.884,1228.17 975.47,1227.4 976.056,1224.03 976.643,1222.21 977.229,1216.76 977.816,1215.36 978.402,1215.44 978.988,1214.18 979.575,1218.05 980.161,1217.71 980.748,1222.76 981.334,1222.61 981.92,1221.04 982.507,1220.96 983.093,1222.1 983.68,1221.84 984.266,1217.75 984.853,1217.41 985.439,1217.18 986.025,1215.71 986.612,1215.51 987.198,1216.72 987.785,1216.5 988.371,1215.07 988.957,1214 989.544,1215.37 990.13,1212.63 990.717,1212.91 991.303,1214.32 991.889,1216.67 992.476,1212.96 993.062,1209.42 993.649,1210.79 994.235,1210.89 994.822,1211.27 995.408,1211.33 995.994,1211.77 996.581,1210.74 997.167,1205.81 997.754,1206.37 998.34,1202.9 998.926,1198.51 999.513,1199.4 1000.1,1201.79 1000.69,1201.35 1001.27,1202.17 1001.86,1202.66 1002.44,1208.02 1003.03,1207.24 1003.62,1207.86 1004.2,1207.23 1004.79,1209.1 1005.38,1208.19 1005.96,1208.59 1006.55,1208.71 1007.14,1210.54 1007.72,1212.28 1008.31,1212.41 1008.9,1211.22 1009.48,1208.84 1010.07,1206.44 1010.65,1204.4 1011.24,1206.51 1011.83,1207.01 1012.41,1208.91 1013,1214.45 1013.59,1215.7 1014.17,1216.9 1014.76,1215.85 1015.35,1217.06 1015.93,1218.41 1016.52,1215.53 1017.11,1215.64 1017.69,1216.86 1018.28,1215.64 1018.86,1214.36 1019.45,1212.07 1020.04,1213.66 1020.62,1212.4 1021.21,1211.16 1021.8,1207.46 1022.38,1207.81 1022.97,1206.95 1023.56,1207.8 1024.14,1206.85 1024.73,1207.58 1025.32,1207.97 1025.9,1209.51 1026.49,1208.72 1027.07,1210.45 1027.66,1211.98 1028.25,1212.22 1028.83,1212.29 1029.42,1213.31 1030.01,1213.47 1030.59,1213.39 1031.18,1213.3 1031.77,1213.71 1032.35,1216.44 1032.94,1219.08 1033.52,1220.34 1034.11,1218.42 1034.7,1217.07 1035.28,1217.09 1035.87,1216.94 1036.46,1215.76 1037.04,1217.15 1037.63,1219.42 1038.22,1219.42 1038.8,1216.76 1039.39,1218.11 1039.98,1219.55 1040.56,1219.28 1041.15,1220.39 1041.73,1222.21 1042.32,1223.27 1042.91,1223.17 1043.49,1221.42 1044.08,1219.79 1044.67,1219.33 1045.25,1221.74 1045.84,1218.89 1046.43,1219.83 1047.01,1216.98 1047.6,1217.19 1048.19,1216.91 1048.77,1215.51 1049.36,1215.59 1049.94,1211.6 1050.53,1213.13 1051.12,1213.4 1051.7,1213.84 1052.29,1216.13 1052.88,1216.12 1053.46,1220.09 1054.05,1222.67 1054.64,1222.34 1055.22,1221.81 1055.81,1222.3 1056.39,1222.85 1056.98,1224.93 1057.57,1222.93 1058.15,1219.68 1058.74,1219.32 1059.33,1220.42 1059.91,1213.63 1060.5,1208.44 1061.09,1210.17 1061.67,1210.36 1062.26,1209.63 1062.85,1209.97 1063.43,1210.06 1064.02,1210.48 1064.6,1210.6 1065.19,1212.14 1065.78,1212.14 1066.36,1211.9 1066.95,1214.62 1067.54,1217.06 1068.12,1214.24 1068.71,1212.85 1069.3,1210.37 1069.88,1210.36 1070.47,1210.61 1071.06,1209.59 1071.64,1209.68 1072.23,1211.15 1072.81,1212.77 1073.4,1212.89 1073.99,1212.91 1074.57,1216.74 1075.16,1217.7 1075.75,1220.11 1076.33,1221.13 1076.92,1219.41 1077.51,1222.92 1078.09,1221.34 1078.68,1224.79 1079.26,1225.77 1079.85,1225.22 1080.44,1223.12 1081.02,1219.06 1081.61,1219.06 1082.2,1220.15 1082.78,1220.97 1083.37,1218.02 1083.96,1223.18 1084.54,1219.52 1085.13,1218.14 1085.72,1220.51 1086.3,1221.55 1086.89,1221.22 1087.47,1222.04 1088.06,1219.37 1088.65,1220.4 1089.23,1220.81 1089.82,1216.63 1090.41,1212.89 1090.99,1212.98 1091.58,1214.6 1092.17,1213.26 1092.75,1216.05 1093.34,1215.98 1093.93,1217.14 1094.51,1214.32 1095.1,1215.43 1095.68,1211.62 1096.27,1209.24 1096.86,1209.51 1097.44,1210.96 1098.03,1209.81 1098.62,1212.47 1099.2,1212.49 1099.79,1212.69 1100.38,1211.66 1100.96,1212.98 1101.55,1213.29 1102.14,1214.7 1102.72,1213.2 1103.31,1213.57 1103.89,1211.07 1104.48,1211.2 1105.07,1212.41 1105.65,1212.48 1106.24,1213.65 1106.83,1214.7 1107.41,1217.51 1108,1217.43 1108.59,1217.16 1109.17,1218.43 1109.76,1218.23 1110.34,1218.2 1110.93,1217.96 1111.52,1217.94 1112.1,1217.8 1112.69,1218.91 1113.28,1215.88 1113.86,1218.22 1114.45,1219.34 1115.04,1220.15 1115.62,1222.25 1116.21,1222.81 1116.8,1223.66 1117.38,1222.12 1117.97,1220.28 1118.55,1218.77 1119.14,1218.58 1119.73,1218.4 1120.31,1218.33 1120.9,1220.11 1121.49,1219.79 1122.07,1220.96 1122.66,1217.11 1123.25,1213.08 1123.83,1215.49 1124.42,1215.28 1125.01,1215.27 1125.59,1214.04 1126.18,1212.8 1126.76,1211.42 1127.35,1212.93 1127.94,1211.86 1128.52,1208.08 1129.11,1211.17 1129.7,1214.03 1130.28,1212.8 1130.87,1214.09 1131.46,1212.62 1132.04,1212.51 1132.63,1210.05 1133.21,1210.25 1133.8,1208.88 1134.39,1210.22 1134.97,1211.79 1135.56,1213.53 1136.15,1208.41 1136.73,1207.62 1137.32,1205.48 1137.91,1204.54 1138.49,1203.94 1139.08,1204.55 1139.67,1206.52 1140.25,1207.94 1140.84,1205.84 1141.42,1206.13 1142.01,1206.83 1142.6,1213.67 1143.18,1215.19 1143.77,1216.04 1144.36,1217.21 1144.94,1216.02 1145.53,1217.31 1146.12,1218.57 1146.7,1214.54 1147.29,1213.19 1147.88,1213.32 1148.46,1214.67 1149.05,1211.85 1149.63,1212.15 1150.22,1211.07 1150.81,1214.03 1151.39,1212.9 1151.98,1209.21 1152.57,1208.54 1153.15,1209.03 1153.74,1209.33 1154.33,1209.43 1154.91,1210.91 1155.5,1212.7 1156.09,1214.09 1156.67,1211.68 1157.26,1211.87 1157.84,1210.88 1158.43,1211.12 1159.02,1210.09 1159.6,1211.39 1160.19,1214.26 1160.78,1214.39 1161.36,1214.27 1161.95,1215.64 1162.54,1215.6 1163.12,1215.52 1163.71,1214 1164.29,1214.02 1164.88,1211.54 1165.47,1212.92 1166.05,1214.34 1166.64,1215.65 1167.23,1216.94 1167.81,1215.37 1168.4,1216.66 1168.99,1217.86 1169.57,1215.01 1170.16,1215.03 1170.75,1215.14 1171.33,1213.87 1171.92,1214.14 1172.5,1215.46 1173.09,1214.22 1173.68,1217.11 1174.26,1214.48 1174.85,1213.25 1175.44,1214.66 1176.02,1216.11 1176.61,1217.37 1177.2,1216.04 1177.78,1219.7 1178.37,1220.8 1178.96,1219.27 1179.54,1218.65 1180.13,1219.81 1180.71,1222.23 1181.3,1219.2 1181.89,1220.42 1182.47,1220.19 1183.06,1220.26 1183.65,1218.55 1184.23,1217.07 1184.82,1217.14 1185.41,1217.15 1185.99,1214.48 1186.58,1215.65 1187.16,1215.93 1187.75,1216.1 1188.34,1217.2 1188.92,1217.17 1189.51,1216.86 1190.1,1215.39 1190.68,1215.09 1191.27,1213.58 1191.86,1210.82 1192.44,1213.72 1193.03,1207.42 1193.62,1208.88 1194.2,1210.39 1194.79,1209.26 1195.37,1209.33 1195.96,1209.56 1196.55,1209.85 1197.13,1208.75 1197.72,1206.38 1198.31,1206.89 1198.89,1206.03 1199.48,1208.96 1200.07,1209.2 1200.65,1204.15 1201.24,1205.99 1201.83,1205.77 1202.41,1205.95 1203,1207.65 1203.58,1208.07 1204.17,1205.55 1204.76,1205.83 1205.34,1203.44 1205.93,1206.68 1206.52,1210.84 1207.1,1209.88 1207.69,1210.38 1208.28,1209.62 1208.86,1212.65 1209.45,1213.03 1210.03,1213.14 1210.62,1214.54 1211.21,1214.51 1211.79,1211.63 1212.38,1209.01 1212.97,1206.54 1213.55,1212.04 1214.14,1212.12 1214.73,1216.22 1215.31,1217.46 1215.9,1216.39 1216.49,1216.59 1217.07,1216.74 1217.66,1216.55 1218.24,1216.43 1218.83,1217.31 1219.42,1218.56 1220,1219.59 1220.59,1219.36 1221.18,1219.09 1221.76,1217.79 1222.35,1214.8 1222.94,1215.94 1223.52,1217.11 1224.11,1216.15 1224.7,1217.41 1225.28,1216.17 1225.87,1216.03 1226.45,1216.12 1227.04,1215.9 1227.63,1214.48 1228.21,1214.8 1228.8,1215.96 1229.39,1214.35 1229.97,1213.15 1230.56,1211.98 1231.15,1209.65 1231.73,1211.1 1232.32,1212.18 1232.91,1213.54 1233.49,1212.4 1234.08,1212.55 1234.66,1212.74 1235.25,1211.42 1235.84,1211.41 1236.42,1211.47 1237.01,1210.29 1237.6,1209.34 1238.18,1209.76 1238.77,1210.24 1239.36,1211.83 1239.94,1213.25 1240.53,1214.53 1241.11,1212.19 1241.7,1212.53 1242.29,1213.93 1242.87,1212.57 1243.46,1212.64 1244.05,1213.02 1244.63,1213.07 1245.22,1213.1 1245.81,1212.17 1246.39,1213.48 1246.98,1214.7 1247.57,1214.47 1248.15,1214.46 1248.74,1215.51 1249.32,1215.51 1249.91,1219.18 1250.5,1217.79 1251.08,1219.01 1251.67,1218.67 1252.26,1217.28 1252.84,1215.88 1253.43,1219.72 1254.02,1217.04 1254.6,1219.55 1255.19,1217.67 1255.78,1215.06 1256.36,1214.73 1256.95,1216.15 1257.53,1215.96 1258.12,1218.58 1258.71,1217.13 1259.29,1215.69 1259.88,1215.75 1260.47,1216.94 1261.05,1216.8 1261.64,1211.23 1262.23,1210.48 1262.81,1212.04 1263.4,1213.25 1263.98,1213.31 1264.57,1214.46 1265.16,1215.59 1265.74,1216.7 1266.33,1215.16 1266.92,1213.49 1267.5,1213.23 1268.09,1214.35 1268.68,1212.98 1269.26,1211.71 1269.85,1214.41 1270.44,1215.9 1271.02,1215.81 1271.61,1213.06 1272.19,1214.24 1272.78,1215.64 1273.37,1215.58 1273.95,1215.32 1274.54,1216.59 1275.13,1214.97 1275.71,1213.57 1276.3,1213.79 1276.89,1212.63 1277.47,1212.51 1278.06,1215.26 1278.65,1214.07 1279.23,1213.97 1279.82,1214.31 1280.4,1213.42 1280.99,1216.15 1281.58,1216.17 1282.16,1217.3 1282.75,1219.62 1283.34,1219.14 1283.92,1218.9 1284.51,1217.67 1285.1,1217.48 1285.68,1215.07 1286.27,1216.24 1286.86,1217.41 1287.44,1217.08 1288.03,1214.53 1288.61,1214.81 1289.2,1214.91 1289.79,1213.79 1290.37,1212.89 1290.96,1211.8 1291.55,1209.54 1292.13,1207.41 1292.72,1209.24 1293.31,1209.4 1293.89,1209.64 1294.48,1208.75 1295.06,1210.46 1295.65,1210.71 1296.24,1210.81 1296.82,1212.32 1297.41,1212.65 1298,1214.07 1298.58,1211.35 1299.17,1212.51 1299.76,1211.46 1300.34,1212.61 1300.93,1212.72 1301.52,1215.7 1302.1,1214.31 1302.69,1214.37 1303.27,1214.43 1303.86,1214.35 1304.45,1212.62 1305.03,1215.02 1305.62,1213.77 1306.21,1213.9 1306.79,1211.1 1307.38,1209.85 1307.97,1208.81 1308.55,1210.64 1309.14,1210.87 1309.73,1209.58 1310.31,1208.76 1310.9,1210.35 1311.48,1214.34 1312.07,1210.49 1312.66,1210.79 1313.24,1213.28 1313.83,1212.16 1314.42,1214.67 1315,1213.61 1315.59,1213.98 1316.18,1214.13 1316.76,1215.33 1317.35,1216.62 1317.93,1216.41 1318.52,1216.4 1319.11,1217.73 1319.69,1219.91 1320.28,1218.52 1320.87,1218.15 1321.45,1216.87 1322.04,1218.07 1322.63,1219.11 1323.21,1218.99 1323.8,1217.41 1324.39,1217.04 1324.97,1216.77 1325.56,1217.91 1326.14,1215.35 1326.73,1215.42 1327.32,1215.82 1327.9,1218.23 1328.49,1216.86 1329.08,1216.78 1329.66,1218.04 1330.25,1218.93 1330.84,1220.08 1331.42,1221.18 1332.01,1223.45 1332.6,1221.68 1333.18,1217.39 1333.77,1214.51 1334.35,1217.2 1334.94,1220.78 1335.53,1222.87 1336.11,1224.09 1336.7,1224.63 1337.29,1226.46 1337.87,1227.04 1338.46,1224.87 1339.05,1221.78 1339.63,1221.53 1340.22,1222.67 1340.8,1221.35 1341.39,1220.87 1341.98,1221.93 1342.56,1222.75 1343.15,1223.3 1343.74,1221.81 1344.32,1222.43 1344.91,1219.25 1345.5,1219.09 1346.08,1220.18 1346.67,1217.45 1347.26,1222.16 1347.84,1220.28 1348.43,1214.71 1349.01,1215.7 1349.6,1215.41 1350.19,1215.21 1350.77,1216.38 1351.36,1213.89 1351.95,1209.9 1352.53,1210.28 1353.12,1210.54 1353.71,1210.7 1354.29,1212.1 1354.88,1212.01 1355.47,1210.81 1356.05,1213.56 1356.64,1212.47 1357.22,1212.76 1357.81,1211.71 1358.4,1213.07 1358.98,1213.28 1359.57,1215.73 1360.16,1217.05 1360.74,1214.36 1361.33,1214.24 1361.92,1214.16 1362.5,1212.85 1363.09,1211.41 1363.68,1210.34 1364.26,1206.64 1364.85,1204.39 1365.43,1203.87 1366.02,1201.73 1366.61,1202.52 1367.19,1203.13 1367.78,1206.38 1368.37,1206.89 1368.95,1209.86 1369.54,1209.97 1370.13,1207.66 1370.71,1207.85 1371.3,1212.3 1371.88,1211 1372.47,1210.17 1373.06,1209.03 1373.64,1208 1374.23,1208.53 1374.82,1209.02 1375.4,1207.84 1375.99,1208.08 1376.58,1208.22 1377.16,1207.22 1377.75,1211.22 1378.34,1212.64 1378.92,1208.87 1379.51,1210.16 1380.09,1211.91 1380.68,1214.61 1381.27,1211.96 1381.85,1213.79 1382.44,1212.75 1383.03,1210.5 1383.61,1212 1384.2,1211.88 1384.79,1214.79 1385.37,1213.87 1385.96,1216.59 1386.55,1214.11 1387.13,1214.16 1387.72,1212.79 1388.3,1214 1388.89,1215.35 1389.48,1216.69 1390.06,1216.64 1390.65,1217.51 1391.24,1217.39 1391.82,1218.76 1392.41,1217.4 1393,1218.5 1393.58,1217.18 1394.17,1217.03 1394.75,1219.2 1395.34,1217.58 1395.93,1218.87 1396.51,1218.54 1397.1,1218.06 1397.69,1219.05 1398.27,1221.74 1398.86,1218.6 1399.45,1218.44 1400.03,1219.16 1400.62,1218.78 1401.21,1218.27 1401.79,1215.51 1402.38,1215.49 1402.96,1215.35 1403.55,1212.89 1404.14,1211.78 1404.72,1211.78 1405.31,1210.55 1405.9,1210.98 1406.48,1210.99 1407.07,1212.72 1407.66,1211.34 1408.24,1214.16 1408.83,1219.2 1409.42,1216.43 1410,1217.69 1410.59,1218.86 1411.17,1216.14 1411.76,1213.22 1412.35,1210.46 1412.93,1208.11 1413.52,1209.73 1414.11,1209.91 1414.69,1208.79 1415.28,1207.76 1415.87,1207.84 1416.45,1209.39 1417.04,1209.81 1417.63,1210.3 1418.21,1211.91 1418.8,1211.12 1419.38,1211.33 1419.97,1210.17 1420.56,1209.12 1421.14,1208.34 1421.73,1208.86 1422.32,1210.48 1422.9,1211.99 1423.49,1211.99 1424.08,1213.09 1424.66,1213.37 1425.25,1209.69 1425.83,1209.73 1426.42,1210.13 1427.01,1211.59 1427.59,1211.67 1428.18,1209.5 1428.77,1208.41 1429.35,1208.87 1429.94,1210.48 1430.53,1211.79 1431.11,1212.06 1431.7,1212.11 1432.29,1213.78 1432.87,1215.4 1433.46,1215.27 1434.04,1217.87 1434.63,1216.21 1435.22,1213.57 1435.8,1217.31 1436.39,1215.64 1436.98,1215.34 1437.56,1216.68 1438.15,1216.41 1438.74,1217.35 1439.32,1216 1439.91,1215.83 1440.5,1215.85 1441.08,1214.2 1441.67,1211.88 1442.25,1210.65 1442.84,1210.02 1443.43,1210.49 1444.01,1210.91 1444.6,1213.82 1445.19,1213.83 1445.77,1214.05 1446.36,1214.24 1446.95,1214.38 1447.53,1215.76 1448.12,1215.87 1448.7,1215.66 1449.29,1216.97 1449.88,1215.51 1450.46,1216.44 1451.05,1218.93 1451.64,1218.44 1452.22,1218.34 1452.81,1217.94 1453.4,1216.61 1453.98,1216.47 1454.57,1216.11 1455.16,1215.93 1455.74,1217.28 1456.33,1217.31 1456.91,1219.75 1457.5,1219.2 1458.09,1218.82 1458.67,1219.85 1459.26,1219.68 1459.85,1218.38 1460.43,1218.39 1461.02,1215.55 1461.61,1213.86 1462.19,1211.46 1462.78,1211.58 1463.37,1213.02 1463.95,1214.28 1464.54,1211.63 1465.12,1212.92 1465.71,1216.8 1466.3,1215.41 1466.88,1217.85 1467.47,1216.48 1468.06,1217.45 1468.64,1217.13 1469.23,1215.6 1469.82,1216.69 1470.4,1218.02 1470.99,1216.47 1471.57,1216.39 1472.16,1219.01 1472.75,1217.68 1473.33,1214.74 1473.92,1214.4 1474.51,1213.25 1475.09,1215.82 1475.68,1213.25 1476.27,1213.13 1476.85,1214.59 1477.44,1211.82 1478.03,1216.8 1478.61,1216.57 1479.2,1216.74 1479.78,1217.9 1480.37,1219.15 1480.96,1219.22 1481.54,1220.33 1482.13,1221.15 1482.72,1217.93 1483.3,1220.01 1483.89,1218.64 1484.48,1219.4 1485.06,1220.38 1485.65,1222.68 1486.24,1223.55 1486.82,1223.02 1487.41,1219.86 1487.99,1219.66 1488.58,1219.37 1489.17,1217.83 1489.75,1216.25 1490.34,1216.27 1490.93,1217.52 1491.51,1218.94 1492.1,1217.67 1492.69,1218.71 1493.27,1218.65 1493.86,1219.7 1494.45,1219.42 1495.03,1221.28 1495.62,1218.26 1496.2,1217.89 1496.79,1219.02 1497.38,1216.45 1497.96,1213.73 1498.55,1213.67 1499.14,1213.81 1499.72,1215.11 1500.31,1215.01 1500.9,1213.81 1501.48,1209.82 1502.07,1208.76 1502.65,1210.44 1503.24,1211.79 1503.83,1212.06 1504.41,1212.15 1505,1212.1 1505.59,1214.95 1506.17,1214.81 1506.76,1214.72 1507.35,1214.48 1507.93,1213.5 1508.52,1213.32 1509.11,1217.24 1509.69,1221 1510.28,1219.42 1510.86,1216.54 1511.45,1214.77 1512.04,1214.65 1512.62,1214.8 1513.21,1215.87 1513.8,1214.75 1514.38,1214.56 1514.97,1215.87 1515.56,1218.58 1516.14,1217.34 1516.73,1215.88 1517.32,1214.9 1517.9,1213.78 1518.49,1212.34 1519.07,1211.34 1519.66,1211.69 1520.25,1210.61 1520.83,1210.63 1521.42,1211.99 1522.01,1210.86 1522.59,1209.95 1523.18,1210.33 1523.77,1210.55 1524.35,1212.04 1524.94,1212.32 1525.52,1211.12 1526.11,1211.48 1526.7,1214.43 1527.28,1212.01 1527.87,1211.97 1528.46,1212.21 1529.04,1210.88 1529.63,1212.54 1530.22,1212.53 1530.8,1212.81 1531.39,1212.74 1531.98,1214.11 1532.56,1215.57 1533.15,1212.95 1533.73,1212.95 1534.32,1213.31 1534.91,1214.4 1535.49,1214.33 1536.08,1214.44 1536.67,1217.08 1537.25,1215.53 1537.84,1212.77 1538.43,1210.15 1539.01,1210.4 1539.6,1213.27 1540.19,1212 1540.77,1210.68 1541.36,1211.03 1541.94,1212.5 1542.53,1215.04 1543.12,1216.4 1543.7,1216.14 1544.29,1214.81 1544.88,1217.4 1545.46,1216.15 1546.05,1218.46 1546.64,1216.91 1547.22,1218.21 1547.81,1218 1548.4,1216.47 1548.98,1213.72 1549.57,1211.37 1550.15,1211.54 1550.74,1210.5 1551.33,1210.77 1551.91,1210.96 1552.5,1211.23 1553.09,1210.08 1553.67,1210.32 1554.26,1209.1 1554.85,1210.39 1555.43,1211.94 1556.02,1212.19 1556.6,1212.47 1557.19,1212.54 1557.78,1211.36 1558.36,1211.47 1558.95,1215.33 1559.54,1212.84 1560.12,1207.51 1560.71,1209.33 1561.3,1211.17 1561.88,1212.59 1562.47,1211.48 1563.06,1210.32 1563.64,1213.01 1564.23,1211.59 1564.81,1211.79 1565.4,1211.78 1565.99,1211.9 1566.57,1210.43 1567.16,1210.74 1567.75,1211.97 1568.33,1213.37 1568.92,1213.29 1569.51,1215.91 1570.09,1217.07 1570.68,1216.77 1571.27,1217.81 1571.85,1217.47 1572.44,1217.23 1573.02,1219.26 1573.61,1213.99 1574.2,1215.26 1574.78,1215.12 1575.37,1213.78 1575.96,1212.53 1576.54,1212.84 1577.13,1215.25 1577.72,1215.46 1578.3,1215.66 1578.89,1214.27 1579.47,1213.08 1580.06,1214.37 1580.65,1215.68 1581.23,1213.18 1581.82,1213.01 1582.41,1211.81 1582.99,1214.87 1583.58,1213.8 1584.17,1213.69 1584.75,1214.83 1585.34,1214.88 1585.93,1213.56 1586.51,1212.45 1587.1,1216.46 1587.68,1215.18 1588.27,1214.99 1588.86,1213.54 1589.44,1213.72 1590.03,1216.29 1590.62,1216.36 1591.2,1216.51 1591.79,1220.11 1592.38,1222.3 1592.96,1220.66 1593.55,1219.2 1594.14,1220.26 1594.72,1221.29 1595.31,1219.69 1595.89,1219.55 1596.48,1220.83 1597.07,1220.29 1597.65,1221.38 1598.24,1219.68 1598.83,1217.83 1599.41,1218.87 1600,1216.1 1600.59,1214.7 1601.17,1209.73 1601.76,1211.23 1602.34,1212.63 1602.93,1212.79 1603.52,1213.16 1604.1,1213.32 1604.69,1214.58 1605.28,1216.06 1605.86,1217.17 1606.45,1215.25 1607.04,1215.43 1607.62,1214.06 1608.21,1215.21 1608.8,1215.23 1609.38,1212.14 1609.97,1212.26 1610.55,1211.01 1611.14,1211.1 1611.73,1212.45 1612.31,1212.57 1612.9,1212.6 1613.49,1211.63 1614.07,1213.13 1614.66,1213.39 1615.25,1213.54 1615.83,1211.21 1616.42,1211.5 1617.01,1210.37 1617.59,1211.98 1618.18,1213.5 1618.76,1211.01 1619.35,1211.16 1619.94,1215.04 1620.52,1216.57 1621.11,1216.43 1621.7,1216.18 1622.28,1217.43 1622.87,1217.13 1623.46,1218.22 1624.04,1218.24 1624.63,1216.94 1625.22,1218.06 1625.8,1216.48 1626.39,1213.78 1626.97,1211.22 1627.56,1213 1628.15,1212.78 1628.73,1213.17 1629.32,1214.66 1629.91,1214.68 1630.49,1214.55 1631.08,1213.09 1631.67,1215.67 1632.25,1215.56 1632.84,1219.16 1633.42,1220.27 1634.01,1218.5 1634.6,1215.72 1635.18,1216.92 1635.77,1215.32 1636.36,1215.52 1636.94,1218.02 1637.53,1219.35 1638.12,1217.81 1638.7,1217.79 1639.29,1221.39 1639.88,1222.14 1640.46,1227.74 1641.05,1228.25 1641.63,1226.25 1642.22,1225.55 1642.81,1225.07 1643.39,1223.28 1643.98,1224.02 1644.57,1221.99 1645.15,1220.09 1645.74,1217.28 1646.33,1215.96 1646.91,1214.52 1647.5,1217.11 1648.09,1215.58 1648.67,1216.87 1649.26,1215.8 1649.84,1215.48 1650.43,1213.9 1651.02,1213.71 1651.6,1213.75 1652.19,1214.72 1652.78,1214.57 1653.36,1214.51 1653.95,1213.53 1654.54,1214.94 1655.12,1214.78 1655.71,1213.45 1656.29,1212.4 1656.88,1212.35 1657.47,1213.82 1658.05,1212.42 1658.64,1213.71 1659.23,1213.71 1659.81,1213.72 1660.4,1213.96 1660.99,1216.64 1661.57,1216.28 1662.16,1214.76 1662.75,1214.61 1663.33,1213.29 1663.92,1213.35 1664.5,1210.84 1665.09,1211.2 1665.68,1208.53 1666.26,1207.55 1666.85,1207.76 1667.44,1206.92 1668.02,1207.32 1668.61,1204.93 1669.2,1206.88 1669.78,1206.08 1670.37,1206.29 1670.96,1207.93 1671.54,1208.02 1672.13,1210.76 1672.71,1212.18 1673.3,1211.13 1673.89,1208.76 1674.47,1210.58 1675.06,1210.83 1675.65,1213.27 1676.23,1213.23 1676.82,1214.36 1677.41,1214.33 1677.99,1213.26 1678.58,1215.74 1679.17,1218.38 1679.75,1222.07 1680.34,1223.05 1680.92,1222.73 1681.51,1221.13 1682.1,1220.99 1682.68,1219.34 1683.27,1218.91 1683.86,1217.53 1684.44,1220.08 1685.03,1216.13 1685.62,1216.19 1686.2,1214.86 1686.79,1213.66 1687.37,1213.56 1687.96,1213.56 1688.55,1213.78 1689.13,1213.94 1689.72,1208.96 1690.31,1207.58 1690.89,1209.35 1691.48,1209.69 1692.07,1210.13 1692.65,1211.58 1693.24,1211.84 1693.83,1210.83 1694.41,1212.12 1695,1209.75 1695.58,1209.95 1696.17,1210.04 1696.76,1210.12 1697.34,1213.07 1697.93,1213.38 1698.52,1213.22 1699.1,1213.28 1699.69,1214.86 1700.28,1210.95 1700.86,1214.93 1701.45,1214.87 1702.04,1212.32 1702.62,1212.45 1703.21,1209.79 1703.79,1208.82 1704.38,1210.45 1704.97,1210.91 1705.55,1209.85 1706.14,1213.7 1706.73,1212.52 1707.31,1213.86 1707.9,1216.41 1708.49,1216.29 1709.07,1215.05 1709.66,1213.69 1710.24,1215.3 1710.83,1216.21 1711.42,1213.63 1712,1215.29 1712.59,1212.73 1713.18,1212.66 1713.76,1212.63 1714.35,1211.62 1714.94,1210.55 1715.52,1208.49 1716.11,1207.51 1716.7,1210.49 1717.28,1209.43 1717.87,1209.56 1718.45,1208.71 1719.04,1210.21 1719.63,1210.33 1720.21,1213.17 1720.8,1213.23 1721.39,1213.34 1721.97,1213.4 1722.56,1213.54 1723.15,1216.25 1723.73,1219.85 1724.32,1222.23 1724.91,1222 1725.49,1221.71 1726.08,1221.52 1726.66,1219.77 1727.25,1219.41 1727.84,1220.6 1728.42,1223.87 1729.01,1220.92 1729.6,1220.71 1730.18,1217.88 1730.77,1217.39 1731.36,1214.63 1731.94,1214.83 1732.53,1219.12 1733.11,1217.71 1733.7,1215 1734.29,1212.34 1734.87,1216.25 1735.46,1216.03 1736.05,1217.22 1736.63,1218.3 1737.22,1219.35 1737.81,1218.98 1738.39,1218.65 1738.98,1218.27 1739.57,1220.63 1740.15,1220.21 1740.74,1218.71 1741.32,1223.85 1741.91,1224.47 1742.5,1222.77 1743.08,1221.05 1743.67,1219.58 1744.26,1218.08 1744.84,1216.65 1745.43,1216.56 1746.02,1215.11 1746.6,1213.68 1747.19,1212.29 1747.78,1209.96 1748.36,1207.91 1748.95,1206.92 1749.53,1208.59 1750.12,1208.53 1750.71,1208.46 1751.29,1207.41 1751.88,1206.47 1752.47,1208.19 1753.05,1207.08 1753.64,1212.4 1754.23,1211.33 1754.81,1211.56 1755.4,1211.96 1755.99,1213.57 1756.57,1213.63 1757.16,1213.58 1757.74,1215.98 1758.33,1217.31 1758.92,1213.19 1759.5,1213.23 1760.09,1210.52 1760.68,1210.98 1761.26,1215.04 1761.85,1214.99 1762.44,1216.28 1763.02,1213.63 1763.61,1213.68 1764.19,1212.41 1764.78,1212.47 1765.37,1213.93 1765.95,1212.65 1766.54,1211.35 1767.13,1210.27 1767.71,1209.43 1768.3,1208.57 1768.89,1211.49 1769.47,1215.27 1770.06,1212.54 1770.65,1212.65 1771.23,1212.8 1771.82,1216.61 1772.4,1215.21 1772.99,1213.87 1773.58,1215.13 1774.16,1215.24 1774.75,1213.79 1775.34,1215.25 1775.92,1215.38 1776.51,1215.51 1777.1,1215.71 1777.68,1216.84 1778.27,1215.32 1778.86,1215.04 1779.44,1213.75 1780.03,1212.48 1780.61,1213.73 1781.2,1212.38 1781.79,1212.62 1782.37,1212.65 1782.96,1211.38 1783.55,1210.16 1784.13,1209.41 1784.72,1206.96 1785.31,1207.61 1785.89,1206.69 1786.48,1207.06 1787.06,1204.88 1787.65,1205.4 1788.24,1205.98 1788.82,1209.28 1789.41,1209.6 1790,1211.21 1790.58,1210.41 1791.17,1213.29 1791.76,1213.42 1792.34,1213.58 1792.93,1213.47 1793.52,1212.43 1794.1,1211.44 1794.69,1211.76 1795.27,1212.24 1795.86,1212.37 1796.45,1212.38 1797.03,1208.94 1797.62,1209.49 1798.21,1208.74 1798.79,1209.85 1799.38,1208.75 1799.97,1209.16 1800.55,1207.96 1801.14,1206.18 1801.73,1206.49 1802.31,1207.06 1802.9,1207.59 1803.48,1209.39 1804.07,1209.72 1804.66,1208.88 1805.24,1209.25 1805.83,1209.7 1806.42,1208.59 1807,1208.9 1807.59,1210.71 1808.18,1211.11 1808.76,1209.99 1809.35,1211.64 1809.94,1213.21 1810.52,1212.23 1811.11,1210.01 1811.69,1211.35 1812.28,1211.38 1812.87,1213.03 1813.45,1213.16 1814.04,1210.51 1814.63,1209.6 1815.21,1211.36 1815.8,1211.59 1816.39,1214.57 1816.97,1215.79 1817.56,1217.08 1818.14,1218.32 1818.73,1218.21 1819.32,1216.76 1819.9,1217.68 1820.49,1217.48 1821.08,1217.44 1821.66,1217.23 1822.25,1216.03 1822.84,1217.22 1823.42,1218.24 1824.01,1217.98 1824.6,1220.22 1825.18,1220.97 1825.77,1220.69 1826.35,1220.53 1826.94,1219.1 1827.53,1218.76 1828.11,1219.93 1828.7,1219.53 1829.29,1220.36 1829.87,1220.29 1830.46,1220.98 1831.05,1219.46 1831.63,1219.16 1832.22,1217.65 1832.81,1217.36 1833.39,1218.08 1833.98,1219.11 1834.56,1218.85 1835.15,1219.86 1835.74,1218.32 1836.32,1220.66 1836.91,1220.27 1837.5,1221.09 1838.08,1221.81 1838.67,1221.44 1839.26,1222.2 1839.84,1221.61 1840.43,1219.99 1841.01,1217.19 1841.6,1214.28 1842.19,1215.89 1842.77,1214.09 1843.36,1215.2 1843.95,1215.09 1844.53,1216.24 1845.12,1215.06 1845.71,1212.35 1846.29,1212.39 1846.88,1212.23 1847.47,1211.07 1848.05,1211.13 1848.64,1212.61 1849.22,1216.26 1849.81,1217.11 1850.4,1215.79 1850.98,1217.11 1851.57,1214.42 1852.16,1215.81 1852.74,1214.98 1853.33,1215.09 1853.92,1215.12 1854.5,1215.15 1855.09,1216.45 1855.68,1220 1856.26,1219.79 1856.85,1219.45 1857.43,1216.64 1858.02,1216.37 1858.61,1215.09 1859.19,1216.54 1859.78,1213.49 1860.37,1215.15 1860.95,1212.5 1861.54,1213.74 1862.13,1208.92 1862.71,1209.25 1863.3,1210.96 1863.88,1211.1 1864.47,1212.67 1865.06,1211.46 1865.64,1212.71 1866.23,1212.86 1866.82,1211.83 1867.4,1215.64 1867.99,1214.42 1868.58,1214.52 1869.16,1215.73 1869.75,1213.08 1870.34,1215.63 1870.92,1214.42 1871.51,1214.65 1872.09,1214.73 1872.68,1214.73 1873.27,1212.08 1873.85,1212.23 1874.44,1213.52 1875.03,1214.75 1875.61,1215.65 1876.2,1218.18 1876.79,1217.88 1877.37,1217.88 1877.96,1214 1878.55,1215.01 1879.13,1217.44 1879.72,1215.58 1880.3,1215.69 1880.89,1210.52 1881.48,1210.63 1882.06,1210.92 1882.65,1212.39 1883.24,1212.42 1883.82,1210.04 1884.41,1210.28 1885,1214.1 1885.58,1211.55 1886.17,1215.59 1886.76,1216.75 1887.34,1218.85 1887.93,1221.18 1888.51,1220.71 1889.1,1220.37 1889.69,1221.42 1890.27,1217.26 1890.86,1218.24 1891.45,1220.39 1892.03,1221.34 1892.62,1220.85 1893.21,1220.57 1893.79,1220.5 1894.38,1220.54 1894.96,1221.56 1895.55,1221.16 1896.14,1222.07 1896.72,1218.85 1897.31,1220.19 1897.9,1219.95 1898.48,1219.73 1899.07,1218.3 1899.66,1218.1 1900.24,1218.03 1900.83,1219.48 1901.42,1221.41 1902,1222.17 1902.59,1220.37 1903.17,1218.58 1903.76,1215.83 1904.35,1216.02 1904.93,1217.17 1905.52,1215.9 1906.11,1213.53 1906.69,1214.82 1907.28,1212.4 1907.87,1216.3 1908.45,1219.05 1909.04,1220.32 1909.63,1221.42 1910.21,1222.16 1910.8,1219.33 1911.38,1220.37 1911.97,1217.26 1912.56,1219.81 1913.14,1219.24 1913.73,1219.05 1914.32,1218.59 1914.9,1218.44 1915.49,1219.12 1916.08,1217.61 1916.66,1213.41 1917.25,1213.48 1917.83,1214.81 1918.42,1214.87 1919.01,1213.66 1919.59,1211.04 1920.18,1211.05 1920.77,1212.39 1921.35,1208.4 1921.94,1207.28 1922.53,1207.5 1923.11,1208.09 1923.7,1208.65 1924.29,1208.84 1924.87,1209.17 1925.46,1209.64 1926.04,1211.18 1926.63,1211.52 1927.22,1211.62 1927.8,1209.07 1928.39,1209.49 1928.98,1209.78 1929.56,1208.69 1930.15,1210.36 1930.74,1211.57 1931.32,1212.88 1931.91,1210.33 1932.5,1210.57 1933.08,1210.56 1933.67,1210.79 1934.25,1209.51 1934.84,1213.45 1935.43,1216.18 1936.01,1216.43 1936.6,1216.46 1937.19,1217.57 1937.77,1217.37 1938.36,1215.68 1938.95,1214.35 1939.53,1214.58 1940.12,1213.19 1940.71,1213.4 1941.29,1216.26 1941.88,1215.05 1942.46,1211.2 1943.05,1211.54 1943.64,1210.58 1944.22,1210.7 1944.81,1210.82 1945.4,1208.39 1945.98,1207.64 1946.57,1209.57 1947.16,1211.22 1947.74,1211.14 1948.33,1211.46 1948.91,1210.25 1949.5,1209.1 1950.09,1210.8 1950.67,1209.63 1951.26,1209.79 1951.85,1210.06 1952.43,1210.07 1953.02,1211.9 1953.61,1209.56 1954.19,1211.37 1954.78,1213.13 1955.37,1214.75 1955.95,1215.95 1956.54,1211.64 1957.12,1212.08 1957.71,1213.58 1958.3,1213.6 1958.88,1213.68 1959.47,1215 1960.06,1213.73 1960.64,1213.58 1961.23,1212.41 1961.82,1208.59 1962.4,1209.01 1962.99,1206.98 1963.58,1207.31 1964.16,1207.87 1964.75,1208.32 1965.33,1209.89 1965.92,1208.76 1966.51,1208.01 1967.09,1210.99 1967.68,1212.29 1968.27,1212.21 1968.85,1212.38 1969.44,1214.14 1970.03,1214.12 1970.61,1214.28 1971.2,1214.04 1971.78,1212.82 1972.37,1210.13 1972.96,1211.36 1973.54,1212.97 1974.13,1215.54 1974.72,1214.39 1975.3,1217.14 1975.89,1219.8 1976.48,1220.56 1977.06,1220.16 1977.65,1220.05 1978.24,1218.34 1978.82,1218.41 1979.41,1217.02 1979.99,1216.68 1980.58,1216.19 1981.17,1214.77 1981.75,1214.86 1982.34,1214.91 1982.93,1214.9 1983.51,1216.5 1984.1,1216.4 1984.69,1217.58 1985.27,1217.37 1985.86,1218.6 1986.45,1219.73 1987.03,1220.84 1987.62,1217.92 1988.2,1216.31 1988.79,1217.36 1989.38,1215.46 1989.96,1215.2 1990.55,1216.55 1991.14,1218.76 1991.72,1221.34 1992.31,1219.71 1992.9,1218.09 1993.48,1216.66 1994.07,1219.07 1994.65,1218.91 1995.24,1217.48 1995.83,1217.19 1996.41,1215.45 1997,1215.14 1997.59,1213.79 1998.17,1209.79 1998.76,1211.47 1999.35,1211.66 1999.93,1211.54 2000.52,1211.68 2001.11,1210.44 2001.69,1210.84 2002.28,1209.82 2002.86,1210.09 2003.45,1212.98 2004.04,1212.97 2004.62,1214.17 2005.21,1211.98 2005.8,1213.26 2006.38,1214.74 2006.97,1214.83 2007.56,1217.45 2008.14,1217.14 2008.73,1219.33 2009.32,1220.5 2009.9,1220.09 2010.49,1221.28 2011.07,1218.38 2011.66,1219.64 2012.25,1219.91 2012.83,1217.35 2013.42,1216.32 2014.01,1218.94 2014.59,1218.61 2015.18,1220.94 2015.77,1221.93 2016.35,1222.87 2016.94,1222.3 2017.53,1223.16 2018.11,1222.67 2018.7,1219.57 2019.28,1218.04 2019.87,1217.71 2020.46,1213.91 2021.04,1211.25 2021.63,1211.39 2022.22,1211.51 2022.8,1212.71 2023.39,1213.95 2023.98,1214.06 2024.56,1215.2 2025.15,1216.4 2025.73,1217.3 2026.32,1215.89 2026.91,1218.12 2027.49,1217.64 2028.08,1216.26 2028.67,1218.89 2029.25,1217.33 2029.84,1215.96 2030.43,1215.75 2031.01,1215.72 2031.6,1218.26 2032.19,1220.86 2032.77,1219.47 2033.36,1219.06 2033.94,1220.22 2034.53,1217.46 2035.12,1216.12 2035.7,1216.04 2036.29,1213.28 2036.88,1210.97 2037.46,1211.19 2038.05,1211.25 2038.64,1210.09 2039.22,1211.58 2039.81,1212.96 2040.4,1213.09 2040.98,1211.93 2041.57,1213.55 2042.15,1213.81 2042.74,1213.82 2043.33,1212.29 2043.91,1215.05 2044.5,1214.99 2045.09,1215.02 2045.67,1213.77 2046.26,1213.98 2046.85,1214.09 2047.43,1216.4 2048.02,1217.09 2048.6,1217.02 2049.19,1216.82 2049.78,1218.03 2050.36,1218.91 2050.95,1217.58 2051.54,1219.95 2052.12,1216.99 2052.71,1215.73 2053.3,1213.21 2053.88,1213.16 2054.47,1211.9 2055.06,1210.73 2055.64,1208.36 2056.23,1207.41 2056.81,1207.61 2057.4,1206.74 2057.99,1208.34 2058.57,1208.8 2059.16,1212.89 2059.75,1213.01 2060.33,1212.77 2060.92,1210.31 2061.51,1209.19 2062.09,1212.16 2062.68,1209.83 2063.27,1210.45 2063.85,1210.62 2064.44,1208.42 2065.02,1208.98 2065.61,1205.43 2066.2,1206.04 2066.78,1206.5 2067.37,1206.89 2067.96,1209.99 2068.54,1210.34 2069.13,1209.52 2069.72,1212.29 2070.3,1214.97 2070.89,1213.77 2071.48,1213.89 2072.06,1216.68 2072.65,1219.2 2073.23,1218.94 2073.82,1218.51 2074.41,1215.71 2074.99,1218.33 2075.58,1217.8 2076.17,1213.78 2076.75,1213.8 2077.34,1216.17 2077.93,1214.95 2078.51,1216.44 2079.1,1213.8 2079.68,1213.84 2080.27,1213.79 2080.86,1212.62 2081.44,1214.03 2082.03,1212.79 2082.62,1210.37 2083.2,1209.31 2083.79,1213.6 2084.38,1213.81 2084.96,1213.97 2085.55,1213.61 2086.14,1213.63 2086.72,1213.83 2087.31,1213.73 2087.89,1215.01 2088.48,1215.11 2089.07,1212.79 2089.65,1214.01 2090.24,1215.06 2090.83,1214.85 2091.41,1216.05 2092,1214.81 2092.59,1210.89 2093.17,1212.36 2093.76,1213.52 2094.35,1213.73 2094.93,1213.73 2095.52,1214.9 2096.1,1216.18 2096.69,1216.12 2097.28,1215.95 2097.86,1215.71 2098.45,1215.83 2099.04,1215.99 2099.62,1216.99 2100.21,1218.25 2100.8,1216.6 2101.38,1217.58 2101.97,1217.52 2102.55,1217.46 2103.14,1217.41 2103.73,1215.78 2104.31,1214.1 2104.9,1214.07 2105.49,1218.83 2106.07,1222.55 2106.66,1220.61 2107.25,1217.71 2107.83,1218.65 2108.42,1218.42 2109.01,1215.52 2109.59,1214.23 2110.18,1215.24 2110.76,1215.08 2111.35,1213.51 2111.94,1213.52 2112.52,1212.25 2113.11,1213.73 2113.7,1212.33 2114.28,1213.59 2114.87,1210.93 2115.46,1210.91 2116.04,1212.12 2116.63,1213.4 2117.22,1213.33 2117.8,1214.52 2118.39,1213.34 2118.97,1213.45 2119.56,1212.38 2120.15,1211.38 2120.73,1214.17 2121.32,1212.99 2121.91,1212.97 2122.49,1213.23 2123.08,1213.04 2123.67,1211.78 2124.25,1211.8 2124.84,1210.52 2125.42,1210.7 2126.01,1211.04 2126.6,1212.92 2127.18,1212.97 2127.77,1211.74 2128.36,1208.02 2128.94,1209.49 2129.53,1209.6 2130.12,1210.99 2130.7,1212.63 2131.29,1216.24 2131.88,1216.21 2132.46,1217.54 2133.05,1219.55 2133.63,1220.43 2134.22,1220.27 2134.81,1220.13 2135.39,1218.66 2135.98,1220.93 2136.57,1216.97 2137.15,1216.88 2137.74,1218.25 2138.33,1219.39 2138.91,1220.37 2139.5,1220.03 2140.09,1217.21 2140.67,1216.94 2141.26,1215.7 2141.84,1214.2 2142.43,1214.11 2143.02,1214.02 2143.6,1214 2144.19,1212.74 2144.78,1213.83 2145.36,1214.86 2145.95,1213.63 2146.54,1216.36 2147.12,1218.89 2147.71,1219.66 2148.3,1216.98 2148.88,1211.67 2149.47,1213.07 2150.05,1212.01 2150.64,1214.78 2151.23,1216.17 2151.81,1214.83 2152.4,1216.28 2152.99,1218.62 2153.57,1214.72 2154.16,1214.87 2154.75,1217.45 2155.33,1216.33 2155.92,1214.88 2156.5,1214.78 2157.09,1216.31 2157.68,1217.45 2158.26,1218.66 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1214.76 L986.612 1214.76 L987.198 1214.76 L987.785 1214.76 L988.371 1214.76 L988.957 1214.76 L989.544 1214.76 L990.13 1214.76 L990.717 1214.76 L991.303 1214.76 L991.889 1214.76 L992.476 1214.76 L993.062 1214.76 L993.649 1214.76 L994.235 1214.76 L994.822 1214.76 L995.408 1214.76 L995.994 1214.76 L996.581 1214.76 L997.167 1214.76 L997.754 1214.76 L998.34 1214.76 L998.926 1214.76 L999.513 1214.76 L1000.1 1214.76 L1000.69 1214.76 L1001.27 1214.76 L1001.86 1214.76 L1002.44 1214.76 L1003.03 1214.76 L1003.62 1214.76 L1004.2 1214.76 L1004.79 1214.76 L1005.38 1214.76 L1005.96 1214.76 L1006.55 1214.76 L1007.14 1214.76 L1007.72 1214.76 L1008.31 1214.76 L1008.9 1214.76 L1009.48 1214.76 L1010.07 1214.76 L1010.65 1214.76 L1011.24 1214.76 L1011.83 1214.76 L1012.41 1214.76 L1013 1214.76 L1013.59 1214.76 L1014.17 1214.76 L1014.76 1214.76 L1015.35 1214.76 L1015.93 1214.76 L1016.52 1214.76 L1017.11 1214.76 L1017.69 1214.76 L1018.28 1214.76 L1018.86 1214.76 L1019.45 1214.76 L1020.04 1214.76 L1020.62 1214.76 L1021.21 1214.76 L1021.8 1214.76 L1022.38 1214.76 L1022.97 1214.76 L1023.56 1214.76 L1024.14 1214.76 L1024.73 1214.76 L1025.32 1214.76 L1025.9 1214.76 L1026.49 1214.76 L1027.07 1214.76 L1027.66 1214.76 L1028.25 1214.76 L1028.83 1214.76 L1029.42 1214.76 L1030.01 1214.76 L1030.59 1214.76 L1031.18 1214.76 L1031.77 1214.76 L1032.35 1214.76 L1032.94 1214.76 L1033.52 1214.76 L1034.11 1214.76 L1034.7 1214.76 L1035.28 1214.76 L1035.87 1214.76 L1036.46 1214.76 L1037.04 1214.76 L1037.63 1214.76 L1038.22 1214.76 L1038.8 1214.76 L1039.39 1214.76 L1039.98 1214.76 L1040.56 1214.76 L1041.15 1214.76 L1041.73 1214.76 L1042.32 1214.76 L1042.91 1214.76 L1043.49 1214.76 L1044.08 1214.76 L1044.67 1214.76 L1045.25 1214.76 L1045.84 1214.76 L1046.43 1214.76 L1047.01 1214.76 L1047.6 1214.76 L1048.19 1214.76 L1048.77 1214.76 L1049.36 1214.76 L1049.94 1214.76 L1050.53 1214.76 L1051.12 1214.76 L1051.7 1214.76 L1052.29 1214.76 L1052.88 1214.76 L1053.46 1214.76 L1054.05 1214.76 L1054.64 1214.76 L1055.22 1214.76 L1055.81 1214.76 L1056.39 1214.76 L1056.98 1214.76 L1057.57 1214.76 L1058.15 1214.76 L1058.74 1214.76 L1059.33 1214.76 L1059.91 1214.76 L1060.5 1214.76 L1061.09 1214.76 L1061.67 1214.76 L1062.26 1214.76 L1062.85 1214.76 L1063.43 1214.76 L1064.02 1214.76 L1064.6 1214.76 L1065.19 1214.76 L1065.78 1214.76 L1066.36 1214.76 L1066.95 1214.76 L1067.54 1214.76 L1068.12 1214.76 L1068.71 1214.76 L1069.3 1214.76 L1069.88 1214.76 L1070.47 1214.76 L1071.06 1214.76 L1071.64 1214.76 L1072.23 1214.76 L1072.81 1214.76 L1073.4 1214.76 L1073.99 1214.76 L1074.57 1214.76 L1075.16 1214.76 L1075.75 1214.76 L1076.33 1214.76 L1076.92 1214.76 L1077.51 1214.76 L1078.09 1214.76 L1078.68 1214.76 L1079.26 1214.76 L1079.85 1214.76 L1080.44 1214.76 L1081.02 1214.76 L1081.61 1214.76 L1082.2 1214.76 L1082.78 1214.76 L1083.37 1214.76 L1083.96 1214.76 L1084.54 1214.76 L1085.13 1214.76 L1085.72 1214.76 L1086.3 1214.76 L1086.89 1214.76 L1087.47 1214.76 L1088.06 1214.76 L1088.65 1214.76 L1089.23 1214.76 L1089.82 1214.76 L1090.41 1214.76 L1090.99 1214.76 L1091.58 1214.76 L1092.17 1214.76 L1092.75 1214.76 L1093.34 1214.76 L1093.93 1214.76 L1094.51 1214.76 L1095.1 1214.76 L1095.68 1214.76 L1096.27 1214.76 L1096.86 1214.76 L1097.44 1214.76 L1098.03 1214.76 L1098.62 1214.76 L1099.2 1214.76 L1099.79 1214.76 L1100.38 1214.76 L1100.96 1214.76 L1101.55 1214.76 L1102.14 1214.76 L1102.72 1214.76 L1103.31 1214.76 L1103.89 1214.76 L1104.48 1214.76 L1105.07 1214.76 L1105.65 1214.76 L1106.24 1214.76 L1106.83 1214.76 L1107.41 1214.76 L1108 1214.76 L1108.59 1214.76 L1109.17 1214.76 L1109.76 1214.76 L1110.34 1214.76 L1110.93 1214.76 L1111.52 1214.76 L1112.1 1214.76 L1112.69 1214.76 L1113.28 1214.76 L1113.86 1214.76 L1114.45 1214.76 L1115.04 1214.76 L1115.62 1214.76 L1116.21 1214.76 L1116.8 1214.76 L1117.38 1214.76 L1117.97 1214.76 L1118.55 1214.76 L1119.14 1214.76 L1119.73 1214.76 L1120.31 1214.76 L1120.9 1214.76 L1121.49 1214.76 L1122.07 1214.76 L1122.66 1214.76 L1123.25 1214.76 L1123.83 1214.76 L1124.42 1214.76 L1125.01 1214.76 L1125.59 1214.76 L1126.18 1214.76 L1126.76 1214.76 L1127.35 1214.76 L1127.94 1214.76 L1128.52 1214.76 L1129.11 1214.76 L1129.7 1214.76 L1130.28 1214.76 L1130.87 1214.76 L1131.46 1214.76 L1132.04 1214.76 L1132.63 1214.76 L1133.21 1214.76 L1133.8 1214.76 L1134.39 1214.76 L1134.97 1214.76 L1135.56 1214.76 L1136.15 1214.76 L1136.73 1214.76 L1137.32 1214.76 L1137.91 1214.76 L1138.49 1214.76 L1139.08 1214.76 L1139.67 1214.76 L1140.25 1214.76 L1140.84 1214.76 L1141.42 1214.76 L1142.01 1214.76 L1142.6 1214.76 L1143.18 1214.76 L1143.77 1214.76 L1144.36 1214.76 L1144.94 1214.76 L1145.53 1214.76 L1146.12 1214.76 L1146.7 1214.76 L1147.29 1214.76 L1147.88 1214.76 L1148.46 1214.76 L1149.05 1214.76 L1149.63 1214.76 L1150.22 1214.76 L1150.81 1214.76 L1151.39 1214.76 L1151.98 1214.76 L1152.57 1214.76 L1153.15 1214.76 L1153.74 1214.76 L1154.33 1214.76 L1154.91 1214.76 L1155.5 1214.76 L1156.09 1214.76 L1156.67 1214.76 L1157.26 1214.76 L1157.84 1214.76 L1158.43 1214.76 L1159.02 1214.76 L1159.6 1214.76 L1160.19 1214.76 L1160.78 1214.76 L1161.36 1214.76 L1161.95 1214.76 L1162.54 1214.76 L1163.12 1214.76 L1163.71 1214.76 L1164.29 1214.76 L1164.88 1214.76 L1165.47 1214.76 L1166.05 1214.76 L1166.64 1214.76 L1167.23 1214.76 L1167.81 1214.76 L1168.4 1214.76 L1168.99 1214.76 L1169.57 1214.76 L1170.16 1214.76 L1170.75 1214.76 L1171.33 1214.76 L1171.92 1214.76 L1172.5 1214.76 L1173.09 1214.76 L1173.68 1214.76 L1174.26 1214.76 L1174.85 1214.76 L1175.44 1214.76 L1176.02 1214.76 L1176.61 1214.76 L1177.2 1214.76 L1177.78 1214.76 L1178.37 1214.76 L1178.96 1214.76 L1179.54 1214.76 L1180.13 1214.76 L1180.71 1214.76 L1181.3 1214.76 L1181.89 1214.76 L1182.47 1214.76 L1183.06 1214.76 L1183.65 1214.76 L1184.23 1214.76 L1184.82 1214.76 L1185.41 1214.76 L1185.99 1214.76 L1186.58 1214.76 L1187.16 1214.76 L1187.75 1214.76 L1188.34 1214.76 L1188.92 1214.76 L1189.51 1214.76 L1190.1 1214.76 L1190.68 1214.76 L1191.27 1214.76 L1191.86 1214.76 L1192.44 1214.76 L1193.03 1214.76 L1193.62 1214.76 L1194.2 1214.76 L1194.79 1214.76 L1195.37 1214.76 L1195.96 1214.76 L1196.55 1214.76 L1197.13 1214.76 L1197.72 1214.76 L1198.31 1214.76 L1198.89 1214.76 L1199.48 1214.76 L1200.07 1214.76 L1200.65 1214.76 L1201.24 1214.76 L1201.83 1214.76 L1202.41 1214.76 L1203 1214.76 L1203.58 1214.76 L1204.17 1214.76 L1204.76 1214.76 L1205.34 1214.76 L1205.93 1214.76 L1206.52 1214.76 L1207.1 1214.76 L1207.69 1214.76 L1208.28 1214.76 L1208.86 1214.76 L1209.45 1214.76 L1210.03 1214.76 L1210.62 1214.76 L1211.21 1214.76 L1211.79 1214.76 L1212.38 1214.76 L1212.97 1214.76 L1213.55 1214.76 L1214.14 1214.76 L1214.73 1214.76 L1215.31 1214.76 L1215.9 1214.76 L1216.49 1214.76 L1217.07 1214.76 L1217.66 1214.76 L1218.24 1214.76 L1218.83 1214.76 L1219.42 1214.76 L1220 1214.76 L1220.59 1214.76 L1221.18 1214.76 L1221.76 1214.76 L1222.35 1214.76 L1222.94 1214.76 L1223.52 1214.76 L1224.11 1214.76 L1224.7 1214.76 L1225.28 1214.76 L1225.87 1214.76 L1226.45 1214.76 L1227.04 1214.76 L1227.63 1214.76 L1228.21 1214.76 L1228.8 1214.76 L1229.39 1214.76 L1229.97 1214.76 L1230.56 1214.76 L1231.15 1214.76 L1231.73 1214.76 L1232.32 1214.76 L1232.91 1214.76 L1233.49 1214.76 L1234.08 1214.76 L1234.66 1214.76 L1235.25 1214.76 L1235.84 1214.76 L1236.42 1214.76 L1237.01 1214.76 L1237.6 1214.76 L1238.18 1214.76 L1238.77 1214.76 L1239.36 1214.76 L1239.94 1214.76 L1240.53 1214.76 L1241.11 1214.76 L1241.7 1214.76 L1242.29 1214.76 L1242.87 1214.76 L1243.46 1214.76 L1244.05 1214.76 L1244.63 1214.76 L1245.22 1214.76 L1245.81 1214.76 L1246.39 1214.76 L1246.98 1214.76 L1247.57 1214.76 L1248.15 1214.76 L1248.74 1214.76 L1249.32 1214.76 L1249.91 1214.76 L1250.5 1214.76 L1251.08 1214.76 L1251.67 1214.76 L1252.26 1214.76 L1252.84 1214.76 L1253.43 1214.76 L1254.02 1214.76 L1254.6 1214.76 L1255.19 1214.76 L1255.78 1214.76 L1256.36 1214.76 L1256.95 1214.76 L1257.53 1214.76 L1258.12 1214.76 L1258.71 1214.76 L1259.29 1214.76 L1259.88 1214.76 L1260.47 1214.76 L1261.05 1214.76 L1261.64 1214.76 L1262.23 1214.76 L1262.81 1214.76 L1263.4 1214.76 L1263.98 1214.76 L1264.57 1214.76 L1265.16 1214.76 L1265.74 1214.76 L1266.33 1214.76 L1266.92 1214.76 L1267.5 1214.76 L1268.09 1214.76 L1268.68 1214.76 L1269.26 1214.76 L1269.85 1214.76 L1270.44 1214.76 L1271.02 1214.76 L1271.61 1214.76 L1272.19 1214.76 L1272.78 1214.76 L1273.37 1214.76 L1273.95 1214.76 L1274.54 1214.76 L1275.13 1214.76 L1275.71 1214.76 L1276.3 1214.76 L1276.89 1214.76 L1277.47 1214.76 L1278.06 1214.76 L1278.65 1214.76 L1279.23 1214.76 L1279.82 1214.76 L1280.4 1214.76 L1280.99 1214.76 L1281.58 1214.76 L1282.16 1214.76 L1282.75 1214.76 L1283.34 1214.76 L1283.92 1214.76 L1284.51 1214.76 L1285.1 1214.76 L1285.68 1214.76 L1286.27 1214.76 L1286.86 1214.76 L1287.44 1214.76 L1288.03 1214.76 L1288.61 1214.76 L1289.2 1214.76 L1289.79 1214.76 L1290.37 1214.76 L1290.96 1214.76 L1291.55 1214.76 L1292.13 1214.76 L1292.72 1214.76 L1293.31 1214.76 L1293.89 1214.76 L1294.48 1214.76 L1295.06 1214.76 L1295.65 1214.76 L1296.24 1214.76 L1296.82 1214.76 L1297.41 1214.76 L1298 1214.76 L1298.58 1214.76 L1299.17 1214.76 L1299.76 1214.76 L1300.34 1214.76 L1300.93 1214.76 L1301.52 1214.76 L1302.1 1214.76 L1302.69 1214.76 L1303.27 1214.76 L1303.86 1214.76 L1304.45 1214.76 L1305.03 1214.76 L1305.62 1214.76 L1306.21 1214.76 L1306.79 1214.76 L1307.38 1214.76 L1307.97 1214.76 L1308.55 1214.76 L1309.14 1214.76 L1309.73 1214.76 L1310.31 1214.76 L1310.9 1214.76 L1311.48 1214.76 L1312.07 1214.76 L1312.66 1214.76 L1313.24 1214.76 L1313.83 1214.76 L1314.42 1214.76 L1315 1214.76 L1315.59 1214.76 L1316.18 1214.76 L1316.76 1214.76 L1317.35 1214.76 L1317.93 1214.76 L1318.52 1214.76 L1319.11 1214.76 L1319.69 1214.76 L1320.28 1214.76 L1320.87 1214.76 L1321.45 1214.76 L1322.04 1214.76 L1322.63 1214.76 L1323.21 1214.76 L1323.8 1214.76 L1324.39 1214.76 L1324.97 1214.76 L1325.56 1214.76 L1326.14 1214.76 L1326.73 1214.76 L1327.32 1214.76 L1327.9 1214.76 L1328.49 1214.76 L1329.08 1214.76 L1329.66 1214.76 L1330.25 1214.76 L1330.84 1214.76 L1331.42 1214.76 L1332.01 1214.76 L1332.6 1214.76 L1333.18 1214.76 L1333.77 1214.76 L1334.35 1214.76 L1334.94 1214.76 L1335.53 1214.76 L1336.11 1214.76 L1336.7 1214.76 L1337.29 1214.76 L1337.87 1214.76 L1338.46 1214.76 L1339.05 1214.76 L1339.63 1214.76 L1340.22 1214.76 L1340.8 1214.76 L1341.39 1214.76 L1341.98 1214.76 L1342.56 1214.76 L1343.15 1214.76 L1343.74 1214.76 L1344.32 1214.76 L1344.91 1214.76 L1345.5 1214.76 L1346.08 1214.76 L1346.67 1214.76 L1347.26 1214.76 L1347.84 1214.76 L1348.43 1214.76 L1349.01 1214.76 L1349.6 1214.76 L1350.19 1214.76 L1350.77 1214.76 L1351.36 1214.76 L1351.95 1214.76 L1352.53 1214.76 L1353.12 1214.76 L1353.71 1214.76 L1354.29 1214.76 L1354.88 1214.76 L1355.47 1214.76 L1356.05 1214.76 L1356.64 1214.76 L1357.22 1214.76 L1357.81 1214.76 L1358.4 1214.76 L1358.98 1214.76 L1359.57 1214.76 L1360.16 1214.76 L1360.74 1214.76 L1361.33 1214.76 L1361.92 1214.76 L1362.5 1214.76 L1363.09 1214.76 L1363.68 1214.76 L1364.26 1214.76 L1364.85 1214.76 L1365.43 1214.76 L1366.02 1214.76 L1366.61 1214.76 L1367.19 1214.76 L1367.78 1214.76 L1368.37 1214.76 L1368.95 1214.76 L1369.54 1214.76 L1370.13 1214.76 L1370.71 1214.76 L1371.3 1214.76 L1371.88 1214.76 L1372.47 1214.76 L1373.06 1214.76 L1373.64 1214.76 L1374.23 1214.76 L1374.82 1214.76 L1375.4 1214.76 L1375.99 1214.76 L1376.58 1214.76 L1377.16 1214.76 L1377.75 1214.76 L1378.34 1214.76 L1378.92 1214.76 L1379.51 1214.76 L1380.09 1214.76 L1380.68 1214.76 L1381.27 1214.76 L1381.85 1214.76 L1382.44 1214.76 L1383.03 1214.76 L1383.61 1214.76 L1384.2 1214.76 L1384.79 1214.76 L1385.37 1214.76 L1385.96 1214.76 L1386.55 1214.76 L1387.13 1214.76 L1387.72 1214.76 L1388.3 1214.76 L1388.89 1214.76 L1389.48 1214.76 L1390.06 1214.76 L1390.65 1214.76 L1391.24 1214.76 L1391.82 1214.76 L1392.41 1214.76 L1393 1214.76 L1393.58 1214.76 L1394.17 1214.76 L1394.75 1214.76 L1395.34 1214.76 L1395.93 1214.76 L1396.51 1214.76 L1397.1 1214.76 L1397.69 1214.76 L1398.27 1214.76 L1398.86 1214.76 L1399.45 1214.76 L1400.03 1214.76 L1400.62 1214.76 L1401.21 1214.76 L1401.79 1214.76 L1402.38 1214.76 L1402.96 1214.76 L1403.55 1214.76 L1404.14 1214.76 L1404.72 1214.76 L1405.31 1214.76 L1405.9 1214.76 L1406.48 1214.76 L1407.07 1214.76 L1407.66 1214.76 L1408.24 1214.76 L1408.83 1214.76 L1409.42 1214.76 L1410 1214.76 L1410.59 1214.76 L1411.17 1214.76 L1411.76 1214.76 L1412.35 1214.76 L1412.93 1214.76 L1413.52 1214.76 L1414.11 1214.76 L1414.69 1214.76 L1415.28 1214.76 L1415.87 1214.76 L1416.45 1214.76 L1417.04 1214.76 L1417.63 1214.76 L1418.21 1214.76 L1418.8 1214.76 L1419.38 1214.76 L1419.97 1214.76 L1420.56 1214.76 L1421.14 1214.76 L1421.73 1214.76 L1422.32 1214.76 L1422.9 1214.76 L1423.49 1214.76 L1424.08 1214.76 L1424.66 1214.76 L1425.25 1214.76 L1425.83 1214.76 L1426.42 1214.76 L1427.01 1214.76 L1427.59 1214.76 L1428.18 1214.76 L1428.77 1214.76 L1429.35 1214.76 L1429.94 1214.76 L1430.53 1214.76 L1431.11 1214.76 L1431.7 1214.76 L1432.29 1214.76 L1432.87 1214.76 L1433.46 1214.76 L1434.04 1214.76 L1434.63 1214.76 L1435.22 1214.76 L1435.8 1214.76 L1436.39 1214.76 L1436.98 1214.76 L1437.56 1214.76 L1438.15 1214.76 L1438.74 1214.76 L1439.32 1214.76 L1439.91 1214.76 L1440.5 1214.76 L1441.08 1214.76 L1441.67 1214.76 L1442.25 1214.76 L1442.84 1214.76 L1443.43 1214.76 L1444.01 1214.76 L1444.6 1214.76 L1445.19 1214.76 L1445.77 1214.76 L1446.36 1214.76 L1446.95 1214.76 L1447.53 1214.76 L1448.12 1214.76 L1448.7 1214.76 L1449.29 1214.76 L1449.88 1214.76 L1450.46 1214.76 L1451.05 1214.76 L1451.64 1214.76 L1452.22 1214.76 L1452.81 1214.76 L1453.4 1214.76 L1453.98 1214.76 L1454.57 1214.76 L1455.16 1214.76 L1455.74 1214.76 L1456.33 1214.76 L1456.91 1214.76 L1457.5 1214.76 L1458.09 1214.76 L1458.67 1214.76 L1459.26 1214.76 L1459.85 1214.76 L1460.43 1214.76 L1461.02 1214.76 L1461.61 1214.76 L1462.19 1214.76 L1462.78 1214.76 L1463.37 1214.76 L1463.95 1214.76 L1464.54 1214.76 L1465.12 1214.76 L1465.71 1214.76 L1466.3 1214.76 L1466.88 1214.76 L1467.47 1214.76 L1468.06 1214.76 L1468.64 1214.76 L1469.23 1214.76 L1469.82 1214.76 L1470.4 1214.76 L1470.99 1214.76 L1471.57 1214.76 L1472.16 1214.76 L1472.75 1214.76 L1473.33 1214.76 L1473.92 1214.76 L1474.51 1214.76 L1475.09 1214.76 L1475.68 1214.76 L1476.27 1214.76 L1476.85 1214.76 L1477.44 1214.76 L1478.03 1214.76 L1478.61 1214.76 L1479.2 1214.76 L1479.78 1214.76 L1480.37 1214.76 L1480.96 1214.76 L1481.54 1214.76 L1482.13 1214.76 L1482.72 1214.76 L1483.3 1214.76 L1483.89 1214.76 L1484.48 1214.76 L1485.06 1214.76 L1485.65 1214.76 L1486.24 1214.76 L1486.82 1214.76 L1487.41 1214.76 L1487.99 1214.76 L1488.58 1214.76 L1489.17 1214.76 L1489.75 1214.76 L1490.34 1214.76 L1490.93 1214.76 L1491.51 1214.76 L1492.1 1214.76 L1492.69 1214.76 L1493.27 1214.76 L1493.86 1214.76 L1494.45 1214.76 L1495.03 1214.76 L1495.62 1214.76 L1496.2 1214.76 L1496.79 1214.76 L1497.38 1214.76 L1497.96 1214.76 L1498.55 1214.76 L1499.14 1214.76 L1499.72 1214.76 L1500.31 1214.76 L1500.9 1214.76 L1501.48 1214.76 L1502.07 1214.76 L1502.65 1214.76 L1503.24 1214.76 L1503.83 1214.76 L1504.41 1214.76 L1505 1214.76 L1505.59 1214.76 L1506.17 1214.76 L1506.76 1214.76 L1507.35 1214.76 L1507.93 1214.76 L1508.52 1214.76 L1509.11 1214.76 L1509.69 1214.76 L1510.28 1214.76 L1510.86 1214.76 L1511.45 1214.76 L1512.04 1214.76 L1512.62 1214.76 L1513.21 1214.76 L1513.8 1214.76 L1514.38 1214.76 L1514.97 1214.76 L1515.56 1214.76 L1516.14 1214.76 L1516.73 1214.76 L1517.32 1214.76 L1517.9 1214.76 L1518.49 1214.76 L1519.07 1214.76 L1519.66 1214.76 L1520.25 1214.76 L1520.83 1214.76 L1521.42 1214.76 L1522.01 1214.76 L1522.59 1214.76 L1523.18 1214.76 L1523.77 1214.76 L1524.35 1214.76 L1524.94 1214.76 L1525.52 1214.76 L1526.11 1214.76 L1526.7 1214.76 L1527.28 1214.76 L1527.87 1214.76 L1528.46 1214.76 L1529.04 1214.76 L1529.63 1214.76 L1530.22 1214.76 L1530.8 1214.76 L1531.39 1214.76 L1531.98 1214.76 L1532.56 1214.76 L1533.15 1214.76 L1533.73 1214.76 L1534.32 1214.76 L1534.91 1214.76 L1535.49 1214.76 L1536.08 1214.76 L1536.67 1214.76 L1537.25 1214.76 L1537.84 1214.76 L1538.43 1214.76 L1539.01 1214.76 L1539.6 1214.76 L1540.19 1214.76 L1540.77 1214.76 L1541.36 1214.76 L1541.94 1214.76 L1542.53 1214.76 L1543.12 1214.76 L1543.7 1214.76 L1544.29 1214.76 L1544.88 1214.76 L1545.46 1214.76 L1546.05 1214.76 L1546.64 1214.76 L1547.22 1214.76 L1547.81 1214.76 L1548.4 1214.76 L1548.98 1214.76 L1549.57 1214.76 L1550.15 1214.76 L1550.74 1214.76 L1551.33 1214.76 L1551.91 1214.76 L1552.5 1214.76 L1553.09 1214.76 L1553.67 1214.76 L1554.26 1214.76 L1554.85 1214.76 L1555.43 1214.76 L1556.02 1214.76 L1556.6 1214.76 L1557.19 1214.76 L1557.78 1214.76 L1558.36 1214.76 L1558.95 1214.76 L1559.54 1214.76 L1560.12 1214.76 L1560.71 1214.76 L1561.3 1214.76 L1561.88 1214.76 L1562.47 1214.76 L1563.06 1214.76 L1563.64 1214.76 L1564.23 1214.76 L1564.81 1214.76 L1565.4 1214.76 L1565.99 1214.76 L1566.57 1214.76 L1567.16 1214.76 L1567.75 1214.76 L1568.33 1214.76 L1568.92 1214.76 L1569.51 1214.76 L1570.09 1214.76 L1570.68 1214.76 L1571.27 1214.76 L1571.85 1214.76 L1572.44 1214.76 L1573.02 1214.76 L1573.61 1214.76 L1574.2 1214.76 L1574.78 1214.76 L1575.37 1214.76 L1575.96 1214.76 L1576.54 1214.76 L1577.13 1214.76 L1577.72 1214.76 L1578.3 1214.76 L1578.89 1214.76 L1579.47 1214.76 L1580.06 1214.76 L1580.65 1214.76 L1581.23 1214.76 L1581.82 1214.76 L1582.41 1214.76 L1582.99 1214.76 L1583.58 1214.76 L1584.17 1214.76 L1584.75 1214.76 L1585.34 1214.76 L1585.93 1214.76 L1586.51 1214.76 L1587.1 1214.76 L1587.68 1214.76 L1588.27 1214.76 L1588.86 1214.76 L1589.44 1214.76 L1590.03 1214.76 L1590.62 1214.76 L1591.2 1214.76 L1591.79 1214.76 L1592.38 1214.76 L1592.96 1214.76 L1593.55 1214.76 L1594.14 1214.76 L1594.72 1214.76 L1595.31 1214.76 L1595.89 1214.76 L1596.48 1214.76 L1597.07 1214.76 L1597.65 1214.76 L1598.24 1214.76 L1598.83 1214.76 L1599.41 1214.76 L1600 1214.76 L1600.59 1214.76 L1601.17 1214.76 L1601.76 1214.76 L1602.34 1214.76 L1602.93 1214.76 L1603.52 1214.76 L1604.1 1214.76 L1604.69 1214.76 L1605.28 1214.76 L1605.86 1214.76 L1606.45 1214.76 L1607.04 1214.76 L1607.62 1214.76 L1608.21 1214.76 L1608.8 1214.76 L1609.38 1214.76 L1609.97 1214.76 L1610.55 1214.76 L1611.14 1214.76 L1611.73 1214.76 L1612.31 1214.76 L1612.9 1214.76 L1613.49 1214.76 L1614.07 1214.76 L1614.66 1214.76 L1615.25 1214.76 L1615.83 1214.76 L1616.42 1214.76 L1617.01 1214.76 L1617.59 1214.76 L1618.18 1214.76 L1618.76 1214.76 L1619.35 1214.76 L1619.94 1214.76 L1620.52 1214.76 L1621.11 1214.76 L1621.7 1214.76 L1622.28 1214.76 L1622.87 1214.76 L1623.46 1214.76 L1624.04 1214.76 L1624.63 1214.76 L1625.22 1214.76 L1625.8 1214.76 L1626.39 1214.76 L1626.97 1214.76 L1627.56 1214.76 L1628.15 1214.76 L1628.73 1214.76 L1629.32 1214.76 L1629.91 1214.76 L1630.49 1214.76 L1631.08 1214.76 L1631.67 1214.76 L1632.25 1214.76 L1632.84 1214.76 L1633.42 1214.76 L1634.01 1214.76 L1634.6 1214.76 L1635.18 1214.76 L1635.77 1214.76 L1636.36 1214.76 L1636.94 1214.76 L1637.53 1214.76 L1638.12 1214.76 L1638.7 1214.76 L1639.29 1214.76 L1639.88 1214.76 L1640.46 1214.76 L1641.05 1214.76 L1641.63 1214.76 L1642.22 1214.76 L1642.81 1214.76 L1643.39 1214.76 L1643.98 1214.76 L1644.57 1214.76 L1645.15 1214.76 L1645.74 1214.76 L1646.33 1214.76 L1646.91 1214.76 L1647.5 1214.76 L1648.09 1214.76 L1648.67 1214.76 L1649.26 1214.76 L1649.84 1214.76 L1650.43 1214.76 L1651.02 1214.76 L1651.6 1214.76 L1652.19 1214.76 L1652.78 1214.76 L1653.36 1214.76 L1653.95 1214.76 L1654.54 1214.76 L1655.12 1214.76 L1655.71 1214.76 L1656.29 1214.76 L1656.88 1214.76 L1657.47 1214.76 L1658.05 1214.76 L1658.64 1214.76 L1659.23 1214.76 L1659.81 1214.76 L1660.4 1214.76 L1660.99 1214.76 L1661.57 1214.76 L1662.16 1214.76 L1662.75 1214.76 L1663.33 1214.76 L1663.92 1214.76 L1664.5 1214.76 L1665.09 1214.76 L1665.68 1214.76 L1666.26 1214.76 L1666.85 1214.76 L1667.44 1214.76 L1668.02 1214.76 L1668.61 1214.76 L1669.2 1214.76 L1669.78 1214.76 L1670.37 1214.76 L1670.96 1214.76 L1671.54 1214.76 L1672.13 1214.76 L1672.71 1214.76 L1673.3 1214.76 L1673.89 1214.76 L1674.47 1214.76 L1675.06 1214.76 L1675.65 1214.76 L1676.23 1214.76 L1676.82 1214.76 L1677.41 1214.76 L1677.99 1214.76 L1678.58 1214.76 L1679.17 1214.76 L1679.75 1214.76 L1680.34 1214.76 L1680.92 1214.76 L1681.51 1214.76 L1682.1 1214.76 L1682.68 1214.76 L1683.27 1214.76 L1683.86 1214.76 L1684.44 1214.76 L1685.03 1214.76 L1685.62 1214.76 L1686.2 1214.76 L1686.79 1214.76 L1687.37 1214.76 L1687.96 1214.76 L1688.55 1214.76 L1689.13 1214.76 L1689.72 1214.76 L1690.31 1214.76 L1690.89 1214.76 L1691.48 1214.76 L1692.07 1214.76 L1692.65 1214.76 L1693.24 1214.76 L1693.83 1214.76 L1694.41 1214.76 L1695 1214.76 L1695.58 1214.76 L1696.17 1214.76 L1696.76 1214.76 L1697.34 1214.76 L1697.93 1214.76 L1698.52 1214.76 L1699.1 1214.76 L1699.69 1214.76 L1700.28 1214.76 L1700.86 1214.76 L1701.45 1214.76 L1702.04 1214.76 L1702.62 1214.76 L1703.21 1214.76 L1703.79 1214.76 L1704.38 1214.76 L1704.97 1214.76 L1705.55 1214.76 L1706.14 1214.76 L1706.73 1214.76 L1707.31 1214.76 L1707.9 1214.76 L1708.49 1214.76 L1709.07 1214.76 L1709.66 1214.76 L1710.24 1214.76 L1710.83 1214.76 L1711.42 1214.76 L1712 1214.76 L1712.59 1214.76 L1713.18 1214.76 L1713.76 1214.76 L1714.35 1214.76 L1714.94 1214.76 L1715.52 1214.76 L1716.11 1214.76 L1716.7 1214.76 L1717.28 1214.76 L1717.87 1214.76 L1718.45 1214.76 L1719.04 1214.76 L1719.63 1214.76 L1720.21 1214.76 L1720.8 1214.76 L1721.39 1214.76 L1721.97 1214.76 L1722.56 1214.76 L1723.15 1214.76 L1723.73 1214.76 L1724.32 1214.76 L1724.91 1214.76 L1725.49 1214.76 L1726.08 1214.76 L1726.66 1214.76 L1727.25 1214.76 L1727.84 1214.76 L1728.42 1214.76 L1729.01 1214.76 L1729.6 1214.76 L1730.18 1214.76 L1730.77 1214.76 L1731.36 1214.76 L1731.94 1214.76 L1732.53 1214.76 L1733.11 1214.76 L1733.7 1214.76 L1734.29 1214.76 L1734.87 1214.76 L1735.46 1214.76 L1736.05 1214.76 L1736.63 1214.76 L1737.22 1214.76 L1737.81 1214.76 L1738.39 1214.76 L1738.98 1214.76 L1739.57 1214.76 L1740.15 1214.76 L1740.74 1214.76 L1741.32 1214.76 L1741.91 1214.76 L1742.5 1214.76 L1743.08 1214.76 L1743.67 1214.76 L1744.26 1214.76 L1744.84 1214.76 L1745.43 1214.76 L1746.02 1214.76 L1746.6 1214.76 L1747.19 1214.76 L1747.78 1214.76 L1748.36 1214.76 L1748.95 1214.76 L1749.53 1214.76 L1750.12 1214.76 L1750.71 1214.76 L1751.29 1214.76 L1751.88 1214.76 L1752.47 1214.76 L1753.05 1214.76 L1753.64 1214.76 L1754.23 1214.76 L1754.81 1214.76 L1755.4 1214.76 L1755.99 1214.76 L1756.57 1214.76 L1757.16 1214.76 L1757.74 1214.76 L1758.33 1214.76 L1758.92 1214.76 L1759.5 1214.76 L1760.09 1214.76 L1760.68 1214.76 L1761.26 1214.76 L1761.85 1214.76 L1762.44 1214.76 L1763.02 1214.76 L1763.61 1214.76 L1764.19 1214.76 L1764.78 1214.76 L1765.37 1214.76 L1765.95 1214.76 L1766.54 1214.76 L1767.13 1214.76 L1767.71 1214.76 L1768.3 1214.76 L1768.89 1214.76 L1769.47 1214.76 L1770.06 1214.76 L1770.65 1214.76 L1771.23 1214.76 L1771.82 1214.76 L1772.4 1214.76 L1772.99 1214.76 L1773.58 1214.76 L1774.16 1214.76 L1774.75 1214.76 L1775.34 1214.76 L1775.92 1214.76 L1776.51 1214.76 L1777.1 1214.76 L1777.68 1214.76 L1778.27 1214.76 L1778.86 1214.76 L1779.44 1214.76 L1780.03 1214.76 L1780.61 1214.76 L1781.2 1214.76 L1781.79 1214.76 L1782.37 1214.76 L1782.96 1214.76 L1783.55 1214.76 L1784.13 1214.76 L1784.72 1214.76 L1785.31 1214.76 L1785.89 1214.76 L1786.48 1214.76 L1787.06 1214.76 L1787.65 1214.76 L1788.24 1214.76 L1788.82 1214.76 L1789.41 1214.76 L1790 1214.76 L1790.58 1214.76 L1791.17 1214.76 L1791.76 1214.76 L1792.34 1214.76 L1792.93 1214.76 L1793.52 1214.76 L1794.1 1214.76 L1794.69 1214.76 L1795.27 1214.76 L1795.86 1214.76 L1796.45 1214.76 L1797.03 1214.76 L1797.62 1214.76 L1798.21 1214.76 L1798.79 1214.76 L1799.38 1214.76 L1799.97 1214.76 L1800.55 1214.76 L1801.14 1214.76 L1801.73 1214.76 L1802.31 1214.76 L1802.9 1214.76 L1803.48 1214.76 L1804.07 1214.76 L1804.66 1214.76 L1805.24 1214.76 L1805.83 1214.76 L1806.42 1214.76 L1807 1214.76 L1807.59 1214.76 L1808.18 1214.76 L1808.76 1214.76 L1809.35 1214.76 L1809.94 1214.76 L1810.52 1214.76 L1811.11 1214.76 L1811.69 1214.76 L1812.28 1214.76 L1812.87 1214.76 L1813.45 1214.76 L1814.04 1214.76 L1814.63 1214.76 L1815.21 1214.76 L1815.8 1214.76 L1816.39 1214.76 L1816.97 1214.76 L1817.56 1214.76 L1818.14 1214.76 L1818.73 1214.76 L1819.32 1214.76 L1819.9 1214.76 L1820.49 1214.76 L1821.08 1214.76 L1821.66 1214.76 L1822.25 1214.76 L1822.84 1214.76 L1823.42 1214.76 L1824.01 1214.76 L1824.6 1214.76 L1825.18 1214.76 L1825.77 1214.76 L1826.35 1214.76 L1826.94 1214.76 L1827.53 1214.76 L1828.11 1214.76 L1828.7 1214.76 L1829.29 1214.76 L1829.87 1214.76 L1830.46 1214.76 L1831.05 1214.76 L1831.63 1214.76 L1832.22 1214.76 L1832.81 1214.76 L1833.39 1214.76 L1833.98 1214.76 L1834.56 1214.76 L1835.15 1214.76 L1835.74 1214.76 L1836.32 1214.76 L1836.91 1214.76 L1837.5 1214.76 L1838.08 1214.76 L1838.67 1214.76 L1839.26 1214.76 L1839.84 1214.76 L1840.43 1214.76 L1841.01 1214.76 L1841.6 1214.76 L1842.19 1214.76 L1842.77 1214.76 L1843.36 1214.76 L1843.95 1214.76 L1844.53 1214.76 L1845.12 1214.76 L1845.71 1214.76 L1846.29 1214.76 L1846.88 1214.76 L1847.47 1214.76 L1848.05 1214.76 L1848.64 1214.76 L1849.22 1214.76 L1849.81 1214.76 L1850.4 1214.76 L1850.98 1214.76 L1851.57 1214.76 L1852.16 1214.76 L1852.74 1214.76 L1853.33 1214.76 L1853.92 1214.76 L1854.5 1214.76 L1855.09 1214.76 L1855.68 1214.76 L1856.26 1214.76 L1856.85 1214.76 L1857.43 1214.76 L1858.02 1214.76 L1858.61 1214.76 L1859.19 1214.76 L1859.78 1214.76 L1860.37 1214.76 L1860.95 1214.76 L1861.54 1214.76 L1862.13 1214.76 L1862.71 1214.76 L1863.3 1214.76 L1863.88 1214.76 L1864.47 1214.76 L1865.06 1214.76 L1865.64 1214.76 L1866.23 1214.76 L1866.82 1214.76 L1867.4 1214.76 L1867.99 1214.76 L1868.58 1214.76 L1869.16 1214.76 L1869.75 1214.76 L1870.34 1214.76 L1870.92 1214.76 L1871.51 1214.76 L1872.09 1214.76 L1872.68 1214.76 L1873.27 1214.76 L1873.85 1214.76 L1874.44 1214.76 L1875.03 1214.76 L1875.61 1214.76 L1876.2 1214.76 L1876.79 1214.76 L1877.37 1214.76 L1877.96 1214.76 L1878.55 1214.76 L1879.13 1214.76 L1879.72 1214.76 L1880.3 1214.76 L1880.89 1214.76 L1881.48 1214.76 L1882.06 1214.76 L1882.65 1214.76 L1883.24 1214.76 L1883.82 1214.76 L1884.41 1214.76 L1885 1214.76 L1885.58 1214.76 L1886.17 1214.76 L1886.76 1214.76 L1887.34 1214.76 L1887.93 1214.76 L1888.51 1214.76 L1889.1 1214.76 L1889.69 1214.76 L1890.27 1214.76 L1890.86 1214.76 L1891.45 1214.76 L1892.03 1214.76 L1892.62 1214.76 L1893.21 1214.76 L1893.79 1214.76 L1894.38 1214.76 L1894.96 1214.76 L1895.55 1214.76 L1896.14 1214.76 L1896.72 1214.76 L1897.31 1214.76 L1897.9 1214.76 L1898.48 1214.76 L1899.07 1214.76 L1899.66 1214.76 L1900.24 1214.76 L1900.83 1214.76 L1901.42 1214.76 L1902 1214.76 L1902.59 1214.76 L1903.17 1214.76 L1903.76 1214.76 L1904.35 1214.76 L1904.93 1214.76 L1905.52 1214.76 L1906.11 1214.76 L1906.69 1214.76 L1907.28 1214.76 L1907.87 1214.76 L1908.45 1214.76 L1909.04 1214.76 L1909.63 1214.76 L1910.21 1214.76 L1910.8 1214.76 L1911.38 1214.76 L1911.97 1214.76 L1912.56 1214.76 L1913.14 1214.76 L1913.73 1214.76 L1914.32 1214.76 L1914.9 1214.76 L1915.49 1214.76 L1916.08 1214.76 L1916.66 1214.76 L1917.25 1214.76 L1917.83 1214.76 L1918.42 1214.76 L1919.01 1214.76 L1919.59 1214.76 L1920.18 1214.76 L1920.77 1214.76 L1921.35 1214.76 L1921.94 1214.76 L1922.53 1214.76 L1923.11 1214.76 L1923.7 1214.76 L1924.29 1214.76 L1924.87 1214.76 L1925.46 1214.76 L1926.04 1214.76 L1926.63 1214.76 L1927.22 1214.76 L1927.8 1214.76 L1928.39 1214.76 L1928.98 1214.76 L1929.56 1214.76 L1930.15 1214.76 L1930.74 1214.76 L1931.32 1214.76 L1931.91 1214.76 L1932.5 1214.76 L1933.08 1214.76 L1933.67 1214.76 L1934.25 1214.76 L1934.84 1214.76 L1935.43 1214.76 L1936.01 1214.76 L1936.6 1214.76 L1937.19 1214.76 L1937.77 1214.76 L1938.36 1214.76 L1938.95 1214.76 L1939.53 1214.76 L1940.12 1214.76 L1940.71 1214.76 L1941.29 1214.76 L1941.88 1214.76 L1942.46 1214.76 L1943.05 1214.76 L1943.64 1214.76 L1944.22 1214.76 L1944.81 1214.76 L1945.4 1214.76 L1945.98 1214.76 L1946.57 1214.76 L1947.16 1214.76 L1947.74 1214.76 L1948.33 1214.76 L1948.91 1214.76 L1949.5 1214.76 L1950.09 1214.76 L1950.67 1214.76 L1951.26 1214.76 L1951.85 1214.76 L1952.43 1214.76 L1953.02 1214.76 L1953.61 1214.76 L1954.19 1214.76 L1954.78 1214.76 L1955.37 1214.76 L1955.95 1214.76 L1956.54 1214.76 L1957.12 1214.76 L1957.71 1214.76 L1958.3 1214.76 L1958.88 1214.76 L1959.47 1214.76 L1960.06 1214.76 L1960.64 1214.76 L1961.23 1214.76 L1961.82 1214.76 L1962.4 1214.76 L1962.99 1214.76 L1963.58 1214.76 L1964.16 1214.76 L1964.75 1214.76 L1965.33 1214.76 L1965.92 1214.76 L1966.51 1214.76 L1967.09 1214.76 L1967.68 1214.76 L1968.27 1214.76 L1968.85 1214.76 L1969.44 1214.76 L1970.03 1214.76 L1970.61 1214.76 L1971.2 1214.76 L1971.78 1214.76 L1972.37 1214.76 L1972.96 1214.76 L1973.54 1214.76 L1974.13 1214.76 L1974.72 1214.76 L1975.3 1214.76 L1975.89 1214.76 L1976.48 1214.76 L1977.06 1214.76 L1977.65 1214.76 L1978.24 1214.76 L1978.82 1214.76 L1979.41 1214.76 L1979.99 1214.76 L1980.58 1214.76 L1981.17 1214.76 L1981.75 1214.76 L1982.34 1214.76 L1982.93 1214.76 L1983.51 1214.76 L1984.1 1214.76 L1984.69 1214.76 L1985.27 1214.76 L1985.86 1214.76 L1986.45 1214.76 L1987.03 1214.76 L1987.62 1214.76 L1988.2 1214.76 L1988.79 1214.76 L1989.38 1214.76 L1989.96 1214.76 L1990.55 1214.76 L1991.14 1214.76 L1991.72 1214.76 L1992.31 1214.76 L1992.9 1214.76 L1993.48 1214.76 L1994.07 1214.76 L1994.65 1214.76 L1995.24 1214.76 L1995.83 1214.76 L1996.41 1214.76 L1997 1214.76 L1997.59 1214.76 L1998.17 1214.76 L1998.76 1214.76 L1999.35 1214.76 L1999.93 1214.76 L2000.52 1214.76 L2001.11 1214.76 L2001.69 1214.76 L2002.28 1214.76 L2002.86 1214.76 L2003.45 1214.76 L2004.04 1214.76 L2004.62 1214.76 L2005.21 1214.76 L2005.8 1214.76 L2006.38 1214.76 L2006.97 1214.76 L2007.56 1214.76 L2008.14 1214.76 L2008.73 1214.76 L2009.32 1214.76 L2009.9 1214.76 L2010.49 1214.76 L2011.07 1214.76 L2011.66 1214.76 L2012.25 1214.76 L2012.83 1214.76 L2013.42 1214.76 L2014.01 1214.76 L2014.59 1214.76 L2015.18 1214.76 L2015.77 1214.76 L2016.35 1214.76 L2016.94 1214.76 L2017.53 1214.76 L2018.11 1214.76 L2018.7 1214.76 L2019.28 1214.76 L2019.87 1214.76 L2020.46 1214.76 L2021.04 1214.76 L2021.63 1214.76 L2022.22 1214.76 L2022.8 1214.76 L2023.39 1214.76 L2023.98 1214.76 L2024.56 1214.76 L2025.15 1214.76 L2025.73 1214.76 L2026.32 1214.76 L2026.91 1214.76 L2027.49 1214.76 L2028.08 1214.76 L2028.67 1214.76 L2029.25 1214.76 L2029.84 1214.76 L2030.43 1214.76 L2031.01 1214.76 L2031.6 1214.76 L2032.19 1214.76 L2032.77 1214.76 L2033.36 1214.76 L2033.94 1214.76 L2034.53 1214.76 L2035.12 1214.76 L2035.7 1214.76 L2036.29 1214.76 L2036.88 1214.76 L2037.46 1214.76 L2038.05 1214.76 L2038.64 1214.76 L2039.22 1214.76 L2039.81 1214.76 L2040.4 1214.76 L2040.98 1214.76 L2041.57 1214.76 L2042.15 1214.76 L2042.74 1214.76 L2043.33 1214.76 L2043.91 1214.76 L2044.5 1214.76 L2045.09 1214.76 L2045.67 1214.76 L2046.26 1214.76 L2046.85 1214.76 L2047.43 1214.76 L2048.02 1214.76 L2048.6 1214.76 L2049.19 1214.76 L2049.78 1214.76 L2050.36 1214.76 L2050.95 1214.76 L2051.54 1214.76 L2052.12 1214.76 L2052.71 1214.76 L2053.3 1214.76 L2053.88 1214.76 L2054.47 1214.76 L2055.06 1214.76 L2055.64 1214.76 L2056.23 1214.76 L2056.81 1214.76 L2057.4 1214.76 L2057.99 1214.76 L2058.57 1214.76 L2059.16 1214.76 L2059.75 1214.76 L2060.33 1214.76 L2060.92 1214.76 L2061.51 1214.76 L2062.09 1214.76 L2062.68 1214.76 L2063.27 1214.76 L2063.85 1214.76 L2064.44 1214.76 L2065.02 1214.76 L2065.61 1214.76 L2066.2 1214.76 L2066.78 1214.76 L2067.37 1214.76 L2067.96 1214.76 L2068.54 1214.76 L2069.13 1214.76 L2069.72 1214.76 L2070.3 1214.76 L2070.89 1214.76 L2071.48 1214.76 L2072.06 1214.76 L2072.65 1214.76 L2073.23 1214.76 L2073.82 1214.76 L2074.41 1214.76 L2074.99 1214.76 L2075.58 1214.76 L2076.17 1214.76 L2076.75 1214.76 L2077.34 1214.76 L2077.93 1214.76 L2078.51 1214.76 L2079.1 1214.76 L2079.68 1214.76 L2080.27 1214.76 L2080.86 1214.76 L2081.44 1214.76 L2082.03 1214.76 L2082.62 1214.76 L2083.2 1214.76 L2083.79 1214.76 L2084.38 1214.76 L2084.96 1214.76 L2085.55 1214.76 L2086.14 1214.76 L2086.72 1214.76 L2087.31 1214.76 L2087.89 1214.76 L2088.48 1214.76 L2089.07 1214.76 L2089.65 1214.76 L2090.24 1214.76 L2090.83 1214.76 L2091.41 1214.76 L2092 1214.76 L2092.59 1214.76 L2093.17 1214.76 L2093.76 1214.76 L2094.35 1214.76 L2094.93 1214.76 L2095.52 1214.76 L2096.1 1214.76 L2096.69 1214.76 L2097.28 1214.76 L2097.86 1214.76 L2098.45 1214.76 L2099.04 1214.76 L2099.62 1214.76 L2100.21 1214.76 L2100.8 1214.76 L2101.38 1214.76 L2101.97 1214.76 L2102.55 1214.76 L2103.14 1214.76 L2103.73 1214.76 L2104.31 1214.76 L2104.9 1214.76 L2105.49 1214.76 L2106.07 1214.76 L2106.66 1214.76 L2107.25 1214.76 L2107.83 1214.76 L2108.42 1214.76 L2109.01 1214.76 L2109.59 1214.76 L2110.18 1214.76 L2110.76 1214.76 L2111.35 1214.76 L2111.94 1214.76 L2112.52 1214.76 L2113.11 1214.76 L2113.7 1214.76 L2114.28 1214.76 L2114.87 1214.76 L2115.46 1214.76 L2116.04 1214.76 L2116.63 1214.76 L2117.22 1214.76 L2117.8 1214.76 L2118.39 1214.76 L2118.97 1214.76 L2119.56 1214.76 L2120.15 1214.76 L2120.73 1214.76 L2121.32 1214.76 L2121.91 1214.76 L2122.49 1214.76 L2123.08 1214.76 L2123.67 1214.76 L2124.25 1214.76 L2124.84 1214.76 L2125.42 1214.76 L2126.01 1214.76 L2126.6 1214.76 L2127.18 1214.76 L2127.77 1214.76 L2128.36 1214.76 L2128.94 1214.76 L2129.53 1214.76 L2130.12 1214.76 L2130.7 1214.76 L2131.29 1214.76 L2131.88 1214.76 L2132.46 1214.76 L2133.05 1214.76 L2133.63 1214.76 L2134.22 1214.76 L2134.81 1214.76 L2135.39 1214.76 L2135.98 1214.76 L2136.57 1214.76 L2137.15 1214.76 L2137.74 1214.76 L2138.33 1214.76 L2138.91 1214.76 L2139.5 1214.76 L2140.09 1214.76 L2140.67 1214.76 L2141.26 1214.76 L2141.84 1214.76 L2142.43 1214.76 L2143.02 1214.76 L2143.6 1214.76 L2144.19 1214.76 L2144.78 1214.76 L2145.36 1214.76 L2145.95 1214.76 L2146.54 1214.76 L2147.12 1214.76 L2147.71 1214.76 L2148.3 1214.76 L2148.88 1214.76 L2149.47 1214.76 L2150.05 1214.76 L2150.64 1214.76 L2151.23 1214.76 L2151.81 1214.76 L2152.4 1214.76 L2152.99 1214.76 L2153.57 1214.76 L2154.16 1214.76 L2154.75 1214.76 L2155.33 1214.76 L2155.92 1214.76 L2156.5 1214.76 L2157.09 1214.76 L2157.68 1214.76 L2158.26 1214.76 L2158.26 1214.11 L2157.68 1214.11 L2157.09 1214.11 L2156.5 1214.11 L2155.92 1214.11 L2155.33 1214.11 L2154.75 1214.11 L2154.16 1214.11 L2153.57 1214.11 L2152.99 1214.11 L2152.4 1214.11 L2151.81 1214.11 L2151.23 1214.11 L2150.64 1214.11 L2150.05 1214.11 L2149.47 1214.11 L2148.88 1214.11 L2148.3 1214.11 L2147.71 1214.11 L2147.12 1214.11 L2146.54 1214.11 L2145.95 1214.11 L2145.36 1214.11 L2144.78 1214.11 L2144.19 1214.11 L2143.6 1214.11 L2143.02 1214.11 L2142.43 1214.11 L2141.84 1214.11 L2141.26 1214.11 L2140.67 1214.11 L2140.09 1214.11 L2139.5 1214.11 L2138.91 1214.11 L2138.33 1214.11 L2137.74 1214.11 L2137.15 1214.11 L2136.57 1214.11 L2135.98 1214.11 L2135.39 1214.11 L2134.81 1214.11 L2134.22 1214.11 L2133.63 1214.11 L2133.05 1214.11 L2132.46 1214.11 L2131.88 1214.11 L2131.29 1214.11 L2130.7 1214.11 L2130.12 1214.11 L2129.53 1214.11 L2128.94 1214.11 L2128.36 1214.11 L2127.77 1214.11 L2127.18 1214.11 L2126.6 1214.11 L2126.01 1214.11 L2125.42 1214.11 L2124.84 1214.11 L2124.25 1214.11 L2123.67 1214.11 L2123.08 1214.11 L2122.49 1214.11 L2121.91 1214.11 L2121.32 1214.11 L2120.73 1214.11 L2120.15 1214.11 L2119.56 1214.11 L2118.97 1214.11 L2118.39 1214.11 L2117.8 1214.11 L2117.22 1214.11 L2116.63 1214.11 L2116.04 1214.11 L2115.46 1214.11 L2114.87 1214.11 L2114.28 1214.11 L2113.7 1214.11 L2113.11 1214.11 L2112.52 1214.11 L2111.94 1214.11 L2111.35 1214.11 L2110.76 1214.11 L2110.18 1214.11 L2109.59 1214.11 L2109.01 1214.11 L2108.42 1214.11 L2107.83 1214.11 L2107.25 1214.11 L2106.66 1214.11 L2106.07 1214.11 L2105.49 1214.11 L2104.9 1214.11 L2104.31 1214.11 L2103.73 1214.11 L2103.14 1214.11 L2102.55 1214.11 L2101.97 1214.11 L2101.38 1214.11 L2100.8 1214.11 L2100.21 1214.11 L2099.62 1214.11 L2099.04 1214.11 L2098.45 1214.11 L2097.86 1214.11 L2097.28 1214.11 L2096.69 1214.11 L2096.1 1214.11 L2095.52 1214.11 L2094.93 1214.11 L2094.35 1214.11 L2093.76 1214.11 L2093.17 1214.11 L2092.59 1214.11 L2092 1214.11 L2091.41 1214.11 L2090.83 1214.11 L2090.24 1214.11 L2089.65 1214.11 L2089.07 1214.11 L2088.48 1214.11 L2087.89 1214.11 L2087.31 1214.11 L2086.72 1214.11 L2086.14 1214.11 L2085.55 1214.11 L2084.96 1214.11 L2084.38 1214.11 L2083.79 1214.11 L2083.2 1214.11 L2082.62 1214.11 L2082.03 1214.11 L2081.44 1214.11 L2080.86 1214.11 L2080.27 1214.11 L2079.68 1214.11 L2079.1 1214.11 L2078.51 1214.11 L2077.93 1214.11 L2077.34 1214.11 L2076.75 1214.11 L2076.17 1214.11 L2075.58 1214.11 L2074.99 1214.11 L2074.41 1214.11 L2073.82 1214.11 L2073.23 1214.11 L2072.65 1214.11 L2072.06 1214.11 L2071.48 1214.11 L2070.89 1214.11 L2070.3 1214.11 L2069.72 1214.11 L2069.13 1214.11 L2068.54 1214.11 L2067.96 1214.11 L2067.37 1214.11 L2066.78 1214.11 L2066.2 1214.11 L2065.61 1214.11 L2065.02 1214.11 L2064.44 1214.11 L2063.85 1214.11 L2063.27 1214.11 L2062.68 1214.11 L2062.09 1214.11 L2061.51 1214.11 L2060.92 1214.11 L2060.33 1214.11 L2059.75 1214.11 L2059.16 1214.11 L2058.57 1214.11 L2057.99 1214.11 L2057.4 1214.11 L2056.81 1214.11 L2056.23 1214.11 L2055.64 1214.11 L2055.06 1214.11 L2054.47 1214.11 L2053.88 1214.11 L2053.3 1214.11 L2052.71 1214.11 L2052.12 1214.11 L2051.54 1214.11 L2050.95 1214.11 L2050.36 1214.11 L2049.78 1214.11 L2049.19 1214.11 L2048.6 1214.11 L2048.02 1214.11 L2047.43 1214.11 L2046.85 1214.11 L2046.26 1214.11 L2045.67 1214.11 L2045.09 1214.11 L2044.5 1214.11 L2043.91 1214.11 L2043.33 1214.11 L2042.74 1214.11 L2042.15 1214.11 L2041.57 1214.11 L2040.98 1214.11 L2040.4 1214.11 L2039.81 1214.11 L2039.22 1214.11 L2038.64 1214.11 L2038.05 1214.11 L2037.46 1214.11 L2036.88 1214.11 L2036.29 1214.11 L2035.7 1214.11 L2035.12 1214.11 L2034.53 1214.11 L2033.94 1214.11 L2033.36 1214.11 L2032.77 1214.11 L2032.19 1214.11 L2031.6 1214.11 L2031.01 1214.11 L2030.43 1214.11 L2029.84 1214.11 L2029.25 1214.11 L2028.67 1214.11 L2028.08 1214.11 L2027.49 1214.11 L2026.91 1214.11 L2026.32 1214.11 L2025.73 1214.11 L2025.15 1214.11 L2024.56 1214.11 L2023.98 1214.11 L2023.39 1214.11 L2022.8 1214.11 L2022.22 1214.11 L2021.63 1214.11 L2021.04 1214.11 L2020.46 1214.11 L2019.87 1214.11 L2019.28 1214.11 L2018.7 1214.11 L2018.11 1214.11 L2017.53 1214.11 L2016.94 1214.11 L2016.35 1214.11 L2015.77 1214.11 L2015.18 1214.11 L2014.59 1214.11 L2014.01 1214.11 L2013.42 1214.11 L2012.83 1214.11 L2012.25 1214.11 L2011.66 1214.11 L2011.07 1214.11 L2010.49 1214.11 L2009.9 1214.11 L2009.32 1214.11 L2008.73 1214.11 L2008.14 1214.11 L2007.56 1214.11 L2006.97 1214.11 L2006.38 1214.11 L2005.8 1214.11 L2005.21 1214.11 L2004.62 1214.11 L2004.04 1214.11 L2003.45 1214.11 L2002.86 1214.11 L2002.28 1214.11 L2001.69 1214.11 L2001.11 1214.11 L2000.52 1214.11 L1999.93 1214.11 L1999.35 1214.11 L1998.76 1214.11 L1998.17 1214.11 L1997.59 1214.11 L1997 1214.11 L1996.41 1214.11 L1995.83 1214.11 L1995.24 1214.11 L1994.65 1214.11 L1994.07 1214.11 L1993.48 1214.11 L1992.9 1214.11 L1992.31 1214.11 L1991.72 1214.11 L1991.14 1214.11 L1990.55 1214.11 L1989.96 1214.11 L1989.38 1214.11 L1988.79 1214.11 L1988.2 1214.11 L1987.62 1214.11 L1987.03 1214.11 L1986.45 1214.11 L1985.86 1214.11 L1985.27 1214.11 L1984.69 1214.11 L1984.1 1214.11 L1983.51 1214.11 L1982.93 1214.11 L1982.34 1214.11 L1981.75 1214.11 L1981.17 1214.11 L1980.58 1214.11 L1979.99 1214.11 L1979.41 1214.11 L1978.82 1214.11 L1978.24 1214.11 L1977.65 1214.11 L1977.06 1214.11 L1976.48 1214.11 L1975.89 1214.11 L1975.3 1214.11 L1974.72 1214.11 L1974.13 1214.11 L1973.54 1214.11 L1972.96 1214.11 L1972.37 1214.11 L1971.78 1214.11 L1971.2 1214.11 L1970.61 1214.11 L1970.03 1214.11 L1969.44 1214.11 L1968.85 1214.11 L1968.27 1214.11 L1967.68 1214.11 L1967.09 1214.11 L1966.51 1214.11 L1965.92 1214.11 L1965.33 1214.11 L1964.75 1214.11 L1964.16 1214.11 L1963.58 1214.11 L1962.99 1214.11 L1962.4 1214.11 L1961.82 1214.11 L1961.23 1214.11 L1960.64 1214.11 L1960.06 1214.11 L1959.47 1214.11 L1958.88 1214.11 L1958.3 1214.11 L1957.71 1214.11 L1957.12 1214.11 L1956.54 1214.11 L1955.95 1214.11 L1955.37 1214.11 L1954.78 1214.11 L1954.19 1214.11 L1953.61 1214.11 L1953.02 1214.11 L1952.43 1214.11 L1951.85 1214.11 L1951.26 1214.11 L1950.67 1214.11 L1950.09 1214.11 L1949.5 1214.11 L1948.91 1214.11 L1948.33 1214.11 L1947.74 1214.11 L1947.16 1214.11 L1946.57 1214.11 L1945.98 1214.11 L1945.4 1214.11 L1944.81 1214.11 L1944.22 1214.11 L1943.64 1214.11 L1943.05 1214.11 L1942.46 1214.11 L1941.88 1214.11 L1941.29 1214.11 L1940.71 1214.11 L1940.12 1214.11 L1939.53 1214.11 L1938.95 1214.11 L1938.36 1214.11 L1937.77 1214.11 L1937.19 1214.11 L1936.6 1214.11 L1936.01 1214.11 L1935.43 1214.11 L1934.84 1214.11 L1934.25 1214.11 L1933.67 1214.11 L1933.08 1214.11 L1932.5 1214.11 L1931.91 1214.11 L1931.32 1214.11 L1930.74 1214.11 L1930.15 1214.11 L1929.56 1214.11 L1928.98 1214.11 L1928.39 1214.11 L1927.8 1214.11 L1927.22 1214.11 L1926.63 1214.11 L1926.04 1214.11 L1925.46 1214.11 L1924.87 1214.11 L1924.29 1214.11 L1923.7 1214.11 L1923.11 1214.11 L1922.53 1214.11 L1921.94 1214.11 L1921.35 1214.11 L1920.77 1214.11 L1920.18 1214.11 L1919.59 1214.11 L1919.01 1214.11 L1918.42 1214.11 L1917.83 1214.11 L1917.25 1214.11 L1916.66 1214.11 L1916.08 1214.11 L1915.49 1214.11 L1914.9 1214.11 L1914.32 1214.11 L1913.73 1214.11 L1913.14 1214.11 L1912.56 1214.11 L1911.97 1214.11 L1911.38 1214.11 L1910.8 1214.11 L1910.21 1214.11 L1909.63 1214.11 L1909.04 1214.11 L1908.45 1214.11 L1907.87 1214.11 L1907.28 1214.11 L1906.69 1214.11 L1906.11 1214.11 L1905.52 1214.11 L1904.93 1214.11 L1904.35 1214.11 L1903.76 1214.11 L1903.17 1214.11 L1902.59 1214.11 L1902 1214.11 L1901.42 1214.11 L1900.83 1214.11 L1900.24 1214.11 L1899.66 1214.11 L1899.07 1214.11 L1898.48 1214.11 L1897.9 1214.11 L1897.31 1214.11 L1896.72 1214.11 L1896.14 1214.11 L1895.55 1214.11 L1894.96 1214.11 L1894.38 1214.11 L1893.79 1214.11 L1893.21 1214.11 L1892.62 1214.11 L1892.03 1214.11 L1891.45 1214.11 L1890.86 1214.11 L1890.27 1214.11 L1889.69 1214.11 L1889.1 1214.11 L1888.51 1214.11 L1887.93 1214.11 L1887.34 1214.11 L1886.76 1214.11 L1886.17 1214.11 L1885.58 1214.11 L1885 1214.11 L1884.41 1214.11 L1883.82 1214.11 L1883.24 1214.11 L1882.65 1214.11 L1882.06 1214.11 L1881.48 1214.11 L1880.89 1214.11 L1880.3 1214.11 L1879.72 1214.11 L1879.13 1214.11 L1878.55 1214.11 L1877.96 1214.11 L1877.37 1214.11 L1876.79 1214.11 L1876.2 1214.11 L1875.61 1214.11 L1875.03 1214.11 L1874.44 1214.11 L1873.85 1214.11 L1873.27 1214.11 L1872.68 1214.11 L1872.09 1214.11 L1871.51 1214.11 L1870.92 1214.11 L1870.34 1214.11 L1869.75 1214.11 L1869.16 1214.11 L1868.58 1214.11 L1867.99 1214.11 L1867.4 1214.11 L1866.82 1214.11 L1866.23 1214.11 L1865.64 1214.11 L1865.06 1214.11 L1864.47 1214.11 L1863.88 1214.11 L1863.3 1214.11 L1862.71 1214.11 L1862.13 1214.11 L1861.54 1214.11 L1860.95 1214.11 L1860.37 1214.11 L1859.78 1214.11 L1859.19 1214.11 L1858.61 1214.11 L1858.02 1214.11 L1857.43 1214.11 L1856.85 1214.11 L1856.26 1214.11 L1855.68 1214.11 L1855.09 1214.11 L1854.5 1214.11 L1853.92 1214.11 L1853.33 1214.11 L1852.74 1214.11 L1852.16 1214.11 L1851.57 1214.11 L1850.98 1214.11 L1850.4 1214.11 L1849.81 1214.11 L1849.22 1214.11 L1848.64 1214.11 L1848.05 1214.11 L1847.47 1214.11 L1846.88 1214.11 L1846.29 1214.11 L1845.71 1214.11 L1845.12 1214.11 L1844.53 1214.11 L1843.95 1214.11 L1843.36 1214.11 L1842.77 1214.11 L1842.19 1214.11 L1841.6 1214.11 L1841.01 1214.11 L1840.43 1214.11 L1839.84 1214.11 L1839.26 1214.11 L1838.67 1214.11 L1838.08 1214.11 L1837.5 1214.11 L1836.91 1214.11 L1836.32 1214.11 L1835.74 1214.11 L1835.15 1214.11 L1834.56 1214.11 L1833.98 1214.11 L1833.39 1214.11 L1832.81 1214.11 L1832.22 1214.11 L1831.63 1214.11 L1831.05 1214.11 L1830.46 1214.11 L1829.87 1214.11 L1829.29 1214.11 L1828.7 1214.11 L1828.11 1214.11 L1827.53 1214.11 L1826.94 1214.11 L1826.35 1214.11 L1825.77 1214.11 L1825.18 1214.11 L1824.6 1214.11 L1824.01 1214.11 L1823.42 1214.11 L1822.84 1214.11 L1822.25 1214.11 L1821.66 1214.11 L1821.08 1214.11 L1820.49 1214.11 L1819.9 1214.11 L1819.32 1214.11 L1818.73 1214.11 L1818.14 1214.11 L1817.56 1214.11 L1816.97 1214.11 L1816.39 1214.11 L1815.8 1214.11 L1815.21 1214.11 L1814.63 1214.11 L1814.04 1214.11 L1813.45 1214.11 L1812.87 1214.11 L1812.28 1214.11 L1811.69 1214.11 L1811.11 1214.11 L1810.52 1214.11 L1809.94 1214.11 L1809.35 1214.11 L1808.76 1214.11 L1808.18 1214.11 L1807.59 1214.11 L1807 1214.11 L1806.42 1214.11 L1805.83 1214.11 L1805.24 1214.11 L1804.66 1214.11 L1804.07 1214.11 L1803.48 1214.11 L1802.9 1214.11 L1802.31 1214.11 L1801.73 1214.11 L1801.14 1214.11 L1800.55 1214.11 L1799.97 1214.11 L1799.38 1214.11 L1798.79 1214.11 L1798.21 1214.11 L1797.62 1214.11 L1797.03 1214.11 L1796.45 1214.11 L1795.86 1214.11 L1795.27 1214.11 L1794.69 1214.11 L1794.1 1214.11 L1793.52 1214.11 L1792.93 1214.11 L1792.34 1214.11 L1791.76 1214.11 L1791.17 1214.11 L1790.58 1214.11 L1790 1214.11 L1789.41 1214.11 L1788.82 1214.11 L1788.24 1214.11 L1787.65 1214.11 L1787.06 1214.11 L1786.48 1214.11 L1785.89 1214.11 L1785.31 1214.11 L1784.72 1214.11 L1784.13 1214.11 L1783.55 1214.11 L1782.96 1214.11 L1782.37 1214.11 L1781.79 1214.11 L1781.2 1214.11 L1780.61 1214.11 L1780.03 1214.11 L1779.44 1214.11 L1778.86 1214.11 L1778.27 1214.11 L1777.68 1214.11 L1777.1 1214.11 L1776.51 1214.11 L1775.92 1214.11 L1775.34 1214.11 L1774.75 1214.11 L1774.16 1214.11 L1773.58 1214.11 L1772.99 1214.11 L1772.4 1214.11 L1771.82 1214.11 L1771.23 1214.11 L1770.65 1214.11 L1770.06 1214.11 L1769.47 1214.11 L1768.89 1214.11 L1768.3 1214.11 L1767.71 1214.11 L1767.13 1214.11 L1766.54 1214.11 L1765.95 1214.11 L1765.37 1214.11 L1764.78 1214.11 L1764.19 1214.11 L1763.61 1214.11 L1763.02 1214.11 L1762.44 1214.11 L1761.85 1214.11 L1761.26 1214.11 L1760.68 1214.11 L1760.09 1214.11 L1759.5 1214.11 L1758.92 1214.11 L1758.33 1214.11 L1757.74 1214.11 L1757.16 1214.11 L1756.57 1214.11 L1755.99 1214.11 L1755.4 1214.11 L1754.81 1214.11 L1754.23 1214.11 L1753.64 1214.11 L1753.05 1214.11 L1752.47 1214.11 L1751.88 1214.11 L1751.29 1214.11 L1750.71 1214.11 L1750.12 1214.11 L1749.53 1214.11 L1748.95 1214.11 L1748.36 1214.11 L1747.78 1214.11 L1747.19 1214.11 L1746.6 1214.11 L1746.02 1214.11 L1745.43 1214.11 L1744.84 1214.11 L1744.26 1214.11 L1743.67 1214.11 L1743.08 1214.11 L1742.5 1214.11 L1741.91 1214.11 L1741.32 1214.11 L1740.74 1214.11 L1740.15 1214.11 L1739.57 1214.11 L1738.98 1214.11 L1738.39 1214.11 L1737.81 1214.11 L1737.22 1214.11 L1736.63 1214.11 L1736.05 1214.11 L1735.46 1214.11 L1734.87 1214.11 L1734.29 1214.11 L1733.7 1214.11 L1733.11 1214.11 L1732.53 1214.11 L1731.94 1214.11 L1731.36 1214.11 L1730.77 1214.11 L1730.18 1214.11 L1729.6 1214.11 L1729.01 1214.11 L1728.42 1214.11 L1727.84 1214.11 L1727.25 1214.11 L1726.66 1214.11 L1726.08 1214.11 L1725.49 1214.11 L1724.91 1214.11 L1724.32 1214.11 L1723.73 1214.11 L1723.15 1214.11 L1722.56 1214.11 L1721.97 1214.11 L1721.39 1214.11 L1720.8 1214.11 L1720.21 1214.11 L1719.63 1214.11 L1719.04 1214.11 L1718.45 1214.11 L1717.87 1214.11 L1717.28 1214.11 L1716.7 1214.11 L1716.11 1214.11 L1715.52 1214.11 L1714.94 1214.11 L1714.35 1214.11 L1713.76 1214.11 L1713.18 1214.11 L1712.59 1214.11 L1712 1214.11 L1711.42 1214.11 L1710.83 1214.11 L1710.24 1214.11 L1709.66 1214.11 L1709.07 1214.11 L1708.49 1214.11 L1707.9 1214.11 L1707.31 1214.11 L1706.73 1214.11 L1706.14 1214.11 L1705.55 1214.11 L1704.97 1214.11 L1704.38 1214.11 L1703.79 1214.11 L1703.21 1214.11 L1702.62 1214.11 L1702.04 1214.11 L1701.45 1214.11 L1700.86 1214.11 L1700.28 1214.11 L1699.69 1214.11 L1699.1 1214.11 L1698.52 1214.11 L1697.93 1214.11 L1697.34 1214.11 L1696.76 1214.11 L1696.17 1214.11 L1695.58 1214.11 L1695 1214.11 L1694.41 1214.11 L1693.83 1214.11 L1693.24 1214.11 L1692.65 1214.11 L1692.07 1214.11 L1691.48 1214.11 L1690.89 1214.11 L1690.31 1214.11 L1689.72 1214.11 L1689.13 1214.11 L1688.55 1214.11 L1687.96 1214.11 L1687.37 1214.11 L1686.79 1214.11 L1686.2 1214.11 L1685.62 1214.11 L1685.03 1214.11 L1684.44 1214.11 L1683.86 1214.11 L1683.27 1214.11 L1682.68 1214.11 L1682.1 1214.11 L1681.51 1214.11 L1680.92 1214.11 L1680.34 1214.11 L1679.75 1214.11 L1679.17 1214.11 L1678.58 1214.11 L1677.99 1214.11 L1677.41 1214.11 L1676.82 1214.11 L1676.23 1214.11 L1675.65 1214.11 L1675.06 1214.11 L1674.47 1214.11 L1673.89 1214.11 L1673.3 1214.11 L1672.71 1214.11 L1672.13 1214.11 L1671.54 1214.11 L1670.96 1214.11 L1670.37 1214.11 L1669.78 1214.11 L1669.2 1214.11 L1668.61 1214.11 L1668.02 1214.11 L1667.44 1214.11 L1666.85 1214.11 L1666.26 1214.11 L1665.68 1214.11 L1665.09 1214.11 L1664.5 1214.11 L1663.92 1214.11 L1663.33 1214.11 L1662.75 1214.11 L1662.16 1214.11 L1661.57 1214.11 L1660.99 1214.11 L1660.4 1214.11 L1659.81 1214.11 L1659.23 1214.11 L1658.64 1214.11 L1658.05 1214.11 L1657.47 1214.11 L1656.88 1214.11 L1656.29 1214.11 L1655.71 1214.11 L1655.12 1214.11 L1654.54 1214.11 L1653.95 1214.11 L1653.36 1214.11 L1652.78 1214.11 L1652.19 1214.11 L1651.6 1214.11 L1651.02 1214.11 L1650.43 1214.11 L1649.84 1214.11 L1649.26 1214.11 L1648.67 1214.11 L1648.09 1214.11 L1647.5 1214.11 L1646.91 1214.11 L1646.33 1214.11 L1645.74 1214.11 L1645.15 1214.11 L1644.57 1214.11 L1643.98 1214.11 L1643.39 1214.11 L1642.81 1214.11 L1642.22 1214.11 L1641.63 1214.11 L1641.05 1214.11 L1640.46 1214.11 L1639.88 1214.11 L1639.29 1214.11 L1638.7 1214.11 L1638.12 1214.11 L1637.53 1214.11 L1636.94 1214.11 L1636.36 1214.11 L1635.77 1214.11 L1635.18 1214.11 L1634.6 1214.11 L1634.01 1214.11 L1633.42 1214.11 L1632.84 1214.11 L1632.25 1214.11 L1631.67 1214.11 L1631.08 1214.11 L1630.49 1214.11 L1629.91 1214.11 L1629.32 1214.11 L1628.73 1214.11 L1628.15 1214.11 L1627.56 1214.11 L1626.97 1214.11 L1626.39 1214.11 L1625.8 1214.11 L1625.22 1214.11 L1624.63 1214.11 L1624.04 1214.11 L1623.46 1214.11 L1622.87 1214.11 L1622.28 1214.11 L1621.7 1214.11 L1621.11 1214.11 L1620.52 1214.11 L1619.94 1214.11 L1619.35 1214.11 L1618.76 1214.11 L1618.18 1214.11 L1617.59 1214.11 L1617.01 1214.11 L1616.42 1214.11 L1615.83 1214.11 L1615.25 1214.11 L1614.66 1214.11 L1614.07 1214.11 L1613.49 1214.11 L1612.9 1214.11 L1612.31 1214.11 L1611.73 1214.11 L1611.14 1214.11 L1610.55 1214.11 L1609.97 1214.11 L1609.38 1214.11 L1608.8 1214.11 L1608.21 1214.11 L1607.62 1214.11 L1607.04 1214.11 L1606.45 1214.11 L1605.86 1214.11 L1605.28 1214.11 L1604.69 1214.11 L1604.1 1214.11 L1603.52 1214.11 L1602.93 1214.11 L1602.34 1214.11 L1601.76 1214.11 L1601.17 1214.11 L1600.59 1214.11 L1600 1214.11 L1599.41 1214.11 L1598.83 1214.11 L1598.24 1214.11 L1597.65 1214.11 L1597.07 1214.11 L1596.48 1214.11 L1595.89 1214.11 L1595.31 1214.11 L1594.72 1214.11 L1594.14 1214.11 L1593.55 1214.11 L1592.96 1214.11 L1592.38 1214.11 L1591.79 1214.11 L1591.2 1214.11 L1590.62 1214.11 L1590.03 1214.11 L1589.44 1214.11 L1588.86 1214.11 L1588.27 1214.11 L1587.68 1214.11 L1587.1 1214.11 L1586.51 1214.11 L1585.93 1214.11 L1585.34 1214.11 L1584.75 1214.11 L1584.17 1214.11 L1583.58 1214.11 L1582.99 1214.11 L1582.41 1214.11 L1581.82 1214.11 L1581.23 1214.11 L1580.65 1214.11 L1580.06 1214.11 L1579.47 1214.11 L1578.89 1214.11 L1578.3 1214.11 L1577.72 1214.11 L1577.13 1214.11 L1576.54 1214.11 L1575.96 1214.11 L1575.37 1214.11 L1574.78 1214.11 L1574.2 1214.11 L1573.61 1214.11 L1573.02 1214.11 L1572.44 1214.11 L1571.85 1214.11 L1571.27 1214.11 L1570.68 1214.11 L1570.09 1214.11 L1569.51 1214.11 L1568.92 1214.11 L1568.33 1214.11 L1567.75 1214.11 L1567.16 1214.11 L1566.57 1214.11 L1565.99 1214.11 L1565.4 1214.11 L1564.81 1214.11 L1564.23 1214.11 L1563.64 1214.11 L1563.06 1214.11 L1562.47 1214.11 L1561.88 1214.11 L1561.3 1214.11 L1560.71 1214.11 L1560.12 1214.11 L1559.54 1214.11 L1558.95 1214.11 L1558.36 1214.11 L1557.78 1214.11 L1557.19 1214.11 L1556.6 1214.11 L1556.02 1214.11 L1555.43 1214.11 L1554.85 1214.11 L1554.26 1214.11 L1553.67 1214.11 L1553.09 1214.11 L1552.5 1214.11 L1551.91 1214.11 L1551.33 1214.11 L1550.74 1214.11 L1550.15 1214.11 L1549.57 1214.11 L1548.98 1214.11 L1548.4 1214.11 L1547.81 1214.11 L1547.22 1214.11 L1546.64 1214.11 L1546.05 1214.11 L1545.46 1214.11 L1544.88 1214.11 L1544.29 1214.11 L1543.7 1214.11 L1543.12 1214.11 L1542.53 1214.11 L1541.94 1214.11 L1541.36 1214.11 L1540.77 1214.11 L1540.19 1214.11 L1539.6 1214.11 L1539.01 1214.11 L1538.43 1214.11 L1537.84 1214.11 L1537.25 1214.11 L1536.67 1214.11 L1536.08 1214.11 L1535.49 1214.11 L1534.91 1214.11 L1534.32 1214.11 L1533.73 1214.11 L1533.15 1214.11 L1532.56 1214.11 L1531.98 1214.11 L1531.39 1214.11 L1530.8 1214.11 L1530.22 1214.11 L1529.63 1214.11 L1529.04 1214.11 L1528.46 1214.11 L1527.87 1214.11 L1527.28 1214.11 L1526.7 1214.11 L1526.11 1214.11 L1525.52 1214.11 L1524.94 1214.11 L1524.35 1214.11 L1523.77 1214.11 L1523.18 1214.11 L1522.59 1214.11 L1522.01 1214.11 L1521.42 1214.11 L1520.83 1214.11 L1520.25 1214.11 L1519.66 1214.11 L1519.07 1214.11 L1518.49 1214.11 L1517.9 1214.11 L1517.32 1214.11 L1516.73 1214.11 L1516.14 1214.11 L1515.56 1214.11 L1514.97 1214.11 L1514.38 1214.11 L1513.8 1214.11 L1513.21 1214.11 L1512.62 1214.11 L1512.04 1214.11 L1511.45 1214.11 L1510.86 1214.11 L1510.28 1214.11 L1509.69 1214.11 L1509.11 1214.11 L1508.52 1214.11 L1507.93 1214.11 L1507.35 1214.11 L1506.76 1214.11 L1506.17 1214.11 L1505.59 1214.11 L1505 1214.11 L1504.41 1214.11 L1503.83 1214.11 L1503.24 1214.11 L1502.65 1214.11 L1502.07 1214.11 L1501.48 1214.11 L1500.9 1214.11 L1500.31 1214.11 L1499.72 1214.11 L1499.14 1214.11 L1498.55 1214.11 L1497.96 1214.11 L1497.38 1214.11 L1496.79 1214.11 L1496.2 1214.11 L1495.62 1214.11 L1495.03 1214.11 L1494.45 1214.11 L1493.86 1214.11 L1493.27 1214.11 L1492.69 1214.11 L1492.1 1214.11 L1491.51 1214.11 L1490.93 1214.11 L1490.34 1214.11 L1489.75 1214.11 L1489.17 1214.11 L1488.58 1214.11 L1487.99 1214.11 L1487.41 1214.11 L1486.82 1214.11 L1486.24 1214.11 L1485.65 1214.11 L1485.06 1214.11 L1484.48 1214.11 L1483.89 1214.11 L1483.3 1214.11 L1482.72 1214.11 L1482.13 1214.11 L1481.54 1214.11 L1480.96 1214.11 L1480.37 1214.11 L1479.78 1214.11 L1479.2 1214.11 L1478.61 1214.11 L1478.03 1214.11 L1477.44 1214.11 L1476.85 1214.11 L1476.27 1214.11 L1475.68 1214.11 L1475.09 1214.11 L1474.51 1214.11 L1473.92 1214.11 L1473.33 1214.11 L1472.75 1214.11 L1472.16 1214.11 L1471.57 1214.11 L1470.99 1214.11 L1470.4 1214.11 L1469.82 1214.11 L1469.23 1214.11 L1468.64 1214.11 L1468.06 1214.11 L1467.47 1214.11 L1466.88 1214.11 L1466.3 1214.11 L1465.71 1214.11 L1465.12 1214.11 L1464.54 1214.11 L1463.95 1214.11 L1463.37 1214.11 L1462.78 1214.11 L1462.19 1214.11 L1461.61 1214.11 L1461.02 1214.11 L1460.43 1214.11 L1459.85 1214.11 L1459.26 1214.11 L1458.67 1214.11 L1458.09 1214.11 L1457.5 1214.11 L1456.91 1214.11 L1456.33 1214.11 L1455.74 1214.11 L1455.16 1214.11 L1454.57 1214.11 L1453.98 1214.11 L1453.4 1214.11 L1452.81 1214.11 L1452.22 1214.11 L1451.64 1214.11 L1451.05 1214.11 L1450.46 1214.11 L1449.88 1214.11 L1449.29 1214.11 L1448.7 1214.11 L1448.12 1214.11 L1447.53 1214.11 L1446.95 1214.11 L1446.36 1214.11 L1445.77 1214.11 L1445.19 1214.11 L1444.6 1214.11 L1444.01 1214.11 L1443.43 1214.11 L1442.84 1214.11 L1442.25 1214.11 L1441.67 1214.11 L1441.08 1214.11 L1440.5 1214.11 L1439.91 1214.11 L1439.32 1214.11 L1438.74 1214.11 L1438.15 1214.11 L1437.56 1214.11 L1436.98 1214.11 L1436.39 1214.11 L1435.8 1214.11 L1435.22 1214.11 L1434.63 1214.11 L1434.04 1214.11 L1433.46 1214.11 L1432.87 1214.11 L1432.29 1214.11 L1431.7 1214.11 L1431.11 1214.11 L1430.53 1214.11 L1429.94 1214.11 L1429.35 1214.11 L1428.77 1214.11 L1428.18 1214.11 L1427.59 1214.11 L1427.01 1214.11 L1426.42 1214.11 L1425.83 1214.11 L1425.25 1214.11 L1424.66 1214.11 L1424.08 1214.11 L1423.49 1214.11 L1422.9 1214.11 L1422.32 1214.11 L1421.73 1214.11 L1421.14 1214.11 L1420.56 1214.11 L1419.97 1214.11 L1419.38 1214.11 L1418.8 1214.11 L1418.21 1214.11 L1417.63 1214.11 L1417.04 1214.11 L1416.45 1214.11 L1415.87 1214.11 L1415.28 1214.11 L1414.69 1214.11 L1414.11 1214.11 L1413.52 1214.11 L1412.93 1214.11 L1412.35 1214.11 L1411.76 1214.11 L1411.17 1214.11 L1410.59 1214.11 L1410 1214.11 L1409.42 1214.11 L1408.83 1214.11 L1408.24 1214.11 L1407.66 1214.11 L1407.07 1214.11 L1406.48 1214.11 L1405.9 1214.11 L1405.31 1214.11 L1404.72 1214.11 L1404.14 1214.11 L1403.55 1214.11 L1402.96 1214.11 L1402.38 1214.11 L1401.79 1214.11 L1401.21 1214.11 L1400.62 1214.11 L1400.03 1214.11 L1399.45 1214.11 L1398.86 1214.11 L1398.27 1214.11 L1397.69 1214.11 L1397.1 1214.11 L1396.51 1214.11 L1395.93 1214.11 L1395.34 1214.11 L1394.75 1214.11 L1394.17 1214.11 L1393.58 1214.11 L1393 1214.11 L1392.41 1214.11 L1391.82 1214.11 L1391.24 1214.11 L1390.65 1214.11 L1390.06 1214.11 L1389.48 1214.11 L1388.89 1214.11 L1388.3 1214.11 L1387.72 1214.11 L1387.13 1214.11 L1386.55 1214.11 L1385.96 1214.11 L1385.37 1214.11 L1384.79 1214.11 L1384.2 1214.11 L1383.61 1214.11 L1383.03 1214.11 L1382.44 1214.11 L1381.85 1214.11 L1381.27 1214.11 L1380.68 1214.11 L1380.09 1214.11 L1379.51 1214.11 L1378.92 1214.11 L1378.34 1214.11 L1377.75 1214.11 L1377.16 1214.11 L1376.58 1214.11 L1375.99 1214.11 L1375.4 1214.11 L1374.82 1214.11 L1374.23 1214.11 L1373.64 1214.11 L1373.06 1214.11 L1372.47 1214.11 L1371.88 1214.11 L1371.3 1214.11 L1370.71 1214.11 L1370.13 1214.11 L1369.54 1214.11 L1368.95 1214.11 L1368.37 1214.11 L1367.78 1214.11 L1367.19 1214.11 L1366.61 1214.11 L1366.02 1214.11 L1365.43 1214.11 L1364.85 1214.11 L1364.26 1214.11 L1363.68 1214.11 L1363.09 1214.11 L1362.5 1214.11 L1361.92 1214.11 L1361.33 1214.11 L1360.74 1214.11 L1360.16 1214.11 L1359.57 1214.11 L1358.98 1214.11 L1358.4 1214.11 L1357.81 1214.11 L1357.22 1214.11 L1356.64 1214.11 L1356.05 1214.11 L1355.47 1214.11 L1354.88 1214.11 L1354.29 1214.11 L1353.71 1214.11 L1353.12 1214.11 L1352.53 1214.11 L1351.95 1214.11 L1351.36 1214.11 L1350.77 1214.11 L1350.19 1214.11 L1349.6 1214.11 L1349.01 1214.11 L1348.43 1214.11 L1347.84 1214.11 L1347.26 1214.11 L1346.67 1214.11 L1346.08 1214.11 L1345.5 1214.11 L1344.91 1214.11 L1344.32 1214.11 L1343.74 1214.11 L1343.15 1214.11 L1342.56 1214.11 L1341.98 1214.11 L1341.39 1214.11 L1340.8 1214.11 L1340.22 1214.11 L1339.63 1214.11 L1339.05 1214.11 L1338.46 1214.11 L1337.87 1214.11 L1337.29 1214.11 L1336.7 1214.11 L1336.11 1214.11 L1335.53 1214.11 L1334.94 1214.11 L1334.35 1214.11 L1333.77 1214.11 L1333.18 1214.11 L1332.6 1214.11 L1332.01 1214.11 L1331.42 1214.11 L1330.84 1214.11 L1330.25 1214.11 L1329.66 1214.11 L1329.08 1214.11 L1328.49 1214.11 L1327.9 1214.11 L1327.32 1214.11 L1326.73 1214.11 L1326.14 1214.11 L1325.56 1214.11 L1324.97 1214.11 L1324.39 1214.11 L1323.8 1214.11 L1323.21 1214.11 L1322.63 1214.11 L1322.04 1214.11 L1321.45 1214.11 L1320.87 1214.11 L1320.28 1214.11 L1319.69 1214.11 L1319.11 1214.11 L1318.52 1214.11 L1317.93 1214.11 L1317.35 1214.11 L1316.76 1214.11 L1316.18 1214.11 L1315.59 1214.11 L1315 1214.11 L1314.42 1214.11 L1313.83 1214.11 L1313.24 1214.11 L1312.66 1214.11 L1312.07 1214.11 L1311.48 1214.11 L1310.9 1214.11 L1310.31 1214.11 L1309.73 1214.11 L1309.14 1214.11 L1308.55 1214.11 L1307.97 1214.11 L1307.38 1214.11 L1306.79 1214.11 L1306.21 1214.11 L1305.62 1214.11 L1305.03 1214.11 L1304.45 1214.11 L1303.86 1214.11 L1303.27 1214.11 L1302.69 1214.11 L1302.1 1214.11 L1301.52 1214.11 L1300.93 1214.11 L1300.34 1214.11 L1299.76 1214.11 L1299.17 1214.11 L1298.58 1214.11 L1298 1214.11 L1297.41 1214.11 L1296.82 1214.11 L1296.24 1214.11 L1295.65 1214.11 L1295.06 1214.11 L1294.48 1214.11 L1293.89 1214.11 L1293.31 1214.11 L1292.72 1214.11 L1292.13 1214.11 L1291.55 1214.11 L1290.96 1214.11 L1290.37 1214.11 L1289.79 1214.11 L1289.2 1214.11 L1288.61 1214.11 L1288.03 1214.11 L1287.44 1214.11 L1286.86 1214.11 L1286.27 1214.11 L1285.68 1214.11 L1285.1 1214.11 L1284.51 1214.11 L1283.92 1214.11 L1283.34 1214.11 L1282.75 1214.11 L1282.16 1214.11 L1281.58 1214.11 L1280.99 1214.11 L1280.4 1214.11 L1279.82 1214.11 L1279.23 1214.11 L1278.65 1214.11 L1278.06 1214.11 L1277.47 1214.11 L1276.89 1214.11 L1276.3 1214.11 L1275.71 1214.11 L1275.13 1214.11 L1274.54 1214.11 L1273.95 1214.11 L1273.37 1214.11 L1272.78 1214.11 L1272.19 1214.11 L1271.61 1214.11 L1271.02 1214.11 L1270.44 1214.11 L1269.85 1214.11 L1269.26 1214.11 L1268.68 1214.11 L1268.09 1214.11 L1267.5 1214.11 L1266.92 1214.11 L1266.33 1214.11 L1265.74 1214.11 L1265.16 1214.11 L1264.57 1214.11 L1263.98 1214.11 L1263.4 1214.11 L1262.81 1214.11 L1262.23 1214.11 L1261.64 1214.11 L1261.05 1214.11 L1260.47 1214.11 L1259.88 1214.11 L1259.29 1214.11 L1258.71 1214.11 L1258.12 1214.11 L1257.53 1214.11 L1256.95 1214.11 L1256.36 1214.11 L1255.78 1214.11 L1255.19 1214.11 L1254.6 1214.11 L1254.02 1214.11 L1253.43 1214.11 L1252.84 1214.11 L1252.26 1214.11 L1251.67 1214.11 L1251.08 1214.11 L1250.5 1214.11 L1249.91 1214.11 L1249.32 1214.11 L1248.74 1214.11 L1248.15 1214.11 L1247.57 1214.11 L1246.98 1214.11 L1246.39 1214.11 L1245.81 1214.11 L1245.22 1214.11 L1244.63 1214.11 L1244.05 1214.11 L1243.46 1214.11 L1242.87 1214.11 L1242.29 1214.11 L1241.7 1214.11 L1241.11 1214.11 L1240.53 1214.11 L1239.94 1214.11 L1239.36 1214.11 L1238.77 1214.11 L1238.18 1214.11 L1237.6 1214.11 L1237.01 1214.11 L1236.42 1214.11 L1235.84 1214.11 L1235.25 1214.11 L1234.66 1214.11 L1234.08 1214.11 L1233.49 1214.11 L1232.91 1214.11 L1232.32 1214.11 L1231.73 1214.11 L1231.15 1214.11 L1230.56 1214.11 L1229.97 1214.11 L1229.39 1214.11 L1228.8 1214.11 L1228.21 1214.11 L1227.63 1214.11 L1227.04 1214.11 L1226.45 1214.11 L1225.87 1214.11 L1225.28 1214.11 L1224.7 1214.11 L1224.11 1214.11 L1223.52 1214.11 L1222.94 1214.11 L1222.35 1214.11 L1221.76 1214.11 L1221.18 1214.11 L1220.59 1214.11 L1220 1214.11 L1219.42 1214.11 L1218.83 1214.11 L1218.24 1214.11 L1217.66 1214.11 L1217.07 1214.11 L1216.49 1214.11 L1215.9 1214.11 L1215.31 1214.11 L1214.73 1214.11 L1214.14 1214.11 L1213.55 1214.11 L1212.97 1214.11 L1212.38 1214.11 L1211.79 1214.11 L1211.21 1214.11 L1210.62 1214.11 L1210.03 1214.11 L1209.45 1214.11 L1208.86 1214.11 L1208.28 1214.11 L1207.69 1214.11 L1207.1 1214.11 L1206.52 1214.11 L1205.93 1214.11 L1205.34 1214.11 L1204.76 1214.11 L1204.17 1214.11 L1203.58 1214.11 L1203 1214.11 L1202.41 1214.11 L1201.83 1214.11 L1201.24 1214.11 L1200.65 1214.11 L1200.07 1214.11 L1199.48 1214.11 L1198.89 1214.11 L1198.31 1214.11 L1197.72 1214.11 L1197.13 1214.11 L1196.55 1214.11 L1195.96 1214.11 L1195.37 1214.11 L1194.79 1214.11 L1194.2 1214.11 L1193.62 1214.11 L1193.03 1214.11 L1192.44 1214.11 L1191.86 1214.11 L1191.27 1214.11 L1190.68 1214.11 L1190.1 1214.11 L1189.51 1214.11 L1188.92 1214.11 L1188.34 1214.11 L1187.75 1214.11 L1187.16 1214.11 L1186.58 1214.11 L1185.99 1214.11 L1185.41 1214.11 L1184.82 1214.11 L1184.23 1214.11 L1183.65 1214.11 L1183.06 1214.11 L1182.47 1214.11 L1181.89 1214.11 L1181.3 1214.11 L1180.71 1214.11 L1180.13 1214.11 L1179.54 1214.11 L1178.96 1214.11 L1178.37 1214.11 L1177.78 1214.11 L1177.2 1214.11 L1176.61 1214.11 L1176.02 1214.11 L1175.44 1214.11 L1174.85 1214.11 L1174.26 1214.11 L1173.68 1214.11 L1173.09 1214.11 L1172.5 1214.11 L1171.92 1214.11 L1171.33 1214.11 L1170.75 1214.11 L1170.16 1214.11 L1169.57 1214.11 L1168.99 1214.11 L1168.4 1214.11 L1167.81 1214.11 L1167.23 1214.11 L1166.64 1214.11 L1166.05 1214.11 L1165.47 1214.11 L1164.88 1214.11 L1164.29 1214.11 L1163.71 1214.11 L1163.12 1214.11 L1162.54 1214.11 L1161.95 1214.11 L1161.36 1214.11 L1160.78 1214.11 L1160.19 1214.11 L1159.6 1214.11 L1159.02 1214.11 L1158.43 1214.11 L1157.84 1214.11 L1157.26 1214.11 L1156.67 1214.11 L1156.09 1214.11 L1155.5 1214.11 L1154.91 1214.11 L1154.33 1214.11 L1153.74 1214.11 L1153.15 1214.11 L1152.57 1214.11 L1151.98 1214.11 L1151.39 1214.11 L1150.81 1214.11 L1150.22 1214.11 L1149.63 1214.11 L1149.05 1214.11 L1148.46 1214.11 L1147.88 1214.11 L1147.29 1214.11 L1146.7 1214.11 L1146.12 1214.11 L1145.53 1214.11 L1144.94 1214.11 L1144.36 1214.11 L1143.77 1214.11 L1143.18 1214.11 L1142.6 1214.11 L1142.01 1214.11 L1141.42 1214.11 L1140.84 1214.11 L1140.25 1214.11 L1139.67 1214.11 L1139.08 1214.11 L1138.49 1214.11 L1137.91 1214.11 L1137.32 1214.11 L1136.73 1214.11 L1136.15 1214.11 L1135.56 1214.11 L1134.97 1214.11 L1134.39 1214.11 L1133.8 1214.11 L1133.21 1214.11 L1132.63 1214.11 L1132.04 1214.11 L1131.46 1214.11 L1130.87 1214.11 L1130.28 1214.11 L1129.7 1214.11 L1129.11 1214.11 L1128.52 1214.11 L1127.94 1214.11 L1127.35 1214.11 L1126.76 1214.11 L1126.18 1214.11 L1125.59 1214.11 L1125.01 1214.11 L1124.42 1214.11 L1123.83 1214.11 L1123.25 1214.11 L1122.66 1214.11 L1122.07 1214.11 L1121.49 1214.11 L1120.9 1214.11 L1120.31 1214.11 L1119.73 1214.11 L1119.14 1214.11 L1118.55 1214.11 L1117.97 1214.11 L1117.38 1214.11 L1116.8 1214.11 L1116.21 1214.11 L1115.62 1214.11 L1115.04 1214.11 L1114.45 1214.11 L1113.86 1214.11 L1113.28 1214.11 L1112.69 1214.11 L1112.1 1214.11 L1111.52 1214.11 L1110.93 1214.11 L1110.34 1214.11 L1109.76 1214.11 L1109.17 1214.11 L1108.59 1214.11 L1108 1214.11 L1107.41 1214.11 L1106.83 1214.11 L1106.24 1214.11 L1105.65 1214.11 L1105.07 1214.11 L1104.48 1214.11 L1103.89 1214.11 L1103.31 1214.11 L1102.72 1214.11 L1102.14 1214.11 L1101.55 1214.11 L1100.96 1214.11 L1100.38 1214.11 L1099.79 1214.11 L1099.2 1214.11 L1098.62 1214.11 L1098.03 1214.11 L1097.44 1214.11 L1096.86 1214.11 L1096.27 1214.11 L1095.68 1214.11 L1095.1 1214.11 L1094.51 1214.11 L1093.93 1214.11 L1093.34 1214.11 L1092.75 1214.11 L1092.17 1214.11 L1091.58 1214.11 L1090.99 1214.11 L1090.41 1214.11 L1089.82 1214.11 L1089.23 1214.11 L1088.65 1214.11 L1088.06 1214.11 L1087.47 1214.11 L1086.89 1214.11 L1086.3 1214.11 L1085.72 1214.11 L1085.13 1214.11 L1084.54 1214.11 L1083.96 1214.11 L1083.37 1214.11 L1082.78 1214.11 L1082.2 1214.11 L1081.61 1214.11 L1081.02 1214.11 L1080.44 1214.11 L1079.85 1214.11 L1079.26 1214.11 L1078.68 1214.11 L1078.09 1214.11 L1077.51 1214.11 L1076.92 1214.11 L1076.33 1214.11 L1075.75 1214.11 L1075.16 1214.11 L1074.57 1214.11 L1073.99 1214.11 L1073.4 1214.11 L1072.81 1214.11 L1072.23 1214.11 L1071.64 1214.11 L1071.06 1214.11 L1070.47 1214.11 L1069.88 1214.11 L1069.3 1214.11 L1068.71 1214.11 L1068.12 1214.11 L1067.54 1214.11 L1066.95 1214.11 L1066.36 1214.11 L1065.78 1214.11 L1065.19 1214.11 L1064.6 1214.11 L1064.02 1214.11 L1063.43 1214.11 L1062.85 1214.11 L1062.26 1214.11 L1061.67 1214.11 L1061.09 1214.11 L1060.5 1214.11 L1059.91 1214.11 L1059.33 1214.11 L1058.74 1214.11 L1058.15 1214.11 L1057.57 1214.11 L1056.98 1214.11 L1056.39 1214.11 L1055.81 1214.11 L1055.22 1214.11 L1054.64 1214.11 L1054.05 1214.11 L1053.46 1214.11 L1052.88 1214.11 L1052.29 1214.11 L1051.7 1214.11 L1051.12 1214.11 L1050.53 1214.11 L1049.94 1214.11 L1049.36 1214.11 L1048.77 1214.11 L1048.19 1214.11 L1047.6 1214.11 L1047.01 1214.11 L1046.43 1214.11 L1045.84 1214.11 L1045.25 1214.11 L1044.67 1214.11 L1044.08 1214.11 L1043.49 1214.11 L1042.91 1214.11 L1042.32 1214.11 L1041.73 1214.11 L1041.15 1214.11 L1040.56 1214.11 L1039.98 1214.11 L1039.39 1214.11 L1038.8 1214.11 L1038.22 1214.11 L1037.63 1214.11 L1037.04 1214.11 L1036.46 1214.11 L1035.87 1214.11 L1035.28 1214.11 L1034.7 1214.11 L1034.11 1214.11 L1033.52 1214.11 L1032.94 1214.11 L1032.35 1214.11 L1031.77 1214.11 L1031.18 1214.11 L1030.59 1214.11 L1030.01 1214.11 L1029.42 1214.11 L1028.83 1214.11 L1028.25 1214.11 L1027.66 1214.11 L1027.07 1214.11 L1026.49 1214.11 L1025.9 1214.11 L1025.32 1214.11 L1024.73 1214.11 L1024.14 1214.11 L1023.56 1214.11 L1022.97 1214.11 L1022.38 1214.11 L1021.8 1214.11 L1021.21 1214.11 L1020.62 1214.11 L1020.04 1214.11 L1019.45 1214.11 L1018.86 1214.11 L1018.28 1214.11 L1017.69 1214.11 L1017.11 1214.11 L1016.52 1214.11 L1015.93 1214.11 L1015.35 1214.11 L1014.76 1214.11 L1014.17 1214.11 L1013.59 1214.11 L1013 1214.11 L1012.41 1214.11 L1011.83 1214.11 L1011.24 1214.11 L1010.65 1214.11 L1010.07 1214.11 L1009.48 1214.11 L1008.9 1214.11 L1008.31 1214.11 L1007.72 1214.11 L1007.14 1214.11 L1006.55 1214.11 L1005.96 1214.11 L1005.38 1214.11 L1004.79 1214.11 L1004.2 1214.11 L1003.62 1214.11 L1003.03 1214.11 L1002.44 1214.11 L1001.86 1214.11 L1001.27 1214.11 L1000.69 1214.11 L1000.1 1214.11 L999.513 1214.11 L998.926 1214.11 L998.34 1214.11 L997.754 1214.11 L997.167 1214.11 L996.581 1214.11 L995.994 1214.11 L995.408 1214.11 L994.822 1214.11 L994.235 1214.11 L993.649 1214.11 L993.062 1214.11 L992.476 1214.11 L991.889 1214.11 L991.303 1214.11 L990.717 1214.11 L990.13 1214.11 L989.544 1214.11 L988.957 1214.11 L988.371 1214.11 L987.785 1214.11 L987.198 1214.11 L986.612 1214.11 L986.025 1214.11  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.43 986.612,1214.43 987.198,1214.43 987.785,1214.43 988.371,1214.43 988.957,1214.43 989.544,1214.43 990.13,1214.43 990.717,1214.43 991.303,1214.43 991.889,1214.43 992.476,1214.43 993.062,1214.43 993.649,1214.43 994.235,1214.43 994.822,1214.43 995.408,1214.43 995.994,1214.43 996.581,1214.43 997.167,1214.43 997.754,1214.43 998.34,1214.43 998.926,1214.43 999.513,1214.43 1000.1,1214.43 1000.69,1214.43 1001.27,1214.43 1001.86,1214.43 1002.44,1214.43 1003.03,1214.43 1003.62,1214.43 1004.2,1214.43 1004.79,1214.43 1005.38,1214.43 1005.96,1214.43 1006.55,1214.43 1007.14,1214.43 1007.72,1214.43 1008.31,1214.43 1008.9,1214.43 1009.48,1214.43 1010.07,1214.43 1010.65,1214.43 1011.24,1214.43 1011.83,1214.43 1012.41,1214.43 1013,1214.43 1013.59,1214.43 1014.17,1214.43 1014.76,1214.43 1015.35,1214.43 1015.93,1214.43 1016.52,1214.43 1017.11,1214.43 1017.69,1214.43 1018.28,1214.43 1018.86,1214.43 1019.45,1214.43 1020.04,1214.43 1020.62,1214.43 1021.21,1214.43 1021.8,1214.43 1022.38,1214.43 1022.97,1214.43 1023.56,1214.43 1024.14,1214.43 1024.73,1214.43 1025.32,1214.43 1025.9,1214.43 1026.49,1214.43 1027.07,1214.43 1027.66,1214.43 1028.25,1214.43 1028.83,1214.43 1029.42,1214.43 1030.01,1214.43 1030.59,1214.43 1031.18,1214.43 1031.77,1214.43 1032.35,1214.43 1032.94,1214.43 1033.52,1214.43 1034.11,1214.43 1034.7,1214.43 1035.28,1214.43 1035.87,1214.43 1036.46,1214.43 1037.04,1214.43 1037.63,1214.43 1038.22,1214.43 1038.8,1214.43 1039.39,1214.43 1039.98,1214.43 1040.56,1214.43 1041.15,1214.43 1041.73,1214.43 1042.32,1214.43 1042.91,1214.43 1043.49,1214.43 1044.08,1214.43 1044.67,1214.43 1045.25,1214.43 1045.84,1214.43 1046.43,1214.43 1047.01,1214.43 1047.6,1214.43 1048.19,1214.43 1048.77,1214.43 1049.36,1214.43 1049.94,1214.43 1050.53,1214.43 1051.12,1214.43 1051.7,1214.43 1052.29,1214.43 1052.88,1214.43 1053.46,1214.43 1054.05,1214.43 1054.64,1214.43 1055.22,1214.43 1055.81,1214.43 1056.39,1214.43 1056.98,1214.43 1057.57,1214.43 1058.15,1214.43 1058.74,1214.43 1059.33,1214.43 1059.91,1214.43 1060.5,1214.43 1061.09,1214.43 1061.67,1214.43 1062.26,1214.43 1062.85,1214.43 1063.43,1214.43 1064.02,1214.43 1064.6,1214.43 1065.19,1214.43 1065.78,1214.43 1066.36,1214.43 1066.95,1214.43 1067.54,1214.43 1068.12,1214.43 1068.71,1214.43 1069.3,1214.43 1069.88,1214.43 1070.47,1214.43 1071.06,1214.43 1071.64,1214.43 1072.23,1214.43 1072.81,1214.43 1073.4,1214.43 1073.99,1214.43 1074.57,1214.43 1075.16,1214.43 1075.75,1214.43 1076.33,1214.43 1076.92,1214.43 1077.51,1214.43 1078.09,1214.43 1078.68,1214.43 1079.26,1214.43 1079.85,1214.43 1080.44,1214.43 1081.02,1214.43 1081.61,1214.43 1082.2,1214.43 1082.78,1214.43 1083.37,1214.43 1083.96,1214.43 1084.54,1214.43 1085.13,1214.43 1085.72,1214.43 1086.3,1214.43 1086.89,1214.43 1087.47,1214.43 1088.06,1214.43 1088.65,1214.43 1089.23,1214.43 1089.82,1214.43 1090.41,1214.43 1090.99,1214.43 1091.58,1214.43 1092.17,1214.43 1092.75,1214.43 1093.34,1214.43 1093.93,1214.43 1094.51,1214.43 1095.1,1214.43 1095.68,1214.43 1096.27,1214.43 1096.86,1214.43 1097.44,1214.43 1098.03,1214.43 1098.62,1214.43 1099.2,1214.43 1099.79,1214.43 1100.38,1214.43 1100.96,1214.43 1101.55,1214.43 1102.14,1214.43 1102.72,1214.43 1103.31,1214.43 1103.89,1214.43 1104.48,1214.43 1105.07,1214.43 1105.65,1214.43 1106.24,1214.43 1106.83,1214.43 1107.41,1214.43 1108,1214.43 1108.59,1214.43 1109.17,1214.43 1109.76,1214.43 1110.34,1214.43 1110.93,1214.43 1111.52,1214.43 1112.1,1214.43 1112.69,1214.43 1113.28,1214.43 1113.86,1214.43 1114.45,1214.43 1115.04,1214.43 1115.62,1214.43 1116.21,1214.43 1116.8,1214.43 1117.38,1214.43 1117.97,1214.43 1118.55,1214.43 1119.14,1214.43 1119.73,1214.43 1120.31,1214.43 1120.9,1214.43 1121.49,1214.43 1122.07,1214.43 1122.66,1214.43 1123.25,1214.43 1123.83,1214.43 1124.42,1214.43 1125.01,1214.43 1125.59,1214.43 1126.18,1214.43 1126.76,1214.43 1127.35,1214.43 1127.94,1214.43 1128.52,1214.43 1129.11,1214.43 1129.7,1214.43 1130.28,1214.43 1130.87,1214.43 1131.46,1214.43 1132.04,1214.43 1132.63,1214.43 1133.21,1214.43 1133.8,1214.43 1134.39,1214.43 1134.97,1214.43 1135.56,1214.43 1136.15,1214.43 1136.73,1214.43 1137.32,1214.43 1137.91,1214.43 1138.49,1214.43 1139.08,1214.43 1139.67,1214.43 1140.25,1214.43 1140.84,1214.43 1141.42,1214.43 1142.01,1214.43 1142.6,1214.43 1143.18,1214.43 1143.77,1214.43 1144.36,1214.43 1144.94,1214.43 1145.53,1214.43 1146.12,1214.43 1146.7,1214.43 1147.29,1214.43 1147.88,1214.43 1148.46,1214.43 1149.05,1214.43 1149.63,1214.43 1150.22,1214.43 1150.81,1214.43 1151.39,1214.43 1151.98,1214.43 1152.57,1214.43 1153.15,1214.43 1153.74,1214.43 1154.33,1214.43 1154.91,1214.43 1155.5,1214.43 1156.09,1214.43 1156.67,1214.43 1157.26,1214.43 1157.84,1214.43 1158.43,1214.43 1159.02,1214.43 1159.6,1214.43 1160.19,1214.43 1160.78,1214.43 1161.36,1214.43 1161.95,1214.43 1162.54,1214.43 1163.12,1214.43 1163.71,1214.43 1164.29,1214.43 1164.88,1214.43 1165.47,1214.43 1166.05,1214.43 1166.64,1214.43 1167.23,1214.43 1167.81,1214.43 1168.4,1214.43 1168.99,1214.43 1169.57,1214.43 1170.16,1214.43 1170.75,1214.43 1171.33,1214.43 1171.92,1214.43 1172.5,1214.43 1173.09,1214.43 1173.68,1214.43 1174.26,1214.43 1174.85,1214.43 1175.44,1214.43 1176.02,1214.43 1176.61,1214.43 1177.2,1214.43 1177.78,1214.43 1178.37,1214.43 1178.96,1214.43 1179.54,1214.43 1180.13,1214.43 1180.71,1214.43 1181.3,1214.43 1181.89,1214.43 1182.47,1214.43 1183.06,1214.43 1183.65,1214.43 1184.23,1214.43 1184.82,1214.43 1185.41,1214.43 1185.99,1214.43 1186.58,1214.43 1187.16,1214.43 1187.75,1214.43 1188.34,1214.43 1188.92,1214.43 1189.51,1214.43 1190.1,1214.43 1190.68,1214.43 1191.27,1214.43 1191.86,1214.43 1192.44,1214.43 1193.03,1214.43 1193.62,1214.43 1194.2,1214.43 1194.79,1214.43 1195.37,1214.43 1195.96,1214.43 1196.55,1214.43 1197.13,1214.43 1197.72,1214.43 1198.31,1214.43 1198.89,1214.43 1199.48,1214.43 1200.07,1214.43 1200.65,1214.43 1201.24,1214.43 1201.83,1214.43 1202.41,1214.43 1203,1214.43 1203.58,1214.43 1204.17,1214.43 1204.76,1214.43 1205.34,1214.43 1205.93,1214.43 1206.52,1214.43 1207.1,1214.43 1207.69,1214.43 1208.28,1214.43 1208.86,1214.43 1209.45,1214.43 1210.03,1214.43 1210.62,1214.43 1211.21,1214.43 1211.79,1214.43 1212.38,1214.43 1212.97,1214.43 1213.55,1214.43 1214.14,1214.43 1214.73,1214.43 1215.31,1214.43 1215.9,1214.43 1216.49,1214.43 1217.07,1214.43 1217.66,1214.43 1218.24,1214.43 1218.83,1214.43 1219.42,1214.43 1220,1214.43 1220.59,1214.43 1221.18,1214.43 1221.76,1214.43 1222.35,1214.43 1222.94,1214.43 1223.52,1214.43 1224.11,1214.43 1224.7,1214.43 1225.28,1214.43 1225.87,1214.43 1226.45,1214.43 1227.04,1214.43 1227.63,1214.43 1228.21,1214.43 1228.8,1214.43 1229.39,1214.43 1229.97,1214.43 1230.56,1214.43 1231.15,1214.43 1231.73,1214.43 1232.32,1214.43 1232.91,1214.43 1233.49,1214.43 1234.08,1214.43 1234.66,1214.43 1235.25,1214.43 1235.84,1214.43 1236.42,1214.43 1237.01,1214.43 1237.6,1214.43 1238.18,1214.43 1238.77,1214.43 1239.36,1214.43 1239.94,1214.43 1240.53,1214.43 1241.11,1214.43 1241.7,1214.43 1242.29,1214.43 1242.87,1214.43 1243.46,1214.43 1244.05,1214.43 1244.63,1214.43 1245.22,1214.43 1245.81,1214.43 1246.39,1214.43 1246.98,1214.43 1247.57,1214.43 1248.15,1214.43 1248.74,1214.43 1249.32,1214.43 1249.91,1214.43 1250.5,1214.43 1251.08,1214.43 1251.67,1214.43 1252.26,1214.43 1252.84,1214.43 1253.43,1214.43 1254.02,1214.43 1254.6,1214.43 1255.19,1214.43 1255.78,1214.43 1256.36,1214.43 1256.95,1214.43 1257.53,1214.43 1258.12,1214.43 1258.71,1214.43 1259.29,1214.43 1259.88,1214.43 1260.47,1214.43 1261.05,1214.43 1261.64,1214.43 1262.23,1214.43 1262.81,1214.43 1263.4,1214.43 1263.98,1214.43 1264.57,1214.43 1265.16,1214.43 1265.74,1214.43 1266.33,1214.43 1266.92,1214.43 1267.5,1214.43 1268.09,1214.43 1268.68,1214.43 1269.26,1214.43 1269.85,1214.43 1270.44,1214.43 1271.02,1214.43 1271.61,1214.43 1272.19,1214.43 1272.78,1214.43 1273.37,1214.43 1273.95,1214.43 1274.54,1214.43 1275.13,1214.43 1275.71,1214.43 1276.3,1214.43 1276.89,1214.43 1277.47,1214.43 1278.06,1214.43 1278.65,1214.43 1279.23,1214.43 1279.82,1214.43 1280.4,1214.43 1280.99,1214.43 1281.58,1214.43 1282.16,1214.43 1282.75,1214.43 1283.34,1214.43 1283.92,1214.43 1284.51,1214.43 1285.1,1214.43 1285.68,1214.43 1286.27,1214.43 1286.86,1214.43 1287.44,1214.43 1288.03,1214.43 1288.61,1214.43 1289.2,1214.43 1289.79,1214.43 1290.37,1214.43 1290.96,1214.43 1291.55,1214.43 1292.13,1214.43 1292.72,1214.43 1293.31,1214.43 1293.89,1214.43 1294.48,1214.43 1295.06,1214.43 1295.65,1214.43 1296.24,1214.43 1296.82,1214.43 1297.41,1214.43 1298,1214.43 1298.58,1214.43 1299.17,1214.43 1299.76,1214.43 1300.34,1214.43 1300.93,1214.43 1301.52,1214.43 1302.1,1214.43 1302.69,1214.43 1303.27,1214.43 1303.86,1214.43 1304.45,1214.43 1305.03,1214.43 1305.62,1214.43 1306.21,1214.43 1306.79,1214.43 1307.38,1214.43 1307.97,1214.43 1308.55,1214.43 1309.14,1214.43 1309.73,1214.43 1310.31,1214.43 1310.9,1214.43 1311.48,1214.43 1312.07,1214.43 1312.66,1214.43 1313.24,1214.43 1313.83,1214.43 1314.42,1214.43 1315,1214.43 1315.59,1214.43 1316.18,1214.43 1316.76,1214.43 1317.35,1214.43 1317.93,1214.43 1318.52,1214.43 1319.11,1214.43 1319.69,1214.43 1320.28,1214.43 1320.87,1214.43 1321.45,1214.43 1322.04,1214.43 1322.63,1214.43 1323.21,1214.43 1323.8,1214.43 1324.39,1214.43 1324.97,1214.43 1325.56,1214.43 1326.14,1214.43 1326.73,1214.43 1327.32,1214.43 1327.9,1214.43 1328.49,1214.43 1329.08,1214.43 1329.66,1214.43 1330.25,1214.43 1330.84,1214.43 1331.42,1214.43 1332.01,1214.43 1332.6,1214.43 1333.18,1214.43 1333.77,1214.43 1334.35,1214.43 1334.94,1214.43 1335.53,1214.43 1336.11,1214.43 1336.7,1214.43 1337.29,1214.43 1337.87,1214.43 1338.46,1214.43 1339.05,1214.43 1339.63,1214.43 1340.22,1214.43 1340.8,1214.43 1341.39,1214.43 1341.98,1214.43 1342.56,1214.43 1343.15,1214.43 1343.74,1214.43 1344.32,1214.43 1344.91,1214.43 1345.5,1214.43 1346.08,1214.43 1346.67,1214.43 1347.26,1214.43 1347.84,1214.43 1348.43,1214.43 1349.01,1214.43 1349.6,1214.43 1350.19,1214.43 1350.77,1214.43 1351.36,1214.43 1351.95,1214.43 1352.53,1214.43 1353.12,1214.43 1353.71,1214.43 1354.29,1214.43 1354.88,1214.43 1355.47,1214.43 1356.05,1214.43 1356.64,1214.43 1357.22,1214.43 1357.81,1214.43 1358.4,1214.43 1358.98,1214.43 1359.57,1214.43 1360.16,1214.43 1360.74,1214.43 1361.33,1214.43 1361.92,1214.43 1362.5,1214.43 1363.09,1214.43 1363.68,1214.43 1364.26,1214.43 1364.85,1214.43 1365.43,1214.43 1366.02,1214.43 1366.61,1214.43 1367.19,1214.43 1367.78,1214.43 1368.37,1214.43 1368.95,1214.43 1369.54,1214.43 1370.13,1214.43 1370.71,1214.43 1371.3,1214.43 1371.88,1214.43 1372.47,1214.43 1373.06,1214.43 1373.64,1214.43 1374.23,1214.43 1374.82,1214.43 1375.4,1214.43 1375.99,1214.43 1376.58,1214.43 1377.16,1214.43 1377.75,1214.43 1378.34,1214.43 1378.92,1214.43 1379.51,1214.43 1380.09,1214.43 1380.68,1214.43 1381.27,1214.43 1381.85,1214.43 1382.44,1214.43 1383.03,1214.43 1383.61,1214.43 1384.2,1214.43 1384.79,1214.43 1385.37,1214.43 1385.96,1214.43 1386.55,1214.43 1387.13,1214.43 1387.72,1214.43 1388.3,1214.43 1388.89,1214.43 1389.48,1214.43 1390.06,1214.43 1390.65,1214.43 1391.24,1214.43 1391.82,1214.43 1392.41,1214.43 1393,1214.43 1393.58,1214.43 1394.17,1214.43 1394.75,1214.43 1395.34,1214.43 1395.93,1214.43 1396.51,1214.43 1397.1,1214.43 1397.69,1214.43 1398.27,1214.43 1398.86,1214.43 1399.45,1214.43 1400.03,1214.43 1400.62,1214.43 1401.21,1214.43 1401.79,1214.43 1402.38,1214.43 1402.96,1214.43 1403.55,1214.43 1404.14,1214.43 1404.72,1214.43 1405.31,1214.43 1405.9,1214.43 1406.48,1214.43 1407.07,1214.43 1407.66,1214.43 1408.24,1214.43 1408.83,1214.43 1409.42,1214.43 1410,1214.43 1410.59,1214.43 1411.17,1214.43 1411.76,1214.43 1412.35,1214.43 1412.93,1214.43 1413.52,1214.43 1414.11,1214.43 1414.69,1214.43 1415.28,1214.43 1415.87,1214.43 1416.45,1214.43 1417.04,1214.43 1417.63,1214.43 1418.21,1214.43 1418.8,1214.43 1419.38,1214.43 1419.97,1214.43 1420.56,1214.43 1421.14,1214.43 1421.73,1214.43 1422.32,1214.43 1422.9,1214.43 1423.49,1214.43 1424.08,1214.43 1424.66,1214.43 1425.25,1214.43 1425.83,1214.43 1426.42,1214.43 1427.01,1214.43 1427.59,1214.43 1428.18,1214.43 1428.77,1214.43 1429.35,1214.43 1429.94,1214.43 1430.53,1214.43 1431.11,1214.43 1431.7,1214.43 1432.29,1214.43 1432.87,1214.43 1433.46,1214.43 1434.04,1214.43 1434.63,1214.43 1435.22,1214.43 1435.8,1214.43 1436.39,1214.43 1436.98,1214.43 1437.56,1214.43 1438.15,1214.43 1438.74,1214.43 1439.32,1214.43 1439.91,1214.43 1440.5,1214.43 1441.08,1214.43 1441.67,1214.43 1442.25,1214.43 1442.84,1214.43 1443.43,1214.43 1444.01,1214.43 1444.6,1214.43 1445.19,1214.43 1445.77,1214.43 1446.36,1214.43 1446.95,1214.43 1447.53,1214.43 1448.12,1214.43 1448.7,1214.43 1449.29,1214.43 1449.88,1214.43 1450.46,1214.43 1451.05,1214.43 1451.64,1214.43 1452.22,1214.43 1452.81,1214.43 1453.4,1214.43 1453.98,1214.43 1454.57,1214.43 1455.16,1214.43 1455.74,1214.43 1456.33,1214.43 1456.91,1214.43 1457.5,1214.43 1458.09,1214.43 1458.67,1214.43 1459.26,1214.43 1459.85,1214.43 1460.43,1214.43 1461.02,1214.43 1461.61,1214.43 1462.19,1214.43 1462.78,1214.43 1463.37,1214.43 1463.95,1214.43 1464.54,1214.43 1465.12,1214.43 1465.71,1214.43 1466.3,1214.43 1466.88,1214.43 1467.47,1214.43 1468.06,1214.43 1468.64,1214.43 1469.23,1214.43 1469.82,1214.43 1470.4,1214.43 1470.99,1214.43 1471.57,1214.43 1472.16,1214.43 1472.75,1214.43 1473.33,1214.43 1473.92,1214.43 1474.51,1214.43 1475.09,1214.43 1475.68,1214.43 1476.27,1214.43 1476.85,1214.43 1477.44,1214.43 1478.03,1214.43 1478.61,1214.43 1479.2,1214.43 1479.78,1214.43 1480.37,1214.43 1480.96,1214.43 1481.54,1214.43 1482.13,1214.43 1482.72,1214.43 1483.3,1214.43 1483.89,1214.43 1484.48,1214.43 1485.06,1214.43 1485.65,1214.43 1486.24,1214.43 1486.82,1214.43 1487.41,1214.43 1487.99,1214.43 1488.58,1214.43 1489.17,1214.43 1489.75,1214.43 1490.34,1214.43 1490.93,1214.43 1491.51,1214.43 1492.1,1214.43 1492.69,1214.43 1493.27,1214.43 1493.86,1214.43 1494.45,1214.43 1495.03,1214.43 1495.62,1214.43 1496.2,1214.43 1496.79,1214.43 1497.38,1214.43 1497.96,1214.43 1498.55,1214.43 1499.14,1214.43 1499.72,1214.43 1500.31,1214.43 1500.9,1214.43 1501.48,1214.43 1502.07,1214.43 1502.65,1214.43 1503.24,1214.43 1503.83,1214.43 1504.41,1214.43 1505,1214.43 1505.59,1214.43 1506.17,1214.43 1506.76,1214.43 1507.35,1214.43 1507.93,1214.43 1508.52,1214.43 1509.11,1214.43 1509.69,1214.43 1510.28,1214.43 1510.86,1214.43 1511.45,1214.43 1512.04,1214.43 1512.62,1214.43 1513.21,1214.43 1513.8,1214.43 1514.38,1214.43 1514.97,1214.43 1515.56,1214.43 1516.14,1214.43 1516.73,1214.43 1517.32,1214.43 1517.9,1214.43 1518.49,1214.43 1519.07,1214.43 1519.66,1214.43 1520.25,1214.43 1520.83,1214.43 1521.42,1214.43 1522.01,1214.43 1522.59,1214.43 1523.18,1214.43 1523.77,1214.43 1524.35,1214.43 1524.94,1214.43 1525.52,1214.43 1526.11,1214.43 1526.7,1214.43 1527.28,1214.43 1527.87,1214.43 1528.46,1214.43 1529.04,1214.43 1529.63,1214.43 1530.22,1214.43 1530.8,1214.43 1531.39,1214.43 1531.98,1214.43 1532.56,1214.43 1533.15,1214.43 1533.73,1214.43 1534.32,1214.43 1534.91,1214.43 1535.49,1214.43 1536.08,1214.43 1536.67,1214.43 1537.25,1214.43 1537.84,1214.43 1538.43,1214.43 1539.01,1214.43 1539.6,1214.43 1540.19,1214.43 1540.77,1214.43 1541.36,1214.43 1541.94,1214.43 1542.53,1214.43 1543.12,1214.43 1543.7,1214.43 1544.29,1214.43 1544.88,1214.43 1545.46,1214.43 1546.05,1214.43 1546.64,1214.43 1547.22,1214.43 1547.81,1214.43 1548.4,1214.43 1548.98,1214.43 1549.57,1214.43 1550.15,1214.43 1550.74,1214.43 1551.33,1214.43 1551.91,1214.43 1552.5,1214.43 1553.09,1214.43 1553.67,1214.43 1554.26,1214.43 1554.85,1214.43 1555.43,1214.43 1556.02,1214.43 1556.6,1214.43 1557.19,1214.43 1557.78,1214.43 1558.36,1214.43 1558.95,1214.43 1559.54,1214.43 1560.12,1214.43 1560.71,1214.43 1561.3,1214.43 1561.88,1214.43 1562.47,1214.43 1563.06,1214.43 1563.64,1214.43 1564.23,1214.43 1564.81,1214.43 1565.4,1214.43 1565.99,1214.43 1566.57,1214.43 1567.16,1214.43 1567.75,1214.43 1568.33,1214.43 1568.92,1214.43 1569.51,1214.43 1570.09,1214.43 1570.68,1214.43 1571.27,1214.43 1571.85,1214.43 1572.44,1214.43 1573.02,1214.43 1573.61,1214.43 1574.2,1214.43 1574.78,1214.43 1575.37,1214.43 1575.96,1214.43 1576.54,1214.43 1577.13,1214.43 1577.72,1214.43 1578.3,1214.43 1578.89,1214.43 1579.47,1214.43 1580.06,1214.43 1580.65,1214.43 1581.23,1214.43 1581.82,1214.43 1582.41,1214.43 1582.99,1214.43 1583.58,1214.43 1584.17,1214.43 1584.75,1214.43 1585.34,1214.43 1585.93,1214.43 1586.51,1214.43 1587.1,1214.43 1587.68,1214.43 1588.27,1214.43 1588.86,1214.43 1589.44,1214.43 1590.03,1214.43 1590.62,1214.43 1591.2,1214.43 1591.79,1214.43 1592.38,1214.43 1592.96,1214.43 1593.55,1214.43 1594.14,1214.43 1594.72,1214.43 1595.31,1214.43 1595.89,1214.43 1596.48,1214.43 1597.07,1214.43 1597.65,1214.43 1598.24,1214.43 1598.83,1214.43 1599.41,1214.43 1600,1214.43 1600.59,1214.43 1601.17,1214.43 1601.76,1214.43 1602.34,1214.43 1602.93,1214.43 1603.52,1214.43 1604.1,1214.43 1604.69,1214.43 1605.28,1214.43 1605.86,1214.43 1606.45,1214.43 1607.04,1214.43 1607.62,1214.43 1608.21,1214.43 1608.8,1214.43 1609.38,1214.43 1609.97,1214.43 1610.55,1214.43 1611.14,1214.43 1611.73,1214.43 1612.31,1214.43 1612.9,1214.43 1613.49,1214.43 1614.07,1214.43 1614.66,1214.43 1615.25,1214.43 1615.83,1214.43 1616.42,1214.43 1617.01,1214.43 1617.59,1214.43 1618.18,1214.43 1618.76,1214.43 1619.35,1214.43 1619.94,1214.43 1620.52,1214.43 1621.11,1214.43 1621.7,1214.43 1622.28,1214.43 1622.87,1214.43 1623.46,1214.43 1624.04,1214.43 1624.63,1214.43 1625.22,1214.43 1625.8,1214.43 1626.39,1214.43 1626.97,1214.43 1627.56,1214.43 1628.15,1214.43 1628.73,1214.43 1629.32,1214.43 1629.91,1214.43 1630.49,1214.43 1631.08,1214.43 1631.67,1214.43 1632.25,1214.43 1632.84,1214.43 1633.42,1214.43 1634.01,1214.43 1634.6,1214.43 1635.18,1214.43 1635.77,1214.43 1636.36,1214.43 1636.94,1214.43 1637.53,1214.43 1638.12,1214.43 1638.7,1214.43 1639.29,1214.43 1639.88,1214.43 1640.46,1214.43 1641.05,1214.43 1641.63,1214.43 1642.22,1214.43 1642.81,1214.43 1643.39,1214.43 1643.98,1214.43 1644.57,1214.43 1645.15,1214.43 1645.74,1214.43 1646.33,1214.43 1646.91,1214.43 1647.5,1214.43 1648.09,1214.43 1648.67,1214.43 1649.26,1214.43 1649.84,1214.43 1650.43,1214.43 1651.02,1214.43 1651.6,1214.43 1652.19,1214.43 1652.78,1214.43 1653.36,1214.43 1653.95,1214.43 1654.54,1214.43 1655.12,1214.43 1655.71,1214.43 1656.29,1214.43 1656.88,1214.43 1657.47,1214.43 1658.05,1214.43 1658.64,1214.43 1659.23,1214.43 1659.81,1214.43 1660.4,1214.43 1660.99,1214.43 1661.57,1214.43 1662.16,1214.43 1662.75,1214.43 1663.33,1214.43 1663.92,1214.43 1664.5,1214.43 1665.09,1214.43 1665.68,1214.43 1666.26,1214.43 1666.85,1214.43 1667.44,1214.43 1668.02,1214.43 1668.61,1214.43 1669.2,1214.43 1669.78,1214.43 1670.37,1214.43 1670.96,1214.43 1671.54,1214.43 1672.13,1214.43 1672.71,1214.43 1673.3,1214.43 1673.89,1214.43 1674.47,1214.43 1675.06,1214.43 1675.65,1214.43 1676.23,1214.43 1676.82,1214.43 1677.41,1214.43 1677.99,1214.43 1678.58,1214.43 1679.17,1214.43 1679.75,1214.43 1680.34,1214.43 1680.92,1214.43 1681.51,1214.43 1682.1,1214.43 1682.68,1214.43 1683.27,1214.43 1683.86,1214.43 1684.44,1214.43 1685.03,1214.43 1685.62,1214.43 1686.2,1214.43 1686.79,1214.43 1687.37,1214.43 1687.96,1214.43 1688.55,1214.43 1689.13,1214.43 1689.72,1214.43 1690.31,1214.43 1690.89,1214.43 1691.48,1214.43 1692.07,1214.43 1692.65,1214.43 1693.24,1214.43 1693.83,1214.43 1694.41,1214.43 1695,1214.43 1695.58,1214.43 1696.17,1214.43 1696.76,1214.43 1697.34,1214.43 1697.93,1214.43 1698.52,1214.43 1699.1,1214.43 1699.69,1214.43 1700.28,1214.43 1700.86,1214.43 1701.45,1214.43 1702.04,1214.43 1702.62,1214.43 1703.21,1214.43 1703.79,1214.43 1704.38,1214.43 1704.97,1214.43 1705.55,1214.43 1706.14,1214.43 1706.73,1214.43 1707.31,1214.43 1707.9,1214.43 1708.49,1214.43 1709.07,1214.43 1709.66,1214.43 1710.24,1214.43 1710.83,1214.43 1711.42,1214.43 1712,1214.43 1712.59,1214.43 1713.18,1214.43 1713.76,1214.43 1714.35,1214.43 1714.94,1214.43 1715.52,1214.43 1716.11,1214.43 1716.7,1214.43 1717.28,1214.43 1717.87,1214.43 1718.45,1214.43 1719.04,1214.43 1719.63,1214.43 1720.21,1214.43 1720.8,1214.43 1721.39,1214.43 1721.97,1214.43 1722.56,1214.43 1723.15,1214.43 1723.73,1214.43 1724.32,1214.43 1724.91,1214.43 1725.49,1214.43 1726.08,1214.43 1726.66,1214.43 1727.25,1214.43 1727.84,1214.43 1728.42,1214.43 1729.01,1214.43 1729.6,1214.43 1730.18,1214.43 1730.77,1214.43 1731.36,1214.43 1731.94,1214.43 1732.53,1214.43 1733.11,1214.43 1733.7,1214.43 1734.29,1214.43 1734.87,1214.43 1735.46,1214.43 1736.05,1214.43 1736.63,1214.43 1737.22,1214.43 1737.81,1214.43 1738.39,1214.43 1738.98,1214.43 1739.57,1214.43 1740.15,1214.43 1740.74,1214.43 1741.32,1214.43 1741.91,1214.43 1742.5,1214.43 1743.08,1214.43 1743.67,1214.43 1744.26,1214.43 1744.84,1214.43 1745.43,1214.43 1746.02,1214.43 1746.6,1214.43 1747.19,1214.43 1747.78,1214.43 1748.36,1214.43 1748.95,1214.43 1749.53,1214.43 1750.12,1214.43 1750.71,1214.43 1751.29,1214.43 1751.88,1214.43 1752.47,1214.43 1753.05,1214.43 1753.64,1214.43 1754.23,1214.43 1754.81,1214.43 1755.4,1214.43 1755.99,1214.43 1756.57,1214.43 1757.16,1214.43 1757.74,1214.43 1758.33,1214.43 1758.92,1214.43 1759.5,1214.43 1760.09,1214.43 1760.68,1214.43 1761.26,1214.43 1761.85,1214.43 1762.44,1214.43 1763.02,1214.43 1763.61,1214.43 1764.19,1214.43 1764.78,1214.43 1765.37,1214.43 1765.95,1214.43 1766.54,1214.43 1767.13,1214.43 1767.71,1214.43 1768.3,1214.43 1768.89,1214.43 1769.47,1214.43 1770.06,1214.43 1770.65,1214.43 1771.23,1214.43 1771.82,1214.43 1772.4,1214.43 1772.99,1214.43 1773.58,1214.43 1774.16,1214.43 1774.75,1214.43 1775.34,1214.43 1775.92,1214.43 1776.51,1214.43 1777.1,1214.43 1777.68,1214.43 1778.27,1214.43 1778.86,1214.43 1779.44,1214.43 1780.03,1214.43 1780.61,1214.43 1781.2,1214.43 1781.79,1214.43 1782.37,1214.43 1782.96,1214.43 1783.55,1214.43 1784.13,1214.43 1784.72,1214.43 1785.31,1214.43 1785.89,1214.43 1786.48,1214.43 1787.06,1214.43 1787.65,1214.43 1788.24,1214.43 1788.82,1214.43 1789.41,1214.43 1790,1214.43 1790.58,1214.43 1791.17,1214.43 1791.76,1214.43 1792.34,1214.43 1792.93,1214.43 1793.52,1214.43 1794.1,1214.43 1794.69,1214.43 1795.27,1214.43 1795.86,1214.43 1796.45,1214.43 1797.03,1214.43 1797.62,1214.43 1798.21,1214.43 1798.79,1214.43 1799.38,1214.43 1799.97,1214.43 1800.55,1214.43 1801.14,1214.43 1801.73,1214.43 1802.31,1214.43 1802.9,1214.43 1803.48,1214.43 1804.07,1214.43 1804.66,1214.43 1805.24,1214.43 1805.83,1214.43 1806.42,1214.43 1807,1214.43 1807.59,1214.43 1808.18,1214.43 1808.76,1214.43 1809.35,1214.43 1809.94,1214.43 1810.52,1214.43 1811.11,1214.43 1811.69,1214.43 1812.28,1214.43 1812.87,1214.43 1813.45,1214.43 1814.04,1214.43 1814.63,1214.43 1815.21,1214.43 1815.8,1214.43 1816.39,1214.43 1816.97,1214.43 1817.56,1214.43 1818.14,1214.43 1818.73,1214.43 1819.32,1214.43 1819.9,1214.43 1820.49,1214.43 1821.08,1214.43 1821.66,1214.43 1822.25,1214.43 1822.84,1214.43 1823.42,1214.43 1824.01,1214.43 1824.6,1214.43 1825.18,1214.43 1825.77,1214.43 1826.35,1214.43 1826.94,1214.43 1827.53,1214.43 1828.11,1214.43 1828.7,1214.43 1829.29,1214.43 1829.87,1214.43 1830.46,1214.43 1831.05,1214.43 1831.63,1214.43 1832.22,1214.43 1832.81,1214.43 1833.39,1214.43 1833.98,1214.43 1834.56,1214.43 1835.15,1214.43 1835.74,1214.43 1836.32,1214.43 1836.91,1214.43 1837.5,1214.43 1838.08,1214.43 1838.67,1214.43 1839.26,1214.43 1839.84,1214.43 1840.43,1214.43 1841.01,1214.43 1841.6,1214.43 1842.19,1214.43 1842.77,1214.43 1843.36,1214.43 1843.95,1214.43 1844.53,1214.43 1845.12,1214.43 1845.71,1214.43 1846.29,1214.43 1846.88,1214.43 1847.47,1214.43 1848.05,1214.43 1848.64,1214.43 1849.22,1214.43 1849.81,1214.43 1850.4,1214.43 1850.98,1214.43 1851.57,1214.43 1852.16,1214.43 1852.74,1214.43 1853.33,1214.43 1853.92,1214.43 1854.5,1214.43 1855.09,1214.43 1855.68,1214.43 1856.26,1214.43 1856.85,1214.43 1857.43,1214.43 1858.02,1214.43 1858.61,1214.43 1859.19,1214.43 1859.78,1214.43 1860.37,1214.43 1860.95,1214.43 1861.54,1214.43 1862.13,1214.43 1862.71,1214.43 1863.3,1214.43 1863.88,1214.43 1864.47,1214.43 1865.06,1214.43 1865.64,1214.43 1866.23,1214.43 1866.82,1214.43 1867.4,1214.43 1867.99,1214.43 1868.58,1214.43 1869.16,1214.43 1869.75,1214.43 1870.34,1214.43 1870.92,1214.43 1871.51,1214.43 1872.09,1214.43 1872.68,1214.43 1873.27,1214.43 1873.85,1214.43 1874.44,1214.43 1875.03,1214.43 1875.61,1214.43 1876.2,1214.43 1876.79,1214.43 1877.37,1214.43 1877.96,1214.43 1878.55,1214.43 1879.13,1214.43 1879.72,1214.43 1880.3,1214.43 1880.89,1214.43 1881.48,1214.43 1882.06,1214.43 1882.65,1214.43 1883.24,1214.43 1883.82,1214.43 1884.41,1214.43 1885,1214.43 1885.58,1214.43 1886.17,1214.43 1886.76,1214.43 1887.34,1214.43 1887.93,1214.43 1888.51,1214.43 1889.1,1214.43 1889.69,1214.43 1890.27,1214.43 1890.86,1214.43 1891.45,1214.43 1892.03,1214.43 1892.62,1214.43 1893.21,1214.43 1893.79,1214.43 1894.38,1214.43 1894.96,1214.43 1895.55,1214.43 1896.14,1214.43 1896.72,1214.43 1897.31,1214.43 1897.9,1214.43 1898.48,1214.43 1899.07,1214.43 1899.66,1214.43 1900.24,1214.43 1900.83,1214.43 1901.42,1214.43 1902,1214.43 1902.59,1214.43 1903.17,1214.43 1903.76,1214.43 1904.35,1214.43 1904.93,1214.43 1905.52,1214.43 1906.11,1214.43 1906.69,1214.43 1907.28,1214.43 1907.87,1214.43 1908.45,1214.43 1909.04,1214.43 1909.63,1214.43 1910.21,1214.43 1910.8,1214.43 1911.38,1214.43 1911.97,1214.43 1912.56,1214.43 1913.14,1214.43 1913.73,1214.43 1914.32,1214.43 1914.9,1214.43 1915.49,1214.43 1916.08,1214.43 1916.66,1214.43 1917.25,1214.43 1917.83,1214.43 1918.42,1214.43 1919.01,1214.43 1919.59,1214.43 1920.18,1214.43 1920.77,1214.43 1921.35,1214.43 1921.94,1214.43 1922.53,1214.43 1923.11,1214.43 1923.7,1214.43 1924.29,1214.43 1924.87,1214.43 1925.46,1214.43 1926.04,1214.43 1926.63,1214.43 1927.22,1214.43 1927.8,1214.43 1928.39,1214.43 1928.98,1214.43 1929.56,1214.43 1930.15,1214.43 1930.74,1214.43 1931.32,1214.43 1931.91,1214.43 1932.5,1214.43 1933.08,1214.43 1933.67,1214.43 1934.25,1214.43 1934.84,1214.43 1935.43,1214.43 1936.01,1214.43 1936.6,1214.43 1937.19,1214.43 1937.77,1214.43 1938.36,1214.43 1938.95,1214.43 1939.53,1214.43 1940.12,1214.43 1940.71,1214.43 1941.29,1214.43 1941.88,1214.43 1942.46,1214.43 1943.05,1214.43 1943.64,1214.43 1944.22,1214.43 1944.81,1214.43 1945.4,1214.43 1945.98,1214.43 1946.57,1214.43 1947.16,1214.43 1947.74,1214.43 1948.33,1214.43 1948.91,1214.43 1949.5,1214.43 1950.09,1214.43 1950.67,1214.43 1951.26,1214.43 1951.85,1214.43 1952.43,1214.43 1953.02,1214.43 1953.61,1214.43 1954.19,1214.43 1954.78,1214.43 1955.37,1214.43 1955.95,1214.43 1956.54,1214.43 1957.12,1214.43 1957.71,1214.43 1958.3,1214.43 1958.88,1214.43 1959.47,1214.43 1960.06,1214.43 1960.64,1214.43 1961.23,1214.43 1961.82,1214.43 1962.4,1214.43 1962.99,1214.43 1963.58,1214.43 1964.16,1214.43 1964.75,1214.43 1965.33,1214.43 1965.92,1214.43 1966.51,1214.43 1967.09,1214.43 1967.68,1214.43 1968.27,1214.43 1968.85,1214.43 1969.44,1214.43 1970.03,1214.43 1970.61,1214.43 1971.2,1214.43 1971.78,1214.43 1972.37,1214.43 1972.96,1214.43 1973.54,1214.43 1974.13,1214.43 1974.72,1214.43 1975.3,1214.43 1975.89,1214.43 1976.48,1214.43 1977.06,1214.43 1977.65,1214.43 1978.24,1214.43 1978.82,1214.43 1979.41,1214.43 1979.99,1214.43 1980.58,1214.43 1981.17,1214.43 1981.75,1214.43 1982.34,1214.43 1982.93,1214.43 1983.51,1214.43 1984.1,1214.43 1984.69,1214.43 1985.27,1214.43 1985.86,1214.43 1986.45,1214.43 1987.03,1214.43 1987.62,1214.43 1988.2,1214.43 1988.79,1214.43 1989.38,1214.43 1989.96,1214.43 1990.55,1214.43 1991.14,1214.43 1991.72,1214.43 1992.31,1214.43 1992.9,1214.43 1993.48,1214.43 1994.07,1214.43 1994.65,1214.43 1995.24,1214.43 1995.83,1214.43 1996.41,1214.43 1997,1214.43 1997.59,1214.43 1998.17,1214.43 1998.76,1214.43 1999.35,1214.43 1999.93,1214.43 2000.52,1214.43 2001.11,1214.43 2001.69,1214.43 2002.28,1214.43 2002.86,1214.43 2003.45,1214.43 2004.04,1214.43 2004.62,1214.43 2005.21,1214.43 2005.8,1214.43 2006.38,1214.43 2006.97,1214.43 2007.56,1214.43 2008.14,1214.43 2008.73,1214.43 2009.32,1214.43 2009.9,1214.43 2010.49,1214.43 2011.07,1214.43 2011.66,1214.43 2012.25,1214.43 2012.83,1214.43 2013.42,1214.43 2014.01,1214.43 2014.59,1214.43 2015.18,1214.43 2015.77,1214.43 2016.35,1214.43 2016.94,1214.43 2017.53,1214.43 2018.11,1214.43 2018.7,1214.43 2019.28,1214.43 2019.87,1214.43 2020.46,1214.43 2021.04,1214.43 2021.63,1214.43 2022.22,1214.43 2022.8,1214.43 2023.39,1214.43 2023.98,1214.43 2024.56,1214.43 2025.15,1214.43 2025.73,1214.43 2026.32,1214.43 2026.91,1214.43 2027.49,1214.43 2028.08,1214.43 2028.67,1214.43 2029.25,1214.43 2029.84,1214.43 2030.43,1214.43 2031.01,1214.43 2031.6,1214.43 2032.19,1214.43 2032.77,1214.43 2033.36,1214.43 2033.94,1214.43 2034.53,1214.43 2035.12,1214.43 2035.7,1214.43 2036.29,1214.43 2036.88,1214.43 2037.46,1214.43 2038.05,1214.43 2038.64,1214.43 2039.22,1214.43 2039.81,1214.43 2040.4,1214.43 2040.98,1214.43 2041.57,1214.43 2042.15,1214.43 2042.74,1214.43 2043.33,1214.43 2043.91,1214.43 2044.5,1214.43 2045.09,1214.43 2045.67,1214.43 2046.26,1214.43 2046.85,1214.43 2047.43,1214.43 2048.02,1214.43 2048.6,1214.43 2049.19,1214.43 2049.78,1214.43 2050.36,1214.43 2050.95,1214.43 2051.54,1214.43 2052.12,1214.43 2052.71,1214.43 2053.3,1214.43 2053.88,1214.43 2054.47,1214.43 2055.06,1214.43 2055.64,1214.43 2056.23,1214.43 2056.81,1214.43 2057.4,1214.43 2057.99,1214.43 2058.57,1214.43 2059.16,1214.43 2059.75,1214.43 2060.33,1214.43 2060.92,1214.43 2061.51,1214.43 2062.09,1214.43 2062.68,1214.43 2063.27,1214.43 2063.85,1214.43 2064.44,1214.43 2065.02,1214.43 2065.61,1214.43 2066.2,1214.43 2066.78,1214.43 2067.37,1214.43 2067.96,1214.43 2068.54,1214.43 2069.13,1214.43 2069.72,1214.43 2070.3,1214.43 2070.89,1214.43 2071.48,1214.43 2072.06,1214.43 2072.65,1214.43 2073.23,1214.43 2073.82,1214.43 2074.41,1214.43 2074.99,1214.43 2075.58,1214.43 2076.17,1214.43 2076.75,1214.43 2077.34,1214.43 2077.93,1214.43 2078.51,1214.43 2079.1,1214.43 2079.68,1214.43 2080.27,1214.43 2080.86,1214.43 2081.44,1214.43 2082.03,1214.43 2082.62,1214.43 2083.2,1214.43 2083.79,1214.43 2084.38,1214.43 2084.96,1214.43 2085.55,1214.43 2086.14,1214.43 2086.72,1214.43 2087.31,1214.43 2087.89,1214.43 2088.48,1214.43 2089.07,1214.43 2089.65,1214.43 2090.24,1214.43 2090.83,1214.43 2091.41,1214.43 2092,1214.43 2092.59,1214.43 2093.17,1214.43 2093.76,1214.43 2094.35,1214.43 2094.93,1214.43 2095.52,1214.43 2096.1,1214.43 2096.69,1214.43 2097.28,1214.43 2097.86,1214.43 2098.45,1214.43 2099.04,1214.43 2099.62,1214.43 2100.21,1214.43 2100.8,1214.43 2101.38,1214.43 2101.97,1214.43 2102.55,1214.43 2103.14,1214.43 2103.73,1214.43 2104.31,1214.43 2104.9,1214.43 2105.49,1214.43 2106.07,1214.43 2106.66,1214.43 2107.25,1214.43 2107.83,1214.43 2108.42,1214.43 2109.01,1214.43 2109.59,1214.43 2110.18,1214.43 2110.76,1214.43 2111.35,1214.43 2111.94,1214.43 2112.52,1214.43 2113.11,1214.43 2113.7,1214.43 2114.28,1214.43 2114.87,1214.43 2115.46,1214.43 2116.04,1214.43 2116.63,1214.43 2117.22,1214.43 2117.8,1214.43 2118.39,1214.43 2118.97,1214.43 2119.56,1214.43 2120.15,1214.43 2120.73,1214.43 2121.32,1214.43 2121.91,1214.43 2122.49,1214.43 2123.08,1214.43 2123.67,1214.43 2124.25,1214.43 2124.84,1214.43 2125.42,1214.43 2126.01,1214.43 2126.6,1214.43 2127.18,1214.43 2127.77,1214.43 2128.36,1214.43 2128.94,1214.43 2129.53,1214.43 2130.12,1214.43 2130.7,1214.43 2131.29,1214.43 2131.88,1214.43 2132.46,1214.43 2133.05,1214.43 2133.63,1214.43 2134.22,1214.43 2134.81,1214.43 2135.39,1214.43 2135.98,1214.43 2136.57,1214.43 2137.15,1214.43 2137.74,1214.43 2138.33,1214.43 2138.91,1214.43 2139.5,1214.43 2140.09,1214.43 2140.67,1214.43 2141.26,1214.43 2141.84,1214.43 2142.43,1214.43 2143.02,1214.43 2143.6,1214.43 2144.19,1214.43 2144.78,1214.43 2145.36,1214.43 2145.95,1214.43 2146.54,1214.43 2147.12,1214.43 2147.71,1214.43 2148.3,1214.43 2148.88,1214.43 2149.47,1214.43 2150.05,1214.43 2150.64,1214.43 2151.23,1214.43 2151.81,1214.43 2152.4,1214.43 2152.99,1214.43 2153.57,1214.43 2154.16,1214.43 2154.75,1214.43 2155.33,1214.43 2155.92,1214.43 2156.5,1214.43 2157.09,1214.43 2157.68,1214.43 2158.26,1214.43 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1214.47 L986.612 1214.47 L987.198 1214.47 L987.785 1214.47 L988.371 1214.47 L988.957 1214.47 L989.544 1214.47 L990.13 1214.47 L990.717 1214.47 L991.303 1214.47 L991.889 1214.47 L992.476 1214.47 L993.062 1214.47 L993.649 1214.47 L994.235 1214.47 L994.822 1214.47 L995.408 1214.47 L995.994 1214.47 L996.581 1214.47 L997.167 1214.47 L997.754 1214.47 L998.34 1214.47 L998.926 1214.47 L999.513 1214.47 L1000.1 1214.47 L1000.69 1214.47 L1001.27 1214.47 L1001.86 1214.47 L1002.44 1214.47 L1003.03 1214.47 L1003.62 1214.47 L1004.2 1214.47 L1004.79 1214.47 L1005.38 1214.47 L1005.96 1214.47 L1006.55 1214.47 L1007.14 1214.47 L1007.72 1214.47 L1008.31 1214.47 L1008.9 1214.47 L1009.48 1214.47 L1010.07 1214.47 L1010.65 1214.47 L1011.24 1214.47 L1011.83 1214.47 L1012.41 1214.47 L1013 1214.47 L1013.59 1214.47 L1014.17 1214.47 L1014.76 1214.47 L1015.35 1214.47 L1015.93 1214.47 L1016.52 1214.47 L1017.11 1214.47 L1017.69 1214.47 L1018.28 1214.47 L1018.86 1214.47 L1019.45 1214.47 L1020.04 1214.47 L1020.62 1214.47 L1021.21 1214.47 L1021.8 1214.47 L1022.38 1214.47 L1022.97 1214.47 L1023.56 1214.47 L1024.14 1214.47 L1024.73 1214.47 L1025.32 1214.47 L1025.9 1214.47 L1026.49 1214.47 L1027.07 1214.47 L1027.66 1214.47 L1028.25 1214.47 L1028.83 1214.47 L1029.42 1214.47 L1030.01 1214.47 L1030.59 1214.47 L1031.18 1214.47 L1031.77 1214.47 L1032.35 1214.47 L1032.94 1214.47 L1033.52 1214.47 L1034.11 1214.47 L1034.7 1214.47 L1035.28 1214.47 L1035.87 1214.47 L1036.46 1214.47 L1037.04 1214.47 L1037.63 1214.47 L1038.22 1214.47 L1038.8 1214.47 L1039.39 1214.47 L1039.98 1214.47 L1040.56 1214.47 L1041.15 1214.47 L1041.73 1214.47 L1042.32 1214.47 L1042.91 1214.47 L1043.49 1214.47 L1044.08 1214.47 L1044.67 1214.47 L1045.25 1214.47 L1045.84 1214.47 L1046.43 1214.47 L1047.01 1214.47 L1047.6 1214.47 L1048.19 1214.47 L1048.77 1214.47 L1049.36 1214.47 L1049.94 1214.47 L1050.53 1214.47 L1051.12 1214.47 L1051.7 1214.47 L1052.29 1214.47 L1052.88 1214.47 L1053.46 1214.47 L1054.05 1214.47 L1054.64 1214.47 L1055.22 1214.47 L1055.81 1214.47 L1056.39 1214.47 L1056.98 1214.47 L1057.57 1214.47 L1058.15 1214.47 L1058.74 1214.47 L1059.33 1214.47 L1059.91 1214.47 L1060.5 1214.47 L1061.09 1214.47 L1061.67 1214.47 L1062.26 1214.47 L1062.85 1214.47 L1063.43 1214.47 L1064.02 1214.47 L1064.6 1214.47 L1065.19 1214.47 L1065.78 1214.47 L1066.36 1214.47 L1066.95 1214.47 L1067.54 1214.47 L1068.12 1214.47 L1068.71 1214.47 L1069.3 1214.47 L1069.88 1214.47 L1070.47 1214.47 L1071.06 1214.47 L1071.64 1214.47 L1072.23 1214.47 L1072.81 1214.47 L1073.4 1214.47 L1073.99 1214.47 L1074.57 1214.47 L1075.16 1214.47 L1075.75 1214.47 L1076.33 1214.47 L1076.92 1214.47 L1077.51 1214.47 L1078.09 1214.47 L1078.68 1214.47 L1079.26 1214.47 L1079.85 1214.47 L1080.44 1214.47 L1081.02 1214.47 L1081.61 1214.47 L1082.2 1214.47 L1082.78 1214.47 L1083.37 1214.47 L1083.96 1214.47 L1084.54 1214.47 L1085.13 1214.47 L1085.72 1214.47 L1086.3 1214.47 L1086.89 1214.47 L1087.47 1214.47 L1088.06 1214.47 L1088.65 1214.47 L1089.23 1214.47 L1089.82 1214.47 L1090.41 1214.47 L1090.99 1214.47 L1091.58 1214.47 L1092.17 1214.47 L1092.75 1214.47 L1093.34 1214.47 L1093.93 1214.47 L1094.51 1214.47 L1095.1 1214.47 L1095.68 1214.47 L1096.27 1214.47 L1096.86 1214.47 L1097.44 1214.47 L1098.03 1214.47 L1098.62 1214.47 L1099.2 1214.47 L1099.79 1214.47 L1100.38 1214.47 L1100.96 1214.47 L1101.55 1214.47 L1102.14 1214.47 L1102.72 1214.47 L1103.31 1214.47 L1103.89 1214.47 L1104.48 1214.47 L1105.07 1214.47 L1105.65 1214.47 L1106.24 1214.47 L1106.83 1214.47 L1107.41 1214.47 L1108 1214.47 L1108.59 1214.47 L1109.17 1214.47 L1109.76 1214.47 L1110.34 1214.47 L1110.93 1214.47 L1111.52 1214.47 L1112.1 1214.47 L1112.69 1214.47 L1113.28 1214.47 L1113.86 1214.47 L1114.45 1214.47 L1115.04 1214.47 L1115.62 1214.47 L1116.21 1214.47 L1116.8 1214.47 L1117.38 1214.47 L1117.97 1214.47 L1118.55 1214.47 L1119.14 1214.47 L1119.73 1214.47 L1120.31 1214.47 L1120.9 1214.47 L1121.49 1214.47 L1122.07 1214.47 L1122.66 1214.47 L1123.25 1214.47 L1123.83 1214.47 L1124.42 1214.47 L1125.01 1214.47 L1125.59 1214.47 L1126.18 1214.47 L1126.76 1214.47 L1127.35 1214.47 L1127.94 1214.47 L1128.52 1214.47 L1129.11 1214.47 L1129.7 1214.47 L1130.28 1214.47 L1130.87 1214.47 L1131.46 1214.47 L1132.04 1214.47 L1132.63 1214.47 L1133.21 1214.47 L1133.8 1214.47 L1134.39 1214.47 L1134.97 1214.47 L1135.56 1214.47 L1136.15 1214.47 L1136.73 1214.47 L1137.32 1214.47 L1137.91 1214.47 L1138.49 1214.47 L1139.08 1214.47 L1139.67 1214.47 L1140.25 1214.47 L1140.84 1214.47 L1141.42 1214.47 L1142.01 1214.47 L1142.6 1214.47 L1143.18 1214.47 L1143.77 1214.47 L1144.36 1214.47 L1144.94 1214.47 L1145.53 1214.47 L1146.12 1214.47 L1146.7 1214.47 L1147.29 1214.47 L1147.88 1214.47 L1148.46 1214.47 L1149.05 1214.47 L1149.63 1214.47 L1150.22 1214.47 L1150.81 1214.47 L1151.39 1214.47 L1151.98 1214.47 L1152.57 1214.47 L1153.15 1214.47 L1153.74 1214.47 L1154.33 1214.47 L1154.91 1214.47 L1155.5 1214.47 L1156.09 1214.47 L1156.67 1214.47 L1157.26 1214.47 L1157.84 1214.47 L1158.43 1214.47 L1159.02 1214.47 L1159.6 1214.47 L1160.19 1214.47 L1160.78 1214.47 L1161.36 1214.47 L1161.95 1214.47 L1162.54 1214.47 L1163.12 1214.47 L1163.71 1214.47 L1164.29 1214.47 L1164.88 1214.47 L1165.47 1214.47 L1166.05 1214.47 L1166.64 1214.47 L1167.23 1214.47 L1167.81 1214.47 L1168.4 1214.47 L1168.99 1214.47 L1169.57 1214.47 L1170.16 1214.47 L1170.75 1214.47 L1171.33 1214.47 L1171.92 1214.47 L1172.5 1214.47 L1173.09 1214.47 L1173.68 1214.47 L1174.26 1214.47 L1174.85 1214.47 L1175.44 1214.47 L1176.02 1214.47 L1176.61 1214.47 L1177.2 1214.47 L1177.78 1214.47 L1178.37 1214.47 L1178.96 1214.47 L1179.54 1214.47 L1180.13 1214.47 L1180.71 1214.47 L1181.3 1214.47 L1181.89 1214.47 L1182.47 1214.47 L1183.06 1214.47 L1183.65 1214.47 L1184.23 1214.47 L1184.82 1214.47 L1185.41 1214.47 L1185.99 1214.47 L1186.58 1214.47 L1187.16 1214.47 L1187.75 1214.47 L1188.34 1214.47 L1188.92 1214.47 L1189.51 1214.47 L1190.1 1214.47 L1190.68 1214.47 L1191.27 1214.47 L1191.86 1214.47 L1192.44 1214.47 L1193.03 1214.47 L1193.62 1214.47 L1194.2 1214.47 L1194.79 1214.47 L1195.37 1214.47 L1195.96 1214.47 L1196.55 1214.47 L1197.13 1214.47 L1197.72 1214.47 L1198.31 1214.47 L1198.89 1214.47 L1199.48 1214.47 L1200.07 1214.47 L1200.65 1214.47 L1201.24 1214.47 L1201.83 1214.47 L1202.41 1214.47 L1203 1214.47 L1203.58 1214.47 L1204.17 1214.47 L1204.76 1214.47 L1205.34 1214.47 L1205.93 1214.47 L1206.52 1214.47 L1207.1 1214.47 L1207.69 1214.47 L1208.28 1214.47 L1208.86 1214.47 L1209.45 1214.47 L1210.03 1214.47 L1210.62 1214.47 L1211.21 1214.47 L1211.79 1214.47 L1212.38 1214.47 L1212.97 1214.47 L1213.55 1214.47 L1214.14 1214.47 L1214.73 1214.47 L1215.31 1214.47 L1215.9 1214.47 L1216.49 1214.47 L1217.07 1214.47 L1217.66 1214.47 L1218.24 1214.47 L1218.83 1214.47 L1219.42 1214.47 L1220 1214.47 L1220.59 1214.47 L1221.18 1214.47 L1221.76 1214.47 L1222.35 1214.47 L1222.94 1214.47 L1223.52 1214.47 L1224.11 1214.47 L1224.7 1214.47 L1225.28 1214.47 L1225.87 1214.47 L1226.45 1214.47 L1227.04 1214.47 L1227.63 1214.47 L1228.21 1214.47 L1228.8 1214.47 L1229.39 1214.47 L1229.97 1214.47 L1230.56 1214.47 L1231.15 1214.47 L1231.73 1214.47 L1232.32 1214.47 L1232.91 1214.47 L1233.49 1214.47 L1234.08 1214.47 L1234.66 1214.47 L1235.25 1214.47 L1235.84 1214.47 L1236.42 1214.47 L1237.01 1214.47 L1237.6 1214.47 L1238.18 1214.47 L1238.77 1214.47 L1239.36 1214.47 L1239.94 1214.47 L1240.53 1214.47 L1241.11 1214.47 L1241.7 1214.47 L1242.29 1214.47 L1242.87 1214.47 L1243.46 1214.47 L1244.05 1214.47 L1244.63 1214.47 L1245.22 1214.47 L1245.81 1214.47 L1246.39 1214.47 L1246.98 1214.47 L1247.57 1214.47 L1248.15 1214.47 L1248.74 1214.47 L1249.32 1214.47 L1249.91 1214.47 L1250.5 1214.47 L1251.08 1214.47 L1251.67 1214.47 L1252.26 1214.47 L1252.84 1214.47 L1253.43 1214.47 L1254.02 1214.47 L1254.6 1214.47 L1255.19 1214.47 L1255.78 1214.47 L1256.36 1214.47 L1256.95 1214.47 L1257.53 1214.47 L1258.12 1214.47 L1258.71 1214.47 L1259.29 1214.47 L1259.88 1214.47 L1260.47 1214.47 L1261.05 1214.47 L1261.64 1214.47 L1262.23 1214.47 L1262.81 1214.47 L1263.4 1214.47 L1263.98 1214.47 L1264.57 1214.47 L1265.16 1214.47 L1265.74 1214.47 L1266.33 1214.47 L1266.92 1214.47 L1267.5 1214.47 L1268.09 1214.47 L1268.68 1214.47 L1269.26 1214.47 L1269.85 1214.47 L1270.44 1214.47 L1271.02 1214.47 L1271.61 1214.47 L1272.19 1214.47 L1272.78 1214.47 L1273.37 1214.47 L1273.95 1214.47 L1274.54 1214.47 L1275.13 1214.47 L1275.71 1214.47 L1276.3 1214.47 L1276.89 1214.47 L1277.47 1214.47 L1278.06 1214.47 L1278.65 1214.47 L1279.23 1214.47 L1279.82 1214.47 L1280.4 1214.47 L1280.99 1214.47 L1281.58 1214.47 L1282.16 1214.47 L1282.75 1214.47 L1283.34 1214.47 L1283.92 1214.47 L1284.51 1214.47 L1285.1 1214.47 L1285.68 1214.47 L1286.27 1214.47 L1286.86 1214.47 L1287.44 1214.47 L1288.03 1214.47 L1288.61 1214.47 L1289.2 1214.47 L1289.79 1214.47 L1290.37 1214.47 L1290.96 1214.47 L1291.55 1214.47 L1292.13 1214.47 L1292.72 1214.47 L1293.31 1214.47 L1293.89 1214.47 L1294.48 1214.47 L1295.06 1214.47 L1295.65 1214.47 L1296.24 1214.47 L1296.82 1214.47 L1297.41 1214.47 L1298 1214.47 L1298.58 1214.47 L1299.17 1214.47 L1299.76 1214.47 L1300.34 1214.47 L1300.93 1214.47 L1301.52 1214.47 L1302.1 1214.47 L1302.69 1214.47 L1303.27 1214.47 L1303.86 1214.47 L1304.45 1214.47 L1305.03 1214.47 L1305.62 1214.47 L1306.21 1214.47 L1306.79 1214.47 L1307.38 1214.47 L1307.97 1214.47 L1308.55 1214.47 L1309.14 1214.47 L1309.73 1214.47 L1310.31 1214.47 L1310.9 1214.47 L1311.48 1214.47 L1312.07 1214.47 L1312.66 1214.47 L1313.24 1214.47 L1313.83 1214.47 L1314.42 1214.47 L1315 1214.47 L1315.59 1214.47 L1316.18 1214.47 L1316.76 1214.47 L1317.35 1214.47 L1317.93 1214.47 L1318.52 1214.47 L1319.11 1214.47 L1319.69 1214.47 L1320.28 1214.47 L1320.87 1214.47 L1321.45 1214.47 L1322.04 1214.47 L1322.63 1214.47 L1323.21 1214.47 L1323.8 1214.47 L1324.39 1214.47 L1324.97 1214.47 L1325.56 1214.47 L1326.14 1214.47 L1326.73 1214.47 L1327.32 1214.47 L1327.9 1214.47 L1328.49 1214.47 L1329.08 1214.47 L1329.66 1214.47 L1330.25 1214.47 L1330.84 1214.47 L1331.42 1214.47 L1332.01 1214.47 L1332.6 1214.47 L1333.18 1214.47 L1333.77 1214.47 L1334.35 1214.47 L1334.94 1214.47 L1335.53 1214.47 L1336.11 1214.47 L1336.7 1214.47 L1337.29 1214.47 L1337.87 1214.47 L1338.46 1214.47 L1339.05 1214.47 L1339.63 1214.47 L1340.22 1214.47 L1340.8 1214.47 L1341.39 1214.47 L1341.98 1214.47 L1342.56 1214.47 L1343.15 1214.47 L1343.74 1214.47 L1344.32 1214.47 L1344.91 1214.47 L1345.5 1214.47 L1346.08 1214.47 L1346.67 1214.47 L1347.26 1214.47 L1347.84 1214.47 L1348.43 1214.47 L1349.01 1214.47 L1349.6 1214.47 L1350.19 1214.47 L1350.77 1214.47 L1351.36 1214.47 L1351.95 1214.47 L1352.53 1214.47 L1353.12 1214.47 L1353.71 1214.47 L1354.29 1214.47 L1354.88 1214.47 L1355.47 1214.47 L1356.05 1214.47 L1356.64 1214.47 L1357.22 1214.47 L1357.81 1214.47 L1358.4 1214.47 L1358.98 1214.47 L1359.57 1214.47 L1360.16 1214.47 L1360.74 1214.47 L1361.33 1214.47 L1361.92 1214.47 L1362.5 1214.47 L1363.09 1214.47 L1363.68 1214.47 L1364.26 1214.47 L1364.85 1214.47 L1365.43 1214.47 L1366.02 1214.47 L1366.61 1214.47 L1367.19 1214.47 L1367.78 1214.47 L1368.37 1214.47 L1368.95 1214.47 L1369.54 1214.47 L1370.13 1214.47 L1370.71 1214.47 L1371.3 1214.47 L1371.88 1214.47 L1372.47 1214.47 L1373.06 1214.47 L1373.64 1214.47 L1374.23 1214.47 L1374.82 1214.47 L1375.4 1214.47 L1375.99 1214.47 L1376.58 1214.47 L1377.16 1214.47 L1377.75 1214.47 L1378.34 1214.47 L1378.92 1214.47 L1379.51 1214.47 L1380.09 1214.47 L1380.68 1214.47 L1381.27 1214.47 L1381.85 1214.47 L1382.44 1214.47 L1383.03 1214.47 L1383.61 1214.47 L1384.2 1214.47 L1384.79 1214.47 L1385.37 1214.47 L1385.96 1214.47 L1386.55 1214.47 L1387.13 1214.47 L1387.72 1214.47 L1388.3 1214.47 L1388.89 1214.47 L1389.48 1214.47 L1390.06 1214.47 L1390.65 1214.47 L1391.24 1214.47 L1391.82 1214.47 L1392.41 1214.47 L1393 1214.47 L1393.58 1214.47 L1394.17 1214.47 L1394.75 1214.47 L1395.34 1214.47 L1395.93 1214.47 L1396.51 1214.47 L1397.1 1214.47 L1397.69 1214.47 L1398.27 1214.47 L1398.86 1214.47 L1399.45 1214.47 L1400.03 1214.47 L1400.62 1214.47 L1401.21 1214.47 L1401.79 1214.47 L1402.38 1214.47 L1402.96 1214.47 L1403.55 1214.47 L1404.14 1214.47 L1404.72 1214.47 L1405.31 1214.47 L1405.9 1214.47 L1406.48 1214.47 L1407.07 1214.47 L1407.66 1214.47 L1408.24 1214.47 L1408.83 1214.47 L1409.42 1214.47 L1410 1214.47 L1410.59 1214.47 L1411.17 1214.47 L1411.76 1214.47 L1412.35 1214.47 L1412.93 1214.47 L1413.52 1214.47 L1414.11 1214.47 L1414.69 1214.47 L1415.28 1214.47 L1415.87 1214.47 L1416.45 1214.47 L1417.04 1214.47 L1417.63 1214.47 L1418.21 1214.47 L1418.8 1214.47 L1419.38 1214.47 L1419.97 1214.47 L1420.56 1214.47 L1421.14 1214.47 L1421.73 1214.47 L1422.32 1214.47 L1422.9 1214.47 L1423.49 1214.47 L1424.08 1214.47 L1424.66 1214.47 L1425.25 1214.47 L1425.83 1214.47 L1426.42 1214.47 L1427.01 1214.47 L1427.59 1214.47 L1428.18 1214.47 L1428.77 1214.47 L1429.35 1214.47 L1429.94 1214.47 L1430.53 1214.47 L1431.11 1214.47 L1431.7 1214.47 L1432.29 1214.47 L1432.87 1214.47 L1433.46 1214.47 L1434.04 1214.47 L1434.63 1214.47 L1435.22 1214.47 L1435.8 1214.47 L1436.39 1214.47 L1436.98 1214.47 L1437.56 1214.47 L1438.15 1214.47 L1438.74 1214.47 L1439.32 1214.47 L1439.91 1214.47 L1440.5 1214.47 L1441.08 1214.47 L1441.67 1214.47 L1442.25 1214.47 L1442.84 1214.47 L1443.43 1214.47 L1444.01 1214.47 L1444.6 1214.47 L1445.19 1214.47 L1445.77 1214.47 L1446.36 1214.47 L1446.95 1214.47 L1447.53 1214.47 L1448.12 1214.47 L1448.7 1214.47 L1449.29 1214.47 L1449.88 1214.47 L1450.46 1214.47 L1451.05 1214.47 L1451.64 1214.47 L1452.22 1214.47 L1452.81 1214.47 L1453.4 1214.47 L1453.98 1214.47 L1454.57 1214.47 L1455.16 1214.47 L1455.74 1214.47 L1456.33 1214.47 L1456.91 1214.47 L1457.5 1214.47 L1458.09 1214.47 L1458.67 1214.47 L1459.26 1214.47 L1459.85 1214.47 L1460.43 1214.47 L1461.02 1214.47 L1461.61 1214.47 L1462.19 1214.47 L1462.78 1214.47 L1463.37 1214.47 L1463.95 1214.47 L1464.54 1214.47 L1465.12 1214.47 L1465.71 1214.47 L1466.3 1214.47 L1466.88 1214.47 L1467.47 1214.47 L1468.06 1214.47 L1468.64 1214.47 L1469.23 1214.47 L1469.82 1214.47 L1470.4 1214.47 L1470.99 1214.47 L1471.57 1214.47 L1472.16 1214.47 L1472.75 1214.47 L1473.33 1214.47 L1473.92 1214.47 L1474.51 1214.47 L1475.09 1214.47 L1475.68 1214.47 L1476.27 1214.47 L1476.85 1214.47 L1477.44 1214.47 L1478.03 1214.47 L1478.61 1214.47 L1479.2 1214.47 L1479.78 1214.47 L1480.37 1214.47 L1480.96 1214.47 L1481.54 1214.47 L1482.13 1214.47 L1482.72 1214.47 L1483.3 1214.47 L1483.89 1214.47 L1484.48 1214.47 L1485.06 1214.47 L1485.65 1214.47 L1486.24 1214.47 L1486.82 1214.47 L1487.41 1214.47 L1487.99 1214.47 L1488.58 1214.47 L1489.17 1214.47 L1489.75 1214.47 L1490.34 1214.47 L1490.93 1214.47 L1491.51 1214.47 L1492.1 1214.47 L1492.69 1214.47 L1493.27 1214.47 L1493.86 1214.47 L1494.45 1214.47 L1495.03 1214.47 L1495.62 1214.47 L1496.2 1214.47 L1496.79 1214.47 L1497.38 1214.47 L1497.96 1214.47 L1498.55 1214.47 L1499.14 1214.47 L1499.72 1214.47 L1500.31 1214.47 L1500.9 1214.47 L1501.48 1214.47 L1502.07 1214.47 L1502.65 1214.47 L1503.24 1214.47 L1503.83 1214.47 L1504.41 1214.47 L1505 1214.47 L1505.59 1214.47 L1506.17 1214.47 L1506.76 1214.47 L1507.35 1214.47 L1507.93 1214.47 L1508.52 1214.47 L1509.11 1214.47 L1509.69 1214.47 L1510.28 1214.47 L1510.86 1214.47 L1511.45 1214.47 L1512.04 1214.47 L1512.62 1214.47 L1513.21 1214.47 L1513.8 1214.47 L1514.38 1214.47 L1514.97 1214.47 L1515.56 1214.47 L1516.14 1214.47 L1516.73 1214.47 L1517.32 1214.47 L1517.9 1214.47 L1518.49 1214.47 L1519.07 1214.47 L1519.66 1214.47 L1520.25 1214.47 L1520.83 1214.47 L1521.42 1214.47 L1522.01 1214.47 L1522.59 1214.47 L1523.18 1214.47 L1523.77 1214.47 L1524.35 1214.47 L1524.94 1214.47 L1525.52 1214.47 L1526.11 1214.47 L1526.7 1214.47 L1527.28 1214.47 L1527.87 1214.47 L1528.46 1214.47 L1529.04 1214.47 L1529.63 1214.47 L1530.22 1214.47 L1530.8 1214.47 L1531.39 1214.47 L1531.98 1214.47 L1532.56 1214.47 L1533.15 1214.47 L1533.73 1214.47 L1534.32 1214.47 L1534.91 1214.47 L1535.49 1214.47 L1536.08 1214.47 L1536.67 1214.47 L1537.25 1214.47 L1537.84 1214.47 L1538.43 1214.47 L1539.01 1214.47 L1539.6 1214.47 L1540.19 1214.47 L1540.77 1214.47 L1541.36 1214.47 L1541.94 1214.47 L1542.53 1214.47 L1543.12 1214.47 L1543.7 1214.47 L1544.29 1214.47 L1544.88 1214.47 L1545.46 1214.47 L1546.05 1214.47 L1546.64 1214.47 L1547.22 1214.47 L1547.81 1214.47 L1548.4 1214.47 L1548.98 1214.47 L1549.57 1214.47 L1550.15 1214.47 L1550.74 1214.47 L1551.33 1214.47 L1551.91 1214.47 L1552.5 1214.47 L1553.09 1214.47 L1553.67 1214.47 L1554.26 1214.47 L1554.85 1214.47 L1555.43 1214.47 L1556.02 1214.47 L1556.6 1214.47 L1557.19 1214.47 L1557.78 1214.47 L1558.36 1214.47 L1558.95 1214.47 L1559.54 1214.47 L1560.12 1214.47 L1560.71 1214.47 L1561.3 1214.47 L1561.88 1214.47 L1562.47 1214.47 L1563.06 1214.47 L1563.64 1214.47 L1564.23 1214.47 L1564.81 1214.47 L1565.4 1214.47 L1565.99 1214.47 L1566.57 1214.47 L1567.16 1214.47 L1567.75 1214.47 L1568.33 1214.47 L1568.92 1214.47 L1569.51 1214.47 L1570.09 1214.47 L1570.68 1214.47 L1571.27 1214.47 L1571.85 1214.47 L1572.44 1214.47 L1573.02 1214.47 L1573.61 1214.47 L1574.2 1214.47 L1574.78 1214.47 L1575.37 1214.47 L1575.96 1214.47 L1576.54 1214.47 L1577.13 1214.47 L1577.72 1214.47 L1578.3 1214.47 L1578.89 1214.47 L1579.47 1214.47 L1580.06 1214.47 L1580.65 1214.47 L1581.23 1214.47 L1581.82 1214.47 L1582.41 1214.47 L1582.99 1214.47 L1583.58 1214.47 L1584.17 1214.47 L1584.75 1214.47 L1585.34 1214.47 L1585.93 1214.47 L1586.51 1214.47 L1587.1 1214.47 L1587.68 1214.47 L1588.27 1214.47 L1588.86 1214.47 L1589.44 1214.47 L1590.03 1214.47 L1590.62 1214.47 L1591.2 1214.47 L1591.79 1214.47 L1592.38 1214.47 L1592.96 1214.47 L1593.55 1214.47 L1594.14 1214.47 L1594.72 1214.47 L1595.31 1214.47 L1595.89 1214.47 L1596.48 1214.47 L1597.07 1214.47 L1597.65 1214.47 L1598.24 1214.47 L1598.83 1214.47 L1599.41 1214.47 L1600 1214.47 L1600.59 1214.47 L1601.17 1214.47 L1601.76 1214.47 L1602.34 1214.47 L1602.93 1214.47 L1603.52 1214.47 L1604.1 1214.47 L1604.69 1214.47 L1605.28 1214.47 L1605.86 1214.47 L1606.45 1214.47 L1607.04 1214.47 L1607.62 1214.47 L1608.21 1214.47 L1608.8 1214.47 L1609.38 1214.47 L1609.97 1214.47 L1610.55 1214.47 L1611.14 1214.47 L1611.73 1214.47 L1612.31 1214.47 L1612.9 1214.47 L1613.49 1214.47 L1614.07 1214.47 L1614.66 1214.47 L1615.25 1214.47 L1615.83 1214.47 L1616.42 1214.47 L1617.01 1214.47 L1617.59 1214.47 L1618.18 1214.47 L1618.76 1214.47 L1619.35 1214.47 L1619.94 1214.47 L1620.52 1214.47 L1621.11 1214.47 L1621.7 1214.47 L1622.28 1214.47 L1622.87 1214.47 L1623.46 1214.47 L1624.04 1214.47 L1624.63 1214.47 L1625.22 1214.47 L1625.8 1214.47 L1626.39 1214.47 L1626.97 1214.47 L1627.56 1214.47 L1628.15 1214.47 L1628.73 1214.47 L1629.32 1214.47 L1629.91 1214.47 L1630.49 1214.47 L1631.08 1214.47 L1631.67 1214.47 L1632.25 1214.47 L1632.84 1214.47 L1633.42 1214.47 L1634.01 1214.47 L1634.6 1214.47 L1635.18 1214.47 L1635.77 1214.47 L1636.36 1214.47 L1636.94 1214.47 L1637.53 1214.47 L1638.12 1214.47 L1638.7 1214.47 L1639.29 1214.47 L1639.88 1214.47 L1640.46 1214.47 L1641.05 1214.47 L1641.63 1214.47 L1642.22 1214.47 L1642.81 1214.47 L1643.39 1214.47 L1643.98 1214.47 L1644.57 1214.47 L1645.15 1214.47 L1645.74 1214.47 L1646.33 1214.47 L1646.91 1214.47 L1647.5 1214.47 L1648.09 1214.47 L1648.67 1214.47 L1649.26 1214.47 L1649.84 1214.47 L1650.43 1214.47 L1651.02 1214.47 L1651.6 1214.47 L1652.19 1214.47 L1652.78 1214.47 L1653.36 1214.47 L1653.95 1214.47 L1654.54 1214.47 L1655.12 1214.47 L1655.71 1214.47 L1656.29 1214.47 L1656.88 1214.47 L1657.47 1214.47 L1658.05 1214.47 L1658.64 1214.47 L1659.23 1214.47 L1659.81 1214.47 L1660.4 1214.47 L1660.99 1214.47 L1661.57 1214.47 L1662.16 1214.47 L1662.75 1214.47 L1663.33 1214.47 L1663.92 1214.47 L1664.5 1214.47 L1665.09 1214.47 L1665.68 1214.47 L1666.26 1214.47 L1666.85 1214.47 L1667.44 1214.47 L1668.02 1214.47 L1668.61 1214.47 L1669.2 1214.47 L1669.78 1214.47 L1670.37 1214.47 L1670.96 1214.47 L1671.54 1214.47 L1672.13 1214.47 L1672.71 1214.47 L1673.3 1214.47 L1673.89 1214.47 L1674.47 1214.47 L1675.06 1214.47 L1675.65 1214.47 L1676.23 1214.47 L1676.82 1214.47 L1677.41 1214.47 L1677.99 1214.47 L1678.58 1214.47 L1679.17 1214.47 L1679.75 1214.47 L1680.34 1214.47 L1680.92 1214.47 L1681.51 1214.47 L1682.1 1214.47 L1682.68 1214.47 L1683.27 1214.47 L1683.86 1214.47 L1684.44 1214.47 L1685.03 1214.47 L1685.62 1214.47 L1686.2 1214.47 L1686.79 1214.47 L1687.37 1214.47 L1687.96 1214.47 L1688.55 1214.47 L1689.13 1214.47 L1689.72 1214.47 L1690.31 1214.47 L1690.89 1214.47 L1691.48 1214.47 L1692.07 1214.47 L1692.65 1214.47 L1693.24 1214.47 L1693.83 1214.47 L1694.41 1214.47 L1695 1214.47 L1695.58 1214.47 L1696.17 1214.47 L1696.76 1214.47 L1697.34 1214.47 L1697.93 1214.47 L1698.52 1214.47 L1699.1 1214.47 L1699.69 1214.47 L1700.28 1214.47 L1700.86 1214.47 L1701.45 1214.47 L1702.04 1214.47 L1702.62 1214.47 L1703.21 1214.47 L1703.79 1214.47 L1704.38 1214.47 L1704.97 1214.47 L1705.55 1214.47 L1706.14 1214.47 L1706.73 1214.47 L1707.31 1214.47 L1707.9 1214.47 L1708.49 1214.47 L1709.07 1214.47 L1709.66 1214.47 L1710.24 1214.47 L1710.83 1214.47 L1711.42 1214.47 L1712 1214.47 L1712.59 1214.47 L1713.18 1214.47 L1713.76 1214.47 L1714.35 1214.47 L1714.94 1214.47 L1715.52 1214.47 L1716.11 1214.47 L1716.7 1214.47 L1717.28 1214.47 L1717.87 1214.47 L1718.45 1214.47 L1719.04 1214.47 L1719.63 1214.47 L1720.21 1214.47 L1720.8 1214.47 L1721.39 1214.47 L1721.97 1214.47 L1722.56 1214.47 L1723.15 1214.47 L1723.73 1214.47 L1724.32 1214.47 L1724.91 1214.47 L1725.49 1214.47 L1726.08 1214.47 L1726.66 1214.47 L1727.25 1214.47 L1727.84 1214.47 L1728.42 1214.47 L1729.01 1214.47 L1729.6 1214.47 L1730.18 1214.47 L1730.77 1214.47 L1731.36 1214.47 L1731.94 1214.47 L1732.53 1214.47 L1733.11 1214.47 L1733.7 1214.47 L1734.29 1214.47 L1734.87 1214.47 L1735.46 1214.47 L1736.05 1214.47 L1736.63 1214.47 L1737.22 1214.47 L1737.81 1214.47 L1738.39 1214.47 L1738.98 1214.47 L1739.57 1214.47 L1740.15 1214.47 L1740.74 1214.47 L1741.32 1214.47 L1741.91 1214.47 L1742.5 1214.47 L1743.08 1214.47 L1743.67 1214.47 L1744.26 1214.47 L1744.84 1214.47 L1745.43 1214.47 L1746.02 1214.47 L1746.6 1214.47 L1747.19 1214.47 L1747.78 1214.47 L1748.36 1214.47 L1748.95 1214.47 L1749.53 1214.47 L1750.12 1214.47 L1750.71 1214.47 L1751.29 1214.47 L1751.88 1214.47 L1752.47 1214.47 L1753.05 1214.47 L1753.64 1214.47 L1754.23 1214.47 L1754.81 1214.47 L1755.4 1214.47 L1755.99 1214.47 L1756.57 1214.47 L1757.16 1214.47 L1757.74 1214.47 L1758.33 1214.47 L1758.92 1214.47 L1759.5 1214.47 L1760.09 1214.47 L1760.68 1214.47 L1761.26 1214.47 L1761.85 1214.47 L1762.44 1214.47 L1763.02 1214.47 L1763.61 1214.47 L1764.19 1214.47 L1764.78 1214.47 L1765.37 1214.47 L1765.95 1214.47 L1766.54 1214.47 L1767.13 1214.47 L1767.71 1214.47 L1768.3 1214.47 L1768.89 1214.47 L1769.47 1214.47 L1770.06 1214.47 L1770.65 1214.47 L1771.23 1214.47 L1771.82 1214.47 L1772.4 1214.47 L1772.99 1214.47 L1773.58 1214.47 L1774.16 1214.47 L1774.75 1214.47 L1775.34 1214.47 L1775.92 1214.47 L1776.51 1214.47 L1777.1 1214.47 L1777.68 1214.47 L1778.27 1214.47 L1778.86 1214.47 L1779.44 1214.47 L1780.03 1214.47 L1780.61 1214.47 L1781.2 1214.47 L1781.79 1214.47 L1782.37 1214.47 L1782.96 1214.47 L1783.55 1214.47 L1784.13 1214.47 L1784.72 1214.47 L1785.31 1214.47 L1785.89 1214.47 L1786.48 1214.47 L1787.06 1214.47 L1787.65 1214.47 L1788.24 1214.47 L1788.82 1214.47 L1789.41 1214.47 L1790 1214.47 L1790.58 1214.47 L1791.17 1214.47 L1791.76 1214.47 L1792.34 1214.47 L1792.93 1214.47 L1793.52 1214.47 L1794.1 1214.47 L1794.69 1214.47 L1795.27 1214.47 L1795.86 1214.47 L1796.45 1214.47 L1797.03 1214.47 L1797.62 1214.47 L1798.21 1214.47 L1798.79 1214.47 L1799.38 1214.47 L1799.97 1214.47 L1800.55 1214.47 L1801.14 1214.47 L1801.73 1214.47 L1802.31 1214.47 L1802.9 1214.47 L1803.48 1214.47 L1804.07 1214.47 L1804.66 1214.47 L1805.24 1214.47 L1805.83 1214.47 L1806.42 1214.47 L1807 1214.47 L1807.59 1214.47 L1808.18 1214.47 L1808.76 1214.47 L1809.35 1214.47 L1809.94 1214.47 L1810.52 1214.47 L1811.11 1214.47 L1811.69 1214.47 L1812.28 1214.47 L1812.87 1214.47 L1813.45 1214.47 L1814.04 1214.47 L1814.63 1214.47 L1815.21 1214.47 L1815.8 1214.47 L1816.39 1214.47 L1816.97 1214.47 L1817.56 1214.47 L1818.14 1214.47 L1818.73 1214.47 L1819.32 1214.47 L1819.9 1214.47 L1820.49 1214.47 L1821.08 1214.47 L1821.66 1214.47 L1822.25 1214.47 L1822.84 1214.47 L1823.42 1214.47 L1824.01 1214.47 L1824.6 1214.47 L1825.18 1214.47 L1825.77 1214.47 L1826.35 1214.47 L1826.94 1214.47 L1827.53 1214.47 L1828.11 1214.47 L1828.7 1214.47 L1829.29 1214.47 L1829.87 1214.47 L1830.46 1214.47 L1831.05 1214.47 L1831.63 1214.47 L1832.22 1214.47 L1832.81 1214.47 L1833.39 1214.47 L1833.98 1214.47 L1834.56 1214.47 L1835.15 1214.47 L1835.74 1214.47 L1836.32 1214.47 L1836.91 1214.47 L1837.5 1214.47 L1838.08 1214.47 L1838.67 1214.47 L1839.26 1214.47 L1839.84 1214.47 L1840.43 1214.47 L1841.01 1214.47 L1841.6 1214.47 L1842.19 1214.47 L1842.77 1214.47 L1843.36 1214.47 L1843.95 1214.47 L1844.53 1214.47 L1845.12 1214.47 L1845.71 1214.47 L1846.29 1214.47 L1846.88 1214.47 L1847.47 1214.47 L1848.05 1214.47 L1848.64 1214.47 L1849.22 1214.47 L1849.81 1214.47 L1850.4 1214.47 L1850.98 1214.47 L1851.57 1214.47 L1852.16 1214.47 L1852.74 1214.47 L1853.33 1214.47 L1853.92 1214.47 L1854.5 1214.47 L1855.09 1214.47 L1855.68 1214.47 L1856.26 1214.47 L1856.85 1214.47 L1857.43 1214.47 L1858.02 1214.47 L1858.61 1214.47 L1859.19 1214.47 L1859.78 1214.47 L1860.37 1214.47 L1860.95 1214.47 L1861.54 1214.47 L1862.13 1214.47 L1862.71 1214.47 L1863.3 1214.47 L1863.88 1214.47 L1864.47 1214.47 L1865.06 1214.47 L1865.64 1214.47 L1866.23 1214.47 L1866.82 1214.47 L1867.4 1214.47 L1867.99 1214.47 L1868.58 1214.47 L1869.16 1214.47 L1869.75 1214.47 L1870.34 1214.47 L1870.92 1214.47 L1871.51 1214.47 L1872.09 1214.47 L1872.68 1214.47 L1873.27 1214.47 L1873.85 1214.47 L1874.44 1214.47 L1875.03 1214.47 L1875.61 1214.47 L1876.2 1214.47 L1876.79 1214.47 L1877.37 1214.47 L1877.96 1214.47 L1878.55 1214.47 L1879.13 1214.47 L1879.72 1214.47 L1880.3 1214.47 L1880.89 1214.47 L1881.48 1214.47 L1882.06 1214.47 L1882.65 1214.47 L1883.24 1214.47 L1883.82 1214.47 L1884.41 1214.47 L1885 1214.47 L1885.58 1214.47 L1886.17 1214.47 L1886.76 1214.47 L1887.34 1214.47 L1887.93 1214.47 L1888.51 1214.47 L1889.1 1214.47 L1889.69 1214.47 L1890.27 1214.47 L1890.86 1214.47 L1891.45 1214.47 L1892.03 1214.47 L1892.62 1214.47 L1893.21 1214.47 L1893.79 1214.47 L1894.38 1214.47 L1894.96 1214.47 L1895.55 1214.47 L1896.14 1214.47 L1896.72 1214.47 L1897.31 1214.47 L1897.9 1214.47 L1898.48 1214.47 L1899.07 1214.47 L1899.66 1214.47 L1900.24 1214.47 L1900.83 1214.47 L1901.42 1214.47 L1902 1214.47 L1902.59 1214.47 L1903.17 1214.47 L1903.76 1214.47 L1904.35 1214.47 L1904.93 1214.47 L1905.52 1214.47 L1906.11 1214.47 L1906.69 1214.47 L1907.28 1214.47 L1907.87 1214.47 L1908.45 1214.47 L1909.04 1214.47 L1909.63 1214.47 L1910.21 1214.47 L1910.8 1214.47 L1911.38 1214.47 L1911.97 1214.47 L1912.56 1214.47 L1913.14 1214.47 L1913.73 1214.47 L1914.32 1214.47 L1914.9 1214.47 L1915.49 1214.47 L1916.08 1214.47 L1916.66 1214.47 L1917.25 1214.47 L1917.83 1214.47 L1918.42 1214.47 L1919.01 1214.47 L1919.59 1214.47 L1920.18 1214.47 L1920.77 1214.47 L1921.35 1214.47 L1921.94 1214.47 L1922.53 1214.47 L1923.11 1214.47 L1923.7 1214.47 L1924.29 1214.47 L1924.87 1214.47 L1925.46 1214.47 L1926.04 1214.47 L1926.63 1214.47 L1927.22 1214.47 L1927.8 1214.47 L1928.39 1214.47 L1928.98 1214.47 L1929.56 1214.47 L1930.15 1214.47 L1930.74 1214.47 L1931.32 1214.47 L1931.91 1214.47 L1932.5 1214.47 L1933.08 1214.47 L1933.67 1214.47 L1934.25 1214.47 L1934.84 1214.47 L1935.43 1214.47 L1936.01 1214.47 L1936.6 1214.47 L1937.19 1214.47 L1937.77 1214.47 L1938.36 1214.47 L1938.95 1214.47 L1939.53 1214.47 L1940.12 1214.47 L1940.71 1214.47 L1941.29 1214.47 L1941.88 1214.47 L1942.46 1214.47 L1943.05 1214.47 L1943.64 1214.47 L1944.22 1214.47 L1944.81 1214.47 L1945.4 1214.47 L1945.98 1214.47 L1946.57 1214.47 L1947.16 1214.47 L1947.74 1214.47 L1948.33 1214.47 L1948.91 1214.47 L1949.5 1214.47 L1950.09 1214.47 L1950.67 1214.47 L1951.26 1214.47 L1951.85 1214.47 L1952.43 1214.47 L1953.02 1214.47 L1953.61 1214.47 L1954.19 1214.47 L1954.78 1214.47 L1955.37 1214.47 L1955.95 1214.47 L1956.54 1214.47 L1957.12 1214.47 L1957.71 1214.47 L1958.3 1214.47 L1958.88 1214.47 L1959.47 1214.47 L1960.06 1214.47 L1960.64 1214.47 L1961.23 1214.47 L1961.82 1214.47 L1962.4 1214.47 L1962.99 1214.47 L1963.58 1214.47 L1964.16 1214.47 L1964.75 1214.47 L1965.33 1214.47 L1965.92 1214.47 L1966.51 1214.47 L1967.09 1214.47 L1967.68 1214.47 L1968.27 1214.47 L1968.85 1214.47 L1969.44 1214.47 L1970.03 1214.47 L1970.61 1214.47 L1971.2 1214.47 L1971.78 1214.47 L1972.37 1214.47 L1972.96 1214.47 L1973.54 1214.47 L1974.13 1214.47 L1974.72 1214.47 L1975.3 1214.47 L1975.89 1214.47 L1976.48 1214.47 L1977.06 1214.47 L1977.65 1214.47 L1978.24 1214.47 L1978.82 1214.47 L1979.41 1214.47 L1979.99 1214.47 L1980.58 1214.47 L1981.17 1214.47 L1981.75 1214.47 L1982.34 1214.47 L1982.93 1214.47 L1983.51 1214.47 L1984.1 1214.47 L1984.69 1214.47 L1985.27 1214.47 L1985.86 1214.47 L1986.45 1214.47 L1987.03 1214.47 L1987.62 1214.47 L1988.2 1214.47 L1988.79 1214.47 L1989.38 1214.47 L1989.96 1214.47 L1990.55 1214.47 L1991.14 1214.47 L1991.72 1214.47 L1992.31 1214.47 L1992.9 1214.47 L1993.48 1214.47 L1994.07 1214.47 L1994.65 1214.47 L1995.24 1214.47 L1995.83 1214.47 L1996.41 1214.47 L1997 1214.47 L1997.59 1214.47 L1998.17 1214.47 L1998.76 1214.47 L1999.35 1214.47 L1999.93 1214.47 L2000.52 1214.47 L2001.11 1214.47 L2001.69 1214.47 L2002.28 1214.47 L2002.86 1214.47 L2003.45 1214.47 L2004.04 1214.47 L2004.62 1214.47 L2005.21 1214.47 L2005.8 1214.47 L2006.38 1214.47 L2006.97 1214.47 L2007.56 1214.47 L2008.14 1214.47 L2008.73 1214.47 L2009.32 1214.47 L2009.9 1214.47 L2010.49 1214.47 L2011.07 1214.47 L2011.66 1214.47 L2012.25 1214.47 L2012.83 1214.47 L2013.42 1214.47 L2014.01 1214.47 L2014.59 1214.47 L2015.18 1214.47 L2015.77 1214.47 L2016.35 1214.47 L2016.94 1214.47 L2017.53 1214.47 L2018.11 1214.47 L2018.7 1214.47 L2019.28 1214.47 L2019.87 1214.47 L2020.46 1214.47 L2021.04 1214.47 L2021.63 1214.47 L2022.22 1214.47 L2022.8 1214.47 L2023.39 1214.47 L2023.98 1214.47 L2024.56 1214.47 L2025.15 1214.47 L2025.73 1214.47 L2026.32 1214.47 L2026.91 1214.47 L2027.49 1214.47 L2028.08 1214.47 L2028.67 1214.47 L2029.25 1214.47 L2029.84 1214.47 L2030.43 1214.47 L2031.01 1214.47 L2031.6 1214.47 L2032.19 1214.47 L2032.77 1214.47 L2033.36 1214.47 L2033.94 1214.47 L2034.53 1214.47 L2035.12 1214.47 L2035.7 1214.47 L2036.29 1214.47 L2036.88 1214.47 L2037.46 1214.47 L2038.05 1214.47 L2038.64 1214.47 L2039.22 1214.47 L2039.81 1214.47 L2040.4 1214.47 L2040.98 1214.47 L2041.57 1214.47 L2042.15 1214.47 L2042.74 1214.47 L2043.33 1214.47 L2043.91 1214.47 L2044.5 1214.47 L2045.09 1214.47 L2045.67 1214.47 L2046.26 1214.47 L2046.85 1214.47 L2047.43 1214.47 L2048.02 1214.47 L2048.6 1214.47 L2049.19 1214.47 L2049.78 1214.47 L2050.36 1214.47 L2050.95 1214.47 L2051.54 1214.47 L2052.12 1214.47 L2052.71 1214.47 L2053.3 1214.47 L2053.88 1214.47 L2054.47 1214.47 L2055.06 1214.47 L2055.64 1214.47 L2056.23 1214.47 L2056.81 1214.47 L2057.4 1214.47 L2057.99 1214.47 L2058.57 1214.47 L2059.16 1214.47 L2059.75 1214.47 L2060.33 1214.47 L2060.92 1214.47 L2061.51 1214.47 L2062.09 1214.47 L2062.68 1214.47 L2063.27 1214.47 L2063.85 1214.47 L2064.44 1214.47 L2065.02 1214.47 L2065.61 1214.47 L2066.2 1214.47 L2066.78 1214.47 L2067.37 1214.47 L2067.96 1214.47 L2068.54 1214.47 L2069.13 1214.47 L2069.72 1214.47 L2070.3 1214.47 L2070.89 1214.47 L2071.48 1214.47 L2072.06 1214.47 L2072.65 1214.47 L2073.23 1214.47 L2073.82 1214.47 L2074.41 1214.47 L2074.99 1214.47 L2075.58 1214.47 L2076.17 1214.47 L2076.75 1214.47 L2077.34 1214.47 L2077.93 1214.47 L2078.51 1214.47 L2079.1 1214.47 L2079.68 1214.47 L2080.27 1214.47 L2080.86 1214.47 L2081.44 1214.47 L2082.03 1214.47 L2082.62 1214.47 L2083.2 1214.47 L2083.79 1214.47 L2084.38 1214.47 L2084.96 1214.47 L2085.55 1214.47 L2086.14 1214.47 L2086.72 1214.47 L2087.31 1214.47 L2087.89 1214.47 L2088.48 1214.47 L2089.07 1214.47 L2089.65 1214.47 L2090.24 1214.47 L2090.83 1214.47 L2091.41 1214.47 L2092 1214.47 L2092.59 1214.47 L2093.17 1214.47 L2093.76 1214.47 L2094.35 1214.47 L2094.93 1214.47 L2095.52 1214.47 L2096.1 1214.47 L2096.69 1214.47 L2097.28 1214.47 L2097.86 1214.47 L2098.45 1214.47 L2099.04 1214.47 L2099.62 1214.47 L2100.21 1214.47 L2100.8 1214.47 L2101.38 1214.47 L2101.97 1214.47 L2102.55 1214.47 L2103.14 1214.47 L2103.73 1214.47 L2104.31 1214.47 L2104.9 1214.47 L2105.49 1214.47 L2106.07 1214.47 L2106.66 1214.47 L2107.25 1214.47 L2107.83 1214.47 L2108.42 1214.47 L2109.01 1214.47 L2109.59 1214.47 L2110.18 1214.47 L2110.76 1214.47 L2111.35 1214.47 L2111.94 1214.47 L2112.52 1214.47 L2113.11 1214.47 L2113.7 1214.47 L2114.28 1214.47 L2114.87 1214.47 L2115.46 1214.47 L2116.04 1214.47 L2116.63 1214.47 L2117.22 1214.47 L2117.8 1214.47 L2118.39 1214.47 L2118.97 1214.47 L2119.56 1214.47 L2120.15 1214.47 L2120.73 1214.47 L2121.32 1214.47 L2121.91 1214.47 L2122.49 1214.47 L2123.08 1214.47 L2123.67 1214.47 L2124.25 1214.47 L2124.84 1214.47 L2125.42 1214.47 L2126.01 1214.47 L2126.6 1214.47 L2127.18 1214.47 L2127.77 1214.47 L2128.36 1214.47 L2128.94 1214.47 L2129.53 1214.47 L2130.12 1214.47 L2130.7 1214.47 L2131.29 1214.47 L2131.88 1214.47 L2132.46 1214.47 L2133.05 1214.47 L2133.63 1214.47 L2134.22 1214.47 L2134.81 1214.47 L2135.39 1214.47 L2135.98 1214.47 L2136.57 1214.47 L2137.15 1214.47 L2137.74 1214.47 L2138.33 1214.47 L2138.91 1214.47 L2139.5 1214.47 L2140.09 1214.47 L2140.67 1214.47 L2141.26 1214.47 L2141.84 1214.47 L2142.43 1214.47 L2143.02 1214.47 L2143.6 1214.47 L2144.19 1214.47 L2144.78 1214.47 L2145.36 1214.47 L2145.95 1214.47 L2146.54 1214.47 L2147.12 1214.47 L2147.71 1214.47 L2148.3 1214.47 L2148.88 1214.47 L2149.47 1214.47 L2150.05 1214.47 L2150.64 1214.47 L2151.23 1214.47 L2151.81 1214.47 L2152.4 1214.47 L2152.99 1214.47 L2153.57 1214.47 L2154.16 1214.47 L2154.75 1214.47 L2155.33 1214.47 L2155.92 1214.47 L2156.5 1214.47 L2157.09 1214.47 L2157.68 1214.47 L2158.26 1214.47 L2158.26 1214.32 L2157.68 1214.32 L2157.09 1214.32 L2156.5 1214.32 L2155.92 1214.32 L2155.33 1214.32 L2154.75 1214.32 L2154.16 1214.32 L2153.57 1214.32 L2152.99 1214.32 L2152.4 1214.32 L2151.81 1214.32 L2151.23 1214.32 L2150.64 1214.32 L2150.05 1214.32 L2149.47 1214.32 L2148.88 1214.32 L2148.3 1214.32 L2147.71 1214.32 L2147.12 1214.32 L2146.54 1214.32 L2145.95 1214.32 L2145.36 1214.32 L2144.78 1214.32 L2144.19 1214.32 L2143.6 1214.32 L2143.02 1214.32 L2142.43 1214.32 L2141.84 1214.32 L2141.26 1214.32 L2140.67 1214.32 L2140.09 1214.32 L2139.5 1214.32 L2138.91 1214.32 L2138.33 1214.32 L2137.74 1214.32 L2137.15 1214.32 L2136.57 1214.32 L2135.98 1214.32 L2135.39 1214.32 L2134.81 1214.32 L2134.22 1214.32 L2133.63 1214.32 L2133.05 1214.32 L2132.46 1214.32 L2131.88 1214.32 L2131.29 1214.32 L2130.7 1214.32 L2130.12 1214.32 L2129.53 1214.32 L2128.94 1214.32 L2128.36 1214.32 L2127.77 1214.32 L2127.18 1214.32 L2126.6 1214.32 L2126.01 1214.32 L2125.42 1214.32 L2124.84 1214.32 L2124.25 1214.32 L2123.67 1214.32 L2123.08 1214.32 L2122.49 1214.32 L2121.91 1214.32 L2121.32 1214.32 L2120.73 1214.32 L2120.15 1214.32 L2119.56 1214.32 L2118.97 1214.32 L2118.39 1214.32 L2117.8 1214.32 L2117.22 1214.32 L2116.63 1214.32 L2116.04 1214.32 L2115.46 1214.32 L2114.87 1214.32 L2114.28 1214.32 L2113.7 1214.32 L2113.11 1214.32 L2112.52 1214.32 L2111.94 1214.32 L2111.35 1214.32 L2110.76 1214.32 L2110.18 1214.32 L2109.59 1214.32 L2109.01 1214.32 L2108.42 1214.32 L2107.83 1214.32 L2107.25 1214.32 L2106.66 1214.32 L2106.07 1214.32 L2105.49 1214.32 L2104.9 1214.32 L2104.31 1214.32 L2103.73 1214.32 L2103.14 1214.32 L2102.55 1214.32 L2101.97 1214.32 L2101.38 1214.32 L2100.8 1214.32 L2100.21 1214.32 L2099.62 1214.32 L2099.04 1214.32 L2098.45 1214.32 L2097.86 1214.32 L2097.28 1214.32 L2096.69 1214.32 L2096.1 1214.32 L2095.52 1214.32 L2094.93 1214.32 L2094.35 1214.32 L2093.76 1214.32 L2093.17 1214.32 L2092.59 1214.32 L2092 1214.32 L2091.41 1214.32 L2090.83 1214.32 L2090.24 1214.32 L2089.65 1214.32 L2089.07 1214.32 L2088.48 1214.32 L2087.89 1214.32 L2087.31 1214.32 L2086.72 1214.32 L2086.14 1214.32 L2085.55 1214.32 L2084.96 1214.32 L2084.38 1214.32 L2083.79 1214.32 L2083.2 1214.32 L2082.62 1214.32 L2082.03 1214.32 L2081.44 1214.32 L2080.86 1214.32 L2080.27 1214.32 L2079.68 1214.32 L2079.1 1214.32 L2078.51 1214.32 L2077.93 1214.32 L2077.34 1214.32 L2076.75 1214.32 L2076.17 1214.32 L2075.58 1214.32 L2074.99 1214.32 L2074.41 1214.32 L2073.82 1214.32 L2073.23 1214.32 L2072.65 1214.32 L2072.06 1214.32 L2071.48 1214.32 L2070.89 1214.32 L2070.3 1214.32 L2069.72 1214.32 L2069.13 1214.32 L2068.54 1214.32 L2067.96 1214.32 L2067.37 1214.32 L2066.78 1214.32 L2066.2 1214.32 L2065.61 1214.32 L2065.02 1214.32 L2064.44 1214.32 L2063.85 1214.32 L2063.27 1214.32 L2062.68 1214.32 L2062.09 1214.32 L2061.51 1214.32 L2060.92 1214.32 L2060.33 1214.32 L2059.75 1214.32 L2059.16 1214.32 L2058.57 1214.32 L2057.99 1214.32 L2057.4 1214.32 L2056.81 1214.32 L2056.23 1214.32 L2055.64 1214.32 L2055.06 1214.32 L2054.47 1214.32 L2053.88 1214.32 L2053.3 1214.32 L2052.71 1214.32 L2052.12 1214.32 L2051.54 1214.32 L2050.95 1214.32 L2050.36 1214.32 L2049.78 1214.32 L2049.19 1214.32 L2048.6 1214.32 L2048.02 1214.32 L2047.43 1214.32 L2046.85 1214.32 L2046.26 1214.32 L2045.67 1214.32 L2045.09 1214.32 L2044.5 1214.32 L2043.91 1214.32 L2043.33 1214.32 L2042.74 1214.32 L2042.15 1214.32 L2041.57 1214.32 L2040.98 1214.32 L2040.4 1214.32 L2039.81 1214.32 L2039.22 1214.32 L2038.64 1214.32 L2038.05 1214.32 L2037.46 1214.32 L2036.88 1214.32 L2036.29 1214.32 L2035.7 1214.32 L2035.12 1214.32 L2034.53 1214.32 L2033.94 1214.32 L2033.36 1214.32 L2032.77 1214.32 L2032.19 1214.32 L2031.6 1214.32 L2031.01 1214.32 L2030.43 1214.32 L2029.84 1214.32 L2029.25 1214.32 L2028.67 1214.32 L2028.08 1214.32 L2027.49 1214.32 L2026.91 1214.32 L2026.32 1214.32 L2025.73 1214.32 L2025.15 1214.32 L2024.56 1214.32 L2023.98 1214.32 L2023.39 1214.32 L2022.8 1214.32 L2022.22 1214.32 L2021.63 1214.32 L2021.04 1214.32 L2020.46 1214.32 L2019.87 1214.32 L2019.28 1214.32 L2018.7 1214.32 L2018.11 1214.32 L2017.53 1214.32 L2016.94 1214.32 L2016.35 1214.32 L2015.77 1214.32 L2015.18 1214.32 L2014.59 1214.32 L2014.01 1214.32 L2013.42 1214.32 L2012.83 1214.32 L2012.25 1214.32 L2011.66 1214.32 L2011.07 1214.32 L2010.49 1214.32 L2009.9 1214.32 L2009.32 1214.32 L2008.73 1214.32 L2008.14 1214.32 L2007.56 1214.32 L2006.97 1214.32 L2006.38 1214.32 L2005.8 1214.32 L2005.21 1214.32 L2004.62 1214.32 L2004.04 1214.32 L2003.45 1214.32 L2002.86 1214.32 L2002.28 1214.32 L2001.69 1214.32 L2001.11 1214.32 L2000.52 1214.32 L1999.93 1214.32 L1999.35 1214.32 L1998.76 1214.32 L1998.17 1214.32 L1997.59 1214.32 L1997 1214.32 L1996.41 1214.32 L1995.83 1214.32 L1995.24 1214.32 L1994.65 1214.32 L1994.07 1214.32 L1993.48 1214.32 L1992.9 1214.32 L1992.31 1214.32 L1991.72 1214.32 L1991.14 1214.32 L1990.55 1214.32 L1989.96 1214.32 L1989.38 1214.32 L1988.79 1214.32 L1988.2 1214.32 L1987.62 1214.32 L1987.03 1214.32 L1986.45 1214.32 L1985.86 1214.32 L1985.27 1214.32 L1984.69 1214.32 L1984.1 1214.32 L1983.51 1214.32 L1982.93 1214.32 L1982.34 1214.32 L1981.75 1214.32 L1981.17 1214.32 L1980.58 1214.32 L1979.99 1214.32 L1979.41 1214.32 L1978.82 1214.32 L1978.24 1214.32 L1977.65 1214.32 L1977.06 1214.32 L1976.48 1214.32 L1975.89 1214.32 L1975.3 1214.32 L1974.72 1214.32 L1974.13 1214.32 L1973.54 1214.32 L1972.96 1214.32 L1972.37 1214.32 L1971.78 1214.32 L1971.2 1214.32 L1970.61 1214.32 L1970.03 1214.32 L1969.44 1214.32 L1968.85 1214.32 L1968.27 1214.32 L1967.68 1214.32 L1967.09 1214.32 L1966.51 1214.32 L1965.92 1214.32 L1965.33 1214.32 L1964.75 1214.32 L1964.16 1214.32 L1963.58 1214.32 L1962.99 1214.32 L1962.4 1214.32 L1961.82 1214.32 L1961.23 1214.32 L1960.64 1214.32 L1960.06 1214.32 L1959.47 1214.32 L1958.88 1214.32 L1958.3 1214.32 L1957.71 1214.32 L1957.12 1214.32 L1956.54 1214.32 L1955.95 1214.32 L1955.37 1214.32 L1954.78 1214.32 L1954.19 1214.32 L1953.61 1214.32 L1953.02 1214.32 L1952.43 1214.32 L1951.85 1214.32 L1951.26 1214.32 L1950.67 1214.32 L1950.09 1214.32 L1949.5 1214.32 L1948.91 1214.32 L1948.33 1214.32 L1947.74 1214.32 L1947.16 1214.32 L1946.57 1214.32 L1945.98 1214.32 L1945.4 1214.32 L1944.81 1214.32 L1944.22 1214.32 L1943.64 1214.32 L1943.05 1214.32 L1942.46 1214.32 L1941.88 1214.32 L1941.29 1214.32 L1940.71 1214.32 L1940.12 1214.32 L1939.53 1214.32 L1938.95 1214.32 L1938.36 1214.32 L1937.77 1214.32 L1937.19 1214.32 L1936.6 1214.32 L1936.01 1214.32 L1935.43 1214.32 L1934.84 1214.32 L1934.25 1214.32 L1933.67 1214.32 L1933.08 1214.32 L1932.5 1214.32 L1931.91 1214.32 L1931.32 1214.32 L1930.74 1214.32 L1930.15 1214.32 L1929.56 1214.32 L1928.98 1214.32 L1928.39 1214.32 L1927.8 1214.32 L1927.22 1214.32 L1926.63 1214.32 L1926.04 1214.32 L1925.46 1214.32 L1924.87 1214.32 L1924.29 1214.32 L1923.7 1214.32 L1923.11 1214.32 L1922.53 1214.32 L1921.94 1214.32 L1921.35 1214.32 L1920.77 1214.32 L1920.18 1214.32 L1919.59 1214.32 L1919.01 1214.32 L1918.42 1214.32 L1917.83 1214.32 L1917.25 1214.32 L1916.66 1214.32 L1916.08 1214.32 L1915.49 1214.32 L1914.9 1214.32 L1914.32 1214.32 L1913.73 1214.32 L1913.14 1214.32 L1912.56 1214.32 L1911.97 1214.32 L1911.38 1214.32 L1910.8 1214.32 L1910.21 1214.32 L1909.63 1214.32 L1909.04 1214.32 L1908.45 1214.32 L1907.87 1214.32 L1907.28 1214.32 L1906.69 1214.32 L1906.11 1214.32 L1905.52 1214.32 L1904.93 1214.32 L1904.35 1214.32 L1903.76 1214.32 L1903.17 1214.32 L1902.59 1214.32 L1902 1214.32 L1901.42 1214.32 L1900.83 1214.32 L1900.24 1214.32 L1899.66 1214.32 L1899.07 1214.32 L1898.48 1214.32 L1897.9 1214.32 L1897.31 1214.32 L1896.72 1214.32 L1896.14 1214.32 L1895.55 1214.32 L1894.96 1214.32 L1894.38 1214.32 L1893.79 1214.32 L1893.21 1214.32 L1892.62 1214.32 L1892.03 1214.32 L1891.45 1214.32 L1890.86 1214.32 L1890.27 1214.32 L1889.69 1214.32 L1889.1 1214.32 L1888.51 1214.32 L1887.93 1214.32 L1887.34 1214.32 L1886.76 1214.32 L1886.17 1214.32 L1885.58 1214.32 L1885 1214.32 L1884.41 1214.32 L1883.82 1214.32 L1883.24 1214.32 L1882.65 1214.32 L1882.06 1214.32 L1881.48 1214.32 L1880.89 1214.32 L1880.3 1214.32 L1879.72 1214.32 L1879.13 1214.32 L1878.55 1214.32 L1877.96 1214.32 L1877.37 1214.32 L1876.79 1214.32 L1876.2 1214.32 L1875.61 1214.32 L1875.03 1214.32 L1874.44 1214.32 L1873.85 1214.32 L1873.27 1214.32 L1872.68 1214.32 L1872.09 1214.32 L1871.51 1214.32 L1870.92 1214.32 L1870.34 1214.32 L1869.75 1214.32 L1869.16 1214.32 L1868.58 1214.32 L1867.99 1214.32 L1867.4 1214.32 L1866.82 1214.32 L1866.23 1214.32 L1865.64 1214.32 L1865.06 1214.32 L1864.47 1214.32 L1863.88 1214.32 L1863.3 1214.32 L1862.71 1214.32 L1862.13 1214.32 L1861.54 1214.32 L1860.95 1214.32 L1860.37 1214.32 L1859.78 1214.32 L1859.19 1214.32 L1858.61 1214.32 L1858.02 1214.32 L1857.43 1214.32 L1856.85 1214.32 L1856.26 1214.32 L1855.68 1214.32 L1855.09 1214.32 L1854.5 1214.32 L1853.92 1214.32 L1853.33 1214.32 L1852.74 1214.32 L1852.16 1214.32 L1851.57 1214.32 L1850.98 1214.32 L1850.4 1214.32 L1849.81 1214.32 L1849.22 1214.32 L1848.64 1214.32 L1848.05 1214.32 L1847.47 1214.32 L1846.88 1214.32 L1846.29 1214.32 L1845.71 1214.32 L1845.12 1214.32 L1844.53 1214.32 L1843.95 1214.32 L1843.36 1214.32 L1842.77 1214.32 L1842.19 1214.32 L1841.6 1214.32 L1841.01 1214.32 L1840.43 1214.32 L1839.84 1214.32 L1839.26 1214.32 L1838.67 1214.32 L1838.08 1214.32 L1837.5 1214.32 L1836.91 1214.32 L1836.32 1214.32 L1835.74 1214.32 L1835.15 1214.32 L1834.56 1214.32 L1833.98 1214.32 L1833.39 1214.32 L1832.81 1214.32 L1832.22 1214.32 L1831.63 1214.32 L1831.05 1214.32 L1830.46 1214.32 L1829.87 1214.32 L1829.29 1214.32 L1828.7 1214.32 L1828.11 1214.32 L1827.53 1214.32 L1826.94 1214.32 L1826.35 1214.32 L1825.77 1214.32 L1825.18 1214.32 L1824.6 1214.32 L1824.01 1214.32 L1823.42 1214.32 L1822.84 1214.32 L1822.25 1214.32 L1821.66 1214.32 L1821.08 1214.32 L1820.49 1214.32 L1819.9 1214.32 L1819.32 1214.32 L1818.73 1214.32 L1818.14 1214.32 L1817.56 1214.32 L1816.97 1214.32 L1816.39 1214.32 L1815.8 1214.32 L1815.21 1214.32 L1814.63 1214.32 L1814.04 1214.32 L1813.45 1214.32 L1812.87 1214.32 L1812.28 1214.32 L1811.69 1214.32 L1811.11 1214.32 L1810.52 1214.32 L1809.94 1214.32 L1809.35 1214.32 L1808.76 1214.32 L1808.18 1214.32 L1807.59 1214.32 L1807 1214.32 L1806.42 1214.32 L1805.83 1214.32 L1805.24 1214.32 L1804.66 1214.32 L1804.07 1214.32 L1803.48 1214.32 L1802.9 1214.32 L1802.31 1214.32 L1801.73 1214.32 L1801.14 1214.32 L1800.55 1214.32 L1799.97 1214.32 L1799.38 1214.32 L1798.79 1214.32 L1798.21 1214.32 L1797.62 1214.32 L1797.03 1214.32 L1796.45 1214.32 L1795.86 1214.32 L1795.27 1214.32 L1794.69 1214.32 L1794.1 1214.32 L1793.52 1214.32 L1792.93 1214.32 L1792.34 1214.32 L1791.76 1214.32 L1791.17 1214.32 L1790.58 1214.32 L1790 1214.32 L1789.41 1214.32 L1788.82 1214.32 L1788.24 1214.32 L1787.65 1214.32 L1787.06 1214.32 L1786.48 1214.32 L1785.89 1214.32 L1785.31 1214.32 L1784.72 1214.32 L1784.13 1214.32 L1783.55 1214.32 L1782.96 1214.32 L1782.37 1214.32 L1781.79 1214.32 L1781.2 1214.32 L1780.61 1214.32 L1780.03 1214.32 L1779.44 1214.32 L1778.86 1214.32 L1778.27 1214.32 L1777.68 1214.32 L1777.1 1214.32 L1776.51 1214.32 L1775.92 1214.32 L1775.34 1214.32 L1774.75 1214.32 L1774.16 1214.32 L1773.58 1214.32 L1772.99 1214.32 L1772.4 1214.32 L1771.82 1214.32 L1771.23 1214.32 L1770.65 1214.32 L1770.06 1214.32 L1769.47 1214.32 L1768.89 1214.32 L1768.3 1214.32 L1767.71 1214.32 L1767.13 1214.32 L1766.54 1214.32 L1765.95 1214.32 L1765.37 1214.32 L1764.78 1214.32 L1764.19 1214.32 L1763.61 1214.32 L1763.02 1214.32 L1762.44 1214.32 L1761.85 1214.32 L1761.26 1214.32 L1760.68 1214.32 L1760.09 1214.32 L1759.5 1214.32 L1758.92 1214.32 L1758.33 1214.32 L1757.74 1214.32 L1757.16 1214.32 L1756.57 1214.32 L1755.99 1214.32 L1755.4 1214.32 L1754.81 1214.32 L1754.23 1214.32 L1753.64 1214.32 L1753.05 1214.32 L1752.47 1214.32 L1751.88 1214.32 L1751.29 1214.32 L1750.71 1214.32 L1750.12 1214.32 L1749.53 1214.32 L1748.95 1214.32 L1748.36 1214.32 L1747.78 1214.32 L1747.19 1214.32 L1746.6 1214.32 L1746.02 1214.32 L1745.43 1214.32 L1744.84 1214.32 L1744.26 1214.32 L1743.67 1214.32 L1743.08 1214.32 L1742.5 1214.32 L1741.91 1214.32 L1741.32 1214.32 L1740.74 1214.32 L1740.15 1214.32 L1739.57 1214.32 L1738.98 1214.32 L1738.39 1214.32 L1737.81 1214.32 L1737.22 1214.32 L1736.63 1214.32 L1736.05 1214.32 L1735.46 1214.32 L1734.87 1214.32 L1734.29 1214.32 L1733.7 1214.32 L1733.11 1214.32 L1732.53 1214.32 L1731.94 1214.32 L1731.36 1214.32 L1730.77 1214.32 L1730.18 1214.32 L1729.6 1214.32 L1729.01 1214.32 L1728.42 1214.32 L1727.84 1214.32 L1727.25 1214.32 L1726.66 1214.32 L1726.08 1214.32 L1725.49 1214.32 L1724.91 1214.32 L1724.32 1214.32 L1723.73 1214.32 L1723.15 1214.32 L1722.56 1214.32 L1721.97 1214.32 L1721.39 1214.32 L1720.8 1214.32 L1720.21 1214.32 L1719.63 1214.32 L1719.04 1214.32 L1718.45 1214.32 L1717.87 1214.32 L1717.28 1214.32 L1716.7 1214.32 L1716.11 1214.32 L1715.52 1214.32 L1714.94 1214.32 L1714.35 1214.32 L1713.76 1214.32 L1713.18 1214.32 L1712.59 1214.32 L1712 1214.32 L1711.42 1214.32 L1710.83 1214.32 L1710.24 1214.32 L1709.66 1214.32 L1709.07 1214.32 L1708.49 1214.32 L1707.9 1214.32 L1707.31 1214.32 L1706.73 1214.32 L1706.14 1214.32 L1705.55 1214.32 L1704.97 1214.32 L1704.38 1214.32 L1703.79 1214.32 L1703.21 1214.32 L1702.62 1214.32 L1702.04 1214.32 L1701.45 1214.32 L1700.86 1214.32 L1700.28 1214.32 L1699.69 1214.32 L1699.1 1214.32 L1698.52 1214.32 L1697.93 1214.32 L1697.34 1214.32 L1696.76 1214.32 L1696.17 1214.32 L1695.58 1214.32 L1695 1214.32 L1694.41 1214.32 L1693.83 1214.32 L1693.24 1214.32 L1692.65 1214.32 L1692.07 1214.32 L1691.48 1214.32 L1690.89 1214.32 L1690.31 1214.32 L1689.72 1214.32 L1689.13 1214.32 L1688.55 1214.32 L1687.96 1214.32 L1687.37 1214.32 L1686.79 1214.32 L1686.2 1214.32 L1685.62 1214.32 L1685.03 1214.32 L1684.44 1214.32 L1683.86 1214.32 L1683.27 1214.32 L1682.68 1214.32 L1682.1 1214.32 L1681.51 1214.32 L1680.92 1214.32 L1680.34 1214.32 L1679.75 1214.32 L1679.17 1214.32 L1678.58 1214.32 L1677.99 1214.32 L1677.41 1214.32 L1676.82 1214.32 L1676.23 1214.32 L1675.65 1214.32 L1675.06 1214.32 L1674.47 1214.32 L1673.89 1214.32 L1673.3 1214.32 L1672.71 1214.32 L1672.13 1214.32 L1671.54 1214.32 L1670.96 1214.32 L1670.37 1214.32 L1669.78 1214.32 L1669.2 1214.32 L1668.61 1214.32 L1668.02 1214.32 L1667.44 1214.32 L1666.85 1214.32 L1666.26 1214.32 L1665.68 1214.32 L1665.09 1214.32 L1664.5 1214.32 L1663.92 1214.32 L1663.33 1214.32 L1662.75 1214.32 L1662.16 1214.32 L1661.57 1214.32 L1660.99 1214.32 L1660.4 1214.32 L1659.81 1214.32 L1659.23 1214.32 L1658.64 1214.32 L1658.05 1214.32 L1657.47 1214.32 L1656.88 1214.32 L1656.29 1214.32 L1655.71 1214.32 L1655.12 1214.32 L1654.54 1214.32 L1653.95 1214.32 L1653.36 1214.32 L1652.78 1214.32 L1652.19 1214.32 L1651.6 1214.32 L1651.02 1214.32 L1650.43 1214.32 L1649.84 1214.32 L1649.26 1214.32 L1648.67 1214.32 L1648.09 1214.32 L1647.5 1214.32 L1646.91 1214.32 L1646.33 1214.32 L1645.74 1214.32 L1645.15 1214.32 L1644.57 1214.32 L1643.98 1214.32 L1643.39 1214.32 L1642.81 1214.32 L1642.22 1214.32 L1641.63 1214.32 L1641.05 1214.32 L1640.46 1214.32 L1639.88 1214.32 L1639.29 1214.32 L1638.7 1214.32 L1638.12 1214.32 L1637.53 1214.32 L1636.94 1214.32 L1636.36 1214.32 L1635.77 1214.32 L1635.18 1214.32 L1634.6 1214.32 L1634.01 1214.32 L1633.42 1214.32 L1632.84 1214.32 L1632.25 1214.32 L1631.67 1214.32 L1631.08 1214.32 L1630.49 1214.32 L1629.91 1214.32 L1629.32 1214.32 L1628.73 1214.32 L1628.15 1214.32 L1627.56 1214.32 L1626.97 1214.32 L1626.39 1214.32 L1625.8 1214.32 L1625.22 1214.32 L1624.63 1214.32 L1624.04 1214.32 L1623.46 1214.32 L1622.87 1214.32 L1622.28 1214.32 L1621.7 1214.32 L1621.11 1214.32 L1620.52 1214.32 L1619.94 1214.32 L1619.35 1214.32 L1618.76 1214.32 L1618.18 1214.32 L1617.59 1214.32 L1617.01 1214.32 L1616.42 1214.32 L1615.83 1214.32 L1615.25 1214.32 L1614.66 1214.32 L1614.07 1214.32 L1613.49 1214.32 L1612.9 1214.32 L1612.31 1214.32 L1611.73 1214.32 L1611.14 1214.32 L1610.55 1214.32 L1609.97 1214.32 L1609.38 1214.32 L1608.8 1214.32 L1608.21 1214.32 L1607.62 1214.32 L1607.04 1214.32 L1606.45 1214.32 L1605.86 1214.32 L1605.28 1214.32 L1604.69 1214.32 L1604.1 1214.32 L1603.52 1214.32 L1602.93 1214.32 L1602.34 1214.32 L1601.76 1214.32 L1601.17 1214.32 L1600.59 1214.32 L1600 1214.32 L1599.41 1214.32 L1598.83 1214.32 L1598.24 1214.32 L1597.65 1214.32 L1597.07 1214.32 L1596.48 1214.32 L1595.89 1214.32 L1595.31 1214.32 L1594.72 1214.32 L1594.14 1214.32 L1593.55 1214.32 L1592.96 1214.32 L1592.38 1214.32 L1591.79 1214.32 L1591.2 1214.32 L1590.62 1214.32 L1590.03 1214.32 L1589.44 1214.32 L1588.86 1214.32 L1588.27 1214.32 L1587.68 1214.32 L1587.1 1214.32 L1586.51 1214.32 L1585.93 1214.32 L1585.34 1214.32 L1584.75 1214.32 L1584.17 1214.32 L1583.58 1214.32 L1582.99 1214.32 L1582.41 1214.32 L1581.82 1214.32 L1581.23 1214.32 L1580.65 1214.32 L1580.06 1214.32 L1579.47 1214.32 L1578.89 1214.32 L1578.3 1214.32 L1577.72 1214.32 L1577.13 1214.32 L1576.54 1214.32 L1575.96 1214.32 L1575.37 1214.32 L1574.78 1214.32 L1574.2 1214.32 L1573.61 1214.32 L1573.02 1214.32 L1572.44 1214.32 L1571.85 1214.32 L1571.27 1214.32 L1570.68 1214.32 L1570.09 1214.32 L1569.51 1214.32 L1568.92 1214.32 L1568.33 1214.32 L1567.75 1214.32 L1567.16 1214.32 L1566.57 1214.32 L1565.99 1214.32 L1565.4 1214.32 L1564.81 1214.32 L1564.23 1214.32 L1563.64 1214.32 L1563.06 1214.32 L1562.47 1214.32 L1561.88 1214.32 L1561.3 1214.32 L1560.71 1214.32 L1560.12 1214.32 L1559.54 1214.32 L1558.95 1214.32 L1558.36 1214.32 L1557.78 1214.32 L1557.19 1214.32 L1556.6 1214.32 L1556.02 1214.32 L1555.43 1214.32 L1554.85 1214.32 L1554.26 1214.32 L1553.67 1214.32 L1553.09 1214.32 L1552.5 1214.32 L1551.91 1214.32 L1551.33 1214.32 L1550.74 1214.32 L1550.15 1214.32 L1549.57 1214.32 L1548.98 1214.32 L1548.4 1214.32 L1547.81 1214.32 L1547.22 1214.32 L1546.64 1214.32 L1546.05 1214.32 L1545.46 1214.32 L1544.88 1214.32 L1544.29 1214.32 L1543.7 1214.32 L1543.12 1214.32 L1542.53 1214.32 L1541.94 1214.32 L1541.36 1214.32 L1540.77 1214.32 L1540.19 1214.32 L1539.6 1214.32 L1539.01 1214.32 L1538.43 1214.32 L1537.84 1214.32 L1537.25 1214.32 L1536.67 1214.32 L1536.08 1214.32 L1535.49 1214.32 L1534.91 1214.32 L1534.32 1214.32 L1533.73 1214.32 L1533.15 1214.32 L1532.56 1214.32 L1531.98 1214.32 L1531.39 1214.32 L1530.8 1214.32 L1530.22 1214.32 L1529.63 1214.32 L1529.04 1214.32 L1528.46 1214.32 L1527.87 1214.32 L1527.28 1214.32 L1526.7 1214.32 L1526.11 1214.32 L1525.52 1214.32 L1524.94 1214.32 L1524.35 1214.32 L1523.77 1214.32 L1523.18 1214.32 L1522.59 1214.32 L1522.01 1214.32 L1521.42 1214.32 L1520.83 1214.32 L1520.25 1214.32 L1519.66 1214.32 L1519.07 1214.32 L1518.49 1214.32 L1517.9 1214.32 L1517.32 1214.32 L1516.73 1214.32 L1516.14 1214.32 L1515.56 1214.32 L1514.97 1214.32 L1514.38 1214.32 L1513.8 1214.32 L1513.21 1214.32 L1512.62 1214.32 L1512.04 1214.32 L1511.45 1214.32 L1510.86 1214.32 L1510.28 1214.32 L1509.69 1214.32 L1509.11 1214.32 L1508.52 1214.32 L1507.93 1214.32 L1507.35 1214.32 L1506.76 1214.32 L1506.17 1214.32 L1505.59 1214.32 L1505 1214.32 L1504.41 1214.32 L1503.83 1214.32 L1503.24 1214.32 L1502.65 1214.32 L1502.07 1214.32 L1501.48 1214.32 L1500.9 1214.32 L1500.31 1214.32 L1499.72 1214.32 L1499.14 1214.32 L1498.55 1214.32 L1497.96 1214.32 L1497.38 1214.32 L1496.79 1214.32 L1496.2 1214.32 L1495.62 1214.32 L1495.03 1214.32 L1494.45 1214.32 L1493.86 1214.32 L1493.27 1214.32 L1492.69 1214.32 L1492.1 1214.32 L1491.51 1214.32 L1490.93 1214.32 L1490.34 1214.32 L1489.75 1214.32 L1489.17 1214.32 L1488.58 1214.32 L1487.99 1214.32 L1487.41 1214.32 L1486.82 1214.32 L1486.24 1214.32 L1485.65 1214.32 L1485.06 1214.32 L1484.48 1214.32 L1483.89 1214.32 L1483.3 1214.32 L1482.72 1214.32 L1482.13 1214.32 L1481.54 1214.32 L1480.96 1214.32 L1480.37 1214.32 L1479.78 1214.32 L1479.2 1214.32 L1478.61 1214.32 L1478.03 1214.32 L1477.44 1214.32 L1476.85 1214.32 L1476.27 1214.32 L1475.68 1214.32 L1475.09 1214.32 L1474.51 1214.32 L1473.92 1214.32 L1473.33 1214.32 L1472.75 1214.32 L1472.16 1214.32 L1471.57 1214.32 L1470.99 1214.32 L1470.4 1214.32 L1469.82 1214.32 L1469.23 1214.32 L1468.64 1214.32 L1468.06 1214.32 L1467.47 1214.32 L1466.88 1214.32 L1466.3 1214.32 L1465.71 1214.32 L1465.12 1214.32 L1464.54 1214.32 L1463.95 1214.32 L1463.37 1214.32 L1462.78 1214.32 L1462.19 1214.32 L1461.61 1214.32 L1461.02 1214.32 L1460.43 1214.32 L1459.85 1214.32 L1459.26 1214.32 L1458.67 1214.32 L1458.09 1214.32 L1457.5 1214.32 L1456.91 1214.32 L1456.33 1214.32 L1455.74 1214.32 L1455.16 1214.32 L1454.57 1214.32 L1453.98 1214.32 L1453.4 1214.32 L1452.81 1214.32 L1452.22 1214.32 L1451.64 1214.32 L1451.05 1214.32 L1450.46 1214.32 L1449.88 1214.32 L1449.29 1214.32 L1448.7 1214.32 L1448.12 1214.32 L1447.53 1214.32 L1446.95 1214.32 L1446.36 1214.32 L1445.77 1214.32 L1445.19 1214.32 L1444.6 1214.32 L1444.01 1214.32 L1443.43 1214.32 L1442.84 1214.32 L1442.25 1214.32 L1441.67 1214.32 L1441.08 1214.32 L1440.5 1214.32 L1439.91 1214.32 L1439.32 1214.32 L1438.74 1214.32 L1438.15 1214.32 L1437.56 1214.32 L1436.98 1214.32 L1436.39 1214.32 L1435.8 1214.32 L1435.22 1214.32 L1434.63 1214.32 L1434.04 1214.32 L1433.46 1214.32 L1432.87 1214.32 L1432.29 1214.32 L1431.7 1214.32 L1431.11 1214.32 L1430.53 1214.32 L1429.94 1214.32 L1429.35 1214.32 L1428.77 1214.32 L1428.18 1214.32 L1427.59 1214.32 L1427.01 1214.32 L1426.42 1214.32 L1425.83 1214.32 L1425.25 1214.32 L1424.66 1214.32 L1424.08 1214.32 L1423.49 1214.32 L1422.9 1214.32 L1422.32 1214.32 L1421.73 1214.32 L1421.14 1214.32 L1420.56 1214.32 L1419.97 1214.32 L1419.38 1214.32 L1418.8 1214.32 L1418.21 1214.32 L1417.63 1214.32 L1417.04 1214.32 L1416.45 1214.32 L1415.87 1214.32 L1415.28 1214.32 L1414.69 1214.32 L1414.11 1214.32 L1413.52 1214.32 L1412.93 1214.32 L1412.35 1214.32 L1411.76 1214.32 L1411.17 1214.32 L1410.59 1214.32 L1410 1214.32 L1409.42 1214.32 L1408.83 1214.32 L1408.24 1214.32 L1407.66 1214.32 L1407.07 1214.32 L1406.48 1214.32 L1405.9 1214.32 L1405.31 1214.32 L1404.72 1214.32 L1404.14 1214.32 L1403.55 1214.32 L1402.96 1214.32 L1402.38 1214.32 L1401.79 1214.32 L1401.21 1214.32 L1400.62 1214.32 L1400.03 1214.32 L1399.45 1214.32 L1398.86 1214.32 L1398.27 1214.32 L1397.69 1214.32 L1397.1 1214.32 L1396.51 1214.32 L1395.93 1214.32 L1395.34 1214.32 L1394.75 1214.32 L1394.17 1214.32 L1393.58 1214.32 L1393 1214.32 L1392.41 1214.32 L1391.82 1214.32 L1391.24 1214.32 L1390.65 1214.32 L1390.06 1214.32 L1389.48 1214.32 L1388.89 1214.32 L1388.3 1214.32 L1387.72 1214.32 L1387.13 1214.32 L1386.55 1214.32 L1385.96 1214.32 L1385.37 1214.32 L1384.79 1214.32 L1384.2 1214.32 L1383.61 1214.32 L1383.03 1214.32 L1382.44 1214.32 L1381.85 1214.32 L1381.27 1214.32 L1380.68 1214.32 L1380.09 1214.32 L1379.51 1214.32 L1378.92 1214.32 L1378.34 1214.32 L1377.75 1214.32 L1377.16 1214.32 L1376.58 1214.32 L1375.99 1214.32 L1375.4 1214.32 L1374.82 1214.32 L1374.23 1214.32 L1373.64 1214.32 L1373.06 1214.32 L1372.47 1214.32 L1371.88 1214.32 L1371.3 1214.32 L1370.71 1214.32 L1370.13 1214.32 L1369.54 1214.32 L1368.95 1214.32 L1368.37 1214.32 L1367.78 1214.32 L1367.19 1214.32 L1366.61 1214.32 L1366.02 1214.32 L1365.43 1214.32 L1364.85 1214.32 L1364.26 1214.32 L1363.68 1214.32 L1363.09 1214.32 L1362.5 1214.32 L1361.92 1214.32 L1361.33 1214.32 L1360.74 1214.32 L1360.16 1214.32 L1359.57 1214.32 L1358.98 1214.32 L1358.4 1214.32 L1357.81 1214.32 L1357.22 1214.32 L1356.64 1214.32 L1356.05 1214.32 L1355.47 1214.32 L1354.88 1214.32 L1354.29 1214.32 L1353.71 1214.32 L1353.12 1214.32 L1352.53 1214.32 L1351.95 1214.32 L1351.36 1214.32 L1350.77 1214.32 L1350.19 1214.32 L1349.6 1214.32 L1349.01 1214.32 L1348.43 1214.32 L1347.84 1214.32 L1347.26 1214.32 L1346.67 1214.32 L1346.08 1214.32 L1345.5 1214.32 L1344.91 1214.32 L1344.32 1214.32 L1343.74 1214.32 L1343.15 1214.32 L1342.56 1214.32 L1341.98 1214.32 L1341.39 1214.32 L1340.8 1214.32 L1340.22 1214.32 L1339.63 1214.32 L1339.05 1214.32 L1338.46 1214.32 L1337.87 1214.32 L1337.29 1214.32 L1336.7 1214.32 L1336.11 1214.32 L1335.53 1214.32 L1334.94 1214.32 L1334.35 1214.32 L1333.77 1214.32 L1333.18 1214.32 L1332.6 1214.32 L1332.01 1214.32 L1331.42 1214.32 L1330.84 1214.32 L1330.25 1214.32 L1329.66 1214.32 L1329.08 1214.32 L1328.49 1214.32 L1327.9 1214.32 L1327.32 1214.32 L1326.73 1214.32 L1326.14 1214.32 L1325.56 1214.32 L1324.97 1214.32 L1324.39 1214.32 L1323.8 1214.32 L1323.21 1214.32 L1322.63 1214.32 L1322.04 1214.32 L1321.45 1214.32 L1320.87 1214.32 L1320.28 1214.32 L1319.69 1214.32 L1319.11 1214.32 L1318.52 1214.32 L1317.93 1214.32 L1317.35 1214.32 L1316.76 1214.32 L1316.18 1214.32 L1315.59 1214.32 L1315 1214.32 L1314.42 1214.32 L1313.83 1214.32 L1313.24 1214.32 L1312.66 1214.32 L1312.07 1214.32 L1311.48 1214.32 L1310.9 1214.32 L1310.31 1214.32 L1309.73 1214.32 L1309.14 1214.32 L1308.55 1214.32 L1307.97 1214.32 L1307.38 1214.32 L1306.79 1214.32 L1306.21 1214.32 L1305.62 1214.32 L1305.03 1214.32 L1304.45 1214.32 L1303.86 1214.32 L1303.27 1214.32 L1302.69 1214.32 L1302.1 1214.32 L1301.52 1214.32 L1300.93 1214.32 L1300.34 1214.32 L1299.76 1214.32 L1299.17 1214.32 L1298.58 1214.32 L1298 1214.32 L1297.41 1214.32 L1296.82 1214.32 L1296.24 1214.32 L1295.65 1214.32 L1295.06 1214.32 L1294.48 1214.32 L1293.89 1214.32 L1293.31 1214.32 L1292.72 1214.32 L1292.13 1214.32 L1291.55 1214.32 L1290.96 1214.32 L1290.37 1214.32 L1289.79 1214.32 L1289.2 1214.32 L1288.61 1214.32 L1288.03 1214.32 L1287.44 1214.32 L1286.86 1214.32 L1286.27 1214.32 L1285.68 1214.32 L1285.1 1214.32 L1284.51 1214.32 L1283.92 1214.32 L1283.34 1214.32 L1282.75 1214.32 L1282.16 1214.32 L1281.58 1214.32 L1280.99 1214.32 L1280.4 1214.32 L1279.82 1214.32 L1279.23 1214.32 L1278.65 1214.32 L1278.06 1214.32 L1277.47 1214.32 L1276.89 1214.32 L1276.3 1214.32 L1275.71 1214.32 L1275.13 1214.32 L1274.54 1214.32 L1273.95 1214.32 L1273.37 1214.32 L1272.78 1214.32 L1272.19 1214.32 L1271.61 1214.32 L1271.02 1214.32 L1270.44 1214.32 L1269.85 1214.32 L1269.26 1214.32 L1268.68 1214.32 L1268.09 1214.32 L1267.5 1214.32 L1266.92 1214.32 L1266.33 1214.32 L1265.74 1214.32 L1265.16 1214.32 L1264.57 1214.32 L1263.98 1214.32 L1263.4 1214.32 L1262.81 1214.32 L1262.23 1214.32 L1261.64 1214.32 L1261.05 1214.32 L1260.47 1214.32 L1259.88 1214.32 L1259.29 1214.32 L1258.71 1214.32 L1258.12 1214.32 L1257.53 1214.32 L1256.95 1214.32 L1256.36 1214.32 L1255.78 1214.32 L1255.19 1214.32 L1254.6 1214.32 L1254.02 1214.32 L1253.43 1214.32 L1252.84 1214.32 L1252.26 1214.32 L1251.67 1214.32 L1251.08 1214.32 L1250.5 1214.32 L1249.91 1214.32 L1249.32 1214.32 L1248.74 1214.32 L1248.15 1214.32 L1247.57 1214.32 L1246.98 1214.32 L1246.39 1214.32 L1245.81 1214.32 L1245.22 1214.32 L1244.63 1214.32 L1244.05 1214.32 L1243.46 1214.32 L1242.87 1214.32 L1242.29 1214.32 L1241.7 1214.32 L1241.11 1214.32 L1240.53 1214.32 L1239.94 1214.32 L1239.36 1214.32 L1238.77 1214.32 L1238.18 1214.32 L1237.6 1214.32 L1237.01 1214.32 L1236.42 1214.32 L1235.84 1214.32 L1235.25 1214.32 L1234.66 1214.32 L1234.08 1214.32 L1233.49 1214.32 L1232.91 1214.32 L1232.32 1214.32 L1231.73 1214.32 L1231.15 1214.32 L1230.56 1214.32 L1229.97 1214.32 L1229.39 1214.32 L1228.8 1214.32 L1228.21 1214.32 L1227.63 1214.32 L1227.04 1214.32 L1226.45 1214.32 L1225.87 1214.32 L1225.28 1214.32 L1224.7 1214.32 L1224.11 1214.32 L1223.52 1214.32 L1222.94 1214.32 L1222.35 1214.32 L1221.76 1214.32 L1221.18 1214.32 L1220.59 1214.32 L1220 1214.32 L1219.42 1214.32 L1218.83 1214.32 L1218.24 1214.32 L1217.66 1214.32 L1217.07 1214.32 L1216.49 1214.32 L1215.9 1214.32 L1215.31 1214.32 L1214.73 1214.32 L1214.14 1214.32 L1213.55 1214.32 L1212.97 1214.32 L1212.38 1214.32 L1211.79 1214.32 L1211.21 1214.32 L1210.62 1214.32 L1210.03 1214.32 L1209.45 1214.32 L1208.86 1214.32 L1208.28 1214.32 L1207.69 1214.32 L1207.1 1214.32 L1206.52 1214.32 L1205.93 1214.32 L1205.34 1214.32 L1204.76 1214.32 L1204.17 1214.32 L1203.58 1214.32 L1203 1214.32 L1202.41 1214.32 L1201.83 1214.32 L1201.24 1214.32 L1200.65 1214.32 L1200.07 1214.32 L1199.48 1214.32 L1198.89 1214.32 L1198.31 1214.32 L1197.72 1214.32 L1197.13 1214.32 L1196.55 1214.32 L1195.96 1214.32 L1195.37 1214.32 L1194.79 1214.32 L1194.2 1214.32 L1193.62 1214.32 L1193.03 1214.32 L1192.44 1214.32 L1191.86 1214.32 L1191.27 1214.32 L1190.68 1214.32 L1190.1 1214.32 L1189.51 1214.32 L1188.92 1214.32 L1188.34 1214.32 L1187.75 1214.32 L1187.16 1214.32 L1186.58 1214.32 L1185.99 1214.32 L1185.41 1214.32 L1184.82 1214.32 L1184.23 1214.32 L1183.65 1214.32 L1183.06 1214.32 L1182.47 1214.32 L1181.89 1214.32 L1181.3 1214.32 L1180.71 1214.32 L1180.13 1214.32 L1179.54 1214.32 L1178.96 1214.32 L1178.37 1214.32 L1177.78 1214.32 L1177.2 1214.32 L1176.61 1214.32 L1176.02 1214.32 L1175.44 1214.32 L1174.85 1214.32 L1174.26 1214.32 L1173.68 1214.32 L1173.09 1214.32 L1172.5 1214.32 L1171.92 1214.32 L1171.33 1214.32 L1170.75 1214.32 L1170.16 1214.32 L1169.57 1214.32 L1168.99 1214.32 L1168.4 1214.32 L1167.81 1214.32 L1167.23 1214.32 L1166.64 1214.32 L1166.05 1214.32 L1165.47 1214.32 L1164.88 1214.32 L1164.29 1214.32 L1163.71 1214.32 L1163.12 1214.32 L1162.54 1214.32 L1161.95 1214.32 L1161.36 1214.32 L1160.78 1214.32 L1160.19 1214.32 L1159.6 1214.32 L1159.02 1214.32 L1158.43 1214.32 L1157.84 1214.32 L1157.26 1214.32 L1156.67 1214.32 L1156.09 1214.32 L1155.5 1214.32 L1154.91 1214.32 L1154.33 1214.32 L1153.74 1214.32 L1153.15 1214.32 L1152.57 1214.32 L1151.98 1214.32 L1151.39 1214.32 L1150.81 1214.32 L1150.22 1214.32 L1149.63 1214.32 L1149.05 1214.32 L1148.46 1214.32 L1147.88 1214.32 L1147.29 1214.32 L1146.7 1214.32 L1146.12 1214.32 L1145.53 1214.32 L1144.94 1214.32 L1144.36 1214.32 L1143.77 1214.32 L1143.18 1214.32 L1142.6 1214.32 L1142.01 1214.32 L1141.42 1214.32 L1140.84 1214.32 L1140.25 1214.32 L1139.67 1214.32 L1139.08 1214.32 L1138.49 1214.32 L1137.91 1214.32 L1137.32 1214.32 L1136.73 1214.32 L1136.15 1214.32 L1135.56 1214.32 L1134.97 1214.32 L1134.39 1214.32 L1133.8 1214.32 L1133.21 1214.32 L1132.63 1214.32 L1132.04 1214.32 L1131.46 1214.32 L1130.87 1214.32 L1130.28 1214.32 L1129.7 1214.32 L1129.11 1214.32 L1128.52 1214.32 L1127.94 1214.32 L1127.35 1214.32 L1126.76 1214.32 L1126.18 1214.32 L1125.59 1214.32 L1125.01 1214.32 L1124.42 1214.32 L1123.83 1214.32 L1123.25 1214.32 L1122.66 1214.32 L1122.07 1214.32 L1121.49 1214.32 L1120.9 1214.32 L1120.31 1214.32 L1119.73 1214.32 L1119.14 1214.32 L1118.55 1214.32 L1117.97 1214.32 L1117.38 1214.32 L1116.8 1214.32 L1116.21 1214.32 L1115.62 1214.32 L1115.04 1214.32 L1114.45 1214.32 L1113.86 1214.32 L1113.28 1214.32 L1112.69 1214.32 L1112.1 1214.32 L1111.52 1214.32 L1110.93 1214.32 L1110.34 1214.32 L1109.76 1214.32 L1109.17 1214.32 L1108.59 1214.32 L1108 1214.32 L1107.41 1214.32 L1106.83 1214.32 L1106.24 1214.32 L1105.65 1214.32 L1105.07 1214.32 L1104.48 1214.32 L1103.89 1214.32 L1103.31 1214.32 L1102.72 1214.32 L1102.14 1214.32 L1101.55 1214.32 L1100.96 1214.32 L1100.38 1214.32 L1099.79 1214.32 L1099.2 1214.32 L1098.62 1214.32 L1098.03 1214.32 L1097.44 1214.32 L1096.86 1214.32 L1096.27 1214.32 L1095.68 1214.32 L1095.1 1214.32 L1094.51 1214.32 L1093.93 1214.32 L1093.34 1214.32 L1092.75 1214.32 L1092.17 1214.32 L1091.58 1214.32 L1090.99 1214.32 L1090.41 1214.32 L1089.82 1214.32 L1089.23 1214.32 L1088.65 1214.32 L1088.06 1214.32 L1087.47 1214.32 L1086.89 1214.32 L1086.3 1214.32 L1085.72 1214.32 L1085.13 1214.32 L1084.54 1214.32 L1083.96 1214.32 L1083.37 1214.32 L1082.78 1214.32 L1082.2 1214.32 L1081.61 1214.32 L1081.02 1214.32 L1080.44 1214.32 L1079.85 1214.32 L1079.26 1214.32 L1078.68 1214.32 L1078.09 1214.32 L1077.51 1214.32 L1076.92 1214.32 L1076.33 1214.32 L1075.75 1214.32 L1075.16 1214.32 L1074.57 1214.32 L1073.99 1214.32 L1073.4 1214.32 L1072.81 1214.32 L1072.23 1214.32 L1071.64 1214.32 L1071.06 1214.32 L1070.47 1214.32 L1069.88 1214.32 L1069.3 1214.32 L1068.71 1214.32 L1068.12 1214.32 L1067.54 1214.32 L1066.95 1214.32 L1066.36 1214.32 L1065.78 1214.32 L1065.19 1214.32 L1064.6 1214.32 L1064.02 1214.32 L1063.43 1214.32 L1062.85 1214.32 L1062.26 1214.32 L1061.67 1214.32 L1061.09 1214.32 L1060.5 1214.32 L1059.91 1214.32 L1059.33 1214.32 L1058.74 1214.32 L1058.15 1214.32 L1057.57 1214.32 L1056.98 1214.32 L1056.39 1214.32 L1055.81 1214.32 L1055.22 1214.32 L1054.64 1214.32 L1054.05 1214.32 L1053.46 1214.32 L1052.88 1214.32 L1052.29 1214.32 L1051.7 1214.32 L1051.12 1214.32 L1050.53 1214.32 L1049.94 1214.32 L1049.36 1214.32 L1048.77 1214.32 L1048.19 1214.32 L1047.6 1214.32 L1047.01 1214.32 L1046.43 1214.32 L1045.84 1214.32 L1045.25 1214.32 L1044.67 1214.32 L1044.08 1214.32 L1043.49 1214.32 L1042.91 1214.32 L1042.32 1214.32 L1041.73 1214.32 L1041.15 1214.32 L1040.56 1214.32 L1039.98 1214.32 L1039.39 1214.32 L1038.8 1214.32 L1038.22 1214.32 L1037.63 1214.32 L1037.04 1214.32 L1036.46 1214.32 L1035.87 1214.32 L1035.28 1214.32 L1034.7 1214.32 L1034.11 1214.32 L1033.52 1214.32 L1032.94 1214.32 L1032.35 1214.32 L1031.77 1214.32 L1031.18 1214.32 L1030.59 1214.32 L1030.01 1214.32 L1029.42 1214.32 L1028.83 1214.32 L1028.25 1214.32 L1027.66 1214.32 L1027.07 1214.32 L1026.49 1214.32 L1025.9 1214.32 L1025.32 1214.32 L1024.73 1214.32 L1024.14 1214.32 L1023.56 1214.32 L1022.97 1214.32 L1022.38 1214.32 L1021.8 1214.32 L1021.21 1214.32 L1020.62 1214.32 L1020.04 1214.32 L1019.45 1214.32 L1018.86 1214.32 L1018.28 1214.32 L1017.69 1214.32 L1017.11 1214.32 L1016.52 1214.32 L1015.93 1214.32 L1015.35 1214.32 L1014.76 1214.32 L1014.17 1214.32 L1013.59 1214.32 L1013 1214.32 L1012.41 1214.32 L1011.83 1214.32 L1011.24 1214.32 L1010.65 1214.32 L1010.07 1214.32 L1009.48 1214.32 L1008.9 1214.32 L1008.31 1214.32 L1007.72 1214.32 L1007.14 1214.32 L1006.55 1214.32 L1005.96 1214.32 L1005.38 1214.32 L1004.79 1214.32 L1004.2 1214.32 L1003.62 1214.32 L1003.03 1214.32 L1002.44 1214.32 L1001.86 1214.32 L1001.27 1214.32 L1000.69 1214.32 L1000.1 1214.32 L999.513 1214.32 L998.926 1214.32 L998.34 1214.32 L997.754 1214.32 L997.167 1214.32 L996.581 1214.32 L995.994 1214.32 L995.408 1214.32 L994.822 1214.32 L994.235 1214.32 L993.649 1214.32 L993.062 1214.32 L992.476 1214.32 L991.889 1214.32 L991.303 1214.32 L990.717 1214.32 L990.13 1214.32 L989.544 1214.32 L988.957 1214.32 L988.371 1214.32 L987.785 1214.32 L987.198 1214.32 L986.612 1214.32 L986.025 1214.32  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.39 986.612,1214.39 987.198,1214.39 987.785,1214.39 988.371,1214.39 988.957,1214.39 989.544,1214.39 990.13,1214.39 990.717,1214.39 991.303,1214.39 991.889,1214.39 992.476,1214.39 993.062,1214.39 993.649,1214.39 994.235,1214.39 994.822,1214.39 995.408,1214.39 995.994,1214.39 996.581,1214.39 997.167,1214.39 997.754,1214.39 998.34,1214.39 998.926,1214.39 999.513,1214.39 1000.1,1214.39 1000.69,1214.39 1001.27,1214.39 1001.86,1214.39 1002.44,1214.39 1003.03,1214.39 1003.62,1214.39 1004.2,1214.39 1004.79,1214.39 1005.38,1214.39 1005.96,1214.39 1006.55,1214.39 1007.14,1214.39 1007.72,1214.39 1008.31,1214.39 1008.9,1214.39 1009.48,1214.39 1010.07,1214.39 1010.65,1214.39 1011.24,1214.39 1011.83,1214.39 1012.41,1214.39 1013,1214.39 1013.59,1214.39 1014.17,1214.39 1014.76,1214.39 1015.35,1214.39 1015.93,1214.39 1016.52,1214.39 1017.11,1214.39 1017.69,1214.39 1018.28,1214.39 1018.86,1214.39 1019.45,1214.39 1020.04,1214.39 1020.62,1214.39 1021.21,1214.39 1021.8,1214.39 1022.38,1214.39 1022.97,1214.39 1023.56,1214.39 1024.14,1214.39 1024.73,1214.39 1025.32,1214.39 1025.9,1214.39 1026.49,1214.39 1027.07,1214.39 1027.66,1214.39 1028.25,1214.39 1028.83,1214.39 1029.42,1214.39 1030.01,1214.39 1030.59,1214.39 1031.18,1214.39 1031.77,1214.39 1032.35,1214.39 1032.94,1214.39 1033.52,1214.39 1034.11,1214.39 1034.7,1214.39 1035.28,1214.39 1035.87,1214.39 1036.46,1214.39 1037.04,1214.39 1037.63,1214.39 1038.22,1214.39 1038.8,1214.39 1039.39,1214.39 1039.98,1214.39 1040.56,1214.39 1041.15,1214.39 1041.73,1214.39 1042.32,1214.39 1042.91,1214.39 1043.49,1214.39 1044.08,1214.39 1044.67,1214.39 1045.25,1214.39 1045.84,1214.39 1046.43,1214.39 1047.01,1214.39 1047.6,1214.39 1048.19,1214.39 1048.77,1214.39 1049.36,1214.39 1049.94,1214.39 1050.53,1214.39 1051.12,1214.39 1051.7,1214.39 1052.29,1214.39 1052.88,1214.39 1053.46,1214.39 1054.05,1214.39 1054.64,1214.39 1055.22,1214.39 1055.81,1214.39 1056.39,1214.39 1056.98,1214.39 1057.57,1214.39 1058.15,1214.39 1058.74,1214.39 1059.33,1214.39 1059.91,1214.39 1060.5,1214.39 1061.09,1214.39 1061.67,1214.39 1062.26,1214.39 1062.85,1214.39 1063.43,1214.39 1064.02,1214.39 1064.6,1214.39 1065.19,1214.39 1065.78,1214.39 1066.36,1214.39 1066.95,1214.39 1067.54,1214.39 1068.12,1214.39 1068.71,1214.39 1069.3,1214.39 1069.88,1214.39 1070.47,1214.39 1071.06,1214.39 1071.64,1214.39 1072.23,1214.39 1072.81,1214.39 1073.4,1214.39 1073.99,1214.39 1074.57,1214.39 1075.16,1214.39 1075.75,1214.39 1076.33,1214.39 1076.92,1214.39 1077.51,1214.39 1078.09,1214.39 1078.68,1214.39 1079.26,1214.39 1079.85,1214.39 1080.44,1214.39 1081.02,1214.39 1081.61,1214.39 1082.2,1214.39 1082.78,1214.39 1083.37,1214.39 1083.96,1214.39 1084.54,1214.39 1085.13,1214.39 1085.72,1214.39 1086.3,1214.39 1086.89,1214.39 1087.47,1214.39 1088.06,1214.39 1088.65,1214.39 1089.23,1214.39 1089.82,1214.39 1090.41,1214.39 1090.99,1214.39 1091.58,1214.39 1092.17,1214.39 1092.75,1214.39 1093.34,1214.39 1093.93,1214.39 1094.51,1214.39 1095.1,1214.39 1095.68,1214.39 1096.27,1214.39 1096.86,1214.39 1097.44,1214.39 1098.03,1214.39 1098.62,1214.39 1099.2,1214.39 1099.79,1214.39 1100.38,1214.39 1100.96,1214.39 1101.55,1214.39 1102.14,1214.39 1102.72,1214.39 1103.31,1214.39 1103.89,1214.39 1104.48,1214.39 1105.07,1214.39 1105.65,1214.39 1106.24,1214.39 1106.83,1214.39 1107.41,1214.39 1108,1214.39 1108.59,1214.39 1109.17,1214.39 1109.76,1214.39 1110.34,1214.39 1110.93,1214.39 1111.52,1214.39 1112.1,1214.39 1112.69,1214.39 1113.28,1214.39 1113.86,1214.39 1114.45,1214.39 1115.04,1214.39 1115.62,1214.39 1116.21,1214.39 1116.8,1214.39 1117.38,1214.39 1117.97,1214.39 1118.55,1214.39 1119.14,1214.39 1119.73,1214.39 1120.31,1214.39 1120.9,1214.39 1121.49,1214.39 1122.07,1214.39 1122.66,1214.39 1123.25,1214.39 1123.83,1214.39 1124.42,1214.39 1125.01,1214.39 1125.59,1214.39 1126.18,1214.39 1126.76,1214.39 1127.35,1214.39 1127.94,1214.39 1128.52,1214.39 1129.11,1214.39 1129.7,1214.39 1130.28,1214.39 1130.87,1214.39 1131.46,1214.39 1132.04,1214.39 1132.63,1214.39 1133.21,1214.39 1133.8,1214.39 1134.39,1214.39 1134.97,1214.39 1135.56,1214.39 1136.15,1214.39 1136.73,1214.39 1137.32,1214.39 1137.91,1214.39 1138.49,1214.39 1139.08,1214.39 1139.67,1214.39 1140.25,1214.39 1140.84,1214.39 1141.42,1214.39 1142.01,1214.39 1142.6,1214.39 1143.18,1214.39 1143.77,1214.39 1144.36,1214.39 1144.94,1214.39 1145.53,1214.39 1146.12,1214.39 1146.7,1214.39 1147.29,1214.39 1147.88,1214.39 1148.46,1214.39 1149.05,1214.39 1149.63,1214.39 1150.22,1214.39 1150.81,1214.39 1151.39,1214.39 1151.98,1214.39 1152.57,1214.39 1153.15,1214.39 1153.74,1214.39 1154.33,1214.39 1154.91,1214.39 1155.5,1214.39 1156.09,1214.39 1156.67,1214.39 1157.26,1214.39 1157.84,1214.39 1158.43,1214.39 1159.02,1214.39 1159.6,1214.39 1160.19,1214.39 1160.78,1214.39 1161.36,1214.39 1161.95,1214.39 1162.54,1214.39 1163.12,1214.39 1163.71,1214.39 1164.29,1214.39 1164.88,1214.39 1165.47,1214.39 1166.05,1214.39 1166.64,1214.39 1167.23,1214.39 1167.81,1214.39 1168.4,1214.39 1168.99,1214.39 1169.57,1214.39 1170.16,1214.39 1170.75,1214.39 1171.33,1214.39 1171.92,1214.39 1172.5,1214.39 1173.09,1214.39 1173.68,1214.39 1174.26,1214.39 1174.85,1214.39 1175.44,1214.39 1176.02,1214.39 1176.61,1214.39 1177.2,1214.39 1177.78,1214.39 1178.37,1214.39 1178.96,1214.39 1179.54,1214.39 1180.13,1214.39 1180.71,1214.39 1181.3,1214.39 1181.89,1214.39 1182.47,1214.39 1183.06,1214.39 1183.65,1214.39 1184.23,1214.39 1184.82,1214.39 1185.41,1214.39 1185.99,1214.39 1186.58,1214.39 1187.16,1214.39 1187.75,1214.39 1188.34,1214.39 1188.92,1214.39 1189.51,1214.39 1190.1,1214.39 1190.68,1214.39 1191.27,1214.39 1191.86,1214.39 1192.44,1214.39 1193.03,1214.39 1193.62,1214.39 1194.2,1214.39 1194.79,1214.39 1195.37,1214.39 1195.96,1214.39 1196.55,1214.39 1197.13,1214.39 1197.72,1214.39 1198.31,1214.39 1198.89,1214.39 1199.48,1214.39 1200.07,1214.39 1200.65,1214.39 1201.24,1214.39 1201.83,1214.39 1202.41,1214.39 1203,1214.39 1203.58,1214.39 1204.17,1214.39 1204.76,1214.39 1205.34,1214.39 1205.93,1214.39 1206.52,1214.39 1207.1,1214.39 1207.69,1214.39 1208.28,1214.39 1208.86,1214.39 1209.45,1214.39 1210.03,1214.39 1210.62,1214.39 1211.21,1214.39 1211.79,1214.39 1212.38,1214.39 1212.97,1214.39 1213.55,1214.39 1214.14,1214.39 1214.73,1214.39 1215.31,1214.39 1215.9,1214.39 1216.49,1214.39 1217.07,1214.39 1217.66,1214.39 1218.24,1214.39 1218.83,1214.39 1219.42,1214.39 1220,1214.39 1220.59,1214.39 1221.18,1214.39 1221.76,1214.39 1222.35,1214.39 1222.94,1214.39 1223.52,1214.39 1224.11,1214.39 1224.7,1214.39 1225.28,1214.39 1225.87,1214.39 1226.45,1214.39 1227.04,1214.39 1227.63,1214.39 1228.21,1214.39 1228.8,1214.39 1229.39,1214.39 1229.97,1214.39 1230.56,1214.39 1231.15,1214.39 1231.73,1214.39 1232.32,1214.39 1232.91,1214.39 1233.49,1214.39 1234.08,1214.39 1234.66,1214.39 1235.25,1214.39 1235.84,1214.39 1236.42,1214.39 1237.01,1214.39 1237.6,1214.39 1238.18,1214.39 1238.77,1214.39 1239.36,1214.39 1239.94,1214.39 1240.53,1214.39 1241.11,1214.39 1241.7,1214.39 1242.29,1214.39 1242.87,1214.39 1243.46,1214.39 1244.05,1214.39 1244.63,1214.39 1245.22,1214.39 1245.81,1214.39 1246.39,1214.39 1246.98,1214.39 1247.57,1214.39 1248.15,1214.39 1248.74,1214.39 1249.32,1214.39 1249.91,1214.39 1250.5,1214.39 1251.08,1214.39 1251.67,1214.39 1252.26,1214.39 1252.84,1214.39 1253.43,1214.39 1254.02,1214.39 1254.6,1214.39 1255.19,1214.39 1255.78,1214.39 1256.36,1214.39 1256.95,1214.39 1257.53,1214.39 1258.12,1214.39 1258.71,1214.39 1259.29,1214.39 1259.88,1214.39 1260.47,1214.39 1261.05,1214.39 1261.64,1214.39 1262.23,1214.39 1262.81,1214.39 1263.4,1214.39 1263.98,1214.39 1264.57,1214.39 1265.16,1214.39 1265.74,1214.39 1266.33,1214.39 1266.92,1214.39 1267.5,1214.39 1268.09,1214.39 1268.68,1214.39 1269.26,1214.39 1269.85,1214.39 1270.44,1214.39 1271.02,1214.39 1271.61,1214.39 1272.19,1214.39 1272.78,1214.39 1273.37,1214.39 1273.95,1214.39 1274.54,1214.39 1275.13,1214.39 1275.71,1214.39 1276.3,1214.39 1276.89,1214.39 1277.47,1214.39 1278.06,1214.39 1278.65,1214.39 1279.23,1214.39 1279.82,1214.39 1280.4,1214.39 1280.99,1214.39 1281.58,1214.39 1282.16,1214.39 1282.75,1214.39 1283.34,1214.39 1283.92,1214.39 1284.51,1214.39 1285.1,1214.39 1285.68,1214.39 1286.27,1214.39 1286.86,1214.39 1287.44,1214.39 1288.03,1214.39 1288.61,1214.39 1289.2,1214.39 1289.79,1214.39 1290.37,1214.39 1290.96,1214.39 1291.55,1214.39 1292.13,1214.39 1292.72,1214.39 1293.31,1214.39 1293.89,1214.39 1294.48,1214.39 1295.06,1214.39 1295.65,1214.39 1296.24,1214.39 1296.82,1214.39 1297.41,1214.39 1298,1214.39 1298.58,1214.39 1299.17,1214.39 1299.76,1214.39 1300.34,1214.39 1300.93,1214.39 1301.52,1214.39 1302.1,1214.39 1302.69,1214.39 1303.27,1214.39 1303.86,1214.39 1304.45,1214.39 1305.03,1214.39 1305.62,1214.39 1306.21,1214.39 1306.79,1214.39 1307.38,1214.39 1307.97,1214.39 1308.55,1214.39 1309.14,1214.39 1309.73,1214.39 1310.31,1214.39 1310.9,1214.39 1311.48,1214.39 1312.07,1214.39 1312.66,1214.39 1313.24,1214.39 1313.83,1214.39 1314.42,1214.39 1315,1214.39 1315.59,1214.39 1316.18,1214.39 1316.76,1214.39 1317.35,1214.39 1317.93,1214.39 1318.52,1214.39 1319.11,1214.39 1319.69,1214.39 1320.28,1214.39 1320.87,1214.39 1321.45,1214.39 1322.04,1214.39 1322.63,1214.39 1323.21,1214.39 1323.8,1214.39 1324.39,1214.39 1324.97,1214.39 1325.56,1214.39 1326.14,1214.39 1326.73,1214.39 1327.32,1214.39 1327.9,1214.39 1328.49,1214.39 1329.08,1214.39 1329.66,1214.39 1330.25,1214.39 1330.84,1214.39 1331.42,1214.39 1332.01,1214.39 1332.6,1214.39 1333.18,1214.39 1333.77,1214.39 1334.35,1214.39 1334.94,1214.39 1335.53,1214.39 1336.11,1214.39 1336.7,1214.39 1337.29,1214.39 1337.87,1214.39 1338.46,1214.39 1339.05,1214.39 1339.63,1214.39 1340.22,1214.39 1340.8,1214.39 1341.39,1214.39 1341.98,1214.39 1342.56,1214.39 1343.15,1214.39 1343.74,1214.39 1344.32,1214.39 1344.91,1214.39 1345.5,1214.39 1346.08,1214.39 1346.67,1214.39 1347.26,1214.39 1347.84,1214.39 1348.43,1214.39 1349.01,1214.39 1349.6,1214.39 1350.19,1214.39 1350.77,1214.39 1351.36,1214.39 1351.95,1214.39 1352.53,1214.39 1353.12,1214.39 1353.71,1214.39 1354.29,1214.39 1354.88,1214.39 1355.47,1214.39 1356.05,1214.39 1356.64,1214.39 1357.22,1214.39 1357.81,1214.39 1358.4,1214.39 1358.98,1214.39 1359.57,1214.39 1360.16,1214.39 1360.74,1214.39 1361.33,1214.39 1361.92,1214.39 1362.5,1214.39 1363.09,1214.39 1363.68,1214.39 1364.26,1214.39 1364.85,1214.39 1365.43,1214.39 1366.02,1214.39 1366.61,1214.39 1367.19,1214.39 1367.78,1214.39 1368.37,1214.39 1368.95,1214.39 1369.54,1214.39 1370.13,1214.39 1370.71,1214.39 1371.3,1214.39 1371.88,1214.39 1372.47,1214.39 1373.06,1214.39 1373.64,1214.39 1374.23,1214.39 1374.82,1214.39 1375.4,1214.39 1375.99,1214.39 1376.58,1214.39 1377.16,1214.39 1377.75,1214.39 1378.34,1214.39 1378.92,1214.39 1379.51,1214.39 1380.09,1214.39 1380.68,1214.39 1381.27,1214.39 1381.85,1214.39 1382.44,1214.39 1383.03,1214.39 1383.61,1214.39 1384.2,1214.39 1384.79,1214.39 1385.37,1214.39 1385.96,1214.39 1386.55,1214.39 1387.13,1214.39 1387.72,1214.39 1388.3,1214.39 1388.89,1214.39 1389.48,1214.39 1390.06,1214.39 1390.65,1214.39 1391.24,1214.39 1391.82,1214.39 1392.41,1214.39 1393,1214.39 1393.58,1214.39 1394.17,1214.39 1394.75,1214.39 1395.34,1214.39 1395.93,1214.39 1396.51,1214.39 1397.1,1214.39 1397.69,1214.39 1398.27,1214.39 1398.86,1214.39 1399.45,1214.39 1400.03,1214.39 1400.62,1214.39 1401.21,1214.39 1401.79,1214.39 1402.38,1214.39 1402.96,1214.39 1403.55,1214.39 1404.14,1214.39 1404.72,1214.39 1405.31,1214.39 1405.9,1214.39 1406.48,1214.39 1407.07,1214.39 1407.66,1214.39 1408.24,1214.39 1408.83,1214.39 1409.42,1214.39 1410,1214.39 1410.59,1214.39 1411.17,1214.39 1411.76,1214.39 1412.35,1214.39 1412.93,1214.39 1413.52,1214.39 1414.11,1214.39 1414.69,1214.39 1415.28,1214.39 1415.87,1214.39 1416.45,1214.39 1417.04,1214.39 1417.63,1214.39 1418.21,1214.39 1418.8,1214.39 1419.38,1214.39 1419.97,1214.39 1420.56,1214.39 1421.14,1214.39 1421.73,1214.39 1422.32,1214.39 1422.9,1214.39 1423.49,1214.39 1424.08,1214.39 1424.66,1214.39 1425.25,1214.39 1425.83,1214.39 1426.42,1214.39 1427.01,1214.39 1427.59,1214.39 1428.18,1214.39 1428.77,1214.39 1429.35,1214.39 1429.94,1214.39 1430.53,1214.39 1431.11,1214.39 1431.7,1214.39 1432.29,1214.39 1432.87,1214.39 1433.46,1214.39 1434.04,1214.39 1434.63,1214.39 1435.22,1214.39 1435.8,1214.39 1436.39,1214.39 1436.98,1214.39 1437.56,1214.39 1438.15,1214.39 1438.74,1214.39 1439.32,1214.39 1439.91,1214.39 1440.5,1214.39 1441.08,1214.39 1441.67,1214.39 1442.25,1214.39 1442.84,1214.39 1443.43,1214.39 1444.01,1214.39 1444.6,1214.39 1445.19,1214.39 1445.77,1214.39 1446.36,1214.39 1446.95,1214.39 1447.53,1214.39 1448.12,1214.39 1448.7,1214.39 1449.29,1214.39 1449.88,1214.39 1450.46,1214.39 1451.05,1214.39 1451.64,1214.39 1452.22,1214.39 1452.81,1214.39 1453.4,1214.39 1453.98,1214.39 1454.57,1214.39 1455.16,1214.39 1455.74,1214.39 1456.33,1214.39 1456.91,1214.39 1457.5,1214.39 1458.09,1214.39 1458.67,1214.39 1459.26,1214.39 1459.85,1214.39 1460.43,1214.39 1461.02,1214.39 1461.61,1214.39 1462.19,1214.39 1462.78,1214.39 1463.37,1214.39 1463.95,1214.39 1464.54,1214.39 1465.12,1214.39 1465.71,1214.39 1466.3,1214.39 1466.88,1214.39 1467.47,1214.39 1468.06,1214.39 1468.64,1214.39 1469.23,1214.39 1469.82,1214.39 1470.4,1214.39 1470.99,1214.39 1471.57,1214.39 1472.16,1214.39 1472.75,1214.39 1473.33,1214.39 1473.92,1214.39 1474.51,1214.39 1475.09,1214.39 1475.68,1214.39 1476.27,1214.39 1476.85,1214.39 1477.44,1214.39 1478.03,1214.39 1478.61,1214.39 1479.2,1214.39 1479.78,1214.39 1480.37,1214.39 1480.96,1214.39 1481.54,1214.39 1482.13,1214.39 1482.72,1214.39 1483.3,1214.39 1483.89,1214.39 1484.48,1214.39 1485.06,1214.39 1485.65,1214.39 1486.24,1214.39 1486.82,1214.39 1487.41,1214.39 1487.99,1214.39 1488.58,1214.39 1489.17,1214.39 1489.75,1214.39 1490.34,1214.39 1490.93,1214.39 1491.51,1214.39 1492.1,1214.39 1492.69,1214.39 1493.27,1214.39 1493.86,1214.39 1494.45,1214.39 1495.03,1214.39 1495.62,1214.39 1496.2,1214.39 1496.79,1214.39 1497.38,1214.39 1497.96,1214.39 1498.55,1214.39 1499.14,1214.39 1499.72,1214.39 1500.31,1214.39 1500.9,1214.39 1501.48,1214.39 1502.07,1214.39 1502.65,1214.39 1503.24,1214.39 1503.83,1214.39 1504.41,1214.39 1505,1214.39 1505.59,1214.39 1506.17,1214.39 1506.76,1214.39 1507.35,1214.39 1507.93,1214.39 1508.52,1214.39 1509.11,1214.39 1509.69,1214.39 1510.28,1214.39 1510.86,1214.39 1511.45,1214.39 1512.04,1214.39 1512.62,1214.39 1513.21,1214.39 1513.8,1214.39 1514.38,1214.39 1514.97,1214.39 1515.56,1214.39 1516.14,1214.39 1516.73,1214.39 1517.32,1214.39 1517.9,1214.39 1518.49,1214.39 1519.07,1214.39 1519.66,1214.39 1520.25,1214.39 1520.83,1214.39 1521.42,1214.39 1522.01,1214.39 1522.59,1214.39 1523.18,1214.39 1523.77,1214.39 1524.35,1214.39 1524.94,1214.39 1525.52,1214.39 1526.11,1214.39 1526.7,1214.39 1527.28,1214.39 1527.87,1214.39 1528.46,1214.39 1529.04,1214.39 1529.63,1214.39 1530.22,1214.39 1530.8,1214.39 1531.39,1214.39 1531.98,1214.39 1532.56,1214.39 1533.15,1214.39 1533.73,1214.39 1534.32,1214.39 1534.91,1214.39 1535.49,1214.39 1536.08,1214.39 1536.67,1214.39 1537.25,1214.39 1537.84,1214.39 1538.43,1214.39 1539.01,1214.39 1539.6,1214.39 1540.19,1214.39 1540.77,1214.39 1541.36,1214.39 1541.94,1214.39 1542.53,1214.39 1543.12,1214.39 1543.7,1214.39 1544.29,1214.39 1544.88,1214.39 1545.46,1214.39 1546.05,1214.39 1546.64,1214.39 1547.22,1214.39 1547.81,1214.39 1548.4,1214.39 1548.98,1214.39 1549.57,1214.39 1550.15,1214.39 1550.74,1214.39 1551.33,1214.39 1551.91,1214.39 1552.5,1214.39 1553.09,1214.39 1553.67,1214.39 1554.26,1214.39 1554.85,1214.39 1555.43,1214.39 1556.02,1214.39 1556.6,1214.39 1557.19,1214.39 1557.78,1214.39 1558.36,1214.39 1558.95,1214.39 1559.54,1214.39 1560.12,1214.39 1560.71,1214.39 1561.3,1214.39 1561.88,1214.39 1562.47,1214.39 1563.06,1214.39 1563.64,1214.39 1564.23,1214.39 1564.81,1214.39 1565.4,1214.39 1565.99,1214.39 1566.57,1214.39 1567.16,1214.39 1567.75,1214.39 1568.33,1214.39 1568.92,1214.39 1569.51,1214.39 1570.09,1214.39 1570.68,1214.39 1571.27,1214.39 1571.85,1214.39 1572.44,1214.39 1573.02,1214.39 1573.61,1214.39 1574.2,1214.39 1574.78,1214.39 1575.37,1214.39 1575.96,1214.39 1576.54,1214.39 1577.13,1214.39 1577.72,1214.39 1578.3,1214.39 1578.89,1214.39 1579.47,1214.39 1580.06,1214.39 1580.65,1214.39 1581.23,1214.39 1581.82,1214.39 1582.41,1214.39 1582.99,1214.39 1583.58,1214.39 1584.17,1214.39 1584.75,1214.39 1585.34,1214.39 1585.93,1214.39 1586.51,1214.39 1587.1,1214.39 1587.68,1214.39 1588.27,1214.39 1588.86,1214.39 1589.44,1214.39 1590.03,1214.39 1590.62,1214.39 1591.2,1214.39 1591.79,1214.39 1592.38,1214.39 1592.96,1214.39 1593.55,1214.39 1594.14,1214.39 1594.72,1214.39 1595.31,1214.39 1595.89,1214.39 1596.48,1214.39 1597.07,1214.39 1597.65,1214.39 1598.24,1214.39 1598.83,1214.39 1599.41,1214.39 1600,1214.39 1600.59,1214.39 1601.17,1214.39 1601.76,1214.39 1602.34,1214.39 1602.93,1214.39 1603.52,1214.39 1604.1,1214.39 1604.69,1214.39 1605.28,1214.39 1605.86,1214.39 1606.45,1214.39 1607.04,1214.39 1607.62,1214.39 1608.21,1214.39 1608.8,1214.39 1609.38,1214.39 1609.97,1214.39 1610.55,1214.39 1611.14,1214.39 1611.73,1214.39 1612.31,1214.39 1612.9,1214.39 1613.49,1214.39 1614.07,1214.39 1614.66,1214.39 1615.25,1214.39 1615.83,1214.39 1616.42,1214.39 1617.01,1214.39 1617.59,1214.39 1618.18,1214.39 1618.76,1214.39 1619.35,1214.39 1619.94,1214.39 1620.52,1214.39 1621.11,1214.39 1621.7,1214.39 1622.28,1214.39 1622.87,1214.39 1623.46,1214.39 1624.04,1214.39 1624.63,1214.39 1625.22,1214.39 1625.8,1214.39 1626.39,1214.39 1626.97,1214.39 1627.56,1214.39 1628.15,1214.39 1628.73,1214.39 1629.32,1214.39 1629.91,1214.39 1630.49,1214.39 1631.08,1214.39 1631.67,1214.39 1632.25,1214.39 1632.84,1214.39 1633.42,1214.39 1634.01,1214.39 1634.6,1214.39 1635.18,1214.39 1635.77,1214.39 1636.36,1214.39 1636.94,1214.39 1637.53,1214.39 1638.12,1214.39 1638.7,1214.39 1639.29,1214.39 1639.88,1214.39 1640.46,1214.39 1641.05,1214.39 1641.63,1214.39 1642.22,1214.39 1642.81,1214.39 1643.39,1214.39 1643.98,1214.39 1644.57,1214.39 1645.15,1214.39 1645.74,1214.39 1646.33,1214.39 1646.91,1214.39 1647.5,1214.39 1648.09,1214.39 1648.67,1214.39 1649.26,1214.39 1649.84,1214.39 1650.43,1214.39 1651.02,1214.39 1651.6,1214.39 1652.19,1214.39 1652.78,1214.39 1653.36,1214.39 1653.95,1214.39 1654.54,1214.39 1655.12,1214.39 1655.71,1214.39 1656.29,1214.39 1656.88,1214.39 1657.47,1214.39 1658.05,1214.39 1658.64,1214.39 1659.23,1214.39 1659.81,1214.39 1660.4,1214.39 1660.99,1214.39 1661.57,1214.39 1662.16,1214.39 1662.75,1214.39 1663.33,1214.39 1663.92,1214.39 1664.5,1214.39 1665.09,1214.39 1665.68,1214.39 1666.26,1214.39 1666.85,1214.39 1667.44,1214.39 1668.02,1214.39 1668.61,1214.39 1669.2,1214.39 1669.78,1214.39 1670.37,1214.39 1670.96,1214.39 1671.54,1214.39 1672.13,1214.39 1672.71,1214.39 1673.3,1214.39 1673.89,1214.39 1674.47,1214.39 1675.06,1214.39 1675.65,1214.39 1676.23,1214.39 1676.82,1214.39 1677.41,1214.39 1677.99,1214.39 1678.58,1214.39 1679.17,1214.39 1679.75,1214.39 1680.34,1214.39 1680.92,1214.39 1681.51,1214.39 1682.1,1214.39 1682.68,1214.39 1683.27,1214.39 1683.86,1214.39 1684.44,1214.39 1685.03,1214.39 1685.62,1214.39 1686.2,1214.39 1686.79,1214.39 1687.37,1214.39 1687.96,1214.39 1688.55,1214.39 1689.13,1214.39 1689.72,1214.39 1690.31,1214.39 1690.89,1214.39 1691.48,1214.39 1692.07,1214.39 1692.65,1214.39 1693.24,1214.39 1693.83,1214.39 1694.41,1214.39 1695,1214.39 1695.58,1214.39 1696.17,1214.39 1696.76,1214.39 1697.34,1214.39 1697.93,1214.39 1698.52,1214.39 1699.1,1214.39 1699.69,1214.39 1700.28,1214.39 1700.86,1214.39 1701.45,1214.39 1702.04,1214.39 1702.62,1214.39 1703.21,1214.39 1703.79,1214.39 1704.38,1214.39 1704.97,1214.39 1705.55,1214.39 1706.14,1214.39 1706.73,1214.39 1707.31,1214.39 1707.9,1214.39 1708.49,1214.39 1709.07,1214.39 1709.66,1214.39 1710.24,1214.39 1710.83,1214.39 1711.42,1214.39 1712,1214.39 1712.59,1214.39 1713.18,1214.39 1713.76,1214.39 1714.35,1214.39 1714.94,1214.39 1715.52,1214.39 1716.11,1214.39 1716.7,1214.39 1717.28,1214.39 1717.87,1214.39 1718.45,1214.39 1719.04,1214.39 1719.63,1214.39 1720.21,1214.39 1720.8,1214.39 1721.39,1214.39 1721.97,1214.39 1722.56,1214.39 1723.15,1214.39 1723.73,1214.39 1724.32,1214.39 1724.91,1214.39 1725.49,1214.39 1726.08,1214.39 1726.66,1214.39 1727.25,1214.39 1727.84,1214.39 1728.42,1214.39 1729.01,1214.39 1729.6,1214.39 1730.18,1214.39 1730.77,1214.39 1731.36,1214.39 1731.94,1214.39 1732.53,1214.39 1733.11,1214.39 1733.7,1214.39 1734.29,1214.39 1734.87,1214.39 1735.46,1214.39 1736.05,1214.39 1736.63,1214.39 1737.22,1214.39 1737.81,1214.39 1738.39,1214.39 1738.98,1214.39 1739.57,1214.39 1740.15,1214.39 1740.74,1214.39 1741.32,1214.39 1741.91,1214.39 1742.5,1214.39 1743.08,1214.39 1743.67,1214.39 1744.26,1214.39 1744.84,1214.39 1745.43,1214.39 1746.02,1214.39 1746.6,1214.39 1747.19,1214.39 1747.78,1214.39 1748.36,1214.39 1748.95,1214.39 1749.53,1214.39 1750.12,1214.39 1750.71,1214.39 1751.29,1214.39 1751.88,1214.39 1752.47,1214.39 1753.05,1214.39 1753.64,1214.39 1754.23,1214.39 1754.81,1214.39 1755.4,1214.39 1755.99,1214.39 1756.57,1214.39 1757.16,1214.39 1757.74,1214.39 1758.33,1214.39 1758.92,1214.39 1759.5,1214.39 1760.09,1214.39 1760.68,1214.39 1761.26,1214.39 1761.85,1214.39 1762.44,1214.39 1763.02,1214.39 1763.61,1214.39 1764.19,1214.39 1764.78,1214.39 1765.37,1214.39 1765.95,1214.39 1766.54,1214.39 1767.13,1214.39 1767.71,1214.39 1768.3,1214.39 1768.89,1214.39 1769.47,1214.39 1770.06,1214.39 1770.65,1214.39 1771.23,1214.39 1771.82,1214.39 1772.4,1214.39 1772.99,1214.39 1773.58,1214.39 1774.16,1214.39 1774.75,1214.39 1775.34,1214.39 1775.92,1214.39 1776.51,1214.39 1777.1,1214.39 1777.68,1214.39 1778.27,1214.39 1778.86,1214.39 1779.44,1214.39 1780.03,1214.39 1780.61,1214.39 1781.2,1214.39 1781.79,1214.39 1782.37,1214.39 1782.96,1214.39 1783.55,1214.39 1784.13,1214.39 1784.72,1214.39 1785.31,1214.39 1785.89,1214.39 1786.48,1214.39 1787.06,1214.39 1787.65,1214.39 1788.24,1214.39 1788.82,1214.39 1789.41,1214.39 1790,1214.39 1790.58,1214.39 1791.17,1214.39 1791.76,1214.39 1792.34,1214.39 1792.93,1214.39 1793.52,1214.39 1794.1,1214.39 1794.69,1214.39 1795.27,1214.39 1795.86,1214.39 1796.45,1214.39 1797.03,1214.39 1797.62,1214.39 1798.21,1214.39 1798.79,1214.39 1799.38,1214.39 1799.97,1214.39 1800.55,1214.39 1801.14,1214.39 1801.73,1214.39 1802.31,1214.39 1802.9,1214.39 1803.48,1214.39 1804.07,1214.39 1804.66,1214.39 1805.24,1214.39 1805.83,1214.39 1806.42,1214.39 1807,1214.39 1807.59,1214.39 1808.18,1214.39 1808.76,1214.39 1809.35,1214.39 1809.94,1214.39 1810.52,1214.39 1811.11,1214.39 1811.69,1214.39 1812.28,1214.39 1812.87,1214.39 1813.45,1214.39 1814.04,1214.39 1814.63,1214.39 1815.21,1214.39 1815.8,1214.39 1816.39,1214.39 1816.97,1214.39 1817.56,1214.39 1818.14,1214.39 1818.73,1214.39 1819.32,1214.39 1819.9,1214.39 1820.49,1214.39 1821.08,1214.39 1821.66,1214.39 1822.25,1214.39 1822.84,1214.39 1823.42,1214.39 1824.01,1214.39 1824.6,1214.39 1825.18,1214.39 1825.77,1214.39 1826.35,1214.39 1826.94,1214.39 1827.53,1214.39 1828.11,1214.39 1828.7,1214.39 1829.29,1214.39 1829.87,1214.39 1830.46,1214.39 1831.05,1214.39 1831.63,1214.39 1832.22,1214.39 1832.81,1214.39 1833.39,1214.39 1833.98,1214.39 1834.56,1214.39 1835.15,1214.39 1835.74,1214.39 1836.32,1214.39 1836.91,1214.39 1837.5,1214.39 1838.08,1214.39 1838.67,1214.39 1839.26,1214.39 1839.84,1214.39 1840.43,1214.39 1841.01,1214.39 1841.6,1214.39 1842.19,1214.39 1842.77,1214.39 1843.36,1214.39 1843.95,1214.39 1844.53,1214.39 1845.12,1214.39 1845.71,1214.39 1846.29,1214.39 1846.88,1214.39 1847.47,1214.39 1848.05,1214.39 1848.64,1214.39 1849.22,1214.39 1849.81,1214.39 1850.4,1214.39 1850.98,1214.39 1851.57,1214.39 1852.16,1214.39 1852.74,1214.39 1853.33,1214.39 1853.92,1214.39 1854.5,1214.39 1855.09,1214.39 1855.68,1214.39 1856.26,1214.39 1856.85,1214.39 1857.43,1214.39 1858.02,1214.39 1858.61,1214.39 1859.19,1214.39 1859.78,1214.39 1860.37,1214.39 1860.95,1214.39 1861.54,1214.39 1862.13,1214.39 1862.71,1214.39 1863.3,1214.39 1863.88,1214.39 1864.47,1214.39 1865.06,1214.39 1865.64,1214.39 1866.23,1214.39 1866.82,1214.39 1867.4,1214.39 1867.99,1214.39 1868.58,1214.39 1869.16,1214.39 1869.75,1214.39 1870.34,1214.39 1870.92,1214.39 1871.51,1214.39 1872.09,1214.39 1872.68,1214.39 1873.27,1214.39 1873.85,1214.39 1874.44,1214.39 1875.03,1214.39 1875.61,1214.39 1876.2,1214.39 1876.79,1214.39 1877.37,1214.39 1877.96,1214.39 1878.55,1214.39 1879.13,1214.39 1879.72,1214.39 1880.3,1214.39 1880.89,1214.39 1881.48,1214.39 1882.06,1214.39 1882.65,1214.39 1883.24,1214.39 1883.82,1214.39 1884.41,1214.39 1885,1214.39 1885.58,1214.39 1886.17,1214.39 1886.76,1214.39 1887.34,1214.39 1887.93,1214.39 1888.51,1214.39 1889.1,1214.39 1889.69,1214.39 1890.27,1214.39 1890.86,1214.39 1891.45,1214.39 1892.03,1214.39 1892.62,1214.39 1893.21,1214.39 1893.79,1214.39 1894.38,1214.39 1894.96,1214.39 1895.55,1214.39 1896.14,1214.39 1896.72,1214.39 1897.31,1214.39 1897.9,1214.39 1898.48,1214.39 1899.07,1214.39 1899.66,1214.39 1900.24,1214.39 1900.83,1214.39 1901.42,1214.39 1902,1214.39 1902.59,1214.39 1903.17,1214.39 1903.76,1214.39 1904.35,1214.39 1904.93,1214.39 1905.52,1214.39 1906.11,1214.39 1906.69,1214.39 1907.28,1214.39 1907.87,1214.39 1908.45,1214.39 1909.04,1214.39 1909.63,1214.39 1910.21,1214.39 1910.8,1214.39 1911.38,1214.39 1911.97,1214.39 1912.56,1214.39 1913.14,1214.39 1913.73,1214.39 1914.32,1214.39 1914.9,1214.39 1915.49,1214.39 1916.08,1214.39 1916.66,1214.39 1917.25,1214.39 1917.83,1214.39 1918.42,1214.39 1919.01,1214.39 1919.59,1214.39 1920.18,1214.39 1920.77,1214.39 1921.35,1214.39 1921.94,1214.39 1922.53,1214.39 1923.11,1214.39 1923.7,1214.39 1924.29,1214.39 1924.87,1214.39 1925.46,1214.39 1926.04,1214.39 1926.63,1214.39 1927.22,1214.39 1927.8,1214.39 1928.39,1214.39 1928.98,1214.39 1929.56,1214.39 1930.15,1214.39 1930.74,1214.39 1931.32,1214.39 1931.91,1214.39 1932.5,1214.39 1933.08,1214.39 1933.67,1214.39 1934.25,1214.39 1934.84,1214.39 1935.43,1214.39 1936.01,1214.39 1936.6,1214.39 1937.19,1214.39 1937.77,1214.39 1938.36,1214.39 1938.95,1214.39 1939.53,1214.39 1940.12,1214.39 1940.71,1214.39 1941.29,1214.39 1941.88,1214.39 1942.46,1214.39 1943.05,1214.39 1943.64,1214.39 1944.22,1214.39 1944.81,1214.39 1945.4,1214.39 1945.98,1214.39 1946.57,1214.39 1947.16,1214.39 1947.74,1214.39 1948.33,1214.39 1948.91,1214.39 1949.5,1214.39 1950.09,1214.39 1950.67,1214.39 1951.26,1214.39 1951.85,1214.39 1952.43,1214.39 1953.02,1214.39 1953.61,1214.39 1954.19,1214.39 1954.78,1214.39 1955.37,1214.39 1955.95,1214.39 1956.54,1214.39 1957.12,1214.39 1957.71,1214.39 1958.3,1214.39 1958.88,1214.39 1959.47,1214.39 1960.06,1214.39 1960.64,1214.39 1961.23,1214.39 1961.82,1214.39 1962.4,1214.39 1962.99,1214.39 1963.58,1214.39 1964.16,1214.39 1964.75,1214.39 1965.33,1214.39 1965.92,1214.39 1966.51,1214.39 1967.09,1214.39 1967.68,1214.39 1968.27,1214.39 1968.85,1214.39 1969.44,1214.39 1970.03,1214.39 1970.61,1214.39 1971.2,1214.39 1971.78,1214.39 1972.37,1214.39 1972.96,1214.39 1973.54,1214.39 1974.13,1214.39 1974.72,1214.39 1975.3,1214.39 1975.89,1214.39 1976.48,1214.39 1977.06,1214.39 1977.65,1214.39 1978.24,1214.39 1978.82,1214.39 1979.41,1214.39 1979.99,1214.39 1980.58,1214.39 1981.17,1214.39 1981.75,1214.39 1982.34,1214.39 1982.93,1214.39 1983.51,1214.39 1984.1,1214.39 1984.69,1214.39 1985.27,1214.39 1985.86,1214.39 1986.45,1214.39 1987.03,1214.39 1987.62,1214.39 1988.2,1214.39 1988.79,1214.39 1989.38,1214.39 1989.96,1214.39 1990.55,1214.39 1991.14,1214.39 1991.72,1214.39 1992.31,1214.39 1992.9,1214.39 1993.48,1214.39 1994.07,1214.39 1994.65,1214.39 1995.24,1214.39 1995.83,1214.39 1996.41,1214.39 1997,1214.39 1997.59,1214.39 1998.17,1214.39 1998.76,1214.39 1999.35,1214.39 1999.93,1214.39 2000.52,1214.39 2001.11,1214.39 2001.69,1214.39 2002.28,1214.39 2002.86,1214.39 2003.45,1214.39 2004.04,1214.39 2004.62,1214.39 2005.21,1214.39 2005.8,1214.39 2006.38,1214.39 2006.97,1214.39 2007.56,1214.39 2008.14,1214.39 2008.73,1214.39 2009.32,1214.39 2009.9,1214.39 2010.49,1214.39 2011.07,1214.39 2011.66,1214.39 2012.25,1214.39 2012.83,1214.39 2013.42,1214.39 2014.01,1214.39 2014.59,1214.39 2015.18,1214.39 2015.77,1214.39 2016.35,1214.39 2016.94,1214.39 2017.53,1214.39 2018.11,1214.39 2018.7,1214.39 2019.28,1214.39 2019.87,1214.39 2020.46,1214.39 2021.04,1214.39 2021.63,1214.39 2022.22,1214.39 2022.8,1214.39 2023.39,1214.39 2023.98,1214.39 2024.56,1214.39 2025.15,1214.39 2025.73,1214.39 2026.32,1214.39 2026.91,1214.39 2027.49,1214.39 2028.08,1214.39 2028.67,1214.39 2029.25,1214.39 2029.84,1214.39 2030.43,1214.39 2031.01,1214.39 2031.6,1214.39 2032.19,1214.39 2032.77,1214.39 2033.36,1214.39 2033.94,1214.39 2034.53,1214.39 2035.12,1214.39 2035.7,1214.39 2036.29,1214.39 2036.88,1214.39 2037.46,1214.39 2038.05,1214.39 2038.64,1214.39 2039.22,1214.39 2039.81,1214.39 2040.4,1214.39 2040.98,1214.39 2041.57,1214.39 2042.15,1214.39 2042.74,1214.39 2043.33,1214.39 2043.91,1214.39 2044.5,1214.39 2045.09,1214.39 2045.67,1214.39 2046.26,1214.39 2046.85,1214.39 2047.43,1214.39 2048.02,1214.39 2048.6,1214.39 2049.19,1214.39 2049.78,1214.39 2050.36,1214.39 2050.95,1214.39 2051.54,1214.39 2052.12,1214.39 2052.71,1214.39 2053.3,1214.39 2053.88,1214.39 2054.47,1214.39 2055.06,1214.39 2055.64,1214.39 2056.23,1214.39 2056.81,1214.39 2057.4,1214.39 2057.99,1214.39 2058.57,1214.39 2059.16,1214.39 2059.75,1214.39 2060.33,1214.39 2060.92,1214.39 2061.51,1214.39 2062.09,1214.39 2062.68,1214.39 2063.27,1214.39 2063.85,1214.39 2064.44,1214.39 2065.02,1214.39 2065.61,1214.39 2066.2,1214.39 2066.78,1214.39 2067.37,1214.39 2067.96,1214.39 2068.54,1214.39 2069.13,1214.39 2069.72,1214.39 2070.3,1214.39 2070.89,1214.39 2071.48,1214.39 2072.06,1214.39 2072.65,1214.39 2073.23,1214.39 2073.82,1214.39 2074.41,1214.39 2074.99,1214.39 2075.58,1214.39 2076.17,1214.39 2076.75,1214.39 2077.34,1214.39 2077.93,1214.39 2078.51,1214.39 2079.1,1214.39 2079.68,1214.39 2080.27,1214.39 2080.86,1214.39 2081.44,1214.39 2082.03,1214.39 2082.62,1214.39 2083.2,1214.39 2083.79,1214.39 2084.38,1214.39 2084.96,1214.39 2085.55,1214.39 2086.14,1214.39 2086.72,1214.39 2087.31,1214.39 2087.89,1214.39 2088.48,1214.39 2089.07,1214.39 2089.65,1214.39 2090.24,1214.39 2090.83,1214.39 2091.41,1214.39 2092,1214.39 2092.59,1214.39 2093.17,1214.39 2093.76,1214.39 2094.35,1214.39 2094.93,1214.39 2095.52,1214.39 2096.1,1214.39 2096.69,1214.39 2097.28,1214.39 2097.86,1214.39 2098.45,1214.39 2099.04,1214.39 2099.62,1214.39 2100.21,1214.39 2100.8,1214.39 2101.38,1214.39 2101.97,1214.39 2102.55,1214.39 2103.14,1214.39 2103.73,1214.39 2104.31,1214.39 2104.9,1214.39 2105.49,1214.39 2106.07,1214.39 2106.66,1214.39 2107.25,1214.39 2107.83,1214.39 2108.42,1214.39 2109.01,1214.39 2109.59,1214.39 2110.18,1214.39 2110.76,1214.39 2111.35,1214.39 2111.94,1214.39 2112.52,1214.39 2113.11,1214.39 2113.7,1214.39 2114.28,1214.39 2114.87,1214.39 2115.46,1214.39 2116.04,1214.39 2116.63,1214.39 2117.22,1214.39 2117.8,1214.39 2118.39,1214.39 2118.97,1214.39 2119.56,1214.39 2120.15,1214.39 2120.73,1214.39 2121.32,1214.39 2121.91,1214.39 2122.49,1214.39 2123.08,1214.39 2123.67,1214.39 2124.25,1214.39 2124.84,1214.39 2125.42,1214.39 2126.01,1214.39 2126.6,1214.39 2127.18,1214.39 2127.77,1214.39 2128.36,1214.39 2128.94,1214.39 2129.53,1214.39 2130.12,1214.39 2130.7,1214.39 2131.29,1214.39 2131.88,1214.39 2132.46,1214.39 2133.05,1214.39 2133.63,1214.39 2134.22,1214.39 2134.81,1214.39 2135.39,1214.39 2135.98,1214.39 2136.57,1214.39 2137.15,1214.39 2137.74,1214.39 2138.33,1214.39 2138.91,1214.39 2139.5,1214.39 2140.09,1214.39 2140.67,1214.39 2141.26,1214.39 2141.84,1214.39 2142.43,1214.39 2143.02,1214.39 2143.6,1214.39 2144.19,1214.39 2144.78,1214.39 2145.36,1214.39 2145.95,1214.39 2146.54,1214.39 2147.12,1214.39 2147.71,1214.39 2148.3,1214.39 2148.88,1214.39 2149.47,1214.39 2150.05,1214.39 2150.64,1214.39 2151.23,1214.39 2151.81,1214.39 2152.4,1214.39 2152.99,1214.39 2153.57,1214.39 2154.16,1214.39 2154.75,1214.39 2155.33,1214.39 2155.92,1214.39 2156.5,1214.39 2157.09,1214.39 2157.68,1214.39 2158.26,1214.39 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.35,1196.9 1398.87,899.083 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.51 985.439,1196.9 2158.26,1196.9 2158.26,1231.51 985.439,1231.51 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip813\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip813)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2674.62 162.673,-3854.98 163.232,-4914.97 163.792,-5953.4 164.351,-6901.81 164.91,-7744.23 165.469,-8487.8 166.029,-9204.01 166.588,-8739.08 167.147,-8374.56 167.706,-8956.47 168.266,-8650.74 168.825,-9174.69 169.384,-9644.44 169.943,-10071.6 170.503,-10441.3 171.062,-10774.7 171.621,-11078.3 172.18,-11323 172.74,-11526.2 173.299,-11719 173.858,-11871.8 174.417,-11533.9 174.977,-11624 175.536,-11693.2 176.095,-11739.6 176.655,-11783.6 177.214,-11799.5 177.773,-11464.5 178.332,-11445.3 178.892,-10863.7 179.451,-10815.5 180.01,-10529.6 180.569,-10479.3 181.129,-10414.9 181.688,-9948.01 182.247,-9687.52 182.806,-9275.22 183.366,-9201.74 183.925,-9120.44 184.484,-9013.69 185.043,-8900.39 185.603,-8781.4 186.162,-8659.77 186.721,-8528.07 187.28,-8282.4 187.84,-8152.11 188.399,-7801.35 188.958,-7679.71 189.517,-7461.66 190.077,-7247.06 190.636,-7028.46 191.195,-6802.11 191.754,-6582.08 192.314,-6357.98 192.873,-6208.27 193.432,-6067.07 193.991,-5859.13 194.551,-5726.04 195.11,-5528.68 195.669,-5335.31 196.228,-5097.03 196.788,-4918.1 197.347,-4687.88 197.906,-4461.37 198.465,-4344.66 199.025,-4140.64 199.584,-3986.82 200.143,-3883.12 200.702,-3647.32 201.262,-3418.08 201.821,-3285.33 202.38,-3117.39 202.939,-3033.27 203.499,-2952.87 204.058,-2795 204.617,-2604.56 205.176,-2422.71 205.736,-2281.48 206.295,-2187.62 206.854,-2125.44 207.413,-1998.15 207.973,-1877.81 208.532,-1788.26 209.091,-1610.29 209.65,-1471.2 210.21,-1422.39 210.769,-1350.11 211.328,-1222.74 211.887,-1097.05 212.447,-1030.4 213.006,-939.829 213.565,-850.877 214.124,-745.037 214.684,-715.01 215.243,-639.724 215.802,-509.774 216.361,-459.149 216.921,-416.802 217.48,-348.85 218.039,-302.79 218.598,-282.265 219.158,-239.898 219.717,-198.548 220.276,-158.917 220.835,-138.106 221.395,-77.6512 221.954,-15.7119 222.513,2.98607 223.072,21.0321 223.632,81.8327 224.191,117.094 224.75,129.842 225.309,186.79 225.869,221.492 226.428,277.753 226.987,287.581 227.546,299.603 228.106,308.617 228.665,361.273 229.224,411.688 229.783,458.663 230.343,488.228 230.902,536.391 231.461,580.665 232.02,659.739 232.58,677.9 233.139,694.856 233.698,745.577 234.257,739.253 234.817,733.551 235.376,728.049 235.935,744.163 236.494,782.9 237.054,778.933 237.613,777.014 238.172,775.448 238.731,790.116 239.291,809.266 239.85,786.972 240.409,805.114 240.968,786.695 241.528,821.542 242.087,836.007 242.646,836.584 243.205,852.62 243.765,818.684 244.324,817.762 244.883,818.159 245.442,836.16 246.002,837.13 246.561,856.505 247.12,871.205 247.679,870.565 248.239,900.864 248.798,964.032 249.357,961.842 249.916,974.461 250.476,1004.57 251.035,1030.82 251.594,1005.8 252.153,1002.37 252.713,1016.87 253.272,1009.48 253.831,1006.62 254.39,987.046 254.95,1001.58 255.509,996.191 256.068,1025.78 256.627,1004.35 257.187,1040.44 257.746,1053.99 258.305,1099.09 258.864,1073.69 259.424,1067.64 259.983,1060.11 260.542,1051.97 261.101,1063.31 261.661,1038.37 262.22,1083.91 262.779,1093.21 263.338,1101.66 263.898,1078.42 264.457,1073.04 265.016,1045.68 265.575,1029.24 266.135,1025.25 266.694,1037.03 267.253,1014.56 267.812,994.243 268.372,958.954 268.931,976.226 269.49,994.587 270.049,1013.12 270.609,1007.99 271.168,1038.36 271.727,1034.6 272.286,1047.09 272.846,1052.55 273.405,1062.13 273.964,1073.99 274.523,1065.38 275.083,1076.42 275.642,1068.85 276.201,1095.67 276.76,1105.28 277.32,1113.28 277.879,1103.87 278.438,1098.91 278.997,1139.13 279.557,1130.47 280.116,1103.02 280.675,1026.98 281.234,1020.8 281.794,1019.43 282.353,998.737 282.912,994.419 283.471,991.089 284.031,1005.01 284.59,1000.03 285.149,978.555 285.708,978.112 286.268,991.24 286.827,1019.55 287.386,1064.07 287.945,1092.31 288.505,1068.75 289.064,1062.67 289.623,1057.78 290.182,1053.33 290.742,1048.49 291.301,1063.01 291.86,1053.94 292.419,1045.54 292.979,1039.69 293.538,1085.27 294.097,1080.42 294.656,1070.8 295.216,1095.2 295.775,1120.55 296.334,1107.28 296.893,1110.15 297.453,1099.19 298.012,1120.36 298.571,1110.51 299.13,1100.55 299.69,1073.59 300.249,1063.22 300.808,1123.76 301.368,1108.23 301.927,1063.11 302.486,1021.94 303.045,999.731 303.605,962.694 304.164,960.164 304.723,926.062 305.282,941.02 305.842,938.983 306.401,902.823 306.96,902.142 307.519,888.413 308.079,894.071 308.638,928.124 309.197,960.388 309.756,1023.72 310.316,1016.37 310.875,1029.85 311.434,1022.2 311.993,1014.77 312.553,1021.61 313.112,1000.09 313.671,1011.73 314.23,1035.94 314.79,1058.49 315.349,1062.77 315.908,1036.56 316.467,1012.45 317.027,1035.67 317.586,1046.96 318.145,1005.96 318.704,1033.38 319.264,1056.97 319.823,1064.4 320.382,1069.78 320.941,1089.45 321.501,1043.93 322.06,1020.28 322.619,962.305 323.178,958.424 323.738,971.734 324.297,1030.39 324.856,1026.11 325.415,1002.63 325.975,994.775 326.534,1020.33 327.093,1045.29 327.652,1004.64 328.212,999.852 328.771,1006.75 329.33,979.988 329.889,975.726 330.449,935.999 331.008,948.784 331.567,965.958 332.126,977.208 332.686,972.256 333.245,967.177 333.804,980.375 334.363,972.749 334.923,949.093 335.482,989.567 336.041,964.436 336.6,958.441 337.16,952.145 337.719,960.126 338.278,952.356 338.837,947.573 339.397,956.031 339.956,969.054 340.515,981.235 341.074,959.959 341.634,953.789 342.193,965.394 342.752,937.811 343.311,932.913 343.871,940.175 344.43,931.636 344.989,941.398 345.548,920.307 346.108,967.092 346.667,943.349 347.226,970.989 347.785,980.745 348.345,989.296 348.904,963.878 349.463,957.88 350.022,966.674 350.582,993.29 351.141,999.288 351.7,1006.6 352.259,995.537 352.819,999.078 353.378,971.873 353.937,947.298 354.496,958.088 355.056,951.245 355.615,991.103 356.174,980.434 356.733,926.023 357.293,936.866 357.852,898.789 358.411,908.819 358.97,916.988 359.53,878.596 360.089,822.772 360.648,802.118 361.207,801.865 361.767,800.536 362.326,817.736 362.885,818.898 363.444,820.285 364.004,836.808 364.563,869.111 365.122,833.727 365.681,815.945 366.241,847.264 366.8,811.352 367.359,780.687 367.918,800.316 368.478,817.085 369.037,833.966 369.596,846.091 370.155,824.252 370.715,809.267 371.274,842.379 371.833,839.259 372.392,872.611 372.952,834.836 373.511,850.38 374.07,851.461 374.629,834.04 375.189,832.239 375.748,834.355 376.307,815.709 376.866,778.56 377.426,794.031 377.985,827.882 378.544,829.896 379.103,874.861 379.663,885.282 380.222,880.267 380.781,892.944 381.34,889.484 381.9,869.834 382.459,880.532 383.018,860.964 383.577,854.782 384.137,834.378 384.696,848.546 385.255,857.812 385.814,852.135 386.374,865.83 386.933,863.751 387.492,840.932 388.051,821.849 388.611,804.562 389.17,804.259 389.729,802.68 390.288,768.023 390.848,784.334 391.407,769.213 391.966,754.912 392.525,738.33 393.085,725.026 393.644,726.11 394.203,746.178 394.762,751.949 395.322,756.342 395.881,759.649 396.44,776.268 396.999,780.785 397.559,781.341 398.118,770.107 398.677,755.171 399.236,742.723 399.796,747.64 400.355,766.213 400.914,779.78 401.473,793.445 402.033,825.667 402.592,822.521 403.151,820.536 403.71,802.798 404.27,804.494 404.829,817.923 405.388,849.379 405.947,865.126 406.507,846.556 407.066,844.631 407.625,842.84 408.184,854.94 408.744,853.111 409.303,849.905 409.862,860.85 410.421,857.565 410.981,854.655 411.54,869.06 412.099,883.774 412.658,858.873 413.218,872.706 413.777,881.641 414.336,894.439 414.895,886.398 415.455,863.764 416.014,876.396 416.573,872.134 417.132,883.829 417.692,860.195 418.251,889.312 418.81,884.344 419.369,891.812 419.929,870.076 420.488,871.033 421.047,864.484 421.606,859.771 422.166,840.223 422.725,856.023 423.284,883.485 423.843,894.973 424.403,876.14 424.962,868.173 425.521,877.161 426.08,855.514 426.64,852.684 427.199,832.165 427.758,858.192 428.318,802.389 428.877,800.266 429.436,792.992 429.995,824.853 430.555,822.247 431.114,770.774 431.673,786.191 432.232,767.408 432.792,782.901 433.351,766.482 433.91,747.03 434.469,776.696 435.029,778.407 435.588,796.839 436.147,795.54 436.706,829.422 437.266,809.243 437.825,824.1 438.384,802.43 438.943,770.246 439.503,804.279 440.062,801.784 440.621,798.237 441.18,810.488 441.74,778.371 442.299,763.941 442.858,744.035 443.417,741.531 443.977,757.195 444.536,838.442 445.095,868.395 445.654,895.032 446.214,905.341 446.773,877.121 447.332,886.339 447.891,878.545 448.451,856.845 449.01,866.311 449.569,811.364 450.128,807.275 450.688,788.292 451.247,769.132 451.806,770.522 452.365,802.606 452.925,816.685 453.484,828.977 454.043,826.671 454.602,856.372 455.162,832.781 455.721,856.106 456.28,869.426 456.839,890.652 457.399,900.411 457.958,909.122 458.517,870.457 459.076,846.789 459.636,840.837 460.195,783.53 460.754,779.275 461.313,759.208 461.873,729.112 462.432,746.997 462.991,765.169 463.55,744.993 464.11,712.202 464.669,727.246 465.228,743.708 465.787,759.601 466.347,759.305 466.906,756.754 467.465,774.9 468.024,755.909 468.584,735.483 469.143,753.601 469.702,753.704 470.261,703.843 470.821,706.264 471.38,725.141 471.939,727.478 472.498,727.18 473.058,727.902 473.617,727.475 474.176,729.299 474.735,760.7 475.295,760.855 475.854,762.776 476.413,763.385 476.972,746.108 477.532,747.947 478.091,746.966 478.65,780.998 479.209,797.332 479.769,811.037 480.328,808.034 480.887,788.849 481.446,752.238 482.006,753.17 482.565,753.32 483.124,750.396 483.683,753.626 484.243,785.33 484.802,779.524 485.361,728.559 485.92,729.987 486.48,763.428 487.039,727.954 487.598,729.668 488.157,678.569 488.717,681.088 489.276,714.121 489.835,730.349 490.394,714.266 490.954,717.343 491.513,735.894 492.072,755.249 492.631,752.582 493.191,699.945 493.75,715.948 494.309,687.784 494.868,725.511 495.428,725.221 495.987,709.104 496.546,722.512 497.105,692.964 497.665,693.655 498.224,664.114 498.783,669.53 499.342,654.2 499.902,725.584 500.461,712.027 501.02,698.449 501.579,732.309 502.139,718.12 502.698,751.209 503.257,733.741 503.816,700.609 504.376,702.8 504.935,690.355 505.494,724.439 506.053,740.999 506.613,738.988 507.172,722.566 507.731,737.822 508.29,751.93 508.85,766.846 509.409,781.984 509.968,778.168 510.527,760.13 511.087,754.323 511.646,751.424 512.205,713.407 512.764,747.209 513.324,759.37 513.883,773.107 514.442,738.15 515.001,740.412 515.561,735.889 516.12,720.783 516.679,702.966 517.238,705.107 517.798,706.274 518.357,679.308 518.916,699.665 519.475,717.182 520.035,722.074 520.594,740.656 521.153,737.822 521.712,736.927 522.272,719.779 522.831,720.509 523.39,687.176 523.949,691.093 524.509,677.462 525.068,685.528 525.627,689.716 526.186,711.235 526.746,762.439 527.305,792.282 527.864,774.441 528.423,788.602 528.983,771.26 529.542,771.209 530.101,751.472 530.66,810.358 531.22,807.002 531.779,803.161 532.338,801.387 532.897,816.375 533.457,844.447 534.016,854.485 534.575,846.976 535.134,796.607 535.694,793.48 536.253,788.064 536.812,788.234 537.371,816.984 537.931,794.635 538.49,808.19 539.049,803.298 539.608,816.903 540.168,828.994 540.727,840.726 541.286,819.497 541.845,813.286 542.405,789.651 542.964,756.329 543.523,769.404 544.082,752.572 544.642,719.062 545.201,751.322 545.76,764.324 546.319,760.837 546.879,759.019 547.438,727.462 547.997,728.206 548.556,758.211 549.116,739.051 549.675,766.225 550.234,750.836 550.793,746.21 551.353,728.683 551.912,746.976 552.471,743.456 553.031,758.435 553.59,736.592 554.149,751.384 554.708,780.067 555.268,778.131 555.827,757.797 556.386,755.749 556.945,785.428 557.505,784.918 558.064,780.553 558.623,825.654 559.182,839.649 559.742,815.429 560.301,843.492 560.86,850.957 561.419,857.579 561.979,850.669 562.538,826.036 563.097,820.147 563.656,814.351 564.216,794.6 564.775,774.484 565.334,771.642 565.893,787.024 566.453,784.644 567.012,751.045 567.571,763.209 568.13,776.032 568.69,772.089 569.249,751.349 569.808,783.302 570.367,797.213 570.927,775.427 571.486,834.001 572.045,811.002 572.604,790.105 573.164,785.517 573.723,747.675 574.282,746.6 574.841,695.344 575.401,698.549 575.96,696.644 576.519,695.098 577.078,679.315 577.638,665.918 578.197,638.869 578.756,624.861 579.315,614.162 579.875,620.64 580.434,610.416 580.993,595.222 581.552,620.246 582.112,643.524 582.671,644.855 583.23,660.252 583.789,678.383 584.349,729.773 584.908,744.22 585.467,714.674 586.026,683.361 586.586,686.316 587.145,704.541 587.704,718.05 588.263,715.79 588.823,698.128 589.382,716.986 589.941,715.069 590.5,726.659 591.06,742.453 591.619,775.927 592.178,756.141 592.737,752.807 593.297,753.248 593.856,714.085 594.415,712.978 594.974,709.443 595.534,712.062 596.093,745.627 596.652,743.232 597.211,727.426 597.771,743.939 598.33,738.923 598.889,707.836 599.448,691.549 600.008,694.081 600.567,713.211 601.126,712.56 601.685,680.466 602.245,646.891 602.804,649.556 603.363,620.743 603.922,624.713 604.482,627.493 605.041,664.521 605.6,649.786 606.159,669.935 606.719,674.822 607.278,675.351 607.837,679.591 608.396,729.574 608.956,707.807 609.515,658.702 610.074,676.665 610.633,629.227 611.193,634.374 611.752,653.179 612.311,656.567 612.87,675.146 613.43,674.057 613.989,642.409 614.548,663.815 615.107,663.917 615.667,664.495 616.226,667.951 616.785,618.986 617.344,642.971 617.904,678.336 618.463,680.223 619.022,677.369 619.581,694.424 620.141,665.535 620.7,668.753 621.259,655.134 621.818,690.524 622.378,710.979 622.937,708.455 623.496,662.979 624.055,616.633 624.615,604.965 625.174,578.422 625.733,615.805 626.292,637.772 626.852,656.665 627.411,641.463 627.97,662.733 628.529,680.817 629.089,696.645 629.648,712.884 630.207,696.936 630.766,713.684 631.326,693.837 631.885,693.086 632.444,661.648 633.003,680.388 633.563,715.102 634.122,696.647 634.681,728.97 635.24,728.111 635.8,743.021 636.359,771.395 636.918,770.5 637.477,734.567 638.037,734.941 638.596,733.263 639.155,714.978 639.714,716.086 640.274,746.631 640.833,757.64 641.392,753.099 641.951,734.125 642.511,698.866 643.07,698.205 643.629,682.216 644.188,679.844 644.748,677.175 645.307,678.989 645.866,663.135 646.425,664.545 646.985,697.767 647.544,682.712 648.103,688.228 648.662,704.908 649.222,722.02 649.781,707.34 650.34,723.137 650.899,771.44 651.459,770.23 652.018,783.665 652.577,758.539 653.136,741.827 653.696,723.856 654.255,739.496 654.814,704.758 655.373,704.353 655.933,707.642 656.492,707.933 657.051,707.333 657.61,728.391 658.17,757.977 658.729,752.981 659.288,734.475 659.847,730.429 660.407,730.845 660.966,728.59 661.525,711.747 662.084,728.499 662.644,680.362 663.203,681.054 663.762,649.708 664.321,654.327 664.881,657.576 665.44,659.429 665.999,673.714 666.558,692.58 667.118,745.021 667.677,726.974 668.236,746.698 668.795,728.224 669.355,744.093 669.914,711.698 670.473,713.179 671.032,683.472 671.592,670.321 672.151,671.745 672.71,706.251 673.269,656.886 673.829,660.612 674.388,662.666 674.947,663.523 675.506,667.539 676.066,685.895 676.625,668.541 677.184,651.425 677.743,654.648 678.303,621.142 678.862,642.46 679.421,646.254 679.981,648.886 680.54,629.741 681.099,650.319 681.658,667.942 682.218,655.042 682.777,671.29 683.336,658.507 683.895,644.503 684.455,647.972 685.014,715.371 685.573,746.32 686.132,745.55 686.692,706.021 687.251,688.247 687.81,704.069 688.369,673.477 688.929,707.745 689.488,709.476 690.047,739.076 690.606,686.898 691.166,717.742 691.725,717.905 692.284,702.117 692.843,717.402 693.403,713.828 693.962,728.802 694.521,722.907 695.08,720.512 695.64,735.067 696.199,747.418 696.758,744.318 697.317,740.29 697.877,738.576 698.436,749.847 698.995,778.04 699.554,807.074 700.114,798.874 700.673,827.657 701.232,833.194 701.791,874.607 702.351,880.084 702.91,887.241 703.469,862.001 704.028,854.967 704.588,864.31 705.147,903.093 705.706,876.016 706.265,882.295 706.825,885.892 707.384,858.769 707.943,834.09 708.502,855.818 709.062,845.134 709.621,856.82 710.18,847.203 710.739,804.58 711.299,781.618 711.858,712.774 712.417,695.2 712.976,696.129 713.536,680.299 714.095,729.161 714.654,724.865 715.213,788.514 715.773,786.702 716.332,766.857 716.891,765.84 717.45,780.211 718.01,776.902 718.569,725.33 719.128,721.015 719.687,718.133 720.247,699.609 720.806,697.09 721.365,712.291 721.924,709.549 722.484,691.506 723.043,678.01 723.602,695.236 724.161,660.638 724.721,664.269 725.28,681.973 725.839,711.734 726.398,664.896 726.958,620.107 727.517,637.423 728.076,638.683 728.635,643.519 729.195,644.337 729.754,649.854 730.313,636.818 730.872,574.58 731.432,581.666 731.991,537.863 732.55,482.405 733.109,493.667 733.669,523.784 734.228,518.316 734.787,528.67 735.346,534.833 735.906,602.552 736.465,592.626 737.024,600.429 737.583,592.542 738.143,616.119 738.702,604.685 739.261,609.693 739.82,611.242 740.38,634.311 740.939,656.215 741.498,657.922 742.057,642.952 742.617,612.883 743.176,582.515 743.735,556.848 744.294,583.382 744.854,589.728 745.413,613.749 745.972,683.63 746.531,699.487 747.091,714.601 747.65,701.356 748.209,716.656 748.768,733.607 749.328,697.268 749.887,698.635 750.446,714.094 751.005,698.748 751.565,682.511 752.124,653.601 752.683,673.747 753.242,657.818 753.802,642.168 754.361,595.38 754.92,599.849 755.479,589.014 756.039,599.679 756.598,587.671 757.157,596.974 757.716,601.856 758.276,621.339 758.835,611.304 759.394,633.206 759.953,652.494 760.513,655.53 761.072,656.462 761.631,669.24 762.19,671.313 762.75,670.279 763.309,669.112 763.868,674.358 764.427,708.783 764.987,742.163 765.546,758.027 766.105,733.834 766.664,716.763 767.224,716.953 767.783,715.134 768.342,700.163 768.901,717.756 769.461,746.429 770.02,746.409 770.579,712.81 771.138,729.811 771.698,748.001 772.257,744.596 772.816,758.656 773.375,781.625 773.935,795.069 774.494,793.79 775.053,771.68 775.612,751.031 776.172,745.288 776.731,775.731 777.29,739.663 777.849,751.539 778.409,715.653 778.968,718.268 779.527,714.676 780.086,697.106 780.646,698.093 781.205,647.743 781.764,667.065 782.323,670.437 782.883,675.932 783.442,704.873 784.001,704.797 784.56,754.867 785.12,787.455 785.679,783.261 786.238,776.579 786.797,782.816 787.357,789.743 787.916,815.993 788.475,790.703 789.034,749.749 789.594,745.123 790.153,758.972 790.712,673.269 791.271,607.829 791.831,629.657 792.39,631.978 792.949,622.804 793.508,627.065 794.068,628.245 794.627,633.532 795.186,635.102 795.745,654.477 796.305,654.473 796.864,651.422 797.423,685.806 797.982,716.667 798.542,681 799.101,663.51 799.66,632.208 800.219,632.094 800.779,635.222 801.338,622.349 801.897,623.389 802.456,642.049 803.016,662.483 803.575,663.924 804.134,664.199 804.693,712.526 805.253,724.697 805.812,755.177 806.371,767.99 806.931,746.258 807.49,790.587 808.049,770.667 808.608,814.248 809.168,826.512 809.727,819.678 810.286,793.115 810.845,741.807 811.405,741.927 811.964,755.587 812.523,765.965 813.082,728.684 813.642,793.935 814.201,747.633 814.76,730.302 815.319,760.12 815.879,773.242 816.438,769.079 816.997,779.514 817.556,745.809 818.116,758.745 818.675,763.966 819.234,711.134 819.793,663.999 820.353,665.125 820.912,685.591 821.471,668.637 822.03,703.876 822.59,702.957 823.149,717.631 823.708,682.038 824.267,696.008 824.827,647.888 825.386,617.878 825.945,621.292 826.504,639.578 827.064,625.084 827.623,658.62 828.182,658.973 828.741,661.464 829.301,648.47 829.86,665.07 830.419,668.987 830.978,686.862 831.538,667.934 832.097,672.604 832.656,641.041 833.215,642.602 833.775,657.923 834.334,658.809 834.893,673.563 835.452,686.798 836.012,722.354 836.571,721.349 837.13,717.92 837.689,733.891 838.249,731.36 838.808,730.999 839.367,728.02 839.926,727.678 840.486,725.917 841.045,739.994 841.604,701.701 842.163,731.212 842.723,745.414 843.282,755.617 843.841,782.167 844.4,789.262 844.96,799.967 845.519,780.496 846.078,757.263 846.637,738.149 847.197,735.825 847.756,733.581 848.315,732.611 848.874,755.08 849.434,751.085 849.993,765.833 850.552,717.248 851.111,666.416 851.671,696.744 852.23,694.157 852.789,694 853.348,678.43 853.908,662.886 854.467,645.374 855.026,664.517 855.585,650.983 856.145,603.273 856.704,642.203 857.263,678.372 857.822,662.865 858.382,679.157 858.941,660.515 859.5,659.14 860.059,628.096 860.619,630.603 861.178,613.301 861.737,630.316 862.296,650.11 862.856,672.106 863.415,607.427 863.974,597.447 864.533,570.377 865.093,558.596 865.652,550.967 866.211,558.736 866.77,583.558 867.33,601.463 867.889,574.977 868.448,578.633 869.007,587.419 869.567,673.818 870.126,693.058 870.685,703.8 871.244,718.45 871.804,703.452 872.363,719.797 872.922,735.713 873.481,684.823 874.041,667.733 874.6,669.358 875.159,686.446 875.718,650.785 876.278,654.586 876.837,641.046 877.396,678.422 877.955,664.127 878.515,617.511 879.074,609.034 879.633,615.201 880.192,619.036 880.752,620.284 881.311,638.917 881.87,661.576 882.429,679.129 882.989,648.667 883.548,651.158 884.107,638.61 884.666,641.649 885.226,628.66 885.785,645 886.344,681.244 886.903,682.9 887.463,681.411 888.022,698.738 888.581,698.2 889.14,697.164 889.7,678.008 890.259,678.271 890.818,646.978 891.377,664.396 891.937,682.252 892.496,698.831 893.055,715.136 893.614,695.292 894.174,711.619 894.733,726.759 895.292,690.7 895.851,690.935 896.411,692.33 896.97,676.37 897.529,679.693 898.088,696.388 898.648,680.826 899.207,717.253 899.766,684.103 900.325,668.554 900.885,686.275 901.444,704.57 902.003,720.505 902.562,703.771 903.122,749.963 903.681,763.815 904.24,744.494 904.799,736.667 905.359,751.328 905.918,781.825 906.477,743.637 907.036,759.024 907.596,756.154 908.155,756.969 908.714,735.464 909.273,716.786 909.833,717.584 910.392,717.773 910.951,684.02 911.51,698.831 912.07,702.352 912.629,704.465 913.188,718.427 913.747,717.957 914.307,714.125 914.866,695.54 915.425,691.705 915.984,672.646 916.544,637.886 917.103,674.413 917.662,594.91 918.221,613.345 918.781,632.373 919.34,618.138 919.899,619.045 920.458,621.96 921.018,625.562 921.577,611.654 922.136,581.788 922.695,588.288 923.255,577.39 923.814,614.395 924.373,617.357 924.932,553.615 925.492,576.928 926.051,574.029 926.61,576.3 927.169,597.811 927.729,603.119 928.288,571.281 928.847,574.786 929.406,544.627 929.966,585.58 930.525,638.104 931.084,625.961 931.644,632.299 932.203,622.665 932.762,660.886 933.321,665.79 933.881,667.133 934.44,684.821 934.999,684.402 935.558,648.113 936.118,615.044 936.677,583.767 937.236,653.28 937.795,654.279 938.355,706.07 938.914,721.702 939.473,708.151 940.032,710.655 940.592,712.599 941.151,710.151 941.71,708.65 942.269,719.793 942.829,735.601 943.388,748.551 943.947,745.624 944.506,742.285 945.066,725.868 945.625,688.054 946.184,702.434 946.743,717.268 947.303,705.106 947.862,721 948.421,705.427 948.98,703.551 949.54,704.711 950.099,701.917 950.658,684.056 951.217,688.042 951.777,702.747 952.336,682.426 952.895,667.246 953.454,652.451 954.014,623.026 954.573,641.421 955.132,655.049 955.691,672.153 956.251,657.768 956.81,659.731 957.369,662.041 957.928,645.416 958.488,645.274 959.047,646.104 959.606,631.124 960.165,619.192 960.725,624.475 961.284,630.493 961.843,650.553 962.402,668.49 962.962,684.684 963.521,655.08 964.08,659.378 964.639,677.102 965.199,659.904 965.758,660.871 966.317,665.575 966.876,666.308 967.436,666.641 967.995,654.902 968.554,671.394 969.113,686.784 969.673,683.944 970.232,683.817 970.791,697.035 971.35,697.071 971.91,743.408 972.469,725.879 973.028,741.268 973.587,736.986 974.147,719.338 974.706,701.66 975.265,750.178 975.824,716.328 976.384,748.098 976.943,724.265 977.502,691.338 978.061,687.245 978.621,705.168 979.18,702.669 979.739,735.751 980.298,717.523 980.858,699.272 981.417,700.138 981.976,715.092 982.535,713.302 983.095,643.021 983.654,633.58 984.213,653.201 984.772,668.516 985.332,669.238 985.891,683.747 986.45,698.069 987.009,712.011 987.569,692.57 988.128,671.601 988.687,668.321 989.246,682.398 989.806,665.061 990.365,649.059 990.924,683.198 991.483,702.013 992.043,700.784 992.602,666.145 993.161,680.982 993.72,698.709 994.28,697.88 994.839,694.712 995.398,710.629 995.957,690.25 996.517,672.572 997.076,675.273 997.635,660.633 998.194,659.217 998.754,693.878 999.313,678.86 999.872,677.664 1000.43,681.886 1000.99,670.62 1001.55,705.157 1002.11,705.434 1002.67,719.671 1003.23,748.881 1003.79,742.87 1004.35,739.905 1004.91,724.37 1005.46,721.889 1006.02,691.5 1006.58,706.281 1007.14,720.997 1007.7,716.847 1008.26,684.68 1008.82,688.27 1009.38,689.445 1009.94,675.298 1010.5,664.014 1011.06,650.173 1011.62,621.719 1012.18,594.792 1012.73,617.95 1013.29,619.919 1013.85,622.978 1014.41,611.68 1014.97,633.255 1015.53,636.453 1016.09,637.744 1016.65,656.818 1017.21,660.898 1017.77,678.85 1018.33,644.534 1018.89,659.179 1019.45,645.885 1020.01,660.411 1020.56,661.822 1021.12,699.432 1021.68,681.846 1022.24,682.614 1022.8,683.405 1023.36,682.348 1023.92,660.606 1024.48,690.888 1025.04,675.096 1025.6,676.692 1026.16,641.384 1026.72,625.641 1027.28,612.421 1027.83,635.54 1028.39,638.43 1028.95,622.158 1029.51,611.777 1030.07,631.847 1030.63,682.29 1031.19,633.667 1031.75,637.421 1032.31,668.896 1032.87,654.746 1033.43,686.432 1033.99,673.027 1034.55,677.672 1035.1,679.568 1035.66,694.821 1036.22,711.103 1036.78,708.411 1037.34,708.311 1037.9,725.059 1038.46,752.548 1039.02,735.036 1039.58,730.377 1040.14,714.279 1040.7,729.318 1041.26,742.552 1041.82,740.99 1042.38,721.088 1042.93,716.377 1043.49,712.937 1044.05,727.32 1044.61,694.978 1045.17,695.871 1045.73,700.935 1046.29,731.349 1046.85,714.149 1047.41,713.072 1047.97,728.933 1048.53,740.236 1049.09,754.741 1049.65,768.63 1050.2,797.229 1050.76,774.956 1051.32,720.732 1051.88,684.367 1052.44,718.325 1053,763.551 1053.56,789.978 1054.12,805.367 1054.68,812.245 1055.24,835.283 1055.8,842.588 1056.36,815.275 1056.92,776.157 1057.48,773.041 1058.03,787.466 1058.59,770.78 1059.15,764.774 1059.71,778.096 1060.27,788.387 1060.83,795.409 1061.39,776.533 1061.95,784.36 1062.51,744.297 1063.07,742.289 1063.63,755.959 1064.19,721.584 1064.75,781 1065.3,757.324 1065.86,686.926 1066.42,699.494 1066.98,695.822 1067.54,693.309 1068.1,707.988 1068.66,676.572 1069.22,626.272 1069.78,631.069 1070.34,634.341 1070.9,636.327 1071.46,653.948 1072.02,652.883 1072.57,637.665 1073.13,672.428 1073.69,658.639 1074.25,662.352 1074.81,649.091 1075.37,666.211 1075.93,668.839 1076.49,699.865 1077.05,716.521 1077.61,682.509 1078.17,680.972 1078.73,679.953 1079.29,663.46 1079.85,645.332 1080.4,631.815 1080.96,585.059 1081.52,556.68 1082.08,550.121 1082.64,523.128 1083.2,533.073 1083.76,540.8 1084.32,581.773 1084.88,588.243 1085.44,625.782 1086,627.163 1086.56,597.948 1087.12,600.343 1087.67,656.478 1088.23,640.142 1088.79,629.594 1089.35,615.264 1089.91,602.252 1090.47,608.943 1091.03,615.063 1091.59,600.178 1092.15,603.221 1092.71,604.985 1093.27,592.44 1093.83,642.832 1094.39,660.776 1094.94,613.267 1095.5,629.447 1096.06,651.564 1096.62,685.734 1097.18,652.203 1097.74,675.337 1098.3,662.202 1098.86,633.749 1099.42,652.716 1099.98,651.27 1100.54,687.972 1101.1,676.387 1101.66,710.685 1102.22,679.355 1102.77,680.04 1103.33,662.728 1103.89,677.955 1104.45,695.008 1105.01,711.921 1105.57,711.262 1106.13,722.293 1106.69,720.843 1107.25,738.071 1107.81,720.969 1108.37,734.807 1108.93,718.179 1109.49,716.208 1110.04,743.571 1110.6,723.209 1111.16,739.469 1111.72,735.312 1112.28,729.199 1112.84,741.728 1113.4,775.754 1113.96,736.09 1114.52,734.08 1115.08,743.163 1115.64,738.28 1116.2,731.907 1116.76,697.008 1117.31,696.764 1117.87,695.006 1118.43,664.006 1118.99,649.945 1119.55,649.938 1120.11,634.426 1120.67,639.888 1121.23,639.959 1121.79,661.808 1122.35,644.388 1122.91,680.069 1123.47,743.629 1124.03,708.602 1124.59,724.541 1125.14,739.401 1125.7,705 1126.26,668.083 1126.82,633.326 1127.38,603.669 1127.94,624.019 1128.5,626.366 1129.06,612.168 1129.62,599.25 1130.18,600.273 1130.74,619.765 1131.3,625.117 1131.86,631.238 1132.41,651.613 1132.97,641.689 1133.53,644.267 1134.09,629.662 1134.65,616.396 1135.21,606.5 1135.77,613.124 1136.33,633.57 1136.89,652.606 1137.45,652.561 1138.01,666.552 1138.57,670.03 1139.13,623.534 1139.68,624.056 1140.24,629.121 1140.8,647.607 1141.36,648.625 1141.92,621.189 1142.48,607.372 1143.04,613.234 1143.6,633.52 1144.16,650.046 1144.72,653.434 1145.28,654.099 1145.84,675.249 1146.4,695.675 1146.96,694.071 1147.51,726.87 1148.07,705.919 1148.63,672.516 1149.19,719.786 1149.75,698.659 1150.31,694.936 1150.87,711.854 1151.43,708.377 1151.99,720.286 1152.55,703.232 1153.11,701.08 1153.67,701.374 1154.23,680.561 1154.78,651.238 1155.34,635.664 1155.9,627.765 1156.46,633.618 1157.02,638.987 1157.58,675.719 1158.14,675.784 1158.7,678.627 1159.26,680.957 1159.82,682.762 1160.38,700.202 1160.94,701.582 1161.5,698.981 1162.05,715.509 1162.61,697.1 1163.17,708.795 1163.73,740.274 1164.29,733.988 1164.85,732.765 1165.41,727.703 1165.97,710.899 1166.53,709.215 1167.09,704.644 1167.65,702.312 1168.21,719.408 1168.77,719.761 1169.33,750.604 1169.88,743.677 1170.44,738.864 1171,751.797 1171.56,749.639 1172.12,733.258 1172.68,733.405 1173.24,697.558 1173.8,676.161 1174.36,645.926 1174.92,647.388 1175.48,665.661 1176.04,681.496 1176.6,648.112 1177.15,664.415 1177.71,713.281 1178.27,695.783 1178.83,726.609 1179.39,709.239 1179.95,721.53 1180.51,717.463 1181.07,698.173 1181.63,711.916 1182.19,728.781 1182.75,709.226 1183.31,708.109 1183.87,741.256 1184.43,724.481 1184.98,687.389 1185.54,683.07 1186.1,668.473 1186.66,700.949 1187.22,668.539 1187.78,666.95 1188.34,685.483 1188.9,650.463 1189.46,713.293 1190.02,710.482 1190.58,712.543 1191.14,727.219 1191.7,742.973 1192.25,743.92 1192.81,757.869 1193.37,768.192 1193.93,727.627 1194.49,753.879 1195.05,736.51 1195.61,746.126 1196.17,758.475 1196.73,787.512 1197.29,798.517 1197.85,791.802 1198.41,751.986 1198.97,749.449 1199.52,745.781 1200.08,726.341 1200.64,706.337 1201.2,706.681 1201.76,722.405 1202.32,740.398 1202.88,724.314 1203.44,737.411 1204,736.674 1204.56,749.969 1205.12,746.455 1205.68,769.841 1206.24,731.81 1206.8,727.099 1207.35,741.312 1207.91,708.928 1208.47,674.536 1209.03,673.878 1209.59,675.629 1210.15,692.014 1210.71,690.761 1211.27,675.532 1211.83,625.279 1212.39,611.837 1212.95,633.038 1213.51,650.106 1214.07,653.531 1214.62,654.603 1215.18,653.973 1215.74,689.982 1216.3,688.241 1216.86,687.049 1217.42,684.05 1217.98,671.684 1218.54,669.463 1219.1,718.836 1219.66,766.341 1220.22,746.409 1220.78,710.029 1221.34,687.701 1221.89,686.168 1222.45,688.039 1223.01,701.54 1223.57,687.402 1224.13,685.059 1224.69,701.568 1225.25,735.833 1225.81,720.136 1226.37,701.748 1226.93,689.315 1227.49,675.184 1228.05,657.062 1228.61,644.438 1229.17,648.827 1229.72,635.21 1230.28,635.444 1230.84,652.595 1231.4,638.286 1231.96,626.806 1232.52,631.602 1233.08,634.384 1233.64,653.275 1234.2,656.782 1234.76,641.592 1235.32,646.156 1235.88,683.356 1236.44,652.828 1236.99,652.319 1237.55,655.368 1238.11,638.579 1238.67,659.567 1239.23,659.429 1239.79,662.978 1240.35,662.098 1240.91,679.407 1241.47,697.746 1242.03,664.741 1242.59,664.668 1243.15,669.268 1243.71,683.031 1244.26,682.171 1244.82,683.545 1245.38,716.853 1245.94,697.305 1246.5,662.512 1247.06,629.348 1247.62,632.565 1248.18,668.711 1248.74,652.748 1249.3,636.137 1249.86,640.456 1250.42,659.048 1250.98,691.171 1251.54,708.247 1252.09,704.992 1252.65,688.174 1253.21,720.879 1253.77,705.123 1254.33,734.308 1254.89,714.752 1255.45,731.161 1256.01,728.437 1256.57,709.176 1257.13,674.474 1257.69,644.821 1258.25,646.993 1258.81,633.852 1259.36,637.234 1259.92,639.57 1260.48,642.998 1261.04,628.454 1261.6,631.58 1262.16,616.129 1262.72,632.433 1263.28,651.964 1263.84,655.185 1264.4,658.72 1264.96,659.569 1265.52,644.628 1266.08,646.095 1266.63,694.811 1267.19,663.386 1267.75,596.065 1268.31,619.058 1268.87,642.306 1269.43,660.206 1269.99,646.207 1270.55,631.467 1271.11,665.468 1271.67,647.595 1272.23,650.044 1272.79,649.903 1273.35,651.475 1273.91,632.926 1274.46,636.821 1275.02,652.301 1275.58,670.082 1276.14,668.971 1276.7,702.05 1277.26,716.683 1277.82,713.001 1278.38,726.102 1278.94,721.787 1279.5,718.781 1280.06,744.426 1280.62,677.813 1281.18,693.851 1281.73,692.179 1282.29,675.146 1282.85,659.484 1283.41,663.304 1283.97,693.758 1284.53,696.48 1285.09,698.919 1285.65,681.387 1286.21,666.398 1286.77,682.654 1287.33,699.19 1287.89,667.661 1288.45,665.549 1289,650.392 1289.56,688.975 1290.12,675.419 1290.68,674.135 1291.24,688.493 1291.8,689.154 1292.36,672.47 1292.92,658.477 1293.48,709.021 1294.04,692.892 1294.6,690.5 1295.16,672.236 1295.72,674.422 1296.28,706.856 1296.83,707.811 1297.39,709.63 1297.95,755.184 1298.51,782.804 1299.07,762.044 1299.63,743.681 1300.19,756.958 1300.75,770.077 1301.31,749.844 1301.87,748.096 1302.43,764.167 1302.99,757.334 1303.55,771.116 1304.1,749.711 1304.66,726.33 1305.22,739.516 1305.78,704.538 1306.34,686.761 1306.9,624.05 1307.46,642.982 1308.02,660.695 1308.58,662.762 1309.14,667.384 1309.7,669.442 1310.26,685.269 1310.82,703.969 1311.38,717.945 1311.93,693.759 1312.49,696.06 1313.05,678.71 1313.61,693.254 1314.17,693.475 1314.73,654.539 1315.29,655.983 1315.85,640.224 1316.41,641.385 1316.97,658.422 1317.53,659.967 1318.09,660.296 1318.65,648.087 1319.2,667.039 1319.76,670.28 1320.32,672.223 1320.88,642.734 1321.44,646.433 1322,632.18 1322.56,652.48 1323.12,671.653 1323.68,640.287 1324.24,642.085 1324.8,691.075 1325.36,710.482 1325.92,708.683 1326.47,705.483 1327.03,721.339 1327.59,717.439 1328.15,731.229 1328.71,731.568 1329.27,715.157 1329.83,729.271 1330.39,709.236 1330.95,675.222 1331.51,642.867 1332.07,665.373 1332.63,662.613 1333.19,667.563 1333.75,686.351 1334.3,686.599 1334.86,684.986 1335.42,666.441 1335.98,699.059 1336.54,697.62 1337.1,743.15 1337.66,757.112 1338.22,734.859 1338.78,699.698 1339.34,714.894 1339.9,694.618 1340.46,697.217 1341.02,728.729 1341.57,745.541 1342.13,726.066 1342.69,725.814 1343.25,771.298 1343.81,780.781 1344.37,851.409 1344.93,857.846 1345.49,832.663 1346.05,823.741 1346.61,817.688 1347.17,795.119 1347.73,804.501 1348.29,778.815 1348.84,754.856 1349.4,719.382 1349.96,702.703 1350.52,684.494 1351.08,717.247 1351.64,697.875 1352.2,714.225 1352.76,700.744 1353.32,696.703 1353.88,676.728 1354.44,674.382 1355,674.775 1355.56,687.106 1356.12,685.15 1356.67,684.45 1357.23,672.068 1357.79,689.804 1358.35,687.779 1358.91,671.02 1359.47,657.798 1360.03,657.216 1360.59,675.737 1361.15,658.01 1361.71,674.354 1362.27,674.272 1362.83,674.454 1363.39,677.438 1363.94,711.257 1364.5,706.798 1365.06,687.594 1365.62,685.643 1366.18,668.99 1366.74,669.791 1367.3,638.118 1367.86,642.608 1368.42,608.94 1368.98,596.571 1369.54,599.176 1370.1,588.662 1370.66,593.685 1371.21,563.44 1371.77,588.076 1372.33,577.97 1372.89,580.616 1373.45,601.348 1374.01,602.432 1374.57,637.03 1375.13,655.003 1375.69,641.801 1376.25,611.86 1376.81,634.864 1377.37,637.933 1377.93,668.734 1378.49,668.287 1379.04,682.556 1379.6,682.115 1380.16,668.604 1380.72,699.956 1381.28,733.3 1381.84,779.826 1382.4,792.219 1382.96,788.2 1383.52,767.953 1384.08,766.256 1384.64,745.346 1385.2,740.025 1385.76,722.543 1386.31,754.763 1386.87,704.816 1387.43,705.689 1387.99,688.797 1388.55,673.648 1389.11,672.441 1389.67,672.41 1390.23,675.239 1390.79,677.212 1391.35,614.355 1391.91,596.956 1392.47,619.314 1393.03,623.619 1393.58,629.152 1394.14,647.385 1394.7,650.664 1395.26,637.91 1395.82,654.225 1396.38,624.305 1396.94,626.913 1397.5,627.987 1398.06,628.944 1398.62,666.228 1399.18,670.11 1399.74,668.088 1400.3,668.898 1400.86,688.892 1401.41,639.511 1401.97,689.668 1402.53,688.954 1403.09,656.811 1403.65,658.377 1404.21,624.888 1404.77,612.541 1405.33,633.215 1405.89,638.988 1406.45,625.566 1407.01,674.148 1407.57,659.262 1408.13,676.213 1408.68,708.413 1409.24,706.933 1409.8,691.273 1410.36,674.04 1410.92,694.441 1411.48,705.943 1412.04,673.318 1412.6,694.234 1413.16,661.911 1413.72,661.13 1414.28,660.75 1414.84,647.933 1415.4,634.394 1415.95,608.389 1416.51,596.043 1417.07,633.717 1417.63,620.265 1418.19,621.896 1418.75,611.148 1419.31,630.119 1419.87,631.646 1420.43,667.532 1420.99,668.211 1421.55,669.704 1422.11,670.362 1422.67,672.172 1423.23,706.344 1423.78,751.806 1424.34,781.846 1424.9,778.989 1425.46,775.356 1426.02,772.937 1426.58,750.866 1427.14,746.227 1427.7,761.335 1428.26,802.529 1428.82,765.343 1429.38,762.669 1429.94,726.918 1430.5,720.773 1431.05,685.882 1431.61,688.501 1432.17,742.564 1432.73,724.88 1433.29,690.571 1433.85,657.013 1434.41,706.33 1434.97,703.57 1435.53,718.582 1436.09,732.209 1436.65,745.547 1437.21,740.918 1437.77,736.72 1438.33,731.902 1438.88,761.657 1439.44,756.325 1440,737.497 1440.56,802.298 1441.12,810.133 1441.68,788.742 1442.24,767.024 1442.8,748.469 1443.36,729.521 1443.92,711.38 1444.48,710.28 1445.04,692.027 1445.6,673.964 1446.15,656.349 1446.71,627.033 1447.27,601.06 1447.83,588.562 1448.39,609.741 1448.95,608.992 1449.51,608.106 1450.07,594.772 1450.63,582.917 1451.19,604.66 1451.75,590.571 1452.31,657.766 1452.87,644.241 1453.42,647.158 1453.98,652.181 1454.54,672.595 1455.1,673.271 1455.66,672.669 1456.22,703.005 1456.78,719.71 1457.34,667.734 1457.9,668.271 1458.46,634.098 1459.02,639.867 1459.58,691.161 1460.14,690.438 1460.7,706.78 1461.25,673.276 1461.81,673.888 1462.37,657.899 1462.93,658.729 1463.49,677.06 1464.05,660.98 1464.61,644.594 1465.17,630.857 1465.73,620.303 1466.29,609.431 1466.85,646.342 1467.41,694.046 1467.97,659.602 1468.52,660.884 1469.08,662.795 1469.64,710.973 1470.2,693.304 1470.76,676.313 1471.32,692.287 1471.88,693.588 1472.44,675.398 1473,693.819 1473.56,695.386 1474.12,697.039 1474.68,699.573 1475.24,713.886 1475.79,694.703 1476.35,691.106 1476.91,674.849 1477.47,658.785 1478.03,674.609 1478.59,657.596 1479.15,660.6 1479.71,660.919 1480.27,644.904 1480.83,629.464 1481.39,620.035 1481.95,589.07 1482.51,597.281 1483.07,585.67 1483.62,590.321 1484.18,562.82 1484.74,569.438 1485.3,576.684 1485.86,618.441 1486.42,622.444 1486.98,642.779 1487.54,632.631 1488.1,669.008 1488.66,670.667 1489.22,672.669 1489.78,671.341 1490.34,658.205 1490.89,645.729 1491.45,649.648 1492.01,655.706 1492.57,657.462 1493.13,657.48 1493.69,614.097 1494.25,621.082 1494.81,611.523 1495.37,625.631 1495.93,611.646 1496.49,616.914 1497.05,601.787 1497.61,579.288 1498.16,583.144 1498.72,590.419 1499.28,597.099 1499.84,619.786 1500.4,623.946 1500.96,613.352 1501.52,618.024 1502.08,623.76 1502.64,609.697 1503.2,613.649 1503.76,636.453 1504.32,641.467 1504.88,627.373 1505.44,648.134 1505.99,667.973 1506.55,655.583 1507.11,627.608 1507.67,644.578 1508.23,644.874 1508.79,665.796 1509.35,667.35 1509.91,633.915 1510.47,622.394 1511.03,644.692 1511.59,647.513 1512.15,685.216 1512.71,700.586 1513.26,716.922 1513.82,732.535 1514.38,731.121 1514.94,712.834 1515.5,724.46 1516.06,721.912 1516.62,721.359 1517.18,718.768 1517.74,703.591 1518.3,718.692 1518.86,731.507 1519.42,728.266 1519.98,756.538 1520.53,765.96 1521.09,762.432 1521.65,760.484 1522.21,742.418 1522.77,738.14 1523.33,752.799 1523.89,747.775 1524.45,758.244 1525.01,757.447 1525.57,766.151 1526.13,746.949 1526.69,743.139 1527.25,724.105 1527.81,720.372 1528.36,729.481 1528.92,742.525 1529.48,739.178 1530.04,751.966 1530.6,732.462 1531.16,762.108 1531.72,757.112 1532.28,767.471 1532.84,776.587 1533.4,771.88 1533.96,781.521 1534.52,774.032 1535.08,753.615 1535.63,718.236 1536.19,681.47 1536.75,701.863 1537.31,679.154 1537.87,693.182 1538.43,691.749 1538.99,706.227 1539.55,691.392 1540.11,657.119 1540.67,657.6 1541.23,655.698 1541.79,641.024 1542.35,641.799 1542.9,660.381 1543.46,706.474 1544.02,717.249 1544.58,700.543 1545.14,717.203 1545.7,683.262 1546.26,700.86 1546.82,690.388 1547.38,691.798 1547.94,692.152 1548.5,692.453 1549.06,708.856 1549.62,753.693 1550.18,751.103 1550.73,746.794 1551.29,711.291 1551.85,707.873 1552.41,691.753 1552.97,710.105 1553.53,671.565 1554.09,692.534 1554.65,659.088 1555.21,674.676 1555.77,613.884 1556.33,618.079 1556.89,639.646 1557.45,641.316 1558,661.241 1558.56,645.936 1559.12,661.652 1559.68,663.643 1560.24,650.564 1560.8,698.749 1561.36,683.301 1561.92,684.6 1562.48,699.809 1563.04,666.328 1563.6,698.555 1564.16,683.313 1564.72,686.143 1565.28,687.14 1565.83,687.22 1566.39,653.706 1566.95,655.629 1567.51,671.896 1568.07,687.446 1568.63,698.831 1569.19,730.747 1569.75,727.01 1570.31,726.944 1570.87,677.935 1571.43,690.717 1571.99,721.418 1572.55,697.943 1573.1,699.282 1573.66,634.03 1574.22,635.495 1574.78,639.104 1575.34,657.668 1575.9,658.003 1576.46,628.049 1577.02,631.057 1577.58,679.307 1578.14,647.03 1578.7,698.006 1579.26,712.657 1579.82,739.246 1580.37,768.635 1580.93,762.634 1581.49,758.411 1582.05,771.688 1582.61,719.183 1583.17,731.482 1583.73,758.718 1584.29,770.689 1584.85,764.481 1585.41,760.917 1585.97,760.035 1586.53,760.584 1587.09,773.404 1587.65,768.437 1588.2,779.871 1588.76,739.189 1589.32,756.161 1589.88,753.163 1590.44,750.293 1591,732.325 1591.56,729.708 1592.12,728.884 1592.68,747.119 1593.24,771.55 1593.8,781.157 1594.36,758.4 1594.92,735.865 1595.47,701.067 1596.03,703.517 1596.59,718.043 1597.15,701.913 1597.71,672.06 1598.27,688.336 1598.83,657.85 1599.39,706.974 1599.95,741.728 1600.51,757.821 1601.07,771.649 1601.63,780.988 1602.19,745.222 1602.74,758.346 1603.3,719.134 1603.86,751.323 1604.42,744.087 1604.98,741.756 1605.54,735.988 1606.1,733.997 1606.66,742.567 1607.22,723.546 1607.78,670.566 1608.34,671.427 1608.9,688.179 1609.46,688.932 1610.02,673.719 1610.57,640.624 1611.13,640.682 1611.69,657.695 1612.25,607.351 1612.81,593.19 1613.37,595.928 1613.93,603.358 1614.49,610.442 1615.05,612.795 1615.61,617.001 1616.17,622.885 1616.73,642.325 1617.29,646.641 1617.84,647.886 1618.4,615.725 1618.96,621.113 1619.52,624.686 1620.08,610.891 1620.64,632.056 1621.2,647.28 1621.76,663.891 1622.32,631.702 1622.88,634.714 1623.44,634.601 1624,637.422 1624.56,621.292 1625.11,671.066 1625.67,705.484 1626.23,708.687 1626.79,709.004 1627.35,723.039 1627.91,720.545 1628.47,699.149 1629.03,682.349 1629.59,685.305 1630.15,667.716 1630.71,670.408 1631.27,706.539 1631.83,691.251 1632.39,642.637 1632.94,646.904 1633.5,634.847 1634.06,636.339 1634.62,637.815 1635.18,607.196 1635.74,597.702 1636.3,622.004 1636.86,642.838 1637.42,641.942 1637.98,645.918 1638.54,630.645 1639.1,616.093 1639.66,637.597 1640.21,622.82 1640.77,624.851 1641.33,628.309 1641.89,628.333 1642.45,651.438 1643.01,621.934 1643.57,644.75 1644.13,666.952 1644.69,687.459 1645.25,702.582 1645.81,648.164 1646.37,653.801 1646.93,672.666 1647.48,672.993 1648.04,673.977 1648.6,690.563 1649.16,674.558 1649.72,672.629 1650.28,657.861 1650.84,609.71 1651.4,615.019 1651.96,589.309 1652.52,593.551 1653.08,600.62 1653.64,606.241 1654.2,626.159 1654.76,611.821 1655.31,602.338 1655.87,640.034 1656.43,656.395 1656.99,655.385 1657.55,657.501 1658.11,679.78 1658.67,679.477 1659.23,681.478 1659.79,678.474 1660.35,663.152 1660.91,629.078 1661.47,644.666 1662.03,665.014 1662.58,697.479 1663.14,682.891 1663.7,717.612 1664.26,751.246 1664.82,760.763 1665.38,755.794 1665.94,754.354 1666.5,732.743 1667.06,733.6 1667.62,716.107 1668.18,711.797 1668.74,705.61 1669.3,687.655 1669.85,688.905 1670.41,689.507 1670.97,689.299 1671.53,709.591 1672.09,708.301 1672.65,723.133 1673.21,720.542 1673.77,736.085 1674.33,750.349 1674.89,764.38 1675.45,727.479 1676.01,707.1 1676.57,720.443 1677.13,696.372 1677.68,693.08 1678.24,710.197 1678.8,738.038 1679.36,770.702 1679.92,750.031 1680.48,729.589 1681.04,711.523 1681.6,742.017 1682.16,740.009 1682.72,721.956 1683.28,718.277 1683.84,696.239 1684.4,692.359 1684.95,675.351 1685.51,624.836 1686.07,646.089 1686.63,648.486 1687.19,646.981 1687.75,648.637 1688.31,632.994 1688.87,638.117 1689.43,625.188 1689.99,628.64 1690.55,665.167 1691.11,665.044 1691.67,680.105 1692.23,652.433 1692.78,668.638 1693.34,687.353 1693.9,688.504 1694.46,721.522 1695.02,717.582 1695.58,745.282 1696.14,760.069 1696.7,754.808 1697.26,769.912 1697.82,733.303 1698.38,749.195 1698.94,752.543 1699.5,720.301 1700.05,707.313 1700.61,740.328 1701.17,736.152 1701.73,765.6 1702.29,778.108 1702.85,790.014 1703.41,782.804 1703.97,793.662 1704.53,787.436 1705.09,748.288 1705.65,729.02 1706.21,724.767 1706.77,676.833 1707.32,643.213 1707.88,644.987 1708.44,646.497 1709,661.721 1709.56,677.389 1710.12,678.682 1710.68,693.159 1711.24,708.297 1711.8,719.696 1712.36,701.803 1712.92,729.986 1713.48,723.98 1714.04,706.563 1714.6,739.763 1715.15,719.993 1715.71,702.779 1716.27,700.051 1716.83,699.695 1717.39,731.775 1717.95,764.584 1718.51,747.005 1719.07,741.815 1719.63,756.557 1720.19,721.713 1720.75,704.7 1721.31,703.769 1721.87,668.898 1722.42,639.777 1722.98,642.574 1723.54,643.287 1724.1,628.644 1724.66,647.402 1725.22,664.88 1725.78,666.527 1726.34,651.806 1726.9,672.275 1727.46,675.578 1728.02,675.743 1728.58,656.424 1729.14,691.297 1729.69,690.507 1730.25,690.926 1730.81,675.055 1731.37,677.717 1731.93,679.122 1732.49,708.275 1733.05,717.011 1733.61,716.058 1734.17,713.585 1734.73,728.894 1735.29,739.967 1735.85,723.206 1736.41,753.126 1736.97,715.787 1737.52,699.802 1738.08,668.051 1738.64,667.345 1739.2,651.489 1739.76,636.686 1740.32,606.735 1740.88,594.76 1741.44,597.347 1742,586.395 1742.56,606.592 1743.12,612.344 1743.68,664.013 1744.24,665.43 1744.79,662.453 1745.35,631.381 1745.91,617.254 1746.47,654.754 1747.03,625.384 1747.59,633.133 1748.15,635.378 1748.71,607.547 1749.27,614.644 1749.83,569.792 1750.39,577.533 1750.95,583.339 1751.51,588.201 1752.06,627.34 1752.62,631.737 1753.18,621.416 1753.74,656.365 1754.3,690.251 1754.86,675.079 1755.42,676.569 1755.98,711.816 1756.54,743.68 1757.1,740.374 1757.66,734.916 1758.22,699.512 1758.78,732.712 1759.34,725.98 1759.89,675.225 1760.45,675.444 1761.01,705.433 1761.57,689.959 1762.13,708.846 1762.69,675.436 1763.25,676.025 1763.81,675.34 1764.37,660.555 1764.93,678.342 1765.49,662.704 1766.05,632.207 1766.61,618.733 1767.16,672.961 1767.72,675.572 1768.28,677.669 1768.84,673.019 1769.4,673.284 1769.96,675.903 1770.52,674.633 1771.08,690.742 1771.64,692.005 1772.2,662.728 1772.76,678.134 1773.32,691.326 1773.88,688.756 1774.43,703.82 1774.99,688.234 1775.55,638.672 1776.11,657.277 1776.67,671.984 1777.23,674.552 1777.79,674.528 1778.35,689.387 1778.91,705.513 1779.47,704.796 1780.03,702.663 1780.59,699.535 1781.15,701.075 1781.71,703.147 1782.26,715.692 1782.82,731.605 1783.38,710.844 1783.94,723.192 1784.5,722.421 1785.06,721.72 1785.62,721.093 1786.18,700.424 1786.74,679.242 1787.3,678.895 1787.86,738.912 1788.42,785.97 1788.98,761.473 1789.53,724.829 1790.09,736.678 1790.65,733.727 1791.21,697.135 1791.77,680.879 1792.33,693.597 1792.89,691.625 1793.45,671.777 1794.01,671.946 1794.57,655.922 1795.13,674.543 1795.69,656.858 1796.25,672.843 1796.8,639.184 1797.36,639.006 1797.92,654.274 1798.48,670.43 1799.04,669.532 1799.6,684.591 1800.16,669.687 1800.72,671.022 1801.28,657.48 1801.84,644.889 1802.4,680.081 1802.96,665.287 1803.52,664.938 1804.08,668.244 1804.63,665.902 1805.19,649.969 1805.75,650.188 1806.31,634.055 1806.87,636.268 1807.43,640.625 1807.99,664.394 1808.55,665.037 1809.11,649.435 1809.67,602.472 1810.23,621.093 1810.79,622.481 1811.35,639.992 1811.9,660.683 1812.46,706.305 1813.02,705.825 1813.58,722.646 1814.14,748.078 1814.7,759.129 1815.26,757.144 1815.82,755.381 1816.38,736.779 1816.94,765.506 1817.5,715.515 1818.06,714.303 1818.62,731.657 1819.18,746.066 1819.73,758.358 1820.29,754.132 1820.85,718.477 1821.41,715.058 1821.97,699.414 1822.53,680.508 1823.09,679.393 1823.65,678.208 1824.21,677.94 1824.77,662.133 1825.33,675.887 1825.89,688.906 1826.45,673.334 1827,707.735 1827.56,739.759 1828.12,749.409 1828.68,715.552 1829.24,648.575 1829.8,666.242 1830.36,652.86 1830.92,687.837 1831.48,705.357 1832.04,688.499 1832.6,706.799 1833.16,736.334 1833.72,687.061 1834.27,688.999 1834.83,721.48 1835.39,707.405 1835.95,689.049 1836.51,687.78 1837.07,707.144 1837.63,721.535 1838.19,736.867 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 687.528 L720.806 687.528 L721.365 687.528 L721.924 687.528 L722.484 687.528 L723.043 687.528 L723.602 687.528 L724.161 687.528 L724.721 687.528 L725.28 687.528 L725.839 687.528 L726.398 687.528 L726.958 687.528 L727.517 687.528 L728.076 687.528 L728.635 687.528 L729.195 687.528 L729.754 687.528 L730.313 687.528 L730.872 687.528 L731.432 687.528 L731.991 687.528 L732.55 687.528 L733.109 687.528 L733.669 687.528 L734.228 687.528 L734.787 687.528 L735.346 687.528 L735.906 687.528 L736.465 687.528 L737.024 687.528 L737.583 687.528 L738.143 687.528 L738.702 687.528 L739.261 687.528 L739.82 687.528 L740.38 687.528 L740.939 687.528 L741.498 687.528 L742.057 687.528 L742.617 687.528 L743.176 687.528 L743.735 687.528 L744.294 687.528 L744.854 687.528 L745.413 687.528 L745.972 687.528 L746.531 687.528 L747.091 687.528 L747.65 687.528 L748.209 687.528 L748.768 687.528 L749.328 687.528 L749.887 687.528 L750.446 687.528 L751.005 687.528 L751.565 687.528 L752.124 687.528 L752.683 687.528 L753.242 687.528 L753.802 687.528 L754.361 687.528 L754.92 687.528 L755.479 687.528 L756.039 687.528 L756.598 687.528 L757.157 687.528 L757.716 687.528 L758.276 687.528 L758.835 687.528 L759.394 687.528 L759.953 687.528 L760.513 687.528 L761.072 687.528 L761.631 687.528 L762.19 687.528 L762.75 687.528 L763.309 687.528 L763.868 687.528 L764.427 687.528 L764.987 687.528 L765.546 687.528 L766.105 687.528 L766.664 687.528 L767.224 687.528 L767.783 687.528 L768.342 687.528 L768.901 687.528 L769.461 687.528 L770.02 687.528 L770.579 687.528 L771.138 687.528 L771.698 687.528 L772.257 687.528 L772.816 687.528 L773.375 687.528 L773.935 687.528 L774.494 687.528 L775.053 687.528 L775.612 687.528 L776.172 687.528 L776.731 687.528 L777.29 687.528 L777.849 687.528 L778.409 687.528 L778.968 687.528 L779.527 687.528 L780.086 687.528 L780.646 687.528 L781.205 687.528 L781.764 687.528 L782.323 687.528 L782.883 687.528 L783.442 687.528 L784.001 687.528 L784.56 687.528 L785.12 687.528 L785.679 687.528 L786.238 687.528 L786.797 687.528 L787.357 687.528 L787.916 687.528 L788.475 687.528 L789.034 687.528 L789.594 687.528 L790.153 687.528 L790.712 687.528 L791.271 687.528 L791.831 687.528 L792.39 687.528 L792.949 687.528 L793.508 687.528 L794.068 687.528 L794.627 687.528 L795.186 687.528 L795.745 687.528 L796.305 687.528 L796.864 687.528 L797.423 687.528 L797.982 687.528 L798.542 687.528 L799.101 687.528 L799.66 687.528 L800.219 687.528 L800.779 687.528 L801.338 687.528 L801.897 687.528 L802.456 687.528 L803.016 687.528 L803.575 687.528 L804.134 687.528 L804.693 687.528 L805.253 687.528 L805.812 687.528 L806.371 687.528 L806.931 687.528 L807.49 687.528 L808.049 687.528 L808.608 687.528 L809.168 687.528 L809.727 687.528 L810.286 687.528 L810.845 687.528 L811.405 687.528 L811.964 687.528 L812.523 687.528 L813.082 687.528 L813.642 687.528 L814.201 687.528 L814.76 687.528 L815.319 687.528 L815.879 687.528 L816.438 687.528 L816.997 687.528 L817.556 687.528 L818.116 687.528 L818.675 687.528 L819.234 687.528 L819.793 687.528 L820.353 687.528 L820.912 687.528 L821.471 687.528 L822.03 687.528 L822.59 687.528 L823.149 687.528 L823.708 687.528 L824.267 687.528 L824.827 687.528 L825.386 687.528 L825.945 687.528 L826.504 687.528 L827.064 687.528 L827.623 687.528 L828.182 687.528 L828.741 687.528 L829.301 687.528 L829.86 687.528 L830.419 687.528 L830.978 687.528 L831.538 687.528 L832.097 687.528 L832.656 687.528 L833.215 687.528 L833.775 687.528 L834.334 687.528 L834.893 687.528 L835.452 687.528 L836.012 687.528 L836.571 687.528 L837.13 687.528 L837.689 687.528 L838.249 687.528 L838.808 687.528 L839.367 687.528 L839.926 687.528 L840.486 687.528 L841.045 687.528 L841.604 687.528 L842.163 687.528 L842.723 687.528 L843.282 687.528 L843.841 687.528 L844.4 687.528 L844.96 687.528 L845.519 687.528 L846.078 687.528 L846.637 687.528 L847.197 687.528 L847.756 687.528 L848.315 687.528 L848.874 687.528 L849.434 687.528 L849.993 687.528 L850.552 687.528 L851.111 687.528 L851.671 687.528 L852.23 687.528 L852.789 687.528 L853.348 687.528 L853.908 687.528 L854.467 687.528 L855.026 687.528 L855.585 687.528 L856.145 687.528 L856.704 687.528 L857.263 687.528 L857.822 687.528 L858.382 687.528 L858.941 687.528 L859.5 687.528 L860.059 687.528 L860.619 687.528 L861.178 687.528 L861.737 687.528 L862.296 687.528 L862.856 687.528 L863.415 687.528 L863.974 687.528 L864.533 687.528 L865.093 687.528 L865.652 687.528 L866.211 687.528 L866.77 687.528 L867.33 687.528 L867.889 687.528 L868.448 687.528 L869.007 687.528 L869.567 687.528 L870.126 687.528 L870.685 687.528 L871.244 687.528 L871.804 687.528 L872.363 687.528 L872.922 687.528 L873.481 687.528 L874.041 687.528 L874.6 687.528 L875.159 687.528 L875.718 687.528 L876.278 687.528 L876.837 687.528 L877.396 687.528 L877.955 687.528 L878.515 687.528 L879.074 687.528 L879.633 687.528 L880.192 687.528 L880.752 687.528 L881.311 687.528 L881.87 687.528 L882.429 687.528 L882.989 687.528 L883.548 687.528 L884.107 687.528 L884.666 687.528 L885.226 687.528 L885.785 687.528 L886.344 687.528 L886.903 687.528 L887.463 687.528 L888.022 687.528 L888.581 687.528 L889.14 687.528 L889.7 687.528 L890.259 687.528 L890.818 687.528 L891.377 687.528 L891.937 687.528 L892.496 687.528 L893.055 687.528 L893.614 687.528 L894.174 687.528 L894.733 687.528 L895.292 687.528 L895.851 687.528 L896.411 687.528 L896.97 687.528 L897.529 687.528 L898.088 687.528 L898.648 687.528 L899.207 687.528 L899.766 687.528 L900.325 687.528 L900.885 687.528 L901.444 687.528 L902.003 687.528 L902.562 687.528 L903.122 687.528 L903.681 687.528 L904.24 687.528 L904.799 687.528 L905.359 687.528 L905.918 687.528 L906.477 687.528 L907.036 687.528 L907.596 687.528 L908.155 687.528 L908.714 687.528 L909.273 687.528 L909.833 687.528 L910.392 687.528 L910.951 687.528 L911.51 687.528 L912.07 687.528 L912.629 687.528 L913.188 687.528 L913.747 687.528 L914.307 687.528 L914.866 687.528 L915.425 687.528 L915.984 687.528 L916.544 687.528 L917.103 687.528 L917.662 687.528 L918.221 687.528 L918.781 687.528 L919.34 687.528 L919.899 687.528 L920.458 687.528 L921.018 687.528 L921.577 687.528 L922.136 687.528 L922.695 687.528 L923.255 687.528 L923.814 687.528 L924.373 687.528 L924.932 687.528 L925.492 687.528 L926.051 687.528 L926.61 687.528 L927.169 687.528 L927.729 687.528 L928.288 687.528 L928.847 687.528 L929.406 687.528 L929.966 687.528 L930.525 687.528 L931.084 687.528 L931.644 687.528 L932.203 687.528 L932.762 687.528 L933.321 687.528 L933.881 687.528 L934.44 687.528 L934.999 687.528 L935.558 687.528 L936.118 687.528 L936.677 687.528 L937.236 687.528 L937.795 687.528 L938.355 687.528 L938.914 687.528 L939.473 687.528 L940.032 687.528 L940.592 687.528 L941.151 687.528 L941.71 687.528 L942.269 687.528 L942.829 687.528 L943.388 687.528 L943.947 687.528 L944.506 687.528 L945.066 687.528 L945.625 687.528 L946.184 687.528 L946.743 687.528 L947.303 687.528 L947.862 687.528 L948.421 687.528 L948.98 687.528 L949.54 687.528 L950.099 687.528 L950.658 687.528 L951.217 687.528 L951.777 687.528 L952.336 687.528 L952.895 687.528 L953.454 687.528 L954.014 687.528 L954.573 687.528 L955.132 687.528 L955.691 687.528 L956.251 687.528 L956.81 687.528 L957.369 687.528 L957.928 687.528 L958.488 687.528 L959.047 687.528 L959.606 687.528 L960.165 687.528 L960.725 687.528 L961.284 687.528 L961.843 687.528 L962.402 687.528 L962.962 687.528 L963.521 687.528 L964.08 687.528 L964.639 687.528 L965.199 687.528 L965.758 687.528 L966.317 687.528 L966.876 687.528 L967.436 687.528 L967.995 687.528 L968.554 687.528 L969.113 687.528 L969.673 687.528 L970.232 687.528 L970.791 687.528 L971.35 687.528 L971.91 687.528 L972.469 687.528 L973.028 687.528 L973.587 687.528 L974.147 687.528 L974.706 687.528 L975.265 687.528 L975.824 687.528 L976.384 687.528 L976.943 687.528 L977.502 687.528 L978.061 687.528 L978.621 687.528 L979.18 687.528 L979.739 687.528 L980.298 687.528 L980.858 687.528 L981.417 687.528 L981.976 687.528 L982.535 687.528 L983.095 687.528 L983.654 687.528 L984.213 687.528 L984.772 687.528 L985.332 687.528 L985.891 687.528 L986.45 687.528 L987.009 687.528 L987.569 687.528 L988.128 687.528 L988.687 687.528 L989.246 687.528 L989.806 687.528 L990.365 687.528 L990.924 687.528 L991.483 687.528 L992.043 687.528 L992.602 687.528 L993.161 687.528 L993.72 687.528 L994.28 687.528 L994.839 687.528 L995.398 687.528 L995.957 687.528 L996.517 687.528 L997.076 687.528 L997.635 687.528 L998.194 687.528 L998.754 687.528 L999.313 687.528 L999.872 687.528 L1000.43 687.528 L1000.99 687.528 L1001.55 687.528 L1002.11 687.528 L1002.67 687.528 L1003.23 687.528 L1003.79 687.528 L1004.35 687.528 L1004.91 687.528 L1005.46 687.528 L1006.02 687.528 L1006.58 687.528 L1007.14 687.528 L1007.7 687.528 L1008.26 687.528 L1008.82 687.528 L1009.38 687.528 L1009.94 687.528 L1010.5 687.528 L1011.06 687.528 L1011.62 687.528 L1012.18 687.528 L1012.73 687.528 L1013.29 687.528 L1013.85 687.528 L1014.41 687.528 L1014.97 687.528 L1015.53 687.528 L1016.09 687.528 L1016.65 687.528 L1017.21 687.528 L1017.77 687.528 L1018.33 687.528 L1018.89 687.528 L1019.45 687.528 L1020.01 687.528 L1020.56 687.528 L1021.12 687.528 L1021.68 687.528 L1022.24 687.528 L1022.8 687.528 L1023.36 687.528 L1023.92 687.528 L1024.48 687.528 L1025.04 687.528 L1025.6 687.528 L1026.16 687.528 L1026.72 687.528 L1027.28 687.528 L1027.83 687.528 L1028.39 687.528 L1028.95 687.528 L1029.51 687.528 L1030.07 687.528 L1030.63 687.528 L1031.19 687.528 L1031.75 687.528 L1032.31 687.528 L1032.87 687.528 L1033.43 687.528 L1033.99 687.528 L1034.55 687.528 L1035.1 687.528 L1035.66 687.528 L1036.22 687.528 L1036.78 687.528 L1037.34 687.528 L1037.9 687.528 L1038.46 687.528 L1039.02 687.528 L1039.58 687.528 L1040.14 687.528 L1040.7 687.528 L1041.26 687.528 L1041.82 687.528 L1042.38 687.528 L1042.93 687.528 L1043.49 687.528 L1044.05 687.528 L1044.61 687.528 L1045.17 687.528 L1045.73 687.528 L1046.29 687.528 L1046.85 687.528 L1047.41 687.528 L1047.97 687.528 L1048.53 687.528 L1049.09 687.528 L1049.65 687.528 L1050.2 687.528 L1050.76 687.528 L1051.32 687.528 L1051.88 687.528 L1052.44 687.528 L1053 687.528 L1053.56 687.528 L1054.12 687.528 L1054.68 687.528 L1055.24 687.528 L1055.8 687.528 L1056.36 687.528 L1056.92 687.528 L1057.48 687.528 L1058.03 687.528 L1058.59 687.528 L1059.15 687.528 L1059.71 687.528 L1060.27 687.528 L1060.83 687.528 L1061.39 687.528 L1061.95 687.528 L1062.51 687.528 L1063.07 687.528 L1063.63 687.528 L1064.19 687.528 L1064.75 687.528 L1065.3 687.528 L1065.86 687.528 L1066.42 687.528 L1066.98 687.528 L1067.54 687.528 L1068.1 687.528 L1068.66 687.528 L1069.22 687.528 L1069.78 687.528 L1070.34 687.528 L1070.9 687.528 L1071.46 687.528 L1072.02 687.528 L1072.57 687.528 L1073.13 687.528 L1073.69 687.528 L1074.25 687.528 L1074.81 687.528 L1075.37 687.528 L1075.93 687.528 L1076.49 687.528 L1077.05 687.528 L1077.61 687.528 L1078.17 687.528 L1078.73 687.528 L1079.29 687.528 L1079.85 687.528 L1080.4 687.528 L1080.96 687.528 L1081.52 687.528 L1082.08 687.528 L1082.64 687.528 L1083.2 687.528 L1083.76 687.528 L1084.32 687.528 L1084.88 687.528 L1085.44 687.528 L1086 687.528 L1086.56 687.528 L1087.12 687.528 L1087.67 687.528 L1088.23 687.528 L1088.79 687.528 L1089.35 687.528 L1089.91 687.528 L1090.47 687.528 L1091.03 687.528 L1091.59 687.528 L1092.15 687.528 L1092.71 687.528 L1093.27 687.528 L1093.83 687.528 L1094.39 687.528 L1094.94 687.528 L1095.5 687.528 L1096.06 687.528 L1096.62 687.528 L1097.18 687.528 L1097.74 687.528 L1098.3 687.528 L1098.86 687.528 L1099.42 687.528 L1099.98 687.528 L1100.54 687.528 L1101.1 687.528 L1101.66 687.528 L1102.22 687.528 L1102.77 687.528 L1103.33 687.528 L1103.89 687.528 L1104.45 687.528 L1105.01 687.528 L1105.57 687.528 L1106.13 687.528 L1106.69 687.528 L1107.25 687.528 L1107.81 687.528 L1108.37 687.528 L1108.93 687.528 L1109.49 687.528 L1110.04 687.528 L1110.6 687.528 L1111.16 687.528 L1111.72 687.528 L1112.28 687.528 L1112.84 687.528 L1113.4 687.528 L1113.96 687.528 L1114.52 687.528 L1115.08 687.528 L1115.64 687.528 L1116.2 687.528 L1116.76 687.528 L1117.31 687.528 L1117.87 687.528 L1118.43 687.528 L1118.99 687.528 L1119.55 687.528 L1120.11 687.528 L1120.67 687.528 L1121.23 687.528 L1121.79 687.528 L1122.35 687.528 L1122.91 687.528 L1123.47 687.528 L1124.03 687.528 L1124.59 687.528 L1125.14 687.528 L1125.7 687.528 L1126.26 687.528 L1126.82 687.528 L1127.38 687.528 L1127.94 687.528 L1128.5 687.528 L1129.06 687.528 L1129.62 687.528 L1130.18 687.528 L1130.74 687.528 L1131.3 687.528 L1131.86 687.528 L1132.41 687.528 L1132.97 687.528 L1133.53 687.528 L1134.09 687.528 L1134.65 687.528 L1135.21 687.528 L1135.77 687.528 L1136.33 687.528 L1136.89 687.528 L1137.45 687.528 L1138.01 687.528 L1138.57 687.528 L1139.13 687.528 L1139.68 687.528 L1140.24 687.528 L1140.8 687.528 L1141.36 687.528 L1141.92 687.528 L1142.48 687.528 L1143.04 687.528 L1143.6 687.528 L1144.16 687.528 L1144.72 687.528 L1145.28 687.528 L1145.84 687.528 L1146.4 687.528 L1146.96 687.528 L1147.51 687.528 L1148.07 687.528 L1148.63 687.528 L1149.19 687.528 L1149.75 687.528 L1150.31 687.528 L1150.87 687.528 L1151.43 687.528 L1151.99 687.528 L1152.55 687.528 L1153.11 687.528 L1153.67 687.528 L1154.23 687.528 L1154.78 687.528 L1155.34 687.528 L1155.9 687.528 L1156.46 687.528 L1157.02 687.528 L1157.58 687.528 L1158.14 687.528 L1158.7 687.528 L1159.26 687.528 L1159.82 687.528 L1160.38 687.528 L1160.94 687.528 L1161.5 687.528 L1162.05 687.528 L1162.61 687.528 L1163.17 687.528 L1163.73 687.528 L1164.29 687.528 L1164.85 687.528 L1165.41 687.528 L1165.97 687.528 L1166.53 687.528 L1167.09 687.528 L1167.65 687.528 L1168.21 687.528 L1168.77 687.528 L1169.33 687.528 L1169.88 687.528 L1170.44 687.528 L1171 687.528 L1171.56 687.528 L1172.12 687.528 L1172.68 687.528 L1173.24 687.528 L1173.8 687.528 L1174.36 687.528 L1174.92 687.528 L1175.48 687.528 L1176.04 687.528 L1176.6 687.528 L1177.15 687.528 L1177.71 687.528 L1178.27 687.528 L1178.83 687.528 L1179.39 687.528 L1179.95 687.528 L1180.51 687.528 L1181.07 687.528 L1181.63 687.528 L1182.19 687.528 L1182.75 687.528 L1183.31 687.528 L1183.87 687.528 L1184.43 687.528 L1184.98 687.528 L1185.54 687.528 L1186.1 687.528 L1186.66 687.528 L1187.22 687.528 L1187.78 687.528 L1188.34 687.528 L1188.9 687.528 L1189.46 687.528 L1190.02 687.528 L1190.58 687.528 L1191.14 687.528 L1191.7 687.528 L1192.25 687.528 L1192.81 687.528 L1193.37 687.528 L1193.93 687.528 L1194.49 687.528 L1195.05 687.528 L1195.61 687.528 L1196.17 687.528 L1196.73 687.528 L1197.29 687.528 L1197.85 687.528 L1198.41 687.528 L1198.97 687.528 L1199.52 687.528 L1200.08 687.528 L1200.64 687.528 L1201.2 687.528 L1201.76 687.528 L1202.32 687.528 L1202.88 687.528 L1203.44 687.528 L1204 687.528 L1204.56 687.528 L1205.12 687.528 L1205.68 687.528 L1206.24 687.528 L1206.8 687.528 L1207.35 687.528 L1207.91 687.528 L1208.47 687.528 L1209.03 687.528 L1209.59 687.528 L1210.15 687.528 L1210.71 687.528 L1211.27 687.528 L1211.83 687.528 L1212.39 687.528 L1212.95 687.528 L1213.51 687.528 L1214.07 687.528 L1214.62 687.528 L1215.18 687.528 L1215.74 687.528 L1216.3 687.528 L1216.86 687.528 L1217.42 687.528 L1217.98 687.528 L1218.54 687.528 L1219.1 687.528 L1219.66 687.528 L1220.22 687.528 L1220.78 687.528 L1221.34 687.528 L1221.89 687.528 L1222.45 687.528 L1223.01 687.528 L1223.57 687.528 L1224.13 687.528 L1224.69 687.528 L1225.25 687.528 L1225.81 687.528 L1226.37 687.528 L1226.93 687.528 L1227.49 687.528 L1228.05 687.528 L1228.61 687.528 L1229.17 687.528 L1229.72 687.528 L1230.28 687.528 L1230.84 687.528 L1231.4 687.528 L1231.96 687.528 L1232.52 687.528 L1233.08 687.528 L1233.64 687.528 L1234.2 687.528 L1234.76 687.528 L1235.32 687.528 L1235.88 687.528 L1236.44 687.528 L1236.99 687.528 L1237.55 687.528 L1238.11 687.528 L1238.67 687.528 L1239.23 687.528 L1239.79 687.528 L1240.35 687.528 L1240.91 687.528 L1241.47 687.528 L1242.03 687.528 L1242.59 687.528 L1243.15 687.528 L1243.71 687.528 L1244.26 687.528 L1244.82 687.528 L1245.38 687.528 L1245.94 687.528 L1246.5 687.528 L1247.06 687.528 L1247.62 687.528 L1248.18 687.528 L1248.74 687.528 L1249.3 687.528 L1249.86 687.528 L1250.42 687.528 L1250.98 687.528 L1251.54 687.528 L1252.09 687.528 L1252.65 687.528 L1253.21 687.528 L1253.77 687.528 L1254.33 687.528 L1254.89 687.528 L1255.45 687.528 L1256.01 687.528 L1256.57 687.528 L1257.13 687.528 L1257.69 687.528 L1258.25 687.528 L1258.81 687.528 L1259.36 687.528 L1259.92 687.528 L1260.48 687.528 L1261.04 687.528 L1261.6 687.528 L1262.16 687.528 L1262.72 687.528 L1263.28 687.528 L1263.84 687.528 L1264.4 687.528 L1264.96 687.528 L1265.52 687.528 L1266.08 687.528 L1266.63 687.528 L1267.19 687.528 L1267.75 687.528 L1268.31 687.528 L1268.87 687.528 L1269.43 687.528 L1269.99 687.528 L1270.55 687.528 L1271.11 687.528 L1271.67 687.528 L1272.23 687.528 L1272.79 687.528 L1273.35 687.528 L1273.91 687.528 L1274.46 687.528 L1275.02 687.528 L1275.58 687.528 L1276.14 687.528 L1276.7 687.528 L1277.26 687.528 L1277.82 687.528 L1278.38 687.528 L1278.94 687.528 L1279.5 687.528 L1280.06 687.528 L1280.62 687.528 L1281.18 687.528 L1281.73 687.528 L1282.29 687.528 L1282.85 687.528 L1283.41 687.528 L1283.97 687.528 L1284.53 687.528 L1285.09 687.528 L1285.65 687.528 L1286.21 687.528 L1286.77 687.528 L1287.33 687.528 L1287.89 687.528 L1288.45 687.528 L1289 687.528 L1289.56 687.528 L1290.12 687.528 L1290.68 687.528 L1291.24 687.528 L1291.8 687.528 L1292.36 687.528 L1292.92 687.528 L1293.48 687.528 L1294.04 687.528 L1294.6 687.528 L1295.16 687.528 L1295.72 687.528 L1296.28 687.528 L1296.83 687.528 L1297.39 687.528 L1297.95 687.528 L1298.51 687.528 L1299.07 687.528 L1299.63 687.528 L1300.19 687.528 L1300.75 687.528 L1301.31 687.528 L1301.87 687.528 L1302.43 687.528 L1302.99 687.528 L1303.55 687.528 L1304.1 687.528 L1304.66 687.528 L1305.22 687.528 L1305.78 687.528 L1306.34 687.528 L1306.9 687.528 L1307.46 687.528 L1308.02 687.528 L1308.58 687.528 L1309.14 687.528 L1309.7 687.528 L1310.26 687.528 L1310.82 687.528 L1311.38 687.528 L1311.93 687.528 L1312.49 687.528 L1313.05 687.528 L1313.61 687.528 L1314.17 687.528 L1314.73 687.528 L1315.29 687.528 L1315.85 687.528 L1316.41 687.528 L1316.97 687.528 L1317.53 687.528 L1318.09 687.528 L1318.65 687.528 L1319.2 687.528 L1319.76 687.528 L1320.32 687.528 L1320.88 687.528 L1321.44 687.528 L1322 687.528 L1322.56 687.528 L1323.12 687.528 L1323.68 687.528 L1324.24 687.528 L1324.8 687.528 L1325.36 687.528 L1325.92 687.528 L1326.47 687.528 L1327.03 687.528 L1327.59 687.528 L1328.15 687.528 L1328.71 687.528 L1329.27 687.528 L1329.83 687.528 L1330.39 687.528 L1330.95 687.528 L1331.51 687.528 L1332.07 687.528 L1332.63 687.528 L1333.19 687.528 L1333.75 687.528 L1334.3 687.528 L1334.86 687.528 L1335.42 687.528 L1335.98 687.528 L1336.54 687.528 L1337.1 687.528 L1337.66 687.528 L1338.22 687.528 L1338.78 687.528 L1339.34 687.528 L1339.9 687.528 L1340.46 687.528 L1341.02 687.528 L1341.57 687.528 L1342.13 687.528 L1342.69 687.528 L1343.25 687.528 L1343.81 687.528 L1344.37 687.528 L1344.93 687.528 L1345.49 687.528 L1346.05 687.528 L1346.61 687.528 L1347.17 687.528 L1347.73 687.528 L1348.29 687.528 L1348.84 687.528 L1349.4 687.528 L1349.96 687.528 L1350.52 687.528 L1351.08 687.528 L1351.64 687.528 L1352.2 687.528 L1352.76 687.528 L1353.32 687.528 L1353.88 687.528 L1354.44 687.528 L1355 687.528 L1355.56 687.528 L1356.12 687.528 L1356.67 687.528 L1357.23 687.528 L1357.79 687.528 L1358.35 687.528 L1358.91 687.528 L1359.47 687.528 L1360.03 687.528 L1360.59 687.528 L1361.15 687.528 L1361.71 687.528 L1362.27 687.528 L1362.83 687.528 L1363.39 687.528 L1363.94 687.528 L1364.5 687.528 L1365.06 687.528 L1365.62 687.528 L1366.18 687.528 L1366.74 687.528 L1367.3 687.528 L1367.86 687.528 L1368.42 687.528 L1368.98 687.528 L1369.54 687.528 L1370.1 687.528 L1370.66 687.528 L1371.21 687.528 L1371.77 687.528 L1372.33 687.528 L1372.89 687.528 L1373.45 687.528 L1374.01 687.528 L1374.57 687.528 L1375.13 687.528 L1375.69 687.528 L1376.25 687.528 L1376.81 687.528 L1377.37 687.528 L1377.93 687.528 L1378.49 687.528 L1379.04 687.528 L1379.6 687.528 L1380.16 687.528 L1380.72 687.528 L1381.28 687.528 L1381.84 687.528 L1382.4 687.528 L1382.96 687.528 L1383.52 687.528 L1384.08 687.528 L1384.64 687.528 L1385.2 687.528 L1385.76 687.528 L1386.31 687.528 L1386.87 687.528 L1387.43 687.528 L1387.99 687.528 L1388.55 687.528 L1389.11 687.528 L1389.67 687.528 L1390.23 687.528 L1390.79 687.528 L1391.35 687.528 L1391.91 687.528 L1392.47 687.528 L1393.03 687.528 L1393.58 687.528 L1394.14 687.528 L1394.7 687.528 L1395.26 687.528 L1395.82 687.528 L1396.38 687.528 L1396.94 687.528 L1397.5 687.528 L1398.06 687.528 L1398.62 687.528 L1399.18 687.528 L1399.74 687.528 L1400.3 687.528 L1400.86 687.528 L1401.41 687.528 L1401.97 687.528 L1402.53 687.528 L1403.09 687.528 L1403.65 687.528 L1404.21 687.528 L1404.77 687.528 L1405.33 687.528 L1405.89 687.528 L1406.45 687.528 L1407.01 687.528 L1407.57 687.528 L1408.13 687.528 L1408.68 687.528 L1409.24 687.528 L1409.8 687.528 L1410.36 687.528 L1410.92 687.528 L1411.48 687.528 L1412.04 687.528 L1412.6 687.528 L1413.16 687.528 L1413.72 687.528 L1414.28 687.528 L1414.84 687.528 L1415.4 687.528 L1415.95 687.528 L1416.51 687.528 L1417.07 687.528 L1417.63 687.528 L1418.19 687.528 L1418.75 687.528 L1419.31 687.528 L1419.87 687.528 L1420.43 687.528 L1420.99 687.528 L1421.55 687.528 L1422.11 687.528 L1422.67 687.528 L1423.23 687.528 L1423.78 687.528 L1424.34 687.528 L1424.9 687.528 L1425.46 687.528 L1426.02 687.528 L1426.58 687.528 L1427.14 687.528 L1427.7 687.528 L1428.26 687.528 L1428.82 687.528 L1429.38 687.528 L1429.94 687.528 L1430.5 687.528 L1431.05 687.528 L1431.61 687.528 L1432.17 687.528 L1432.73 687.528 L1433.29 687.528 L1433.85 687.528 L1434.41 687.528 L1434.97 687.528 L1435.53 687.528 L1436.09 687.528 L1436.65 687.528 L1437.21 687.528 L1437.77 687.528 L1438.33 687.528 L1438.88 687.528 L1439.44 687.528 L1440 687.528 L1440.56 687.528 L1441.12 687.528 L1441.68 687.528 L1442.24 687.528 L1442.8 687.528 L1443.36 687.528 L1443.92 687.528 L1444.48 687.528 L1445.04 687.528 L1445.6 687.528 L1446.15 687.528 L1446.71 687.528 L1447.27 687.528 L1447.83 687.528 L1448.39 687.528 L1448.95 687.528 L1449.51 687.528 L1450.07 687.528 L1450.63 687.528 L1451.19 687.528 L1451.75 687.528 L1452.31 687.528 L1452.87 687.528 L1453.42 687.528 L1453.98 687.528 L1454.54 687.528 L1455.1 687.528 L1455.66 687.528 L1456.22 687.528 L1456.78 687.528 L1457.34 687.528 L1457.9 687.528 L1458.46 687.528 L1459.02 687.528 L1459.58 687.528 L1460.14 687.528 L1460.7 687.528 L1461.25 687.528 L1461.81 687.528 L1462.37 687.528 L1462.93 687.528 L1463.49 687.528 L1464.05 687.528 L1464.61 687.528 L1465.17 687.528 L1465.73 687.528 L1466.29 687.528 L1466.85 687.528 L1467.41 687.528 L1467.97 687.528 L1468.52 687.528 L1469.08 687.528 L1469.64 687.528 L1470.2 687.528 L1470.76 687.528 L1471.32 687.528 L1471.88 687.528 L1472.44 687.528 L1473 687.528 L1473.56 687.528 L1474.12 687.528 L1474.68 687.528 L1475.24 687.528 L1475.79 687.528 L1476.35 687.528 L1476.91 687.528 L1477.47 687.528 L1478.03 687.528 L1478.59 687.528 L1479.15 687.528 L1479.71 687.528 L1480.27 687.528 L1480.83 687.528 L1481.39 687.528 L1481.95 687.528 L1482.51 687.528 L1483.07 687.528 L1483.62 687.528 L1484.18 687.528 L1484.74 687.528 L1485.3 687.528 L1485.86 687.528 L1486.42 687.528 L1486.98 687.528 L1487.54 687.528 L1488.1 687.528 L1488.66 687.528 L1489.22 687.528 L1489.78 687.528 L1490.34 687.528 L1490.89 687.528 L1491.45 687.528 L1492.01 687.528 L1492.57 687.528 L1493.13 687.528 L1493.69 687.528 L1494.25 687.528 L1494.81 687.528 L1495.37 687.528 L1495.93 687.528 L1496.49 687.528 L1497.05 687.528 L1497.61 687.528 L1498.16 687.528 L1498.72 687.528 L1499.28 687.528 L1499.84 687.528 L1500.4 687.528 L1500.96 687.528 L1501.52 687.528 L1502.08 687.528 L1502.64 687.528 L1503.2 687.528 L1503.76 687.528 L1504.32 687.528 L1504.88 687.528 L1505.44 687.528 L1505.99 687.528 L1506.55 687.528 L1507.11 687.528 L1507.67 687.528 L1508.23 687.528 L1508.79 687.528 L1509.35 687.528 L1509.91 687.528 L1510.47 687.528 L1511.03 687.528 L1511.59 687.528 L1512.15 687.528 L1512.71 687.528 L1513.26 687.528 L1513.82 687.528 L1514.38 687.528 L1514.94 687.528 L1515.5 687.528 L1516.06 687.528 L1516.62 687.528 L1517.18 687.528 L1517.74 687.528 L1518.3 687.528 L1518.86 687.528 L1519.42 687.528 L1519.98 687.528 L1520.53 687.528 L1521.09 687.528 L1521.65 687.528 L1522.21 687.528 L1522.77 687.528 L1523.33 687.528 L1523.89 687.528 L1524.45 687.528 L1525.01 687.528 L1525.57 687.528 L1526.13 687.528 L1526.69 687.528 L1527.25 687.528 L1527.81 687.528 L1528.36 687.528 L1528.92 687.528 L1529.48 687.528 L1530.04 687.528 L1530.6 687.528 L1531.16 687.528 L1531.72 687.528 L1532.28 687.528 L1532.84 687.528 L1533.4 687.528 L1533.96 687.528 L1534.52 687.528 L1535.08 687.528 L1535.63 687.528 L1536.19 687.528 L1536.75 687.528 L1537.31 687.528 L1537.87 687.528 L1538.43 687.528 L1538.99 687.528 L1539.55 687.528 L1540.11 687.528 L1540.67 687.528 L1541.23 687.528 L1541.79 687.528 L1542.35 687.528 L1542.9 687.528 L1543.46 687.528 L1544.02 687.528 L1544.58 687.528 L1545.14 687.528 L1545.7 687.528 L1546.26 687.528 L1546.82 687.528 L1547.38 687.528 L1547.94 687.528 L1548.5 687.528 L1549.06 687.528 L1549.62 687.528 L1550.18 687.528 L1550.73 687.528 L1551.29 687.528 L1551.85 687.528 L1552.41 687.528 L1552.97 687.528 L1553.53 687.528 L1554.09 687.528 L1554.65 687.528 L1555.21 687.528 L1555.77 687.528 L1556.33 687.528 L1556.89 687.528 L1557.45 687.528 L1558 687.528 L1558.56 687.528 L1559.12 687.528 L1559.68 687.528 L1560.24 687.528 L1560.8 687.528 L1561.36 687.528 L1561.92 687.528 L1562.48 687.528 L1563.04 687.528 L1563.6 687.528 L1564.16 687.528 L1564.72 687.528 L1565.28 687.528 L1565.83 687.528 L1566.39 687.528 L1566.95 687.528 L1567.51 687.528 L1568.07 687.528 L1568.63 687.528 L1569.19 687.528 L1569.75 687.528 L1570.31 687.528 L1570.87 687.528 L1571.43 687.528 L1571.99 687.528 L1572.55 687.528 L1573.1 687.528 L1573.66 687.528 L1574.22 687.528 L1574.78 687.528 L1575.34 687.528 L1575.9 687.528 L1576.46 687.528 L1577.02 687.528 L1577.58 687.528 L1578.14 687.528 L1578.7 687.528 L1579.26 687.528 L1579.82 687.528 L1580.37 687.528 L1580.93 687.528 L1581.49 687.528 L1582.05 687.528 L1582.61 687.528 L1583.17 687.528 L1583.73 687.528 L1584.29 687.528 L1584.85 687.528 L1585.41 687.528 L1585.97 687.528 L1586.53 687.528 L1587.09 687.528 L1587.65 687.528 L1588.2 687.528 L1588.76 687.528 L1589.32 687.528 L1589.88 687.528 L1590.44 687.528 L1591 687.528 L1591.56 687.528 L1592.12 687.528 L1592.68 687.528 L1593.24 687.528 L1593.8 687.528 L1594.36 687.528 L1594.92 687.528 L1595.47 687.528 L1596.03 687.528 L1596.59 687.528 L1597.15 687.528 L1597.71 687.528 L1598.27 687.528 L1598.83 687.528 L1599.39 687.528 L1599.95 687.528 L1600.51 687.528 L1601.07 687.528 L1601.63 687.528 L1602.19 687.528 L1602.74 687.528 L1603.3 687.528 L1603.86 687.528 L1604.42 687.528 L1604.98 687.528 L1605.54 687.528 L1606.1 687.528 L1606.66 687.528 L1607.22 687.528 L1607.78 687.528 L1608.34 687.528 L1608.9 687.528 L1609.46 687.528 L1610.02 687.528 L1610.57 687.528 L1611.13 687.528 L1611.69 687.528 L1612.25 687.528 L1612.81 687.528 L1613.37 687.528 L1613.93 687.528 L1614.49 687.528 L1615.05 687.528 L1615.61 687.528 L1616.17 687.528 L1616.73 687.528 L1617.29 687.528 L1617.84 687.528 L1618.4 687.528 L1618.96 687.528 L1619.52 687.528 L1620.08 687.528 L1620.64 687.528 L1621.2 687.528 L1621.76 687.528 L1622.32 687.528 L1622.88 687.528 L1623.44 687.528 L1624 687.528 L1624.56 687.528 L1625.11 687.528 L1625.67 687.528 L1626.23 687.528 L1626.79 687.528 L1627.35 687.528 L1627.91 687.528 L1628.47 687.528 L1629.03 687.528 L1629.59 687.528 L1630.15 687.528 L1630.71 687.528 L1631.27 687.528 L1631.83 687.528 L1632.39 687.528 L1632.94 687.528 L1633.5 687.528 L1634.06 687.528 L1634.62 687.528 L1635.18 687.528 L1635.74 687.528 L1636.3 687.528 L1636.86 687.528 L1637.42 687.528 L1637.98 687.528 L1638.54 687.528 L1639.1 687.528 L1639.66 687.528 L1640.21 687.528 L1640.77 687.528 L1641.33 687.528 L1641.89 687.528 L1642.45 687.528 L1643.01 687.528 L1643.57 687.528 L1644.13 687.528 L1644.69 687.528 L1645.25 687.528 L1645.81 687.528 L1646.37 687.528 L1646.93 687.528 L1647.48 687.528 L1648.04 687.528 L1648.6 687.528 L1649.16 687.528 L1649.72 687.528 L1650.28 687.528 L1650.84 687.528 L1651.4 687.528 L1651.96 687.528 L1652.52 687.528 L1653.08 687.528 L1653.64 687.528 L1654.2 687.528 L1654.76 687.528 L1655.31 687.528 L1655.87 687.528 L1656.43 687.528 L1656.99 687.528 L1657.55 687.528 L1658.11 687.528 L1658.67 687.528 L1659.23 687.528 L1659.79 687.528 L1660.35 687.528 L1660.91 687.528 L1661.47 687.528 L1662.03 687.528 L1662.58 687.528 L1663.14 687.528 L1663.7 687.528 L1664.26 687.528 L1664.82 687.528 L1665.38 687.528 L1665.94 687.528 L1666.5 687.528 L1667.06 687.528 L1667.62 687.528 L1668.18 687.528 L1668.74 687.528 L1669.3 687.528 L1669.85 687.528 L1670.41 687.528 L1670.97 687.528 L1671.53 687.528 L1672.09 687.528 L1672.65 687.528 L1673.21 687.528 L1673.77 687.528 L1674.33 687.528 L1674.89 687.528 L1675.45 687.528 L1676.01 687.528 L1676.57 687.528 L1677.13 687.528 L1677.68 687.528 L1678.24 687.528 L1678.8 687.528 L1679.36 687.528 L1679.92 687.528 L1680.48 687.528 L1681.04 687.528 L1681.6 687.528 L1682.16 687.528 L1682.72 687.528 L1683.28 687.528 L1683.84 687.528 L1684.4 687.528 L1684.95 687.528 L1685.51 687.528 L1686.07 687.528 L1686.63 687.528 L1687.19 687.528 L1687.75 687.528 L1688.31 687.528 L1688.87 687.528 L1689.43 687.528 L1689.99 687.528 L1690.55 687.528 L1691.11 687.528 L1691.67 687.528 L1692.23 687.528 L1692.78 687.528 L1693.34 687.528 L1693.9 687.528 L1694.46 687.528 L1695.02 687.528 L1695.58 687.528 L1696.14 687.528 L1696.7 687.528 L1697.26 687.528 L1697.82 687.528 L1698.38 687.528 L1698.94 687.528 L1699.5 687.528 L1700.05 687.528 L1700.61 687.528 L1701.17 687.528 L1701.73 687.528 L1702.29 687.528 L1702.85 687.528 L1703.41 687.528 L1703.97 687.528 L1704.53 687.528 L1705.09 687.528 L1705.65 687.528 L1706.21 687.528 L1706.77 687.528 L1707.32 687.528 L1707.88 687.528 L1708.44 687.528 L1709 687.528 L1709.56 687.528 L1710.12 687.528 L1710.68 687.528 L1711.24 687.528 L1711.8 687.528 L1712.36 687.528 L1712.92 687.528 L1713.48 687.528 L1714.04 687.528 L1714.6 687.528 L1715.15 687.528 L1715.71 687.528 L1716.27 687.528 L1716.83 687.528 L1717.39 687.528 L1717.95 687.528 L1718.51 687.528 L1719.07 687.528 L1719.63 687.528 L1720.19 687.528 L1720.75 687.528 L1721.31 687.528 L1721.87 687.528 L1722.42 687.528 L1722.98 687.528 L1723.54 687.528 L1724.1 687.528 L1724.66 687.528 L1725.22 687.528 L1725.78 687.528 L1726.34 687.528 L1726.9 687.528 L1727.46 687.528 L1728.02 687.528 L1728.58 687.528 L1729.14 687.528 L1729.69 687.528 L1730.25 687.528 L1730.81 687.528 L1731.37 687.528 L1731.93 687.528 L1732.49 687.528 L1733.05 687.528 L1733.61 687.528 L1734.17 687.528 L1734.73 687.528 L1735.29 687.528 L1735.85 687.528 L1736.41 687.528 L1736.97 687.528 L1737.52 687.528 L1738.08 687.528 L1738.64 687.528 L1739.2 687.528 L1739.76 687.528 L1740.32 687.528 L1740.88 687.528 L1741.44 687.528 L1742 687.528 L1742.56 687.528 L1743.12 687.528 L1743.68 687.528 L1744.24 687.528 L1744.79 687.528 L1745.35 687.528 L1745.91 687.528 L1746.47 687.528 L1747.03 687.528 L1747.59 687.528 L1748.15 687.528 L1748.71 687.528 L1749.27 687.528 L1749.83 687.528 L1750.39 687.528 L1750.95 687.528 L1751.51 687.528 L1752.06 687.528 L1752.62 687.528 L1753.18 687.528 L1753.74 687.528 L1754.3 687.528 L1754.86 687.528 L1755.42 687.528 L1755.98 687.528 L1756.54 687.528 L1757.1 687.528 L1757.66 687.528 L1758.22 687.528 L1758.78 687.528 L1759.34 687.528 L1759.89 687.528 L1760.45 687.528 L1761.01 687.528 L1761.57 687.528 L1762.13 687.528 L1762.69 687.528 L1763.25 687.528 L1763.81 687.528 L1764.37 687.528 L1764.93 687.528 L1765.49 687.528 L1766.05 687.528 L1766.61 687.528 L1767.16 687.528 L1767.72 687.528 L1768.28 687.528 L1768.84 687.528 L1769.4 687.528 L1769.96 687.528 L1770.52 687.528 L1771.08 687.528 L1771.64 687.528 L1772.2 687.528 L1772.76 687.528 L1773.32 687.528 L1773.88 687.528 L1774.43 687.528 L1774.99 687.528 L1775.55 687.528 L1776.11 687.528 L1776.67 687.528 L1777.23 687.528 L1777.79 687.528 L1778.35 687.528 L1778.91 687.528 L1779.47 687.528 L1780.03 687.528 L1780.59 687.528 L1781.15 687.528 L1781.71 687.528 L1782.26 687.528 L1782.82 687.528 L1783.38 687.528 L1783.94 687.528 L1784.5 687.528 L1785.06 687.528 L1785.62 687.528 L1786.18 687.528 L1786.74 687.528 L1787.3 687.528 L1787.86 687.528 L1788.42 687.528 L1788.98 687.528 L1789.53 687.528 L1790.09 687.528 L1790.65 687.528 L1791.21 687.528 L1791.77 687.528 L1792.33 687.528 L1792.89 687.528 L1793.45 687.528 L1794.01 687.528 L1794.57 687.528 L1795.13 687.528 L1795.69 687.528 L1796.25 687.528 L1796.8 687.528 L1797.36 687.528 L1797.92 687.528 L1798.48 687.528 L1799.04 687.528 L1799.6 687.528 L1800.16 687.528 L1800.72 687.528 L1801.28 687.528 L1801.84 687.528 L1802.4 687.528 L1802.96 687.528 L1803.52 687.528 L1804.08 687.528 L1804.63 687.528 L1805.19 687.528 L1805.75 687.528 L1806.31 687.528 L1806.87 687.528 L1807.43 687.528 L1807.99 687.528 L1808.55 687.528 L1809.11 687.528 L1809.67 687.528 L1810.23 687.528 L1810.79 687.528 L1811.35 687.528 L1811.9 687.528 L1812.46 687.528 L1813.02 687.528 L1813.58 687.528 L1814.14 687.528 L1814.7 687.528 L1815.26 687.528 L1815.82 687.528 L1816.38 687.528 L1816.94 687.528 L1817.5 687.528 L1818.06 687.528 L1818.62 687.528 L1819.18 687.528 L1819.73 687.528 L1820.29 687.528 L1820.85 687.528 L1821.41 687.528 L1821.97 687.528 L1822.53 687.528 L1823.09 687.528 L1823.65 687.528 L1824.21 687.528 L1824.77 687.528 L1825.33 687.528 L1825.89 687.528 L1826.45 687.528 L1827 687.528 L1827.56 687.528 L1828.12 687.528 L1828.68 687.528 L1829.24 687.528 L1829.8 687.528 L1830.36 687.528 L1830.92 687.528 L1831.48 687.528 L1832.04 687.528 L1832.6 687.528 L1833.16 687.528 L1833.72 687.528 L1834.27 687.528 L1834.83 687.528 L1835.39 687.528 L1835.95 687.528 L1836.51 687.528 L1837.07 687.528 L1837.63 687.528 L1838.19 687.528 L1838.19 679.396 L1837.63 679.396 L1837.07 679.396 L1836.51 679.396 L1835.95 679.396 L1835.39 679.396 L1834.83 679.396 L1834.27 679.396 L1833.72 679.396 L1833.16 679.396 L1832.6 679.396 L1832.04 679.396 L1831.48 679.396 L1830.92 679.396 L1830.36 679.396 L1829.8 679.396 L1829.24 679.396 L1828.68 679.396 L1828.12 679.396 L1827.56 679.396 L1827 679.396 L1826.45 679.396 L1825.89 679.396 L1825.33 679.396 L1824.77 679.396 L1824.21 679.396 L1823.65 679.396 L1823.09 679.396 L1822.53 679.396 L1821.97 679.396 L1821.41 679.396 L1820.85 679.396 L1820.29 679.396 L1819.73 679.396 L1819.18 679.396 L1818.62 679.396 L1818.06 679.396 L1817.5 679.396 L1816.94 679.396 L1816.38 679.396 L1815.82 679.396 L1815.26 679.396 L1814.7 679.396 L1814.14 679.396 L1813.58 679.396 L1813.02 679.396 L1812.46 679.396 L1811.9 679.396 L1811.35 679.396 L1810.79 679.396 L1810.23 679.396 L1809.67 679.396 L1809.11 679.396 L1808.55 679.396 L1807.99 679.396 L1807.43 679.396 L1806.87 679.396 L1806.31 679.396 L1805.75 679.396 L1805.19 679.396 L1804.63 679.396 L1804.08 679.396 L1803.52 679.396 L1802.96 679.396 L1802.4 679.396 L1801.84 679.396 L1801.28 679.396 L1800.72 679.396 L1800.16 679.396 L1799.6 679.396 L1799.04 679.396 L1798.48 679.396 L1797.92 679.396 L1797.36 679.396 L1796.8 679.396 L1796.25 679.396 L1795.69 679.396 L1795.13 679.396 L1794.57 679.396 L1794.01 679.396 L1793.45 679.396 L1792.89 679.396 L1792.33 679.396 L1791.77 679.396 L1791.21 679.396 L1790.65 679.396 L1790.09 679.396 L1789.53 679.396 L1788.98 679.396 L1788.42 679.396 L1787.86 679.396 L1787.3 679.396 L1786.74 679.396 L1786.18 679.396 L1785.62 679.396 L1785.06 679.396 L1784.5 679.396 L1783.94 679.396 L1783.38 679.396 L1782.82 679.396 L1782.26 679.396 L1781.71 679.396 L1781.15 679.396 L1780.59 679.396 L1780.03 679.396 L1779.47 679.396 L1778.91 679.396 L1778.35 679.396 L1777.79 679.396 L1777.23 679.396 L1776.67 679.396 L1776.11 679.396 L1775.55 679.396 L1774.99 679.396 L1774.43 679.396 L1773.88 679.396 L1773.32 679.396 L1772.76 679.396 L1772.2 679.396 L1771.64 679.396 L1771.08 679.396 L1770.52 679.396 L1769.96 679.396 L1769.4 679.396 L1768.84 679.396 L1768.28 679.396 L1767.72 679.396 L1767.16 679.396 L1766.61 679.396 L1766.05 679.396 L1765.49 679.396 L1764.93 679.396 L1764.37 679.396 L1763.81 679.396 L1763.25 679.396 L1762.69 679.396 L1762.13 679.396 L1761.57 679.396 L1761.01 679.396 L1760.45 679.396 L1759.89 679.396 L1759.34 679.396 L1758.78 679.396 L1758.22 679.396 L1757.66 679.396 L1757.1 679.396 L1756.54 679.396 L1755.98 679.396 L1755.42 679.396 L1754.86 679.396 L1754.3 679.396 L1753.74 679.396 L1753.18 679.396 L1752.62 679.396 L1752.06 679.396 L1751.51 679.396 L1750.95 679.396 L1750.39 679.396 L1749.83 679.396 L1749.27 679.396 L1748.71 679.396 L1748.15 679.396 L1747.59 679.396 L1747.03 679.396 L1746.47 679.396 L1745.91 679.396 L1745.35 679.396 L1744.79 679.396 L1744.24 679.396 L1743.68 679.396 L1743.12 679.396 L1742.56 679.396 L1742 679.396 L1741.44 679.396 L1740.88 679.396 L1740.32 679.396 L1739.76 679.396 L1739.2 679.396 L1738.64 679.396 L1738.08 679.396 L1737.52 679.396 L1736.97 679.396 L1736.41 679.396 L1735.85 679.396 L1735.29 679.396 L1734.73 679.396 L1734.17 679.396 L1733.61 679.396 L1733.05 679.396 L1732.49 679.396 L1731.93 679.396 L1731.37 679.396 L1730.81 679.396 L1730.25 679.396 L1729.69 679.396 L1729.14 679.396 L1728.58 679.396 L1728.02 679.396 L1727.46 679.396 L1726.9 679.396 L1726.34 679.396 L1725.78 679.396 L1725.22 679.396 L1724.66 679.396 L1724.1 679.396 L1723.54 679.396 L1722.98 679.396 L1722.42 679.396 L1721.87 679.396 L1721.31 679.396 L1720.75 679.396 L1720.19 679.396 L1719.63 679.396 L1719.07 679.396 L1718.51 679.396 L1717.95 679.396 L1717.39 679.396 L1716.83 679.396 L1716.27 679.396 L1715.71 679.396 L1715.15 679.396 L1714.6 679.396 L1714.04 679.396 L1713.48 679.396 L1712.92 679.396 L1712.36 679.396 L1711.8 679.396 L1711.24 679.396 L1710.68 679.396 L1710.12 679.396 L1709.56 679.396 L1709 679.396 L1708.44 679.396 L1707.88 679.396 L1707.32 679.396 L1706.77 679.396 L1706.21 679.396 L1705.65 679.396 L1705.09 679.396 L1704.53 679.396 L1703.97 679.396 L1703.41 679.396 L1702.85 679.396 L1702.29 679.396 L1701.73 679.396 L1701.17 679.396 L1700.61 679.396 L1700.05 679.396 L1699.5 679.396 L1698.94 679.396 L1698.38 679.396 L1697.82 679.396 L1697.26 679.396 L1696.7 679.396 L1696.14 679.396 L1695.58 679.396 L1695.02 679.396 L1694.46 679.396 L1693.9 679.396 L1693.34 679.396 L1692.78 679.396 L1692.23 679.396 L1691.67 679.396 L1691.11 679.396 L1690.55 679.396 L1689.99 679.396 L1689.43 679.396 L1688.87 679.396 L1688.31 679.396 L1687.75 679.396 L1687.19 679.396 L1686.63 679.396 L1686.07 679.396 L1685.51 679.396 L1684.95 679.396 L1684.4 679.396 L1683.84 679.396 L1683.28 679.396 L1682.72 679.396 L1682.16 679.396 L1681.6 679.396 L1681.04 679.396 L1680.48 679.396 L1679.92 679.396 L1679.36 679.396 L1678.8 679.396 L1678.24 679.396 L1677.68 679.396 L1677.13 679.396 L1676.57 679.396 L1676.01 679.396 L1675.45 679.396 L1674.89 679.396 L1674.33 679.396 L1673.77 679.396 L1673.21 679.396 L1672.65 679.396 L1672.09 679.396 L1671.53 679.396 L1670.97 679.396 L1670.41 679.396 L1669.85 679.396 L1669.3 679.396 L1668.74 679.396 L1668.18 679.396 L1667.62 679.396 L1667.06 679.396 L1666.5 679.396 L1665.94 679.396 L1665.38 679.396 L1664.82 679.396 L1664.26 679.396 L1663.7 679.396 L1663.14 679.396 L1662.58 679.396 L1662.03 679.396 L1661.47 679.396 L1660.91 679.396 L1660.35 679.396 L1659.79 679.396 L1659.23 679.396 L1658.67 679.396 L1658.11 679.396 L1657.55 679.396 L1656.99 679.396 L1656.43 679.396 L1655.87 679.396 L1655.31 679.396 L1654.76 679.396 L1654.2 679.396 L1653.64 679.396 L1653.08 679.396 L1652.52 679.396 L1651.96 679.396 L1651.4 679.396 L1650.84 679.396 L1650.28 679.396 L1649.72 679.396 L1649.16 679.396 L1648.6 679.396 L1648.04 679.396 L1647.48 679.396 L1646.93 679.396 L1646.37 679.396 L1645.81 679.396 L1645.25 679.396 L1644.69 679.396 L1644.13 679.396 L1643.57 679.396 L1643.01 679.396 L1642.45 679.396 L1641.89 679.396 L1641.33 679.396 L1640.77 679.396 L1640.21 679.396 L1639.66 679.396 L1639.1 679.396 L1638.54 679.396 L1637.98 679.396 L1637.42 679.396 L1636.86 679.396 L1636.3 679.396 L1635.74 679.396 L1635.18 679.396 L1634.62 679.396 L1634.06 679.396 L1633.5 679.396 L1632.94 679.396 L1632.39 679.396 L1631.83 679.396 L1631.27 679.396 L1630.71 679.396 L1630.15 679.396 L1629.59 679.396 L1629.03 679.396 L1628.47 679.396 L1627.91 679.396 L1627.35 679.396 L1626.79 679.396 L1626.23 679.396 L1625.67 679.396 L1625.11 679.396 L1624.56 679.396 L1624 679.396 L1623.44 679.396 L1622.88 679.396 L1622.32 679.396 L1621.76 679.396 L1621.2 679.396 L1620.64 679.396 L1620.08 679.396 L1619.52 679.396 L1618.96 679.396 L1618.4 679.396 L1617.84 679.396 L1617.29 679.396 L1616.73 679.396 L1616.17 679.396 L1615.61 679.396 L1615.05 679.396 L1614.49 679.396 L1613.93 679.396 L1613.37 679.396 L1612.81 679.396 L1612.25 679.396 L1611.69 679.396 L1611.13 679.396 L1610.57 679.396 L1610.02 679.396 L1609.46 679.396 L1608.9 679.396 L1608.34 679.396 L1607.78 679.396 L1607.22 679.396 L1606.66 679.396 L1606.1 679.396 L1605.54 679.396 L1604.98 679.396 L1604.42 679.396 L1603.86 679.396 L1603.3 679.396 L1602.74 679.396 L1602.19 679.396 L1601.63 679.396 L1601.07 679.396 L1600.51 679.396 L1599.95 679.396 L1599.39 679.396 L1598.83 679.396 L1598.27 679.396 L1597.71 679.396 L1597.15 679.396 L1596.59 679.396 L1596.03 679.396 L1595.47 679.396 L1594.92 679.396 L1594.36 679.396 L1593.8 679.396 L1593.24 679.396 L1592.68 679.396 L1592.12 679.396 L1591.56 679.396 L1591 679.396 L1590.44 679.396 L1589.88 679.396 L1589.32 679.396 L1588.76 679.396 L1588.2 679.396 L1587.65 679.396 L1587.09 679.396 L1586.53 679.396 L1585.97 679.396 L1585.41 679.396 L1584.85 679.396 L1584.29 679.396 L1583.73 679.396 L1583.17 679.396 L1582.61 679.396 L1582.05 679.396 L1581.49 679.396 L1580.93 679.396 L1580.37 679.396 L1579.82 679.396 L1579.26 679.396 L1578.7 679.396 L1578.14 679.396 L1577.58 679.396 L1577.02 679.396 L1576.46 679.396 L1575.9 679.396 L1575.34 679.396 L1574.78 679.396 L1574.22 679.396 L1573.66 679.396 L1573.1 679.396 L1572.55 679.396 L1571.99 679.396 L1571.43 679.396 L1570.87 679.396 L1570.31 679.396 L1569.75 679.396 L1569.19 679.396 L1568.63 679.396 L1568.07 679.396 L1567.51 679.396 L1566.95 679.396 L1566.39 679.396 L1565.83 679.396 L1565.28 679.396 L1564.72 679.396 L1564.16 679.396 L1563.6 679.396 L1563.04 679.396 L1562.48 679.396 L1561.92 679.396 L1561.36 679.396 L1560.8 679.396 L1560.24 679.396 L1559.68 679.396 L1559.12 679.396 L1558.56 679.396 L1558 679.396 L1557.45 679.396 L1556.89 679.396 L1556.33 679.396 L1555.77 679.396 L1555.21 679.396 L1554.65 679.396 L1554.09 679.396 L1553.53 679.396 L1552.97 679.396 L1552.41 679.396 L1551.85 679.396 L1551.29 679.396 L1550.73 679.396 L1550.18 679.396 L1549.62 679.396 L1549.06 679.396 L1548.5 679.396 L1547.94 679.396 L1547.38 679.396 L1546.82 679.396 L1546.26 679.396 L1545.7 679.396 L1545.14 679.396 L1544.58 679.396 L1544.02 679.396 L1543.46 679.396 L1542.9 679.396 L1542.35 679.396 L1541.79 679.396 L1541.23 679.396 L1540.67 679.396 L1540.11 679.396 L1539.55 679.396 L1538.99 679.396 L1538.43 679.396 L1537.87 679.396 L1537.31 679.396 L1536.75 679.396 L1536.19 679.396 L1535.63 679.396 L1535.08 679.396 L1534.52 679.396 L1533.96 679.396 L1533.4 679.396 L1532.84 679.396 L1532.28 679.396 L1531.72 679.396 L1531.16 679.396 L1530.6 679.396 L1530.04 679.396 L1529.48 679.396 L1528.92 679.396 L1528.36 679.396 L1527.81 679.396 L1527.25 679.396 L1526.69 679.396 L1526.13 679.396 L1525.57 679.396 L1525.01 679.396 L1524.45 679.396 L1523.89 679.396 L1523.33 679.396 L1522.77 679.396 L1522.21 679.396 L1521.65 679.396 L1521.09 679.396 L1520.53 679.396 L1519.98 679.396 L1519.42 679.396 L1518.86 679.396 L1518.3 679.396 L1517.74 679.396 L1517.18 679.396 L1516.62 679.396 L1516.06 679.396 L1515.5 679.396 L1514.94 679.396 L1514.38 679.396 L1513.82 679.396 L1513.26 679.396 L1512.71 679.396 L1512.15 679.396 L1511.59 679.396 L1511.03 679.396 L1510.47 679.396 L1509.91 679.396 L1509.35 679.396 L1508.79 679.396 L1508.23 679.396 L1507.67 679.396 L1507.11 679.396 L1506.55 679.396 L1505.99 679.396 L1505.44 679.396 L1504.88 679.396 L1504.32 679.396 L1503.76 679.396 L1503.2 679.396 L1502.64 679.396 L1502.08 679.396 L1501.52 679.396 L1500.96 679.396 L1500.4 679.396 L1499.84 679.396 L1499.28 679.396 L1498.72 679.396 L1498.16 679.396 L1497.61 679.396 L1497.05 679.396 L1496.49 679.396 L1495.93 679.396 L1495.37 679.396 L1494.81 679.396 L1494.25 679.396 L1493.69 679.396 L1493.13 679.396 L1492.57 679.396 L1492.01 679.396 L1491.45 679.396 L1490.89 679.396 L1490.34 679.396 L1489.78 679.396 L1489.22 679.396 L1488.66 679.396 L1488.1 679.396 L1487.54 679.396 L1486.98 679.396 L1486.42 679.396 L1485.86 679.396 L1485.3 679.396 L1484.74 679.396 L1484.18 679.396 L1483.62 679.396 L1483.07 679.396 L1482.51 679.396 L1481.95 679.396 L1481.39 679.396 L1480.83 679.396 L1480.27 679.396 L1479.71 679.396 L1479.15 679.396 L1478.59 679.396 L1478.03 679.396 L1477.47 679.396 L1476.91 679.396 L1476.35 679.396 L1475.79 679.396 L1475.24 679.396 L1474.68 679.396 L1474.12 679.396 L1473.56 679.396 L1473 679.396 L1472.44 679.396 L1471.88 679.396 L1471.32 679.396 L1470.76 679.396 L1470.2 679.396 L1469.64 679.396 L1469.08 679.396 L1468.52 679.396 L1467.97 679.396 L1467.41 679.396 L1466.85 679.396 L1466.29 679.396 L1465.73 679.396 L1465.17 679.396 L1464.61 679.396 L1464.05 679.396 L1463.49 679.396 L1462.93 679.396 L1462.37 679.396 L1461.81 679.396 L1461.25 679.396 L1460.7 679.396 L1460.14 679.396 L1459.58 679.396 L1459.02 679.396 L1458.46 679.396 L1457.9 679.396 L1457.34 679.396 L1456.78 679.396 L1456.22 679.396 L1455.66 679.396 L1455.1 679.396 L1454.54 679.396 L1453.98 679.396 L1453.42 679.396 L1452.87 679.396 L1452.31 679.396 L1451.75 679.396 L1451.19 679.396 L1450.63 679.396 L1450.07 679.396 L1449.51 679.396 L1448.95 679.396 L1448.39 679.396 L1447.83 679.396 L1447.27 679.396 L1446.71 679.396 L1446.15 679.396 L1445.6 679.396 L1445.04 679.396 L1444.48 679.396 L1443.92 679.396 L1443.36 679.396 L1442.8 679.396 L1442.24 679.396 L1441.68 679.396 L1441.12 679.396 L1440.56 679.396 L1440 679.396 L1439.44 679.396 L1438.88 679.396 L1438.33 679.396 L1437.77 679.396 L1437.21 679.396 L1436.65 679.396 L1436.09 679.396 L1435.53 679.396 L1434.97 679.396 L1434.41 679.396 L1433.85 679.396 L1433.29 679.396 L1432.73 679.396 L1432.17 679.396 L1431.61 679.396 L1431.05 679.396 L1430.5 679.396 L1429.94 679.396 L1429.38 679.396 L1428.82 679.396 L1428.26 679.396 L1427.7 679.396 L1427.14 679.396 L1426.58 679.396 L1426.02 679.396 L1425.46 679.396 L1424.9 679.396 L1424.34 679.396 L1423.78 679.396 L1423.23 679.396 L1422.67 679.396 L1422.11 679.396 L1421.55 679.396 L1420.99 679.396 L1420.43 679.396 L1419.87 679.396 L1419.31 679.396 L1418.75 679.396 L1418.19 679.396 L1417.63 679.396 L1417.07 679.396 L1416.51 679.396 L1415.95 679.396 L1415.4 679.396 L1414.84 679.396 L1414.28 679.396 L1413.72 679.396 L1413.16 679.396 L1412.6 679.396 L1412.04 679.396 L1411.48 679.396 L1410.92 679.396 L1410.36 679.396 L1409.8 679.396 L1409.24 679.396 L1408.68 679.396 L1408.13 679.396 L1407.57 679.396 L1407.01 679.396 L1406.45 679.396 L1405.89 679.396 L1405.33 679.396 L1404.77 679.396 L1404.21 679.396 L1403.65 679.396 L1403.09 679.396 L1402.53 679.396 L1401.97 679.396 L1401.41 679.396 L1400.86 679.396 L1400.3 679.396 L1399.74 679.396 L1399.18 679.396 L1398.62 679.396 L1398.06 679.396 L1397.5 679.396 L1396.94 679.396 L1396.38 679.396 L1395.82 679.396 L1395.26 679.396 L1394.7 679.396 L1394.14 679.396 L1393.58 679.396 L1393.03 679.396 L1392.47 679.396 L1391.91 679.396 L1391.35 679.396 L1390.79 679.396 L1390.23 679.396 L1389.67 679.396 L1389.11 679.396 L1388.55 679.396 L1387.99 679.396 L1387.43 679.396 L1386.87 679.396 L1386.31 679.396 L1385.76 679.396 L1385.2 679.396 L1384.64 679.396 L1384.08 679.396 L1383.52 679.396 L1382.96 679.396 L1382.4 679.396 L1381.84 679.396 L1381.28 679.396 L1380.72 679.396 L1380.16 679.396 L1379.6 679.396 L1379.04 679.396 L1378.49 679.396 L1377.93 679.396 L1377.37 679.396 L1376.81 679.396 L1376.25 679.396 L1375.69 679.396 L1375.13 679.396 L1374.57 679.396 L1374.01 679.396 L1373.45 679.396 L1372.89 679.396 L1372.33 679.396 L1371.77 679.396 L1371.21 679.396 L1370.66 679.396 L1370.1 679.396 L1369.54 679.396 L1368.98 679.396 L1368.42 679.396 L1367.86 679.396 L1367.3 679.396 L1366.74 679.396 L1366.18 679.396 L1365.62 679.396 L1365.06 679.396 L1364.5 679.396 L1363.94 679.396 L1363.39 679.396 L1362.83 679.396 L1362.27 679.396 L1361.71 679.396 L1361.15 679.396 L1360.59 679.396 L1360.03 679.396 L1359.47 679.396 L1358.91 679.396 L1358.35 679.396 L1357.79 679.396 L1357.23 679.396 L1356.67 679.396 L1356.12 679.396 L1355.56 679.396 L1355 679.396 L1354.44 679.396 L1353.88 679.396 L1353.32 679.396 L1352.76 679.396 L1352.2 679.396 L1351.64 679.396 L1351.08 679.396 L1350.52 679.396 L1349.96 679.396 L1349.4 679.396 L1348.84 679.396 L1348.29 679.396 L1347.73 679.396 L1347.17 679.396 L1346.61 679.396 L1346.05 679.396 L1345.49 679.396 L1344.93 679.396 L1344.37 679.396 L1343.81 679.396 L1343.25 679.396 L1342.69 679.396 L1342.13 679.396 L1341.57 679.396 L1341.02 679.396 L1340.46 679.396 L1339.9 679.396 L1339.34 679.396 L1338.78 679.396 L1338.22 679.396 L1337.66 679.396 L1337.1 679.396 L1336.54 679.396 L1335.98 679.396 L1335.42 679.396 L1334.86 679.396 L1334.3 679.396 L1333.75 679.396 L1333.19 679.396 L1332.63 679.396 L1332.07 679.396 L1331.51 679.396 L1330.95 679.396 L1330.39 679.396 L1329.83 679.396 L1329.27 679.396 L1328.71 679.396 L1328.15 679.396 L1327.59 679.396 L1327.03 679.396 L1326.47 679.396 L1325.92 679.396 L1325.36 679.396 L1324.8 679.396 L1324.24 679.396 L1323.68 679.396 L1323.12 679.396 L1322.56 679.396 L1322 679.396 L1321.44 679.396 L1320.88 679.396 L1320.32 679.396 L1319.76 679.396 L1319.2 679.396 L1318.65 679.396 L1318.09 679.396 L1317.53 679.396 L1316.97 679.396 L1316.41 679.396 L1315.85 679.396 L1315.29 679.396 L1314.73 679.396 L1314.17 679.396 L1313.61 679.396 L1313.05 679.396 L1312.49 679.396 L1311.93 679.396 L1311.38 679.396 L1310.82 679.396 L1310.26 679.396 L1309.7 679.396 L1309.14 679.396 L1308.58 679.396 L1308.02 679.396 L1307.46 679.396 L1306.9 679.396 L1306.34 679.396 L1305.78 679.396 L1305.22 679.396 L1304.66 679.396 L1304.1 679.396 L1303.55 679.396 L1302.99 679.396 L1302.43 679.396 L1301.87 679.396 L1301.31 679.396 L1300.75 679.396 L1300.19 679.396 L1299.63 679.396 L1299.07 679.396 L1298.51 679.396 L1297.95 679.396 L1297.39 679.396 L1296.83 679.396 L1296.28 679.396 L1295.72 679.396 L1295.16 679.396 L1294.6 679.396 L1294.04 679.396 L1293.48 679.396 L1292.92 679.396 L1292.36 679.396 L1291.8 679.396 L1291.24 679.396 L1290.68 679.396 L1290.12 679.396 L1289.56 679.396 L1289 679.396 L1288.45 679.396 L1287.89 679.396 L1287.33 679.396 L1286.77 679.396 L1286.21 679.396 L1285.65 679.396 L1285.09 679.396 L1284.53 679.396 L1283.97 679.396 L1283.41 679.396 L1282.85 679.396 L1282.29 679.396 L1281.73 679.396 L1281.18 679.396 L1280.62 679.396 L1280.06 679.396 L1279.5 679.396 L1278.94 679.396 L1278.38 679.396 L1277.82 679.396 L1277.26 679.396 L1276.7 679.396 L1276.14 679.396 L1275.58 679.396 L1275.02 679.396 L1274.46 679.396 L1273.91 679.396 L1273.35 679.396 L1272.79 679.396 L1272.23 679.396 L1271.67 679.396 L1271.11 679.396 L1270.55 679.396 L1269.99 679.396 L1269.43 679.396 L1268.87 679.396 L1268.31 679.396 L1267.75 679.396 L1267.19 679.396 L1266.63 679.396 L1266.08 679.396 L1265.52 679.396 L1264.96 679.396 L1264.4 679.396 L1263.84 679.396 L1263.28 679.396 L1262.72 679.396 L1262.16 679.396 L1261.6 679.396 L1261.04 679.396 L1260.48 679.396 L1259.92 679.396 L1259.36 679.396 L1258.81 679.396 L1258.25 679.396 L1257.69 679.396 L1257.13 679.396 L1256.57 679.396 L1256.01 679.396 L1255.45 679.396 L1254.89 679.396 L1254.33 679.396 L1253.77 679.396 L1253.21 679.396 L1252.65 679.396 L1252.09 679.396 L1251.54 679.396 L1250.98 679.396 L1250.42 679.396 L1249.86 679.396 L1249.3 679.396 L1248.74 679.396 L1248.18 679.396 L1247.62 679.396 L1247.06 679.396 L1246.5 679.396 L1245.94 679.396 L1245.38 679.396 L1244.82 679.396 L1244.26 679.396 L1243.71 679.396 L1243.15 679.396 L1242.59 679.396 L1242.03 679.396 L1241.47 679.396 L1240.91 679.396 L1240.35 679.396 L1239.79 679.396 L1239.23 679.396 L1238.67 679.396 L1238.11 679.396 L1237.55 679.396 L1236.99 679.396 L1236.44 679.396 L1235.88 679.396 L1235.32 679.396 L1234.76 679.396 L1234.2 679.396 L1233.64 679.396 L1233.08 679.396 L1232.52 679.396 L1231.96 679.396 L1231.4 679.396 L1230.84 679.396 L1230.28 679.396 L1229.72 679.396 L1229.17 679.396 L1228.61 679.396 L1228.05 679.396 L1227.49 679.396 L1226.93 679.396 L1226.37 679.396 L1225.81 679.396 L1225.25 679.396 L1224.69 679.396 L1224.13 679.396 L1223.57 679.396 L1223.01 679.396 L1222.45 679.396 L1221.89 679.396 L1221.34 679.396 L1220.78 679.396 L1220.22 679.396 L1219.66 679.396 L1219.1 679.396 L1218.54 679.396 L1217.98 679.396 L1217.42 679.396 L1216.86 679.396 L1216.3 679.396 L1215.74 679.396 L1215.18 679.396 L1214.62 679.396 L1214.07 679.396 L1213.51 679.396 L1212.95 679.396 L1212.39 679.396 L1211.83 679.396 L1211.27 679.396 L1210.71 679.396 L1210.15 679.396 L1209.59 679.396 L1209.03 679.396 L1208.47 679.396 L1207.91 679.396 L1207.35 679.396 L1206.8 679.396 L1206.24 679.396 L1205.68 679.396 L1205.12 679.396 L1204.56 679.396 L1204 679.396 L1203.44 679.396 L1202.88 679.396 L1202.32 679.396 L1201.76 679.396 L1201.2 679.396 L1200.64 679.396 L1200.08 679.396 L1199.52 679.396 L1198.97 679.396 L1198.41 679.396 L1197.85 679.396 L1197.29 679.396 L1196.73 679.396 L1196.17 679.396 L1195.61 679.396 L1195.05 679.396 L1194.49 679.396 L1193.93 679.396 L1193.37 679.396 L1192.81 679.396 L1192.25 679.396 L1191.7 679.396 L1191.14 679.396 L1190.58 679.396 L1190.02 679.396 L1189.46 679.396 L1188.9 679.396 L1188.34 679.396 L1187.78 679.396 L1187.22 679.396 L1186.66 679.396 L1186.1 679.396 L1185.54 679.396 L1184.98 679.396 L1184.43 679.396 L1183.87 679.396 L1183.31 679.396 L1182.75 679.396 L1182.19 679.396 L1181.63 679.396 L1181.07 679.396 L1180.51 679.396 L1179.95 679.396 L1179.39 679.396 L1178.83 679.396 L1178.27 679.396 L1177.71 679.396 L1177.15 679.396 L1176.6 679.396 L1176.04 679.396 L1175.48 679.396 L1174.92 679.396 L1174.36 679.396 L1173.8 679.396 L1173.24 679.396 L1172.68 679.396 L1172.12 679.396 L1171.56 679.396 L1171 679.396 L1170.44 679.396 L1169.88 679.396 L1169.33 679.396 L1168.77 679.396 L1168.21 679.396 L1167.65 679.396 L1167.09 679.396 L1166.53 679.396 L1165.97 679.396 L1165.41 679.396 L1164.85 679.396 L1164.29 679.396 L1163.73 679.396 L1163.17 679.396 L1162.61 679.396 L1162.05 679.396 L1161.5 679.396 L1160.94 679.396 L1160.38 679.396 L1159.82 679.396 L1159.26 679.396 L1158.7 679.396 L1158.14 679.396 L1157.58 679.396 L1157.02 679.396 L1156.46 679.396 L1155.9 679.396 L1155.34 679.396 L1154.78 679.396 L1154.23 679.396 L1153.67 679.396 L1153.11 679.396 L1152.55 679.396 L1151.99 679.396 L1151.43 679.396 L1150.87 679.396 L1150.31 679.396 L1149.75 679.396 L1149.19 679.396 L1148.63 679.396 L1148.07 679.396 L1147.51 679.396 L1146.96 679.396 L1146.4 679.396 L1145.84 679.396 L1145.28 679.396 L1144.72 679.396 L1144.16 679.396 L1143.6 679.396 L1143.04 679.396 L1142.48 679.396 L1141.92 679.396 L1141.36 679.396 L1140.8 679.396 L1140.24 679.396 L1139.68 679.396 L1139.13 679.396 L1138.57 679.396 L1138.01 679.396 L1137.45 679.396 L1136.89 679.396 L1136.33 679.396 L1135.77 679.396 L1135.21 679.396 L1134.65 679.396 L1134.09 679.396 L1133.53 679.396 L1132.97 679.396 L1132.41 679.396 L1131.86 679.396 L1131.3 679.396 L1130.74 679.396 L1130.18 679.396 L1129.62 679.396 L1129.06 679.396 L1128.5 679.396 L1127.94 679.396 L1127.38 679.396 L1126.82 679.396 L1126.26 679.396 L1125.7 679.396 L1125.14 679.396 L1124.59 679.396 L1124.03 679.396 L1123.47 679.396 L1122.91 679.396 L1122.35 679.396 L1121.79 679.396 L1121.23 679.396 L1120.67 679.396 L1120.11 679.396 L1119.55 679.396 L1118.99 679.396 L1118.43 679.396 L1117.87 679.396 L1117.31 679.396 L1116.76 679.396 L1116.2 679.396 L1115.64 679.396 L1115.08 679.396 L1114.52 679.396 L1113.96 679.396 L1113.4 679.396 L1112.84 679.396 L1112.28 679.396 L1111.72 679.396 L1111.16 679.396 L1110.6 679.396 L1110.04 679.396 L1109.49 679.396 L1108.93 679.396 L1108.37 679.396 L1107.81 679.396 L1107.25 679.396 L1106.69 679.396 L1106.13 679.396 L1105.57 679.396 L1105.01 679.396 L1104.45 679.396 L1103.89 679.396 L1103.33 679.396 L1102.77 679.396 L1102.22 679.396 L1101.66 679.396 L1101.1 679.396 L1100.54 679.396 L1099.98 679.396 L1099.42 679.396 L1098.86 679.396 L1098.3 679.396 L1097.74 679.396 L1097.18 679.396 L1096.62 679.396 L1096.06 679.396 L1095.5 679.396 L1094.94 679.396 L1094.39 679.396 L1093.83 679.396 L1093.27 679.396 L1092.71 679.396 L1092.15 679.396 L1091.59 679.396 L1091.03 679.396 L1090.47 679.396 L1089.91 679.396 L1089.35 679.396 L1088.79 679.396 L1088.23 679.396 L1087.67 679.396 L1087.12 679.396 L1086.56 679.396 L1086 679.396 L1085.44 679.396 L1084.88 679.396 L1084.32 679.396 L1083.76 679.396 L1083.2 679.396 L1082.64 679.396 L1082.08 679.396 L1081.52 679.396 L1080.96 679.396 L1080.4 679.396 L1079.85 679.396 L1079.29 679.396 L1078.73 679.396 L1078.17 679.396 L1077.61 679.396 L1077.05 679.396 L1076.49 679.396 L1075.93 679.396 L1075.37 679.396 L1074.81 679.396 L1074.25 679.396 L1073.69 679.396 L1073.13 679.396 L1072.57 679.396 L1072.02 679.396 L1071.46 679.396 L1070.9 679.396 L1070.34 679.396 L1069.78 679.396 L1069.22 679.396 L1068.66 679.396 L1068.1 679.396 L1067.54 679.396 L1066.98 679.396 L1066.42 679.396 L1065.86 679.396 L1065.3 679.396 L1064.75 679.396 L1064.19 679.396 L1063.63 679.396 L1063.07 679.396 L1062.51 679.396 L1061.95 679.396 L1061.39 679.396 L1060.83 679.396 L1060.27 679.396 L1059.71 679.396 L1059.15 679.396 L1058.59 679.396 L1058.03 679.396 L1057.48 679.396 L1056.92 679.396 L1056.36 679.396 L1055.8 679.396 L1055.24 679.396 L1054.68 679.396 L1054.12 679.396 L1053.56 679.396 L1053 679.396 L1052.44 679.396 L1051.88 679.396 L1051.32 679.396 L1050.76 679.396 L1050.2 679.396 L1049.65 679.396 L1049.09 679.396 L1048.53 679.396 L1047.97 679.396 L1047.41 679.396 L1046.85 679.396 L1046.29 679.396 L1045.73 679.396 L1045.17 679.396 L1044.61 679.396 L1044.05 679.396 L1043.49 679.396 L1042.93 679.396 L1042.38 679.396 L1041.82 679.396 L1041.26 679.396 L1040.7 679.396 L1040.14 679.396 L1039.58 679.396 L1039.02 679.396 L1038.46 679.396 L1037.9 679.396 L1037.34 679.396 L1036.78 679.396 L1036.22 679.396 L1035.66 679.396 L1035.1 679.396 L1034.55 679.396 L1033.99 679.396 L1033.43 679.396 L1032.87 679.396 L1032.31 679.396 L1031.75 679.396 L1031.19 679.396 L1030.63 679.396 L1030.07 679.396 L1029.51 679.396 L1028.95 679.396 L1028.39 679.396 L1027.83 679.396 L1027.28 679.396 L1026.72 679.396 L1026.16 679.396 L1025.6 679.396 L1025.04 679.396 L1024.48 679.396 L1023.92 679.396 L1023.36 679.396 L1022.8 679.396 L1022.24 679.396 L1021.68 679.396 L1021.12 679.396 L1020.56 679.396 L1020.01 679.396 L1019.45 679.396 L1018.89 679.396 L1018.33 679.396 L1017.77 679.396 L1017.21 679.396 L1016.65 679.396 L1016.09 679.396 L1015.53 679.396 L1014.97 679.396 L1014.41 679.396 L1013.85 679.396 L1013.29 679.396 L1012.73 679.396 L1012.18 679.396 L1011.62 679.396 L1011.06 679.396 L1010.5 679.396 L1009.94 679.396 L1009.38 679.396 L1008.82 679.396 L1008.26 679.396 L1007.7 679.396 L1007.14 679.396 L1006.58 679.396 L1006.02 679.396 L1005.46 679.396 L1004.91 679.396 L1004.35 679.396 L1003.79 679.396 L1003.23 679.396 L1002.67 679.396 L1002.11 679.396 L1001.55 679.396 L1000.99 679.396 L1000.43 679.396 L999.872 679.396 L999.313 679.396 L998.754 679.396 L998.194 679.396 L997.635 679.396 L997.076 679.396 L996.517 679.396 L995.957 679.396 L995.398 679.396 L994.839 679.396 L994.28 679.396 L993.72 679.396 L993.161 679.396 L992.602 679.396 L992.043 679.396 L991.483 679.396 L990.924 679.396 L990.365 679.396 L989.806 679.396 L989.246 679.396 L988.687 679.396 L988.128 679.396 L987.569 679.396 L987.009 679.396 L986.45 679.396 L985.891 679.396 L985.332 679.396 L984.772 679.396 L984.213 679.396 L983.654 679.396 L983.095 679.396 L982.535 679.396 L981.976 679.396 L981.417 679.396 L980.858 679.396 L980.298 679.396 L979.739 679.396 L979.18 679.396 L978.621 679.396 L978.061 679.396 L977.502 679.396 L976.943 679.396 L976.384 679.396 L975.824 679.396 L975.265 679.396 L974.706 679.396 L974.147 679.396 L973.587 679.396 L973.028 679.396 L972.469 679.396 L971.91 679.396 L971.35 679.396 L970.791 679.396 L970.232 679.396 L969.673 679.396 L969.113 679.396 L968.554 679.396 L967.995 679.396 L967.436 679.396 L966.876 679.396 L966.317 679.396 L965.758 679.396 L965.199 679.396 L964.639 679.396 L964.08 679.396 L963.521 679.396 L962.962 679.396 L962.402 679.396 L961.843 679.396 L961.284 679.396 L960.725 679.396 L960.165 679.396 L959.606 679.396 L959.047 679.396 L958.488 679.396 L957.928 679.396 L957.369 679.396 L956.81 679.396 L956.251 679.396 L955.691 679.396 L955.132 679.396 L954.573 679.396 L954.014 679.396 L953.454 679.396 L952.895 679.396 L952.336 679.396 L951.777 679.396 L951.217 679.396 L950.658 679.396 L950.099 679.396 L949.54 679.396 L948.98 679.396 L948.421 679.396 L947.862 679.396 L947.303 679.396 L946.743 679.396 L946.184 679.396 L945.625 679.396 L945.066 679.396 L944.506 679.396 L943.947 679.396 L943.388 679.396 L942.829 679.396 L942.269 679.396 L941.71 679.396 L941.151 679.396 L940.592 679.396 L940.032 679.396 L939.473 679.396 L938.914 679.396 L938.355 679.396 L937.795 679.396 L937.236 679.396 L936.677 679.396 L936.118 679.396 L935.558 679.396 L934.999 679.396 L934.44 679.396 L933.881 679.396 L933.321 679.396 L932.762 679.396 L932.203 679.396 L931.644 679.396 L931.084 679.396 L930.525 679.396 L929.966 679.396 L929.406 679.396 L928.847 679.396 L928.288 679.396 L927.729 679.396 L927.169 679.396 L926.61 679.396 L926.051 679.396 L925.492 679.396 L924.932 679.396 L924.373 679.396 L923.814 679.396 L923.255 679.396 L922.695 679.396 L922.136 679.396 L921.577 679.396 L921.018 679.396 L920.458 679.396 L919.899 679.396 L919.34 679.396 L918.781 679.396 L918.221 679.396 L917.662 679.396 L917.103 679.396 L916.544 679.396 L915.984 679.396 L915.425 679.396 L914.866 679.396 L914.307 679.396 L913.747 679.396 L913.188 679.396 L912.629 679.396 L912.07 679.396 L911.51 679.396 L910.951 679.396 L910.392 679.396 L909.833 679.396 L909.273 679.396 L908.714 679.396 L908.155 679.396 L907.596 679.396 L907.036 679.396 L906.477 679.396 L905.918 679.396 L905.359 679.396 L904.799 679.396 L904.24 679.396 L903.681 679.396 L903.122 679.396 L902.562 679.396 L902.003 679.396 L901.444 679.396 L900.885 679.396 L900.325 679.396 L899.766 679.396 L899.207 679.396 L898.648 679.396 L898.088 679.396 L897.529 679.396 L896.97 679.396 L896.411 679.396 L895.851 679.396 L895.292 679.396 L894.733 679.396 L894.174 679.396 L893.614 679.396 L893.055 679.396 L892.496 679.396 L891.937 679.396 L891.377 679.396 L890.818 679.396 L890.259 679.396 L889.7 679.396 L889.14 679.396 L888.581 679.396 L888.022 679.396 L887.463 679.396 L886.903 679.396 L886.344 679.396 L885.785 679.396 L885.226 679.396 L884.666 679.396 L884.107 679.396 L883.548 679.396 L882.989 679.396 L882.429 679.396 L881.87 679.396 L881.311 679.396 L880.752 679.396 L880.192 679.396 L879.633 679.396 L879.074 679.396 L878.515 679.396 L877.955 679.396 L877.396 679.396 L876.837 679.396 L876.278 679.396 L875.718 679.396 L875.159 679.396 L874.6 679.396 L874.041 679.396 L873.481 679.396 L872.922 679.396 L872.363 679.396 L871.804 679.396 L871.244 679.396 L870.685 679.396 L870.126 679.396 L869.567 679.396 L869.007 679.396 L868.448 679.396 L867.889 679.396 L867.33 679.396 L866.77 679.396 L866.211 679.396 L865.652 679.396 L865.093 679.396 L864.533 679.396 L863.974 679.396 L863.415 679.396 L862.856 679.396 L862.296 679.396 L861.737 679.396 L861.178 679.396 L860.619 679.396 L860.059 679.396 L859.5 679.396 L858.941 679.396 L858.382 679.396 L857.822 679.396 L857.263 679.396 L856.704 679.396 L856.145 679.396 L855.585 679.396 L855.026 679.396 L854.467 679.396 L853.908 679.396 L853.348 679.396 L852.789 679.396 L852.23 679.396 L851.671 679.396 L851.111 679.396 L850.552 679.396 L849.993 679.396 L849.434 679.396 L848.874 679.396 L848.315 679.396 L847.756 679.396 L847.197 679.396 L846.637 679.396 L846.078 679.396 L845.519 679.396 L844.96 679.396 L844.4 679.396 L843.841 679.396 L843.282 679.396 L842.723 679.396 L842.163 679.396 L841.604 679.396 L841.045 679.396 L840.486 679.396 L839.926 679.396 L839.367 679.396 L838.808 679.396 L838.249 679.396 L837.689 679.396 L837.13 679.396 L836.571 679.396 L836.012 679.396 L835.452 679.396 L834.893 679.396 L834.334 679.396 L833.775 679.396 L833.215 679.396 L832.656 679.396 L832.097 679.396 L831.538 679.396 L830.978 679.396 L830.419 679.396 L829.86 679.396 L829.301 679.396 L828.741 679.396 L828.182 679.396 L827.623 679.396 L827.064 679.396 L826.504 679.396 L825.945 679.396 L825.386 679.396 L824.827 679.396 L824.267 679.396 L823.708 679.396 L823.149 679.396 L822.59 679.396 L822.03 679.396 L821.471 679.396 L820.912 679.396 L820.353 679.396 L819.793 679.396 L819.234 679.396 L818.675 679.396 L818.116 679.396 L817.556 679.396 L816.997 679.396 L816.438 679.396 L815.879 679.396 L815.319 679.396 L814.76 679.396 L814.201 679.396 L813.642 679.396 L813.082 679.396 L812.523 679.396 L811.964 679.396 L811.405 679.396 L810.845 679.396 L810.286 679.396 L809.727 679.396 L809.168 679.396 L808.608 679.396 L808.049 679.396 L807.49 679.396 L806.931 679.396 L806.371 679.396 L805.812 679.396 L805.253 679.396 L804.693 679.396 L804.134 679.396 L803.575 679.396 L803.016 679.396 L802.456 679.396 L801.897 679.396 L801.338 679.396 L800.779 679.396 L800.219 679.396 L799.66 679.396 L799.101 679.396 L798.542 679.396 L797.982 679.396 L797.423 679.396 L796.864 679.396 L796.305 679.396 L795.745 679.396 L795.186 679.396 L794.627 679.396 L794.068 679.396 L793.508 679.396 L792.949 679.396 L792.39 679.396 L791.831 679.396 L791.271 679.396 L790.712 679.396 L790.153 679.396 L789.594 679.396 L789.034 679.396 L788.475 679.396 L787.916 679.396 L787.357 679.396 L786.797 679.396 L786.238 679.396 L785.679 679.396 L785.12 679.396 L784.56 679.396 L784.001 679.396 L783.442 679.396 L782.883 679.396 L782.323 679.396 L781.764 679.396 L781.205 679.396 L780.646 679.396 L780.086 679.396 L779.527 679.396 L778.968 679.396 L778.409 679.396 L777.849 679.396 L777.29 679.396 L776.731 679.396 L776.172 679.396 L775.612 679.396 L775.053 679.396 L774.494 679.396 L773.935 679.396 L773.375 679.396 L772.816 679.396 L772.257 679.396 L771.698 679.396 L771.138 679.396 L770.579 679.396 L770.02 679.396 L769.461 679.396 L768.901 679.396 L768.342 679.396 L767.783 679.396 L767.224 679.396 L766.664 679.396 L766.105 679.396 L765.546 679.396 L764.987 679.396 L764.427 679.396 L763.868 679.396 L763.309 679.396 L762.75 679.396 L762.19 679.396 L761.631 679.396 L761.072 679.396 L760.513 679.396 L759.953 679.396 L759.394 679.396 L758.835 679.396 L758.276 679.396 L757.716 679.396 L757.157 679.396 L756.598 679.396 L756.039 679.396 L755.479 679.396 L754.92 679.396 L754.361 679.396 L753.802 679.396 L753.242 679.396 L752.683 679.396 L752.124 679.396 L751.565 679.396 L751.005 679.396 L750.446 679.396 L749.887 679.396 L749.328 679.396 L748.768 679.396 L748.209 679.396 L747.65 679.396 L747.091 679.396 L746.531 679.396 L745.972 679.396 L745.413 679.396 L744.854 679.396 L744.294 679.396 L743.735 679.396 L743.176 679.396 L742.617 679.396 L742.057 679.396 L741.498 679.396 L740.939 679.396 L740.38 679.396 L739.82 679.396 L739.261 679.396 L738.702 679.396 L738.143 679.396 L737.583 679.396 L737.024 679.396 L736.465 679.396 L735.906 679.396 L735.346 679.396 L734.787 679.396 L734.228 679.396 L733.669 679.396 L733.109 679.396 L732.55 679.396 L731.991 679.396 L731.432 679.396 L730.872 679.396 L730.313 679.396 L729.754 679.396 L729.195 679.396 L728.635 679.396 L728.076 679.396 L727.517 679.396 L726.958 679.396 L726.398 679.396 L725.839 679.396 L725.28 679.396 L724.721 679.396 L724.161 679.396 L723.602 679.396 L723.043 679.396 L722.484 679.396 L721.924 679.396 L721.365 679.396 L720.806 679.396 L720.247 679.396  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.462 720.806,683.462 721.365,683.462 721.924,683.462 722.484,683.462 723.043,683.462 723.602,683.462 724.161,683.462 724.721,683.462 725.28,683.462 725.839,683.462 726.398,683.462 726.958,683.462 727.517,683.462 728.076,683.462 728.635,683.462 729.195,683.462 729.754,683.462 730.313,683.462 730.872,683.462 731.432,683.462 731.991,683.462 732.55,683.462 733.109,683.462 733.669,683.462 734.228,683.462 734.787,683.462 735.346,683.462 735.906,683.462 736.465,683.462 737.024,683.462 737.583,683.462 738.143,683.462 738.702,683.462 739.261,683.462 739.82,683.462 740.38,683.462 740.939,683.462 741.498,683.462 742.057,683.462 742.617,683.462 743.176,683.462 743.735,683.462 744.294,683.462 744.854,683.462 745.413,683.462 745.972,683.462 746.531,683.462 747.091,683.462 747.65,683.462 748.209,683.462 748.768,683.462 749.328,683.462 749.887,683.462 750.446,683.462 751.005,683.462 751.565,683.462 752.124,683.462 752.683,683.462 753.242,683.462 753.802,683.462 754.361,683.462 754.92,683.462 755.479,683.462 756.039,683.462 756.598,683.462 757.157,683.462 757.716,683.462 758.276,683.462 758.835,683.462 759.394,683.462 759.953,683.462 760.513,683.462 761.072,683.462 761.631,683.462 762.19,683.462 762.75,683.462 763.309,683.462 763.868,683.462 764.427,683.462 764.987,683.462 765.546,683.462 766.105,683.462 766.664,683.462 767.224,683.462 767.783,683.462 768.342,683.462 768.901,683.462 769.461,683.462 770.02,683.462 770.579,683.462 771.138,683.462 771.698,683.462 772.257,683.462 772.816,683.462 773.375,683.462 773.935,683.462 774.494,683.462 775.053,683.462 775.612,683.462 776.172,683.462 776.731,683.462 777.29,683.462 777.849,683.462 778.409,683.462 778.968,683.462 779.527,683.462 780.086,683.462 780.646,683.462 781.205,683.462 781.764,683.462 782.323,683.462 782.883,683.462 783.442,683.462 784.001,683.462 784.56,683.462 785.12,683.462 785.679,683.462 786.238,683.462 786.797,683.462 787.357,683.462 787.916,683.462 788.475,683.462 789.034,683.462 789.594,683.462 790.153,683.462 790.712,683.462 791.271,683.462 791.831,683.462 792.39,683.462 792.949,683.462 793.508,683.462 794.068,683.462 794.627,683.462 795.186,683.462 795.745,683.462 796.305,683.462 796.864,683.462 797.423,683.462 797.982,683.462 798.542,683.462 799.101,683.462 799.66,683.462 800.219,683.462 800.779,683.462 801.338,683.462 801.897,683.462 802.456,683.462 803.016,683.462 803.575,683.462 804.134,683.462 804.693,683.462 805.253,683.462 805.812,683.462 806.371,683.462 806.931,683.462 807.49,683.462 808.049,683.462 808.608,683.462 809.168,683.462 809.727,683.462 810.286,683.462 810.845,683.462 811.405,683.462 811.964,683.462 812.523,683.462 813.082,683.462 813.642,683.462 814.201,683.462 814.76,683.462 815.319,683.462 815.879,683.462 816.438,683.462 816.997,683.462 817.556,683.462 818.116,683.462 818.675,683.462 819.234,683.462 819.793,683.462 820.353,683.462 820.912,683.462 821.471,683.462 822.03,683.462 822.59,683.462 823.149,683.462 823.708,683.462 824.267,683.462 824.827,683.462 825.386,683.462 825.945,683.462 826.504,683.462 827.064,683.462 827.623,683.462 828.182,683.462 828.741,683.462 829.301,683.462 829.86,683.462 830.419,683.462 830.978,683.462 831.538,683.462 832.097,683.462 832.656,683.462 833.215,683.462 833.775,683.462 834.334,683.462 834.893,683.462 835.452,683.462 836.012,683.462 836.571,683.462 837.13,683.462 837.689,683.462 838.249,683.462 838.808,683.462 839.367,683.462 839.926,683.462 840.486,683.462 841.045,683.462 841.604,683.462 842.163,683.462 842.723,683.462 843.282,683.462 843.841,683.462 844.4,683.462 844.96,683.462 845.519,683.462 846.078,683.462 846.637,683.462 847.197,683.462 847.756,683.462 848.315,683.462 848.874,683.462 849.434,683.462 849.993,683.462 850.552,683.462 851.111,683.462 851.671,683.462 852.23,683.462 852.789,683.462 853.348,683.462 853.908,683.462 854.467,683.462 855.026,683.462 855.585,683.462 856.145,683.462 856.704,683.462 857.263,683.462 857.822,683.462 858.382,683.462 858.941,683.462 859.5,683.462 860.059,683.462 860.619,683.462 861.178,683.462 861.737,683.462 862.296,683.462 862.856,683.462 863.415,683.462 863.974,683.462 864.533,683.462 865.093,683.462 865.652,683.462 866.211,683.462 866.77,683.462 867.33,683.462 867.889,683.462 868.448,683.462 869.007,683.462 869.567,683.462 870.126,683.462 870.685,683.462 871.244,683.462 871.804,683.462 872.363,683.462 872.922,683.462 873.481,683.462 874.041,683.462 874.6,683.462 875.159,683.462 875.718,683.462 876.278,683.462 876.837,683.462 877.396,683.462 877.955,683.462 878.515,683.462 879.074,683.462 879.633,683.462 880.192,683.462 880.752,683.462 881.311,683.462 881.87,683.462 882.429,683.462 882.989,683.462 883.548,683.462 884.107,683.462 884.666,683.462 885.226,683.462 885.785,683.462 886.344,683.462 886.903,683.462 887.463,683.462 888.022,683.462 888.581,683.462 889.14,683.462 889.7,683.462 890.259,683.462 890.818,683.462 891.377,683.462 891.937,683.462 892.496,683.462 893.055,683.462 893.614,683.462 894.174,683.462 894.733,683.462 895.292,683.462 895.851,683.462 896.411,683.462 896.97,683.462 897.529,683.462 898.088,683.462 898.648,683.462 899.207,683.462 899.766,683.462 900.325,683.462 900.885,683.462 901.444,683.462 902.003,683.462 902.562,683.462 903.122,683.462 903.681,683.462 904.24,683.462 904.799,683.462 905.359,683.462 905.918,683.462 906.477,683.462 907.036,683.462 907.596,683.462 908.155,683.462 908.714,683.462 909.273,683.462 909.833,683.462 910.392,683.462 910.951,683.462 911.51,683.462 912.07,683.462 912.629,683.462 913.188,683.462 913.747,683.462 914.307,683.462 914.866,683.462 915.425,683.462 915.984,683.462 916.544,683.462 917.103,683.462 917.662,683.462 918.221,683.462 918.781,683.462 919.34,683.462 919.899,683.462 920.458,683.462 921.018,683.462 921.577,683.462 922.136,683.462 922.695,683.462 923.255,683.462 923.814,683.462 924.373,683.462 924.932,683.462 925.492,683.462 926.051,683.462 926.61,683.462 927.169,683.462 927.729,683.462 928.288,683.462 928.847,683.462 929.406,683.462 929.966,683.462 930.525,683.462 931.084,683.462 931.644,683.462 932.203,683.462 932.762,683.462 933.321,683.462 933.881,683.462 934.44,683.462 934.999,683.462 935.558,683.462 936.118,683.462 936.677,683.462 937.236,683.462 937.795,683.462 938.355,683.462 938.914,683.462 939.473,683.462 940.032,683.462 940.592,683.462 941.151,683.462 941.71,683.462 942.269,683.462 942.829,683.462 943.388,683.462 943.947,683.462 944.506,683.462 945.066,683.462 945.625,683.462 946.184,683.462 946.743,683.462 947.303,683.462 947.862,683.462 948.421,683.462 948.98,683.462 949.54,683.462 950.099,683.462 950.658,683.462 951.217,683.462 951.777,683.462 952.336,683.462 952.895,683.462 953.454,683.462 954.014,683.462 954.573,683.462 955.132,683.462 955.691,683.462 956.251,683.462 956.81,683.462 957.369,683.462 957.928,683.462 958.488,683.462 959.047,683.462 959.606,683.462 960.165,683.462 960.725,683.462 961.284,683.462 961.843,683.462 962.402,683.462 962.962,683.462 963.521,683.462 964.08,683.462 964.639,683.462 965.199,683.462 965.758,683.462 966.317,683.462 966.876,683.462 967.436,683.462 967.995,683.462 968.554,683.462 969.113,683.462 969.673,683.462 970.232,683.462 970.791,683.462 971.35,683.462 971.91,683.462 972.469,683.462 973.028,683.462 973.587,683.462 974.147,683.462 974.706,683.462 975.265,683.462 975.824,683.462 976.384,683.462 976.943,683.462 977.502,683.462 978.061,683.462 978.621,683.462 979.18,683.462 979.739,683.462 980.298,683.462 980.858,683.462 981.417,683.462 981.976,683.462 982.535,683.462 983.095,683.462 983.654,683.462 984.213,683.462 984.772,683.462 985.332,683.462 985.891,683.462 986.45,683.462 987.009,683.462 987.569,683.462 988.128,683.462 988.687,683.462 989.246,683.462 989.806,683.462 990.365,683.462 990.924,683.462 991.483,683.462 992.043,683.462 992.602,683.462 993.161,683.462 993.72,683.462 994.28,683.462 994.839,683.462 995.398,683.462 995.957,683.462 996.517,683.462 997.076,683.462 997.635,683.462 998.194,683.462 998.754,683.462 999.313,683.462 999.872,683.462 1000.43,683.462 1000.99,683.462 1001.55,683.462 1002.11,683.462 1002.67,683.462 1003.23,683.462 1003.79,683.462 1004.35,683.462 1004.91,683.462 1005.46,683.462 1006.02,683.462 1006.58,683.462 1007.14,683.462 1007.7,683.462 1008.26,683.462 1008.82,683.462 1009.38,683.462 1009.94,683.462 1010.5,683.462 1011.06,683.462 1011.62,683.462 1012.18,683.462 1012.73,683.462 1013.29,683.462 1013.85,683.462 1014.41,683.462 1014.97,683.462 1015.53,683.462 1016.09,683.462 1016.65,683.462 1017.21,683.462 1017.77,683.462 1018.33,683.462 1018.89,683.462 1019.45,683.462 1020.01,683.462 1020.56,683.462 1021.12,683.462 1021.68,683.462 1022.24,683.462 1022.8,683.462 1023.36,683.462 1023.92,683.462 1024.48,683.462 1025.04,683.462 1025.6,683.462 1026.16,683.462 1026.72,683.462 1027.28,683.462 1027.83,683.462 1028.39,683.462 1028.95,683.462 1029.51,683.462 1030.07,683.462 1030.63,683.462 1031.19,683.462 1031.75,683.462 1032.31,683.462 1032.87,683.462 1033.43,683.462 1033.99,683.462 1034.55,683.462 1035.1,683.462 1035.66,683.462 1036.22,683.462 1036.78,683.462 1037.34,683.462 1037.9,683.462 1038.46,683.462 1039.02,683.462 1039.58,683.462 1040.14,683.462 1040.7,683.462 1041.26,683.462 1041.82,683.462 1042.38,683.462 1042.93,683.462 1043.49,683.462 1044.05,683.462 1044.61,683.462 1045.17,683.462 1045.73,683.462 1046.29,683.462 1046.85,683.462 1047.41,683.462 1047.97,683.462 1048.53,683.462 1049.09,683.462 1049.65,683.462 1050.2,683.462 1050.76,683.462 1051.32,683.462 1051.88,683.462 1052.44,683.462 1053,683.462 1053.56,683.462 1054.12,683.462 1054.68,683.462 1055.24,683.462 1055.8,683.462 1056.36,683.462 1056.92,683.462 1057.48,683.462 1058.03,683.462 1058.59,683.462 1059.15,683.462 1059.71,683.462 1060.27,683.462 1060.83,683.462 1061.39,683.462 1061.95,683.462 1062.51,683.462 1063.07,683.462 1063.63,683.462 1064.19,683.462 1064.75,683.462 1065.3,683.462 1065.86,683.462 1066.42,683.462 1066.98,683.462 1067.54,683.462 1068.1,683.462 1068.66,683.462 1069.22,683.462 1069.78,683.462 1070.34,683.462 1070.9,683.462 1071.46,683.462 1072.02,683.462 1072.57,683.462 1073.13,683.462 1073.69,683.462 1074.25,683.462 1074.81,683.462 1075.37,683.462 1075.93,683.462 1076.49,683.462 1077.05,683.462 1077.61,683.462 1078.17,683.462 1078.73,683.462 1079.29,683.462 1079.85,683.462 1080.4,683.462 1080.96,683.462 1081.52,683.462 1082.08,683.462 1082.64,683.462 1083.2,683.462 1083.76,683.462 1084.32,683.462 1084.88,683.462 1085.44,683.462 1086,683.462 1086.56,683.462 1087.12,683.462 1087.67,683.462 1088.23,683.462 1088.79,683.462 1089.35,683.462 1089.91,683.462 1090.47,683.462 1091.03,683.462 1091.59,683.462 1092.15,683.462 1092.71,683.462 1093.27,683.462 1093.83,683.462 1094.39,683.462 1094.94,683.462 1095.5,683.462 1096.06,683.462 1096.62,683.462 1097.18,683.462 1097.74,683.462 1098.3,683.462 1098.86,683.462 1099.42,683.462 1099.98,683.462 1100.54,683.462 1101.1,683.462 1101.66,683.462 1102.22,683.462 1102.77,683.462 1103.33,683.462 1103.89,683.462 1104.45,683.462 1105.01,683.462 1105.57,683.462 1106.13,683.462 1106.69,683.462 1107.25,683.462 1107.81,683.462 1108.37,683.462 1108.93,683.462 1109.49,683.462 1110.04,683.462 1110.6,683.462 1111.16,683.462 1111.72,683.462 1112.28,683.462 1112.84,683.462 1113.4,683.462 1113.96,683.462 1114.52,683.462 1115.08,683.462 1115.64,683.462 1116.2,683.462 1116.76,683.462 1117.31,683.462 1117.87,683.462 1118.43,683.462 1118.99,683.462 1119.55,683.462 1120.11,683.462 1120.67,683.462 1121.23,683.462 1121.79,683.462 1122.35,683.462 1122.91,683.462 1123.47,683.462 1124.03,683.462 1124.59,683.462 1125.14,683.462 1125.7,683.462 1126.26,683.462 1126.82,683.462 1127.38,683.462 1127.94,683.462 1128.5,683.462 1129.06,683.462 1129.62,683.462 1130.18,683.462 1130.74,683.462 1131.3,683.462 1131.86,683.462 1132.41,683.462 1132.97,683.462 1133.53,683.462 1134.09,683.462 1134.65,683.462 1135.21,683.462 1135.77,683.462 1136.33,683.462 1136.89,683.462 1137.45,683.462 1138.01,683.462 1138.57,683.462 1139.13,683.462 1139.68,683.462 1140.24,683.462 1140.8,683.462 1141.36,683.462 1141.92,683.462 1142.48,683.462 1143.04,683.462 1143.6,683.462 1144.16,683.462 1144.72,683.462 1145.28,683.462 1145.84,683.462 1146.4,683.462 1146.96,683.462 1147.51,683.462 1148.07,683.462 1148.63,683.462 1149.19,683.462 1149.75,683.462 1150.31,683.462 1150.87,683.462 1151.43,683.462 1151.99,683.462 1152.55,683.462 1153.11,683.462 1153.67,683.462 1154.23,683.462 1154.78,683.462 1155.34,683.462 1155.9,683.462 1156.46,683.462 1157.02,683.462 1157.58,683.462 1158.14,683.462 1158.7,683.462 1159.26,683.462 1159.82,683.462 1160.38,683.462 1160.94,683.462 1161.5,683.462 1162.05,683.462 1162.61,683.462 1163.17,683.462 1163.73,683.462 1164.29,683.462 1164.85,683.462 1165.41,683.462 1165.97,683.462 1166.53,683.462 1167.09,683.462 1167.65,683.462 1168.21,683.462 1168.77,683.462 1169.33,683.462 1169.88,683.462 1170.44,683.462 1171,683.462 1171.56,683.462 1172.12,683.462 1172.68,683.462 1173.24,683.462 1173.8,683.462 1174.36,683.462 1174.92,683.462 1175.48,683.462 1176.04,683.462 1176.6,683.462 1177.15,683.462 1177.71,683.462 1178.27,683.462 1178.83,683.462 1179.39,683.462 1179.95,683.462 1180.51,683.462 1181.07,683.462 1181.63,683.462 1182.19,683.462 1182.75,683.462 1183.31,683.462 1183.87,683.462 1184.43,683.462 1184.98,683.462 1185.54,683.462 1186.1,683.462 1186.66,683.462 1187.22,683.462 1187.78,683.462 1188.34,683.462 1188.9,683.462 1189.46,683.462 1190.02,683.462 1190.58,683.462 1191.14,683.462 1191.7,683.462 1192.25,683.462 1192.81,683.462 1193.37,683.462 1193.93,683.462 1194.49,683.462 1195.05,683.462 1195.61,683.462 1196.17,683.462 1196.73,683.462 1197.29,683.462 1197.85,683.462 1198.41,683.462 1198.97,683.462 1199.52,683.462 1200.08,683.462 1200.64,683.462 1201.2,683.462 1201.76,683.462 1202.32,683.462 1202.88,683.462 1203.44,683.462 1204,683.462 1204.56,683.462 1205.12,683.462 1205.68,683.462 1206.24,683.462 1206.8,683.462 1207.35,683.462 1207.91,683.462 1208.47,683.462 1209.03,683.462 1209.59,683.462 1210.15,683.462 1210.71,683.462 1211.27,683.462 1211.83,683.462 1212.39,683.462 1212.95,683.462 1213.51,683.462 1214.07,683.462 1214.62,683.462 1215.18,683.462 1215.74,683.462 1216.3,683.462 1216.86,683.462 1217.42,683.462 1217.98,683.462 1218.54,683.462 1219.1,683.462 1219.66,683.462 1220.22,683.462 1220.78,683.462 1221.34,683.462 1221.89,683.462 1222.45,683.462 1223.01,683.462 1223.57,683.462 1224.13,683.462 1224.69,683.462 1225.25,683.462 1225.81,683.462 1226.37,683.462 1226.93,683.462 1227.49,683.462 1228.05,683.462 1228.61,683.462 1229.17,683.462 1229.72,683.462 1230.28,683.462 1230.84,683.462 1231.4,683.462 1231.96,683.462 1232.52,683.462 1233.08,683.462 1233.64,683.462 1234.2,683.462 1234.76,683.462 1235.32,683.462 1235.88,683.462 1236.44,683.462 1236.99,683.462 1237.55,683.462 1238.11,683.462 1238.67,683.462 1239.23,683.462 1239.79,683.462 1240.35,683.462 1240.91,683.462 1241.47,683.462 1242.03,683.462 1242.59,683.462 1243.15,683.462 1243.71,683.462 1244.26,683.462 1244.82,683.462 1245.38,683.462 1245.94,683.462 1246.5,683.462 1247.06,683.462 1247.62,683.462 1248.18,683.462 1248.74,683.462 1249.3,683.462 1249.86,683.462 1250.42,683.462 1250.98,683.462 1251.54,683.462 1252.09,683.462 1252.65,683.462 1253.21,683.462 1253.77,683.462 1254.33,683.462 1254.89,683.462 1255.45,683.462 1256.01,683.462 1256.57,683.462 1257.13,683.462 1257.69,683.462 1258.25,683.462 1258.81,683.462 1259.36,683.462 1259.92,683.462 1260.48,683.462 1261.04,683.462 1261.6,683.462 1262.16,683.462 1262.72,683.462 1263.28,683.462 1263.84,683.462 1264.4,683.462 1264.96,683.462 1265.52,683.462 1266.08,683.462 1266.63,683.462 1267.19,683.462 1267.75,683.462 1268.31,683.462 1268.87,683.462 1269.43,683.462 1269.99,683.462 1270.55,683.462 1271.11,683.462 1271.67,683.462 1272.23,683.462 1272.79,683.462 1273.35,683.462 1273.91,683.462 1274.46,683.462 1275.02,683.462 1275.58,683.462 1276.14,683.462 1276.7,683.462 1277.26,683.462 1277.82,683.462 1278.38,683.462 1278.94,683.462 1279.5,683.462 1280.06,683.462 1280.62,683.462 1281.18,683.462 1281.73,683.462 1282.29,683.462 1282.85,683.462 1283.41,683.462 1283.97,683.462 1284.53,683.462 1285.09,683.462 1285.65,683.462 1286.21,683.462 1286.77,683.462 1287.33,683.462 1287.89,683.462 1288.45,683.462 1289,683.462 1289.56,683.462 1290.12,683.462 1290.68,683.462 1291.24,683.462 1291.8,683.462 1292.36,683.462 1292.92,683.462 1293.48,683.462 1294.04,683.462 1294.6,683.462 1295.16,683.462 1295.72,683.462 1296.28,683.462 1296.83,683.462 1297.39,683.462 1297.95,683.462 1298.51,683.462 1299.07,683.462 1299.63,683.462 1300.19,683.462 1300.75,683.462 1301.31,683.462 1301.87,683.462 1302.43,683.462 1302.99,683.462 1303.55,683.462 1304.1,683.462 1304.66,683.462 1305.22,683.462 1305.78,683.462 1306.34,683.462 1306.9,683.462 1307.46,683.462 1308.02,683.462 1308.58,683.462 1309.14,683.462 1309.7,683.462 1310.26,683.462 1310.82,683.462 1311.38,683.462 1311.93,683.462 1312.49,683.462 1313.05,683.462 1313.61,683.462 1314.17,683.462 1314.73,683.462 1315.29,683.462 1315.85,683.462 1316.41,683.462 1316.97,683.462 1317.53,683.462 1318.09,683.462 1318.65,683.462 1319.2,683.462 1319.76,683.462 1320.32,683.462 1320.88,683.462 1321.44,683.462 1322,683.462 1322.56,683.462 1323.12,683.462 1323.68,683.462 1324.24,683.462 1324.8,683.462 1325.36,683.462 1325.92,683.462 1326.47,683.462 1327.03,683.462 1327.59,683.462 1328.15,683.462 1328.71,683.462 1329.27,683.462 1329.83,683.462 1330.39,683.462 1330.95,683.462 1331.51,683.462 1332.07,683.462 1332.63,683.462 1333.19,683.462 1333.75,683.462 1334.3,683.462 1334.86,683.462 1335.42,683.462 1335.98,683.462 1336.54,683.462 1337.1,683.462 1337.66,683.462 1338.22,683.462 1338.78,683.462 1339.34,683.462 1339.9,683.462 1340.46,683.462 1341.02,683.462 1341.57,683.462 1342.13,683.462 1342.69,683.462 1343.25,683.462 1343.81,683.462 1344.37,683.462 1344.93,683.462 1345.49,683.462 1346.05,683.462 1346.61,683.462 1347.17,683.462 1347.73,683.462 1348.29,683.462 1348.84,683.462 1349.4,683.462 1349.96,683.462 1350.52,683.462 1351.08,683.462 1351.64,683.462 1352.2,683.462 1352.76,683.462 1353.32,683.462 1353.88,683.462 1354.44,683.462 1355,683.462 1355.56,683.462 1356.12,683.462 1356.67,683.462 1357.23,683.462 1357.79,683.462 1358.35,683.462 1358.91,683.462 1359.47,683.462 1360.03,683.462 1360.59,683.462 1361.15,683.462 1361.71,683.462 1362.27,683.462 1362.83,683.462 1363.39,683.462 1363.94,683.462 1364.5,683.462 1365.06,683.462 1365.62,683.462 1366.18,683.462 1366.74,683.462 1367.3,683.462 1367.86,683.462 1368.42,683.462 1368.98,683.462 1369.54,683.462 1370.1,683.462 1370.66,683.462 1371.21,683.462 1371.77,683.462 1372.33,683.462 1372.89,683.462 1373.45,683.462 1374.01,683.462 1374.57,683.462 1375.13,683.462 1375.69,683.462 1376.25,683.462 1376.81,683.462 1377.37,683.462 1377.93,683.462 1378.49,683.462 1379.04,683.462 1379.6,683.462 1380.16,683.462 1380.72,683.462 1381.28,683.462 1381.84,683.462 1382.4,683.462 1382.96,683.462 1383.52,683.462 1384.08,683.462 1384.64,683.462 1385.2,683.462 1385.76,683.462 1386.31,683.462 1386.87,683.462 1387.43,683.462 1387.99,683.462 1388.55,683.462 1389.11,683.462 1389.67,683.462 1390.23,683.462 1390.79,683.462 1391.35,683.462 1391.91,683.462 1392.47,683.462 1393.03,683.462 1393.58,683.462 1394.14,683.462 1394.7,683.462 1395.26,683.462 1395.82,683.462 1396.38,683.462 1396.94,683.462 1397.5,683.462 1398.06,683.462 1398.62,683.462 1399.18,683.462 1399.74,683.462 1400.3,683.462 1400.86,683.462 1401.41,683.462 1401.97,683.462 1402.53,683.462 1403.09,683.462 1403.65,683.462 1404.21,683.462 1404.77,683.462 1405.33,683.462 1405.89,683.462 1406.45,683.462 1407.01,683.462 1407.57,683.462 1408.13,683.462 1408.68,683.462 1409.24,683.462 1409.8,683.462 1410.36,683.462 1410.92,683.462 1411.48,683.462 1412.04,683.462 1412.6,683.462 1413.16,683.462 1413.72,683.462 1414.28,683.462 1414.84,683.462 1415.4,683.462 1415.95,683.462 1416.51,683.462 1417.07,683.462 1417.63,683.462 1418.19,683.462 1418.75,683.462 1419.31,683.462 1419.87,683.462 1420.43,683.462 1420.99,683.462 1421.55,683.462 1422.11,683.462 1422.67,683.462 1423.23,683.462 1423.78,683.462 1424.34,683.462 1424.9,683.462 1425.46,683.462 1426.02,683.462 1426.58,683.462 1427.14,683.462 1427.7,683.462 1428.26,683.462 1428.82,683.462 1429.38,683.462 1429.94,683.462 1430.5,683.462 1431.05,683.462 1431.61,683.462 1432.17,683.462 1432.73,683.462 1433.29,683.462 1433.85,683.462 1434.41,683.462 1434.97,683.462 1435.53,683.462 1436.09,683.462 1436.65,683.462 1437.21,683.462 1437.77,683.462 1438.33,683.462 1438.88,683.462 1439.44,683.462 1440,683.462 1440.56,683.462 1441.12,683.462 1441.68,683.462 1442.24,683.462 1442.8,683.462 1443.36,683.462 1443.92,683.462 1444.48,683.462 1445.04,683.462 1445.6,683.462 1446.15,683.462 1446.71,683.462 1447.27,683.462 1447.83,683.462 1448.39,683.462 1448.95,683.462 1449.51,683.462 1450.07,683.462 1450.63,683.462 1451.19,683.462 1451.75,683.462 1452.31,683.462 1452.87,683.462 1453.42,683.462 1453.98,683.462 1454.54,683.462 1455.1,683.462 1455.66,683.462 1456.22,683.462 1456.78,683.462 1457.34,683.462 1457.9,683.462 1458.46,683.462 1459.02,683.462 1459.58,683.462 1460.14,683.462 1460.7,683.462 1461.25,683.462 1461.81,683.462 1462.37,683.462 1462.93,683.462 1463.49,683.462 1464.05,683.462 1464.61,683.462 1465.17,683.462 1465.73,683.462 1466.29,683.462 1466.85,683.462 1467.41,683.462 1467.97,683.462 1468.52,683.462 1469.08,683.462 1469.64,683.462 1470.2,683.462 1470.76,683.462 1471.32,683.462 1471.88,683.462 1472.44,683.462 1473,683.462 1473.56,683.462 1474.12,683.462 1474.68,683.462 1475.24,683.462 1475.79,683.462 1476.35,683.462 1476.91,683.462 1477.47,683.462 1478.03,683.462 1478.59,683.462 1479.15,683.462 1479.71,683.462 1480.27,683.462 1480.83,683.462 1481.39,683.462 1481.95,683.462 1482.51,683.462 1483.07,683.462 1483.62,683.462 1484.18,683.462 1484.74,683.462 1485.3,683.462 1485.86,683.462 1486.42,683.462 1486.98,683.462 1487.54,683.462 1488.1,683.462 1488.66,683.462 1489.22,683.462 1489.78,683.462 1490.34,683.462 1490.89,683.462 1491.45,683.462 1492.01,683.462 1492.57,683.462 1493.13,683.462 1493.69,683.462 1494.25,683.462 1494.81,683.462 1495.37,683.462 1495.93,683.462 1496.49,683.462 1497.05,683.462 1497.61,683.462 1498.16,683.462 1498.72,683.462 1499.28,683.462 1499.84,683.462 1500.4,683.462 1500.96,683.462 1501.52,683.462 1502.08,683.462 1502.64,683.462 1503.2,683.462 1503.76,683.462 1504.32,683.462 1504.88,683.462 1505.44,683.462 1505.99,683.462 1506.55,683.462 1507.11,683.462 1507.67,683.462 1508.23,683.462 1508.79,683.462 1509.35,683.462 1509.91,683.462 1510.47,683.462 1511.03,683.462 1511.59,683.462 1512.15,683.462 1512.71,683.462 1513.26,683.462 1513.82,683.462 1514.38,683.462 1514.94,683.462 1515.5,683.462 1516.06,683.462 1516.62,683.462 1517.18,683.462 1517.74,683.462 1518.3,683.462 1518.86,683.462 1519.42,683.462 1519.98,683.462 1520.53,683.462 1521.09,683.462 1521.65,683.462 1522.21,683.462 1522.77,683.462 1523.33,683.462 1523.89,683.462 1524.45,683.462 1525.01,683.462 1525.57,683.462 1526.13,683.462 1526.69,683.462 1527.25,683.462 1527.81,683.462 1528.36,683.462 1528.92,683.462 1529.48,683.462 1530.04,683.462 1530.6,683.462 1531.16,683.462 1531.72,683.462 1532.28,683.462 1532.84,683.462 1533.4,683.462 1533.96,683.462 1534.52,683.462 1535.08,683.462 1535.63,683.462 1536.19,683.462 1536.75,683.462 1537.31,683.462 1537.87,683.462 1538.43,683.462 1538.99,683.462 1539.55,683.462 1540.11,683.462 1540.67,683.462 1541.23,683.462 1541.79,683.462 1542.35,683.462 1542.9,683.462 1543.46,683.462 1544.02,683.462 1544.58,683.462 1545.14,683.462 1545.7,683.462 1546.26,683.462 1546.82,683.462 1547.38,683.462 1547.94,683.462 1548.5,683.462 1549.06,683.462 1549.62,683.462 1550.18,683.462 1550.73,683.462 1551.29,683.462 1551.85,683.462 1552.41,683.462 1552.97,683.462 1553.53,683.462 1554.09,683.462 1554.65,683.462 1555.21,683.462 1555.77,683.462 1556.33,683.462 1556.89,683.462 1557.45,683.462 1558,683.462 1558.56,683.462 1559.12,683.462 1559.68,683.462 1560.24,683.462 1560.8,683.462 1561.36,683.462 1561.92,683.462 1562.48,683.462 1563.04,683.462 1563.6,683.462 1564.16,683.462 1564.72,683.462 1565.28,683.462 1565.83,683.462 1566.39,683.462 1566.95,683.462 1567.51,683.462 1568.07,683.462 1568.63,683.462 1569.19,683.462 1569.75,683.462 1570.31,683.462 1570.87,683.462 1571.43,683.462 1571.99,683.462 1572.55,683.462 1573.1,683.462 1573.66,683.462 1574.22,683.462 1574.78,683.462 1575.34,683.462 1575.9,683.462 1576.46,683.462 1577.02,683.462 1577.58,683.462 1578.14,683.462 1578.7,683.462 1579.26,683.462 1579.82,683.462 1580.37,683.462 1580.93,683.462 1581.49,683.462 1582.05,683.462 1582.61,683.462 1583.17,683.462 1583.73,683.462 1584.29,683.462 1584.85,683.462 1585.41,683.462 1585.97,683.462 1586.53,683.462 1587.09,683.462 1587.65,683.462 1588.2,683.462 1588.76,683.462 1589.32,683.462 1589.88,683.462 1590.44,683.462 1591,683.462 1591.56,683.462 1592.12,683.462 1592.68,683.462 1593.24,683.462 1593.8,683.462 1594.36,683.462 1594.92,683.462 1595.47,683.462 1596.03,683.462 1596.59,683.462 1597.15,683.462 1597.71,683.462 1598.27,683.462 1598.83,683.462 1599.39,683.462 1599.95,683.462 1600.51,683.462 1601.07,683.462 1601.63,683.462 1602.19,683.462 1602.74,683.462 1603.3,683.462 1603.86,683.462 1604.42,683.462 1604.98,683.462 1605.54,683.462 1606.1,683.462 1606.66,683.462 1607.22,683.462 1607.78,683.462 1608.34,683.462 1608.9,683.462 1609.46,683.462 1610.02,683.462 1610.57,683.462 1611.13,683.462 1611.69,683.462 1612.25,683.462 1612.81,683.462 1613.37,683.462 1613.93,683.462 1614.49,683.462 1615.05,683.462 1615.61,683.462 1616.17,683.462 1616.73,683.462 1617.29,683.462 1617.84,683.462 1618.4,683.462 1618.96,683.462 1619.52,683.462 1620.08,683.462 1620.64,683.462 1621.2,683.462 1621.76,683.462 1622.32,683.462 1622.88,683.462 1623.44,683.462 1624,683.462 1624.56,683.462 1625.11,683.462 1625.67,683.462 1626.23,683.462 1626.79,683.462 1627.35,683.462 1627.91,683.462 1628.47,683.462 1629.03,683.462 1629.59,683.462 1630.15,683.462 1630.71,683.462 1631.27,683.462 1631.83,683.462 1632.39,683.462 1632.94,683.462 1633.5,683.462 1634.06,683.462 1634.62,683.462 1635.18,683.462 1635.74,683.462 1636.3,683.462 1636.86,683.462 1637.42,683.462 1637.98,683.462 1638.54,683.462 1639.1,683.462 1639.66,683.462 1640.21,683.462 1640.77,683.462 1641.33,683.462 1641.89,683.462 1642.45,683.462 1643.01,683.462 1643.57,683.462 1644.13,683.462 1644.69,683.462 1645.25,683.462 1645.81,683.462 1646.37,683.462 1646.93,683.462 1647.48,683.462 1648.04,683.462 1648.6,683.462 1649.16,683.462 1649.72,683.462 1650.28,683.462 1650.84,683.462 1651.4,683.462 1651.96,683.462 1652.52,683.462 1653.08,683.462 1653.64,683.462 1654.2,683.462 1654.76,683.462 1655.31,683.462 1655.87,683.462 1656.43,683.462 1656.99,683.462 1657.55,683.462 1658.11,683.462 1658.67,683.462 1659.23,683.462 1659.79,683.462 1660.35,683.462 1660.91,683.462 1661.47,683.462 1662.03,683.462 1662.58,683.462 1663.14,683.462 1663.7,683.462 1664.26,683.462 1664.82,683.462 1665.38,683.462 1665.94,683.462 1666.5,683.462 1667.06,683.462 1667.62,683.462 1668.18,683.462 1668.74,683.462 1669.3,683.462 1669.85,683.462 1670.41,683.462 1670.97,683.462 1671.53,683.462 1672.09,683.462 1672.65,683.462 1673.21,683.462 1673.77,683.462 1674.33,683.462 1674.89,683.462 1675.45,683.462 1676.01,683.462 1676.57,683.462 1677.13,683.462 1677.68,683.462 1678.24,683.462 1678.8,683.462 1679.36,683.462 1679.92,683.462 1680.48,683.462 1681.04,683.462 1681.6,683.462 1682.16,683.462 1682.72,683.462 1683.28,683.462 1683.84,683.462 1684.4,683.462 1684.95,683.462 1685.51,683.462 1686.07,683.462 1686.63,683.462 1687.19,683.462 1687.75,683.462 1688.31,683.462 1688.87,683.462 1689.43,683.462 1689.99,683.462 1690.55,683.462 1691.11,683.462 1691.67,683.462 1692.23,683.462 1692.78,683.462 1693.34,683.462 1693.9,683.462 1694.46,683.462 1695.02,683.462 1695.58,683.462 1696.14,683.462 1696.7,683.462 1697.26,683.462 1697.82,683.462 1698.38,683.462 1698.94,683.462 1699.5,683.462 1700.05,683.462 1700.61,683.462 1701.17,683.462 1701.73,683.462 1702.29,683.462 1702.85,683.462 1703.41,683.462 1703.97,683.462 1704.53,683.462 1705.09,683.462 1705.65,683.462 1706.21,683.462 1706.77,683.462 1707.32,683.462 1707.88,683.462 1708.44,683.462 1709,683.462 1709.56,683.462 1710.12,683.462 1710.68,683.462 1711.24,683.462 1711.8,683.462 1712.36,683.462 1712.92,683.462 1713.48,683.462 1714.04,683.462 1714.6,683.462 1715.15,683.462 1715.71,683.462 1716.27,683.462 1716.83,683.462 1717.39,683.462 1717.95,683.462 1718.51,683.462 1719.07,683.462 1719.63,683.462 1720.19,683.462 1720.75,683.462 1721.31,683.462 1721.87,683.462 1722.42,683.462 1722.98,683.462 1723.54,683.462 1724.1,683.462 1724.66,683.462 1725.22,683.462 1725.78,683.462 1726.34,683.462 1726.9,683.462 1727.46,683.462 1728.02,683.462 1728.58,683.462 1729.14,683.462 1729.69,683.462 1730.25,683.462 1730.81,683.462 1731.37,683.462 1731.93,683.462 1732.49,683.462 1733.05,683.462 1733.61,683.462 1734.17,683.462 1734.73,683.462 1735.29,683.462 1735.85,683.462 1736.41,683.462 1736.97,683.462 1737.52,683.462 1738.08,683.462 1738.64,683.462 1739.2,683.462 1739.76,683.462 1740.32,683.462 1740.88,683.462 1741.44,683.462 1742,683.462 1742.56,683.462 1743.12,683.462 1743.68,683.462 1744.24,683.462 1744.79,683.462 1745.35,683.462 1745.91,683.462 1746.47,683.462 1747.03,683.462 1747.59,683.462 1748.15,683.462 1748.71,683.462 1749.27,683.462 1749.83,683.462 1750.39,683.462 1750.95,683.462 1751.51,683.462 1752.06,683.462 1752.62,683.462 1753.18,683.462 1753.74,683.462 1754.3,683.462 1754.86,683.462 1755.42,683.462 1755.98,683.462 1756.54,683.462 1757.1,683.462 1757.66,683.462 1758.22,683.462 1758.78,683.462 1759.34,683.462 1759.89,683.462 1760.45,683.462 1761.01,683.462 1761.57,683.462 1762.13,683.462 1762.69,683.462 1763.25,683.462 1763.81,683.462 1764.37,683.462 1764.93,683.462 1765.49,683.462 1766.05,683.462 1766.61,683.462 1767.16,683.462 1767.72,683.462 1768.28,683.462 1768.84,683.462 1769.4,683.462 1769.96,683.462 1770.52,683.462 1771.08,683.462 1771.64,683.462 1772.2,683.462 1772.76,683.462 1773.32,683.462 1773.88,683.462 1774.43,683.462 1774.99,683.462 1775.55,683.462 1776.11,683.462 1776.67,683.462 1777.23,683.462 1777.79,683.462 1778.35,683.462 1778.91,683.462 1779.47,683.462 1780.03,683.462 1780.59,683.462 1781.15,683.462 1781.71,683.462 1782.26,683.462 1782.82,683.462 1783.38,683.462 1783.94,683.462 1784.5,683.462 1785.06,683.462 1785.62,683.462 1786.18,683.462 1786.74,683.462 1787.3,683.462 1787.86,683.462 1788.42,683.462 1788.98,683.462 1789.53,683.462 1790.09,683.462 1790.65,683.462 1791.21,683.462 1791.77,683.462 1792.33,683.462 1792.89,683.462 1793.45,683.462 1794.01,683.462 1794.57,683.462 1795.13,683.462 1795.69,683.462 1796.25,683.462 1796.8,683.462 1797.36,683.462 1797.92,683.462 1798.48,683.462 1799.04,683.462 1799.6,683.462 1800.16,683.462 1800.72,683.462 1801.28,683.462 1801.84,683.462 1802.4,683.462 1802.96,683.462 1803.52,683.462 1804.08,683.462 1804.63,683.462 1805.19,683.462 1805.75,683.462 1806.31,683.462 1806.87,683.462 1807.43,683.462 1807.99,683.462 1808.55,683.462 1809.11,683.462 1809.67,683.462 1810.23,683.462 1810.79,683.462 1811.35,683.462 1811.9,683.462 1812.46,683.462 1813.02,683.462 1813.58,683.462 1814.14,683.462 1814.7,683.462 1815.26,683.462 1815.82,683.462 1816.38,683.462 1816.94,683.462 1817.5,683.462 1818.06,683.462 1818.62,683.462 1819.18,683.462 1819.73,683.462 1820.29,683.462 1820.85,683.462 1821.41,683.462 1821.97,683.462 1822.53,683.462 1823.09,683.462 1823.65,683.462 1824.21,683.462 1824.77,683.462 1825.33,683.462 1825.89,683.462 1826.45,683.462 1827,683.462 1827.56,683.462 1828.12,683.462 1828.68,683.462 1829.24,683.462 1829.8,683.462 1830.36,683.462 1830.92,683.462 1831.48,683.462 1832.04,683.462 1832.6,683.462 1833.16,683.462 1833.72,683.462 1834.27,683.462 1834.83,683.462 1835.39,683.462 1835.95,683.462 1836.51,683.462 1837.07,683.462 1837.63,683.462 1838.19,683.462 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 683.882 L720.806 683.882 L721.365 683.882 L721.924 683.882 L722.484 683.882 L723.043 683.882 L723.602 683.882 L724.161 683.882 L724.721 683.882 L725.28 683.882 L725.839 683.882 L726.398 683.882 L726.958 683.882 L727.517 683.882 L728.076 683.882 L728.635 683.882 L729.195 683.882 L729.754 683.882 L730.313 683.882 L730.872 683.882 L731.432 683.882 L731.991 683.882 L732.55 683.882 L733.109 683.882 L733.669 683.882 L734.228 683.882 L734.787 683.882 L735.346 683.882 L735.906 683.882 L736.465 683.882 L737.024 683.882 L737.583 683.882 L738.143 683.882 L738.702 683.882 L739.261 683.882 L739.82 683.882 L740.38 683.882 L740.939 683.882 L741.498 683.882 L742.057 683.882 L742.617 683.882 L743.176 683.882 L743.735 683.882 L744.294 683.882 L744.854 683.882 L745.413 683.882 L745.972 683.882 L746.531 683.882 L747.091 683.882 L747.65 683.882 L748.209 683.882 L748.768 683.882 L749.328 683.882 L749.887 683.882 L750.446 683.882 L751.005 683.882 L751.565 683.882 L752.124 683.882 L752.683 683.882 L753.242 683.882 L753.802 683.882 L754.361 683.882 L754.92 683.882 L755.479 683.882 L756.039 683.882 L756.598 683.882 L757.157 683.882 L757.716 683.882 L758.276 683.882 L758.835 683.882 L759.394 683.882 L759.953 683.882 L760.513 683.882 L761.072 683.882 L761.631 683.882 L762.19 683.882 L762.75 683.882 L763.309 683.882 L763.868 683.882 L764.427 683.882 L764.987 683.882 L765.546 683.882 L766.105 683.882 L766.664 683.882 L767.224 683.882 L767.783 683.882 L768.342 683.882 L768.901 683.882 L769.461 683.882 L770.02 683.882 L770.579 683.882 L771.138 683.882 L771.698 683.882 L772.257 683.882 L772.816 683.882 L773.375 683.882 L773.935 683.882 L774.494 683.882 L775.053 683.882 L775.612 683.882 L776.172 683.882 L776.731 683.882 L777.29 683.882 L777.849 683.882 L778.409 683.882 L778.968 683.882 L779.527 683.882 L780.086 683.882 L780.646 683.882 L781.205 683.882 L781.764 683.882 L782.323 683.882 L782.883 683.882 L783.442 683.882 L784.001 683.882 L784.56 683.882 L785.12 683.882 L785.679 683.882 L786.238 683.882 L786.797 683.882 L787.357 683.882 L787.916 683.882 L788.475 683.882 L789.034 683.882 L789.594 683.882 L790.153 683.882 L790.712 683.882 L791.271 683.882 L791.831 683.882 L792.39 683.882 L792.949 683.882 L793.508 683.882 L794.068 683.882 L794.627 683.882 L795.186 683.882 L795.745 683.882 L796.305 683.882 L796.864 683.882 L797.423 683.882 L797.982 683.882 L798.542 683.882 L799.101 683.882 L799.66 683.882 L800.219 683.882 L800.779 683.882 L801.338 683.882 L801.897 683.882 L802.456 683.882 L803.016 683.882 L803.575 683.882 L804.134 683.882 L804.693 683.882 L805.253 683.882 L805.812 683.882 L806.371 683.882 L806.931 683.882 L807.49 683.882 L808.049 683.882 L808.608 683.882 L809.168 683.882 L809.727 683.882 L810.286 683.882 L810.845 683.882 L811.405 683.882 L811.964 683.882 L812.523 683.882 L813.082 683.882 L813.642 683.882 L814.201 683.882 L814.76 683.882 L815.319 683.882 L815.879 683.882 L816.438 683.882 L816.997 683.882 L817.556 683.882 L818.116 683.882 L818.675 683.882 L819.234 683.882 L819.793 683.882 L820.353 683.882 L820.912 683.882 L821.471 683.882 L822.03 683.882 L822.59 683.882 L823.149 683.882 L823.708 683.882 L824.267 683.882 L824.827 683.882 L825.386 683.882 L825.945 683.882 L826.504 683.882 L827.064 683.882 L827.623 683.882 L828.182 683.882 L828.741 683.882 L829.301 683.882 L829.86 683.882 L830.419 683.882 L830.978 683.882 L831.538 683.882 L832.097 683.882 L832.656 683.882 L833.215 683.882 L833.775 683.882 L834.334 683.882 L834.893 683.882 L835.452 683.882 L836.012 683.882 L836.571 683.882 L837.13 683.882 L837.689 683.882 L838.249 683.882 L838.808 683.882 L839.367 683.882 L839.926 683.882 L840.486 683.882 L841.045 683.882 L841.604 683.882 L842.163 683.882 L842.723 683.882 L843.282 683.882 L843.841 683.882 L844.4 683.882 L844.96 683.882 L845.519 683.882 L846.078 683.882 L846.637 683.882 L847.197 683.882 L847.756 683.882 L848.315 683.882 L848.874 683.882 L849.434 683.882 L849.993 683.882 L850.552 683.882 L851.111 683.882 L851.671 683.882 L852.23 683.882 L852.789 683.882 L853.348 683.882 L853.908 683.882 L854.467 683.882 L855.026 683.882 L855.585 683.882 L856.145 683.882 L856.704 683.882 L857.263 683.882 L857.822 683.882 L858.382 683.882 L858.941 683.882 L859.5 683.882 L860.059 683.882 L860.619 683.882 L861.178 683.882 L861.737 683.882 L862.296 683.882 L862.856 683.882 L863.415 683.882 L863.974 683.882 L864.533 683.882 L865.093 683.882 L865.652 683.882 L866.211 683.882 L866.77 683.882 L867.33 683.882 L867.889 683.882 L868.448 683.882 L869.007 683.882 L869.567 683.882 L870.126 683.882 L870.685 683.882 L871.244 683.882 L871.804 683.882 L872.363 683.882 L872.922 683.882 L873.481 683.882 L874.041 683.882 L874.6 683.882 L875.159 683.882 L875.718 683.882 L876.278 683.882 L876.837 683.882 L877.396 683.882 L877.955 683.882 L878.515 683.882 L879.074 683.882 L879.633 683.882 L880.192 683.882 L880.752 683.882 L881.311 683.882 L881.87 683.882 L882.429 683.882 L882.989 683.882 L883.548 683.882 L884.107 683.882 L884.666 683.882 L885.226 683.882 L885.785 683.882 L886.344 683.882 L886.903 683.882 L887.463 683.882 L888.022 683.882 L888.581 683.882 L889.14 683.882 L889.7 683.882 L890.259 683.882 L890.818 683.882 L891.377 683.882 L891.937 683.882 L892.496 683.882 L893.055 683.882 L893.614 683.882 L894.174 683.882 L894.733 683.882 L895.292 683.882 L895.851 683.882 L896.411 683.882 L896.97 683.882 L897.529 683.882 L898.088 683.882 L898.648 683.882 L899.207 683.882 L899.766 683.882 L900.325 683.882 L900.885 683.882 L901.444 683.882 L902.003 683.882 L902.562 683.882 L903.122 683.882 L903.681 683.882 L904.24 683.882 L904.799 683.882 L905.359 683.882 L905.918 683.882 L906.477 683.882 L907.036 683.882 L907.596 683.882 L908.155 683.882 L908.714 683.882 L909.273 683.882 L909.833 683.882 L910.392 683.882 L910.951 683.882 L911.51 683.882 L912.07 683.882 L912.629 683.882 L913.188 683.882 L913.747 683.882 L914.307 683.882 L914.866 683.882 L915.425 683.882 L915.984 683.882 L916.544 683.882 L917.103 683.882 L917.662 683.882 L918.221 683.882 L918.781 683.882 L919.34 683.882 L919.899 683.882 L920.458 683.882 L921.018 683.882 L921.577 683.882 L922.136 683.882 L922.695 683.882 L923.255 683.882 L923.814 683.882 L924.373 683.882 L924.932 683.882 L925.492 683.882 L926.051 683.882 L926.61 683.882 L927.169 683.882 L927.729 683.882 L928.288 683.882 L928.847 683.882 L929.406 683.882 L929.966 683.882 L930.525 683.882 L931.084 683.882 L931.644 683.882 L932.203 683.882 L932.762 683.882 L933.321 683.882 L933.881 683.882 L934.44 683.882 L934.999 683.882 L935.558 683.882 L936.118 683.882 L936.677 683.882 L937.236 683.882 L937.795 683.882 L938.355 683.882 L938.914 683.882 L939.473 683.882 L940.032 683.882 L940.592 683.882 L941.151 683.882 L941.71 683.882 L942.269 683.882 L942.829 683.882 L943.388 683.882 L943.947 683.882 L944.506 683.882 L945.066 683.882 L945.625 683.882 L946.184 683.882 L946.743 683.882 L947.303 683.882 L947.862 683.882 L948.421 683.882 L948.98 683.882 L949.54 683.882 L950.099 683.882 L950.658 683.882 L951.217 683.882 L951.777 683.882 L952.336 683.882 L952.895 683.882 L953.454 683.882 L954.014 683.882 L954.573 683.882 L955.132 683.882 L955.691 683.882 L956.251 683.882 L956.81 683.882 L957.369 683.882 L957.928 683.882 L958.488 683.882 L959.047 683.882 L959.606 683.882 L960.165 683.882 L960.725 683.882 L961.284 683.882 L961.843 683.882 L962.402 683.882 L962.962 683.882 L963.521 683.882 L964.08 683.882 L964.639 683.882 L965.199 683.882 L965.758 683.882 L966.317 683.882 L966.876 683.882 L967.436 683.882 L967.995 683.882 L968.554 683.882 L969.113 683.882 L969.673 683.882 L970.232 683.882 L970.791 683.882 L971.35 683.882 L971.91 683.882 L972.469 683.882 L973.028 683.882 L973.587 683.882 L974.147 683.882 L974.706 683.882 L975.265 683.882 L975.824 683.882 L976.384 683.882 L976.943 683.882 L977.502 683.882 L978.061 683.882 L978.621 683.882 L979.18 683.882 L979.739 683.882 L980.298 683.882 L980.858 683.882 L981.417 683.882 L981.976 683.882 L982.535 683.882 L983.095 683.882 L983.654 683.882 L984.213 683.882 L984.772 683.882 L985.332 683.882 L985.891 683.882 L986.45 683.882 L987.009 683.882 L987.569 683.882 L988.128 683.882 L988.687 683.882 L989.246 683.882 L989.806 683.882 L990.365 683.882 L990.924 683.882 L991.483 683.882 L992.043 683.882 L992.602 683.882 L993.161 683.882 L993.72 683.882 L994.28 683.882 L994.839 683.882 L995.398 683.882 L995.957 683.882 L996.517 683.882 L997.076 683.882 L997.635 683.882 L998.194 683.882 L998.754 683.882 L999.313 683.882 L999.872 683.882 L1000.43 683.882 L1000.99 683.882 L1001.55 683.882 L1002.11 683.882 L1002.67 683.882 L1003.23 683.882 L1003.79 683.882 L1004.35 683.882 L1004.91 683.882 L1005.46 683.882 L1006.02 683.882 L1006.58 683.882 L1007.14 683.882 L1007.7 683.882 L1008.26 683.882 L1008.82 683.882 L1009.38 683.882 L1009.94 683.882 L1010.5 683.882 L1011.06 683.882 L1011.62 683.882 L1012.18 683.882 L1012.73 683.882 L1013.29 683.882 L1013.85 683.882 L1014.41 683.882 L1014.97 683.882 L1015.53 683.882 L1016.09 683.882 L1016.65 683.882 L1017.21 683.882 L1017.77 683.882 L1018.33 683.882 L1018.89 683.882 L1019.45 683.882 L1020.01 683.882 L1020.56 683.882 L1021.12 683.882 L1021.68 683.882 L1022.24 683.882 L1022.8 683.882 L1023.36 683.882 L1023.92 683.882 L1024.48 683.882 L1025.04 683.882 L1025.6 683.882 L1026.16 683.882 L1026.72 683.882 L1027.28 683.882 L1027.83 683.882 L1028.39 683.882 L1028.95 683.882 L1029.51 683.882 L1030.07 683.882 L1030.63 683.882 L1031.19 683.882 L1031.75 683.882 L1032.31 683.882 L1032.87 683.882 L1033.43 683.882 L1033.99 683.882 L1034.55 683.882 L1035.1 683.882 L1035.66 683.882 L1036.22 683.882 L1036.78 683.882 L1037.34 683.882 L1037.9 683.882 L1038.46 683.882 L1039.02 683.882 L1039.58 683.882 L1040.14 683.882 L1040.7 683.882 L1041.26 683.882 L1041.82 683.882 L1042.38 683.882 L1042.93 683.882 L1043.49 683.882 L1044.05 683.882 L1044.61 683.882 L1045.17 683.882 L1045.73 683.882 L1046.29 683.882 L1046.85 683.882 L1047.41 683.882 L1047.97 683.882 L1048.53 683.882 L1049.09 683.882 L1049.65 683.882 L1050.2 683.882 L1050.76 683.882 L1051.32 683.882 L1051.88 683.882 L1052.44 683.882 L1053 683.882 L1053.56 683.882 L1054.12 683.882 L1054.68 683.882 L1055.24 683.882 L1055.8 683.882 L1056.36 683.882 L1056.92 683.882 L1057.48 683.882 L1058.03 683.882 L1058.59 683.882 L1059.15 683.882 L1059.71 683.882 L1060.27 683.882 L1060.83 683.882 L1061.39 683.882 L1061.95 683.882 L1062.51 683.882 L1063.07 683.882 L1063.63 683.882 L1064.19 683.882 L1064.75 683.882 L1065.3 683.882 L1065.86 683.882 L1066.42 683.882 L1066.98 683.882 L1067.54 683.882 L1068.1 683.882 L1068.66 683.882 L1069.22 683.882 L1069.78 683.882 L1070.34 683.882 L1070.9 683.882 L1071.46 683.882 L1072.02 683.882 L1072.57 683.882 L1073.13 683.882 L1073.69 683.882 L1074.25 683.882 L1074.81 683.882 L1075.37 683.882 L1075.93 683.882 L1076.49 683.882 L1077.05 683.882 L1077.61 683.882 L1078.17 683.882 L1078.73 683.882 L1079.29 683.882 L1079.85 683.882 L1080.4 683.882 L1080.96 683.882 L1081.52 683.882 L1082.08 683.882 L1082.64 683.882 L1083.2 683.882 L1083.76 683.882 L1084.32 683.882 L1084.88 683.882 L1085.44 683.882 L1086 683.882 L1086.56 683.882 L1087.12 683.882 L1087.67 683.882 L1088.23 683.882 L1088.79 683.882 L1089.35 683.882 L1089.91 683.882 L1090.47 683.882 L1091.03 683.882 L1091.59 683.882 L1092.15 683.882 L1092.71 683.882 L1093.27 683.882 L1093.83 683.882 L1094.39 683.882 L1094.94 683.882 L1095.5 683.882 L1096.06 683.882 L1096.62 683.882 L1097.18 683.882 L1097.74 683.882 L1098.3 683.882 L1098.86 683.882 L1099.42 683.882 L1099.98 683.882 L1100.54 683.882 L1101.1 683.882 L1101.66 683.882 L1102.22 683.882 L1102.77 683.882 L1103.33 683.882 L1103.89 683.882 L1104.45 683.882 L1105.01 683.882 L1105.57 683.882 L1106.13 683.882 L1106.69 683.882 L1107.25 683.882 L1107.81 683.882 L1108.37 683.882 L1108.93 683.882 L1109.49 683.882 L1110.04 683.882 L1110.6 683.882 L1111.16 683.882 L1111.72 683.882 L1112.28 683.882 L1112.84 683.882 L1113.4 683.882 L1113.96 683.882 L1114.52 683.882 L1115.08 683.882 L1115.64 683.882 L1116.2 683.882 L1116.76 683.882 L1117.31 683.882 L1117.87 683.882 L1118.43 683.882 L1118.99 683.882 L1119.55 683.882 L1120.11 683.882 L1120.67 683.882 L1121.23 683.882 L1121.79 683.882 L1122.35 683.882 L1122.91 683.882 L1123.47 683.882 L1124.03 683.882 L1124.59 683.882 L1125.14 683.882 L1125.7 683.882 L1126.26 683.882 L1126.82 683.882 L1127.38 683.882 L1127.94 683.882 L1128.5 683.882 L1129.06 683.882 L1129.62 683.882 L1130.18 683.882 L1130.74 683.882 L1131.3 683.882 L1131.86 683.882 L1132.41 683.882 L1132.97 683.882 L1133.53 683.882 L1134.09 683.882 L1134.65 683.882 L1135.21 683.882 L1135.77 683.882 L1136.33 683.882 L1136.89 683.882 L1137.45 683.882 L1138.01 683.882 L1138.57 683.882 L1139.13 683.882 L1139.68 683.882 L1140.24 683.882 L1140.8 683.882 L1141.36 683.882 L1141.92 683.882 L1142.48 683.882 L1143.04 683.882 L1143.6 683.882 L1144.16 683.882 L1144.72 683.882 L1145.28 683.882 L1145.84 683.882 L1146.4 683.882 L1146.96 683.882 L1147.51 683.882 L1148.07 683.882 L1148.63 683.882 L1149.19 683.882 L1149.75 683.882 L1150.31 683.882 L1150.87 683.882 L1151.43 683.882 L1151.99 683.882 L1152.55 683.882 L1153.11 683.882 L1153.67 683.882 L1154.23 683.882 L1154.78 683.882 L1155.34 683.882 L1155.9 683.882 L1156.46 683.882 L1157.02 683.882 L1157.58 683.882 L1158.14 683.882 L1158.7 683.882 L1159.26 683.882 L1159.82 683.882 L1160.38 683.882 L1160.94 683.882 L1161.5 683.882 L1162.05 683.882 L1162.61 683.882 L1163.17 683.882 L1163.73 683.882 L1164.29 683.882 L1164.85 683.882 L1165.41 683.882 L1165.97 683.882 L1166.53 683.882 L1167.09 683.882 L1167.65 683.882 L1168.21 683.882 L1168.77 683.882 L1169.33 683.882 L1169.88 683.882 L1170.44 683.882 L1171 683.882 L1171.56 683.882 L1172.12 683.882 L1172.68 683.882 L1173.24 683.882 L1173.8 683.882 L1174.36 683.882 L1174.92 683.882 L1175.48 683.882 L1176.04 683.882 L1176.6 683.882 L1177.15 683.882 L1177.71 683.882 L1178.27 683.882 L1178.83 683.882 L1179.39 683.882 L1179.95 683.882 L1180.51 683.882 L1181.07 683.882 L1181.63 683.882 L1182.19 683.882 L1182.75 683.882 L1183.31 683.882 L1183.87 683.882 L1184.43 683.882 L1184.98 683.882 L1185.54 683.882 L1186.1 683.882 L1186.66 683.882 L1187.22 683.882 L1187.78 683.882 L1188.34 683.882 L1188.9 683.882 L1189.46 683.882 L1190.02 683.882 L1190.58 683.882 L1191.14 683.882 L1191.7 683.882 L1192.25 683.882 L1192.81 683.882 L1193.37 683.882 L1193.93 683.882 L1194.49 683.882 L1195.05 683.882 L1195.61 683.882 L1196.17 683.882 L1196.73 683.882 L1197.29 683.882 L1197.85 683.882 L1198.41 683.882 L1198.97 683.882 L1199.52 683.882 L1200.08 683.882 L1200.64 683.882 L1201.2 683.882 L1201.76 683.882 L1202.32 683.882 L1202.88 683.882 L1203.44 683.882 L1204 683.882 L1204.56 683.882 L1205.12 683.882 L1205.68 683.882 L1206.24 683.882 L1206.8 683.882 L1207.35 683.882 L1207.91 683.882 L1208.47 683.882 L1209.03 683.882 L1209.59 683.882 L1210.15 683.882 L1210.71 683.882 L1211.27 683.882 L1211.83 683.882 L1212.39 683.882 L1212.95 683.882 L1213.51 683.882 L1214.07 683.882 L1214.62 683.882 L1215.18 683.882 L1215.74 683.882 L1216.3 683.882 L1216.86 683.882 L1217.42 683.882 L1217.98 683.882 L1218.54 683.882 L1219.1 683.882 L1219.66 683.882 L1220.22 683.882 L1220.78 683.882 L1221.34 683.882 L1221.89 683.882 L1222.45 683.882 L1223.01 683.882 L1223.57 683.882 L1224.13 683.882 L1224.69 683.882 L1225.25 683.882 L1225.81 683.882 L1226.37 683.882 L1226.93 683.882 L1227.49 683.882 L1228.05 683.882 L1228.61 683.882 L1229.17 683.882 L1229.72 683.882 L1230.28 683.882 L1230.84 683.882 L1231.4 683.882 L1231.96 683.882 L1232.52 683.882 L1233.08 683.882 L1233.64 683.882 L1234.2 683.882 L1234.76 683.882 L1235.32 683.882 L1235.88 683.882 L1236.44 683.882 L1236.99 683.882 L1237.55 683.882 L1238.11 683.882 L1238.67 683.882 L1239.23 683.882 L1239.79 683.882 L1240.35 683.882 L1240.91 683.882 L1241.47 683.882 L1242.03 683.882 L1242.59 683.882 L1243.15 683.882 L1243.71 683.882 L1244.26 683.882 L1244.82 683.882 L1245.38 683.882 L1245.94 683.882 L1246.5 683.882 L1247.06 683.882 L1247.62 683.882 L1248.18 683.882 L1248.74 683.882 L1249.3 683.882 L1249.86 683.882 L1250.42 683.882 L1250.98 683.882 L1251.54 683.882 L1252.09 683.882 L1252.65 683.882 L1253.21 683.882 L1253.77 683.882 L1254.33 683.882 L1254.89 683.882 L1255.45 683.882 L1256.01 683.882 L1256.57 683.882 L1257.13 683.882 L1257.69 683.882 L1258.25 683.882 L1258.81 683.882 L1259.36 683.882 L1259.92 683.882 L1260.48 683.882 L1261.04 683.882 L1261.6 683.882 L1262.16 683.882 L1262.72 683.882 L1263.28 683.882 L1263.84 683.882 L1264.4 683.882 L1264.96 683.882 L1265.52 683.882 L1266.08 683.882 L1266.63 683.882 L1267.19 683.882 L1267.75 683.882 L1268.31 683.882 L1268.87 683.882 L1269.43 683.882 L1269.99 683.882 L1270.55 683.882 L1271.11 683.882 L1271.67 683.882 L1272.23 683.882 L1272.79 683.882 L1273.35 683.882 L1273.91 683.882 L1274.46 683.882 L1275.02 683.882 L1275.58 683.882 L1276.14 683.882 L1276.7 683.882 L1277.26 683.882 L1277.82 683.882 L1278.38 683.882 L1278.94 683.882 L1279.5 683.882 L1280.06 683.882 L1280.62 683.882 L1281.18 683.882 L1281.73 683.882 L1282.29 683.882 L1282.85 683.882 L1283.41 683.882 L1283.97 683.882 L1284.53 683.882 L1285.09 683.882 L1285.65 683.882 L1286.21 683.882 L1286.77 683.882 L1287.33 683.882 L1287.89 683.882 L1288.45 683.882 L1289 683.882 L1289.56 683.882 L1290.12 683.882 L1290.68 683.882 L1291.24 683.882 L1291.8 683.882 L1292.36 683.882 L1292.92 683.882 L1293.48 683.882 L1294.04 683.882 L1294.6 683.882 L1295.16 683.882 L1295.72 683.882 L1296.28 683.882 L1296.83 683.882 L1297.39 683.882 L1297.95 683.882 L1298.51 683.882 L1299.07 683.882 L1299.63 683.882 L1300.19 683.882 L1300.75 683.882 L1301.31 683.882 L1301.87 683.882 L1302.43 683.882 L1302.99 683.882 L1303.55 683.882 L1304.1 683.882 L1304.66 683.882 L1305.22 683.882 L1305.78 683.882 L1306.34 683.882 L1306.9 683.882 L1307.46 683.882 L1308.02 683.882 L1308.58 683.882 L1309.14 683.882 L1309.7 683.882 L1310.26 683.882 L1310.82 683.882 L1311.38 683.882 L1311.93 683.882 L1312.49 683.882 L1313.05 683.882 L1313.61 683.882 L1314.17 683.882 L1314.73 683.882 L1315.29 683.882 L1315.85 683.882 L1316.41 683.882 L1316.97 683.882 L1317.53 683.882 L1318.09 683.882 L1318.65 683.882 L1319.2 683.882 L1319.76 683.882 L1320.32 683.882 L1320.88 683.882 L1321.44 683.882 L1322 683.882 L1322.56 683.882 L1323.12 683.882 L1323.68 683.882 L1324.24 683.882 L1324.8 683.882 L1325.36 683.882 L1325.92 683.882 L1326.47 683.882 L1327.03 683.882 L1327.59 683.882 L1328.15 683.882 L1328.71 683.882 L1329.27 683.882 L1329.83 683.882 L1330.39 683.882 L1330.95 683.882 L1331.51 683.882 L1332.07 683.882 L1332.63 683.882 L1333.19 683.882 L1333.75 683.882 L1334.3 683.882 L1334.86 683.882 L1335.42 683.882 L1335.98 683.882 L1336.54 683.882 L1337.1 683.882 L1337.66 683.882 L1338.22 683.882 L1338.78 683.882 L1339.34 683.882 L1339.9 683.882 L1340.46 683.882 L1341.02 683.882 L1341.57 683.882 L1342.13 683.882 L1342.69 683.882 L1343.25 683.882 L1343.81 683.882 L1344.37 683.882 L1344.93 683.882 L1345.49 683.882 L1346.05 683.882 L1346.61 683.882 L1347.17 683.882 L1347.73 683.882 L1348.29 683.882 L1348.84 683.882 L1349.4 683.882 L1349.96 683.882 L1350.52 683.882 L1351.08 683.882 L1351.64 683.882 L1352.2 683.882 L1352.76 683.882 L1353.32 683.882 L1353.88 683.882 L1354.44 683.882 L1355 683.882 L1355.56 683.882 L1356.12 683.882 L1356.67 683.882 L1357.23 683.882 L1357.79 683.882 L1358.35 683.882 L1358.91 683.882 L1359.47 683.882 L1360.03 683.882 L1360.59 683.882 L1361.15 683.882 L1361.71 683.882 L1362.27 683.882 L1362.83 683.882 L1363.39 683.882 L1363.94 683.882 L1364.5 683.882 L1365.06 683.882 L1365.62 683.882 L1366.18 683.882 L1366.74 683.882 L1367.3 683.882 L1367.86 683.882 L1368.42 683.882 L1368.98 683.882 L1369.54 683.882 L1370.1 683.882 L1370.66 683.882 L1371.21 683.882 L1371.77 683.882 L1372.33 683.882 L1372.89 683.882 L1373.45 683.882 L1374.01 683.882 L1374.57 683.882 L1375.13 683.882 L1375.69 683.882 L1376.25 683.882 L1376.81 683.882 L1377.37 683.882 L1377.93 683.882 L1378.49 683.882 L1379.04 683.882 L1379.6 683.882 L1380.16 683.882 L1380.72 683.882 L1381.28 683.882 L1381.84 683.882 L1382.4 683.882 L1382.96 683.882 L1383.52 683.882 L1384.08 683.882 L1384.64 683.882 L1385.2 683.882 L1385.76 683.882 L1386.31 683.882 L1386.87 683.882 L1387.43 683.882 L1387.99 683.882 L1388.55 683.882 L1389.11 683.882 L1389.67 683.882 L1390.23 683.882 L1390.79 683.882 L1391.35 683.882 L1391.91 683.882 L1392.47 683.882 L1393.03 683.882 L1393.58 683.882 L1394.14 683.882 L1394.7 683.882 L1395.26 683.882 L1395.82 683.882 L1396.38 683.882 L1396.94 683.882 L1397.5 683.882 L1398.06 683.882 L1398.62 683.882 L1399.18 683.882 L1399.74 683.882 L1400.3 683.882 L1400.86 683.882 L1401.41 683.882 L1401.97 683.882 L1402.53 683.882 L1403.09 683.882 L1403.65 683.882 L1404.21 683.882 L1404.77 683.882 L1405.33 683.882 L1405.89 683.882 L1406.45 683.882 L1407.01 683.882 L1407.57 683.882 L1408.13 683.882 L1408.68 683.882 L1409.24 683.882 L1409.8 683.882 L1410.36 683.882 L1410.92 683.882 L1411.48 683.882 L1412.04 683.882 L1412.6 683.882 L1413.16 683.882 L1413.72 683.882 L1414.28 683.882 L1414.84 683.882 L1415.4 683.882 L1415.95 683.882 L1416.51 683.882 L1417.07 683.882 L1417.63 683.882 L1418.19 683.882 L1418.75 683.882 L1419.31 683.882 L1419.87 683.882 L1420.43 683.882 L1420.99 683.882 L1421.55 683.882 L1422.11 683.882 L1422.67 683.882 L1423.23 683.882 L1423.78 683.882 L1424.34 683.882 L1424.9 683.882 L1425.46 683.882 L1426.02 683.882 L1426.58 683.882 L1427.14 683.882 L1427.7 683.882 L1428.26 683.882 L1428.82 683.882 L1429.38 683.882 L1429.94 683.882 L1430.5 683.882 L1431.05 683.882 L1431.61 683.882 L1432.17 683.882 L1432.73 683.882 L1433.29 683.882 L1433.85 683.882 L1434.41 683.882 L1434.97 683.882 L1435.53 683.882 L1436.09 683.882 L1436.65 683.882 L1437.21 683.882 L1437.77 683.882 L1438.33 683.882 L1438.88 683.882 L1439.44 683.882 L1440 683.882 L1440.56 683.882 L1441.12 683.882 L1441.68 683.882 L1442.24 683.882 L1442.8 683.882 L1443.36 683.882 L1443.92 683.882 L1444.48 683.882 L1445.04 683.882 L1445.6 683.882 L1446.15 683.882 L1446.71 683.882 L1447.27 683.882 L1447.83 683.882 L1448.39 683.882 L1448.95 683.882 L1449.51 683.882 L1450.07 683.882 L1450.63 683.882 L1451.19 683.882 L1451.75 683.882 L1452.31 683.882 L1452.87 683.882 L1453.42 683.882 L1453.98 683.882 L1454.54 683.882 L1455.1 683.882 L1455.66 683.882 L1456.22 683.882 L1456.78 683.882 L1457.34 683.882 L1457.9 683.882 L1458.46 683.882 L1459.02 683.882 L1459.58 683.882 L1460.14 683.882 L1460.7 683.882 L1461.25 683.882 L1461.81 683.882 L1462.37 683.882 L1462.93 683.882 L1463.49 683.882 L1464.05 683.882 L1464.61 683.882 L1465.17 683.882 L1465.73 683.882 L1466.29 683.882 L1466.85 683.882 L1467.41 683.882 L1467.97 683.882 L1468.52 683.882 L1469.08 683.882 L1469.64 683.882 L1470.2 683.882 L1470.76 683.882 L1471.32 683.882 L1471.88 683.882 L1472.44 683.882 L1473 683.882 L1473.56 683.882 L1474.12 683.882 L1474.68 683.882 L1475.24 683.882 L1475.79 683.882 L1476.35 683.882 L1476.91 683.882 L1477.47 683.882 L1478.03 683.882 L1478.59 683.882 L1479.15 683.882 L1479.71 683.882 L1480.27 683.882 L1480.83 683.882 L1481.39 683.882 L1481.95 683.882 L1482.51 683.882 L1483.07 683.882 L1483.62 683.882 L1484.18 683.882 L1484.74 683.882 L1485.3 683.882 L1485.86 683.882 L1486.42 683.882 L1486.98 683.882 L1487.54 683.882 L1488.1 683.882 L1488.66 683.882 L1489.22 683.882 L1489.78 683.882 L1490.34 683.882 L1490.89 683.882 L1491.45 683.882 L1492.01 683.882 L1492.57 683.882 L1493.13 683.882 L1493.69 683.882 L1494.25 683.882 L1494.81 683.882 L1495.37 683.882 L1495.93 683.882 L1496.49 683.882 L1497.05 683.882 L1497.61 683.882 L1498.16 683.882 L1498.72 683.882 L1499.28 683.882 L1499.84 683.882 L1500.4 683.882 L1500.96 683.882 L1501.52 683.882 L1502.08 683.882 L1502.64 683.882 L1503.2 683.882 L1503.76 683.882 L1504.32 683.882 L1504.88 683.882 L1505.44 683.882 L1505.99 683.882 L1506.55 683.882 L1507.11 683.882 L1507.67 683.882 L1508.23 683.882 L1508.79 683.882 L1509.35 683.882 L1509.91 683.882 L1510.47 683.882 L1511.03 683.882 L1511.59 683.882 L1512.15 683.882 L1512.71 683.882 L1513.26 683.882 L1513.82 683.882 L1514.38 683.882 L1514.94 683.882 L1515.5 683.882 L1516.06 683.882 L1516.62 683.882 L1517.18 683.882 L1517.74 683.882 L1518.3 683.882 L1518.86 683.882 L1519.42 683.882 L1519.98 683.882 L1520.53 683.882 L1521.09 683.882 L1521.65 683.882 L1522.21 683.882 L1522.77 683.882 L1523.33 683.882 L1523.89 683.882 L1524.45 683.882 L1525.01 683.882 L1525.57 683.882 L1526.13 683.882 L1526.69 683.882 L1527.25 683.882 L1527.81 683.882 L1528.36 683.882 L1528.92 683.882 L1529.48 683.882 L1530.04 683.882 L1530.6 683.882 L1531.16 683.882 L1531.72 683.882 L1532.28 683.882 L1532.84 683.882 L1533.4 683.882 L1533.96 683.882 L1534.52 683.882 L1535.08 683.882 L1535.63 683.882 L1536.19 683.882 L1536.75 683.882 L1537.31 683.882 L1537.87 683.882 L1538.43 683.882 L1538.99 683.882 L1539.55 683.882 L1540.11 683.882 L1540.67 683.882 L1541.23 683.882 L1541.79 683.882 L1542.35 683.882 L1542.9 683.882 L1543.46 683.882 L1544.02 683.882 L1544.58 683.882 L1545.14 683.882 L1545.7 683.882 L1546.26 683.882 L1546.82 683.882 L1547.38 683.882 L1547.94 683.882 L1548.5 683.882 L1549.06 683.882 L1549.62 683.882 L1550.18 683.882 L1550.73 683.882 L1551.29 683.882 L1551.85 683.882 L1552.41 683.882 L1552.97 683.882 L1553.53 683.882 L1554.09 683.882 L1554.65 683.882 L1555.21 683.882 L1555.77 683.882 L1556.33 683.882 L1556.89 683.882 L1557.45 683.882 L1558 683.882 L1558.56 683.882 L1559.12 683.882 L1559.68 683.882 L1560.24 683.882 L1560.8 683.882 L1561.36 683.882 L1561.92 683.882 L1562.48 683.882 L1563.04 683.882 L1563.6 683.882 L1564.16 683.882 L1564.72 683.882 L1565.28 683.882 L1565.83 683.882 L1566.39 683.882 L1566.95 683.882 L1567.51 683.882 L1568.07 683.882 L1568.63 683.882 L1569.19 683.882 L1569.75 683.882 L1570.31 683.882 L1570.87 683.882 L1571.43 683.882 L1571.99 683.882 L1572.55 683.882 L1573.1 683.882 L1573.66 683.882 L1574.22 683.882 L1574.78 683.882 L1575.34 683.882 L1575.9 683.882 L1576.46 683.882 L1577.02 683.882 L1577.58 683.882 L1578.14 683.882 L1578.7 683.882 L1579.26 683.882 L1579.82 683.882 L1580.37 683.882 L1580.93 683.882 L1581.49 683.882 L1582.05 683.882 L1582.61 683.882 L1583.17 683.882 L1583.73 683.882 L1584.29 683.882 L1584.85 683.882 L1585.41 683.882 L1585.97 683.882 L1586.53 683.882 L1587.09 683.882 L1587.65 683.882 L1588.2 683.882 L1588.76 683.882 L1589.32 683.882 L1589.88 683.882 L1590.44 683.882 L1591 683.882 L1591.56 683.882 L1592.12 683.882 L1592.68 683.882 L1593.24 683.882 L1593.8 683.882 L1594.36 683.882 L1594.92 683.882 L1595.47 683.882 L1596.03 683.882 L1596.59 683.882 L1597.15 683.882 L1597.71 683.882 L1598.27 683.882 L1598.83 683.882 L1599.39 683.882 L1599.95 683.882 L1600.51 683.882 L1601.07 683.882 L1601.63 683.882 L1602.19 683.882 L1602.74 683.882 L1603.3 683.882 L1603.86 683.882 L1604.42 683.882 L1604.98 683.882 L1605.54 683.882 L1606.1 683.882 L1606.66 683.882 L1607.22 683.882 L1607.78 683.882 L1608.34 683.882 L1608.9 683.882 L1609.46 683.882 L1610.02 683.882 L1610.57 683.882 L1611.13 683.882 L1611.69 683.882 L1612.25 683.882 L1612.81 683.882 L1613.37 683.882 L1613.93 683.882 L1614.49 683.882 L1615.05 683.882 L1615.61 683.882 L1616.17 683.882 L1616.73 683.882 L1617.29 683.882 L1617.84 683.882 L1618.4 683.882 L1618.96 683.882 L1619.52 683.882 L1620.08 683.882 L1620.64 683.882 L1621.2 683.882 L1621.76 683.882 L1622.32 683.882 L1622.88 683.882 L1623.44 683.882 L1624 683.882 L1624.56 683.882 L1625.11 683.882 L1625.67 683.882 L1626.23 683.882 L1626.79 683.882 L1627.35 683.882 L1627.91 683.882 L1628.47 683.882 L1629.03 683.882 L1629.59 683.882 L1630.15 683.882 L1630.71 683.882 L1631.27 683.882 L1631.83 683.882 L1632.39 683.882 L1632.94 683.882 L1633.5 683.882 L1634.06 683.882 L1634.62 683.882 L1635.18 683.882 L1635.74 683.882 L1636.3 683.882 L1636.86 683.882 L1637.42 683.882 L1637.98 683.882 L1638.54 683.882 L1639.1 683.882 L1639.66 683.882 L1640.21 683.882 L1640.77 683.882 L1641.33 683.882 L1641.89 683.882 L1642.45 683.882 L1643.01 683.882 L1643.57 683.882 L1644.13 683.882 L1644.69 683.882 L1645.25 683.882 L1645.81 683.882 L1646.37 683.882 L1646.93 683.882 L1647.48 683.882 L1648.04 683.882 L1648.6 683.882 L1649.16 683.882 L1649.72 683.882 L1650.28 683.882 L1650.84 683.882 L1651.4 683.882 L1651.96 683.882 L1652.52 683.882 L1653.08 683.882 L1653.64 683.882 L1654.2 683.882 L1654.76 683.882 L1655.31 683.882 L1655.87 683.882 L1656.43 683.882 L1656.99 683.882 L1657.55 683.882 L1658.11 683.882 L1658.67 683.882 L1659.23 683.882 L1659.79 683.882 L1660.35 683.882 L1660.91 683.882 L1661.47 683.882 L1662.03 683.882 L1662.58 683.882 L1663.14 683.882 L1663.7 683.882 L1664.26 683.882 L1664.82 683.882 L1665.38 683.882 L1665.94 683.882 L1666.5 683.882 L1667.06 683.882 L1667.62 683.882 L1668.18 683.882 L1668.74 683.882 L1669.3 683.882 L1669.85 683.882 L1670.41 683.882 L1670.97 683.882 L1671.53 683.882 L1672.09 683.882 L1672.65 683.882 L1673.21 683.882 L1673.77 683.882 L1674.33 683.882 L1674.89 683.882 L1675.45 683.882 L1676.01 683.882 L1676.57 683.882 L1677.13 683.882 L1677.68 683.882 L1678.24 683.882 L1678.8 683.882 L1679.36 683.882 L1679.92 683.882 L1680.48 683.882 L1681.04 683.882 L1681.6 683.882 L1682.16 683.882 L1682.72 683.882 L1683.28 683.882 L1683.84 683.882 L1684.4 683.882 L1684.95 683.882 L1685.51 683.882 L1686.07 683.882 L1686.63 683.882 L1687.19 683.882 L1687.75 683.882 L1688.31 683.882 L1688.87 683.882 L1689.43 683.882 L1689.99 683.882 L1690.55 683.882 L1691.11 683.882 L1691.67 683.882 L1692.23 683.882 L1692.78 683.882 L1693.34 683.882 L1693.9 683.882 L1694.46 683.882 L1695.02 683.882 L1695.58 683.882 L1696.14 683.882 L1696.7 683.882 L1697.26 683.882 L1697.82 683.882 L1698.38 683.882 L1698.94 683.882 L1699.5 683.882 L1700.05 683.882 L1700.61 683.882 L1701.17 683.882 L1701.73 683.882 L1702.29 683.882 L1702.85 683.882 L1703.41 683.882 L1703.97 683.882 L1704.53 683.882 L1705.09 683.882 L1705.65 683.882 L1706.21 683.882 L1706.77 683.882 L1707.32 683.882 L1707.88 683.882 L1708.44 683.882 L1709 683.882 L1709.56 683.882 L1710.12 683.882 L1710.68 683.882 L1711.24 683.882 L1711.8 683.882 L1712.36 683.882 L1712.92 683.882 L1713.48 683.882 L1714.04 683.882 L1714.6 683.882 L1715.15 683.882 L1715.71 683.882 L1716.27 683.882 L1716.83 683.882 L1717.39 683.882 L1717.95 683.882 L1718.51 683.882 L1719.07 683.882 L1719.63 683.882 L1720.19 683.882 L1720.75 683.882 L1721.31 683.882 L1721.87 683.882 L1722.42 683.882 L1722.98 683.882 L1723.54 683.882 L1724.1 683.882 L1724.66 683.882 L1725.22 683.882 L1725.78 683.882 L1726.34 683.882 L1726.9 683.882 L1727.46 683.882 L1728.02 683.882 L1728.58 683.882 L1729.14 683.882 L1729.69 683.882 L1730.25 683.882 L1730.81 683.882 L1731.37 683.882 L1731.93 683.882 L1732.49 683.882 L1733.05 683.882 L1733.61 683.882 L1734.17 683.882 L1734.73 683.882 L1735.29 683.882 L1735.85 683.882 L1736.41 683.882 L1736.97 683.882 L1737.52 683.882 L1738.08 683.882 L1738.64 683.882 L1739.2 683.882 L1739.76 683.882 L1740.32 683.882 L1740.88 683.882 L1741.44 683.882 L1742 683.882 L1742.56 683.882 L1743.12 683.882 L1743.68 683.882 L1744.24 683.882 L1744.79 683.882 L1745.35 683.882 L1745.91 683.882 L1746.47 683.882 L1747.03 683.882 L1747.59 683.882 L1748.15 683.882 L1748.71 683.882 L1749.27 683.882 L1749.83 683.882 L1750.39 683.882 L1750.95 683.882 L1751.51 683.882 L1752.06 683.882 L1752.62 683.882 L1753.18 683.882 L1753.74 683.882 L1754.3 683.882 L1754.86 683.882 L1755.42 683.882 L1755.98 683.882 L1756.54 683.882 L1757.1 683.882 L1757.66 683.882 L1758.22 683.882 L1758.78 683.882 L1759.34 683.882 L1759.89 683.882 L1760.45 683.882 L1761.01 683.882 L1761.57 683.882 L1762.13 683.882 L1762.69 683.882 L1763.25 683.882 L1763.81 683.882 L1764.37 683.882 L1764.93 683.882 L1765.49 683.882 L1766.05 683.882 L1766.61 683.882 L1767.16 683.882 L1767.72 683.882 L1768.28 683.882 L1768.84 683.882 L1769.4 683.882 L1769.96 683.882 L1770.52 683.882 L1771.08 683.882 L1771.64 683.882 L1772.2 683.882 L1772.76 683.882 L1773.32 683.882 L1773.88 683.882 L1774.43 683.882 L1774.99 683.882 L1775.55 683.882 L1776.11 683.882 L1776.67 683.882 L1777.23 683.882 L1777.79 683.882 L1778.35 683.882 L1778.91 683.882 L1779.47 683.882 L1780.03 683.882 L1780.59 683.882 L1781.15 683.882 L1781.71 683.882 L1782.26 683.882 L1782.82 683.882 L1783.38 683.882 L1783.94 683.882 L1784.5 683.882 L1785.06 683.882 L1785.62 683.882 L1786.18 683.882 L1786.74 683.882 L1787.3 683.882 L1787.86 683.882 L1788.42 683.882 L1788.98 683.882 L1789.53 683.882 L1790.09 683.882 L1790.65 683.882 L1791.21 683.882 L1791.77 683.882 L1792.33 683.882 L1792.89 683.882 L1793.45 683.882 L1794.01 683.882 L1794.57 683.882 L1795.13 683.882 L1795.69 683.882 L1796.25 683.882 L1796.8 683.882 L1797.36 683.882 L1797.92 683.882 L1798.48 683.882 L1799.04 683.882 L1799.6 683.882 L1800.16 683.882 L1800.72 683.882 L1801.28 683.882 L1801.84 683.882 L1802.4 683.882 L1802.96 683.882 L1803.52 683.882 L1804.08 683.882 L1804.63 683.882 L1805.19 683.882 L1805.75 683.882 L1806.31 683.882 L1806.87 683.882 L1807.43 683.882 L1807.99 683.882 L1808.55 683.882 L1809.11 683.882 L1809.67 683.882 L1810.23 683.882 L1810.79 683.882 L1811.35 683.882 L1811.9 683.882 L1812.46 683.882 L1813.02 683.882 L1813.58 683.882 L1814.14 683.882 L1814.7 683.882 L1815.26 683.882 L1815.82 683.882 L1816.38 683.882 L1816.94 683.882 L1817.5 683.882 L1818.06 683.882 L1818.62 683.882 L1819.18 683.882 L1819.73 683.882 L1820.29 683.882 L1820.85 683.882 L1821.41 683.882 L1821.97 683.882 L1822.53 683.882 L1823.09 683.882 L1823.65 683.882 L1824.21 683.882 L1824.77 683.882 L1825.33 683.882 L1825.89 683.882 L1826.45 683.882 L1827 683.882 L1827.56 683.882 L1828.12 683.882 L1828.68 683.882 L1829.24 683.882 L1829.8 683.882 L1830.36 683.882 L1830.92 683.882 L1831.48 683.882 L1832.04 683.882 L1832.6 683.882 L1833.16 683.882 L1833.72 683.882 L1834.27 683.882 L1834.83 683.882 L1835.39 683.882 L1835.95 683.882 L1836.51 683.882 L1837.07 683.882 L1837.63 683.882 L1838.19 683.882 L1838.19 681.972 L1837.63 681.972 L1837.07 681.972 L1836.51 681.972 L1835.95 681.972 L1835.39 681.972 L1834.83 681.972 L1834.27 681.972 L1833.72 681.972 L1833.16 681.972 L1832.6 681.972 L1832.04 681.972 L1831.48 681.972 L1830.92 681.972 L1830.36 681.972 L1829.8 681.972 L1829.24 681.972 L1828.68 681.972 L1828.12 681.972 L1827.56 681.972 L1827 681.972 L1826.45 681.972 L1825.89 681.972 L1825.33 681.972 L1824.77 681.972 L1824.21 681.972 L1823.65 681.972 L1823.09 681.972 L1822.53 681.972 L1821.97 681.972 L1821.41 681.972 L1820.85 681.972 L1820.29 681.972 L1819.73 681.972 L1819.18 681.972 L1818.62 681.972 L1818.06 681.972 L1817.5 681.972 L1816.94 681.972 L1816.38 681.972 L1815.82 681.972 L1815.26 681.972 L1814.7 681.972 L1814.14 681.972 L1813.58 681.972 L1813.02 681.972 L1812.46 681.972 L1811.9 681.972 L1811.35 681.972 L1810.79 681.972 L1810.23 681.972 L1809.67 681.972 L1809.11 681.972 L1808.55 681.972 L1807.99 681.972 L1807.43 681.972 L1806.87 681.972 L1806.31 681.972 L1805.75 681.972 L1805.19 681.972 L1804.63 681.972 L1804.08 681.972 L1803.52 681.972 L1802.96 681.972 L1802.4 681.972 L1801.84 681.972 L1801.28 681.972 L1800.72 681.972 L1800.16 681.972 L1799.6 681.972 L1799.04 681.972 L1798.48 681.972 L1797.92 681.972 L1797.36 681.972 L1796.8 681.972 L1796.25 681.972 L1795.69 681.972 L1795.13 681.972 L1794.57 681.972 L1794.01 681.972 L1793.45 681.972 L1792.89 681.972 L1792.33 681.972 L1791.77 681.972 L1791.21 681.972 L1790.65 681.972 L1790.09 681.972 L1789.53 681.972 L1788.98 681.972 L1788.42 681.972 L1787.86 681.972 L1787.3 681.972 L1786.74 681.972 L1786.18 681.972 L1785.62 681.972 L1785.06 681.972 L1784.5 681.972 L1783.94 681.972 L1783.38 681.972 L1782.82 681.972 L1782.26 681.972 L1781.71 681.972 L1781.15 681.972 L1780.59 681.972 L1780.03 681.972 L1779.47 681.972 L1778.91 681.972 L1778.35 681.972 L1777.79 681.972 L1777.23 681.972 L1776.67 681.972 L1776.11 681.972 L1775.55 681.972 L1774.99 681.972 L1774.43 681.972 L1773.88 681.972 L1773.32 681.972 L1772.76 681.972 L1772.2 681.972 L1771.64 681.972 L1771.08 681.972 L1770.52 681.972 L1769.96 681.972 L1769.4 681.972 L1768.84 681.972 L1768.28 681.972 L1767.72 681.972 L1767.16 681.972 L1766.61 681.972 L1766.05 681.972 L1765.49 681.972 L1764.93 681.972 L1764.37 681.972 L1763.81 681.972 L1763.25 681.972 L1762.69 681.972 L1762.13 681.972 L1761.57 681.972 L1761.01 681.972 L1760.45 681.972 L1759.89 681.972 L1759.34 681.972 L1758.78 681.972 L1758.22 681.972 L1757.66 681.972 L1757.1 681.972 L1756.54 681.972 L1755.98 681.972 L1755.42 681.972 L1754.86 681.972 L1754.3 681.972 L1753.74 681.972 L1753.18 681.972 L1752.62 681.972 L1752.06 681.972 L1751.51 681.972 L1750.95 681.972 L1750.39 681.972 L1749.83 681.972 L1749.27 681.972 L1748.71 681.972 L1748.15 681.972 L1747.59 681.972 L1747.03 681.972 L1746.47 681.972 L1745.91 681.972 L1745.35 681.972 L1744.79 681.972 L1744.24 681.972 L1743.68 681.972 L1743.12 681.972 L1742.56 681.972 L1742 681.972 L1741.44 681.972 L1740.88 681.972 L1740.32 681.972 L1739.76 681.972 L1739.2 681.972 L1738.64 681.972 L1738.08 681.972 L1737.52 681.972 L1736.97 681.972 L1736.41 681.972 L1735.85 681.972 L1735.29 681.972 L1734.73 681.972 L1734.17 681.972 L1733.61 681.972 L1733.05 681.972 L1732.49 681.972 L1731.93 681.972 L1731.37 681.972 L1730.81 681.972 L1730.25 681.972 L1729.69 681.972 L1729.14 681.972 L1728.58 681.972 L1728.02 681.972 L1727.46 681.972 L1726.9 681.972 L1726.34 681.972 L1725.78 681.972 L1725.22 681.972 L1724.66 681.972 L1724.1 681.972 L1723.54 681.972 L1722.98 681.972 L1722.42 681.972 L1721.87 681.972 L1721.31 681.972 L1720.75 681.972 L1720.19 681.972 L1719.63 681.972 L1719.07 681.972 L1718.51 681.972 L1717.95 681.972 L1717.39 681.972 L1716.83 681.972 L1716.27 681.972 L1715.71 681.972 L1715.15 681.972 L1714.6 681.972 L1714.04 681.972 L1713.48 681.972 L1712.92 681.972 L1712.36 681.972 L1711.8 681.972 L1711.24 681.972 L1710.68 681.972 L1710.12 681.972 L1709.56 681.972 L1709 681.972 L1708.44 681.972 L1707.88 681.972 L1707.32 681.972 L1706.77 681.972 L1706.21 681.972 L1705.65 681.972 L1705.09 681.972 L1704.53 681.972 L1703.97 681.972 L1703.41 681.972 L1702.85 681.972 L1702.29 681.972 L1701.73 681.972 L1701.17 681.972 L1700.61 681.972 L1700.05 681.972 L1699.5 681.972 L1698.94 681.972 L1698.38 681.972 L1697.82 681.972 L1697.26 681.972 L1696.7 681.972 L1696.14 681.972 L1695.58 681.972 L1695.02 681.972 L1694.46 681.972 L1693.9 681.972 L1693.34 681.972 L1692.78 681.972 L1692.23 681.972 L1691.67 681.972 L1691.11 681.972 L1690.55 681.972 L1689.99 681.972 L1689.43 681.972 L1688.87 681.972 L1688.31 681.972 L1687.75 681.972 L1687.19 681.972 L1686.63 681.972 L1686.07 681.972 L1685.51 681.972 L1684.95 681.972 L1684.4 681.972 L1683.84 681.972 L1683.28 681.972 L1682.72 681.972 L1682.16 681.972 L1681.6 681.972 L1681.04 681.972 L1680.48 681.972 L1679.92 681.972 L1679.36 681.972 L1678.8 681.972 L1678.24 681.972 L1677.68 681.972 L1677.13 681.972 L1676.57 681.972 L1676.01 681.972 L1675.45 681.972 L1674.89 681.972 L1674.33 681.972 L1673.77 681.972 L1673.21 681.972 L1672.65 681.972 L1672.09 681.972 L1671.53 681.972 L1670.97 681.972 L1670.41 681.972 L1669.85 681.972 L1669.3 681.972 L1668.74 681.972 L1668.18 681.972 L1667.62 681.972 L1667.06 681.972 L1666.5 681.972 L1665.94 681.972 L1665.38 681.972 L1664.82 681.972 L1664.26 681.972 L1663.7 681.972 L1663.14 681.972 L1662.58 681.972 L1662.03 681.972 L1661.47 681.972 L1660.91 681.972 L1660.35 681.972 L1659.79 681.972 L1659.23 681.972 L1658.67 681.972 L1658.11 681.972 L1657.55 681.972 L1656.99 681.972 L1656.43 681.972 L1655.87 681.972 L1655.31 681.972 L1654.76 681.972 L1654.2 681.972 L1653.64 681.972 L1653.08 681.972 L1652.52 681.972 L1651.96 681.972 L1651.4 681.972 L1650.84 681.972 L1650.28 681.972 L1649.72 681.972 L1649.16 681.972 L1648.6 681.972 L1648.04 681.972 L1647.48 681.972 L1646.93 681.972 L1646.37 681.972 L1645.81 681.972 L1645.25 681.972 L1644.69 681.972 L1644.13 681.972 L1643.57 681.972 L1643.01 681.972 L1642.45 681.972 L1641.89 681.972 L1641.33 681.972 L1640.77 681.972 L1640.21 681.972 L1639.66 681.972 L1639.1 681.972 L1638.54 681.972 L1637.98 681.972 L1637.42 681.972 L1636.86 681.972 L1636.3 681.972 L1635.74 681.972 L1635.18 681.972 L1634.62 681.972 L1634.06 681.972 L1633.5 681.972 L1632.94 681.972 L1632.39 681.972 L1631.83 681.972 L1631.27 681.972 L1630.71 681.972 L1630.15 681.972 L1629.59 681.972 L1629.03 681.972 L1628.47 681.972 L1627.91 681.972 L1627.35 681.972 L1626.79 681.972 L1626.23 681.972 L1625.67 681.972 L1625.11 681.972 L1624.56 681.972 L1624 681.972 L1623.44 681.972 L1622.88 681.972 L1622.32 681.972 L1621.76 681.972 L1621.2 681.972 L1620.64 681.972 L1620.08 681.972 L1619.52 681.972 L1618.96 681.972 L1618.4 681.972 L1617.84 681.972 L1617.29 681.972 L1616.73 681.972 L1616.17 681.972 L1615.61 681.972 L1615.05 681.972 L1614.49 681.972 L1613.93 681.972 L1613.37 681.972 L1612.81 681.972 L1612.25 681.972 L1611.69 681.972 L1611.13 681.972 L1610.57 681.972 L1610.02 681.972 L1609.46 681.972 L1608.9 681.972 L1608.34 681.972 L1607.78 681.972 L1607.22 681.972 L1606.66 681.972 L1606.1 681.972 L1605.54 681.972 L1604.98 681.972 L1604.42 681.972 L1603.86 681.972 L1603.3 681.972 L1602.74 681.972 L1602.19 681.972 L1601.63 681.972 L1601.07 681.972 L1600.51 681.972 L1599.95 681.972 L1599.39 681.972 L1598.83 681.972 L1598.27 681.972 L1597.71 681.972 L1597.15 681.972 L1596.59 681.972 L1596.03 681.972 L1595.47 681.972 L1594.92 681.972 L1594.36 681.972 L1593.8 681.972 L1593.24 681.972 L1592.68 681.972 L1592.12 681.972 L1591.56 681.972 L1591 681.972 L1590.44 681.972 L1589.88 681.972 L1589.32 681.972 L1588.76 681.972 L1588.2 681.972 L1587.65 681.972 L1587.09 681.972 L1586.53 681.972 L1585.97 681.972 L1585.41 681.972 L1584.85 681.972 L1584.29 681.972 L1583.73 681.972 L1583.17 681.972 L1582.61 681.972 L1582.05 681.972 L1581.49 681.972 L1580.93 681.972 L1580.37 681.972 L1579.82 681.972 L1579.26 681.972 L1578.7 681.972 L1578.14 681.972 L1577.58 681.972 L1577.02 681.972 L1576.46 681.972 L1575.9 681.972 L1575.34 681.972 L1574.78 681.972 L1574.22 681.972 L1573.66 681.972 L1573.1 681.972 L1572.55 681.972 L1571.99 681.972 L1571.43 681.972 L1570.87 681.972 L1570.31 681.972 L1569.75 681.972 L1569.19 681.972 L1568.63 681.972 L1568.07 681.972 L1567.51 681.972 L1566.95 681.972 L1566.39 681.972 L1565.83 681.972 L1565.28 681.972 L1564.72 681.972 L1564.16 681.972 L1563.6 681.972 L1563.04 681.972 L1562.48 681.972 L1561.92 681.972 L1561.36 681.972 L1560.8 681.972 L1560.24 681.972 L1559.68 681.972 L1559.12 681.972 L1558.56 681.972 L1558 681.972 L1557.45 681.972 L1556.89 681.972 L1556.33 681.972 L1555.77 681.972 L1555.21 681.972 L1554.65 681.972 L1554.09 681.972 L1553.53 681.972 L1552.97 681.972 L1552.41 681.972 L1551.85 681.972 L1551.29 681.972 L1550.73 681.972 L1550.18 681.972 L1549.62 681.972 L1549.06 681.972 L1548.5 681.972 L1547.94 681.972 L1547.38 681.972 L1546.82 681.972 L1546.26 681.972 L1545.7 681.972 L1545.14 681.972 L1544.58 681.972 L1544.02 681.972 L1543.46 681.972 L1542.9 681.972 L1542.35 681.972 L1541.79 681.972 L1541.23 681.972 L1540.67 681.972 L1540.11 681.972 L1539.55 681.972 L1538.99 681.972 L1538.43 681.972 L1537.87 681.972 L1537.31 681.972 L1536.75 681.972 L1536.19 681.972 L1535.63 681.972 L1535.08 681.972 L1534.52 681.972 L1533.96 681.972 L1533.4 681.972 L1532.84 681.972 L1532.28 681.972 L1531.72 681.972 L1531.16 681.972 L1530.6 681.972 L1530.04 681.972 L1529.48 681.972 L1528.92 681.972 L1528.36 681.972 L1527.81 681.972 L1527.25 681.972 L1526.69 681.972 L1526.13 681.972 L1525.57 681.972 L1525.01 681.972 L1524.45 681.972 L1523.89 681.972 L1523.33 681.972 L1522.77 681.972 L1522.21 681.972 L1521.65 681.972 L1521.09 681.972 L1520.53 681.972 L1519.98 681.972 L1519.42 681.972 L1518.86 681.972 L1518.3 681.972 L1517.74 681.972 L1517.18 681.972 L1516.62 681.972 L1516.06 681.972 L1515.5 681.972 L1514.94 681.972 L1514.38 681.972 L1513.82 681.972 L1513.26 681.972 L1512.71 681.972 L1512.15 681.972 L1511.59 681.972 L1511.03 681.972 L1510.47 681.972 L1509.91 681.972 L1509.35 681.972 L1508.79 681.972 L1508.23 681.972 L1507.67 681.972 L1507.11 681.972 L1506.55 681.972 L1505.99 681.972 L1505.44 681.972 L1504.88 681.972 L1504.32 681.972 L1503.76 681.972 L1503.2 681.972 L1502.64 681.972 L1502.08 681.972 L1501.52 681.972 L1500.96 681.972 L1500.4 681.972 L1499.84 681.972 L1499.28 681.972 L1498.72 681.972 L1498.16 681.972 L1497.61 681.972 L1497.05 681.972 L1496.49 681.972 L1495.93 681.972 L1495.37 681.972 L1494.81 681.972 L1494.25 681.972 L1493.69 681.972 L1493.13 681.972 L1492.57 681.972 L1492.01 681.972 L1491.45 681.972 L1490.89 681.972 L1490.34 681.972 L1489.78 681.972 L1489.22 681.972 L1488.66 681.972 L1488.1 681.972 L1487.54 681.972 L1486.98 681.972 L1486.42 681.972 L1485.86 681.972 L1485.3 681.972 L1484.74 681.972 L1484.18 681.972 L1483.62 681.972 L1483.07 681.972 L1482.51 681.972 L1481.95 681.972 L1481.39 681.972 L1480.83 681.972 L1480.27 681.972 L1479.71 681.972 L1479.15 681.972 L1478.59 681.972 L1478.03 681.972 L1477.47 681.972 L1476.91 681.972 L1476.35 681.972 L1475.79 681.972 L1475.24 681.972 L1474.68 681.972 L1474.12 681.972 L1473.56 681.972 L1473 681.972 L1472.44 681.972 L1471.88 681.972 L1471.32 681.972 L1470.76 681.972 L1470.2 681.972 L1469.64 681.972 L1469.08 681.972 L1468.52 681.972 L1467.97 681.972 L1467.41 681.972 L1466.85 681.972 L1466.29 681.972 L1465.73 681.972 L1465.17 681.972 L1464.61 681.972 L1464.05 681.972 L1463.49 681.972 L1462.93 681.972 L1462.37 681.972 L1461.81 681.972 L1461.25 681.972 L1460.7 681.972 L1460.14 681.972 L1459.58 681.972 L1459.02 681.972 L1458.46 681.972 L1457.9 681.972 L1457.34 681.972 L1456.78 681.972 L1456.22 681.972 L1455.66 681.972 L1455.1 681.972 L1454.54 681.972 L1453.98 681.972 L1453.42 681.972 L1452.87 681.972 L1452.31 681.972 L1451.75 681.972 L1451.19 681.972 L1450.63 681.972 L1450.07 681.972 L1449.51 681.972 L1448.95 681.972 L1448.39 681.972 L1447.83 681.972 L1447.27 681.972 L1446.71 681.972 L1446.15 681.972 L1445.6 681.972 L1445.04 681.972 L1444.48 681.972 L1443.92 681.972 L1443.36 681.972 L1442.8 681.972 L1442.24 681.972 L1441.68 681.972 L1441.12 681.972 L1440.56 681.972 L1440 681.972 L1439.44 681.972 L1438.88 681.972 L1438.33 681.972 L1437.77 681.972 L1437.21 681.972 L1436.65 681.972 L1436.09 681.972 L1435.53 681.972 L1434.97 681.972 L1434.41 681.972 L1433.85 681.972 L1433.29 681.972 L1432.73 681.972 L1432.17 681.972 L1431.61 681.972 L1431.05 681.972 L1430.5 681.972 L1429.94 681.972 L1429.38 681.972 L1428.82 681.972 L1428.26 681.972 L1427.7 681.972 L1427.14 681.972 L1426.58 681.972 L1426.02 681.972 L1425.46 681.972 L1424.9 681.972 L1424.34 681.972 L1423.78 681.972 L1423.23 681.972 L1422.67 681.972 L1422.11 681.972 L1421.55 681.972 L1420.99 681.972 L1420.43 681.972 L1419.87 681.972 L1419.31 681.972 L1418.75 681.972 L1418.19 681.972 L1417.63 681.972 L1417.07 681.972 L1416.51 681.972 L1415.95 681.972 L1415.4 681.972 L1414.84 681.972 L1414.28 681.972 L1413.72 681.972 L1413.16 681.972 L1412.6 681.972 L1412.04 681.972 L1411.48 681.972 L1410.92 681.972 L1410.36 681.972 L1409.8 681.972 L1409.24 681.972 L1408.68 681.972 L1408.13 681.972 L1407.57 681.972 L1407.01 681.972 L1406.45 681.972 L1405.89 681.972 L1405.33 681.972 L1404.77 681.972 L1404.21 681.972 L1403.65 681.972 L1403.09 681.972 L1402.53 681.972 L1401.97 681.972 L1401.41 681.972 L1400.86 681.972 L1400.3 681.972 L1399.74 681.972 L1399.18 681.972 L1398.62 681.972 L1398.06 681.972 L1397.5 681.972 L1396.94 681.972 L1396.38 681.972 L1395.82 681.972 L1395.26 681.972 L1394.7 681.972 L1394.14 681.972 L1393.58 681.972 L1393.03 681.972 L1392.47 681.972 L1391.91 681.972 L1391.35 681.972 L1390.79 681.972 L1390.23 681.972 L1389.67 681.972 L1389.11 681.972 L1388.55 681.972 L1387.99 681.972 L1387.43 681.972 L1386.87 681.972 L1386.31 681.972 L1385.76 681.972 L1385.2 681.972 L1384.64 681.972 L1384.08 681.972 L1383.52 681.972 L1382.96 681.972 L1382.4 681.972 L1381.84 681.972 L1381.28 681.972 L1380.72 681.972 L1380.16 681.972 L1379.6 681.972 L1379.04 681.972 L1378.49 681.972 L1377.93 681.972 L1377.37 681.972 L1376.81 681.972 L1376.25 681.972 L1375.69 681.972 L1375.13 681.972 L1374.57 681.972 L1374.01 681.972 L1373.45 681.972 L1372.89 681.972 L1372.33 681.972 L1371.77 681.972 L1371.21 681.972 L1370.66 681.972 L1370.1 681.972 L1369.54 681.972 L1368.98 681.972 L1368.42 681.972 L1367.86 681.972 L1367.3 681.972 L1366.74 681.972 L1366.18 681.972 L1365.62 681.972 L1365.06 681.972 L1364.5 681.972 L1363.94 681.972 L1363.39 681.972 L1362.83 681.972 L1362.27 681.972 L1361.71 681.972 L1361.15 681.972 L1360.59 681.972 L1360.03 681.972 L1359.47 681.972 L1358.91 681.972 L1358.35 681.972 L1357.79 681.972 L1357.23 681.972 L1356.67 681.972 L1356.12 681.972 L1355.56 681.972 L1355 681.972 L1354.44 681.972 L1353.88 681.972 L1353.32 681.972 L1352.76 681.972 L1352.2 681.972 L1351.64 681.972 L1351.08 681.972 L1350.52 681.972 L1349.96 681.972 L1349.4 681.972 L1348.84 681.972 L1348.29 681.972 L1347.73 681.972 L1347.17 681.972 L1346.61 681.972 L1346.05 681.972 L1345.49 681.972 L1344.93 681.972 L1344.37 681.972 L1343.81 681.972 L1343.25 681.972 L1342.69 681.972 L1342.13 681.972 L1341.57 681.972 L1341.02 681.972 L1340.46 681.972 L1339.9 681.972 L1339.34 681.972 L1338.78 681.972 L1338.22 681.972 L1337.66 681.972 L1337.1 681.972 L1336.54 681.972 L1335.98 681.972 L1335.42 681.972 L1334.86 681.972 L1334.3 681.972 L1333.75 681.972 L1333.19 681.972 L1332.63 681.972 L1332.07 681.972 L1331.51 681.972 L1330.95 681.972 L1330.39 681.972 L1329.83 681.972 L1329.27 681.972 L1328.71 681.972 L1328.15 681.972 L1327.59 681.972 L1327.03 681.972 L1326.47 681.972 L1325.92 681.972 L1325.36 681.972 L1324.8 681.972 L1324.24 681.972 L1323.68 681.972 L1323.12 681.972 L1322.56 681.972 L1322 681.972 L1321.44 681.972 L1320.88 681.972 L1320.32 681.972 L1319.76 681.972 L1319.2 681.972 L1318.65 681.972 L1318.09 681.972 L1317.53 681.972 L1316.97 681.972 L1316.41 681.972 L1315.85 681.972 L1315.29 681.972 L1314.73 681.972 L1314.17 681.972 L1313.61 681.972 L1313.05 681.972 L1312.49 681.972 L1311.93 681.972 L1311.38 681.972 L1310.82 681.972 L1310.26 681.972 L1309.7 681.972 L1309.14 681.972 L1308.58 681.972 L1308.02 681.972 L1307.46 681.972 L1306.9 681.972 L1306.34 681.972 L1305.78 681.972 L1305.22 681.972 L1304.66 681.972 L1304.1 681.972 L1303.55 681.972 L1302.99 681.972 L1302.43 681.972 L1301.87 681.972 L1301.31 681.972 L1300.75 681.972 L1300.19 681.972 L1299.63 681.972 L1299.07 681.972 L1298.51 681.972 L1297.95 681.972 L1297.39 681.972 L1296.83 681.972 L1296.28 681.972 L1295.72 681.972 L1295.16 681.972 L1294.6 681.972 L1294.04 681.972 L1293.48 681.972 L1292.92 681.972 L1292.36 681.972 L1291.8 681.972 L1291.24 681.972 L1290.68 681.972 L1290.12 681.972 L1289.56 681.972 L1289 681.972 L1288.45 681.972 L1287.89 681.972 L1287.33 681.972 L1286.77 681.972 L1286.21 681.972 L1285.65 681.972 L1285.09 681.972 L1284.53 681.972 L1283.97 681.972 L1283.41 681.972 L1282.85 681.972 L1282.29 681.972 L1281.73 681.972 L1281.18 681.972 L1280.62 681.972 L1280.06 681.972 L1279.5 681.972 L1278.94 681.972 L1278.38 681.972 L1277.82 681.972 L1277.26 681.972 L1276.7 681.972 L1276.14 681.972 L1275.58 681.972 L1275.02 681.972 L1274.46 681.972 L1273.91 681.972 L1273.35 681.972 L1272.79 681.972 L1272.23 681.972 L1271.67 681.972 L1271.11 681.972 L1270.55 681.972 L1269.99 681.972 L1269.43 681.972 L1268.87 681.972 L1268.31 681.972 L1267.75 681.972 L1267.19 681.972 L1266.63 681.972 L1266.08 681.972 L1265.52 681.972 L1264.96 681.972 L1264.4 681.972 L1263.84 681.972 L1263.28 681.972 L1262.72 681.972 L1262.16 681.972 L1261.6 681.972 L1261.04 681.972 L1260.48 681.972 L1259.92 681.972 L1259.36 681.972 L1258.81 681.972 L1258.25 681.972 L1257.69 681.972 L1257.13 681.972 L1256.57 681.972 L1256.01 681.972 L1255.45 681.972 L1254.89 681.972 L1254.33 681.972 L1253.77 681.972 L1253.21 681.972 L1252.65 681.972 L1252.09 681.972 L1251.54 681.972 L1250.98 681.972 L1250.42 681.972 L1249.86 681.972 L1249.3 681.972 L1248.74 681.972 L1248.18 681.972 L1247.62 681.972 L1247.06 681.972 L1246.5 681.972 L1245.94 681.972 L1245.38 681.972 L1244.82 681.972 L1244.26 681.972 L1243.71 681.972 L1243.15 681.972 L1242.59 681.972 L1242.03 681.972 L1241.47 681.972 L1240.91 681.972 L1240.35 681.972 L1239.79 681.972 L1239.23 681.972 L1238.67 681.972 L1238.11 681.972 L1237.55 681.972 L1236.99 681.972 L1236.44 681.972 L1235.88 681.972 L1235.32 681.972 L1234.76 681.972 L1234.2 681.972 L1233.64 681.972 L1233.08 681.972 L1232.52 681.972 L1231.96 681.972 L1231.4 681.972 L1230.84 681.972 L1230.28 681.972 L1229.72 681.972 L1229.17 681.972 L1228.61 681.972 L1228.05 681.972 L1227.49 681.972 L1226.93 681.972 L1226.37 681.972 L1225.81 681.972 L1225.25 681.972 L1224.69 681.972 L1224.13 681.972 L1223.57 681.972 L1223.01 681.972 L1222.45 681.972 L1221.89 681.972 L1221.34 681.972 L1220.78 681.972 L1220.22 681.972 L1219.66 681.972 L1219.1 681.972 L1218.54 681.972 L1217.98 681.972 L1217.42 681.972 L1216.86 681.972 L1216.3 681.972 L1215.74 681.972 L1215.18 681.972 L1214.62 681.972 L1214.07 681.972 L1213.51 681.972 L1212.95 681.972 L1212.39 681.972 L1211.83 681.972 L1211.27 681.972 L1210.71 681.972 L1210.15 681.972 L1209.59 681.972 L1209.03 681.972 L1208.47 681.972 L1207.91 681.972 L1207.35 681.972 L1206.8 681.972 L1206.24 681.972 L1205.68 681.972 L1205.12 681.972 L1204.56 681.972 L1204 681.972 L1203.44 681.972 L1202.88 681.972 L1202.32 681.972 L1201.76 681.972 L1201.2 681.972 L1200.64 681.972 L1200.08 681.972 L1199.52 681.972 L1198.97 681.972 L1198.41 681.972 L1197.85 681.972 L1197.29 681.972 L1196.73 681.972 L1196.17 681.972 L1195.61 681.972 L1195.05 681.972 L1194.49 681.972 L1193.93 681.972 L1193.37 681.972 L1192.81 681.972 L1192.25 681.972 L1191.7 681.972 L1191.14 681.972 L1190.58 681.972 L1190.02 681.972 L1189.46 681.972 L1188.9 681.972 L1188.34 681.972 L1187.78 681.972 L1187.22 681.972 L1186.66 681.972 L1186.1 681.972 L1185.54 681.972 L1184.98 681.972 L1184.43 681.972 L1183.87 681.972 L1183.31 681.972 L1182.75 681.972 L1182.19 681.972 L1181.63 681.972 L1181.07 681.972 L1180.51 681.972 L1179.95 681.972 L1179.39 681.972 L1178.83 681.972 L1178.27 681.972 L1177.71 681.972 L1177.15 681.972 L1176.6 681.972 L1176.04 681.972 L1175.48 681.972 L1174.92 681.972 L1174.36 681.972 L1173.8 681.972 L1173.24 681.972 L1172.68 681.972 L1172.12 681.972 L1171.56 681.972 L1171 681.972 L1170.44 681.972 L1169.88 681.972 L1169.33 681.972 L1168.77 681.972 L1168.21 681.972 L1167.65 681.972 L1167.09 681.972 L1166.53 681.972 L1165.97 681.972 L1165.41 681.972 L1164.85 681.972 L1164.29 681.972 L1163.73 681.972 L1163.17 681.972 L1162.61 681.972 L1162.05 681.972 L1161.5 681.972 L1160.94 681.972 L1160.38 681.972 L1159.82 681.972 L1159.26 681.972 L1158.7 681.972 L1158.14 681.972 L1157.58 681.972 L1157.02 681.972 L1156.46 681.972 L1155.9 681.972 L1155.34 681.972 L1154.78 681.972 L1154.23 681.972 L1153.67 681.972 L1153.11 681.972 L1152.55 681.972 L1151.99 681.972 L1151.43 681.972 L1150.87 681.972 L1150.31 681.972 L1149.75 681.972 L1149.19 681.972 L1148.63 681.972 L1148.07 681.972 L1147.51 681.972 L1146.96 681.972 L1146.4 681.972 L1145.84 681.972 L1145.28 681.972 L1144.72 681.972 L1144.16 681.972 L1143.6 681.972 L1143.04 681.972 L1142.48 681.972 L1141.92 681.972 L1141.36 681.972 L1140.8 681.972 L1140.24 681.972 L1139.68 681.972 L1139.13 681.972 L1138.57 681.972 L1138.01 681.972 L1137.45 681.972 L1136.89 681.972 L1136.33 681.972 L1135.77 681.972 L1135.21 681.972 L1134.65 681.972 L1134.09 681.972 L1133.53 681.972 L1132.97 681.972 L1132.41 681.972 L1131.86 681.972 L1131.3 681.972 L1130.74 681.972 L1130.18 681.972 L1129.62 681.972 L1129.06 681.972 L1128.5 681.972 L1127.94 681.972 L1127.38 681.972 L1126.82 681.972 L1126.26 681.972 L1125.7 681.972 L1125.14 681.972 L1124.59 681.972 L1124.03 681.972 L1123.47 681.972 L1122.91 681.972 L1122.35 681.972 L1121.79 681.972 L1121.23 681.972 L1120.67 681.972 L1120.11 681.972 L1119.55 681.972 L1118.99 681.972 L1118.43 681.972 L1117.87 681.972 L1117.31 681.972 L1116.76 681.972 L1116.2 681.972 L1115.64 681.972 L1115.08 681.972 L1114.52 681.972 L1113.96 681.972 L1113.4 681.972 L1112.84 681.972 L1112.28 681.972 L1111.72 681.972 L1111.16 681.972 L1110.6 681.972 L1110.04 681.972 L1109.49 681.972 L1108.93 681.972 L1108.37 681.972 L1107.81 681.972 L1107.25 681.972 L1106.69 681.972 L1106.13 681.972 L1105.57 681.972 L1105.01 681.972 L1104.45 681.972 L1103.89 681.972 L1103.33 681.972 L1102.77 681.972 L1102.22 681.972 L1101.66 681.972 L1101.1 681.972 L1100.54 681.972 L1099.98 681.972 L1099.42 681.972 L1098.86 681.972 L1098.3 681.972 L1097.74 681.972 L1097.18 681.972 L1096.62 681.972 L1096.06 681.972 L1095.5 681.972 L1094.94 681.972 L1094.39 681.972 L1093.83 681.972 L1093.27 681.972 L1092.71 681.972 L1092.15 681.972 L1091.59 681.972 L1091.03 681.972 L1090.47 681.972 L1089.91 681.972 L1089.35 681.972 L1088.79 681.972 L1088.23 681.972 L1087.67 681.972 L1087.12 681.972 L1086.56 681.972 L1086 681.972 L1085.44 681.972 L1084.88 681.972 L1084.32 681.972 L1083.76 681.972 L1083.2 681.972 L1082.64 681.972 L1082.08 681.972 L1081.52 681.972 L1080.96 681.972 L1080.4 681.972 L1079.85 681.972 L1079.29 681.972 L1078.73 681.972 L1078.17 681.972 L1077.61 681.972 L1077.05 681.972 L1076.49 681.972 L1075.93 681.972 L1075.37 681.972 L1074.81 681.972 L1074.25 681.972 L1073.69 681.972 L1073.13 681.972 L1072.57 681.972 L1072.02 681.972 L1071.46 681.972 L1070.9 681.972 L1070.34 681.972 L1069.78 681.972 L1069.22 681.972 L1068.66 681.972 L1068.1 681.972 L1067.54 681.972 L1066.98 681.972 L1066.42 681.972 L1065.86 681.972 L1065.3 681.972 L1064.75 681.972 L1064.19 681.972 L1063.63 681.972 L1063.07 681.972 L1062.51 681.972 L1061.95 681.972 L1061.39 681.972 L1060.83 681.972 L1060.27 681.972 L1059.71 681.972 L1059.15 681.972 L1058.59 681.972 L1058.03 681.972 L1057.48 681.972 L1056.92 681.972 L1056.36 681.972 L1055.8 681.972 L1055.24 681.972 L1054.68 681.972 L1054.12 681.972 L1053.56 681.972 L1053 681.972 L1052.44 681.972 L1051.88 681.972 L1051.32 681.972 L1050.76 681.972 L1050.2 681.972 L1049.65 681.972 L1049.09 681.972 L1048.53 681.972 L1047.97 681.972 L1047.41 681.972 L1046.85 681.972 L1046.29 681.972 L1045.73 681.972 L1045.17 681.972 L1044.61 681.972 L1044.05 681.972 L1043.49 681.972 L1042.93 681.972 L1042.38 681.972 L1041.82 681.972 L1041.26 681.972 L1040.7 681.972 L1040.14 681.972 L1039.58 681.972 L1039.02 681.972 L1038.46 681.972 L1037.9 681.972 L1037.34 681.972 L1036.78 681.972 L1036.22 681.972 L1035.66 681.972 L1035.1 681.972 L1034.55 681.972 L1033.99 681.972 L1033.43 681.972 L1032.87 681.972 L1032.31 681.972 L1031.75 681.972 L1031.19 681.972 L1030.63 681.972 L1030.07 681.972 L1029.51 681.972 L1028.95 681.972 L1028.39 681.972 L1027.83 681.972 L1027.28 681.972 L1026.72 681.972 L1026.16 681.972 L1025.6 681.972 L1025.04 681.972 L1024.48 681.972 L1023.92 681.972 L1023.36 681.972 L1022.8 681.972 L1022.24 681.972 L1021.68 681.972 L1021.12 681.972 L1020.56 681.972 L1020.01 681.972 L1019.45 681.972 L1018.89 681.972 L1018.33 681.972 L1017.77 681.972 L1017.21 681.972 L1016.65 681.972 L1016.09 681.972 L1015.53 681.972 L1014.97 681.972 L1014.41 681.972 L1013.85 681.972 L1013.29 681.972 L1012.73 681.972 L1012.18 681.972 L1011.62 681.972 L1011.06 681.972 L1010.5 681.972 L1009.94 681.972 L1009.38 681.972 L1008.82 681.972 L1008.26 681.972 L1007.7 681.972 L1007.14 681.972 L1006.58 681.972 L1006.02 681.972 L1005.46 681.972 L1004.91 681.972 L1004.35 681.972 L1003.79 681.972 L1003.23 681.972 L1002.67 681.972 L1002.11 681.972 L1001.55 681.972 L1000.99 681.972 L1000.43 681.972 L999.872 681.972 L999.313 681.972 L998.754 681.972 L998.194 681.972 L997.635 681.972 L997.076 681.972 L996.517 681.972 L995.957 681.972 L995.398 681.972 L994.839 681.972 L994.28 681.972 L993.72 681.972 L993.161 681.972 L992.602 681.972 L992.043 681.972 L991.483 681.972 L990.924 681.972 L990.365 681.972 L989.806 681.972 L989.246 681.972 L988.687 681.972 L988.128 681.972 L987.569 681.972 L987.009 681.972 L986.45 681.972 L985.891 681.972 L985.332 681.972 L984.772 681.972 L984.213 681.972 L983.654 681.972 L983.095 681.972 L982.535 681.972 L981.976 681.972 L981.417 681.972 L980.858 681.972 L980.298 681.972 L979.739 681.972 L979.18 681.972 L978.621 681.972 L978.061 681.972 L977.502 681.972 L976.943 681.972 L976.384 681.972 L975.824 681.972 L975.265 681.972 L974.706 681.972 L974.147 681.972 L973.587 681.972 L973.028 681.972 L972.469 681.972 L971.91 681.972 L971.35 681.972 L970.791 681.972 L970.232 681.972 L969.673 681.972 L969.113 681.972 L968.554 681.972 L967.995 681.972 L967.436 681.972 L966.876 681.972 L966.317 681.972 L965.758 681.972 L965.199 681.972 L964.639 681.972 L964.08 681.972 L963.521 681.972 L962.962 681.972 L962.402 681.972 L961.843 681.972 L961.284 681.972 L960.725 681.972 L960.165 681.972 L959.606 681.972 L959.047 681.972 L958.488 681.972 L957.928 681.972 L957.369 681.972 L956.81 681.972 L956.251 681.972 L955.691 681.972 L955.132 681.972 L954.573 681.972 L954.014 681.972 L953.454 681.972 L952.895 681.972 L952.336 681.972 L951.777 681.972 L951.217 681.972 L950.658 681.972 L950.099 681.972 L949.54 681.972 L948.98 681.972 L948.421 681.972 L947.862 681.972 L947.303 681.972 L946.743 681.972 L946.184 681.972 L945.625 681.972 L945.066 681.972 L944.506 681.972 L943.947 681.972 L943.388 681.972 L942.829 681.972 L942.269 681.972 L941.71 681.972 L941.151 681.972 L940.592 681.972 L940.032 681.972 L939.473 681.972 L938.914 681.972 L938.355 681.972 L937.795 681.972 L937.236 681.972 L936.677 681.972 L936.118 681.972 L935.558 681.972 L934.999 681.972 L934.44 681.972 L933.881 681.972 L933.321 681.972 L932.762 681.972 L932.203 681.972 L931.644 681.972 L931.084 681.972 L930.525 681.972 L929.966 681.972 L929.406 681.972 L928.847 681.972 L928.288 681.972 L927.729 681.972 L927.169 681.972 L926.61 681.972 L926.051 681.972 L925.492 681.972 L924.932 681.972 L924.373 681.972 L923.814 681.972 L923.255 681.972 L922.695 681.972 L922.136 681.972 L921.577 681.972 L921.018 681.972 L920.458 681.972 L919.899 681.972 L919.34 681.972 L918.781 681.972 L918.221 681.972 L917.662 681.972 L917.103 681.972 L916.544 681.972 L915.984 681.972 L915.425 681.972 L914.866 681.972 L914.307 681.972 L913.747 681.972 L913.188 681.972 L912.629 681.972 L912.07 681.972 L911.51 681.972 L910.951 681.972 L910.392 681.972 L909.833 681.972 L909.273 681.972 L908.714 681.972 L908.155 681.972 L907.596 681.972 L907.036 681.972 L906.477 681.972 L905.918 681.972 L905.359 681.972 L904.799 681.972 L904.24 681.972 L903.681 681.972 L903.122 681.972 L902.562 681.972 L902.003 681.972 L901.444 681.972 L900.885 681.972 L900.325 681.972 L899.766 681.972 L899.207 681.972 L898.648 681.972 L898.088 681.972 L897.529 681.972 L896.97 681.972 L896.411 681.972 L895.851 681.972 L895.292 681.972 L894.733 681.972 L894.174 681.972 L893.614 681.972 L893.055 681.972 L892.496 681.972 L891.937 681.972 L891.377 681.972 L890.818 681.972 L890.259 681.972 L889.7 681.972 L889.14 681.972 L888.581 681.972 L888.022 681.972 L887.463 681.972 L886.903 681.972 L886.344 681.972 L885.785 681.972 L885.226 681.972 L884.666 681.972 L884.107 681.972 L883.548 681.972 L882.989 681.972 L882.429 681.972 L881.87 681.972 L881.311 681.972 L880.752 681.972 L880.192 681.972 L879.633 681.972 L879.074 681.972 L878.515 681.972 L877.955 681.972 L877.396 681.972 L876.837 681.972 L876.278 681.972 L875.718 681.972 L875.159 681.972 L874.6 681.972 L874.041 681.972 L873.481 681.972 L872.922 681.972 L872.363 681.972 L871.804 681.972 L871.244 681.972 L870.685 681.972 L870.126 681.972 L869.567 681.972 L869.007 681.972 L868.448 681.972 L867.889 681.972 L867.33 681.972 L866.77 681.972 L866.211 681.972 L865.652 681.972 L865.093 681.972 L864.533 681.972 L863.974 681.972 L863.415 681.972 L862.856 681.972 L862.296 681.972 L861.737 681.972 L861.178 681.972 L860.619 681.972 L860.059 681.972 L859.5 681.972 L858.941 681.972 L858.382 681.972 L857.822 681.972 L857.263 681.972 L856.704 681.972 L856.145 681.972 L855.585 681.972 L855.026 681.972 L854.467 681.972 L853.908 681.972 L853.348 681.972 L852.789 681.972 L852.23 681.972 L851.671 681.972 L851.111 681.972 L850.552 681.972 L849.993 681.972 L849.434 681.972 L848.874 681.972 L848.315 681.972 L847.756 681.972 L847.197 681.972 L846.637 681.972 L846.078 681.972 L845.519 681.972 L844.96 681.972 L844.4 681.972 L843.841 681.972 L843.282 681.972 L842.723 681.972 L842.163 681.972 L841.604 681.972 L841.045 681.972 L840.486 681.972 L839.926 681.972 L839.367 681.972 L838.808 681.972 L838.249 681.972 L837.689 681.972 L837.13 681.972 L836.571 681.972 L836.012 681.972 L835.452 681.972 L834.893 681.972 L834.334 681.972 L833.775 681.972 L833.215 681.972 L832.656 681.972 L832.097 681.972 L831.538 681.972 L830.978 681.972 L830.419 681.972 L829.86 681.972 L829.301 681.972 L828.741 681.972 L828.182 681.972 L827.623 681.972 L827.064 681.972 L826.504 681.972 L825.945 681.972 L825.386 681.972 L824.827 681.972 L824.267 681.972 L823.708 681.972 L823.149 681.972 L822.59 681.972 L822.03 681.972 L821.471 681.972 L820.912 681.972 L820.353 681.972 L819.793 681.972 L819.234 681.972 L818.675 681.972 L818.116 681.972 L817.556 681.972 L816.997 681.972 L816.438 681.972 L815.879 681.972 L815.319 681.972 L814.76 681.972 L814.201 681.972 L813.642 681.972 L813.082 681.972 L812.523 681.972 L811.964 681.972 L811.405 681.972 L810.845 681.972 L810.286 681.972 L809.727 681.972 L809.168 681.972 L808.608 681.972 L808.049 681.972 L807.49 681.972 L806.931 681.972 L806.371 681.972 L805.812 681.972 L805.253 681.972 L804.693 681.972 L804.134 681.972 L803.575 681.972 L803.016 681.972 L802.456 681.972 L801.897 681.972 L801.338 681.972 L800.779 681.972 L800.219 681.972 L799.66 681.972 L799.101 681.972 L798.542 681.972 L797.982 681.972 L797.423 681.972 L796.864 681.972 L796.305 681.972 L795.745 681.972 L795.186 681.972 L794.627 681.972 L794.068 681.972 L793.508 681.972 L792.949 681.972 L792.39 681.972 L791.831 681.972 L791.271 681.972 L790.712 681.972 L790.153 681.972 L789.594 681.972 L789.034 681.972 L788.475 681.972 L787.916 681.972 L787.357 681.972 L786.797 681.972 L786.238 681.972 L785.679 681.972 L785.12 681.972 L784.56 681.972 L784.001 681.972 L783.442 681.972 L782.883 681.972 L782.323 681.972 L781.764 681.972 L781.205 681.972 L780.646 681.972 L780.086 681.972 L779.527 681.972 L778.968 681.972 L778.409 681.972 L777.849 681.972 L777.29 681.972 L776.731 681.972 L776.172 681.972 L775.612 681.972 L775.053 681.972 L774.494 681.972 L773.935 681.972 L773.375 681.972 L772.816 681.972 L772.257 681.972 L771.698 681.972 L771.138 681.972 L770.579 681.972 L770.02 681.972 L769.461 681.972 L768.901 681.972 L768.342 681.972 L767.783 681.972 L767.224 681.972 L766.664 681.972 L766.105 681.972 L765.546 681.972 L764.987 681.972 L764.427 681.972 L763.868 681.972 L763.309 681.972 L762.75 681.972 L762.19 681.972 L761.631 681.972 L761.072 681.972 L760.513 681.972 L759.953 681.972 L759.394 681.972 L758.835 681.972 L758.276 681.972 L757.716 681.972 L757.157 681.972 L756.598 681.972 L756.039 681.972 L755.479 681.972 L754.92 681.972 L754.361 681.972 L753.802 681.972 L753.242 681.972 L752.683 681.972 L752.124 681.972 L751.565 681.972 L751.005 681.972 L750.446 681.972 L749.887 681.972 L749.328 681.972 L748.768 681.972 L748.209 681.972 L747.65 681.972 L747.091 681.972 L746.531 681.972 L745.972 681.972 L745.413 681.972 L744.854 681.972 L744.294 681.972 L743.735 681.972 L743.176 681.972 L742.617 681.972 L742.057 681.972 L741.498 681.972 L740.939 681.972 L740.38 681.972 L739.82 681.972 L739.261 681.972 L738.702 681.972 L738.143 681.972 L737.583 681.972 L737.024 681.972 L736.465 681.972 L735.906 681.972 L735.346 681.972 L734.787 681.972 L734.228 681.972 L733.669 681.972 L733.109 681.972 L732.55 681.972 L731.991 681.972 L731.432 681.972 L730.872 681.972 L730.313 681.972 L729.754 681.972 L729.195 681.972 L728.635 681.972 L728.076 681.972 L727.517 681.972 L726.958 681.972 L726.398 681.972 L725.839 681.972 L725.28 681.972 L724.721 681.972 L724.161 681.972 L723.602 681.972 L723.043 681.972 L722.484 681.972 L721.924 681.972 L721.365 681.972 L720.806 681.972 L720.247 681.972  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.9 720.806,682.9 721.365,682.9 721.924,682.9 722.484,682.9 723.043,682.9 723.602,682.9 724.161,682.9 724.721,682.9 725.28,682.9 725.839,682.9 726.398,682.9 726.958,682.9 727.517,682.9 728.076,682.9 728.635,682.9 729.195,682.9 729.754,682.9 730.313,682.9 730.872,682.9 731.432,682.9 731.991,682.9 732.55,682.9 733.109,682.9 733.669,682.9 734.228,682.9 734.787,682.9 735.346,682.9 735.906,682.9 736.465,682.9 737.024,682.9 737.583,682.9 738.143,682.9 738.702,682.9 739.261,682.9 739.82,682.9 740.38,682.9 740.939,682.9 741.498,682.9 742.057,682.9 742.617,682.9 743.176,682.9 743.735,682.9 744.294,682.9 744.854,682.9 745.413,682.9 745.972,682.9 746.531,682.9 747.091,682.9 747.65,682.9 748.209,682.9 748.768,682.9 749.328,682.9 749.887,682.9 750.446,682.9 751.005,682.9 751.565,682.9 752.124,682.9 752.683,682.9 753.242,682.9 753.802,682.9 754.361,682.9 754.92,682.9 755.479,682.9 756.039,682.9 756.598,682.9 757.157,682.9 757.716,682.9 758.276,682.9 758.835,682.9 759.394,682.9 759.953,682.9 760.513,682.9 761.072,682.9 761.631,682.9 762.19,682.9 762.75,682.9 763.309,682.9 763.868,682.9 764.427,682.9 764.987,682.9 765.546,682.9 766.105,682.9 766.664,682.9 767.224,682.9 767.783,682.9 768.342,682.9 768.901,682.9 769.461,682.9 770.02,682.9 770.579,682.9 771.138,682.9 771.698,682.9 772.257,682.9 772.816,682.9 773.375,682.9 773.935,682.9 774.494,682.9 775.053,682.9 775.612,682.9 776.172,682.9 776.731,682.9 777.29,682.9 777.849,682.9 778.409,682.9 778.968,682.9 779.527,682.9 780.086,682.9 780.646,682.9 781.205,682.9 781.764,682.9 782.323,682.9 782.883,682.9 783.442,682.9 784.001,682.9 784.56,682.9 785.12,682.9 785.679,682.9 786.238,682.9 786.797,682.9 787.357,682.9 787.916,682.9 788.475,682.9 789.034,682.9 789.594,682.9 790.153,682.9 790.712,682.9 791.271,682.9 791.831,682.9 792.39,682.9 792.949,682.9 793.508,682.9 794.068,682.9 794.627,682.9 795.186,682.9 795.745,682.9 796.305,682.9 796.864,682.9 797.423,682.9 797.982,682.9 798.542,682.9 799.101,682.9 799.66,682.9 800.219,682.9 800.779,682.9 801.338,682.9 801.897,682.9 802.456,682.9 803.016,682.9 803.575,682.9 804.134,682.9 804.693,682.9 805.253,682.9 805.812,682.9 806.371,682.9 806.931,682.9 807.49,682.9 808.049,682.9 808.608,682.9 809.168,682.9 809.727,682.9 810.286,682.9 810.845,682.9 811.405,682.9 811.964,682.9 812.523,682.9 813.082,682.9 813.642,682.9 814.201,682.9 814.76,682.9 815.319,682.9 815.879,682.9 816.438,682.9 816.997,682.9 817.556,682.9 818.116,682.9 818.675,682.9 819.234,682.9 819.793,682.9 820.353,682.9 820.912,682.9 821.471,682.9 822.03,682.9 822.59,682.9 823.149,682.9 823.708,682.9 824.267,682.9 824.827,682.9 825.386,682.9 825.945,682.9 826.504,682.9 827.064,682.9 827.623,682.9 828.182,682.9 828.741,682.9 829.301,682.9 829.86,682.9 830.419,682.9 830.978,682.9 831.538,682.9 832.097,682.9 832.656,682.9 833.215,682.9 833.775,682.9 834.334,682.9 834.893,682.9 835.452,682.9 836.012,682.9 836.571,682.9 837.13,682.9 837.689,682.9 838.249,682.9 838.808,682.9 839.367,682.9 839.926,682.9 840.486,682.9 841.045,682.9 841.604,682.9 842.163,682.9 842.723,682.9 843.282,682.9 843.841,682.9 844.4,682.9 844.96,682.9 845.519,682.9 846.078,682.9 846.637,682.9 847.197,682.9 847.756,682.9 848.315,682.9 848.874,682.9 849.434,682.9 849.993,682.9 850.552,682.9 851.111,682.9 851.671,682.9 852.23,682.9 852.789,682.9 853.348,682.9 853.908,682.9 854.467,682.9 855.026,682.9 855.585,682.9 856.145,682.9 856.704,682.9 857.263,682.9 857.822,682.9 858.382,682.9 858.941,682.9 859.5,682.9 860.059,682.9 860.619,682.9 861.178,682.9 861.737,682.9 862.296,682.9 862.856,682.9 863.415,682.9 863.974,682.9 864.533,682.9 865.093,682.9 865.652,682.9 866.211,682.9 866.77,682.9 867.33,682.9 867.889,682.9 868.448,682.9 869.007,682.9 869.567,682.9 870.126,682.9 870.685,682.9 871.244,682.9 871.804,682.9 872.363,682.9 872.922,682.9 873.481,682.9 874.041,682.9 874.6,682.9 875.159,682.9 875.718,682.9 876.278,682.9 876.837,682.9 877.396,682.9 877.955,682.9 878.515,682.9 879.074,682.9 879.633,682.9 880.192,682.9 880.752,682.9 881.311,682.9 881.87,682.9 882.429,682.9 882.989,682.9 883.548,682.9 884.107,682.9 884.666,682.9 885.226,682.9 885.785,682.9 886.344,682.9 886.903,682.9 887.463,682.9 888.022,682.9 888.581,682.9 889.14,682.9 889.7,682.9 890.259,682.9 890.818,682.9 891.377,682.9 891.937,682.9 892.496,682.9 893.055,682.9 893.614,682.9 894.174,682.9 894.733,682.9 895.292,682.9 895.851,682.9 896.411,682.9 896.97,682.9 897.529,682.9 898.088,682.9 898.648,682.9 899.207,682.9 899.766,682.9 900.325,682.9 900.885,682.9 901.444,682.9 902.003,682.9 902.562,682.9 903.122,682.9 903.681,682.9 904.24,682.9 904.799,682.9 905.359,682.9 905.918,682.9 906.477,682.9 907.036,682.9 907.596,682.9 908.155,682.9 908.714,682.9 909.273,682.9 909.833,682.9 910.392,682.9 910.951,682.9 911.51,682.9 912.07,682.9 912.629,682.9 913.188,682.9 913.747,682.9 914.307,682.9 914.866,682.9 915.425,682.9 915.984,682.9 916.544,682.9 917.103,682.9 917.662,682.9 918.221,682.9 918.781,682.9 919.34,682.9 919.899,682.9 920.458,682.9 921.018,682.9 921.577,682.9 922.136,682.9 922.695,682.9 923.255,682.9 923.814,682.9 924.373,682.9 924.932,682.9 925.492,682.9 926.051,682.9 926.61,682.9 927.169,682.9 927.729,682.9 928.288,682.9 928.847,682.9 929.406,682.9 929.966,682.9 930.525,682.9 931.084,682.9 931.644,682.9 932.203,682.9 932.762,682.9 933.321,682.9 933.881,682.9 934.44,682.9 934.999,682.9 935.558,682.9 936.118,682.9 936.677,682.9 937.236,682.9 937.795,682.9 938.355,682.9 938.914,682.9 939.473,682.9 940.032,682.9 940.592,682.9 941.151,682.9 941.71,682.9 942.269,682.9 942.829,682.9 943.388,682.9 943.947,682.9 944.506,682.9 945.066,682.9 945.625,682.9 946.184,682.9 946.743,682.9 947.303,682.9 947.862,682.9 948.421,682.9 948.98,682.9 949.54,682.9 950.099,682.9 950.658,682.9 951.217,682.9 951.777,682.9 952.336,682.9 952.895,682.9 953.454,682.9 954.014,682.9 954.573,682.9 955.132,682.9 955.691,682.9 956.251,682.9 956.81,682.9 957.369,682.9 957.928,682.9 958.488,682.9 959.047,682.9 959.606,682.9 960.165,682.9 960.725,682.9 961.284,682.9 961.843,682.9 962.402,682.9 962.962,682.9 963.521,682.9 964.08,682.9 964.639,682.9 965.199,682.9 965.758,682.9 966.317,682.9 966.876,682.9 967.436,682.9 967.995,682.9 968.554,682.9 969.113,682.9 969.673,682.9 970.232,682.9 970.791,682.9 971.35,682.9 971.91,682.9 972.469,682.9 973.028,682.9 973.587,682.9 974.147,682.9 974.706,682.9 975.265,682.9 975.824,682.9 976.384,682.9 976.943,682.9 977.502,682.9 978.061,682.9 978.621,682.9 979.18,682.9 979.739,682.9 980.298,682.9 980.858,682.9 981.417,682.9 981.976,682.9 982.535,682.9 983.095,682.9 983.654,682.9 984.213,682.9 984.772,682.9 985.332,682.9 985.891,682.9 986.45,682.9 987.009,682.9 987.569,682.9 988.128,682.9 988.687,682.9 989.246,682.9 989.806,682.9 990.365,682.9 990.924,682.9 991.483,682.9 992.043,682.9 992.602,682.9 993.161,682.9 993.72,682.9 994.28,682.9 994.839,682.9 995.398,682.9 995.957,682.9 996.517,682.9 997.076,682.9 997.635,682.9 998.194,682.9 998.754,682.9 999.313,682.9 999.872,682.9 1000.43,682.9 1000.99,682.9 1001.55,682.9 1002.11,682.9 1002.67,682.9 1003.23,682.9 1003.79,682.9 1004.35,682.9 1004.91,682.9 1005.46,682.9 1006.02,682.9 1006.58,682.9 1007.14,682.9 1007.7,682.9 1008.26,682.9 1008.82,682.9 1009.38,682.9 1009.94,682.9 1010.5,682.9 1011.06,682.9 1011.62,682.9 1012.18,682.9 1012.73,682.9 1013.29,682.9 1013.85,682.9 1014.41,682.9 1014.97,682.9 1015.53,682.9 1016.09,682.9 1016.65,682.9 1017.21,682.9 1017.77,682.9 1018.33,682.9 1018.89,682.9 1019.45,682.9 1020.01,682.9 1020.56,682.9 1021.12,682.9 1021.68,682.9 1022.24,682.9 1022.8,682.9 1023.36,682.9 1023.92,682.9 1024.48,682.9 1025.04,682.9 1025.6,682.9 1026.16,682.9 1026.72,682.9 1027.28,682.9 1027.83,682.9 1028.39,682.9 1028.95,682.9 1029.51,682.9 1030.07,682.9 1030.63,682.9 1031.19,682.9 1031.75,682.9 1032.31,682.9 1032.87,682.9 1033.43,682.9 1033.99,682.9 1034.55,682.9 1035.1,682.9 1035.66,682.9 1036.22,682.9 1036.78,682.9 1037.34,682.9 1037.9,682.9 1038.46,682.9 1039.02,682.9 1039.58,682.9 1040.14,682.9 1040.7,682.9 1041.26,682.9 1041.82,682.9 1042.38,682.9 1042.93,682.9 1043.49,682.9 1044.05,682.9 1044.61,682.9 1045.17,682.9 1045.73,682.9 1046.29,682.9 1046.85,682.9 1047.41,682.9 1047.97,682.9 1048.53,682.9 1049.09,682.9 1049.65,682.9 1050.2,682.9 1050.76,682.9 1051.32,682.9 1051.88,682.9 1052.44,682.9 1053,682.9 1053.56,682.9 1054.12,682.9 1054.68,682.9 1055.24,682.9 1055.8,682.9 1056.36,682.9 1056.92,682.9 1057.48,682.9 1058.03,682.9 1058.59,682.9 1059.15,682.9 1059.71,682.9 1060.27,682.9 1060.83,682.9 1061.39,682.9 1061.95,682.9 1062.51,682.9 1063.07,682.9 1063.63,682.9 1064.19,682.9 1064.75,682.9 1065.3,682.9 1065.86,682.9 1066.42,682.9 1066.98,682.9 1067.54,682.9 1068.1,682.9 1068.66,682.9 1069.22,682.9 1069.78,682.9 1070.34,682.9 1070.9,682.9 1071.46,682.9 1072.02,682.9 1072.57,682.9 1073.13,682.9 1073.69,682.9 1074.25,682.9 1074.81,682.9 1075.37,682.9 1075.93,682.9 1076.49,682.9 1077.05,682.9 1077.61,682.9 1078.17,682.9 1078.73,682.9 1079.29,682.9 1079.85,682.9 1080.4,682.9 1080.96,682.9 1081.52,682.9 1082.08,682.9 1082.64,682.9 1083.2,682.9 1083.76,682.9 1084.32,682.9 1084.88,682.9 1085.44,682.9 1086,682.9 1086.56,682.9 1087.12,682.9 1087.67,682.9 1088.23,682.9 1088.79,682.9 1089.35,682.9 1089.91,682.9 1090.47,682.9 1091.03,682.9 1091.59,682.9 1092.15,682.9 1092.71,682.9 1093.27,682.9 1093.83,682.9 1094.39,682.9 1094.94,682.9 1095.5,682.9 1096.06,682.9 1096.62,682.9 1097.18,682.9 1097.74,682.9 1098.3,682.9 1098.86,682.9 1099.42,682.9 1099.98,682.9 1100.54,682.9 1101.1,682.9 1101.66,682.9 1102.22,682.9 1102.77,682.9 1103.33,682.9 1103.89,682.9 1104.45,682.9 1105.01,682.9 1105.57,682.9 1106.13,682.9 1106.69,682.9 1107.25,682.9 1107.81,682.9 1108.37,682.9 1108.93,682.9 1109.49,682.9 1110.04,682.9 1110.6,682.9 1111.16,682.9 1111.72,682.9 1112.28,682.9 1112.84,682.9 1113.4,682.9 1113.96,682.9 1114.52,682.9 1115.08,682.9 1115.64,682.9 1116.2,682.9 1116.76,682.9 1117.31,682.9 1117.87,682.9 1118.43,682.9 1118.99,682.9 1119.55,682.9 1120.11,682.9 1120.67,682.9 1121.23,682.9 1121.79,682.9 1122.35,682.9 1122.91,682.9 1123.47,682.9 1124.03,682.9 1124.59,682.9 1125.14,682.9 1125.7,682.9 1126.26,682.9 1126.82,682.9 1127.38,682.9 1127.94,682.9 1128.5,682.9 1129.06,682.9 1129.62,682.9 1130.18,682.9 1130.74,682.9 1131.3,682.9 1131.86,682.9 1132.41,682.9 1132.97,682.9 1133.53,682.9 1134.09,682.9 1134.65,682.9 1135.21,682.9 1135.77,682.9 1136.33,682.9 1136.89,682.9 1137.45,682.9 1138.01,682.9 1138.57,682.9 1139.13,682.9 1139.68,682.9 1140.24,682.9 1140.8,682.9 1141.36,682.9 1141.92,682.9 1142.48,682.9 1143.04,682.9 1143.6,682.9 1144.16,682.9 1144.72,682.9 1145.28,682.9 1145.84,682.9 1146.4,682.9 1146.96,682.9 1147.51,682.9 1148.07,682.9 1148.63,682.9 1149.19,682.9 1149.75,682.9 1150.31,682.9 1150.87,682.9 1151.43,682.9 1151.99,682.9 1152.55,682.9 1153.11,682.9 1153.67,682.9 1154.23,682.9 1154.78,682.9 1155.34,682.9 1155.9,682.9 1156.46,682.9 1157.02,682.9 1157.58,682.9 1158.14,682.9 1158.7,682.9 1159.26,682.9 1159.82,682.9 1160.38,682.9 1160.94,682.9 1161.5,682.9 1162.05,682.9 1162.61,682.9 1163.17,682.9 1163.73,682.9 1164.29,682.9 1164.85,682.9 1165.41,682.9 1165.97,682.9 1166.53,682.9 1167.09,682.9 1167.65,682.9 1168.21,682.9 1168.77,682.9 1169.33,682.9 1169.88,682.9 1170.44,682.9 1171,682.9 1171.56,682.9 1172.12,682.9 1172.68,682.9 1173.24,682.9 1173.8,682.9 1174.36,682.9 1174.92,682.9 1175.48,682.9 1176.04,682.9 1176.6,682.9 1177.15,682.9 1177.71,682.9 1178.27,682.9 1178.83,682.9 1179.39,682.9 1179.95,682.9 1180.51,682.9 1181.07,682.9 1181.63,682.9 1182.19,682.9 1182.75,682.9 1183.31,682.9 1183.87,682.9 1184.43,682.9 1184.98,682.9 1185.54,682.9 1186.1,682.9 1186.66,682.9 1187.22,682.9 1187.78,682.9 1188.34,682.9 1188.9,682.9 1189.46,682.9 1190.02,682.9 1190.58,682.9 1191.14,682.9 1191.7,682.9 1192.25,682.9 1192.81,682.9 1193.37,682.9 1193.93,682.9 1194.49,682.9 1195.05,682.9 1195.61,682.9 1196.17,682.9 1196.73,682.9 1197.29,682.9 1197.85,682.9 1198.41,682.9 1198.97,682.9 1199.52,682.9 1200.08,682.9 1200.64,682.9 1201.2,682.9 1201.76,682.9 1202.32,682.9 1202.88,682.9 1203.44,682.9 1204,682.9 1204.56,682.9 1205.12,682.9 1205.68,682.9 1206.24,682.9 1206.8,682.9 1207.35,682.9 1207.91,682.9 1208.47,682.9 1209.03,682.9 1209.59,682.9 1210.15,682.9 1210.71,682.9 1211.27,682.9 1211.83,682.9 1212.39,682.9 1212.95,682.9 1213.51,682.9 1214.07,682.9 1214.62,682.9 1215.18,682.9 1215.74,682.9 1216.3,682.9 1216.86,682.9 1217.42,682.9 1217.98,682.9 1218.54,682.9 1219.1,682.9 1219.66,682.9 1220.22,682.9 1220.78,682.9 1221.34,682.9 1221.89,682.9 1222.45,682.9 1223.01,682.9 1223.57,682.9 1224.13,682.9 1224.69,682.9 1225.25,682.9 1225.81,682.9 1226.37,682.9 1226.93,682.9 1227.49,682.9 1228.05,682.9 1228.61,682.9 1229.17,682.9 1229.72,682.9 1230.28,682.9 1230.84,682.9 1231.4,682.9 1231.96,682.9 1232.52,682.9 1233.08,682.9 1233.64,682.9 1234.2,682.9 1234.76,682.9 1235.32,682.9 1235.88,682.9 1236.44,682.9 1236.99,682.9 1237.55,682.9 1238.11,682.9 1238.67,682.9 1239.23,682.9 1239.79,682.9 1240.35,682.9 1240.91,682.9 1241.47,682.9 1242.03,682.9 1242.59,682.9 1243.15,682.9 1243.71,682.9 1244.26,682.9 1244.82,682.9 1245.38,682.9 1245.94,682.9 1246.5,682.9 1247.06,682.9 1247.62,682.9 1248.18,682.9 1248.74,682.9 1249.3,682.9 1249.86,682.9 1250.42,682.9 1250.98,682.9 1251.54,682.9 1252.09,682.9 1252.65,682.9 1253.21,682.9 1253.77,682.9 1254.33,682.9 1254.89,682.9 1255.45,682.9 1256.01,682.9 1256.57,682.9 1257.13,682.9 1257.69,682.9 1258.25,682.9 1258.81,682.9 1259.36,682.9 1259.92,682.9 1260.48,682.9 1261.04,682.9 1261.6,682.9 1262.16,682.9 1262.72,682.9 1263.28,682.9 1263.84,682.9 1264.4,682.9 1264.96,682.9 1265.52,682.9 1266.08,682.9 1266.63,682.9 1267.19,682.9 1267.75,682.9 1268.31,682.9 1268.87,682.9 1269.43,682.9 1269.99,682.9 1270.55,682.9 1271.11,682.9 1271.67,682.9 1272.23,682.9 1272.79,682.9 1273.35,682.9 1273.91,682.9 1274.46,682.9 1275.02,682.9 1275.58,682.9 1276.14,682.9 1276.7,682.9 1277.26,682.9 1277.82,682.9 1278.38,682.9 1278.94,682.9 1279.5,682.9 1280.06,682.9 1280.62,682.9 1281.18,682.9 1281.73,682.9 1282.29,682.9 1282.85,682.9 1283.41,682.9 1283.97,682.9 1284.53,682.9 1285.09,682.9 1285.65,682.9 1286.21,682.9 1286.77,682.9 1287.33,682.9 1287.89,682.9 1288.45,682.9 1289,682.9 1289.56,682.9 1290.12,682.9 1290.68,682.9 1291.24,682.9 1291.8,682.9 1292.36,682.9 1292.92,682.9 1293.48,682.9 1294.04,682.9 1294.6,682.9 1295.16,682.9 1295.72,682.9 1296.28,682.9 1296.83,682.9 1297.39,682.9 1297.95,682.9 1298.51,682.9 1299.07,682.9 1299.63,682.9 1300.19,682.9 1300.75,682.9 1301.31,682.9 1301.87,682.9 1302.43,682.9 1302.99,682.9 1303.55,682.9 1304.1,682.9 1304.66,682.9 1305.22,682.9 1305.78,682.9 1306.34,682.9 1306.9,682.9 1307.46,682.9 1308.02,682.9 1308.58,682.9 1309.14,682.9 1309.7,682.9 1310.26,682.9 1310.82,682.9 1311.38,682.9 1311.93,682.9 1312.49,682.9 1313.05,682.9 1313.61,682.9 1314.17,682.9 1314.73,682.9 1315.29,682.9 1315.85,682.9 1316.41,682.9 1316.97,682.9 1317.53,682.9 1318.09,682.9 1318.65,682.9 1319.2,682.9 1319.76,682.9 1320.32,682.9 1320.88,682.9 1321.44,682.9 1322,682.9 1322.56,682.9 1323.12,682.9 1323.68,682.9 1324.24,682.9 1324.8,682.9 1325.36,682.9 1325.92,682.9 1326.47,682.9 1327.03,682.9 1327.59,682.9 1328.15,682.9 1328.71,682.9 1329.27,682.9 1329.83,682.9 1330.39,682.9 1330.95,682.9 1331.51,682.9 1332.07,682.9 1332.63,682.9 1333.19,682.9 1333.75,682.9 1334.3,682.9 1334.86,682.9 1335.42,682.9 1335.98,682.9 1336.54,682.9 1337.1,682.9 1337.66,682.9 1338.22,682.9 1338.78,682.9 1339.34,682.9 1339.9,682.9 1340.46,682.9 1341.02,682.9 1341.57,682.9 1342.13,682.9 1342.69,682.9 1343.25,682.9 1343.81,682.9 1344.37,682.9 1344.93,682.9 1345.49,682.9 1346.05,682.9 1346.61,682.9 1347.17,682.9 1347.73,682.9 1348.29,682.9 1348.84,682.9 1349.4,682.9 1349.96,682.9 1350.52,682.9 1351.08,682.9 1351.64,682.9 1352.2,682.9 1352.76,682.9 1353.32,682.9 1353.88,682.9 1354.44,682.9 1355,682.9 1355.56,682.9 1356.12,682.9 1356.67,682.9 1357.23,682.9 1357.79,682.9 1358.35,682.9 1358.91,682.9 1359.47,682.9 1360.03,682.9 1360.59,682.9 1361.15,682.9 1361.71,682.9 1362.27,682.9 1362.83,682.9 1363.39,682.9 1363.94,682.9 1364.5,682.9 1365.06,682.9 1365.62,682.9 1366.18,682.9 1366.74,682.9 1367.3,682.9 1367.86,682.9 1368.42,682.9 1368.98,682.9 1369.54,682.9 1370.1,682.9 1370.66,682.9 1371.21,682.9 1371.77,682.9 1372.33,682.9 1372.89,682.9 1373.45,682.9 1374.01,682.9 1374.57,682.9 1375.13,682.9 1375.69,682.9 1376.25,682.9 1376.81,682.9 1377.37,682.9 1377.93,682.9 1378.49,682.9 1379.04,682.9 1379.6,682.9 1380.16,682.9 1380.72,682.9 1381.28,682.9 1381.84,682.9 1382.4,682.9 1382.96,682.9 1383.52,682.9 1384.08,682.9 1384.64,682.9 1385.2,682.9 1385.76,682.9 1386.31,682.9 1386.87,682.9 1387.43,682.9 1387.99,682.9 1388.55,682.9 1389.11,682.9 1389.67,682.9 1390.23,682.9 1390.79,682.9 1391.35,682.9 1391.91,682.9 1392.47,682.9 1393.03,682.9 1393.58,682.9 1394.14,682.9 1394.7,682.9 1395.26,682.9 1395.82,682.9 1396.38,682.9 1396.94,682.9 1397.5,682.9 1398.06,682.9 1398.62,682.9 1399.18,682.9 1399.74,682.9 1400.3,682.9 1400.86,682.9 1401.41,682.9 1401.97,682.9 1402.53,682.9 1403.09,682.9 1403.65,682.9 1404.21,682.9 1404.77,682.9 1405.33,682.9 1405.89,682.9 1406.45,682.9 1407.01,682.9 1407.57,682.9 1408.13,682.9 1408.68,682.9 1409.24,682.9 1409.8,682.9 1410.36,682.9 1410.92,682.9 1411.48,682.9 1412.04,682.9 1412.6,682.9 1413.16,682.9 1413.72,682.9 1414.28,682.9 1414.84,682.9 1415.4,682.9 1415.95,682.9 1416.51,682.9 1417.07,682.9 1417.63,682.9 1418.19,682.9 1418.75,682.9 1419.31,682.9 1419.87,682.9 1420.43,682.9 1420.99,682.9 1421.55,682.9 1422.11,682.9 1422.67,682.9 1423.23,682.9 1423.78,682.9 1424.34,682.9 1424.9,682.9 1425.46,682.9 1426.02,682.9 1426.58,682.9 1427.14,682.9 1427.7,682.9 1428.26,682.9 1428.82,682.9 1429.38,682.9 1429.94,682.9 1430.5,682.9 1431.05,682.9 1431.61,682.9 1432.17,682.9 1432.73,682.9 1433.29,682.9 1433.85,682.9 1434.41,682.9 1434.97,682.9 1435.53,682.9 1436.09,682.9 1436.65,682.9 1437.21,682.9 1437.77,682.9 1438.33,682.9 1438.88,682.9 1439.44,682.9 1440,682.9 1440.56,682.9 1441.12,682.9 1441.68,682.9 1442.24,682.9 1442.8,682.9 1443.36,682.9 1443.92,682.9 1444.48,682.9 1445.04,682.9 1445.6,682.9 1446.15,682.9 1446.71,682.9 1447.27,682.9 1447.83,682.9 1448.39,682.9 1448.95,682.9 1449.51,682.9 1450.07,682.9 1450.63,682.9 1451.19,682.9 1451.75,682.9 1452.31,682.9 1452.87,682.9 1453.42,682.9 1453.98,682.9 1454.54,682.9 1455.1,682.9 1455.66,682.9 1456.22,682.9 1456.78,682.9 1457.34,682.9 1457.9,682.9 1458.46,682.9 1459.02,682.9 1459.58,682.9 1460.14,682.9 1460.7,682.9 1461.25,682.9 1461.81,682.9 1462.37,682.9 1462.93,682.9 1463.49,682.9 1464.05,682.9 1464.61,682.9 1465.17,682.9 1465.73,682.9 1466.29,682.9 1466.85,682.9 1467.41,682.9 1467.97,682.9 1468.52,682.9 1469.08,682.9 1469.64,682.9 1470.2,682.9 1470.76,682.9 1471.32,682.9 1471.88,682.9 1472.44,682.9 1473,682.9 1473.56,682.9 1474.12,682.9 1474.68,682.9 1475.24,682.9 1475.79,682.9 1476.35,682.9 1476.91,682.9 1477.47,682.9 1478.03,682.9 1478.59,682.9 1479.15,682.9 1479.71,682.9 1480.27,682.9 1480.83,682.9 1481.39,682.9 1481.95,682.9 1482.51,682.9 1483.07,682.9 1483.62,682.9 1484.18,682.9 1484.74,682.9 1485.3,682.9 1485.86,682.9 1486.42,682.9 1486.98,682.9 1487.54,682.9 1488.1,682.9 1488.66,682.9 1489.22,682.9 1489.78,682.9 1490.34,682.9 1490.89,682.9 1491.45,682.9 1492.01,682.9 1492.57,682.9 1493.13,682.9 1493.69,682.9 1494.25,682.9 1494.81,682.9 1495.37,682.9 1495.93,682.9 1496.49,682.9 1497.05,682.9 1497.61,682.9 1498.16,682.9 1498.72,682.9 1499.28,682.9 1499.84,682.9 1500.4,682.9 1500.96,682.9 1501.52,682.9 1502.08,682.9 1502.64,682.9 1503.2,682.9 1503.76,682.9 1504.32,682.9 1504.88,682.9 1505.44,682.9 1505.99,682.9 1506.55,682.9 1507.11,682.9 1507.67,682.9 1508.23,682.9 1508.79,682.9 1509.35,682.9 1509.91,682.9 1510.47,682.9 1511.03,682.9 1511.59,682.9 1512.15,682.9 1512.71,682.9 1513.26,682.9 1513.82,682.9 1514.38,682.9 1514.94,682.9 1515.5,682.9 1516.06,682.9 1516.62,682.9 1517.18,682.9 1517.74,682.9 1518.3,682.9 1518.86,682.9 1519.42,682.9 1519.98,682.9 1520.53,682.9 1521.09,682.9 1521.65,682.9 1522.21,682.9 1522.77,682.9 1523.33,682.9 1523.89,682.9 1524.45,682.9 1525.01,682.9 1525.57,682.9 1526.13,682.9 1526.69,682.9 1527.25,682.9 1527.81,682.9 1528.36,682.9 1528.92,682.9 1529.48,682.9 1530.04,682.9 1530.6,682.9 1531.16,682.9 1531.72,682.9 1532.28,682.9 1532.84,682.9 1533.4,682.9 1533.96,682.9 1534.52,682.9 1535.08,682.9 1535.63,682.9 1536.19,682.9 1536.75,682.9 1537.31,682.9 1537.87,682.9 1538.43,682.9 1538.99,682.9 1539.55,682.9 1540.11,682.9 1540.67,682.9 1541.23,682.9 1541.79,682.9 1542.35,682.9 1542.9,682.9 1543.46,682.9 1544.02,682.9 1544.58,682.9 1545.14,682.9 1545.7,682.9 1546.26,682.9 1546.82,682.9 1547.38,682.9 1547.94,682.9 1548.5,682.9 1549.06,682.9 1549.62,682.9 1550.18,682.9 1550.73,682.9 1551.29,682.9 1551.85,682.9 1552.41,682.9 1552.97,682.9 1553.53,682.9 1554.09,682.9 1554.65,682.9 1555.21,682.9 1555.77,682.9 1556.33,682.9 1556.89,682.9 1557.45,682.9 1558,682.9 1558.56,682.9 1559.12,682.9 1559.68,682.9 1560.24,682.9 1560.8,682.9 1561.36,682.9 1561.92,682.9 1562.48,682.9 1563.04,682.9 1563.6,682.9 1564.16,682.9 1564.72,682.9 1565.28,682.9 1565.83,682.9 1566.39,682.9 1566.95,682.9 1567.51,682.9 1568.07,682.9 1568.63,682.9 1569.19,682.9 1569.75,682.9 1570.31,682.9 1570.87,682.9 1571.43,682.9 1571.99,682.9 1572.55,682.9 1573.1,682.9 1573.66,682.9 1574.22,682.9 1574.78,682.9 1575.34,682.9 1575.9,682.9 1576.46,682.9 1577.02,682.9 1577.58,682.9 1578.14,682.9 1578.7,682.9 1579.26,682.9 1579.82,682.9 1580.37,682.9 1580.93,682.9 1581.49,682.9 1582.05,682.9 1582.61,682.9 1583.17,682.9 1583.73,682.9 1584.29,682.9 1584.85,682.9 1585.41,682.9 1585.97,682.9 1586.53,682.9 1587.09,682.9 1587.65,682.9 1588.2,682.9 1588.76,682.9 1589.32,682.9 1589.88,682.9 1590.44,682.9 1591,682.9 1591.56,682.9 1592.12,682.9 1592.68,682.9 1593.24,682.9 1593.8,682.9 1594.36,682.9 1594.92,682.9 1595.47,682.9 1596.03,682.9 1596.59,682.9 1597.15,682.9 1597.71,682.9 1598.27,682.9 1598.83,682.9 1599.39,682.9 1599.95,682.9 1600.51,682.9 1601.07,682.9 1601.63,682.9 1602.19,682.9 1602.74,682.9 1603.3,682.9 1603.86,682.9 1604.42,682.9 1604.98,682.9 1605.54,682.9 1606.1,682.9 1606.66,682.9 1607.22,682.9 1607.78,682.9 1608.34,682.9 1608.9,682.9 1609.46,682.9 1610.02,682.9 1610.57,682.9 1611.13,682.9 1611.69,682.9 1612.25,682.9 1612.81,682.9 1613.37,682.9 1613.93,682.9 1614.49,682.9 1615.05,682.9 1615.61,682.9 1616.17,682.9 1616.73,682.9 1617.29,682.9 1617.84,682.9 1618.4,682.9 1618.96,682.9 1619.52,682.9 1620.08,682.9 1620.64,682.9 1621.2,682.9 1621.76,682.9 1622.32,682.9 1622.88,682.9 1623.44,682.9 1624,682.9 1624.56,682.9 1625.11,682.9 1625.67,682.9 1626.23,682.9 1626.79,682.9 1627.35,682.9 1627.91,682.9 1628.47,682.9 1629.03,682.9 1629.59,682.9 1630.15,682.9 1630.71,682.9 1631.27,682.9 1631.83,682.9 1632.39,682.9 1632.94,682.9 1633.5,682.9 1634.06,682.9 1634.62,682.9 1635.18,682.9 1635.74,682.9 1636.3,682.9 1636.86,682.9 1637.42,682.9 1637.98,682.9 1638.54,682.9 1639.1,682.9 1639.66,682.9 1640.21,682.9 1640.77,682.9 1641.33,682.9 1641.89,682.9 1642.45,682.9 1643.01,682.9 1643.57,682.9 1644.13,682.9 1644.69,682.9 1645.25,682.9 1645.81,682.9 1646.37,682.9 1646.93,682.9 1647.48,682.9 1648.04,682.9 1648.6,682.9 1649.16,682.9 1649.72,682.9 1650.28,682.9 1650.84,682.9 1651.4,682.9 1651.96,682.9 1652.52,682.9 1653.08,682.9 1653.64,682.9 1654.2,682.9 1654.76,682.9 1655.31,682.9 1655.87,682.9 1656.43,682.9 1656.99,682.9 1657.55,682.9 1658.11,682.9 1658.67,682.9 1659.23,682.9 1659.79,682.9 1660.35,682.9 1660.91,682.9 1661.47,682.9 1662.03,682.9 1662.58,682.9 1663.14,682.9 1663.7,682.9 1664.26,682.9 1664.82,682.9 1665.38,682.9 1665.94,682.9 1666.5,682.9 1667.06,682.9 1667.62,682.9 1668.18,682.9 1668.74,682.9 1669.3,682.9 1669.85,682.9 1670.41,682.9 1670.97,682.9 1671.53,682.9 1672.09,682.9 1672.65,682.9 1673.21,682.9 1673.77,682.9 1674.33,682.9 1674.89,682.9 1675.45,682.9 1676.01,682.9 1676.57,682.9 1677.13,682.9 1677.68,682.9 1678.24,682.9 1678.8,682.9 1679.36,682.9 1679.92,682.9 1680.48,682.9 1681.04,682.9 1681.6,682.9 1682.16,682.9 1682.72,682.9 1683.28,682.9 1683.84,682.9 1684.4,682.9 1684.95,682.9 1685.51,682.9 1686.07,682.9 1686.63,682.9 1687.19,682.9 1687.75,682.9 1688.31,682.9 1688.87,682.9 1689.43,682.9 1689.99,682.9 1690.55,682.9 1691.11,682.9 1691.67,682.9 1692.23,682.9 1692.78,682.9 1693.34,682.9 1693.9,682.9 1694.46,682.9 1695.02,682.9 1695.58,682.9 1696.14,682.9 1696.7,682.9 1697.26,682.9 1697.82,682.9 1698.38,682.9 1698.94,682.9 1699.5,682.9 1700.05,682.9 1700.61,682.9 1701.17,682.9 1701.73,682.9 1702.29,682.9 1702.85,682.9 1703.41,682.9 1703.97,682.9 1704.53,682.9 1705.09,682.9 1705.65,682.9 1706.21,682.9 1706.77,682.9 1707.32,682.9 1707.88,682.9 1708.44,682.9 1709,682.9 1709.56,682.9 1710.12,682.9 1710.68,682.9 1711.24,682.9 1711.8,682.9 1712.36,682.9 1712.92,682.9 1713.48,682.9 1714.04,682.9 1714.6,682.9 1715.15,682.9 1715.71,682.9 1716.27,682.9 1716.83,682.9 1717.39,682.9 1717.95,682.9 1718.51,682.9 1719.07,682.9 1719.63,682.9 1720.19,682.9 1720.75,682.9 1721.31,682.9 1721.87,682.9 1722.42,682.9 1722.98,682.9 1723.54,682.9 1724.1,682.9 1724.66,682.9 1725.22,682.9 1725.78,682.9 1726.34,682.9 1726.9,682.9 1727.46,682.9 1728.02,682.9 1728.58,682.9 1729.14,682.9 1729.69,682.9 1730.25,682.9 1730.81,682.9 1731.37,682.9 1731.93,682.9 1732.49,682.9 1733.05,682.9 1733.61,682.9 1734.17,682.9 1734.73,682.9 1735.29,682.9 1735.85,682.9 1736.41,682.9 1736.97,682.9 1737.52,682.9 1738.08,682.9 1738.64,682.9 1739.2,682.9 1739.76,682.9 1740.32,682.9 1740.88,682.9 1741.44,682.9 1742,682.9 1742.56,682.9 1743.12,682.9 1743.68,682.9 1744.24,682.9 1744.79,682.9 1745.35,682.9 1745.91,682.9 1746.47,682.9 1747.03,682.9 1747.59,682.9 1748.15,682.9 1748.71,682.9 1749.27,682.9 1749.83,682.9 1750.39,682.9 1750.95,682.9 1751.51,682.9 1752.06,682.9 1752.62,682.9 1753.18,682.9 1753.74,682.9 1754.3,682.9 1754.86,682.9 1755.42,682.9 1755.98,682.9 1756.54,682.9 1757.1,682.9 1757.66,682.9 1758.22,682.9 1758.78,682.9 1759.34,682.9 1759.89,682.9 1760.45,682.9 1761.01,682.9 1761.57,682.9 1762.13,682.9 1762.69,682.9 1763.25,682.9 1763.81,682.9 1764.37,682.9 1764.93,682.9 1765.49,682.9 1766.05,682.9 1766.61,682.9 1767.16,682.9 1767.72,682.9 1768.28,682.9 1768.84,682.9 1769.4,682.9 1769.96,682.9 1770.52,682.9 1771.08,682.9 1771.64,682.9 1772.2,682.9 1772.76,682.9 1773.32,682.9 1773.88,682.9 1774.43,682.9 1774.99,682.9 1775.55,682.9 1776.11,682.9 1776.67,682.9 1777.23,682.9 1777.79,682.9 1778.35,682.9 1778.91,682.9 1779.47,682.9 1780.03,682.9 1780.59,682.9 1781.15,682.9 1781.71,682.9 1782.26,682.9 1782.82,682.9 1783.38,682.9 1783.94,682.9 1784.5,682.9 1785.06,682.9 1785.62,682.9 1786.18,682.9 1786.74,682.9 1787.3,682.9 1787.86,682.9 1788.42,682.9 1788.98,682.9 1789.53,682.9 1790.09,682.9 1790.65,682.9 1791.21,682.9 1791.77,682.9 1792.33,682.9 1792.89,682.9 1793.45,682.9 1794.01,682.9 1794.57,682.9 1795.13,682.9 1795.69,682.9 1796.25,682.9 1796.8,682.9 1797.36,682.9 1797.92,682.9 1798.48,682.9 1799.04,682.9 1799.6,682.9 1800.16,682.9 1800.72,682.9 1801.28,682.9 1801.84,682.9 1802.4,682.9 1802.96,682.9 1803.52,682.9 1804.08,682.9 1804.63,682.9 1805.19,682.9 1805.75,682.9 1806.31,682.9 1806.87,682.9 1807.43,682.9 1807.99,682.9 1808.55,682.9 1809.11,682.9 1809.67,682.9 1810.23,682.9 1810.79,682.9 1811.35,682.9 1811.9,682.9 1812.46,682.9 1813.02,682.9 1813.58,682.9 1814.14,682.9 1814.7,682.9 1815.26,682.9 1815.82,682.9 1816.38,682.9 1816.94,682.9 1817.5,682.9 1818.06,682.9 1818.62,682.9 1819.18,682.9 1819.73,682.9 1820.29,682.9 1820.85,682.9 1821.41,682.9 1821.97,682.9 1822.53,682.9 1823.09,682.9 1823.65,682.9 1824.21,682.9 1824.77,682.9 1825.33,682.9 1825.89,682.9 1826.45,682.9 1827,682.9 1827.56,682.9 1828.12,682.9 1828.68,682.9 1829.24,682.9 1829.8,682.9 1830.36,682.9 1830.92,682.9 1831.48,682.9 1832.04,682.9 1832.6,682.9 1833.16,682.9 1833.72,682.9 1834.27,682.9 1834.83,682.9 1835.39,682.9 1835.95,682.9 1836.51,682.9 1837.07,682.9 1837.63,682.9 1838.19,682.9 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.014466711891282 ± 0.020471855159812886\nProjected Energy: -4.011637400158087 ± (0.004942397082995598, 0.004670464371207217)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.598065</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.9847e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2492e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0811e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.413e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.026e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0921e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613371\n -0.7590191922770817\n  0.13584182219622853\n  0.15789998694608087\n  0.8767114411781449\n  1.530592997097334\n  1.5835732611867392\n  3.072870330325869\n  3.12567265395184\n  4.862107221562164\n  6.26069485038059\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
