var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nspectral_strategy = GramSchmidt(): The SpectralStrategy used for simulations of spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2109870635037173 ± 0.00158385663735185\n   G2(1) = 0.9170852438290067 ± 0.0007422545832329384\n   G2(2) = 0.9822949597874018 ± 0.0005725225651015232\n   G2(3) = 0.9902525292634655 ± 0.0008832706329290628\n   G2(4) = 0.9822949597874018 ± 0.0005725225651015232\n   G2(5) = 0.9170852438290067 ± 0.0007422545832329384\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.006085709040149 ± 0.1506208978649954\n   Replica 2: -4.000982981320431 ± 0.14438624374856626\n   Replica 3: -3.9548640808803786 ± 0.1491970757084952\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip870\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip871\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip872\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.24 2211.02,1003.24 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.651 2211.02,745.651 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.061 2211.02,488.061 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.471 2211.02,230.471 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.24 423.181,1003.24 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.651 423.181,745.651 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.061 423.181,488.061 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.471 423.181,230.471 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M290.043 1016.59 L306.363 1016.59 L306.363 1020.52 L284.418 1020.52 L284.418 1016.59 Q287.08 1013.83 291.664 1009.2 Q296.27 1004.55 297.451 1003.21 Q299.696 1000.68 300.576 998.948 Q301.478 997.189 301.478 995.499 Q301.478 992.744 299.534 991.008 Q297.613 989.272 294.511 989.272 Q292.312 989.272 289.858 990.036 Q287.427 990.8 284.65 992.351 L284.65 987.628 Q287.474 986.494 289.927 985.915 Q292.381 985.337 294.418 985.337 Q299.789 985.337 302.983 988.022 Q306.177 990.707 306.177 995.198 Q306.177 997.327 305.367 999.249 Q304.58 1001.15 302.474 1003.74 Q301.895 1004.41 298.793 1007.63 Q295.691 1010.82 290.043 1016.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M316.224 985.962 L334.58 985.962 L334.58 989.897 L320.506 989.897 L320.506 998.369 Q321.524 998.022 322.543 997.86 Q323.562 997.675 324.58 997.675 Q330.367 997.675 333.747 1000.85 Q337.126 1004.02 337.126 1009.43 Q337.126 1015.01 333.654 1018.11 Q330.182 1021.19 323.862 1021.19 Q321.687 1021.19 319.418 1020.82 Q317.173 1020.45 314.765 1019.71 L314.765 1015.01 Q316.849 1016.15 319.071 1016.7 Q321.293 1017.26 323.77 1017.26 Q327.774 1017.26 330.112 1015.15 Q332.45 1013.04 332.45 1009.43 Q332.45 1005.82 330.112 1003.72 Q327.774 1001.61 323.77 1001.61 Q321.895 1001.61 320.02 1002.03 Q318.168 1002.44 316.224 1003.32 L316.224 985.962 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 989.04 Q352.728 989.04 350.899 992.605 Q349.094 996.147 349.094 1003.28 Q349.094 1010.38 350.899 1013.95 Q352.728 1017.49 356.339 1017.49 Q359.973 1017.49 361.779 1013.95 Q363.608 1010.38 363.608 1003.28 Q363.608 996.147 361.779 992.605 Q359.973 989.04 356.339 989.04 M356.339 985.337 Q362.149 985.337 365.205 989.943 Q368.284 994.527 368.284 1003.28 Q368.284 1012 365.205 1016.61 Q362.149 1021.19 356.339 1021.19 Q350.529 1021.19 347.45 1016.61 Q344.395 1012 344.395 1003.28 Q344.395 994.527 347.45 989.943 Q350.529 985.337 356.339 985.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M286.062 728.371 L304.418 728.371 L304.418 732.307 L290.344 732.307 L290.344 740.779 Q291.363 740.432 292.381 740.269 Q293.4 740.084 294.418 740.084 Q300.205 740.084 303.585 743.256 Q306.964 746.427 306.964 751.843 Q306.964 757.422 303.492 760.524 Q300.02 763.603 293.701 763.603 Q291.525 763.603 289.256 763.232 Q287.011 762.862 284.603 762.121 L284.603 757.422 Q286.687 758.556 288.909 759.112 Q291.131 759.668 293.608 759.668 Q297.613 759.668 299.951 757.561 Q302.288 755.455 302.288 751.843 Q302.288 748.232 299.951 746.126 Q297.613 744.019 293.608 744.019 Q291.733 744.019 289.858 744.436 Q288.006 744.853 286.062 745.732 L286.062 728.371 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M326.177 731.45 Q322.566 731.45 320.737 735.015 Q318.932 738.557 318.932 745.686 Q318.932 752.793 320.737 756.357 Q322.566 759.899 326.177 759.899 Q329.811 759.899 331.617 756.357 Q333.446 752.793 333.446 745.686 Q333.446 738.557 331.617 735.015 Q329.811 731.45 326.177 731.45 M326.177 727.746 Q331.987 727.746 335.043 732.353 Q338.122 736.936 338.122 745.686 Q338.122 754.413 335.043 759.019 Q331.987 763.603 326.177 763.603 Q320.367 763.603 317.288 759.019 Q314.233 754.413 314.233 745.686 Q314.233 736.936 317.288 732.353 Q320.367 727.746 326.177 727.746 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 731.45 Q352.728 731.45 350.899 735.015 Q349.094 738.557 349.094 745.686 Q349.094 752.793 350.899 756.357 Q352.728 759.899 356.339 759.899 Q359.973 759.899 361.779 756.357 Q363.608 752.793 363.608 745.686 Q363.608 738.557 361.779 735.015 Q359.973 731.45 356.339 731.45 M356.339 727.746 Q362.149 727.746 365.205 732.353 Q368.284 736.936 368.284 745.686 Q368.284 754.413 365.205 759.019 Q362.149 763.603 356.339 763.603 Q350.529 763.603 347.45 759.019 Q344.395 754.413 344.395 745.686 Q344.395 736.936 347.45 732.353 Q350.529 727.746 356.339 727.746 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M284.835 470.781 L307.057 470.781 L307.057 472.772 L294.511 505.341 L289.627 505.341 L301.432 474.716 L284.835 474.716 L284.835 470.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M316.224 470.781 L334.58 470.781 L334.58 474.716 L320.506 474.716 L320.506 483.188 Q321.524 482.841 322.543 482.679 Q323.562 482.494 324.58 482.494 Q330.367 482.494 333.747 485.665 Q337.126 488.836 337.126 494.253 Q337.126 499.832 333.654 502.934 Q330.182 506.012 323.862 506.012 Q321.687 506.012 319.418 505.642 Q317.173 505.272 314.765 504.531 L314.765 499.832 Q316.849 500.966 319.071 501.522 Q321.293 502.077 323.77 502.077 Q327.774 502.077 330.112 499.971 Q332.45 497.864 332.45 494.253 Q332.45 490.642 330.112 488.536 Q327.774 486.429 323.77 486.429 Q321.895 486.429 320.02 486.846 Q318.168 487.262 316.224 488.142 L316.224 470.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 473.86 Q352.728 473.86 350.899 477.424 Q349.094 480.966 349.094 488.096 Q349.094 495.202 350.899 498.767 Q352.728 502.309 356.339 502.309 Q359.973 502.309 361.779 498.767 Q363.608 495.202 363.608 488.096 Q363.608 480.966 361.779 477.424 Q359.973 473.86 356.339 473.86 M356.339 470.156 Q362.149 470.156 365.205 474.762 Q368.284 479.346 368.284 488.096 Q368.284 496.823 365.205 501.429 Q362.149 506.012 356.339 506.012 Q350.529 506.012 347.45 501.429 Q344.395 496.823 344.395 488.096 Q344.395 479.346 347.45 474.762 Q350.529 470.156 356.339 470.156 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M256.664 243.815 L264.303 243.815 L264.303 217.45 L255.992 219.116 L255.992 214.857 L264.256 213.191 L268.932 213.191 L268.932 243.815 L276.571 243.815 L276.571 247.751 L256.664 247.751 L256.664 243.815 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M296.015 216.269 Q292.404 216.269 290.576 219.834 Q288.77 223.376 288.77 230.505 Q288.77 237.612 290.576 241.177 Q292.404 244.718 296.015 244.718 Q299.65 244.718 301.455 241.177 Q303.284 237.612 303.284 230.505 Q303.284 223.376 301.455 219.834 Q299.65 216.269 296.015 216.269 M296.015 212.566 Q301.826 212.566 304.881 217.172 Q307.96 221.755 307.96 230.505 Q307.96 239.232 304.881 243.839 Q301.826 248.422 296.015 248.422 Q290.205 248.422 287.127 243.839 Q284.071 239.232 284.071 230.505 Q284.071 221.755 287.127 217.172 Q290.205 212.566 296.015 212.566 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M326.177 216.269 Q322.566 216.269 320.737 219.834 Q318.932 223.376 318.932 230.505 Q318.932 237.612 320.737 241.177 Q322.566 244.718 326.177 244.718 Q329.811 244.718 331.617 241.177 Q333.446 237.612 333.446 230.505 Q333.446 223.376 331.617 219.834 Q329.811 216.269 326.177 216.269 M326.177 212.566 Q331.987 212.566 335.043 217.172 Q338.122 221.755 338.122 230.505 Q338.122 239.232 335.043 243.839 Q331.987 248.422 326.177 248.422 Q320.367 248.422 317.288 243.839 Q314.233 239.232 314.233 230.505 Q314.233 221.755 317.288 217.172 Q320.367 212.566 326.177 212.566 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M356.339 216.269 Q352.728 216.269 350.899 219.834 Q349.094 223.376 349.094 230.505 Q349.094 237.612 350.899 241.177 Q352.728 244.718 356.339 244.718 Q359.973 244.718 361.779 241.177 Q363.608 237.612 363.608 230.505 Q363.608 223.376 361.779 219.834 Q359.973 216.269 356.339 216.269 M356.339 212.566 Q362.149 212.566 365.205 217.172 Q368.284 221.755 368.284 230.505 Q368.284 239.232 365.205 243.839 Q362.149 248.422 356.339 248.422 Q350.529 248.422 347.45 243.839 Q344.395 239.232 344.395 230.505 Q344.395 221.755 347.45 217.172 Q350.529 212.566 356.339 212.566 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.471 4017.76,230.471 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1243.2 463.375,1240.12 463.943,1239.04 464.511,1237.85 465.08,1236.56 465.648,1235.17 466.216,1232.61 466.785,1229.94 467.353,1228.18 467.921,1225.26 468.49,1222.17 469.058,1219.96 469.626,1217.62 470.195,1215.13 470.763,1212.45 471.331,1208.57 471.9,1204.55 472.468,1201.4 473.036,1194.92 473.605,1191.39 474.173,1187.65 474.741,1182.64 475.31,1177.42 475.878,1173.1 476.446,1168.59 477.015,1163.74 477.583,1158.79 478.152,1152.6 478.72,1147.18 479.288,1141.53 479.857,1134.59 480.425,1126.48 480.993,1118.17 481.562,1111.93 482.13,1104.34 482.698,1096.55 483.267,1088.52 483.835,1081.34 484.403,1072.92 484.972,1065.29 485.54,1056.63 486.108,1048.64 486.677,1037.51 487.245,1027.31 487.813,1019.04 488.382,1008.55 488.95,999.116 489.518,989.531 490.087,979.735 490.655,968.931 491.224,957.979 491.792,947.077 492.36,936.301 492.929,925.372 493.497,915.31 494.065,906.409 494.634,896.232 495.202,887.182 495.77,876.855 496.339,867.521 496.907,855.028 497.475,845.682 498.044,836.479 498.612,827.094 499.18,816.649 499.749,807.1 500.317,795.633 500.885,785.232 501.454,775.914 502.022,764.49 502.59,754.348 503.159,743.177 503.727,731.075 504.295,722.325 504.864,711.45 505.432,701.714 506.001,690.984 506.569,681.423 507.137,670.007 507.706,660.589 508.274,651.466 508.842,640.376 509.411,630.536 509.979,622.955 510.547,614.487 511.116,604.935 511.684,597.474 512.252,589.147 512.821,582.073 513.389,573.96 513.957,568.26 514.526,559.153 515.094,550.288 515.662,542.7 516.231,534.193 516.799,527.021 517.367,520.746 517.936,512.787 518.504,506.869 519.072,500.14 519.641,494.578 520.209,487.967 520.778,482.581 521.346,475.214 521.914,466.857 522.483,463.007 523.051,454.96 523.619,449.382 524.188,443.972 524.756,438.514 525.324,431.981 525.893,426.797 526.461,420.63 527.029,413.809 527.598,409.156 528.166,405.781 528.734,403.409 529.303,398.996 529.871,395.572 530.439,392.074 531.008,388.73 531.576,385.386 532.144,380.135 532.713,376.111 533.281,372.139 533.85,366.342 534.418,362.825 534.986,356.212 535.555,353.091 536.123,352.976 536.691,346.821 537.26,344.862 537.828,341.011 538.396,340.227 538.965,338.117 539.533,335.068 540.101,333.325 540.67,332.538 541.238,330.7 541.806,326.83 542.375,325.21 542.943,322.569 543.511,315.986 544.08,312.86 544.648,310.595 545.216,309.469 545.785,309.45 546.353,306.123 546.921,303.853 547.49,300.6 548.058,298.885 548.627,293.003 549.195,291.7 549.763,289.127 550.332,287.9 550.9,288.821 551.468,288.419 552.037,286.186 552.605,284.832 553.173,284.628 553.742,284.494 554.31,281.077 554.878,279.989 555.447,278.895 556.015,277.971 556.583,276.873 557.152,277.909 557.72,277.791 558.288,275.595 558.857,276.536 559.425,274.188 559.993,273.961 560.562,274.752 561.13,272.621 561.698,270.287 562.267,270.277 562.835,270.221 563.404,267.916 563.972,268.019 564.54,269.198 565.109,269.04 565.677,269.935 566.245,265.676 566.814,266.622 567.382,265.475 567.95,265.186 568.519,264.261 569.087,264.083 569.655,265.25 570.224,263.263 570.792,262.122 571.36,262.051 571.929,263.105 572.497,262.95 573.065,261.566 573.634,261.223 574.202,261.979 574.77,260.708 575.339,260.728 575.907,261.453 576.476,262.116 577.044,263.923 577.612,260.344 578.181,260.051 578.749,259.951 579.317,259.759 579.886,258.262 580.454,258.026 581.022,257.691 581.591,257.483 582.159,255.011 582.727,256.985 583.296,253.457 583.864,253.147 584.432,251.128 585.001,250.181 585.569,249.425 586.137,248.862 586.706,247.993 587.274,248.419 587.842,247.378 588.411,245.641 588.979,245.832 589.547,246.1 590.116,246.363 590.684,244.537 591.253,246.744 591.821,245.939 592.389,243.062 592.958,245.762 593.526,246.137 594.094,249.525 594.663,250.72 595.231,250.651 595.799,252.761 596.368,253.55 596.936,253.266 597.504,251.695 598.073,249.372 598.641,252.108 599.209,253.687 599.778,252.917 600.346,252.324 600.914,251.869 601.483,251.313 602.051,250.798 602.619,251.24 603.188,250.474 603.756,248.013 604.325,244.651 604.893,246.732 605.461,244.491 606.03,240.37 606.598,242.642 607.166,242.592 607.735,242.726 608.303,242.668 608.871,242.647 609.44,241.836 610.008,242.867 610.576,243.723 611.145,244.653 611.713,239.291 612.281,238.465 612.85,239.554 613.418,242.706 613.986,241.436 614.555,241.507 615.123,240.594 615.691,240.579 616.26,239.527 616.828,238.505 617.396,238.756 617.965,237.893 618.533,236.151 619.102,236.463 619.67,236.709 620.238,238.107 620.807,237.42 621.375,240.951 621.943,241.12 622.512,242.037 623.08,241.72 623.648,243.816 624.217,243.666 624.785,242.387 625.353,241.173 625.922,240.004 626.49,235.966 627.058,236.386 627.627,236.757 628.195,238.102 628.763,238.326 629.332,236.257 629.9,236.412 630.468,237.49 631.037,237.72 631.605,239.144 632.173,239.12 632.742,241.263 633.31,241.035 633.879,241.928 634.447,241.856 635.015,241.647 635.584,241.344 636.152,241.034 636.72,239.572 637.289,238.444 637.857,235.369 638.425,234.508 638.994,233.74 639.562,235.996 640.13,235.06 640.699,235.152 641.267,235.377 641.835,235.594 642.404,233.726 642.972,232.966 643.54,233.154 644.109,230.378 644.677,230.992 645.245,230.564 645.814,232.062 646.382,233.441 646.951,232.66 647.519,232.065 648.087,233.899 648.656,232.961 649.224,233.261 649.792,233.541 650.361,234.734 650.929,233.875 651.497,233.368 652.066,232.567 652.634,231.939 653.202,231.333 653.771,228.835 654.339,231.432 654.907,232.068 655.476,232.502 656.044,232.956 656.612,234.255 657.181,233.495 657.749,233.805 658.317,232.013 658.886,232.349 659.454,233.692 660.022,235.084 660.591,237.418 661.159,235.501 661.728,234.638 662.296,233.874 662.864,234.008 663.433,233.172 664.001,231.308 664.569,231.637 665.138,232.969 665.706,233.243 666.274,234.754 666.843,232.979 667.411,233.363 667.979,232.567 668.548,232.896 669.116,236.212 669.684,236.288 670.253,236.595 670.821,236.544 671.389,237.336 671.958,236.425 672.526,238.373 673.094,240.391 673.663,241.067 674.231,241.553 674.799,241.078 675.368,240.726 675.936,239.455 676.505,239.292 677.073,237.893 677.641,236.79 678.21,235.899 678.778,235.958 679.346,236.891 679.915,236.54 680.483,239.521 681.051,236.3 681.62,236.467 682.188,236.227 682.756,237.149 683.325,236.126 683.893,236.118 684.461,237.044 685.03,237.801 685.598,237.49 686.166,237.116 686.735,235.066 687.303,231.995 687.871,233.372 688.44,235.762 689.008,235.842 689.577,232.647 690.145,231.598 690.713,232.749 691.282,230.834 691.85,231.064 692.418,229.191 692.987,228.372 693.555,228.709 694.123,230.102 694.692,229.508 695.26,227.878 695.828,226.368 696.397,226.083 696.965,226.665 697.533,226.483 698.102,226.057 698.67,228.904 699.238,229.282 699.807,229.684 700.375,230.037 700.943,230.516 701.512,229.88 702.08,229.247 702.648,229.61 703.217,231.365 703.785,230.737 704.354,232.291 704.922,231.519 705.49,231.865 706.059,234.211 706.627,234.317 707.195,234.409 707.764,235.578 708.332,234.691 708.9,234.745 709.469,233.773 710.037,231.69 710.605,231.907 711.174,232.087 711.742,232.29 712.31,234.471 712.879,236.711 713.447,240.911 714.015,240.496 714.584,237.776 715.152,237.555 715.72,237.53 716.289,237.31 716.857,238.222 717.425,241.043 717.994,241.602 718.562,240.004 719.131,236.6 719.699,239.405 720.267,238.023 720.836,237.781 721.404,236.533 721.972,235.032 722.541,235.834 723.109,235.602 723.677,235.594 724.246,234.433 724.814,232.508 725.382,233.645 725.951,234.69 726.519,235.549 727.087,234.409 727.656,232.297 728.224,233.439 728.792,232.427 729.361,231.453 729.929,231.712 730.497,230.725 731.066,232.749 731.634,232.603 732.203,232.686 732.771,232.753 733.339,233.025 733.908,233.962 734.476,231.787 735.044,231.807 735.613,228.981 736.181,229.364 736.749,229.652 737.318,229.145 737.886,230.299 738.454,231.441 739.023,232.55 739.591,232.488 740.159,232.423 740.728,231.476 741.296,228.428 741.864,228.906 742.433,229.142 743.001,229.626 743.569,229.667 744.138,229.988 744.706,229.149 745.274,229.324 745.843,225.478 746.411,224.045 746.98,225.534 747.548,224.892 748.116,225.212 748.685,225.567 749.253,227.236 749.821,228.662 750.39,229.046 750.958,229.347 751.526,229.404 752.095,230.86 752.663,230.985 753.231,232.177 753.8,232.28 754.368,232.289 754.936,231.422 755.505,231.508 756.073,231.657 756.641,235.079 757.21,234.77 757.778,234.607 758.346,234.339 758.915,235.272 759.483,235.186 760.052,237.07 760.62,235.803 761.188,235.608 761.757,234.336 762.325,236.208 762.893,239.133 763.462,239.56 764.03,238.016 764.598,236.827 765.167,234.317 765.735,236.244 766.303,234.917 766.872,234.861 767.44,234.541 768.008,234.461 768.577,233.25 769.145,234.021 769.713,233.806 770.282,233.766 770.85,234.617 771.418,233.457 771.987,233.295 772.555,233.148 773.123,233.153 773.692,232.14 774.26,234.271 774.829,232.041 775.397,230.011 775.965,231.987 776.534,230.796 777.102,231.818 777.67,229.809 778.239,229.734 778.807,229.925 779.375,229.182 779.944,230.547 780.512,230.881 781.08,230.983 781.649,231.139 782.217,231.377 782.785,234.65 783.354,235.148 783.922,233.974 784.49,233.77 785.059,228.482 785.627,225.593 786.195,223.959 786.764,225.565 787.332,227.149 787.9,228.496 788.469,227.84 789.037,227.303 789.606,228.987 790.174,230.319 790.742,230.702 791.311,229.814 791.879,231.976 792.447,234.013 793.016,236.961 793.584,236.668 794.152,236.297 794.721,233.933 795.289,233.871 795.857,234.6 796.426,233.313 796.994,232.932 797.562,232.855 798.131,233.863 798.699,234.836 799.267,233.498 799.836,232.473 800.404,232.521 800.972,229.322 801.541,229.615 802.109,229.568 802.678,229.703 803.246,228.769 803.814,229.07 804.383,229.281 804.951,229.428 805.519,229.513 806.088,228.632 806.656,229.895 807.224,231.06 807.793,229.083 808.361,226.122 808.929,226.407 809.498,224.885 810.066,225.481 810.634,225.185 811.203,224.787 811.771,227.291 812.339,228.722 812.908,228.947 813.476,230.486 814.044,232.862 814.613,231.832 815.181,229.775 815.749,229.992 816.318,231.412 816.886,231.612 817.455,231.758 818.023,231.902 818.591,232.945 819.16,232.784 819.728,233.058 820.296,233.268 820.865,235.201 821.433,236.056 822.001,236.737 822.57,237.412 823.138,238.041 823.706,239.563 824.275,238.877 824.843,239.479 825.411,239.128 825.98,239.766 826.548,239.166 827.116,236.692 827.685,235.137 828.253,235.65 828.821,236.271 829.39,236.876 829.958,236.548 830.526,234.958 831.095,235.81 831.663,235.44 832.232,233.982 832.8,232.659 833.368,232.536 833.937,233.562 834.505,233.188 835.073,231.776 835.642,229.619 836.21,230.672 836.778,229.553 837.347,229.558 837.915,229.914 838.483,228.941 839.052,229.115 839.62,230.246 840.188,231.286 840.757,228.294 841.325,225.573 841.893,223.813 842.462,224.386 843.03,223.964 843.598,224.378 844.167,221.756 844.735,222.489 845.304,223.138 845.872,224.762 846.44,224.073 847.009,224.598 847.577,225.157 848.145,224.571 848.714,226.044 849.282,225.38 849.85,225.781 850.419,226.333 850.987,225.876 851.555,225.304 852.124,224.946 852.692,226.525 853.26,226.155 853.829,227.88 854.397,226.92 854.965,229.419 855.534,228.662 856.102,230.291 856.67,230.558 857.239,232.74 857.807,231.57 858.375,234.788 858.944,232.577 859.512,233.503 860.081,234.435 860.649,235.413 861.217,233.947 861.786,230.805 862.354,230.957 862.922,231.214 863.491,230.43 864.059,228.489 864.627,231.02 865.196,228.923 865.764,230.126 866.332,232.198 866.901,231.198 867.469,230.265 868.037,230.474 868.606,230.578 869.174,231.664 869.742,231.755 870.311,231.898 870.879,231.02 871.447,231.321 872.016,231.408 872.584,232.594 873.152,231.631 873.721,228.692 874.289,229.101 874.858,231.193 875.426,231.204 875.994,232.608 876.563,231.658 877.131,232.846 877.699,229.899 878.268,229.311 878.836,228.366 879.404,228.66 879.973,229.062 880.541,231.345 881.109,230.443 881.678,230.752 882.246,230.895 882.814,231.004 883.383,232.083 883.951,232.149 884.519,232.067 885.088,232.403 885.656,231.623 886.224,230.767 886.793,229.903 887.361,231.247 887.93,232.231 888.498,231.451 889.066,230.578 889.635,229.886 890.203,228.104 890.771,229.442 891.34,229.415 891.908,230.759 892.476,229.934 893.045,230.181 893.613,230.298 894.181,227.514 894.75,229.973 895.318,231.038 895.886,229.145 896.455,229.119 897.023,228.474 897.591,229.762 898.16,230.919 898.728,231.008 899.296,229.099 899.865,233.338 900.433,235.501 901.001,236.174 901.57,235.039 902.138,232.985 902.707,231.981 903.275,232.105 903.843,233.198 904.412,232.965 904.98,233.889 905.548,234.04 906.117,232.634 906.685,232.63 907.253,233.498 907.822,231.379 908.39,230.621 908.958,230.918 909.527,233.071 910.095,233.048 910.663,232.085 911.232,232.226 911.8,232.398 912.368,231.321 912.937,231.434 913.505,231.686 914.073,231.626 914.642,232.585 915.21,233.592 915.779,231.679 916.347,230.688 916.915,230.001 917.484,230.133 918.052,233.56 918.62,234.39 919.189,234.367 919.757,234.056 920.325,233.949 920.894,233.871 921.462,232.61 922.03,234.525 922.599,233.384 923.167,234.166 923.735,234.904 924.304,237.759 924.872,238.285 925.44,237.937 926.009,237.384 926.577,237.017 927.145,235.6 927.714,235.325 928.282,235.936 928.85,234.642 929.419,233.364 929.987,232.896 930.556,233.806 931.124,233.569 931.692,233.497 932.261,232.181 932.829,233.131 933.397,235.31 933.966,234.984 934.534,233.696 935.102,232.365 935.671,232.328 936.239,232.173 936.807,233.076 937.376,234.966 937.944,234.451 938.512,235.022 939.081,233.575 939.649,233.316 940.217,233.29 940.786,235.087 941.354,234.737 941.922,231.866 942.491,233.759 943.059,234.412 943.627,232.988 944.196,233.687 944.764,233.396 945.333,230.889 945.901,229.864 946.469,230.91 947.038,233.003 947.606,233.863 948.174,233.659 948.743,231.276 949.311,233.149 949.879,232.899 950.448,232.695 951.016,231.353 951.584,231.197 952.153,229.84 952.721,230.673 953.289,230.551 953.858,229.42 954.426,229.218 954.994,230.234 955.563,230.175 956.131,229.076 956.699,228.107 957.268,229.153 957.836,229.071 958.405,228.103 958.973,231.337 959.541,230.052 960.11,226.997 960.678,230.114 961.246,230.894 961.815,231.689 962.383,232.731 962.951,233.761 963.52,233.783 964.088,231.324 964.656,232.093 965.225,230.792 965.793,228.654 966.361,225.654 966.93,225.862 967.498,225.277 968.066,225.356 968.635,226.975 969.203,228.221 969.771,226.338 970.34,225.404 970.908,228.097 971.476,229.412 972.045,228.691 972.613,227.776 973.182,228.177 973.75,230.554 974.318,230.225 974.887,227.27 975.455,229.35 976.023,232.618 976.592,230.316 977.16,230.397 977.728,229.286 978.297,231.088 978.865,230.15 979.433,232.296 980.002,232.214 980.57,232.045 981.138,233.109 981.707,231.744 982.275,231.412 982.843,230.331 983.412,232.142 983.98,230.929 984.548,230.928 985.117,229.838 985.685,229.891 986.253,229.023 986.822,228.082 987.39,226.015 987.959,227.591 988.527,227.722 989.095,228.908 989.664,227.257 990.232,228.796 990.8,227.782 991.369,226.058 991.937,226.1 992.505,225.363 993.074,226.463 993.642,225.719 994.21,225.124 994.779,226.543 995.347,226.687 995.915,226.013 996.484,225.163 997.052,226.637 997.62,227.971 998.189,229.395 998.757,230.615 999.325,230.839 999.894,231.919 1000.46,231.764 1001.03,232.957 1001.6,233.836 1002.17,236.741 1002.74,235.11 1003.3,235.168 1003.87,233.022 1004.44,236.191 1005.01,233.81 1005.58,233.73 1006.15,235.343 1006.71,234.117 1007.28,234.788 1007.85,234.305 1008.42,234.047 1008.99,233.618 1009.56,235.419 1010.12,233.827 1010.69,233.86 1011.26,232.508 1011.83,231.329 1012.4,233.515 1012.97,232.283 1013.53,229.917 1014.1,229.002 1014.67,229.11 1015.24,228.129 1015.81,228.351 1016.38,228.522 1016.94,227.473 1017.51,228.374 1018.08,229.779 1018.65,229.965 1019.22,228.913 1019.79,229.921 1020.35,230.003 1020.92,231.968 1021.49,227.899 1022.06,228.278 1022.63,229.53 1023.2,231.739 1023.76,232.577 1024.33,230.592 1024.9,229.885 1025.47,228.811 1026.04,230.007 1026.61,229.972 1027.17,230.052 1027.74,230.067 1028.31,227.877 1028.88,228.06 1029.45,231.369 1030.02,230.274 1030.58,231.038 1031.15,229.793 1031.72,232.139 1032.29,233.067 1032.86,230.93 1033.43,231.752 1033.99,231.698 1034.56,231.462 1035.13,233.413 1035.7,233.095 1036.27,232.839 1036.84,232.669 1037.4,231.454 1037.97,231.478 1038.54,230.459 1039.11,230.469 1039.68,228.441 1040.25,227.582 1040.81,227.892 1041.38,226.298 1041.95,227.426 1042.52,226.521 1043.09,230.847 1043.66,232.047 1044.22,232.99 1044.79,234.015 1045.36,231.602 1045.93,231.297 1046.5,231.166 1047.07,232.244 1047.63,231.943 1048.2,232.747 1048.77,229.618 1049.34,229.791 1049.91,228.954 1050.48,227.124 1051.05,226.277 1051.61,226.503 1052.18,228.005 1052.75,228.201 1053.32,228.308 1053.89,228.498 1054.46,229.725 1055.02,228.903 1055.59,226.187 1056.16,224.456 1056.73,225.965 1057.3,227.303 1057.87,226.205 1058.43,227.62 1059,226.845 1059.57,229.068 1060.14,232.243 1060.71,232.292 1061.28,233.233 1061.84,232.835 1062.41,231.801 1062.98,232.893 1063.55,234.808 1064.12,233.42 1064.69,235.26 1065.25,235.226 1065.82,234.619 1066.39,235.47 1066.96,235.206 1067.53,237.934 1068.1,237.477 1068.66,236.917 1069.23,235.687 1069.8,235.322 1070.37,235.912 1070.94,236.403 1071.51,234.775 1072.07,232.376 1072.64,232.083 1073.21,233.076 1073.78,234.03 1074.35,234.795 1074.92,231.125 1075.48,230.955 1076.05,232.091 1076.62,233.062 1077.19,235.137 1077.76,234.659 1078.33,236.126 1078.89,233.611 1079.46,234.425 1080.03,235.154 1080.6,235.535 1081.17,234.02 1081.74,231.502 1082.3,230.252 1082.87,229.051 1083.44,228.969 1084.01,228.938 1084.58,227.846 1085.15,226.966 1085.71,227.945 1086.28,227.844 1086.85,226.077 1087.42,225.267 1087.99,226.512 1088.56,228.793 1089.12,228.76 1089.69,229.849 1090.26,229.86 1090.83,230.822 1091.4,228.674 1091.97,229.686 1092.53,227.462 1093.1,225.665 1093.67,226.795 1094.24,226.935 1094.81,228.227 1095.38,227.121 1095.94,229.353 1096.51,228.64 1097.08,229.553 1097.65,227.509 1098.22,228.721 1098.79,229.984 1099.35,232.027 1099.92,230.846 1100.49,231.828 1101.06,231.776 1101.63,231.375 1102.2,231.241 1102.76,232.926 1103.33,232.66 1103.9,232.436 1104.47,234.231 1105.04,232.916 1105.61,233.549 1106.17,232.221 1106.74,231.963 1107.31,236.165 1107.88,238.686 1108.45,240.201 1109.02,239.37 1109.58,239.585 1110.15,236.591 1110.72,236.094 1111.29,234.432 1111.86,233.194 1112.43,232.525 1112.99,228.26 1113.56,229.245 1114.13,229.304 1114.7,228.263 1115.27,229.047 1115.84,225.745 1116.4,224.917 1116.97,225.349 1117.54,226.501 1118.11,228.673 1118.68,229.702 1119.25,228.563 1119.81,226.795 1120.38,228.067 1120.95,228.338 1121.52,228.594 1122.09,230.857 1122.66,230.849 1123.23,232.682 1123.79,232.253 1124.36,233.159 1124.93,231.02 1125.5,229.875 1126.07,229.718 1126.64,229.079 1127.2,231.93 1127.77,231.771 1128.34,230.575 1128.91,230.417 1129.48,227.114 1130.05,225.193 1130.61,225.647 1131.18,224.651 1131.75,225.886 1132.32,223.917 1132.89,220.199 1133.46,222.854 1134.02,223.417 1134.59,223.826 1135.16,223.218 1135.73,223.677 1136.3,224.245 1136.87,224.829 1137.43,225.355 1138,224.667 1138.57,224.4 1139.14,225.719 1139.71,227.279 1140.28,225.641 1140.84,225.004 1141.41,226.361 1141.98,227.858 1142.55,227.17 1143.12,224.614 1143.69,225.139 1144.25,224.588 1144.82,225.249 1145.39,225.819 1145.96,225.365 1146.53,226.059 1147.1,226.557 1147.66,229.134 1148.23,229.337 1148.8,228.421 1149.37,229.601 1149.94,229.748 1150.51,229.306 1151.07,229.409 1151.64,229.679 1152.21,230.037 1152.78,229.162 1153.35,229.509 1153.92,227.733 1154.48,228.907 1155.05,229.997 1155.62,230.117 1156.19,230.386 1156.76,230.533 1157.33,229.634 1157.89,229.895 1158.46,231.133 1159.03,231.276 1159.6,227.341 1160.17,227.769 1160.74,229.325 1161.3,230.752 1161.87,233 1162.44,232.981 1163.01,230.854 1163.58,232.921 1164.15,230.938 1164.71,233.22 1165.28,233.274 1165.85,233.097 1166.42,233.998 1166.99,231.855 1167.56,232.891 1168.12,232.754 1168.69,234.602 1169.26,232.371 1169.83,231.34 1170.4,230.281 1170.97,229.488 1171.53,230.75 1172.1,232.087 1172.67,232.037 1173.24,232.014 1173.81,232.116 1174.38,231.353 1174.94,229.51 1175.51,230.722 1176.08,229.88 1176.65,231.031 1177.22,233.159 1177.79,233.144 1178.35,231.876 1178.92,230.674 1179.49,227.876 1180.06,228.225 1180.63,229.542 1181.2,230.766 1181.76,230.955 1182.33,233.091 1182.9,235.098 1183.47,233.983 1184.04,233.655 1184.61,235.669 1185.17,235.25 1185.74,236.22 1186.31,236.88 1186.88,236.519 1187.45,238.44 1188.02,236.954 1188.58,233.384 1189.15,231.135 1189.72,230.003 1190.29,230.083 1190.86,230.152 1191.43,230.23 1192,230.412 1192.56,228.282 1193.13,231.666 1193.7,232.798 1194.27,231.467 1194.84,231.389 1195.41,230.15 1195.97,231.214 1196.54,231.276 1197.11,230.368 1197.68,231.235 1198.25,232.209 1198.82,230.053 1199.38,232.062 1199.95,232.04 1200.52,231.006 1201.09,231.904 1201.66,232.725 1202.23,231.707 1202.79,229.647 1203.36,229.533 1203.93,229.566 1204.5,228.383 1205.07,228.49 1205.64,227.674 1206.2,230.027 1206.77,231.054 1207.34,231.276 1207.91,233.296 1208.48,233.111 1209.05,230.948 1209.61,229.818 1210.18,229.047 1210.75,227.177 1211.32,227.606 1211.89,224.967 1212.46,226.276 1213.02,226.722 1213.59,227.977 1214.16,230.049 1214.73,228.153 1215.3,229.272 1215.87,229.474 1216.43,229.507 1217,230.504 1217.57,230.433 1218.14,231.693 1218.71,230.672 1219.28,231.823 1219.84,232.764 1220.41,231.759 1220.98,231.449 1221.55,231.517 1222.12,232.813 1222.69,232.735 1223.25,230.649 1223.82,229.543 1224.39,229.39 1224.96,228.446 1225.53,227.686 1226.1,229.952 1226.66,235.009 1227.23,235.847 1227.8,235.455 1228.37,234.164 1228.94,233.993 1229.51,233.835 1230.07,233.293 1230.64,233.169 1231.21,233.971 1231.78,233.607 1232.35,232.336 1232.92,232.135 1233.48,234.083 1234.05,236.774 1234.62,234.983 1235.19,235.74 1235.76,235.851 1236.33,235.177 1236.89,234.724 1237.46,235.524 1238.03,235.964 1238.6,235.63 1239.17,234.963 1239.74,236.418 1240.3,233.965 1240.87,233.915 1241.44,231.571 1242.01,230.377 1242.58,227.171 1243.15,225.322 1243.71,225.745 1244.28,228.157 1244.85,228.372 1245.42,228.62 1245.99,227.643 1246.56,229.045 1247.12,230.082 1247.69,230.929 1248.26,230.961 1248.83,231.811 1249.4,230.677 1249.97,230.727 1250.53,230.89 1251.1,230.751 1251.67,230.551 1252.24,228.32 1252.81,227.511 1253.38,226.726 1253.94,227.036 1254.51,228.447 1255.08,227.563 1255.65,226.634 1256.22,224.782 1256.79,225.319 1257.35,222.679 1257.92,226.179 1258.49,228.457 1259.06,227.758 1259.63,224.82 1260.2,228.226 1260.76,227.329 1261.33,226.588 1261.9,228.821 1262.47,230.041 1263.04,227.987 1263.61,230.112 1264.18,230.27 1264.74,233.338 1265.31,236.117 1265.88,231.638 1266.45,232.773 1267.02,231.548 1267.59,231.574 1268.15,231.504 1268.72,232.181 1269.29,233.072 1269.86,230.735 1270.43,230.724 1271,232.797 1271.56,231.47 1272.13,229.23 1272.7,229.445 1273.27,230.486 1273.84,232.434 1274.41,231.177 1274.97,233.112 1275.54,231.797 1276.11,229.774 1276.68,229.882 1277.25,230.968 1277.82,233.037 1278.38,232.974 1278.95,231.576 1279.52,231.833 1280.09,231.846 1280.66,229.664 1281.23,228.56 1281.79,229.695 1282.36,229.818 1282.93,231.027 1283.5,230.053 1284.07,230.132 1284.64,231.266 1285.2,232.211 1285.77,229.883 1286.34,226.728 1286.91,228.043 1287.48,228.325 1288.05,229.456 1288.61,232.828 1289.18,231.865 1289.75,232.684 1290.32,230.352 1290.89,233.545 1291.46,231.27 1292.02,230.166 1292.59,231.154 1293.16,232.165 1293.73,232.08 1294.3,231.819 1294.87,229.461 1295.43,227.411 1296,227.913 1296.57,227.917 1297.14,227.05 1297.71,226.367 1298.28,224.661 1298.84,225.062 1299.41,225.431 1299.98,224.08 1300.55,224.579 1301.12,228.337 1301.69,227.69 1302.25,227.968 1302.82,230.138 1303.39,232.227 1303.96,231.435 1304.53,234.17 1305.1,232.851 1305.66,236.649 1306.23,237.233 1306.8,236.78 1307.37,232.345 1307.94,232.179 1308.51,235.051 1309.07,234.624 1309.64,233.295 1310.21,236.341 1310.78,235.995 1311.35,234.514 1311.92,234.217 1312.48,234.007 1313.05,233.627 1313.62,230.968 1314.19,231.643 1314.76,231.589 1315.33,230.357 1315.89,231.288 1316.46,233.33 1317.03,232.998 1317.6,231.596 1318.17,232.448 1318.74,235.208 1319.3,232.652 1319.87,233.276 1320.44,233.083 1321.01,231.798 1321.58,229.542 1322.15,229.539 1322.71,229.746 1323.28,224.585 1323.85,226.074 1324.42,226.153 1324.99,225.5 1325.56,223.873 1326.12,223.267 1326.69,221.894 1327.26,223.677 1327.83,225.069 1328.4,224.254 1328.97,224.644 1329.53,226.017 1330.1,225.342 1330.67,226.051 1331.24,225.393 1331.81,225.86 1332.38,227.23 1332.94,226.644 1333.51,227.192 1334.08,227.48 1334.65,225.649 1335.22,226.216 1335.79,225.435 1336.36,226.927 1336.92,227.172 1337.49,228.351 1338.06,229.314 1338.63,233.531 1339.2,233.341 1339.77,234.156 1340.33,233.072 1340.9,233.073 1341.47,232.866 1342.04,232.802 1342.61,233.725 1343.18,232.581 1343.74,233.52 1344.31,232.463 1344.88,232.475 1345.45,230.299 1346.02,233.098 1346.59,233.972 1347.15,236.771 1347.72,233.329 1348.29,233.28 1348.86,233.145 1349.43,234.158 1350,236.022 1350.56,236.817 1351.13,235.622 1351.7,234.262 1352.27,236.952 1352.84,234.541 1353.41,234.257 1353.97,231.949 1354.54,232.96 1355.11,232.687 1355.68,232.651 1356.25,232.507 1356.82,231.372 1357.38,232.348 1357.95,231.031 1358.52,232.081 1359.09,231.894 1359.66,230.697 1360.23,230.566 1360.79,228.115 1361.36,227.197 1361.93,226.522 1362.5,229.025 1363.07,230.379 1363.64,227.043 1364.2,227.201 1364.77,226.5 1365.34,227.859 1365.91,231.098 1366.48,231.146 1367.05,231.095 1367.61,229.804 1368.18,229.895 1368.75,229.985 1369.32,229.13 1369.89,230.216 1370.46,230.007 1371.02,232.124 1371.59,231.015 1372.16,233.06 1372.73,232.05 1373.3,231.945 1373.87,229.861 1374.43,230.85 1375,231.93 1375.57,230.922 1376.14,229.731 1376.71,231.962 1377.28,231.751 1377.84,231.686 1378.41,230.575 1378.98,233.711 1379.55,233.26 1380.12,231.925 1380.69,232.61 1381.25,231.342 1381.82,231.139 1382.39,230.14 1382.96,230.099 1383.53,228.055 1384.1,227.121 1384.66,226.146 1385.23,227.665 1385.8,230.829 1386.37,230.688 1386.94,231.753 1387.51,232.831 1388.07,231.971 1388.64,234.091 1389.21,233.024 1389.78,230.956 1390.35,231.115 1390.92,226.909 1391.48,228.085 1392.05,227.346 1392.62,227.72 1393.19,227.221 1393.76,225.429 1394.33,228.765 1394.89,229.808 1395.46,229.757 1396.03,228.777 1396.6,228.839 1397.17,228.038 1397.74,228.016 1398.3,229.392 1398.87,230.301 1399.44,229.511 1400.01,226.497 1400.58,226.723 1401.15,226.984 1401.71,228.39 1402.28,229.554 1402.85,228.53 1403.42,228.603 1403.99,226.751 1404.56,225.543 1405.13,224.603 1405.69,226.986 1406.26,226.36 1406.83,225.7 1407.4,227.19 1407.97,228.373 1408.54,229.764 1409.1,229.726 1409.67,230.665 1410.24,231.791 1410.81,231.793 1411.38,231.711 1411.95,229.617 1412.51,228.742 1413.08,226.952 1413.65,228.326 1414.22,227.565 1414.79,228.883 1415.36,228.324 1415.92,229.672 1416.49,229.9 1417.06,230.954 1417.63,231.036 1418.2,230.283 1418.77,229.365 1419.33,230.653 1419.9,226.648 1420.47,224.825 1421.04,227.425 1421.61,227.741 1422.18,231.177 1422.74,232.27 1423.31,233.214 1423.88,233.15 1424.45,232.912 1425.02,234.768 1425.59,235.402 1426.15,236.029 1426.72,233.559 1427.29,233.32 1427.86,232.066 1428.43,229.712 1429,229.67 1429.56,229.944 1430.13,232.354 1430.7,231.304 1431.27,232.317 1431.84,234.279 1432.41,234.19 1432.97,234.011 1433.54,233.668 1434.11,233.529 1434.68,233.346 1435.25,233.205 1435.82,233.146 1436.38,234.004 1436.95,233.737 1437.52,233.785 1438.09,234.419 1438.66,233.157 1439.23,231.663 1439.79,232.614 1440.36,230.464 1440.93,229.529 1441.5,229.578 1442.07,227.514 1442.64,227.798 1443.2,229.225 1443.77,229.249 1444.34,231.438 1444.91,229.46 1445.48,230.686 1446.05,232.768 1446.61,233.662 1447.18,234.366 1447.75,235.458 1448.32,236.142 1448.89,234.705 1449.46,232.19 1450.02,232.047 1450.59,233.061 1451.16,231.757 1451.73,231.616 1452.3,230.345 1452.87,229.341 1453.43,230.397 1454,229.202 1454.57,229.239 1455.14,229.948 1455.71,231.034 1456.28,229.959 1456.84,228.84 1457.41,229.748 1457.98,227.583 1458.55,226.727 1459.12,226.877 1459.69,229.098 1460.25,230.148 1460.82,231.043 1461.39,232.148 1461.96,230.976 1462.53,232.988 1463.1,234.985 1463.66,234.316 1464.23,235.111 1464.8,235.64 1465.37,236.257 1465.94,234.799 1466.51,237.492 1467.07,236.958 1467.64,236.469 1468.21,231.869 1468.78,232.73 1469.35,234.612 1469.92,234.381 1470.48,233.94 1471.05,230.532 1471.62,230.426 1472.19,231.485 1472.76,229.364 1473.33,231.216 1473.89,231.279 1474.46,231.239 1475.03,231.071 1475.6,228.996 1476.17,228.864 1476.74,228.97 1477.31,230.04 1477.87,232.057 1478.44,231.793 1479.01,230.69 1479.58,229.389 1480.15,230.297 1480.72,229.246 1481.28,227.16 1481.85,227.381 1482.42,227.74 1482.99,227.992 1483.56,230.223 1484.13,230.072 1484.69,231.054 1485.26,233.11 1485.83,231.88 1486.4,232.661 1486.97,234.31 1487.54,233.719 1488.1,234.261 1488.67,233.936 1489.24,232.58 1489.81,233.282 1490.38,233.992 1490.95,231.563 1491.51,230.416 1492.08,229.035 1492.65,231.154 1493.22,231.961 1493.79,230.784 1494.36,228.599 1494.92,229.817 1495.49,228.673 1496.06,229.7 1496.63,230.598 1497.2,230.58 1497.77,229.585 1498.33,229.691 1498.9,229.749 1499.47,228.718 1500.04,228.578 1500.61,233.755 1501.18,232.428 1501.74,233.157 1502.31,231.676 1502.88,231.693 1503.45,231.548 1504.02,231.222 1504.59,230.13 1505.15,231.952 1505.72,229.584 1506.29,231.71 1506.86,233.507 1507.43,233.197 1508,233.102 1508.56,233.901 1509.13,234.662 1509.7,234.037 1510.27,232.505 1510.84,232.198 1511.41,231.843 1511.97,229.64 1512.54,228.769 1513.11,228.431 1513.68,227.417 1514.25,227.446 1514.82,227.698 1515.38,228.65 1515.95,228.618 1516.52,226.605 1517.09,225.609 1517.66,223.706 1518.23,226.18 1518.79,227.391 1519.36,226.439 1519.93,226.658 1520.5,226.833 1521.07,226.112 1521.64,226.327 1522.2,225.476 1522.77,225.675 1523.34,227.112 1523.91,226.252 1524.48,226.673 1525.05,226.966 1525.61,229.147 1526.18,227.386 1526.75,229.671 1527.32,229.587 1527.89,228.603 1528.46,226.558 1529.02,226.722 1529.59,226.942 1530.16,226.172 1530.73,227.252 1531.3,228.351 1531.87,229.638 1532.43,228.705 1533,230.781 1533.57,231.978 1534.14,231.772 1534.71,233.742 1535.28,233.342 1535.84,234.039 1536.41,234.739 1536.98,234.345 1537.55,233.048 1538.12,230.872 1538.69,229.865 1539.25,231.238 1539.82,230.895 1540.39,232.93 1540.96,231.789 1541.53,232.784 1542.1,232.478 1542.66,233.118 1543.23,231.921 1543.8,230.839 1544.37,231.645 1544.94,232.772 1545.51,230.627 1546.08,230.652 1546.64,230.601 1547.21,228.509 1547.78,227.457 1548.35,227.659 1548.92,227.888 1549.49,228.078 1550.05,229.233 1550.62,228.269 1551.19,228.398 1551.76,229.273 1552.33,230.442 1552.9,229.138 1553.46,228.237 1554.03,229.532 1554.6,228.564 1555.17,229.959 1555.74,229.835 1556.31,228.996 1556.87,229.053 1557.44,227.013 1558.01,227.324 1558.58,228.457 1559.15,226.919 1559.72,227.18 1560.28,227.511 1560.85,226.492 1561.42,226.897 1561.99,229.242 1562.56,227.47 1563.13,228.883 1563.69,227.013 1564.26,226.536 1564.83,227.859 1565.4,227.284 1565.97,227.546 1566.54,227.806 1567.1,228.14 1567.67,229.221 1568.24,229.548 1568.81,230.737 1569.38,227.778 1569.95,227.947 1570.51,227.051 1571.08,227.238 1571.65,231.644 1572.22,231.705 1572.79,231.812 1573.36,231.798 1573.92,231.749 1574.49,233.002 1575.06,230.889 1575.63,232.018 1576.2,232.066 1576.77,232.128 1577.33,232.329 1577.9,233.437 1578.47,231.197 1579.04,230.235 1579.61,230.203 1580.18,228.311 1580.74,228.284 1581.31,230.377 1581.88,231.303 1582.45,232.281 1583.02,232.067 1583.59,232.92 1584.15,232.646 1584.72,230.848 1585.29,232.735 1585.86,233.556 1586.43,232.289 1587,232.045 1587.56,231.175 1588.13,230.286 1588.7,229.406 1589.27,226.469 1589.84,226.738 1590.41,228.401 1590.97,229.64 1591.54,229.556 1592.11,227.526 1592.68,226.84 1593.25,227.191 1593.82,227.36 1594.38,228.612 1594.95,226.721 1595.52,229.1 1596.09,229.423 1596.66,228.366 1597.23,228.538 1597.79,226.572 1598.36,225.769 1598.93,226.116 1599.5,228.72 1600.07,229.759 1600.64,229.785 1601.2,228.984 1601.77,229.106 1602.34,230.33 1602.91,230.459 1603.48,232.734 1604.05,231.781 1604.61,233.012 1605.18,237.007 1605.75,237.56 1606.32,236.007 1606.89,237.588 1607.46,237.223 1608.02,236.657 1608.59,236.309 1609.16,234.989 1609.73,235.766 1610.3,230.496 1610.87,228.39 1611.43,227.545 1612,227.756 1612.57,226.009 1613.14,226.437 1613.71,224.922 1614.28,225.257 1614.84,225.47 1615.41,223.864 1615.98,223.377 1616.55,223.871 1617.12,223.34 1617.69,222.719 1618.26,223.235 1618.82,223.818 1619.39,223.189 1619.96,222.861 1620.53,223.545 1621.1,223.442 1621.67,223.998 1622.23,225.694 1622.8,225.188 1623.37,226.873 1623.94,226.185 1624.51,226.587 1625.08,227.928 1625.64,229.061 1626.21,230.241 1626.78,229.6 1627.35,228.747 1627.92,229.176 1628.49,231.477 1629.05,229.583 1629.62,229.846 1630.19,230.234 1630.76,230.489 1631.33,233.813 1631.9,234.973 1632.46,234.939 1633.03,234.701 1633.6,235.56 1634.17,236.482 1634.74,236.396 1635.31,234.174 1635.87,233.925 1636.44,235.59 1637.01,235.645 1637.58,238.879 1638.15,236.468 1638.72,235.229 1639.28,237.011 1639.85,238.844 1640.42,238.17 1640.99,239.635 1641.56,239.167 1642.13,238.726 1642.69,239.088 1643.26,238.479 1643.83,238.749 1644.4,239.238 1644.97,238.575 1645.54,236.885 1646.1,237.401 1646.67,236.748 1647.24,236.387 1647.81,235.989 1648.38,235.444 1648.95,234.027 1649.51,232.598 1650.08,231.245 1650.65,232.181 1651.22,232.696 1651.79,233.471 1652.36,234.25 1652.92,234.867 1653.49,233.615 1654.06,231.231 1654.63,232.239 1655.2,230.863 1655.77,230.837 1656.33,234.831 1656.9,235.313 1657.47,234.944 1658.04,231.488 1658.61,231.241 1659.18,230.286 1659.74,231.294 1660.31,232.074 1660.88,232.758 1661.45,233.471 1662.02,231.234 1662.59,231.948 1663.15,231.779 1663.72,234.735 1664.29,233.149 1664.86,232.846 1665.43,233.644 1666,231.986 1666.56,230.78 1667.13,229.822 1667.7,227.777 1668.27,228.852 1668.84,228.94 1669.41,228.689 1669.97,227.647 1670.54,226.622 1671.11,226.808 1671.68,226.003 1672.25,224.199 1672.82,223.559 1673.38,223.223 1673.95,222.58 1674.52,223.197 1675.09,224.424 1675.66,223.718 1676.23,224.137 1676.79,225.511 1677.36,227.062 1677.93,226.161 1678.5,225.262 1679.07,226.76 1679.64,227.09 1680.2,228.295 1680.77,230.686 1681.34,230.577 1681.91,230.405 1682.48,227.151 1683.05,228.634 1683.61,227.891 1684.18,226.175 1684.75,226.23 1685.32,226.583 1685.89,225.917 1686.46,226.489 1687.02,226.787 1687.59,226.999 1688.16,227.101 1688.73,228.309 1689.3,228.583 1689.87,225.648 1690.44,226.013 1691,227.64 1691.57,229.917 1692.14,228.983 1692.71,224.929 1693.28,226.539 1693.85,226.977 1694.41,227.371 1694.98,228.809 1695.55,229.161 1696.12,229.337 1696.69,229.472 1697.26,230.668 1697.82,230.597 1698.39,232.548 1698.96,233.566 1699.53,231.586 1700.1,230.749 1700.67,230.886 1701.23,232.169 1701.8,232.046 1702.37,231.042 1702.94,231.118 1703.51,234.584 1704.08,231.167 1704.64,233.258 1705.21,233.217 1705.78,233.043 1706.35,233.013 1706.92,233.726 1707.49,233.757 1708.05,235.786 1708.62,236.361 1709.19,234.955 1709.76,234.63 1710.33,233.463 1710.9,233.169 1711.46,234.092 1712.03,234.685 1712.6,233.503 1713.17,234.787 1713.74,234.504 1714.31,232.3 1714.87,230.184 1715.44,232.315 1716.01,233.294 1716.58,233.054 1717.15,232.796 1717.72,231.52 1718.28,231.386 1718.85,231.237 1719.42,232.273 1719.99,232.081 1720.56,229.038 1721.13,230.256 1721.69,229.245 1722.26,230.193 1722.83,230.032 1723.4,231.048 1723.97,228.957 1724.54,229.043 1725.1,229.01 1725.67,230.14 1726.24,229.97 1726.81,228.941 1727.38,227.977 1727.95,226.247 1728.51,227.706 1729.08,230.148 1729.65,230.347 1730.22,230.403 1730.79,231.367 1731.36,230.148 1731.92,230.043 1732.49,230.177 1733.06,230.208 1733.63,234.195 1734.2,233.579 1734.77,232.346 1735.33,233.005 1735.9,236.993 1736.47,237.405 1737.04,235.625 1737.61,235.167 1738.18,232.667 1738.74,231.505 1739.31,232.345 1739.88,234.193 1740.45,234.912 1741.02,234.517 1741.59,234.36 1742.15,233.971 1742.72,232.643 1743.29,231.467 1743.86,231.453 1744.43,230.506 1745,229.394 1745.56,229.306 1746.13,228.509 1746.7,230.753 1747.27,230.712 1747.84,231.587 1748.41,231.678 1748.97,232.614 1749.54,234.634 1750.11,234.364 1750.68,231.884 1751.25,231.774 1751.82,231.611 1752.38,231.175 1752.95,232.111 1753.52,231.028 1754.09,228.975 1754.66,228.763 1755.23,228.854 1755.79,229.961 1756.36,228.852 1756.93,230.192 1757.5,229.166 1758.07,229.566 1758.64,229.617 1759.21,229.671 1759.77,229.581 1760.34,229.59 1760.91,227.538 1761.48,226.729 1762.05,230.994 1762.62,231.959 1763.18,230.74 1763.75,230.815 1764.32,228.853 1764.89,227.93 1765.46,229.917 1766.03,230.014 1766.59,230.915 1767.16,231.734 1767.73,231.477 1768.3,231.191 1768.87,232.233 1769.44,233.114 1770,232.024 1770.57,232.701 1771.14,231.422 1771.71,231.359 1772.28,230.182 1772.85,229.002 1773.41,228.925 1773.98,229.81 1774.55,227.66 1775.12,228.816 1775.69,230.1 1776.26,230.069 1776.82,232.033 1777.39,231.905 1777.96,233.682 1778.53,233.25 1779.1,232.889 1779.67,231.554 1780.23,229.297 1780.8,229.307 1781.37,229.248 1781.94,229.113 1782.51,228.022 1783.08,227.976 1783.64,227.872 1784.21,226.95 1784.78,226.1 1785.35,227.467 1785.92,227.475 1786.49,228.62 1787.05,228.559 1787.62,229.737 1788.19,231.73 1788.76,231.621 1789.33,232.416 1789.9,233.259 1790.46,232.952 1791.03,232.711 1791.6,232.402 1792.17,233.254 1792.74,234.113 1793.31,233.927 1793.87,233.683 1794.44,232.663 1795.01,232.605 1795.58,233.239 1796.15,232.977 1796.72,232.753 1797.28,233.496 1797.85,232.063 1798.42,233.796 1798.99,230.304 1799.56,229.307 1800.13,230.391 1800.69,229.278 1801.26,227.439 1801.83,227.664 1802.4,228.808 1802.97,226.985 1803.54,225.886 1804.1,225.951 1804.67,225.268 1805.24,225.474 1805.81,226.719 1806.38,227.931 1806.95,229.119 1807.51,229.138 1808.08,229.073 1808.65,229.355 1809.22,229.494 1809.79,230.601 1810.36,231.537 1810.92,232.443 1811.49,234.378 1812.06,233.037 1812.63,233.226 1813.2,232.022 1813.77,230.703 1814.33,230.539 1814.9,229.559 1815.47,229.664 1816.04,228.837 1816.61,225.817 1817.18,225.29 1817.74,224.556 1818.31,224.043 1818.88,223.323 1819.45,223.062 1820.02,220.959 1820.59,223.677 1821.15,221.205 1821.72,219.895 1822.29,220.616 1822.86,221.482 1823.43,222.252 1824,221.846 1824.56,223.616 1825.13,224.106 1825.7,225.688 1826.27,225.157 1826.84,225.798 1827.41,225.213 1827.97,224.691 1828.54,227.264 1829.11,227.82 1829.68,229.238 1830.25,227.409 1830.82,226.791 1831.39,227.179 1831.95,229.477 1832.52,229.743 1833.09,230.926 1833.66,232.921 1834.23,233.692 1834.8,231.544 1835.36,232.512 1835.93,233.471 1836.5,234.316 1837.07,231.303 1837.64,233.252 1838.21,233.177 1838.77,235.033 1839.34,233.783 1839.91,233.565 1840.48,233.461 1841.05,235.61 1841.62,236.235 1842.18,235.968 1842.75,234.737 1843.32,233.694 1843.89,236.444 1844.46,235.021 1845.03,233.912 1845.59,232.723 1846.16,231.754 1846.73,233.794 1847.3,232.452 1847.87,233.425 1848.44,232.122 1849,230.943 1849.57,229.867 1850.14,229.868 1850.71,229.023 1851.28,228.355 1851.85,227.358 1852.41,228.711 1852.98,230.185 1853.55,232.232 1854.12,234.237 1854.69,235.058 1855.26,233.726 1855.82,234.623 1856.39,234.413 1856.96,232.145 1857.53,233.217 1858.1,235.202 1858.67,231.779 1859.23,231.692 1859.8,232.647 1860.37,231.479 1860.94,232.352 1861.51,229.223 1862.08,231.527 1862.64,231.649 1863.21,232.637 1863.78,233.394 1864.35,234.218 1864.92,233.679 1865.49,234.385 1866.05,231.958 1866.62,233.955 1867.19,233.707 1867.76,232.578 1868.33,232.281 1868.9,233.147 1869.46,232.953 1870.03,232.612 1870.6,231.408 1871.17,232.356 1871.74,231.151 1872.31,230.17 1872.87,229.003 1873.44,227.962 1874.01,226.911 1874.58,227.094 1875.15,227.218 1875.72,227.417 1876.28,227.599 1876.85,226.809 1877.42,228.203 1877.99,228.443 1878.56,228.384 1879.13,230.599 1879.69,228.486 1880.26,227.354 1880.83,228.519 1881.4,228.845 1881.97,229.958 1882.54,230.888 1883.1,229.838 1883.67,231.961 1884.24,234.787 1884.81,234.426 1885.38,234.016 1885.95,232.556 1886.51,235.564 1887.08,235.273 1887.65,234.101 1888.22,233.986 1888.79,233.805 1889.36,231.58 1889.92,230.413 1890.49,228.387 1891.06,229.52 1891.63,230.662 1892.2,231.524 1892.77,230.258 1893.33,230.385 1893.9,230.421 1894.47,230.156 1895.04,228.27 1895.61,229.346 1896.18,229.514 1896.74,229.502 1897.31,228.481 1897.88,229.732 1898.45,230.636 1899.02,232.511 1899.59,231.256 1900.16,231.292 1900.72,230.917 1901.29,229.563 1901.86,229.654 1902.43,230.358 1903,229.151 1903.57,229.359 1904.13,230.461 1904.7,231.458 1905.27,232.514 1905.84,232.519 1906.41,233.219 1906.98,231.849 1907.54,230.895 1908.11,231.824 1908.68,230.582 1909.25,230.837 1909.82,230.701 1910.39,230.553 1910.95,229.524 1911.52,230.441 1912.09,231.518 1912.66,231.506 1913.23,233.617 1913.8,232.4 1914.36,232.296 1914.93,232.361 1915.5,230.198 1916.07,226.947 1916.64,226.072 1917.21,227.234 1917.77,227.333 1918.34,228.556 1918.91,225.556 1919.48,222.895 1920.05,222.291 1920.62,223.658 1921.18,224.993 1921.75,223.451 1922.32,224.89 1922.89,224.193 1923.46,223.794 1924.03,225.458 1924.59,225.854 1925.16,226.053 1925.73,226.454 1926.3,224.753 1926.87,225.11 1927.44,225.426 1928,225.901 1928.57,224.131 1929.14,225.663 1929.71,228.151 1930.28,226.193 1930.85,225.714 1931.41,228.039 1931.98,226.171 1932.55,227.834 1933.12,225.092 1933.69,225.4 1934.26,226.877 1934.82,229.122 1935.39,228.521 1935.96,228.776 1936.53,225.949 1937.1,227.359 1937.67,227.737 1938.23,230.148 1938.8,229.175 1939.37,230.589 1939.94,229.584 1940.51,229.951 1941.08,228.999 1941.64,231.217 1942.21,231.215 1942.78,231.323 1943.35,231.346 1943.92,231.444 1944.49,234.684 1945.05,234.485 1945.62,237.221 1946.19,236.843 1946.76,235.798 1947.33,237.425 1947.9,238.071 1948.46,238.545 1949.03,236.085 1949.6,235.988 1950.17,237.615 1950.74,237.267 1951.31,236.082 1951.87,233.63 1952.44,233.413 1953.01,235.541 1953.58,235.496 1954.15,234.029 1954.72,233.983 1955.28,233.862 1955.85,236.621 1956.42,236.306 1956.99,233.844 1957.56,236.618 1958.13,233.139 1958.69,230.717 1959.26,232.784 1959.83,232.64 1960.4,234.364 1960.97,234.14 1961.54,233.841 1962.1,232.746 1962.67,233.486 1963.24,234.203 1963.81,234.78 1964.38,235.4 1964.95,235.092 1965.51,234.815 1966.08,234.476 1966.65,233.15 1967.22,232.863 1967.79,229.48 1968.36,228.56 1968.92,226.494 1969.49,226.609 1970.06,226.913 1970.63,228.307 1971.2,228.254 1971.77,229.449 1972.34,228.274 1972.9,227.156 1973.47,229.377 1974.04,230.654 1974.61,227.565 1975.18,227.849 1975.75,229.036 1976.31,232.266 1976.88,229.949 1977.45,233.294 1978.02,232.243 1978.59,232.122 1979.16,233.141 1979.72,232.778 1980.29,233.607 1980.86,233.374 1981.43,233.184 1982,232.911 1982.57,233.818 1983.13,232.736 1983.7,232.493 1984.27,233.362 1984.84,233.024 1985.41,232.919 1985.98,233.732 1986.54,233.385 1987.11,233.079 1987.68,232.872 1988.25,231.463 1988.82,229.26 1989.39,229.259 1989.95,230.164 1990.52,229.283 1991.09,230.091 1991.66,232.077 1992.23,231.867 1992.8,230.922 1993.36,229.687 1993.93,229.528 1994.5,229.529 1995.07,233.763 1995.64,231.537 1996.21,233.391 1996.77,231.995 1997.34,231.744 1997.91,232.307 1998.48,231.956 1999.05,231.732 1999.62,230.615 2000.18,229.521 2000.75,229.66 2001.32,230.675 2001.89,229.513 2002.46,229.452 2003.03,227.525 2003.59,227.637 2004.16,226.867 2004.73,228.91 2005.3,224.963 2005.87,224.053 2006.44,225.565 2007,225.742 2007.57,226.051 2008.14,227.533 2008.71,230.75 2009.28,231.647 2009.85,231.541 2010.41,232.72 2010.98,232.582 2011.55,232.437 2012.12,233.372 2012.69,233.063 2013.26,230.848 2013.82,228.817 2014.39,229.871 2014.96,229.803 2015.53,230.776 2016.1,230.646 2016.67,232.741 2017.23,233.507 2017.8,233.15 2018.37,232.794 2018.94,229.532 2019.51,229.506 2020.08,229.549 2020.64,230.603 2021.21,230.618 2021.78,231.721 2022.35,233.612 2022.92,232.149 2023.49,234.047 2024.05,233.864 2024.62,232.674 2025.19,231.395 2025.76,231.306 2026.33,229.063 2026.9,231.261 2027.46,230.016 2028.03,229.964 2028.6,231.016 2029.17,227.756 2029.74,227.93 2030.31,228.223 2030.87,228.451 2031.44,229.598 2032.01,230.794 2032.58,227.661 2033.15,226.765 2033.72,225.921 2034.28,225.162 2034.85,224.368 2035.42,224.779 2035.99,224.064 2036.56,225.384 2037.13,225.546 2037.69,228.098 2038.26,228.237 2038.83,227.308 2039.4,228.542 2039.97,230.754 2040.54,232.728 2041.11,233.434 2041.67,232.102 2042.24,231.923 2042.81,232.759 2043.38,231.452 2043.95,231.218 2044.52,230.163 2045.08,230.143 2045.65,229.214 2046.22,230.416 2046.79,229.448 2047.36,229.547 2047.93,227.392 2048.49,228.562 2049.06,230.819 2049.63,231.682 2050.2,232.599 2050.77,230.442 2051.34,229.414 2051.9,229.565 2052.47,228.609 2053.04,228.658 2053.61,230.983 2054.18,231.876 2054.75,233.822 2055.31,234.513 2055.88,234.337 2056.45,234.096 2057.02,232.829 2057.59,233.737 2058.16,230.525 2058.72,229.534 2059.29,230.398 2059.86,228.432 2060.43,230.823 2061,230.991 2061.57,233.036 2062.13,232.689 2062.7,231.687 2063.27,229.468 2063.84,228.48 2064.41,228.586 2064.98,230.804 2065.54,230.711 2066.11,230.615 2066.68,230.477 2067.25,231.43 2067.82,230.224 2068.39,231.108 2068.95,231.033 2069.52,231.892 2070.09,230.543 2070.66,230.48 2071.23,230.321 2071.8,230.325 2072.36,230.304 2072.93,232.32 2073.5,229.978 2074.07,230.028 2074.64,230.851 2075.21,230.63 2075.77,227.515 2076.34,227.556 2076.91,228.735 2077.48,229.018 2078.05,229.039 2078.62,230.193 2079.18,229.154 2079.75,231.273 2080.32,231.059 2080.89,231.715 2081.46,232.514 2082.03,233.404 2082.59,234.059 2083.16,231.831 2083.73,230.721 2084.3,232.634 2084.87,232.405 2085.44,232.282 2086,234.948 2086.57,231.446 2087.14,232.499 2087.71,231.361 2088.28,228.182 2088.85,226.102 2089.41,226.303 2089.98,227.477 2090.55,229.008 2091.12,228.19 2091.69,228.3 2092.26,229.512 2092.82,228.702 2093.39,230.849 2093.96,232.066 2094.53,231.868 2095.1,231.696 2095.67,231.569 2096.23,232.479 2096.8,231.187 2097.37,229.996 2097.94,229.847 2098.51,229.991 2099.08,231.12 2099.64,230.959 2100.21,233.245 2100.78,233 2101.35,231.686 2101.92,232.548 2102.49,232.252 2103.05,232.191 2103.62,232.19 2104.19,232.085 2104.76,230.863 2105.33,229.727 2105.9,227.347 2106.46,227.607 2107.03,227.794 2107.6,227.809 2108.17,229.985 2108.74,228.944 2109.31,227.119 2109.87,228.456 2110.44,228.304 2111.01,226.326 2111.58,227.562 2112.15,225.554 2112.72,229.085 2113.29,228.19 2113.85,229.346 2114.42,230.6 2114.99,231.43 2115.56,231.288 2116.13,231.178 2116.7,230.033 2117.26,231.181 2117.83,232.105 2118.4,231.883 2118.97,231.387 2119.54,230.434 2120.11,231.487 2120.67,231.246 2121.24,231.349 2121.81,230.325 2122.38,229.181 2122.95,230.195 2123.52,230.315 2124.08,230.199 2124.65,229.035 2125.22,228.992 2125.79,227.868 2126.36,226.053 2126.93,228.591 2127.49,228.685 2128.06,228.079 2128.63,227.261 2129.2,228.316 2129.77,228.541 2130.34,229.594 2130.9,230.551 2131.47,230.487 2132.04,230.502 2132.61,230.34 2133.18,232.307 2133.75,232.287 2134.31,230.995 2134.88,230.929 2135.45,231.9 2136.02,230.844 2136.59,231.082 2137.16,232.868 2137.72,231.658 2138.29,231.516 2138.86,232.58 2139.43,231.436 2140,229.265 2140.57,228.257 2141.13,229.375 2141.7,227.321 2142.27,228.582 2142.84,228.55 2143.41,231.714 2143.98,231.557 2144.54,230.508 2145.11,230.422 2145.68,228.908 2146.25,229.079 2146.82,229.36 2147.39,230.527 2147.95,230.626 2148.52,232.582 2149.09,233.575 2149.66,233.137 2150.23,237.016 2150.8,235.792 2151.36,235.467 2151.93,232.784 2152.5,230.574 2153.07,230.52 2153.64,231.415 2154.21,230.358 2154.77,230.363 2155.34,230.251 2155.91,228.261 2156.48,227.415 2157.05,226.704 2157.62,226.921 2158.18,227.034 2158.75,227.418 2159.32,227.323 2159.89,227.536 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.021\n  with uncertainty of ± 0.0018775319212103317\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01865 ± (0.00343616, 0.00326243) (MC)\n  95% confidence interval: [-4.02525, -4.01184]) (MC)\n  linear error propagation: -4.01796 ± 0.0033985\n  |δ_y| = |0.00251497| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018652530975263, val_l = 0.006602180924351941, val_u = 0.006815117078647681)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip900\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip901\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip902\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148 2211.02,1148 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,990.129 2211.02,990.129 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,832.262 2211.02,832.262 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,674.395 2211.02,674.395 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,516.528 2211.02,516.528 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,358.661 2211.02,358.661 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,200.793 2211.02,200.793 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148 365.751,1148 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,990.129 365.751,990.129 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,832.262 365.751,832.262 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,674.395 365.751,674.395 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,516.528 365.751,516.528 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,358.661 365.751,358.661 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,200.793 365.751,200.793 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M298.909 1133.8 Q295.298 1133.8 293.469 1137.36 Q291.664 1140.9 291.664 1148.03 Q291.664 1155.14 293.469 1158.7 Q295.298 1162.24 298.909 1162.24 Q302.543 1162.24 304.349 1158.7 Q306.177 1155.14 306.177 1148.03 Q306.177 1140.9 304.349 1137.36 Q302.543 1133.8 298.909 1133.8 M298.909 1130.09 Q304.719 1130.09 307.775 1134.7 Q310.853 1139.28 310.853 1148.03 Q310.853 1156.76 307.775 1161.36 Q304.719 1165.95 298.909 1165.95 Q293.099 1165.95 290.02 1161.36 Q286.964 1156.76 286.964 1148.03 Q286.964 1139.28 290.02 1134.7 Q293.099 1130.09 298.909 1130.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M259.557 1003.47 L267.196 1003.47 L267.196 977.108 L258.886 978.775 L258.886 974.516 L267.15 972.849 L271.826 972.849 L271.826 1003.47 L279.465 1003.47 L279.465 1007.41 L259.557 1007.41 L259.557 1003.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 975.928 Q295.298 975.928 293.469 979.493 Q291.664 983.034 291.664 990.164 Q291.664 997.27 293.469 1000.84 Q295.298 1004.38 298.909 1004.38 Q302.543 1004.38 304.349 1000.84 Q306.177 997.27 306.177 990.164 Q306.177 983.034 304.349 979.493 Q302.543 975.928 298.909 975.928 M298.909 972.224 Q304.719 972.224 307.775 976.831 Q310.853 981.414 310.853 990.164 Q310.853 998.891 307.775 1003.5 Q304.719 1008.08 298.909 1008.08 Q293.099 1008.08 290.02 1003.5 Q286.964 998.891 286.964 990.164 Q286.964 981.414 290.02 976.831 Q293.099 972.224 298.909 972.224 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M262.775 845.607 L279.094 845.607 L279.094 849.542 L257.15 849.542 L257.15 845.607 Q259.812 842.852 264.395 838.223 Q269.002 833.57 270.182 832.227 Q272.428 829.704 273.307 827.968 Q274.21 826.209 274.21 824.519 Q274.21 821.764 272.266 820.028 Q270.344 818.292 267.242 818.292 Q265.043 818.292 262.59 819.056 Q260.159 819.82 257.381 821.371 L257.381 816.649 Q260.205 815.514 262.659 814.936 Q265.113 814.357 267.15 814.357 Q272.52 814.357 275.715 817.042 Q278.909 819.727 278.909 824.218 Q278.909 826.348 278.099 828.269 Q277.312 830.167 275.205 832.76 Q274.627 833.431 271.525 836.649 Q268.423 839.843 262.775 845.607 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 818.061 Q295.298 818.061 293.469 821.625 Q291.664 825.167 291.664 832.297 Q291.664 839.403 293.469 842.968 Q295.298 846.51 298.909 846.51 Q302.543 846.51 304.349 842.968 Q306.177 839.403 306.177 832.297 Q306.177 825.167 304.349 821.625 Q302.543 818.061 298.909 818.061 M298.909 814.357 Q304.719 814.357 307.775 818.963 Q310.853 823.547 310.853 832.297 Q310.853 841.024 307.775 845.63 Q304.719 850.213 298.909 850.213 Q293.099 850.213 290.02 845.63 Q286.964 841.024 286.964 832.297 Q286.964 823.547 290.02 818.963 Q293.099 814.357 298.909 814.357 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M272.914 673.041 Q276.27 673.758 278.145 676.027 Q280.043 678.295 280.043 681.629 Q280.043 686.744 276.525 689.545 Q273.006 692.346 266.525 692.346 Q264.349 692.346 262.034 691.906 Q259.742 691.49 257.289 690.633 L257.289 686.119 Q259.233 687.254 261.548 687.832 Q263.863 688.411 266.386 688.411 Q270.784 688.411 273.076 686.675 Q275.39 684.939 275.39 681.629 Q275.39 678.573 273.238 676.86 Q271.108 675.124 267.289 675.124 L263.261 675.124 L263.261 671.281 L267.474 671.281 Q270.923 671.281 272.752 669.916 Q274.58 668.527 274.58 665.934 Q274.58 663.272 272.682 661.86 Q270.807 660.425 267.289 660.425 Q265.367 660.425 263.168 660.842 Q260.969 661.258 258.33 662.138 L258.33 657.971 Q260.992 657.231 263.307 656.86 Q265.645 656.49 267.705 656.49 Q273.029 656.49 276.131 658.92 Q279.233 661.328 279.233 665.448 Q279.233 668.318 277.59 670.309 Q275.946 672.277 272.914 673.041 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 660.194 Q295.298 660.194 293.469 663.758 Q291.664 667.3 291.664 674.43 Q291.664 681.536 293.469 685.101 Q295.298 688.642 298.909 688.642 Q302.543 688.642 304.349 685.101 Q306.177 681.536 306.177 674.43 Q306.177 667.3 304.349 663.758 Q302.543 660.194 298.909 660.194 M298.909 656.49 Q304.719 656.49 307.775 661.096 Q310.853 665.68 310.853 674.43 Q310.853 683.156 307.775 687.763 Q304.719 692.346 298.909 692.346 Q293.099 692.346 290.02 687.763 Q286.964 683.156 286.964 674.43 Q286.964 665.68 290.02 661.096 Q293.099 656.49 298.909 656.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M271.594 503.322 L259.789 521.771 L271.594 521.771 L271.594 503.322 M270.367 499.248 L276.247 499.248 L276.247 521.771 L281.177 521.771 L281.177 525.66 L276.247 525.66 L276.247 533.808 L271.594 533.808 L271.594 525.66 L255.992 525.66 L255.992 521.146 L270.367 499.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 502.326 Q295.298 502.326 293.469 505.891 Q291.664 509.433 291.664 516.562 Q291.664 523.669 293.469 527.234 Q295.298 530.775 298.909 530.775 Q302.543 530.775 304.349 527.234 Q306.177 523.669 306.177 516.562 Q306.177 509.433 304.349 505.891 Q302.543 502.326 298.909 502.326 M298.909 498.623 Q304.719 498.623 307.775 503.229 Q310.853 507.812 310.853 516.562 Q310.853 525.289 307.775 529.896 Q304.719 534.479 298.909 534.479 Q293.099 534.479 290.02 529.896 Q286.964 525.289 286.964 516.562 Q286.964 507.812 290.02 503.229 Q293.099 498.623 298.909 498.623 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M258.793 341.381 L277.15 341.381 L277.15 345.316 L263.076 345.316 L263.076 353.788 Q264.094 353.441 265.113 353.279 Q266.131 353.093 267.15 353.093 Q272.937 353.093 276.316 356.265 Q279.696 359.436 279.696 364.853 Q279.696 370.431 276.224 373.533 Q272.752 376.612 266.432 376.612 Q264.256 376.612 261.988 376.241 Q259.742 375.871 257.335 375.13 L257.335 370.431 Q259.418 371.566 261.641 372.121 Q263.863 372.677 266.34 372.677 Q270.344 372.677 272.682 370.57 Q275.02 368.464 275.02 364.853 Q275.02 361.242 272.682 359.135 Q270.344 357.029 266.34 357.029 Q264.465 357.029 262.59 357.445 Q260.738 357.862 258.793 358.742 L258.793 341.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 344.459 Q295.298 344.459 293.469 348.024 Q291.664 351.566 291.664 358.695 Q291.664 365.802 293.469 369.366 Q295.298 372.908 298.909 372.908 Q302.543 372.908 304.349 369.366 Q306.177 365.802 306.177 358.695 Q306.177 351.566 304.349 348.024 Q302.543 344.459 298.909 344.459 M298.909 340.756 Q304.719 340.756 307.775 345.362 Q310.853 349.945 310.853 358.695 Q310.853 367.422 307.775 372.028 Q304.719 376.612 298.909 376.612 Q293.099 376.612 290.02 372.028 Q286.964 367.422 286.964 358.695 Q286.964 349.945 290.02 345.362 Q293.099 340.756 298.909 340.756 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M269.326 198.93 Q266.178 198.93 264.326 201.083 Q262.497 203.235 262.497 206.985 Q262.497 210.712 264.326 212.888 Q266.178 215.041 269.326 215.041 Q272.474 215.041 274.303 212.888 Q276.154 210.712 276.154 206.985 Q276.154 203.235 274.303 201.083 Q272.474 198.93 269.326 198.93 M278.608 184.277 L278.608 188.536 Q276.849 187.703 275.043 187.263 Q273.261 186.824 271.502 186.824 Q266.872 186.824 264.418 189.948 Q261.988 193.073 261.641 199.393 Q263.006 197.379 265.066 196.314 Q267.127 195.226 269.603 195.226 Q274.812 195.226 277.821 198.398 Q280.853 201.546 280.853 206.985 Q280.853 212.309 277.705 215.527 Q274.557 218.745 269.326 218.745 Q263.33 218.745 260.159 214.161 Q256.988 209.555 256.988 200.828 Q256.988 192.634 260.877 187.773 Q264.766 182.888 271.316 182.888 Q273.076 182.888 274.858 183.236 Q276.664 183.583 278.608 184.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M298.909 186.592 Q295.298 186.592 293.469 190.157 Q291.664 193.698 291.664 200.828 Q291.664 207.935 293.469 211.499 Q295.298 215.041 298.909 215.041 Q302.543 215.041 304.349 211.499 Q306.177 207.935 306.177 200.828 Q306.177 193.698 304.349 190.157 Q302.543 186.592 298.909 186.592 M298.909 182.888 Q304.719 182.888 307.775 187.495 Q310.853 192.078 310.853 200.828 Q310.853 209.555 307.775 214.161 Q304.719 218.745 298.909 218.745 Q293.099 218.745 290.02 214.161 Q286.964 209.555 286.964 200.828 Q286.964 192.078 290.02 187.495 Q293.099 182.888 298.909 182.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1031.68 400.199,924.812 400.786,826.761 401.372,736.93 401.958,654.771 402.545,579.78 403.131,511.486 403.718,449.453 404.304,393.275 404.891,342.573 405.477,296.993 406.063,256.204 406.65,219.895 407.236,265.327 407.823,369.854 408.409,336.436 408.995,307.794 409.582,281.756 410.168,259.076 410.755,288.339 411.341,313.627 411.927,296.458 412.514,319.826 413.1,341.963 413.687,330.574 414.273,320.777 414.86,313.069 415.446,307.736 416.032,329.861 416.619,350.014 417.205,346.642 417.792,407.824 418.378,405.669 418.964,405.18 419.551,423.585 420.137,441.743 420.724,443.314 421.31,445.687 421.896,450.68 422.483,455.128 423.069,472.549 423.656,478.554 424.242,485.421 424.829,503.725 425.415,530.925 426.001,556.786 426.588,561.991 427.174,577.156 427.761,592.157 428.347,607.25 428.933,614.694 429.52,629.618 430.106,637.914 430.693,651.723 431.279,660.297 431.865,686.215 432.452,705.14 433.038,712.498 433.625,730.582 434.211,742.327 434.798,754.05 435.384,766.037 435.97,781.812 436.557,797.4 437.143,812.031 437.73,825.498 438.316,838.984 438.902,848.71 439.489,853.878 440.075,863.391 440.662,868.735 441.248,878.235 441.835,884.242 442.421,900.196 443.007,905.992 443.594,911.277 444.18,917.048 444.767,925.849 445.353,931.996 445.939,943.429 446.526,951.828 447.112,957.294 447.699,968.254 448.285,975.863 448.871,986.027 449.458,998.412 450.044,1002.71 450.631,1012.08 451.217,1018.82 451.804,1027.87 452.39,1034.34 452.976,1044.94 453.563,1051.26 454.149,1057.04 454.736,1067.01 455.322,1074.47 455.908,1077.46 456.495,1082.33 457.081,1089.45 457.668,1092.61 458.254,1097.56 458.84,1100.25 459.427,1105.01 460.013,1105.42 460.6,1112.21 461.186,1118.68 461.773,1122.98 462.359,1129.03 462.945,1132.86 463.532,1135.25 464.118,1140.68 464.705,1142.74 465.291,1146.3 465.877,1148.02 466.464,1151.6 467.05,1153.29 467.637,1158.34 468.223,1165.12 468.809,1164.76 469.396,1171.23 469.982,1173.91 470.569,1176.44 471.155,1179.15 471.742,1183.65 472.328,1186.18 472.914,1190.33 473.501,1195.6 474.087,1197.7 474.674,1197.99 475.26,1196.85 475.846,1198.82 476.433,1199.41 477.019,1200.2 477.606,1200.84 478.192,1201.56 478.778,1205.15 479.365,1207.05 479.951,1208.98 480.538,1213.62 481.124,1215.1 481.711,1221.08 482.297,1222.23 482.883,1219.19 483.47,1224.7 484.056,1224.43 484.643,1226.86 485.229,1225.09 485.815,1225.2 486.402,1226.66 486.988,1226.38 487.575,1224.81 488.161,1224.73 488.748,1227.49 489.334,1227.24 489.92,1228.44 490.507,1235.08 491.093,1237.15 491.68,1238.11 492.266,1237.6 492.852,1235.61 493.439,1238.09 494.025,1239.22 494.612,1241.73 495.198,1242.25 495.784,1248.36 496.371,1248.52 496.957,1250.38 497.544,1250.53 498.13,1247.86 498.717,1246.92 499.303,1248.41 499.889,1248.8 500.476,1247.7 501.062,1246.51 501.649,1249.65 502.235,1249.81 502.821,1250 503.408,1249.99 503.994,1250.24 504.581,1247.72 505.167,1246.68 505.753,1248.37 506.34,1246.01 506.926,1247.92 507.513,1247.12 508.099,1245 508.686,1246.67 509.272,1248.66 509.858,1247.68 510.445,1246.75 511.031,1248.75 511.618,1247.68 512.204,1245.22 512.79,1244.45 513.377,1242.33 513.963,1246.87 514.55,1244.76 515.136,1245.34 515.722,1244.85 516.309,1245.18 516.895,1244.56 517.482,1242.22 518.068,1243.92 518.655,1244.57 519.241,1243.88 519.827,1241.73 520.414,1241.12 521,1242.09 521.587,1241.76 522.173,1240.02 522.759,1240.88 523.346,1240.1 523.932,1238.41 524.519,1236.78 525.105,1233.66 525.691,1237.45 526.278,1237.08 526.864,1236.47 527.451,1235.99 528.037,1237.18 528.624,1236.8 529.21,1236.54 529.796,1236.13 530.383,1238.63 530.969,1235.49 531.556,1239.35 532.142,1239.18 532.728,1241.2 533.315,1241.89 533.901,1242.37 534.488,1242.62 535.074,1243.27 535.661,1242.29 536.247,1243.17 536.833,1244.96 537.42,1244.34 538.006,1243.62 538.593,1242.9 539.179,1244.83 539.765,1241.68 540.352,1242.3 540.938,1245.56 541.525,1241.83 542.111,1240.98 542.697,1236.28 543.284,1234.29 543.87,1233.88 544.457,1230.68 545.043,1229.12 545.63,1228.91 546.216,1230.35 546.802,1232.79 547.389,1228.83 547.975,1226.28 548.562,1226.69 549.148,1226.89 549.734,1226.93 550.321,1227.11 550.907,1227.25 551.494,1226.18 552.08,1226.64 552.666,1229.28 553.253,1233.12 553.839,1230.13 554.426,1232.57 555.012,1237.44 555.599,1234.32 556.185,1234.08 556.771,1233.61 557.358,1233.39 557.944,1233.11 558.531,1233.84 559.117,1232.25 559.703,1230.86 560.29,1229.36 560.876,1235.79 561.463,1236.61 562.049,1235.04 562.635,1230.84 563.222,1232.14 563.808,1231.78 564.395,1232.66 564.981,1232.43 565.568,1233.51 566.154,1234.58 566.74,1234.06 567.327,1234.95 567.913,1236.95 568.5,1236.42 569.086,1235.97 569.672,1234.05 570.259,1234.73 570.845,1230.11 571.432,1229.63 572.018,1228.21 572.605,1228.33 573.191,1225.4 573.777,1225.26 574.364,1226.55 574.95,1227.79 575.537,1229.01 576.123,1233.86 576.709,1233.19 577.296,1232.58 577.882,1230.73 578.469,1230.26 579.055,1232.68 579.641,1232.34 580.228,1230.84 580.814,1230.37 581.401,1228.4 581.987,1228.22 582.574,1225.3 583.16,1225.32 583.746,1223.93 584.333,1223.74 584.919,1223.73 585.506,1223.83 586.092,1223.96 586.678,1225.54 587.265,1226.74 587.851,1230.41 588.438,1231.37 589.024,1232.24 589.61,1229.32 590.197,1230.36 590.783,1230.14 591.37,1229.74 591.956,1229.35 592.543,1231.57 593.129,1232.44 593.715,1232.14 594.302,1235.55 594.888,1234.78 595.475,1235.31 596.061,1233.43 596.647,1231.66 597.234,1232.57 597.82,1233.26 598.407,1230.92 598.993,1232.01 599.579,1231.58 600.166,1231.16 600.752,1229.59 601.339,1230.56 601.925,1231.11 602.512,1232.04 603.098,1232.78 603.684,1233.5 604.271,1236.6 604.857,1233.4 605.444,1232.58 606.03,1231.99 606.616,1231.38 607.203,1229.69 607.789,1230.55 608.376,1230.08 608.962,1232.25 609.548,1231.79 610.135,1230.06 610.721,1228.23 611.308,1225.19 611.894,1227.42 612.481,1228.38 613.067,1229.24 613.653,1228.99 614.24,1229.95 614.826,1232.22 615.413,1231.79 615.999,1230.09 616.585,1229.68 617.172,1227.72 617.758,1229.84 618.345,1229.3 618.931,1230.23 619.518,1229.76 620.104,1225.54 620.69,1225.3 621.277,1224.78 621.863,1224.69 622.45,1223.54 623.036,1224.52 623.622,1221.92 624.209,1219.18 624.795,1218.08 625.382,1217.21 625.968,1217.54 626.554,1217.72 627.141,1219.07 627.727,1219.06 628.314,1220.6 628.9,1221.81 629.487,1222.77 630.073,1222.56 630.659,1221.26 631.246,1221.54 631.832,1217.64 632.419,1221.47 633.005,1221.12 633.591,1221.27 634.178,1219.97 634.764,1221.09 635.351,1220.96 635.937,1219.66 636.523,1218.54 637.11,1218.76 637.696,1219.05 638.283,1221.47 638.869,1225.21 639.456,1223.44 640.042,1220.37 640.628,1220.14 641.215,1224.02 641.801,1225.28 642.388,1223.81 642.974,1226.15 643.56,1225.85 644.147,1228.18 644.733,1229.23 645.32,1228.87 645.906,1227.17 646.492,1227.92 647.079,1229.98 647.665,1231.92 648.252,1232.38 648.838,1231.76 649.425,1232.08 650.011,1232.71 650.597,1229.27 651.184,1228.83 651.77,1228.36 652.357,1227.94 652.943,1227.35 653.529,1228.14 654.116,1228.95 654.702,1228.53 655.289,1226.35 655.875,1227.12 656.462,1225.17 657.048,1226.09 657.634,1225.63 658.221,1222.65 658.807,1222.43 659.394,1222.22 659.98,1220.65 660.566,1221.64 661.153,1221.47 661.739,1222.59 662.326,1225.11 662.912,1224.81 663.498,1224.55 664.085,1224.26 664.671,1221.48 665.258,1218.57 665.844,1213.12 666.431,1213.39 667.017,1216.57 667.603,1216.67 668.19,1216.53 668.776,1216.63 669.363,1215.31 669.949,1211.56 670.535,1210.59 671.122,1212.34 671.708,1216.39 672.295,1212.71 672.881,1214.23 673.467,1214.35 674.054,1215.74 674.64,1217.48 675.227,1216.36 675.813,1216.52 676.4,1216.4 676.986,1217.73 677.572,1220.05 678.159,1218.57 678.745,1217.19 679.332,1216 679.918,1217.31 680.504,1219.86 681.091,1218.39 681.677,1219.58 682.264,1220.75 682.85,1220.4 683.436,1221.61 684.023,1219.07 684.609,1219.2 685.196,1219.04 685.782,1218.9 686.369,1218.5 686.955,1217.27 687.541,1219.91 688.128,1219.85 688.714,1223.35 689.301,1222.91 689.887,1222.57 690.473,1223.23 691.06,1221.82 691.646,1220.4 692.233,1218.98 692.819,1219.01 693.405,1219.04 693.992,1220.18 694.578,1223.96 695.165,1223.42 695.751,1223.16 696.338,1222.59 696.924,1222.56 697.51,1222.18 698.097,1223.24 698.683,1223.05 699.27,1227.87 699.856,1229.78 700.442,1228.08 701.029,1229 701.615,1228.74 702.202,1228.43 702.788,1226.47 703.375,1224.77 703.961,1224.33 704.547,1223.99 705.134,1223.95 705.72,1222.16 706.307,1221.99 706.893,1220.49 707.479,1220.31 708.066,1220.26 708.652,1221.3 709.239,1221.17 709.825,1220.96 710.411,1216.64 710.998,1216.91 711.584,1217.01 712.171,1217.24 712.757,1215.98 713.344,1215.97 713.93,1213.48 714.516,1214.92 715.103,1215.03 715.689,1216.5 716.276,1214.05 716.862,1210.23 717.448,1209.48 718.035,1211.2 718.621,1212.51 719.208,1215.51 719.794,1212.99 720.38,1214.52 720.967,1214.48 721.553,1214.77 722.14,1214.77 722.726,1216.2 723.313,1215.16 723.899,1215.34 724.485,1215.31 725.072,1214.16 725.658,1215.52 726.245,1215.65 726.831,1215.76 727.417,1215.69 728.004,1216.89 728.59,1214.18 729.177,1216.88 729.763,1219.38 730.349,1216.92 730.936,1218.38 731.522,1217.09 732.109,1219.57 732.695,1219.68 733.282,1219.46 733.868,1220.4 734.454,1218.72 735.041,1218.31 735.627,1218.17 736.214,1217.96 736.8,1217.65 737.386,1213.52 737.973,1212.79 738.559,1214.15 739.146,1214.32 739.732,1220.86 740.318,1224.51 740.905,1226.66 741.491,1224.82 742.078,1222.97 742.664,1221.37 743.251,1222.23 743.837,1222.97 744.423,1220.95 745.01,1219.32 745.596,1218.84 746.183,1219.95 746.769,1217.26 747.355,1214.67 747.942,1210.88 748.528,1211.09 749.115,1211.4 749.701,1214.23 750.288,1214.22 750.874,1213.22 751.46,1214.73 752.047,1215.14 752.633,1215.18 753.22,1213.86 753.806,1212.55 754.392,1214.12 754.979,1215.33 755.565,1215.22 756.152,1219.18 756.738,1218.84 757.324,1218.92 757.911,1218.77 758.497,1219.96 759.084,1219.62 759.67,1219.39 760.257,1219.24 760.843,1219.16 761.429,1220.28 762.016,1218.75 762.602,1217.31 763.189,1219.76 763.775,1223.49 764.361,1223.24 764.948,1225.23 765.534,1224.63 766.121,1225.12 766.707,1225.74 767.293,1222.77 767.88,1221.06 768.466,1220.82 769.053,1218.93 769.639,1215.96 770.226,1217.19 770.812,1219.73 771.398,1219.48 771.985,1217.71 772.571,1217.44 773.158,1217.23 773.744,1217.02 774.33,1215.67 774.917,1215.82 775.503,1215.42 776.09,1215.09 776.676,1212.59 777.262,1211.4 777.849,1210.41 778.435,1209.41 779.022,1208.44 779.608,1206.34 780.195,1206.98 780.781,1206.01 781.367,1206.24 781.954,1205.22 782.54,1205.75 783.127,1208.65 783.713,1210.45 784.299,1209.69 784.886,1208.78 785.472,1207.88 786.059,1208.13 786.645,1209.98 787.232,1208.8 787.818,1209.14 788.404,1210.84 788.991,1212.42 789.577,1212.52 790.164,1211.18 790.75,1211.57 791.336,1213.27 791.923,1215.94 792.509,1214.64 793.096,1216.04 793.682,1216.05 794.268,1215.63 794.855,1216.86 795.441,1216.68 796.028,1215.3 796.614,1214.01 797.201,1217.72 797.787,1221.17 798.373,1223.48 798.96,1222.93 799.546,1223.6 800.133,1223.25 800.719,1226.65 801.305,1225.95 801.892,1225.34 802.478,1223.5 803.065,1224.5 803.651,1224 804.237,1223.45 804.824,1224.31 805.41,1222.62 805.997,1223.56 806.583,1223.18 807.17,1222.61 807.756,1223.28 808.342,1224.1 808.929,1224.68 809.515,1222.85 810.102,1223.4 810.688,1221.36 811.274,1222.62 811.861,1219.59 812.447,1220.56 813.034,1218.57 813.62,1218.24 814.206,1215.51 814.793,1216.91 815.379,1212.85 815.966,1215.52 816.552,1214.31 817.139,1213.07 817.725,1211.74 818.311,1213.46 818.898,1217.31 819.484,1217.11 820.071,1216.78 820.657,1217.74 821.243,1220.17 821.83,1217.05 822.416,1219.66 823.003,1218.19 823.589,1215.61 824.175,1216.82 824.762,1217.97 825.348,1217.71 825.935,1217.58 826.521,1216.22 827.108,1216.08 827.694,1215.87 828.28,1216.93 828.867,1216.54 829.453,1216.41 830.04,1214.9 830.626,1216.06 831.212,1219.7 831.799,1219.23 832.385,1216.65 832.972,1216.62 833.558,1214.85 834.145,1215.98 834.731,1214.47 835.317,1218.1 835.904,1218.84 836.49,1220.05 837.077,1219.74 837.663,1219.28 838.249,1216.46 838.836,1217.57 839.422,1217.18 840.009,1217 840.595,1216.85 841.181,1215.49 841.768,1215.36 842.354,1215.43 842.941,1214.96 843.527,1215.89 844.114,1216.94 844.7,1218.01 845.286,1216.34 845.873,1215.09 846.459,1216.03 847.046,1217.09 847.632,1217.96 848.218,1220.2 848.805,1218.58 849.391,1218.64 849.978,1216.99 850.564,1218.01 851.15,1217.72 851.737,1217.58 852.323,1221.06 852.91,1218.06 853.496,1216.74 854.083,1219.09 854.669,1219.16 855.255,1220 855.842,1218.44 856.428,1217.01 857.015,1216.89 857.601,1219.26 858.187,1213.99 858.774,1211.2 859.36,1210.23 859.947,1211.52 860.533,1213.98 861.119,1215.18 861.706,1214.99 862.292,1213.58 862.879,1213.8 863.465,1212.58 864.052,1212.31 864.638,1213.99 865.224,1213.94 865.811,1212.8 866.397,1215.38 866.984,1216.3 867.57,1215.93 868.156,1213.22 868.743,1213.19 869.329,1214.33 869.916,1214.11 870.502,1213.85 871.089,1215.15 871.675,1214.99 872.261,1214.65 872.848,1214.7 873.434,1213.47 874.021,1212.16 874.607,1214.48 875.193,1215.69 875.78,1216.54 876.366,1216.39 876.953,1212.1 877.539,1210.99 878.125,1210.92 878.712,1211.21 879.298,1211.26 879.885,1211.27 880.471,1212.77 881.058,1210.32 881.644,1211.65 882.23,1210.6 882.817,1209.58 883.403,1205.88 883.99,1205.04 884.576,1205.28 885.162,1205.8 885.749,1206.09 886.335,1207.71 886.922,1207.93 887.508,1207.04 888.094,1208.53 888.681,1210.03 889.267,1210.55 889.854,1209.35 890.44,1209.56 891.027,1209.58 891.613,1211.15 892.199,1209.92 892.786,1207.12 893.372,1207.41 893.959,1208.92 894.545,1210.51 895.131,1210.51 895.718,1210.65 896.304,1209.48 896.891,1207.05 897.477,1207.58 898.063,1206.77 898.65,1208.47 899.236,1208.72 899.823,1208.68 900.409,1206.36 900.996,1206.68 901.582,1210.18 902.168,1207.77 902.755,1206.87 903.341,1208.56 903.928,1207.62 904.514,1207.91 905.1,1210.98 905.687,1212.25 906.273,1210.96 906.86,1208.32 907.446,1207.18 908.032,1207.36 908.619,1210.26 909.205,1207.9 909.792,1208.15 910.378,1208.34 910.965,1209.97 911.551,1210.14 912.137,1211.82 912.724,1210.79 913.31,1210.94 913.897,1212.35 914.483,1212.63 915.069,1211.39 915.656,1211.47 916.242,1212.85 916.829,1214.1 917.415,1212.85 918.002,1212.98 918.588,1214.22 919.174,1210.24 919.761,1211.83 920.347,1215.65 920.934,1211.85 921.52,1210.88 922.106,1209.87 922.693,1208.54 923.279,1207.19 923.866,1207.08 924.452,1210.08 925.038,1209.1 925.625,1210.69 926.211,1213.35 926.798,1217.14 927.384,1216.99 927.971,1217.83 928.557,1217.86 929.143,1215.97 929.73,1214.51 930.316,1216.91 930.903,1218.17 931.489,1214.94 932.075,1213.36 932.662,1214.28 933.248,1215.47 933.835,1215.03 934.421,1212.12 935.007,1212.53 935.594,1216.22 936.18,1213.71 936.767,1209.65 937.353,1212.48 937.94,1212.38 938.526,1213.77 939.112,1211.54 939.699,1212.7 940.285,1210.03 940.872,1210.08 941.458,1210.25 942.044,1208.88 942.631,1210.53 943.217,1210.91 943.804,1212.24 944.39,1209.98 944.976,1211.45 945.563,1211.44 946.149,1212.79 946.736,1212.74 947.322,1213.84 947.909,1215.05 948.495,1217.69 949.081,1215.83 949.668,1215.74 950.254,1214.33 950.841,1216.43 951.427,1214.58 952.013,1215.89 952.6,1218.1 953.186,1218.16 953.773,1219.18 954.359,1217.94 954.945,1218.96 955.532,1219.82 956.118,1218.18 956.705,1218.1 957.291,1219.03 957.878,1220.2 958.464,1218.49 959.05,1216.93 959.637,1215.21 960.223,1213.71 960.81,1213.43 961.396,1212.07 961.982,1212.23 962.569,1210.7 963.155,1209.54 963.742,1205.81 964.328,1207.7 964.915,1207.51 965.501,1210.09 966.087,1206.05 966.674,1208.9 967.26,1208.92 967.847,1206.81 968.433,1208.23 969.019,1207.3 969.606,1207.8 970.192,1208.03 970.779,1208.48 971.365,1206.14 971.951,1208.02 972.538,1207.9 973.124,1209.51 973.711,1210.93 974.297,1208.18 974.884,1209.64 975.47,1212.56 976.056,1213.72 976.643,1213.62 977.229,1214.88 977.816,1214.65 978.402,1214.49 978.988,1215.85 979.575,1214.8 980.161,1213.1 980.748,1212.88 981.334,1214.21 981.92,1212.99 982.507,1212.9 983.093,1210.45 983.68,1215.5 984.266,1215.09 984.853,1213.58 985.439,1210.84 986.025,1209.76 986.612,1212.19 987.198,1213.07 987.785,1214.43 988.371,1212.98 988.957,1213.03 989.544,1212.94 990.13,1212.94 990.717,1215.68 991.303,1215.51 991.889,1211.44 992.476,1212.79 993.062,1211.84 993.649,1213.38 994.235,1210.46 994.822,1209.26 995.408,1211.87 995.994,1210.83 996.581,1210.87 997.167,1211.13 997.754,1208.66 998.34,1208.99 998.926,1209.25 999.513,1209.4 1000.1,1210.87 1000.69,1210.81 1001.27,1212.06 1001.86,1212.05 1002.44,1214.58 1003.03,1215.71 1003.62,1215.39 1004.2,1217.44 1004.79,1216.14 1005.38,1217.34 1005.96,1212.04 1006.55,1210.52 1007.14,1209.3 1007.72,1207.96 1008.31,1210.89 1008.9,1211.25 1009.48,1211.39 1010.07,1210.03 1010.65,1210.36 1011.24,1209.32 1011.83,1213.17 1012.41,1212.98 1013,1214.04 1013.59,1216.36 1014.17,1217.5 1014.76,1217.32 1015.35,1215.54 1015.93,1215.36 1016.52,1215.28 1017.11,1215.1 1017.69,1213.61 1018.28,1214.66 1018.86,1218.08 1019.45,1220.34 1020.04,1218.61 1020.62,1217.06 1021.21,1218.5 1021.8,1216.84 1022.38,1217.88 1022.97,1215.19 1023.56,1211.26 1024.14,1211.15 1024.73,1209.93 1025.32,1210.36 1025.9,1211.6 1026.49,1210.2 1027.07,1207.74 1027.66,1209.37 1028.25,1206.99 1028.83,1206.91 1029.42,1207.56 1030.01,1206.39 1030.59,1206.6 1031.18,1203.05 1031.77,1203.44 1032.35,1203.97 1032.94,1205.36 1033.52,1205.69 1034.11,1204.83 1034.7,1204.08 1035.28,1205.98 1035.87,1208.88 1036.46,1209.2 1037.04,1207.92 1037.63,1206.66 1038.22,1205.61 1038.8,1210.11 1039.39,1210.3 1039.98,1208.87 1040.56,1207.61 1041.15,1204.95 1041.73,1205.43 1042.32,1203.48 1042.91,1206.5 1043.49,1205.41 1044.08,1204.39 1044.67,1203.8 1045.25,1205.58 1045.84,1208.65 1046.43,1210.18 1047.01,1211.69 1047.6,1211.83 1048.19,1211.9 1048.77,1213.3 1049.36,1214.46 1049.94,1213.33 1050.53,1213.52 1051.12,1215.78 1051.7,1216.9 1052.29,1215.47 1052.88,1212.73 1053.46,1212.81 1054.05,1211.49 1054.64,1211.49 1055.22,1210.31 1055.81,1212.98 1056.39,1211.76 1056.98,1214.56 1057.57,1216.87 1058.15,1215.58 1058.74,1215.49 1059.33,1213.97 1059.91,1215.4 1060.5,1212.7 1061.09,1213.62 1061.67,1212.52 1062.26,1215.1 1062.85,1213.66 1063.43,1212.12 1064.02,1209.58 1064.6,1211.02 1065.19,1209.78 1065.78,1209.81 1066.36,1210.28 1066.95,1210.43 1067.54,1208.3 1068.12,1208.57 1068.71,1208.8 1069.3,1206.5 1069.88,1208.06 1070.47,1207.2 1071.06,1208.79 1071.64,1209.07 1072.23,1203.76 1072.81,1200.45 1073.4,1198.34 1073.99,1199.15 1074.57,1198.66 1075.16,1202.2 1075.75,1202.68 1076.33,1204.63 1076.92,1206.08 1077.51,1206.85 1078.09,1212.14 1078.68,1210.96 1079.26,1210.92 1079.85,1212.24 1080.44,1211.32 1081.02,1215.47 1081.61,1216.62 1082.2,1216.21 1082.78,1214.91 1083.37,1212.3 1083.96,1211.05 1084.54,1212.5 1085.13,1214.75 1085.72,1213.25 1086.3,1212.97 1086.89,1212.7 1087.47,1209.92 1088.06,1209.92 1088.65,1207.62 1089.23,1208.1 1089.82,1206.92 1090.41,1209.54 1090.99,1210.95 1091.58,1211.17 1092.17,1211.98 1092.75,1208.45 1093.34,1208.62 1093.93,1210.08 1094.51,1210.27 1095.1,1214.4 1095.68,1216.87 1096.27,1216.44 1096.86,1217.79 1097.44,1216.4 1098.03,1218.96 1098.62,1223.73 1099.2,1220.69 1099.79,1220.18 1100.38,1219.84 1100.96,1220.76 1101.55,1220.37 1102.14,1219.83 1102.72,1219.25 1103.31,1218.74 1103.89,1219.72 1104.48,1220.19 1105.07,1218.7 1105.65,1216.87 1106.24,1218.99 1106.83,1219.9 1107.41,1218.35 1108,1216.58 1108.59,1217.5 1109.17,1220.76 1109.76,1220.25 1110.34,1221.07 1110.93,1220.39 1111.52,1219.81 1112.1,1220.49 1112.69,1219.75 1113.28,1219.24 1113.86,1216.12 1114.45,1215.9 1115.04,1217.07 1115.62,1215.65 1116.21,1215.49 1116.8,1216.06 1117.38,1215.96 1117.97,1215.64 1118.55,1215.22 1119.14,1216.32 1119.73,1215.92 1120.31,1218.16 1120.9,1216.76 1121.49,1215.44 1122.07,1215.3 1122.66,1214.97 1123.25,1214.79 1123.83,1215.91 1124.42,1215.61 1125.01,1214.07 1125.59,1213.88 1126.18,1218.77 1126.76,1218.32 1127.35,1216.44 1127.94,1214.68 1128.52,1211.86 1129.11,1211.82 1129.7,1214.43 1130.28,1211.83 1130.87,1214.25 1131.46,1211.38 1132.04,1211.25 1132.63,1211.4 1133.21,1210.21 1133.8,1212.8 1134.39,1211.47 1134.97,1211.59 1135.56,1209.21 1136.15,1211.91 1136.73,1213.15 1137.32,1214.45 1137.91,1215.45 1138.49,1213.9 1139.08,1212.22 1139.67,1212.24 1140.25,1212.23 1140.84,1212.07 1141.42,1212.98 1142.01,1215.26 1142.6,1213.77 1143.18,1214.82 1143.77,1213.39 1144.36,1210.71 1144.94,1210.67 1145.53,1212.19 1146.12,1213.66 1146.7,1217.15 1147.29,1216.78 1147.88,1215.19 1148.46,1213.68 1149.05,1213.44 1149.63,1210.75 1150.22,1208.17 1150.81,1209.45 1151.39,1209.78 1151.98,1207.17 1152.57,1207.57 1153.15,1206.24 1153.74,1205.26 1154.33,1205.56 1154.91,1202.99 1155.5,1204.67 1156.09,1208.99 1156.67,1211.74 1157.26,1213.14 1157.84,1213.05 1158.43,1212.97 1159.02,1212.88 1159.6,1212.66 1160.19,1215.32 1160.78,1211.15 1161.36,1209.7 1161.95,1211.31 1162.54,1211.38 1163.12,1212.91 1163.71,1211.59 1164.29,1211.49 1164.88,1212.61 1165.47,1211.53 1166.05,1210.29 1166.64,1212.94 1167.23,1210.44 1167.81,1210.43 1168.4,1211.68 1168.99,1210.55 1169.57,1209.48 1170.16,1210.7 1170.75,1213.25 1171.33,1213.41 1171.92,1213.39 1172.5,1214.89 1173.09,1214.81 1173.68,1215.88 1174.26,1213.01 1174.85,1211.73 1175.44,1211.44 1176.02,1208.89 1176.61,1209.05 1177.2,1211.7 1177.78,1213.1 1178.37,1214.08 1178.96,1216.45 1179.54,1215.99 1180.13,1219.35 1180.71,1217.85 1181.3,1217.4 1181.89,1215.93 1182.47,1213.4 1183.06,1215.78 1183.65,1214.44 1184.23,1214.22 1184.82,1214.2 1185.41,1212.98 1185.99,1213.07 1186.58,1211.49 1187.16,1212.74 1187.75,1211.29 1188.34,1210.08 1188.92,1211.28 1189.51,1211.64 1190.1,1211.53 1190.68,1209.88 1191.27,1209.92 1191.86,1212.48 1192.44,1213.86 1193.03,1214.07 1193.62,1215.27 1194.2,1216.27 1194.79,1213.51 1195.37,1207.19 1195.96,1206.02 1196.55,1206.38 1197.13,1207.88 1197.72,1208.01 1198.31,1208.12 1198.89,1208.72 1199.48,1208.8 1200.07,1207.73 1200.65,1208.1 1201.24,1209.62 1201.83,1209.82 1202.41,1207.34 1203,1203.87 1203.58,1205.97 1204.17,1204.91 1204.76,1204.64 1205.34,1205.35 1205.93,1205.8 1206.52,1204.69 1207.1,1204.02 1207.69,1204.3 1208.28,1205.01 1208.86,1203.07 1209.45,1206.01 1210.03,1205.99 1210.62,1208.84 1211.21,1210.31 1211.79,1214.31 1212.38,1216.69 1212.97,1216.29 1213.55,1213.4 1214.14,1213.19 1214.73,1212.93 1215.31,1214.2 1215.9,1212.52 1216.49,1211.26 1217.07,1210.21 1217.66,1210.16 1218.24,1209.08 1218.83,1210.47 1219.42,1210.4 1220,1210.19 1220.59,1210.35 1221.18,1210.6 1221.76,1213.38 1222.35,1214.44 1222.94,1215.49 1223.52,1215.2 1224.11,1213.52 1224.7,1214.67 1225.28,1215.9 1225.87,1218.3 1226.45,1217.77 1227.04,1221.18 1227.63,1217.02 1228.21,1214.28 1228.8,1215.21 1229.39,1218.93 1229.97,1214.83 1230.56,1216 1231.15,1217 1231.73,1214.31 1232.32,1212.83 1232.91,1215.4 1233.49,1212.81 1234.08,1212.62 1234.66,1208.79 1235.25,1205.23 1235.84,1210.71 1236.42,1209.26 1237.01,1210.73 1237.6,1210.67 1238.18,1210.73 1238.77,1209.86 1239.36,1208.7 1239.94,1211.57 1240.53,1211.57 1241.11,1208.97 1241.7,1210.58 1242.29,1213.35 1242.87,1213.11 1243.46,1211.84 1244.05,1209.4 1244.63,1210.93 1245.22,1208.49 1245.81,1210.07 1246.39,1212.56 1246.98,1212.45 1247.57,1211.1 1248.15,1208.5 1248.74,1208.52 1249.32,1210.21 1249.91,1209.86 1250.5,1209.81 1251.08,1212.5 1251.67,1213.9 1252.26,1212.53 1252.84,1212.4 1253.43,1210.9 1254.02,1212.1 1254.6,1212.02 1255.19,1210.61 1255.78,1209.4 1256.36,1212.27 1256.95,1216.22 1257.53,1214.68 1258.12,1214.38 1258.71,1213.02 1259.29,1208.83 1259.88,1209.98 1260.47,1208.92 1261.05,1211.78 1261.64,1207.79 1262.23,1210.56 1262.81,1211.92 1263.4,1210.7 1263.98,1209.41 1264.57,1209.48 1265.16,1209.77 1265.74,1212.68 1266.33,1215.26 1266.92,1214.71 1267.5,1214.77 1268.09,1215.91 1268.68,1216.85 1269.26,1219.07 1269.85,1218.71 1270.44,1218.39 1271.02,1220.19 1271.61,1219.73 1272.19,1215.19 1272.78,1216.05 1273.37,1215.77 1273.95,1213.12 1274.54,1210.52 1275.13,1211.47 1275.71,1208.02 1276.3,1209.58 1276.89,1204.75 1277.47,1203.87 1278.06,1204.27 1278.65,1209.68 1279.23,1209.84 1279.82,1206.2 1280.4,1206.62 1280.99,1208.19 1281.58,1204.29 1282.16,1204.59 1282.75,1206.31 1283.34,1206.58 1283.92,1206.75 1284.51,1207.14 1285.1,1210.4 1285.68,1209.54 1286.27,1209.58 1286.86,1211.09 1287.44,1209.93 1288.03,1207.35 1288.61,1207.7 1289.2,1209.39 1289.79,1208.3 1290.37,1204.79 1290.96,1207.88 1291.55,1207.04 1292.13,1207.22 1292.72,1208.76 1293.31,1211.55 1293.89,1211.58 1294.48,1211.34 1295.06,1217.79 1295.65,1216.08 1296.24,1216.09 1296.82,1217.01 1297.41,1219.15 1298,1220.07 1298.58,1221.95 1299.17,1219.94 1299.76,1218.38 1300.34,1219.53 1300.93,1219.19 1301.52,1217.63 1302.1,1218.58 1302.69,1217.82 1303.27,1218.75 1303.86,1218.29 1304.45,1216.7 1305.03,1217.51 1305.62,1216.92 1306.21,1216.64 1306.79,1218.99 1307.38,1218.4 1307.97,1219.48 1308.55,1217.74 1309.14,1217.53 1309.73,1216.14 1310.31,1214.99 1310.9,1209.74 1311.48,1209.9 1312.07,1208.81 1312.66,1210.08 1313.24,1210.01 1313.83,1210.21 1314.42,1210.23 1315,1209.01 1315.59,1210.37 1316.18,1209.14 1316.76,1210.39 1317.35,1210.33 1317.93,1213 1318.52,1209.5 1319.11,1208.34 1319.69,1204.74 1320.28,1208.9 1320.87,1208.9 1321.45,1209 1322.04,1207.66 1322.63,1205.23 1323.21,1204.09 1323.8,1205.44 1324.39,1207.02 1324.97,1203.55 1325.56,1206.42 1326.14,1206.67 1326.73,1209.47 1327.32,1208.17 1327.9,1208.45 1328.49,1208.44 1329.08,1208.57 1329.66,1209.94 1330.25,1208.7 1330.84,1210.3 1331.42,1208.97 1332.01,1209.17 1332.6,1210.63 1333.18,1210.79 1333.77,1213.85 1334.35,1215.05 1334.94,1215.97 1335.53,1212.94 1336.11,1211.29 1336.7,1215.45 1337.29,1215.34 1337.87,1216.29 1338.46,1214.7 1339.05,1210.72 1339.63,1210.64 1340.22,1210.69 1340.8,1212.29 1341.39,1212.19 1341.98,1212.09 1342.56,1213.17 1343.15,1211.85 1343.74,1212.12 1344.32,1209.48 1344.91,1210.82 1345.5,1208.25 1346.08,1209.45 1346.67,1209.55 1347.26,1212.12 1347.84,1210.89 1348.43,1209.53 1349.01,1210.76 1349.6,1212.24 1350.19,1209.46 1350.77,1209.69 1351.36,1209.74 1351.95,1211.1 1352.53,1207.17 1353.12,1207.66 1353.71,1209.26 1354.29,1208.37 1354.88,1209.9 1355.47,1210.14 1356.05,1211.37 1356.64,1211.43 1357.22,1213.99 1357.81,1215.21 1358.4,1216.51 1358.98,1214.72 1359.57,1210.84 1360.16,1211.01 1360.74,1209.67 1361.33,1208.29 1361.92,1209.31 1362.5,1206.61 1363.09,1207.86 1363.68,1210.39 1364.26,1210.18 1364.85,1215.42 1365.43,1214.04 1366.02,1215.02 1366.61,1214.63 1367.19,1215.32 1367.78,1217.63 1368.37,1213.59 1368.95,1212.33 1369.54,1212.41 1370.13,1213.65 1370.71,1213.62 1371.3,1214.66 1371.88,1214.74 1372.47,1213.09 1373.06,1211.98 1373.64,1212.97 1374.23,1216.75 1374.82,1216.57 1375.4,1216.33 1375.99,1214.67 1376.58,1213.26 1377.16,1214.56 1377.75,1214.52 1378.34,1216.88 1378.92,1218.47 1379.51,1219.76 1380.09,1216.94 1380.68,1217.8 1381.27,1218.73 1381.85,1216.99 1382.44,1215.59 1383.03,1213.91 1383.61,1213.97 1384.2,1212.82 1384.79,1211.4 1385.37,1211.37 1385.96,1211.44 1386.55,1214.02 1387.13,1215.14 1387.72,1217.41 1388.3,1215.79 1388.89,1216.79 1389.48,1215.22 1390.06,1215.95 1390.65,1214.32 1391.24,1214.06 1391.82,1212.75 1392.41,1212.64 1393,1213.57 1393.58,1214.72 1394.17,1213.13 1394.75,1218.13 1395.34,1220.49 1395.93,1217.39 1396.51,1217.07 1397.1,1212.85 1397.69,1211.46 1398.27,1210.24 1398.86,1210.25 1399.45,1210.48 1400.03,1208.09 1400.62,1207.19 1401.21,1206.28 1401.79,1209.25 1402.38,1209.47 1402.96,1210.97 1403.55,1213.88 1404.14,1213.95 1404.72,1213.63 1405.31,1210.62 1405.9,1211.89 1406.48,1210.6 1407.07,1208.1 1407.66,1208.12 1408.24,1208.25 1408.83,1208.59 1409.42,1208.69 1410,1208.84 1410.59,1208.95 1411.17,1208.95 1411.76,1207.81 1412.35,1208.06 1412.93,1207.92 1413.52,1207.04 1414.11,1208.53 1414.69,1210.34 1415.28,1209.12 1415.87,1211.75 1416.45,1212.92 1417.04,1212.88 1417.63,1215.48 1418.21,1215.2 1418.8,1213.49 1419.38,1213.49 1419.97,1210.78 1420.56,1213.23 1421.14,1211.72 1421.73,1209.11 1422.32,1207.93 1422.9,1206.97 1423.49,1205.5 1424.08,1204.52 1424.66,1206.19 1425.25,1209.24 1425.83,1209.37 1426.42,1208.06 1427.01,1209.63 1427.59,1209.78 1428.18,1211.34 1428.77,1212.6 1429.35,1211.31 1429.94,1212.8 1430.53,1212.79 1431.11,1211.93 1431.7,1210.59 1432.29,1211.92 1432.87,1213.33 1433.46,1212.23 1434.04,1214.95 1434.63,1216.09 1435.22,1216 1435.8,1213.31 1436.39,1212.03 1436.98,1210.92 1437.56,1209.53 1438.15,1210.95 1438.74,1208.42 1439.32,1205.85 1439.91,1206.58 1440.5,1205.49 1441.08,1204.71 1441.67,1203.81 1442.25,1205.5 1442.84,1202.01 1443.43,1202.5 1444.01,1202.96 1444.6,1208.59 1445.19,1207.47 1445.77,1205.06 1446.36,1205.24 1446.95,1205.7 1447.53,1209.89 1448.12,1210.02 1448.7,1208.69 1449.29,1211.32 1449.88,1209.03 1450.46,1208.93 1451.05,1208.96 1451.64,1209.16 1452.22,1211.73 1452.81,1211.94 1453.4,1211.84 1453.98,1210.54 1454.57,1208.03 1455.16,1208.32 1455.74,1209.67 1456.33,1211.29 1456.91,1210.18 1457.5,1211.5 1458.09,1214.13 1458.67,1213.94 1459.26,1213.57 1459.85,1213.32 1460.43,1210.59 1461.02,1210.79 1461.61,1209.57 1462.19,1206.98 1462.78,1208.46 1463.37,1207.44 1463.95,1205.32 1464.54,1205.97 1465.12,1205.21 1465.71,1205.53 1466.3,1207.14 1466.88,1206.21 1467.47,1205.25 1468.06,1208.21 1468.64,1209.61 1469.23,1211.34 1469.82,1208.73 1470.4,1207.7 1470.99,1209.14 1471.57,1211.86 1472.16,1210.38 1472.75,1211.83 1473.33,1210.59 1473.92,1209.49 1474.51,1209.51 1475.09,1210.75 1475.68,1210.64 1476.27,1210.58 1476.85,1211.89 1477.44,1212.1 1478.03,1205.67 1478.61,1207.26 1479.2,1206.3 1479.78,1208.08 1480.37,1208.03 1480.96,1208.19 1481.54,1208.57 1482.13,1209.91 1482.72,1207.64 1483.3,1210.57 1483.89,1207.93 1484.48,1205.65 1485.06,1205.96 1485.65,1206.02 1486.24,1204.95 1486.82,1203.91 1487.41,1204.59 1487.99,1206.42 1488.58,1206.76 1489.17,1207.16 1489.75,1209.88 1490.34,1210.99 1490.93,1211.45 1491.51,1212.77 1492.1,1212.81 1492.69,1212.57 1493.27,1211.45 1493.86,1211.53 1494.45,1214.09 1495.03,1215.42 1495.62,1217.91 1496.2,1215 1496.79,1213.59 1497.38,1214.85 1497.96,1214.68 1498.55,1214.55 1499.14,1215.54 1499.72,1215.38 1500.31,1216.54 1500.9,1216.42 1501.48,1214.74 1502.07,1215.9 1502.65,1215.48 1503.24,1215.2 1503.83,1212.57 1504.41,1214.8 1505,1212.02 1505.59,1212.15 1506.17,1213.4 1506.76,1215.99 1507.35,1215.88 1507.93,1215.7 1508.52,1216.75 1509.11,1215.51 1509.69,1214.22 1510.28,1212.66 1510.86,1213.85 1511.45,1211.3 1512.04,1209.79 1512.62,1210.01 1513.21,1207.51 1513.8,1207.93 1514.38,1206.99 1514.97,1206.02 1515.56,1206.41 1516.14,1207.94 1516.73,1210.6 1517.32,1211.85 1517.9,1210.15 1518.49,1210.56 1519.07,1208 1519.66,1209.37 1520.25,1208.09 1520.83,1208.42 1521.42,1207.57 1522.01,1209 1522.59,1210.32 1523.18,1209.3 1523.77,1207.86 1524.35,1210.49 1524.94,1210.46 1525.52,1210.52 1526.11,1213.13 1526.7,1214.49 1527.28,1214.31 1527.87,1214.09 1528.46,1213.92 1529.04,1212.54 1529.63,1213.77 1530.22,1213.66 1530.8,1212.62 1531.39,1211.19 1531.98,1212.82 1532.56,1213.98 1533.15,1212.41 1533.73,1213.64 1534.32,1211.95 1534.91,1212.12 1535.49,1213.18 1536.08,1213.15 1536.67,1215.73 1537.25,1215.42 1537.84,1214.09 1538.43,1216.05 1539.01,1215.82 1539.6,1215.48 1540.19,1216.83 1540.77,1216.42 1541.36,1213.58 1541.94,1215.82 1542.53,1214.13 1543.12,1216.5 1543.7,1217.18 1544.29,1215.63 1544.88,1216.41 1545.46,1216.16 1546.05,1215.91 1546.64,1215.56 1547.22,1214.27 1547.81,1213.89 1548.4,1212.42 1548.98,1216.11 1549.57,1215.97 1550.15,1217.15 1550.74,1217 1551.33,1211.57 1551.91,1211.47 1552.5,1211.3 1553.09,1211.29 1553.67,1211.32 1554.26,1209.72 1554.85,1212.3 1555.43,1210.88 1556.02,1210.78 1556.6,1210.66 1557.19,1210.37 1557.78,1208.94 1558.36,1211.67 1558.95,1212.85 1559.54,1212.9 1560.12,1215.27 1560.71,1215.36 1561.3,1212.79 1561.88,1211.64 1562.47,1210.39 1563.06,1210.62 1563.64,1209.51 1564.23,1209.79 1564.81,1211.99 1565.4,1209.62 1565.99,1208.53 1566.57,1210.05 1567.16,1210.31 1567.75,1211.36 1568.33,1212.45 1568.92,1213.56 1569.51,1217.25 1570.09,1217.01 1570.68,1215.03 1571.27,1213.53 1571.85,1213.66 1572.44,1216.21 1573.02,1217.14 1573.61,1216.79 1574.2,1216.66 1574.78,1215.17 1575.37,1217.58 1575.96,1214.7 1576.54,1214.33 1577.13,1215.68 1577.72,1215.51 1578.3,1218.01 1578.89,1219.11 1579.47,1218.79 1580.06,1215.65 1580.65,1214.4 1581.23,1214.38 1581.82,1215.4 1582.41,1215.28 1582.99,1213.79 1583.58,1213.63 1584.17,1210.78 1584.75,1211.92 1585.34,1210.35 1585.93,1205.27 1586.51,1204.41 1587.1,1206.19 1587.68,1204.06 1588.27,1204.35 1588.86,1204.9 1589.44,1205.18 1590.03,1206.7 1590.62,1205.61 1591.2,1212.08 1591.79,1214.71 1592.38,1215.82 1592.96,1215.63 1593.55,1217.87 1594.14,1217.45 1594.72,1219.43 1595.31,1219.15 1595.89,1219.01 1596.48,1221.13 1597.07,1221.9 1597.65,1221.46 1598.24,1222.28 1598.83,1223.22 1599.41,1222.77 1600,1222.23 1600.59,1223.17 1601.17,1223.75 1601.76,1223.09 1602.34,1223.39 1602.93,1222.87 1603.52,1220.92 1604.1,1221.66 1604.69,1219.7 1605.28,1220.64 1605.86,1220.24 1606.45,1218.67 1607.04,1217.32 1607.62,1215.88 1608.21,1216.68 1608.8,1217.77 1609.38,1217.28 1609.97,1214.43 1610.55,1216.78 1611.14,1216.47 1611.73,1216 1612.31,1215.69 1612.9,1211.52 1613.49,1209.98 1614.07,1209.92 1614.66,1210.11 1615.25,1208.92 1615.83,1207.64 1616.42,1207.6 1617.01,1210.25 1617.59,1210.47 1618.18,1208.29 1618.76,1208.1 1619.35,1203.9 1619.94,1206.73 1620.52,1208.14 1621.11,1205.78 1621.7,1203.31 1622.28,1203.96 1622.87,1201.92 1623.46,1202.28 1624.04,1202.62 1624.63,1201.96 1625.22,1202.52 1625.8,1201.98 1626.39,1201.16 1626.97,1201.78 1627.56,1203.71 1628.15,1202.9 1628.73,1203.56 1629.32,1203.85 1629.91,1204.21 1630.49,1204.76 1631.08,1206.42 1631.67,1208.12 1632.25,1209.76 1632.84,1208.57 1633.42,1207.88 1634.01,1206.86 1634.6,1205.81 1635.18,1204.94 1635.77,1206.4 1636.36,1209.31 1636.94,1208.03 1637.53,1209.71 1638.12,1209.73 1638.7,1204.72 1639.29,1204.01 1639.88,1204.35 1640.46,1208.57 1641.05,1208.86 1641.63,1210.03 1642.22,1208.78 1642.81,1207.78 1643.39,1206.89 1643.98,1205.93 1644.57,1208.66 1645.15,1207.75 1645.74,1207.93 1646.33,1204.19 1646.91,1206.07 1647.5,1206.39 1648.09,1205.33 1648.67,1207.33 1649.26,1208.8 1649.84,1209.99 1650.43,1212.56 1651.02,1211.28 1651.6,1211.21 1652.19,1211.56 1652.78,1212.91 1653.36,1214.25 1653.95,1214.12 1654.54,1215.21 1655.12,1217.56 1655.71,1218.51 1656.29,1219.1 1656.88,1220.07 1657.47,1219.5 1658.05,1218.15 1658.64,1219.18 1659.23,1218.82 1659.81,1217.27 1660.4,1215.46 1660.99,1216.66 1661.57,1217.89 1662.16,1216.15 1662.75,1215.83 1663.33,1214.41 1663.92,1211.48 1664.5,1211.61 1665.09,1211.82 1665.68,1215.88 1666.26,1214.11 1666.85,1215.09 1667.44,1217.29 1668.02,1217.32 1668.61,1216.99 1669.2,1217.91 1669.78,1217.31 1670.37,1217.04 1670.96,1216.87 1671.54,1216.82 1672.13,1215.4 1672.71,1215.11 1673.3,1218.81 1673.89,1218.48 1674.47,1216.56 1675.06,1213.79 1675.65,1214.97 1676.23,1220.05 1676.82,1218.19 1677.41,1217.74 1677.99,1217.33 1678.58,1215.61 1679.17,1215.21 1679.75,1215.03 1680.34,1214.89 1680.92,1213.42 1681.51,1213.5 1682.1,1211.06 1682.68,1209.73 1683.27,1212.13 1683.86,1213.15 1684.44,1212.97 1685.03,1211.36 1685.62,1211.47 1686.2,1212.69 1686.79,1212.58 1687.37,1208.22 1687.96,1212.4 1688.55,1209.77 1689.13,1209.75 1689.72,1209.9 1690.31,1209.87 1690.89,1208.92 1691.48,1208.8 1692.07,1206.17 1692.65,1205.32 1693.24,1206.94 1693.83,1207.24 1694.41,1208.6 1695,1208.89 1695.58,1207.67 1696.17,1206.84 1696.76,1208.22 1697.34,1206.53 1697.93,1206.78 1698.52,1209.44 1699.1,1212.05 1699.69,1209.39 1700.28,1208.12 1700.86,1208.35 1701.45,1208.61 1702.04,1210.15 1702.62,1210.29 1703.21,1210.45 1703.79,1209.14 1704.38,1209.34 1704.97,1213.1 1705.55,1211.61 1706.14,1212.88 1706.73,1211.73 1707.31,1211.94 1707.9,1210.68 1708.49,1213.27 1709.07,1213.2 1709.66,1213.28 1710.24,1211.91 1710.83,1212.13 1711.42,1213.42 1712,1214.66 1712.59,1216.88 1713.18,1215.17 1713.76,1212.18 1714.35,1211.94 1714.94,1211.88 1715.52,1210.67 1716.11,1212.18 1716.7,1212.32 1717.28,1212.16 1717.87,1212.13 1718.45,1207.14 1719.04,1207.82 1719.63,1209.29 1720.21,1208.42 1720.8,1203.35 1721.39,1202.67 1721.97,1204.74 1722.56,1205.19 1723.15,1208.21 1723.73,1209.61 1724.32,1208.53 1724.91,1206.17 1725.49,1205.17 1726.08,1205.56 1726.66,1205.66 1727.25,1206.05 1727.84,1207.63 1728.42,1209.05 1729.01,1209.04 1729.6,1210.2 1730.18,1211.59 1730.77,1211.73 1731.36,1212.75 1731.94,1210 1732.53,1210.04 1733.11,1208.94 1733.7,1208.8 1734.29,1207.6 1734.87,1205.01 1735.46,1205.25 1736.05,1208.26 1736.63,1208.36 1737.22,1208.54 1737.81,1209.05 1738.39,1207.86 1738.98,1209.18 1739.57,1211.73 1740.15,1212.03 1740.74,1211.96 1741.32,1210.62 1741.91,1212.02 1742.5,1210.38 1743.08,1211.67 1743.67,1211.2 1744.26,1211.16 1744.84,1211.11 1745.43,1211.25 1746.02,1211.26 1746.6,1213.84 1747.19,1214.92 1747.78,1209.69 1748.36,1208.47 1748.95,1209.95 1749.53,1209.85 1750.12,1212.3 1750.71,1213.49 1751.29,1211.07 1751.88,1210.96 1752.47,1209.85 1753.05,1208.81 1753.64,1209.1 1754.23,1209.44 1754.81,1208.11 1755.4,1206.97 1755.99,1208.27 1756.57,1207.38 1757.16,1208.93 1757.74,1208.98 1758.33,1210.43 1758.92,1211.91 1759.5,1212.05 1760.09,1210.98 1760.68,1213.68 1761.26,1212.31 1761.85,1210.74 1762.44,1210.79 1763.02,1208.34 1763.61,1208.47 1764.19,1206.2 1764.78,1206.67 1765.37,1207.05 1765.95,1208.66 1766.54,1211.46 1767.13,1211.47 1767.71,1211.58 1768.3,1211.78 1768.89,1213.17 1769.47,1213.29 1770.06,1213.48 1770.65,1214.69 1771.23,1215.84 1771.82,1214.24 1772.4,1214.3 1772.99,1212.95 1773.58,1213.07 1774.16,1211.65 1774.75,1209.17 1775.34,1209.28 1775.92,1208.25 1776.51,1207.15 1777.1,1207.47 1777.68,1207.71 1778.27,1208.04 1778.86,1206.92 1779.44,1205.78 1780.03,1205.92 1780.61,1206.14 1781.2,1207.34 1781.79,1207.36 1782.37,1206.52 1782.96,1206.78 1783.55,1206.99 1784.13,1206.01 1784.72,1207.73 1785.31,1205.52 1785.89,1209.81 1786.48,1211.06 1787.06,1209.73 1787.65,1211.13 1788.24,1213.45 1788.82,1213.24 1789.41,1211.88 1790,1214.2 1790.58,1215.65 1791.17,1215.68 1791.76,1216.64 1792.34,1216.52 1792.93,1215.09 1793.52,1213.67 1794.1,1212.25 1794.69,1212.26 1795.27,1212.37 1795.86,1212.05 1796.45,1211.91 1797.03,1210.55 1797.62,1209.37 1798.21,1208.21 1798.79,1205.74 1799.38,1207.32 1799.97,1207.02 1800.55,1208.47 1801.14,1210.08 1801.73,1210.28 1802.31,1211.5 1802.9,1211.39 1803.48,1212.44 1804.07,1216.25 1804.66,1217.02 1805.24,1218.06 1805.83,1218.84 1806.42,1219.89 1807,1220.39 1807.59,1223.18 1808.18,1220.04 1808.76,1223.27 1809.35,1225.12 1809.94,1224.49 1810.52,1223.65 1811.11,1222.92 1811.69,1223.62 1812.28,1221.63 1812.87,1221.19 1813.45,1219.38 1814.04,1220.16 1814.63,1219.49 1815.21,1220.33 1815.8,1221.11 1816.39,1218.05 1816.97,1217.44 1817.56,1215.73 1818.14,1218.04 1818.73,1218.89 1819.32,1218.49 1819.9,1215.71 1820.49,1215.4 1821.08,1213.94 1821.66,1211.43 1822.25,1210.4 1822.84,1213.02 1823.42,1211.78 1824.01,1210.52 1824.6,1209.39 1825.18,1213.07 1825.77,1210.61 1826.35,1210.64 1826.94,1208.24 1827.53,1209.7 1828.11,1209.89 1828.7,1209.95 1829.29,1207.17 1829.87,1206.26 1830.46,1206.46 1831.05,1207.87 1831.63,1209.07 1832.22,1205.54 1832.81,1207.18 1833.39,1208.46 1833.98,1209.87 1834.56,1211.02 1835.15,1208.44 1835.74,1210.04 1836.32,1208.77 1836.91,1210.33 1837.5,1211.76 1838.08,1213.1 1838.67,1213.11 1839.26,1214.18 1839.84,1215.05 1840.43,1216.35 1841.01,1214.74 1841.6,1212.94 1842.19,1210.38 1842.77,1207.83 1843.36,1206.7 1843.95,1208.26 1844.53,1207.06 1845.12,1207.22 1845.71,1209.96 1846.29,1208.58 1846.88,1206.02 1847.47,1210.2 1848.05,1210.28 1848.64,1209.05 1849.22,1210.46 1849.81,1209.34 1850.4,1213.21 1850.98,1210.36 1851.57,1210.18 1852.16,1208.91 1852.74,1207.91 1853.33,1206.81 1853.92,1207.39 1854.5,1206.43 1855.09,1209.37 1855.68,1206.83 1856.26,1207.06 1856.85,1208.39 1857.43,1208.71 1858.02,1207.58 1858.61,1207.76 1859.19,1208.13 1859.78,1209.58 1860.37,1208.37 1860.95,1209.84 1861.54,1211.05 1862.13,1212.51 1862.71,1213.85 1863.3,1215.22 1863.88,1215.08 1864.47,1215 1865.06,1214.84 1865.64,1214.68 1866.23,1215.74 1866.82,1214.09 1867.4,1213.85 1867.99,1213.97 1868.58,1211.25 1869.16,1213.89 1869.75,1215.35 1870.34,1213.97 1870.92,1213.62 1871.51,1212.27 1872.09,1211.11 1872.68,1212.42 1873.27,1209.78 1873.85,1206.2 1874.44,1206.54 1875.03,1206.96 1875.61,1208.71 1876.2,1204.88 1876.79,1205.12 1877.37,1206.47 1877.96,1206.53 1878.55,1206.67 1879.13,1209.38 1879.72,1210.81 1880.3,1213.34 1880.89,1211.98 1881.48,1210.57 1882.06,1209.49 1882.65,1211.05 1883.24,1210.89 1883.82,1210.85 1884.41,1211.18 1885,1213.55 1885.58,1212.26 1886.17,1212.08 1886.76,1212.11 1887.34,1213.41 1887.93,1211.9 1888.51,1210.79 1889.1,1208.44 1889.69,1209.96 1890.27,1209.89 1890.86,1210.34 1891.45,1212.02 1892.03,1211.93 1892.62,1211.07 1893.21,1212.58 1893.79,1212.35 1894.38,1211.01 1894.96,1209.76 1895.55,1208.41 1896.14,1208.36 1896.72,1207.43 1897.31,1209.08 1897.9,1210.24 1898.48,1209.06 1899.07,1210.58 1899.66,1210.26 1900.24,1210.42 1900.83,1210.6 1901.42,1211.89 1902,1210.77 1902.59,1209.42 1903.17,1209.41 1903.76,1206.74 1904.35,1208.19 1904.93,1208.27 1905.52,1208.14 1906.11,1210.8 1906.69,1214.87 1907.28,1216.04 1907.87,1214.7 1908.45,1214.66 1909.04,1213.21 1909.63,1217 1910.21,1220.42 1910.8,1221.36 1911.38,1219.86 1911.97,1218.37 1912.56,1220.42 1913.14,1218.8 1913.73,1219.8 1914.32,1220.45 1914.9,1218.55 1915.49,1218.18 1916.08,1218.04 1916.66,1217.65 1917.25,1219.87 1917.83,1219.56 1918.42,1219.3 1919.01,1218.83 1919.59,1221.15 1920.18,1219.39 1920.77,1216.41 1921.35,1218.91 1921.94,1219.61 1922.53,1216.83 1923.11,1219.22 1923.7,1217.25 1924.29,1220.73 1924.87,1220.48 1925.46,1218.76 1926.04,1216.05 1926.63,1216.83 1927.22,1216.56 1927.8,1220.13 1928.39,1218.48 1928.98,1218.09 1929.56,1215.14 1930.15,1216.37 1930.74,1214.63 1931.32,1215.89 1931.91,1215.45 1932.5,1216.65 1933.08,1213.92 1933.67,1213.9 1934.25,1213.75 1934.84,1213.7 1935.43,1213.55 1936.01,1209.47 1936.6,1209.61 1937.19,1206.08 1937.77,1206.39 1938.36,1207.54 1938.95,1205.37 1939.53,1204.38 1940.12,1203.6 1940.71,1206.5 1941.29,1206.48 1941.88,1204.3 1942.46,1204.56 1943.05,1205.88 1943.64,1208.82 1944.22,1209.02 1944.81,1206.27 1945.4,1206.21 1945.98,1207.92 1946.57,1207.89 1947.16,1207.96 1947.74,1204.41 1948.33,1204.66 1948.91,1207.61 1949.5,1204.04 1950.09,1208.26 1950.67,1211.22 1951.26,1208.63 1951.85,1208.75 1952.43,1206.54 1953.02,1206.72 1953.61,1207.01 1954.19,1208.3 1954.78,1207.32 1955.37,1206.34 1955.95,1205.53 1956.54,1204.64 1957.12,1204.91 1957.71,1205.14 1958.3,1205.46 1958.88,1207.02 1959.47,1207.32 1960.06,1211.49 1960.64,1212.67 1961.23,1215.29 1961.82,1215.24 1962.4,1214.96 1962.99,1213.31 1963.58,1213.42 1964.16,1211.99 1964.75,1213.48 1965.33,1214.93 1965.92,1212.24 1966.51,1210.67 1967.09,1214.52 1967.68,1214.24 1968.27,1212.82 1968.85,1208.82 1969.44,1211.67 1970.03,1207.5 1970.61,1208.75 1971.2,1208.85 1971.78,1207.54 1972.37,1207.93 1972.96,1206.83 1973.54,1207.04 1974.13,1207.21 1974.72,1207.49 1975.3,1206.29 1975.89,1207.57 1976.48,1207.81 1977.06,1206.68 1977.65,1207.03 1978.24,1207.1 1978.82,1206.02 1979.41,1206.37 1979.99,1206.68 1980.58,1206.88 1981.17,1208.59 1981.75,1211.32 1982.34,1211.35 1982.93,1210.24 1983.51,1211.35 1984.1,1210.37 1984.69,1207.9 1985.27,1208.12 1985.86,1209.27 1986.45,1210.8 1987.03,1211.02 1987.62,1211.04 1988.2,1205.77 1988.79,1208.47 1989.38,1206.13 1989.96,1207.8 1990.55,1208.08 1991.14,1207.34 1991.72,1207.74 1992.31,1207.98 1992.9,1209.35 1993.48,1210.71 1994.07,1210.56 1994.65,1209.31 1995.24,1210.76 1995.83,1210.86 1996.41,1213.29 1997,1213.22 1997.59,1214.25 1998.17,1211.79 1998.76,1216.75 1999.35,1218.01 1999.93,1216.29 2000.52,1216.19 2001.11,1215.92 2001.69,1214.18 2002.28,1210.24 2002.86,1209.11 2003.45,1209.21 2004.04,1207.71 2004.62,1207.83 2005.21,1207.96 2005.8,1206.74 2006.38,1207.05 2006.97,1209.76 2007.56,1212.29 2008.14,1211.01 2008.73,1211.12 2009.32,1209.91 2009.9,1210.07 2010.49,1207.44 2011.07,1206.43 2011.66,1206.8 2012.25,1207.18 2012.83,1211.2 2013.42,1211.26 2014.01,1211.23 2014.59,1209.94 2015.18,1209.91 2015.77,1208.53 2016.35,1206.13 2016.94,1207.89 2017.53,1205.47 2018.11,1205.61 2018.7,1207.02 2019.28,1208.56 2019.87,1208.65 2020.46,1211.44 2021.04,1208.72 2021.63,1210.26 2022.22,1210.34 2022.8,1209.03 2023.39,1213.09 2023.98,1212.94 2024.56,1212.64 2025.15,1212.41 2025.73,1211.03 2026.32,1209.55 2026.91,1213.46 2027.49,1214.64 2028.08,1215.78 2028.67,1216.84 2029.25,1217.96 2029.84,1217.59 2030.43,1218.62 2031.01,1217.14 2031.6,1217.06 2032.19,1214 2032.77,1213.89 2033.36,1215.1 2033.94,1213.64 2034.53,1210.92 2035.12,1208.44 2035.7,1207.5 2036.29,1209.1 2036.88,1209.28 2037.46,1208.2 2038.05,1209.78 2038.64,1210.05 2039.22,1211.35 2039.81,1211.38 2040.4,1212.55 2040.98,1211.08 2041.57,1212.29 2042.15,1212.19 2042.74,1214.91 2043.33,1213.52 2043.91,1210.75 2044.5,1209.66 2045.09,1208.48 2045.67,1211.13 2046.26,1212.42 2046.85,1212.25 2047.43,1213.47 2048.02,1213.45 2048.6,1210.59 2049.19,1209.46 2049.78,1206.99 2050.36,1206.04 2050.95,1206.16 2051.54,1206.37 2052.12,1207.87 2052.71,1206.67 2053.3,1210.61 2053.88,1211.85 2054.47,1210.8 2055.06,1213.25 2055.64,1210.31 2056.23,1210.1 2056.81,1207.52 2057.4,1207.9 2057.99,1209.1 2058.57,1211.84 2059.16,1213.1 2059.75,1213.01 2060.33,1210.29 2060.92,1210.4 2061.51,1210.51 2062.09,1210.68 2062.68,1209.49 2063.27,1210.97 2063.85,1209.87 2064.44,1209.95 2065.02,1208.86 2065.61,1210.52 2066.2,1210.59 2066.78,1210.79 2067.37,1210.79 2067.96,1210.82 2068.54,1208.3 2069.13,1211.19 2069.72,1211.14 2070.3,1210.12 2070.89,1210.39 2071.48,1214.27 2072.06,1214.29 2072.65,1212.89 2073.23,1212.58 2073.82,1212.59 2074.41,1211.18 2074.99,1212.49 2075.58,1209.87 2076.17,1210.12 2076.75,1209.29 2077.34,1208.25 2077.93,1207.09 2078.51,1206.2 2079.1,1208.9 2079.68,1210.26 2080.27,1207.86 2080.86,1208.09 2081.44,1208.19 2082.03,1204.81 2082.62,1209.09 2083.2,1207.74 2083.79,1209.12 2084.38,1213.07 2084.96,1215.72 2085.55,1215.58 2086.14,1214.21 2086.72,1212.38 2087.31,1213.43 2087.89,1213.35 2088.48,1211.89 2089.07,1212.93 2089.65,1210.29 2090.24,1208.76 2090.83,1208.97 2091.41,1209.15 2092,1209.27 2092.59,1208.11 2093.17,1209.68 2093.76,1211.15 2094.35,1211.35 2094.93,1211.18 2095.52,1209.78 2096.1,1209.97 2096.69,1207.09 2097.28,1207.33 2097.86,1208.91 2098.45,1207.81 2099.04,1208.13 2099.62,1208.16 2100.21,1208.12 2100.8,1208.21 2101.38,1209.7 2101.97,1211.11 2102.55,1214.09 2103.14,1213.85 2103.73,1213.68 2104.31,1213.73 2104.9,1211.08 2105.49,1212.39 2106.07,1214.71 2106.66,1213.12 2107.25,1213.36 2107.83,1215.88 2108.42,1214.44 2109.01,1217.01 2109.59,1212.73 2110.18,1213.88 2110.76,1212.49 2111.35,1210.95 2111.94,1209.91 2112.52,1210.07 2113.11,1210.19 2113.7,1211.6 2114.28,1210.17 2114.87,1209 2115.46,1209.24 2116.04,1209.83 2116.63,1210.99 2117.22,1209.68 2117.8,1209.95 2118.39,1209.81 2118.97,1211.07 2119.56,1212.5 2120.15,1211.26 2120.73,1211.12 2121.32,1211.27 2121.91,1212.73 2122.49,1212.82 2123.08,1214.26 2123.67,1216.58 2124.25,1213.53 2124.84,1213.46 2125.42,1214.26 2126.01,1215.33 2126.6,1214.1 2127.18,1213.87 2127.77,1212.6 2128.36,1211.43 2128.94,1211.51 2129.53,1211.49 2130.12,1211.69 2130.7,1209.23 2131.29,1209.21 2131.88,1210.78 2132.46,1210.85 2133.05,1209.63 2133.63,1210.91 2134.22,1210.61 2134.81,1208.35 2135.39,1209.81 2135.98,1209.96 2136.57,1208.6 2137.15,1209.98 2137.74,1212.67 2138.33,1213.96 2138.91,1212.62 2139.5,1215.21 2140.09,1213.71 2140.67,1213.8 2141.26,1209.89 2141.84,1210.06 2142.43,1211.34 2143.02,1211.45 2143.6,1213.34 2144.19,1213.17 2144.78,1212.85 2145.36,1211.42 2145.95,1211.29 2146.54,1208.84 2147.12,1207.55 2147.71,1208.02 2148.3,1203.08 2148.88,1204.46 2149.47,1204.74 2150.05,1207.98 2150.64,1210.69 2151.23,1210.76 2151.81,1209.64 2152.4,1210.93 2152.99,1210.93 2153.57,1211.07 2154.16,1213.56 2154.75,1214.67 2155.33,1215.63 2155.92,1215.46 2156.5,1215.4 2157.09,1215.01 2157.68,1215.2 2158.26,1215.01 \"/>\n<path clip-path=\"url(#clip902)\" d=\"M986.025 1211.91 L986.612 1211.91 L987.198 1211.91 L987.785 1211.91 L988.371 1211.91 L988.957 1211.91 L989.544 1211.91 L990.13 1211.91 L990.717 1211.91 L991.303 1211.91 L991.889 1211.91 L992.476 1211.91 L993.062 1211.91 L993.649 1211.91 L994.235 1211.91 L994.822 1211.91 L995.408 1211.91 L995.994 1211.91 L996.581 1211.91 L997.167 1211.91 L997.754 1211.91 L998.34 1211.91 L998.926 1211.91 L999.513 1211.91 L1000.1 1211.91 L1000.69 1211.91 L1001.27 1211.91 L1001.86 1211.91 L1002.44 1211.91 L1003.03 1211.91 L1003.62 1211.91 L1004.2 1211.91 L1004.79 1211.91 L1005.38 1211.91 L1005.96 1211.91 L1006.55 1211.91 L1007.14 1211.91 L1007.72 1211.91 L1008.31 1211.91 L1008.9 1211.91 L1009.48 1211.91 L1010.07 1211.91 L1010.65 1211.91 L1011.24 1211.91 L1011.83 1211.91 L1012.41 1211.91 L1013 1211.91 L1013.59 1211.91 L1014.17 1211.91 L1014.76 1211.91 L1015.35 1211.91 L1015.93 1211.91 L1016.52 1211.91 L1017.11 1211.91 L1017.69 1211.91 L1018.28 1211.91 L1018.86 1211.91 L1019.45 1211.91 L1020.04 1211.91 L1020.62 1211.91 L1021.21 1211.91 L1021.8 1211.91 L1022.38 1211.91 L1022.97 1211.91 L1023.56 1211.91 L1024.14 1211.91 L1024.73 1211.91 L1025.32 1211.91 L1025.9 1211.91 L1026.49 1211.91 L1027.07 1211.91 L1027.66 1211.91 L1028.25 1211.91 L1028.83 1211.91 L1029.42 1211.91 L1030.01 1211.91 L1030.59 1211.91 L1031.18 1211.91 L1031.77 1211.91 L1032.35 1211.91 L1032.94 1211.91 L1033.52 1211.91 L1034.11 1211.91 L1034.7 1211.91 L1035.28 1211.91 L1035.87 1211.91 L1036.46 1211.91 L1037.04 1211.91 L1037.63 1211.91 L1038.22 1211.91 L1038.8 1211.91 L1039.39 1211.91 L1039.98 1211.91 L1040.56 1211.91 L1041.15 1211.91 L1041.73 1211.91 L1042.32 1211.91 L1042.91 1211.91 L1043.49 1211.91 L1044.08 1211.91 L1044.67 1211.91 L1045.25 1211.91 L1045.84 1211.91 L1046.43 1211.91 L1047.01 1211.91 L1047.6 1211.91 L1048.19 1211.91 L1048.77 1211.91 L1049.36 1211.91 L1049.94 1211.91 L1050.53 1211.91 L1051.12 1211.91 L1051.7 1211.91 L1052.29 1211.91 L1052.88 1211.91 L1053.46 1211.91 L1054.05 1211.91 L1054.64 1211.91 L1055.22 1211.91 L1055.81 1211.91 L1056.39 1211.91 L1056.98 1211.91 L1057.57 1211.91 L1058.15 1211.91 L1058.74 1211.91 L1059.33 1211.91 L1059.91 1211.91 L1060.5 1211.91 L1061.09 1211.91 L1061.67 1211.91 L1062.26 1211.91 L1062.85 1211.91 L1063.43 1211.91 L1064.02 1211.91 L1064.6 1211.91 L1065.19 1211.91 L1065.78 1211.91 L1066.36 1211.91 L1066.95 1211.91 L1067.54 1211.91 L1068.12 1211.91 L1068.71 1211.91 L1069.3 1211.91 L1069.88 1211.91 L1070.47 1211.91 L1071.06 1211.91 L1071.64 1211.91 L1072.23 1211.91 L1072.81 1211.91 L1073.4 1211.91 L1073.99 1211.91 L1074.57 1211.91 L1075.16 1211.91 L1075.75 1211.91 L1076.33 1211.91 L1076.92 1211.91 L1077.51 1211.91 L1078.09 1211.91 L1078.68 1211.91 L1079.26 1211.91 L1079.85 1211.91 L1080.44 1211.91 L1081.02 1211.91 L1081.61 1211.91 L1082.2 1211.91 L1082.78 1211.91 L1083.37 1211.91 L1083.96 1211.91 L1084.54 1211.91 L1085.13 1211.91 L1085.72 1211.91 L1086.3 1211.91 L1086.89 1211.91 L1087.47 1211.91 L1088.06 1211.91 L1088.65 1211.91 L1089.23 1211.91 L1089.82 1211.91 L1090.41 1211.91 L1090.99 1211.91 L1091.58 1211.91 L1092.17 1211.91 L1092.75 1211.91 L1093.34 1211.91 L1093.93 1211.91 L1094.51 1211.91 L1095.1 1211.91 L1095.68 1211.91 L1096.27 1211.91 L1096.86 1211.91 L1097.44 1211.91 L1098.03 1211.91 L1098.62 1211.91 L1099.2 1211.91 L1099.79 1211.91 L1100.38 1211.91 L1100.96 1211.91 L1101.55 1211.91 L1102.14 1211.91 L1102.72 1211.91 L1103.31 1211.91 L1103.89 1211.91 L1104.48 1211.91 L1105.07 1211.91 L1105.65 1211.91 L1106.24 1211.91 L1106.83 1211.91 L1107.41 1211.91 L1108 1211.91 L1108.59 1211.91 L1109.17 1211.91 L1109.76 1211.91 L1110.34 1211.91 L1110.93 1211.91 L1111.52 1211.91 L1112.1 1211.91 L1112.69 1211.91 L1113.28 1211.91 L1113.86 1211.91 L1114.45 1211.91 L1115.04 1211.91 L1115.62 1211.91 L1116.21 1211.91 L1116.8 1211.91 L1117.38 1211.91 L1117.97 1211.91 L1118.55 1211.91 L1119.14 1211.91 L1119.73 1211.91 L1120.31 1211.91 L1120.9 1211.91 L1121.49 1211.91 L1122.07 1211.91 L1122.66 1211.91 L1123.25 1211.91 L1123.83 1211.91 L1124.42 1211.91 L1125.01 1211.91 L1125.59 1211.91 L1126.18 1211.91 L1126.76 1211.91 L1127.35 1211.91 L1127.94 1211.91 L1128.52 1211.91 L1129.11 1211.91 L1129.7 1211.91 L1130.28 1211.91 L1130.87 1211.91 L1131.46 1211.91 L1132.04 1211.91 L1132.63 1211.91 L1133.21 1211.91 L1133.8 1211.91 L1134.39 1211.91 L1134.97 1211.91 L1135.56 1211.91 L1136.15 1211.91 L1136.73 1211.91 L1137.32 1211.91 L1137.91 1211.91 L1138.49 1211.91 L1139.08 1211.91 L1139.67 1211.91 L1140.25 1211.91 L1140.84 1211.91 L1141.42 1211.91 L1142.01 1211.91 L1142.6 1211.91 L1143.18 1211.91 L1143.77 1211.91 L1144.36 1211.91 L1144.94 1211.91 L1145.53 1211.91 L1146.12 1211.91 L1146.7 1211.91 L1147.29 1211.91 L1147.88 1211.91 L1148.46 1211.91 L1149.05 1211.91 L1149.63 1211.91 L1150.22 1211.91 L1150.81 1211.91 L1151.39 1211.91 L1151.98 1211.91 L1152.57 1211.91 L1153.15 1211.91 L1153.74 1211.91 L1154.33 1211.91 L1154.91 1211.91 L1155.5 1211.91 L1156.09 1211.91 L1156.67 1211.91 L1157.26 1211.91 L1157.84 1211.91 L1158.43 1211.91 L1159.02 1211.91 L1159.6 1211.91 L1160.19 1211.91 L1160.78 1211.91 L1161.36 1211.91 L1161.95 1211.91 L1162.54 1211.91 L1163.12 1211.91 L1163.71 1211.91 L1164.29 1211.91 L1164.88 1211.91 L1165.47 1211.91 L1166.05 1211.91 L1166.64 1211.91 L1167.23 1211.91 L1167.81 1211.91 L1168.4 1211.91 L1168.99 1211.91 L1169.57 1211.91 L1170.16 1211.91 L1170.75 1211.91 L1171.33 1211.91 L1171.92 1211.91 L1172.5 1211.91 L1173.09 1211.91 L1173.68 1211.91 L1174.26 1211.91 L1174.85 1211.91 L1175.44 1211.91 L1176.02 1211.91 L1176.61 1211.91 L1177.2 1211.91 L1177.78 1211.91 L1178.37 1211.91 L1178.96 1211.91 L1179.54 1211.91 L1180.13 1211.91 L1180.71 1211.91 L1181.3 1211.91 L1181.89 1211.91 L1182.47 1211.91 L1183.06 1211.91 L1183.65 1211.91 L1184.23 1211.91 L1184.82 1211.91 L1185.41 1211.91 L1185.99 1211.91 L1186.58 1211.91 L1187.16 1211.91 L1187.75 1211.91 L1188.34 1211.91 L1188.92 1211.91 L1189.51 1211.91 L1190.1 1211.91 L1190.68 1211.91 L1191.27 1211.91 L1191.86 1211.91 L1192.44 1211.91 L1193.03 1211.91 L1193.62 1211.91 L1194.2 1211.91 L1194.79 1211.91 L1195.37 1211.91 L1195.96 1211.91 L1196.55 1211.91 L1197.13 1211.91 L1197.72 1211.91 L1198.31 1211.91 L1198.89 1211.91 L1199.48 1211.91 L1200.07 1211.91 L1200.65 1211.91 L1201.24 1211.91 L1201.83 1211.91 L1202.41 1211.91 L1203 1211.91 L1203.58 1211.91 L1204.17 1211.91 L1204.76 1211.91 L1205.34 1211.91 L1205.93 1211.91 L1206.52 1211.91 L1207.1 1211.91 L1207.69 1211.91 L1208.28 1211.91 L1208.86 1211.91 L1209.45 1211.91 L1210.03 1211.91 L1210.62 1211.91 L1211.21 1211.91 L1211.79 1211.91 L1212.38 1211.91 L1212.97 1211.91 L1213.55 1211.91 L1214.14 1211.91 L1214.73 1211.91 L1215.31 1211.91 L1215.9 1211.91 L1216.49 1211.91 L1217.07 1211.91 L1217.66 1211.91 L1218.24 1211.91 L1218.83 1211.91 L1219.42 1211.91 L1220 1211.91 L1220.59 1211.91 L1221.18 1211.91 L1221.76 1211.91 L1222.35 1211.91 L1222.94 1211.91 L1223.52 1211.91 L1224.11 1211.91 L1224.7 1211.91 L1225.28 1211.91 L1225.87 1211.91 L1226.45 1211.91 L1227.04 1211.91 L1227.63 1211.91 L1228.21 1211.91 L1228.8 1211.91 L1229.39 1211.91 L1229.97 1211.91 L1230.56 1211.91 L1231.15 1211.91 L1231.73 1211.91 L1232.32 1211.91 L1232.91 1211.91 L1233.49 1211.91 L1234.08 1211.91 L1234.66 1211.91 L1235.25 1211.91 L1235.84 1211.91 L1236.42 1211.91 L1237.01 1211.91 L1237.6 1211.91 L1238.18 1211.91 L1238.77 1211.91 L1239.36 1211.91 L1239.94 1211.91 L1240.53 1211.91 L1241.11 1211.91 L1241.7 1211.91 L1242.29 1211.91 L1242.87 1211.91 L1243.46 1211.91 L1244.05 1211.91 L1244.63 1211.91 L1245.22 1211.91 L1245.81 1211.91 L1246.39 1211.91 L1246.98 1211.91 L1247.57 1211.91 L1248.15 1211.91 L1248.74 1211.91 L1249.32 1211.91 L1249.91 1211.91 L1250.5 1211.91 L1251.08 1211.91 L1251.67 1211.91 L1252.26 1211.91 L1252.84 1211.91 L1253.43 1211.91 L1254.02 1211.91 L1254.6 1211.91 L1255.19 1211.91 L1255.78 1211.91 L1256.36 1211.91 L1256.95 1211.91 L1257.53 1211.91 L1258.12 1211.91 L1258.71 1211.91 L1259.29 1211.91 L1259.88 1211.91 L1260.47 1211.91 L1261.05 1211.91 L1261.64 1211.91 L1262.23 1211.91 L1262.81 1211.91 L1263.4 1211.91 L1263.98 1211.91 L1264.57 1211.91 L1265.16 1211.91 L1265.74 1211.91 L1266.33 1211.91 L1266.92 1211.91 L1267.5 1211.91 L1268.09 1211.91 L1268.68 1211.91 L1269.26 1211.91 L1269.85 1211.91 L1270.44 1211.91 L1271.02 1211.91 L1271.61 1211.91 L1272.19 1211.91 L1272.78 1211.91 L1273.37 1211.91 L1273.95 1211.91 L1274.54 1211.91 L1275.13 1211.91 L1275.71 1211.91 L1276.3 1211.91 L1276.89 1211.91 L1277.47 1211.91 L1278.06 1211.91 L1278.65 1211.91 L1279.23 1211.91 L1279.82 1211.91 L1280.4 1211.91 L1280.99 1211.91 L1281.58 1211.91 L1282.16 1211.91 L1282.75 1211.91 L1283.34 1211.91 L1283.92 1211.91 L1284.51 1211.91 L1285.1 1211.91 L1285.68 1211.91 L1286.27 1211.91 L1286.86 1211.91 L1287.44 1211.91 L1288.03 1211.91 L1288.61 1211.91 L1289.2 1211.91 L1289.79 1211.91 L1290.37 1211.91 L1290.96 1211.91 L1291.55 1211.91 L1292.13 1211.91 L1292.72 1211.91 L1293.31 1211.91 L1293.89 1211.91 L1294.48 1211.91 L1295.06 1211.91 L1295.65 1211.91 L1296.24 1211.91 L1296.82 1211.91 L1297.41 1211.91 L1298 1211.91 L1298.58 1211.91 L1299.17 1211.91 L1299.76 1211.91 L1300.34 1211.91 L1300.93 1211.91 L1301.52 1211.91 L1302.1 1211.91 L1302.69 1211.91 L1303.27 1211.91 L1303.86 1211.91 L1304.45 1211.91 L1305.03 1211.91 L1305.62 1211.91 L1306.21 1211.91 L1306.79 1211.91 L1307.38 1211.91 L1307.97 1211.91 L1308.55 1211.91 L1309.14 1211.91 L1309.73 1211.91 L1310.31 1211.91 L1310.9 1211.91 L1311.48 1211.91 L1312.07 1211.91 L1312.66 1211.91 L1313.24 1211.91 L1313.83 1211.91 L1314.42 1211.91 L1315 1211.91 L1315.59 1211.91 L1316.18 1211.91 L1316.76 1211.91 L1317.35 1211.91 L1317.93 1211.91 L1318.52 1211.91 L1319.11 1211.91 L1319.69 1211.91 L1320.28 1211.91 L1320.87 1211.91 L1321.45 1211.91 L1322.04 1211.91 L1322.63 1211.91 L1323.21 1211.91 L1323.8 1211.91 L1324.39 1211.91 L1324.97 1211.91 L1325.56 1211.91 L1326.14 1211.91 L1326.73 1211.91 L1327.32 1211.91 L1327.9 1211.91 L1328.49 1211.91 L1329.08 1211.91 L1329.66 1211.91 L1330.25 1211.91 L1330.84 1211.91 L1331.42 1211.91 L1332.01 1211.91 L1332.6 1211.91 L1333.18 1211.91 L1333.77 1211.91 L1334.35 1211.91 L1334.94 1211.91 L1335.53 1211.91 L1336.11 1211.91 L1336.7 1211.91 L1337.29 1211.91 L1337.87 1211.91 L1338.46 1211.91 L1339.05 1211.91 L1339.63 1211.91 L1340.22 1211.91 L1340.8 1211.91 L1341.39 1211.91 L1341.98 1211.91 L1342.56 1211.91 L1343.15 1211.91 L1343.74 1211.91 L1344.32 1211.91 L1344.91 1211.91 L1345.5 1211.91 L1346.08 1211.91 L1346.67 1211.91 L1347.26 1211.91 L1347.84 1211.91 L1348.43 1211.91 L1349.01 1211.91 L1349.6 1211.91 L1350.19 1211.91 L1350.77 1211.91 L1351.36 1211.91 L1351.95 1211.91 L1352.53 1211.91 L1353.12 1211.91 L1353.71 1211.91 L1354.29 1211.91 L1354.88 1211.91 L1355.47 1211.91 L1356.05 1211.91 L1356.64 1211.91 L1357.22 1211.91 L1357.81 1211.91 L1358.4 1211.91 L1358.98 1211.91 L1359.57 1211.91 L1360.16 1211.91 L1360.74 1211.91 L1361.33 1211.91 L1361.92 1211.91 L1362.5 1211.91 L1363.09 1211.91 L1363.68 1211.91 L1364.26 1211.91 L1364.85 1211.91 L1365.43 1211.91 L1366.02 1211.91 L1366.61 1211.91 L1367.19 1211.91 L1367.78 1211.91 L1368.37 1211.91 L1368.95 1211.91 L1369.54 1211.91 L1370.13 1211.91 L1370.71 1211.91 L1371.3 1211.91 L1371.88 1211.91 L1372.47 1211.91 L1373.06 1211.91 L1373.64 1211.91 L1374.23 1211.91 L1374.82 1211.91 L1375.4 1211.91 L1375.99 1211.91 L1376.58 1211.91 L1377.16 1211.91 L1377.75 1211.91 L1378.34 1211.91 L1378.92 1211.91 L1379.51 1211.91 L1380.09 1211.91 L1380.68 1211.91 L1381.27 1211.91 L1381.85 1211.91 L1382.44 1211.91 L1383.03 1211.91 L1383.61 1211.91 L1384.2 1211.91 L1384.79 1211.91 L1385.37 1211.91 L1385.96 1211.91 L1386.55 1211.91 L1387.13 1211.91 L1387.72 1211.91 L1388.3 1211.91 L1388.89 1211.91 L1389.48 1211.91 L1390.06 1211.91 L1390.65 1211.91 L1391.24 1211.91 L1391.82 1211.91 L1392.41 1211.91 L1393 1211.91 L1393.58 1211.91 L1394.17 1211.91 L1394.75 1211.91 L1395.34 1211.91 L1395.93 1211.91 L1396.51 1211.91 L1397.1 1211.91 L1397.69 1211.91 L1398.27 1211.91 L1398.86 1211.91 L1399.45 1211.91 L1400.03 1211.91 L1400.62 1211.91 L1401.21 1211.91 L1401.79 1211.91 L1402.38 1211.91 L1402.96 1211.91 L1403.55 1211.91 L1404.14 1211.91 L1404.72 1211.91 L1405.31 1211.91 L1405.9 1211.91 L1406.48 1211.91 L1407.07 1211.91 L1407.66 1211.91 L1408.24 1211.91 L1408.83 1211.91 L1409.42 1211.91 L1410 1211.91 L1410.59 1211.91 L1411.17 1211.91 L1411.76 1211.91 L1412.35 1211.91 L1412.93 1211.91 L1413.52 1211.91 L1414.11 1211.91 L1414.69 1211.91 L1415.28 1211.91 L1415.87 1211.91 L1416.45 1211.91 L1417.04 1211.91 L1417.63 1211.91 L1418.21 1211.91 L1418.8 1211.91 L1419.38 1211.91 L1419.97 1211.91 L1420.56 1211.91 L1421.14 1211.91 L1421.73 1211.91 L1422.32 1211.91 L1422.9 1211.91 L1423.49 1211.91 L1424.08 1211.91 L1424.66 1211.91 L1425.25 1211.91 L1425.83 1211.91 L1426.42 1211.91 L1427.01 1211.91 L1427.59 1211.91 L1428.18 1211.91 L1428.77 1211.91 L1429.35 1211.91 L1429.94 1211.91 L1430.53 1211.91 L1431.11 1211.91 L1431.7 1211.91 L1432.29 1211.91 L1432.87 1211.91 L1433.46 1211.91 L1434.04 1211.91 L1434.63 1211.91 L1435.22 1211.91 L1435.8 1211.91 L1436.39 1211.91 L1436.98 1211.91 L1437.56 1211.91 L1438.15 1211.91 L1438.74 1211.91 L1439.32 1211.91 L1439.91 1211.91 L1440.5 1211.91 L1441.08 1211.91 L1441.67 1211.91 L1442.25 1211.91 L1442.84 1211.91 L1443.43 1211.91 L1444.01 1211.91 L1444.6 1211.91 L1445.19 1211.91 L1445.77 1211.91 L1446.36 1211.91 L1446.95 1211.91 L1447.53 1211.91 L1448.12 1211.91 L1448.7 1211.91 L1449.29 1211.91 L1449.88 1211.91 L1450.46 1211.91 L1451.05 1211.91 L1451.64 1211.91 L1452.22 1211.91 L1452.81 1211.91 L1453.4 1211.91 L1453.98 1211.91 L1454.57 1211.91 L1455.16 1211.91 L1455.74 1211.91 L1456.33 1211.91 L1456.91 1211.91 L1457.5 1211.91 L1458.09 1211.91 L1458.67 1211.91 L1459.26 1211.91 L1459.85 1211.91 L1460.43 1211.91 L1461.02 1211.91 L1461.61 1211.91 L1462.19 1211.91 L1462.78 1211.91 L1463.37 1211.91 L1463.95 1211.91 L1464.54 1211.91 L1465.12 1211.91 L1465.71 1211.91 L1466.3 1211.91 L1466.88 1211.91 L1467.47 1211.91 L1468.06 1211.91 L1468.64 1211.91 L1469.23 1211.91 L1469.82 1211.91 L1470.4 1211.91 L1470.99 1211.91 L1471.57 1211.91 L1472.16 1211.91 L1472.75 1211.91 L1473.33 1211.91 L1473.92 1211.91 L1474.51 1211.91 L1475.09 1211.91 L1475.68 1211.91 L1476.27 1211.91 L1476.85 1211.91 L1477.44 1211.91 L1478.03 1211.91 L1478.61 1211.91 L1479.2 1211.91 L1479.78 1211.91 L1480.37 1211.91 L1480.96 1211.91 L1481.54 1211.91 L1482.13 1211.91 L1482.72 1211.91 L1483.3 1211.91 L1483.89 1211.91 L1484.48 1211.91 L1485.06 1211.91 L1485.65 1211.91 L1486.24 1211.91 L1486.82 1211.91 L1487.41 1211.91 L1487.99 1211.91 L1488.58 1211.91 L1489.17 1211.91 L1489.75 1211.91 L1490.34 1211.91 L1490.93 1211.91 L1491.51 1211.91 L1492.1 1211.91 L1492.69 1211.91 L1493.27 1211.91 L1493.86 1211.91 L1494.45 1211.91 L1495.03 1211.91 L1495.62 1211.91 L1496.2 1211.91 L1496.79 1211.91 L1497.38 1211.91 L1497.96 1211.91 L1498.55 1211.91 L1499.14 1211.91 L1499.72 1211.91 L1500.31 1211.91 L1500.9 1211.91 L1501.48 1211.91 L1502.07 1211.91 L1502.65 1211.91 L1503.24 1211.91 L1503.83 1211.91 L1504.41 1211.91 L1505 1211.91 L1505.59 1211.91 L1506.17 1211.91 L1506.76 1211.91 L1507.35 1211.91 L1507.93 1211.91 L1508.52 1211.91 L1509.11 1211.91 L1509.69 1211.91 L1510.28 1211.91 L1510.86 1211.91 L1511.45 1211.91 L1512.04 1211.91 L1512.62 1211.91 L1513.21 1211.91 L1513.8 1211.91 L1514.38 1211.91 L1514.97 1211.91 L1515.56 1211.91 L1516.14 1211.91 L1516.73 1211.91 L1517.32 1211.91 L1517.9 1211.91 L1518.49 1211.91 L1519.07 1211.91 L1519.66 1211.91 L1520.25 1211.91 L1520.83 1211.91 L1521.42 1211.91 L1522.01 1211.91 L1522.59 1211.91 L1523.18 1211.91 L1523.77 1211.91 L1524.35 1211.91 L1524.94 1211.91 L1525.52 1211.91 L1526.11 1211.91 L1526.7 1211.91 L1527.28 1211.91 L1527.87 1211.91 L1528.46 1211.91 L1529.04 1211.91 L1529.63 1211.91 L1530.22 1211.91 L1530.8 1211.91 L1531.39 1211.91 L1531.98 1211.91 L1532.56 1211.91 L1533.15 1211.91 L1533.73 1211.91 L1534.32 1211.91 L1534.91 1211.91 L1535.49 1211.91 L1536.08 1211.91 L1536.67 1211.91 L1537.25 1211.91 L1537.84 1211.91 L1538.43 1211.91 L1539.01 1211.91 L1539.6 1211.91 L1540.19 1211.91 L1540.77 1211.91 L1541.36 1211.91 L1541.94 1211.91 L1542.53 1211.91 L1543.12 1211.91 L1543.7 1211.91 L1544.29 1211.91 L1544.88 1211.91 L1545.46 1211.91 L1546.05 1211.91 L1546.64 1211.91 L1547.22 1211.91 L1547.81 1211.91 L1548.4 1211.91 L1548.98 1211.91 L1549.57 1211.91 L1550.15 1211.91 L1550.74 1211.91 L1551.33 1211.91 L1551.91 1211.91 L1552.5 1211.91 L1553.09 1211.91 L1553.67 1211.91 L1554.26 1211.91 L1554.85 1211.91 L1555.43 1211.91 L1556.02 1211.91 L1556.6 1211.91 L1557.19 1211.91 L1557.78 1211.91 L1558.36 1211.91 L1558.95 1211.91 L1559.54 1211.91 L1560.12 1211.91 L1560.71 1211.91 L1561.3 1211.91 L1561.88 1211.91 L1562.47 1211.91 L1563.06 1211.91 L1563.64 1211.91 L1564.23 1211.91 L1564.81 1211.91 L1565.4 1211.91 L1565.99 1211.91 L1566.57 1211.91 L1567.16 1211.91 L1567.75 1211.91 L1568.33 1211.91 L1568.92 1211.91 L1569.51 1211.91 L1570.09 1211.91 L1570.68 1211.91 L1571.27 1211.91 L1571.85 1211.91 L1572.44 1211.91 L1573.02 1211.91 L1573.61 1211.91 L1574.2 1211.91 L1574.78 1211.91 L1575.37 1211.91 L1575.96 1211.91 L1576.54 1211.91 L1577.13 1211.91 L1577.72 1211.91 L1578.3 1211.91 L1578.89 1211.91 L1579.47 1211.91 L1580.06 1211.91 L1580.65 1211.91 L1581.23 1211.91 L1581.82 1211.91 L1582.41 1211.91 L1582.99 1211.91 L1583.58 1211.91 L1584.17 1211.91 L1584.75 1211.91 L1585.34 1211.91 L1585.93 1211.91 L1586.51 1211.91 L1587.1 1211.91 L1587.68 1211.91 L1588.27 1211.91 L1588.86 1211.91 L1589.44 1211.91 L1590.03 1211.91 L1590.62 1211.91 L1591.2 1211.91 L1591.79 1211.91 L1592.38 1211.91 L1592.96 1211.91 L1593.55 1211.91 L1594.14 1211.91 L1594.72 1211.91 L1595.31 1211.91 L1595.89 1211.91 L1596.48 1211.91 L1597.07 1211.91 L1597.65 1211.91 L1598.24 1211.91 L1598.83 1211.91 L1599.41 1211.91 L1600 1211.91 L1600.59 1211.91 L1601.17 1211.91 L1601.76 1211.91 L1602.34 1211.91 L1602.93 1211.91 L1603.52 1211.91 L1604.1 1211.91 L1604.69 1211.91 L1605.28 1211.91 L1605.86 1211.91 L1606.45 1211.91 L1607.04 1211.91 L1607.62 1211.91 L1608.21 1211.91 L1608.8 1211.91 L1609.38 1211.91 L1609.97 1211.91 L1610.55 1211.91 L1611.14 1211.91 L1611.73 1211.91 L1612.31 1211.91 L1612.9 1211.91 L1613.49 1211.91 L1614.07 1211.91 L1614.66 1211.91 L1615.25 1211.91 L1615.83 1211.91 L1616.42 1211.91 L1617.01 1211.91 L1617.59 1211.91 L1618.18 1211.91 L1618.76 1211.91 L1619.35 1211.91 L1619.94 1211.91 L1620.52 1211.91 L1621.11 1211.91 L1621.7 1211.91 L1622.28 1211.91 L1622.87 1211.91 L1623.46 1211.91 L1624.04 1211.91 L1624.63 1211.91 L1625.22 1211.91 L1625.8 1211.91 L1626.39 1211.91 L1626.97 1211.91 L1627.56 1211.91 L1628.15 1211.91 L1628.73 1211.91 L1629.32 1211.91 L1629.91 1211.91 L1630.49 1211.91 L1631.08 1211.91 L1631.67 1211.91 L1632.25 1211.91 L1632.84 1211.91 L1633.42 1211.91 L1634.01 1211.91 L1634.6 1211.91 L1635.18 1211.91 L1635.77 1211.91 L1636.36 1211.91 L1636.94 1211.91 L1637.53 1211.91 L1638.12 1211.91 L1638.7 1211.91 L1639.29 1211.91 L1639.88 1211.91 L1640.46 1211.91 L1641.05 1211.91 L1641.63 1211.91 L1642.22 1211.91 L1642.81 1211.91 L1643.39 1211.91 L1643.98 1211.91 L1644.57 1211.91 L1645.15 1211.91 L1645.74 1211.91 L1646.33 1211.91 L1646.91 1211.91 L1647.5 1211.91 L1648.09 1211.91 L1648.67 1211.91 L1649.26 1211.91 L1649.84 1211.91 L1650.43 1211.91 L1651.02 1211.91 L1651.6 1211.91 L1652.19 1211.91 L1652.78 1211.91 L1653.36 1211.91 L1653.95 1211.91 L1654.54 1211.91 L1655.12 1211.91 L1655.71 1211.91 L1656.29 1211.91 L1656.88 1211.91 L1657.47 1211.91 L1658.05 1211.91 L1658.64 1211.91 L1659.23 1211.91 L1659.81 1211.91 L1660.4 1211.91 L1660.99 1211.91 L1661.57 1211.91 L1662.16 1211.91 L1662.75 1211.91 L1663.33 1211.91 L1663.92 1211.91 L1664.5 1211.91 L1665.09 1211.91 L1665.68 1211.91 L1666.26 1211.91 L1666.85 1211.91 L1667.44 1211.91 L1668.02 1211.91 L1668.61 1211.91 L1669.2 1211.91 L1669.78 1211.91 L1670.37 1211.91 L1670.96 1211.91 L1671.54 1211.91 L1672.13 1211.91 L1672.71 1211.91 L1673.3 1211.91 L1673.89 1211.91 L1674.47 1211.91 L1675.06 1211.91 L1675.65 1211.91 L1676.23 1211.91 L1676.82 1211.91 L1677.41 1211.91 L1677.99 1211.91 L1678.58 1211.91 L1679.17 1211.91 L1679.75 1211.91 L1680.34 1211.91 L1680.92 1211.91 L1681.51 1211.91 L1682.1 1211.91 L1682.68 1211.91 L1683.27 1211.91 L1683.86 1211.91 L1684.44 1211.91 L1685.03 1211.91 L1685.62 1211.91 L1686.2 1211.91 L1686.79 1211.91 L1687.37 1211.91 L1687.96 1211.91 L1688.55 1211.91 L1689.13 1211.91 L1689.72 1211.91 L1690.31 1211.91 L1690.89 1211.91 L1691.48 1211.91 L1692.07 1211.91 L1692.65 1211.91 L1693.24 1211.91 L1693.83 1211.91 L1694.41 1211.91 L1695 1211.91 L1695.58 1211.91 L1696.17 1211.91 L1696.76 1211.91 L1697.34 1211.91 L1697.93 1211.91 L1698.52 1211.91 L1699.1 1211.91 L1699.69 1211.91 L1700.28 1211.91 L1700.86 1211.91 L1701.45 1211.91 L1702.04 1211.91 L1702.62 1211.91 L1703.21 1211.91 L1703.79 1211.91 L1704.38 1211.91 L1704.97 1211.91 L1705.55 1211.91 L1706.14 1211.91 L1706.73 1211.91 L1707.31 1211.91 L1707.9 1211.91 L1708.49 1211.91 L1709.07 1211.91 L1709.66 1211.91 L1710.24 1211.91 L1710.83 1211.91 L1711.42 1211.91 L1712 1211.91 L1712.59 1211.91 L1713.18 1211.91 L1713.76 1211.91 L1714.35 1211.91 L1714.94 1211.91 L1715.52 1211.91 L1716.11 1211.91 L1716.7 1211.91 L1717.28 1211.91 L1717.87 1211.91 L1718.45 1211.91 L1719.04 1211.91 L1719.63 1211.91 L1720.21 1211.91 L1720.8 1211.91 L1721.39 1211.91 L1721.97 1211.91 L1722.56 1211.91 L1723.15 1211.91 L1723.73 1211.91 L1724.32 1211.91 L1724.91 1211.91 L1725.49 1211.91 L1726.08 1211.91 L1726.66 1211.91 L1727.25 1211.91 L1727.84 1211.91 L1728.42 1211.91 L1729.01 1211.91 L1729.6 1211.91 L1730.18 1211.91 L1730.77 1211.91 L1731.36 1211.91 L1731.94 1211.91 L1732.53 1211.91 L1733.11 1211.91 L1733.7 1211.91 L1734.29 1211.91 L1734.87 1211.91 L1735.46 1211.91 L1736.05 1211.91 L1736.63 1211.91 L1737.22 1211.91 L1737.81 1211.91 L1738.39 1211.91 L1738.98 1211.91 L1739.57 1211.91 L1740.15 1211.91 L1740.74 1211.91 L1741.32 1211.91 L1741.91 1211.91 L1742.5 1211.91 L1743.08 1211.91 L1743.67 1211.91 L1744.26 1211.91 L1744.84 1211.91 L1745.43 1211.91 L1746.02 1211.91 L1746.6 1211.91 L1747.19 1211.91 L1747.78 1211.91 L1748.36 1211.91 L1748.95 1211.91 L1749.53 1211.91 L1750.12 1211.91 L1750.71 1211.91 L1751.29 1211.91 L1751.88 1211.91 L1752.47 1211.91 L1753.05 1211.91 L1753.64 1211.91 L1754.23 1211.91 L1754.81 1211.91 L1755.4 1211.91 L1755.99 1211.91 L1756.57 1211.91 L1757.16 1211.91 L1757.74 1211.91 L1758.33 1211.91 L1758.92 1211.91 L1759.5 1211.91 L1760.09 1211.91 L1760.68 1211.91 L1761.26 1211.91 L1761.85 1211.91 L1762.44 1211.91 L1763.02 1211.91 L1763.61 1211.91 L1764.19 1211.91 L1764.78 1211.91 L1765.37 1211.91 L1765.95 1211.91 L1766.54 1211.91 L1767.13 1211.91 L1767.71 1211.91 L1768.3 1211.91 L1768.89 1211.91 L1769.47 1211.91 L1770.06 1211.91 L1770.65 1211.91 L1771.23 1211.91 L1771.82 1211.91 L1772.4 1211.91 L1772.99 1211.91 L1773.58 1211.91 L1774.16 1211.91 L1774.75 1211.91 L1775.34 1211.91 L1775.92 1211.91 L1776.51 1211.91 L1777.1 1211.91 L1777.68 1211.91 L1778.27 1211.91 L1778.86 1211.91 L1779.44 1211.91 L1780.03 1211.91 L1780.61 1211.91 L1781.2 1211.91 L1781.79 1211.91 L1782.37 1211.91 L1782.96 1211.91 L1783.55 1211.91 L1784.13 1211.91 L1784.72 1211.91 L1785.31 1211.91 L1785.89 1211.91 L1786.48 1211.91 L1787.06 1211.91 L1787.65 1211.91 L1788.24 1211.91 L1788.82 1211.91 L1789.41 1211.91 L1790 1211.91 L1790.58 1211.91 L1791.17 1211.91 L1791.76 1211.91 L1792.34 1211.91 L1792.93 1211.91 L1793.52 1211.91 L1794.1 1211.91 L1794.69 1211.91 L1795.27 1211.91 L1795.86 1211.91 L1796.45 1211.91 L1797.03 1211.91 L1797.62 1211.91 L1798.21 1211.91 L1798.79 1211.91 L1799.38 1211.91 L1799.97 1211.91 L1800.55 1211.91 L1801.14 1211.91 L1801.73 1211.91 L1802.31 1211.91 L1802.9 1211.91 L1803.48 1211.91 L1804.07 1211.91 L1804.66 1211.91 L1805.24 1211.91 L1805.83 1211.91 L1806.42 1211.91 L1807 1211.91 L1807.59 1211.91 L1808.18 1211.91 L1808.76 1211.91 L1809.35 1211.91 L1809.94 1211.91 L1810.52 1211.91 L1811.11 1211.91 L1811.69 1211.91 L1812.28 1211.91 L1812.87 1211.91 L1813.45 1211.91 L1814.04 1211.91 L1814.63 1211.91 L1815.21 1211.91 L1815.8 1211.91 L1816.39 1211.91 L1816.97 1211.91 L1817.56 1211.91 L1818.14 1211.91 L1818.73 1211.91 L1819.32 1211.91 L1819.9 1211.91 L1820.49 1211.91 L1821.08 1211.91 L1821.66 1211.91 L1822.25 1211.91 L1822.84 1211.91 L1823.42 1211.91 L1824.01 1211.91 L1824.6 1211.91 L1825.18 1211.91 L1825.77 1211.91 L1826.35 1211.91 L1826.94 1211.91 L1827.53 1211.91 L1828.11 1211.91 L1828.7 1211.91 L1829.29 1211.91 L1829.87 1211.91 L1830.46 1211.91 L1831.05 1211.91 L1831.63 1211.91 L1832.22 1211.91 L1832.81 1211.91 L1833.39 1211.91 L1833.98 1211.91 L1834.56 1211.91 L1835.15 1211.91 L1835.74 1211.91 L1836.32 1211.91 L1836.91 1211.91 L1837.5 1211.91 L1838.08 1211.91 L1838.67 1211.91 L1839.26 1211.91 L1839.84 1211.91 L1840.43 1211.91 L1841.01 1211.91 L1841.6 1211.91 L1842.19 1211.91 L1842.77 1211.91 L1843.36 1211.91 L1843.95 1211.91 L1844.53 1211.91 L1845.12 1211.91 L1845.71 1211.91 L1846.29 1211.91 L1846.88 1211.91 L1847.47 1211.91 L1848.05 1211.91 L1848.64 1211.91 L1849.22 1211.91 L1849.81 1211.91 L1850.4 1211.91 L1850.98 1211.91 L1851.57 1211.91 L1852.16 1211.91 L1852.74 1211.91 L1853.33 1211.91 L1853.92 1211.91 L1854.5 1211.91 L1855.09 1211.91 L1855.68 1211.91 L1856.26 1211.91 L1856.85 1211.91 L1857.43 1211.91 L1858.02 1211.91 L1858.61 1211.91 L1859.19 1211.91 L1859.78 1211.91 L1860.37 1211.91 L1860.95 1211.91 L1861.54 1211.91 L1862.13 1211.91 L1862.71 1211.91 L1863.3 1211.91 L1863.88 1211.91 L1864.47 1211.91 L1865.06 1211.91 L1865.64 1211.91 L1866.23 1211.91 L1866.82 1211.91 L1867.4 1211.91 L1867.99 1211.91 L1868.58 1211.91 L1869.16 1211.91 L1869.75 1211.91 L1870.34 1211.91 L1870.92 1211.91 L1871.51 1211.91 L1872.09 1211.91 L1872.68 1211.91 L1873.27 1211.91 L1873.85 1211.91 L1874.44 1211.91 L1875.03 1211.91 L1875.61 1211.91 L1876.2 1211.91 L1876.79 1211.91 L1877.37 1211.91 L1877.96 1211.91 L1878.55 1211.91 L1879.13 1211.91 L1879.72 1211.91 L1880.3 1211.91 L1880.89 1211.91 L1881.48 1211.91 L1882.06 1211.91 L1882.65 1211.91 L1883.24 1211.91 L1883.82 1211.91 L1884.41 1211.91 L1885 1211.91 L1885.58 1211.91 L1886.17 1211.91 L1886.76 1211.91 L1887.34 1211.91 L1887.93 1211.91 L1888.51 1211.91 L1889.1 1211.91 L1889.69 1211.91 L1890.27 1211.91 L1890.86 1211.91 L1891.45 1211.91 L1892.03 1211.91 L1892.62 1211.91 L1893.21 1211.91 L1893.79 1211.91 L1894.38 1211.91 L1894.96 1211.91 L1895.55 1211.91 L1896.14 1211.91 L1896.72 1211.91 L1897.31 1211.91 L1897.9 1211.91 L1898.48 1211.91 L1899.07 1211.91 L1899.66 1211.91 L1900.24 1211.91 L1900.83 1211.91 L1901.42 1211.91 L1902 1211.91 L1902.59 1211.91 L1903.17 1211.91 L1903.76 1211.91 L1904.35 1211.91 L1904.93 1211.91 L1905.52 1211.91 L1906.11 1211.91 L1906.69 1211.91 L1907.28 1211.91 L1907.87 1211.91 L1908.45 1211.91 L1909.04 1211.91 L1909.63 1211.91 L1910.21 1211.91 L1910.8 1211.91 L1911.38 1211.91 L1911.97 1211.91 L1912.56 1211.91 L1913.14 1211.91 L1913.73 1211.91 L1914.32 1211.91 L1914.9 1211.91 L1915.49 1211.91 L1916.08 1211.91 L1916.66 1211.91 L1917.25 1211.91 L1917.83 1211.91 L1918.42 1211.91 L1919.01 1211.91 L1919.59 1211.91 L1920.18 1211.91 L1920.77 1211.91 L1921.35 1211.91 L1921.94 1211.91 L1922.53 1211.91 L1923.11 1211.91 L1923.7 1211.91 L1924.29 1211.91 L1924.87 1211.91 L1925.46 1211.91 L1926.04 1211.91 L1926.63 1211.91 L1927.22 1211.91 L1927.8 1211.91 L1928.39 1211.91 L1928.98 1211.91 L1929.56 1211.91 L1930.15 1211.91 L1930.74 1211.91 L1931.32 1211.91 L1931.91 1211.91 L1932.5 1211.91 L1933.08 1211.91 L1933.67 1211.91 L1934.25 1211.91 L1934.84 1211.91 L1935.43 1211.91 L1936.01 1211.91 L1936.6 1211.91 L1937.19 1211.91 L1937.77 1211.91 L1938.36 1211.91 L1938.95 1211.91 L1939.53 1211.91 L1940.12 1211.91 L1940.71 1211.91 L1941.29 1211.91 L1941.88 1211.91 L1942.46 1211.91 L1943.05 1211.91 L1943.64 1211.91 L1944.22 1211.91 L1944.81 1211.91 L1945.4 1211.91 L1945.98 1211.91 L1946.57 1211.91 L1947.16 1211.91 L1947.74 1211.91 L1948.33 1211.91 L1948.91 1211.91 L1949.5 1211.91 L1950.09 1211.91 L1950.67 1211.91 L1951.26 1211.91 L1951.85 1211.91 L1952.43 1211.91 L1953.02 1211.91 L1953.61 1211.91 L1954.19 1211.91 L1954.78 1211.91 L1955.37 1211.91 L1955.95 1211.91 L1956.54 1211.91 L1957.12 1211.91 L1957.71 1211.91 L1958.3 1211.91 L1958.88 1211.91 L1959.47 1211.91 L1960.06 1211.91 L1960.64 1211.91 L1961.23 1211.91 L1961.82 1211.91 L1962.4 1211.91 L1962.99 1211.91 L1963.58 1211.91 L1964.16 1211.91 L1964.75 1211.91 L1965.33 1211.91 L1965.92 1211.91 L1966.51 1211.91 L1967.09 1211.91 L1967.68 1211.91 L1968.27 1211.91 L1968.85 1211.91 L1969.44 1211.91 L1970.03 1211.91 L1970.61 1211.91 L1971.2 1211.91 L1971.78 1211.91 L1972.37 1211.91 L1972.96 1211.91 L1973.54 1211.91 L1974.13 1211.91 L1974.72 1211.91 L1975.3 1211.91 L1975.89 1211.91 L1976.48 1211.91 L1977.06 1211.91 L1977.65 1211.91 L1978.24 1211.91 L1978.82 1211.91 L1979.41 1211.91 L1979.99 1211.91 L1980.58 1211.91 L1981.17 1211.91 L1981.75 1211.91 L1982.34 1211.91 L1982.93 1211.91 L1983.51 1211.91 L1984.1 1211.91 L1984.69 1211.91 L1985.27 1211.91 L1985.86 1211.91 L1986.45 1211.91 L1987.03 1211.91 L1987.62 1211.91 L1988.2 1211.91 L1988.79 1211.91 L1989.38 1211.91 L1989.96 1211.91 L1990.55 1211.91 L1991.14 1211.91 L1991.72 1211.91 L1992.31 1211.91 L1992.9 1211.91 L1993.48 1211.91 L1994.07 1211.91 L1994.65 1211.91 L1995.24 1211.91 L1995.83 1211.91 L1996.41 1211.91 L1997 1211.91 L1997.59 1211.91 L1998.17 1211.91 L1998.76 1211.91 L1999.35 1211.91 L1999.93 1211.91 L2000.52 1211.91 L2001.11 1211.91 L2001.69 1211.91 L2002.28 1211.91 L2002.86 1211.91 L2003.45 1211.91 L2004.04 1211.91 L2004.62 1211.91 L2005.21 1211.91 L2005.8 1211.91 L2006.38 1211.91 L2006.97 1211.91 L2007.56 1211.91 L2008.14 1211.91 L2008.73 1211.91 L2009.32 1211.91 L2009.9 1211.91 L2010.49 1211.91 L2011.07 1211.91 L2011.66 1211.91 L2012.25 1211.91 L2012.83 1211.91 L2013.42 1211.91 L2014.01 1211.91 L2014.59 1211.91 L2015.18 1211.91 L2015.77 1211.91 L2016.35 1211.91 L2016.94 1211.91 L2017.53 1211.91 L2018.11 1211.91 L2018.7 1211.91 L2019.28 1211.91 L2019.87 1211.91 L2020.46 1211.91 L2021.04 1211.91 L2021.63 1211.91 L2022.22 1211.91 L2022.8 1211.91 L2023.39 1211.91 L2023.98 1211.91 L2024.56 1211.91 L2025.15 1211.91 L2025.73 1211.91 L2026.32 1211.91 L2026.91 1211.91 L2027.49 1211.91 L2028.08 1211.91 L2028.67 1211.91 L2029.25 1211.91 L2029.84 1211.91 L2030.43 1211.91 L2031.01 1211.91 L2031.6 1211.91 L2032.19 1211.91 L2032.77 1211.91 L2033.36 1211.91 L2033.94 1211.91 L2034.53 1211.91 L2035.12 1211.91 L2035.7 1211.91 L2036.29 1211.91 L2036.88 1211.91 L2037.46 1211.91 L2038.05 1211.91 L2038.64 1211.91 L2039.22 1211.91 L2039.81 1211.91 L2040.4 1211.91 L2040.98 1211.91 L2041.57 1211.91 L2042.15 1211.91 L2042.74 1211.91 L2043.33 1211.91 L2043.91 1211.91 L2044.5 1211.91 L2045.09 1211.91 L2045.67 1211.91 L2046.26 1211.91 L2046.85 1211.91 L2047.43 1211.91 L2048.02 1211.91 L2048.6 1211.91 L2049.19 1211.91 L2049.78 1211.91 L2050.36 1211.91 L2050.95 1211.91 L2051.54 1211.91 L2052.12 1211.91 L2052.71 1211.91 L2053.3 1211.91 L2053.88 1211.91 L2054.47 1211.91 L2055.06 1211.91 L2055.64 1211.91 L2056.23 1211.91 L2056.81 1211.91 L2057.4 1211.91 L2057.99 1211.91 L2058.57 1211.91 L2059.16 1211.91 L2059.75 1211.91 L2060.33 1211.91 L2060.92 1211.91 L2061.51 1211.91 L2062.09 1211.91 L2062.68 1211.91 L2063.27 1211.91 L2063.85 1211.91 L2064.44 1211.91 L2065.02 1211.91 L2065.61 1211.91 L2066.2 1211.91 L2066.78 1211.91 L2067.37 1211.91 L2067.96 1211.91 L2068.54 1211.91 L2069.13 1211.91 L2069.72 1211.91 L2070.3 1211.91 L2070.89 1211.91 L2071.48 1211.91 L2072.06 1211.91 L2072.65 1211.91 L2073.23 1211.91 L2073.82 1211.91 L2074.41 1211.91 L2074.99 1211.91 L2075.58 1211.91 L2076.17 1211.91 L2076.75 1211.91 L2077.34 1211.91 L2077.93 1211.91 L2078.51 1211.91 L2079.1 1211.91 L2079.68 1211.91 L2080.27 1211.91 L2080.86 1211.91 L2081.44 1211.91 L2082.03 1211.91 L2082.62 1211.91 L2083.2 1211.91 L2083.79 1211.91 L2084.38 1211.91 L2084.96 1211.91 L2085.55 1211.91 L2086.14 1211.91 L2086.72 1211.91 L2087.31 1211.91 L2087.89 1211.91 L2088.48 1211.91 L2089.07 1211.91 L2089.65 1211.91 L2090.24 1211.91 L2090.83 1211.91 L2091.41 1211.91 L2092 1211.91 L2092.59 1211.91 L2093.17 1211.91 L2093.76 1211.91 L2094.35 1211.91 L2094.93 1211.91 L2095.52 1211.91 L2096.1 1211.91 L2096.69 1211.91 L2097.28 1211.91 L2097.86 1211.91 L2098.45 1211.91 L2099.04 1211.91 L2099.62 1211.91 L2100.21 1211.91 L2100.8 1211.91 L2101.38 1211.91 L2101.97 1211.91 L2102.55 1211.91 L2103.14 1211.91 L2103.73 1211.91 L2104.31 1211.91 L2104.9 1211.91 L2105.49 1211.91 L2106.07 1211.91 L2106.66 1211.91 L2107.25 1211.91 L2107.83 1211.91 L2108.42 1211.91 L2109.01 1211.91 L2109.59 1211.91 L2110.18 1211.91 L2110.76 1211.91 L2111.35 1211.91 L2111.94 1211.91 L2112.52 1211.91 L2113.11 1211.91 L2113.7 1211.91 L2114.28 1211.91 L2114.87 1211.91 L2115.46 1211.91 L2116.04 1211.91 L2116.63 1211.91 L2117.22 1211.91 L2117.8 1211.91 L2118.39 1211.91 L2118.97 1211.91 L2119.56 1211.91 L2120.15 1211.91 L2120.73 1211.91 L2121.32 1211.91 L2121.91 1211.91 L2122.49 1211.91 L2123.08 1211.91 L2123.67 1211.91 L2124.25 1211.91 L2124.84 1211.91 L2125.42 1211.91 L2126.01 1211.91 L2126.6 1211.91 L2127.18 1211.91 L2127.77 1211.91 L2128.36 1211.91 L2128.94 1211.91 L2129.53 1211.91 L2130.12 1211.91 L2130.7 1211.91 L2131.29 1211.91 L2131.88 1211.91 L2132.46 1211.91 L2133.05 1211.91 L2133.63 1211.91 L2134.22 1211.91 L2134.81 1211.91 L2135.39 1211.91 L2135.98 1211.91 L2136.57 1211.91 L2137.15 1211.91 L2137.74 1211.91 L2138.33 1211.91 L2138.91 1211.91 L2139.5 1211.91 L2140.09 1211.91 L2140.67 1211.91 L2141.26 1211.91 L2141.84 1211.91 L2142.43 1211.91 L2143.02 1211.91 L2143.6 1211.91 L2144.19 1211.91 L2144.78 1211.91 L2145.36 1211.91 L2145.95 1211.91 L2146.54 1211.91 L2147.12 1211.91 L2147.71 1211.91 L2148.3 1211.91 L2148.88 1211.91 L2149.47 1211.91 L2150.05 1211.91 L2150.64 1211.91 L2151.23 1211.91 L2151.81 1211.91 L2152.4 1211.91 L2152.99 1211.91 L2153.57 1211.91 L2154.16 1211.91 L2154.75 1211.91 L2155.33 1211.91 L2155.92 1211.91 L2156.5 1211.91 L2157.09 1211.91 L2157.68 1211.91 L2158.26 1211.91 L2158.26 1211.26 L2157.68 1211.26 L2157.09 1211.26 L2156.5 1211.26 L2155.92 1211.26 L2155.33 1211.26 L2154.75 1211.26 L2154.16 1211.26 L2153.57 1211.26 L2152.99 1211.26 L2152.4 1211.26 L2151.81 1211.26 L2151.23 1211.26 L2150.64 1211.26 L2150.05 1211.26 L2149.47 1211.26 L2148.88 1211.26 L2148.3 1211.26 L2147.71 1211.26 L2147.12 1211.26 L2146.54 1211.26 L2145.95 1211.26 L2145.36 1211.26 L2144.78 1211.26 L2144.19 1211.26 L2143.6 1211.26 L2143.02 1211.26 L2142.43 1211.26 L2141.84 1211.26 L2141.26 1211.26 L2140.67 1211.26 L2140.09 1211.26 L2139.5 1211.26 L2138.91 1211.26 L2138.33 1211.26 L2137.74 1211.26 L2137.15 1211.26 L2136.57 1211.26 L2135.98 1211.26 L2135.39 1211.26 L2134.81 1211.26 L2134.22 1211.26 L2133.63 1211.26 L2133.05 1211.26 L2132.46 1211.26 L2131.88 1211.26 L2131.29 1211.26 L2130.7 1211.26 L2130.12 1211.26 L2129.53 1211.26 L2128.94 1211.26 L2128.36 1211.26 L2127.77 1211.26 L2127.18 1211.26 L2126.6 1211.26 L2126.01 1211.26 L2125.42 1211.26 L2124.84 1211.26 L2124.25 1211.26 L2123.67 1211.26 L2123.08 1211.26 L2122.49 1211.26 L2121.91 1211.26 L2121.32 1211.26 L2120.73 1211.26 L2120.15 1211.26 L2119.56 1211.26 L2118.97 1211.26 L2118.39 1211.26 L2117.8 1211.26 L2117.22 1211.26 L2116.63 1211.26 L2116.04 1211.26 L2115.46 1211.26 L2114.87 1211.26 L2114.28 1211.26 L2113.7 1211.26 L2113.11 1211.26 L2112.52 1211.26 L2111.94 1211.26 L2111.35 1211.26 L2110.76 1211.26 L2110.18 1211.26 L2109.59 1211.26 L2109.01 1211.26 L2108.42 1211.26 L2107.83 1211.26 L2107.25 1211.26 L2106.66 1211.26 L2106.07 1211.26 L2105.49 1211.26 L2104.9 1211.26 L2104.31 1211.26 L2103.73 1211.26 L2103.14 1211.26 L2102.55 1211.26 L2101.97 1211.26 L2101.38 1211.26 L2100.8 1211.26 L2100.21 1211.26 L2099.62 1211.26 L2099.04 1211.26 L2098.45 1211.26 L2097.86 1211.26 L2097.28 1211.26 L2096.69 1211.26 L2096.1 1211.26 L2095.52 1211.26 L2094.93 1211.26 L2094.35 1211.26 L2093.76 1211.26 L2093.17 1211.26 L2092.59 1211.26 L2092 1211.26 L2091.41 1211.26 L2090.83 1211.26 L2090.24 1211.26 L2089.65 1211.26 L2089.07 1211.26 L2088.48 1211.26 L2087.89 1211.26 L2087.31 1211.26 L2086.72 1211.26 L2086.14 1211.26 L2085.55 1211.26 L2084.96 1211.26 L2084.38 1211.26 L2083.79 1211.26 L2083.2 1211.26 L2082.62 1211.26 L2082.03 1211.26 L2081.44 1211.26 L2080.86 1211.26 L2080.27 1211.26 L2079.68 1211.26 L2079.1 1211.26 L2078.51 1211.26 L2077.93 1211.26 L2077.34 1211.26 L2076.75 1211.26 L2076.17 1211.26 L2075.58 1211.26 L2074.99 1211.26 L2074.41 1211.26 L2073.82 1211.26 L2073.23 1211.26 L2072.65 1211.26 L2072.06 1211.26 L2071.48 1211.26 L2070.89 1211.26 L2070.3 1211.26 L2069.72 1211.26 L2069.13 1211.26 L2068.54 1211.26 L2067.96 1211.26 L2067.37 1211.26 L2066.78 1211.26 L2066.2 1211.26 L2065.61 1211.26 L2065.02 1211.26 L2064.44 1211.26 L2063.85 1211.26 L2063.27 1211.26 L2062.68 1211.26 L2062.09 1211.26 L2061.51 1211.26 L2060.92 1211.26 L2060.33 1211.26 L2059.75 1211.26 L2059.16 1211.26 L2058.57 1211.26 L2057.99 1211.26 L2057.4 1211.26 L2056.81 1211.26 L2056.23 1211.26 L2055.64 1211.26 L2055.06 1211.26 L2054.47 1211.26 L2053.88 1211.26 L2053.3 1211.26 L2052.71 1211.26 L2052.12 1211.26 L2051.54 1211.26 L2050.95 1211.26 L2050.36 1211.26 L2049.78 1211.26 L2049.19 1211.26 L2048.6 1211.26 L2048.02 1211.26 L2047.43 1211.26 L2046.85 1211.26 L2046.26 1211.26 L2045.67 1211.26 L2045.09 1211.26 L2044.5 1211.26 L2043.91 1211.26 L2043.33 1211.26 L2042.74 1211.26 L2042.15 1211.26 L2041.57 1211.26 L2040.98 1211.26 L2040.4 1211.26 L2039.81 1211.26 L2039.22 1211.26 L2038.64 1211.26 L2038.05 1211.26 L2037.46 1211.26 L2036.88 1211.26 L2036.29 1211.26 L2035.7 1211.26 L2035.12 1211.26 L2034.53 1211.26 L2033.94 1211.26 L2033.36 1211.26 L2032.77 1211.26 L2032.19 1211.26 L2031.6 1211.26 L2031.01 1211.26 L2030.43 1211.26 L2029.84 1211.26 L2029.25 1211.26 L2028.67 1211.26 L2028.08 1211.26 L2027.49 1211.26 L2026.91 1211.26 L2026.32 1211.26 L2025.73 1211.26 L2025.15 1211.26 L2024.56 1211.26 L2023.98 1211.26 L2023.39 1211.26 L2022.8 1211.26 L2022.22 1211.26 L2021.63 1211.26 L2021.04 1211.26 L2020.46 1211.26 L2019.87 1211.26 L2019.28 1211.26 L2018.7 1211.26 L2018.11 1211.26 L2017.53 1211.26 L2016.94 1211.26 L2016.35 1211.26 L2015.77 1211.26 L2015.18 1211.26 L2014.59 1211.26 L2014.01 1211.26 L2013.42 1211.26 L2012.83 1211.26 L2012.25 1211.26 L2011.66 1211.26 L2011.07 1211.26 L2010.49 1211.26 L2009.9 1211.26 L2009.32 1211.26 L2008.73 1211.26 L2008.14 1211.26 L2007.56 1211.26 L2006.97 1211.26 L2006.38 1211.26 L2005.8 1211.26 L2005.21 1211.26 L2004.62 1211.26 L2004.04 1211.26 L2003.45 1211.26 L2002.86 1211.26 L2002.28 1211.26 L2001.69 1211.26 L2001.11 1211.26 L2000.52 1211.26 L1999.93 1211.26 L1999.35 1211.26 L1998.76 1211.26 L1998.17 1211.26 L1997.59 1211.26 L1997 1211.26 L1996.41 1211.26 L1995.83 1211.26 L1995.24 1211.26 L1994.65 1211.26 L1994.07 1211.26 L1993.48 1211.26 L1992.9 1211.26 L1992.31 1211.26 L1991.72 1211.26 L1991.14 1211.26 L1990.55 1211.26 L1989.96 1211.26 L1989.38 1211.26 L1988.79 1211.26 L1988.2 1211.26 L1987.62 1211.26 L1987.03 1211.26 L1986.45 1211.26 L1985.86 1211.26 L1985.27 1211.26 L1984.69 1211.26 L1984.1 1211.26 L1983.51 1211.26 L1982.93 1211.26 L1982.34 1211.26 L1981.75 1211.26 L1981.17 1211.26 L1980.58 1211.26 L1979.99 1211.26 L1979.41 1211.26 L1978.82 1211.26 L1978.24 1211.26 L1977.65 1211.26 L1977.06 1211.26 L1976.48 1211.26 L1975.89 1211.26 L1975.3 1211.26 L1974.72 1211.26 L1974.13 1211.26 L1973.54 1211.26 L1972.96 1211.26 L1972.37 1211.26 L1971.78 1211.26 L1971.2 1211.26 L1970.61 1211.26 L1970.03 1211.26 L1969.44 1211.26 L1968.85 1211.26 L1968.27 1211.26 L1967.68 1211.26 L1967.09 1211.26 L1966.51 1211.26 L1965.92 1211.26 L1965.33 1211.26 L1964.75 1211.26 L1964.16 1211.26 L1963.58 1211.26 L1962.99 1211.26 L1962.4 1211.26 L1961.82 1211.26 L1961.23 1211.26 L1960.64 1211.26 L1960.06 1211.26 L1959.47 1211.26 L1958.88 1211.26 L1958.3 1211.26 L1957.71 1211.26 L1957.12 1211.26 L1956.54 1211.26 L1955.95 1211.26 L1955.37 1211.26 L1954.78 1211.26 L1954.19 1211.26 L1953.61 1211.26 L1953.02 1211.26 L1952.43 1211.26 L1951.85 1211.26 L1951.26 1211.26 L1950.67 1211.26 L1950.09 1211.26 L1949.5 1211.26 L1948.91 1211.26 L1948.33 1211.26 L1947.74 1211.26 L1947.16 1211.26 L1946.57 1211.26 L1945.98 1211.26 L1945.4 1211.26 L1944.81 1211.26 L1944.22 1211.26 L1943.64 1211.26 L1943.05 1211.26 L1942.46 1211.26 L1941.88 1211.26 L1941.29 1211.26 L1940.71 1211.26 L1940.12 1211.26 L1939.53 1211.26 L1938.95 1211.26 L1938.36 1211.26 L1937.77 1211.26 L1937.19 1211.26 L1936.6 1211.26 L1936.01 1211.26 L1935.43 1211.26 L1934.84 1211.26 L1934.25 1211.26 L1933.67 1211.26 L1933.08 1211.26 L1932.5 1211.26 L1931.91 1211.26 L1931.32 1211.26 L1930.74 1211.26 L1930.15 1211.26 L1929.56 1211.26 L1928.98 1211.26 L1928.39 1211.26 L1927.8 1211.26 L1927.22 1211.26 L1926.63 1211.26 L1926.04 1211.26 L1925.46 1211.26 L1924.87 1211.26 L1924.29 1211.26 L1923.7 1211.26 L1923.11 1211.26 L1922.53 1211.26 L1921.94 1211.26 L1921.35 1211.26 L1920.77 1211.26 L1920.18 1211.26 L1919.59 1211.26 L1919.01 1211.26 L1918.42 1211.26 L1917.83 1211.26 L1917.25 1211.26 L1916.66 1211.26 L1916.08 1211.26 L1915.49 1211.26 L1914.9 1211.26 L1914.32 1211.26 L1913.73 1211.26 L1913.14 1211.26 L1912.56 1211.26 L1911.97 1211.26 L1911.38 1211.26 L1910.8 1211.26 L1910.21 1211.26 L1909.63 1211.26 L1909.04 1211.26 L1908.45 1211.26 L1907.87 1211.26 L1907.28 1211.26 L1906.69 1211.26 L1906.11 1211.26 L1905.52 1211.26 L1904.93 1211.26 L1904.35 1211.26 L1903.76 1211.26 L1903.17 1211.26 L1902.59 1211.26 L1902 1211.26 L1901.42 1211.26 L1900.83 1211.26 L1900.24 1211.26 L1899.66 1211.26 L1899.07 1211.26 L1898.48 1211.26 L1897.9 1211.26 L1897.31 1211.26 L1896.72 1211.26 L1896.14 1211.26 L1895.55 1211.26 L1894.96 1211.26 L1894.38 1211.26 L1893.79 1211.26 L1893.21 1211.26 L1892.62 1211.26 L1892.03 1211.26 L1891.45 1211.26 L1890.86 1211.26 L1890.27 1211.26 L1889.69 1211.26 L1889.1 1211.26 L1888.51 1211.26 L1887.93 1211.26 L1887.34 1211.26 L1886.76 1211.26 L1886.17 1211.26 L1885.58 1211.26 L1885 1211.26 L1884.41 1211.26 L1883.82 1211.26 L1883.24 1211.26 L1882.65 1211.26 L1882.06 1211.26 L1881.48 1211.26 L1880.89 1211.26 L1880.3 1211.26 L1879.72 1211.26 L1879.13 1211.26 L1878.55 1211.26 L1877.96 1211.26 L1877.37 1211.26 L1876.79 1211.26 L1876.2 1211.26 L1875.61 1211.26 L1875.03 1211.26 L1874.44 1211.26 L1873.85 1211.26 L1873.27 1211.26 L1872.68 1211.26 L1872.09 1211.26 L1871.51 1211.26 L1870.92 1211.26 L1870.34 1211.26 L1869.75 1211.26 L1869.16 1211.26 L1868.58 1211.26 L1867.99 1211.26 L1867.4 1211.26 L1866.82 1211.26 L1866.23 1211.26 L1865.64 1211.26 L1865.06 1211.26 L1864.47 1211.26 L1863.88 1211.26 L1863.3 1211.26 L1862.71 1211.26 L1862.13 1211.26 L1861.54 1211.26 L1860.95 1211.26 L1860.37 1211.26 L1859.78 1211.26 L1859.19 1211.26 L1858.61 1211.26 L1858.02 1211.26 L1857.43 1211.26 L1856.85 1211.26 L1856.26 1211.26 L1855.68 1211.26 L1855.09 1211.26 L1854.5 1211.26 L1853.92 1211.26 L1853.33 1211.26 L1852.74 1211.26 L1852.16 1211.26 L1851.57 1211.26 L1850.98 1211.26 L1850.4 1211.26 L1849.81 1211.26 L1849.22 1211.26 L1848.64 1211.26 L1848.05 1211.26 L1847.47 1211.26 L1846.88 1211.26 L1846.29 1211.26 L1845.71 1211.26 L1845.12 1211.26 L1844.53 1211.26 L1843.95 1211.26 L1843.36 1211.26 L1842.77 1211.26 L1842.19 1211.26 L1841.6 1211.26 L1841.01 1211.26 L1840.43 1211.26 L1839.84 1211.26 L1839.26 1211.26 L1838.67 1211.26 L1838.08 1211.26 L1837.5 1211.26 L1836.91 1211.26 L1836.32 1211.26 L1835.74 1211.26 L1835.15 1211.26 L1834.56 1211.26 L1833.98 1211.26 L1833.39 1211.26 L1832.81 1211.26 L1832.22 1211.26 L1831.63 1211.26 L1831.05 1211.26 L1830.46 1211.26 L1829.87 1211.26 L1829.29 1211.26 L1828.7 1211.26 L1828.11 1211.26 L1827.53 1211.26 L1826.94 1211.26 L1826.35 1211.26 L1825.77 1211.26 L1825.18 1211.26 L1824.6 1211.26 L1824.01 1211.26 L1823.42 1211.26 L1822.84 1211.26 L1822.25 1211.26 L1821.66 1211.26 L1821.08 1211.26 L1820.49 1211.26 L1819.9 1211.26 L1819.32 1211.26 L1818.73 1211.26 L1818.14 1211.26 L1817.56 1211.26 L1816.97 1211.26 L1816.39 1211.26 L1815.8 1211.26 L1815.21 1211.26 L1814.63 1211.26 L1814.04 1211.26 L1813.45 1211.26 L1812.87 1211.26 L1812.28 1211.26 L1811.69 1211.26 L1811.11 1211.26 L1810.52 1211.26 L1809.94 1211.26 L1809.35 1211.26 L1808.76 1211.26 L1808.18 1211.26 L1807.59 1211.26 L1807 1211.26 L1806.42 1211.26 L1805.83 1211.26 L1805.24 1211.26 L1804.66 1211.26 L1804.07 1211.26 L1803.48 1211.26 L1802.9 1211.26 L1802.31 1211.26 L1801.73 1211.26 L1801.14 1211.26 L1800.55 1211.26 L1799.97 1211.26 L1799.38 1211.26 L1798.79 1211.26 L1798.21 1211.26 L1797.62 1211.26 L1797.03 1211.26 L1796.45 1211.26 L1795.86 1211.26 L1795.27 1211.26 L1794.69 1211.26 L1794.1 1211.26 L1793.52 1211.26 L1792.93 1211.26 L1792.34 1211.26 L1791.76 1211.26 L1791.17 1211.26 L1790.58 1211.26 L1790 1211.26 L1789.41 1211.26 L1788.82 1211.26 L1788.24 1211.26 L1787.65 1211.26 L1787.06 1211.26 L1786.48 1211.26 L1785.89 1211.26 L1785.31 1211.26 L1784.72 1211.26 L1784.13 1211.26 L1783.55 1211.26 L1782.96 1211.26 L1782.37 1211.26 L1781.79 1211.26 L1781.2 1211.26 L1780.61 1211.26 L1780.03 1211.26 L1779.44 1211.26 L1778.86 1211.26 L1778.27 1211.26 L1777.68 1211.26 L1777.1 1211.26 L1776.51 1211.26 L1775.92 1211.26 L1775.34 1211.26 L1774.75 1211.26 L1774.16 1211.26 L1773.58 1211.26 L1772.99 1211.26 L1772.4 1211.26 L1771.82 1211.26 L1771.23 1211.26 L1770.65 1211.26 L1770.06 1211.26 L1769.47 1211.26 L1768.89 1211.26 L1768.3 1211.26 L1767.71 1211.26 L1767.13 1211.26 L1766.54 1211.26 L1765.95 1211.26 L1765.37 1211.26 L1764.78 1211.26 L1764.19 1211.26 L1763.61 1211.26 L1763.02 1211.26 L1762.44 1211.26 L1761.85 1211.26 L1761.26 1211.26 L1760.68 1211.26 L1760.09 1211.26 L1759.5 1211.26 L1758.92 1211.26 L1758.33 1211.26 L1757.74 1211.26 L1757.16 1211.26 L1756.57 1211.26 L1755.99 1211.26 L1755.4 1211.26 L1754.81 1211.26 L1754.23 1211.26 L1753.64 1211.26 L1753.05 1211.26 L1752.47 1211.26 L1751.88 1211.26 L1751.29 1211.26 L1750.71 1211.26 L1750.12 1211.26 L1749.53 1211.26 L1748.95 1211.26 L1748.36 1211.26 L1747.78 1211.26 L1747.19 1211.26 L1746.6 1211.26 L1746.02 1211.26 L1745.43 1211.26 L1744.84 1211.26 L1744.26 1211.26 L1743.67 1211.26 L1743.08 1211.26 L1742.5 1211.26 L1741.91 1211.26 L1741.32 1211.26 L1740.74 1211.26 L1740.15 1211.26 L1739.57 1211.26 L1738.98 1211.26 L1738.39 1211.26 L1737.81 1211.26 L1737.22 1211.26 L1736.63 1211.26 L1736.05 1211.26 L1735.46 1211.26 L1734.87 1211.26 L1734.29 1211.26 L1733.7 1211.26 L1733.11 1211.26 L1732.53 1211.26 L1731.94 1211.26 L1731.36 1211.26 L1730.77 1211.26 L1730.18 1211.26 L1729.6 1211.26 L1729.01 1211.26 L1728.42 1211.26 L1727.84 1211.26 L1727.25 1211.26 L1726.66 1211.26 L1726.08 1211.26 L1725.49 1211.26 L1724.91 1211.26 L1724.32 1211.26 L1723.73 1211.26 L1723.15 1211.26 L1722.56 1211.26 L1721.97 1211.26 L1721.39 1211.26 L1720.8 1211.26 L1720.21 1211.26 L1719.63 1211.26 L1719.04 1211.26 L1718.45 1211.26 L1717.87 1211.26 L1717.28 1211.26 L1716.7 1211.26 L1716.11 1211.26 L1715.52 1211.26 L1714.94 1211.26 L1714.35 1211.26 L1713.76 1211.26 L1713.18 1211.26 L1712.59 1211.26 L1712 1211.26 L1711.42 1211.26 L1710.83 1211.26 L1710.24 1211.26 L1709.66 1211.26 L1709.07 1211.26 L1708.49 1211.26 L1707.9 1211.26 L1707.31 1211.26 L1706.73 1211.26 L1706.14 1211.26 L1705.55 1211.26 L1704.97 1211.26 L1704.38 1211.26 L1703.79 1211.26 L1703.21 1211.26 L1702.62 1211.26 L1702.04 1211.26 L1701.45 1211.26 L1700.86 1211.26 L1700.28 1211.26 L1699.69 1211.26 L1699.1 1211.26 L1698.52 1211.26 L1697.93 1211.26 L1697.34 1211.26 L1696.76 1211.26 L1696.17 1211.26 L1695.58 1211.26 L1695 1211.26 L1694.41 1211.26 L1693.83 1211.26 L1693.24 1211.26 L1692.65 1211.26 L1692.07 1211.26 L1691.48 1211.26 L1690.89 1211.26 L1690.31 1211.26 L1689.72 1211.26 L1689.13 1211.26 L1688.55 1211.26 L1687.96 1211.26 L1687.37 1211.26 L1686.79 1211.26 L1686.2 1211.26 L1685.62 1211.26 L1685.03 1211.26 L1684.44 1211.26 L1683.86 1211.26 L1683.27 1211.26 L1682.68 1211.26 L1682.1 1211.26 L1681.51 1211.26 L1680.92 1211.26 L1680.34 1211.26 L1679.75 1211.26 L1679.17 1211.26 L1678.58 1211.26 L1677.99 1211.26 L1677.41 1211.26 L1676.82 1211.26 L1676.23 1211.26 L1675.65 1211.26 L1675.06 1211.26 L1674.47 1211.26 L1673.89 1211.26 L1673.3 1211.26 L1672.71 1211.26 L1672.13 1211.26 L1671.54 1211.26 L1670.96 1211.26 L1670.37 1211.26 L1669.78 1211.26 L1669.2 1211.26 L1668.61 1211.26 L1668.02 1211.26 L1667.44 1211.26 L1666.85 1211.26 L1666.26 1211.26 L1665.68 1211.26 L1665.09 1211.26 L1664.5 1211.26 L1663.92 1211.26 L1663.33 1211.26 L1662.75 1211.26 L1662.16 1211.26 L1661.57 1211.26 L1660.99 1211.26 L1660.4 1211.26 L1659.81 1211.26 L1659.23 1211.26 L1658.64 1211.26 L1658.05 1211.26 L1657.47 1211.26 L1656.88 1211.26 L1656.29 1211.26 L1655.71 1211.26 L1655.12 1211.26 L1654.54 1211.26 L1653.95 1211.26 L1653.36 1211.26 L1652.78 1211.26 L1652.19 1211.26 L1651.6 1211.26 L1651.02 1211.26 L1650.43 1211.26 L1649.84 1211.26 L1649.26 1211.26 L1648.67 1211.26 L1648.09 1211.26 L1647.5 1211.26 L1646.91 1211.26 L1646.33 1211.26 L1645.74 1211.26 L1645.15 1211.26 L1644.57 1211.26 L1643.98 1211.26 L1643.39 1211.26 L1642.81 1211.26 L1642.22 1211.26 L1641.63 1211.26 L1641.05 1211.26 L1640.46 1211.26 L1639.88 1211.26 L1639.29 1211.26 L1638.7 1211.26 L1638.12 1211.26 L1637.53 1211.26 L1636.94 1211.26 L1636.36 1211.26 L1635.77 1211.26 L1635.18 1211.26 L1634.6 1211.26 L1634.01 1211.26 L1633.42 1211.26 L1632.84 1211.26 L1632.25 1211.26 L1631.67 1211.26 L1631.08 1211.26 L1630.49 1211.26 L1629.91 1211.26 L1629.32 1211.26 L1628.73 1211.26 L1628.15 1211.26 L1627.56 1211.26 L1626.97 1211.26 L1626.39 1211.26 L1625.8 1211.26 L1625.22 1211.26 L1624.63 1211.26 L1624.04 1211.26 L1623.46 1211.26 L1622.87 1211.26 L1622.28 1211.26 L1621.7 1211.26 L1621.11 1211.26 L1620.52 1211.26 L1619.94 1211.26 L1619.35 1211.26 L1618.76 1211.26 L1618.18 1211.26 L1617.59 1211.26 L1617.01 1211.26 L1616.42 1211.26 L1615.83 1211.26 L1615.25 1211.26 L1614.66 1211.26 L1614.07 1211.26 L1613.49 1211.26 L1612.9 1211.26 L1612.31 1211.26 L1611.73 1211.26 L1611.14 1211.26 L1610.55 1211.26 L1609.97 1211.26 L1609.38 1211.26 L1608.8 1211.26 L1608.21 1211.26 L1607.62 1211.26 L1607.04 1211.26 L1606.45 1211.26 L1605.86 1211.26 L1605.28 1211.26 L1604.69 1211.26 L1604.1 1211.26 L1603.52 1211.26 L1602.93 1211.26 L1602.34 1211.26 L1601.76 1211.26 L1601.17 1211.26 L1600.59 1211.26 L1600 1211.26 L1599.41 1211.26 L1598.83 1211.26 L1598.24 1211.26 L1597.65 1211.26 L1597.07 1211.26 L1596.48 1211.26 L1595.89 1211.26 L1595.31 1211.26 L1594.72 1211.26 L1594.14 1211.26 L1593.55 1211.26 L1592.96 1211.26 L1592.38 1211.26 L1591.79 1211.26 L1591.2 1211.26 L1590.62 1211.26 L1590.03 1211.26 L1589.44 1211.26 L1588.86 1211.26 L1588.27 1211.26 L1587.68 1211.26 L1587.1 1211.26 L1586.51 1211.26 L1585.93 1211.26 L1585.34 1211.26 L1584.75 1211.26 L1584.17 1211.26 L1583.58 1211.26 L1582.99 1211.26 L1582.41 1211.26 L1581.82 1211.26 L1581.23 1211.26 L1580.65 1211.26 L1580.06 1211.26 L1579.47 1211.26 L1578.89 1211.26 L1578.3 1211.26 L1577.72 1211.26 L1577.13 1211.26 L1576.54 1211.26 L1575.96 1211.26 L1575.37 1211.26 L1574.78 1211.26 L1574.2 1211.26 L1573.61 1211.26 L1573.02 1211.26 L1572.44 1211.26 L1571.85 1211.26 L1571.27 1211.26 L1570.68 1211.26 L1570.09 1211.26 L1569.51 1211.26 L1568.92 1211.26 L1568.33 1211.26 L1567.75 1211.26 L1567.16 1211.26 L1566.57 1211.26 L1565.99 1211.26 L1565.4 1211.26 L1564.81 1211.26 L1564.23 1211.26 L1563.64 1211.26 L1563.06 1211.26 L1562.47 1211.26 L1561.88 1211.26 L1561.3 1211.26 L1560.71 1211.26 L1560.12 1211.26 L1559.54 1211.26 L1558.95 1211.26 L1558.36 1211.26 L1557.78 1211.26 L1557.19 1211.26 L1556.6 1211.26 L1556.02 1211.26 L1555.43 1211.26 L1554.85 1211.26 L1554.26 1211.26 L1553.67 1211.26 L1553.09 1211.26 L1552.5 1211.26 L1551.91 1211.26 L1551.33 1211.26 L1550.74 1211.26 L1550.15 1211.26 L1549.57 1211.26 L1548.98 1211.26 L1548.4 1211.26 L1547.81 1211.26 L1547.22 1211.26 L1546.64 1211.26 L1546.05 1211.26 L1545.46 1211.26 L1544.88 1211.26 L1544.29 1211.26 L1543.7 1211.26 L1543.12 1211.26 L1542.53 1211.26 L1541.94 1211.26 L1541.36 1211.26 L1540.77 1211.26 L1540.19 1211.26 L1539.6 1211.26 L1539.01 1211.26 L1538.43 1211.26 L1537.84 1211.26 L1537.25 1211.26 L1536.67 1211.26 L1536.08 1211.26 L1535.49 1211.26 L1534.91 1211.26 L1534.32 1211.26 L1533.73 1211.26 L1533.15 1211.26 L1532.56 1211.26 L1531.98 1211.26 L1531.39 1211.26 L1530.8 1211.26 L1530.22 1211.26 L1529.63 1211.26 L1529.04 1211.26 L1528.46 1211.26 L1527.87 1211.26 L1527.28 1211.26 L1526.7 1211.26 L1526.11 1211.26 L1525.52 1211.26 L1524.94 1211.26 L1524.35 1211.26 L1523.77 1211.26 L1523.18 1211.26 L1522.59 1211.26 L1522.01 1211.26 L1521.42 1211.26 L1520.83 1211.26 L1520.25 1211.26 L1519.66 1211.26 L1519.07 1211.26 L1518.49 1211.26 L1517.9 1211.26 L1517.32 1211.26 L1516.73 1211.26 L1516.14 1211.26 L1515.56 1211.26 L1514.97 1211.26 L1514.38 1211.26 L1513.8 1211.26 L1513.21 1211.26 L1512.62 1211.26 L1512.04 1211.26 L1511.45 1211.26 L1510.86 1211.26 L1510.28 1211.26 L1509.69 1211.26 L1509.11 1211.26 L1508.52 1211.26 L1507.93 1211.26 L1507.35 1211.26 L1506.76 1211.26 L1506.17 1211.26 L1505.59 1211.26 L1505 1211.26 L1504.41 1211.26 L1503.83 1211.26 L1503.24 1211.26 L1502.65 1211.26 L1502.07 1211.26 L1501.48 1211.26 L1500.9 1211.26 L1500.31 1211.26 L1499.72 1211.26 L1499.14 1211.26 L1498.55 1211.26 L1497.96 1211.26 L1497.38 1211.26 L1496.79 1211.26 L1496.2 1211.26 L1495.62 1211.26 L1495.03 1211.26 L1494.45 1211.26 L1493.86 1211.26 L1493.27 1211.26 L1492.69 1211.26 L1492.1 1211.26 L1491.51 1211.26 L1490.93 1211.26 L1490.34 1211.26 L1489.75 1211.26 L1489.17 1211.26 L1488.58 1211.26 L1487.99 1211.26 L1487.41 1211.26 L1486.82 1211.26 L1486.24 1211.26 L1485.65 1211.26 L1485.06 1211.26 L1484.48 1211.26 L1483.89 1211.26 L1483.3 1211.26 L1482.72 1211.26 L1482.13 1211.26 L1481.54 1211.26 L1480.96 1211.26 L1480.37 1211.26 L1479.78 1211.26 L1479.2 1211.26 L1478.61 1211.26 L1478.03 1211.26 L1477.44 1211.26 L1476.85 1211.26 L1476.27 1211.26 L1475.68 1211.26 L1475.09 1211.26 L1474.51 1211.26 L1473.92 1211.26 L1473.33 1211.26 L1472.75 1211.26 L1472.16 1211.26 L1471.57 1211.26 L1470.99 1211.26 L1470.4 1211.26 L1469.82 1211.26 L1469.23 1211.26 L1468.64 1211.26 L1468.06 1211.26 L1467.47 1211.26 L1466.88 1211.26 L1466.3 1211.26 L1465.71 1211.26 L1465.12 1211.26 L1464.54 1211.26 L1463.95 1211.26 L1463.37 1211.26 L1462.78 1211.26 L1462.19 1211.26 L1461.61 1211.26 L1461.02 1211.26 L1460.43 1211.26 L1459.85 1211.26 L1459.26 1211.26 L1458.67 1211.26 L1458.09 1211.26 L1457.5 1211.26 L1456.91 1211.26 L1456.33 1211.26 L1455.74 1211.26 L1455.16 1211.26 L1454.57 1211.26 L1453.98 1211.26 L1453.4 1211.26 L1452.81 1211.26 L1452.22 1211.26 L1451.64 1211.26 L1451.05 1211.26 L1450.46 1211.26 L1449.88 1211.26 L1449.29 1211.26 L1448.7 1211.26 L1448.12 1211.26 L1447.53 1211.26 L1446.95 1211.26 L1446.36 1211.26 L1445.77 1211.26 L1445.19 1211.26 L1444.6 1211.26 L1444.01 1211.26 L1443.43 1211.26 L1442.84 1211.26 L1442.25 1211.26 L1441.67 1211.26 L1441.08 1211.26 L1440.5 1211.26 L1439.91 1211.26 L1439.32 1211.26 L1438.74 1211.26 L1438.15 1211.26 L1437.56 1211.26 L1436.98 1211.26 L1436.39 1211.26 L1435.8 1211.26 L1435.22 1211.26 L1434.63 1211.26 L1434.04 1211.26 L1433.46 1211.26 L1432.87 1211.26 L1432.29 1211.26 L1431.7 1211.26 L1431.11 1211.26 L1430.53 1211.26 L1429.94 1211.26 L1429.35 1211.26 L1428.77 1211.26 L1428.18 1211.26 L1427.59 1211.26 L1427.01 1211.26 L1426.42 1211.26 L1425.83 1211.26 L1425.25 1211.26 L1424.66 1211.26 L1424.08 1211.26 L1423.49 1211.26 L1422.9 1211.26 L1422.32 1211.26 L1421.73 1211.26 L1421.14 1211.26 L1420.56 1211.26 L1419.97 1211.26 L1419.38 1211.26 L1418.8 1211.26 L1418.21 1211.26 L1417.63 1211.26 L1417.04 1211.26 L1416.45 1211.26 L1415.87 1211.26 L1415.28 1211.26 L1414.69 1211.26 L1414.11 1211.26 L1413.52 1211.26 L1412.93 1211.26 L1412.35 1211.26 L1411.76 1211.26 L1411.17 1211.26 L1410.59 1211.26 L1410 1211.26 L1409.42 1211.26 L1408.83 1211.26 L1408.24 1211.26 L1407.66 1211.26 L1407.07 1211.26 L1406.48 1211.26 L1405.9 1211.26 L1405.31 1211.26 L1404.72 1211.26 L1404.14 1211.26 L1403.55 1211.26 L1402.96 1211.26 L1402.38 1211.26 L1401.79 1211.26 L1401.21 1211.26 L1400.62 1211.26 L1400.03 1211.26 L1399.45 1211.26 L1398.86 1211.26 L1398.27 1211.26 L1397.69 1211.26 L1397.1 1211.26 L1396.51 1211.26 L1395.93 1211.26 L1395.34 1211.26 L1394.75 1211.26 L1394.17 1211.26 L1393.58 1211.26 L1393 1211.26 L1392.41 1211.26 L1391.82 1211.26 L1391.24 1211.26 L1390.65 1211.26 L1390.06 1211.26 L1389.48 1211.26 L1388.89 1211.26 L1388.3 1211.26 L1387.72 1211.26 L1387.13 1211.26 L1386.55 1211.26 L1385.96 1211.26 L1385.37 1211.26 L1384.79 1211.26 L1384.2 1211.26 L1383.61 1211.26 L1383.03 1211.26 L1382.44 1211.26 L1381.85 1211.26 L1381.27 1211.26 L1380.68 1211.26 L1380.09 1211.26 L1379.51 1211.26 L1378.92 1211.26 L1378.34 1211.26 L1377.75 1211.26 L1377.16 1211.26 L1376.58 1211.26 L1375.99 1211.26 L1375.4 1211.26 L1374.82 1211.26 L1374.23 1211.26 L1373.64 1211.26 L1373.06 1211.26 L1372.47 1211.26 L1371.88 1211.26 L1371.3 1211.26 L1370.71 1211.26 L1370.13 1211.26 L1369.54 1211.26 L1368.95 1211.26 L1368.37 1211.26 L1367.78 1211.26 L1367.19 1211.26 L1366.61 1211.26 L1366.02 1211.26 L1365.43 1211.26 L1364.85 1211.26 L1364.26 1211.26 L1363.68 1211.26 L1363.09 1211.26 L1362.5 1211.26 L1361.92 1211.26 L1361.33 1211.26 L1360.74 1211.26 L1360.16 1211.26 L1359.57 1211.26 L1358.98 1211.26 L1358.4 1211.26 L1357.81 1211.26 L1357.22 1211.26 L1356.64 1211.26 L1356.05 1211.26 L1355.47 1211.26 L1354.88 1211.26 L1354.29 1211.26 L1353.71 1211.26 L1353.12 1211.26 L1352.53 1211.26 L1351.95 1211.26 L1351.36 1211.26 L1350.77 1211.26 L1350.19 1211.26 L1349.6 1211.26 L1349.01 1211.26 L1348.43 1211.26 L1347.84 1211.26 L1347.26 1211.26 L1346.67 1211.26 L1346.08 1211.26 L1345.5 1211.26 L1344.91 1211.26 L1344.32 1211.26 L1343.74 1211.26 L1343.15 1211.26 L1342.56 1211.26 L1341.98 1211.26 L1341.39 1211.26 L1340.8 1211.26 L1340.22 1211.26 L1339.63 1211.26 L1339.05 1211.26 L1338.46 1211.26 L1337.87 1211.26 L1337.29 1211.26 L1336.7 1211.26 L1336.11 1211.26 L1335.53 1211.26 L1334.94 1211.26 L1334.35 1211.26 L1333.77 1211.26 L1333.18 1211.26 L1332.6 1211.26 L1332.01 1211.26 L1331.42 1211.26 L1330.84 1211.26 L1330.25 1211.26 L1329.66 1211.26 L1329.08 1211.26 L1328.49 1211.26 L1327.9 1211.26 L1327.32 1211.26 L1326.73 1211.26 L1326.14 1211.26 L1325.56 1211.26 L1324.97 1211.26 L1324.39 1211.26 L1323.8 1211.26 L1323.21 1211.26 L1322.63 1211.26 L1322.04 1211.26 L1321.45 1211.26 L1320.87 1211.26 L1320.28 1211.26 L1319.69 1211.26 L1319.11 1211.26 L1318.52 1211.26 L1317.93 1211.26 L1317.35 1211.26 L1316.76 1211.26 L1316.18 1211.26 L1315.59 1211.26 L1315 1211.26 L1314.42 1211.26 L1313.83 1211.26 L1313.24 1211.26 L1312.66 1211.26 L1312.07 1211.26 L1311.48 1211.26 L1310.9 1211.26 L1310.31 1211.26 L1309.73 1211.26 L1309.14 1211.26 L1308.55 1211.26 L1307.97 1211.26 L1307.38 1211.26 L1306.79 1211.26 L1306.21 1211.26 L1305.62 1211.26 L1305.03 1211.26 L1304.45 1211.26 L1303.86 1211.26 L1303.27 1211.26 L1302.69 1211.26 L1302.1 1211.26 L1301.52 1211.26 L1300.93 1211.26 L1300.34 1211.26 L1299.76 1211.26 L1299.17 1211.26 L1298.58 1211.26 L1298 1211.26 L1297.41 1211.26 L1296.82 1211.26 L1296.24 1211.26 L1295.65 1211.26 L1295.06 1211.26 L1294.48 1211.26 L1293.89 1211.26 L1293.31 1211.26 L1292.72 1211.26 L1292.13 1211.26 L1291.55 1211.26 L1290.96 1211.26 L1290.37 1211.26 L1289.79 1211.26 L1289.2 1211.26 L1288.61 1211.26 L1288.03 1211.26 L1287.44 1211.26 L1286.86 1211.26 L1286.27 1211.26 L1285.68 1211.26 L1285.1 1211.26 L1284.51 1211.26 L1283.92 1211.26 L1283.34 1211.26 L1282.75 1211.26 L1282.16 1211.26 L1281.58 1211.26 L1280.99 1211.26 L1280.4 1211.26 L1279.82 1211.26 L1279.23 1211.26 L1278.65 1211.26 L1278.06 1211.26 L1277.47 1211.26 L1276.89 1211.26 L1276.3 1211.26 L1275.71 1211.26 L1275.13 1211.26 L1274.54 1211.26 L1273.95 1211.26 L1273.37 1211.26 L1272.78 1211.26 L1272.19 1211.26 L1271.61 1211.26 L1271.02 1211.26 L1270.44 1211.26 L1269.85 1211.26 L1269.26 1211.26 L1268.68 1211.26 L1268.09 1211.26 L1267.5 1211.26 L1266.92 1211.26 L1266.33 1211.26 L1265.74 1211.26 L1265.16 1211.26 L1264.57 1211.26 L1263.98 1211.26 L1263.4 1211.26 L1262.81 1211.26 L1262.23 1211.26 L1261.64 1211.26 L1261.05 1211.26 L1260.47 1211.26 L1259.88 1211.26 L1259.29 1211.26 L1258.71 1211.26 L1258.12 1211.26 L1257.53 1211.26 L1256.95 1211.26 L1256.36 1211.26 L1255.78 1211.26 L1255.19 1211.26 L1254.6 1211.26 L1254.02 1211.26 L1253.43 1211.26 L1252.84 1211.26 L1252.26 1211.26 L1251.67 1211.26 L1251.08 1211.26 L1250.5 1211.26 L1249.91 1211.26 L1249.32 1211.26 L1248.74 1211.26 L1248.15 1211.26 L1247.57 1211.26 L1246.98 1211.26 L1246.39 1211.26 L1245.81 1211.26 L1245.22 1211.26 L1244.63 1211.26 L1244.05 1211.26 L1243.46 1211.26 L1242.87 1211.26 L1242.29 1211.26 L1241.7 1211.26 L1241.11 1211.26 L1240.53 1211.26 L1239.94 1211.26 L1239.36 1211.26 L1238.77 1211.26 L1238.18 1211.26 L1237.6 1211.26 L1237.01 1211.26 L1236.42 1211.26 L1235.84 1211.26 L1235.25 1211.26 L1234.66 1211.26 L1234.08 1211.26 L1233.49 1211.26 L1232.91 1211.26 L1232.32 1211.26 L1231.73 1211.26 L1231.15 1211.26 L1230.56 1211.26 L1229.97 1211.26 L1229.39 1211.26 L1228.8 1211.26 L1228.21 1211.26 L1227.63 1211.26 L1227.04 1211.26 L1226.45 1211.26 L1225.87 1211.26 L1225.28 1211.26 L1224.7 1211.26 L1224.11 1211.26 L1223.52 1211.26 L1222.94 1211.26 L1222.35 1211.26 L1221.76 1211.26 L1221.18 1211.26 L1220.59 1211.26 L1220 1211.26 L1219.42 1211.26 L1218.83 1211.26 L1218.24 1211.26 L1217.66 1211.26 L1217.07 1211.26 L1216.49 1211.26 L1215.9 1211.26 L1215.31 1211.26 L1214.73 1211.26 L1214.14 1211.26 L1213.55 1211.26 L1212.97 1211.26 L1212.38 1211.26 L1211.79 1211.26 L1211.21 1211.26 L1210.62 1211.26 L1210.03 1211.26 L1209.45 1211.26 L1208.86 1211.26 L1208.28 1211.26 L1207.69 1211.26 L1207.1 1211.26 L1206.52 1211.26 L1205.93 1211.26 L1205.34 1211.26 L1204.76 1211.26 L1204.17 1211.26 L1203.58 1211.26 L1203 1211.26 L1202.41 1211.26 L1201.83 1211.26 L1201.24 1211.26 L1200.65 1211.26 L1200.07 1211.26 L1199.48 1211.26 L1198.89 1211.26 L1198.31 1211.26 L1197.72 1211.26 L1197.13 1211.26 L1196.55 1211.26 L1195.96 1211.26 L1195.37 1211.26 L1194.79 1211.26 L1194.2 1211.26 L1193.62 1211.26 L1193.03 1211.26 L1192.44 1211.26 L1191.86 1211.26 L1191.27 1211.26 L1190.68 1211.26 L1190.1 1211.26 L1189.51 1211.26 L1188.92 1211.26 L1188.34 1211.26 L1187.75 1211.26 L1187.16 1211.26 L1186.58 1211.26 L1185.99 1211.26 L1185.41 1211.26 L1184.82 1211.26 L1184.23 1211.26 L1183.65 1211.26 L1183.06 1211.26 L1182.47 1211.26 L1181.89 1211.26 L1181.3 1211.26 L1180.71 1211.26 L1180.13 1211.26 L1179.54 1211.26 L1178.96 1211.26 L1178.37 1211.26 L1177.78 1211.26 L1177.2 1211.26 L1176.61 1211.26 L1176.02 1211.26 L1175.44 1211.26 L1174.85 1211.26 L1174.26 1211.26 L1173.68 1211.26 L1173.09 1211.26 L1172.5 1211.26 L1171.92 1211.26 L1171.33 1211.26 L1170.75 1211.26 L1170.16 1211.26 L1169.57 1211.26 L1168.99 1211.26 L1168.4 1211.26 L1167.81 1211.26 L1167.23 1211.26 L1166.64 1211.26 L1166.05 1211.26 L1165.47 1211.26 L1164.88 1211.26 L1164.29 1211.26 L1163.71 1211.26 L1163.12 1211.26 L1162.54 1211.26 L1161.95 1211.26 L1161.36 1211.26 L1160.78 1211.26 L1160.19 1211.26 L1159.6 1211.26 L1159.02 1211.26 L1158.43 1211.26 L1157.84 1211.26 L1157.26 1211.26 L1156.67 1211.26 L1156.09 1211.26 L1155.5 1211.26 L1154.91 1211.26 L1154.33 1211.26 L1153.74 1211.26 L1153.15 1211.26 L1152.57 1211.26 L1151.98 1211.26 L1151.39 1211.26 L1150.81 1211.26 L1150.22 1211.26 L1149.63 1211.26 L1149.05 1211.26 L1148.46 1211.26 L1147.88 1211.26 L1147.29 1211.26 L1146.7 1211.26 L1146.12 1211.26 L1145.53 1211.26 L1144.94 1211.26 L1144.36 1211.26 L1143.77 1211.26 L1143.18 1211.26 L1142.6 1211.26 L1142.01 1211.26 L1141.42 1211.26 L1140.84 1211.26 L1140.25 1211.26 L1139.67 1211.26 L1139.08 1211.26 L1138.49 1211.26 L1137.91 1211.26 L1137.32 1211.26 L1136.73 1211.26 L1136.15 1211.26 L1135.56 1211.26 L1134.97 1211.26 L1134.39 1211.26 L1133.8 1211.26 L1133.21 1211.26 L1132.63 1211.26 L1132.04 1211.26 L1131.46 1211.26 L1130.87 1211.26 L1130.28 1211.26 L1129.7 1211.26 L1129.11 1211.26 L1128.52 1211.26 L1127.94 1211.26 L1127.35 1211.26 L1126.76 1211.26 L1126.18 1211.26 L1125.59 1211.26 L1125.01 1211.26 L1124.42 1211.26 L1123.83 1211.26 L1123.25 1211.26 L1122.66 1211.26 L1122.07 1211.26 L1121.49 1211.26 L1120.9 1211.26 L1120.31 1211.26 L1119.73 1211.26 L1119.14 1211.26 L1118.55 1211.26 L1117.97 1211.26 L1117.38 1211.26 L1116.8 1211.26 L1116.21 1211.26 L1115.62 1211.26 L1115.04 1211.26 L1114.45 1211.26 L1113.86 1211.26 L1113.28 1211.26 L1112.69 1211.26 L1112.1 1211.26 L1111.52 1211.26 L1110.93 1211.26 L1110.34 1211.26 L1109.76 1211.26 L1109.17 1211.26 L1108.59 1211.26 L1108 1211.26 L1107.41 1211.26 L1106.83 1211.26 L1106.24 1211.26 L1105.65 1211.26 L1105.07 1211.26 L1104.48 1211.26 L1103.89 1211.26 L1103.31 1211.26 L1102.72 1211.26 L1102.14 1211.26 L1101.55 1211.26 L1100.96 1211.26 L1100.38 1211.26 L1099.79 1211.26 L1099.2 1211.26 L1098.62 1211.26 L1098.03 1211.26 L1097.44 1211.26 L1096.86 1211.26 L1096.27 1211.26 L1095.68 1211.26 L1095.1 1211.26 L1094.51 1211.26 L1093.93 1211.26 L1093.34 1211.26 L1092.75 1211.26 L1092.17 1211.26 L1091.58 1211.26 L1090.99 1211.26 L1090.41 1211.26 L1089.82 1211.26 L1089.23 1211.26 L1088.65 1211.26 L1088.06 1211.26 L1087.47 1211.26 L1086.89 1211.26 L1086.3 1211.26 L1085.72 1211.26 L1085.13 1211.26 L1084.54 1211.26 L1083.96 1211.26 L1083.37 1211.26 L1082.78 1211.26 L1082.2 1211.26 L1081.61 1211.26 L1081.02 1211.26 L1080.44 1211.26 L1079.85 1211.26 L1079.26 1211.26 L1078.68 1211.26 L1078.09 1211.26 L1077.51 1211.26 L1076.92 1211.26 L1076.33 1211.26 L1075.75 1211.26 L1075.16 1211.26 L1074.57 1211.26 L1073.99 1211.26 L1073.4 1211.26 L1072.81 1211.26 L1072.23 1211.26 L1071.64 1211.26 L1071.06 1211.26 L1070.47 1211.26 L1069.88 1211.26 L1069.3 1211.26 L1068.71 1211.26 L1068.12 1211.26 L1067.54 1211.26 L1066.95 1211.26 L1066.36 1211.26 L1065.78 1211.26 L1065.19 1211.26 L1064.6 1211.26 L1064.02 1211.26 L1063.43 1211.26 L1062.85 1211.26 L1062.26 1211.26 L1061.67 1211.26 L1061.09 1211.26 L1060.5 1211.26 L1059.91 1211.26 L1059.33 1211.26 L1058.74 1211.26 L1058.15 1211.26 L1057.57 1211.26 L1056.98 1211.26 L1056.39 1211.26 L1055.81 1211.26 L1055.22 1211.26 L1054.64 1211.26 L1054.05 1211.26 L1053.46 1211.26 L1052.88 1211.26 L1052.29 1211.26 L1051.7 1211.26 L1051.12 1211.26 L1050.53 1211.26 L1049.94 1211.26 L1049.36 1211.26 L1048.77 1211.26 L1048.19 1211.26 L1047.6 1211.26 L1047.01 1211.26 L1046.43 1211.26 L1045.84 1211.26 L1045.25 1211.26 L1044.67 1211.26 L1044.08 1211.26 L1043.49 1211.26 L1042.91 1211.26 L1042.32 1211.26 L1041.73 1211.26 L1041.15 1211.26 L1040.56 1211.26 L1039.98 1211.26 L1039.39 1211.26 L1038.8 1211.26 L1038.22 1211.26 L1037.63 1211.26 L1037.04 1211.26 L1036.46 1211.26 L1035.87 1211.26 L1035.28 1211.26 L1034.7 1211.26 L1034.11 1211.26 L1033.52 1211.26 L1032.94 1211.26 L1032.35 1211.26 L1031.77 1211.26 L1031.18 1211.26 L1030.59 1211.26 L1030.01 1211.26 L1029.42 1211.26 L1028.83 1211.26 L1028.25 1211.26 L1027.66 1211.26 L1027.07 1211.26 L1026.49 1211.26 L1025.9 1211.26 L1025.32 1211.26 L1024.73 1211.26 L1024.14 1211.26 L1023.56 1211.26 L1022.97 1211.26 L1022.38 1211.26 L1021.8 1211.26 L1021.21 1211.26 L1020.62 1211.26 L1020.04 1211.26 L1019.45 1211.26 L1018.86 1211.26 L1018.28 1211.26 L1017.69 1211.26 L1017.11 1211.26 L1016.52 1211.26 L1015.93 1211.26 L1015.35 1211.26 L1014.76 1211.26 L1014.17 1211.26 L1013.59 1211.26 L1013 1211.26 L1012.41 1211.26 L1011.83 1211.26 L1011.24 1211.26 L1010.65 1211.26 L1010.07 1211.26 L1009.48 1211.26 L1008.9 1211.26 L1008.31 1211.26 L1007.72 1211.26 L1007.14 1211.26 L1006.55 1211.26 L1005.96 1211.26 L1005.38 1211.26 L1004.79 1211.26 L1004.2 1211.26 L1003.62 1211.26 L1003.03 1211.26 L1002.44 1211.26 L1001.86 1211.26 L1001.27 1211.26 L1000.69 1211.26 L1000.1 1211.26 L999.513 1211.26 L998.926 1211.26 L998.34 1211.26 L997.754 1211.26 L997.167 1211.26 L996.581 1211.26 L995.994 1211.26 L995.408 1211.26 L994.822 1211.26 L994.235 1211.26 L993.649 1211.26 L993.062 1211.26 L992.476 1211.26 L991.889 1211.26 L991.303 1211.26 L990.717 1211.26 L990.13 1211.26 L989.544 1211.26 L988.957 1211.26 L988.371 1211.26 L987.785 1211.26 L987.198 1211.26 L986.612 1211.26 L986.025 1211.26  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.58 986.612,1211.58 987.198,1211.58 987.785,1211.58 988.371,1211.58 988.957,1211.58 989.544,1211.58 990.13,1211.58 990.717,1211.58 991.303,1211.58 991.889,1211.58 992.476,1211.58 993.062,1211.58 993.649,1211.58 994.235,1211.58 994.822,1211.58 995.408,1211.58 995.994,1211.58 996.581,1211.58 997.167,1211.58 997.754,1211.58 998.34,1211.58 998.926,1211.58 999.513,1211.58 1000.1,1211.58 1000.69,1211.58 1001.27,1211.58 1001.86,1211.58 1002.44,1211.58 1003.03,1211.58 1003.62,1211.58 1004.2,1211.58 1004.79,1211.58 1005.38,1211.58 1005.96,1211.58 1006.55,1211.58 1007.14,1211.58 1007.72,1211.58 1008.31,1211.58 1008.9,1211.58 1009.48,1211.58 1010.07,1211.58 1010.65,1211.58 1011.24,1211.58 1011.83,1211.58 1012.41,1211.58 1013,1211.58 1013.59,1211.58 1014.17,1211.58 1014.76,1211.58 1015.35,1211.58 1015.93,1211.58 1016.52,1211.58 1017.11,1211.58 1017.69,1211.58 1018.28,1211.58 1018.86,1211.58 1019.45,1211.58 1020.04,1211.58 1020.62,1211.58 1021.21,1211.58 1021.8,1211.58 1022.38,1211.58 1022.97,1211.58 1023.56,1211.58 1024.14,1211.58 1024.73,1211.58 1025.32,1211.58 1025.9,1211.58 1026.49,1211.58 1027.07,1211.58 1027.66,1211.58 1028.25,1211.58 1028.83,1211.58 1029.42,1211.58 1030.01,1211.58 1030.59,1211.58 1031.18,1211.58 1031.77,1211.58 1032.35,1211.58 1032.94,1211.58 1033.52,1211.58 1034.11,1211.58 1034.7,1211.58 1035.28,1211.58 1035.87,1211.58 1036.46,1211.58 1037.04,1211.58 1037.63,1211.58 1038.22,1211.58 1038.8,1211.58 1039.39,1211.58 1039.98,1211.58 1040.56,1211.58 1041.15,1211.58 1041.73,1211.58 1042.32,1211.58 1042.91,1211.58 1043.49,1211.58 1044.08,1211.58 1044.67,1211.58 1045.25,1211.58 1045.84,1211.58 1046.43,1211.58 1047.01,1211.58 1047.6,1211.58 1048.19,1211.58 1048.77,1211.58 1049.36,1211.58 1049.94,1211.58 1050.53,1211.58 1051.12,1211.58 1051.7,1211.58 1052.29,1211.58 1052.88,1211.58 1053.46,1211.58 1054.05,1211.58 1054.64,1211.58 1055.22,1211.58 1055.81,1211.58 1056.39,1211.58 1056.98,1211.58 1057.57,1211.58 1058.15,1211.58 1058.74,1211.58 1059.33,1211.58 1059.91,1211.58 1060.5,1211.58 1061.09,1211.58 1061.67,1211.58 1062.26,1211.58 1062.85,1211.58 1063.43,1211.58 1064.02,1211.58 1064.6,1211.58 1065.19,1211.58 1065.78,1211.58 1066.36,1211.58 1066.95,1211.58 1067.54,1211.58 1068.12,1211.58 1068.71,1211.58 1069.3,1211.58 1069.88,1211.58 1070.47,1211.58 1071.06,1211.58 1071.64,1211.58 1072.23,1211.58 1072.81,1211.58 1073.4,1211.58 1073.99,1211.58 1074.57,1211.58 1075.16,1211.58 1075.75,1211.58 1076.33,1211.58 1076.92,1211.58 1077.51,1211.58 1078.09,1211.58 1078.68,1211.58 1079.26,1211.58 1079.85,1211.58 1080.44,1211.58 1081.02,1211.58 1081.61,1211.58 1082.2,1211.58 1082.78,1211.58 1083.37,1211.58 1083.96,1211.58 1084.54,1211.58 1085.13,1211.58 1085.72,1211.58 1086.3,1211.58 1086.89,1211.58 1087.47,1211.58 1088.06,1211.58 1088.65,1211.58 1089.23,1211.58 1089.82,1211.58 1090.41,1211.58 1090.99,1211.58 1091.58,1211.58 1092.17,1211.58 1092.75,1211.58 1093.34,1211.58 1093.93,1211.58 1094.51,1211.58 1095.1,1211.58 1095.68,1211.58 1096.27,1211.58 1096.86,1211.58 1097.44,1211.58 1098.03,1211.58 1098.62,1211.58 1099.2,1211.58 1099.79,1211.58 1100.38,1211.58 1100.96,1211.58 1101.55,1211.58 1102.14,1211.58 1102.72,1211.58 1103.31,1211.58 1103.89,1211.58 1104.48,1211.58 1105.07,1211.58 1105.65,1211.58 1106.24,1211.58 1106.83,1211.58 1107.41,1211.58 1108,1211.58 1108.59,1211.58 1109.17,1211.58 1109.76,1211.58 1110.34,1211.58 1110.93,1211.58 1111.52,1211.58 1112.1,1211.58 1112.69,1211.58 1113.28,1211.58 1113.86,1211.58 1114.45,1211.58 1115.04,1211.58 1115.62,1211.58 1116.21,1211.58 1116.8,1211.58 1117.38,1211.58 1117.97,1211.58 1118.55,1211.58 1119.14,1211.58 1119.73,1211.58 1120.31,1211.58 1120.9,1211.58 1121.49,1211.58 1122.07,1211.58 1122.66,1211.58 1123.25,1211.58 1123.83,1211.58 1124.42,1211.58 1125.01,1211.58 1125.59,1211.58 1126.18,1211.58 1126.76,1211.58 1127.35,1211.58 1127.94,1211.58 1128.52,1211.58 1129.11,1211.58 1129.7,1211.58 1130.28,1211.58 1130.87,1211.58 1131.46,1211.58 1132.04,1211.58 1132.63,1211.58 1133.21,1211.58 1133.8,1211.58 1134.39,1211.58 1134.97,1211.58 1135.56,1211.58 1136.15,1211.58 1136.73,1211.58 1137.32,1211.58 1137.91,1211.58 1138.49,1211.58 1139.08,1211.58 1139.67,1211.58 1140.25,1211.58 1140.84,1211.58 1141.42,1211.58 1142.01,1211.58 1142.6,1211.58 1143.18,1211.58 1143.77,1211.58 1144.36,1211.58 1144.94,1211.58 1145.53,1211.58 1146.12,1211.58 1146.7,1211.58 1147.29,1211.58 1147.88,1211.58 1148.46,1211.58 1149.05,1211.58 1149.63,1211.58 1150.22,1211.58 1150.81,1211.58 1151.39,1211.58 1151.98,1211.58 1152.57,1211.58 1153.15,1211.58 1153.74,1211.58 1154.33,1211.58 1154.91,1211.58 1155.5,1211.58 1156.09,1211.58 1156.67,1211.58 1157.26,1211.58 1157.84,1211.58 1158.43,1211.58 1159.02,1211.58 1159.6,1211.58 1160.19,1211.58 1160.78,1211.58 1161.36,1211.58 1161.95,1211.58 1162.54,1211.58 1163.12,1211.58 1163.71,1211.58 1164.29,1211.58 1164.88,1211.58 1165.47,1211.58 1166.05,1211.58 1166.64,1211.58 1167.23,1211.58 1167.81,1211.58 1168.4,1211.58 1168.99,1211.58 1169.57,1211.58 1170.16,1211.58 1170.75,1211.58 1171.33,1211.58 1171.92,1211.58 1172.5,1211.58 1173.09,1211.58 1173.68,1211.58 1174.26,1211.58 1174.85,1211.58 1175.44,1211.58 1176.02,1211.58 1176.61,1211.58 1177.2,1211.58 1177.78,1211.58 1178.37,1211.58 1178.96,1211.58 1179.54,1211.58 1180.13,1211.58 1180.71,1211.58 1181.3,1211.58 1181.89,1211.58 1182.47,1211.58 1183.06,1211.58 1183.65,1211.58 1184.23,1211.58 1184.82,1211.58 1185.41,1211.58 1185.99,1211.58 1186.58,1211.58 1187.16,1211.58 1187.75,1211.58 1188.34,1211.58 1188.92,1211.58 1189.51,1211.58 1190.1,1211.58 1190.68,1211.58 1191.27,1211.58 1191.86,1211.58 1192.44,1211.58 1193.03,1211.58 1193.62,1211.58 1194.2,1211.58 1194.79,1211.58 1195.37,1211.58 1195.96,1211.58 1196.55,1211.58 1197.13,1211.58 1197.72,1211.58 1198.31,1211.58 1198.89,1211.58 1199.48,1211.58 1200.07,1211.58 1200.65,1211.58 1201.24,1211.58 1201.83,1211.58 1202.41,1211.58 1203,1211.58 1203.58,1211.58 1204.17,1211.58 1204.76,1211.58 1205.34,1211.58 1205.93,1211.58 1206.52,1211.58 1207.1,1211.58 1207.69,1211.58 1208.28,1211.58 1208.86,1211.58 1209.45,1211.58 1210.03,1211.58 1210.62,1211.58 1211.21,1211.58 1211.79,1211.58 1212.38,1211.58 1212.97,1211.58 1213.55,1211.58 1214.14,1211.58 1214.73,1211.58 1215.31,1211.58 1215.9,1211.58 1216.49,1211.58 1217.07,1211.58 1217.66,1211.58 1218.24,1211.58 1218.83,1211.58 1219.42,1211.58 1220,1211.58 1220.59,1211.58 1221.18,1211.58 1221.76,1211.58 1222.35,1211.58 1222.94,1211.58 1223.52,1211.58 1224.11,1211.58 1224.7,1211.58 1225.28,1211.58 1225.87,1211.58 1226.45,1211.58 1227.04,1211.58 1227.63,1211.58 1228.21,1211.58 1228.8,1211.58 1229.39,1211.58 1229.97,1211.58 1230.56,1211.58 1231.15,1211.58 1231.73,1211.58 1232.32,1211.58 1232.91,1211.58 1233.49,1211.58 1234.08,1211.58 1234.66,1211.58 1235.25,1211.58 1235.84,1211.58 1236.42,1211.58 1237.01,1211.58 1237.6,1211.58 1238.18,1211.58 1238.77,1211.58 1239.36,1211.58 1239.94,1211.58 1240.53,1211.58 1241.11,1211.58 1241.7,1211.58 1242.29,1211.58 1242.87,1211.58 1243.46,1211.58 1244.05,1211.58 1244.63,1211.58 1245.22,1211.58 1245.81,1211.58 1246.39,1211.58 1246.98,1211.58 1247.57,1211.58 1248.15,1211.58 1248.74,1211.58 1249.32,1211.58 1249.91,1211.58 1250.5,1211.58 1251.08,1211.58 1251.67,1211.58 1252.26,1211.58 1252.84,1211.58 1253.43,1211.58 1254.02,1211.58 1254.6,1211.58 1255.19,1211.58 1255.78,1211.58 1256.36,1211.58 1256.95,1211.58 1257.53,1211.58 1258.12,1211.58 1258.71,1211.58 1259.29,1211.58 1259.88,1211.58 1260.47,1211.58 1261.05,1211.58 1261.64,1211.58 1262.23,1211.58 1262.81,1211.58 1263.4,1211.58 1263.98,1211.58 1264.57,1211.58 1265.16,1211.58 1265.74,1211.58 1266.33,1211.58 1266.92,1211.58 1267.5,1211.58 1268.09,1211.58 1268.68,1211.58 1269.26,1211.58 1269.85,1211.58 1270.44,1211.58 1271.02,1211.58 1271.61,1211.58 1272.19,1211.58 1272.78,1211.58 1273.37,1211.58 1273.95,1211.58 1274.54,1211.58 1275.13,1211.58 1275.71,1211.58 1276.3,1211.58 1276.89,1211.58 1277.47,1211.58 1278.06,1211.58 1278.65,1211.58 1279.23,1211.58 1279.82,1211.58 1280.4,1211.58 1280.99,1211.58 1281.58,1211.58 1282.16,1211.58 1282.75,1211.58 1283.34,1211.58 1283.92,1211.58 1284.51,1211.58 1285.1,1211.58 1285.68,1211.58 1286.27,1211.58 1286.86,1211.58 1287.44,1211.58 1288.03,1211.58 1288.61,1211.58 1289.2,1211.58 1289.79,1211.58 1290.37,1211.58 1290.96,1211.58 1291.55,1211.58 1292.13,1211.58 1292.72,1211.58 1293.31,1211.58 1293.89,1211.58 1294.48,1211.58 1295.06,1211.58 1295.65,1211.58 1296.24,1211.58 1296.82,1211.58 1297.41,1211.58 1298,1211.58 1298.58,1211.58 1299.17,1211.58 1299.76,1211.58 1300.34,1211.58 1300.93,1211.58 1301.52,1211.58 1302.1,1211.58 1302.69,1211.58 1303.27,1211.58 1303.86,1211.58 1304.45,1211.58 1305.03,1211.58 1305.62,1211.58 1306.21,1211.58 1306.79,1211.58 1307.38,1211.58 1307.97,1211.58 1308.55,1211.58 1309.14,1211.58 1309.73,1211.58 1310.31,1211.58 1310.9,1211.58 1311.48,1211.58 1312.07,1211.58 1312.66,1211.58 1313.24,1211.58 1313.83,1211.58 1314.42,1211.58 1315,1211.58 1315.59,1211.58 1316.18,1211.58 1316.76,1211.58 1317.35,1211.58 1317.93,1211.58 1318.52,1211.58 1319.11,1211.58 1319.69,1211.58 1320.28,1211.58 1320.87,1211.58 1321.45,1211.58 1322.04,1211.58 1322.63,1211.58 1323.21,1211.58 1323.8,1211.58 1324.39,1211.58 1324.97,1211.58 1325.56,1211.58 1326.14,1211.58 1326.73,1211.58 1327.32,1211.58 1327.9,1211.58 1328.49,1211.58 1329.08,1211.58 1329.66,1211.58 1330.25,1211.58 1330.84,1211.58 1331.42,1211.58 1332.01,1211.58 1332.6,1211.58 1333.18,1211.58 1333.77,1211.58 1334.35,1211.58 1334.94,1211.58 1335.53,1211.58 1336.11,1211.58 1336.7,1211.58 1337.29,1211.58 1337.87,1211.58 1338.46,1211.58 1339.05,1211.58 1339.63,1211.58 1340.22,1211.58 1340.8,1211.58 1341.39,1211.58 1341.98,1211.58 1342.56,1211.58 1343.15,1211.58 1343.74,1211.58 1344.32,1211.58 1344.91,1211.58 1345.5,1211.58 1346.08,1211.58 1346.67,1211.58 1347.26,1211.58 1347.84,1211.58 1348.43,1211.58 1349.01,1211.58 1349.6,1211.58 1350.19,1211.58 1350.77,1211.58 1351.36,1211.58 1351.95,1211.58 1352.53,1211.58 1353.12,1211.58 1353.71,1211.58 1354.29,1211.58 1354.88,1211.58 1355.47,1211.58 1356.05,1211.58 1356.64,1211.58 1357.22,1211.58 1357.81,1211.58 1358.4,1211.58 1358.98,1211.58 1359.57,1211.58 1360.16,1211.58 1360.74,1211.58 1361.33,1211.58 1361.92,1211.58 1362.5,1211.58 1363.09,1211.58 1363.68,1211.58 1364.26,1211.58 1364.85,1211.58 1365.43,1211.58 1366.02,1211.58 1366.61,1211.58 1367.19,1211.58 1367.78,1211.58 1368.37,1211.58 1368.95,1211.58 1369.54,1211.58 1370.13,1211.58 1370.71,1211.58 1371.3,1211.58 1371.88,1211.58 1372.47,1211.58 1373.06,1211.58 1373.64,1211.58 1374.23,1211.58 1374.82,1211.58 1375.4,1211.58 1375.99,1211.58 1376.58,1211.58 1377.16,1211.58 1377.75,1211.58 1378.34,1211.58 1378.92,1211.58 1379.51,1211.58 1380.09,1211.58 1380.68,1211.58 1381.27,1211.58 1381.85,1211.58 1382.44,1211.58 1383.03,1211.58 1383.61,1211.58 1384.2,1211.58 1384.79,1211.58 1385.37,1211.58 1385.96,1211.58 1386.55,1211.58 1387.13,1211.58 1387.72,1211.58 1388.3,1211.58 1388.89,1211.58 1389.48,1211.58 1390.06,1211.58 1390.65,1211.58 1391.24,1211.58 1391.82,1211.58 1392.41,1211.58 1393,1211.58 1393.58,1211.58 1394.17,1211.58 1394.75,1211.58 1395.34,1211.58 1395.93,1211.58 1396.51,1211.58 1397.1,1211.58 1397.69,1211.58 1398.27,1211.58 1398.86,1211.58 1399.45,1211.58 1400.03,1211.58 1400.62,1211.58 1401.21,1211.58 1401.79,1211.58 1402.38,1211.58 1402.96,1211.58 1403.55,1211.58 1404.14,1211.58 1404.72,1211.58 1405.31,1211.58 1405.9,1211.58 1406.48,1211.58 1407.07,1211.58 1407.66,1211.58 1408.24,1211.58 1408.83,1211.58 1409.42,1211.58 1410,1211.58 1410.59,1211.58 1411.17,1211.58 1411.76,1211.58 1412.35,1211.58 1412.93,1211.58 1413.52,1211.58 1414.11,1211.58 1414.69,1211.58 1415.28,1211.58 1415.87,1211.58 1416.45,1211.58 1417.04,1211.58 1417.63,1211.58 1418.21,1211.58 1418.8,1211.58 1419.38,1211.58 1419.97,1211.58 1420.56,1211.58 1421.14,1211.58 1421.73,1211.58 1422.32,1211.58 1422.9,1211.58 1423.49,1211.58 1424.08,1211.58 1424.66,1211.58 1425.25,1211.58 1425.83,1211.58 1426.42,1211.58 1427.01,1211.58 1427.59,1211.58 1428.18,1211.58 1428.77,1211.58 1429.35,1211.58 1429.94,1211.58 1430.53,1211.58 1431.11,1211.58 1431.7,1211.58 1432.29,1211.58 1432.87,1211.58 1433.46,1211.58 1434.04,1211.58 1434.63,1211.58 1435.22,1211.58 1435.8,1211.58 1436.39,1211.58 1436.98,1211.58 1437.56,1211.58 1438.15,1211.58 1438.74,1211.58 1439.32,1211.58 1439.91,1211.58 1440.5,1211.58 1441.08,1211.58 1441.67,1211.58 1442.25,1211.58 1442.84,1211.58 1443.43,1211.58 1444.01,1211.58 1444.6,1211.58 1445.19,1211.58 1445.77,1211.58 1446.36,1211.58 1446.95,1211.58 1447.53,1211.58 1448.12,1211.58 1448.7,1211.58 1449.29,1211.58 1449.88,1211.58 1450.46,1211.58 1451.05,1211.58 1451.64,1211.58 1452.22,1211.58 1452.81,1211.58 1453.4,1211.58 1453.98,1211.58 1454.57,1211.58 1455.16,1211.58 1455.74,1211.58 1456.33,1211.58 1456.91,1211.58 1457.5,1211.58 1458.09,1211.58 1458.67,1211.58 1459.26,1211.58 1459.85,1211.58 1460.43,1211.58 1461.02,1211.58 1461.61,1211.58 1462.19,1211.58 1462.78,1211.58 1463.37,1211.58 1463.95,1211.58 1464.54,1211.58 1465.12,1211.58 1465.71,1211.58 1466.3,1211.58 1466.88,1211.58 1467.47,1211.58 1468.06,1211.58 1468.64,1211.58 1469.23,1211.58 1469.82,1211.58 1470.4,1211.58 1470.99,1211.58 1471.57,1211.58 1472.16,1211.58 1472.75,1211.58 1473.33,1211.58 1473.92,1211.58 1474.51,1211.58 1475.09,1211.58 1475.68,1211.58 1476.27,1211.58 1476.85,1211.58 1477.44,1211.58 1478.03,1211.58 1478.61,1211.58 1479.2,1211.58 1479.78,1211.58 1480.37,1211.58 1480.96,1211.58 1481.54,1211.58 1482.13,1211.58 1482.72,1211.58 1483.3,1211.58 1483.89,1211.58 1484.48,1211.58 1485.06,1211.58 1485.65,1211.58 1486.24,1211.58 1486.82,1211.58 1487.41,1211.58 1487.99,1211.58 1488.58,1211.58 1489.17,1211.58 1489.75,1211.58 1490.34,1211.58 1490.93,1211.58 1491.51,1211.58 1492.1,1211.58 1492.69,1211.58 1493.27,1211.58 1493.86,1211.58 1494.45,1211.58 1495.03,1211.58 1495.62,1211.58 1496.2,1211.58 1496.79,1211.58 1497.38,1211.58 1497.96,1211.58 1498.55,1211.58 1499.14,1211.58 1499.72,1211.58 1500.31,1211.58 1500.9,1211.58 1501.48,1211.58 1502.07,1211.58 1502.65,1211.58 1503.24,1211.58 1503.83,1211.58 1504.41,1211.58 1505,1211.58 1505.59,1211.58 1506.17,1211.58 1506.76,1211.58 1507.35,1211.58 1507.93,1211.58 1508.52,1211.58 1509.11,1211.58 1509.69,1211.58 1510.28,1211.58 1510.86,1211.58 1511.45,1211.58 1512.04,1211.58 1512.62,1211.58 1513.21,1211.58 1513.8,1211.58 1514.38,1211.58 1514.97,1211.58 1515.56,1211.58 1516.14,1211.58 1516.73,1211.58 1517.32,1211.58 1517.9,1211.58 1518.49,1211.58 1519.07,1211.58 1519.66,1211.58 1520.25,1211.58 1520.83,1211.58 1521.42,1211.58 1522.01,1211.58 1522.59,1211.58 1523.18,1211.58 1523.77,1211.58 1524.35,1211.58 1524.94,1211.58 1525.52,1211.58 1526.11,1211.58 1526.7,1211.58 1527.28,1211.58 1527.87,1211.58 1528.46,1211.58 1529.04,1211.58 1529.63,1211.58 1530.22,1211.58 1530.8,1211.58 1531.39,1211.58 1531.98,1211.58 1532.56,1211.58 1533.15,1211.58 1533.73,1211.58 1534.32,1211.58 1534.91,1211.58 1535.49,1211.58 1536.08,1211.58 1536.67,1211.58 1537.25,1211.58 1537.84,1211.58 1538.43,1211.58 1539.01,1211.58 1539.6,1211.58 1540.19,1211.58 1540.77,1211.58 1541.36,1211.58 1541.94,1211.58 1542.53,1211.58 1543.12,1211.58 1543.7,1211.58 1544.29,1211.58 1544.88,1211.58 1545.46,1211.58 1546.05,1211.58 1546.64,1211.58 1547.22,1211.58 1547.81,1211.58 1548.4,1211.58 1548.98,1211.58 1549.57,1211.58 1550.15,1211.58 1550.74,1211.58 1551.33,1211.58 1551.91,1211.58 1552.5,1211.58 1553.09,1211.58 1553.67,1211.58 1554.26,1211.58 1554.85,1211.58 1555.43,1211.58 1556.02,1211.58 1556.6,1211.58 1557.19,1211.58 1557.78,1211.58 1558.36,1211.58 1558.95,1211.58 1559.54,1211.58 1560.12,1211.58 1560.71,1211.58 1561.3,1211.58 1561.88,1211.58 1562.47,1211.58 1563.06,1211.58 1563.64,1211.58 1564.23,1211.58 1564.81,1211.58 1565.4,1211.58 1565.99,1211.58 1566.57,1211.58 1567.16,1211.58 1567.75,1211.58 1568.33,1211.58 1568.92,1211.58 1569.51,1211.58 1570.09,1211.58 1570.68,1211.58 1571.27,1211.58 1571.85,1211.58 1572.44,1211.58 1573.02,1211.58 1573.61,1211.58 1574.2,1211.58 1574.78,1211.58 1575.37,1211.58 1575.96,1211.58 1576.54,1211.58 1577.13,1211.58 1577.72,1211.58 1578.3,1211.58 1578.89,1211.58 1579.47,1211.58 1580.06,1211.58 1580.65,1211.58 1581.23,1211.58 1581.82,1211.58 1582.41,1211.58 1582.99,1211.58 1583.58,1211.58 1584.17,1211.58 1584.75,1211.58 1585.34,1211.58 1585.93,1211.58 1586.51,1211.58 1587.1,1211.58 1587.68,1211.58 1588.27,1211.58 1588.86,1211.58 1589.44,1211.58 1590.03,1211.58 1590.62,1211.58 1591.2,1211.58 1591.79,1211.58 1592.38,1211.58 1592.96,1211.58 1593.55,1211.58 1594.14,1211.58 1594.72,1211.58 1595.31,1211.58 1595.89,1211.58 1596.48,1211.58 1597.07,1211.58 1597.65,1211.58 1598.24,1211.58 1598.83,1211.58 1599.41,1211.58 1600,1211.58 1600.59,1211.58 1601.17,1211.58 1601.76,1211.58 1602.34,1211.58 1602.93,1211.58 1603.52,1211.58 1604.1,1211.58 1604.69,1211.58 1605.28,1211.58 1605.86,1211.58 1606.45,1211.58 1607.04,1211.58 1607.62,1211.58 1608.21,1211.58 1608.8,1211.58 1609.38,1211.58 1609.97,1211.58 1610.55,1211.58 1611.14,1211.58 1611.73,1211.58 1612.31,1211.58 1612.9,1211.58 1613.49,1211.58 1614.07,1211.58 1614.66,1211.58 1615.25,1211.58 1615.83,1211.58 1616.42,1211.58 1617.01,1211.58 1617.59,1211.58 1618.18,1211.58 1618.76,1211.58 1619.35,1211.58 1619.94,1211.58 1620.52,1211.58 1621.11,1211.58 1621.7,1211.58 1622.28,1211.58 1622.87,1211.58 1623.46,1211.58 1624.04,1211.58 1624.63,1211.58 1625.22,1211.58 1625.8,1211.58 1626.39,1211.58 1626.97,1211.58 1627.56,1211.58 1628.15,1211.58 1628.73,1211.58 1629.32,1211.58 1629.91,1211.58 1630.49,1211.58 1631.08,1211.58 1631.67,1211.58 1632.25,1211.58 1632.84,1211.58 1633.42,1211.58 1634.01,1211.58 1634.6,1211.58 1635.18,1211.58 1635.77,1211.58 1636.36,1211.58 1636.94,1211.58 1637.53,1211.58 1638.12,1211.58 1638.7,1211.58 1639.29,1211.58 1639.88,1211.58 1640.46,1211.58 1641.05,1211.58 1641.63,1211.58 1642.22,1211.58 1642.81,1211.58 1643.39,1211.58 1643.98,1211.58 1644.57,1211.58 1645.15,1211.58 1645.74,1211.58 1646.33,1211.58 1646.91,1211.58 1647.5,1211.58 1648.09,1211.58 1648.67,1211.58 1649.26,1211.58 1649.84,1211.58 1650.43,1211.58 1651.02,1211.58 1651.6,1211.58 1652.19,1211.58 1652.78,1211.58 1653.36,1211.58 1653.95,1211.58 1654.54,1211.58 1655.12,1211.58 1655.71,1211.58 1656.29,1211.58 1656.88,1211.58 1657.47,1211.58 1658.05,1211.58 1658.64,1211.58 1659.23,1211.58 1659.81,1211.58 1660.4,1211.58 1660.99,1211.58 1661.57,1211.58 1662.16,1211.58 1662.75,1211.58 1663.33,1211.58 1663.92,1211.58 1664.5,1211.58 1665.09,1211.58 1665.68,1211.58 1666.26,1211.58 1666.85,1211.58 1667.44,1211.58 1668.02,1211.58 1668.61,1211.58 1669.2,1211.58 1669.78,1211.58 1670.37,1211.58 1670.96,1211.58 1671.54,1211.58 1672.13,1211.58 1672.71,1211.58 1673.3,1211.58 1673.89,1211.58 1674.47,1211.58 1675.06,1211.58 1675.65,1211.58 1676.23,1211.58 1676.82,1211.58 1677.41,1211.58 1677.99,1211.58 1678.58,1211.58 1679.17,1211.58 1679.75,1211.58 1680.34,1211.58 1680.92,1211.58 1681.51,1211.58 1682.1,1211.58 1682.68,1211.58 1683.27,1211.58 1683.86,1211.58 1684.44,1211.58 1685.03,1211.58 1685.62,1211.58 1686.2,1211.58 1686.79,1211.58 1687.37,1211.58 1687.96,1211.58 1688.55,1211.58 1689.13,1211.58 1689.72,1211.58 1690.31,1211.58 1690.89,1211.58 1691.48,1211.58 1692.07,1211.58 1692.65,1211.58 1693.24,1211.58 1693.83,1211.58 1694.41,1211.58 1695,1211.58 1695.58,1211.58 1696.17,1211.58 1696.76,1211.58 1697.34,1211.58 1697.93,1211.58 1698.52,1211.58 1699.1,1211.58 1699.69,1211.58 1700.28,1211.58 1700.86,1211.58 1701.45,1211.58 1702.04,1211.58 1702.62,1211.58 1703.21,1211.58 1703.79,1211.58 1704.38,1211.58 1704.97,1211.58 1705.55,1211.58 1706.14,1211.58 1706.73,1211.58 1707.31,1211.58 1707.9,1211.58 1708.49,1211.58 1709.07,1211.58 1709.66,1211.58 1710.24,1211.58 1710.83,1211.58 1711.42,1211.58 1712,1211.58 1712.59,1211.58 1713.18,1211.58 1713.76,1211.58 1714.35,1211.58 1714.94,1211.58 1715.52,1211.58 1716.11,1211.58 1716.7,1211.58 1717.28,1211.58 1717.87,1211.58 1718.45,1211.58 1719.04,1211.58 1719.63,1211.58 1720.21,1211.58 1720.8,1211.58 1721.39,1211.58 1721.97,1211.58 1722.56,1211.58 1723.15,1211.58 1723.73,1211.58 1724.32,1211.58 1724.91,1211.58 1725.49,1211.58 1726.08,1211.58 1726.66,1211.58 1727.25,1211.58 1727.84,1211.58 1728.42,1211.58 1729.01,1211.58 1729.6,1211.58 1730.18,1211.58 1730.77,1211.58 1731.36,1211.58 1731.94,1211.58 1732.53,1211.58 1733.11,1211.58 1733.7,1211.58 1734.29,1211.58 1734.87,1211.58 1735.46,1211.58 1736.05,1211.58 1736.63,1211.58 1737.22,1211.58 1737.81,1211.58 1738.39,1211.58 1738.98,1211.58 1739.57,1211.58 1740.15,1211.58 1740.74,1211.58 1741.32,1211.58 1741.91,1211.58 1742.5,1211.58 1743.08,1211.58 1743.67,1211.58 1744.26,1211.58 1744.84,1211.58 1745.43,1211.58 1746.02,1211.58 1746.6,1211.58 1747.19,1211.58 1747.78,1211.58 1748.36,1211.58 1748.95,1211.58 1749.53,1211.58 1750.12,1211.58 1750.71,1211.58 1751.29,1211.58 1751.88,1211.58 1752.47,1211.58 1753.05,1211.58 1753.64,1211.58 1754.23,1211.58 1754.81,1211.58 1755.4,1211.58 1755.99,1211.58 1756.57,1211.58 1757.16,1211.58 1757.74,1211.58 1758.33,1211.58 1758.92,1211.58 1759.5,1211.58 1760.09,1211.58 1760.68,1211.58 1761.26,1211.58 1761.85,1211.58 1762.44,1211.58 1763.02,1211.58 1763.61,1211.58 1764.19,1211.58 1764.78,1211.58 1765.37,1211.58 1765.95,1211.58 1766.54,1211.58 1767.13,1211.58 1767.71,1211.58 1768.3,1211.58 1768.89,1211.58 1769.47,1211.58 1770.06,1211.58 1770.65,1211.58 1771.23,1211.58 1771.82,1211.58 1772.4,1211.58 1772.99,1211.58 1773.58,1211.58 1774.16,1211.58 1774.75,1211.58 1775.34,1211.58 1775.92,1211.58 1776.51,1211.58 1777.1,1211.58 1777.68,1211.58 1778.27,1211.58 1778.86,1211.58 1779.44,1211.58 1780.03,1211.58 1780.61,1211.58 1781.2,1211.58 1781.79,1211.58 1782.37,1211.58 1782.96,1211.58 1783.55,1211.58 1784.13,1211.58 1784.72,1211.58 1785.31,1211.58 1785.89,1211.58 1786.48,1211.58 1787.06,1211.58 1787.65,1211.58 1788.24,1211.58 1788.82,1211.58 1789.41,1211.58 1790,1211.58 1790.58,1211.58 1791.17,1211.58 1791.76,1211.58 1792.34,1211.58 1792.93,1211.58 1793.52,1211.58 1794.1,1211.58 1794.69,1211.58 1795.27,1211.58 1795.86,1211.58 1796.45,1211.58 1797.03,1211.58 1797.62,1211.58 1798.21,1211.58 1798.79,1211.58 1799.38,1211.58 1799.97,1211.58 1800.55,1211.58 1801.14,1211.58 1801.73,1211.58 1802.31,1211.58 1802.9,1211.58 1803.48,1211.58 1804.07,1211.58 1804.66,1211.58 1805.24,1211.58 1805.83,1211.58 1806.42,1211.58 1807,1211.58 1807.59,1211.58 1808.18,1211.58 1808.76,1211.58 1809.35,1211.58 1809.94,1211.58 1810.52,1211.58 1811.11,1211.58 1811.69,1211.58 1812.28,1211.58 1812.87,1211.58 1813.45,1211.58 1814.04,1211.58 1814.63,1211.58 1815.21,1211.58 1815.8,1211.58 1816.39,1211.58 1816.97,1211.58 1817.56,1211.58 1818.14,1211.58 1818.73,1211.58 1819.32,1211.58 1819.9,1211.58 1820.49,1211.58 1821.08,1211.58 1821.66,1211.58 1822.25,1211.58 1822.84,1211.58 1823.42,1211.58 1824.01,1211.58 1824.6,1211.58 1825.18,1211.58 1825.77,1211.58 1826.35,1211.58 1826.94,1211.58 1827.53,1211.58 1828.11,1211.58 1828.7,1211.58 1829.29,1211.58 1829.87,1211.58 1830.46,1211.58 1831.05,1211.58 1831.63,1211.58 1832.22,1211.58 1832.81,1211.58 1833.39,1211.58 1833.98,1211.58 1834.56,1211.58 1835.15,1211.58 1835.74,1211.58 1836.32,1211.58 1836.91,1211.58 1837.5,1211.58 1838.08,1211.58 1838.67,1211.58 1839.26,1211.58 1839.84,1211.58 1840.43,1211.58 1841.01,1211.58 1841.6,1211.58 1842.19,1211.58 1842.77,1211.58 1843.36,1211.58 1843.95,1211.58 1844.53,1211.58 1845.12,1211.58 1845.71,1211.58 1846.29,1211.58 1846.88,1211.58 1847.47,1211.58 1848.05,1211.58 1848.64,1211.58 1849.22,1211.58 1849.81,1211.58 1850.4,1211.58 1850.98,1211.58 1851.57,1211.58 1852.16,1211.58 1852.74,1211.58 1853.33,1211.58 1853.92,1211.58 1854.5,1211.58 1855.09,1211.58 1855.68,1211.58 1856.26,1211.58 1856.85,1211.58 1857.43,1211.58 1858.02,1211.58 1858.61,1211.58 1859.19,1211.58 1859.78,1211.58 1860.37,1211.58 1860.95,1211.58 1861.54,1211.58 1862.13,1211.58 1862.71,1211.58 1863.3,1211.58 1863.88,1211.58 1864.47,1211.58 1865.06,1211.58 1865.64,1211.58 1866.23,1211.58 1866.82,1211.58 1867.4,1211.58 1867.99,1211.58 1868.58,1211.58 1869.16,1211.58 1869.75,1211.58 1870.34,1211.58 1870.92,1211.58 1871.51,1211.58 1872.09,1211.58 1872.68,1211.58 1873.27,1211.58 1873.85,1211.58 1874.44,1211.58 1875.03,1211.58 1875.61,1211.58 1876.2,1211.58 1876.79,1211.58 1877.37,1211.58 1877.96,1211.58 1878.55,1211.58 1879.13,1211.58 1879.72,1211.58 1880.3,1211.58 1880.89,1211.58 1881.48,1211.58 1882.06,1211.58 1882.65,1211.58 1883.24,1211.58 1883.82,1211.58 1884.41,1211.58 1885,1211.58 1885.58,1211.58 1886.17,1211.58 1886.76,1211.58 1887.34,1211.58 1887.93,1211.58 1888.51,1211.58 1889.1,1211.58 1889.69,1211.58 1890.27,1211.58 1890.86,1211.58 1891.45,1211.58 1892.03,1211.58 1892.62,1211.58 1893.21,1211.58 1893.79,1211.58 1894.38,1211.58 1894.96,1211.58 1895.55,1211.58 1896.14,1211.58 1896.72,1211.58 1897.31,1211.58 1897.9,1211.58 1898.48,1211.58 1899.07,1211.58 1899.66,1211.58 1900.24,1211.58 1900.83,1211.58 1901.42,1211.58 1902,1211.58 1902.59,1211.58 1903.17,1211.58 1903.76,1211.58 1904.35,1211.58 1904.93,1211.58 1905.52,1211.58 1906.11,1211.58 1906.69,1211.58 1907.28,1211.58 1907.87,1211.58 1908.45,1211.58 1909.04,1211.58 1909.63,1211.58 1910.21,1211.58 1910.8,1211.58 1911.38,1211.58 1911.97,1211.58 1912.56,1211.58 1913.14,1211.58 1913.73,1211.58 1914.32,1211.58 1914.9,1211.58 1915.49,1211.58 1916.08,1211.58 1916.66,1211.58 1917.25,1211.58 1917.83,1211.58 1918.42,1211.58 1919.01,1211.58 1919.59,1211.58 1920.18,1211.58 1920.77,1211.58 1921.35,1211.58 1921.94,1211.58 1922.53,1211.58 1923.11,1211.58 1923.7,1211.58 1924.29,1211.58 1924.87,1211.58 1925.46,1211.58 1926.04,1211.58 1926.63,1211.58 1927.22,1211.58 1927.8,1211.58 1928.39,1211.58 1928.98,1211.58 1929.56,1211.58 1930.15,1211.58 1930.74,1211.58 1931.32,1211.58 1931.91,1211.58 1932.5,1211.58 1933.08,1211.58 1933.67,1211.58 1934.25,1211.58 1934.84,1211.58 1935.43,1211.58 1936.01,1211.58 1936.6,1211.58 1937.19,1211.58 1937.77,1211.58 1938.36,1211.58 1938.95,1211.58 1939.53,1211.58 1940.12,1211.58 1940.71,1211.58 1941.29,1211.58 1941.88,1211.58 1942.46,1211.58 1943.05,1211.58 1943.64,1211.58 1944.22,1211.58 1944.81,1211.58 1945.4,1211.58 1945.98,1211.58 1946.57,1211.58 1947.16,1211.58 1947.74,1211.58 1948.33,1211.58 1948.91,1211.58 1949.5,1211.58 1950.09,1211.58 1950.67,1211.58 1951.26,1211.58 1951.85,1211.58 1952.43,1211.58 1953.02,1211.58 1953.61,1211.58 1954.19,1211.58 1954.78,1211.58 1955.37,1211.58 1955.95,1211.58 1956.54,1211.58 1957.12,1211.58 1957.71,1211.58 1958.3,1211.58 1958.88,1211.58 1959.47,1211.58 1960.06,1211.58 1960.64,1211.58 1961.23,1211.58 1961.82,1211.58 1962.4,1211.58 1962.99,1211.58 1963.58,1211.58 1964.16,1211.58 1964.75,1211.58 1965.33,1211.58 1965.92,1211.58 1966.51,1211.58 1967.09,1211.58 1967.68,1211.58 1968.27,1211.58 1968.85,1211.58 1969.44,1211.58 1970.03,1211.58 1970.61,1211.58 1971.2,1211.58 1971.78,1211.58 1972.37,1211.58 1972.96,1211.58 1973.54,1211.58 1974.13,1211.58 1974.72,1211.58 1975.3,1211.58 1975.89,1211.58 1976.48,1211.58 1977.06,1211.58 1977.65,1211.58 1978.24,1211.58 1978.82,1211.58 1979.41,1211.58 1979.99,1211.58 1980.58,1211.58 1981.17,1211.58 1981.75,1211.58 1982.34,1211.58 1982.93,1211.58 1983.51,1211.58 1984.1,1211.58 1984.69,1211.58 1985.27,1211.58 1985.86,1211.58 1986.45,1211.58 1987.03,1211.58 1987.62,1211.58 1988.2,1211.58 1988.79,1211.58 1989.38,1211.58 1989.96,1211.58 1990.55,1211.58 1991.14,1211.58 1991.72,1211.58 1992.31,1211.58 1992.9,1211.58 1993.48,1211.58 1994.07,1211.58 1994.65,1211.58 1995.24,1211.58 1995.83,1211.58 1996.41,1211.58 1997,1211.58 1997.59,1211.58 1998.17,1211.58 1998.76,1211.58 1999.35,1211.58 1999.93,1211.58 2000.52,1211.58 2001.11,1211.58 2001.69,1211.58 2002.28,1211.58 2002.86,1211.58 2003.45,1211.58 2004.04,1211.58 2004.62,1211.58 2005.21,1211.58 2005.8,1211.58 2006.38,1211.58 2006.97,1211.58 2007.56,1211.58 2008.14,1211.58 2008.73,1211.58 2009.32,1211.58 2009.9,1211.58 2010.49,1211.58 2011.07,1211.58 2011.66,1211.58 2012.25,1211.58 2012.83,1211.58 2013.42,1211.58 2014.01,1211.58 2014.59,1211.58 2015.18,1211.58 2015.77,1211.58 2016.35,1211.58 2016.94,1211.58 2017.53,1211.58 2018.11,1211.58 2018.7,1211.58 2019.28,1211.58 2019.87,1211.58 2020.46,1211.58 2021.04,1211.58 2021.63,1211.58 2022.22,1211.58 2022.8,1211.58 2023.39,1211.58 2023.98,1211.58 2024.56,1211.58 2025.15,1211.58 2025.73,1211.58 2026.32,1211.58 2026.91,1211.58 2027.49,1211.58 2028.08,1211.58 2028.67,1211.58 2029.25,1211.58 2029.84,1211.58 2030.43,1211.58 2031.01,1211.58 2031.6,1211.58 2032.19,1211.58 2032.77,1211.58 2033.36,1211.58 2033.94,1211.58 2034.53,1211.58 2035.12,1211.58 2035.7,1211.58 2036.29,1211.58 2036.88,1211.58 2037.46,1211.58 2038.05,1211.58 2038.64,1211.58 2039.22,1211.58 2039.81,1211.58 2040.4,1211.58 2040.98,1211.58 2041.57,1211.58 2042.15,1211.58 2042.74,1211.58 2043.33,1211.58 2043.91,1211.58 2044.5,1211.58 2045.09,1211.58 2045.67,1211.58 2046.26,1211.58 2046.85,1211.58 2047.43,1211.58 2048.02,1211.58 2048.6,1211.58 2049.19,1211.58 2049.78,1211.58 2050.36,1211.58 2050.95,1211.58 2051.54,1211.58 2052.12,1211.58 2052.71,1211.58 2053.3,1211.58 2053.88,1211.58 2054.47,1211.58 2055.06,1211.58 2055.64,1211.58 2056.23,1211.58 2056.81,1211.58 2057.4,1211.58 2057.99,1211.58 2058.57,1211.58 2059.16,1211.58 2059.75,1211.58 2060.33,1211.58 2060.92,1211.58 2061.51,1211.58 2062.09,1211.58 2062.68,1211.58 2063.27,1211.58 2063.85,1211.58 2064.44,1211.58 2065.02,1211.58 2065.61,1211.58 2066.2,1211.58 2066.78,1211.58 2067.37,1211.58 2067.96,1211.58 2068.54,1211.58 2069.13,1211.58 2069.72,1211.58 2070.3,1211.58 2070.89,1211.58 2071.48,1211.58 2072.06,1211.58 2072.65,1211.58 2073.23,1211.58 2073.82,1211.58 2074.41,1211.58 2074.99,1211.58 2075.58,1211.58 2076.17,1211.58 2076.75,1211.58 2077.34,1211.58 2077.93,1211.58 2078.51,1211.58 2079.1,1211.58 2079.68,1211.58 2080.27,1211.58 2080.86,1211.58 2081.44,1211.58 2082.03,1211.58 2082.62,1211.58 2083.2,1211.58 2083.79,1211.58 2084.38,1211.58 2084.96,1211.58 2085.55,1211.58 2086.14,1211.58 2086.72,1211.58 2087.31,1211.58 2087.89,1211.58 2088.48,1211.58 2089.07,1211.58 2089.65,1211.58 2090.24,1211.58 2090.83,1211.58 2091.41,1211.58 2092,1211.58 2092.59,1211.58 2093.17,1211.58 2093.76,1211.58 2094.35,1211.58 2094.93,1211.58 2095.52,1211.58 2096.1,1211.58 2096.69,1211.58 2097.28,1211.58 2097.86,1211.58 2098.45,1211.58 2099.04,1211.58 2099.62,1211.58 2100.21,1211.58 2100.8,1211.58 2101.38,1211.58 2101.97,1211.58 2102.55,1211.58 2103.14,1211.58 2103.73,1211.58 2104.31,1211.58 2104.9,1211.58 2105.49,1211.58 2106.07,1211.58 2106.66,1211.58 2107.25,1211.58 2107.83,1211.58 2108.42,1211.58 2109.01,1211.58 2109.59,1211.58 2110.18,1211.58 2110.76,1211.58 2111.35,1211.58 2111.94,1211.58 2112.52,1211.58 2113.11,1211.58 2113.7,1211.58 2114.28,1211.58 2114.87,1211.58 2115.46,1211.58 2116.04,1211.58 2116.63,1211.58 2117.22,1211.58 2117.8,1211.58 2118.39,1211.58 2118.97,1211.58 2119.56,1211.58 2120.15,1211.58 2120.73,1211.58 2121.32,1211.58 2121.91,1211.58 2122.49,1211.58 2123.08,1211.58 2123.67,1211.58 2124.25,1211.58 2124.84,1211.58 2125.42,1211.58 2126.01,1211.58 2126.6,1211.58 2127.18,1211.58 2127.77,1211.58 2128.36,1211.58 2128.94,1211.58 2129.53,1211.58 2130.12,1211.58 2130.7,1211.58 2131.29,1211.58 2131.88,1211.58 2132.46,1211.58 2133.05,1211.58 2133.63,1211.58 2134.22,1211.58 2134.81,1211.58 2135.39,1211.58 2135.98,1211.58 2136.57,1211.58 2137.15,1211.58 2137.74,1211.58 2138.33,1211.58 2138.91,1211.58 2139.5,1211.58 2140.09,1211.58 2140.67,1211.58 2141.26,1211.58 2141.84,1211.58 2142.43,1211.58 2143.02,1211.58 2143.6,1211.58 2144.19,1211.58 2144.78,1211.58 2145.36,1211.58 2145.95,1211.58 2146.54,1211.58 2147.12,1211.58 2147.71,1211.58 2148.3,1211.58 2148.88,1211.58 2149.47,1211.58 2150.05,1211.58 2150.64,1211.58 2151.23,1211.58 2151.81,1211.58 2152.4,1211.58 2152.99,1211.58 2153.57,1211.58 2154.16,1211.58 2154.75,1211.58 2155.33,1211.58 2155.92,1211.58 2156.5,1211.58 2157.09,1211.58 2157.68,1211.58 2158.26,1211.58 \"/>\n<path clip-path=\"url(#clip902)\" d=\"M986.025 1211.54 L986.612 1211.54 L987.198 1211.54 L987.785 1211.54 L988.371 1211.54 L988.957 1211.54 L989.544 1211.54 L990.13 1211.54 L990.717 1211.54 L991.303 1211.54 L991.889 1211.54 L992.476 1211.54 L993.062 1211.54 L993.649 1211.54 L994.235 1211.54 L994.822 1211.54 L995.408 1211.54 L995.994 1211.54 L996.581 1211.54 L997.167 1211.54 L997.754 1211.54 L998.34 1211.54 L998.926 1211.54 L999.513 1211.54 L1000.1 1211.54 L1000.69 1211.54 L1001.27 1211.54 L1001.86 1211.54 L1002.44 1211.54 L1003.03 1211.54 L1003.62 1211.54 L1004.2 1211.54 L1004.79 1211.54 L1005.38 1211.54 L1005.96 1211.54 L1006.55 1211.54 L1007.14 1211.54 L1007.72 1211.54 L1008.31 1211.54 L1008.9 1211.54 L1009.48 1211.54 L1010.07 1211.54 L1010.65 1211.54 L1011.24 1211.54 L1011.83 1211.54 L1012.41 1211.54 L1013 1211.54 L1013.59 1211.54 L1014.17 1211.54 L1014.76 1211.54 L1015.35 1211.54 L1015.93 1211.54 L1016.52 1211.54 L1017.11 1211.54 L1017.69 1211.54 L1018.28 1211.54 L1018.86 1211.54 L1019.45 1211.54 L1020.04 1211.54 L1020.62 1211.54 L1021.21 1211.54 L1021.8 1211.54 L1022.38 1211.54 L1022.97 1211.54 L1023.56 1211.54 L1024.14 1211.54 L1024.73 1211.54 L1025.32 1211.54 L1025.9 1211.54 L1026.49 1211.54 L1027.07 1211.54 L1027.66 1211.54 L1028.25 1211.54 L1028.83 1211.54 L1029.42 1211.54 L1030.01 1211.54 L1030.59 1211.54 L1031.18 1211.54 L1031.77 1211.54 L1032.35 1211.54 L1032.94 1211.54 L1033.52 1211.54 L1034.11 1211.54 L1034.7 1211.54 L1035.28 1211.54 L1035.87 1211.54 L1036.46 1211.54 L1037.04 1211.54 L1037.63 1211.54 L1038.22 1211.54 L1038.8 1211.54 L1039.39 1211.54 L1039.98 1211.54 L1040.56 1211.54 L1041.15 1211.54 L1041.73 1211.54 L1042.32 1211.54 L1042.91 1211.54 L1043.49 1211.54 L1044.08 1211.54 L1044.67 1211.54 L1045.25 1211.54 L1045.84 1211.54 L1046.43 1211.54 L1047.01 1211.54 L1047.6 1211.54 L1048.19 1211.54 L1048.77 1211.54 L1049.36 1211.54 L1049.94 1211.54 L1050.53 1211.54 L1051.12 1211.54 L1051.7 1211.54 L1052.29 1211.54 L1052.88 1211.54 L1053.46 1211.54 L1054.05 1211.54 L1054.64 1211.54 L1055.22 1211.54 L1055.81 1211.54 L1056.39 1211.54 L1056.98 1211.54 L1057.57 1211.54 L1058.15 1211.54 L1058.74 1211.54 L1059.33 1211.54 L1059.91 1211.54 L1060.5 1211.54 L1061.09 1211.54 L1061.67 1211.54 L1062.26 1211.54 L1062.85 1211.54 L1063.43 1211.54 L1064.02 1211.54 L1064.6 1211.54 L1065.19 1211.54 L1065.78 1211.54 L1066.36 1211.54 L1066.95 1211.54 L1067.54 1211.54 L1068.12 1211.54 L1068.71 1211.54 L1069.3 1211.54 L1069.88 1211.54 L1070.47 1211.54 L1071.06 1211.54 L1071.64 1211.54 L1072.23 1211.54 L1072.81 1211.54 L1073.4 1211.54 L1073.99 1211.54 L1074.57 1211.54 L1075.16 1211.54 L1075.75 1211.54 L1076.33 1211.54 L1076.92 1211.54 L1077.51 1211.54 L1078.09 1211.54 L1078.68 1211.54 L1079.26 1211.54 L1079.85 1211.54 L1080.44 1211.54 L1081.02 1211.54 L1081.61 1211.54 L1082.2 1211.54 L1082.78 1211.54 L1083.37 1211.54 L1083.96 1211.54 L1084.54 1211.54 L1085.13 1211.54 L1085.72 1211.54 L1086.3 1211.54 L1086.89 1211.54 L1087.47 1211.54 L1088.06 1211.54 L1088.65 1211.54 L1089.23 1211.54 L1089.82 1211.54 L1090.41 1211.54 L1090.99 1211.54 L1091.58 1211.54 L1092.17 1211.54 L1092.75 1211.54 L1093.34 1211.54 L1093.93 1211.54 L1094.51 1211.54 L1095.1 1211.54 L1095.68 1211.54 L1096.27 1211.54 L1096.86 1211.54 L1097.44 1211.54 L1098.03 1211.54 L1098.62 1211.54 L1099.2 1211.54 L1099.79 1211.54 L1100.38 1211.54 L1100.96 1211.54 L1101.55 1211.54 L1102.14 1211.54 L1102.72 1211.54 L1103.31 1211.54 L1103.89 1211.54 L1104.48 1211.54 L1105.07 1211.54 L1105.65 1211.54 L1106.24 1211.54 L1106.83 1211.54 L1107.41 1211.54 L1108 1211.54 L1108.59 1211.54 L1109.17 1211.54 L1109.76 1211.54 L1110.34 1211.54 L1110.93 1211.54 L1111.52 1211.54 L1112.1 1211.54 L1112.69 1211.54 L1113.28 1211.54 L1113.86 1211.54 L1114.45 1211.54 L1115.04 1211.54 L1115.62 1211.54 L1116.21 1211.54 L1116.8 1211.54 L1117.38 1211.54 L1117.97 1211.54 L1118.55 1211.54 L1119.14 1211.54 L1119.73 1211.54 L1120.31 1211.54 L1120.9 1211.54 L1121.49 1211.54 L1122.07 1211.54 L1122.66 1211.54 L1123.25 1211.54 L1123.83 1211.54 L1124.42 1211.54 L1125.01 1211.54 L1125.59 1211.54 L1126.18 1211.54 L1126.76 1211.54 L1127.35 1211.54 L1127.94 1211.54 L1128.52 1211.54 L1129.11 1211.54 L1129.7 1211.54 L1130.28 1211.54 L1130.87 1211.54 L1131.46 1211.54 L1132.04 1211.54 L1132.63 1211.54 L1133.21 1211.54 L1133.8 1211.54 L1134.39 1211.54 L1134.97 1211.54 L1135.56 1211.54 L1136.15 1211.54 L1136.73 1211.54 L1137.32 1211.54 L1137.91 1211.54 L1138.49 1211.54 L1139.08 1211.54 L1139.67 1211.54 L1140.25 1211.54 L1140.84 1211.54 L1141.42 1211.54 L1142.01 1211.54 L1142.6 1211.54 L1143.18 1211.54 L1143.77 1211.54 L1144.36 1211.54 L1144.94 1211.54 L1145.53 1211.54 L1146.12 1211.54 L1146.7 1211.54 L1147.29 1211.54 L1147.88 1211.54 L1148.46 1211.54 L1149.05 1211.54 L1149.63 1211.54 L1150.22 1211.54 L1150.81 1211.54 L1151.39 1211.54 L1151.98 1211.54 L1152.57 1211.54 L1153.15 1211.54 L1153.74 1211.54 L1154.33 1211.54 L1154.91 1211.54 L1155.5 1211.54 L1156.09 1211.54 L1156.67 1211.54 L1157.26 1211.54 L1157.84 1211.54 L1158.43 1211.54 L1159.02 1211.54 L1159.6 1211.54 L1160.19 1211.54 L1160.78 1211.54 L1161.36 1211.54 L1161.95 1211.54 L1162.54 1211.54 L1163.12 1211.54 L1163.71 1211.54 L1164.29 1211.54 L1164.88 1211.54 L1165.47 1211.54 L1166.05 1211.54 L1166.64 1211.54 L1167.23 1211.54 L1167.81 1211.54 L1168.4 1211.54 L1168.99 1211.54 L1169.57 1211.54 L1170.16 1211.54 L1170.75 1211.54 L1171.33 1211.54 L1171.92 1211.54 L1172.5 1211.54 L1173.09 1211.54 L1173.68 1211.54 L1174.26 1211.54 L1174.85 1211.54 L1175.44 1211.54 L1176.02 1211.54 L1176.61 1211.54 L1177.2 1211.54 L1177.78 1211.54 L1178.37 1211.54 L1178.96 1211.54 L1179.54 1211.54 L1180.13 1211.54 L1180.71 1211.54 L1181.3 1211.54 L1181.89 1211.54 L1182.47 1211.54 L1183.06 1211.54 L1183.65 1211.54 L1184.23 1211.54 L1184.82 1211.54 L1185.41 1211.54 L1185.99 1211.54 L1186.58 1211.54 L1187.16 1211.54 L1187.75 1211.54 L1188.34 1211.54 L1188.92 1211.54 L1189.51 1211.54 L1190.1 1211.54 L1190.68 1211.54 L1191.27 1211.54 L1191.86 1211.54 L1192.44 1211.54 L1193.03 1211.54 L1193.62 1211.54 L1194.2 1211.54 L1194.79 1211.54 L1195.37 1211.54 L1195.96 1211.54 L1196.55 1211.54 L1197.13 1211.54 L1197.72 1211.54 L1198.31 1211.54 L1198.89 1211.54 L1199.48 1211.54 L1200.07 1211.54 L1200.65 1211.54 L1201.24 1211.54 L1201.83 1211.54 L1202.41 1211.54 L1203 1211.54 L1203.58 1211.54 L1204.17 1211.54 L1204.76 1211.54 L1205.34 1211.54 L1205.93 1211.54 L1206.52 1211.54 L1207.1 1211.54 L1207.69 1211.54 L1208.28 1211.54 L1208.86 1211.54 L1209.45 1211.54 L1210.03 1211.54 L1210.62 1211.54 L1211.21 1211.54 L1211.79 1211.54 L1212.38 1211.54 L1212.97 1211.54 L1213.55 1211.54 L1214.14 1211.54 L1214.73 1211.54 L1215.31 1211.54 L1215.9 1211.54 L1216.49 1211.54 L1217.07 1211.54 L1217.66 1211.54 L1218.24 1211.54 L1218.83 1211.54 L1219.42 1211.54 L1220 1211.54 L1220.59 1211.54 L1221.18 1211.54 L1221.76 1211.54 L1222.35 1211.54 L1222.94 1211.54 L1223.52 1211.54 L1224.11 1211.54 L1224.7 1211.54 L1225.28 1211.54 L1225.87 1211.54 L1226.45 1211.54 L1227.04 1211.54 L1227.63 1211.54 L1228.21 1211.54 L1228.8 1211.54 L1229.39 1211.54 L1229.97 1211.54 L1230.56 1211.54 L1231.15 1211.54 L1231.73 1211.54 L1232.32 1211.54 L1232.91 1211.54 L1233.49 1211.54 L1234.08 1211.54 L1234.66 1211.54 L1235.25 1211.54 L1235.84 1211.54 L1236.42 1211.54 L1237.01 1211.54 L1237.6 1211.54 L1238.18 1211.54 L1238.77 1211.54 L1239.36 1211.54 L1239.94 1211.54 L1240.53 1211.54 L1241.11 1211.54 L1241.7 1211.54 L1242.29 1211.54 L1242.87 1211.54 L1243.46 1211.54 L1244.05 1211.54 L1244.63 1211.54 L1245.22 1211.54 L1245.81 1211.54 L1246.39 1211.54 L1246.98 1211.54 L1247.57 1211.54 L1248.15 1211.54 L1248.74 1211.54 L1249.32 1211.54 L1249.91 1211.54 L1250.5 1211.54 L1251.08 1211.54 L1251.67 1211.54 L1252.26 1211.54 L1252.84 1211.54 L1253.43 1211.54 L1254.02 1211.54 L1254.6 1211.54 L1255.19 1211.54 L1255.78 1211.54 L1256.36 1211.54 L1256.95 1211.54 L1257.53 1211.54 L1258.12 1211.54 L1258.71 1211.54 L1259.29 1211.54 L1259.88 1211.54 L1260.47 1211.54 L1261.05 1211.54 L1261.64 1211.54 L1262.23 1211.54 L1262.81 1211.54 L1263.4 1211.54 L1263.98 1211.54 L1264.57 1211.54 L1265.16 1211.54 L1265.74 1211.54 L1266.33 1211.54 L1266.92 1211.54 L1267.5 1211.54 L1268.09 1211.54 L1268.68 1211.54 L1269.26 1211.54 L1269.85 1211.54 L1270.44 1211.54 L1271.02 1211.54 L1271.61 1211.54 L1272.19 1211.54 L1272.78 1211.54 L1273.37 1211.54 L1273.95 1211.54 L1274.54 1211.54 L1275.13 1211.54 L1275.71 1211.54 L1276.3 1211.54 L1276.89 1211.54 L1277.47 1211.54 L1278.06 1211.54 L1278.65 1211.54 L1279.23 1211.54 L1279.82 1211.54 L1280.4 1211.54 L1280.99 1211.54 L1281.58 1211.54 L1282.16 1211.54 L1282.75 1211.54 L1283.34 1211.54 L1283.92 1211.54 L1284.51 1211.54 L1285.1 1211.54 L1285.68 1211.54 L1286.27 1211.54 L1286.86 1211.54 L1287.44 1211.54 L1288.03 1211.54 L1288.61 1211.54 L1289.2 1211.54 L1289.79 1211.54 L1290.37 1211.54 L1290.96 1211.54 L1291.55 1211.54 L1292.13 1211.54 L1292.72 1211.54 L1293.31 1211.54 L1293.89 1211.54 L1294.48 1211.54 L1295.06 1211.54 L1295.65 1211.54 L1296.24 1211.54 L1296.82 1211.54 L1297.41 1211.54 L1298 1211.54 L1298.58 1211.54 L1299.17 1211.54 L1299.76 1211.54 L1300.34 1211.54 L1300.93 1211.54 L1301.52 1211.54 L1302.1 1211.54 L1302.69 1211.54 L1303.27 1211.54 L1303.86 1211.54 L1304.45 1211.54 L1305.03 1211.54 L1305.62 1211.54 L1306.21 1211.54 L1306.79 1211.54 L1307.38 1211.54 L1307.97 1211.54 L1308.55 1211.54 L1309.14 1211.54 L1309.73 1211.54 L1310.31 1211.54 L1310.9 1211.54 L1311.48 1211.54 L1312.07 1211.54 L1312.66 1211.54 L1313.24 1211.54 L1313.83 1211.54 L1314.42 1211.54 L1315 1211.54 L1315.59 1211.54 L1316.18 1211.54 L1316.76 1211.54 L1317.35 1211.54 L1317.93 1211.54 L1318.52 1211.54 L1319.11 1211.54 L1319.69 1211.54 L1320.28 1211.54 L1320.87 1211.54 L1321.45 1211.54 L1322.04 1211.54 L1322.63 1211.54 L1323.21 1211.54 L1323.8 1211.54 L1324.39 1211.54 L1324.97 1211.54 L1325.56 1211.54 L1326.14 1211.54 L1326.73 1211.54 L1327.32 1211.54 L1327.9 1211.54 L1328.49 1211.54 L1329.08 1211.54 L1329.66 1211.54 L1330.25 1211.54 L1330.84 1211.54 L1331.42 1211.54 L1332.01 1211.54 L1332.6 1211.54 L1333.18 1211.54 L1333.77 1211.54 L1334.35 1211.54 L1334.94 1211.54 L1335.53 1211.54 L1336.11 1211.54 L1336.7 1211.54 L1337.29 1211.54 L1337.87 1211.54 L1338.46 1211.54 L1339.05 1211.54 L1339.63 1211.54 L1340.22 1211.54 L1340.8 1211.54 L1341.39 1211.54 L1341.98 1211.54 L1342.56 1211.54 L1343.15 1211.54 L1343.74 1211.54 L1344.32 1211.54 L1344.91 1211.54 L1345.5 1211.54 L1346.08 1211.54 L1346.67 1211.54 L1347.26 1211.54 L1347.84 1211.54 L1348.43 1211.54 L1349.01 1211.54 L1349.6 1211.54 L1350.19 1211.54 L1350.77 1211.54 L1351.36 1211.54 L1351.95 1211.54 L1352.53 1211.54 L1353.12 1211.54 L1353.71 1211.54 L1354.29 1211.54 L1354.88 1211.54 L1355.47 1211.54 L1356.05 1211.54 L1356.64 1211.54 L1357.22 1211.54 L1357.81 1211.54 L1358.4 1211.54 L1358.98 1211.54 L1359.57 1211.54 L1360.16 1211.54 L1360.74 1211.54 L1361.33 1211.54 L1361.92 1211.54 L1362.5 1211.54 L1363.09 1211.54 L1363.68 1211.54 L1364.26 1211.54 L1364.85 1211.54 L1365.43 1211.54 L1366.02 1211.54 L1366.61 1211.54 L1367.19 1211.54 L1367.78 1211.54 L1368.37 1211.54 L1368.95 1211.54 L1369.54 1211.54 L1370.13 1211.54 L1370.71 1211.54 L1371.3 1211.54 L1371.88 1211.54 L1372.47 1211.54 L1373.06 1211.54 L1373.64 1211.54 L1374.23 1211.54 L1374.82 1211.54 L1375.4 1211.54 L1375.99 1211.54 L1376.58 1211.54 L1377.16 1211.54 L1377.75 1211.54 L1378.34 1211.54 L1378.92 1211.54 L1379.51 1211.54 L1380.09 1211.54 L1380.68 1211.54 L1381.27 1211.54 L1381.85 1211.54 L1382.44 1211.54 L1383.03 1211.54 L1383.61 1211.54 L1384.2 1211.54 L1384.79 1211.54 L1385.37 1211.54 L1385.96 1211.54 L1386.55 1211.54 L1387.13 1211.54 L1387.72 1211.54 L1388.3 1211.54 L1388.89 1211.54 L1389.48 1211.54 L1390.06 1211.54 L1390.65 1211.54 L1391.24 1211.54 L1391.82 1211.54 L1392.41 1211.54 L1393 1211.54 L1393.58 1211.54 L1394.17 1211.54 L1394.75 1211.54 L1395.34 1211.54 L1395.93 1211.54 L1396.51 1211.54 L1397.1 1211.54 L1397.69 1211.54 L1398.27 1211.54 L1398.86 1211.54 L1399.45 1211.54 L1400.03 1211.54 L1400.62 1211.54 L1401.21 1211.54 L1401.79 1211.54 L1402.38 1211.54 L1402.96 1211.54 L1403.55 1211.54 L1404.14 1211.54 L1404.72 1211.54 L1405.31 1211.54 L1405.9 1211.54 L1406.48 1211.54 L1407.07 1211.54 L1407.66 1211.54 L1408.24 1211.54 L1408.83 1211.54 L1409.42 1211.54 L1410 1211.54 L1410.59 1211.54 L1411.17 1211.54 L1411.76 1211.54 L1412.35 1211.54 L1412.93 1211.54 L1413.52 1211.54 L1414.11 1211.54 L1414.69 1211.54 L1415.28 1211.54 L1415.87 1211.54 L1416.45 1211.54 L1417.04 1211.54 L1417.63 1211.54 L1418.21 1211.54 L1418.8 1211.54 L1419.38 1211.54 L1419.97 1211.54 L1420.56 1211.54 L1421.14 1211.54 L1421.73 1211.54 L1422.32 1211.54 L1422.9 1211.54 L1423.49 1211.54 L1424.08 1211.54 L1424.66 1211.54 L1425.25 1211.54 L1425.83 1211.54 L1426.42 1211.54 L1427.01 1211.54 L1427.59 1211.54 L1428.18 1211.54 L1428.77 1211.54 L1429.35 1211.54 L1429.94 1211.54 L1430.53 1211.54 L1431.11 1211.54 L1431.7 1211.54 L1432.29 1211.54 L1432.87 1211.54 L1433.46 1211.54 L1434.04 1211.54 L1434.63 1211.54 L1435.22 1211.54 L1435.8 1211.54 L1436.39 1211.54 L1436.98 1211.54 L1437.56 1211.54 L1438.15 1211.54 L1438.74 1211.54 L1439.32 1211.54 L1439.91 1211.54 L1440.5 1211.54 L1441.08 1211.54 L1441.67 1211.54 L1442.25 1211.54 L1442.84 1211.54 L1443.43 1211.54 L1444.01 1211.54 L1444.6 1211.54 L1445.19 1211.54 L1445.77 1211.54 L1446.36 1211.54 L1446.95 1211.54 L1447.53 1211.54 L1448.12 1211.54 L1448.7 1211.54 L1449.29 1211.54 L1449.88 1211.54 L1450.46 1211.54 L1451.05 1211.54 L1451.64 1211.54 L1452.22 1211.54 L1452.81 1211.54 L1453.4 1211.54 L1453.98 1211.54 L1454.57 1211.54 L1455.16 1211.54 L1455.74 1211.54 L1456.33 1211.54 L1456.91 1211.54 L1457.5 1211.54 L1458.09 1211.54 L1458.67 1211.54 L1459.26 1211.54 L1459.85 1211.54 L1460.43 1211.54 L1461.02 1211.54 L1461.61 1211.54 L1462.19 1211.54 L1462.78 1211.54 L1463.37 1211.54 L1463.95 1211.54 L1464.54 1211.54 L1465.12 1211.54 L1465.71 1211.54 L1466.3 1211.54 L1466.88 1211.54 L1467.47 1211.54 L1468.06 1211.54 L1468.64 1211.54 L1469.23 1211.54 L1469.82 1211.54 L1470.4 1211.54 L1470.99 1211.54 L1471.57 1211.54 L1472.16 1211.54 L1472.75 1211.54 L1473.33 1211.54 L1473.92 1211.54 L1474.51 1211.54 L1475.09 1211.54 L1475.68 1211.54 L1476.27 1211.54 L1476.85 1211.54 L1477.44 1211.54 L1478.03 1211.54 L1478.61 1211.54 L1479.2 1211.54 L1479.78 1211.54 L1480.37 1211.54 L1480.96 1211.54 L1481.54 1211.54 L1482.13 1211.54 L1482.72 1211.54 L1483.3 1211.54 L1483.89 1211.54 L1484.48 1211.54 L1485.06 1211.54 L1485.65 1211.54 L1486.24 1211.54 L1486.82 1211.54 L1487.41 1211.54 L1487.99 1211.54 L1488.58 1211.54 L1489.17 1211.54 L1489.75 1211.54 L1490.34 1211.54 L1490.93 1211.54 L1491.51 1211.54 L1492.1 1211.54 L1492.69 1211.54 L1493.27 1211.54 L1493.86 1211.54 L1494.45 1211.54 L1495.03 1211.54 L1495.62 1211.54 L1496.2 1211.54 L1496.79 1211.54 L1497.38 1211.54 L1497.96 1211.54 L1498.55 1211.54 L1499.14 1211.54 L1499.72 1211.54 L1500.31 1211.54 L1500.9 1211.54 L1501.48 1211.54 L1502.07 1211.54 L1502.65 1211.54 L1503.24 1211.54 L1503.83 1211.54 L1504.41 1211.54 L1505 1211.54 L1505.59 1211.54 L1506.17 1211.54 L1506.76 1211.54 L1507.35 1211.54 L1507.93 1211.54 L1508.52 1211.54 L1509.11 1211.54 L1509.69 1211.54 L1510.28 1211.54 L1510.86 1211.54 L1511.45 1211.54 L1512.04 1211.54 L1512.62 1211.54 L1513.21 1211.54 L1513.8 1211.54 L1514.38 1211.54 L1514.97 1211.54 L1515.56 1211.54 L1516.14 1211.54 L1516.73 1211.54 L1517.32 1211.54 L1517.9 1211.54 L1518.49 1211.54 L1519.07 1211.54 L1519.66 1211.54 L1520.25 1211.54 L1520.83 1211.54 L1521.42 1211.54 L1522.01 1211.54 L1522.59 1211.54 L1523.18 1211.54 L1523.77 1211.54 L1524.35 1211.54 L1524.94 1211.54 L1525.52 1211.54 L1526.11 1211.54 L1526.7 1211.54 L1527.28 1211.54 L1527.87 1211.54 L1528.46 1211.54 L1529.04 1211.54 L1529.63 1211.54 L1530.22 1211.54 L1530.8 1211.54 L1531.39 1211.54 L1531.98 1211.54 L1532.56 1211.54 L1533.15 1211.54 L1533.73 1211.54 L1534.32 1211.54 L1534.91 1211.54 L1535.49 1211.54 L1536.08 1211.54 L1536.67 1211.54 L1537.25 1211.54 L1537.84 1211.54 L1538.43 1211.54 L1539.01 1211.54 L1539.6 1211.54 L1540.19 1211.54 L1540.77 1211.54 L1541.36 1211.54 L1541.94 1211.54 L1542.53 1211.54 L1543.12 1211.54 L1543.7 1211.54 L1544.29 1211.54 L1544.88 1211.54 L1545.46 1211.54 L1546.05 1211.54 L1546.64 1211.54 L1547.22 1211.54 L1547.81 1211.54 L1548.4 1211.54 L1548.98 1211.54 L1549.57 1211.54 L1550.15 1211.54 L1550.74 1211.54 L1551.33 1211.54 L1551.91 1211.54 L1552.5 1211.54 L1553.09 1211.54 L1553.67 1211.54 L1554.26 1211.54 L1554.85 1211.54 L1555.43 1211.54 L1556.02 1211.54 L1556.6 1211.54 L1557.19 1211.54 L1557.78 1211.54 L1558.36 1211.54 L1558.95 1211.54 L1559.54 1211.54 L1560.12 1211.54 L1560.71 1211.54 L1561.3 1211.54 L1561.88 1211.54 L1562.47 1211.54 L1563.06 1211.54 L1563.64 1211.54 L1564.23 1211.54 L1564.81 1211.54 L1565.4 1211.54 L1565.99 1211.54 L1566.57 1211.54 L1567.16 1211.54 L1567.75 1211.54 L1568.33 1211.54 L1568.92 1211.54 L1569.51 1211.54 L1570.09 1211.54 L1570.68 1211.54 L1571.27 1211.54 L1571.85 1211.54 L1572.44 1211.54 L1573.02 1211.54 L1573.61 1211.54 L1574.2 1211.54 L1574.78 1211.54 L1575.37 1211.54 L1575.96 1211.54 L1576.54 1211.54 L1577.13 1211.54 L1577.72 1211.54 L1578.3 1211.54 L1578.89 1211.54 L1579.47 1211.54 L1580.06 1211.54 L1580.65 1211.54 L1581.23 1211.54 L1581.82 1211.54 L1582.41 1211.54 L1582.99 1211.54 L1583.58 1211.54 L1584.17 1211.54 L1584.75 1211.54 L1585.34 1211.54 L1585.93 1211.54 L1586.51 1211.54 L1587.1 1211.54 L1587.68 1211.54 L1588.27 1211.54 L1588.86 1211.54 L1589.44 1211.54 L1590.03 1211.54 L1590.62 1211.54 L1591.2 1211.54 L1591.79 1211.54 L1592.38 1211.54 L1592.96 1211.54 L1593.55 1211.54 L1594.14 1211.54 L1594.72 1211.54 L1595.31 1211.54 L1595.89 1211.54 L1596.48 1211.54 L1597.07 1211.54 L1597.65 1211.54 L1598.24 1211.54 L1598.83 1211.54 L1599.41 1211.54 L1600 1211.54 L1600.59 1211.54 L1601.17 1211.54 L1601.76 1211.54 L1602.34 1211.54 L1602.93 1211.54 L1603.52 1211.54 L1604.1 1211.54 L1604.69 1211.54 L1605.28 1211.54 L1605.86 1211.54 L1606.45 1211.54 L1607.04 1211.54 L1607.62 1211.54 L1608.21 1211.54 L1608.8 1211.54 L1609.38 1211.54 L1609.97 1211.54 L1610.55 1211.54 L1611.14 1211.54 L1611.73 1211.54 L1612.31 1211.54 L1612.9 1211.54 L1613.49 1211.54 L1614.07 1211.54 L1614.66 1211.54 L1615.25 1211.54 L1615.83 1211.54 L1616.42 1211.54 L1617.01 1211.54 L1617.59 1211.54 L1618.18 1211.54 L1618.76 1211.54 L1619.35 1211.54 L1619.94 1211.54 L1620.52 1211.54 L1621.11 1211.54 L1621.7 1211.54 L1622.28 1211.54 L1622.87 1211.54 L1623.46 1211.54 L1624.04 1211.54 L1624.63 1211.54 L1625.22 1211.54 L1625.8 1211.54 L1626.39 1211.54 L1626.97 1211.54 L1627.56 1211.54 L1628.15 1211.54 L1628.73 1211.54 L1629.32 1211.54 L1629.91 1211.54 L1630.49 1211.54 L1631.08 1211.54 L1631.67 1211.54 L1632.25 1211.54 L1632.84 1211.54 L1633.42 1211.54 L1634.01 1211.54 L1634.6 1211.54 L1635.18 1211.54 L1635.77 1211.54 L1636.36 1211.54 L1636.94 1211.54 L1637.53 1211.54 L1638.12 1211.54 L1638.7 1211.54 L1639.29 1211.54 L1639.88 1211.54 L1640.46 1211.54 L1641.05 1211.54 L1641.63 1211.54 L1642.22 1211.54 L1642.81 1211.54 L1643.39 1211.54 L1643.98 1211.54 L1644.57 1211.54 L1645.15 1211.54 L1645.74 1211.54 L1646.33 1211.54 L1646.91 1211.54 L1647.5 1211.54 L1648.09 1211.54 L1648.67 1211.54 L1649.26 1211.54 L1649.84 1211.54 L1650.43 1211.54 L1651.02 1211.54 L1651.6 1211.54 L1652.19 1211.54 L1652.78 1211.54 L1653.36 1211.54 L1653.95 1211.54 L1654.54 1211.54 L1655.12 1211.54 L1655.71 1211.54 L1656.29 1211.54 L1656.88 1211.54 L1657.47 1211.54 L1658.05 1211.54 L1658.64 1211.54 L1659.23 1211.54 L1659.81 1211.54 L1660.4 1211.54 L1660.99 1211.54 L1661.57 1211.54 L1662.16 1211.54 L1662.75 1211.54 L1663.33 1211.54 L1663.92 1211.54 L1664.5 1211.54 L1665.09 1211.54 L1665.68 1211.54 L1666.26 1211.54 L1666.85 1211.54 L1667.44 1211.54 L1668.02 1211.54 L1668.61 1211.54 L1669.2 1211.54 L1669.78 1211.54 L1670.37 1211.54 L1670.96 1211.54 L1671.54 1211.54 L1672.13 1211.54 L1672.71 1211.54 L1673.3 1211.54 L1673.89 1211.54 L1674.47 1211.54 L1675.06 1211.54 L1675.65 1211.54 L1676.23 1211.54 L1676.82 1211.54 L1677.41 1211.54 L1677.99 1211.54 L1678.58 1211.54 L1679.17 1211.54 L1679.75 1211.54 L1680.34 1211.54 L1680.92 1211.54 L1681.51 1211.54 L1682.1 1211.54 L1682.68 1211.54 L1683.27 1211.54 L1683.86 1211.54 L1684.44 1211.54 L1685.03 1211.54 L1685.62 1211.54 L1686.2 1211.54 L1686.79 1211.54 L1687.37 1211.54 L1687.96 1211.54 L1688.55 1211.54 L1689.13 1211.54 L1689.72 1211.54 L1690.31 1211.54 L1690.89 1211.54 L1691.48 1211.54 L1692.07 1211.54 L1692.65 1211.54 L1693.24 1211.54 L1693.83 1211.54 L1694.41 1211.54 L1695 1211.54 L1695.58 1211.54 L1696.17 1211.54 L1696.76 1211.54 L1697.34 1211.54 L1697.93 1211.54 L1698.52 1211.54 L1699.1 1211.54 L1699.69 1211.54 L1700.28 1211.54 L1700.86 1211.54 L1701.45 1211.54 L1702.04 1211.54 L1702.62 1211.54 L1703.21 1211.54 L1703.79 1211.54 L1704.38 1211.54 L1704.97 1211.54 L1705.55 1211.54 L1706.14 1211.54 L1706.73 1211.54 L1707.31 1211.54 L1707.9 1211.54 L1708.49 1211.54 L1709.07 1211.54 L1709.66 1211.54 L1710.24 1211.54 L1710.83 1211.54 L1711.42 1211.54 L1712 1211.54 L1712.59 1211.54 L1713.18 1211.54 L1713.76 1211.54 L1714.35 1211.54 L1714.94 1211.54 L1715.52 1211.54 L1716.11 1211.54 L1716.7 1211.54 L1717.28 1211.54 L1717.87 1211.54 L1718.45 1211.54 L1719.04 1211.54 L1719.63 1211.54 L1720.21 1211.54 L1720.8 1211.54 L1721.39 1211.54 L1721.97 1211.54 L1722.56 1211.54 L1723.15 1211.54 L1723.73 1211.54 L1724.32 1211.54 L1724.91 1211.54 L1725.49 1211.54 L1726.08 1211.54 L1726.66 1211.54 L1727.25 1211.54 L1727.84 1211.54 L1728.42 1211.54 L1729.01 1211.54 L1729.6 1211.54 L1730.18 1211.54 L1730.77 1211.54 L1731.36 1211.54 L1731.94 1211.54 L1732.53 1211.54 L1733.11 1211.54 L1733.7 1211.54 L1734.29 1211.54 L1734.87 1211.54 L1735.46 1211.54 L1736.05 1211.54 L1736.63 1211.54 L1737.22 1211.54 L1737.81 1211.54 L1738.39 1211.54 L1738.98 1211.54 L1739.57 1211.54 L1740.15 1211.54 L1740.74 1211.54 L1741.32 1211.54 L1741.91 1211.54 L1742.5 1211.54 L1743.08 1211.54 L1743.67 1211.54 L1744.26 1211.54 L1744.84 1211.54 L1745.43 1211.54 L1746.02 1211.54 L1746.6 1211.54 L1747.19 1211.54 L1747.78 1211.54 L1748.36 1211.54 L1748.95 1211.54 L1749.53 1211.54 L1750.12 1211.54 L1750.71 1211.54 L1751.29 1211.54 L1751.88 1211.54 L1752.47 1211.54 L1753.05 1211.54 L1753.64 1211.54 L1754.23 1211.54 L1754.81 1211.54 L1755.4 1211.54 L1755.99 1211.54 L1756.57 1211.54 L1757.16 1211.54 L1757.74 1211.54 L1758.33 1211.54 L1758.92 1211.54 L1759.5 1211.54 L1760.09 1211.54 L1760.68 1211.54 L1761.26 1211.54 L1761.85 1211.54 L1762.44 1211.54 L1763.02 1211.54 L1763.61 1211.54 L1764.19 1211.54 L1764.78 1211.54 L1765.37 1211.54 L1765.95 1211.54 L1766.54 1211.54 L1767.13 1211.54 L1767.71 1211.54 L1768.3 1211.54 L1768.89 1211.54 L1769.47 1211.54 L1770.06 1211.54 L1770.65 1211.54 L1771.23 1211.54 L1771.82 1211.54 L1772.4 1211.54 L1772.99 1211.54 L1773.58 1211.54 L1774.16 1211.54 L1774.75 1211.54 L1775.34 1211.54 L1775.92 1211.54 L1776.51 1211.54 L1777.1 1211.54 L1777.68 1211.54 L1778.27 1211.54 L1778.86 1211.54 L1779.44 1211.54 L1780.03 1211.54 L1780.61 1211.54 L1781.2 1211.54 L1781.79 1211.54 L1782.37 1211.54 L1782.96 1211.54 L1783.55 1211.54 L1784.13 1211.54 L1784.72 1211.54 L1785.31 1211.54 L1785.89 1211.54 L1786.48 1211.54 L1787.06 1211.54 L1787.65 1211.54 L1788.24 1211.54 L1788.82 1211.54 L1789.41 1211.54 L1790 1211.54 L1790.58 1211.54 L1791.17 1211.54 L1791.76 1211.54 L1792.34 1211.54 L1792.93 1211.54 L1793.52 1211.54 L1794.1 1211.54 L1794.69 1211.54 L1795.27 1211.54 L1795.86 1211.54 L1796.45 1211.54 L1797.03 1211.54 L1797.62 1211.54 L1798.21 1211.54 L1798.79 1211.54 L1799.38 1211.54 L1799.97 1211.54 L1800.55 1211.54 L1801.14 1211.54 L1801.73 1211.54 L1802.31 1211.54 L1802.9 1211.54 L1803.48 1211.54 L1804.07 1211.54 L1804.66 1211.54 L1805.24 1211.54 L1805.83 1211.54 L1806.42 1211.54 L1807 1211.54 L1807.59 1211.54 L1808.18 1211.54 L1808.76 1211.54 L1809.35 1211.54 L1809.94 1211.54 L1810.52 1211.54 L1811.11 1211.54 L1811.69 1211.54 L1812.28 1211.54 L1812.87 1211.54 L1813.45 1211.54 L1814.04 1211.54 L1814.63 1211.54 L1815.21 1211.54 L1815.8 1211.54 L1816.39 1211.54 L1816.97 1211.54 L1817.56 1211.54 L1818.14 1211.54 L1818.73 1211.54 L1819.32 1211.54 L1819.9 1211.54 L1820.49 1211.54 L1821.08 1211.54 L1821.66 1211.54 L1822.25 1211.54 L1822.84 1211.54 L1823.42 1211.54 L1824.01 1211.54 L1824.6 1211.54 L1825.18 1211.54 L1825.77 1211.54 L1826.35 1211.54 L1826.94 1211.54 L1827.53 1211.54 L1828.11 1211.54 L1828.7 1211.54 L1829.29 1211.54 L1829.87 1211.54 L1830.46 1211.54 L1831.05 1211.54 L1831.63 1211.54 L1832.22 1211.54 L1832.81 1211.54 L1833.39 1211.54 L1833.98 1211.54 L1834.56 1211.54 L1835.15 1211.54 L1835.74 1211.54 L1836.32 1211.54 L1836.91 1211.54 L1837.5 1211.54 L1838.08 1211.54 L1838.67 1211.54 L1839.26 1211.54 L1839.84 1211.54 L1840.43 1211.54 L1841.01 1211.54 L1841.6 1211.54 L1842.19 1211.54 L1842.77 1211.54 L1843.36 1211.54 L1843.95 1211.54 L1844.53 1211.54 L1845.12 1211.54 L1845.71 1211.54 L1846.29 1211.54 L1846.88 1211.54 L1847.47 1211.54 L1848.05 1211.54 L1848.64 1211.54 L1849.22 1211.54 L1849.81 1211.54 L1850.4 1211.54 L1850.98 1211.54 L1851.57 1211.54 L1852.16 1211.54 L1852.74 1211.54 L1853.33 1211.54 L1853.92 1211.54 L1854.5 1211.54 L1855.09 1211.54 L1855.68 1211.54 L1856.26 1211.54 L1856.85 1211.54 L1857.43 1211.54 L1858.02 1211.54 L1858.61 1211.54 L1859.19 1211.54 L1859.78 1211.54 L1860.37 1211.54 L1860.95 1211.54 L1861.54 1211.54 L1862.13 1211.54 L1862.71 1211.54 L1863.3 1211.54 L1863.88 1211.54 L1864.47 1211.54 L1865.06 1211.54 L1865.64 1211.54 L1866.23 1211.54 L1866.82 1211.54 L1867.4 1211.54 L1867.99 1211.54 L1868.58 1211.54 L1869.16 1211.54 L1869.75 1211.54 L1870.34 1211.54 L1870.92 1211.54 L1871.51 1211.54 L1872.09 1211.54 L1872.68 1211.54 L1873.27 1211.54 L1873.85 1211.54 L1874.44 1211.54 L1875.03 1211.54 L1875.61 1211.54 L1876.2 1211.54 L1876.79 1211.54 L1877.37 1211.54 L1877.96 1211.54 L1878.55 1211.54 L1879.13 1211.54 L1879.72 1211.54 L1880.3 1211.54 L1880.89 1211.54 L1881.48 1211.54 L1882.06 1211.54 L1882.65 1211.54 L1883.24 1211.54 L1883.82 1211.54 L1884.41 1211.54 L1885 1211.54 L1885.58 1211.54 L1886.17 1211.54 L1886.76 1211.54 L1887.34 1211.54 L1887.93 1211.54 L1888.51 1211.54 L1889.1 1211.54 L1889.69 1211.54 L1890.27 1211.54 L1890.86 1211.54 L1891.45 1211.54 L1892.03 1211.54 L1892.62 1211.54 L1893.21 1211.54 L1893.79 1211.54 L1894.38 1211.54 L1894.96 1211.54 L1895.55 1211.54 L1896.14 1211.54 L1896.72 1211.54 L1897.31 1211.54 L1897.9 1211.54 L1898.48 1211.54 L1899.07 1211.54 L1899.66 1211.54 L1900.24 1211.54 L1900.83 1211.54 L1901.42 1211.54 L1902 1211.54 L1902.59 1211.54 L1903.17 1211.54 L1903.76 1211.54 L1904.35 1211.54 L1904.93 1211.54 L1905.52 1211.54 L1906.11 1211.54 L1906.69 1211.54 L1907.28 1211.54 L1907.87 1211.54 L1908.45 1211.54 L1909.04 1211.54 L1909.63 1211.54 L1910.21 1211.54 L1910.8 1211.54 L1911.38 1211.54 L1911.97 1211.54 L1912.56 1211.54 L1913.14 1211.54 L1913.73 1211.54 L1914.32 1211.54 L1914.9 1211.54 L1915.49 1211.54 L1916.08 1211.54 L1916.66 1211.54 L1917.25 1211.54 L1917.83 1211.54 L1918.42 1211.54 L1919.01 1211.54 L1919.59 1211.54 L1920.18 1211.54 L1920.77 1211.54 L1921.35 1211.54 L1921.94 1211.54 L1922.53 1211.54 L1923.11 1211.54 L1923.7 1211.54 L1924.29 1211.54 L1924.87 1211.54 L1925.46 1211.54 L1926.04 1211.54 L1926.63 1211.54 L1927.22 1211.54 L1927.8 1211.54 L1928.39 1211.54 L1928.98 1211.54 L1929.56 1211.54 L1930.15 1211.54 L1930.74 1211.54 L1931.32 1211.54 L1931.91 1211.54 L1932.5 1211.54 L1933.08 1211.54 L1933.67 1211.54 L1934.25 1211.54 L1934.84 1211.54 L1935.43 1211.54 L1936.01 1211.54 L1936.6 1211.54 L1937.19 1211.54 L1937.77 1211.54 L1938.36 1211.54 L1938.95 1211.54 L1939.53 1211.54 L1940.12 1211.54 L1940.71 1211.54 L1941.29 1211.54 L1941.88 1211.54 L1942.46 1211.54 L1943.05 1211.54 L1943.64 1211.54 L1944.22 1211.54 L1944.81 1211.54 L1945.4 1211.54 L1945.98 1211.54 L1946.57 1211.54 L1947.16 1211.54 L1947.74 1211.54 L1948.33 1211.54 L1948.91 1211.54 L1949.5 1211.54 L1950.09 1211.54 L1950.67 1211.54 L1951.26 1211.54 L1951.85 1211.54 L1952.43 1211.54 L1953.02 1211.54 L1953.61 1211.54 L1954.19 1211.54 L1954.78 1211.54 L1955.37 1211.54 L1955.95 1211.54 L1956.54 1211.54 L1957.12 1211.54 L1957.71 1211.54 L1958.3 1211.54 L1958.88 1211.54 L1959.47 1211.54 L1960.06 1211.54 L1960.64 1211.54 L1961.23 1211.54 L1961.82 1211.54 L1962.4 1211.54 L1962.99 1211.54 L1963.58 1211.54 L1964.16 1211.54 L1964.75 1211.54 L1965.33 1211.54 L1965.92 1211.54 L1966.51 1211.54 L1967.09 1211.54 L1967.68 1211.54 L1968.27 1211.54 L1968.85 1211.54 L1969.44 1211.54 L1970.03 1211.54 L1970.61 1211.54 L1971.2 1211.54 L1971.78 1211.54 L1972.37 1211.54 L1972.96 1211.54 L1973.54 1211.54 L1974.13 1211.54 L1974.72 1211.54 L1975.3 1211.54 L1975.89 1211.54 L1976.48 1211.54 L1977.06 1211.54 L1977.65 1211.54 L1978.24 1211.54 L1978.82 1211.54 L1979.41 1211.54 L1979.99 1211.54 L1980.58 1211.54 L1981.17 1211.54 L1981.75 1211.54 L1982.34 1211.54 L1982.93 1211.54 L1983.51 1211.54 L1984.1 1211.54 L1984.69 1211.54 L1985.27 1211.54 L1985.86 1211.54 L1986.45 1211.54 L1987.03 1211.54 L1987.62 1211.54 L1988.2 1211.54 L1988.79 1211.54 L1989.38 1211.54 L1989.96 1211.54 L1990.55 1211.54 L1991.14 1211.54 L1991.72 1211.54 L1992.31 1211.54 L1992.9 1211.54 L1993.48 1211.54 L1994.07 1211.54 L1994.65 1211.54 L1995.24 1211.54 L1995.83 1211.54 L1996.41 1211.54 L1997 1211.54 L1997.59 1211.54 L1998.17 1211.54 L1998.76 1211.54 L1999.35 1211.54 L1999.93 1211.54 L2000.52 1211.54 L2001.11 1211.54 L2001.69 1211.54 L2002.28 1211.54 L2002.86 1211.54 L2003.45 1211.54 L2004.04 1211.54 L2004.62 1211.54 L2005.21 1211.54 L2005.8 1211.54 L2006.38 1211.54 L2006.97 1211.54 L2007.56 1211.54 L2008.14 1211.54 L2008.73 1211.54 L2009.32 1211.54 L2009.9 1211.54 L2010.49 1211.54 L2011.07 1211.54 L2011.66 1211.54 L2012.25 1211.54 L2012.83 1211.54 L2013.42 1211.54 L2014.01 1211.54 L2014.59 1211.54 L2015.18 1211.54 L2015.77 1211.54 L2016.35 1211.54 L2016.94 1211.54 L2017.53 1211.54 L2018.11 1211.54 L2018.7 1211.54 L2019.28 1211.54 L2019.87 1211.54 L2020.46 1211.54 L2021.04 1211.54 L2021.63 1211.54 L2022.22 1211.54 L2022.8 1211.54 L2023.39 1211.54 L2023.98 1211.54 L2024.56 1211.54 L2025.15 1211.54 L2025.73 1211.54 L2026.32 1211.54 L2026.91 1211.54 L2027.49 1211.54 L2028.08 1211.54 L2028.67 1211.54 L2029.25 1211.54 L2029.84 1211.54 L2030.43 1211.54 L2031.01 1211.54 L2031.6 1211.54 L2032.19 1211.54 L2032.77 1211.54 L2033.36 1211.54 L2033.94 1211.54 L2034.53 1211.54 L2035.12 1211.54 L2035.7 1211.54 L2036.29 1211.54 L2036.88 1211.54 L2037.46 1211.54 L2038.05 1211.54 L2038.64 1211.54 L2039.22 1211.54 L2039.81 1211.54 L2040.4 1211.54 L2040.98 1211.54 L2041.57 1211.54 L2042.15 1211.54 L2042.74 1211.54 L2043.33 1211.54 L2043.91 1211.54 L2044.5 1211.54 L2045.09 1211.54 L2045.67 1211.54 L2046.26 1211.54 L2046.85 1211.54 L2047.43 1211.54 L2048.02 1211.54 L2048.6 1211.54 L2049.19 1211.54 L2049.78 1211.54 L2050.36 1211.54 L2050.95 1211.54 L2051.54 1211.54 L2052.12 1211.54 L2052.71 1211.54 L2053.3 1211.54 L2053.88 1211.54 L2054.47 1211.54 L2055.06 1211.54 L2055.64 1211.54 L2056.23 1211.54 L2056.81 1211.54 L2057.4 1211.54 L2057.99 1211.54 L2058.57 1211.54 L2059.16 1211.54 L2059.75 1211.54 L2060.33 1211.54 L2060.92 1211.54 L2061.51 1211.54 L2062.09 1211.54 L2062.68 1211.54 L2063.27 1211.54 L2063.85 1211.54 L2064.44 1211.54 L2065.02 1211.54 L2065.61 1211.54 L2066.2 1211.54 L2066.78 1211.54 L2067.37 1211.54 L2067.96 1211.54 L2068.54 1211.54 L2069.13 1211.54 L2069.72 1211.54 L2070.3 1211.54 L2070.89 1211.54 L2071.48 1211.54 L2072.06 1211.54 L2072.65 1211.54 L2073.23 1211.54 L2073.82 1211.54 L2074.41 1211.54 L2074.99 1211.54 L2075.58 1211.54 L2076.17 1211.54 L2076.75 1211.54 L2077.34 1211.54 L2077.93 1211.54 L2078.51 1211.54 L2079.1 1211.54 L2079.68 1211.54 L2080.27 1211.54 L2080.86 1211.54 L2081.44 1211.54 L2082.03 1211.54 L2082.62 1211.54 L2083.2 1211.54 L2083.79 1211.54 L2084.38 1211.54 L2084.96 1211.54 L2085.55 1211.54 L2086.14 1211.54 L2086.72 1211.54 L2087.31 1211.54 L2087.89 1211.54 L2088.48 1211.54 L2089.07 1211.54 L2089.65 1211.54 L2090.24 1211.54 L2090.83 1211.54 L2091.41 1211.54 L2092 1211.54 L2092.59 1211.54 L2093.17 1211.54 L2093.76 1211.54 L2094.35 1211.54 L2094.93 1211.54 L2095.52 1211.54 L2096.1 1211.54 L2096.69 1211.54 L2097.28 1211.54 L2097.86 1211.54 L2098.45 1211.54 L2099.04 1211.54 L2099.62 1211.54 L2100.21 1211.54 L2100.8 1211.54 L2101.38 1211.54 L2101.97 1211.54 L2102.55 1211.54 L2103.14 1211.54 L2103.73 1211.54 L2104.31 1211.54 L2104.9 1211.54 L2105.49 1211.54 L2106.07 1211.54 L2106.66 1211.54 L2107.25 1211.54 L2107.83 1211.54 L2108.42 1211.54 L2109.01 1211.54 L2109.59 1211.54 L2110.18 1211.54 L2110.76 1211.54 L2111.35 1211.54 L2111.94 1211.54 L2112.52 1211.54 L2113.11 1211.54 L2113.7 1211.54 L2114.28 1211.54 L2114.87 1211.54 L2115.46 1211.54 L2116.04 1211.54 L2116.63 1211.54 L2117.22 1211.54 L2117.8 1211.54 L2118.39 1211.54 L2118.97 1211.54 L2119.56 1211.54 L2120.15 1211.54 L2120.73 1211.54 L2121.32 1211.54 L2121.91 1211.54 L2122.49 1211.54 L2123.08 1211.54 L2123.67 1211.54 L2124.25 1211.54 L2124.84 1211.54 L2125.42 1211.54 L2126.01 1211.54 L2126.6 1211.54 L2127.18 1211.54 L2127.77 1211.54 L2128.36 1211.54 L2128.94 1211.54 L2129.53 1211.54 L2130.12 1211.54 L2130.7 1211.54 L2131.29 1211.54 L2131.88 1211.54 L2132.46 1211.54 L2133.05 1211.54 L2133.63 1211.54 L2134.22 1211.54 L2134.81 1211.54 L2135.39 1211.54 L2135.98 1211.54 L2136.57 1211.54 L2137.15 1211.54 L2137.74 1211.54 L2138.33 1211.54 L2138.91 1211.54 L2139.5 1211.54 L2140.09 1211.54 L2140.67 1211.54 L2141.26 1211.54 L2141.84 1211.54 L2142.43 1211.54 L2143.02 1211.54 L2143.6 1211.54 L2144.19 1211.54 L2144.78 1211.54 L2145.36 1211.54 L2145.95 1211.54 L2146.54 1211.54 L2147.12 1211.54 L2147.71 1211.54 L2148.3 1211.54 L2148.88 1211.54 L2149.47 1211.54 L2150.05 1211.54 L2150.64 1211.54 L2151.23 1211.54 L2151.81 1211.54 L2152.4 1211.54 L2152.99 1211.54 L2153.57 1211.54 L2154.16 1211.54 L2154.75 1211.54 L2155.33 1211.54 L2155.92 1211.54 L2156.5 1211.54 L2157.09 1211.54 L2157.68 1211.54 L2158.26 1211.54 L2158.26 1211.33 L2157.68 1211.33 L2157.09 1211.33 L2156.5 1211.33 L2155.92 1211.33 L2155.33 1211.33 L2154.75 1211.33 L2154.16 1211.33 L2153.57 1211.33 L2152.99 1211.33 L2152.4 1211.33 L2151.81 1211.33 L2151.23 1211.33 L2150.64 1211.33 L2150.05 1211.33 L2149.47 1211.33 L2148.88 1211.33 L2148.3 1211.33 L2147.71 1211.33 L2147.12 1211.33 L2146.54 1211.33 L2145.95 1211.33 L2145.36 1211.33 L2144.78 1211.33 L2144.19 1211.33 L2143.6 1211.33 L2143.02 1211.33 L2142.43 1211.33 L2141.84 1211.33 L2141.26 1211.33 L2140.67 1211.33 L2140.09 1211.33 L2139.5 1211.33 L2138.91 1211.33 L2138.33 1211.33 L2137.74 1211.33 L2137.15 1211.33 L2136.57 1211.33 L2135.98 1211.33 L2135.39 1211.33 L2134.81 1211.33 L2134.22 1211.33 L2133.63 1211.33 L2133.05 1211.33 L2132.46 1211.33 L2131.88 1211.33 L2131.29 1211.33 L2130.7 1211.33 L2130.12 1211.33 L2129.53 1211.33 L2128.94 1211.33 L2128.36 1211.33 L2127.77 1211.33 L2127.18 1211.33 L2126.6 1211.33 L2126.01 1211.33 L2125.42 1211.33 L2124.84 1211.33 L2124.25 1211.33 L2123.67 1211.33 L2123.08 1211.33 L2122.49 1211.33 L2121.91 1211.33 L2121.32 1211.33 L2120.73 1211.33 L2120.15 1211.33 L2119.56 1211.33 L2118.97 1211.33 L2118.39 1211.33 L2117.8 1211.33 L2117.22 1211.33 L2116.63 1211.33 L2116.04 1211.33 L2115.46 1211.33 L2114.87 1211.33 L2114.28 1211.33 L2113.7 1211.33 L2113.11 1211.33 L2112.52 1211.33 L2111.94 1211.33 L2111.35 1211.33 L2110.76 1211.33 L2110.18 1211.33 L2109.59 1211.33 L2109.01 1211.33 L2108.42 1211.33 L2107.83 1211.33 L2107.25 1211.33 L2106.66 1211.33 L2106.07 1211.33 L2105.49 1211.33 L2104.9 1211.33 L2104.31 1211.33 L2103.73 1211.33 L2103.14 1211.33 L2102.55 1211.33 L2101.97 1211.33 L2101.38 1211.33 L2100.8 1211.33 L2100.21 1211.33 L2099.62 1211.33 L2099.04 1211.33 L2098.45 1211.33 L2097.86 1211.33 L2097.28 1211.33 L2096.69 1211.33 L2096.1 1211.33 L2095.52 1211.33 L2094.93 1211.33 L2094.35 1211.33 L2093.76 1211.33 L2093.17 1211.33 L2092.59 1211.33 L2092 1211.33 L2091.41 1211.33 L2090.83 1211.33 L2090.24 1211.33 L2089.65 1211.33 L2089.07 1211.33 L2088.48 1211.33 L2087.89 1211.33 L2087.31 1211.33 L2086.72 1211.33 L2086.14 1211.33 L2085.55 1211.33 L2084.96 1211.33 L2084.38 1211.33 L2083.79 1211.33 L2083.2 1211.33 L2082.62 1211.33 L2082.03 1211.33 L2081.44 1211.33 L2080.86 1211.33 L2080.27 1211.33 L2079.68 1211.33 L2079.1 1211.33 L2078.51 1211.33 L2077.93 1211.33 L2077.34 1211.33 L2076.75 1211.33 L2076.17 1211.33 L2075.58 1211.33 L2074.99 1211.33 L2074.41 1211.33 L2073.82 1211.33 L2073.23 1211.33 L2072.65 1211.33 L2072.06 1211.33 L2071.48 1211.33 L2070.89 1211.33 L2070.3 1211.33 L2069.72 1211.33 L2069.13 1211.33 L2068.54 1211.33 L2067.96 1211.33 L2067.37 1211.33 L2066.78 1211.33 L2066.2 1211.33 L2065.61 1211.33 L2065.02 1211.33 L2064.44 1211.33 L2063.85 1211.33 L2063.27 1211.33 L2062.68 1211.33 L2062.09 1211.33 L2061.51 1211.33 L2060.92 1211.33 L2060.33 1211.33 L2059.75 1211.33 L2059.16 1211.33 L2058.57 1211.33 L2057.99 1211.33 L2057.4 1211.33 L2056.81 1211.33 L2056.23 1211.33 L2055.64 1211.33 L2055.06 1211.33 L2054.47 1211.33 L2053.88 1211.33 L2053.3 1211.33 L2052.71 1211.33 L2052.12 1211.33 L2051.54 1211.33 L2050.95 1211.33 L2050.36 1211.33 L2049.78 1211.33 L2049.19 1211.33 L2048.6 1211.33 L2048.02 1211.33 L2047.43 1211.33 L2046.85 1211.33 L2046.26 1211.33 L2045.67 1211.33 L2045.09 1211.33 L2044.5 1211.33 L2043.91 1211.33 L2043.33 1211.33 L2042.74 1211.33 L2042.15 1211.33 L2041.57 1211.33 L2040.98 1211.33 L2040.4 1211.33 L2039.81 1211.33 L2039.22 1211.33 L2038.64 1211.33 L2038.05 1211.33 L2037.46 1211.33 L2036.88 1211.33 L2036.29 1211.33 L2035.7 1211.33 L2035.12 1211.33 L2034.53 1211.33 L2033.94 1211.33 L2033.36 1211.33 L2032.77 1211.33 L2032.19 1211.33 L2031.6 1211.33 L2031.01 1211.33 L2030.43 1211.33 L2029.84 1211.33 L2029.25 1211.33 L2028.67 1211.33 L2028.08 1211.33 L2027.49 1211.33 L2026.91 1211.33 L2026.32 1211.33 L2025.73 1211.33 L2025.15 1211.33 L2024.56 1211.33 L2023.98 1211.33 L2023.39 1211.33 L2022.8 1211.33 L2022.22 1211.33 L2021.63 1211.33 L2021.04 1211.33 L2020.46 1211.33 L2019.87 1211.33 L2019.28 1211.33 L2018.7 1211.33 L2018.11 1211.33 L2017.53 1211.33 L2016.94 1211.33 L2016.35 1211.33 L2015.77 1211.33 L2015.18 1211.33 L2014.59 1211.33 L2014.01 1211.33 L2013.42 1211.33 L2012.83 1211.33 L2012.25 1211.33 L2011.66 1211.33 L2011.07 1211.33 L2010.49 1211.33 L2009.9 1211.33 L2009.32 1211.33 L2008.73 1211.33 L2008.14 1211.33 L2007.56 1211.33 L2006.97 1211.33 L2006.38 1211.33 L2005.8 1211.33 L2005.21 1211.33 L2004.62 1211.33 L2004.04 1211.33 L2003.45 1211.33 L2002.86 1211.33 L2002.28 1211.33 L2001.69 1211.33 L2001.11 1211.33 L2000.52 1211.33 L1999.93 1211.33 L1999.35 1211.33 L1998.76 1211.33 L1998.17 1211.33 L1997.59 1211.33 L1997 1211.33 L1996.41 1211.33 L1995.83 1211.33 L1995.24 1211.33 L1994.65 1211.33 L1994.07 1211.33 L1993.48 1211.33 L1992.9 1211.33 L1992.31 1211.33 L1991.72 1211.33 L1991.14 1211.33 L1990.55 1211.33 L1989.96 1211.33 L1989.38 1211.33 L1988.79 1211.33 L1988.2 1211.33 L1987.62 1211.33 L1987.03 1211.33 L1986.45 1211.33 L1985.86 1211.33 L1985.27 1211.33 L1984.69 1211.33 L1984.1 1211.33 L1983.51 1211.33 L1982.93 1211.33 L1982.34 1211.33 L1981.75 1211.33 L1981.17 1211.33 L1980.58 1211.33 L1979.99 1211.33 L1979.41 1211.33 L1978.82 1211.33 L1978.24 1211.33 L1977.65 1211.33 L1977.06 1211.33 L1976.48 1211.33 L1975.89 1211.33 L1975.3 1211.33 L1974.72 1211.33 L1974.13 1211.33 L1973.54 1211.33 L1972.96 1211.33 L1972.37 1211.33 L1971.78 1211.33 L1971.2 1211.33 L1970.61 1211.33 L1970.03 1211.33 L1969.44 1211.33 L1968.85 1211.33 L1968.27 1211.33 L1967.68 1211.33 L1967.09 1211.33 L1966.51 1211.33 L1965.92 1211.33 L1965.33 1211.33 L1964.75 1211.33 L1964.16 1211.33 L1963.58 1211.33 L1962.99 1211.33 L1962.4 1211.33 L1961.82 1211.33 L1961.23 1211.33 L1960.64 1211.33 L1960.06 1211.33 L1959.47 1211.33 L1958.88 1211.33 L1958.3 1211.33 L1957.71 1211.33 L1957.12 1211.33 L1956.54 1211.33 L1955.95 1211.33 L1955.37 1211.33 L1954.78 1211.33 L1954.19 1211.33 L1953.61 1211.33 L1953.02 1211.33 L1952.43 1211.33 L1951.85 1211.33 L1951.26 1211.33 L1950.67 1211.33 L1950.09 1211.33 L1949.5 1211.33 L1948.91 1211.33 L1948.33 1211.33 L1947.74 1211.33 L1947.16 1211.33 L1946.57 1211.33 L1945.98 1211.33 L1945.4 1211.33 L1944.81 1211.33 L1944.22 1211.33 L1943.64 1211.33 L1943.05 1211.33 L1942.46 1211.33 L1941.88 1211.33 L1941.29 1211.33 L1940.71 1211.33 L1940.12 1211.33 L1939.53 1211.33 L1938.95 1211.33 L1938.36 1211.33 L1937.77 1211.33 L1937.19 1211.33 L1936.6 1211.33 L1936.01 1211.33 L1935.43 1211.33 L1934.84 1211.33 L1934.25 1211.33 L1933.67 1211.33 L1933.08 1211.33 L1932.5 1211.33 L1931.91 1211.33 L1931.32 1211.33 L1930.74 1211.33 L1930.15 1211.33 L1929.56 1211.33 L1928.98 1211.33 L1928.39 1211.33 L1927.8 1211.33 L1927.22 1211.33 L1926.63 1211.33 L1926.04 1211.33 L1925.46 1211.33 L1924.87 1211.33 L1924.29 1211.33 L1923.7 1211.33 L1923.11 1211.33 L1922.53 1211.33 L1921.94 1211.33 L1921.35 1211.33 L1920.77 1211.33 L1920.18 1211.33 L1919.59 1211.33 L1919.01 1211.33 L1918.42 1211.33 L1917.83 1211.33 L1917.25 1211.33 L1916.66 1211.33 L1916.08 1211.33 L1915.49 1211.33 L1914.9 1211.33 L1914.32 1211.33 L1913.73 1211.33 L1913.14 1211.33 L1912.56 1211.33 L1911.97 1211.33 L1911.38 1211.33 L1910.8 1211.33 L1910.21 1211.33 L1909.63 1211.33 L1909.04 1211.33 L1908.45 1211.33 L1907.87 1211.33 L1907.28 1211.33 L1906.69 1211.33 L1906.11 1211.33 L1905.52 1211.33 L1904.93 1211.33 L1904.35 1211.33 L1903.76 1211.33 L1903.17 1211.33 L1902.59 1211.33 L1902 1211.33 L1901.42 1211.33 L1900.83 1211.33 L1900.24 1211.33 L1899.66 1211.33 L1899.07 1211.33 L1898.48 1211.33 L1897.9 1211.33 L1897.31 1211.33 L1896.72 1211.33 L1896.14 1211.33 L1895.55 1211.33 L1894.96 1211.33 L1894.38 1211.33 L1893.79 1211.33 L1893.21 1211.33 L1892.62 1211.33 L1892.03 1211.33 L1891.45 1211.33 L1890.86 1211.33 L1890.27 1211.33 L1889.69 1211.33 L1889.1 1211.33 L1888.51 1211.33 L1887.93 1211.33 L1887.34 1211.33 L1886.76 1211.33 L1886.17 1211.33 L1885.58 1211.33 L1885 1211.33 L1884.41 1211.33 L1883.82 1211.33 L1883.24 1211.33 L1882.65 1211.33 L1882.06 1211.33 L1881.48 1211.33 L1880.89 1211.33 L1880.3 1211.33 L1879.72 1211.33 L1879.13 1211.33 L1878.55 1211.33 L1877.96 1211.33 L1877.37 1211.33 L1876.79 1211.33 L1876.2 1211.33 L1875.61 1211.33 L1875.03 1211.33 L1874.44 1211.33 L1873.85 1211.33 L1873.27 1211.33 L1872.68 1211.33 L1872.09 1211.33 L1871.51 1211.33 L1870.92 1211.33 L1870.34 1211.33 L1869.75 1211.33 L1869.16 1211.33 L1868.58 1211.33 L1867.99 1211.33 L1867.4 1211.33 L1866.82 1211.33 L1866.23 1211.33 L1865.64 1211.33 L1865.06 1211.33 L1864.47 1211.33 L1863.88 1211.33 L1863.3 1211.33 L1862.71 1211.33 L1862.13 1211.33 L1861.54 1211.33 L1860.95 1211.33 L1860.37 1211.33 L1859.78 1211.33 L1859.19 1211.33 L1858.61 1211.33 L1858.02 1211.33 L1857.43 1211.33 L1856.85 1211.33 L1856.26 1211.33 L1855.68 1211.33 L1855.09 1211.33 L1854.5 1211.33 L1853.92 1211.33 L1853.33 1211.33 L1852.74 1211.33 L1852.16 1211.33 L1851.57 1211.33 L1850.98 1211.33 L1850.4 1211.33 L1849.81 1211.33 L1849.22 1211.33 L1848.64 1211.33 L1848.05 1211.33 L1847.47 1211.33 L1846.88 1211.33 L1846.29 1211.33 L1845.71 1211.33 L1845.12 1211.33 L1844.53 1211.33 L1843.95 1211.33 L1843.36 1211.33 L1842.77 1211.33 L1842.19 1211.33 L1841.6 1211.33 L1841.01 1211.33 L1840.43 1211.33 L1839.84 1211.33 L1839.26 1211.33 L1838.67 1211.33 L1838.08 1211.33 L1837.5 1211.33 L1836.91 1211.33 L1836.32 1211.33 L1835.74 1211.33 L1835.15 1211.33 L1834.56 1211.33 L1833.98 1211.33 L1833.39 1211.33 L1832.81 1211.33 L1832.22 1211.33 L1831.63 1211.33 L1831.05 1211.33 L1830.46 1211.33 L1829.87 1211.33 L1829.29 1211.33 L1828.7 1211.33 L1828.11 1211.33 L1827.53 1211.33 L1826.94 1211.33 L1826.35 1211.33 L1825.77 1211.33 L1825.18 1211.33 L1824.6 1211.33 L1824.01 1211.33 L1823.42 1211.33 L1822.84 1211.33 L1822.25 1211.33 L1821.66 1211.33 L1821.08 1211.33 L1820.49 1211.33 L1819.9 1211.33 L1819.32 1211.33 L1818.73 1211.33 L1818.14 1211.33 L1817.56 1211.33 L1816.97 1211.33 L1816.39 1211.33 L1815.8 1211.33 L1815.21 1211.33 L1814.63 1211.33 L1814.04 1211.33 L1813.45 1211.33 L1812.87 1211.33 L1812.28 1211.33 L1811.69 1211.33 L1811.11 1211.33 L1810.52 1211.33 L1809.94 1211.33 L1809.35 1211.33 L1808.76 1211.33 L1808.18 1211.33 L1807.59 1211.33 L1807 1211.33 L1806.42 1211.33 L1805.83 1211.33 L1805.24 1211.33 L1804.66 1211.33 L1804.07 1211.33 L1803.48 1211.33 L1802.9 1211.33 L1802.31 1211.33 L1801.73 1211.33 L1801.14 1211.33 L1800.55 1211.33 L1799.97 1211.33 L1799.38 1211.33 L1798.79 1211.33 L1798.21 1211.33 L1797.62 1211.33 L1797.03 1211.33 L1796.45 1211.33 L1795.86 1211.33 L1795.27 1211.33 L1794.69 1211.33 L1794.1 1211.33 L1793.52 1211.33 L1792.93 1211.33 L1792.34 1211.33 L1791.76 1211.33 L1791.17 1211.33 L1790.58 1211.33 L1790 1211.33 L1789.41 1211.33 L1788.82 1211.33 L1788.24 1211.33 L1787.65 1211.33 L1787.06 1211.33 L1786.48 1211.33 L1785.89 1211.33 L1785.31 1211.33 L1784.72 1211.33 L1784.13 1211.33 L1783.55 1211.33 L1782.96 1211.33 L1782.37 1211.33 L1781.79 1211.33 L1781.2 1211.33 L1780.61 1211.33 L1780.03 1211.33 L1779.44 1211.33 L1778.86 1211.33 L1778.27 1211.33 L1777.68 1211.33 L1777.1 1211.33 L1776.51 1211.33 L1775.92 1211.33 L1775.34 1211.33 L1774.75 1211.33 L1774.16 1211.33 L1773.58 1211.33 L1772.99 1211.33 L1772.4 1211.33 L1771.82 1211.33 L1771.23 1211.33 L1770.65 1211.33 L1770.06 1211.33 L1769.47 1211.33 L1768.89 1211.33 L1768.3 1211.33 L1767.71 1211.33 L1767.13 1211.33 L1766.54 1211.33 L1765.95 1211.33 L1765.37 1211.33 L1764.78 1211.33 L1764.19 1211.33 L1763.61 1211.33 L1763.02 1211.33 L1762.44 1211.33 L1761.85 1211.33 L1761.26 1211.33 L1760.68 1211.33 L1760.09 1211.33 L1759.5 1211.33 L1758.92 1211.33 L1758.33 1211.33 L1757.74 1211.33 L1757.16 1211.33 L1756.57 1211.33 L1755.99 1211.33 L1755.4 1211.33 L1754.81 1211.33 L1754.23 1211.33 L1753.64 1211.33 L1753.05 1211.33 L1752.47 1211.33 L1751.88 1211.33 L1751.29 1211.33 L1750.71 1211.33 L1750.12 1211.33 L1749.53 1211.33 L1748.95 1211.33 L1748.36 1211.33 L1747.78 1211.33 L1747.19 1211.33 L1746.6 1211.33 L1746.02 1211.33 L1745.43 1211.33 L1744.84 1211.33 L1744.26 1211.33 L1743.67 1211.33 L1743.08 1211.33 L1742.5 1211.33 L1741.91 1211.33 L1741.32 1211.33 L1740.74 1211.33 L1740.15 1211.33 L1739.57 1211.33 L1738.98 1211.33 L1738.39 1211.33 L1737.81 1211.33 L1737.22 1211.33 L1736.63 1211.33 L1736.05 1211.33 L1735.46 1211.33 L1734.87 1211.33 L1734.29 1211.33 L1733.7 1211.33 L1733.11 1211.33 L1732.53 1211.33 L1731.94 1211.33 L1731.36 1211.33 L1730.77 1211.33 L1730.18 1211.33 L1729.6 1211.33 L1729.01 1211.33 L1728.42 1211.33 L1727.84 1211.33 L1727.25 1211.33 L1726.66 1211.33 L1726.08 1211.33 L1725.49 1211.33 L1724.91 1211.33 L1724.32 1211.33 L1723.73 1211.33 L1723.15 1211.33 L1722.56 1211.33 L1721.97 1211.33 L1721.39 1211.33 L1720.8 1211.33 L1720.21 1211.33 L1719.63 1211.33 L1719.04 1211.33 L1718.45 1211.33 L1717.87 1211.33 L1717.28 1211.33 L1716.7 1211.33 L1716.11 1211.33 L1715.52 1211.33 L1714.94 1211.33 L1714.35 1211.33 L1713.76 1211.33 L1713.18 1211.33 L1712.59 1211.33 L1712 1211.33 L1711.42 1211.33 L1710.83 1211.33 L1710.24 1211.33 L1709.66 1211.33 L1709.07 1211.33 L1708.49 1211.33 L1707.9 1211.33 L1707.31 1211.33 L1706.73 1211.33 L1706.14 1211.33 L1705.55 1211.33 L1704.97 1211.33 L1704.38 1211.33 L1703.79 1211.33 L1703.21 1211.33 L1702.62 1211.33 L1702.04 1211.33 L1701.45 1211.33 L1700.86 1211.33 L1700.28 1211.33 L1699.69 1211.33 L1699.1 1211.33 L1698.52 1211.33 L1697.93 1211.33 L1697.34 1211.33 L1696.76 1211.33 L1696.17 1211.33 L1695.58 1211.33 L1695 1211.33 L1694.41 1211.33 L1693.83 1211.33 L1693.24 1211.33 L1692.65 1211.33 L1692.07 1211.33 L1691.48 1211.33 L1690.89 1211.33 L1690.31 1211.33 L1689.72 1211.33 L1689.13 1211.33 L1688.55 1211.33 L1687.96 1211.33 L1687.37 1211.33 L1686.79 1211.33 L1686.2 1211.33 L1685.62 1211.33 L1685.03 1211.33 L1684.44 1211.33 L1683.86 1211.33 L1683.27 1211.33 L1682.68 1211.33 L1682.1 1211.33 L1681.51 1211.33 L1680.92 1211.33 L1680.34 1211.33 L1679.75 1211.33 L1679.17 1211.33 L1678.58 1211.33 L1677.99 1211.33 L1677.41 1211.33 L1676.82 1211.33 L1676.23 1211.33 L1675.65 1211.33 L1675.06 1211.33 L1674.47 1211.33 L1673.89 1211.33 L1673.3 1211.33 L1672.71 1211.33 L1672.13 1211.33 L1671.54 1211.33 L1670.96 1211.33 L1670.37 1211.33 L1669.78 1211.33 L1669.2 1211.33 L1668.61 1211.33 L1668.02 1211.33 L1667.44 1211.33 L1666.85 1211.33 L1666.26 1211.33 L1665.68 1211.33 L1665.09 1211.33 L1664.5 1211.33 L1663.92 1211.33 L1663.33 1211.33 L1662.75 1211.33 L1662.16 1211.33 L1661.57 1211.33 L1660.99 1211.33 L1660.4 1211.33 L1659.81 1211.33 L1659.23 1211.33 L1658.64 1211.33 L1658.05 1211.33 L1657.47 1211.33 L1656.88 1211.33 L1656.29 1211.33 L1655.71 1211.33 L1655.12 1211.33 L1654.54 1211.33 L1653.95 1211.33 L1653.36 1211.33 L1652.78 1211.33 L1652.19 1211.33 L1651.6 1211.33 L1651.02 1211.33 L1650.43 1211.33 L1649.84 1211.33 L1649.26 1211.33 L1648.67 1211.33 L1648.09 1211.33 L1647.5 1211.33 L1646.91 1211.33 L1646.33 1211.33 L1645.74 1211.33 L1645.15 1211.33 L1644.57 1211.33 L1643.98 1211.33 L1643.39 1211.33 L1642.81 1211.33 L1642.22 1211.33 L1641.63 1211.33 L1641.05 1211.33 L1640.46 1211.33 L1639.88 1211.33 L1639.29 1211.33 L1638.7 1211.33 L1638.12 1211.33 L1637.53 1211.33 L1636.94 1211.33 L1636.36 1211.33 L1635.77 1211.33 L1635.18 1211.33 L1634.6 1211.33 L1634.01 1211.33 L1633.42 1211.33 L1632.84 1211.33 L1632.25 1211.33 L1631.67 1211.33 L1631.08 1211.33 L1630.49 1211.33 L1629.91 1211.33 L1629.32 1211.33 L1628.73 1211.33 L1628.15 1211.33 L1627.56 1211.33 L1626.97 1211.33 L1626.39 1211.33 L1625.8 1211.33 L1625.22 1211.33 L1624.63 1211.33 L1624.04 1211.33 L1623.46 1211.33 L1622.87 1211.33 L1622.28 1211.33 L1621.7 1211.33 L1621.11 1211.33 L1620.52 1211.33 L1619.94 1211.33 L1619.35 1211.33 L1618.76 1211.33 L1618.18 1211.33 L1617.59 1211.33 L1617.01 1211.33 L1616.42 1211.33 L1615.83 1211.33 L1615.25 1211.33 L1614.66 1211.33 L1614.07 1211.33 L1613.49 1211.33 L1612.9 1211.33 L1612.31 1211.33 L1611.73 1211.33 L1611.14 1211.33 L1610.55 1211.33 L1609.97 1211.33 L1609.38 1211.33 L1608.8 1211.33 L1608.21 1211.33 L1607.62 1211.33 L1607.04 1211.33 L1606.45 1211.33 L1605.86 1211.33 L1605.28 1211.33 L1604.69 1211.33 L1604.1 1211.33 L1603.52 1211.33 L1602.93 1211.33 L1602.34 1211.33 L1601.76 1211.33 L1601.17 1211.33 L1600.59 1211.33 L1600 1211.33 L1599.41 1211.33 L1598.83 1211.33 L1598.24 1211.33 L1597.65 1211.33 L1597.07 1211.33 L1596.48 1211.33 L1595.89 1211.33 L1595.31 1211.33 L1594.72 1211.33 L1594.14 1211.33 L1593.55 1211.33 L1592.96 1211.33 L1592.38 1211.33 L1591.79 1211.33 L1591.2 1211.33 L1590.62 1211.33 L1590.03 1211.33 L1589.44 1211.33 L1588.86 1211.33 L1588.27 1211.33 L1587.68 1211.33 L1587.1 1211.33 L1586.51 1211.33 L1585.93 1211.33 L1585.34 1211.33 L1584.75 1211.33 L1584.17 1211.33 L1583.58 1211.33 L1582.99 1211.33 L1582.41 1211.33 L1581.82 1211.33 L1581.23 1211.33 L1580.65 1211.33 L1580.06 1211.33 L1579.47 1211.33 L1578.89 1211.33 L1578.3 1211.33 L1577.72 1211.33 L1577.13 1211.33 L1576.54 1211.33 L1575.96 1211.33 L1575.37 1211.33 L1574.78 1211.33 L1574.2 1211.33 L1573.61 1211.33 L1573.02 1211.33 L1572.44 1211.33 L1571.85 1211.33 L1571.27 1211.33 L1570.68 1211.33 L1570.09 1211.33 L1569.51 1211.33 L1568.92 1211.33 L1568.33 1211.33 L1567.75 1211.33 L1567.16 1211.33 L1566.57 1211.33 L1565.99 1211.33 L1565.4 1211.33 L1564.81 1211.33 L1564.23 1211.33 L1563.64 1211.33 L1563.06 1211.33 L1562.47 1211.33 L1561.88 1211.33 L1561.3 1211.33 L1560.71 1211.33 L1560.12 1211.33 L1559.54 1211.33 L1558.95 1211.33 L1558.36 1211.33 L1557.78 1211.33 L1557.19 1211.33 L1556.6 1211.33 L1556.02 1211.33 L1555.43 1211.33 L1554.85 1211.33 L1554.26 1211.33 L1553.67 1211.33 L1553.09 1211.33 L1552.5 1211.33 L1551.91 1211.33 L1551.33 1211.33 L1550.74 1211.33 L1550.15 1211.33 L1549.57 1211.33 L1548.98 1211.33 L1548.4 1211.33 L1547.81 1211.33 L1547.22 1211.33 L1546.64 1211.33 L1546.05 1211.33 L1545.46 1211.33 L1544.88 1211.33 L1544.29 1211.33 L1543.7 1211.33 L1543.12 1211.33 L1542.53 1211.33 L1541.94 1211.33 L1541.36 1211.33 L1540.77 1211.33 L1540.19 1211.33 L1539.6 1211.33 L1539.01 1211.33 L1538.43 1211.33 L1537.84 1211.33 L1537.25 1211.33 L1536.67 1211.33 L1536.08 1211.33 L1535.49 1211.33 L1534.91 1211.33 L1534.32 1211.33 L1533.73 1211.33 L1533.15 1211.33 L1532.56 1211.33 L1531.98 1211.33 L1531.39 1211.33 L1530.8 1211.33 L1530.22 1211.33 L1529.63 1211.33 L1529.04 1211.33 L1528.46 1211.33 L1527.87 1211.33 L1527.28 1211.33 L1526.7 1211.33 L1526.11 1211.33 L1525.52 1211.33 L1524.94 1211.33 L1524.35 1211.33 L1523.77 1211.33 L1523.18 1211.33 L1522.59 1211.33 L1522.01 1211.33 L1521.42 1211.33 L1520.83 1211.33 L1520.25 1211.33 L1519.66 1211.33 L1519.07 1211.33 L1518.49 1211.33 L1517.9 1211.33 L1517.32 1211.33 L1516.73 1211.33 L1516.14 1211.33 L1515.56 1211.33 L1514.97 1211.33 L1514.38 1211.33 L1513.8 1211.33 L1513.21 1211.33 L1512.62 1211.33 L1512.04 1211.33 L1511.45 1211.33 L1510.86 1211.33 L1510.28 1211.33 L1509.69 1211.33 L1509.11 1211.33 L1508.52 1211.33 L1507.93 1211.33 L1507.35 1211.33 L1506.76 1211.33 L1506.17 1211.33 L1505.59 1211.33 L1505 1211.33 L1504.41 1211.33 L1503.83 1211.33 L1503.24 1211.33 L1502.65 1211.33 L1502.07 1211.33 L1501.48 1211.33 L1500.9 1211.33 L1500.31 1211.33 L1499.72 1211.33 L1499.14 1211.33 L1498.55 1211.33 L1497.96 1211.33 L1497.38 1211.33 L1496.79 1211.33 L1496.2 1211.33 L1495.62 1211.33 L1495.03 1211.33 L1494.45 1211.33 L1493.86 1211.33 L1493.27 1211.33 L1492.69 1211.33 L1492.1 1211.33 L1491.51 1211.33 L1490.93 1211.33 L1490.34 1211.33 L1489.75 1211.33 L1489.17 1211.33 L1488.58 1211.33 L1487.99 1211.33 L1487.41 1211.33 L1486.82 1211.33 L1486.24 1211.33 L1485.65 1211.33 L1485.06 1211.33 L1484.48 1211.33 L1483.89 1211.33 L1483.3 1211.33 L1482.72 1211.33 L1482.13 1211.33 L1481.54 1211.33 L1480.96 1211.33 L1480.37 1211.33 L1479.78 1211.33 L1479.2 1211.33 L1478.61 1211.33 L1478.03 1211.33 L1477.44 1211.33 L1476.85 1211.33 L1476.27 1211.33 L1475.68 1211.33 L1475.09 1211.33 L1474.51 1211.33 L1473.92 1211.33 L1473.33 1211.33 L1472.75 1211.33 L1472.16 1211.33 L1471.57 1211.33 L1470.99 1211.33 L1470.4 1211.33 L1469.82 1211.33 L1469.23 1211.33 L1468.64 1211.33 L1468.06 1211.33 L1467.47 1211.33 L1466.88 1211.33 L1466.3 1211.33 L1465.71 1211.33 L1465.12 1211.33 L1464.54 1211.33 L1463.95 1211.33 L1463.37 1211.33 L1462.78 1211.33 L1462.19 1211.33 L1461.61 1211.33 L1461.02 1211.33 L1460.43 1211.33 L1459.85 1211.33 L1459.26 1211.33 L1458.67 1211.33 L1458.09 1211.33 L1457.5 1211.33 L1456.91 1211.33 L1456.33 1211.33 L1455.74 1211.33 L1455.16 1211.33 L1454.57 1211.33 L1453.98 1211.33 L1453.4 1211.33 L1452.81 1211.33 L1452.22 1211.33 L1451.64 1211.33 L1451.05 1211.33 L1450.46 1211.33 L1449.88 1211.33 L1449.29 1211.33 L1448.7 1211.33 L1448.12 1211.33 L1447.53 1211.33 L1446.95 1211.33 L1446.36 1211.33 L1445.77 1211.33 L1445.19 1211.33 L1444.6 1211.33 L1444.01 1211.33 L1443.43 1211.33 L1442.84 1211.33 L1442.25 1211.33 L1441.67 1211.33 L1441.08 1211.33 L1440.5 1211.33 L1439.91 1211.33 L1439.32 1211.33 L1438.74 1211.33 L1438.15 1211.33 L1437.56 1211.33 L1436.98 1211.33 L1436.39 1211.33 L1435.8 1211.33 L1435.22 1211.33 L1434.63 1211.33 L1434.04 1211.33 L1433.46 1211.33 L1432.87 1211.33 L1432.29 1211.33 L1431.7 1211.33 L1431.11 1211.33 L1430.53 1211.33 L1429.94 1211.33 L1429.35 1211.33 L1428.77 1211.33 L1428.18 1211.33 L1427.59 1211.33 L1427.01 1211.33 L1426.42 1211.33 L1425.83 1211.33 L1425.25 1211.33 L1424.66 1211.33 L1424.08 1211.33 L1423.49 1211.33 L1422.9 1211.33 L1422.32 1211.33 L1421.73 1211.33 L1421.14 1211.33 L1420.56 1211.33 L1419.97 1211.33 L1419.38 1211.33 L1418.8 1211.33 L1418.21 1211.33 L1417.63 1211.33 L1417.04 1211.33 L1416.45 1211.33 L1415.87 1211.33 L1415.28 1211.33 L1414.69 1211.33 L1414.11 1211.33 L1413.52 1211.33 L1412.93 1211.33 L1412.35 1211.33 L1411.76 1211.33 L1411.17 1211.33 L1410.59 1211.33 L1410 1211.33 L1409.42 1211.33 L1408.83 1211.33 L1408.24 1211.33 L1407.66 1211.33 L1407.07 1211.33 L1406.48 1211.33 L1405.9 1211.33 L1405.31 1211.33 L1404.72 1211.33 L1404.14 1211.33 L1403.55 1211.33 L1402.96 1211.33 L1402.38 1211.33 L1401.79 1211.33 L1401.21 1211.33 L1400.62 1211.33 L1400.03 1211.33 L1399.45 1211.33 L1398.86 1211.33 L1398.27 1211.33 L1397.69 1211.33 L1397.1 1211.33 L1396.51 1211.33 L1395.93 1211.33 L1395.34 1211.33 L1394.75 1211.33 L1394.17 1211.33 L1393.58 1211.33 L1393 1211.33 L1392.41 1211.33 L1391.82 1211.33 L1391.24 1211.33 L1390.65 1211.33 L1390.06 1211.33 L1389.48 1211.33 L1388.89 1211.33 L1388.3 1211.33 L1387.72 1211.33 L1387.13 1211.33 L1386.55 1211.33 L1385.96 1211.33 L1385.37 1211.33 L1384.79 1211.33 L1384.2 1211.33 L1383.61 1211.33 L1383.03 1211.33 L1382.44 1211.33 L1381.85 1211.33 L1381.27 1211.33 L1380.68 1211.33 L1380.09 1211.33 L1379.51 1211.33 L1378.92 1211.33 L1378.34 1211.33 L1377.75 1211.33 L1377.16 1211.33 L1376.58 1211.33 L1375.99 1211.33 L1375.4 1211.33 L1374.82 1211.33 L1374.23 1211.33 L1373.64 1211.33 L1373.06 1211.33 L1372.47 1211.33 L1371.88 1211.33 L1371.3 1211.33 L1370.71 1211.33 L1370.13 1211.33 L1369.54 1211.33 L1368.95 1211.33 L1368.37 1211.33 L1367.78 1211.33 L1367.19 1211.33 L1366.61 1211.33 L1366.02 1211.33 L1365.43 1211.33 L1364.85 1211.33 L1364.26 1211.33 L1363.68 1211.33 L1363.09 1211.33 L1362.5 1211.33 L1361.92 1211.33 L1361.33 1211.33 L1360.74 1211.33 L1360.16 1211.33 L1359.57 1211.33 L1358.98 1211.33 L1358.4 1211.33 L1357.81 1211.33 L1357.22 1211.33 L1356.64 1211.33 L1356.05 1211.33 L1355.47 1211.33 L1354.88 1211.33 L1354.29 1211.33 L1353.71 1211.33 L1353.12 1211.33 L1352.53 1211.33 L1351.95 1211.33 L1351.36 1211.33 L1350.77 1211.33 L1350.19 1211.33 L1349.6 1211.33 L1349.01 1211.33 L1348.43 1211.33 L1347.84 1211.33 L1347.26 1211.33 L1346.67 1211.33 L1346.08 1211.33 L1345.5 1211.33 L1344.91 1211.33 L1344.32 1211.33 L1343.74 1211.33 L1343.15 1211.33 L1342.56 1211.33 L1341.98 1211.33 L1341.39 1211.33 L1340.8 1211.33 L1340.22 1211.33 L1339.63 1211.33 L1339.05 1211.33 L1338.46 1211.33 L1337.87 1211.33 L1337.29 1211.33 L1336.7 1211.33 L1336.11 1211.33 L1335.53 1211.33 L1334.94 1211.33 L1334.35 1211.33 L1333.77 1211.33 L1333.18 1211.33 L1332.6 1211.33 L1332.01 1211.33 L1331.42 1211.33 L1330.84 1211.33 L1330.25 1211.33 L1329.66 1211.33 L1329.08 1211.33 L1328.49 1211.33 L1327.9 1211.33 L1327.32 1211.33 L1326.73 1211.33 L1326.14 1211.33 L1325.56 1211.33 L1324.97 1211.33 L1324.39 1211.33 L1323.8 1211.33 L1323.21 1211.33 L1322.63 1211.33 L1322.04 1211.33 L1321.45 1211.33 L1320.87 1211.33 L1320.28 1211.33 L1319.69 1211.33 L1319.11 1211.33 L1318.52 1211.33 L1317.93 1211.33 L1317.35 1211.33 L1316.76 1211.33 L1316.18 1211.33 L1315.59 1211.33 L1315 1211.33 L1314.42 1211.33 L1313.83 1211.33 L1313.24 1211.33 L1312.66 1211.33 L1312.07 1211.33 L1311.48 1211.33 L1310.9 1211.33 L1310.31 1211.33 L1309.73 1211.33 L1309.14 1211.33 L1308.55 1211.33 L1307.97 1211.33 L1307.38 1211.33 L1306.79 1211.33 L1306.21 1211.33 L1305.62 1211.33 L1305.03 1211.33 L1304.45 1211.33 L1303.86 1211.33 L1303.27 1211.33 L1302.69 1211.33 L1302.1 1211.33 L1301.52 1211.33 L1300.93 1211.33 L1300.34 1211.33 L1299.76 1211.33 L1299.17 1211.33 L1298.58 1211.33 L1298 1211.33 L1297.41 1211.33 L1296.82 1211.33 L1296.24 1211.33 L1295.65 1211.33 L1295.06 1211.33 L1294.48 1211.33 L1293.89 1211.33 L1293.31 1211.33 L1292.72 1211.33 L1292.13 1211.33 L1291.55 1211.33 L1290.96 1211.33 L1290.37 1211.33 L1289.79 1211.33 L1289.2 1211.33 L1288.61 1211.33 L1288.03 1211.33 L1287.44 1211.33 L1286.86 1211.33 L1286.27 1211.33 L1285.68 1211.33 L1285.1 1211.33 L1284.51 1211.33 L1283.92 1211.33 L1283.34 1211.33 L1282.75 1211.33 L1282.16 1211.33 L1281.58 1211.33 L1280.99 1211.33 L1280.4 1211.33 L1279.82 1211.33 L1279.23 1211.33 L1278.65 1211.33 L1278.06 1211.33 L1277.47 1211.33 L1276.89 1211.33 L1276.3 1211.33 L1275.71 1211.33 L1275.13 1211.33 L1274.54 1211.33 L1273.95 1211.33 L1273.37 1211.33 L1272.78 1211.33 L1272.19 1211.33 L1271.61 1211.33 L1271.02 1211.33 L1270.44 1211.33 L1269.85 1211.33 L1269.26 1211.33 L1268.68 1211.33 L1268.09 1211.33 L1267.5 1211.33 L1266.92 1211.33 L1266.33 1211.33 L1265.74 1211.33 L1265.16 1211.33 L1264.57 1211.33 L1263.98 1211.33 L1263.4 1211.33 L1262.81 1211.33 L1262.23 1211.33 L1261.64 1211.33 L1261.05 1211.33 L1260.47 1211.33 L1259.88 1211.33 L1259.29 1211.33 L1258.71 1211.33 L1258.12 1211.33 L1257.53 1211.33 L1256.95 1211.33 L1256.36 1211.33 L1255.78 1211.33 L1255.19 1211.33 L1254.6 1211.33 L1254.02 1211.33 L1253.43 1211.33 L1252.84 1211.33 L1252.26 1211.33 L1251.67 1211.33 L1251.08 1211.33 L1250.5 1211.33 L1249.91 1211.33 L1249.32 1211.33 L1248.74 1211.33 L1248.15 1211.33 L1247.57 1211.33 L1246.98 1211.33 L1246.39 1211.33 L1245.81 1211.33 L1245.22 1211.33 L1244.63 1211.33 L1244.05 1211.33 L1243.46 1211.33 L1242.87 1211.33 L1242.29 1211.33 L1241.7 1211.33 L1241.11 1211.33 L1240.53 1211.33 L1239.94 1211.33 L1239.36 1211.33 L1238.77 1211.33 L1238.18 1211.33 L1237.6 1211.33 L1237.01 1211.33 L1236.42 1211.33 L1235.84 1211.33 L1235.25 1211.33 L1234.66 1211.33 L1234.08 1211.33 L1233.49 1211.33 L1232.91 1211.33 L1232.32 1211.33 L1231.73 1211.33 L1231.15 1211.33 L1230.56 1211.33 L1229.97 1211.33 L1229.39 1211.33 L1228.8 1211.33 L1228.21 1211.33 L1227.63 1211.33 L1227.04 1211.33 L1226.45 1211.33 L1225.87 1211.33 L1225.28 1211.33 L1224.7 1211.33 L1224.11 1211.33 L1223.52 1211.33 L1222.94 1211.33 L1222.35 1211.33 L1221.76 1211.33 L1221.18 1211.33 L1220.59 1211.33 L1220 1211.33 L1219.42 1211.33 L1218.83 1211.33 L1218.24 1211.33 L1217.66 1211.33 L1217.07 1211.33 L1216.49 1211.33 L1215.9 1211.33 L1215.31 1211.33 L1214.73 1211.33 L1214.14 1211.33 L1213.55 1211.33 L1212.97 1211.33 L1212.38 1211.33 L1211.79 1211.33 L1211.21 1211.33 L1210.62 1211.33 L1210.03 1211.33 L1209.45 1211.33 L1208.86 1211.33 L1208.28 1211.33 L1207.69 1211.33 L1207.1 1211.33 L1206.52 1211.33 L1205.93 1211.33 L1205.34 1211.33 L1204.76 1211.33 L1204.17 1211.33 L1203.58 1211.33 L1203 1211.33 L1202.41 1211.33 L1201.83 1211.33 L1201.24 1211.33 L1200.65 1211.33 L1200.07 1211.33 L1199.48 1211.33 L1198.89 1211.33 L1198.31 1211.33 L1197.72 1211.33 L1197.13 1211.33 L1196.55 1211.33 L1195.96 1211.33 L1195.37 1211.33 L1194.79 1211.33 L1194.2 1211.33 L1193.62 1211.33 L1193.03 1211.33 L1192.44 1211.33 L1191.86 1211.33 L1191.27 1211.33 L1190.68 1211.33 L1190.1 1211.33 L1189.51 1211.33 L1188.92 1211.33 L1188.34 1211.33 L1187.75 1211.33 L1187.16 1211.33 L1186.58 1211.33 L1185.99 1211.33 L1185.41 1211.33 L1184.82 1211.33 L1184.23 1211.33 L1183.65 1211.33 L1183.06 1211.33 L1182.47 1211.33 L1181.89 1211.33 L1181.3 1211.33 L1180.71 1211.33 L1180.13 1211.33 L1179.54 1211.33 L1178.96 1211.33 L1178.37 1211.33 L1177.78 1211.33 L1177.2 1211.33 L1176.61 1211.33 L1176.02 1211.33 L1175.44 1211.33 L1174.85 1211.33 L1174.26 1211.33 L1173.68 1211.33 L1173.09 1211.33 L1172.5 1211.33 L1171.92 1211.33 L1171.33 1211.33 L1170.75 1211.33 L1170.16 1211.33 L1169.57 1211.33 L1168.99 1211.33 L1168.4 1211.33 L1167.81 1211.33 L1167.23 1211.33 L1166.64 1211.33 L1166.05 1211.33 L1165.47 1211.33 L1164.88 1211.33 L1164.29 1211.33 L1163.71 1211.33 L1163.12 1211.33 L1162.54 1211.33 L1161.95 1211.33 L1161.36 1211.33 L1160.78 1211.33 L1160.19 1211.33 L1159.6 1211.33 L1159.02 1211.33 L1158.43 1211.33 L1157.84 1211.33 L1157.26 1211.33 L1156.67 1211.33 L1156.09 1211.33 L1155.5 1211.33 L1154.91 1211.33 L1154.33 1211.33 L1153.74 1211.33 L1153.15 1211.33 L1152.57 1211.33 L1151.98 1211.33 L1151.39 1211.33 L1150.81 1211.33 L1150.22 1211.33 L1149.63 1211.33 L1149.05 1211.33 L1148.46 1211.33 L1147.88 1211.33 L1147.29 1211.33 L1146.7 1211.33 L1146.12 1211.33 L1145.53 1211.33 L1144.94 1211.33 L1144.36 1211.33 L1143.77 1211.33 L1143.18 1211.33 L1142.6 1211.33 L1142.01 1211.33 L1141.42 1211.33 L1140.84 1211.33 L1140.25 1211.33 L1139.67 1211.33 L1139.08 1211.33 L1138.49 1211.33 L1137.91 1211.33 L1137.32 1211.33 L1136.73 1211.33 L1136.15 1211.33 L1135.56 1211.33 L1134.97 1211.33 L1134.39 1211.33 L1133.8 1211.33 L1133.21 1211.33 L1132.63 1211.33 L1132.04 1211.33 L1131.46 1211.33 L1130.87 1211.33 L1130.28 1211.33 L1129.7 1211.33 L1129.11 1211.33 L1128.52 1211.33 L1127.94 1211.33 L1127.35 1211.33 L1126.76 1211.33 L1126.18 1211.33 L1125.59 1211.33 L1125.01 1211.33 L1124.42 1211.33 L1123.83 1211.33 L1123.25 1211.33 L1122.66 1211.33 L1122.07 1211.33 L1121.49 1211.33 L1120.9 1211.33 L1120.31 1211.33 L1119.73 1211.33 L1119.14 1211.33 L1118.55 1211.33 L1117.97 1211.33 L1117.38 1211.33 L1116.8 1211.33 L1116.21 1211.33 L1115.62 1211.33 L1115.04 1211.33 L1114.45 1211.33 L1113.86 1211.33 L1113.28 1211.33 L1112.69 1211.33 L1112.1 1211.33 L1111.52 1211.33 L1110.93 1211.33 L1110.34 1211.33 L1109.76 1211.33 L1109.17 1211.33 L1108.59 1211.33 L1108 1211.33 L1107.41 1211.33 L1106.83 1211.33 L1106.24 1211.33 L1105.65 1211.33 L1105.07 1211.33 L1104.48 1211.33 L1103.89 1211.33 L1103.31 1211.33 L1102.72 1211.33 L1102.14 1211.33 L1101.55 1211.33 L1100.96 1211.33 L1100.38 1211.33 L1099.79 1211.33 L1099.2 1211.33 L1098.62 1211.33 L1098.03 1211.33 L1097.44 1211.33 L1096.86 1211.33 L1096.27 1211.33 L1095.68 1211.33 L1095.1 1211.33 L1094.51 1211.33 L1093.93 1211.33 L1093.34 1211.33 L1092.75 1211.33 L1092.17 1211.33 L1091.58 1211.33 L1090.99 1211.33 L1090.41 1211.33 L1089.82 1211.33 L1089.23 1211.33 L1088.65 1211.33 L1088.06 1211.33 L1087.47 1211.33 L1086.89 1211.33 L1086.3 1211.33 L1085.72 1211.33 L1085.13 1211.33 L1084.54 1211.33 L1083.96 1211.33 L1083.37 1211.33 L1082.78 1211.33 L1082.2 1211.33 L1081.61 1211.33 L1081.02 1211.33 L1080.44 1211.33 L1079.85 1211.33 L1079.26 1211.33 L1078.68 1211.33 L1078.09 1211.33 L1077.51 1211.33 L1076.92 1211.33 L1076.33 1211.33 L1075.75 1211.33 L1075.16 1211.33 L1074.57 1211.33 L1073.99 1211.33 L1073.4 1211.33 L1072.81 1211.33 L1072.23 1211.33 L1071.64 1211.33 L1071.06 1211.33 L1070.47 1211.33 L1069.88 1211.33 L1069.3 1211.33 L1068.71 1211.33 L1068.12 1211.33 L1067.54 1211.33 L1066.95 1211.33 L1066.36 1211.33 L1065.78 1211.33 L1065.19 1211.33 L1064.6 1211.33 L1064.02 1211.33 L1063.43 1211.33 L1062.85 1211.33 L1062.26 1211.33 L1061.67 1211.33 L1061.09 1211.33 L1060.5 1211.33 L1059.91 1211.33 L1059.33 1211.33 L1058.74 1211.33 L1058.15 1211.33 L1057.57 1211.33 L1056.98 1211.33 L1056.39 1211.33 L1055.81 1211.33 L1055.22 1211.33 L1054.64 1211.33 L1054.05 1211.33 L1053.46 1211.33 L1052.88 1211.33 L1052.29 1211.33 L1051.7 1211.33 L1051.12 1211.33 L1050.53 1211.33 L1049.94 1211.33 L1049.36 1211.33 L1048.77 1211.33 L1048.19 1211.33 L1047.6 1211.33 L1047.01 1211.33 L1046.43 1211.33 L1045.84 1211.33 L1045.25 1211.33 L1044.67 1211.33 L1044.08 1211.33 L1043.49 1211.33 L1042.91 1211.33 L1042.32 1211.33 L1041.73 1211.33 L1041.15 1211.33 L1040.56 1211.33 L1039.98 1211.33 L1039.39 1211.33 L1038.8 1211.33 L1038.22 1211.33 L1037.63 1211.33 L1037.04 1211.33 L1036.46 1211.33 L1035.87 1211.33 L1035.28 1211.33 L1034.7 1211.33 L1034.11 1211.33 L1033.52 1211.33 L1032.94 1211.33 L1032.35 1211.33 L1031.77 1211.33 L1031.18 1211.33 L1030.59 1211.33 L1030.01 1211.33 L1029.42 1211.33 L1028.83 1211.33 L1028.25 1211.33 L1027.66 1211.33 L1027.07 1211.33 L1026.49 1211.33 L1025.9 1211.33 L1025.32 1211.33 L1024.73 1211.33 L1024.14 1211.33 L1023.56 1211.33 L1022.97 1211.33 L1022.38 1211.33 L1021.8 1211.33 L1021.21 1211.33 L1020.62 1211.33 L1020.04 1211.33 L1019.45 1211.33 L1018.86 1211.33 L1018.28 1211.33 L1017.69 1211.33 L1017.11 1211.33 L1016.52 1211.33 L1015.93 1211.33 L1015.35 1211.33 L1014.76 1211.33 L1014.17 1211.33 L1013.59 1211.33 L1013 1211.33 L1012.41 1211.33 L1011.83 1211.33 L1011.24 1211.33 L1010.65 1211.33 L1010.07 1211.33 L1009.48 1211.33 L1008.9 1211.33 L1008.31 1211.33 L1007.72 1211.33 L1007.14 1211.33 L1006.55 1211.33 L1005.96 1211.33 L1005.38 1211.33 L1004.79 1211.33 L1004.2 1211.33 L1003.62 1211.33 L1003.03 1211.33 L1002.44 1211.33 L1001.86 1211.33 L1001.27 1211.33 L1000.69 1211.33 L1000.1 1211.33 L999.513 1211.33 L998.926 1211.33 L998.34 1211.33 L997.754 1211.33 L997.167 1211.33 L996.581 1211.33 L995.994 1211.33 L995.408 1211.33 L994.822 1211.33 L994.235 1211.33 L993.649 1211.33 L993.062 1211.33 L992.476 1211.33 L991.889 1211.33 L991.303 1211.33 L990.717 1211.33 L990.13 1211.33 L989.544 1211.33 L988.957 1211.33 L988.371 1211.33 L987.785 1211.33 L987.198 1211.33 L986.612 1211.33 L986.025 1211.33  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.44 986.612,1211.44 987.198,1211.44 987.785,1211.44 988.371,1211.44 988.957,1211.44 989.544,1211.44 990.13,1211.44 990.717,1211.44 991.303,1211.44 991.889,1211.44 992.476,1211.44 993.062,1211.44 993.649,1211.44 994.235,1211.44 994.822,1211.44 995.408,1211.44 995.994,1211.44 996.581,1211.44 997.167,1211.44 997.754,1211.44 998.34,1211.44 998.926,1211.44 999.513,1211.44 1000.1,1211.44 1000.69,1211.44 1001.27,1211.44 1001.86,1211.44 1002.44,1211.44 1003.03,1211.44 1003.62,1211.44 1004.2,1211.44 1004.79,1211.44 1005.38,1211.44 1005.96,1211.44 1006.55,1211.44 1007.14,1211.44 1007.72,1211.44 1008.31,1211.44 1008.9,1211.44 1009.48,1211.44 1010.07,1211.44 1010.65,1211.44 1011.24,1211.44 1011.83,1211.44 1012.41,1211.44 1013,1211.44 1013.59,1211.44 1014.17,1211.44 1014.76,1211.44 1015.35,1211.44 1015.93,1211.44 1016.52,1211.44 1017.11,1211.44 1017.69,1211.44 1018.28,1211.44 1018.86,1211.44 1019.45,1211.44 1020.04,1211.44 1020.62,1211.44 1021.21,1211.44 1021.8,1211.44 1022.38,1211.44 1022.97,1211.44 1023.56,1211.44 1024.14,1211.44 1024.73,1211.44 1025.32,1211.44 1025.9,1211.44 1026.49,1211.44 1027.07,1211.44 1027.66,1211.44 1028.25,1211.44 1028.83,1211.44 1029.42,1211.44 1030.01,1211.44 1030.59,1211.44 1031.18,1211.44 1031.77,1211.44 1032.35,1211.44 1032.94,1211.44 1033.52,1211.44 1034.11,1211.44 1034.7,1211.44 1035.28,1211.44 1035.87,1211.44 1036.46,1211.44 1037.04,1211.44 1037.63,1211.44 1038.22,1211.44 1038.8,1211.44 1039.39,1211.44 1039.98,1211.44 1040.56,1211.44 1041.15,1211.44 1041.73,1211.44 1042.32,1211.44 1042.91,1211.44 1043.49,1211.44 1044.08,1211.44 1044.67,1211.44 1045.25,1211.44 1045.84,1211.44 1046.43,1211.44 1047.01,1211.44 1047.6,1211.44 1048.19,1211.44 1048.77,1211.44 1049.36,1211.44 1049.94,1211.44 1050.53,1211.44 1051.12,1211.44 1051.7,1211.44 1052.29,1211.44 1052.88,1211.44 1053.46,1211.44 1054.05,1211.44 1054.64,1211.44 1055.22,1211.44 1055.81,1211.44 1056.39,1211.44 1056.98,1211.44 1057.57,1211.44 1058.15,1211.44 1058.74,1211.44 1059.33,1211.44 1059.91,1211.44 1060.5,1211.44 1061.09,1211.44 1061.67,1211.44 1062.26,1211.44 1062.85,1211.44 1063.43,1211.44 1064.02,1211.44 1064.6,1211.44 1065.19,1211.44 1065.78,1211.44 1066.36,1211.44 1066.95,1211.44 1067.54,1211.44 1068.12,1211.44 1068.71,1211.44 1069.3,1211.44 1069.88,1211.44 1070.47,1211.44 1071.06,1211.44 1071.64,1211.44 1072.23,1211.44 1072.81,1211.44 1073.4,1211.44 1073.99,1211.44 1074.57,1211.44 1075.16,1211.44 1075.75,1211.44 1076.33,1211.44 1076.92,1211.44 1077.51,1211.44 1078.09,1211.44 1078.68,1211.44 1079.26,1211.44 1079.85,1211.44 1080.44,1211.44 1081.02,1211.44 1081.61,1211.44 1082.2,1211.44 1082.78,1211.44 1083.37,1211.44 1083.96,1211.44 1084.54,1211.44 1085.13,1211.44 1085.72,1211.44 1086.3,1211.44 1086.89,1211.44 1087.47,1211.44 1088.06,1211.44 1088.65,1211.44 1089.23,1211.44 1089.82,1211.44 1090.41,1211.44 1090.99,1211.44 1091.58,1211.44 1092.17,1211.44 1092.75,1211.44 1093.34,1211.44 1093.93,1211.44 1094.51,1211.44 1095.1,1211.44 1095.68,1211.44 1096.27,1211.44 1096.86,1211.44 1097.44,1211.44 1098.03,1211.44 1098.62,1211.44 1099.2,1211.44 1099.79,1211.44 1100.38,1211.44 1100.96,1211.44 1101.55,1211.44 1102.14,1211.44 1102.72,1211.44 1103.31,1211.44 1103.89,1211.44 1104.48,1211.44 1105.07,1211.44 1105.65,1211.44 1106.24,1211.44 1106.83,1211.44 1107.41,1211.44 1108,1211.44 1108.59,1211.44 1109.17,1211.44 1109.76,1211.44 1110.34,1211.44 1110.93,1211.44 1111.52,1211.44 1112.1,1211.44 1112.69,1211.44 1113.28,1211.44 1113.86,1211.44 1114.45,1211.44 1115.04,1211.44 1115.62,1211.44 1116.21,1211.44 1116.8,1211.44 1117.38,1211.44 1117.97,1211.44 1118.55,1211.44 1119.14,1211.44 1119.73,1211.44 1120.31,1211.44 1120.9,1211.44 1121.49,1211.44 1122.07,1211.44 1122.66,1211.44 1123.25,1211.44 1123.83,1211.44 1124.42,1211.44 1125.01,1211.44 1125.59,1211.44 1126.18,1211.44 1126.76,1211.44 1127.35,1211.44 1127.94,1211.44 1128.52,1211.44 1129.11,1211.44 1129.7,1211.44 1130.28,1211.44 1130.87,1211.44 1131.46,1211.44 1132.04,1211.44 1132.63,1211.44 1133.21,1211.44 1133.8,1211.44 1134.39,1211.44 1134.97,1211.44 1135.56,1211.44 1136.15,1211.44 1136.73,1211.44 1137.32,1211.44 1137.91,1211.44 1138.49,1211.44 1139.08,1211.44 1139.67,1211.44 1140.25,1211.44 1140.84,1211.44 1141.42,1211.44 1142.01,1211.44 1142.6,1211.44 1143.18,1211.44 1143.77,1211.44 1144.36,1211.44 1144.94,1211.44 1145.53,1211.44 1146.12,1211.44 1146.7,1211.44 1147.29,1211.44 1147.88,1211.44 1148.46,1211.44 1149.05,1211.44 1149.63,1211.44 1150.22,1211.44 1150.81,1211.44 1151.39,1211.44 1151.98,1211.44 1152.57,1211.44 1153.15,1211.44 1153.74,1211.44 1154.33,1211.44 1154.91,1211.44 1155.5,1211.44 1156.09,1211.44 1156.67,1211.44 1157.26,1211.44 1157.84,1211.44 1158.43,1211.44 1159.02,1211.44 1159.6,1211.44 1160.19,1211.44 1160.78,1211.44 1161.36,1211.44 1161.95,1211.44 1162.54,1211.44 1163.12,1211.44 1163.71,1211.44 1164.29,1211.44 1164.88,1211.44 1165.47,1211.44 1166.05,1211.44 1166.64,1211.44 1167.23,1211.44 1167.81,1211.44 1168.4,1211.44 1168.99,1211.44 1169.57,1211.44 1170.16,1211.44 1170.75,1211.44 1171.33,1211.44 1171.92,1211.44 1172.5,1211.44 1173.09,1211.44 1173.68,1211.44 1174.26,1211.44 1174.85,1211.44 1175.44,1211.44 1176.02,1211.44 1176.61,1211.44 1177.2,1211.44 1177.78,1211.44 1178.37,1211.44 1178.96,1211.44 1179.54,1211.44 1180.13,1211.44 1180.71,1211.44 1181.3,1211.44 1181.89,1211.44 1182.47,1211.44 1183.06,1211.44 1183.65,1211.44 1184.23,1211.44 1184.82,1211.44 1185.41,1211.44 1185.99,1211.44 1186.58,1211.44 1187.16,1211.44 1187.75,1211.44 1188.34,1211.44 1188.92,1211.44 1189.51,1211.44 1190.1,1211.44 1190.68,1211.44 1191.27,1211.44 1191.86,1211.44 1192.44,1211.44 1193.03,1211.44 1193.62,1211.44 1194.2,1211.44 1194.79,1211.44 1195.37,1211.44 1195.96,1211.44 1196.55,1211.44 1197.13,1211.44 1197.72,1211.44 1198.31,1211.44 1198.89,1211.44 1199.48,1211.44 1200.07,1211.44 1200.65,1211.44 1201.24,1211.44 1201.83,1211.44 1202.41,1211.44 1203,1211.44 1203.58,1211.44 1204.17,1211.44 1204.76,1211.44 1205.34,1211.44 1205.93,1211.44 1206.52,1211.44 1207.1,1211.44 1207.69,1211.44 1208.28,1211.44 1208.86,1211.44 1209.45,1211.44 1210.03,1211.44 1210.62,1211.44 1211.21,1211.44 1211.79,1211.44 1212.38,1211.44 1212.97,1211.44 1213.55,1211.44 1214.14,1211.44 1214.73,1211.44 1215.31,1211.44 1215.9,1211.44 1216.49,1211.44 1217.07,1211.44 1217.66,1211.44 1218.24,1211.44 1218.83,1211.44 1219.42,1211.44 1220,1211.44 1220.59,1211.44 1221.18,1211.44 1221.76,1211.44 1222.35,1211.44 1222.94,1211.44 1223.52,1211.44 1224.11,1211.44 1224.7,1211.44 1225.28,1211.44 1225.87,1211.44 1226.45,1211.44 1227.04,1211.44 1227.63,1211.44 1228.21,1211.44 1228.8,1211.44 1229.39,1211.44 1229.97,1211.44 1230.56,1211.44 1231.15,1211.44 1231.73,1211.44 1232.32,1211.44 1232.91,1211.44 1233.49,1211.44 1234.08,1211.44 1234.66,1211.44 1235.25,1211.44 1235.84,1211.44 1236.42,1211.44 1237.01,1211.44 1237.6,1211.44 1238.18,1211.44 1238.77,1211.44 1239.36,1211.44 1239.94,1211.44 1240.53,1211.44 1241.11,1211.44 1241.7,1211.44 1242.29,1211.44 1242.87,1211.44 1243.46,1211.44 1244.05,1211.44 1244.63,1211.44 1245.22,1211.44 1245.81,1211.44 1246.39,1211.44 1246.98,1211.44 1247.57,1211.44 1248.15,1211.44 1248.74,1211.44 1249.32,1211.44 1249.91,1211.44 1250.5,1211.44 1251.08,1211.44 1251.67,1211.44 1252.26,1211.44 1252.84,1211.44 1253.43,1211.44 1254.02,1211.44 1254.6,1211.44 1255.19,1211.44 1255.78,1211.44 1256.36,1211.44 1256.95,1211.44 1257.53,1211.44 1258.12,1211.44 1258.71,1211.44 1259.29,1211.44 1259.88,1211.44 1260.47,1211.44 1261.05,1211.44 1261.64,1211.44 1262.23,1211.44 1262.81,1211.44 1263.4,1211.44 1263.98,1211.44 1264.57,1211.44 1265.16,1211.44 1265.74,1211.44 1266.33,1211.44 1266.92,1211.44 1267.5,1211.44 1268.09,1211.44 1268.68,1211.44 1269.26,1211.44 1269.85,1211.44 1270.44,1211.44 1271.02,1211.44 1271.61,1211.44 1272.19,1211.44 1272.78,1211.44 1273.37,1211.44 1273.95,1211.44 1274.54,1211.44 1275.13,1211.44 1275.71,1211.44 1276.3,1211.44 1276.89,1211.44 1277.47,1211.44 1278.06,1211.44 1278.65,1211.44 1279.23,1211.44 1279.82,1211.44 1280.4,1211.44 1280.99,1211.44 1281.58,1211.44 1282.16,1211.44 1282.75,1211.44 1283.34,1211.44 1283.92,1211.44 1284.51,1211.44 1285.1,1211.44 1285.68,1211.44 1286.27,1211.44 1286.86,1211.44 1287.44,1211.44 1288.03,1211.44 1288.61,1211.44 1289.2,1211.44 1289.79,1211.44 1290.37,1211.44 1290.96,1211.44 1291.55,1211.44 1292.13,1211.44 1292.72,1211.44 1293.31,1211.44 1293.89,1211.44 1294.48,1211.44 1295.06,1211.44 1295.65,1211.44 1296.24,1211.44 1296.82,1211.44 1297.41,1211.44 1298,1211.44 1298.58,1211.44 1299.17,1211.44 1299.76,1211.44 1300.34,1211.44 1300.93,1211.44 1301.52,1211.44 1302.1,1211.44 1302.69,1211.44 1303.27,1211.44 1303.86,1211.44 1304.45,1211.44 1305.03,1211.44 1305.62,1211.44 1306.21,1211.44 1306.79,1211.44 1307.38,1211.44 1307.97,1211.44 1308.55,1211.44 1309.14,1211.44 1309.73,1211.44 1310.31,1211.44 1310.9,1211.44 1311.48,1211.44 1312.07,1211.44 1312.66,1211.44 1313.24,1211.44 1313.83,1211.44 1314.42,1211.44 1315,1211.44 1315.59,1211.44 1316.18,1211.44 1316.76,1211.44 1317.35,1211.44 1317.93,1211.44 1318.52,1211.44 1319.11,1211.44 1319.69,1211.44 1320.28,1211.44 1320.87,1211.44 1321.45,1211.44 1322.04,1211.44 1322.63,1211.44 1323.21,1211.44 1323.8,1211.44 1324.39,1211.44 1324.97,1211.44 1325.56,1211.44 1326.14,1211.44 1326.73,1211.44 1327.32,1211.44 1327.9,1211.44 1328.49,1211.44 1329.08,1211.44 1329.66,1211.44 1330.25,1211.44 1330.84,1211.44 1331.42,1211.44 1332.01,1211.44 1332.6,1211.44 1333.18,1211.44 1333.77,1211.44 1334.35,1211.44 1334.94,1211.44 1335.53,1211.44 1336.11,1211.44 1336.7,1211.44 1337.29,1211.44 1337.87,1211.44 1338.46,1211.44 1339.05,1211.44 1339.63,1211.44 1340.22,1211.44 1340.8,1211.44 1341.39,1211.44 1341.98,1211.44 1342.56,1211.44 1343.15,1211.44 1343.74,1211.44 1344.32,1211.44 1344.91,1211.44 1345.5,1211.44 1346.08,1211.44 1346.67,1211.44 1347.26,1211.44 1347.84,1211.44 1348.43,1211.44 1349.01,1211.44 1349.6,1211.44 1350.19,1211.44 1350.77,1211.44 1351.36,1211.44 1351.95,1211.44 1352.53,1211.44 1353.12,1211.44 1353.71,1211.44 1354.29,1211.44 1354.88,1211.44 1355.47,1211.44 1356.05,1211.44 1356.64,1211.44 1357.22,1211.44 1357.81,1211.44 1358.4,1211.44 1358.98,1211.44 1359.57,1211.44 1360.16,1211.44 1360.74,1211.44 1361.33,1211.44 1361.92,1211.44 1362.5,1211.44 1363.09,1211.44 1363.68,1211.44 1364.26,1211.44 1364.85,1211.44 1365.43,1211.44 1366.02,1211.44 1366.61,1211.44 1367.19,1211.44 1367.78,1211.44 1368.37,1211.44 1368.95,1211.44 1369.54,1211.44 1370.13,1211.44 1370.71,1211.44 1371.3,1211.44 1371.88,1211.44 1372.47,1211.44 1373.06,1211.44 1373.64,1211.44 1374.23,1211.44 1374.82,1211.44 1375.4,1211.44 1375.99,1211.44 1376.58,1211.44 1377.16,1211.44 1377.75,1211.44 1378.34,1211.44 1378.92,1211.44 1379.51,1211.44 1380.09,1211.44 1380.68,1211.44 1381.27,1211.44 1381.85,1211.44 1382.44,1211.44 1383.03,1211.44 1383.61,1211.44 1384.2,1211.44 1384.79,1211.44 1385.37,1211.44 1385.96,1211.44 1386.55,1211.44 1387.13,1211.44 1387.72,1211.44 1388.3,1211.44 1388.89,1211.44 1389.48,1211.44 1390.06,1211.44 1390.65,1211.44 1391.24,1211.44 1391.82,1211.44 1392.41,1211.44 1393,1211.44 1393.58,1211.44 1394.17,1211.44 1394.75,1211.44 1395.34,1211.44 1395.93,1211.44 1396.51,1211.44 1397.1,1211.44 1397.69,1211.44 1398.27,1211.44 1398.86,1211.44 1399.45,1211.44 1400.03,1211.44 1400.62,1211.44 1401.21,1211.44 1401.79,1211.44 1402.38,1211.44 1402.96,1211.44 1403.55,1211.44 1404.14,1211.44 1404.72,1211.44 1405.31,1211.44 1405.9,1211.44 1406.48,1211.44 1407.07,1211.44 1407.66,1211.44 1408.24,1211.44 1408.83,1211.44 1409.42,1211.44 1410,1211.44 1410.59,1211.44 1411.17,1211.44 1411.76,1211.44 1412.35,1211.44 1412.93,1211.44 1413.52,1211.44 1414.11,1211.44 1414.69,1211.44 1415.28,1211.44 1415.87,1211.44 1416.45,1211.44 1417.04,1211.44 1417.63,1211.44 1418.21,1211.44 1418.8,1211.44 1419.38,1211.44 1419.97,1211.44 1420.56,1211.44 1421.14,1211.44 1421.73,1211.44 1422.32,1211.44 1422.9,1211.44 1423.49,1211.44 1424.08,1211.44 1424.66,1211.44 1425.25,1211.44 1425.83,1211.44 1426.42,1211.44 1427.01,1211.44 1427.59,1211.44 1428.18,1211.44 1428.77,1211.44 1429.35,1211.44 1429.94,1211.44 1430.53,1211.44 1431.11,1211.44 1431.7,1211.44 1432.29,1211.44 1432.87,1211.44 1433.46,1211.44 1434.04,1211.44 1434.63,1211.44 1435.22,1211.44 1435.8,1211.44 1436.39,1211.44 1436.98,1211.44 1437.56,1211.44 1438.15,1211.44 1438.74,1211.44 1439.32,1211.44 1439.91,1211.44 1440.5,1211.44 1441.08,1211.44 1441.67,1211.44 1442.25,1211.44 1442.84,1211.44 1443.43,1211.44 1444.01,1211.44 1444.6,1211.44 1445.19,1211.44 1445.77,1211.44 1446.36,1211.44 1446.95,1211.44 1447.53,1211.44 1448.12,1211.44 1448.7,1211.44 1449.29,1211.44 1449.88,1211.44 1450.46,1211.44 1451.05,1211.44 1451.64,1211.44 1452.22,1211.44 1452.81,1211.44 1453.4,1211.44 1453.98,1211.44 1454.57,1211.44 1455.16,1211.44 1455.74,1211.44 1456.33,1211.44 1456.91,1211.44 1457.5,1211.44 1458.09,1211.44 1458.67,1211.44 1459.26,1211.44 1459.85,1211.44 1460.43,1211.44 1461.02,1211.44 1461.61,1211.44 1462.19,1211.44 1462.78,1211.44 1463.37,1211.44 1463.95,1211.44 1464.54,1211.44 1465.12,1211.44 1465.71,1211.44 1466.3,1211.44 1466.88,1211.44 1467.47,1211.44 1468.06,1211.44 1468.64,1211.44 1469.23,1211.44 1469.82,1211.44 1470.4,1211.44 1470.99,1211.44 1471.57,1211.44 1472.16,1211.44 1472.75,1211.44 1473.33,1211.44 1473.92,1211.44 1474.51,1211.44 1475.09,1211.44 1475.68,1211.44 1476.27,1211.44 1476.85,1211.44 1477.44,1211.44 1478.03,1211.44 1478.61,1211.44 1479.2,1211.44 1479.78,1211.44 1480.37,1211.44 1480.96,1211.44 1481.54,1211.44 1482.13,1211.44 1482.72,1211.44 1483.3,1211.44 1483.89,1211.44 1484.48,1211.44 1485.06,1211.44 1485.65,1211.44 1486.24,1211.44 1486.82,1211.44 1487.41,1211.44 1487.99,1211.44 1488.58,1211.44 1489.17,1211.44 1489.75,1211.44 1490.34,1211.44 1490.93,1211.44 1491.51,1211.44 1492.1,1211.44 1492.69,1211.44 1493.27,1211.44 1493.86,1211.44 1494.45,1211.44 1495.03,1211.44 1495.62,1211.44 1496.2,1211.44 1496.79,1211.44 1497.38,1211.44 1497.96,1211.44 1498.55,1211.44 1499.14,1211.44 1499.72,1211.44 1500.31,1211.44 1500.9,1211.44 1501.48,1211.44 1502.07,1211.44 1502.65,1211.44 1503.24,1211.44 1503.83,1211.44 1504.41,1211.44 1505,1211.44 1505.59,1211.44 1506.17,1211.44 1506.76,1211.44 1507.35,1211.44 1507.93,1211.44 1508.52,1211.44 1509.11,1211.44 1509.69,1211.44 1510.28,1211.44 1510.86,1211.44 1511.45,1211.44 1512.04,1211.44 1512.62,1211.44 1513.21,1211.44 1513.8,1211.44 1514.38,1211.44 1514.97,1211.44 1515.56,1211.44 1516.14,1211.44 1516.73,1211.44 1517.32,1211.44 1517.9,1211.44 1518.49,1211.44 1519.07,1211.44 1519.66,1211.44 1520.25,1211.44 1520.83,1211.44 1521.42,1211.44 1522.01,1211.44 1522.59,1211.44 1523.18,1211.44 1523.77,1211.44 1524.35,1211.44 1524.94,1211.44 1525.52,1211.44 1526.11,1211.44 1526.7,1211.44 1527.28,1211.44 1527.87,1211.44 1528.46,1211.44 1529.04,1211.44 1529.63,1211.44 1530.22,1211.44 1530.8,1211.44 1531.39,1211.44 1531.98,1211.44 1532.56,1211.44 1533.15,1211.44 1533.73,1211.44 1534.32,1211.44 1534.91,1211.44 1535.49,1211.44 1536.08,1211.44 1536.67,1211.44 1537.25,1211.44 1537.84,1211.44 1538.43,1211.44 1539.01,1211.44 1539.6,1211.44 1540.19,1211.44 1540.77,1211.44 1541.36,1211.44 1541.94,1211.44 1542.53,1211.44 1543.12,1211.44 1543.7,1211.44 1544.29,1211.44 1544.88,1211.44 1545.46,1211.44 1546.05,1211.44 1546.64,1211.44 1547.22,1211.44 1547.81,1211.44 1548.4,1211.44 1548.98,1211.44 1549.57,1211.44 1550.15,1211.44 1550.74,1211.44 1551.33,1211.44 1551.91,1211.44 1552.5,1211.44 1553.09,1211.44 1553.67,1211.44 1554.26,1211.44 1554.85,1211.44 1555.43,1211.44 1556.02,1211.44 1556.6,1211.44 1557.19,1211.44 1557.78,1211.44 1558.36,1211.44 1558.95,1211.44 1559.54,1211.44 1560.12,1211.44 1560.71,1211.44 1561.3,1211.44 1561.88,1211.44 1562.47,1211.44 1563.06,1211.44 1563.64,1211.44 1564.23,1211.44 1564.81,1211.44 1565.4,1211.44 1565.99,1211.44 1566.57,1211.44 1567.16,1211.44 1567.75,1211.44 1568.33,1211.44 1568.92,1211.44 1569.51,1211.44 1570.09,1211.44 1570.68,1211.44 1571.27,1211.44 1571.85,1211.44 1572.44,1211.44 1573.02,1211.44 1573.61,1211.44 1574.2,1211.44 1574.78,1211.44 1575.37,1211.44 1575.96,1211.44 1576.54,1211.44 1577.13,1211.44 1577.72,1211.44 1578.3,1211.44 1578.89,1211.44 1579.47,1211.44 1580.06,1211.44 1580.65,1211.44 1581.23,1211.44 1581.82,1211.44 1582.41,1211.44 1582.99,1211.44 1583.58,1211.44 1584.17,1211.44 1584.75,1211.44 1585.34,1211.44 1585.93,1211.44 1586.51,1211.44 1587.1,1211.44 1587.68,1211.44 1588.27,1211.44 1588.86,1211.44 1589.44,1211.44 1590.03,1211.44 1590.62,1211.44 1591.2,1211.44 1591.79,1211.44 1592.38,1211.44 1592.96,1211.44 1593.55,1211.44 1594.14,1211.44 1594.72,1211.44 1595.31,1211.44 1595.89,1211.44 1596.48,1211.44 1597.07,1211.44 1597.65,1211.44 1598.24,1211.44 1598.83,1211.44 1599.41,1211.44 1600,1211.44 1600.59,1211.44 1601.17,1211.44 1601.76,1211.44 1602.34,1211.44 1602.93,1211.44 1603.52,1211.44 1604.1,1211.44 1604.69,1211.44 1605.28,1211.44 1605.86,1211.44 1606.45,1211.44 1607.04,1211.44 1607.62,1211.44 1608.21,1211.44 1608.8,1211.44 1609.38,1211.44 1609.97,1211.44 1610.55,1211.44 1611.14,1211.44 1611.73,1211.44 1612.31,1211.44 1612.9,1211.44 1613.49,1211.44 1614.07,1211.44 1614.66,1211.44 1615.25,1211.44 1615.83,1211.44 1616.42,1211.44 1617.01,1211.44 1617.59,1211.44 1618.18,1211.44 1618.76,1211.44 1619.35,1211.44 1619.94,1211.44 1620.52,1211.44 1621.11,1211.44 1621.7,1211.44 1622.28,1211.44 1622.87,1211.44 1623.46,1211.44 1624.04,1211.44 1624.63,1211.44 1625.22,1211.44 1625.8,1211.44 1626.39,1211.44 1626.97,1211.44 1627.56,1211.44 1628.15,1211.44 1628.73,1211.44 1629.32,1211.44 1629.91,1211.44 1630.49,1211.44 1631.08,1211.44 1631.67,1211.44 1632.25,1211.44 1632.84,1211.44 1633.42,1211.44 1634.01,1211.44 1634.6,1211.44 1635.18,1211.44 1635.77,1211.44 1636.36,1211.44 1636.94,1211.44 1637.53,1211.44 1638.12,1211.44 1638.7,1211.44 1639.29,1211.44 1639.88,1211.44 1640.46,1211.44 1641.05,1211.44 1641.63,1211.44 1642.22,1211.44 1642.81,1211.44 1643.39,1211.44 1643.98,1211.44 1644.57,1211.44 1645.15,1211.44 1645.74,1211.44 1646.33,1211.44 1646.91,1211.44 1647.5,1211.44 1648.09,1211.44 1648.67,1211.44 1649.26,1211.44 1649.84,1211.44 1650.43,1211.44 1651.02,1211.44 1651.6,1211.44 1652.19,1211.44 1652.78,1211.44 1653.36,1211.44 1653.95,1211.44 1654.54,1211.44 1655.12,1211.44 1655.71,1211.44 1656.29,1211.44 1656.88,1211.44 1657.47,1211.44 1658.05,1211.44 1658.64,1211.44 1659.23,1211.44 1659.81,1211.44 1660.4,1211.44 1660.99,1211.44 1661.57,1211.44 1662.16,1211.44 1662.75,1211.44 1663.33,1211.44 1663.92,1211.44 1664.5,1211.44 1665.09,1211.44 1665.68,1211.44 1666.26,1211.44 1666.85,1211.44 1667.44,1211.44 1668.02,1211.44 1668.61,1211.44 1669.2,1211.44 1669.78,1211.44 1670.37,1211.44 1670.96,1211.44 1671.54,1211.44 1672.13,1211.44 1672.71,1211.44 1673.3,1211.44 1673.89,1211.44 1674.47,1211.44 1675.06,1211.44 1675.65,1211.44 1676.23,1211.44 1676.82,1211.44 1677.41,1211.44 1677.99,1211.44 1678.58,1211.44 1679.17,1211.44 1679.75,1211.44 1680.34,1211.44 1680.92,1211.44 1681.51,1211.44 1682.1,1211.44 1682.68,1211.44 1683.27,1211.44 1683.86,1211.44 1684.44,1211.44 1685.03,1211.44 1685.62,1211.44 1686.2,1211.44 1686.79,1211.44 1687.37,1211.44 1687.96,1211.44 1688.55,1211.44 1689.13,1211.44 1689.72,1211.44 1690.31,1211.44 1690.89,1211.44 1691.48,1211.44 1692.07,1211.44 1692.65,1211.44 1693.24,1211.44 1693.83,1211.44 1694.41,1211.44 1695,1211.44 1695.58,1211.44 1696.17,1211.44 1696.76,1211.44 1697.34,1211.44 1697.93,1211.44 1698.52,1211.44 1699.1,1211.44 1699.69,1211.44 1700.28,1211.44 1700.86,1211.44 1701.45,1211.44 1702.04,1211.44 1702.62,1211.44 1703.21,1211.44 1703.79,1211.44 1704.38,1211.44 1704.97,1211.44 1705.55,1211.44 1706.14,1211.44 1706.73,1211.44 1707.31,1211.44 1707.9,1211.44 1708.49,1211.44 1709.07,1211.44 1709.66,1211.44 1710.24,1211.44 1710.83,1211.44 1711.42,1211.44 1712,1211.44 1712.59,1211.44 1713.18,1211.44 1713.76,1211.44 1714.35,1211.44 1714.94,1211.44 1715.52,1211.44 1716.11,1211.44 1716.7,1211.44 1717.28,1211.44 1717.87,1211.44 1718.45,1211.44 1719.04,1211.44 1719.63,1211.44 1720.21,1211.44 1720.8,1211.44 1721.39,1211.44 1721.97,1211.44 1722.56,1211.44 1723.15,1211.44 1723.73,1211.44 1724.32,1211.44 1724.91,1211.44 1725.49,1211.44 1726.08,1211.44 1726.66,1211.44 1727.25,1211.44 1727.84,1211.44 1728.42,1211.44 1729.01,1211.44 1729.6,1211.44 1730.18,1211.44 1730.77,1211.44 1731.36,1211.44 1731.94,1211.44 1732.53,1211.44 1733.11,1211.44 1733.7,1211.44 1734.29,1211.44 1734.87,1211.44 1735.46,1211.44 1736.05,1211.44 1736.63,1211.44 1737.22,1211.44 1737.81,1211.44 1738.39,1211.44 1738.98,1211.44 1739.57,1211.44 1740.15,1211.44 1740.74,1211.44 1741.32,1211.44 1741.91,1211.44 1742.5,1211.44 1743.08,1211.44 1743.67,1211.44 1744.26,1211.44 1744.84,1211.44 1745.43,1211.44 1746.02,1211.44 1746.6,1211.44 1747.19,1211.44 1747.78,1211.44 1748.36,1211.44 1748.95,1211.44 1749.53,1211.44 1750.12,1211.44 1750.71,1211.44 1751.29,1211.44 1751.88,1211.44 1752.47,1211.44 1753.05,1211.44 1753.64,1211.44 1754.23,1211.44 1754.81,1211.44 1755.4,1211.44 1755.99,1211.44 1756.57,1211.44 1757.16,1211.44 1757.74,1211.44 1758.33,1211.44 1758.92,1211.44 1759.5,1211.44 1760.09,1211.44 1760.68,1211.44 1761.26,1211.44 1761.85,1211.44 1762.44,1211.44 1763.02,1211.44 1763.61,1211.44 1764.19,1211.44 1764.78,1211.44 1765.37,1211.44 1765.95,1211.44 1766.54,1211.44 1767.13,1211.44 1767.71,1211.44 1768.3,1211.44 1768.89,1211.44 1769.47,1211.44 1770.06,1211.44 1770.65,1211.44 1771.23,1211.44 1771.82,1211.44 1772.4,1211.44 1772.99,1211.44 1773.58,1211.44 1774.16,1211.44 1774.75,1211.44 1775.34,1211.44 1775.92,1211.44 1776.51,1211.44 1777.1,1211.44 1777.68,1211.44 1778.27,1211.44 1778.86,1211.44 1779.44,1211.44 1780.03,1211.44 1780.61,1211.44 1781.2,1211.44 1781.79,1211.44 1782.37,1211.44 1782.96,1211.44 1783.55,1211.44 1784.13,1211.44 1784.72,1211.44 1785.31,1211.44 1785.89,1211.44 1786.48,1211.44 1787.06,1211.44 1787.65,1211.44 1788.24,1211.44 1788.82,1211.44 1789.41,1211.44 1790,1211.44 1790.58,1211.44 1791.17,1211.44 1791.76,1211.44 1792.34,1211.44 1792.93,1211.44 1793.52,1211.44 1794.1,1211.44 1794.69,1211.44 1795.27,1211.44 1795.86,1211.44 1796.45,1211.44 1797.03,1211.44 1797.62,1211.44 1798.21,1211.44 1798.79,1211.44 1799.38,1211.44 1799.97,1211.44 1800.55,1211.44 1801.14,1211.44 1801.73,1211.44 1802.31,1211.44 1802.9,1211.44 1803.48,1211.44 1804.07,1211.44 1804.66,1211.44 1805.24,1211.44 1805.83,1211.44 1806.42,1211.44 1807,1211.44 1807.59,1211.44 1808.18,1211.44 1808.76,1211.44 1809.35,1211.44 1809.94,1211.44 1810.52,1211.44 1811.11,1211.44 1811.69,1211.44 1812.28,1211.44 1812.87,1211.44 1813.45,1211.44 1814.04,1211.44 1814.63,1211.44 1815.21,1211.44 1815.8,1211.44 1816.39,1211.44 1816.97,1211.44 1817.56,1211.44 1818.14,1211.44 1818.73,1211.44 1819.32,1211.44 1819.9,1211.44 1820.49,1211.44 1821.08,1211.44 1821.66,1211.44 1822.25,1211.44 1822.84,1211.44 1823.42,1211.44 1824.01,1211.44 1824.6,1211.44 1825.18,1211.44 1825.77,1211.44 1826.35,1211.44 1826.94,1211.44 1827.53,1211.44 1828.11,1211.44 1828.7,1211.44 1829.29,1211.44 1829.87,1211.44 1830.46,1211.44 1831.05,1211.44 1831.63,1211.44 1832.22,1211.44 1832.81,1211.44 1833.39,1211.44 1833.98,1211.44 1834.56,1211.44 1835.15,1211.44 1835.74,1211.44 1836.32,1211.44 1836.91,1211.44 1837.5,1211.44 1838.08,1211.44 1838.67,1211.44 1839.26,1211.44 1839.84,1211.44 1840.43,1211.44 1841.01,1211.44 1841.6,1211.44 1842.19,1211.44 1842.77,1211.44 1843.36,1211.44 1843.95,1211.44 1844.53,1211.44 1845.12,1211.44 1845.71,1211.44 1846.29,1211.44 1846.88,1211.44 1847.47,1211.44 1848.05,1211.44 1848.64,1211.44 1849.22,1211.44 1849.81,1211.44 1850.4,1211.44 1850.98,1211.44 1851.57,1211.44 1852.16,1211.44 1852.74,1211.44 1853.33,1211.44 1853.92,1211.44 1854.5,1211.44 1855.09,1211.44 1855.68,1211.44 1856.26,1211.44 1856.85,1211.44 1857.43,1211.44 1858.02,1211.44 1858.61,1211.44 1859.19,1211.44 1859.78,1211.44 1860.37,1211.44 1860.95,1211.44 1861.54,1211.44 1862.13,1211.44 1862.71,1211.44 1863.3,1211.44 1863.88,1211.44 1864.47,1211.44 1865.06,1211.44 1865.64,1211.44 1866.23,1211.44 1866.82,1211.44 1867.4,1211.44 1867.99,1211.44 1868.58,1211.44 1869.16,1211.44 1869.75,1211.44 1870.34,1211.44 1870.92,1211.44 1871.51,1211.44 1872.09,1211.44 1872.68,1211.44 1873.27,1211.44 1873.85,1211.44 1874.44,1211.44 1875.03,1211.44 1875.61,1211.44 1876.2,1211.44 1876.79,1211.44 1877.37,1211.44 1877.96,1211.44 1878.55,1211.44 1879.13,1211.44 1879.72,1211.44 1880.3,1211.44 1880.89,1211.44 1881.48,1211.44 1882.06,1211.44 1882.65,1211.44 1883.24,1211.44 1883.82,1211.44 1884.41,1211.44 1885,1211.44 1885.58,1211.44 1886.17,1211.44 1886.76,1211.44 1887.34,1211.44 1887.93,1211.44 1888.51,1211.44 1889.1,1211.44 1889.69,1211.44 1890.27,1211.44 1890.86,1211.44 1891.45,1211.44 1892.03,1211.44 1892.62,1211.44 1893.21,1211.44 1893.79,1211.44 1894.38,1211.44 1894.96,1211.44 1895.55,1211.44 1896.14,1211.44 1896.72,1211.44 1897.31,1211.44 1897.9,1211.44 1898.48,1211.44 1899.07,1211.44 1899.66,1211.44 1900.24,1211.44 1900.83,1211.44 1901.42,1211.44 1902,1211.44 1902.59,1211.44 1903.17,1211.44 1903.76,1211.44 1904.35,1211.44 1904.93,1211.44 1905.52,1211.44 1906.11,1211.44 1906.69,1211.44 1907.28,1211.44 1907.87,1211.44 1908.45,1211.44 1909.04,1211.44 1909.63,1211.44 1910.21,1211.44 1910.8,1211.44 1911.38,1211.44 1911.97,1211.44 1912.56,1211.44 1913.14,1211.44 1913.73,1211.44 1914.32,1211.44 1914.9,1211.44 1915.49,1211.44 1916.08,1211.44 1916.66,1211.44 1917.25,1211.44 1917.83,1211.44 1918.42,1211.44 1919.01,1211.44 1919.59,1211.44 1920.18,1211.44 1920.77,1211.44 1921.35,1211.44 1921.94,1211.44 1922.53,1211.44 1923.11,1211.44 1923.7,1211.44 1924.29,1211.44 1924.87,1211.44 1925.46,1211.44 1926.04,1211.44 1926.63,1211.44 1927.22,1211.44 1927.8,1211.44 1928.39,1211.44 1928.98,1211.44 1929.56,1211.44 1930.15,1211.44 1930.74,1211.44 1931.32,1211.44 1931.91,1211.44 1932.5,1211.44 1933.08,1211.44 1933.67,1211.44 1934.25,1211.44 1934.84,1211.44 1935.43,1211.44 1936.01,1211.44 1936.6,1211.44 1937.19,1211.44 1937.77,1211.44 1938.36,1211.44 1938.95,1211.44 1939.53,1211.44 1940.12,1211.44 1940.71,1211.44 1941.29,1211.44 1941.88,1211.44 1942.46,1211.44 1943.05,1211.44 1943.64,1211.44 1944.22,1211.44 1944.81,1211.44 1945.4,1211.44 1945.98,1211.44 1946.57,1211.44 1947.16,1211.44 1947.74,1211.44 1948.33,1211.44 1948.91,1211.44 1949.5,1211.44 1950.09,1211.44 1950.67,1211.44 1951.26,1211.44 1951.85,1211.44 1952.43,1211.44 1953.02,1211.44 1953.61,1211.44 1954.19,1211.44 1954.78,1211.44 1955.37,1211.44 1955.95,1211.44 1956.54,1211.44 1957.12,1211.44 1957.71,1211.44 1958.3,1211.44 1958.88,1211.44 1959.47,1211.44 1960.06,1211.44 1960.64,1211.44 1961.23,1211.44 1961.82,1211.44 1962.4,1211.44 1962.99,1211.44 1963.58,1211.44 1964.16,1211.44 1964.75,1211.44 1965.33,1211.44 1965.92,1211.44 1966.51,1211.44 1967.09,1211.44 1967.68,1211.44 1968.27,1211.44 1968.85,1211.44 1969.44,1211.44 1970.03,1211.44 1970.61,1211.44 1971.2,1211.44 1971.78,1211.44 1972.37,1211.44 1972.96,1211.44 1973.54,1211.44 1974.13,1211.44 1974.72,1211.44 1975.3,1211.44 1975.89,1211.44 1976.48,1211.44 1977.06,1211.44 1977.65,1211.44 1978.24,1211.44 1978.82,1211.44 1979.41,1211.44 1979.99,1211.44 1980.58,1211.44 1981.17,1211.44 1981.75,1211.44 1982.34,1211.44 1982.93,1211.44 1983.51,1211.44 1984.1,1211.44 1984.69,1211.44 1985.27,1211.44 1985.86,1211.44 1986.45,1211.44 1987.03,1211.44 1987.62,1211.44 1988.2,1211.44 1988.79,1211.44 1989.38,1211.44 1989.96,1211.44 1990.55,1211.44 1991.14,1211.44 1991.72,1211.44 1992.31,1211.44 1992.9,1211.44 1993.48,1211.44 1994.07,1211.44 1994.65,1211.44 1995.24,1211.44 1995.83,1211.44 1996.41,1211.44 1997,1211.44 1997.59,1211.44 1998.17,1211.44 1998.76,1211.44 1999.35,1211.44 1999.93,1211.44 2000.52,1211.44 2001.11,1211.44 2001.69,1211.44 2002.28,1211.44 2002.86,1211.44 2003.45,1211.44 2004.04,1211.44 2004.62,1211.44 2005.21,1211.44 2005.8,1211.44 2006.38,1211.44 2006.97,1211.44 2007.56,1211.44 2008.14,1211.44 2008.73,1211.44 2009.32,1211.44 2009.9,1211.44 2010.49,1211.44 2011.07,1211.44 2011.66,1211.44 2012.25,1211.44 2012.83,1211.44 2013.42,1211.44 2014.01,1211.44 2014.59,1211.44 2015.18,1211.44 2015.77,1211.44 2016.35,1211.44 2016.94,1211.44 2017.53,1211.44 2018.11,1211.44 2018.7,1211.44 2019.28,1211.44 2019.87,1211.44 2020.46,1211.44 2021.04,1211.44 2021.63,1211.44 2022.22,1211.44 2022.8,1211.44 2023.39,1211.44 2023.98,1211.44 2024.56,1211.44 2025.15,1211.44 2025.73,1211.44 2026.32,1211.44 2026.91,1211.44 2027.49,1211.44 2028.08,1211.44 2028.67,1211.44 2029.25,1211.44 2029.84,1211.44 2030.43,1211.44 2031.01,1211.44 2031.6,1211.44 2032.19,1211.44 2032.77,1211.44 2033.36,1211.44 2033.94,1211.44 2034.53,1211.44 2035.12,1211.44 2035.7,1211.44 2036.29,1211.44 2036.88,1211.44 2037.46,1211.44 2038.05,1211.44 2038.64,1211.44 2039.22,1211.44 2039.81,1211.44 2040.4,1211.44 2040.98,1211.44 2041.57,1211.44 2042.15,1211.44 2042.74,1211.44 2043.33,1211.44 2043.91,1211.44 2044.5,1211.44 2045.09,1211.44 2045.67,1211.44 2046.26,1211.44 2046.85,1211.44 2047.43,1211.44 2048.02,1211.44 2048.6,1211.44 2049.19,1211.44 2049.78,1211.44 2050.36,1211.44 2050.95,1211.44 2051.54,1211.44 2052.12,1211.44 2052.71,1211.44 2053.3,1211.44 2053.88,1211.44 2054.47,1211.44 2055.06,1211.44 2055.64,1211.44 2056.23,1211.44 2056.81,1211.44 2057.4,1211.44 2057.99,1211.44 2058.57,1211.44 2059.16,1211.44 2059.75,1211.44 2060.33,1211.44 2060.92,1211.44 2061.51,1211.44 2062.09,1211.44 2062.68,1211.44 2063.27,1211.44 2063.85,1211.44 2064.44,1211.44 2065.02,1211.44 2065.61,1211.44 2066.2,1211.44 2066.78,1211.44 2067.37,1211.44 2067.96,1211.44 2068.54,1211.44 2069.13,1211.44 2069.72,1211.44 2070.3,1211.44 2070.89,1211.44 2071.48,1211.44 2072.06,1211.44 2072.65,1211.44 2073.23,1211.44 2073.82,1211.44 2074.41,1211.44 2074.99,1211.44 2075.58,1211.44 2076.17,1211.44 2076.75,1211.44 2077.34,1211.44 2077.93,1211.44 2078.51,1211.44 2079.1,1211.44 2079.68,1211.44 2080.27,1211.44 2080.86,1211.44 2081.44,1211.44 2082.03,1211.44 2082.62,1211.44 2083.2,1211.44 2083.79,1211.44 2084.38,1211.44 2084.96,1211.44 2085.55,1211.44 2086.14,1211.44 2086.72,1211.44 2087.31,1211.44 2087.89,1211.44 2088.48,1211.44 2089.07,1211.44 2089.65,1211.44 2090.24,1211.44 2090.83,1211.44 2091.41,1211.44 2092,1211.44 2092.59,1211.44 2093.17,1211.44 2093.76,1211.44 2094.35,1211.44 2094.93,1211.44 2095.52,1211.44 2096.1,1211.44 2096.69,1211.44 2097.28,1211.44 2097.86,1211.44 2098.45,1211.44 2099.04,1211.44 2099.62,1211.44 2100.21,1211.44 2100.8,1211.44 2101.38,1211.44 2101.97,1211.44 2102.55,1211.44 2103.14,1211.44 2103.73,1211.44 2104.31,1211.44 2104.9,1211.44 2105.49,1211.44 2106.07,1211.44 2106.66,1211.44 2107.25,1211.44 2107.83,1211.44 2108.42,1211.44 2109.01,1211.44 2109.59,1211.44 2110.18,1211.44 2110.76,1211.44 2111.35,1211.44 2111.94,1211.44 2112.52,1211.44 2113.11,1211.44 2113.7,1211.44 2114.28,1211.44 2114.87,1211.44 2115.46,1211.44 2116.04,1211.44 2116.63,1211.44 2117.22,1211.44 2117.8,1211.44 2118.39,1211.44 2118.97,1211.44 2119.56,1211.44 2120.15,1211.44 2120.73,1211.44 2121.32,1211.44 2121.91,1211.44 2122.49,1211.44 2123.08,1211.44 2123.67,1211.44 2124.25,1211.44 2124.84,1211.44 2125.42,1211.44 2126.01,1211.44 2126.6,1211.44 2127.18,1211.44 2127.77,1211.44 2128.36,1211.44 2128.94,1211.44 2129.53,1211.44 2130.12,1211.44 2130.7,1211.44 2131.29,1211.44 2131.88,1211.44 2132.46,1211.44 2133.05,1211.44 2133.63,1211.44 2134.22,1211.44 2134.81,1211.44 2135.39,1211.44 2135.98,1211.44 2136.57,1211.44 2137.15,1211.44 2137.74,1211.44 2138.33,1211.44 2138.91,1211.44 2139.5,1211.44 2140.09,1211.44 2140.67,1211.44 2141.26,1211.44 2141.84,1211.44 2142.43,1211.44 2143.02,1211.44 2143.6,1211.44 2144.19,1211.44 2144.78,1211.44 2145.36,1211.44 2145.95,1211.44 2146.54,1211.44 2147.12,1211.44 2147.71,1211.44 2148.3,1211.44 2148.88,1211.44 2149.47,1211.44 2150.05,1211.44 2150.64,1211.44 2151.23,1211.44 2151.81,1211.44 2152.4,1211.44 2152.99,1211.44 2153.57,1211.44 2154.16,1211.44 2154.75,1211.44 2155.33,1211.44 2155.92,1211.44 2156.5,1211.44 2157.09,1211.44 2157.68,1211.44 2158.26,1211.44 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.26,1193.78 1399.57,899.083 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.51 985.439,1193.78 2158.26,1193.78 2158.26,1228.51 985.439,1228.51 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip903\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip903)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-9904.65 169.384,-10325.1 169.943,-10685.5 170.503,-11013.1 171.062,-11298.5 171.621,-10930.3 172.18,-10612.1 172.74,-10828.1 173.299,-10534.1 173.858,-10255.6 174.417,-10398.9 174.977,-10522.2 175.536,-10619.1 176.095,-10686.2 176.655,-10407.8 177.214,-10154.3 177.773,-10196.7 178.332,-9426.91 178.892,-9454.02 179.451,-9460.18 180.01,-9228.6 180.569,-9000.13 181.129,-8980.36 181.688,-8950.51 182.247,-8887.68 182.806,-8831.72 183.366,-8612.53 183.925,-8536.97 184.484,-8450.57 185.043,-8220.27 185.603,-7878.03 186.162,-7552.64 186.721,-7487.16 187.28,-7296.35 187.84,-7107.6 188.399,-6917.69 188.958,-6824.03 189.517,-6636.26 190.077,-6531.88 190.636,-6358.13 191.195,-6250.26 191.754,-5924.14 192.314,-5686.03 192.873,-5593.45 193.432,-5365.92 193.991,-5218.14 194.551,-5070.63 195.11,-4919.81 195.669,-4721.33 196.228,-4525.2 196.788,-4341.1 197.347,-4171.66 197.906,-4001.98 198.465,-3879.61 199.025,-3814.58 199.584,-3694.89 200.143,-3627.65 200.702,-3508.12 201.262,-3432.54 201.821,-3231.8 202.38,-3158.87 202.939,-3092.38 203.499,-3019.77 204.058,-2909.03 204.617,-2831.69 205.176,-2687.84 205.736,-2582.16 206.295,-2513.38 206.854,-2375.49 207.413,-2279.74 207.973,-2151.86 208.532,-1996.04 209.091,-1941.95 209.65,-1824.1 210.21,-1739.22 210.769,-1625.41 211.328,-1543.96 211.887,-1410.67 212.447,-1331.08 213.006,-1258.3 213.565,-1132.91 214.124,-1039.07 214.684,-1001.48 215.243,-940.126 215.802,-850.556 216.361,-810.762 216.921,-748.511 217.48,-714.689 218.039,-654.768 218.598,-649.689 219.158,-564.189 219.717,-482.791 220.276,-428.737 220.835,-352.593 221.395,-304.392 221.954,-274.251 222.513,-206.039 223.072,-180.067 223.632,-135.327 224.191,-113.674 224.75,-68.5464 225.309,-47.3851 225.869,16.1552 226.428,101.469 226.987,97.044 227.546,178.408 228.106,212.109 228.665,243.908 229.224,278.057 229.783,334.641 230.343,366.545 230.902,418.769 231.461,484.981 232.02,511.502 232.58,515.062 233.139,500.693 233.698,525.512 234.257,533.013 234.817,542.904 235.376,550.961 235.935,559.994 236.494,605.134 237.054,629.144 237.613,653.317 238.172,711.696 238.731,730.36 239.291,805.596 239.85,820.051 240.409,781.826 240.968,851.121 241.528,847.74 242.087,878.336 242.646,856.092 243.205,857.394 243.765,875.794 244.324,872.258 244.883,852.597 245.442,851.503 246.002,886.275 246.561,883.15 247.12,898.182 247.679,981.759 248.239,1007.75 248.798,1019.95 249.357,1013.42 249.916,988.382 250.476,1019.63 251.035,1033.88 251.594,1065.4 252.153,1071.92 252.713,1148.9 253.272,1150.81 253.831,1174.31 254.39,1176.14 254.95,1142.56 255.509,1130.73 256.068,1149.51 256.627,1154.34 257.187,1140.51 257.746,1125.57 258.305,1165.09 258.864,1167.06 259.424,1169.49 259.983,1169.43 260.542,1172.53 261.101,1140.8 261.661,1127.78 262.22,1149 262.779,1119.27 263.338,1143.37 263.898,1133.31 264.457,1106.61 265.016,1127.63 265.575,1152.6 266.135,1140.24 266.694,1128.63 267.253,1153.8 267.812,1140.35 268.372,1109.29 268.931,1099.7 269.49,1072.94 270.049,1130.05 270.609,1103.58 271.168,1110.92 271.727,1104.64 272.286,1108.8 272.846,1101.1 273.405,1071.57 273.964,1092.98 274.523,1101.22 275.083,1092.45 275.642,1065.46 276.201,1057.74 276.76,1070.03 277.32,1065.85 277.879,1043.96 278.438,1054.7 278.997,1044.91 279.557,1023.68 280.116,1003.22 280.675,963.957 281.234,1011.55 281.794,1006.95 282.353,999.309 282.912,993.193 283.471,1008.24 284.031,1003.38 284.59,1000.17 285.149,995.015 285.708,1026.46 286.268,986.967 286.827,1035.55 287.386,1033.36 287.945,1058.72 288.505,1067.49 289.064,1073.46 289.623,1076.59 290.182,1084.78 290.742,1072.5 291.301,1083.58 291.86,1106.08 292.419,1098.31 292.979,1089.25 293.538,1080.2 294.097,1104.41 294.656,1064.81 295.216,1072.6 295.775,1113.67 296.334,1066.71 296.893,1055.97 297.453,996.896 298.012,971.799 298.571,966.604 299.13,926.416 299.69,906.777 300.249,904.154 300.808,922.299 301.368,952.949 301.927,903.164 302.486,871.018 303.045,876.158 303.605,878.693 304.164,879.197 304.723,881.459 305.282,883.231 305.842,869.802 306.401,875.63 306.96,908.825 307.519,957.073 308.079,919.447 308.638,950.179 309.197,1011.4 309.756,972.214 310.316,969.224 310.875,963.328 311.434,960.452 311.993,957.007 312.553,966.124 313.112,946.192 313.671,928.713 314.23,909.777 314.79,990.67 315.349,1001.04 315.908,981.297 316.467,928.38 317.027,944.777 317.586,940.261 318.145,951.349 318.704,948.442 319.264,962.007 319.823,975.426 320.382,968.959 320.941,980.069 321.501,1005.35 322.06,998.647 322.619,992.903 323.178,968.837 323.738,977.361 324.297,919.18 324.856,913.247 325.415,895.375 325.975,896.818 326.534,859.963 327.093,858.204 327.652,874.488 328.212,890.086 328.771,905.348 329.33,966.381 329.889,958.043 330.449,950.329 331.008,927.089 331.567,921.174 332.126,951.515 332.686,947.259 333.245,928.364 333.804,922.552 334.363,897.726 334.923,895.428 335.482,858.711 336.041,858.986 336.6,841.513 337.16,839.108 337.719,838.901 338.278,840.257 338.837,841.809 339.397,861.756 339.956,876.823 340.515,923.025 341.074,935.122 341.634,945.992 342.193,909.351 342.752,922.438 343.311,919.557 343.871,914.551 344.43,909.618 344.989,937.539 345.548,948.508 346.108,944.773 346.667,987.68 347.226,978.048 347.785,984.608 348.345,960.999 348.904,938.772 349.463,950.168 350.022,958.873 350.582,929.462 351.141,943.189 351.7,937.698 352.259,932.412 352.819,912.636 353.378,924.872 353.937,931.822 354.496,943.562 355.056,952.812 355.615,961.9 356.174,1000.91 356.733,960.587 357.293,950.271 357.852,942.929 358.411,935.156 358.97,913.895 359.53,924.718 360.089,918.88 360.648,946.118 361.207,940.34 361.767,918.579 362.326,895.605 362.885,857.266 363.444,885.444 364.004,897.526 364.563,908.29 365.122,905.128 365.681,917.229 366.241,945.761 366.8,940.329 367.359,918.977 367.918,913.879 368.478,889.175 369.037,915.862 369.596,909.028 370.155,920.687 370.715,914.856 371.274,861.745 371.833,858.77 372.392,852.107 372.952,851.013 373.511,836.595 374.07,848.896 374.629,816.199 375.189,781.732 375.748,767.924 376.307,756.901 376.866,761.02 377.426,763.326 377.985,780.333 378.544,780.136 379.103,799.579 379.663,814.749 380.222,826.891 380.781,824.285 381.34,807.828 381.9,811.389 382.459,762.276 383.018,810.503 383.577,806.059 384.137,808.011 384.696,791.633 385.255,805.76 385.814,804.13 386.374,787.737 386.933,773.705 387.492,776.363 388.051,780.111 388.611,810.483 389.17,857.524 389.729,835.34 390.288,796.695 390.848,793.799 391.407,842.577 391.966,858.432 392.525,839.957 393.085,869.41 393.644,865.671 394.203,894.953 394.762,908.2 395.322,903.567 395.881,882.218 396.44,891.665 396.999,917.559 397.559,942.042 398.118,947.765 398.677,939.996 399.236,944.015 399.796,951.913 400.355,908.624 400.914,903.169 401.473,897.222 402.033,891.913 402.592,884.512 403.151,894.499 403.71,904.623 404.27,899.298 404.829,871.95 405.388,881.569 405.947,857.021 406.507,868.609 407.066,862.841 407.625,825.414 408.184,822.576 408.744,819.939 409.303,800.262 409.862,812.696 410.421,810.532 410.981,824.556 411.54,856.38 412.099,852.578 412.658,849.311 413.218,845.604 413.777,810.643 414.336,773.997 414.895,705.461 415.455,708.805 416.014,748.852 416.573,750.099 417.132,748.303 417.692,749.593 418.251,733.023 418.81,685.859 419.369,673.687 419.929,695.628 420.488,746.635 421.047,700.289 421.606,719.433 422.166,720.927 422.725,738.431 423.284,760.292 423.843,746.206 424.403,748.203 424.962,746.75 425.521,763.508 426.08,792.65 426.64,774.092 427.199,756.616 427.758,741.745 428.318,758.185 428.877,790.273 429.436,771.708 429.995,786.753 430.555,801.491 431.114,797.11 431.673,812.265 432.232,780.309 432.792,781.899 433.351,779.93 433.91,778.19 434.469,773.208 435.029,757.633 435.588,790.848 436.147,790.118 436.706,834.167 437.266,828.605 437.825,824.416 438.384,832.645 438.943,814.909 439.503,796.998 440.062,779.223 440.621,779.56 441.18,779.961 441.74,794.272 442.299,841.888 442.858,835.014 443.417,831.79 443.977,824.587 444.536,824.208 445.095,819.399 445.654,832.745 446.214,830.393 446.773,891.068 447.332,915.019 447.891,893.704 448.451,905.274 449.01,901.978 449.569,898.046 450.128,873.397 450.688,852.027 451.247,846.546 451.806,842.252 452.365,841.702 452.925,819.146 453.484,817.057 454.043,798.13 454.602,795.98 455.162,795.277 455.721,808.369 456.28,806.716 456.839,804.06 457.399,749.705 457.958,753.169 458.517,754.408 459.076,757.358 459.636,741.435 460.195,741.309 460.754,710.041 461.313,728.049 461.873,729.479 462.432,747.999 462.991,717.215 463.55,669.11 464.11,659.645 464.669,681.316 465.228,697.814 465.787,735.525 466.347,703.873 466.906,723.068 467.465,722.574 468.024,726.284 468.584,726.279 469.143,744.156 469.702,731.133 470.261,733.435 470.821,733.043 471.38,718.583 471.939,735.608 472.498,737.252 473.058,738.684 473.617,737.79 474.176,752.931 474.735,718.793 475.295,752.792 475.854,784.257 476.413,753.309 476.972,771.582 477.532,755.401 478.091,786.599 478.65,787.974 479.209,785.2 479.769,797.056 480.328,775.983 480.887,770.71 481.446,768.973 482.006,766.356 482.565,762.411 483.124,710.511 483.683,701.362 484.243,718.453 484.802,720.584 485.361,802.812 485.92,848.722 486.48,875.774 487.039,852.655 487.598,829.349 488.157,809.234 488.717,820.14 489.276,829.376 489.835,803.918 490.394,783.443 490.954,777.457 491.513,791.361 492.072,757.534 492.631,724.955 493.191,677.252 493.75,679.882 494.309,683.841 494.868,719.381 495.428,719.302 495.987,706.73 496.546,725.78 497.105,730.899 497.665,731.359 498.224,714.723 498.783,698.302 499.342,718.08 499.902,733.312 500.461,731.934 501.02,781.651 501.579,777.401 502.139,778.404 502.698,776.561 503.257,791.476 503.816,787.265 504.376,784.385 504.935,782.441 505.494,781.431 506.053,795.558 506.613,776.279 507.172,758.135 507.731,789.042 508.29,835.923 508.85,832.785 509.409,857.871 509.968,850.263 510.527,856.431 511.087,864.278 511.646,826.818 512.205,805.341 512.764,802.342 513.324,778.619 513.883,741.196 514.442,756.693 515.001,788.641 515.561,785.436 516.12,763.237 516.679,759.806 517.238,757.158 517.798,754.483 518.357,737.604 518.916,739.381 519.475,734.348 520.035,730.234 520.594,698.843 521.153,683.878 521.712,671.373 522.272,658.747 522.831,646.625 523.39,620.146 523.949,628.22 524.509,616.058 525.068,618.848 525.627,606.037 526.186,612.675 526.746,649.187 527.305,671.844 527.864,662.292 528.423,650.884 528.983,639.504 529.542,642.713 530.101,665.981 530.66,651.129 531.22,655.321 531.779,676.819 532.338,696.595 532.897,697.858 533.457,681.047 534.016,685.992 534.575,707.403 535.134,740.939 535.694,724.648 536.253,742.186 536.812,742.383 537.371,737.063 537.931,752.533 538.49,750.27 539.049,732.906 539.608,716.622 540.168,763.396 540.727,806.727 541.286,835.769 541.845,828.858 542.405,837.315 542.964,832.858 543.523,875.68 544.082,866.922 544.642,859.231 545.201,836.102 545.76,848.637 546.319,842.384 546.879,835.447 547.438,846.255 547.997,825.012 548.556,836.776 549.116,832.063 549.675,824.857 550.234,833.29 550.793,843.664 551.353,850.85 551.912,827.83 552.471,834.839 553.031,809.127 553.59,824.982 554.149,786.845 554.708,799.054 555.268,774.018 555.827,769.879 556.386,735.489 556.945,753.209 557.505,702.121 558.064,735.678 558.623,720.42 559.182,704.775 559.742,688.103 560.301,709.725 560.86,758.178 561.419,755.678 561.979,751.478 562.538,763.584 563.097,794.106 563.656,754.935 564.216,787.728 564.775,769.296 565.334,736.798 565.893,752.002 566.453,766.464 567.012,763.233 567.571,761.601 568.13,744.472 568.69,742.671 569.249,740.031 569.808,753.41 570.367,748.505 570.927,746.87 571.486,727.901 572.045,742.412 572.604,788.265 573.164,782.399 573.723,749.926 574.282,749.518 574.841,727.175 575.401,741.486 575.96,722.407 576.519,768.064 577.078,777.488 577.638,792.687 578.197,788.719 578.756,782.964 579.315,747.497 579.875,761.41 580.434,756.568 580.993,754.234 581.552,752.386 582.112,735.225 582.671,733.681 583.23,734.464 583.789,728.674 584.349,740.368 584.908,753.478 585.467,766.979 586.026,746.008 586.586,730.282 587.145,742.022 587.704,755.463 588.263,766.301 588.823,794.485 589.382,774.198 589.941,774.929 590.5,754.132 591.06,767.008 591.619,763.29 592.178,761.54 592.737,805.332 593.297,767.621 593.856,751.02 594.415,780.61 594.974,781.43 595.534,791.975 596.093,772.361 596.652,754.382 597.211,752.837 597.771,782.693 598.33,716.389 598.889,681.337 599.448,669.149 600.008,685.329 600.567,716.329 601.126,731.384 601.685,728.964 602.245,711.221 602.804,714.06 603.363,698.714 603.922,695.266 604.482,716.355 605.041,715.743 605.6,701.387 606.159,733.843 606.719,745.5 607.278,740.777 607.837,706.715 608.396,706.283 608.956,720.672 609.515,717.946 610.074,714.7 610.633,731.061 611.193,729.02 611.752,724.751 612.311,725.318 612.87,709.863 613.43,693.321 613.989,722.525 614.548,737.741 615.107,748.477 615.667,746.544 616.226,692.682 616.785,678.615 617.344,677.777 617.904,681.48 618.463,682.052 619.022,682.217 619.581,701.059 620.141,670.173 620.7,686.942 621.259,673.701 621.818,660.896 622.378,614.363 622.937,603.772 623.496,606.863 624.055,613.312 624.615,616.979 625.174,637.373 625.733,640.142 626.292,628.982 626.852,647.737 627.411,666.627 627.97,673.102 628.529,658.002 629.089,660.719 629.648,660.892 630.207,680.712 630.766,665.199 631.326,629.981 631.885,633.641 632.444,652.579 633.003,672.562 633.563,672.571 634.122,674.436 634.681,659.683 635.24,629.037 635.8,635.777 636.359,625.535 636.918,646.978 637.477,650.106 638.037,649.64 638.596,620.385 639.155,624.487 639.714,668.46 640.274,638.188 640.833,626.859 641.392,648.115 641.951,636.305 642.511,639.903 643.07,678.507 643.629,694.505 644.188,678.229 644.748,645.129 645.307,630.77 645.866,632.946 646.425,669.514 646.985,639.764 647.544,642.87 648.103,645.341 648.662,665.795 649.222,667.984 649.781,689.103 650.34,676.203 650.899,678.052 651.459,695.812 652.018,699.309 652.577,683.732 653.136,684.729 653.696,702.086 654.255,717.738 654.814,702.033 655.373,703.73 655.933,719.363 656.492,669.265 657.051,689.204 657.61,737.306 658.17,689.431 658.729,677.28 659.288,664.631 659.847,647.823 660.407,630.891 660.966,629.526 661.525,667.257 662.084,654.881 662.644,674.875 663.203,708.381 663.762,755.986 664.321,754.206 664.881,764.785 665.44,765.136 665.999,741.362 666.558,722.89 667.118,753.114 667.677,769.011 668.236,728.352 668.795,708.441 669.355,720.088 669.914,734.993 670.473,729.532 671.032,692.895 671.592,698.045 672.151,744.522 672.71,712.864 673.269,661.764 673.829,697.355 674.388,696.122 674.947,713.619 675.506,685.638 676.066,700.201 676.625,666.532 677.184,667.251 677.743,669.371 678.303,652.121 678.862,672.812 679.421,677.651 679.981,694.367 680.54,665.9 681.099,684.489 681.658,684.373 682.218,701.368 682.777,700.726 683.336,714.551 683.895,729.773 684.455,762.913 685.014,739.589 685.573,738.416 686.132,720.648 686.692,747.045 687.251,723.872 687.81,740.306 688.369,768.165 688.929,768.865 689.488,781.755 690.047,766.099 690.606,778.984 691.166,789.761 691.725,769.177 692.284,768.127 692.843,779.859 693.403,794.535 693.962,773.086 694.521,753.351 695.08,731.758 695.64,712.911 696.199,709.335 696.758,692.213 697.317,694.207 697.877,675.007 698.436,660.379 698.995,613.429 699.554,637.273 700.114,634.924 700.673,667.348 701.232,616.52 701.791,652.357 702.351,652.59 702.91,626.115 703.469,643.974 704.028,632.249 704.588,638.55 705.147,641.425 705.706,647.101 706.265,617.674 706.825,641.293 707.384,639.741 707.943,660.011 708.502,677.955 709.062,643.245 709.621,661.726 710.18,698.404 710.739,712.963 711.299,711.71 711.858,727.543 712.417,724.771 712.976,722.738 713.536,739.802 714.095,726.588 714.654,705.161 715.213,702.461 715.773,719.146 716.332,703.789 716.891,702.67 717.45,671.878 718.01,735.397 718.569,730.236 719.128,711.254 719.687,676.778 720.247,663.183 720.806,693.795 721.365,704.885 721.924,721.934 722.484,703.652 723.043,704.351 723.602,703.242 724.161,703.14 724.721,737.658 725.28,735.586 725.839,684.315 726.398,701.266 726.958,689.302 727.517,708.717 728.076,672.007 728.635,656.861 729.195,689.724 729.754,676.646 730.313,677.105 730.872,680.433 731.432,649.373 731.991,653.489 732.55,656.717 733.109,658.661 733.669,677.131 734.228,676.448 734.787,692.17 735.346,692.014 735.906,723.889 736.465,738 737.024,734.014 737.583,759.809 738.143,743.402 738.702,758.539 739.261,691.817 739.82,672.809 740.38,657.458 740.939,640.506 741.498,677.459 742.057,681.907 742.617,683.719 743.176,666.528 743.735,670.719 744.294,657.596 744.854,706.147 745.413,703.687 745.972,717.06 746.531,746.24 747.091,760.545 747.65,758.301 748.209,735.957 748.768,733.649 749.328,732.661 749.887,730.349 750.446,711.676 751.005,724.824 751.565,767.917 752.124,796.324 752.683,774.561 753.242,754.976 753.802,773.169 754.361,752.286 754.92,765.331 755.479,731.561 756.039,682.036 756.598,680.708 757.157,665.323 757.716,670.735 758.276,686.312 758.835,668.685 759.394,637.707 759.953,658.283 760.513,628.313 761.072,627.378 761.631,635.497 762.19,620.772 762.75,623.395 763.309,578.766 763.868,583.695 764.427,590.387 764.987,607.858 765.546,612.019 766.105,601.189 766.664,591.741 767.224,615.632 767.783,652.157 768.342,656.181 768.901,640.031 769.461,624.186 770.02,610.994 770.579,667.536 771.138,670 771.698,651.967 772.257,636.17 772.816,602.607 773.375,608.718 773.935,584.229 774.494,622.217 775.053,608.397 775.612,595.662 776.172,588.187 776.731,610.555 777.29,649.158 777.849,668.509 778.409,687.463 778.968,689.184 779.527,690.129 780.086,707.742 780.646,722.354 781.205,708.079 781.764,710.445 782.323,738.955 782.883,752.985 783.442,735.088 784.001,700.529 784.56,701.567 785.12,684.977 785.679,684.991 786.238,670.057 786.797,703.718 787.357,688.367 787.916,723.537 788.475,752.624 789.034,736.397 789.594,735.326 790.153,716.154 790.712,734.201 791.271,700.195 791.831,711.739 792.39,697.962 792.949,730.332 793.508,712.217 794.068,692.921 794.627,660.909 795.186,679.025 795.745,663.45 796.305,663.846 796.864,669.763 797.423,671.594 797.982,644.805 798.542,648.235 799.101,651.103 799.66,622.168 800.219,641.757 800.779,631.019 801.338,651.012 801.897,654.527 802.456,587.736 803.016,546.056 803.575,519.476 804.134,529.638 804.693,523.475 805.253,568.101 805.812,574.072 806.371,598.602 806.931,616.906 807.49,626.62 808.049,693.07 808.608,678.281 809.168,677.739 809.727,694.443 810.286,682.81 810.845,735.039 811.405,749.458 811.964,744.401 812.523,727.938 813.082,695.082 813.642,679.47 814.201,697.601 814.76,725.93 815.319,707.11 815.879,703.595 816.438,700.229 816.997,665.236 817.556,665.242 818.116,636.261 818.675,642.335 819.234,627.503 819.793,660.376 820.353,678.218 820.912,680.864 821.471,691.134 822.03,646.727 822.59,648.781 823.149,667.203 823.708,669.656 824.267,721.55 824.827,752.676 825.386,747.179 825.945,764.264 826.504,746.712 827.064,778.931 827.623,838.964 828.182,800.715 828.741,794.254 829.301,790.032 829.86,801.571 830.419,796.635 830.978,789.843 831.538,782.623 832.097,776.129 832.656,788.466 833.215,794.429 833.775,775.661 834.334,752.668 834.893,779.319 835.452,790.776 836.012,771.215 836.571,748.999 837.13,760.601 837.689,801.644 838.249,795.23 838.808,805.503 839.367,796.957 839.926,789.654 840.486,798.181 841.045,788.892 841.604,782.441 842.163,743.212 842.723,740.443 843.282,755.172 843.841,737.267 844.4,735.234 844.96,742.4 845.519,741.135 846.078,737.219 846.637,731.835 847.197,745.73 847.756,740.671 848.315,768.861 848.874,751.269 849.434,734.632 849.993,732.879 850.552,728.762 851.111,726.479 851.671,740.597 852.23,736.75 852.789,717.457 853.348,715 853.908,776.57 854.467,770.826 855.026,747.231 855.585,725.146 856.145,689.647 856.704,689.157 857.263,721.898 857.822,689.22 858.382,719.691 858.941,683.601 859.5,681.895 860.059,683.817 860.619,668.805 861.178,701.494 861.737,684.751 862.296,686.155 862.856,656.289 863.415,690.208 863.974,705.872 864.533,722.258 865.093,734.785 865.652,715.249 866.211,694.106 866.77,694.401 867.33,694.271 867.889,692.195 868.448,703.699 869.007,732.421 869.567,713.665 870.126,726.82 870.685,708.902 871.244,675.194 871.804,674.6 872.363,693.763 872.922,712.247 873.481,756.156 874.041,751.484 874.6,731.489 875.159,712.514 875.718,709.458 876.278,675.661 876.837,643.16 877.396,659.341 877.955,663.439 878.515,630.639 879.074,635.659 879.633,618.837 880.192,606.611 880.752,610.351 881.311,578.056 881.87,599.126 882.429,653.531 882.989,688.072 883.548,705.675 884.107,704.57 884.666,703.595 885.226,702.468 885.785,699.683 886.344,733.162 886.903,680.641 887.463,662.426 888.022,682.685 888.581,683.603 889.14,702.82 889.7,686.169 890.259,684.968 890.818,699.004 891.377,685.393 891.937,669.819 892.496,703.218 893.055,671.73 893.614,671.578 894.174,687.386 894.733,673.073 895.292,659.693 895.851,675.035 896.411,707.077 896.97,709.119 897.529,708.888 898.088,727.755 898.648,726.711 899.207,740.126 899.766,704.038 900.325,688.021 900.885,684.338 901.444,652.265 902.003,654.301 902.562,687.565 903.122,705.201 903.681,717.506 904.24,747.303 904.799,741.577 905.359,783.82 905.918,765.013 906.477,759.316 907.036,740.78 907.596,709.006 908.155,738.914 908.714,722.065 909.273,719.26 909.833,719.048 910.392,703.67 910.951,704.78 911.51,684.958 912.07,700.65 912.629,682.47 913.188,667.222 913.747,682.355 914.307,686.839 914.866,685.457 915.425,664.717 915.984,665.219 916.544,697.37 917.103,714.714 917.662,717.398 918.221,732.558 918.781,745.116 919.34,710.387 919.899,630.838 920.458,616.187 921.018,620.719 921.577,639.573 922.136,641.13 922.695,642.534 923.255,650.048 923.814,651.143 924.373,637.652 924.932,642.32 925.492,661.384 926.051,663.971 926.61,632.74 927.169,589.094 927.729,615.468 928.288,602.103 928.847,598.715 929.406,607.708 929.966,613.416 930.525,599.451 931.084,590.941 931.644,594.517 932.203,603.463 932.762,579.071 933.321,615.994 933.881,615.697 934.44,651.595 934.999,670.046 935.558,720.42 936.118,750.413 936.677,745.377 937.236,709.006 937.795,706.35 938.355,703.105 938.914,719.006 939.473,697.866 940.032,682.002 940.592,668.802 941.151,668.165 941.71,654.632 942.269,672.063 942.829,671.206 943.388,668.563 943.947,670.631 944.506,673.693 945.066,708.723 945.625,722.076 946.184,735.302 946.743,731.592 947.303,710.509 947.862,725.015 948.421,740.477 948.98,770.646 949.54,764.005 950.099,806.861 950.658,754.51 951.217,720.105 951.777,731.698 952.336,778.563 952.895,726.921 953.454,741.698 954.014,754.282 954.573,720.443 955.132,701.782 955.691,734.175 956.251,701.56 956.81,699.177 957.369,650.921 957.928,606.137 958.488,675.08 959.047,656.835 959.606,675.437 960.165,674.694 960.725,675.451 961.284,664.463 961.843,649.893 962.402,685.91 962.962,685.994 963.521,653.274 964.08,673.457 964.639,708.378 965.199,705.385 965.758,689.337 966.317,658.664 966.876,677.85 967.436,647.15 967.995,667.046 968.554,698.471 969.113,696.991 969.673,680.091 970.232,647.344 970.791,647.548 971.35,668.8 971.91,664.419 972.469,663.787 973.028,697.69 973.587,715.287 974.147,698.045 974.706,696.359 975.265,677.533 975.824,692.686 976.384,691.574 976.943,673.832 977.502,658.699 978.061,694.81 978.621,744.513 979.18,725.039 979.739,721.373 980.298,704.263 980.858,651.497 981.417,665.94 981.976,652.606 982.535,688.646 983.095,638.381 983.654,673.282 984.213,690.41 984.772,674.957 985.332,658.833 985.891,659.646 986.45,663.266 987.009,699.944 987.569,732.445 988.128,725.513 988.687,726.227 989.246,740.613 989.806,752.371 990.365,780.351 990.924,775.855 991.483,771.753 992.043,794.429 992.602,788.598 993.161,731.523 993.72,742.335 994.28,738.829 994.839,705.504 995.398,672.722 995.957,684.653 996.517,641.241 997.076,660.912 997.635,600.177 998.194,589.023 998.754,594.1 999.313,662.198 999.872,664.233 1000.43,618.387 1000.99,623.709 1001.55,643.402 1002.11,594.42 1002.67,598.075 1003.23,619.769 1003.79,623.22 1004.35,625.365 1004.91,630.272 1005.46,671.195 1006.02,660.429 1006.58,660.914 1007.14,679.951 1007.7,665.339 1008.26,632.902 1008.82,637.262 1009.38,658.58 1009.94,644.8 1010.5,600.634 1011.06,639.513 1011.62,629.002 1012.18,631.178 1012.73,650.627 1013.29,685.708 1013.85,686.046 1014.41,683.079 1014.97,764.229 1015.53,742.727 1016.09,742.842 1016.65,754.396 1017.21,781.382 1017.77,792.871 1018.33,816.521 1018.89,791.321 1019.45,771.634 1020.01,786.051 1020.56,781.86 1021.12,762.164 1021.68,774.103 1022.24,764.582 1022.8,776.252 1023.36,770.5 1023.92,750.448 1024.48,760.636 1025.04,753.219 1025.6,749.711 1026.16,779.324 1026.72,771.924 1027.28,785.467 1027.83,763.651 1028.39,760.898 1028.95,743.419 1029.51,728.943 1030.07,662.895 1030.63,664.947 1031.19,651.198 1031.75,667.17 1032.31,666.351 1032.87,668.815 1033.43,669.088 1033.99,653.806 1034.55,670.832 1035.1,655.381 1035.66,671.098 1036.22,670.297 1036.78,703.944 1037.34,659.914 1037.9,645.318 1038.46,599.994 1039.02,652.422 1039.58,652.309 1040.14,653.573 1040.7,636.765 1041.26,606.182 1041.82,591.887 1042.38,608.825 1042.93,628.712 1043.49,585.007 1044.05,621.128 1044.61,624.362 1045.17,659.592 1045.73,643.195 1046.29,646.733 1046.85,646.618 1047.41,648.213 1047.97,665.465 1048.53,649.816 1049.09,669.967 1049.65,653.27 1050.2,655.715 1050.76,674.118 1051.32,676.11 1051.88,714.587 1052.44,729.72 1053,741.304 1053.56,703.249 1054.12,682.424 1054.68,734.831 1055.24,733.407 1055.8,745.409 1056.36,725.316 1056.92,675.216 1057.48,674.27 1058.03,674.861 1058.59,694.985 1059.15,693.758 1059.71,692.517 1060.27,706.11 1060.83,689.457 1061.39,692.818 1061.95,659.632 1062.51,676.583 1063.07,644.197 1063.63,659.32 1064.19,660.497 1064.75,692.831 1065.3,677.462 1065.86,660.346 1066.42,675.768 1066.98,694.35 1067.54,659.47 1068.1,662.345 1068.66,662.972 1069.22,680.081 1069.78,630.64 1070.34,636.757 1070.9,656.936 1071.46,645.685 1072.02,665.004 1072.57,667.941 1073.13,683.445 1073.69,684.187 1074.25,716.412 1074.81,731.808 1075.37,748.122 1075.93,725.644 1076.49,676.794 1077.05,678.898 1077.61,662.065 1078.17,644.692 1078.73,657.517 1079.29,623.612 1079.85,639.329 1080.4,671.12 1080.96,668.468 1081.52,734.339 1082.08,716.993 1082.64,729.316 1083.2,724.413 1083.76,733.097 1084.32,762.167 1084.88,711.416 1085.44,695.544 1086,696.554 1086.56,712.181 1087.12,711.724 1087.67,724.807 1088.23,725.898 1088.79,705.049 1089.35,691.09 1089.91,703.556 1090.47,751.147 1091.03,748.828 1091.59,745.895 1092.15,724.911 1092.71,707.273 1093.27,723.631 1093.83,723.09 1094.39,752.724 1094.94,772.792 1095.5,789.01 1096.06,753.508 1096.62,764.385 1097.18,775.986 1097.74,754.103 1098.3,736.553 1098.86,715.357 1099.42,716.163 1099.98,701.636 1100.54,683.842 1101.1,683.406 1101.66,684.293 1102.22,716.847 1102.77,730.869 1103.33,759.477 1103.89,739.008 1104.45,751.621 1105.01,731.822 1105.57,741.082 1106.13,720.579 1106.69,717.233 1107.25,700.828 1107.81,699.388 1108.37,711.072 1108.93,725.559 1109.49,705.639 1110.04,768.477 1110.6,798.197 1111.16,759.212 1111.72,755.192 1112.28,702.035 1112.84,684.597 1113.4,669.167 1113.96,669.323 1114.52,672.244 1115.08,642.213 1115.64,630.862 1116.2,619.427 1116.76,656.714 1117.31,659.543 1117.87,678.419 1118.43,714.974 1118.99,715.88 1119.55,711.816 1120.11,674.04 1120.67,690.001 1121.23,673.777 1121.79,642.259 1122.35,642.499 1122.91,644.174 1123.47,648.49 1124.03,649.693 1124.59,651.643 1125.14,652.969 1125.7,653.051 1126.26,638.698 1126.82,641.823 1127.38,640.05 1127.94,629.014 1128.5,647.718 1129.06,670.435 1129.62,655.083 1130.18,688.278 1130.74,702.977 1131.3,702.492 1131.86,735.182 1132.41,731.628 1132.97,710.056 1133.53,710.06 1134.09,676.003 1134.65,706.822 1135.21,687.862 1135.77,654.992 1136.33,640.189 1136.89,628.087 1137.45,609.638 1138.01,597.277 1138.57,618.242 1139.13,656.607 1139.68,658.32 1140.24,641.855 1140.8,661.607 1141.36,663.427 1141.92,683.074 1142.48,698.897 1143.04,682.649 1143.6,701.464 1144.16,701.262 1144.72,690.51 1145.28,673.585 1145.84,690.315 1146.4,708.063 1146.96,694.295 1147.51,728.509 1148.07,742.826 1148.63,741.635 1149.19,707.882 1149.75,691.809 1150.31,677.814 1150.87,660.242 1151.43,678.176 1151.99,646.328 1152.55,614.028 1153.11,623.205 1153.67,609.45 1154.23,599.653 1154.78,588.308 1155.34,609.564 1155.9,565.631 1156.46,571.901 1157.02,577.637 1157.58,648.401 1158.14,634.413 1158.7,604.013 1159.26,606.372 1159.82,612.126 1160.38,664.761 1160.94,666.412 1161.5,649.762 1162.05,682.807 1162.61,654.021 1163.17,652.793 1163.73,653.174 1164.29,655.583 1164.85,688.034 1165.41,690.563 1165.97,689.392 1166.53,673.03 1167.09,641.422 1167.65,645.085 1168.21,662.042 1168.77,682.441 1169.33,668.493 1169.88,685.073 1170.44,718.181 1171,715.75 1171.56,711.067 1172.12,707.943 1172.68,673.658 1173.24,676.116 1173.8,660.796 1174.36,628.211 1174.92,646.782 1175.48,634.052 1176.04,607.354 1176.6,615.5 1177.15,605.935 1177.71,609.903 1178.27,630.213 1178.83,618.488 1179.39,606.416 1179.95,643.633 1180.51,661.348 1181.07,683.064 1181.63,650.19 1182.19,637.275 1182.75,655.343 1183.31,689.596 1183.87,671.04 1184.43,689.209 1184.98,673.62 1185.54,659.739 1186.1,659.989 1186.66,675.602 1187.22,674.213 1187.78,673.529 1188.34,689.962 1188.9,692.689 1189.46,611.778 1190.02,631.699 1190.58,619.6 1191.14,642.107 1191.7,641.471 1192.25,643.384 1192.81,648.182 1193.37,665.134 1193.93,636.561 1194.49,673.359 1195.05,640.182 1195.61,611.474 1196.17,615.42 1196.73,616.077 1197.29,602.665 1197.85,589.582 1198.41,598.162 1198.97,621.221 1199.52,625.43 1200.08,630.495 1200.64,664.735 1201.2,678.677 1201.76,684.503 1202.32,701.047 1202.88,701.533 1203.44,698.513 1204,684.429 1204.56,685.486 1205.12,717.631 1205.68,734.424 1206.24,765.684 1206.8,729.067 1207.35,711.395 1207.91,727.28 1208.47,725.076 1209.03,723.515 1209.59,735.933 1210.15,733.897 1210.71,748.507 1211.27,746.931 1211.83,725.881 1212.39,740.396 1212.95,735.108 1213.51,731.684 1214.07,698.534 1214.62,726.584 1215.18,691.661 1215.74,693.228 1216.3,708.947 1216.86,741.602 1217.42,740.241 1217.98,737.953 1218.54,751.096 1219.1,735.492 1219.66,719.248 1220.22,699.68 1220.78,714.594 1221.34,682.507 1221.89,663.568 1222.45,666.338 1223.01,634.888 1223.57,640.184 1224.13,628.298 1224.69,616.148 1225.25,621.042 1225.81,640.309 1226.37,673.793 1226.93,689.509 1227.49,668.101 1228.05,673.264 1228.61,641.078 1229.17,658.297 1229.72,642.207 1230.28,646.315 1230.84,635.607 1231.4,653.662 1231.96,670.242 1232.52,657.437 1233.08,639.325 1233.64,672.395 1234.2,671.955 1234.76,672.697 1235.32,705.534 1235.88,722.657 1236.44,720.41 1236.99,717.677 1237.55,715.503 1238.11,698.102 1238.67,713.627 1239.23,712.276 1239.79,699.167 1240.35,681.153 1240.91,701.664 1241.47,716.235 1242.03,696.583 1242.59,712.066 1243.15,690.742 1243.71,692.842 1244.26,706.235 1244.82,705.784 1245.38,738.242 1245.94,734.433 1246.5,717.625 1247.06,742.375 1247.62,739.372 1248.18,735.193 1248.74,752.085 1249.3,746.951 1249.86,711.254 1250.42,739.446 1250.98,718.19 1251.54,748.036 1252.09,756.573 1252.65,737.032 1253.21,746.868 1253.77,743.73 1254.33,740.55 1254.89,736.135 1255.45,719.876 1256.01,715.119 1256.57,696.709 1257.13,743.126 1257.69,741.303 1258.25,756.124 1258.81,754.245 1259.36,685.999 1259.92,684.689 1260.48,682.624 1261.04,682.43 1261.6,682.791 1262.16,662.641 1262.72,695.141 1263.28,677.246 1263.84,676.008 1264.4,674.544 1264.96,670.863 1265.52,652.823 1266.08,687.208 1266.63,702.109 1267.19,702.684 1267.75,732.501 1268.31,733.592 1268.87,701.366 1269.43,686.835 1269.99,671.172 1270.55,673.982 1271.11,660.048 1271.67,663.605 1272.23,691.261 1272.79,661.419 1273.35,647.766 1273.91,666.8 1274.46,670.072 1275.02,683.288 1275.58,697.062 1276.14,710.958 1276.7,757.367 1277.26,754.383 1277.82,729.453 1278.38,710.62 1278.94,712.208 1279.5,744.352 1280.06,756.019 1280.62,751.632 1281.18,749.995 1281.73,731.309 1282.29,761.547 1282.85,725.375 1283.41,720.719 1283.97,737.636 1284.53,735.587 1285.09,767.025 1285.65,780.802 1286.21,776.813 1286.77,737.316 1287.33,721.525 1287.89,721.334 1288.45,734.135 1289,732.683 1289.56,713.865 1290.12,711.874 1290.68,676.054 1291.24,690.37 1291.8,670.568 1292.36,606.652 1292.92,595.88 1293.48,618.259 1294.04,591.522 1294.6,595.113 1295.16,601.978 1295.72,605.572 1296.28,624.629 1296.83,610.955 1297.39,692.425 1297.95,725.519 1298.51,739.417 1299.07,737.016 1299.63,765.23 1300.19,759.9 1300.75,784.873 1301.31,781.328 1301.87,779.606 1302.43,806.268 1302.99,815.899 1303.55,810.36 1304.1,820.687 1304.66,832.578 1305.22,826.902 1305.78,820.025 1306.34,831.888 1306.9,839.248 1307.46,830.907 1308.02,834.641 1308.58,828.12 1309.14,803.568 1309.7,812.956 1310.26,788.199 1310.82,800.086 1311.38,795.107 1311.93,775.265 1312.49,758.259 1313.05,740.158 1313.61,750.298 1314.17,763.974 1314.73,757.762 1315.29,721.976 1315.85,751.461 1316.41,747.594 1316.97,741.682 1317.53,737.743 1318.09,685.362 1318.65,666.015 1319.2,665.167 1319.76,667.542 1320.32,652.663 1320.88,636.509 1321.44,636.014 1322,669.296 1322.56,672.083 1323.12,644.707 1323.68,642.261 1324.24,589.451 1324.8,625.043 1325.36,642.777 1325.92,613.12 1326.47,582.045 1327.03,590.148 1327.59,564.522 1328.15,569.11 1328.71,573.41 1329.27,565.106 1329.83,572.103 1330.39,565.332 1330.95,555.023 1331.51,562.817 1332.07,587.082 1332.63,576.932 1333.19,585.116 1333.75,588.885 1334.3,593.357 1334.86,600.274 1335.42,621.109 1335.98,642.559 1336.54,663.216 1337.1,648.235 1337.66,639.589 1338.22,626.67 1338.78,613.452 1339.34,602.538 1339.9,620.957 1340.46,657.55 1341.02,641.435 1341.57,662.562 1342.13,662.847 1342.69,599.766 1343.25,590.81 1343.81,595.139 1344.37,648.257 1344.93,651.84 1345.49,666.625 1346.05,650.823 1346.61,638.284 1347.17,627.013 1347.73,615.058 1348.29,649.382 1348.84,637.911 1349.4,640.11 1349.96,593.081 1350.52,616.793 1351.08,620.744 1351.64,607.433 1352.2,632.595 1352.76,651.103 1353.32,666.08 1353.88,698.396 1354.44,682.351 1355,681.475 1355.56,685.884 1356.12,702.788 1356.67,719.728 1357.23,717.993 1357.79,731.743 1358.35,761.348 1358.91,773.285 1359.47,780.655 1360.03,792.917 1360.59,785.711 1361.15,768.765 1361.71,781.664 1362.27,777.195 1362.83,757.644 1363.39,734.874 1363.94,750.043 1364.5,765.441 1365.06,743.591 1365.62,739.558 1366.18,721.695 1366.74,684.789 1367.3,686.427 1367.86,689.101 1368.42,740.228 1368.98,717.975 1369.54,730.201 1370.1,757.904 1370.66,758.369 1371.21,754.137 1371.77,765.775 1372.33,758.21 1372.89,754.765 1373.45,752.582 1374.01,752.053 1374.57,734.141 1375.13,730.504 1375.69,777.098 1376.25,772.866 1376.81,748.745 1377.37,713.854 1377.93,728.697 1378.49,792.714 1379.04,769.208 1379.6,763.554 1380.16,758.456 1380.72,736.838 1381.28,731.818 1381.84,729.46 1382.4,727.689 1382.96,709.192 1383.52,710.246 1384.08,679.481 1384.64,662.789 1385.2,693.031 1385.76,705.876 1386.31,703.629 1386.87,683.289 1387.43,684.718 1387.99,700.027 1388.55,698.658 1389.11,643.818 1389.67,696.425 1390.23,663.257 1390.79,663.043 1391.35,664.944 1391.91,664.61 1392.47,652.58 1393.03,651.086 1393.58,618.015 1394.14,607.278 1394.7,627.697 1395.26,631.442 1395.82,648.578 1396.38,652.284 1396.94,636.89 1397.5,626.413 1398.06,643.758 1398.62,622.558 1399.18,625.69 1399.74,659.212 1400.3,691.958 1400.86,658.506 1401.41,642.504 1401.97,645.412 1402.53,648.676 1403.09,668.065 1403.65,669.859 1404.21,671.924 1404.77,655.368 1405.33,657.839 1405.89,705.207 1406.45,686.506 1407.01,702.466 1407.57,687.947 1408.13,690.556 1408.68,674.717 1409.24,707.403 1409.8,706.528 1410.36,707.489 1410.92,690.175 1411.48,692.955 1412.04,709.268 1412.6,724.875 1413.16,752.782 1413.72,731.196 1414.28,693.696 1414.84,690.664 1415.4,689.828 1415.95,674.672 1416.51,693.584 1417.07,695.336 1417.63,693.351 1418.19,692.957 1418.75,630.22 1419.31,638.791 1419.87,657.261 1420.43,646.3 1420.99,582.511 1421.55,573.963 1422.11,599.988 1422.67,605.633 1423.23,643.633 1423.78,661.259 1424.34,647.715 1424.9,617.99 1425.46,605.477 1426.02,610.354 1426.58,611.577 1427.14,616.514 1427.7,636.379 1428.26,654.245 1428.82,654.156 1429.38,668.752 1429.94,686.222 1430.5,687.936 1431.05,700.821 1431.61,666.157 1432.17,666.709 1432.73,652.864 1433.29,651.081 1433.85,635.961 1434.41,603.43 1434.97,606.411 1435.53,644.311 1436.09,645.613 1436.65,647.772 1437.21,654.289 1437.77,639.333 1438.33,655.885 1438.88,687.992 1439.44,691.777 1440,690.874 1440.56,673.971 1441.12,691.568 1441.68,670.994 1442.24,687.222 1442.8,681.333 1443.36,680.803 1443.92,680.23 1444.48,681.883 1445.04,682.016 1445.6,714.512 1446.15,728.094 1446.71,662.263 1447.27,646.908 1447.83,665.637 1448.39,664.376 1448.95,695.119 1449.51,710.104 1450.07,679.673 1450.63,678.315 1451.19,664.294 1451.75,651.256 1452.31,654.915 1452.87,659.111 1453.42,642.477 1453.98,628.034 1454.54,644.412 1455.1,633.254 1455.66,652.712 1456.22,653.414 1456.78,671.655 1457.34,690.291 1457.9,691.953 1458.46,678.522 1459.02,712.499 1459.58,695.217 1460.14,675.554 1460.7,676.155 1461.25,645.363 1461.81,646.896 1462.37,618.429 1462.93,624.255 1463.49,629.096 1464.05,649.39 1464.61,684.547 1465.17,684.755 1465.73,686.038 1466.29,688.539 1466.85,706.09 1467.41,707.56 1467.97,709.971 1468.52,725.234 1469.08,739.636 1469.64,719.554 1470.2,720.353 1470.76,703.302 1471.32,704.827 1471.88,686.913 1472.44,655.776 1473,657.105 1473.56,644.227 1474.12,630.342 1474.68,634.314 1475.24,637.352 1475.79,641.528 1476.35,627.5 1476.91,613.083 1477.47,614.888 1478.03,617.683 1478.59,632.773 1479.15,633.015 1479.71,622.357 1480.27,625.635 1480.83,628.382 1481.39,615.974 1481.95,637.625 1482.51,609.807 1483.07,663.797 1483.62,679.522 1484.18,662.839 1484.74,680.36 1485.3,709.6 1485.86,707 1486.42,689.912 1486.98,719.027 1487.54,737.317 1488.1,737.712 1488.66,749.797 1489.22,748.178 1489.78,730.207 1490.34,712.361 1490.89,694.483 1491.45,694.602 1492.01,696.033 1492.57,692.04 1493.13,690.192 1493.69,673.093 1494.25,658.312 1494.81,643.719 1495.37,612.588 1495.93,632.531 1496.49,628.762 1497.05,646.894 1497.61,667.178 1498.16,669.689 1498.72,685.067 1499.28,683.703 1499.84,696.941 1500.4,744.807 1500.96,754.495 1501.52,767.574 1502.08,777.414 1502.64,790.64 1503.2,796.915 1503.76,832 1504.32,792.501 1504.88,833.179 1505.44,856.431 1505.99,848.457 1506.55,837.981 1507.11,828.728 1507.67,837.583 1508.23,812.596 1508.79,807.047 1509.35,784.256 1509.91,794.04 1510.47,785.634 1511.03,796.227 1511.59,806.019 1512.15,767.5 1512.71,759.764 1513.26,738.317 1513.82,767.403 1514.38,778.045 1514.94,773.086 1515.5,738.023 1516.06,734.147 1516.62,715.768 1517.18,684.2 1517.74,671.289 1518.3,704.157 1518.86,688.566 1519.42,672.809 1519.98,658.548 1520.53,704.873 1521.09,673.895 1521.65,674.215 1522.21,644.08 1522.77,662.421 1523.33,664.838 1523.89,665.522 1524.45,630.646 1525.01,619.172 1525.57,621.624 1526.13,639.373 1526.69,654.525 1527.25,610.068 1527.81,630.734 1528.36,646.833 1528.92,664.522 1529.48,679.093 1530.04,646.547 1530.6,666.686 1531.16,650.727 1531.72,670.36 1532.28,688.409 1532.84,705.195 1533.4,705.365 1533.96,718.83 1534.52,729.762 1535.08,746.061 1535.63,725.783 1536.19,703.169 1536.75,671.029 1537.31,638.853 1537.87,624.721 1538.43,644.334 1538.99,629.181 1539.55,631.211 1540.11,665.76 1540.67,648.343 1541.23,616.164 1541.79,668.702 1542.35,669.675 1542.9,654.238 1543.46,671.975 1544.02,657.907 1544.58,706.561 1545.14,670.709 1545.7,668.466 1546.26,652.533 1546.82,639.921 1547.38,626.015 1547.94,633.369 1548.5,621.235 1549.06,658.302 1549.62,626.353 1550.18,629.184 1550.73,645.989 1551.29,650.029 1551.85,635.812 1552.41,638.054 1552.97,642.658 1553.53,660.957 1554.09,645.738 1554.65,664.134 1555.21,679.361 1555.77,697.792 1556.33,714.588 1556.89,731.849 1557.45,730.084 1558,729.166 1558.56,727.059 1559.12,725.145 1559.68,738.42 1560.24,717.668 1560.8,714.601 1561.36,716.159 1561.92,681.983 1562.48,715.161 1563.04,733.532 1563.6,716.214 1564.16,711.696 1564.72,694.711 1565.28,680.23 1565.83,696.614 1566.39,663.398 1566.95,618.359 1567.51,622.729 1568.07,627.988 1568.63,649.912 1569.19,601.795 1569.75,604.818 1570.31,621.84 1570.87,622.541 1571.43,624.31 1571.99,658.36 1572.55,676.373 1573.1,708.225 1573.66,691.073 1574.22,673.413 1574.78,659.779 1575.34,679.385 1575.9,677.449 1576.46,676.914 1577.02,681.096 1577.58,710.832 1578.14,694.599 1578.7,692.312 1579.26,692.79 1579.82,709.135 1580.37,690.093 1580.93,676.101 1581.49,646.525 1582.05,665.667 1582.61,664.851 1583.17,670.504 1583.73,691.665 1584.29,690.514 1584.85,679.692 1585.41,698.702 1585.97,695.834 1586.53,678.856 1587.09,663.163 1587.65,646.228 1588.2,645.524 1588.76,633.855 1589.32,654.589 1589.88,669.19 1590.44,654.436 1591,673.56 1591.56,669.522 1592.12,671.545 1592.68,673.805 1593.24,689.957 1593.8,675.835 1594.36,658.897 1594.92,658.75 1595.47,625.167 1596.03,643.388 1596.59,644.425 1597.15,642.837 1597.71,676.298 1598.27,727.436 1598.83,742.239 1599.39,725.372 1599.95,724.815 1600.51,706.592 1601.07,754.223 1601.63,797.337 1602.19,809.09 1602.74,790.256 1603.3,771.471 1603.86,797.275 1604.42,776.934 1604.98,789.544 1605.54,797.714 1606.1,773.746 1606.66,769.086 1607.22,767.395 1607.78,762.466 1608.34,790.34 1608.9,786.512 1609.46,783.209 1610.02,777.333 1610.57,806.436 1611.13,784.406 1611.69,746.883 1612.25,778.304 1612.81,787.128 1613.37,752.137 1613.93,782.172 1614.49,757.432 1615.05,801.213 1615.61,798.046 1616.17,776.459 1616.73,742.336 1617.29,752.191 1617.84,748.792 1618.4,793.643 1618.96,772.943 1619.52,767.977 1620.08,730.936 1620.64,746.338 1621.2,724.503 1621.76,740.278 1622.32,734.782 1622.88,749.9 1623.44,715.467 1624,715.281 1624.56,713.343 1625.11,712.717 1625.67,710.908 1626.23,659.505 1626.79,661.345 1627.35,616.839 1627.91,620.733 1628.47,635.302 1629.03,607.908 1629.59,595.526 1630.15,585.659 1630.71,622.115 1631.27,621.907 1631.83,594.441 1632.39,597.741 1632.94,614.395 1633.5,651.406 1634.06,653.843 1634.62,619.327 1635.18,618.472 1635.74,640.089 1636.3,639.717 1636.86,640.542 1637.42,595.903 1637.98,598.979 1638.54,636.076 1639.1,591.19 1639.66,644.25 1640.21,681.586 1640.77,648.96 1641.33,650.515 1641.89,622.637 1642.45,624.979 1643.01,628.558 1643.57,644.793 1644.13,632.422 1644.69,620.161 1645.25,609.909 1645.81,598.771 1646.37,602.118 1646.93,605.067 1647.48,609.083 1648.04,628.769 1648.6,632.459 1649.16,684.975 1649.72,699.743 1650.28,732.733 1650.84,732.159 1651.4,728.572 1651.96,707.807 1652.52,709.297 1653.08,691.213 1653.64,709.995 1654.2,728.203 1654.76,694.363 1655.31,674.615 1655.87,723.088 1656.43,719.538 1656.99,701.697 1657.55,651.324 1658.11,687.241 1658.67,634.719 1659.23,650.424 1659.79,651.776 1660.35,635.205 1660.91,640.116 1661.47,626.326 1662.03,629.024 1662.58,631.131 1663.14,634.592 1663.7,619.533 1664.26,635.567 1664.82,638.69 1665.38,624.376 1665.94,628.806 1666.5,629.669 1667.06,616.091 1667.62,620.555 1668.18,624.481 1668.74,626.946 1669.3,648.407 1669.85,682.753 1670.41,683.147 1670.97,669.281 1671.53,683.236 1672.09,670.901 1672.65,639.748 1673.21,642.573 1673.77,657.016 1674.33,676.305 1674.89,679.036 1675.45,679.314 1676.01,612.928 1676.57,646.993 1677.13,617.449 1677.68,638.557 1678.24,642.043 1678.8,632.781 1679.36,637.743 1679.92,640.806 1680.48,657.995 1681.04,675.162 1681.6,673.275 1682.16,657.563 1682.72,675.77 1683.28,677.013 1683.84,707.591 1684.4,706.741 1684.95,719.687 1685.51,688.735 1686.07,751.089 1686.63,767.018 1687.19,745.346 1687.75,744.076 1688.31,740.698 1688.87,718.821 1689.43,669.194 1689.99,654.983 1690.55,656.289 1691.11,637.388 1691.67,638.869 1692.23,640.504 1692.78,625.152 1693.34,629.129 1693.9,663.218 1694.46,695.039 1695.02,678.975 1695.58,680.239 1696.14,665.129 1696.7,667.087 1697.26,634.041 1697.82,621.262 1698.38,625.944 1698.94,630.741 1699.5,681.363 1700.05,682.062 1700.61,681.683 1701.17,665.397 1701.73,665.123 1702.29,647.706 1702.85,617.517 1703.41,639.608 1703.97,609.16 1704.53,610.947 1705.09,628.664 1705.65,648.133 1706.21,649.256 1706.77,684.262 1707.32,650.144 1707.88,669.474 1708.44,670.44 1709,654.052 1709.56,705.107 1710.12,703.217 1710.68,699.395 1711.24,696.505 1711.8,679.112 1712.36,660.574 1712.92,709.698 1713.48,724.609 1714.04,738.976 1714.6,752.261 1715.15,766.324 1715.71,761.759 1716.27,774.69 1716.83,756.019 1717.39,755.051 1717.95,716.563 1718.51,715.11 1719.07,730.37 1719.63,711.982 1720.19,677.807 1720.75,646.626 1721.31,634.795 1721.87,654.889 1722.42,657.203 1722.98,643.577 1723.54,663.469 1724.1,666.841 1724.66,683.22 1725.22,683.618 1725.78,698.322 1726.34,679.81 1726.9,695.059 1727.46,693.816 1728.02,727.934 1728.58,710.513 1729.14,675.638 1729.69,661.943 1730.25,647.119 1730.81,680.417 1731.37,696.593 1731.93,694.546 1732.49,709.842 1733.05,709.653 1733.61,673.658 1734.17,659.439 1734.73,628.319 1735.29,616.377 1735.85,617.912 1736.41,620.51 1736.97,639.379 1737.52,624.336 1738.08,673.928 1738.64,689.498 1739.2,676.208 1739.76,707.113 1740.32,670.168 1740.88,667.415 1741.44,635.038 1742,639.724 1742.56,654.822 1743.12,689.359 1743.68,705.181 1744.24,704.132 1744.79,669.841 1745.35,671.207 1745.91,672.641 1746.47,674.767 1747.03,659.774 1747.59,678.448 1748.15,664.617 1748.71,665.598 1749.27,651.901 1749.83,672.706 1750.39,673.666 1750.95,676.174 1751.51,676.158 1752.06,676.526 1752.62,644.84 1753.18,681.132 1753.74,680.503 1754.3,667.688 1754.86,671.056 1755.42,719.939 1755.98,720.211 1756.54,702.594 1757.1,698.694 1757.66,698.797 1758.22,681.113 1758.78,697.52 1759.34,664.613 1759.89,667.728 1760.45,657.221 1761.01,644.24 1761.57,629.576 1762.13,618.334 1762.69,652.365 1763.25,669.414 1763.81,639.216 1764.37,642.148 1764.93,643.487 1765.49,600.864 1766.05,654.71 1766.61,637.825 1767.16,655.124 1767.72,704.823 1768.28,738.142 1768.84,736.35 1769.4,719.222 1769.96,696.118 1770.52,709.405 1771.08,708.376 1771.64,690.009 1772.2,703.033 1772.76,669.832 1773.32,650.557 1773.88,653.183 1774.43,655.46 1774.99,657.08 1775.55,642.401 1776.11,662.138 1776.67,680.653 1777.23,683.142 1777.79,681.073 1778.35,663.448 1778.91,665.793 1779.47,629.616 1780.03,632.629 1780.59,652.547 1781.15,638.601 1781.71,642.624 1782.26,643.032 1782.82,642.516 1783.38,643.632 1783.94,662.381 1784.5,680.134 1785.06,717.726 1785.62,714.61 1786.18,712.562 1786.74,713.148 1787.3,679.789 1787.86,696.294 1788.42,725.415 1788.98,705.462 1789.53,708.465 1790.09,740.164 1790.65,722.051 1791.21,754.429 1791.77,700.557 1792.33,715.036 1792.89,697.592 1793.45,678.218 1794.01,665.12 1794.57,667.059 1795.13,668.533 1795.69,686.323 1796.25,668.405 1796.8,653.633 1797.36,656.629 1797.92,664.008 1798.48,678.713 1799.04,662.162 1799.6,665.633 1800.16,663.778 1800.72,679.618 1801.28,697.652 1801.84,682.112 1802.4,680.306 1802.96,682.177 1803.52,700.547 1804.08,701.678 1804.63,719.779 1805.19,749.028 1805.75,710.59 1806.31,709.697 1806.87,719.762 1807.43,733.318 1807.99,717.758 1808.55,714.892 1809.11,698.946 1809.67,684.161 1810.23,685.145 1810.79,684.911 1811.35,687.439 1811.9,656.525 1812.46,656.262 1813.02,676.054 1813.58,676.924 1814.14,661.5 1814.7,677.684 1815.26,673.82 1815.82,645.492 1816.38,663.832 1816.94,665.694 1817.5,648.611 1818.06,665.978 1818.62,699.835 1819.18,716.026 1819.73,699.161 1820.29,731.74 1820.85,712.916 1821.41,713.999 1821.97,664.845 1822.53,666.931 1823.09,683.097 1823.65,684.444 1824.21,708.258 1824.77,706.05 1825.33,702.074 1825.89,684.055 1826.45,682.481 1827,651.643 1827.56,635.331 1828.12,641.281 1828.68,579.154 1829.24,596.495 1829.8,599.983 1830.36,640.803 1830.92,674.897 1831.48,675.71 1832.04,661.613 1832.6,677.953 1833.16,677.903 1833.72,679.701 1834.27,711.034 1834.83,724.991 1835.39,737.083 1835.95,734.843 1836.51,734.165 1837.07,729.197 1837.63,731.626 1838.19,729.253 \"/>\n<path clip-path=\"url(#clip903)\" d=\"M720.247 690.241 L720.806 690.241 L721.365 690.241 L721.924 690.241 L722.484 690.241 L723.043 690.241 L723.602 690.241 L724.161 690.241 L724.721 690.241 L725.28 690.241 L725.839 690.241 L726.398 690.241 L726.958 690.241 L727.517 690.241 L728.076 690.241 L728.635 690.241 L729.195 690.241 L729.754 690.241 L730.313 690.241 L730.872 690.241 L731.432 690.241 L731.991 690.241 L732.55 690.241 L733.109 690.241 L733.669 690.241 L734.228 690.241 L734.787 690.241 L735.346 690.241 L735.906 690.241 L736.465 690.241 L737.024 690.241 L737.583 690.241 L738.143 690.241 L738.702 690.241 L739.261 690.241 L739.82 690.241 L740.38 690.241 L740.939 690.241 L741.498 690.241 L742.057 690.241 L742.617 690.241 L743.176 690.241 L743.735 690.241 L744.294 690.241 L744.854 690.241 L745.413 690.241 L745.972 690.241 L746.531 690.241 L747.091 690.241 L747.65 690.241 L748.209 690.241 L748.768 690.241 L749.328 690.241 L749.887 690.241 L750.446 690.241 L751.005 690.241 L751.565 690.241 L752.124 690.241 L752.683 690.241 L753.242 690.241 L753.802 690.241 L754.361 690.241 L754.92 690.241 L755.479 690.241 L756.039 690.241 L756.598 690.241 L757.157 690.241 L757.716 690.241 L758.276 690.241 L758.835 690.241 L759.394 690.241 L759.953 690.241 L760.513 690.241 L761.072 690.241 L761.631 690.241 L762.19 690.241 L762.75 690.241 L763.309 690.241 L763.868 690.241 L764.427 690.241 L764.987 690.241 L765.546 690.241 L766.105 690.241 L766.664 690.241 L767.224 690.241 L767.783 690.241 L768.342 690.241 L768.901 690.241 L769.461 690.241 L770.02 690.241 L770.579 690.241 L771.138 690.241 L771.698 690.241 L772.257 690.241 L772.816 690.241 L773.375 690.241 L773.935 690.241 L774.494 690.241 L775.053 690.241 L775.612 690.241 L776.172 690.241 L776.731 690.241 L777.29 690.241 L777.849 690.241 L778.409 690.241 L778.968 690.241 L779.527 690.241 L780.086 690.241 L780.646 690.241 L781.205 690.241 L781.764 690.241 L782.323 690.241 L782.883 690.241 L783.442 690.241 L784.001 690.241 L784.56 690.241 L785.12 690.241 L785.679 690.241 L786.238 690.241 L786.797 690.241 L787.357 690.241 L787.916 690.241 L788.475 690.241 L789.034 690.241 L789.594 690.241 L790.153 690.241 L790.712 690.241 L791.271 690.241 L791.831 690.241 L792.39 690.241 L792.949 690.241 L793.508 690.241 L794.068 690.241 L794.627 690.241 L795.186 690.241 L795.745 690.241 L796.305 690.241 L796.864 690.241 L797.423 690.241 L797.982 690.241 L798.542 690.241 L799.101 690.241 L799.66 690.241 L800.219 690.241 L800.779 690.241 L801.338 690.241 L801.897 690.241 L802.456 690.241 L803.016 690.241 L803.575 690.241 L804.134 690.241 L804.693 690.241 L805.253 690.241 L805.812 690.241 L806.371 690.241 L806.931 690.241 L807.49 690.241 L808.049 690.241 L808.608 690.241 L809.168 690.241 L809.727 690.241 L810.286 690.241 L810.845 690.241 L811.405 690.241 L811.964 690.241 L812.523 690.241 L813.082 690.241 L813.642 690.241 L814.201 690.241 L814.76 690.241 L815.319 690.241 L815.879 690.241 L816.438 690.241 L816.997 690.241 L817.556 690.241 L818.116 690.241 L818.675 690.241 L819.234 690.241 L819.793 690.241 L820.353 690.241 L820.912 690.241 L821.471 690.241 L822.03 690.241 L822.59 690.241 L823.149 690.241 L823.708 690.241 L824.267 690.241 L824.827 690.241 L825.386 690.241 L825.945 690.241 L826.504 690.241 L827.064 690.241 L827.623 690.241 L828.182 690.241 L828.741 690.241 L829.301 690.241 L829.86 690.241 L830.419 690.241 L830.978 690.241 L831.538 690.241 L832.097 690.241 L832.656 690.241 L833.215 690.241 L833.775 690.241 L834.334 690.241 L834.893 690.241 L835.452 690.241 L836.012 690.241 L836.571 690.241 L837.13 690.241 L837.689 690.241 L838.249 690.241 L838.808 690.241 L839.367 690.241 L839.926 690.241 L840.486 690.241 L841.045 690.241 L841.604 690.241 L842.163 690.241 L842.723 690.241 L843.282 690.241 L843.841 690.241 L844.4 690.241 L844.96 690.241 L845.519 690.241 L846.078 690.241 L846.637 690.241 L847.197 690.241 L847.756 690.241 L848.315 690.241 L848.874 690.241 L849.434 690.241 L849.993 690.241 L850.552 690.241 L851.111 690.241 L851.671 690.241 L852.23 690.241 L852.789 690.241 L853.348 690.241 L853.908 690.241 L854.467 690.241 L855.026 690.241 L855.585 690.241 L856.145 690.241 L856.704 690.241 L857.263 690.241 L857.822 690.241 L858.382 690.241 L858.941 690.241 L859.5 690.241 L860.059 690.241 L860.619 690.241 L861.178 690.241 L861.737 690.241 L862.296 690.241 L862.856 690.241 L863.415 690.241 L863.974 690.241 L864.533 690.241 L865.093 690.241 L865.652 690.241 L866.211 690.241 L866.77 690.241 L867.33 690.241 L867.889 690.241 L868.448 690.241 L869.007 690.241 L869.567 690.241 L870.126 690.241 L870.685 690.241 L871.244 690.241 L871.804 690.241 L872.363 690.241 L872.922 690.241 L873.481 690.241 L874.041 690.241 L874.6 690.241 L875.159 690.241 L875.718 690.241 L876.278 690.241 L876.837 690.241 L877.396 690.241 L877.955 690.241 L878.515 690.241 L879.074 690.241 L879.633 690.241 L880.192 690.241 L880.752 690.241 L881.311 690.241 L881.87 690.241 L882.429 690.241 L882.989 690.241 L883.548 690.241 L884.107 690.241 L884.666 690.241 L885.226 690.241 L885.785 690.241 L886.344 690.241 L886.903 690.241 L887.463 690.241 L888.022 690.241 L888.581 690.241 L889.14 690.241 L889.7 690.241 L890.259 690.241 L890.818 690.241 L891.377 690.241 L891.937 690.241 L892.496 690.241 L893.055 690.241 L893.614 690.241 L894.174 690.241 L894.733 690.241 L895.292 690.241 L895.851 690.241 L896.411 690.241 L896.97 690.241 L897.529 690.241 L898.088 690.241 L898.648 690.241 L899.207 690.241 L899.766 690.241 L900.325 690.241 L900.885 690.241 L901.444 690.241 L902.003 690.241 L902.562 690.241 L903.122 690.241 L903.681 690.241 L904.24 690.241 L904.799 690.241 L905.359 690.241 L905.918 690.241 L906.477 690.241 L907.036 690.241 L907.596 690.241 L908.155 690.241 L908.714 690.241 L909.273 690.241 L909.833 690.241 L910.392 690.241 L910.951 690.241 L911.51 690.241 L912.07 690.241 L912.629 690.241 L913.188 690.241 L913.747 690.241 L914.307 690.241 L914.866 690.241 L915.425 690.241 L915.984 690.241 L916.544 690.241 L917.103 690.241 L917.662 690.241 L918.221 690.241 L918.781 690.241 L919.34 690.241 L919.899 690.241 L920.458 690.241 L921.018 690.241 L921.577 690.241 L922.136 690.241 L922.695 690.241 L923.255 690.241 L923.814 690.241 L924.373 690.241 L924.932 690.241 L925.492 690.241 L926.051 690.241 L926.61 690.241 L927.169 690.241 L927.729 690.241 L928.288 690.241 L928.847 690.241 L929.406 690.241 L929.966 690.241 L930.525 690.241 L931.084 690.241 L931.644 690.241 L932.203 690.241 L932.762 690.241 L933.321 690.241 L933.881 690.241 L934.44 690.241 L934.999 690.241 L935.558 690.241 L936.118 690.241 L936.677 690.241 L937.236 690.241 L937.795 690.241 L938.355 690.241 L938.914 690.241 L939.473 690.241 L940.032 690.241 L940.592 690.241 L941.151 690.241 L941.71 690.241 L942.269 690.241 L942.829 690.241 L943.388 690.241 L943.947 690.241 L944.506 690.241 L945.066 690.241 L945.625 690.241 L946.184 690.241 L946.743 690.241 L947.303 690.241 L947.862 690.241 L948.421 690.241 L948.98 690.241 L949.54 690.241 L950.099 690.241 L950.658 690.241 L951.217 690.241 L951.777 690.241 L952.336 690.241 L952.895 690.241 L953.454 690.241 L954.014 690.241 L954.573 690.241 L955.132 690.241 L955.691 690.241 L956.251 690.241 L956.81 690.241 L957.369 690.241 L957.928 690.241 L958.488 690.241 L959.047 690.241 L959.606 690.241 L960.165 690.241 L960.725 690.241 L961.284 690.241 L961.843 690.241 L962.402 690.241 L962.962 690.241 L963.521 690.241 L964.08 690.241 L964.639 690.241 L965.199 690.241 L965.758 690.241 L966.317 690.241 L966.876 690.241 L967.436 690.241 L967.995 690.241 L968.554 690.241 L969.113 690.241 L969.673 690.241 L970.232 690.241 L970.791 690.241 L971.35 690.241 L971.91 690.241 L972.469 690.241 L973.028 690.241 L973.587 690.241 L974.147 690.241 L974.706 690.241 L975.265 690.241 L975.824 690.241 L976.384 690.241 L976.943 690.241 L977.502 690.241 L978.061 690.241 L978.621 690.241 L979.18 690.241 L979.739 690.241 L980.298 690.241 L980.858 690.241 L981.417 690.241 L981.976 690.241 L982.535 690.241 L983.095 690.241 L983.654 690.241 L984.213 690.241 L984.772 690.241 L985.332 690.241 L985.891 690.241 L986.45 690.241 L987.009 690.241 L987.569 690.241 L988.128 690.241 L988.687 690.241 L989.246 690.241 L989.806 690.241 L990.365 690.241 L990.924 690.241 L991.483 690.241 L992.043 690.241 L992.602 690.241 L993.161 690.241 L993.72 690.241 L994.28 690.241 L994.839 690.241 L995.398 690.241 L995.957 690.241 L996.517 690.241 L997.076 690.241 L997.635 690.241 L998.194 690.241 L998.754 690.241 L999.313 690.241 L999.872 690.241 L1000.43 690.241 L1000.99 690.241 L1001.55 690.241 L1002.11 690.241 L1002.67 690.241 L1003.23 690.241 L1003.79 690.241 L1004.35 690.241 L1004.91 690.241 L1005.46 690.241 L1006.02 690.241 L1006.58 690.241 L1007.14 690.241 L1007.7 690.241 L1008.26 690.241 L1008.82 690.241 L1009.38 690.241 L1009.94 690.241 L1010.5 690.241 L1011.06 690.241 L1011.62 690.241 L1012.18 690.241 L1012.73 690.241 L1013.29 690.241 L1013.85 690.241 L1014.41 690.241 L1014.97 690.241 L1015.53 690.241 L1016.09 690.241 L1016.65 690.241 L1017.21 690.241 L1017.77 690.241 L1018.33 690.241 L1018.89 690.241 L1019.45 690.241 L1020.01 690.241 L1020.56 690.241 L1021.12 690.241 L1021.68 690.241 L1022.24 690.241 L1022.8 690.241 L1023.36 690.241 L1023.92 690.241 L1024.48 690.241 L1025.04 690.241 L1025.6 690.241 L1026.16 690.241 L1026.72 690.241 L1027.28 690.241 L1027.83 690.241 L1028.39 690.241 L1028.95 690.241 L1029.51 690.241 L1030.07 690.241 L1030.63 690.241 L1031.19 690.241 L1031.75 690.241 L1032.31 690.241 L1032.87 690.241 L1033.43 690.241 L1033.99 690.241 L1034.55 690.241 L1035.1 690.241 L1035.66 690.241 L1036.22 690.241 L1036.78 690.241 L1037.34 690.241 L1037.9 690.241 L1038.46 690.241 L1039.02 690.241 L1039.58 690.241 L1040.14 690.241 L1040.7 690.241 L1041.26 690.241 L1041.82 690.241 L1042.38 690.241 L1042.93 690.241 L1043.49 690.241 L1044.05 690.241 L1044.61 690.241 L1045.17 690.241 L1045.73 690.241 L1046.29 690.241 L1046.85 690.241 L1047.41 690.241 L1047.97 690.241 L1048.53 690.241 L1049.09 690.241 L1049.65 690.241 L1050.2 690.241 L1050.76 690.241 L1051.32 690.241 L1051.88 690.241 L1052.44 690.241 L1053 690.241 L1053.56 690.241 L1054.12 690.241 L1054.68 690.241 L1055.24 690.241 L1055.8 690.241 L1056.36 690.241 L1056.92 690.241 L1057.48 690.241 L1058.03 690.241 L1058.59 690.241 L1059.15 690.241 L1059.71 690.241 L1060.27 690.241 L1060.83 690.241 L1061.39 690.241 L1061.95 690.241 L1062.51 690.241 L1063.07 690.241 L1063.63 690.241 L1064.19 690.241 L1064.75 690.241 L1065.3 690.241 L1065.86 690.241 L1066.42 690.241 L1066.98 690.241 L1067.54 690.241 L1068.1 690.241 L1068.66 690.241 L1069.22 690.241 L1069.78 690.241 L1070.34 690.241 L1070.9 690.241 L1071.46 690.241 L1072.02 690.241 L1072.57 690.241 L1073.13 690.241 L1073.69 690.241 L1074.25 690.241 L1074.81 690.241 L1075.37 690.241 L1075.93 690.241 L1076.49 690.241 L1077.05 690.241 L1077.61 690.241 L1078.17 690.241 L1078.73 690.241 L1079.29 690.241 L1079.85 690.241 L1080.4 690.241 L1080.96 690.241 L1081.52 690.241 L1082.08 690.241 L1082.64 690.241 L1083.2 690.241 L1083.76 690.241 L1084.32 690.241 L1084.88 690.241 L1085.44 690.241 L1086 690.241 L1086.56 690.241 L1087.12 690.241 L1087.67 690.241 L1088.23 690.241 L1088.79 690.241 L1089.35 690.241 L1089.91 690.241 L1090.47 690.241 L1091.03 690.241 L1091.59 690.241 L1092.15 690.241 L1092.71 690.241 L1093.27 690.241 L1093.83 690.241 L1094.39 690.241 L1094.94 690.241 L1095.5 690.241 L1096.06 690.241 L1096.62 690.241 L1097.18 690.241 L1097.74 690.241 L1098.3 690.241 L1098.86 690.241 L1099.42 690.241 L1099.98 690.241 L1100.54 690.241 L1101.1 690.241 L1101.66 690.241 L1102.22 690.241 L1102.77 690.241 L1103.33 690.241 L1103.89 690.241 L1104.45 690.241 L1105.01 690.241 L1105.57 690.241 L1106.13 690.241 L1106.69 690.241 L1107.25 690.241 L1107.81 690.241 L1108.37 690.241 L1108.93 690.241 L1109.49 690.241 L1110.04 690.241 L1110.6 690.241 L1111.16 690.241 L1111.72 690.241 L1112.28 690.241 L1112.84 690.241 L1113.4 690.241 L1113.96 690.241 L1114.52 690.241 L1115.08 690.241 L1115.64 690.241 L1116.2 690.241 L1116.76 690.241 L1117.31 690.241 L1117.87 690.241 L1118.43 690.241 L1118.99 690.241 L1119.55 690.241 L1120.11 690.241 L1120.67 690.241 L1121.23 690.241 L1121.79 690.241 L1122.35 690.241 L1122.91 690.241 L1123.47 690.241 L1124.03 690.241 L1124.59 690.241 L1125.14 690.241 L1125.7 690.241 L1126.26 690.241 L1126.82 690.241 L1127.38 690.241 L1127.94 690.241 L1128.5 690.241 L1129.06 690.241 L1129.62 690.241 L1130.18 690.241 L1130.74 690.241 L1131.3 690.241 L1131.86 690.241 L1132.41 690.241 L1132.97 690.241 L1133.53 690.241 L1134.09 690.241 L1134.65 690.241 L1135.21 690.241 L1135.77 690.241 L1136.33 690.241 L1136.89 690.241 L1137.45 690.241 L1138.01 690.241 L1138.57 690.241 L1139.13 690.241 L1139.68 690.241 L1140.24 690.241 L1140.8 690.241 L1141.36 690.241 L1141.92 690.241 L1142.48 690.241 L1143.04 690.241 L1143.6 690.241 L1144.16 690.241 L1144.72 690.241 L1145.28 690.241 L1145.84 690.241 L1146.4 690.241 L1146.96 690.241 L1147.51 690.241 L1148.07 690.241 L1148.63 690.241 L1149.19 690.241 L1149.75 690.241 L1150.31 690.241 L1150.87 690.241 L1151.43 690.241 L1151.99 690.241 L1152.55 690.241 L1153.11 690.241 L1153.67 690.241 L1154.23 690.241 L1154.78 690.241 L1155.34 690.241 L1155.9 690.241 L1156.46 690.241 L1157.02 690.241 L1157.58 690.241 L1158.14 690.241 L1158.7 690.241 L1159.26 690.241 L1159.82 690.241 L1160.38 690.241 L1160.94 690.241 L1161.5 690.241 L1162.05 690.241 L1162.61 690.241 L1163.17 690.241 L1163.73 690.241 L1164.29 690.241 L1164.85 690.241 L1165.41 690.241 L1165.97 690.241 L1166.53 690.241 L1167.09 690.241 L1167.65 690.241 L1168.21 690.241 L1168.77 690.241 L1169.33 690.241 L1169.88 690.241 L1170.44 690.241 L1171 690.241 L1171.56 690.241 L1172.12 690.241 L1172.68 690.241 L1173.24 690.241 L1173.8 690.241 L1174.36 690.241 L1174.92 690.241 L1175.48 690.241 L1176.04 690.241 L1176.6 690.241 L1177.15 690.241 L1177.71 690.241 L1178.27 690.241 L1178.83 690.241 L1179.39 690.241 L1179.95 690.241 L1180.51 690.241 L1181.07 690.241 L1181.63 690.241 L1182.19 690.241 L1182.75 690.241 L1183.31 690.241 L1183.87 690.241 L1184.43 690.241 L1184.98 690.241 L1185.54 690.241 L1186.1 690.241 L1186.66 690.241 L1187.22 690.241 L1187.78 690.241 L1188.34 690.241 L1188.9 690.241 L1189.46 690.241 L1190.02 690.241 L1190.58 690.241 L1191.14 690.241 L1191.7 690.241 L1192.25 690.241 L1192.81 690.241 L1193.37 690.241 L1193.93 690.241 L1194.49 690.241 L1195.05 690.241 L1195.61 690.241 L1196.17 690.241 L1196.73 690.241 L1197.29 690.241 L1197.85 690.241 L1198.41 690.241 L1198.97 690.241 L1199.52 690.241 L1200.08 690.241 L1200.64 690.241 L1201.2 690.241 L1201.76 690.241 L1202.32 690.241 L1202.88 690.241 L1203.44 690.241 L1204 690.241 L1204.56 690.241 L1205.12 690.241 L1205.68 690.241 L1206.24 690.241 L1206.8 690.241 L1207.35 690.241 L1207.91 690.241 L1208.47 690.241 L1209.03 690.241 L1209.59 690.241 L1210.15 690.241 L1210.71 690.241 L1211.27 690.241 L1211.83 690.241 L1212.39 690.241 L1212.95 690.241 L1213.51 690.241 L1214.07 690.241 L1214.62 690.241 L1215.18 690.241 L1215.74 690.241 L1216.3 690.241 L1216.86 690.241 L1217.42 690.241 L1217.98 690.241 L1218.54 690.241 L1219.1 690.241 L1219.66 690.241 L1220.22 690.241 L1220.78 690.241 L1221.34 690.241 L1221.89 690.241 L1222.45 690.241 L1223.01 690.241 L1223.57 690.241 L1224.13 690.241 L1224.69 690.241 L1225.25 690.241 L1225.81 690.241 L1226.37 690.241 L1226.93 690.241 L1227.49 690.241 L1228.05 690.241 L1228.61 690.241 L1229.17 690.241 L1229.72 690.241 L1230.28 690.241 L1230.84 690.241 L1231.4 690.241 L1231.96 690.241 L1232.52 690.241 L1233.08 690.241 L1233.64 690.241 L1234.2 690.241 L1234.76 690.241 L1235.32 690.241 L1235.88 690.241 L1236.44 690.241 L1236.99 690.241 L1237.55 690.241 L1238.11 690.241 L1238.67 690.241 L1239.23 690.241 L1239.79 690.241 L1240.35 690.241 L1240.91 690.241 L1241.47 690.241 L1242.03 690.241 L1242.59 690.241 L1243.15 690.241 L1243.71 690.241 L1244.26 690.241 L1244.82 690.241 L1245.38 690.241 L1245.94 690.241 L1246.5 690.241 L1247.06 690.241 L1247.62 690.241 L1248.18 690.241 L1248.74 690.241 L1249.3 690.241 L1249.86 690.241 L1250.42 690.241 L1250.98 690.241 L1251.54 690.241 L1252.09 690.241 L1252.65 690.241 L1253.21 690.241 L1253.77 690.241 L1254.33 690.241 L1254.89 690.241 L1255.45 690.241 L1256.01 690.241 L1256.57 690.241 L1257.13 690.241 L1257.69 690.241 L1258.25 690.241 L1258.81 690.241 L1259.36 690.241 L1259.92 690.241 L1260.48 690.241 L1261.04 690.241 L1261.6 690.241 L1262.16 690.241 L1262.72 690.241 L1263.28 690.241 L1263.84 690.241 L1264.4 690.241 L1264.96 690.241 L1265.52 690.241 L1266.08 690.241 L1266.63 690.241 L1267.19 690.241 L1267.75 690.241 L1268.31 690.241 L1268.87 690.241 L1269.43 690.241 L1269.99 690.241 L1270.55 690.241 L1271.11 690.241 L1271.67 690.241 L1272.23 690.241 L1272.79 690.241 L1273.35 690.241 L1273.91 690.241 L1274.46 690.241 L1275.02 690.241 L1275.58 690.241 L1276.14 690.241 L1276.7 690.241 L1277.26 690.241 L1277.82 690.241 L1278.38 690.241 L1278.94 690.241 L1279.5 690.241 L1280.06 690.241 L1280.62 690.241 L1281.18 690.241 L1281.73 690.241 L1282.29 690.241 L1282.85 690.241 L1283.41 690.241 L1283.97 690.241 L1284.53 690.241 L1285.09 690.241 L1285.65 690.241 L1286.21 690.241 L1286.77 690.241 L1287.33 690.241 L1287.89 690.241 L1288.45 690.241 L1289 690.241 L1289.56 690.241 L1290.12 690.241 L1290.68 690.241 L1291.24 690.241 L1291.8 690.241 L1292.36 690.241 L1292.92 690.241 L1293.48 690.241 L1294.04 690.241 L1294.6 690.241 L1295.16 690.241 L1295.72 690.241 L1296.28 690.241 L1296.83 690.241 L1297.39 690.241 L1297.95 690.241 L1298.51 690.241 L1299.07 690.241 L1299.63 690.241 L1300.19 690.241 L1300.75 690.241 L1301.31 690.241 L1301.87 690.241 L1302.43 690.241 L1302.99 690.241 L1303.55 690.241 L1304.1 690.241 L1304.66 690.241 L1305.22 690.241 L1305.78 690.241 L1306.34 690.241 L1306.9 690.241 L1307.46 690.241 L1308.02 690.241 L1308.58 690.241 L1309.14 690.241 L1309.7 690.241 L1310.26 690.241 L1310.82 690.241 L1311.38 690.241 L1311.93 690.241 L1312.49 690.241 L1313.05 690.241 L1313.61 690.241 L1314.17 690.241 L1314.73 690.241 L1315.29 690.241 L1315.85 690.241 L1316.41 690.241 L1316.97 690.241 L1317.53 690.241 L1318.09 690.241 L1318.65 690.241 L1319.2 690.241 L1319.76 690.241 L1320.32 690.241 L1320.88 690.241 L1321.44 690.241 L1322 690.241 L1322.56 690.241 L1323.12 690.241 L1323.68 690.241 L1324.24 690.241 L1324.8 690.241 L1325.36 690.241 L1325.92 690.241 L1326.47 690.241 L1327.03 690.241 L1327.59 690.241 L1328.15 690.241 L1328.71 690.241 L1329.27 690.241 L1329.83 690.241 L1330.39 690.241 L1330.95 690.241 L1331.51 690.241 L1332.07 690.241 L1332.63 690.241 L1333.19 690.241 L1333.75 690.241 L1334.3 690.241 L1334.86 690.241 L1335.42 690.241 L1335.98 690.241 L1336.54 690.241 L1337.1 690.241 L1337.66 690.241 L1338.22 690.241 L1338.78 690.241 L1339.34 690.241 L1339.9 690.241 L1340.46 690.241 L1341.02 690.241 L1341.57 690.241 L1342.13 690.241 L1342.69 690.241 L1343.25 690.241 L1343.81 690.241 L1344.37 690.241 L1344.93 690.241 L1345.49 690.241 L1346.05 690.241 L1346.61 690.241 L1347.17 690.241 L1347.73 690.241 L1348.29 690.241 L1348.84 690.241 L1349.4 690.241 L1349.96 690.241 L1350.52 690.241 L1351.08 690.241 L1351.64 690.241 L1352.2 690.241 L1352.76 690.241 L1353.32 690.241 L1353.88 690.241 L1354.44 690.241 L1355 690.241 L1355.56 690.241 L1356.12 690.241 L1356.67 690.241 L1357.23 690.241 L1357.79 690.241 L1358.35 690.241 L1358.91 690.241 L1359.47 690.241 L1360.03 690.241 L1360.59 690.241 L1361.15 690.241 L1361.71 690.241 L1362.27 690.241 L1362.83 690.241 L1363.39 690.241 L1363.94 690.241 L1364.5 690.241 L1365.06 690.241 L1365.62 690.241 L1366.18 690.241 L1366.74 690.241 L1367.3 690.241 L1367.86 690.241 L1368.42 690.241 L1368.98 690.241 L1369.54 690.241 L1370.1 690.241 L1370.66 690.241 L1371.21 690.241 L1371.77 690.241 L1372.33 690.241 L1372.89 690.241 L1373.45 690.241 L1374.01 690.241 L1374.57 690.241 L1375.13 690.241 L1375.69 690.241 L1376.25 690.241 L1376.81 690.241 L1377.37 690.241 L1377.93 690.241 L1378.49 690.241 L1379.04 690.241 L1379.6 690.241 L1380.16 690.241 L1380.72 690.241 L1381.28 690.241 L1381.84 690.241 L1382.4 690.241 L1382.96 690.241 L1383.52 690.241 L1384.08 690.241 L1384.64 690.241 L1385.2 690.241 L1385.76 690.241 L1386.31 690.241 L1386.87 690.241 L1387.43 690.241 L1387.99 690.241 L1388.55 690.241 L1389.11 690.241 L1389.67 690.241 L1390.23 690.241 L1390.79 690.241 L1391.35 690.241 L1391.91 690.241 L1392.47 690.241 L1393.03 690.241 L1393.58 690.241 L1394.14 690.241 L1394.7 690.241 L1395.26 690.241 L1395.82 690.241 L1396.38 690.241 L1396.94 690.241 L1397.5 690.241 L1398.06 690.241 L1398.62 690.241 L1399.18 690.241 L1399.74 690.241 L1400.3 690.241 L1400.86 690.241 L1401.41 690.241 L1401.97 690.241 L1402.53 690.241 L1403.09 690.241 L1403.65 690.241 L1404.21 690.241 L1404.77 690.241 L1405.33 690.241 L1405.89 690.241 L1406.45 690.241 L1407.01 690.241 L1407.57 690.241 L1408.13 690.241 L1408.68 690.241 L1409.24 690.241 L1409.8 690.241 L1410.36 690.241 L1410.92 690.241 L1411.48 690.241 L1412.04 690.241 L1412.6 690.241 L1413.16 690.241 L1413.72 690.241 L1414.28 690.241 L1414.84 690.241 L1415.4 690.241 L1415.95 690.241 L1416.51 690.241 L1417.07 690.241 L1417.63 690.241 L1418.19 690.241 L1418.75 690.241 L1419.31 690.241 L1419.87 690.241 L1420.43 690.241 L1420.99 690.241 L1421.55 690.241 L1422.11 690.241 L1422.67 690.241 L1423.23 690.241 L1423.78 690.241 L1424.34 690.241 L1424.9 690.241 L1425.46 690.241 L1426.02 690.241 L1426.58 690.241 L1427.14 690.241 L1427.7 690.241 L1428.26 690.241 L1428.82 690.241 L1429.38 690.241 L1429.94 690.241 L1430.5 690.241 L1431.05 690.241 L1431.61 690.241 L1432.17 690.241 L1432.73 690.241 L1433.29 690.241 L1433.85 690.241 L1434.41 690.241 L1434.97 690.241 L1435.53 690.241 L1436.09 690.241 L1436.65 690.241 L1437.21 690.241 L1437.77 690.241 L1438.33 690.241 L1438.88 690.241 L1439.44 690.241 L1440 690.241 L1440.56 690.241 L1441.12 690.241 L1441.68 690.241 L1442.24 690.241 L1442.8 690.241 L1443.36 690.241 L1443.92 690.241 L1444.48 690.241 L1445.04 690.241 L1445.6 690.241 L1446.15 690.241 L1446.71 690.241 L1447.27 690.241 L1447.83 690.241 L1448.39 690.241 L1448.95 690.241 L1449.51 690.241 L1450.07 690.241 L1450.63 690.241 L1451.19 690.241 L1451.75 690.241 L1452.31 690.241 L1452.87 690.241 L1453.42 690.241 L1453.98 690.241 L1454.54 690.241 L1455.1 690.241 L1455.66 690.241 L1456.22 690.241 L1456.78 690.241 L1457.34 690.241 L1457.9 690.241 L1458.46 690.241 L1459.02 690.241 L1459.58 690.241 L1460.14 690.241 L1460.7 690.241 L1461.25 690.241 L1461.81 690.241 L1462.37 690.241 L1462.93 690.241 L1463.49 690.241 L1464.05 690.241 L1464.61 690.241 L1465.17 690.241 L1465.73 690.241 L1466.29 690.241 L1466.85 690.241 L1467.41 690.241 L1467.97 690.241 L1468.52 690.241 L1469.08 690.241 L1469.64 690.241 L1470.2 690.241 L1470.76 690.241 L1471.32 690.241 L1471.88 690.241 L1472.44 690.241 L1473 690.241 L1473.56 690.241 L1474.12 690.241 L1474.68 690.241 L1475.24 690.241 L1475.79 690.241 L1476.35 690.241 L1476.91 690.241 L1477.47 690.241 L1478.03 690.241 L1478.59 690.241 L1479.15 690.241 L1479.71 690.241 L1480.27 690.241 L1480.83 690.241 L1481.39 690.241 L1481.95 690.241 L1482.51 690.241 L1483.07 690.241 L1483.62 690.241 L1484.18 690.241 L1484.74 690.241 L1485.3 690.241 L1485.86 690.241 L1486.42 690.241 L1486.98 690.241 L1487.54 690.241 L1488.1 690.241 L1488.66 690.241 L1489.22 690.241 L1489.78 690.241 L1490.34 690.241 L1490.89 690.241 L1491.45 690.241 L1492.01 690.241 L1492.57 690.241 L1493.13 690.241 L1493.69 690.241 L1494.25 690.241 L1494.81 690.241 L1495.37 690.241 L1495.93 690.241 L1496.49 690.241 L1497.05 690.241 L1497.61 690.241 L1498.16 690.241 L1498.72 690.241 L1499.28 690.241 L1499.84 690.241 L1500.4 690.241 L1500.96 690.241 L1501.52 690.241 L1502.08 690.241 L1502.64 690.241 L1503.2 690.241 L1503.76 690.241 L1504.32 690.241 L1504.88 690.241 L1505.44 690.241 L1505.99 690.241 L1506.55 690.241 L1507.11 690.241 L1507.67 690.241 L1508.23 690.241 L1508.79 690.241 L1509.35 690.241 L1509.91 690.241 L1510.47 690.241 L1511.03 690.241 L1511.59 690.241 L1512.15 690.241 L1512.71 690.241 L1513.26 690.241 L1513.82 690.241 L1514.38 690.241 L1514.94 690.241 L1515.5 690.241 L1516.06 690.241 L1516.62 690.241 L1517.18 690.241 L1517.74 690.241 L1518.3 690.241 L1518.86 690.241 L1519.42 690.241 L1519.98 690.241 L1520.53 690.241 L1521.09 690.241 L1521.65 690.241 L1522.21 690.241 L1522.77 690.241 L1523.33 690.241 L1523.89 690.241 L1524.45 690.241 L1525.01 690.241 L1525.57 690.241 L1526.13 690.241 L1526.69 690.241 L1527.25 690.241 L1527.81 690.241 L1528.36 690.241 L1528.92 690.241 L1529.48 690.241 L1530.04 690.241 L1530.6 690.241 L1531.16 690.241 L1531.72 690.241 L1532.28 690.241 L1532.84 690.241 L1533.4 690.241 L1533.96 690.241 L1534.52 690.241 L1535.08 690.241 L1535.63 690.241 L1536.19 690.241 L1536.75 690.241 L1537.31 690.241 L1537.87 690.241 L1538.43 690.241 L1538.99 690.241 L1539.55 690.241 L1540.11 690.241 L1540.67 690.241 L1541.23 690.241 L1541.79 690.241 L1542.35 690.241 L1542.9 690.241 L1543.46 690.241 L1544.02 690.241 L1544.58 690.241 L1545.14 690.241 L1545.7 690.241 L1546.26 690.241 L1546.82 690.241 L1547.38 690.241 L1547.94 690.241 L1548.5 690.241 L1549.06 690.241 L1549.62 690.241 L1550.18 690.241 L1550.73 690.241 L1551.29 690.241 L1551.85 690.241 L1552.41 690.241 L1552.97 690.241 L1553.53 690.241 L1554.09 690.241 L1554.65 690.241 L1555.21 690.241 L1555.77 690.241 L1556.33 690.241 L1556.89 690.241 L1557.45 690.241 L1558 690.241 L1558.56 690.241 L1559.12 690.241 L1559.68 690.241 L1560.24 690.241 L1560.8 690.241 L1561.36 690.241 L1561.92 690.241 L1562.48 690.241 L1563.04 690.241 L1563.6 690.241 L1564.16 690.241 L1564.72 690.241 L1565.28 690.241 L1565.83 690.241 L1566.39 690.241 L1566.95 690.241 L1567.51 690.241 L1568.07 690.241 L1568.63 690.241 L1569.19 690.241 L1569.75 690.241 L1570.31 690.241 L1570.87 690.241 L1571.43 690.241 L1571.99 690.241 L1572.55 690.241 L1573.1 690.241 L1573.66 690.241 L1574.22 690.241 L1574.78 690.241 L1575.34 690.241 L1575.9 690.241 L1576.46 690.241 L1577.02 690.241 L1577.58 690.241 L1578.14 690.241 L1578.7 690.241 L1579.26 690.241 L1579.82 690.241 L1580.37 690.241 L1580.93 690.241 L1581.49 690.241 L1582.05 690.241 L1582.61 690.241 L1583.17 690.241 L1583.73 690.241 L1584.29 690.241 L1584.85 690.241 L1585.41 690.241 L1585.97 690.241 L1586.53 690.241 L1587.09 690.241 L1587.65 690.241 L1588.2 690.241 L1588.76 690.241 L1589.32 690.241 L1589.88 690.241 L1590.44 690.241 L1591 690.241 L1591.56 690.241 L1592.12 690.241 L1592.68 690.241 L1593.24 690.241 L1593.8 690.241 L1594.36 690.241 L1594.92 690.241 L1595.47 690.241 L1596.03 690.241 L1596.59 690.241 L1597.15 690.241 L1597.71 690.241 L1598.27 690.241 L1598.83 690.241 L1599.39 690.241 L1599.95 690.241 L1600.51 690.241 L1601.07 690.241 L1601.63 690.241 L1602.19 690.241 L1602.74 690.241 L1603.3 690.241 L1603.86 690.241 L1604.42 690.241 L1604.98 690.241 L1605.54 690.241 L1606.1 690.241 L1606.66 690.241 L1607.22 690.241 L1607.78 690.241 L1608.34 690.241 L1608.9 690.241 L1609.46 690.241 L1610.02 690.241 L1610.57 690.241 L1611.13 690.241 L1611.69 690.241 L1612.25 690.241 L1612.81 690.241 L1613.37 690.241 L1613.93 690.241 L1614.49 690.241 L1615.05 690.241 L1615.61 690.241 L1616.17 690.241 L1616.73 690.241 L1617.29 690.241 L1617.84 690.241 L1618.4 690.241 L1618.96 690.241 L1619.52 690.241 L1620.08 690.241 L1620.64 690.241 L1621.2 690.241 L1621.76 690.241 L1622.32 690.241 L1622.88 690.241 L1623.44 690.241 L1624 690.241 L1624.56 690.241 L1625.11 690.241 L1625.67 690.241 L1626.23 690.241 L1626.79 690.241 L1627.35 690.241 L1627.91 690.241 L1628.47 690.241 L1629.03 690.241 L1629.59 690.241 L1630.15 690.241 L1630.71 690.241 L1631.27 690.241 L1631.83 690.241 L1632.39 690.241 L1632.94 690.241 L1633.5 690.241 L1634.06 690.241 L1634.62 690.241 L1635.18 690.241 L1635.74 690.241 L1636.3 690.241 L1636.86 690.241 L1637.42 690.241 L1637.98 690.241 L1638.54 690.241 L1639.1 690.241 L1639.66 690.241 L1640.21 690.241 L1640.77 690.241 L1641.33 690.241 L1641.89 690.241 L1642.45 690.241 L1643.01 690.241 L1643.57 690.241 L1644.13 690.241 L1644.69 690.241 L1645.25 690.241 L1645.81 690.241 L1646.37 690.241 L1646.93 690.241 L1647.48 690.241 L1648.04 690.241 L1648.6 690.241 L1649.16 690.241 L1649.72 690.241 L1650.28 690.241 L1650.84 690.241 L1651.4 690.241 L1651.96 690.241 L1652.52 690.241 L1653.08 690.241 L1653.64 690.241 L1654.2 690.241 L1654.76 690.241 L1655.31 690.241 L1655.87 690.241 L1656.43 690.241 L1656.99 690.241 L1657.55 690.241 L1658.11 690.241 L1658.67 690.241 L1659.23 690.241 L1659.79 690.241 L1660.35 690.241 L1660.91 690.241 L1661.47 690.241 L1662.03 690.241 L1662.58 690.241 L1663.14 690.241 L1663.7 690.241 L1664.26 690.241 L1664.82 690.241 L1665.38 690.241 L1665.94 690.241 L1666.5 690.241 L1667.06 690.241 L1667.62 690.241 L1668.18 690.241 L1668.74 690.241 L1669.3 690.241 L1669.85 690.241 L1670.41 690.241 L1670.97 690.241 L1671.53 690.241 L1672.09 690.241 L1672.65 690.241 L1673.21 690.241 L1673.77 690.241 L1674.33 690.241 L1674.89 690.241 L1675.45 690.241 L1676.01 690.241 L1676.57 690.241 L1677.13 690.241 L1677.68 690.241 L1678.24 690.241 L1678.8 690.241 L1679.36 690.241 L1679.92 690.241 L1680.48 690.241 L1681.04 690.241 L1681.6 690.241 L1682.16 690.241 L1682.72 690.241 L1683.28 690.241 L1683.84 690.241 L1684.4 690.241 L1684.95 690.241 L1685.51 690.241 L1686.07 690.241 L1686.63 690.241 L1687.19 690.241 L1687.75 690.241 L1688.31 690.241 L1688.87 690.241 L1689.43 690.241 L1689.99 690.241 L1690.55 690.241 L1691.11 690.241 L1691.67 690.241 L1692.23 690.241 L1692.78 690.241 L1693.34 690.241 L1693.9 690.241 L1694.46 690.241 L1695.02 690.241 L1695.58 690.241 L1696.14 690.241 L1696.7 690.241 L1697.26 690.241 L1697.82 690.241 L1698.38 690.241 L1698.94 690.241 L1699.5 690.241 L1700.05 690.241 L1700.61 690.241 L1701.17 690.241 L1701.73 690.241 L1702.29 690.241 L1702.85 690.241 L1703.41 690.241 L1703.97 690.241 L1704.53 690.241 L1705.09 690.241 L1705.65 690.241 L1706.21 690.241 L1706.77 690.241 L1707.32 690.241 L1707.88 690.241 L1708.44 690.241 L1709 690.241 L1709.56 690.241 L1710.12 690.241 L1710.68 690.241 L1711.24 690.241 L1711.8 690.241 L1712.36 690.241 L1712.92 690.241 L1713.48 690.241 L1714.04 690.241 L1714.6 690.241 L1715.15 690.241 L1715.71 690.241 L1716.27 690.241 L1716.83 690.241 L1717.39 690.241 L1717.95 690.241 L1718.51 690.241 L1719.07 690.241 L1719.63 690.241 L1720.19 690.241 L1720.75 690.241 L1721.31 690.241 L1721.87 690.241 L1722.42 690.241 L1722.98 690.241 L1723.54 690.241 L1724.1 690.241 L1724.66 690.241 L1725.22 690.241 L1725.78 690.241 L1726.34 690.241 L1726.9 690.241 L1727.46 690.241 L1728.02 690.241 L1728.58 690.241 L1729.14 690.241 L1729.69 690.241 L1730.25 690.241 L1730.81 690.241 L1731.37 690.241 L1731.93 690.241 L1732.49 690.241 L1733.05 690.241 L1733.61 690.241 L1734.17 690.241 L1734.73 690.241 L1735.29 690.241 L1735.85 690.241 L1736.41 690.241 L1736.97 690.241 L1737.52 690.241 L1738.08 690.241 L1738.64 690.241 L1739.2 690.241 L1739.76 690.241 L1740.32 690.241 L1740.88 690.241 L1741.44 690.241 L1742 690.241 L1742.56 690.241 L1743.12 690.241 L1743.68 690.241 L1744.24 690.241 L1744.79 690.241 L1745.35 690.241 L1745.91 690.241 L1746.47 690.241 L1747.03 690.241 L1747.59 690.241 L1748.15 690.241 L1748.71 690.241 L1749.27 690.241 L1749.83 690.241 L1750.39 690.241 L1750.95 690.241 L1751.51 690.241 L1752.06 690.241 L1752.62 690.241 L1753.18 690.241 L1753.74 690.241 L1754.3 690.241 L1754.86 690.241 L1755.42 690.241 L1755.98 690.241 L1756.54 690.241 L1757.1 690.241 L1757.66 690.241 L1758.22 690.241 L1758.78 690.241 L1759.34 690.241 L1759.89 690.241 L1760.45 690.241 L1761.01 690.241 L1761.57 690.241 L1762.13 690.241 L1762.69 690.241 L1763.25 690.241 L1763.81 690.241 L1764.37 690.241 L1764.93 690.241 L1765.49 690.241 L1766.05 690.241 L1766.61 690.241 L1767.16 690.241 L1767.72 690.241 L1768.28 690.241 L1768.84 690.241 L1769.4 690.241 L1769.96 690.241 L1770.52 690.241 L1771.08 690.241 L1771.64 690.241 L1772.2 690.241 L1772.76 690.241 L1773.32 690.241 L1773.88 690.241 L1774.43 690.241 L1774.99 690.241 L1775.55 690.241 L1776.11 690.241 L1776.67 690.241 L1777.23 690.241 L1777.79 690.241 L1778.35 690.241 L1778.91 690.241 L1779.47 690.241 L1780.03 690.241 L1780.59 690.241 L1781.15 690.241 L1781.71 690.241 L1782.26 690.241 L1782.82 690.241 L1783.38 690.241 L1783.94 690.241 L1784.5 690.241 L1785.06 690.241 L1785.62 690.241 L1786.18 690.241 L1786.74 690.241 L1787.3 690.241 L1787.86 690.241 L1788.42 690.241 L1788.98 690.241 L1789.53 690.241 L1790.09 690.241 L1790.65 690.241 L1791.21 690.241 L1791.77 690.241 L1792.33 690.241 L1792.89 690.241 L1793.45 690.241 L1794.01 690.241 L1794.57 690.241 L1795.13 690.241 L1795.69 690.241 L1796.25 690.241 L1796.8 690.241 L1797.36 690.241 L1797.92 690.241 L1798.48 690.241 L1799.04 690.241 L1799.6 690.241 L1800.16 690.241 L1800.72 690.241 L1801.28 690.241 L1801.84 690.241 L1802.4 690.241 L1802.96 690.241 L1803.52 690.241 L1804.08 690.241 L1804.63 690.241 L1805.19 690.241 L1805.75 690.241 L1806.31 690.241 L1806.87 690.241 L1807.43 690.241 L1807.99 690.241 L1808.55 690.241 L1809.11 690.241 L1809.67 690.241 L1810.23 690.241 L1810.79 690.241 L1811.35 690.241 L1811.9 690.241 L1812.46 690.241 L1813.02 690.241 L1813.58 690.241 L1814.14 690.241 L1814.7 690.241 L1815.26 690.241 L1815.82 690.241 L1816.38 690.241 L1816.94 690.241 L1817.5 690.241 L1818.06 690.241 L1818.62 690.241 L1819.18 690.241 L1819.73 690.241 L1820.29 690.241 L1820.85 690.241 L1821.41 690.241 L1821.97 690.241 L1822.53 690.241 L1823.09 690.241 L1823.65 690.241 L1824.21 690.241 L1824.77 690.241 L1825.33 690.241 L1825.89 690.241 L1826.45 690.241 L1827 690.241 L1827.56 690.241 L1828.12 690.241 L1828.68 690.241 L1829.24 690.241 L1829.8 690.241 L1830.36 690.241 L1830.92 690.241 L1831.48 690.241 L1832.04 690.241 L1832.6 690.241 L1833.16 690.241 L1833.72 690.241 L1834.27 690.241 L1834.83 690.241 L1835.39 690.241 L1835.95 690.241 L1836.51 690.241 L1837.07 690.241 L1837.63 690.241 L1838.19 690.241 L1838.19 682.003 L1837.63 682.003 L1837.07 682.003 L1836.51 682.003 L1835.95 682.003 L1835.39 682.003 L1834.83 682.003 L1834.27 682.003 L1833.72 682.003 L1833.16 682.003 L1832.6 682.003 L1832.04 682.003 L1831.48 682.003 L1830.92 682.003 L1830.36 682.003 L1829.8 682.003 L1829.24 682.003 L1828.68 682.003 L1828.12 682.003 L1827.56 682.003 L1827 682.003 L1826.45 682.003 L1825.89 682.003 L1825.33 682.003 L1824.77 682.003 L1824.21 682.003 L1823.65 682.003 L1823.09 682.003 L1822.53 682.003 L1821.97 682.003 L1821.41 682.003 L1820.85 682.003 L1820.29 682.003 L1819.73 682.003 L1819.18 682.003 L1818.62 682.003 L1818.06 682.003 L1817.5 682.003 L1816.94 682.003 L1816.38 682.003 L1815.82 682.003 L1815.26 682.003 L1814.7 682.003 L1814.14 682.003 L1813.58 682.003 L1813.02 682.003 L1812.46 682.003 L1811.9 682.003 L1811.35 682.003 L1810.79 682.003 L1810.23 682.003 L1809.67 682.003 L1809.11 682.003 L1808.55 682.003 L1807.99 682.003 L1807.43 682.003 L1806.87 682.003 L1806.31 682.003 L1805.75 682.003 L1805.19 682.003 L1804.63 682.003 L1804.08 682.003 L1803.52 682.003 L1802.96 682.003 L1802.4 682.003 L1801.84 682.003 L1801.28 682.003 L1800.72 682.003 L1800.16 682.003 L1799.6 682.003 L1799.04 682.003 L1798.48 682.003 L1797.92 682.003 L1797.36 682.003 L1796.8 682.003 L1796.25 682.003 L1795.69 682.003 L1795.13 682.003 L1794.57 682.003 L1794.01 682.003 L1793.45 682.003 L1792.89 682.003 L1792.33 682.003 L1791.77 682.003 L1791.21 682.003 L1790.65 682.003 L1790.09 682.003 L1789.53 682.003 L1788.98 682.003 L1788.42 682.003 L1787.86 682.003 L1787.3 682.003 L1786.74 682.003 L1786.18 682.003 L1785.62 682.003 L1785.06 682.003 L1784.5 682.003 L1783.94 682.003 L1783.38 682.003 L1782.82 682.003 L1782.26 682.003 L1781.71 682.003 L1781.15 682.003 L1780.59 682.003 L1780.03 682.003 L1779.47 682.003 L1778.91 682.003 L1778.35 682.003 L1777.79 682.003 L1777.23 682.003 L1776.67 682.003 L1776.11 682.003 L1775.55 682.003 L1774.99 682.003 L1774.43 682.003 L1773.88 682.003 L1773.32 682.003 L1772.76 682.003 L1772.2 682.003 L1771.64 682.003 L1771.08 682.003 L1770.52 682.003 L1769.96 682.003 L1769.4 682.003 L1768.84 682.003 L1768.28 682.003 L1767.72 682.003 L1767.16 682.003 L1766.61 682.003 L1766.05 682.003 L1765.49 682.003 L1764.93 682.003 L1764.37 682.003 L1763.81 682.003 L1763.25 682.003 L1762.69 682.003 L1762.13 682.003 L1761.57 682.003 L1761.01 682.003 L1760.45 682.003 L1759.89 682.003 L1759.34 682.003 L1758.78 682.003 L1758.22 682.003 L1757.66 682.003 L1757.1 682.003 L1756.54 682.003 L1755.98 682.003 L1755.42 682.003 L1754.86 682.003 L1754.3 682.003 L1753.74 682.003 L1753.18 682.003 L1752.62 682.003 L1752.06 682.003 L1751.51 682.003 L1750.95 682.003 L1750.39 682.003 L1749.83 682.003 L1749.27 682.003 L1748.71 682.003 L1748.15 682.003 L1747.59 682.003 L1747.03 682.003 L1746.47 682.003 L1745.91 682.003 L1745.35 682.003 L1744.79 682.003 L1744.24 682.003 L1743.68 682.003 L1743.12 682.003 L1742.56 682.003 L1742 682.003 L1741.44 682.003 L1740.88 682.003 L1740.32 682.003 L1739.76 682.003 L1739.2 682.003 L1738.64 682.003 L1738.08 682.003 L1737.52 682.003 L1736.97 682.003 L1736.41 682.003 L1735.85 682.003 L1735.29 682.003 L1734.73 682.003 L1734.17 682.003 L1733.61 682.003 L1733.05 682.003 L1732.49 682.003 L1731.93 682.003 L1731.37 682.003 L1730.81 682.003 L1730.25 682.003 L1729.69 682.003 L1729.14 682.003 L1728.58 682.003 L1728.02 682.003 L1727.46 682.003 L1726.9 682.003 L1726.34 682.003 L1725.78 682.003 L1725.22 682.003 L1724.66 682.003 L1724.1 682.003 L1723.54 682.003 L1722.98 682.003 L1722.42 682.003 L1721.87 682.003 L1721.31 682.003 L1720.75 682.003 L1720.19 682.003 L1719.63 682.003 L1719.07 682.003 L1718.51 682.003 L1717.95 682.003 L1717.39 682.003 L1716.83 682.003 L1716.27 682.003 L1715.71 682.003 L1715.15 682.003 L1714.6 682.003 L1714.04 682.003 L1713.48 682.003 L1712.92 682.003 L1712.36 682.003 L1711.8 682.003 L1711.24 682.003 L1710.68 682.003 L1710.12 682.003 L1709.56 682.003 L1709 682.003 L1708.44 682.003 L1707.88 682.003 L1707.32 682.003 L1706.77 682.003 L1706.21 682.003 L1705.65 682.003 L1705.09 682.003 L1704.53 682.003 L1703.97 682.003 L1703.41 682.003 L1702.85 682.003 L1702.29 682.003 L1701.73 682.003 L1701.17 682.003 L1700.61 682.003 L1700.05 682.003 L1699.5 682.003 L1698.94 682.003 L1698.38 682.003 L1697.82 682.003 L1697.26 682.003 L1696.7 682.003 L1696.14 682.003 L1695.58 682.003 L1695.02 682.003 L1694.46 682.003 L1693.9 682.003 L1693.34 682.003 L1692.78 682.003 L1692.23 682.003 L1691.67 682.003 L1691.11 682.003 L1690.55 682.003 L1689.99 682.003 L1689.43 682.003 L1688.87 682.003 L1688.31 682.003 L1687.75 682.003 L1687.19 682.003 L1686.63 682.003 L1686.07 682.003 L1685.51 682.003 L1684.95 682.003 L1684.4 682.003 L1683.84 682.003 L1683.28 682.003 L1682.72 682.003 L1682.16 682.003 L1681.6 682.003 L1681.04 682.003 L1680.48 682.003 L1679.92 682.003 L1679.36 682.003 L1678.8 682.003 L1678.24 682.003 L1677.68 682.003 L1677.13 682.003 L1676.57 682.003 L1676.01 682.003 L1675.45 682.003 L1674.89 682.003 L1674.33 682.003 L1673.77 682.003 L1673.21 682.003 L1672.65 682.003 L1672.09 682.003 L1671.53 682.003 L1670.97 682.003 L1670.41 682.003 L1669.85 682.003 L1669.3 682.003 L1668.74 682.003 L1668.18 682.003 L1667.62 682.003 L1667.06 682.003 L1666.5 682.003 L1665.94 682.003 L1665.38 682.003 L1664.82 682.003 L1664.26 682.003 L1663.7 682.003 L1663.14 682.003 L1662.58 682.003 L1662.03 682.003 L1661.47 682.003 L1660.91 682.003 L1660.35 682.003 L1659.79 682.003 L1659.23 682.003 L1658.67 682.003 L1658.11 682.003 L1657.55 682.003 L1656.99 682.003 L1656.43 682.003 L1655.87 682.003 L1655.31 682.003 L1654.76 682.003 L1654.2 682.003 L1653.64 682.003 L1653.08 682.003 L1652.52 682.003 L1651.96 682.003 L1651.4 682.003 L1650.84 682.003 L1650.28 682.003 L1649.72 682.003 L1649.16 682.003 L1648.6 682.003 L1648.04 682.003 L1647.48 682.003 L1646.93 682.003 L1646.37 682.003 L1645.81 682.003 L1645.25 682.003 L1644.69 682.003 L1644.13 682.003 L1643.57 682.003 L1643.01 682.003 L1642.45 682.003 L1641.89 682.003 L1641.33 682.003 L1640.77 682.003 L1640.21 682.003 L1639.66 682.003 L1639.1 682.003 L1638.54 682.003 L1637.98 682.003 L1637.42 682.003 L1636.86 682.003 L1636.3 682.003 L1635.74 682.003 L1635.18 682.003 L1634.62 682.003 L1634.06 682.003 L1633.5 682.003 L1632.94 682.003 L1632.39 682.003 L1631.83 682.003 L1631.27 682.003 L1630.71 682.003 L1630.15 682.003 L1629.59 682.003 L1629.03 682.003 L1628.47 682.003 L1627.91 682.003 L1627.35 682.003 L1626.79 682.003 L1626.23 682.003 L1625.67 682.003 L1625.11 682.003 L1624.56 682.003 L1624 682.003 L1623.44 682.003 L1622.88 682.003 L1622.32 682.003 L1621.76 682.003 L1621.2 682.003 L1620.64 682.003 L1620.08 682.003 L1619.52 682.003 L1618.96 682.003 L1618.4 682.003 L1617.84 682.003 L1617.29 682.003 L1616.73 682.003 L1616.17 682.003 L1615.61 682.003 L1615.05 682.003 L1614.49 682.003 L1613.93 682.003 L1613.37 682.003 L1612.81 682.003 L1612.25 682.003 L1611.69 682.003 L1611.13 682.003 L1610.57 682.003 L1610.02 682.003 L1609.46 682.003 L1608.9 682.003 L1608.34 682.003 L1607.78 682.003 L1607.22 682.003 L1606.66 682.003 L1606.1 682.003 L1605.54 682.003 L1604.98 682.003 L1604.42 682.003 L1603.86 682.003 L1603.3 682.003 L1602.74 682.003 L1602.19 682.003 L1601.63 682.003 L1601.07 682.003 L1600.51 682.003 L1599.95 682.003 L1599.39 682.003 L1598.83 682.003 L1598.27 682.003 L1597.71 682.003 L1597.15 682.003 L1596.59 682.003 L1596.03 682.003 L1595.47 682.003 L1594.92 682.003 L1594.36 682.003 L1593.8 682.003 L1593.24 682.003 L1592.68 682.003 L1592.12 682.003 L1591.56 682.003 L1591 682.003 L1590.44 682.003 L1589.88 682.003 L1589.32 682.003 L1588.76 682.003 L1588.2 682.003 L1587.65 682.003 L1587.09 682.003 L1586.53 682.003 L1585.97 682.003 L1585.41 682.003 L1584.85 682.003 L1584.29 682.003 L1583.73 682.003 L1583.17 682.003 L1582.61 682.003 L1582.05 682.003 L1581.49 682.003 L1580.93 682.003 L1580.37 682.003 L1579.82 682.003 L1579.26 682.003 L1578.7 682.003 L1578.14 682.003 L1577.58 682.003 L1577.02 682.003 L1576.46 682.003 L1575.9 682.003 L1575.34 682.003 L1574.78 682.003 L1574.22 682.003 L1573.66 682.003 L1573.1 682.003 L1572.55 682.003 L1571.99 682.003 L1571.43 682.003 L1570.87 682.003 L1570.31 682.003 L1569.75 682.003 L1569.19 682.003 L1568.63 682.003 L1568.07 682.003 L1567.51 682.003 L1566.95 682.003 L1566.39 682.003 L1565.83 682.003 L1565.28 682.003 L1564.72 682.003 L1564.16 682.003 L1563.6 682.003 L1563.04 682.003 L1562.48 682.003 L1561.92 682.003 L1561.36 682.003 L1560.8 682.003 L1560.24 682.003 L1559.68 682.003 L1559.12 682.003 L1558.56 682.003 L1558 682.003 L1557.45 682.003 L1556.89 682.003 L1556.33 682.003 L1555.77 682.003 L1555.21 682.003 L1554.65 682.003 L1554.09 682.003 L1553.53 682.003 L1552.97 682.003 L1552.41 682.003 L1551.85 682.003 L1551.29 682.003 L1550.73 682.003 L1550.18 682.003 L1549.62 682.003 L1549.06 682.003 L1548.5 682.003 L1547.94 682.003 L1547.38 682.003 L1546.82 682.003 L1546.26 682.003 L1545.7 682.003 L1545.14 682.003 L1544.58 682.003 L1544.02 682.003 L1543.46 682.003 L1542.9 682.003 L1542.35 682.003 L1541.79 682.003 L1541.23 682.003 L1540.67 682.003 L1540.11 682.003 L1539.55 682.003 L1538.99 682.003 L1538.43 682.003 L1537.87 682.003 L1537.31 682.003 L1536.75 682.003 L1536.19 682.003 L1535.63 682.003 L1535.08 682.003 L1534.52 682.003 L1533.96 682.003 L1533.4 682.003 L1532.84 682.003 L1532.28 682.003 L1531.72 682.003 L1531.16 682.003 L1530.6 682.003 L1530.04 682.003 L1529.48 682.003 L1528.92 682.003 L1528.36 682.003 L1527.81 682.003 L1527.25 682.003 L1526.69 682.003 L1526.13 682.003 L1525.57 682.003 L1525.01 682.003 L1524.45 682.003 L1523.89 682.003 L1523.33 682.003 L1522.77 682.003 L1522.21 682.003 L1521.65 682.003 L1521.09 682.003 L1520.53 682.003 L1519.98 682.003 L1519.42 682.003 L1518.86 682.003 L1518.3 682.003 L1517.74 682.003 L1517.18 682.003 L1516.62 682.003 L1516.06 682.003 L1515.5 682.003 L1514.94 682.003 L1514.38 682.003 L1513.82 682.003 L1513.26 682.003 L1512.71 682.003 L1512.15 682.003 L1511.59 682.003 L1511.03 682.003 L1510.47 682.003 L1509.91 682.003 L1509.35 682.003 L1508.79 682.003 L1508.23 682.003 L1507.67 682.003 L1507.11 682.003 L1506.55 682.003 L1505.99 682.003 L1505.44 682.003 L1504.88 682.003 L1504.32 682.003 L1503.76 682.003 L1503.2 682.003 L1502.64 682.003 L1502.08 682.003 L1501.52 682.003 L1500.96 682.003 L1500.4 682.003 L1499.84 682.003 L1499.28 682.003 L1498.72 682.003 L1498.16 682.003 L1497.61 682.003 L1497.05 682.003 L1496.49 682.003 L1495.93 682.003 L1495.37 682.003 L1494.81 682.003 L1494.25 682.003 L1493.69 682.003 L1493.13 682.003 L1492.57 682.003 L1492.01 682.003 L1491.45 682.003 L1490.89 682.003 L1490.34 682.003 L1489.78 682.003 L1489.22 682.003 L1488.66 682.003 L1488.1 682.003 L1487.54 682.003 L1486.98 682.003 L1486.42 682.003 L1485.86 682.003 L1485.3 682.003 L1484.74 682.003 L1484.18 682.003 L1483.62 682.003 L1483.07 682.003 L1482.51 682.003 L1481.95 682.003 L1481.39 682.003 L1480.83 682.003 L1480.27 682.003 L1479.71 682.003 L1479.15 682.003 L1478.59 682.003 L1478.03 682.003 L1477.47 682.003 L1476.91 682.003 L1476.35 682.003 L1475.79 682.003 L1475.24 682.003 L1474.68 682.003 L1474.12 682.003 L1473.56 682.003 L1473 682.003 L1472.44 682.003 L1471.88 682.003 L1471.32 682.003 L1470.76 682.003 L1470.2 682.003 L1469.64 682.003 L1469.08 682.003 L1468.52 682.003 L1467.97 682.003 L1467.41 682.003 L1466.85 682.003 L1466.29 682.003 L1465.73 682.003 L1465.17 682.003 L1464.61 682.003 L1464.05 682.003 L1463.49 682.003 L1462.93 682.003 L1462.37 682.003 L1461.81 682.003 L1461.25 682.003 L1460.7 682.003 L1460.14 682.003 L1459.58 682.003 L1459.02 682.003 L1458.46 682.003 L1457.9 682.003 L1457.34 682.003 L1456.78 682.003 L1456.22 682.003 L1455.66 682.003 L1455.1 682.003 L1454.54 682.003 L1453.98 682.003 L1453.42 682.003 L1452.87 682.003 L1452.31 682.003 L1451.75 682.003 L1451.19 682.003 L1450.63 682.003 L1450.07 682.003 L1449.51 682.003 L1448.95 682.003 L1448.39 682.003 L1447.83 682.003 L1447.27 682.003 L1446.71 682.003 L1446.15 682.003 L1445.6 682.003 L1445.04 682.003 L1444.48 682.003 L1443.92 682.003 L1443.36 682.003 L1442.8 682.003 L1442.24 682.003 L1441.68 682.003 L1441.12 682.003 L1440.56 682.003 L1440 682.003 L1439.44 682.003 L1438.88 682.003 L1438.33 682.003 L1437.77 682.003 L1437.21 682.003 L1436.65 682.003 L1436.09 682.003 L1435.53 682.003 L1434.97 682.003 L1434.41 682.003 L1433.85 682.003 L1433.29 682.003 L1432.73 682.003 L1432.17 682.003 L1431.61 682.003 L1431.05 682.003 L1430.5 682.003 L1429.94 682.003 L1429.38 682.003 L1428.82 682.003 L1428.26 682.003 L1427.7 682.003 L1427.14 682.003 L1426.58 682.003 L1426.02 682.003 L1425.46 682.003 L1424.9 682.003 L1424.34 682.003 L1423.78 682.003 L1423.23 682.003 L1422.67 682.003 L1422.11 682.003 L1421.55 682.003 L1420.99 682.003 L1420.43 682.003 L1419.87 682.003 L1419.31 682.003 L1418.75 682.003 L1418.19 682.003 L1417.63 682.003 L1417.07 682.003 L1416.51 682.003 L1415.95 682.003 L1415.4 682.003 L1414.84 682.003 L1414.28 682.003 L1413.72 682.003 L1413.16 682.003 L1412.6 682.003 L1412.04 682.003 L1411.48 682.003 L1410.92 682.003 L1410.36 682.003 L1409.8 682.003 L1409.24 682.003 L1408.68 682.003 L1408.13 682.003 L1407.57 682.003 L1407.01 682.003 L1406.45 682.003 L1405.89 682.003 L1405.33 682.003 L1404.77 682.003 L1404.21 682.003 L1403.65 682.003 L1403.09 682.003 L1402.53 682.003 L1401.97 682.003 L1401.41 682.003 L1400.86 682.003 L1400.3 682.003 L1399.74 682.003 L1399.18 682.003 L1398.62 682.003 L1398.06 682.003 L1397.5 682.003 L1396.94 682.003 L1396.38 682.003 L1395.82 682.003 L1395.26 682.003 L1394.7 682.003 L1394.14 682.003 L1393.58 682.003 L1393.03 682.003 L1392.47 682.003 L1391.91 682.003 L1391.35 682.003 L1390.79 682.003 L1390.23 682.003 L1389.67 682.003 L1389.11 682.003 L1388.55 682.003 L1387.99 682.003 L1387.43 682.003 L1386.87 682.003 L1386.31 682.003 L1385.76 682.003 L1385.2 682.003 L1384.64 682.003 L1384.08 682.003 L1383.52 682.003 L1382.96 682.003 L1382.4 682.003 L1381.84 682.003 L1381.28 682.003 L1380.72 682.003 L1380.16 682.003 L1379.6 682.003 L1379.04 682.003 L1378.49 682.003 L1377.93 682.003 L1377.37 682.003 L1376.81 682.003 L1376.25 682.003 L1375.69 682.003 L1375.13 682.003 L1374.57 682.003 L1374.01 682.003 L1373.45 682.003 L1372.89 682.003 L1372.33 682.003 L1371.77 682.003 L1371.21 682.003 L1370.66 682.003 L1370.1 682.003 L1369.54 682.003 L1368.98 682.003 L1368.42 682.003 L1367.86 682.003 L1367.3 682.003 L1366.74 682.003 L1366.18 682.003 L1365.62 682.003 L1365.06 682.003 L1364.5 682.003 L1363.94 682.003 L1363.39 682.003 L1362.83 682.003 L1362.27 682.003 L1361.71 682.003 L1361.15 682.003 L1360.59 682.003 L1360.03 682.003 L1359.47 682.003 L1358.91 682.003 L1358.35 682.003 L1357.79 682.003 L1357.23 682.003 L1356.67 682.003 L1356.12 682.003 L1355.56 682.003 L1355 682.003 L1354.44 682.003 L1353.88 682.003 L1353.32 682.003 L1352.76 682.003 L1352.2 682.003 L1351.64 682.003 L1351.08 682.003 L1350.52 682.003 L1349.96 682.003 L1349.4 682.003 L1348.84 682.003 L1348.29 682.003 L1347.73 682.003 L1347.17 682.003 L1346.61 682.003 L1346.05 682.003 L1345.49 682.003 L1344.93 682.003 L1344.37 682.003 L1343.81 682.003 L1343.25 682.003 L1342.69 682.003 L1342.13 682.003 L1341.57 682.003 L1341.02 682.003 L1340.46 682.003 L1339.9 682.003 L1339.34 682.003 L1338.78 682.003 L1338.22 682.003 L1337.66 682.003 L1337.1 682.003 L1336.54 682.003 L1335.98 682.003 L1335.42 682.003 L1334.86 682.003 L1334.3 682.003 L1333.75 682.003 L1333.19 682.003 L1332.63 682.003 L1332.07 682.003 L1331.51 682.003 L1330.95 682.003 L1330.39 682.003 L1329.83 682.003 L1329.27 682.003 L1328.71 682.003 L1328.15 682.003 L1327.59 682.003 L1327.03 682.003 L1326.47 682.003 L1325.92 682.003 L1325.36 682.003 L1324.8 682.003 L1324.24 682.003 L1323.68 682.003 L1323.12 682.003 L1322.56 682.003 L1322 682.003 L1321.44 682.003 L1320.88 682.003 L1320.32 682.003 L1319.76 682.003 L1319.2 682.003 L1318.65 682.003 L1318.09 682.003 L1317.53 682.003 L1316.97 682.003 L1316.41 682.003 L1315.85 682.003 L1315.29 682.003 L1314.73 682.003 L1314.17 682.003 L1313.61 682.003 L1313.05 682.003 L1312.49 682.003 L1311.93 682.003 L1311.38 682.003 L1310.82 682.003 L1310.26 682.003 L1309.7 682.003 L1309.14 682.003 L1308.58 682.003 L1308.02 682.003 L1307.46 682.003 L1306.9 682.003 L1306.34 682.003 L1305.78 682.003 L1305.22 682.003 L1304.66 682.003 L1304.1 682.003 L1303.55 682.003 L1302.99 682.003 L1302.43 682.003 L1301.87 682.003 L1301.31 682.003 L1300.75 682.003 L1300.19 682.003 L1299.63 682.003 L1299.07 682.003 L1298.51 682.003 L1297.95 682.003 L1297.39 682.003 L1296.83 682.003 L1296.28 682.003 L1295.72 682.003 L1295.16 682.003 L1294.6 682.003 L1294.04 682.003 L1293.48 682.003 L1292.92 682.003 L1292.36 682.003 L1291.8 682.003 L1291.24 682.003 L1290.68 682.003 L1290.12 682.003 L1289.56 682.003 L1289 682.003 L1288.45 682.003 L1287.89 682.003 L1287.33 682.003 L1286.77 682.003 L1286.21 682.003 L1285.65 682.003 L1285.09 682.003 L1284.53 682.003 L1283.97 682.003 L1283.41 682.003 L1282.85 682.003 L1282.29 682.003 L1281.73 682.003 L1281.18 682.003 L1280.62 682.003 L1280.06 682.003 L1279.5 682.003 L1278.94 682.003 L1278.38 682.003 L1277.82 682.003 L1277.26 682.003 L1276.7 682.003 L1276.14 682.003 L1275.58 682.003 L1275.02 682.003 L1274.46 682.003 L1273.91 682.003 L1273.35 682.003 L1272.79 682.003 L1272.23 682.003 L1271.67 682.003 L1271.11 682.003 L1270.55 682.003 L1269.99 682.003 L1269.43 682.003 L1268.87 682.003 L1268.31 682.003 L1267.75 682.003 L1267.19 682.003 L1266.63 682.003 L1266.08 682.003 L1265.52 682.003 L1264.96 682.003 L1264.4 682.003 L1263.84 682.003 L1263.28 682.003 L1262.72 682.003 L1262.16 682.003 L1261.6 682.003 L1261.04 682.003 L1260.48 682.003 L1259.92 682.003 L1259.36 682.003 L1258.81 682.003 L1258.25 682.003 L1257.69 682.003 L1257.13 682.003 L1256.57 682.003 L1256.01 682.003 L1255.45 682.003 L1254.89 682.003 L1254.33 682.003 L1253.77 682.003 L1253.21 682.003 L1252.65 682.003 L1252.09 682.003 L1251.54 682.003 L1250.98 682.003 L1250.42 682.003 L1249.86 682.003 L1249.3 682.003 L1248.74 682.003 L1248.18 682.003 L1247.62 682.003 L1247.06 682.003 L1246.5 682.003 L1245.94 682.003 L1245.38 682.003 L1244.82 682.003 L1244.26 682.003 L1243.71 682.003 L1243.15 682.003 L1242.59 682.003 L1242.03 682.003 L1241.47 682.003 L1240.91 682.003 L1240.35 682.003 L1239.79 682.003 L1239.23 682.003 L1238.67 682.003 L1238.11 682.003 L1237.55 682.003 L1236.99 682.003 L1236.44 682.003 L1235.88 682.003 L1235.32 682.003 L1234.76 682.003 L1234.2 682.003 L1233.64 682.003 L1233.08 682.003 L1232.52 682.003 L1231.96 682.003 L1231.4 682.003 L1230.84 682.003 L1230.28 682.003 L1229.72 682.003 L1229.17 682.003 L1228.61 682.003 L1228.05 682.003 L1227.49 682.003 L1226.93 682.003 L1226.37 682.003 L1225.81 682.003 L1225.25 682.003 L1224.69 682.003 L1224.13 682.003 L1223.57 682.003 L1223.01 682.003 L1222.45 682.003 L1221.89 682.003 L1221.34 682.003 L1220.78 682.003 L1220.22 682.003 L1219.66 682.003 L1219.1 682.003 L1218.54 682.003 L1217.98 682.003 L1217.42 682.003 L1216.86 682.003 L1216.3 682.003 L1215.74 682.003 L1215.18 682.003 L1214.62 682.003 L1214.07 682.003 L1213.51 682.003 L1212.95 682.003 L1212.39 682.003 L1211.83 682.003 L1211.27 682.003 L1210.71 682.003 L1210.15 682.003 L1209.59 682.003 L1209.03 682.003 L1208.47 682.003 L1207.91 682.003 L1207.35 682.003 L1206.8 682.003 L1206.24 682.003 L1205.68 682.003 L1205.12 682.003 L1204.56 682.003 L1204 682.003 L1203.44 682.003 L1202.88 682.003 L1202.32 682.003 L1201.76 682.003 L1201.2 682.003 L1200.64 682.003 L1200.08 682.003 L1199.52 682.003 L1198.97 682.003 L1198.41 682.003 L1197.85 682.003 L1197.29 682.003 L1196.73 682.003 L1196.17 682.003 L1195.61 682.003 L1195.05 682.003 L1194.49 682.003 L1193.93 682.003 L1193.37 682.003 L1192.81 682.003 L1192.25 682.003 L1191.7 682.003 L1191.14 682.003 L1190.58 682.003 L1190.02 682.003 L1189.46 682.003 L1188.9 682.003 L1188.34 682.003 L1187.78 682.003 L1187.22 682.003 L1186.66 682.003 L1186.1 682.003 L1185.54 682.003 L1184.98 682.003 L1184.43 682.003 L1183.87 682.003 L1183.31 682.003 L1182.75 682.003 L1182.19 682.003 L1181.63 682.003 L1181.07 682.003 L1180.51 682.003 L1179.95 682.003 L1179.39 682.003 L1178.83 682.003 L1178.27 682.003 L1177.71 682.003 L1177.15 682.003 L1176.6 682.003 L1176.04 682.003 L1175.48 682.003 L1174.92 682.003 L1174.36 682.003 L1173.8 682.003 L1173.24 682.003 L1172.68 682.003 L1172.12 682.003 L1171.56 682.003 L1171 682.003 L1170.44 682.003 L1169.88 682.003 L1169.33 682.003 L1168.77 682.003 L1168.21 682.003 L1167.65 682.003 L1167.09 682.003 L1166.53 682.003 L1165.97 682.003 L1165.41 682.003 L1164.85 682.003 L1164.29 682.003 L1163.73 682.003 L1163.17 682.003 L1162.61 682.003 L1162.05 682.003 L1161.5 682.003 L1160.94 682.003 L1160.38 682.003 L1159.82 682.003 L1159.26 682.003 L1158.7 682.003 L1158.14 682.003 L1157.58 682.003 L1157.02 682.003 L1156.46 682.003 L1155.9 682.003 L1155.34 682.003 L1154.78 682.003 L1154.23 682.003 L1153.67 682.003 L1153.11 682.003 L1152.55 682.003 L1151.99 682.003 L1151.43 682.003 L1150.87 682.003 L1150.31 682.003 L1149.75 682.003 L1149.19 682.003 L1148.63 682.003 L1148.07 682.003 L1147.51 682.003 L1146.96 682.003 L1146.4 682.003 L1145.84 682.003 L1145.28 682.003 L1144.72 682.003 L1144.16 682.003 L1143.6 682.003 L1143.04 682.003 L1142.48 682.003 L1141.92 682.003 L1141.36 682.003 L1140.8 682.003 L1140.24 682.003 L1139.68 682.003 L1139.13 682.003 L1138.57 682.003 L1138.01 682.003 L1137.45 682.003 L1136.89 682.003 L1136.33 682.003 L1135.77 682.003 L1135.21 682.003 L1134.65 682.003 L1134.09 682.003 L1133.53 682.003 L1132.97 682.003 L1132.41 682.003 L1131.86 682.003 L1131.3 682.003 L1130.74 682.003 L1130.18 682.003 L1129.62 682.003 L1129.06 682.003 L1128.5 682.003 L1127.94 682.003 L1127.38 682.003 L1126.82 682.003 L1126.26 682.003 L1125.7 682.003 L1125.14 682.003 L1124.59 682.003 L1124.03 682.003 L1123.47 682.003 L1122.91 682.003 L1122.35 682.003 L1121.79 682.003 L1121.23 682.003 L1120.67 682.003 L1120.11 682.003 L1119.55 682.003 L1118.99 682.003 L1118.43 682.003 L1117.87 682.003 L1117.31 682.003 L1116.76 682.003 L1116.2 682.003 L1115.64 682.003 L1115.08 682.003 L1114.52 682.003 L1113.96 682.003 L1113.4 682.003 L1112.84 682.003 L1112.28 682.003 L1111.72 682.003 L1111.16 682.003 L1110.6 682.003 L1110.04 682.003 L1109.49 682.003 L1108.93 682.003 L1108.37 682.003 L1107.81 682.003 L1107.25 682.003 L1106.69 682.003 L1106.13 682.003 L1105.57 682.003 L1105.01 682.003 L1104.45 682.003 L1103.89 682.003 L1103.33 682.003 L1102.77 682.003 L1102.22 682.003 L1101.66 682.003 L1101.1 682.003 L1100.54 682.003 L1099.98 682.003 L1099.42 682.003 L1098.86 682.003 L1098.3 682.003 L1097.74 682.003 L1097.18 682.003 L1096.62 682.003 L1096.06 682.003 L1095.5 682.003 L1094.94 682.003 L1094.39 682.003 L1093.83 682.003 L1093.27 682.003 L1092.71 682.003 L1092.15 682.003 L1091.59 682.003 L1091.03 682.003 L1090.47 682.003 L1089.91 682.003 L1089.35 682.003 L1088.79 682.003 L1088.23 682.003 L1087.67 682.003 L1087.12 682.003 L1086.56 682.003 L1086 682.003 L1085.44 682.003 L1084.88 682.003 L1084.32 682.003 L1083.76 682.003 L1083.2 682.003 L1082.64 682.003 L1082.08 682.003 L1081.52 682.003 L1080.96 682.003 L1080.4 682.003 L1079.85 682.003 L1079.29 682.003 L1078.73 682.003 L1078.17 682.003 L1077.61 682.003 L1077.05 682.003 L1076.49 682.003 L1075.93 682.003 L1075.37 682.003 L1074.81 682.003 L1074.25 682.003 L1073.69 682.003 L1073.13 682.003 L1072.57 682.003 L1072.02 682.003 L1071.46 682.003 L1070.9 682.003 L1070.34 682.003 L1069.78 682.003 L1069.22 682.003 L1068.66 682.003 L1068.1 682.003 L1067.54 682.003 L1066.98 682.003 L1066.42 682.003 L1065.86 682.003 L1065.3 682.003 L1064.75 682.003 L1064.19 682.003 L1063.63 682.003 L1063.07 682.003 L1062.51 682.003 L1061.95 682.003 L1061.39 682.003 L1060.83 682.003 L1060.27 682.003 L1059.71 682.003 L1059.15 682.003 L1058.59 682.003 L1058.03 682.003 L1057.48 682.003 L1056.92 682.003 L1056.36 682.003 L1055.8 682.003 L1055.24 682.003 L1054.68 682.003 L1054.12 682.003 L1053.56 682.003 L1053 682.003 L1052.44 682.003 L1051.88 682.003 L1051.32 682.003 L1050.76 682.003 L1050.2 682.003 L1049.65 682.003 L1049.09 682.003 L1048.53 682.003 L1047.97 682.003 L1047.41 682.003 L1046.85 682.003 L1046.29 682.003 L1045.73 682.003 L1045.17 682.003 L1044.61 682.003 L1044.05 682.003 L1043.49 682.003 L1042.93 682.003 L1042.38 682.003 L1041.82 682.003 L1041.26 682.003 L1040.7 682.003 L1040.14 682.003 L1039.58 682.003 L1039.02 682.003 L1038.46 682.003 L1037.9 682.003 L1037.34 682.003 L1036.78 682.003 L1036.22 682.003 L1035.66 682.003 L1035.1 682.003 L1034.55 682.003 L1033.99 682.003 L1033.43 682.003 L1032.87 682.003 L1032.31 682.003 L1031.75 682.003 L1031.19 682.003 L1030.63 682.003 L1030.07 682.003 L1029.51 682.003 L1028.95 682.003 L1028.39 682.003 L1027.83 682.003 L1027.28 682.003 L1026.72 682.003 L1026.16 682.003 L1025.6 682.003 L1025.04 682.003 L1024.48 682.003 L1023.92 682.003 L1023.36 682.003 L1022.8 682.003 L1022.24 682.003 L1021.68 682.003 L1021.12 682.003 L1020.56 682.003 L1020.01 682.003 L1019.45 682.003 L1018.89 682.003 L1018.33 682.003 L1017.77 682.003 L1017.21 682.003 L1016.65 682.003 L1016.09 682.003 L1015.53 682.003 L1014.97 682.003 L1014.41 682.003 L1013.85 682.003 L1013.29 682.003 L1012.73 682.003 L1012.18 682.003 L1011.62 682.003 L1011.06 682.003 L1010.5 682.003 L1009.94 682.003 L1009.38 682.003 L1008.82 682.003 L1008.26 682.003 L1007.7 682.003 L1007.14 682.003 L1006.58 682.003 L1006.02 682.003 L1005.46 682.003 L1004.91 682.003 L1004.35 682.003 L1003.79 682.003 L1003.23 682.003 L1002.67 682.003 L1002.11 682.003 L1001.55 682.003 L1000.99 682.003 L1000.43 682.003 L999.872 682.003 L999.313 682.003 L998.754 682.003 L998.194 682.003 L997.635 682.003 L997.076 682.003 L996.517 682.003 L995.957 682.003 L995.398 682.003 L994.839 682.003 L994.28 682.003 L993.72 682.003 L993.161 682.003 L992.602 682.003 L992.043 682.003 L991.483 682.003 L990.924 682.003 L990.365 682.003 L989.806 682.003 L989.246 682.003 L988.687 682.003 L988.128 682.003 L987.569 682.003 L987.009 682.003 L986.45 682.003 L985.891 682.003 L985.332 682.003 L984.772 682.003 L984.213 682.003 L983.654 682.003 L983.095 682.003 L982.535 682.003 L981.976 682.003 L981.417 682.003 L980.858 682.003 L980.298 682.003 L979.739 682.003 L979.18 682.003 L978.621 682.003 L978.061 682.003 L977.502 682.003 L976.943 682.003 L976.384 682.003 L975.824 682.003 L975.265 682.003 L974.706 682.003 L974.147 682.003 L973.587 682.003 L973.028 682.003 L972.469 682.003 L971.91 682.003 L971.35 682.003 L970.791 682.003 L970.232 682.003 L969.673 682.003 L969.113 682.003 L968.554 682.003 L967.995 682.003 L967.436 682.003 L966.876 682.003 L966.317 682.003 L965.758 682.003 L965.199 682.003 L964.639 682.003 L964.08 682.003 L963.521 682.003 L962.962 682.003 L962.402 682.003 L961.843 682.003 L961.284 682.003 L960.725 682.003 L960.165 682.003 L959.606 682.003 L959.047 682.003 L958.488 682.003 L957.928 682.003 L957.369 682.003 L956.81 682.003 L956.251 682.003 L955.691 682.003 L955.132 682.003 L954.573 682.003 L954.014 682.003 L953.454 682.003 L952.895 682.003 L952.336 682.003 L951.777 682.003 L951.217 682.003 L950.658 682.003 L950.099 682.003 L949.54 682.003 L948.98 682.003 L948.421 682.003 L947.862 682.003 L947.303 682.003 L946.743 682.003 L946.184 682.003 L945.625 682.003 L945.066 682.003 L944.506 682.003 L943.947 682.003 L943.388 682.003 L942.829 682.003 L942.269 682.003 L941.71 682.003 L941.151 682.003 L940.592 682.003 L940.032 682.003 L939.473 682.003 L938.914 682.003 L938.355 682.003 L937.795 682.003 L937.236 682.003 L936.677 682.003 L936.118 682.003 L935.558 682.003 L934.999 682.003 L934.44 682.003 L933.881 682.003 L933.321 682.003 L932.762 682.003 L932.203 682.003 L931.644 682.003 L931.084 682.003 L930.525 682.003 L929.966 682.003 L929.406 682.003 L928.847 682.003 L928.288 682.003 L927.729 682.003 L927.169 682.003 L926.61 682.003 L926.051 682.003 L925.492 682.003 L924.932 682.003 L924.373 682.003 L923.814 682.003 L923.255 682.003 L922.695 682.003 L922.136 682.003 L921.577 682.003 L921.018 682.003 L920.458 682.003 L919.899 682.003 L919.34 682.003 L918.781 682.003 L918.221 682.003 L917.662 682.003 L917.103 682.003 L916.544 682.003 L915.984 682.003 L915.425 682.003 L914.866 682.003 L914.307 682.003 L913.747 682.003 L913.188 682.003 L912.629 682.003 L912.07 682.003 L911.51 682.003 L910.951 682.003 L910.392 682.003 L909.833 682.003 L909.273 682.003 L908.714 682.003 L908.155 682.003 L907.596 682.003 L907.036 682.003 L906.477 682.003 L905.918 682.003 L905.359 682.003 L904.799 682.003 L904.24 682.003 L903.681 682.003 L903.122 682.003 L902.562 682.003 L902.003 682.003 L901.444 682.003 L900.885 682.003 L900.325 682.003 L899.766 682.003 L899.207 682.003 L898.648 682.003 L898.088 682.003 L897.529 682.003 L896.97 682.003 L896.411 682.003 L895.851 682.003 L895.292 682.003 L894.733 682.003 L894.174 682.003 L893.614 682.003 L893.055 682.003 L892.496 682.003 L891.937 682.003 L891.377 682.003 L890.818 682.003 L890.259 682.003 L889.7 682.003 L889.14 682.003 L888.581 682.003 L888.022 682.003 L887.463 682.003 L886.903 682.003 L886.344 682.003 L885.785 682.003 L885.226 682.003 L884.666 682.003 L884.107 682.003 L883.548 682.003 L882.989 682.003 L882.429 682.003 L881.87 682.003 L881.311 682.003 L880.752 682.003 L880.192 682.003 L879.633 682.003 L879.074 682.003 L878.515 682.003 L877.955 682.003 L877.396 682.003 L876.837 682.003 L876.278 682.003 L875.718 682.003 L875.159 682.003 L874.6 682.003 L874.041 682.003 L873.481 682.003 L872.922 682.003 L872.363 682.003 L871.804 682.003 L871.244 682.003 L870.685 682.003 L870.126 682.003 L869.567 682.003 L869.007 682.003 L868.448 682.003 L867.889 682.003 L867.33 682.003 L866.77 682.003 L866.211 682.003 L865.652 682.003 L865.093 682.003 L864.533 682.003 L863.974 682.003 L863.415 682.003 L862.856 682.003 L862.296 682.003 L861.737 682.003 L861.178 682.003 L860.619 682.003 L860.059 682.003 L859.5 682.003 L858.941 682.003 L858.382 682.003 L857.822 682.003 L857.263 682.003 L856.704 682.003 L856.145 682.003 L855.585 682.003 L855.026 682.003 L854.467 682.003 L853.908 682.003 L853.348 682.003 L852.789 682.003 L852.23 682.003 L851.671 682.003 L851.111 682.003 L850.552 682.003 L849.993 682.003 L849.434 682.003 L848.874 682.003 L848.315 682.003 L847.756 682.003 L847.197 682.003 L846.637 682.003 L846.078 682.003 L845.519 682.003 L844.96 682.003 L844.4 682.003 L843.841 682.003 L843.282 682.003 L842.723 682.003 L842.163 682.003 L841.604 682.003 L841.045 682.003 L840.486 682.003 L839.926 682.003 L839.367 682.003 L838.808 682.003 L838.249 682.003 L837.689 682.003 L837.13 682.003 L836.571 682.003 L836.012 682.003 L835.452 682.003 L834.893 682.003 L834.334 682.003 L833.775 682.003 L833.215 682.003 L832.656 682.003 L832.097 682.003 L831.538 682.003 L830.978 682.003 L830.419 682.003 L829.86 682.003 L829.301 682.003 L828.741 682.003 L828.182 682.003 L827.623 682.003 L827.064 682.003 L826.504 682.003 L825.945 682.003 L825.386 682.003 L824.827 682.003 L824.267 682.003 L823.708 682.003 L823.149 682.003 L822.59 682.003 L822.03 682.003 L821.471 682.003 L820.912 682.003 L820.353 682.003 L819.793 682.003 L819.234 682.003 L818.675 682.003 L818.116 682.003 L817.556 682.003 L816.997 682.003 L816.438 682.003 L815.879 682.003 L815.319 682.003 L814.76 682.003 L814.201 682.003 L813.642 682.003 L813.082 682.003 L812.523 682.003 L811.964 682.003 L811.405 682.003 L810.845 682.003 L810.286 682.003 L809.727 682.003 L809.168 682.003 L808.608 682.003 L808.049 682.003 L807.49 682.003 L806.931 682.003 L806.371 682.003 L805.812 682.003 L805.253 682.003 L804.693 682.003 L804.134 682.003 L803.575 682.003 L803.016 682.003 L802.456 682.003 L801.897 682.003 L801.338 682.003 L800.779 682.003 L800.219 682.003 L799.66 682.003 L799.101 682.003 L798.542 682.003 L797.982 682.003 L797.423 682.003 L796.864 682.003 L796.305 682.003 L795.745 682.003 L795.186 682.003 L794.627 682.003 L794.068 682.003 L793.508 682.003 L792.949 682.003 L792.39 682.003 L791.831 682.003 L791.271 682.003 L790.712 682.003 L790.153 682.003 L789.594 682.003 L789.034 682.003 L788.475 682.003 L787.916 682.003 L787.357 682.003 L786.797 682.003 L786.238 682.003 L785.679 682.003 L785.12 682.003 L784.56 682.003 L784.001 682.003 L783.442 682.003 L782.883 682.003 L782.323 682.003 L781.764 682.003 L781.205 682.003 L780.646 682.003 L780.086 682.003 L779.527 682.003 L778.968 682.003 L778.409 682.003 L777.849 682.003 L777.29 682.003 L776.731 682.003 L776.172 682.003 L775.612 682.003 L775.053 682.003 L774.494 682.003 L773.935 682.003 L773.375 682.003 L772.816 682.003 L772.257 682.003 L771.698 682.003 L771.138 682.003 L770.579 682.003 L770.02 682.003 L769.461 682.003 L768.901 682.003 L768.342 682.003 L767.783 682.003 L767.224 682.003 L766.664 682.003 L766.105 682.003 L765.546 682.003 L764.987 682.003 L764.427 682.003 L763.868 682.003 L763.309 682.003 L762.75 682.003 L762.19 682.003 L761.631 682.003 L761.072 682.003 L760.513 682.003 L759.953 682.003 L759.394 682.003 L758.835 682.003 L758.276 682.003 L757.716 682.003 L757.157 682.003 L756.598 682.003 L756.039 682.003 L755.479 682.003 L754.92 682.003 L754.361 682.003 L753.802 682.003 L753.242 682.003 L752.683 682.003 L752.124 682.003 L751.565 682.003 L751.005 682.003 L750.446 682.003 L749.887 682.003 L749.328 682.003 L748.768 682.003 L748.209 682.003 L747.65 682.003 L747.091 682.003 L746.531 682.003 L745.972 682.003 L745.413 682.003 L744.854 682.003 L744.294 682.003 L743.735 682.003 L743.176 682.003 L742.617 682.003 L742.057 682.003 L741.498 682.003 L740.939 682.003 L740.38 682.003 L739.82 682.003 L739.261 682.003 L738.702 682.003 L738.143 682.003 L737.583 682.003 L737.024 682.003 L736.465 682.003 L735.906 682.003 L735.346 682.003 L734.787 682.003 L734.228 682.003 L733.669 682.003 L733.109 682.003 L732.55 682.003 L731.991 682.003 L731.432 682.003 L730.872 682.003 L730.313 682.003 L729.754 682.003 L729.195 682.003 L728.635 682.003 L728.076 682.003 L727.517 682.003 L726.958 682.003 L726.398 682.003 L725.839 682.003 L725.28 682.003 L724.721 682.003 L724.161 682.003 L723.602 682.003 L723.043 682.003 L722.484 682.003 L721.924 682.003 L721.365 682.003 L720.806 682.003 L720.247 682.003  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.122 720.806,686.122 721.365,686.122 721.924,686.122 722.484,686.122 723.043,686.122 723.602,686.122 724.161,686.122 724.721,686.122 725.28,686.122 725.839,686.122 726.398,686.122 726.958,686.122 727.517,686.122 728.076,686.122 728.635,686.122 729.195,686.122 729.754,686.122 730.313,686.122 730.872,686.122 731.432,686.122 731.991,686.122 732.55,686.122 733.109,686.122 733.669,686.122 734.228,686.122 734.787,686.122 735.346,686.122 735.906,686.122 736.465,686.122 737.024,686.122 737.583,686.122 738.143,686.122 738.702,686.122 739.261,686.122 739.82,686.122 740.38,686.122 740.939,686.122 741.498,686.122 742.057,686.122 742.617,686.122 743.176,686.122 743.735,686.122 744.294,686.122 744.854,686.122 745.413,686.122 745.972,686.122 746.531,686.122 747.091,686.122 747.65,686.122 748.209,686.122 748.768,686.122 749.328,686.122 749.887,686.122 750.446,686.122 751.005,686.122 751.565,686.122 752.124,686.122 752.683,686.122 753.242,686.122 753.802,686.122 754.361,686.122 754.92,686.122 755.479,686.122 756.039,686.122 756.598,686.122 757.157,686.122 757.716,686.122 758.276,686.122 758.835,686.122 759.394,686.122 759.953,686.122 760.513,686.122 761.072,686.122 761.631,686.122 762.19,686.122 762.75,686.122 763.309,686.122 763.868,686.122 764.427,686.122 764.987,686.122 765.546,686.122 766.105,686.122 766.664,686.122 767.224,686.122 767.783,686.122 768.342,686.122 768.901,686.122 769.461,686.122 770.02,686.122 770.579,686.122 771.138,686.122 771.698,686.122 772.257,686.122 772.816,686.122 773.375,686.122 773.935,686.122 774.494,686.122 775.053,686.122 775.612,686.122 776.172,686.122 776.731,686.122 777.29,686.122 777.849,686.122 778.409,686.122 778.968,686.122 779.527,686.122 780.086,686.122 780.646,686.122 781.205,686.122 781.764,686.122 782.323,686.122 782.883,686.122 783.442,686.122 784.001,686.122 784.56,686.122 785.12,686.122 785.679,686.122 786.238,686.122 786.797,686.122 787.357,686.122 787.916,686.122 788.475,686.122 789.034,686.122 789.594,686.122 790.153,686.122 790.712,686.122 791.271,686.122 791.831,686.122 792.39,686.122 792.949,686.122 793.508,686.122 794.068,686.122 794.627,686.122 795.186,686.122 795.745,686.122 796.305,686.122 796.864,686.122 797.423,686.122 797.982,686.122 798.542,686.122 799.101,686.122 799.66,686.122 800.219,686.122 800.779,686.122 801.338,686.122 801.897,686.122 802.456,686.122 803.016,686.122 803.575,686.122 804.134,686.122 804.693,686.122 805.253,686.122 805.812,686.122 806.371,686.122 806.931,686.122 807.49,686.122 808.049,686.122 808.608,686.122 809.168,686.122 809.727,686.122 810.286,686.122 810.845,686.122 811.405,686.122 811.964,686.122 812.523,686.122 813.082,686.122 813.642,686.122 814.201,686.122 814.76,686.122 815.319,686.122 815.879,686.122 816.438,686.122 816.997,686.122 817.556,686.122 818.116,686.122 818.675,686.122 819.234,686.122 819.793,686.122 820.353,686.122 820.912,686.122 821.471,686.122 822.03,686.122 822.59,686.122 823.149,686.122 823.708,686.122 824.267,686.122 824.827,686.122 825.386,686.122 825.945,686.122 826.504,686.122 827.064,686.122 827.623,686.122 828.182,686.122 828.741,686.122 829.301,686.122 829.86,686.122 830.419,686.122 830.978,686.122 831.538,686.122 832.097,686.122 832.656,686.122 833.215,686.122 833.775,686.122 834.334,686.122 834.893,686.122 835.452,686.122 836.012,686.122 836.571,686.122 837.13,686.122 837.689,686.122 838.249,686.122 838.808,686.122 839.367,686.122 839.926,686.122 840.486,686.122 841.045,686.122 841.604,686.122 842.163,686.122 842.723,686.122 843.282,686.122 843.841,686.122 844.4,686.122 844.96,686.122 845.519,686.122 846.078,686.122 846.637,686.122 847.197,686.122 847.756,686.122 848.315,686.122 848.874,686.122 849.434,686.122 849.993,686.122 850.552,686.122 851.111,686.122 851.671,686.122 852.23,686.122 852.789,686.122 853.348,686.122 853.908,686.122 854.467,686.122 855.026,686.122 855.585,686.122 856.145,686.122 856.704,686.122 857.263,686.122 857.822,686.122 858.382,686.122 858.941,686.122 859.5,686.122 860.059,686.122 860.619,686.122 861.178,686.122 861.737,686.122 862.296,686.122 862.856,686.122 863.415,686.122 863.974,686.122 864.533,686.122 865.093,686.122 865.652,686.122 866.211,686.122 866.77,686.122 867.33,686.122 867.889,686.122 868.448,686.122 869.007,686.122 869.567,686.122 870.126,686.122 870.685,686.122 871.244,686.122 871.804,686.122 872.363,686.122 872.922,686.122 873.481,686.122 874.041,686.122 874.6,686.122 875.159,686.122 875.718,686.122 876.278,686.122 876.837,686.122 877.396,686.122 877.955,686.122 878.515,686.122 879.074,686.122 879.633,686.122 880.192,686.122 880.752,686.122 881.311,686.122 881.87,686.122 882.429,686.122 882.989,686.122 883.548,686.122 884.107,686.122 884.666,686.122 885.226,686.122 885.785,686.122 886.344,686.122 886.903,686.122 887.463,686.122 888.022,686.122 888.581,686.122 889.14,686.122 889.7,686.122 890.259,686.122 890.818,686.122 891.377,686.122 891.937,686.122 892.496,686.122 893.055,686.122 893.614,686.122 894.174,686.122 894.733,686.122 895.292,686.122 895.851,686.122 896.411,686.122 896.97,686.122 897.529,686.122 898.088,686.122 898.648,686.122 899.207,686.122 899.766,686.122 900.325,686.122 900.885,686.122 901.444,686.122 902.003,686.122 902.562,686.122 903.122,686.122 903.681,686.122 904.24,686.122 904.799,686.122 905.359,686.122 905.918,686.122 906.477,686.122 907.036,686.122 907.596,686.122 908.155,686.122 908.714,686.122 909.273,686.122 909.833,686.122 910.392,686.122 910.951,686.122 911.51,686.122 912.07,686.122 912.629,686.122 913.188,686.122 913.747,686.122 914.307,686.122 914.866,686.122 915.425,686.122 915.984,686.122 916.544,686.122 917.103,686.122 917.662,686.122 918.221,686.122 918.781,686.122 919.34,686.122 919.899,686.122 920.458,686.122 921.018,686.122 921.577,686.122 922.136,686.122 922.695,686.122 923.255,686.122 923.814,686.122 924.373,686.122 924.932,686.122 925.492,686.122 926.051,686.122 926.61,686.122 927.169,686.122 927.729,686.122 928.288,686.122 928.847,686.122 929.406,686.122 929.966,686.122 930.525,686.122 931.084,686.122 931.644,686.122 932.203,686.122 932.762,686.122 933.321,686.122 933.881,686.122 934.44,686.122 934.999,686.122 935.558,686.122 936.118,686.122 936.677,686.122 937.236,686.122 937.795,686.122 938.355,686.122 938.914,686.122 939.473,686.122 940.032,686.122 940.592,686.122 941.151,686.122 941.71,686.122 942.269,686.122 942.829,686.122 943.388,686.122 943.947,686.122 944.506,686.122 945.066,686.122 945.625,686.122 946.184,686.122 946.743,686.122 947.303,686.122 947.862,686.122 948.421,686.122 948.98,686.122 949.54,686.122 950.099,686.122 950.658,686.122 951.217,686.122 951.777,686.122 952.336,686.122 952.895,686.122 953.454,686.122 954.014,686.122 954.573,686.122 955.132,686.122 955.691,686.122 956.251,686.122 956.81,686.122 957.369,686.122 957.928,686.122 958.488,686.122 959.047,686.122 959.606,686.122 960.165,686.122 960.725,686.122 961.284,686.122 961.843,686.122 962.402,686.122 962.962,686.122 963.521,686.122 964.08,686.122 964.639,686.122 965.199,686.122 965.758,686.122 966.317,686.122 966.876,686.122 967.436,686.122 967.995,686.122 968.554,686.122 969.113,686.122 969.673,686.122 970.232,686.122 970.791,686.122 971.35,686.122 971.91,686.122 972.469,686.122 973.028,686.122 973.587,686.122 974.147,686.122 974.706,686.122 975.265,686.122 975.824,686.122 976.384,686.122 976.943,686.122 977.502,686.122 978.061,686.122 978.621,686.122 979.18,686.122 979.739,686.122 980.298,686.122 980.858,686.122 981.417,686.122 981.976,686.122 982.535,686.122 983.095,686.122 983.654,686.122 984.213,686.122 984.772,686.122 985.332,686.122 985.891,686.122 986.45,686.122 987.009,686.122 987.569,686.122 988.128,686.122 988.687,686.122 989.246,686.122 989.806,686.122 990.365,686.122 990.924,686.122 991.483,686.122 992.043,686.122 992.602,686.122 993.161,686.122 993.72,686.122 994.28,686.122 994.839,686.122 995.398,686.122 995.957,686.122 996.517,686.122 997.076,686.122 997.635,686.122 998.194,686.122 998.754,686.122 999.313,686.122 999.872,686.122 1000.43,686.122 1000.99,686.122 1001.55,686.122 1002.11,686.122 1002.67,686.122 1003.23,686.122 1003.79,686.122 1004.35,686.122 1004.91,686.122 1005.46,686.122 1006.02,686.122 1006.58,686.122 1007.14,686.122 1007.7,686.122 1008.26,686.122 1008.82,686.122 1009.38,686.122 1009.94,686.122 1010.5,686.122 1011.06,686.122 1011.62,686.122 1012.18,686.122 1012.73,686.122 1013.29,686.122 1013.85,686.122 1014.41,686.122 1014.97,686.122 1015.53,686.122 1016.09,686.122 1016.65,686.122 1017.21,686.122 1017.77,686.122 1018.33,686.122 1018.89,686.122 1019.45,686.122 1020.01,686.122 1020.56,686.122 1021.12,686.122 1021.68,686.122 1022.24,686.122 1022.8,686.122 1023.36,686.122 1023.92,686.122 1024.48,686.122 1025.04,686.122 1025.6,686.122 1026.16,686.122 1026.72,686.122 1027.28,686.122 1027.83,686.122 1028.39,686.122 1028.95,686.122 1029.51,686.122 1030.07,686.122 1030.63,686.122 1031.19,686.122 1031.75,686.122 1032.31,686.122 1032.87,686.122 1033.43,686.122 1033.99,686.122 1034.55,686.122 1035.1,686.122 1035.66,686.122 1036.22,686.122 1036.78,686.122 1037.34,686.122 1037.9,686.122 1038.46,686.122 1039.02,686.122 1039.58,686.122 1040.14,686.122 1040.7,686.122 1041.26,686.122 1041.82,686.122 1042.38,686.122 1042.93,686.122 1043.49,686.122 1044.05,686.122 1044.61,686.122 1045.17,686.122 1045.73,686.122 1046.29,686.122 1046.85,686.122 1047.41,686.122 1047.97,686.122 1048.53,686.122 1049.09,686.122 1049.65,686.122 1050.2,686.122 1050.76,686.122 1051.32,686.122 1051.88,686.122 1052.44,686.122 1053,686.122 1053.56,686.122 1054.12,686.122 1054.68,686.122 1055.24,686.122 1055.8,686.122 1056.36,686.122 1056.92,686.122 1057.48,686.122 1058.03,686.122 1058.59,686.122 1059.15,686.122 1059.71,686.122 1060.27,686.122 1060.83,686.122 1061.39,686.122 1061.95,686.122 1062.51,686.122 1063.07,686.122 1063.63,686.122 1064.19,686.122 1064.75,686.122 1065.3,686.122 1065.86,686.122 1066.42,686.122 1066.98,686.122 1067.54,686.122 1068.1,686.122 1068.66,686.122 1069.22,686.122 1069.78,686.122 1070.34,686.122 1070.9,686.122 1071.46,686.122 1072.02,686.122 1072.57,686.122 1073.13,686.122 1073.69,686.122 1074.25,686.122 1074.81,686.122 1075.37,686.122 1075.93,686.122 1076.49,686.122 1077.05,686.122 1077.61,686.122 1078.17,686.122 1078.73,686.122 1079.29,686.122 1079.85,686.122 1080.4,686.122 1080.96,686.122 1081.52,686.122 1082.08,686.122 1082.64,686.122 1083.2,686.122 1083.76,686.122 1084.32,686.122 1084.88,686.122 1085.44,686.122 1086,686.122 1086.56,686.122 1087.12,686.122 1087.67,686.122 1088.23,686.122 1088.79,686.122 1089.35,686.122 1089.91,686.122 1090.47,686.122 1091.03,686.122 1091.59,686.122 1092.15,686.122 1092.71,686.122 1093.27,686.122 1093.83,686.122 1094.39,686.122 1094.94,686.122 1095.5,686.122 1096.06,686.122 1096.62,686.122 1097.18,686.122 1097.74,686.122 1098.3,686.122 1098.86,686.122 1099.42,686.122 1099.98,686.122 1100.54,686.122 1101.1,686.122 1101.66,686.122 1102.22,686.122 1102.77,686.122 1103.33,686.122 1103.89,686.122 1104.45,686.122 1105.01,686.122 1105.57,686.122 1106.13,686.122 1106.69,686.122 1107.25,686.122 1107.81,686.122 1108.37,686.122 1108.93,686.122 1109.49,686.122 1110.04,686.122 1110.6,686.122 1111.16,686.122 1111.72,686.122 1112.28,686.122 1112.84,686.122 1113.4,686.122 1113.96,686.122 1114.52,686.122 1115.08,686.122 1115.64,686.122 1116.2,686.122 1116.76,686.122 1117.31,686.122 1117.87,686.122 1118.43,686.122 1118.99,686.122 1119.55,686.122 1120.11,686.122 1120.67,686.122 1121.23,686.122 1121.79,686.122 1122.35,686.122 1122.91,686.122 1123.47,686.122 1124.03,686.122 1124.59,686.122 1125.14,686.122 1125.7,686.122 1126.26,686.122 1126.82,686.122 1127.38,686.122 1127.94,686.122 1128.5,686.122 1129.06,686.122 1129.62,686.122 1130.18,686.122 1130.74,686.122 1131.3,686.122 1131.86,686.122 1132.41,686.122 1132.97,686.122 1133.53,686.122 1134.09,686.122 1134.65,686.122 1135.21,686.122 1135.77,686.122 1136.33,686.122 1136.89,686.122 1137.45,686.122 1138.01,686.122 1138.57,686.122 1139.13,686.122 1139.68,686.122 1140.24,686.122 1140.8,686.122 1141.36,686.122 1141.92,686.122 1142.48,686.122 1143.04,686.122 1143.6,686.122 1144.16,686.122 1144.72,686.122 1145.28,686.122 1145.84,686.122 1146.4,686.122 1146.96,686.122 1147.51,686.122 1148.07,686.122 1148.63,686.122 1149.19,686.122 1149.75,686.122 1150.31,686.122 1150.87,686.122 1151.43,686.122 1151.99,686.122 1152.55,686.122 1153.11,686.122 1153.67,686.122 1154.23,686.122 1154.78,686.122 1155.34,686.122 1155.9,686.122 1156.46,686.122 1157.02,686.122 1157.58,686.122 1158.14,686.122 1158.7,686.122 1159.26,686.122 1159.82,686.122 1160.38,686.122 1160.94,686.122 1161.5,686.122 1162.05,686.122 1162.61,686.122 1163.17,686.122 1163.73,686.122 1164.29,686.122 1164.85,686.122 1165.41,686.122 1165.97,686.122 1166.53,686.122 1167.09,686.122 1167.65,686.122 1168.21,686.122 1168.77,686.122 1169.33,686.122 1169.88,686.122 1170.44,686.122 1171,686.122 1171.56,686.122 1172.12,686.122 1172.68,686.122 1173.24,686.122 1173.8,686.122 1174.36,686.122 1174.92,686.122 1175.48,686.122 1176.04,686.122 1176.6,686.122 1177.15,686.122 1177.71,686.122 1178.27,686.122 1178.83,686.122 1179.39,686.122 1179.95,686.122 1180.51,686.122 1181.07,686.122 1181.63,686.122 1182.19,686.122 1182.75,686.122 1183.31,686.122 1183.87,686.122 1184.43,686.122 1184.98,686.122 1185.54,686.122 1186.1,686.122 1186.66,686.122 1187.22,686.122 1187.78,686.122 1188.34,686.122 1188.9,686.122 1189.46,686.122 1190.02,686.122 1190.58,686.122 1191.14,686.122 1191.7,686.122 1192.25,686.122 1192.81,686.122 1193.37,686.122 1193.93,686.122 1194.49,686.122 1195.05,686.122 1195.61,686.122 1196.17,686.122 1196.73,686.122 1197.29,686.122 1197.85,686.122 1198.41,686.122 1198.97,686.122 1199.52,686.122 1200.08,686.122 1200.64,686.122 1201.2,686.122 1201.76,686.122 1202.32,686.122 1202.88,686.122 1203.44,686.122 1204,686.122 1204.56,686.122 1205.12,686.122 1205.68,686.122 1206.24,686.122 1206.8,686.122 1207.35,686.122 1207.91,686.122 1208.47,686.122 1209.03,686.122 1209.59,686.122 1210.15,686.122 1210.71,686.122 1211.27,686.122 1211.83,686.122 1212.39,686.122 1212.95,686.122 1213.51,686.122 1214.07,686.122 1214.62,686.122 1215.18,686.122 1215.74,686.122 1216.3,686.122 1216.86,686.122 1217.42,686.122 1217.98,686.122 1218.54,686.122 1219.1,686.122 1219.66,686.122 1220.22,686.122 1220.78,686.122 1221.34,686.122 1221.89,686.122 1222.45,686.122 1223.01,686.122 1223.57,686.122 1224.13,686.122 1224.69,686.122 1225.25,686.122 1225.81,686.122 1226.37,686.122 1226.93,686.122 1227.49,686.122 1228.05,686.122 1228.61,686.122 1229.17,686.122 1229.72,686.122 1230.28,686.122 1230.84,686.122 1231.4,686.122 1231.96,686.122 1232.52,686.122 1233.08,686.122 1233.64,686.122 1234.2,686.122 1234.76,686.122 1235.32,686.122 1235.88,686.122 1236.44,686.122 1236.99,686.122 1237.55,686.122 1238.11,686.122 1238.67,686.122 1239.23,686.122 1239.79,686.122 1240.35,686.122 1240.91,686.122 1241.47,686.122 1242.03,686.122 1242.59,686.122 1243.15,686.122 1243.71,686.122 1244.26,686.122 1244.82,686.122 1245.38,686.122 1245.94,686.122 1246.5,686.122 1247.06,686.122 1247.62,686.122 1248.18,686.122 1248.74,686.122 1249.3,686.122 1249.86,686.122 1250.42,686.122 1250.98,686.122 1251.54,686.122 1252.09,686.122 1252.65,686.122 1253.21,686.122 1253.77,686.122 1254.33,686.122 1254.89,686.122 1255.45,686.122 1256.01,686.122 1256.57,686.122 1257.13,686.122 1257.69,686.122 1258.25,686.122 1258.81,686.122 1259.36,686.122 1259.92,686.122 1260.48,686.122 1261.04,686.122 1261.6,686.122 1262.16,686.122 1262.72,686.122 1263.28,686.122 1263.84,686.122 1264.4,686.122 1264.96,686.122 1265.52,686.122 1266.08,686.122 1266.63,686.122 1267.19,686.122 1267.75,686.122 1268.31,686.122 1268.87,686.122 1269.43,686.122 1269.99,686.122 1270.55,686.122 1271.11,686.122 1271.67,686.122 1272.23,686.122 1272.79,686.122 1273.35,686.122 1273.91,686.122 1274.46,686.122 1275.02,686.122 1275.58,686.122 1276.14,686.122 1276.7,686.122 1277.26,686.122 1277.82,686.122 1278.38,686.122 1278.94,686.122 1279.5,686.122 1280.06,686.122 1280.62,686.122 1281.18,686.122 1281.73,686.122 1282.29,686.122 1282.85,686.122 1283.41,686.122 1283.97,686.122 1284.53,686.122 1285.09,686.122 1285.65,686.122 1286.21,686.122 1286.77,686.122 1287.33,686.122 1287.89,686.122 1288.45,686.122 1289,686.122 1289.56,686.122 1290.12,686.122 1290.68,686.122 1291.24,686.122 1291.8,686.122 1292.36,686.122 1292.92,686.122 1293.48,686.122 1294.04,686.122 1294.6,686.122 1295.16,686.122 1295.72,686.122 1296.28,686.122 1296.83,686.122 1297.39,686.122 1297.95,686.122 1298.51,686.122 1299.07,686.122 1299.63,686.122 1300.19,686.122 1300.75,686.122 1301.31,686.122 1301.87,686.122 1302.43,686.122 1302.99,686.122 1303.55,686.122 1304.1,686.122 1304.66,686.122 1305.22,686.122 1305.78,686.122 1306.34,686.122 1306.9,686.122 1307.46,686.122 1308.02,686.122 1308.58,686.122 1309.14,686.122 1309.7,686.122 1310.26,686.122 1310.82,686.122 1311.38,686.122 1311.93,686.122 1312.49,686.122 1313.05,686.122 1313.61,686.122 1314.17,686.122 1314.73,686.122 1315.29,686.122 1315.85,686.122 1316.41,686.122 1316.97,686.122 1317.53,686.122 1318.09,686.122 1318.65,686.122 1319.2,686.122 1319.76,686.122 1320.32,686.122 1320.88,686.122 1321.44,686.122 1322,686.122 1322.56,686.122 1323.12,686.122 1323.68,686.122 1324.24,686.122 1324.8,686.122 1325.36,686.122 1325.92,686.122 1326.47,686.122 1327.03,686.122 1327.59,686.122 1328.15,686.122 1328.71,686.122 1329.27,686.122 1329.83,686.122 1330.39,686.122 1330.95,686.122 1331.51,686.122 1332.07,686.122 1332.63,686.122 1333.19,686.122 1333.75,686.122 1334.3,686.122 1334.86,686.122 1335.42,686.122 1335.98,686.122 1336.54,686.122 1337.1,686.122 1337.66,686.122 1338.22,686.122 1338.78,686.122 1339.34,686.122 1339.9,686.122 1340.46,686.122 1341.02,686.122 1341.57,686.122 1342.13,686.122 1342.69,686.122 1343.25,686.122 1343.81,686.122 1344.37,686.122 1344.93,686.122 1345.49,686.122 1346.05,686.122 1346.61,686.122 1347.17,686.122 1347.73,686.122 1348.29,686.122 1348.84,686.122 1349.4,686.122 1349.96,686.122 1350.52,686.122 1351.08,686.122 1351.64,686.122 1352.2,686.122 1352.76,686.122 1353.32,686.122 1353.88,686.122 1354.44,686.122 1355,686.122 1355.56,686.122 1356.12,686.122 1356.67,686.122 1357.23,686.122 1357.79,686.122 1358.35,686.122 1358.91,686.122 1359.47,686.122 1360.03,686.122 1360.59,686.122 1361.15,686.122 1361.71,686.122 1362.27,686.122 1362.83,686.122 1363.39,686.122 1363.94,686.122 1364.5,686.122 1365.06,686.122 1365.62,686.122 1366.18,686.122 1366.74,686.122 1367.3,686.122 1367.86,686.122 1368.42,686.122 1368.98,686.122 1369.54,686.122 1370.1,686.122 1370.66,686.122 1371.21,686.122 1371.77,686.122 1372.33,686.122 1372.89,686.122 1373.45,686.122 1374.01,686.122 1374.57,686.122 1375.13,686.122 1375.69,686.122 1376.25,686.122 1376.81,686.122 1377.37,686.122 1377.93,686.122 1378.49,686.122 1379.04,686.122 1379.6,686.122 1380.16,686.122 1380.72,686.122 1381.28,686.122 1381.84,686.122 1382.4,686.122 1382.96,686.122 1383.52,686.122 1384.08,686.122 1384.64,686.122 1385.2,686.122 1385.76,686.122 1386.31,686.122 1386.87,686.122 1387.43,686.122 1387.99,686.122 1388.55,686.122 1389.11,686.122 1389.67,686.122 1390.23,686.122 1390.79,686.122 1391.35,686.122 1391.91,686.122 1392.47,686.122 1393.03,686.122 1393.58,686.122 1394.14,686.122 1394.7,686.122 1395.26,686.122 1395.82,686.122 1396.38,686.122 1396.94,686.122 1397.5,686.122 1398.06,686.122 1398.62,686.122 1399.18,686.122 1399.74,686.122 1400.3,686.122 1400.86,686.122 1401.41,686.122 1401.97,686.122 1402.53,686.122 1403.09,686.122 1403.65,686.122 1404.21,686.122 1404.77,686.122 1405.33,686.122 1405.89,686.122 1406.45,686.122 1407.01,686.122 1407.57,686.122 1408.13,686.122 1408.68,686.122 1409.24,686.122 1409.8,686.122 1410.36,686.122 1410.92,686.122 1411.48,686.122 1412.04,686.122 1412.6,686.122 1413.16,686.122 1413.72,686.122 1414.28,686.122 1414.84,686.122 1415.4,686.122 1415.95,686.122 1416.51,686.122 1417.07,686.122 1417.63,686.122 1418.19,686.122 1418.75,686.122 1419.31,686.122 1419.87,686.122 1420.43,686.122 1420.99,686.122 1421.55,686.122 1422.11,686.122 1422.67,686.122 1423.23,686.122 1423.78,686.122 1424.34,686.122 1424.9,686.122 1425.46,686.122 1426.02,686.122 1426.58,686.122 1427.14,686.122 1427.7,686.122 1428.26,686.122 1428.82,686.122 1429.38,686.122 1429.94,686.122 1430.5,686.122 1431.05,686.122 1431.61,686.122 1432.17,686.122 1432.73,686.122 1433.29,686.122 1433.85,686.122 1434.41,686.122 1434.97,686.122 1435.53,686.122 1436.09,686.122 1436.65,686.122 1437.21,686.122 1437.77,686.122 1438.33,686.122 1438.88,686.122 1439.44,686.122 1440,686.122 1440.56,686.122 1441.12,686.122 1441.68,686.122 1442.24,686.122 1442.8,686.122 1443.36,686.122 1443.92,686.122 1444.48,686.122 1445.04,686.122 1445.6,686.122 1446.15,686.122 1446.71,686.122 1447.27,686.122 1447.83,686.122 1448.39,686.122 1448.95,686.122 1449.51,686.122 1450.07,686.122 1450.63,686.122 1451.19,686.122 1451.75,686.122 1452.31,686.122 1452.87,686.122 1453.42,686.122 1453.98,686.122 1454.54,686.122 1455.1,686.122 1455.66,686.122 1456.22,686.122 1456.78,686.122 1457.34,686.122 1457.9,686.122 1458.46,686.122 1459.02,686.122 1459.58,686.122 1460.14,686.122 1460.7,686.122 1461.25,686.122 1461.81,686.122 1462.37,686.122 1462.93,686.122 1463.49,686.122 1464.05,686.122 1464.61,686.122 1465.17,686.122 1465.73,686.122 1466.29,686.122 1466.85,686.122 1467.41,686.122 1467.97,686.122 1468.52,686.122 1469.08,686.122 1469.64,686.122 1470.2,686.122 1470.76,686.122 1471.32,686.122 1471.88,686.122 1472.44,686.122 1473,686.122 1473.56,686.122 1474.12,686.122 1474.68,686.122 1475.24,686.122 1475.79,686.122 1476.35,686.122 1476.91,686.122 1477.47,686.122 1478.03,686.122 1478.59,686.122 1479.15,686.122 1479.71,686.122 1480.27,686.122 1480.83,686.122 1481.39,686.122 1481.95,686.122 1482.51,686.122 1483.07,686.122 1483.62,686.122 1484.18,686.122 1484.74,686.122 1485.3,686.122 1485.86,686.122 1486.42,686.122 1486.98,686.122 1487.54,686.122 1488.1,686.122 1488.66,686.122 1489.22,686.122 1489.78,686.122 1490.34,686.122 1490.89,686.122 1491.45,686.122 1492.01,686.122 1492.57,686.122 1493.13,686.122 1493.69,686.122 1494.25,686.122 1494.81,686.122 1495.37,686.122 1495.93,686.122 1496.49,686.122 1497.05,686.122 1497.61,686.122 1498.16,686.122 1498.72,686.122 1499.28,686.122 1499.84,686.122 1500.4,686.122 1500.96,686.122 1501.52,686.122 1502.08,686.122 1502.64,686.122 1503.2,686.122 1503.76,686.122 1504.32,686.122 1504.88,686.122 1505.44,686.122 1505.99,686.122 1506.55,686.122 1507.11,686.122 1507.67,686.122 1508.23,686.122 1508.79,686.122 1509.35,686.122 1509.91,686.122 1510.47,686.122 1511.03,686.122 1511.59,686.122 1512.15,686.122 1512.71,686.122 1513.26,686.122 1513.82,686.122 1514.38,686.122 1514.94,686.122 1515.5,686.122 1516.06,686.122 1516.62,686.122 1517.18,686.122 1517.74,686.122 1518.3,686.122 1518.86,686.122 1519.42,686.122 1519.98,686.122 1520.53,686.122 1521.09,686.122 1521.65,686.122 1522.21,686.122 1522.77,686.122 1523.33,686.122 1523.89,686.122 1524.45,686.122 1525.01,686.122 1525.57,686.122 1526.13,686.122 1526.69,686.122 1527.25,686.122 1527.81,686.122 1528.36,686.122 1528.92,686.122 1529.48,686.122 1530.04,686.122 1530.6,686.122 1531.16,686.122 1531.72,686.122 1532.28,686.122 1532.84,686.122 1533.4,686.122 1533.96,686.122 1534.52,686.122 1535.08,686.122 1535.63,686.122 1536.19,686.122 1536.75,686.122 1537.31,686.122 1537.87,686.122 1538.43,686.122 1538.99,686.122 1539.55,686.122 1540.11,686.122 1540.67,686.122 1541.23,686.122 1541.79,686.122 1542.35,686.122 1542.9,686.122 1543.46,686.122 1544.02,686.122 1544.58,686.122 1545.14,686.122 1545.7,686.122 1546.26,686.122 1546.82,686.122 1547.38,686.122 1547.94,686.122 1548.5,686.122 1549.06,686.122 1549.62,686.122 1550.18,686.122 1550.73,686.122 1551.29,686.122 1551.85,686.122 1552.41,686.122 1552.97,686.122 1553.53,686.122 1554.09,686.122 1554.65,686.122 1555.21,686.122 1555.77,686.122 1556.33,686.122 1556.89,686.122 1557.45,686.122 1558,686.122 1558.56,686.122 1559.12,686.122 1559.68,686.122 1560.24,686.122 1560.8,686.122 1561.36,686.122 1561.92,686.122 1562.48,686.122 1563.04,686.122 1563.6,686.122 1564.16,686.122 1564.72,686.122 1565.28,686.122 1565.83,686.122 1566.39,686.122 1566.95,686.122 1567.51,686.122 1568.07,686.122 1568.63,686.122 1569.19,686.122 1569.75,686.122 1570.31,686.122 1570.87,686.122 1571.43,686.122 1571.99,686.122 1572.55,686.122 1573.1,686.122 1573.66,686.122 1574.22,686.122 1574.78,686.122 1575.34,686.122 1575.9,686.122 1576.46,686.122 1577.02,686.122 1577.58,686.122 1578.14,686.122 1578.7,686.122 1579.26,686.122 1579.82,686.122 1580.37,686.122 1580.93,686.122 1581.49,686.122 1582.05,686.122 1582.61,686.122 1583.17,686.122 1583.73,686.122 1584.29,686.122 1584.85,686.122 1585.41,686.122 1585.97,686.122 1586.53,686.122 1587.09,686.122 1587.65,686.122 1588.2,686.122 1588.76,686.122 1589.32,686.122 1589.88,686.122 1590.44,686.122 1591,686.122 1591.56,686.122 1592.12,686.122 1592.68,686.122 1593.24,686.122 1593.8,686.122 1594.36,686.122 1594.92,686.122 1595.47,686.122 1596.03,686.122 1596.59,686.122 1597.15,686.122 1597.71,686.122 1598.27,686.122 1598.83,686.122 1599.39,686.122 1599.95,686.122 1600.51,686.122 1601.07,686.122 1601.63,686.122 1602.19,686.122 1602.74,686.122 1603.3,686.122 1603.86,686.122 1604.42,686.122 1604.98,686.122 1605.54,686.122 1606.1,686.122 1606.66,686.122 1607.22,686.122 1607.78,686.122 1608.34,686.122 1608.9,686.122 1609.46,686.122 1610.02,686.122 1610.57,686.122 1611.13,686.122 1611.69,686.122 1612.25,686.122 1612.81,686.122 1613.37,686.122 1613.93,686.122 1614.49,686.122 1615.05,686.122 1615.61,686.122 1616.17,686.122 1616.73,686.122 1617.29,686.122 1617.84,686.122 1618.4,686.122 1618.96,686.122 1619.52,686.122 1620.08,686.122 1620.64,686.122 1621.2,686.122 1621.76,686.122 1622.32,686.122 1622.88,686.122 1623.44,686.122 1624,686.122 1624.56,686.122 1625.11,686.122 1625.67,686.122 1626.23,686.122 1626.79,686.122 1627.35,686.122 1627.91,686.122 1628.47,686.122 1629.03,686.122 1629.59,686.122 1630.15,686.122 1630.71,686.122 1631.27,686.122 1631.83,686.122 1632.39,686.122 1632.94,686.122 1633.5,686.122 1634.06,686.122 1634.62,686.122 1635.18,686.122 1635.74,686.122 1636.3,686.122 1636.86,686.122 1637.42,686.122 1637.98,686.122 1638.54,686.122 1639.1,686.122 1639.66,686.122 1640.21,686.122 1640.77,686.122 1641.33,686.122 1641.89,686.122 1642.45,686.122 1643.01,686.122 1643.57,686.122 1644.13,686.122 1644.69,686.122 1645.25,686.122 1645.81,686.122 1646.37,686.122 1646.93,686.122 1647.48,686.122 1648.04,686.122 1648.6,686.122 1649.16,686.122 1649.72,686.122 1650.28,686.122 1650.84,686.122 1651.4,686.122 1651.96,686.122 1652.52,686.122 1653.08,686.122 1653.64,686.122 1654.2,686.122 1654.76,686.122 1655.31,686.122 1655.87,686.122 1656.43,686.122 1656.99,686.122 1657.55,686.122 1658.11,686.122 1658.67,686.122 1659.23,686.122 1659.79,686.122 1660.35,686.122 1660.91,686.122 1661.47,686.122 1662.03,686.122 1662.58,686.122 1663.14,686.122 1663.7,686.122 1664.26,686.122 1664.82,686.122 1665.38,686.122 1665.94,686.122 1666.5,686.122 1667.06,686.122 1667.62,686.122 1668.18,686.122 1668.74,686.122 1669.3,686.122 1669.85,686.122 1670.41,686.122 1670.97,686.122 1671.53,686.122 1672.09,686.122 1672.65,686.122 1673.21,686.122 1673.77,686.122 1674.33,686.122 1674.89,686.122 1675.45,686.122 1676.01,686.122 1676.57,686.122 1677.13,686.122 1677.68,686.122 1678.24,686.122 1678.8,686.122 1679.36,686.122 1679.92,686.122 1680.48,686.122 1681.04,686.122 1681.6,686.122 1682.16,686.122 1682.72,686.122 1683.28,686.122 1683.84,686.122 1684.4,686.122 1684.95,686.122 1685.51,686.122 1686.07,686.122 1686.63,686.122 1687.19,686.122 1687.75,686.122 1688.31,686.122 1688.87,686.122 1689.43,686.122 1689.99,686.122 1690.55,686.122 1691.11,686.122 1691.67,686.122 1692.23,686.122 1692.78,686.122 1693.34,686.122 1693.9,686.122 1694.46,686.122 1695.02,686.122 1695.58,686.122 1696.14,686.122 1696.7,686.122 1697.26,686.122 1697.82,686.122 1698.38,686.122 1698.94,686.122 1699.5,686.122 1700.05,686.122 1700.61,686.122 1701.17,686.122 1701.73,686.122 1702.29,686.122 1702.85,686.122 1703.41,686.122 1703.97,686.122 1704.53,686.122 1705.09,686.122 1705.65,686.122 1706.21,686.122 1706.77,686.122 1707.32,686.122 1707.88,686.122 1708.44,686.122 1709,686.122 1709.56,686.122 1710.12,686.122 1710.68,686.122 1711.24,686.122 1711.8,686.122 1712.36,686.122 1712.92,686.122 1713.48,686.122 1714.04,686.122 1714.6,686.122 1715.15,686.122 1715.71,686.122 1716.27,686.122 1716.83,686.122 1717.39,686.122 1717.95,686.122 1718.51,686.122 1719.07,686.122 1719.63,686.122 1720.19,686.122 1720.75,686.122 1721.31,686.122 1721.87,686.122 1722.42,686.122 1722.98,686.122 1723.54,686.122 1724.1,686.122 1724.66,686.122 1725.22,686.122 1725.78,686.122 1726.34,686.122 1726.9,686.122 1727.46,686.122 1728.02,686.122 1728.58,686.122 1729.14,686.122 1729.69,686.122 1730.25,686.122 1730.81,686.122 1731.37,686.122 1731.93,686.122 1732.49,686.122 1733.05,686.122 1733.61,686.122 1734.17,686.122 1734.73,686.122 1735.29,686.122 1735.85,686.122 1736.41,686.122 1736.97,686.122 1737.52,686.122 1738.08,686.122 1738.64,686.122 1739.2,686.122 1739.76,686.122 1740.32,686.122 1740.88,686.122 1741.44,686.122 1742,686.122 1742.56,686.122 1743.12,686.122 1743.68,686.122 1744.24,686.122 1744.79,686.122 1745.35,686.122 1745.91,686.122 1746.47,686.122 1747.03,686.122 1747.59,686.122 1748.15,686.122 1748.71,686.122 1749.27,686.122 1749.83,686.122 1750.39,686.122 1750.95,686.122 1751.51,686.122 1752.06,686.122 1752.62,686.122 1753.18,686.122 1753.74,686.122 1754.3,686.122 1754.86,686.122 1755.42,686.122 1755.98,686.122 1756.54,686.122 1757.1,686.122 1757.66,686.122 1758.22,686.122 1758.78,686.122 1759.34,686.122 1759.89,686.122 1760.45,686.122 1761.01,686.122 1761.57,686.122 1762.13,686.122 1762.69,686.122 1763.25,686.122 1763.81,686.122 1764.37,686.122 1764.93,686.122 1765.49,686.122 1766.05,686.122 1766.61,686.122 1767.16,686.122 1767.72,686.122 1768.28,686.122 1768.84,686.122 1769.4,686.122 1769.96,686.122 1770.52,686.122 1771.08,686.122 1771.64,686.122 1772.2,686.122 1772.76,686.122 1773.32,686.122 1773.88,686.122 1774.43,686.122 1774.99,686.122 1775.55,686.122 1776.11,686.122 1776.67,686.122 1777.23,686.122 1777.79,686.122 1778.35,686.122 1778.91,686.122 1779.47,686.122 1780.03,686.122 1780.59,686.122 1781.15,686.122 1781.71,686.122 1782.26,686.122 1782.82,686.122 1783.38,686.122 1783.94,686.122 1784.5,686.122 1785.06,686.122 1785.62,686.122 1786.18,686.122 1786.74,686.122 1787.3,686.122 1787.86,686.122 1788.42,686.122 1788.98,686.122 1789.53,686.122 1790.09,686.122 1790.65,686.122 1791.21,686.122 1791.77,686.122 1792.33,686.122 1792.89,686.122 1793.45,686.122 1794.01,686.122 1794.57,686.122 1795.13,686.122 1795.69,686.122 1796.25,686.122 1796.8,686.122 1797.36,686.122 1797.92,686.122 1798.48,686.122 1799.04,686.122 1799.6,686.122 1800.16,686.122 1800.72,686.122 1801.28,686.122 1801.84,686.122 1802.4,686.122 1802.96,686.122 1803.52,686.122 1804.08,686.122 1804.63,686.122 1805.19,686.122 1805.75,686.122 1806.31,686.122 1806.87,686.122 1807.43,686.122 1807.99,686.122 1808.55,686.122 1809.11,686.122 1809.67,686.122 1810.23,686.122 1810.79,686.122 1811.35,686.122 1811.9,686.122 1812.46,686.122 1813.02,686.122 1813.58,686.122 1814.14,686.122 1814.7,686.122 1815.26,686.122 1815.82,686.122 1816.38,686.122 1816.94,686.122 1817.5,686.122 1818.06,686.122 1818.62,686.122 1819.18,686.122 1819.73,686.122 1820.29,686.122 1820.85,686.122 1821.41,686.122 1821.97,686.122 1822.53,686.122 1823.09,686.122 1823.65,686.122 1824.21,686.122 1824.77,686.122 1825.33,686.122 1825.89,686.122 1826.45,686.122 1827,686.122 1827.56,686.122 1828.12,686.122 1828.68,686.122 1829.24,686.122 1829.8,686.122 1830.36,686.122 1830.92,686.122 1831.48,686.122 1832.04,686.122 1832.6,686.122 1833.16,686.122 1833.72,686.122 1834.27,686.122 1834.83,686.122 1835.39,686.122 1835.95,686.122 1836.51,686.122 1837.07,686.122 1837.63,686.122 1838.19,686.122 \"/>\n<path clip-path=\"url(#clip903)\" d=\"M720.247 685.605 L720.806 685.605 L721.365 685.605 L721.924 685.605 L722.484 685.605 L723.043 685.605 L723.602 685.605 L724.161 685.605 L724.721 685.605 L725.28 685.605 L725.839 685.605 L726.398 685.605 L726.958 685.605 L727.517 685.605 L728.076 685.605 L728.635 685.605 L729.195 685.605 L729.754 685.605 L730.313 685.605 L730.872 685.605 L731.432 685.605 L731.991 685.605 L732.55 685.605 L733.109 685.605 L733.669 685.605 L734.228 685.605 L734.787 685.605 L735.346 685.605 L735.906 685.605 L736.465 685.605 L737.024 685.605 L737.583 685.605 L738.143 685.605 L738.702 685.605 L739.261 685.605 L739.82 685.605 L740.38 685.605 L740.939 685.605 L741.498 685.605 L742.057 685.605 L742.617 685.605 L743.176 685.605 L743.735 685.605 L744.294 685.605 L744.854 685.605 L745.413 685.605 L745.972 685.605 L746.531 685.605 L747.091 685.605 L747.65 685.605 L748.209 685.605 L748.768 685.605 L749.328 685.605 L749.887 685.605 L750.446 685.605 L751.005 685.605 L751.565 685.605 L752.124 685.605 L752.683 685.605 L753.242 685.605 L753.802 685.605 L754.361 685.605 L754.92 685.605 L755.479 685.605 L756.039 685.605 L756.598 685.605 L757.157 685.605 L757.716 685.605 L758.276 685.605 L758.835 685.605 L759.394 685.605 L759.953 685.605 L760.513 685.605 L761.072 685.605 L761.631 685.605 L762.19 685.605 L762.75 685.605 L763.309 685.605 L763.868 685.605 L764.427 685.605 L764.987 685.605 L765.546 685.605 L766.105 685.605 L766.664 685.605 L767.224 685.605 L767.783 685.605 L768.342 685.605 L768.901 685.605 L769.461 685.605 L770.02 685.605 L770.579 685.605 L771.138 685.605 L771.698 685.605 L772.257 685.605 L772.816 685.605 L773.375 685.605 L773.935 685.605 L774.494 685.605 L775.053 685.605 L775.612 685.605 L776.172 685.605 L776.731 685.605 L777.29 685.605 L777.849 685.605 L778.409 685.605 L778.968 685.605 L779.527 685.605 L780.086 685.605 L780.646 685.605 L781.205 685.605 L781.764 685.605 L782.323 685.605 L782.883 685.605 L783.442 685.605 L784.001 685.605 L784.56 685.605 L785.12 685.605 L785.679 685.605 L786.238 685.605 L786.797 685.605 L787.357 685.605 L787.916 685.605 L788.475 685.605 L789.034 685.605 L789.594 685.605 L790.153 685.605 L790.712 685.605 L791.271 685.605 L791.831 685.605 L792.39 685.605 L792.949 685.605 L793.508 685.605 L794.068 685.605 L794.627 685.605 L795.186 685.605 L795.745 685.605 L796.305 685.605 L796.864 685.605 L797.423 685.605 L797.982 685.605 L798.542 685.605 L799.101 685.605 L799.66 685.605 L800.219 685.605 L800.779 685.605 L801.338 685.605 L801.897 685.605 L802.456 685.605 L803.016 685.605 L803.575 685.605 L804.134 685.605 L804.693 685.605 L805.253 685.605 L805.812 685.605 L806.371 685.605 L806.931 685.605 L807.49 685.605 L808.049 685.605 L808.608 685.605 L809.168 685.605 L809.727 685.605 L810.286 685.605 L810.845 685.605 L811.405 685.605 L811.964 685.605 L812.523 685.605 L813.082 685.605 L813.642 685.605 L814.201 685.605 L814.76 685.605 L815.319 685.605 L815.879 685.605 L816.438 685.605 L816.997 685.605 L817.556 685.605 L818.116 685.605 L818.675 685.605 L819.234 685.605 L819.793 685.605 L820.353 685.605 L820.912 685.605 L821.471 685.605 L822.03 685.605 L822.59 685.605 L823.149 685.605 L823.708 685.605 L824.267 685.605 L824.827 685.605 L825.386 685.605 L825.945 685.605 L826.504 685.605 L827.064 685.605 L827.623 685.605 L828.182 685.605 L828.741 685.605 L829.301 685.605 L829.86 685.605 L830.419 685.605 L830.978 685.605 L831.538 685.605 L832.097 685.605 L832.656 685.605 L833.215 685.605 L833.775 685.605 L834.334 685.605 L834.893 685.605 L835.452 685.605 L836.012 685.605 L836.571 685.605 L837.13 685.605 L837.689 685.605 L838.249 685.605 L838.808 685.605 L839.367 685.605 L839.926 685.605 L840.486 685.605 L841.045 685.605 L841.604 685.605 L842.163 685.605 L842.723 685.605 L843.282 685.605 L843.841 685.605 L844.4 685.605 L844.96 685.605 L845.519 685.605 L846.078 685.605 L846.637 685.605 L847.197 685.605 L847.756 685.605 L848.315 685.605 L848.874 685.605 L849.434 685.605 L849.993 685.605 L850.552 685.605 L851.111 685.605 L851.671 685.605 L852.23 685.605 L852.789 685.605 L853.348 685.605 L853.908 685.605 L854.467 685.605 L855.026 685.605 L855.585 685.605 L856.145 685.605 L856.704 685.605 L857.263 685.605 L857.822 685.605 L858.382 685.605 L858.941 685.605 L859.5 685.605 L860.059 685.605 L860.619 685.605 L861.178 685.605 L861.737 685.605 L862.296 685.605 L862.856 685.605 L863.415 685.605 L863.974 685.605 L864.533 685.605 L865.093 685.605 L865.652 685.605 L866.211 685.605 L866.77 685.605 L867.33 685.605 L867.889 685.605 L868.448 685.605 L869.007 685.605 L869.567 685.605 L870.126 685.605 L870.685 685.605 L871.244 685.605 L871.804 685.605 L872.363 685.605 L872.922 685.605 L873.481 685.605 L874.041 685.605 L874.6 685.605 L875.159 685.605 L875.718 685.605 L876.278 685.605 L876.837 685.605 L877.396 685.605 L877.955 685.605 L878.515 685.605 L879.074 685.605 L879.633 685.605 L880.192 685.605 L880.752 685.605 L881.311 685.605 L881.87 685.605 L882.429 685.605 L882.989 685.605 L883.548 685.605 L884.107 685.605 L884.666 685.605 L885.226 685.605 L885.785 685.605 L886.344 685.605 L886.903 685.605 L887.463 685.605 L888.022 685.605 L888.581 685.605 L889.14 685.605 L889.7 685.605 L890.259 685.605 L890.818 685.605 L891.377 685.605 L891.937 685.605 L892.496 685.605 L893.055 685.605 L893.614 685.605 L894.174 685.605 L894.733 685.605 L895.292 685.605 L895.851 685.605 L896.411 685.605 L896.97 685.605 L897.529 685.605 L898.088 685.605 L898.648 685.605 L899.207 685.605 L899.766 685.605 L900.325 685.605 L900.885 685.605 L901.444 685.605 L902.003 685.605 L902.562 685.605 L903.122 685.605 L903.681 685.605 L904.24 685.605 L904.799 685.605 L905.359 685.605 L905.918 685.605 L906.477 685.605 L907.036 685.605 L907.596 685.605 L908.155 685.605 L908.714 685.605 L909.273 685.605 L909.833 685.605 L910.392 685.605 L910.951 685.605 L911.51 685.605 L912.07 685.605 L912.629 685.605 L913.188 685.605 L913.747 685.605 L914.307 685.605 L914.866 685.605 L915.425 685.605 L915.984 685.605 L916.544 685.605 L917.103 685.605 L917.662 685.605 L918.221 685.605 L918.781 685.605 L919.34 685.605 L919.899 685.605 L920.458 685.605 L921.018 685.605 L921.577 685.605 L922.136 685.605 L922.695 685.605 L923.255 685.605 L923.814 685.605 L924.373 685.605 L924.932 685.605 L925.492 685.605 L926.051 685.605 L926.61 685.605 L927.169 685.605 L927.729 685.605 L928.288 685.605 L928.847 685.605 L929.406 685.605 L929.966 685.605 L930.525 685.605 L931.084 685.605 L931.644 685.605 L932.203 685.605 L932.762 685.605 L933.321 685.605 L933.881 685.605 L934.44 685.605 L934.999 685.605 L935.558 685.605 L936.118 685.605 L936.677 685.605 L937.236 685.605 L937.795 685.605 L938.355 685.605 L938.914 685.605 L939.473 685.605 L940.032 685.605 L940.592 685.605 L941.151 685.605 L941.71 685.605 L942.269 685.605 L942.829 685.605 L943.388 685.605 L943.947 685.605 L944.506 685.605 L945.066 685.605 L945.625 685.605 L946.184 685.605 L946.743 685.605 L947.303 685.605 L947.862 685.605 L948.421 685.605 L948.98 685.605 L949.54 685.605 L950.099 685.605 L950.658 685.605 L951.217 685.605 L951.777 685.605 L952.336 685.605 L952.895 685.605 L953.454 685.605 L954.014 685.605 L954.573 685.605 L955.132 685.605 L955.691 685.605 L956.251 685.605 L956.81 685.605 L957.369 685.605 L957.928 685.605 L958.488 685.605 L959.047 685.605 L959.606 685.605 L960.165 685.605 L960.725 685.605 L961.284 685.605 L961.843 685.605 L962.402 685.605 L962.962 685.605 L963.521 685.605 L964.08 685.605 L964.639 685.605 L965.199 685.605 L965.758 685.605 L966.317 685.605 L966.876 685.605 L967.436 685.605 L967.995 685.605 L968.554 685.605 L969.113 685.605 L969.673 685.605 L970.232 685.605 L970.791 685.605 L971.35 685.605 L971.91 685.605 L972.469 685.605 L973.028 685.605 L973.587 685.605 L974.147 685.605 L974.706 685.605 L975.265 685.605 L975.824 685.605 L976.384 685.605 L976.943 685.605 L977.502 685.605 L978.061 685.605 L978.621 685.605 L979.18 685.605 L979.739 685.605 L980.298 685.605 L980.858 685.605 L981.417 685.605 L981.976 685.605 L982.535 685.605 L983.095 685.605 L983.654 685.605 L984.213 685.605 L984.772 685.605 L985.332 685.605 L985.891 685.605 L986.45 685.605 L987.009 685.605 L987.569 685.605 L988.128 685.605 L988.687 685.605 L989.246 685.605 L989.806 685.605 L990.365 685.605 L990.924 685.605 L991.483 685.605 L992.043 685.605 L992.602 685.605 L993.161 685.605 L993.72 685.605 L994.28 685.605 L994.839 685.605 L995.398 685.605 L995.957 685.605 L996.517 685.605 L997.076 685.605 L997.635 685.605 L998.194 685.605 L998.754 685.605 L999.313 685.605 L999.872 685.605 L1000.43 685.605 L1000.99 685.605 L1001.55 685.605 L1002.11 685.605 L1002.67 685.605 L1003.23 685.605 L1003.79 685.605 L1004.35 685.605 L1004.91 685.605 L1005.46 685.605 L1006.02 685.605 L1006.58 685.605 L1007.14 685.605 L1007.7 685.605 L1008.26 685.605 L1008.82 685.605 L1009.38 685.605 L1009.94 685.605 L1010.5 685.605 L1011.06 685.605 L1011.62 685.605 L1012.18 685.605 L1012.73 685.605 L1013.29 685.605 L1013.85 685.605 L1014.41 685.605 L1014.97 685.605 L1015.53 685.605 L1016.09 685.605 L1016.65 685.605 L1017.21 685.605 L1017.77 685.605 L1018.33 685.605 L1018.89 685.605 L1019.45 685.605 L1020.01 685.605 L1020.56 685.605 L1021.12 685.605 L1021.68 685.605 L1022.24 685.605 L1022.8 685.605 L1023.36 685.605 L1023.92 685.605 L1024.48 685.605 L1025.04 685.605 L1025.6 685.605 L1026.16 685.605 L1026.72 685.605 L1027.28 685.605 L1027.83 685.605 L1028.39 685.605 L1028.95 685.605 L1029.51 685.605 L1030.07 685.605 L1030.63 685.605 L1031.19 685.605 L1031.75 685.605 L1032.31 685.605 L1032.87 685.605 L1033.43 685.605 L1033.99 685.605 L1034.55 685.605 L1035.1 685.605 L1035.66 685.605 L1036.22 685.605 L1036.78 685.605 L1037.34 685.605 L1037.9 685.605 L1038.46 685.605 L1039.02 685.605 L1039.58 685.605 L1040.14 685.605 L1040.7 685.605 L1041.26 685.605 L1041.82 685.605 L1042.38 685.605 L1042.93 685.605 L1043.49 685.605 L1044.05 685.605 L1044.61 685.605 L1045.17 685.605 L1045.73 685.605 L1046.29 685.605 L1046.85 685.605 L1047.41 685.605 L1047.97 685.605 L1048.53 685.605 L1049.09 685.605 L1049.65 685.605 L1050.2 685.605 L1050.76 685.605 L1051.32 685.605 L1051.88 685.605 L1052.44 685.605 L1053 685.605 L1053.56 685.605 L1054.12 685.605 L1054.68 685.605 L1055.24 685.605 L1055.8 685.605 L1056.36 685.605 L1056.92 685.605 L1057.48 685.605 L1058.03 685.605 L1058.59 685.605 L1059.15 685.605 L1059.71 685.605 L1060.27 685.605 L1060.83 685.605 L1061.39 685.605 L1061.95 685.605 L1062.51 685.605 L1063.07 685.605 L1063.63 685.605 L1064.19 685.605 L1064.75 685.605 L1065.3 685.605 L1065.86 685.605 L1066.42 685.605 L1066.98 685.605 L1067.54 685.605 L1068.1 685.605 L1068.66 685.605 L1069.22 685.605 L1069.78 685.605 L1070.34 685.605 L1070.9 685.605 L1071.46 685.605 L1072.02 685.605 L1072.57 685.605 L1073.13 685.605 L1073.69 685.605 L1074.25 685.605 L1074.81 685.605 L1075.37 685.605 L1075.93 685.605 L1076.49 685.605 L1077.05 685.605 L1077.61 685.605 L1078.17 685.605 L1078.73 685.605 L1079.29 685.605 L1079.85 685.605 L1080.4 685.605 L1080.96 685.605 L1081.52 685.605 L1082.08 685.605 L1082.64 685.605 L1083.2 685.605 L1083.76 685.605 L1084.32 685.605 L1084.88 685.605 L1085.44 685.605 L1086 685.605 L1086.56 685.605 L1087.12 685.605 L1087.67 685.605 L1088.23 685.605 L1088.79 685.605 L1089.35 685.605 L1089.91 685.605 L1090.47 685.605 L1091.03 685.605 L1091.59 685.605 L1092.15 685.605 L1092.71 685.605 L1093.27 685.605 L1093.83 685.605 L1094.39 685.605 L1094.94 685.605 L1095.5 685.605 L1096.06 685.605 L1096.62 685.605 L1097.18 685.605 L1097.74 685.605 L1098.3 685.605 L1098.86 685.605 L1099.42 685.605 L1099.98 685.605 L1100.54 685.605 L1101.1 685.605 L1101.66 685.605 L1102.22 685.605 L1102.77 685.605 L1103.33 685.605 L1103.89 685.605 L1104.45 685.605 L1105.01 685.605 L1105.57 685.605 L1106.13 685.605 L1106.69 685.605 L1107.25 685.605 L1107.81 685.605 L1108.37 685.605 L1108.93 685.605 L1109.49 685.605 L1110.04 685.605 L1110.6 685.605 L1111.16 685.605 L1111.72 685.605 L1112.28 685.605 L1112.84 685.605 L1113.4 685.605 L1113.96 685.605 L1114.52 685.605 L1115.08 685.605 L1115.64 685.605 L1116.2 685.605 L1116.76 685.605 L1117.31 685.605 L1117.87 685.605 L1118.43 685.605 L1118.99 685.605 L1119.55 685.605 L1120.11 685.605 L1120.67 685.605 L1121.23 685.605 L1121.79 685.605 L1122.35 685.605 L1122.91 685.605 L1123.47 685.605 L1124.03 685.605 L1124.59 685.605 L1125.14 685.605 L1125.7 685.605 L1126.26 685.605 L1126.82 685.605 L1127.38 685.605 L1127.94 685.605 L1128.5 685.605 L1129.06 685.605 L1129.62 685.605 L1130.18 685.605 L1130.74 685.605 L1131.3 685.605 L1131.86 685.605 L1132.41 685.605 L1132.97 685.605 L1133.53 685.605 L1134.09 685.605 L1134.65 685.605 L1135.21 685.605 L1135.77 685.605 L1136.33 685.605 L1136.89 685.605 L1137.45 685.605 L1138.01 685.605 L1138.57 685.605 L1139.13 685.605 L1139.68 685.605 L1140.24 685.605 L1140.8 685.605 L1141.36 685.605 L1141.92 685.605 L1142.48 685.605 L1143.04 685.605 L1143.6 685.605 L1144.16 685.605 L1144.72 685.605 L1145.28 685.605 L1145.84 685.605 L1146.4 685.605 L1146.96 685.605 L1147.51 685.605 L1148.07 685.605 L1148.63 685.605 L1149.19 685.605 L1149.75 685.605 L1150.31 685.605 L1150.87 685.605 L1151.43 685.605 L1151.99 685.605 L1152.55 685.605 L1153.11 685.605 L1153.67 685.605 L1154.23 685.605 L1154.78 685.605 L1155.34 685.605 L1155.9 685.605 L1156.46 685.605 L1157.02 685.605 L1157.58 685.605 L1158.14 685.605 L1158.7 685.605 L1159.26 685.605 L1159.82 685.605 L1160.38 685.605 L1160.94 685.605 L1161.5 685.605 L1162.05 685.605 L1162.61 685.605 L1163.17 685.605 L1163.73 685.605 L1164.29 685.605 L1164.85 685.605 L1165.41 685.605 L1165.97 685.605 L1166.53 685.605 L1167.09 685.605 L1167.65 685.605 L1168.21 685.605 L1168.77 685.605 L1169.33 685.605 L1169.88 685.605 L1170.44 685.605 L1171 685.605 L1171.56 685.605 L1172.12 685.605 L1172.68 685.605 L1173.24 685.605 L1173.8 685.605 L1174.36 685.605 L1174.92 685.605 L1175.48 685.605 L1176.04 685.605 L1176.6 685.605 L1177.15 685.605 L1177.71 685.605 L1178.27 685.605 L1178.83 685.605 L1179.39 685.605 L1179.95 685.605 L1180.51 685.605 L1181.07 685.605 L1181.63 685.605 L1182.19 685.605 L1182.75 685.605 L1183.31 685.605 L1183.87 685.605 L1184.43 685.605 L1184.98 685.605 L1185.54 685.605 L1186.1 685.605 L1186.66 685.605 L1187.22 685.605 L1187.78 685.605 L1188.34 685.605 L1188.9 685.605 L1189.46 685.605 L1190.02 685.605 L1190.58 685.605 L1191.14 685.605 L1191.7 685.605 L1192.25 685.605 L1192.81 685.605 L1193.37 685.605 L1193.93 685.605 L1194.49 685.605 L1195.05 685.605 L1195.61 685.605 L1196.17 685.605 L1196.73 685.605 L1197.29 685.605 L1197.85 685.605 L1198.41 685.605 L1198.97 685.605 L1199.52 685.605 L1200.08 685.605 L1200.64 685.605 L1201.2 685.605 L1201.76 685.605 L1202.32 685.605 L1202.88 685.605 L1203.44 685.605 L1204 685.605 L1204.56 685.605 L1205.12 685.605 L1205.68 685.605 L1206.24 685.605 L1206.8 685.605 L1207.35 685.605 L1207.91 685.605 L1208.47 685.605 L1209.03 685.605 L1209.59 685.605 L1210.15 685.605 L1210.71 685.605 L1211.27 685.605 L1211.83 685.605 L1212.39 685.605 L1212.95 685.605 L1213.51 685.605 L1214.07 685.605 L1214.62 685.605 L1215.18 685.605 L1215.74 685.605 L1216.3 685.605 L1216.86 685.605 L1217.42 685.605 L1217.98 685.605 L1218.54 685.605 L1219.1 685.605 L1219.66 685.605 L1220.22 685.605 L1220.78 685.605 L1221.34 685.605 L1221.89 685.605 L1222.45 685.605 L1223.01 685.605 L1223.57 685.605 L1224.13 685.605 L1224.69 685.605 L1225.25 685.605 L1225.81 685.605 L1226.37 685.605 L1226.93 685.605 L1227.49 685.605 L1228.05 685.605 L1228.61 685.605 L1229.17 685.605 L1229.72 685.605 L1230.28 685.605 L1230.84 685.605 L1231.4 685.605 L1231.96 685.605 L1232.52 685.605 L1233.08 685.605 L1233.64 685.605 L1234.2 685.605 L1234.76 685.605 L1235.32 685.605 L1235.88 685.605 L1236.44 685.605 L1236.99 685.605 L1237.55 685.605 L1238.11 685.605 L1238.67 685.605 L1239.23 685.605 L1239.79 685.605 L1240.35 685.605 L1240.91 685.605 L1241.47 685.605 L1242.03 685.605 L1242.59 685.605 L1243.15 685.605 L1243.71 685.605 L1244.26 685.605 L1244.82 685.605 L1245.38 685.605 L1245.94 685.605 L1246.5 685.605 L1247.06 685.605 L1247.62 685.605 L1248.18 685.605 L1248.74 685.605 L1249.3 685.605 L1249.86 685.605 L1250.42 685.605 L1250.98 685.605 L1251.54 685.605 L1252.09 685.605 L1252.65 685.605 L1253.21 685.605 L1253.77 685.605 L1254.33 685.605 L1254.89 685.605 L1255.45 685.605 L1256.01 685.605 L1256.57 685.605 L1257.13 685.605 L1257.69 685.605 L1258.25 685.605 L1258.81 685.605 L1259.36 685.605 L1259.92 685.605 L1260.48 685.605 L1261.04 685.605 L1261.6 685.605 L1262.16 685.605 L1262.72 685.605 L1263.28 685.605 L1263.84 685.605 L1264.4 685.605 L1264.96 685.605 L1265.52 685.605 L1266.08 685.605 L1266.63 685.605 L1267.19 685.605 L1267.75 685.605 L1268.31 685.605 L1268.87 685.605 L1269.43 685.605 L1269.99 685.605 L1270.55 685.605 L1271.11 685.605 L1271.67 685.605 L1272.23 685.605 L1272.79 685.605 L1273.35 685.605 L1273.91 685.605 L1274.46 685.605 L1275.02 685.605 L1275.58 685.605 L1276.14 685.605 L1276.7 685.605 L1277.26 685.605 L1277.82 685.605 L1278.38 685.605 L1278.94 685.605 L1279.5 685.605 L1280.06 685.605 L1280.62 685.605 L1281.18 685.605 L1281.73 685.605 L1282.29 685.605 L1282.85 685.605 L1283.41 685.605 L1283.97 685.605 L1284.53 685.605 L1285.09 685.605 L1285.65 685.605 L1286.21 685.605 L1286.77 685.605 L1287.33 685.605 L1287.89 685.605 L1288.45 685.605 L1289 685.605 L1289.56 685.605 L1290.12 685.605 L1290.68 685.605 L1291.24 685.605 L1291.8 685.605 L1292.36 685.605 L1292.92 685.605 L1293.48 685.605 L1294.04 685.605 L1294.6 685.605 L1295.16 685.605 L1295.72 685.605 L1296.28 685.605 L1296.83 685.605 L1297.39 685.605 L1297.95 685.605 L1298.51 685.605 L1299.07 685.605 L1299.63 685.605 L1300.19 685.605 L1300.75 685.605 L1301.31 685.605 L1301.87 685.605 L1302.43 685.605 L1302.99 685.605 L1303.55 685.605 L1304.1 685.605 L1304.66 685.605 L1305.22 685.605 L1305.78 685.605 L1306.34 685.605 L1306.9 685.605 L1307.46 685.605 L1308.02 685.605 L1308.58 685.605 L1309.14 685.605 L1309.7 685.605 L1310.26 685.605 L1310.82 685.605 L1311.38 685.605 L1311.93 685.605 L1312.49 685.605 L1313.05 685.605 L1313.61 685.605 L1314.17 685.605 L1314.73 685.605 L1315.29 685.605 L1315.85 685.605 L1316.41 685.605 L1316.97 685.605 L1317.53 685.605 L1318.09 685.605 L1318.65 685.605 L1319.2 685.605 L1319.76 685.605 L1320.32 685.605 L1320.88 685.605 L1321.44 685.605 L1322 685.605 L1322.56 685.605 L1323.12 685.605 L1323.68 685.605 L1324.24 685.605 L1324.8 685.605 L1325.36 685.605 L1325.92 685.605 L1326.47 685.605 L1327.03 685.605 L1327.59 685.605 L1328.15 685.605 L1328.71 685.605 L1329.27 685.605 L1329.83 685.605 L1330.39 685.605 L1330.95 685.605 L1331.51 685.605 L1332.07 685.605 L1332.63 685.605 L1333.19 685.605 L1333.75 685.605 L1334.3 685.605 L1334.86 685.605 L1335.42 685.605 L1335.98 685.605 L1336.54 685.605 L1337.1 685.605 L1337.66 685.605 L1338.22 685.605 L1338.78 685.605 L1339.34 685.605 L1339.9 685.605 L1340.46 685.605 L1341.02 685.605 L1341.57 685.605 L1342.13 685.605 L1342.69 685.605 L1343.25 685.605 L1343.81 685.605 L1344.37 685.605 L1344.93 685.605 L1345.49 685.605 L1346.05 685.605 L1346.61 685.605 L1347.17 685.605 L1347.73 685.605 L1348.29 685.605 L1348.84 685.605 L1349.4 685.605 L1349.96 685.605 L1350.52 685.605 L1351.08 685.605 L1351.64 685.605 L1352.2 685.605 L1352.76 685.605 L1353.32 685.605 L1353.88 685.605 L1354.44 685.605 L1355 685.605 L1355.56 685.605 L1356.12 685.605 L1356.67 685.605 L1357.23 685.605 L1357.79 685.605 L1358.35 685.605 L1358.91 685.605 L1359.47 685.605 L1360.03 685.605 L1360.59 685.605 L1361.15 685.605 L1361.71 685.605 L1362.27 685.605 L1362.83 685.605 L1363.39 685.605 L1363.94 685.605 L1364.5 685.605 L1365.06 685.605 L1365.62 685.605 L1366.18 685.605 L1366.74 685.605 L1367.3 685.605 L1367.86 685.605 L1368.42 685.605 L1368.98 685.605 L1369.54 685.605 L1370.1 685.605 L1370.66 685.605 L1371.21 685.605 L1371.77 685.605 L1372.33 685.605 L1372.89 685.605 L1373.45 685.605 L1374.01 685.605 L1374.57 685.605 L1375.13 685.605 L1375.69 685.605 L1376.25 685.605 L1376.81 685.605 L1377.37 685.605 L1377.93 685.605 L1378.49 685.605 L1379.04 685.605 L1379.6 685.605 L1380.16 685.605 L1380.72 685.605 L1381.28 685.605 L1381.84 685.605 L1382.4 685.605 L1382.96 685.605 L1383.52 685.605 L1384.08 685.605 L1384.64 685.605 L1385.2 685.605 L1385.76 685.605 L1386.31 685.605 L1386.87 685.605 L1387.43 685.605 L1387.99 685.605 L1388.55 685.605 L1389.11 685.605 L1389.67 685.605 L1390.23 685.605 L1390.79 685.605 L1391.35 685.605 L1391.91 685.605 L1392.47 685.605 L1393.03 685.605 L1393.58 685.605 L1394.14 685.605 L1394.7 685.605 L1395.26 685.605 L1395.82 685.605 L1396.38 685.605 L1396.94 685.605 L1397.5 685.605 L1398.06 685.605 L1398.62 685.605 L1399.18 685.605 L1399.74 685.605 L1400.3 685.605 L1400.86 685.605 L1401.41 685.605 L1401.97 685.605 L1402.53 685.605 L1403.09 685.605 L1403.65 685.605 L1404.21 685.605 L1404.77 685.605 L1405.33 685.605 L1405.89 685.605 L1406.45 685.605 L1407.01 685.605 L1407.57 685.605 L1408.13 685.605 L1408.68 685.605 L1409.24 685.605 L1409.8 685.605 L1410.36 685.605 L1410.92 685.605 L1411.48 685.605 L1412.04 685.605 L1412.6 685.605 L1413.16 685.605 L1413.72 685.605 L1414.28 685.605 L1414.84 685.605 L1415.4 685.605 L1415.95 685.605 L1416.51 685.605 L1417.07 685.605 L1417.63 685.605 L1418.19 685.605 L1418.75 685.605 L1419.31 685.605 L1419.87 685.605 L1420.43 685.605 L1420.99 685.605 L1421.55 685.605 L1422.11 685.605 L1422.67 685.605 L1423.23 685.605 L1423.78 685.605 L1424.34 685.605 L1424.9 685.605 L1425.46 685.605 L1426.02 685.605 L1426.58 685.605 L1427.14 685.605 L1427.7 685.605 L1428.26 685.605 L1428.82 685.605 L1429.38 685.605 L1429.94 685.605 L1430.5 685.605 L1431.05 685.605 L1431.61 685.605 L1432.17 685.605 L1432.73 685.605 L1433.29 685.605 L1433.85 685.605 L1434.41 685.605 L1434.97 685.605 L1435.53 685.605 L1436.09 685.605 L1436.65 685.605 L1437.21 685.605 L1437.77 685.605 L1438.33 685.605 L1438.88 685.605 L1439.44 685.605 L1440 685.605 L1440.56 685.605 L1441.12 685.605 L1441.68 685.605 L1442.24 685.605 L1442.8 685.605 L1443.36 685.605 L1443.92 685.605 L1444.48 685.605 L1445.04 685.605 L1445.6 685.605 L1446.15 685.605 L1446.71 685.605 L1447.27 685.605 L1447.83 685.605 L1448.39 685.605 L1448.95 685.605 L1449.51 685.605 L1450.07 685.605 L1450.63 685.605 L1451.19 685.605 L1451.75 685.605 L1452.31 685.605 L1452.87 685.605 L1453.42 685.605 L1453.98 685.605 L1454.54 685.605 L1455.1 685.605 L1455.66 685.605 L1456.22 685.605 L1456.78 685.605 L1457.34 685.605 L1457.9 685.605 L1458.46 685.605 L1459.02 685.605 L1459.58 685.605 L1460.14 685.605 L1460.7 685.605 L1461.25 685.605 L1461.81 685.605 L1462.37 685.605 L1462.93 685.605 L1463.49 685.605 L1464.05 685.605 L1464.61 685.605 L1465.17 685.605 L1465.73 685.605 L1466.29 685.605 L1466.85 685.605 L1467.41 685.605 L1467.97 685.605 L1468.52 685.605 L1469.08 685.605 L1469.64 685.605 L1470.2 685.605 L1470.76 685.605 L1471.32 685.605 L1471.88 685.605 L1472.44 685.605 L1473 685.605 L1473.56 685.605 L1474.12 685.605 L1474.68 685.605 L1475.24 685.605 L1475.79 685.605 L1476.35 685.605 L1476.91 685.605 L1477.47 685.605 L1478.03 685.605 L1478.59 685.605 L1479.15 685.605 L1479.71 685.605 L1480.27 685.605 L1480.83 685.605 L1481.39 685.605 L1481.95 685.605 L1482.51 685.605 L1483.07 685.605 L1483.62 685.605 L1484.18 685.605 L1484.74 685.605 L1485.3 685.605 L1485.86 685.605 L1486.42 685.605 L1486.98 685.605 L1487.54 685.605 L1488.1 685.605 L1488.66 685.605 L1489.22 685.605 L1489.78 685.605 L1490.34 685.605 L1490.89 685.605 L1491.45 685.605 L1492.01 685.605 L1492.57 685.605 L1493.13 685.605 L1493.69 685.605 L1494.25 685.605 L1494.81 685.605 L1495.37 685.605 L1495.93 685.605 L1496.49 685.605 L1497.05 685.605 L1497.61 685.605 L1498.16 685.605 L1498.72 685.605 L1499.28 685.605 L1499.84 685.605 L1500.4 685.605 L1500.96 685.605 L1501.52 685.605 L1502.08 685.605 L1502.64 685.605 L1503.2 685.605 L1503.76 685.605 L1504.32 685.605 L1504.88 685.605 L1505.44 685.605 L1505.99 685.605 L1506.55 685.605 L1507.11 685.605 L1507.67 685.605 L1508.23 685.605 L1508.79 685.605 L1509.35 685.605 L1509.91 685.605 L1510.47 685.605 L1511.03 685.605 L1511.59 685.605 L1512.15 685.605 L1512.71 685.605 L1513.26 685.605 L1513.82 685.605 L1514.38 685.605 L1514.94 685.605 L1515.5 685.605 L1516.06 685.605 L1516.62 685.605 L1517.18 685.605 L1517.74 685.605 L1518.3 685.605 L1518.86 685.605 L1519.42 685.605 L1519.98 685.605 L1520.53 685.605 L1521.09 685.605 L1521.65 685.605 L1522.21 685.605 L1522.77 685.605 L1523.33 685.605 L1523.89 685.605 L1524.45 685.605 L1525.01 685.605 L1525.57 685.605 L1526.13 685.605 L1526.69 685.605 L1527.25 685.605 L1527.81 685.605 L1528.36 685.605 L1528.92 685.605 L1529.48 685.605 L1530.04 685.605 L1530.6 685.605 L1531.16 685.605 L1531.72 685.605 L1532.28 685.605 L1532.84 685.605 L1533.4 685.605 L1533.96 685.605 L1534.52 685.605 L1535.08 685.605 L1535.63 685.605 L1536.19 685.605 L1536.75 685.605 L1537.31 685.605 L1537.87 685.605 L1538.43 685.605 L1538.99 685.605 L1539.55 685.605 L1540.11 685.605 L1540.67 685.605 L1541.23 685.605 L1541.79 685.605 L1542.35 685.605 L1542.9 685.605 L1543.46 685.605 L1544.02 685.605 L1544.58 685.605 L1545.14 685.605 L1545.7 685.605 L1546.26 685.605 L1546.82 685.605 L1547.38 685.605 L1547.94 685.605 L1548.5 685.605 L1549.06 685.605 L1549.62 685.605 L1550.18 685.605 L1550.73 685.605 L1551.29 685.605 L1551.85 685.605 L1552.41 685.605 L1552.97 685.605 L1553.53 685.605 L1554.09 685.605 L1554.65 685.605 L1555.21 685.605 L1555.77 685.605 L1556.33 685.605 L1556.89 685.605 L1557.45 685.605 L1558 685.605 L1558.56 685.605 L1559.12 685.605 L1559.68 685.605 L1560.24 685.605 L1560.8 685.605 L1561.36 685.605 L1561.92 685.605 L1562.48 685.605 L1563.04 685.605 L1563.6 685.605 L1564.16 685.605 L1564.72 685.605 L1565.28 685.605 L1565.83 685.605 L1566.39 685.605 L1566.95 685.605 L1567.51 685.605 L1568.07 685.605 L1568.63 685.605 L1569.19 685.605 L1569.75 685.605 L1570.31 685.605 L1570.87 685.605 L1571.43 685.605 L1571.99 685.605 L1572.55 685.605 L1573.1 685.605 L1573.66 685.605 L1574.22 685.605 L1574.78 685.605 L1575.34 685.605 L1575.9 685.605 L1576.46 685.605 L1577.02 685.605 L1577.58 685.605 L1578.14 685.605 L1578.7 685.605 L1579.26 685.605 L1579.82 685.605 L1580.37 685.605 L1580.93 685.605 L1581.49 685.605 L1582.05 685.605 L1582.61 685.605 L1583.17 685.605 L1583.73 685.605 L1584.29 685.605 L1584.85 685.605 L1585.41 685.605 L1585.97 685.605 L1586.53 685.605 L1587.09 685.605 L1587.65 685.605 L1588.2 685.605 L1588.76 685.605 L1589.32 685.605 L1589.88 685.605 L1590.44 685.605 L1591 685.605 L1591.56 685.605 L1592.12 685.605 L1592.68 685.605 L1593.24 685.605 L1593.8 685.605 L1594.36 685.605 L1594.92 685.605 L1595.47 685.605 L1596.03 685.605 L1596.59 685.605 L1597.15 685.605 L1597.71 685.605 L1598.27 685.605 L1598.83 685.605 L1599.39 685.605 L1599.95 685.605 L1600.51 685.605 L1601.07 685.605 L1601.63 685.605 L1602.19 685.605 L1602.74 685.605 L1603.3 685.605 L1603.86 685.605 L1604.42 685.605 L1604.98 685.605 L1605.54 685.605 L1606.1 685.605 L1606.66 685.605 L1607.22 685.605 L1607.78 685.605 L1608.34 685.605 L1608.9 685.605 L1609.46 685.605 L1610.02 685.605 L1610.57 685.605 L1611.13 685.605 L1611.69 685.605 L1612.25 685.605 L1612.81 685.605 L1613.37 685.605 L1613.93 685.605 L1614.49 685.605 L1615.05 685.605 L1615.61 685.605 L1616.17 685.605 L1616.73 685.605 L1617.29 685.605 L1617.84 685.605 L1618.4 685.605 L1618.96 685.605 L1619.52 685.605 L1620.08 685.605 L1620.64 685.605 L1621.2 685.605 L1621.76 685.605 L1622.32 685.605 L1622.88 685.605 L1623.44 685.605 L1624 685.605 L1624.56 685.605 L1625.11 685.605 L1625.67 685.605 L1626.23 685.605 L1626.79 685.605 L1627.35 685.605 L1627.91 685.605 L1628.47 685.605 L1629.03 685.605 L1629.59 685.605 L1630.15 685.605 L1630.71 685.605 L1631.27 685.605 L1631.83 685.605 L1632.39 685.605 L1632.94 685.605 L1633.5 685.605 L1634.06 685.605 L1634.62 685.605 L1635.18 685.605 L1635.74 685.605 L1636.3 685.605 L1636.86 685.605 L1637.42 685.605 L1637.98 685.605 L1638.54 685.605 L1639.1 685.605 L1639.66 685.605 L1640.21 685.605 L1640.77 685.605 L1641.33 685.605 L1641.89 685.605 L1642.45 685.605 L1643.01 685.605 L1643.57 685.605 L1644.13 685.605 L1644.69 685.605 L1645.25 685.605 L1645.81 685.605 L1646.37 685.605 L1646.93 685.605 L1647.48 685.605 L1648.04 685.605 L1648.6 685.605 L1649.16 685.605 L1649.72 685.605 L1650.28 685.605 L1650.84 685.605 L1651.4 685.605 L1651.96 685.605 L1652.52 685.605 L1653.08 685.605 L1653.64 685.605 L1654.2 685.605 L1654.76 685.605 L1655.31 685.605 L1655.87 685.605 L1656.43 685.605 L1656.99 685.605 L1657.55 685.605 L1658.11 685.605 L1658.67 685.605 L1659.23 685.605 L1659.79 685.605 L1660.35 685.605 L1660.91 685.605 L1661.47 685.605 L1662.03 685.605 L1662.58 685.605 L1663.14 685.605 L1663.7 685.605 L1664.26 685.605 L1664.82 685.605 L1665.38 685.605 L1665.94 685.605 L1666.5 685.605 L1667.06 685.605 L1667.62 685.605 L1668.18 685.605 L1668.74 685.605 L1669.3 685.605 L1669.85 685.605 L1670.41 685.605 L1670.97 685.605 L1671.53 685.605 L1672.09 685.605 L1672.65 685.605 L1673.21 685.605 L1673.77 685.605 L1674.33 685.605 L1674.89 685.605 L1675.45 685.605 L1676.01 685.605 L1676.57 685.605 L1677.13 685.605 L1677.68 685.605 L1678.24 685.605 L1678.8 685.605 L1679.36 685.605 L1679.92 685.605 L1680.48 685.605 L1681.04 685.605 L1681.6 685.605 L1682.16 685.605 L1682.72 685.605 L1683.28 685.605 L1683.84 685.605 L1684.4 685.605 L1684.95 685.605 L1685.51 685.605 L1686.07 685.605 L1686.63 685.605 L1687.19 685.605 L1687.75 685.605 L1688.31 685.605 L1688.87 685.605 L1689.43 685.605 L1689.99 685.605 L1690.55 685.605 L1691.11 685.605 L1691.67 685.605 L1692.23 685.605 L1692.78 685.605 L1693.34 685.605 L1693.9 685.605 L1694.46 685.605 L1695.02 685.605 L1695.58 685.605 L1696.14 685.605 L1696.7 685.605 L1697.26 685.605 L1697.82 685.605 L1698.38 685.605 L1698.94 685.605 L1699.5 685.605 L1700.05 685.605 L1700.61 685.605 L1701.17 685.605 L1701.73 685.605 L1702.29 685.605 L1702.85 685.605 L1703.41 685.605 L1703.97 685.605 L1704.53 685.605 L1705.09 685.605 L1705.65 685.605 L1706.21 685.605 L1706.77 685.605 L1707.32 685.605 L1707.88 685.605 L1708.44 685.605 L1709 685.605 L1709.56 685.605 L1710.12 685.605 L1710.68 685.605 L1711.24 685.605 L1711.8 685.605 L1712.36 685.605 L1712.92 685.605 L1713.48 685.605 L1714.04 685.605 L1714.6 685.605 L1715.15 685.605 L1715.71 685.605 L1716.27 685.605 L1716.83 685.605 L1717.39 685.605 L1717.95 685.605 L1718.51 685.605 L1719.07 685.605 L1719.63 685.605 L1720.19 685.605 L1720.75 685.605 L1721.31 685.605 L1721.87 685.605 L1722.42 685.605 L1722.98 685.605 L1723.54 685.605 L1724.1 685.605 L1724.66 685.605 L1725.22 685.605 L1725.78 685.605 L1726.34 685.605 L1726.9 685.605 L1727.46 685.605 L1728.02 685.605 L1728.58 685.605 L1729.14 685.605 L1729.69 685.605 L1730.25 685.605 L1730.81 685.605 L1731.37 685.605 L1731.93 685.605 L1732.49 685.605 L1733.05 685.605 L1733.61 685.605 L1734.17 685.605 L1734.73 685.605 L1735.29 685.605 L1735.85 685.605 L1736.41 685.605 L1736.97 685.605 L1737.52 685.605 L1738.08 685.605 L1738.64 685.605 L1739.2 685.605 L1739.76 685.605 L1740.32 685.605 L1740.88 685.605 L1741.44 685.605 L1742 685.605 L1742.56 685.605 L1743.12 685.605 L1743.68 685.605 L1744.24 685.605 L1744.79 685.605 L1745.35 685.605 L1745.91 685.605 L1746.47 685.605 L1747.03 685.605 L1747.59 685.605 L1748.15 685.605 L1748.71 685.605 L1749.27 685.605 L1749.83 685.605 L1750.39 685.605 L1750.95 685.605 L1751.51 685.605 L1752.06 685.605 L1752.62 685.605 L1753.18 685.605 L1753.74 685.605 L1754.3 685.605 L1754.86 685.605 L1755.42 685.605 L1755.98 685.605 L1756.54 685.605 L1757.1 685.605 L1757.66 685.605 L1758.22 685.605 L1758.78 685.605 L1759.34 685.605 L1759.89 685.605 L1760.45 685.605 L1761.01 685.605 L1761.57 685.605 L1762.13 685.605 L1762.69 685.605 L1763.25 685.605 L1763.81 685.605 L1764.37 685.605 L1764.93 685.605 L1765.49 685.605 L1766.05 685.605 L1766.61 685.605 L1767.16 685.605 L1767.72 685.605 L1768.28 685.605 L1768.84 685.605 L1769.4 685.605 L1769.96 685.605 L1770.52 685.605 L1771.08 685.605 L1771.64 685.605 L1772.2 685.605 L1772.76 685.605 L1773.32 685.605 L1773.88 685.605 L1774.43 685.605 L1774.99 685.605 L1775.55 685.605 L1776.11 685.605 L1776.67 685.605 L1777.23 685.605 L1777.79 685.605 L1778.35 685.605 L1778.91 685.605 L1779.47 685.605 L1780.03 685.605 L1780.59 685.605 L1781.15 685.605 L1781.71 685.605 L1782.26 685.605 L1782.82 685.605 L1783.38 685.605 L1783.94 685.605 L1784.5 685.605 L1785.06 685.605 L1785.62 685.605 L1786.18 685.605 L1786.74 685.605 L1787.3 685.605 L1787.86 685.605 L1788.42 685.605 L1788.98 685.605 L1789.53 685.605 L1790.09 685.605 L1790.65 685.605 L1791.21 685.605 L1791.77 685.605 L1792.33 685.605 L1792.89 685.605 L1793.45 685.605 L1794.01 685.605 L1794.57 685.605 L1795.13 685.605 L1795.69 685.605 L1796.25 685.605 L1796.8 685.605 L1797.36 685.605 L1797.92 685.605 L1798.48 685.605 L1799.04 685.605 L1799.6 685.605 L1800.16 685.605 L1800.72 685.605 L1801.28 685.605 L1801.84 685.605 L1802.4 685.605 L1802.96 685.605 L1803.52 685.605 L1804.08 685.605 L1804.63 685.605 L1805.19 685.605 L1805.75 685.605 L1806.31 685.605 L1806.87 685.605 L1807.43 685.605 L1807.99 685.605 L1808.55 685.605 L1809.11 685.605 L1809.67 685.605 L1810.23 685.605 L1810.79 685.605 L1811.35 685.605 L1811.9 685.605 L1812.46 685.605 L1813.02 685.605 L1813.58 685.605 L1814.14 685.605 L1814.7 685.605 L1815.26 685.605 L1815.82 685.605 L1816.38 685.605 L1816.94 685.605 L1817.5 685.605 L1818.06 685.605 L1818.62 685.605 L1819.18 685.605 L1819.73 685.605 L1820.29 685.605 L1820.85 685.605 L1821.41 685.605 L1821.97 685.605 L1822.53 685.605 L1823.09 685.605 L1823.65 685.605 L1824.21 685.605 L1824.77 685.605 L1825.33 685.605 L1825.89 685.605 L1826.45 685.605 L1827 685.605 L1827.56 685.605 L1828.12 685.605 L1828.68 685.605 L1829.24 685.605 L1829.8 685.605 L1830.36 685.605 L1830.92 685.605 L1831.48 685.605 L1832.04 685.605 L1832.6 685.605 L1833.16 685.605 L1833.72 685.605 L1834.27 685.605 L1834.83 685.605 L1835.39 685.605 L1835.95 685.605 L1836.51 685.605 L1837.07 685.605 L1837.63 685.605 L1838.19 685.605 L1838.19 682.94 L1837.63 682.94 L1837.07 682.94 L1836.51 682.94 L1835.95 682.94 L1835.39 682.94 L1834.83 682.94 L1834.27 682.94 L1833.72 682.94 L1833.16 682.94 L1832.6 682.94 L1832.04 682.94 L1831.48 682.94 L1830.92 682.94 L1830.36 682.94 L1829.8 682.94 L1829.24 682.94 L1828.68 682.94 L1828.12 682.94 L1827.56 682.94 L1827 682.94 L1826.45 682.94 L1825.89 682.94 L1825.33 682.94 L1824.77 682.94 L1824.21 682.94 L1823.65 682.94 L1823.09 682.94 L1822.53 682.94 L1821.97 682.94 L1821.41 682.94 L1820.85 682.94 L1820.29 682.94 L1819.73 682.94 L1819.18 682.94 L1818.62 682.94 L1818.06 682.94 L1817.5 682.94 L1816.94 682.94 L1816.38 682.94 L1815.82 682.94 L1815.26 682.94 L1814.7 682.94 L1814.14 682.94 L1813.58 682.94 L1813.02 682.94 L1812.46 682.94 L1811.9 682.94 L1811.35 682.94 L1810.79 682.94 L1810.23 682.94 L1809.67 682.94 L1809.11 682.94 L1808.55 682.94 L1807.99 682.94 L1807.43 682.94 L1806.87 682.94 L1806.31 682.94 L1805.75 682.94 L1805.19 682.94 L1804.63 682.94 L1804.08 682.94 L1803.52 682.94 L1802.96 682.94 L1802.4 682.94 L1801.84 682.94 L1801.28 682.94 L1800.72 682.94 L1800.16 682.94 L1799.6 682.94 L1799.04 682.94 L1798.48 682.94 L1797.92 682.94 L1797.36 682.94 L1796.8 682.94 L1796.25 682.94 L1795.69 682.94 L1795.13 682.94 L1794.57 682.94 L1794.01 682.94 L1793.45 682.94 L1792.89 682.94 L1792.33 682.94 L1791.77 682.94 L1791.21 682.94 L1790.65 682.94 L1790.09 682.94 L1789.53 682.94 L1788.98 682.94 L1788.42 682.94 L1787.86 682.94 L1787.3 682.94 L1786.74 682.94 L1786.18 682.94 L1785.62 682.94 L1785.06 682.94 L1784.5 682.94 L1783.94 682.94 L1783.38 682.94 L1782.82 682.94 L1782.26 682.94 L1781.71 682.94 L1781.15 682.94 L1780.59 682.94 L1780.03 682.94 L1779.47 682.94 L1778.91 682.94 L1778.35 682.94 L1777.79 682.94 L1777.23 682.94 L1776.67 682.94 L1776.11 682.94 L1775.55 682.94 L1774.99 682.94 L1774.43 682.94 L1773.88 682.94 L1773.32 682.94 L1772.76 682.94 L1772.2 682.94 L1771.64 682.94 L1771.08 682.94 L1770.52 682.94 L1769.96 682.94 L1769.4 682.94 L1768.84 682.94 L1768.28 682.94 L1767.72 682.94 L1767.16 682.94 L1766.61 682.94 L1766.05 682.94 L1765.49 682.94 L1764.93 682.94 L1764.37 682.94 L1763.81 682.94 L1763.25 682.94 L1762.69 682.94 L1762.13 682.94 L1761.57 682.94 L1761.01 682.94 L1760.45 682.94 L1759.89 682.94 L1759.34 682.94 L1758.78 682.94 L1758.22 682.94 L1757.66 682.94 L1757.1 682.94 L1756.54 682.94 L1755.98 682.94 L1755.42 682.94 L1754.86 682.94 L1754.3 682.94 L1753.74 682.94 L1753.18 682.94 L1752.62 682.94 L1752.06 682.94 L1751.51 682.94 L1750.95 682.94 L1750.39 682.94 L1749.83 682.94 L1749.27 682.94 L1748.71 682.94 L1748.15 682.94 L1747.59 682.94 L1747.03 682.94 L1746.47 682.94 L1745.91 682.94 L1745.35 682.94 L1744.79 682.94 L1744.24 682.94 L1743.68 682.94 L1743.12 682.94 L1742.56 682.94 L1742 682.94 L1741.44 682.94 L1740.88 682.94 L1740.32 682.94 L1739.76 682.94 L1739.2 682.94 L1738.64 682.94 L1738.08 682.94 L1737.52 682.94 L1736.97 682.94 L1736.41 682.94 L1735.85 682.94 L1735.29 682.94 L1734.73 682.94 L1734.17 682.94 L1733.61 682.94 L1733.05 682.94 L1732.49 682.94 L1731.93 682.94 L1731.37 682.94 L1730.81 682.94 L1730.25 682.94 L1729.69 682.94 L1729.14 682.94 L1728.58 682.94 L1728.02 682.94 L1727.46 682.94 L1726.9 682.94 L1726.34 682.94 L1725.78 682.94 L1725.22 682.94 L1724.66 682.94 L1724.1 682.94 L1723.54 682.94 L1722.98 682.94 L1722.42 682.94 L1721.87 682.94 L1721.31 682.94 L1720.75 682.94 L1720.19 682.94 L1719.63 682.94 L1719.07 682.94 L1718.51 682.94 L1717.95 682.94 L1717.39 682.94 L1716.83 682.94 L1716.27 682.94 L1715.71 682.94 L1715.15 682.94 L1714.6 682.94 L1714.04 682.94 L1713.48 682.94 L1712.92 682.94 L1712.36 682.94 L1711.8 682.94 L1711.24 682.94 L1710.68 682.94 L1710.12 682.94 L1709.56 682.94 L1709 682.94 L1708.44 682.94 L1707.88 682.94 L1707.32 682.94 L1706.77 682.94 L1706.21 682.94 L1705.65 682.94 L1705.09 682.94 L1704.53 682.94 L1703.97 682.94 L1703.41 682.94 L1702.85 682.94 L1702.29 682.94 L1701.73 682.94 L1701.17 682.94 L1700.61 682.94 L1700.05 682.94 L1699.5 682.94 L1698.94 682.94 L1698.38 682.94 L1697.82 682.94 L1697.26 682.94 L1696.7 682.94 L1696.14 682.94 L1695.58 682.94 L1695.02 682.94 L1694.46 682.94 L1693.9 682.94 L1693.34 682.94 L1692.78 682.94 L1692.23 682.94 L1691.67 682.94 L1691.11 682.94 L1690.55 682.94 L1689.99 682.94 L1689.43 682.94 L1688.87 682.94 L1688.31 682.94 L1687.75 682.94 L1687.19 682.94 L1686.63 682.94 L1686.07 682.94 L1685.51 682.94 L1684.95 682.94 L1684.4 682.94 L1683.84 682.94 L1683.28 682.94 L1682.72 682.94 L1682.16 682.94 L1681.6 682.94 L1681.04 682.94 L1680.48 682.94 L1679.92 682.94 L1679.36 682.94 L1678.8 682.94 L1678.24 682.94 L1677.68 682.94 L1677.13 682.94 L1676.57 682.94 L1676.01 682.94 L1675.45 682.94 L1674.89 682.94 L1674.33 682.94 L1673.77 682.94 L1673.21 682.94 L1672.65 682.94 L1672.09 682.94 L1671.53 682.94 L1670.97 682.94 L1670.41 682.94 L1669.85 682.94 L1669.3 682.94 L1668.74 682.94 L1668.18 682.94 L1667.62 682.94 L1667.06 682.94 L1666.5 682.94 L1665.94 682.94 L1665.38 682.94 L1664.82 682.94 L1664.26 682.94 L1663.7 682.94 L1663.14 682.94 L1662.58 682.94 L1662.03 682.94 L1661.47 682.94 L1660.91 682.94 L1660.35 682.94 L1659.79 682.94 L1659.23 682.94 L1658.67 682.94 L1658.11 682.94 L1657.55 682.94 L1656.99 682.94 L1656.43 682.94 L1655.87 682.94 L1655.31 682.94 L1654.76 682.94 L1654.2 682.94 L1653.64 682.94 L1653.08 682.94 L1652.52 682.94 L1651.96 682.94 L1651.4 682.94 L1650.84 682.94 L1650.28 682.94 L1649.72 682.94 L1649.16 682.94 L1648.6 682.94 L1648.04 682.94 L1647.48 682.94 L1646.93 682.94 L1646.37 682.94 L1645.81 682.94 L1645.25 682.94 L1644.69 682.94 L1644.13 682.94 L1643.57 682.94 L1643.01 682.94 L1642.45 682.94 L1641.89 682.94 L1641.33 682.94 L1640.77 682.94 L1640.21 682.94 L1639.66 682.94 L1639.1 682.94 L1638.54 682.94 L1637.98 682.94 L1637.42 682.94 L1636.86 682.94 L1636.3 682.94 L1635.74 682.94 L1635.18 682.94 L1634.62 682.94 L1634.06 682.94 L1633.5 682.94 L1632.94 682.94 L1632.39 682.94 L1631.83 682.94 L1631.27 682.94 L1630.71 682.94 L1630.15 682.94 L1629.59 682.94 L1629.03 682.94 L1628.47 682.94 L1627.91 682.94 L1627.35 682.94 L1626.79 682.94 L1626.23 682.94 L1625.67 682.94 L1625.11 682.94 L1624.56 682.94 L1624 682.94 L1623.44 682.94 L1622.88 682.94 L1622.32 682.94 L1621.76 682.94 L1621.2 682.94 L1620.64 682.94 L1620.08 682.94 L1619.52 682.94 L1618.96 682.94 L1618.4 682.94 L1617.84 682.94 L1617.29 682.94 L1616.73 682.94 L1616.17 682.94 L1615.61 682.94 L1615.05 682.94 L1614.49 682.94 L1613.93 682.94 L1613.37 682.94 L1612.81 682.94 L1612.25 682.94 L1611.69 682.94 L1611.13 682.94 L1610.57 682.94 L1610.02 682.94 L1609.46 682.94 L1608.9 682.94 L1608.34 682.94 L1607.78 682.94 L1607.22 682.94 L1606.66 682.94 L1606.1 682.94 L1605.54 682.94 L1604.98 682.94 L1604.42 682.94 L1603.86 682.94 L1603.3 682.94 L1602.74 682.94 L1602.19 682.94 L1601.63 682.94 L1601.07 682.94 L1600.51 682.94 L1599.95 682.94 L1599.39 682.94 L1598.83 682.94 L1598.27 682.94 L1597.71 682.94 L1597.15 682.94 L1596.59 682.94 L1596.03 682.94 L1595.47 682.94 L1594.92 682.94 L1594.36 682.94 L1593.8 682.94 L1593.24 682.94 L1592.68 682.94 L1592.12 682.94 L1591.56 682.94 L1591 682.94 L1590.44 682.94 L1589.88 682.94 L1589.32 682.94 L1588.76 682.94 L1588.2 682.94 L1587.65 682.94 L1587.09 682.94 L1586.53 682.94 L1585.97 682.94 L1585.41 682.94 L1584.85 682.94 L1584.29 682.94 L1583.73 682.94 L1583.17 682.94 L1582.61 682.94 L1582.05 682.94 L1581.49 682.94 L1580.93 682.94 L1580.37 682.94 L1579.82 682.94 L1579.26 682.94 L1578.7 682.94 L1578.14 682.94 L1577.58 682.94 L1577.02 682.94 L1576.46 682.94 L1575.9 682.94 L1575.34 682.94 L1574.78 682.94 L1574.22 682.94 L1573.66 682.94 L1573.1 682.94 L1572.55 682.94 L1571.99 682.94 L1571.43 682.94 L1570.87 682.94 L1570.31 682.94 L1569.75 682.94 L1569.19 682.94 L1568.63 682.94 L1568.07 682.94 L1567.51 682.94 L1566.95 682.94 L1566.39 682.94 L1565.83 682.94 L1565.28 682.94 L1564.72 682.94 L1564.16 682.94 L1563.6 682.94 L1563.04 682.94 L1562.48 682.94 L1561.92 682.94 L1561.36 682.94 L1560.8 682.94 L1560.24 682.94 L1559.68 682.94 L1559.12 682.94 L1558.56 682.94 L1558 682.94 L1557.45 682.94 L1556.89 682.94 L1556.33 682.94 L1555.77 682.94 L1555.21 682.94 L1554.65 682.94 L1554.09 682.94 L1553.53 682.94 L1552.97 682.94 L1552.41 682.94 L1551.85 682.94 L1551.29 682.94 L1550.73 682.94 L1550.18 682.94 L1549.62 682.94 L1549.06 682.94 L1548.5 682.94 L1547.94 682.94 L1547.38 682.94 L1546.82 682.94 L1546.26 682.94 L1545.7 682.94 L1545.14 682.94 L1544.58 682.94 L1544.02 682.94 L1543.46 682.94 L1542.9 682.94 L1542.35 682.94 L1541.79 682.94 L1541.23 682.94 L1540.67 682.94 L1540.11 682.94 L1539.55 682.94 L1538.99 682.94 L1538.43 682.94 L1537.87 682.94 L1537.31 682.94 L1536.75 682.94 L1536.19 682.94 L1535.63 682.94 L1535.08 682.94 L1534.52 682.94 L1533.96 682.94 L1533.4 682.94 L1532.84 682.94 L1532.28 682.94 L1531.72 682.94 L1531.16 682.94 L1530.6 682.94 L1530.04 682.94 L1529.48 682.94 L1528.92 682.94 L1528.36 682.94 L1527.81 682.94 L1527.25 682.94 L1526.69 682.94 L1526.13 682.94 L1525.57 682.94 L1525.01 682.94 L1524.45 682.94 L1523.89 682.94 L1523.33 682.94 L1522.77 682.94 L1522.21 682.94 L1521.65 682.94 L1521.09 682.94 L1520.53 682.94 L1519.98 682.94 L1519.42 682.94 L1518.86 682.94 L1518.3 682.94 L1517.74 682.94 L1517.18 682.94 L1516.62 682.94 L1516.06 682.94 L1515.5 682.94 L1514.94 682.94 L1514.38 682.94 L1513.82 682.94 L1513.26 682.94 L1512.71 682.94 L1512.15 682.94 L1511.59 682.94 L1511.03 682.94 L1510.47 682.94 L1509.91 682.94 L1509.35 682.94 L1508.79 682.94 L1508.23 682.94 L1507.67 682.94 L1507.11 682.94 L1506.55 682.94 L1505.99 682.94 L1505.44 682.94 L1504.88 682.94 L1504.32 682.94 L1503.76 682.94 L1503.2 682.94 L1502.64 682.94 L1502.08 682.94 L1501.52 682.94 L1500.96 682.94 L1500.4 682.94 L1499.84 682.94 L1499.28 682.94 L1498.72 682.94 L1498.16 682.94 L1497.61 682.94 L1497.05 682.94 L1496.49 682.94 L1495.93 682.94 L1495.37 682.94 L1494.81 682.94 L1494.25 682.94 L1493.69 682.94 L1493.13 682.94 L1492.57 682.94 L1492.01 682.94 L1491.45 682.94 L1490.89 682.94 L1490.34 682.94 L1489.78 682.94 L1489.22 682.94 L1488.66 682.94 L1488.1 682.94 L1487.54 682.94 L1486.98 682.94 L1486.42 682.94 L1485.86 682.94 L1485.3 682.94 L1484.74 682.94 L1484.18 682.94 L1483.62 682.94 L1483.07 682.94 L1482.51 682.94 L1481.95 682.94 L1481.39 682.94 L1480.83 682.94 L1480.27 682.94 L1479.71 682.94 L1479.15 682.94 L1478.59 682.94 L1478.03 682.94 L1477.47 682.94 L1476.91 682.94 L1476.35 682.94 L1475.79 682.94 L1475.24 682.94 L1474.68 682.94 L1474.12 682.94 L1473.56 682.94 L1473 682.94 L1472.44 682.94 L1471.88 682.94 L1471.32 682.94 L1470.76 682.94 L1470.2 682.94 L1469.64 682.94 L1469.08 682.94 L1468.52 682.94 L1467.97 682.94 L1467.41 682.94 L1466.85 682.94 L1466.29 682.94 L1465.73 682.94 L1465.17 682.94 L1464.61 682.94 L1464.05 682.94 L1463.49 682.94 L1462.93 682.94 L1462.37 682.94 L1461.81 682.94 L1461.25 682.94 L1460.7 682.94 L1460.14 682.94 L1459.58 682.94 L1459.02 682.94 L1458.46 682.94 L1457.9 682.94 L1457.34 682.94 L1456.78 682.94 L1456.22 682.94 L1455.66 682.94 L1455.1 682.94 L1454.54 682.94 L1453.98 682.94 L1453.42 682.94 L1452.87 682.94 L1452.31 682.94 L1451.75 682.94 L1451.19 682.94 L1450.63 682.94 L1450.07 682.94 L1449.51 682.94 L1448.95 682.94 L1448.39 682.94 L1447.83 682.94 L1447.27 682.94 L1446.71 682.94 L1446.15 682.94 L1445.6 682.94 L1445.04 682.94 L1444.48 682.94 L1443.92 682.94 L1443.36 682.94 L1442.8 682.94 L1442.24 682.94 L1441.68 682.94 L1441.12 682.94 L1440.56 682.94 L1440 682.94 L1439.44 682.94 L1438.88 682.94 L1438.33 682.94 L1437.77 682.94 L1437.21 682.94 L1436.65 682.94 L1436.09 682.94 L1435.53 682.94 L1434.97 682.94 L1434.41 682.94 L1433.85 682.94 L1433.29 682.94 L1432.73 682.94 L1432.17 682.94 L1431.61 682.94 L1431.05 682.94 L1430.5 682.94 L1429.94 682.94 L1429.38 682.94 L1428.82 682.94 L1428.26 682.94 L1427.7 682.94 L1427.14 682.94 L1426.58 682.94 L1426.02 682.94 L1425.46 682.94 L1424.9 682.94 L1424.34 682.94 L1423.78 682.94 L1423.23 682.94 L1422.67 682.94 L1422.11 682.94 L1421.55 682.94 L1420.99 682.94 L1420.43 682.94 L1419.87 682.94 L1419.31 682.94 L1418.75 682.94 L1418.19 682.94 L1417.63 682.94 L1417.07 682.94 L1416.51 682.94 L1415.95 682.94 L1415.4 682.94 L1414.84 682.94 L1414.28 682.94 L1413.72 682.94 L1413.16 682.94 L1412.6 682.94 L1412.04 682.94 L1411.48 682.94 L1410.92 682.94 L1410.36 682.94 L1409.8 682.94 L1409.24 682.94 L1408.68 682.94 L1408.13 682.94 L1407.57 682.94 L1407.01 682.94 L1406.45 682.94 L1405.89 682.94 L1405.33 682.94 L1404.77 682.94 L1404.21 682.94 L1403.65 682.94 L1403.09 682.94 L1402.53 682.94 L1401.97 682.94 L1401.41 682.94 L1400.86 682.94 L1400.3 682.94 L1399.74 682.94 L1399.18 682.94 L1398.62 682.94 L1398.06 682.94 L1397.5 682.94 L1396.94 682.94 L1396.38 682.94 L1395.82 682.94 L1395.26 682.94 L1394.7 682.94 L1394.14 682.94 L1393.58 682.94 L1393.03 682.94 L1392.47 682.94 L1391.91 682.94 L1391.35 682.94 L1390.79 682.94 L1390.23 682.94 L1389.67 682.94 L1389.11 682.94 L1388.55 682.94 L1387.99 682.94 L1387.43 682.94 L1386.87 682.94 L1386.31 682.94 L1385.76 682.94 L1385.2 682.94 L1384.64 682.94 L1384.08 682.94 L1383.52 682.94 L1382.96 682.94 L1382.4 682.94 L1381.84 682.94 L1381.28 682.94 L1380.72 682.94 L1380.16 682.94 L1379.6 682.94 L1379.04 682.94 L1378.49 682.94 L1377.93 682.94 L1377.37 682.94 L1376.81 682.94 L1376.25 682.94 L1375.69 682.94 L1375.13 682.94 L1374.57 682.94 L1374.01 682.94 L1373.45 682.94 L1372.89 682.94 L1372.33 682.94 L1371.77 682.94 L1371.21 682.94 L1370.66 682.94 L1370.1 682.94 L1369.54 682.94 L1368.98 682.94 L1368.42 682.94 L1367.86 682.94 L1367.3 682.94 L1366.74 682.94 L1366.18 682.94 L1365.62 682.94 L1365.06 682.94 L1364.5 682.94 L1363.94 682.94 L1363.39 682.94 L1362.83 682.94 L1362.27 682.94 L1361.71 682.94 L1361.15 682.94 L1360.59 682.94 L1360.03 682.94 L1359.47 682.94 L1358.91 682.94 L1358.35 682.94 L1357.79 682.94 L1357.23 682.94 L1356.67 682.94 L1356.12 682.94 L1355.56 682.94 L1355 682.94 L1354.44 682.94 L1353.88 682.94 L1353.32 682.94 L1352.76 682.94 L1352.2 682.94 L1351.64 682.94 L1351.08 682.94 L1350.52 682.94 L1349.96 682.94 L1349.4 682.94 L1348.84 682.94 L1348.29 682.94 L1347.73 682.94 L1347.17 682.94 L1346.61 682.94 L1346.05 682.94 L1345.49 682.94 L1344.93 682.94 L1344.37 682.94 L1343.81 682.94 L1343.25 682.94 L1342.69 682.94 L1342.13 682.94 L1341.57 682.94 L1341.02 682.94 L1340.46 682.94 L1339.9 682.94 L1339.34 682.94 L1338.78 682.94 L1338.22 682.94 L1337.66 682.94 L1337.1 682.94 L1336.54 682.94 L1335.98 682.94 L1335.42 682.94 L1334.86 682.94 L1334.3 682.94 L1333.75 682.94 L1333.19 682.94 L1332.63 682.94 L1332.07 682.94 L1331.51 682.94 L1330.95 682.94 L1330.39 682.94 L1329.83 682.94 L1329.27 682.94 L1328.71 682.94 L1328.15 682.94 L1327.59 682.94 L1327.03 682.94 L1326.47 682.94 L1325.92 682.94 L1325.36 682.94 L1324.8 682.94 L1324.24 682.94 L1323.68 682.94 L1323.12 682.94 L1322.56 682.94 L1322 682.94 L1321.44 682.94 L1320.88 682.94 L1320.32 682.94 L1319.76 682.94 L1319.2 682.94 L1318.65 682.94 L1318.09 682.94 L1317.53 682.94 L1316.97 682.94 L1316.41 682.94 L1315.85 682.94 L1315.29 682.94 L1314.73 682.94 L1314.17 682.94 L1313.61 682.94 L1313.05 682.94 L1312.49 682.94 L1311.93 682.94 L1311.38 682.94 L1310.82 682.94 L1310.26 682.94 L1309.7 682.94 L1309.14 682.94 L1308.58 682.94 L1308.02 682.94 L1307.46 682.94 L1306.9 682.94 L1306.34 682.94 L1305.78 682.94 L1305.22 682.94 L1304.66 682.94 L1304.1 682.94 L1303.55 682.94 L1302.99 682.94 L1302.43 682.94 L1301.87 682.94 L1301.31 682.94 L1300.75 682.94 L1300.19 682.94 L1299.63 682.94 L1299.07 682.94 L1298.51 682.94 L1297.95 682.94 L1297.39 682.94 L1296.83 682.94 L1296.28 682.94 L1295.72 682.94 L1295.16 682.94 L1294.6 682.94 L1294.04 682.94 L1293.48 682.94 L1292.92 682.94 L1292.36 682.94 L1291.8 682.94 L1291.24 682.94 L1290.68 682.94 L1290.12 682.94 L1289.56 682.94 L1289 682.94 L1288.45 682.94 L1287.89 682.94 L1287.33 682.94 L1286.77 682.94 L1286.21 682.94 L1285.65 682.94 L1285.09 682.94 L1284.53 682.94 L1283.97 682.94 L1283.41 682.94 L1282.85 682.94 L1282.29 682.94 L1281.73 682.94 L1281.18 682.94 L1280.62 682.94 L1280.06 682.94 L1279.5 682.94 L1278.94 682.94 L1278.38 682.94 L1277.82 682.94 L1277.26 682.94 L1276.7 682.94 L1276.14 682.94 L1275.58 682.94 L1275.02 682.94 L1274.46 682.94 L1273.91 682.94 L1273.35 682.94 L1272.79 682.94 L1272.23 682.94 L1271.67 682.94 L1271.11 682.94 L1270.55 682.94 L1269.99 682.94 L1269.43 682.94 L1268.87 682.94 L1268.31 682.94 L1267.75 682.94 L1267.19 682.94 L1266.63 682.94 L1266.08 682.94 L1265.52 682.94 L1264.96 682.94 L1264.4 682.94 L1263.84 682.94 L1263.28 682.94 L1262.72 682.94 L1262.16 682.94 L1261.6 682.94 L1261.04 682.94 L1260.48 682.94 L1259.92 682.94 L1259.36 682.94 L1258.81 682.94 L1258.25 682.94 L1257.69 682.94 L1257.13 682.94 L1256.57 682.94 L1256.01 682.94 L1255.45 682.94 L1254.89 682.94 L1254.33 682.94 L1253.77 682.94 L1253.21 682.94 L1252.65 682.94 L1252.09 682.94 L1251.54 682.94 L1250.98 682.94 L1250.42 682.94 L1249.86 682.94 L1249.3 682.94 L1248.74 682.94 L1248.18 682.94 L1247.62 682.94 L1247.06 682.94 L1246.5 682.94 L1245.94 682.94 L1245.38 682.94 L1244.82 682.94 L1244.26 682.94 L1243.71 682.94 L1243.15 682.94 L1242.59 682.94 L1242.03 682.94 L1241.47 682.94 L1240.91 682.94 L1240.35 682.94 L1239.79 682.94 L1239.23 682.94 L1238.67 682.94 L1238.11 682.94 L1237.55 682.94 L1236.99 682.94 L1236.44 682.94 L1235.88 682.94 L1235.32 682.94 L1234.76 682.94 L1234.2 682.94 L1233.64 682.94 L1233.08 682.94 L1232.52 682.94 L1231.96 682.94 L1231.4 682.94 L1230.84 682.94 L1230.28 682.94 L1229.72 682.94 L1229.17 682.94 L1228.61 682.94 L1228.05 682.94 L1227.49 682.94 L1226.93 682.94 L1226.37 682.94 L1225.81 682.94 L1225.25 682.94 L1224.69 682.94 L1224.13 682.94 L1223.57 682.94 L1223.01 682.94 L1222.45 682.94 L1221.89 682.94 L1221.34 682.94 L1220.78 682.94 L1220.22 682.94 L1219.66 682.94 L1219.1 682.94 L1218.54 682.94 L1217.98 682.94 L1217.42 682.94 L1216.86 682.94 L1216.3 682.94 L1215.74 682.94 L1215.18 682.94 L1214.62 682.94 L1214.07 682.94 L1213.51 682.94 L1212.95 682.94 L1212.39 682.94 L1211.83 682.94 L1211.27 682.94 L1210.71 682.94 L1210.15 682.94 L1209.59 682.94 L1209.03 682.94 L1208.47 682.94 L1207.91 682.94 L1207.35 682.94 L1206.8 682.94 L1206.24 682.94 L1205.68 682.94 L1205.12 682.94 L1204.56 682.94 L1204 682.94 L1203.44 682.94 L1202.88 682.94 L1202.32 682.94 L1201.76 682.94 L1201.2 682.94 L1200.64 682.94 L1200.08 682.94 L1199.52 682.94 L1198.97 682.94 L1198.41 682.94 L1197.85 682.94 L1197.29 682.94 L1196.73 682.94 L1196.17 682.94 L1195.61 682.94 L1195.05 682.94 L1194.49 682.94 L1193.93 682.94 L1193.37 682.94 L1192.81 682.94 L1192.25 682.94 L1191.7 682.94 L1191.14 682.94 L1190.58 682.94 L1190.02 682.94 L1189.46 682.94 L1188.9 682.94 L1188.34 682.94 L1187.78 682.94 L1187.22 682.94 L1186.66 682.94 L1186.1 682.94 L1185.54 682.94 L1184.98 682.94 L1184.43 682.94 L1183.87 682.94 L1183.31 682.94 L1182.75 682.94 L1182.19 682.94 L1181.63 682.94 L1181.07 682.94 L1180.51 682.94 L1179.95 682.94 L1179.39 682.94 L1178.83 682.94 L1178.27 682.94 L1177.71 682.94 L1177.15 682.94 L1176.6 682.94 L1176.04 682.94 L1175.48 682.94 L1174.92 682.94 L1174.36 682.94 L1173.8 682.94 L1173.24 682.94 L1172.68 682.94 L1172.12 682.94 L1171.56 682.94 L1171 682.94 L1170.44 682.94 L1169.88 682.94 L1169.33 682.94 L1168.77 682.94 L1168.21 682.94 L1167.65 682.94 L1167.09 682.94 L1166.53 682.94 L1165.97 682.94 L1165.41 682.94 L1164.85 682.94 L1164.29 682.94 L1163.73 682.94 L1163.17 682.94 L1162.61 682.94 L1162.05 682.94 L1161.5 682.94 L1160.94 682.94 L1160.38 682.94 L1159.82 682.94 L1159.26 682.94 L1158.7 682.94 L1158.14 682.94 L1157.58 682.94 L1157.02 682.94 L1156.46 682.94 L1155.9 682.94 L1155.34 682.94 L1154.78 682.94 L1154.23 682.94 L1153.67 682.94 L1153.11 682.94 L1152.55 682.94 L1151.99 682.94 L1151.43 682.94 L1150.87 682.94 L1150.31 682.94 L1149.75 682.94 L1149.19 682.94 L1148.63 682.94 L1148.07 682.94 L1147.51 682.94 L1146.96 682.94 L1146.4 682.94 L1145.84 682.94 L1145.28 682.94 L1144.72 682.94 L1144.16 682.94 L1143.6 682.94 L1143.04 682.94 L1142.48 682.94 L1141.92 682.94 L1141.36 682.94 L1140.8 682.94 L1140.24 682.94 L1139.68 682.94 L1139.13 682.94 L1138.57 682.94 L1138.01 682.94 L1137.45 682.94 L1136.89 682.94 L1136.33 682.94 L1135.77 682.94 L1135.21 682.94 L1134.65 682.94 L1134.09 682.94 L1133.53 682.94 L1132.97 682.94 L1132.41 682.94 L1131.86 682.94 L1131.3 682.94 L1130.74 682.94 L1130.18 682.94 L1129.62 682.94 L1129.06 682.94 L1128.5 682.94 L1127.94 682.94 L1127.38 682.94 L1126.82 682.94 L1126.26 682.94 L1125.7 682.94 L1125.14 682.94 L1124.59 682.94 L1124.03 682.94 L1123.47 682.94 L1122.91 682.94 L1122.35 682.94 L1121.79 682.94 L1121.23 682.94 L1120.67 682.94 L1120.11 682.94 L1119.55 682.94 L1118.99 682.94 L1118.43 682.94 L1117.87 682.94 L1117.31 682.94 L1116.76 682.94 L1116.2 682.94 L1115.64 682.94 L1115.08 682.94 L1114.52 682.94 L1113.96 682.94 L1113.4 682.94 L1112.84 682.94 L1112.28 682.94 L1111.72 682.94 L1111.16 682.94 L1110.6 682.94 L1110.04 682.94 L1109.49 682.94 L1108.93 682.94 L1108.37 682.94 L1107.81 682.94 L1107.25 682.94 L1106.69 682.94 L1106.13 682.94 L1105.57 682.94 L1105.01 682.94 L1104.45 682.94 L1103.89 682.94 L1103.33 682.94 L1102.77 682.94 L1102.22 682.94 L1101.66 682.94 L1101.1 682.94 L1100.54 682.94 L1099.98 682.94 L1099.42 682.94 L1098.86 682.94 L1098.3 682.94 L1097.74 682.94 L1097.18 682.94 L1096.62 682.94 L1096.06 682.94 L1095.5 682.94 L1094.94 682.94 L1094.39 682.94 L1093.83 682.94 L1093.27 682.94 L1092.71 682.94 L1092.15 682.94 L1091.59 682.94 L1091.03 682.94 L1090.47 682.94 L1089.91 682.94 L1089.35 682.94 L1088.79 682.94 L1088.23 682.94 L1087.67 682.94 L1087.12 682.94 L1086.56 682.94 L1086 682.94 L1085.44 682.94 L1084.88 682.94 L1084.32 682.94 L1083.76 682.94 L1083.2 682.94 L1082.64 682.94 L1082.08 682.94 L1081.52 682.94 L1080.96 682.94 L1080.4 682.94 L1079.85 682.94 L1079.29 682.94 L1078.73 682.94 L1078.17 682.94 L1077.61 682.94 L1077.05 682.94 L1076.49 682.94 L1075.93 682.94 L1075.37 682.94 L1074.81 682.94 L1074.25 682.94 L1073.69 682.94 L1073.13 682.94 L1072.57 682.94 L1072.02 682.94 L1071.46 682.94 L1070.9 682.94 L1070.34 682.94 L1069.78 682.94 L1069.22 682.94 L1068.66 682.94 L1068.1 682.94 L1067.54 682.94 L1066.98 682.94 L1066.42 682.94 L1065.86 682.94 L1065.3 682.94 L1064.75 682.94 L1064.19 682.94 L1063.63 682.94 L1063.07 682.94 L1062.51 682.94 L1061.95 682.94 L1061.39 682.94 L1060.83 682.94 L1060.27 682.94 L1059.71 682.94 L1059.15 682.94 L1058.59 682.94 L1058.03 682.94 L1057.48 682.94 L1056.92 682.94 L1056.36 682.94 L1055.8 682.94 L1055.24 682.94 L1054.68 682.94 L1054.12 682.94 L1053.56 682.94 L1053 682.94 L1052.44 682.94 L1051.88 682.94 L1051.32 682.94 L1050.76 682.94 L1050.2 682.94 L1049.65 682.94 L1049.09 682.94 L1048.53 682.94 L1047.97 682.94 L1047.41 682.94 L1046.85 682.94 L1046.29 682.94 L1045.73 682.94 L1045.17 682.94 L1044.61 682.94 L1044.05 682.94 L1043.49 682.94 L1042.93 682.94 L1042.38 682.94 L1041.82 682.94 L1041.26 682.94 L1040.7 682.94 L1040.14 682.94 L1039.58 682.94 L1039.02 682.94 L1038.46 682.94 L1037.9 682.94 L1037.34 682.94 L1036.78 682.94 L1036.22 682.94 L1035.66 682.94 L1035.1 682.94 L1034.55 682.94 L1033.99 682.94 L1033.43 682.94 L1032.87 682.94 L1032.31 682.94 L1031.75 682.94 L1031.19 682.94 L1030.63 682.94 L1030.07 682.94 L1029.51 682.94 L1028.95 682.94 L1028.39 682.94 L1027.83 682.94 L1027.28 682.94 L1026.72 682.94 L1026.16 682.94 L1025.6 682.94 L1025.04 682.94 L1024.48 682.94 L1023.92 682.94 L1023.36 682.94 L1022.8 682.94 L1022.24 682.94 L1021.68 682.94 L1021.12 682.94 L1020.56 682.94 L1020.01 682.94 L1019.45 682.94 L1018.89 682.94 L1018.33 682.94 L1017.77 682.94 L1017.21 682.94 L1016.65 682.94 L1016.09 682.94 L1015.53 682.94 L1014.97 682.94 L1014.41 682.94 L1013.85 682.94 L1013.29 682.94 L1012.73 682.94 L1012.18 682.94 L1011.62 682.94 L1011.06 682.94 L1010.5 682.94 L1009.94 682.94 L1009.38 682.94 L1008.82 682.94 L1008.26 682.94 L1007.7 682.94 L1007.14 682.94 L1006.58 682.94 L1006.02 682.94 L1005.46 682.94 L1004.91 682.94 L1004.35 682.94 L1003.79 682.94 L1003.23 682.94 L1002.67 682.94 L1002.11 682.94 L1001.55 682.94 L1000.99 682.94 L1000.43 682.94 L999.872 682.94 L999.313 682.94 L998.754 682.94 L998.194 682.94 L997.635 682.94 L997.076 682.94 L996.517 682.94 L995.957 682.94 L995.398 682.94 L994.839 682.94 L994.28 682.94 L993.72 682.94 L993.161 682.94 L992.602 682.94 L992.043 682.94 L991.483 682.94 L990.924 682.94 L990.365 682.94 L989.806 682.94 L989.246 682.94 L988.687 682.94 L988.128 682.94 L987.569 682.94 L987.009 682.94 L986.45 682.94 L985.891 682.94 L985.332 682.94 L984.772 682.94 L984.213 682.94 L983.654 682.94 L983.095 682.94 L982.535 682.94 L981.976 682.94 L981.417 682.94 L980.858 682.94 L980.298 682.94 L979.739 682.94 L979.18 682.94 L978.621 682.94 L978.061 682.94 L977.502 682.94 L976.943 682.94 L976.384 682.94 L975.824 682.94 L975.265 682.94 L974.706 682.94 L974.147 682.94 L973.587 682.94 L973.028 682.94 L972.469 682.94 L971.91 682.94 L971.35 682.94 L970.791 682.94 L970.232 682.94 L969.673 682.94 L969.113 682.94 L968.554 682.94 L967.995 682.94 L967.436 682.94 L966.876 682.94 L966.317 682.94 L965.758 682.94 L965.199 682.94 L964.639 682.94 L964.08 682.94 L963.521 682.94 L962.962 682.94 L962.402 682.94 L961.843 682.94 L961.284 682.94 L960.725 682.94 L960.165 682.94 L959.606 682.94 L959.047 682.94 L958.488 682.94 L957.928 682.94 L957.369 682.94 L956.81 682.94 L956.251 682.94 L955.691 682.94 L955.132 682.94 L954.573 682.94 L954.014 682.94 L953.454 682.94 L952.895 682.94 L952.336 682.94 L951.777 682.94 L951.217 682.94 L950.658 682.94 L950.099 682.94 L949.54 682.94 L948.98 682.94 L948.421 682.94 L947.862 682.94 L947.303 682.94 L946.743 682.94 L946.184 682.94 L945.625 682.94 L945.066 682.94 L944.506 682.94 L943.947 682.94 L943.388 682.94 L942.829 682.94 L942.269 682.94 L941.71 682.94 L941.151 682.94 L940.592 682.94 L940.032 682.94 L939.473 682.94 L938.914 682.94 L938.355 682.94 L937.795 682.94 L937.236 682.94 L936.677 682.94 L936.118 682.94 L935.558 682.94 L934.999 682.94 L934.44 682.94 L933.881 682.94 L933.321 682.94 L932.762 682.94 L932.203 682.94 L931.644 682.94 L931.084 682.94 L930.525 682.94 L929.966 682.94 L929.406 682.94 L928.847 682.94 L928.288 682.94 L927.729 682.94 L927.169 682.94 L926.61 682.94 L926.051 682.94 L925.492 682.94 L924.932 682.94 L924.373 682.94 L923.814 682.94 L923.255 682.94 L922.695 682.94 L922.136 682.94 L921.577 682.94 L921.018 682.94 L920.458 682.94 L919.899 682.94 L919.34 682.94 L918.781 682.94 L918.221 682.94 L917.662 682.94 L917.103 682.94 L916.544 682.94 L915.984 682.94 L915.425 682.94 L914.866 682.94 L914.307 682.94 L913.747 682.94 L913.188 682.94 L912.629 682.94 L912.07 682.94 L911.51 682.94 L910.951 682.94 L910.392 682.94 L909.833 682.94 L909.273 682.94 L908.714 682.94 L908.155 682.94 L907.596 682.94 L907.036 682.94 L906.477 682.94 L905.918 682.94 L905.359 682.94 L904.799 682.94 L904.24 682.94 L903.681 682.94 L903.122 682.94 L902.562 682.94 L902.003 682.94 L901.444 682.94 L900.885 682.94 L900.325 682.94 L899.766 682.94 L899.207 682.94 L898.648 682.94 L898.088 682.94 L897.529 682.94 L896.97 682.94 L896.411 682.94 L895.851 682.94 L895.292 682.94 L894.733 682.94 L894.174 682.94 L893.614 682.94 L893.055 682.94 L892.496 682.94 L891.937 682.94 L891.377 682.94 L890.818 682.94 L890.259 682.94 L889.7 682.94 L889.14 682.94 L888.581 682.94 L888.022 682.94 L887.463 682.94 L886.903 682.94 L886.344 682.94 L885.785 682.94 L885.226 682.94 L884.666 682.94 L884.107 682.94 L883.548 682.94 L882.989 682.94 L882.429 682.94 L881.87 682.94 L881.311 682.94 L880.752 682.94 L880.192 682.94 L879.633 682.94 L879.074 682.94 L878.515 682.94 L877.955 682.94 L877.396 682.94 L876.837 682.94 L876.278 682.94 L875.718 682.94 L875.159 682.94 L874.6 682.94 L874.041 682.94 L873.481 682.94 L872.922 682.94 L872.363 682.94 L871.804 682.94 L871.244 682.94 L870.685 682.94 L870.126 682.94 L869.567 682.94 L869.007 682.94 L868.448 682.94 L867.889 682.94 L867.33 682.94 L866.77 682.94 L866.211 682.94 L865.652 682.94 L865.093 682.94 L864.533 682.94 L863.974 682.94 L863.415 682.94 L862.856 682.94 L862.296 682.94 L861.737 682.94 L861.178 682.94 L860.619 682.94 L860.059 682.94 L859.5 682.94 L858.941 682.94 L858.382 682.94 L857.822 682.94 L857.263 682.94 L856.704 682.94 L856.145 682.94 L855.585 682.94 L855.026 682.94 L854.467 682.94 L853.908 682.94 L853.348 682.94 L852.789 682.94 L852.23 682.94 L851.671 682.94 L851.111 682.94 L850.552 682.94 L849.993 682.94 L849.434 682.94 L848.874 682.94 L848.315 682.94 L847.756 682.94 L847.197 682.94 L846.637 682.94 L846.078 682.94 L845.519 682.94 L844.96 682.94 L844.4 682.94 L843.841 682.94 L843.282 682.94 L842.723 682.94 L842.163 682.94 L841.604 682.94 L841.045 682.94 L840.486 682.94 L839.926 682.94 L839.367 682.94 L838.808 682.94 L838.249 682.94 L837.689 682.94 L837.13 682.94 L836.571 682.94 L836.012 682.94 L835.452 682.94 L834.893 682.94 L834.334 682.94 L833.775 682.94 L833.215 682.94 L832.656 682.94 L832.097 682.94 L831.538 682.94 L830.978 682.94 L830.419 682.94 L829.86 682.94 L829.301 682.94 L828.741 682.94 L828.182 682.94 L827.623 682.94 L827.064 682.94 L826.504 682.94 L825.945 682.94 L825.386 682.94 L824.827 682.94 L824.267 682.94 L823.708 682.94 L823.149 682.94 L822.59 682.94 L822.03 682.94 L821.471 682.94 L820.912 682.94 L820.353 682.94 L819.793 682.94 L819.234 682.94 L818.675 682.94 L818.116 682.94 L817.556 682.94 L816.997 682.94 L816.438 682.94 L815.879 682.94 L815.319 682.94 L814.76 682.94 L814.201 682.94 L813.642 682.94 L813.082 682.94 L812.523 682.94 L811.964 682.94 L811.405 682.94 L810.845 682.94 L810.286 682.94 L809.727 682.94 L809.168 682.94 L808.608 682.94 L808.049 682.94 L807.49 682.94 L806.931 682.94 L806.371 682.94 L805.812 682.94 L805.253 682.94 L804.693 682.94 L804.134 682.94 L803.575 682.94 L803.016 682.94 L802.456 682.94 L801.897 682.94 L801.338 682.94 L800.779 682.94 L800.219 682.94 L799.66 682.94 L799.101 682.94 L798.542 682.94 L797.982 682.94 L797.423 682.94 L796.864 682.94 L796.305 682.94 L795.745 682.94 L795.186 682.94 L794.627 682.94 L794.068 682.94 L793.508 682.94 L792.949 682.94 L792.39 682.94 L791.831 682.94 L791.271 682.94 L790.712 682.94 L790.153 682.94 L789.594 682.94 L789.034 682.94 L788.475 682.94 L787.916 682.94 L787.357 682.94 L786.797 682.94 L786.238 682.94 L785.679 682.94 L785.12 682.94 L784.56 682.94 L784.001 682.94 L783.442 682.94 L782.883 682.94 L782.323 682.94 L781.764 682.94 L781.205 682.94 L780.646 682.94 L780.086 682.94 L779.527 682.94 L778.968 682.94 L778.409 682.94 L777.849 682.94 L777.29 682.94 L776.731 682.94 L776.172 682.94 L775.612 682.94 L775.053 682.94 L774.494 682.94 L773.935 682.94 L773.375 682.94 L772.816 682.94 L772.257 682.94 L771.698 682.94 L771.138 682.94 L770.579 682.94 L770.02 682.94 L769.461 682.94 L768.901 682.94 L768.342 682.94 L767.783 682.94 L767.224 682.94 L766.664 682.94 L766.105 682.94 L765.546 682.94 L764.987 682.94 L764.427 682.94 L763.868 682.94 L763.309 682.94 L762.75 682.94 L762.19 682.94 L761.631 682.94 L761.072 682.94 L760.513 682.94 L759.953 682.94 L759.394 682.94 L758.835 682.94 L758.276 682.94 L757.716 682.94 L757.157 682.94 L756.598 682.94 L756.039 682.94 L755.479 682.94 L754.92 682.94 L754.361 682.94 L753.802 682.94 L753.242 682.94 L752.683 682.94 L752.124 682.94 L751.565 682.94 L751.005 682.94 L750.446 682.94 L749.887 682.94 L749.328 682.94 L748.768 682.94 L748.209 682.94 L747.65 682.94 L747.091 682.94 L746.531 682.94 L745.972 682.94 L745.413 682.94 L744.854 682.94 L744.294 682.94 L743.735 682.94 L743.176 682.94 L742.617 682.94 L742.057 682.94 L741.498 682.94 L740.939 682.94 L740.38 682.94 L739.82 682.94 L739.261 682.94 L738.702 682.94 L738.143 682.94 L737.583 682.94 L737.024 682.94 L736.465 682.94 L735.906 682.94 L735.346 682.94 L734.787 682.94 L734.228 682.94 L733.669 682.94 L733.109 682.94 L732.55 682.94 L731.991 682.94 L731.432 682.94 L730.872 682.94 L730.313 682.94 L729.754 682.94 L729.195 682.94 L728.635 682.94 L728.076 682.94 L727.517 682.94 L726.958 682.94 L726.398 682.94 L725.839 682.94 L725.28 682.94 L724.721 682.94 L724.161 682.94 L723.602 682.94 L723.043 682.94 L722.484 682.94 L721.924 682.94 L721.365 682.94 L720.806 682.94 L720.247 682.94  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip903)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.293 720.806,684.293 721.365,684.293 721.924,684.293 722.484,684.293 723.043,684.293 723.602,684.293 724.161,684.293 724.721,684.293 725.28,684.293 725.839,684.293 726.398,684.293 726.958,684.293 727.517,684.293 728.076,684.293 728.635,684.293 729.195,684.293 729.754,684.293 730.313,684.293 730.872,684.293 731.432,684.293 731.991,684.293 732.55,684.293 733.109,684.293 733.669,684.293 734.228,684.293 734.787,684.293 735.346,684.293 735.906,684.293 736.465,684.293 737.024,684.293 737.583,684.293 738.143,684.293 738.702,684.293 739.261,684.293 739.82,684.293 740.38,684.293 740.939,684.293 741.498,684.293 742.057,684.293 742.617,684.293 743.176,684.293 743.735,684.293 744.294,684.293 744.854,684.293 745.413,684.293 745.972,684.293 746.531,684.293 747.091,684.293 747.65,684.293 748.209,684.293 748.768,684.293 749.328,684.293 749.887,684.293 750.446,684.293 751.005,684.293 751.565,684.293 752.124,684.293 752.683,684.293 753.242,684.293 753.802,684.293 754.361,684.293 754.92,684.293 755.479,684.293 756.039,684.293 756.598,684.293 757.157,684.293 757.716,684.293 758.276,684.293 758.835,684.293 759.394,684.293 759.953,684.293 760.513,684.293 761.072,684.293 761.631,684.293 762.19,684.293 762.75,684.293 763.309,684.293 763.868,684.293 764.427,684.293 764.987,684.293 765.546,684.293 766.105,684.293 766.664,684.293 767.224,684.293 767.783,684.293 768.342,684.293 768.901,684.293 769.461,684.293 770.02,684.293 770.579,684.293 771.138,684.293 771.698,684.293 772.257,684.293 772.816,684.293 773.375,684.293 773.935,684.293 774.494,684.293 775.053,684.293 775.612,684.293 776.172,684.293 776.731,684.293 777.29,684.293 777.849,684.293 778.409,684.293 778.968,684.293 779.527,684.293 780.086,684.293 780.646,684.293 781.205,684.293 781.764,684.293 782.323,684.293 782.883,684.293 783.442,684.293 784.001,684.293 784.56,684.293 785.12,684.293 785.679,684.293 786.238,684.293 786.797,684.293 787.357,684.293 787.916,684.293 788.475,684.293 789.034,684.293 789.594,684.293 790.153,684.293 790.712,684.293 791.271,684.293 791.831,684.293 792.39,684.293 792.949,684.293 793.508,684.293 794.068,684.293 794.627,684.293 795.186,684.293 795.745,684.293 796.305,684.293 796.864,684.293 797.423,684.293 797.982,684.293 798.542,684.293 799.101,684.293 799.66,684.293 800.219,684.293 800.779,684.293 801.338,684.293 801.897,684.293 802.456,684.293 803.016,684.293 803.575,684.293 804.134,684.293 804.693,684.293 805.253,684.293 805.812,684.293 806.371,684.293 806.931,684.293 807.49,684.293 808.049,684.293 808.608,684.293 809.168,684.293 809.727,684.293 810.286,684.293 810.845,684.293 811.405,684.293 811.964,684.293 812.523,684.293 813.082,684.293 813.642,684.293 814.201,684.293 814.76,684.293 815.319,684.293 815.879,684.293 816.438,684.293 816.997,684.293 817.556,684.293 818.116,684.293 818.675,684.293 819.234,684.293 819.793,684.293 820.353,684.293 820.912,684.293 821.471,684.293 822.03,684.293 822.59,684.293 823.149,684.293 823.708,684.293 824.267,684.293 824.827,684.293 825.386,684.293 825.945,684.293 826.504,684.293 827.064,684.293 827.623,684.293 828.182,684.293 828.741,684.293 829.301,684.293 829.86,684.293 830.419,684.293 830.978,684.293 831.538,684.293 832.097,684.293 832.656,684.293 833.215,684.293 833.775,684.293 834.334,684.293 834.893,684.293 835.452,684.293 836.012,684.293 836.571,684.293 837.13,684.293 837.689,684.293 838.249,684.293 838.808,684.293 839.367,684.293 839.926,684.293 840.486,684.293 841.045,684.293 841.604,684.293 842.163,684.293 842.723,684.293 843.282,684.293 843.841,684.293 844.4,684.293 844.96,684.293 845.519,684.293 846.078,684.293 846.637,684.293 847.197,684.293 847.756,684.293 848.315,684.293 848.874,684.293 849.434,684.293 849.993,684.293 850.552,684.293 851.111,684.293 851.671,684.293 852.23,684.293 852.789,684.293 853.348,684.293 853.908,684.293 854.467,684.293 855.026,684.293 855.585,684.293 856.145,684.293 856.704,684.293 857.263,684.293 857.822,684.293 858.382,684.293 858.941,684.293 859.5,684.293 860.059,684.293 860.619,684.293 861.178,684.293 861.737,684.293 862.296,684.293 862.856,684.293 863.415,684.293 863.974,684.293 864.533,684.293 865.093,684.293 865.652,684.293 866.211,684.293 866.77,684.293 867.33,684.293 867.889,684.293 868.448,684.293 869.007,684.293 869.567,684.293 870.126,684.293 870.685,684.293 871.244,684.293 871.804,684.293 872.363,684.293 872.922,684.293 873.481,684.293 874.041,684.293 874.6,684.293 875.159,684.293 875.718,684.293 876.278,684.293 876.837,684.293 877.396,684.293 877.955,684.293 878.515,684.293 879.074,684.293 879.633,684.293 880.192,684.293 880.752,684.293 881.311,684.293 881.87,684.293 882.429,684.293 882.989,684.293 883.548,684.293 884.107,684.293 884.666,684.293 885.226,684.293 885.785,684.293 886.344,684.293 886.903,684.293 887.463,684.293 888.022,684.293 888.581,684.293 889.14,684.293 889.7,684.293 890.259,684.293 890.818,684.293 891.377,684.293 891.937,684.293 892.496,684.293 893.055,684.293 893.614,684.293 894.174,684.293 894.733,684.293 895.292,684.293 895.851,684.293 896.411,684.293 896.97,684.293 897.529,684.293 898.088,684.293 898.648,684.293 899.207,684.293 899.766,684.293 900.325,684.293 900.885,684.293 901.444,684.293 902.003,684.293 902.562,684.293 903.122,684.293 903.681,684.293 904.24,684.293 904.799,684.293 905.359,684.293 905.918,684.293 906.477,684.293 907.036,684.293 907.596,684.293 908.155,684.293 908.714,684.293 909.273,684.293 909.833,684.293 910.392,684.293 910.951,684.293 911.51,684.293 912.07,684.293 912.629,684.293 913.188,684.293 913.747,684.293 914.307,684.293 914.866,684.293 915.425,684.293 915.984,684.293 916.544,684.293 917.103,684.293 917.662,684.293 918.221,684.293 918.781,684.293 919.34,684.293 919.899,684.293 920.458,684.293 921.018,684.293 921.577,684.293 922.136,684.293 922.695,684.293 923.255,684.293 923.814,684.293 924.373,684.293 924.932,684.293 925.492,684.293 926.051,684.293 926.61,684.293 927.169,684.293 927.729,684.293 928.288,684.293 928.847,684.293 929.406,684.293 929.966,684.293 930.525,684.293 931.084,684.293 931.644,684.293 932.203,684.293 932.762,684.293 933.321,684.293 933.881,684.293 934.44,684.293 934.999,684.293 935.558,684.293 936.118,684.293 936.677,684.293 937.236,684.293 937.795,684.293 938.355,684.293 938.914,684.293 939.473,684.293 940.032,684.293 940.592,684.293 941.151,684.293 941.71,684.293 942.269,684.293 942.829,684.293 943.388,684.293 943.947,684.293 944.506,684.293 945.066,684.293 945.625,684.293 946.184,684.293 946.743,684.293 947.303,684.293 947.862,684.293 948.421,684.293 948.98,684.293 949.54,684.293 950.099,684.293 950.658,684.293 951.217,684.293 951.777,684.293 952.336,684.293 952.895,684.293 953.454,684.293 954.014,684.293 954.573,684.293 955.132,684.293 955.691,684.293 956.251,684.293 956.81,684.293 957.369,684.293 957.928,684.293 958.488,684.293 959.047,684.293 959.606,684.293 960.165,684.293 960.725,684.293 961.284,684.293 961.843,684.293 962.402,684.293 962.962,684.293 963.521,684.293 964.08,684.293 964.639,684.293 965.199,684.293 965.758,684.293 966.317,684.293 966.876,684.293 967.436,684.293 967.995,684.293 968.554,684.293 969.113,684.293 969.673,684.293 970.232,684.293 970.791,684.293 971.35,684.293 971.91,684.293 972.469,684.293 973.028,684.293 973.587,684.293 974.147,684.293 974.706,684.293 975.265,684.293 975.824,684.293 976.384,684.293 976.943,684.293 977.502,684.293 978.061,684.293 978.621,684.293 979.18,684.293 979.739,684.293 980.298,684.293 980.858,684.293 981.417,684.293 981.976,684.293 982.535,684.293 983.095,684.293 983.654,684.293 984.213,684.293 984.772,684.293 985.332,684.293 985.891,684.293 986.45,684.293 987.009,684.293 987.569,684.293 988.128,684.293 988.687,684.293 989.246,684.293 989.806,684.293 990.365,684.293 990.924,684.293 991.483,684.293 992.043,684.293 992.602,684.293 993.161,684.293 993.72,684.293 994.28,684.293 994.839,684.293 995.398,684.293 995.957,684.293 996.517,684.293 997.076,684.293 997.635,684.293 998.194,684.293 998.754,684.293 999.313,684.293 999.872,684.293 1000.43,684.293 1000.99,684.293 1001.55,684.293 1002.11,684.293 1002.67,684.293 1003.23,684.293 1003.79,684.293 1004.35,684.293 1004.91,684.293 1005.46,684.293 1006.02,684.293 1006.58,684.293 1007.14,684.293 1007.7,684.293 1008.26,684.293 1008.82,684.293 1009.38,684.293 1009.94,684.293 1010.5,684.293 1011.06,684.293 1011.62,684.293 1012.18,684.293 1012.73,684.293 1013.29,684.293 1013.85,684.293 1014.41,684.293 1014.97,684.293 1015.53,684.293 1016.09,684.293 1016.65,684.293 1017.21,684.293 1017.77,684.293 1018.33,684.293 1018.89,684.293 1019.45,684.293 1020.01,684.293 1020.56,684.293 1021.12,684.293 1021.68,684.293 1022.24,684.293 1022.8,684.293 1023.36,684.293 1023.92,684.293 1024.48,684.293 1025.04,684.293 1025.6,684.293 1026.16,684.293 1026.72,684.293 1027.28,684.293 1027.83,684.293 1028.39,684.293 1028.95,684.293 1029.51,684.293 1030.07,684.293 1030.63,684.293 1031.19,684.293 1031.75,684.293 1032.31,684.293 1032.87,684.293 1033.43,684.293 1033.99,684.293 1034.55,684.293 1035.1,684.293 1035.66,684.293 1036.22,684.293 1036.78,684.293 1037.34,684.293 1037.9,684.293 1038.46,684.293 1039.02,684.293 1039.58,684.293 1040.14,684.293 1040.7,684.293 1041.26,684.293 1041.82,684.293 1042.38,684.293 1042.93,684.293 1043.49,684.293 1044.05,684.293 1044.61,684.293 1045.17,684.293 1045.73,684.293 1046.29,684.293 1046.85,684.293 1047.41,684.293 1047.97,684.293 1048.53,684.293 1049.09,684.293 1049.65,684.293 1050.2,684.293 1050.76,684.293 1051.32,684.293 1051.88,684.293 1052.44,684.293 1053,684.293 1053.56,684.293 1054.12,684.293 1054.68,684.293 1055.24,684.293 1055.8,684.293 1056.36,684.293 1056.92,684.293 1057.48,684.293 1058.03,684.293 1058.59,684.293 1059.15,684.293 1059.71,684.293 1060.27,684.293 1060.83,684.293 1061.39,684.293 1061.95,684.293 1062.51,684.293 1063.07,684.293 1063.63,684.293 1064.19,684.293 1064.75,684.293 1065.3,684.293 1065.86,684.293 1066.42,684.293 1066.98,684.293 1067.54,684.293 1068.1,684.293 1068.66,684.293 1069.22,684.293 1069.78,684.293 1070.34,684.293 1070.9,684.293 1071.46,684.293 1072.02,684.293 1072.57,684.293 1073.13,684.293 1073.69,684.293 1074.25,684.293 1074.81,684.293 1075.37,684.293 1075.93,684.293 1076.49,684.293 1077.05,684.293 1077.61,684.293 1078.17,684.293 1078.73,684.293 1079.29,684.293 1079.85,684.293 1080.4,684.293 1080.96,684.293 1081.52,684.293 1082.08,684.293 1082.64,684.293 1083.2,684.293 1083.76,684.293 1084.32,684.293 1084.88,684.293 1085.44,684.293 1086,684.293 1086.56,684.293 1087.12,684.293 1087.67,684.293 1088.23,684.293 1088.79,684.293 1089.35,684.293 1089.91,684.293 1090.47,684.293 1091.03,684.293 1091.59,684.293 1092.15,684.293 1092.71,684.293 1093.27,684.293 1093.83,684.293 1094.39,684.293 1094.94,684.293 1095.5,684.293 1096.06,684.293 1096.62,684.293 1097.18,684.293 1097.74,684.293 1098.3,684.293 1098.86,684.293 1099.42,684.293 1099.98,684.293 1100.54,684.293 1101.1,684.293 1101.66,684.293 1102.22,684.293 1102.77,684.293 1103.33,684.293 1103.89,684.293 1104.45,684.293 1105.01,684.293 1105.57,684.293 1106.13,684.293 1106.69,684.293 1107.25,684.293 1107.81,684.293 1108.37,684.293 1108.93,684.293 1109.49,684.293 1110.04,684.293 1110.6,684.293 1111.16,684.293 1111.72,684.293 1112.28,684.293 1112.84,684.293 1113.4,684.293 1113.96,684.293 1114.52,684.293 1115.08,684.293 1115.64,684.293 1116.2,684.293 1116.76,684.293 1117.31,684.293 1117.87,684.293 1118.43,684.293 1118.99,684.293 1119.55,684.293 1120.11,684.293 1120.67,684.293 1121.23,684.293 1121.79,684.293 1122.35,684.293 1122.91,684.293 1123.47,684.293 1124.03,684.293 1124.59,684.293 1125.14,684.293 1125.7,684.293 1126.26,684.293 1126.82,684.293 1127.38,684.293 1127.94,684.293 1128.5,684.293 1129.06,684.293 1129.62,684.293 1130.18,684.293 1130.74,684.293 1131.3,684.293 1131.86,684.293 1132.41,684.293 1132.97,684.293 1133.53,684.293 1134.09,684.293 1134.65,684.293 1135.21,684.293 1135.77,684.293 1136.33,684.293 1136.89,684.293 1137.45,684.293 1138.01,684.293 1138.57,684.293 1139.13,684.293 1139.68,684.293 1140.24,684.293 1140.8,684.293 1141.36,684.293 1141.92,684.293 1142.48,684.293 1143.04,684.293 1143.6,684.293 1144.16,684.293 1144.72,684.293 1145.28,684.293 1145.84,684.293 1146.4,684.293 1146.96,684.293 1147.51,684.293 1148.07,684.293 1148.63,684.293 1149.19,684.293 1149.75,684.293 1150.31,684.293 1150.87,684.293 1151.43,684.293 1151.99,684.293 1152.55,684.293 1153.11,684.293 1153.67,684.293 1154.23,684.293 1154.78,684.293 1155.34,684.293 1155.9,684.293 1156.46,684.293 1157.02,684.293 1157.58,684.293 1158.14,684.293 1158.7,684.293 1159.26,684.293 1159.82,684.293 1160.38,684.293 1160.94,684.293 1161.5,684.293 1162.05,684.293 1162.61,684.293 1163.17,684.293 1163.73,684.293 1164.29,684.293 1164.85,684.293 1165.41,684.293 1165.97,684.293 1166.53,684.293 1167.09,684.293 1167.65,684.293 1168.21,684.293 1168.77,684.293 1169.33,684.293 1169.88,684.293 1170.44,684.293 1171,684.293 1171.56,684.293 1172.12,684.293 1172.68,684.293 1173.24,684.293 1173.8,684.293 1174.36,684.293 1174.92,684.293 1175.48,684.293 1176.04,684.293 1176.6,684.293 1177.15,684.293 1177.71,684.293 1178.27,684.293 1178.83,684.293 1179.39,684.293 1179.95,684.293 1180.51,684.293 1181.07,684.293 1181.63,684.293 1182.19,684.293 1182.75,684.293 1183.31,684.293 1183.87,684.293 1184.43,684.293 1184.98,684.293 1185.54,684.293 1186.1,684.293 1186.66,684.293 1187.22,684.293 1187.78,684.293 1188.34,684.293 1188.9,684.293 1189.46,684.293 1190.02,684.293 1190.58,684.293 1191.14,684.293 1191.7,684.293 1192.25,684.293 1192.81,684.293 1193.37,684.293 1193.93,684.293 1194.49,684.293 1195.05,684.293 1195.61,684.293 1196.17,684.293 1196.73,684.293 1197.29,684.293 1197.85,684.293 1198.41,684.293 1198.97,684.293 1199.52,684.293 1200.08,684.293 1200.64,684.293 1201.2,684.293 1201.76,684.293 1202.32,684.293 1202.88,684.293 1203.44,684.293 1204,684.293 1204.56,684.293 1205.12,684.293 1205.68,684.293 1206.24,684.293 1206.8,684.293 1207.35,684.293 1207.91,684.293 1208.47,684.293 1209.03,684.293 1209.59,684.293 1210.15,684.293 1210.71,684.293 1211.27,684.293 1211.83,684.293 1212.39,684.293 1212.95,684.293 1213.51,684.293 1214.07,684.293 1214.62,684.293 1215.18,684.293 1215.74,684.293 1216.3,684.293 1216.86,684.293 1217.42,684.293 1217.98,684.293 1218.54,684.293 1219.1,684.293 1219.66,684.293 1220.22,684.293 1220.78,684.293 1221.34,684.293 1221.89,684.293 1222.45,684.293 1223.01,684.293 1223.57,684.293 1224.13,684.293 1224.69,684.293 1225.25,684.293 1225.81,684.293 1226.37,684.293 1226.93,684.293 1227.49,684.293 1228.05,684.293 1228.61,684.293 1229.17,684.293 1229.72,684.293 1230.28,684.293 1230.84,684.293 1231.4,684.293 1231.96,684.293 1232.52,684.293 1233.08,684.293 1233.64,684.293 1234.2,684.293 1234.76,684.293 1235.32,684.293 1235.88,684.293 1236.44,684.293 1236.99,684.293 1237.55,684.293 1238.11,684.293 1238.67,684.293 1239.23,684.293 1239.79,684.293 1240.35,684.293 1240.91,684.293 1241.47,684.293 1242.03,684.293 1242.59,684.293 1243.15,684.293 1243.71,684.293 1244.26,684.293 1244.82,684.293 1245.38,684.293 1245.94,684.293 1246.5,684.293 1247.06,684.293 1247.62,684.293 1248.18,684.293 1248.74,684.293 1249.3,684.293 1249.86,684.293 1250.42,684.293 1250.98,684.293 1251.54,684.293 1252.09,684.293 1252.65,684.293 1253.21,684.293 1253.77,684.293 1254.33,684.293 1254.89,684.293 1255.45,684.293 1256.01,684.293 1256.57,684.293 1257.13,684.293 1257.69,684.293 1258.25,684.293 1258.81,684.293 1259.36,684.293 1259.92,684.293 1260.48,684.293 1261.04,684.293 1261.6,684.293 1262.16,684.293 1262.72,684.293 1263.28,684.293 1263.84,684.293 1264.4,684.293 1264.96,684.293 1265.52,684.293 1266.08,684.293 1266.63,684.293 1267.19,684.293 1267.75,684.293 1268.31,684.293 1268.87,684.293 1269.43,684.293 1269.99,684.293 1270.55,684.293 1271.11,684.293 1271.67,684.293 1272.23,684.293 1272.79,684.293 1273.35,684.293 1273.91,684.293 1274.46,684.293 1275.02,684.293 1275.58,684.293 1276.14,684.293 1276.7,684.293 1277.26,684.293 1277.82,684.293 1278.38,684.293 1278.94,684.293 1279.5,684.293 1280.06,684.293 1280.62,684.293 1281.18,684.293 1281.73,684.293 1282.29,684.293 1282.85,684.293 1283.41,684.293 1283.97,684.293 1284.53,684.293 1285.09,684.293 1285.65,684.293 1286.21,684.293 1286.77,684.293 1287.33,684.293 1287.89,684.293 1288.45,684.293 1289,684.293 1289.56,684.293 1290.12,684.293 1290.68,684.293 1291.24,684.293 1291.8,684.293 1292.36,684.293 1292.92,684.293 1293.48,684.293 1294.04,684.293 1294.6,684.293 1295.16,684.293 1295.72,684.293 1296.28,684.293 1296.83,684.293 1297.39,684.293 1297.95,684.293 1298.51,684.293 1299.07,684.293 1299.63,684.293 1300.19,684.293 1300.75,684.293 1301.31,684.293 1301.87,684.293 1302.43,684.293 1302.99,684.293 1303.55,684.293 1304.1,684.293 1304.66,684.293 1305.22,684.293 1305.78,684.293 1306.34,684.293 1306.9,684.293 1307.46,684.293 1308.02,684.293 1308.58,684.293 1309.14,684.293 1309.7,684.293 1310.26,684.293 1310.82,684.293 1311.38,684.293 1311.93,684.293 1312.49,684.293 1313.05,684.293 1313.61,684.293 1314.17,684.293 1314.73,684.293 1315.29,684.293 1315.85,684.293 1316.41,684.293 1316.97,684.293 1317.53,684.293 1318.09,684.293 1318.65,684.293 1319.2,684.293 1319.76,684.293 1320.32,684.293 1320.88,684.293 1321.44,684.293 1322,684.293 1322.56,684.293 1323.12,684.293 1323.68,684.293 1324.24,684.293 1324.8,684.293 1325.36,684.293 1325.92,684.293 1326.47,684.293 1327.03,684.293 1327.59,684.293 1328.15,684.293 1328.71,684.293 1329.27,684.293 1329.83,684.293 1330.39,684.293 1330.95,684.293 1331.51,684.293 1332.07,684.293 1332.63,684.293 1333.19,684.293 1333.75,684.293 1334.3,684.293 1334.86,684.293 1335.42,684.293 1335.98,684.293 1336.54,684.293 1337.1,684.293 1337.66,684.293 1338.22,684.293 1338.78,684.293 1339.34,684.293 1339.9,684.293 1340.46,684.293 1341.02,684.293 1341.57,684.293 1342.13,684.293 1342.69,684.293 1343.25,684.293 1343.81,684.293 1344.37,684.293 1344.93,684.293 1345.49,684.293 1346.05,684.293 1346.61,684.293 1347.17,684.293 1347.73,684.293 1348.29,684.293 1348.84,684.293 1349.4,684.293 1349.96,684.293 1350.52,684.293 1351.08,684.293 1351.64,684.293 1352.2,684.293 1352.76,684.293 1353.32,684.293 1353.88,684.293 1354.44,684.293 1355,684.293 1355.56,684.293 1356.12,684.293 1356.67,684.293 1357.23,684.293 1357.79,684.293 1358.35,684.293 1358.91,684.293 1359.47,684.293 1360.03,684.293 1360.59,684.293 1361.15,684.293 1361.71,684.293 1362.27,684.293 1362.83,684.293 1363.39,684.293 1363.94,684.293 1364.5,684.293 1365.06,684.293 1365.62,684.293 1366.18,684.293 1366.74,684.293 1367.3,684.293 1367.86,684.293 1368.42,684.293 1368.98,684.293 1369.54,684.293 1370.1,684.293 1370.66,684.293 1371.21,684.293 1371.77,684.293 1372.33,684.293 1372.89,684.293 1373.45,684.293 1374.01,684.293 1374.57,684.293 1375.13,684.293 1375.69,684.293 1376.25,684.293 1376.81,684.293 1377.37,684.293 1377.93,684.293 1378.49,684.293 1379.04,684.293 1379.6,684.293 1380.16,684.293 1380.72,684.293 1381.28,684.293 1381.84,684.293 1382.4,684.293 1382.96,684.293 1383.52,684.293 1384.08,684.293 1384.64,684.293 1385.2,684.293 1385.76,684.293 1386.31,684.293 1386.87,684.293 1387.43,684.293 1387.99,684.293 1388.55,684.293 1389.11,684.293 1389.67,684.293 1390.23,684.293 1390.79,684.293 1391.35,684.293 1391.91,684.293 1392.47,684.293 1393.03,684.293 1393.58,684.293 1394.14,684.293 1394.7,684.293 1395.26,684.293 1395.82,684.293 1396.38,684.293 1396.94,684.293 1397.5,684.293 1398.06,684.293 1398.62,684.293 1399.18,684.293 1399.74,684.293 1400.3,684.293 1400.86,684.293 1401.41,684.293 1401.97,684.293 1402.53,684.293 1403.09,684.293 1403.65,684.293 1404.21,684.293 1404.77,684.293 1405.33,684.293 1405.89,684.293 1406.45,684.293 1407.01,684.293 1407.57,684.293 1408.13,684.293 1408.68,684.293 1409.24,684.293 1409.8,684.293 1410.36,684.293 1410.92,684.293 1411.48,684.293 1412.04,684.293 1412.6,684.293 1413.16,684.293 1413.72,684.293 1414.28,684.293 1414.84,684.293 1415.4,684.293 1415.95,684.293 1416.51,684.293 1417.07,684.293 1417.63,684.293 1418.19,684.293 1418.75,684.293 1419.31,684.293 1419.87,684.293 1420.43,684.293 1420.99,684.293 1421.55,684.293 1422.11,684.293 1422.67,684.293 1423.23,684.293 1423.78,684.293 1424.34,684.293 1424.9,684.293 1425.46,684.293 1426.02,684.293 1426.58,684.293 1427.14,684.293 1427.7,684.293 1428.26,684.293 1428.82,684.293 1429.38,684.293 1429.94,684.293 1430.5,684.293 1431.05,684.293 1431.61,684.293 1432.17,684.293 1432.73,684.293 1433.29,684.293 1433.85,684.293 1434.41,684.293 1434.97,684.293 1435.53,684.293 1436.09,684.293 1436.65,684.293 1437.21,684.293 1437.77,684.293 1438.33,684.293 1438.88,684.293 1439.44,684.293 1440,684.293 1440.56,684.293 1441.12,684.293 1441.68,684.293 1442.24,684.293 1442.8,684.293 1443.36,684.293 1443.92,684.293 1444.48,684.293 1445.04,684.293 1445.6,684.293 1446.15,684.293 1446.71,684.293 1447.27,684.293 1447.83,684.293 1448.39,684.293 1448.95,684.293 1449.51,684.293 1450.07,684.293 1450.63,684.293 1451.19,684.293 1451.75,684.293 1452.31,684.293 1452.87,684.293 1453.42,684.293 1453.98,684.293 1454.54,684.293 1455.1,684.293 1455.66,684.293 1456.22,684.293 1456.78,684.293 1457.34,684.293 1457.9,684.293 1458.46,684.293 1459.02,684.293 1459.58,684.293 1460.14,684.293 1460.7,684.293 1461.25,684.293 1461.81,684.293 1462.37,684.293 1462.93,684.293 1463.49,684.293 1464.05,684.293 1464.61,684.293 1465.17,684.293 1465.73,684.293 1466.29,684.293 1466.85,684.293 1467.41,684.293 1467.97,684.293 1468.52,684.293 1469.08,684.293 1469.64,684.293 1470.2,684.293 1470.76,684.293 1471.32,684.293 1471.88,684.293 1472.44,684.293 1473,684.293 1473.56,684.293 1474.12,684.293 1474.68,684.293 1475.24,684.293 1475.79,684.293 1476.35,684.293 1476.91,684.293 1477.47,684.293 1478.03,684.293 1478.59,684.293 1479.15,684.293 1479.71,684.293 1480.27,684.293 1480.83,684.293 1481.39,684.293 1481.95,684.293 1482.51,684.293 1483.07,684.293 1483.62,684.293 1484.18,684.293 1484.74,684.293 1485.3,684.293 1485.86,684.293 1486.42,684.293 1486.98,684.293 1487.54,684.293 1488.1,684.293 1488.66,684.293 1489.22,684.293 1489.78,684.293 1490.34,684.293 1490.89,684.293 1491.45,684.293 1492.01,684.293 1492.57,684.293 1493.13,684.293 1493.69,684.293 1494.25,684.293 1494.81,684.293 1495.37,684.293 1495.93,684.293 1496.49,684.293 1497.05,684.293 1497.61,684.293 1498.16,684.293 1498.72,684.293 1499.28,684.293 1499.84,684.293 1500.4,684.293 1500.96,684.293 1501.52,684.293 1502.08,684.293 1502.64,684.293 1503.2,684.293 1503.76,684.293 1504.32,684.293 1504.88,684.293 1505.44,684.293 1505.99,684.293 1506.55,684.293 1507.11,684.293 1507.67,684.293 1508.23,684.293 1508.79,684.293 1509.35,684.293 1509.91,684.293 1510.47,684.293 1511.03,684.293 1511.59,684.293 1512.15,684.293 1512.71,684.293 1513.26,684.293 1513.82,684.293 1514.38,684.293 1514.94,684.293 1515.5,684.293 1516.06,684.293 1516.62,684.293 1517.18,684.293 1517.74,684.293 1518.3,684.293 1518.86,684.293 1519.42,684.293 1519.98,684.293 1520.53,684.293 1521.09,684.293 1521.65,684.293 1522.21,684.293 1522.77,684.293 1523.33,684.293 1523.89,684.293 1524.45,684.293 1525.01,684.293 1525.57,684.293 1526.13,684.293 1526.69,684.293 1527.25,684.293 1527.81,684.293 1528.36,684.293 1528.92,684.293 1529.48,684.293 1530.04,684.293 1530.6,684.293 1531.16,684.293 1531.72,684.293 1532.28,684.293 1532.84,684.293 1533.4,684.293 1533.96,684.293 1534.52,684.293 1535.08,684.293 1535.63,684.293 1536.19,684.293 1536.75,684.293 1537.31,684.293 1537.87,684.293 1538.43,684.293 1538.99,684.293 1539.55,684.293 1540.11,684.293 1540.67,684.293 1541.23,684.293 1541.79,684.293 1542.35,684.293 1542.9,684.293 1543.46,684.293 1544.02,684.293 1544.58,684.293 1545.14,684.293 1545.7,684.293 1546.26,684.293 1546.82,684.293 1547.38,684.293 1547.94,684.293 1548.5,684.293 1549.06,684.293 1549.62,684.293 1550.18,684.293 1550.73,684.293 1551.29,684.293 1551.85,684.293 1552.41,684.293 1552.97,684.293 1553.53,684.293 1554.09,684.293 1554.65,684.293 1555.21,684.293 1555.77,684.293 1556.33,684.293 1556.89,684.293 1557.45,684.293 1558,684.293 1558.56,684.293 1559.12,684.293 1559.68,684.293 1560.24,684.293 1560.8,684.293 1561.36,684.293 1561.92,684.293 1562.48,684.293 1563.04,684.293 1563.6,684.293 1564.16,684.293 1564.72,684.293 1565.28,684.293 1565.83,684.293 1566.39,684.293 1566.95,684.293 1567.51,684.293 1568.07,684.293 1568.63,684.293 1569.19,684.293 1569.75,684.293 1570.31,684.293 1570.87,684.293 1571.43,684.293 1571.99,684.293 1572.55,684.293 1573.1,684.293 1573.66,684.293 1574.22,684.293 1574.78,684.293 1575.34,684.293 1575.9,684.293 1576.46,684.293 1577.02,684.293 1577.58,684.293 1578.14,684.293 1578.7,684.293 1579.26,684.293 1579.82,684.293 1580.37,684.293 1580.93,684.293 1581.49,684.293 1582.05,684.293 1582.61,684.293 1583.17,684.293 1583.73,684.293 1584.29,684.293 1584.85,684.293 1585.41,684.293 1585.97,684.293 1586.53,684.293 1587.09,684.293 1587.65,684.293 1588.2,684.293 1588.76,684.293 1589.32,684.293 1589.88,684.293 1590.44,684.293 1591,684.293 1591.56,684.293 1592.12,684.293 1592.68,684.293 1593.24,684.293 1593.8,684.293 1594.36,684.293 1594.92,684.293 1595.47,684.293 1596.03,684.293 1596.59,684.293 1597.15,684.293 1597.71,684.293 1598.27,684.293 1598.83,684.293 1599.39,684.293 1599.95,684.293 1600.51,684.293 1601.07,684.293 1601.63,684.293 1602.19,684.293 1602.74,684.293 1603.3,684.293 1603.86,684.293 1604.42,684.293 1604.98,684.293 1605.54,684.293 1606.1,684.293 1606.66,684.293 1607.22,684.293 1607.78,684.293 1608.34,684.293 1608.9,684.293 1609.46,684.293 1610.02,684.293 1610.57,684.293 1611.13,684.293 1611.69,684.293 1612.25,684.293 1612.81,684.293 1613.37,684.293 1613.93,684.293 1614.49,684.293 1615.05,684.293 1615.61,684.293 1616.17,684.293 1616.73,684.293 1617.29,684.293 1617.84,684.293 1618.4,684.293 1618.96,684.293 1619.52,684.293 1620.08,684.293 1620.64,684.293 1621.2,684.293 1621.76,684.293 1622.32,684.293 1622.88,684.293 1623.44,684.293 1624,684.293 1624.56,684.293 1625.11,684.293 1625.67,684.293 1626.23,684.293 1626.79,684.293 1627.35,684.293 1627.91,684.293 1628.47,684.293 1629.03,684.293 1629.59,684.293 1630.15,684.293 1630.71,684.293 1631.27,684.293 1631.83,684.293 1632.39,684.293 1632.94,684.293 1633.5,684.293 1634.06,684.293 1634.62,684.293 1635.18,684.293 1635.74,684.293 1636.3,684.293 1636.86,684.293 1637.42,684.293 1637.98,684.293 1638.54,684.293 1639.1,684.293 1639.66,684.293 1640.21,684.293 1640.77,684.293 1641.33,684.293 1641.89,684.293 1642.45,684.293 1643.01,684.293 1643.57,684.293 1644.13,684.293 1644.69,684.293 1645.25,684.293 1645.81,684.293 1646.37,684.293 1646.93,684.293 1647.48,684.293 1648.04,684.293 1648.6,684.293 1649.16,684.293 1649.72,684.293 1650.28,684.293 1650.84,684.293 1651.4,684.293 1651.96,684.293 1652.52,684.293 1653.08,684.293 1653.64,684.293 1654.2,684.293 1654.76,684.293 1655.31,684.293 1655.87,684.293 1656.43,684.293 1656.99,684.293 1657.55,684.293 1658.11,684.293 1658.67,684.293 1659.23,684.293 1659.79,684.293 1660.35,684.293 1660.91,684.293 1661.47,684.293 1662.03,684.293 1662.58,684.293 1663.14,684.293 1663.7,684.293 1664.26,684.293 1664.82,684.293 1665.38,684.293 1665.94,684.293 1666.5,684.293 1667.06,684.293 1667.62,684.293 1668.18,684.293 1668.74,684.293 1669.3,684.293 1669.85,684.293 1670.41,684.293 1670.97,684.293 1671.53,684.293 1672.09,684.293 1672.65,684.293 1673.21,684.293 1673.77,684.293 1674.33,684.293 1674.89,684.293 1675.45,684.293 1676.01,684.293 1676.57,684.293 1677.13,684.293 1677.68,684.293 1678.24,684.293 1678.8,684.293 1679.36,684.293 1679.92,684.293 1680.48,684.293 1681.04,684.293 1681.6,684.293 1682.16,684.293 1682.72,684.293 1683.28,684.293 1683.84,684.293 1684.4,684.293 1684.95,684.293 1685.51,684.293 1686.07,684.293 1686.63,684.293 1687.19,684.293 1687.75,684.293 1688.31,684.293 1688.87,684.293 1689.43,684.293 1689.99,684.293 1690.55,684.293 1691.11,684.293 1691.67,684.293 1692.23,684.293 1692.78,684.293 1693.34,684.293 1693.9,684.293 1694.46,684.293 1695.02,684.293 1695.58,684.293 1696.14,684.293 1696.7,684.293 1697.26,684.293 1697.82,684.293 1698.38,684.293 1698.94,684.293 1699.5,684.293 1700.05,684.293 1700.61,684.293 1701.17,684.293 1701.73,684.293 1702.29,684.293 1702.85,684.293 1703.41,684.293 1703.97,684.293 1704.53,684.293 1705.09,684.293 1705.65,684.293 1706.21,684.293 1706.77,684.293 1707.32,684.293 1707.88,684.293 1708.44,684.293 1709,684.293 1709.56,684.293 1710.12,684.293 1710.68,684.293 1711.24,684.293 1711.8,684.293 1712.36,684.293 1712.92,684.293 1713.48,684.293 1714.04,684.293 1714.6,684.293 1715.15,684.293 1715.71,684.293 1716.27,684.293 1716.83,684.293 1717.39,684.293 1717.95,684.293 1718.51,684.293 1719.07,684.293 1719.63,684.293 1720.19,684.293 1720.75,684.293 1721.31,684.293 1721.87,684.293 1722.42,684.293 1722.98,684.293 1723.54,684.293 1724.1,684.293 1724.66,684.293 1725.22,684.293 1725.78,684.293 1726.34,684.293 1726.9,684.293 1727.46,684.293 1728.02,684.293 1728.58,684.293 1729.14,684.293 1729.69,684.293 1730.25,684.293 1730.81,684.293 1731.37,684.293 1731.93,684.293 1732.49,684.293 1733.05,684.293 1733.61,684.293 1734.17,684.293 1734.73,684.293 1735.29,684.293 1735.85,684.293 1736.41,684.293 1736.97,684.293 1737.52,684.293 1738.08,684.293 1738.64,684.293 1739.2,684.293 1739.76,684.293 1740.32,684.293 1740.88,684.293 1741.44,684.293 1742,684.293 1742.56,684.293 1743.12,684.293 1743.68,684.293 1744.24,684.293 1744.79,684.293 1745.35,684.293 1745.91,684.293 1746.47,684.293 1747.03,684.293 1747.59,684.293 1748.15,684.293 1748.71,684.293 1749.27,684.293 1749.83,684.293 1750.39,684.293 1750.95,684.293 1751.51,684.293 1752.06,684.293 1752.62,684.293 1753.18,684.293 1753.74,684.293 1754.3,684.293 1754.86,684.293 1755.42,684.293 1755.98,684.293 1756.54,684.293 1757.1,684.293 1757.66,684.293 1758.22,684.293 1758.78,684.293 1759.34,684.293 1759.89,684.293 1760.45,684.293 1761.01,684.293 1761.57,684.293 1762.13,684.293 1762.69,684.293 1763.25,684.293 1763.81,684.293 1764.37,684.293 1764.93,684.293 1765.49,684.293 1766.05,684.293 1766.61,684.293 1767.16,684.293 1767.72,684.293 1768.28,684.293 1768.84,684.293 1769.4,684.293 1769.96,684.293 1770.52,684.293 1771.08,684.293 1771.64,684.293 1772.2,684.293 1772.76,684.293 1773.32,684.293 1773.88,684.293 1774.43,684.293 1774.99,684.293 1775.55,684.293 1776.11,684.293 1776.67,684.293 1777.23,684.293 1777.79,684.293 1778.35,684.293 1778.91,684.293 1779.47,684.293 1780.03,684.293 1780.59,684.293 1781.15,684.293 1781.71,684.293 1782.26,684.293 1782.82,684.293 1783.38,684.293 1783.94,684.293 1784.5,684.293 1785.06,684.293 1785.62,684.293 1786.18,684.293 1786.74,684.293 1787.3,684.293 1787.86,684.293 1788.42,684.293 1788.98,684.293 1789.53,684.293 1790.09,684.293 1790.65,684.293 1791.21,684.293 1791.77,684.293 1792.33,684.293 1792.89,684.293 1793.45,684.293 1794.01,684.293 1794.57,684.293 1795.13,684.293 1795.69,684.293 1796.25,684.293 1796.8,684.293 1797.36,684.293 1797.92,684.293 1798.48,684.293 1799.04,684.293 1799.6,684.293 1800.16,684.293 1800.72,684.293 1801.28,684.293 1801.84,684.293 1802.4,684.293 1802.96,684.293 1803.52,684.293 1804.08,684.293 1804.63,684.293 1805.19,684.293 1805.75,684.293 1806.31,684.293 1806.87,684.293 1807.43,684.293 1807.99,684.293 1808.55,684.293 1809.11,684.293 1809.67,684.293 1810.23,684.293 1810.79,684.293 1811.35,684.293 1811.9,684.293 1812.46,684.293 1813.02,684.293 1813.58,684.293 1814.14,684.293 1814.7,684.293 1815.26,684.293 1815.82,684.293 1816.38,684.293 1816.94,684.293 1817.5,684.293 1818.06,684.293 1818.62,684.293 1819.18,684.293 1819.73,684.293 1820.29,684.293 1820.85,684.293 1821.41,684.293 1821.97,684.293 1822.53,684.293 1823.09,684.293 1823.65,684.293 1824.21,684.293 1824.77,684.293 1825.33,684.293 1825.89,684.293 1826.45,684.293 1827,684.293 1827.56,684.293 1828.12,684.293 1828.68,684.293 1829.24,684.293 1829.8,684.293 1830.36,684.293 1830.92,684.293 1831.48,684.293 1832.04,684.293 1832.6,684.293 1833.16,684.293 1833.72,684.293 1834.27,684.293 1834.83,684.293 1835.39,684.293 1835.95,684.293 1836.51,684.293 1837.07,684.293 1837.63,684.293 1838.19,684.293 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027857836609349 ± 0.020738017891061302\nProjected Energy: -4.018652530975263 ± (0.006602180924351941, 0.006815117078647681)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.558228</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.0769e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4006e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.427e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.513e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.216e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.316e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219622498\n  0.15789998694607377\n  0.8767114411781343\n  1.5305929970973304\n  1.5835732611867481\n  3.072870330325868\n  3.1256726539518427\n  4.862107221562171\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nspectral_strategy = GramSchmidt(): The SpectralStrategy used for simulations of spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
