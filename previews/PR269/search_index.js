var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2089141000303007 ± 0.002404918107586906\n   G2(1) = 0.9175864222361457 ± 0.0009299774382747417\n   G2(2) = 0.9821325586247354 ± 0.000592945410042408\n   G2(3) = 0.9916479382479367 ± 0.001016115186253199\n   G2(4) = 0.9821325586247354 ± 0.000592945410042408\n   G2(5) = 0.9175864222361457 ± 0.0009299774382747417\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.954476252378411 ± 0.12137432011956038\n   Replica 2: -4.013726353311546 ± 0.13622042650517346\n   Replica 3: -3.9917257165379363 ± 0.12090549957431548\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.79 2211.02,1260.79 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.24 2211.02,1004.24 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.69 2211.02,747.69 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,491.139 2211.02,491.139 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,234.589 2211.02,234.589 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.79 423.181,1260.79 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.24 423.181,1004.24 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.69 423.181,747.69 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,491.139 423.181,491.139 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,234.589 423.181,234.589 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M356.339 1246.59 Q352.728 1246.59 350.899 1250.15 Q349.094 1253.7 349.094 1260.83 Q349.094 1267.93 350.899 1271.5 Q352.728 1275.04 356.339 1275.04 Q359.973 1275.04 361.779 1271.5 Q363.608 1267.93 363.608 1260.83 Q363.608 1253.7 361.779 1250.15 Q359.973 1246.59 356.339 1246.59 M356.339 1242.89 Q362.149 1242.89 365.205 1247.49 Q368.284 1252.08 368.284 1260.83 Q368.284 1269.55 365.205 1274.16 Q362.149 1278.74 356.339 1278.74 Q350.529 1278.74 347.45 1274.16 Q344.395 1269.55 344.395 1260.83 Q344.395 1252.08 347.45 1247.49 Q350.529 1242.89 356.339 1242.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M290.043 1017.58 L306.363 1017.58 L306.363 1021.52 L284.418 1021.52 L284.418 1017.58 Q287.08 1014.83 291.664 1010.2 Q296.27 1005.55 297.451 1004.21 Q299.696 1001.68 300.576 999.946 Q301.478 998.187 301.478 996.497 Q301.478 993.742 299.534 992.006 Q297.613 990.27 294.511 990.27 Q292.312 990.27 289.858 991.034 Q287.427 991.798 284.65 993.349 L284.65 988.627 Q287.474 987.492 289.927 986.914 Q292.381 986.335 294.418 986.335 Q299.789 986.335 302.983 989.02 Q306.177 991.705 306.177 996.196 Q306.177 998.326 305.367 1000.25 Q304.58 1002.15 302.474 1004.74 Q301.895 1005.41 298.793 1008.63 Q295.691 1011.82 290.043 1017.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M316.224 986.96 L334.58 986.96 L334.58 990.895 L320.506 990.895 L320.506 999.367 Q321.524 999.02 322.543 998.858 Q323.562 998.673 324.58 998.673 Q330.367 998.673 333.747 1001.84 Q337.126 1005.02 337.126 1010.43 Q337.126 1016.01 333.654 1019.11 Q330.182 1022.19 323.862 1022.19 Q321.687 1022.19 319.418 1021.82 Q317.173 1021.45 314.765 1020.71 L314.765 1016.01 Q316.849 1017.15 319.071 1017.7 Q321.293 1018.26 323.77 1018.26 Q327.774 1018.26 330.112 1016.15 Q332.45 1014.04 332.45 1010.43 Q332.45 1006.82 330.112 1004.71 Q327.774 1002.61 323.77 1002.61 Q321.895 1002.61 320.02 1003.02 Q318.168 1003.44 316.224 1004.32 L316.224 986.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 990.039 Q352.728 990.039 350.899 993.604 Q349.094 997.145 349.094 1004.27 Q349.094 1011.38 350.899 1014.95 Q352.728 1018.49 356.339 1018.49 Q359.973 1018.49 361.779 1014.95 Q363.608 1011.38 363.608 1004.27 Q363.608 997.145 361.779 993.604 Q359.973 990.039 356.339 990.039 M356.339 986.335 Q362.149 986.335 365.205 990.942 Q368.284 995.525 368.284 1004.27 Q368.284 1013 365.205 1017.61 Q362.149 1022.19 356.339 1022.19 Q350.529 1022.19 347.45 1017.61 Q344.395 1013 344.395 1004.27 Q344.395 995.525 347.45 990.942 Q350.529 986.335 356.339 986.335 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M286.062 730.41 L304.418 730.41 L304.418 734.345 L290.344 734.345 L290.344 742.817 Q291.363 742.47 292.381 742.308 Q293.4 742.122 294.418 742.122 Q300.205 742.122 303.585 745.294 Q306.964 748.465 306.964 753.882 Q306.964 759.46 303.492 762.562 Q300.02 765.641 293.701 765.641 Q291.525 765.641 289.256 765.27 Q287.011 764.9 284.603 764.159 L284.603 759.46 Q286.687 760.595 288.909 761.15 Q291.131 761.706 293.608 761.706 Q297.613 761.706 299.951 759.599 Q302.288 757.493 302.288 753.882 Q302.288 750.271 299.951 748.164 Q297.613 746.058 293.608 746.058 Q291.733 746.058 289.858 746.474 Q288.006 746.891 286.062 747.771 L286.062 730.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M326.177 733.488 Q322.566 733.488 320.737 737.053 Q318.932 740.595 318.932 747.724 Q318.932 754.831 320.737 758.396 Q322.566 761.937 326.177 761.937 Q329.811 761.937 331.617 758.396 Q333.446 754.831 333.446 747.724 Q333.446 740.595 331.617 737.053 Q329.811 733.488 326.177 733.488 M326.177 729.785 Q331.987 729.785 335.043 734.391 Q338.122 738.974 338.122 747.724 Q338.122 756.451 335.043 761.058 Q331.987 765.641 326.177 765.641 Q320.367 765.641 317.288 761.058 Q314.233 756.451 314.233 747.724 Q314.233 738.974 317.288 734.391 Q320.367 729.785 326.177 729.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 733.488 Q352.728 733.488 350.899 737.053 Q349.094 740.595 349.094 747.724 Q349.094 754.831 350.899 758.396 Q352.728 761.937 356.339 761.937 Q359.973 761.937 361.779 758.396 Q363.608 754.831 363.608 747.724 Q363.608 740.595 361.779 737.053 Q359.973 733.488 356.339 733.488 M356.339 729.785 Q362.149 729.785 365.205 734.391 Q368.284 738.974 368.284 747.724 Q368.284 756.451 365.205 761.058 Q362.149 765.641 356.339 765.641 Q350.529 765.641 347.45 761.058 Q344.395 756.451 344.395 747.724 Q344.395 738.974 347.45 734.391 Q350.529 729.785 356.339 729.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M284.835 473.859 L307.057 473.859 L307.057 475.85 L294.511 508.419 L289.627 508.419 L301.432 477.794 L284.835 477.794 L284.835 473.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M316.224 473.859 L334.58 473.859 L334.58 477.794 L320.506 477.794 L320.506 486.266 Q321.524 485.919 322.543 485.757 Q323.562 485.572 324.58 485.572 Q330.367 485.572 333.747 488.743 Q337.126 491.915 337.126 497.331 Q337.126 502.91 333.654 506.012 Q330.182 509.09 323.862 509.09 Q321.687 509.09 319.418 508.72 Q317.173 508.35 314.765 507.609 L314.765 502.91 Q316.849 504.044 319.071 504.6 Q321.293 505.155 323.77 505.155 Q327.774 505.155 330.112 503.049 Q332.45 500.942 332.45 497.331 Q332.45 493.72 330.112 491.614 Q327.774 489.507 323.77 489.507 Q321.895 489.507 320.02 489.924 Q318.168 490.34 316.224 491.22 L316.224 473.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 476.938 Q352.728 476.938 350.899 480.503 Q349.094 484.044 349.094 491.174 Q349.094 498.28 350.899 501.845 Q352.728 505.387 356.339 505.387 Q359.973 505.387 361.779 501.845 Q363.608 498.28 363.608 491.174 Q363.608 484.044 361.779 480.503 Q359.973 476.938 356.339 476.938 M356.339 473.234 Q362.149 473.234 365.205 477.841 Q368.284 482.424 368.284 491.174 Q368.284 499.901 365.205 504.507 Q362.149 509.09 356.339 509.09 Q350.529 509.09 347.45 504.507 Q344.395 499.901 344.395 491.174 Q344.395 482.424 347.45 477.841 Q350.529 473.234 356.339 473.234 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M256.664 247.933 L264.303 247.933 L264.303 221.568 L255.992 223.234 L255.992 218.975 L264.256 217.309 L268.932 217.309 L268.932 247.933 L276.571 247.933 L276.571 251.869 L256.664 251.869 L256.664 247.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M296.015 220.387 Q292.404 220.387 290.576 223.952 Q288.77 227.494 288.77 234.623 Q288.77 241.73 290.576 245.295 Q292.404 248.836 296.015 248.836 Q299.65 248.836 301.455 245.295 Q303.284 241.73 303.284 234.623 Q303.284 227.494 301.455 223.952 Q299.65 220.387 296.015 220.387 M296.015 216.684 Q301.826 216.684 304.881 221.29 Q307.96 225.873 307.96 234.623 Q307.96 243.35 304.881 247.957 Q301.826 252.54 296.015 252.54 Q290.205 252.54 287.127 247.957 Q284.071 243.35 284.071 234.623 Q284.071 225.873 287.127 221.29 Q290.205 216.684 296.015 216.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M326.177 220.387 Q322.566 220.387 320.737 223.952 Q318.932 227.494 318.932 234.623 Q318.932 241.73 320.737 245.295 Q322.566 248.836 326.177 248.836 Q329.811 248.836 331.617 245.295 Q333.446 241.73 333.446 234.623 Q333.446 227.494 331.617 223.952 Q329.811 220.387 326.177 220.387 M326.177 216.684 Q331.987 216.684 335.043 221.29 Q338.122 225.873 338.122 234.623 Q338.122 243.35 335.043 247.957 Q331.987 252.54 326.177 252.54 Q320.367 252.54 317.288 247.957 Q314.233 243.35 314.233 234.623 Q314.233 225.873 317.288 221.29 Q320.367 216.684 326.177 216.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 220.387 Q352.728 220.387 350.899 223.952 Q349.094 227.494 349.094 234.623 Q349.094 241.73 350.899 245.295 Q352.728 248.836 356.339 248.836 Q359.973 248.836 361.779 245.295 Q363.608 241.73 363.608 234.623 Q363.608 227.494 361.779 223.952 Q359.973 220.387 356.339 220.387 M356.339 216.684 Q362.149 216.684 365.205 221.29 Q368.284 225.873 368.284 234.623 Q368.284 243.35 365.205 247.957 Q362.149 252.54 356.339 252.54 Q350.529 252.54 347.45 247.957 Q344.395 243.35 344.395 234.623 Q344.395 225.873 347.45 221.29 Q350.529 216.684 356.339 216.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,234.589 4017.76,234.589 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.43 456.554,1249.34 457.123,1249.18 457.691,1248.97 458.259,1247.65 458.828,1247.34 459.396,1246.92 459.964,1246.44 460.533,1245.89 461.101,1243.21 461.669,1242.59 462.238,1241.87 462.806,1241.07 463.375,1240.17 463.943,1239.18 464.511,1237.05 465.08,1234.88 465.648,1233.66 466.216,1232.34 466.785,1230.91 467.353,1229.33 467.921,1226.61 468.49,1224.76 469.058,1222.76 469.626,1219.6 470.195,1215.28 470.763,1212.9 471.331,1208.31 471.9,1204.66 472.468,1200.88 473.036,1198.01 473.605,1194.88 474.173,1188.49 474.741,1182.97 475.31,1179.31 475.878,1174.39 476.446,1169.31 477.015,1165 477.583,1159.46 478.152,1154.78 478.72,1149.94 479.288,1143.86 479.857,1137.64 480.425,1132.08 480.993,1125.3 481.562,1116.29 482.13,1110 482.698,1103.64 483.267,1095.05 483.835,1088.18 484.403,1078.25 484.972,1070.22 485.54,1061.03 486.108,1053.7 486.677,1046.11 487.245,1038.3 487.813,1028.31 488.382,1018.27 488.95,1009.12 489.518,1000.99 490.087,990.715 490.655,982.223 491.224,972.515 491.792,963.834 492.36,954.937 492.929,944.867 493.497,934.704 494.065,925.54 494.634,915.333 495.202,902.991 495.77,893.736 496.339,881.389 496.907,871.076 497.475,858.613 498.044,846.438 498.612,837.242 499.18,826.094 499.749,817.069 500.317,805.866 500.885,793.674 501.454,782.566 502.022,772.768 502.59,763.783 503.159,751.774 503.727,742.918 504.295,733.117 504.864,722.313 505.432,712.597 506.001,702.914 506.569,690.218 507.137,681.838 507.706,672.52 508.274,662.232 508.842,653.2 509.411,644.028 509.979,635.947 510.547,627.237 511.116,619.576 511.684,608.914 512.252,600.534 512.821,593.305 513.389,584.001 513.957,575.937 514.526,568.936 515.094,558.02 515.662,549.437 516.231,541.977 516.799,532.455 517.367,526.612 517.936,519.557 518.504,512.681 519.072,505.853 519.641,498.212 520.209,489.531 520.778,483.304 521.346,478.192 521.914,470.95 522.483,461.946 523.051,455.348 523.619,449.128 524.188,444.92 524.756,441.805 525.324,435.518 525.893,429.377 526.461,424.531 527.029,419.854 527.598,413.162 528.166,409.705 528.734,406.14 529.303,400.706 529.871,396.603 530.439,390.42 531.008,389.568 531.576,385.666 532.144,382.934 532.713,378.958 533.281,377.295 533.85,368.23 534.418,365.742 534.986,362.529 535.555,358.284 536.123,353.16 536.691,348.248 537.26,346.432 537.828,344.452 538.396,343.494 538.965,339.763 539.533,337.936 540.101,336.119 540.67,332.403 541.238,330.968 541.806,328.479 542.375,325.127 542.943,323.778 543.511,323.426 544.08,319.012 544.648,317.769 545.216,313.549 545.785,309.348 546.353,309.61 546.921,308.729 547.49,306.809 548.058,305.783 548.627,302.737 549.195,301.924 549.763,300.903 550.332,300.013 550.9,298.06 551.468,297.397 552.037,296.51 552.605,294.795 553.173,294.013 553.742,293.156 554.31,294.492 554.878,292.378 555.447,289.538 556.015,287.66 556.583,285.068 557.152,283.365 557.72,284.811 558.288,283.284 558.857,281.435 559.425,282.95 559.993,282.349 560.562,282.804 561.13,282.078 561.698,282.538 562.267,278.658 562.835,278.035 563.404,276.32 563.972,275.85 564.54,273.294 565.109,274.965 565.677,273.545 566.245,271.077 566.814,272.762 567.382,270.197 567.95,268.782 568.519,267.13 569.087,265.011 569.655,267.752 570.224,267.414 570.792,268.132 571.36,267.879 571.929,268.641 572.497,268.114 573.065,268.211 573.634,268.627 574.202,268.062 574.77,267.623 575.339,267.926 575.907,266.149 576.476,265.516 577.044,265.017 577.612,263.321 578.181,261.738 578.749,261.358 579.317,260.864 579.886,257.341 580.454,258.128 581.022,260.16 581.591,258.802 582.159,257.265 582.727,256.984 583.296,256.49 583.864,255.931 584.432,252.54 585.001,253.486 585.569,253.382 586.137,253.047 586.706,250.609 587.274,249.64 587.842,248.657 588.411,248.824 588.979,250.034 589.547,249.89 590.116,250.124 590.684,251.259 591.253,251.07 591.821,250.925 592.389,250.591 592.958,250.507 593.526,250.33 594.094,250.317 594.663,252.185 595.231,251.867 595.799,251.732 596.368,251.367 596.936,251.047 597.504,248.851 598.073,250.882 598.641,250.593 599.209,250.379 599.778,248.918 600.346,248.785 600.914,248.618 601.483,247.395 602.051,249.169 602.619,247.874 603.188,247.83 603.756,249.84 604.325,248.393 604.893,248.227 605.461,249.157 606.03,247.865 606.598,245.777 607.166,244.409 607.735,243.392 608.303,242.472 608.871,242.575 609.44,242.715 610.008,242.906 610.576,244.989 611.145,244.883 611.713,240.852 612.281,239.944 612.85,239.938 613.418,240.095 613.986,239.472 614.555,241.804 615.123,241.742 615.691,242.814 616.26,242.779 616.828,242.672 617.396,241.701 617.965,242.918 618.533,241.678 619.102,241.538 619.67,239.59 620.238,240.064 620.807,241.058 621.375,240.074 621.943,239.24 622.512,239.476 623.08,240.761 623.648,240.741 624.217,239.84 624.785,240.028 625.353,239.164 625.922,237.355 626.49,236.817 627.058,237.145 627.627,237.353 628.195,236.493 628.763,236.838 629.332,236.379 629.9,234.658 630.468,233.039 631.037,232.726 631.605,234.365 632.173,232.805 632.742,234.288 633.31,234.768 633.879,235.219 634.447,234.872 635.015,234.402 635.584,232.908 636.152,231.649 636.72,233.221 637.289,233.932 637.857,234.698 638.425,236.342 638.994,235.866 639.562,235.28 640.13,233.737 640.699,234.414 641.267,234.01 641.835,235.566 642.404,236.002 642.972,236.68 643.54,237.037 644.109,236.534 644.677,238.112 645.245,237.515 645.814,238.1 646.382,237.655 646.951,238.21 647.519,239.605 648.087,238.833 648.656,237.156 649.224,237.407 649.792,237.66 650.361,239.158 650.929,240.294 651.497,240.433 652.066,241.571 652.634,240.486 653.202,243.884 653.771,244.749 654.339,245.519 654.907,244.074 655.476,243.108 656.044,242.025 656.612,238.979 657.181,238.971 657.749,238.209 658.317,240.599 658.886,240.826 659.454,241.985 660.022,242.958 660.591,240.924 661.159,239.668 661.728,239.659 662.296,240.769 662.864,239.883 663.433,241.022 664.001,239.12 664.569,239.385 665.138,239.759 665.706,239.878 666.274,239.793 666.843,237.73 667.411,238.77 667.979,236.891 668.548,239.366 669.116,238.49 669.684,236.74 670.253,236.118 670.821,236.558 671.389,235.936 671.958,233.355 672.526,233.732 673.094,231.182 673.663,238.148 674.231,237.223 674.799,239.501 675.368,238.818 675.936,240.178 676.505,242.319 677.073,241.274 677.641,239.093 678.21,239.155 678.778,239.36 679.346,236.391 679.915,235.588 680.483,235.992 681.051,237.526 681.62,236.729 682.188,237.191 682.756,238.277 683.325,239.598 683.893,239.691 684.461,237.692 685.03,237.858 685.598,235.823 686.166,236.406 686.735,237.593 687.303,237.784 687.871,234.903 688.44,234.312 689.008,233.859 689.577,233.514 690.145,233.981 690.713,232.489 691.282,233.929 691.85,235.455 692.418,233.773 692.987,233.297 693.555,231.701 694.123,233.489 694.692,235.932 695.26,237.115 695.828,235.503 696.397,236.771 696.965,236.97 697.533,237.361 698.102,237.672 698.67,237.761 699.238,238.002 699.807,239.43 700.375,238.613 700.943,237.462 701.512,238.803 702.08,239.028 702.648,239.103 703.217,239.169 703.785,239.061 704.354,239.215 704.922,239.081 705.49,239.101 706.059,238.044 706.627,239.177 707.195,238.285 707.764,239.608 708.332,238.502 708.9,240.66 709.469,240.792 710.037,240.833 710.605,240.544 711.174,240.565 711.742,239.617 712.31,239.715 712.879,238.553 713.447,239.609 714.015,237.641 714.584,237.531 715.152,237.812 715.72,238.847 716.289,239.186 716.857,239.216 717.425,241.219 717.994,239.985 718.562,238.91 719.131,237.088 719.699,238.058 720.267,238.235 720.836,238.596 721.404,238.562 721.972,237.738 722.541,237.692 723.109,238.713 723.677,238.663 724.246,238.477 724.814,239.755 725.382,238.613 725.951,238.382 726.519,238.445 727.087,239.61 727.656,238.496 728.224,241.272 728.792,242.096 729.361,241.067 729.929,240.083 730.497,239.881 731.066,239.662 731.634,239.532 732.203,237.418 732.771,242.499 733.339,244.088 733.908,241.435 734.476,240.091 735.044,238.795 735.613,239.626 736.181,238.372 736.749,237.988 737.318,236.707 737.886,236.839 738.454,235.757 739.023,234.731 739.591,234.923 740.159,235.927 740.728,236.943 741.296,236.917 741.864,234.694 742.433,233.776 743.001,235.082 743.569,234.105 744.138,233.258 744.706,235.484 745.274,234.542 745.843,232.489 746.411,234.117 746.98,237.283 747.548,238.333 748.116,237.386 748.685,238.5 749.253,237.27 749.821,237.076 750.39,237.154 750.958,238.001 751.526,238 752.095,237.862 752.663,237.699 753.231,236.544 753.8,237.525 754.368,237.317 754.936,237.263 755.505,235.886 756.073,235.902 756.641,235.05 757.21,238.325 757.778,237.235 758.346,237.226 758.915,235.139 759.483,236.07 760.052,239.102 760.62,237.743 761.188,236.733 761.757,235.582 762.325,236.864 762.893,236.759 763.462,236.471 764.03,236.589 764.598,237.673 765.167,238.653 765.735,237.556 766.303,238.451 766.872,236.16 767.44,236.208 768.008,238.046 768.577,235.817 769.145,234.881 769.713,235.624 770.282,235.492 770.85,234.602 771.418,235.598 771.987,235.639 772.555,236.751 773.123,235.855 773.692,236.106 774.26,234.135 774.829,234.311 775.397,235.483 775.965,237.707 776.534,239.822 777.102,238.536 777.67,240.528 778.239,240.022 778.807,239.646 779.375,238.239 779.944,238.198 780.512,236.058 781.08,235.185 781.649,235.099 782.217,234.106 782.785,233.141 783.354,233.484 783.922,233.562 784.49,233.795 785.059,232.036 785.627,234.274 786.195,235.433 786.764,235.273 787.332,236.155 787.9,235.295 788.469,237.155 789.037,238.1 789.606,236.893 790.174,237.035 790.742,240.809 791.311,240.359 791.879,238.015 792.447,238.451 793.016,238.433 793.584,236.207 794.152,239.404 794.721,239.919 795.289,240.714 795.857,239.304 796.426,238.011 796.994,237.951 797.562,239.648 798.131,240.284 798.699,240.866 799.267,240.722 799.836,239.142 800.404,239.897 800.972,238.566 801.541,236.021 802.109,235.853 802.678,237.89 803.246,236.561 803.814,235.39 804.383,234.287 804.951,235.314 805.519,236.217 806.088,234.619 806.656,234.477 807.224,234.277 807.793,235.196 808.361,237.16 808.929,237.087 809.498,236.78 810.066,234.466 810.634,233.594 811.203,234.51 811.771,235.516 812.339,235.255 812.908,235.057 813.476,234.003 814.044,235.964 814.613,235.884 815.181,235.804 815.749,236.559 816.318,234.077 816.886,235.098 817.455,234.939 818.023,237.034 818.591,235.753 819.16,237.739 819.728,236.34 820.296,237.252 820.865,238.122 821.433,236.749 822.001,236.81 822.57,233.73 823.138,233.922 823.706,233.906 824.275,234.008 824.843,236.674 825.411,234.664 825.98,234.545 826.548,235.452 827.116,235.462 827.685,235.293 828.253,235.543 828.821,234.559 829.39,234.815 829.958,234.723 830.526,235.674 831.095,233.385 831.663,231.539 832.232,232.788 832.8,231.961 833.368,233.192 833.937,232.197 834.505,231.373 835.073,230.685 835.642,230.81 836.21,230.078 836.778,231.322 837.347,232.511 837.915,233.571 838.483,232.95 839.052,233.208 839.62,233.165 840.188,233.272 840.757,232.388 841.325,233.763 841.893,233.718 842.462,234.707 843.03,233.762 843.598,233.714 844.167,233.702 844.735,233.914 845.304,235.024 845.872,234.961 846.44,231.976 847.009,232.414 847.577,231.489 848.145,230.888 848.714,231.258 849.282,232.893 849.85,233.041 850.419,233.341 850.987,231.379 851.555,231.759 852.124,232.107 852.692,231.345 853.26,231.544 853.829,231.977 854.397,232.253 854.965,232.301 855.534,232.435 856.102,235.709 856.67,236.501 857.239,236.498 857.807,237.073 858.375,237.859 858.944,234.683 859.512,234.808 860.081,234.978 860.649,233.968 861.217,234.218 861.786,236.391 862.354,236.395 862.922,236.46 863.491,237.378 864.059,237.286 864.627,238.038 865.196,239.906 865.764,240.592 866.332,239.125 866.901,236.777 867.469,234.446 868.037,233.552 868.606,235.809 869.174,234.552 869.742,233.581 870.311,233.805 870.879,233.001 871.447,233.157 872.016,235.245 872.584,235.265 873.152,236.477 873.721,235.349 874.289,234.331 874.858,236.417 875.426,237.356 875.994,238.287 876.563,237.945 877.131,236.652 877.699,237.561 878.268,236.448 878.836,237.324 879.404,237.125 879.973,237.986 880.541,237.522 881.109,235.192 881.678,236.214 882.246,235.098 882.814,235.248 883.383,234.134 883.951,232.262 884.519,230.235 885.088,231.487 885.656,231.701 886.224,232.166 886.793,232.287 887.361,231.497 887.93,233.652 888.498,233.827 889.066,232.942 889.635,233.1 890.203,231.145 890.771,231.509 891.34,232.811 891.908,233.975 892.476,235.213 893.045,234.392 893.613,234.502 894.181,232.445 894.75,232.669 895.318,231.871 895.886,232.121 896.455,235.401 897.023,234.112 897.591,234.065 898.16,232.032 898.728,232.072 899.296,233.382 899.865,234.501 900.433,234.657 901.001,235.996 901.57,235.804 902.138,235.704 902.707,237.863 903.275,239.77 903.843,239.504 904.412,238.211 904.98,237.767 905.548,236.561 906.117,236.371 906.685,237.181 907.253,235.089 907.822,236.153 908.39,234.108 908.958,233.134 909.527,235.482 910.095,236.768 910.663,237.779 911.232,238.452 911.8,238.087 912.368,236.992 912.937,236.987 913.505,237.809 914.073,234.851 914.642,234.937 915.21,234.841 915.779,233.912 916.347,231.989 916.915,231.358 917.484,230.602 918.052,230.949 918.62,230.858 919.189,230.164 919.757,229.592 920.325,228.981 920.894,229.565 921.462,229.014 922.03,230.501 922.599,230.026 923.167,228.312 923.735,229.885 924.304,230.378 924.872,231.833 925.44,232.306 926.009,232.764 926.577,234.132 927.145,235.007 927.714,234.929 928.282,233.856 928.85,234.208 929.419,236.393 929.987,237.336 930.556,236.157 931.124,237.174 931.692,235.973 932.261,234.731 932.829,234.621 933.397,234.778 933.966,237.312 934.534,237.272 935.102,237.966 935.671,236.867 936.239,235.921 936.807,235.954 937.376,238.079 937.944,240.165 938.512,239.968 939.081,239.711 939.649,238.359 940.217,236.191 940.786,234.207 941.354,232.229 941.922,231.385 942.491,230.776 943.059,233.327 943.627,233.644 944.196,233.858 944.764,234.881 945.333,236.215 945.901,238.337 946.469,239.087 947.038,237.778 947.606,236.664 948.174,237.489 948.743,237.351 949.311,235.218 949.879,236.268 950.448,233.097 951.016,231.238 951.584,231.563 952.153,232.707 952.721,231.964 953.289,233.076 953.858,234.293 954.426,233.426 954.994,230.618 955.563,231.942 956.131,234.083 956.699,236.306 957.268,236.387 957.836,235.453 958.405,235.473 958.973,236.486 959.541,237.221 960.11,235.893 960.678,238.871 961.246,237.602 961.815,237.468 962.383,235.256 962.951,235.344 963.52,236.48 964.088,236.357 964.656,236.219 965.225,236.248 965.793,237.334 966.361,236.195 966.93,235.031 967.498,234.111 968.066,236.059 968.635,234.892 969.203,235.851 969.771,236.879 970.34,236.713 970.908,235.641 971.476,236.804 972.045,234.435 972.613,236.572 973.182,237.47 973.75,238.421 974.318,240.189 974.887,238.838 975.455,238.704 976.023,235.438 976.592,238.594 977.16,235.316 977.728,234.424 978.297,235.439 978.865,235.438 979.433,236.452 980.002,237.258 980.57,235.129 981.138,236.104 981.707,236.096 982.275,234.944 982.843,233.916 983.412,233.818 983.98,233.957 984.548,232.934 985.117,235.175 985.685,235.934 986.253,234.784 986.822,234.744 987.39,232.801 987.959,231.868 988.527,234.232 989.095,235.456 989.664,237.543 990.232,235.286 990.8,237 991.369,236.727 991.937,235.485 992.505,235.283 993.074,232.953 993.642,234.163 994.21,232.964 994.779,232.145 995.347,232.48 995.915,231.715 996.484,231.836 997.052,231.895 997.62,231.893 998.189,231.258 998.757,229.523 999.325,229.079 999.894,229.426 1000.46,228.911 1001.03,228.331 1001.6,230.025 1002.17,230.49 1002.74,231.935 1003.3,234.28 1003.87,233.49 1004.44,233.623 1005.01,234.669 1005.58,234.959 1006.15,233.049 1006.71,232.207 1007.28,232.51 1007.85,231.854 1008.42,232.308 1008.99,232.589 1009.56,232.706 1010.12,233.058 1010.69,232.425 1011.26,232.556 1011.83,234.827 1012.4,235.875 1012.97,235.993 1013.53,235.809 1014.1,234.756 1014.67,234.947 1015.24,234.836 1015.81,235.959 1016.38,234.065 1016.94,233.084 1017.51,232.139 1018.08,233.424 1018.65,234.693 1019.22,232.85 1019.79,232.058 1020.35,231.552 1020.92,230.882 1021.49,234.298 1022.06,235.415 1022.63,235.303 1023.2,235.268 1023.76,237.421 1024.33,238.407 1024.9,239.193 1025.47,240.056 1026.04,238.593 1026.61,239.2 1027.17,237.879 1027.74,238.826 1028.31,236.755 1028.88,236.712 1029.45,234.619 1030.02,235.747 1030.58,234.857 1031.15,233.686 1031.72,233.922 1032.29,235.146 1032.86,236.273 1033.43,237.069 1033.99,236.147 1034.56,236.172 1035.13,237.49 1035.7,236.363 1036.27,237.25 1036.84,235.28 1037.4,237.35 1037.97,235.246 1038.54,234.986 1039.11,237.12 1039.68,236.967 1040.25,235.965 1040.81,236.771 1041.38,236.78 1041.95,237.55 1042.52,239.408 1043.09,238.275 1043.66,237.088 1044.22,238.005 1044.79,236.888 1045.36,236.921 1045.93,239.892 1046.5,238.502 1047.07,237.9 1047.63,238.784 1048.2,237.561 1048.77,237.626 1049.34,237.358 1049.91,238.419 1050.48,236.811 1051.05,235.371 1051.61,234.237 1052.18,233.356 1052.75,235.409 1053.32,234.328 1053.89,236.192 1054.46,237.015 1055.02,236.762 1055.59,235.373 1056.16,235.391 1056.73,234.115 1057.3,236.218 1057.87,236.001 1058.43,237.008 1059,237.995 1059.57,237.701 1060.14,238.296 1060.71,236.967 1061.28,236.736 1061.84,235.741 1062.41,233.603 1062.98,232.546 1063.55,232.839 1064.12,231.739 1064.69,230.985 1065.25,231.222 1065.82,230.277 1066.39,230.557 1066.96,231.691 1067.53,232.043 1068.1,234.23 1068.66,232.044 1069.23,233.194 1069.8,233.289 1070.37,236.361 1070.94,232.969 1071.51,232.937 1072.07,229.842 1072.64,230.304 1073.21,230.78 1073.78,231.836 1074.35,232.018 1074.92,231.374 1075.48,231.473 1076.05,231.598 1076.62,230.9 1077.19,232.269 1077.76,232.48 1078.33,232.482 1078.89,233.79 1079.46,233.134 1080.03,234.419 1080.6,234.474 1081.17,234.344 1081.74,232.392 1082.3,232.593 1082.87,232.799 1083.44,233.162 1084.01,232.322 1084.58,233.531 1085.15,233.769 1085.71,235.251 1086.28,233.295 1086.85,234.596 1087.42,233.59 1087.99,234.684 1088.56,233.966 1089.12,234.259 1089.69,233.529 1090.26,232.825 1090.83,235.103 1091.4,235.232 1091.97,235.323 1092.53,234.166 1093.1,235.308 1093.67,235.466 1094.24,237.727 1094.81,236.504 1095.38,238.673 1095.94,238.209 1096.51,237.063 1097.08,235.946 1097.65,235.066 1098.22,235.196 1098.79,236.251 1099.35,237.123 1099.92,235.101 1100.49,235.046 1101.06,232.985 1101.63,234.122 1102.2,235.111 1102.76,234.167 1103.33,234.127 1103.9,235.355 1104.47,236.295 1105.04,236.23 1105.61,236.297 1106.17,236.091 1106.74,237.334 1107.31,236.233 1107.88,237.23 1108.45,237.956 1109.02,237.763 1109.58,237.822 1110.15,238.67 1110.72,239.375 1111.29,242.13 1111.86,241.592 1112.43,239.993 1112.99,239.443 1113.56,237.029 1114.13,236.677 1114.7,237.439 1115.27,237.008 1115.84,236.863 1116.4,236.477 1116.97,235.236 1117.54,236.351 1118.11,237.154 1118.68,236.663 1119.25,235.507 1119.81,236.549 1120.38,235.416 1120.95,234.219 1121.52,234.016 1122.09,231.968 1122.66,229.996 1123.23,229.282 1123.79,228.411 1124.36,227.713 1124.93,226.976 1125.5,229.698 1126.07,231.31 1126.64,230.514 1127.2,231.751 1127.77,230.866 1128.34,229.145 1128.91,231.638 1129.48,229.891 1130.05,232.173 1130.61,232.503 1131.18,232.814 1131.75,232.698 1132.32,233.77 1132.89,233.657 1133.46,234.706 1134.02,233.912 1134.59,235.021 1135.16,234.085 1135.73,234.137 1136.3,234.242 1136.87,233.358 1137.43,233.332 1138,236.318 1138.57,237.138 1139.14,237.2 1139.71,238.118 1140.28,236.042 1140.84,236.989 1141.41,236.94 1141.98,237.968 1142.55,237.554 1143.12,236.284 1143.69,234.197 1144.25,236.365 1144.82,237.045 1145.39,234.851 1145.96,235.738 1146.53,233.893 1147.1,234.962 1147.66,235.058 1148.23,233.778 1148.8,234.819 1149.37,236.829 1149.94,237.674 1150.51,237.386 1151.07,238.026 1151.64,237.991 1152.21,238.651 1152.78,239.247 1153.35,240.009 1153.92,241.533 1154.48,237.73 1155.05,238.332 1155.62,241.052 1156.19,238.387 1156.76,236.096 1157.33,236.796 1157.89,236.859 1158.46,236.702 1159.03,237.545 1159.6,236.135 1160.17,232.844 1160.74,232.91 1161.3,233.102 1161.87,232.06 1162.44,231.98 1163.01,232.069 1163.58,231.156 1164.15,228.29 1164.71,228.588 1165.28,226.768 1165.85,228.406 1166.42,230.001 1166.99,230.336 1167.56,230.361 1168.12,229.771 1168.69,231.267 1169.26,232.433 1169.83,233.449 1170.4,232.461 1170.97,236.549 1171.53,236.437 1172.1,235.026 1172.67,233.93 1173.24,232.992 1173.81,234.947 1174.38,237.888 1174.94,237.847 1175.51,236.508 1176.08,236.337 1176.65,235.026 1177.22,234.971 1177.79,233.93 1178.35,233.018 1178.92,230.137 1179.49,230.624 1180.06,232.922 1180.63,235.19 1181.2,234.283 1181.76,233.347 1182.33,233.364 1182.9,232.418 1183.47,234.682 1184.04,234.794 1184.61,233.819 1185.17,232.899 1185.74,234.043 1186.31,234.241 1186.88,233.048 1187.45,232.952 1188.02,233.04 1188.58,233.933 1189.15,232.91 1189.72,231.692 1190.29,232.938 1190.86,231.908 1191.43,231.009 1192,229.416 1192.56,230.718 1193.13,228.791 1193.7,228.071 1194.27,226.552 1194.84,227.475 1195.41,229.144 1195.97,229.622 1196.54,230.156 1197.11,229.482 1197.68,229.913 1198.25,231.311 1198.82,231.559 1199.38,231.941 1199.95,231.209 1200.52,231.576 1201.09,232.627 1201.66,235.117 1202.23,235.213 1202.79,236.254 1203.36,237.276 1203.93,238.444 1204.5,239.455 1205.07,239.272 1205.64,240.184 1206.2,238.824 1206.77,236.603 1207.34,236.334 1207.91,237.332 1208.48,236.322 1209.05,238.208 1209.61,238.149 1210.18,237.808 1210.75,238.749 1211.32,237.124 1211.89,238.022 1212.46,237.906 1213.02,239.679 1213.59,239.53 1214.16,240.249 1214.73,240.937 1215.3,242.53 1215.87,241.776 1216.43,240.27 1217,237.86 1217.57,237.848 1218.14,237.716 1218.71,237.388 1219.28,237.46 1219.84,238.327 1220.41,237.894 1220.98,235.833 1221.55,237.774 1222.12,237.33 1222.69,235.187 1223.25,235.939 1223.82,236.916 1224.39,235.418 1224.96,236.306 1225.53,237.226 1226.1,234.813 1226.66,236.828 1227.23,235.561 1227.8,237.525 1228.37,236.213 1228.94,236.303 1229.51,235.212 1230.07,235.31 1230.64,235.081 1231.21,235.146 1231.78,237.257 1232.35,234.711 1232.92,234.584 1233.48,232.549 1234.05,232.55 1234.62,231.566 1235.19,231.809 1235.76,232.086 1236.33,231.079 1236.89,231.773 1237.46,229.999 1238.03,230.17 1238.6,229.387 1239.17,230.837 1239.74,231.033 1240.3,230.145 1240.87,230.431 1241.44,227.924 1242.01,227.331 1242.58,226.864 1243.15,228.674 1243.71,231.224 1244.28,229.352 1244.85,229.639 1245.42,229.922 1245.99,231.342 1246.56,231.892 1247.12,232.087 1247.69,234.543 1248.26,234.362 1248.83,237.521 1249.4,238.386 1249.97,239.338 1250.53,240.079 1251.1,238.968 1251.67,240.512 1252.24,238.131 1252.81,237.961 1253.38,238.631 1253.94,239.269 1254.51,237.8 1255.08,238.452 1255.65,238.329 1256.22,238.01 1256.79,238.695 1257.35,240.576 1257.92,240.203 1258.49,241.121 1259.06,242.667 1259.63,242.243 1260.2,242.664 1260.76,242.208 1261.33,242.301 1261.9,241.636 1262.47,240.97 1263.04,240.616 1263.61,238.852 1264.18,238.462 1264.74,238.132 1265.31,236.581 1265.88,236.367 1266.45,236.237 1267.02,234.14 1267.59,233.242 1268.15,234.301 1268.72,233.05 1269.29,231.957 1269.86,229.794 1270.43,228.865 1271,232.362 1271.56,232.388 1272.13,233.528 1272.7,232.666 1273.27,232.804 1273.84,234.991 1274.41,233.903 1274.97,233.923 1275.54,232.928 1276.11,233.001 1276.68,232.923 1277.25,234.859 1277.82,235.699 1278.38,237.81 1278.95,235.223 1279.52,235.008 1280.09,235.937 1280.66,235.751 1281.23,234.714 1281.79,235.703 1282.36,235.513 1282.93,235.489 1283.5,234.524 1284.07,234.572 1284.64,234.585 1285.2,233.467 1285.77,234.4 1286.34,233.385 1286.91,233.221 1287.48,232.355 1288.05,230.448 1288.61,229.699 1289.18,228.868 1289.75,229.126 1290.32,229.557 1290.89,228.793 1291.46,231.264 1292.02,232.584 1292.59,229.627 1293.16,230.942 1293.73,231.355 1294.3,232.536 1294.87,234.622 1295.43,232.599 1296,230.757 1296.57,229.69 1297.14,231.08 1297.71,230.562 1298.28,233.97 1298.84,230.94 1299.41,233.393 1299.98,232.56 1300.55,232.814 1301.12,233.961 1301.69,232.912 1302.25,236.252 1302.82,237.065 1303.39,236.83 1303.96,236.789 1304.53,238.713 1305.1,239.442 1305.66,239.116 1306.23,236.797 1306.8,235.638 1307.37,236.468 1307.94,236.509 1308.51,237.52 1309.07,239.148 1309.64,237.771 1310.21,237.617 1310.78,236.332 1311.35,236.271 1311.92,237.287 1312.48,235.94 1313.05,235.689 1313.62,236.447 1314.19,235.018 1314.76,233.783 1315.33,232.748 1315.89,232.792 1316.46,235.091 1317.03,236.99 1317.6,237.877 1318.17,236.593 1318.74,238.377 1319.3,239.053 1319.87,240.854 1320.44,240.317 1321.01,238.914 1321.58,238.294 1322.15,236.949 1322.71,236.792 1323.28,236.555 1323.85,238.357 1324.42,236.078 1324.99,236.774 1325.56,236.381 1326.12,237.127 1326.69,236.915 1327.26,235.676 1327.83,234.377 1328.4,235.203 1328.97,234.014 1329.53,232.996 1330.1,232.036 1330.67,231.982 1331.24,231.209 1331.81,234.715 1332.38,234.585 1332.94,232.507 1333.51,231.395 1334.08,230.736 1334.65,227.783 1335.22,228.382 1335.79,227.662 1336.36,227.09 1336.92,226.504 1337.49,228.233 1338.06,229.76 1338.63,229.688 1339.2,231.134 1339.77,232.272 1340.33,230.418 1340.9,230.645 1341.47,228.925 1342.04,228.332 1342.61,228.98 1343.18,230.412 1343.74,231.856 1344.31,234.226 1344.88,236.432 1345.45,236.448 1346.02,236.331 1346.59,237.419 1347.15,237.183 1347.72,237.151 1348.29,235.777 1348.86,236.709 1349.43,235.698 1350,233.687 1350.56,233.578 1351.13,232.61 1351.7,232.613 1352.27,231.969 1352.84,231.249 1353.41,230.521 1353.97,229.709 1354.54,229.196 1355.11,228.554 1355.68,229.148 1356.25,229.812 1356.82,231.207 1357.38,231.521 1357.95,228.798 1358.52,228.245 1359.09,228.921 1359.66,230.24 1360.23,230.676 1360.79,231.032 1361.36,229.365 1361.93,230.931 1362.5,232.285 1363.07,231.808 1363.64,232.003 1364.2,233.426 1364.77,233.715 1365.34,235.908 1365.91,237.962 1366.48,236.017 1367.05,236.004 1367.61,235.916 1368.18,235.825 1368.75,236.909 1369.32,238.013 1369.89,237.827 1370.46,237.73 1371.02,236.578 1371.59,236.559 1372.16,237.562 1372.73,240.674 1373.3,240.458 1373.87,239.275 1374.43,238.944 1375,238.841 1375.57,237.572 1376.14,237.385 1376.71,237.469 1377.28,236.343 1377.84,238.336 1378.41,241.042 1378.98,240.72 1379.55,238.174 1380.12,237.992 1380.69,238.879 1381.25,237.326 1381.82,234.09 1382.39,234.154 1382.96,230.998 1383.53,229.3 1384.1,228.607 1384.66,230.122 1385.23,229.627 1385.8,227.134 1386.37,226.741 1386.94,226.303 1387.51,227.851 1388.07,229.4 1388.64,226.95 1389.21,226.507 1389.78,227.286 1390.35,224.792 1390.92,226.428 1391.48,227.044 1392.05,230.619 1392.62,231.21 1393.19,232.368 1393.76,233.678 1394.33,236.879 1394.89,233.877 1395.46,235.093 1396.03,235.274 1396.6,235.438 1397.17,234.662 1397.74,236.554 1398.3,237.809 1398.87,237.657 1399.44,237.523 1400.01,238.405 1400.58,240.254 1401.15,239.937 1401.71,239.793 1402.28,238.601 1402.85,236.449 1403.42,237.465 1403.99,237.609 1404.56,240.688 1405.13,241.101 1405.69,239.758 1406.26,239.565 1406.83,239.362 1407.4,239.904 1407.97,239.545 1408.54,240.335 1409.1,241.895 1409.67,243.326 1410.24,242.554 1410.81,239.925 1411.38,238.288 1411.95,238.093 1412.51,238.831 1413.08,239.466 1413.65,238.927 1414.22,242.684 1414.79,243.229 1415.36,243.61 1415.92,243.935 1416.49,242.003 1417.06,239.325 1417.63,236.894 1418.2,237.796 1418.77,234.364 1419.33,232.229 1419.9,232.18 1420.47,232.006 1421.04,234.217 1421.61,235.075 1422.18,235.938 1422.74,236.519 1423.31,234.999 1423.88,233.746 1424.45,234.579 1425.02,234.496 1425.59,234.204 1426.15,231.983 1426.72,232.981 1427.29,231.08 1427.86,230.132 1428.43,229.263 1429,228.65 1429.56,230.193 1430.13,232.528 1430.7,231.665 1431.27,230.889 1431.84,230.225 1432.41,230.568 1432.97,230.675 1433.54,232.052 1434.11,231.135 1434.68,233.538 1435.25,234.553 1435.82,235.562 1436.38,235.419 1436.95,236.258 1437.52,236.152 1438.09,235.07 1438.66,234.914 1439.23,232.708 1439.79,230.963 1440.36,229.175 1440.93,231.536 1441.5,232.753 1442.07,233.655 1442.64,232.776 1443.2,230.903 1443.77,231.332 1444.34,229.483 1444.91,231.967 1445.48,233.166 1446.05,233.238 1446.61,233.386 1447.18,235.459 1447.75,235.272 1448.32,236.379 1448.89,233.393 1449.46,232.422 1450.02,233.697 1450.59,231.816 1451.16,232.03 1451.73,233.07 1452.3,233.117 1452.87,233.269 1453.43,233.465 1454,234.583 1454.57,234.742 1455.14,233.713 1455.71,233.755 1456.28,234.008 1456.84,235.226 1457.41,233.286 1457.98,234.213 1458.55,237.777 1459.12,238.515 1459.69,239.254 1460.25,238.124 1460.82,236.791 1461.39,235.755 1461.96,235.889 1462.53,237.92 1463.1,237.579 1463.66,237.275 1464.23,239.078 1464.8,238.961 1465.37,238.792 1465.94,241.617 1466.51,242.136 1467.07,241.635 1467.64,241.096 1468.21,240.534 1468.78,240.84 1469.35,239.11 1469.92,238.738 1470.48,239.623 1471.05,241.118 1471.62,240.507 1472.19,242.073 1472.76,239.566 1473.33,236.065 1473.89,235.913 1474.46,235.708 1475.03,236.371 1475.6,234.097 1476.17,233.205 1476.74,232.003 1477.31,231.039 1477.87,231.027 1478.44,231.189 1479.01,231.322 1479.58,233.861 1480.15,233.931 1480.72,236.08 1481.28,235.827 1481.85,236.877 1482.42,235.655 1482.99,233.421 1483.56,233.556 1484.13,233.525 1484.69,233.446 1485.26,234.54 1485.83,233.462 1486.4,232.473 1486.97,233.334 1487.54,233.314 1488.1,232.287 1488.67,234.287 1489.24,234.061 1489.81,233.05 1490.38,233.165 1490.95,234.278 1491.51,235.374 1492.08,235.294 1492.65,235.007 1493.22,233.021 1493.79,233.083 1494.36,232.074 1494.92,230.121 1495.49,230.27 1496.06,232.609 1496.63,234.626 1497.2,235.751 1497.77,235.558 1498.33,235.209 1498.9,236.335 1499.47,235.294 1500.04,237.243 1500.61,237.128 1501.18,236.956 1501.74,236.699 1502.31,234.573 1502.88,234.638 1503.45,232.584 1504.02,231.562 1504.59,229.493 1505.15,227.715 1505.72,228.41 1506.29,226.818 1506.86,226.554 1507.43,228.349 1508,228.855 1508.56,230.236 1509.13,229.624 1509.7,228.981 1510.27,231.398 1510.84,230.672 1511.41,231.893 1511.97,233.078 1512.54,233.1 1513.11,232.057 1513.68,232.194 1514.25,233.346 1514.82,236.496 1515.38,235.422 1515.95,237.315 1516.52,240.289 1517.09,241.977 1517.66,242.5 1518.23,243.013 1518.79,239.411 1519.36,240.001 1519.93,238.419 1520.5,237.147 1521.07,236.903 1521.64,237.601 1522.2,236.335 1522.77,232.371 1523.34,229.571 1523.91,229.963 1524.48,230.342 1525.05,229.667 1525.61,231.854 1526.18,231.892 1526.75,235.178 1527.32,236.063 1527.89,236.805 1528.46,234.867 1529.02,233.956 1529.59,234.86 1530.16,234.417 1530.73,234.569 1531.3,234.395 1531.87,234.537 1532.43,234.452 1533,235.547 1533.57,235.512 1534.14,237.592 1534.71,240.407 1535.28,241.999 1535.84,240.405 1536.41,239.061 1536.98,236.638 1537.55,237.305 1538.12,236.938 1538.69,235.701 1539.25,235.428 1539.82,234.377 1540.39,233.512 1540.96,232.511 1541.53,234.555 1542.1,235.195 1542.66,233.056 1543.23,231.412 1543.8,228.34 1544.37,229.631 1544.94,229.865 1545.51,228.898 1546.08,231.508 1546.64,230.504 1547.21,229.678 1547.78,230.981 1548.35,230.361 1548.92,229.725 1549.49,229.09 1550.05,230.744 1550.62,233.25 1551.19,233.358 1551.76,232.399 1552.33,231.44 1552.9,231.507 1553.46,231.732 1554.03,232.307 1554.6,232.436 1555.17,231.533 1555.74,228.605 1556.31,227.91 1556.87,227.446 1557.44,229.031 1558.01,231.486 1558.58,231.822 1559.15,231.031 1559.72,232.282 1560.28,231.687 1560.85,231.003 1561.42,233.284 1561.99,232.684 1562.56,233.987 1563.13,235.187 1563.69,235.413 1564.26,236.17 1564.83,237.2 1565.4,234.999 1565.97,236.007 1566.54,237.832 1567.1,237.501 1567.67,237.35 1568.24,237.431 1568.81,235.304 1569.38,235.251 1569.95,235.15 1570.51,231.064 1571.08,232.389 1571.65,233.374 1572.22,232.527 1572.79,235.868 1573.36,235.79 1573.92,236.869 1574.49,239.693 1575.06,240.377 1575.63,239.019 1576.2,238.514 1576.77,240.491 1577.33,239.211 1577.9,241.104 1578.47,241.503 1579.04,241.225 1579.61,240.772 1580.18,240.436 1580.74,239.915 1581.31,240.501 1581.88,240.004 1582.45,239.6 1583.02,238.066 1583.59,239.951 1584.15,239.591 1584.72,237.145 1585.29,237.156 1585.86,236.122 1586.43,235.889 1587,235.906 1587.56,235.697 1588.13,235.724 1588.7,235.435 1589.27,237.234 1589.84,236.137 1590.41,231.861 1590.97,230.848 1591.54,236.382 1592.11,236.182 1592.68,236.127 1593.25,234.976 1593.82,235.814 1594.38,236.531 1594.95,236.455 1595.52,237.464 1596.09,236.067 1596.66,232.737 1597.23,231.834 1597.79,231.868 1598.36,233.014 1598.93,235.239 1599.5,233.095 1600.07,233.21 1600.64,234.192 1601.2,233.197 1601.77,232.169 1602.34,232.332 1602.91,233.451 1603.48,233.472 1604.05,233.393 1604.61,233.629 1605.18,232.663 1605.75,232.655 1606.32,232.724 1606.89,232.945 1607.46,231.937 1608.02,231.986 1608.59,233.227 1609.16,233.134 1609.73,233.484 1610.3,235.538 1610.87,235.486 1611.43,237.42 1612,239.274 1612.57,240.006 1613.14,239.788 1613.71,240.503 1614.28,241.051 1614.84,239.557 1615.41,241.213 1615.98,240.769 1616.55,240.379 1617.12,239.563 1617.69,238.003 1618.26,238.895 1618.82,239.482 1619.39,240.093 1619.96,236.574 1620.53,237.359 1621.1,238.096 1621.67,237.788 1622.23,238.732 1622.8,236.386 1623.37,236.022 1623.94,235.654 1624.51,232.233 1625.08,231.495 1625.64,230.58 1626.21,231.822 1626.78,232.609 1627.35,231.836 1627.92,235.237 1628.49,235.061 1629.05,238.996 1629.62,241.849 1630.19,242.275 1630.76,240.674 1631.33,238.955 1631.9,237.393 1632.46,237.073 1633.03,235.927 1633.6,235.793 1634.17,232.533 1634.74,231.457 1635.31,229.412 1635.87,226.595 1636.44,225.155 1637.01,223.546 1637.58,223.172 1638.15,222.059 1638.72,222.707 1639.28,221.117 1639.85,219.895 1640.42,220.95 1640.99,221.04 1641.56,220.89 1642.13,222.761 1642.69,223.717 1643.26,223.504 1643.83,224.348 1644.4,224.297 1644.97,229.275 1645.54,228.732 1646.1,228.228 1646.67,226.712 1647.24,226.388 1647.81,226.964 1648.38,226.749 1648.95,228.247 1649.51,230.906 1650.08,230.299 1650.65,232.806 1651.22,233.962 1651.79,237.325 1652.36,240.307 1652.92,237.867 1653.49,237.666 1654.06,237.545 1654.63,237.181 1655.2,234.17 1655.77,235.38 1656.33,232.551 1656.9,235.024 1657.47,234.111 1658.04,236.207 1658.61,236.172 1659.18,238.22 1659.74,238.329 1660.31,237.257 1660.88,238.185 1661.45,240.301 1662.02,241.052 1662.59,240.618 1663.15,240.281 1663.72,238.844 1664.29,240.738 1664.86,242.295 1665.43,242.848 1666,244.407 1666.56,242.618 1667.13,243.187 1667.7,244.612 1668.27,241.708 1668.84,241.409 1669.41,239.911 1669.97,241.631 1670.54,240.12 1671.11,240.57 1671.68,242.32 1672.25,240.661 1672.82,240.113 1673.38,238.622 1673.95,237.085 1674.52,233.759 1675.09,231.699 1675.66,232.764 1676.23,231.75 1676.79,230.976 1677.36,230.196 1677.93,231.456 1678.5,230.691 1679.07,230.961 1679.64,231.144 1680.2,231.341 1680.77,231.413 1681.34,230.582 1681.91,230.744 1682.48,232.934 1683.05,230.981 1683.61,230.032 1684.18,230.31 1684.75,231.564 1685.32,231.858 1685.89,233.015 1686.46,233.13 1687.02,232.104 1687.59,232.396 1688.16,232.623 1688.73,233.762 1689.3,233.856 1689.87,234.725 1690.44,234.784 1691,235.738 1691.57,234.643 1692.14,235.93 1692.71,235.856 1693.28,237.908 1693.85,236.559 1694.41,235.484 1694.98,236.543 1695.55,235.244 1696.12,235.028 1696.69,235.089 1697.26,234.861 1697.82,233.858 1698.39,237.049 1698.96,237.861 1699.53,238.761 1700.1,238.346 1700.67,238.032 1701.23,236.772 1701.8,235.585 1702.37,235.509 1702.94,234.536 1703.51,236.226 1704.08,235.93 1704.64,234.566 1705.21,234.663 1705.78,235.459 1706.35,234.415 1706.92,237.31 1707.49,236.001 1708.05,232.694 1708.62,231.926 1709.19,232.074 1709.76,231.111 1710.33,231.475 1710.9,234.412 1711.46,235.381 1712.03,235.253 1712.6,231.135 1713.17,233.456 1713.74,235.652 1714.31,233.529 1714.87,234.623 1715.44,235.266 1716.01,235.482 1716.58,234.222 1717.15,236.351 1717.72,238.241 1718.28,238.129 1718.85,235.955 1719.42,233.98 1719.99,232.137 1720.56,232.393 1721.13,231.62 1721.69,231.769 1722.26,233.06 1722.83,232.139 1723.4,232.272 1723.97,230.481 1724.54,230.87 1725.1,232.072 1725.67,232.454 1726.24,231.729 1726.81,234.083 1727.38,233.983 1727.95,235.143 1728.51,235.23 1729.08,236.345 1729.65,236.424 1730.22,236.419 1730.79,234.18 1731.36,234.06 1731.92,233.082 1732.49,233.397 1733.06,232.467 1733.63,232.748 1734.2,233.59 1734.77,235.636 1735.33,235.54 1735.9,233.659 1736.47,235.654 1737.04,237.449 1737.61,236.225 1738.18,237.274 1738.74,235.146 1739.31,234.243 1739.88,236.448 1740.45,235.369 1741.02,232.237 1741.59,232.522 1742.15,234.8 1742.72,234.739 1743.29,235.862 1743.86,234.655 1744.43,233.28 1745,236.466 1745.56,236.202 1746.13,237.213 1746.7,237.22 1747.27,237.926 1747.84,239.83 1748.41,238.569 1748.97,237.009 1749.54,237.107 1750.11,237.167 1750.68,236.979 1751.25,233.61 1751.82,232.566 1752.38,233.67 1752.95,233.694 1753.52,232.776 1754.09,231.982 1754.66,231.192 1755.23,231.35 1755.79,233.541 1756.36,233.686 1756.93,232.854 1757.5,232.951 1758.07,233.165 1758.64,234.361 1759.21,234.214 1759.77,233.242 1760.34,233.327 1760.91,232.603 1761.48,233.8 1762.05,233.585 1762.62,235.636 1763.18,235.757 1763.75,235.792 1764.32,233.327 1764.89,233.295 1765.46,230.443 1766.03,233.863 1766.59,234.01 1767.16,234.236 1767.73,236.31 1768.3,239.135 1768.87,240.851 1769.44,240.253 1770,240.805 1770.57,242.462 1771.14,241.798 1771.71,241.402 1772.28,241.853 1772.85,240.279 1773.41,240.832 1773.98,239.382 1774.55,239.964 1775.12,239.541 1775.69,239.205 1776.26,236.948 1776.82,237.709 1777.39,235.24 1777.96,236.17 1778.53,234.824 1779.1,235.525 1779.67,236.447 1780.23,235.169 1780.8,233.911 1781.37,231.597 1781.94,230.811 1782.51,229.067 1783.08,229.192 1783.64,230.624 1784.21,230.928 1784.78,233.989 1785.35,233.674 1785.92,234.522 1786.49,237.63 1787.05,234.425 1787.62,234.12 1788.19,234.988 1788.76,232.715 1789.33,233.157 1789.9,232.108 1790.46,231.987 1791.03,233.049 1791.6,233.193 1792.17,234.372 1792.74,232.17 1793.31,231.336 1793.87,231.259 1794.44,230.289 1795.01,231.642 1795.58,233.078 1796.15,233.03 1796.72,230.077 1797.28,230.223 1797.85,231.588 1798.42,230.856 1798.99,230.078 1799.56,229.303 1800.13,230.732 1800.69,234.129 1801.26,235.332 1801.83,235.376 1802.4,235.348 1802.97,234.089 1803.54,233.17 1804.1,234.255 1804.67,233.362 1805.24,231.403 1805.81,232.599 1806.38,231.671 1806.95,231.936 1807.51,232.023 1808.08,231.151 1808.65,232.397 1809.22,235.633 1809.79,235.545 1810.36,237.684 1810.92,237.429 1811.49,237.109 1812.06,238.067 1812.63,239.91 1813.2,239.486 1813.77,240.067 1814.33,239.658 1814.9,239.309 1815.47,234.72 1816.04,234.32 1816.61,236.344 1817.18,234.954 1817.74,236.744 1818.31,235.665 1818.88,236.461 1819.45,236.323 1820.02,236.252 1820.59,237.282 1821.15,236.909 1821.72,237.587 1822.29,237.458 1822.86,236.354 1823.43,237.354 1824,237.344 1824.56,238.133 1825.13,238.893 1825.7,235.512 1826.27,236.253 1826.84,236.187 1827.41,233.881 1827.97,234.84 1828.54,234.774 1829.11,232.434 1829.68,233.601 1830.25,234.568 1830.82,235.904 1831.39,235.51 1831.95,236.002 1832.52,236.806 1833.09,237.55 1833.66,236.209 1834.23,234.019 1834.8,233.868 1835.36,232.807 1835.93,232.895 1836.5,234.754 1837.07,234.598 1837.64,233.407 1838.21,233.654 1838.77,232.325 1839.34,233.417 1839.91,233.456 1840.48,234.584 1841.05,234.54 1841.62,235.456 1842.18,233.195 1842.75,232.238 1843.32,230.216 1843.89,231.469 1844.46,232.761 1845.03,229.841 1845.59,232.294 1846.16,232.318 1846.73,230.479 1847.3,231.692 1847.87,230.826 1848.44,232.161 1849,231.308 1849.57,231.608 1850.14,232.466 1850.71,233.462 1851.28,234.715 1851.85,234.804 1852.41,231.751 1852.98,233.025 1853.55,233.043 1854.12,231.986 1854.69,231.071 1855.26,233.449 1855.82,234.574 1856.39,234.3 1856.96,234.235 1857.53,234.318 1858.1,233.112 1858.67,233.325 1859.23,232.409 1859.8,233.431 1860.37,233.593 1860.94,232.547 1861.51,232.794 1862.08,233.983 1862.64,232.084 1863.21,232.314 1863.78,233.287 1864.35,234.501 1864.92,234.367 1865.49,233.367 1866.05,233.686 1866.62,233.805 1867.19,232.133 1867.76,231.239 1868.33,229.407 1868.9,228.416 1869.46,227.972 1870.03,231.637 1870.6,231.911 1871.17,231.97 1871.74,234.439 1872.31,236.72 1872.87,235.527 1873.44,234.431 1874.01,235.553 1874.58,235.608 1875.15,234.449 1875.72,234.54 1876.28,231.531 1876.85,229.791 1877.42,231.264 1877.99,232.522 1878.56,233.897 1879.13,233.977 1879.69,234.143 1880.26,234.256 1880.83,234.298 1881.4,238.407 1881.97,239.396 1882.54,237.117 1883.1,235.904 1883.67,236.059 1884.24,234.895 1884.81,234.914 1885.38,236.891 1885.95,236.625 1886.51,236.345 1887.08,236.261 1887.65,235.139 1888.22,234.168 1888.79,234.311 1889.36,233.228 1889.92,233.235 1890.49,231.258 1891.06,229.417 1891.63,229.875 1892.2,230.266 1892.77,228.596 1893.33,229.288 1893.9,231.9 1894.47,233.127 1895.04,233.434 1895.61,231.591 1896.18,232.733 1896.74,233.111 1897.31,233.215 1897.88,231.697 1898.45,231.838 1899.02,235.332 1899.59,235.32 1900.16,235.384 1900.72,232.464 1901.29,231.582 1901.86,232.143 1902.43,233.405 1903,231.662 1903.57,233.025 1904.13,234.44 1904.7,233.464 1905.27,233.717 1905.84,234.978 1906.41,237.297 1906.98,237.406 1907.54,236.247 1908.11,236.211 1908.68,236.498 1909.25,236.491 1909.82,236.315 1910.39,238.251 1910.95,236.127 1911.52,238.276 1912.09,237.175 1912.66,239.196 1913.23,239.967 1913.8,239.658 1914.36,237.21 1914.93,236.029 1915.5,237.169 1916.07,235.075 1916.64,235.068 1917.21,234.924 1917.77,234.966 1918.34,234.071 1918.91,236.117 1919.48,235.092 1920.05,234.114 1920.62,235.247 1921.18,234.066 1921.75,235.026 1922.32,237.026 1922.89,237.833 1923.46,236.472 1924.03,235.071 1924.59,234.086 1925.16,233.957 1925.73,232.931 1926.3,234.069 1926.87,234.14 1927.44,235.353 1928,236.35 1928.57,235.39 1929.14,235.12 1929.71,234.252 1930.28,231.353 1930.85,230.55 1931.41,228.902 1931.98,231.35 1932.55,231.782 1933.12,232.2 1933.69,234.699 1934.26,235.847 1934.82,235.85 1935.39,237.978 1935.96,238.903 1936.53,241.475 1937.1,244.273 1937.67,244.727 1938.23,244.154 1938.8,243.66 1939.37,243.207 1939.94,244.698 1940.51,244.063 1941.08,243.382 1941.64,242.661 1942.21,242.081 1942.78,242.559 1943.35,242.079 1943.92,242.485 1944.49,241.77 1945.05,242.408 1945.62,241.564 1946.19,240.916 1946.76,240.379 1947.33,239.06 1947.9,237.678 1948.46,235.41 1949.03,233.221 1949.6,234.363 1950.17,235.125 1950.74,234.005 1951.31,232.978 1951.87,231.955 1952.44,232.103 1953.01,231.139 1953.58,231.238 1954.15,229.511 1954.72,228.556 1955.28,228.982 1955.85,230.147 1956.42,232.399 1956.99,232.476 1957.56,232.622 1958.13,233.42 1958.69,234.561 1959.26,233.688 1959.83,233.642 1960.4,233.463 1960.97,234.42 1961.54,234.387 1962.1,232.374 1962.67,232.267 1963.24,233.164 1963.81,233.074 1964.38,234.109 1964.95,232.055 1965.51,232.132 1966.08,230.215 1966.65,229.504 1967.22,229.781 1967.79,232.162 1968.36,231.105 1968.92,233.088 1969.49,232.263 1970.06,232.05 1970.63,232.328 1971.2,232.571 1971.77,231.955 1972.34,232.061 1972.9,231.097 1973.47,232.432 1974.04,231.515 1974.61,232.677 1975.18,234.066 1975.75,233.103 1976.31,231.936 1976.88,230.931 1977.45,230.033 1978.02,231.447 1978.59,234.901 1979.16,232.988 1979.72,233.975 1980.29,232.152 1980.86,231.522 1981.43,231.986 1982,234.38 1982.57,233.289 1983.13,234.555 1983.7,235.547 1984.27,234.472 1984.84,236.49 1985.41,236.27 1985.98,234.32 1986.54,234.477 1987.11,234.615 1987.68,235.683 1988.25,237.508 1988.82,238.273 1989.39,237.231 1989.95,237.019 1990.52,234.81 1991.09,235.628 1991.66,235.674 1992.23,233.69 1992.8,232.827 1993.36,232.778 1993.93,233.038 1994.5,233.146 1995.07,233.378 1995.64,231.47 1996.21,229.954 1996.77,230.315 1997.34,231.71 1997.91,233.152 1998.48,234.152 1999.05,235.218 1999.62,236.465 2000.18,236.226 2000.75,237.234 2001.32,236.311 2001.89,235.324 2002.46,234.387 2003.03,234.475 2003.59,234.932 2004.16,233.992 2004.73,232.215 2005.3,232.273 2005.87,230.568 2006.44,231.87 2007,233.166 2007.57,232.13 2008.14,232.391 2008.71,233.444 2009.28,235.518 2009.85,237.479 2010.41,239.422 2010.98,240.26 2011.55,239.753 2012.12,237.268 2012.69,237.008 2013.26,236.78 2013.82,236.534 2014.39,237.449 2014.96,239.052 2015.53,238.862 2016.1,238.405 2016.67,237.078 2017.23,234.77 2017.8,237.819 2018.37,237.651 2018.94,238.414 2019.51,236.946 2020.08,237.795 2020.64,235.192 2021.21,236.237 2021.78,236.003 2022.35,234.791 2022.92,231.48 2023.49,231.752 2024.05,231.827 2024.62,232.856 2025.19,234.193 2025.76,233.244 2026.33,234.408 2026.9,234.414 2027.46,234.457 2028.03,233.321 2028.6,234.381 2029.17,233.464 2029.74,231.58 2030.31,229.667 2030.87,230.07 2031.44,230.311 2032.01,229.687 2032.58,232.253 2033.15,231.418 2033.72,233.836 2034.28,231.03 2034.85,231.497 2035.42,230.931 2035.99,232.008 2036.56,231.293 2037.13,230.444 2037.69,228.695 2038.26,229.233 2038.83,231.726 2039.4,232.005 2039.97,233.339 2040.54,235.681 2041.11,234.594 2041.67,236.874 2042.24,237.838 2042.81,234.757 2043.38,235.82 2043.95,234.859 2044.52,233.653 2045.08,234.47 2045.65,233.491 2046.22,233.34 2046.79,233.327 2047.36,233.688 2047.93,233.051 2048.49,233.455 2049.06,234.536 2049.63,236.49 2050.2,236.507 2050.77,235.396 2051.34,233.348 2051.9,235.494 2052.47,236.537 2053.04,234.316 2053.61,235.593 2054.18,234.57 2054.75,237.693 2055.31,239.756 2055.88,237.231 2056.45,236.997 2057.02,237.762 2057.59,237.491 2058.16,240.319 2058.72,239.034 2059.29,240.68 2059.86,239.166 2060.43,238.827 2061,238.554 2061.57,238.232 2062.13,237.879 2062.7,237.685 2063.27,235.37 2063.84,235.211 2064.41,235.388 2064.98,234.1 2065.54,234.278 2066.11,235.326 2066.68,234.149 2067.25,232.004 2067.82,232.212 2068.39,233.325 2068.95,231.558 2069.52,231.881 2070.09,231.132 2070.66,231.112 2071.23,234.233 2071.8,231.217 2072.36,231.579 2072.93,232.63 2073.5,232.909 2074.07,230.919 2074.64,232.334 2075.21,231.74 2075.77,231.821 2076.34,234.291 2076.91,235.302 2077.48,237.276 2078.05,237.217 2078.62,236.152 2079.18,235.066 2079.75,235.916 2080.32,236.572 2080.89,237.383 2081.46,239.098 2082.03,238.867 2082.59,240.539 2083.16,239.199 2083.73,238.933 2084.3,238.47 2084.87,239.143 2085.44,239.02 2086,238.872 2086.57,238.504 2087.14,238.185 2087.71,235.813 2088.28,234.574 2088.85,234.566 2089.41,231.688 2089.98,231.697 2090.55,229.569 2091.12,225.902 2091.69,224.564 2092.26,228.326 2092.82,229.923 2093.39,229.413 2093.96,231.659 2094.53,231.953 2095.1,233.05 2095.67,237.025 2096.23,236.946 2096.8,236.752 2097.37,237.4 2097.94,236.268 2098.51,234.956 2099.08,233.723 2099.64,232.88 2100.21,236.206 2100.78,234.063 2101.35,234.281 2101.92,234.539 2102.49,234.732 2103.05,234.606 2103.62,236.679 2104.19,236.487 2104.76,237.627 2105.33,238.381 2105.9,236.969 2106.46,236.835 2107.03,236.612 2107.6,235.404 2108.17,234.231 2108.74,234.214 2109.31,233.208 2109.87,233.221 2110.44,233.353 2111.01,231.416 2111.58,230.658 2112.15,231.987 2112.72,233.312 2113.29,233.475 2113.85,232.227 2114.42,232.222 2114.99,232.623 2115.56,234.824 2116.13,234.705 2116.7,239.559 2117.26,239.2 2117.83,237.871 2118.4,236.735 2118.97,235.412 2119.54,234.28 2120.11,235.337 2120.67,235.401 2121.24,232.246 2121.81,231.286 2122.38,232.669 2122.95,233.689 2123.52,234.034 2124.08,233.161 2124.65,235.117 2125.22,232.913 2125.79,232.916 2126.36,231.907 2126.93,231.92 2127.49,230.946 2128.06,231.2 2128.63,229.425 2129.2,228.014 2129.77,229.431 2130.34,232.972 2130.9,233.193 2131.47,234.499 2132.04,238.583 2132.61,238.292 2133.18,239.129 2133.75,237.805 2134.31,236.895 2134.88,239.926 2135.45,238.452 2136.02,238.231 2136.59,238.018 2137.16,238.864 2137.72,238.472 2138.29,236.091 2138.86,235.736 2139.43,232.589 2140,230.613 2140.57,231.902 2141.13,230.938 2141.7,233.045 2142.27,232.222 2142.84,233.483 2143.41,233.383 2143.98,233.585 2144.54,232.651 2145.11,230.763 2145.68,233.25 2146.25,233.237 2146.82,231.205 2147.39,231.545 2147.95,232.889 2148.52,232.967 2149.09,234.106 2149.66,234.344 2150.23,236.406 2150.8,234.29 2151.36,234.324 2151.93,234.337 2152.5,234.53 2153.07,235.471 2153.64,235.323 2154.21,234.365 2154.77,232.382 2155.34,232.632 2155.91,232.69 2156.48,231.898 2157.05,232.062 2157.62,232.229 2158.18,231.492 2158.75,230.955 2159.32,231.226 2159.89,231.748 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.021\n  with uncertainty of ± 0.0019439940044207826\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01685 ± (0.00236359, 0.00247435) (MC)\n  95% confidence interval: [-4.02157, -4.01221]) (MC)\n  linear error propagation: -4.01695 ± 0.0024294\n  |δ_y| = |0.001161| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016846298308983, val_l = 0.004721743090983388, val_u = 0.004639871560496722)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip970\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip971\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip972\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.31 2211.02,1150.31 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,979.785 2211.02,979.785 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,809.26 2211.02,809.26 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,638.734 2211.02,638.734 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,468.209 2211.02,468.209 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,297.683 2211.02,297.683 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.31 365.751,1150.31 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,979.785 365.751,979.785 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,809.26 365.751,809.26 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,638.734 365.751,638.734 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,468.209 365.751,468.209 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,297.683 365.751,297.683 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M298.909 1136.11 Q295.298 1136.11 293.469 1139.67 Q291.664 1143.22 291.664 1150.35 Q291.664 1157.45 293.469 1161.02 Q295.298 1164.56 298.909 1164.56 Q302.543 1164.56 304.349 1161.02 Q306.177 1157.45 306.177 1150.35 Q306.177 1143.22 304.349 1139.67 Q302.543 1136.11 298.909 1136.11 M298.909 1132.41 Q304.719 1132.41 307.775 1137.01 Q310.853 1141.6 310.853 1150.35 Q310.853 1159.07 307.775 1163.68 Q304.719 1168.26 298.909 1168.26 Q293.099 1168.26 290.02 1163.68 Q286.964 1159.07 286.964 1150.35 Q286.964 1141.6 290.02 1137.01 Q293.099 1132.41 298.909 1132.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M259.557 993.13 L267.196 993.13 L267.196 966.765 L258.886 968.431 L258.886 964.172 L267.15 962.505 L271.826 962.505 L271.826 993.13 L279.465 993.13 L279.465 997.065 L259.557 997.065 L259.557 993.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 965.584 Q295.298 965.584 293.469 969.149 Q291.664 972.691 291.664 979.82 Q291.664 986.927 293.469 990.491 Q295.298 994.033 298.909 994.033 Q302.543 994.033 304.349 990.491 Q306.177 986.927 306.177 979.82 Q306.177 972.691 304.349 969.149 Q302.543 965.584 298.909 965.584 M298.909 961.88 Q304.719 961.88 307.775 966.487 Q310.853 971.07 310.853 979.82 Q310.853 988.547 307.775 993.153 Q304.719 997.737 298.909 997.737 Q293.099 997.737 290.02 993.153 Q286.964 988.547 286.964 979.82 Q286.964 971.07 290.02 966.487 Q293.099 961.88 298.909 961.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M262.775 822.605 L279.094 822.605 L279.094 826.54 L257.15 826.54 L257.15 822.605 Q259.812 819.85 264.395 815.221 Q269.002 810.568 270.182 809.225 Q272.428 806.702 273.307 804.966 Q274.21 803.207 274.21 801.517 Q274.21 798.762 272.266 797.026 Q270.344 795.29 267.242 795.29 Q265.043 795.29 262.59 796.054 Q260.159 796.818 257.381 798.369 L257.381 793.647 Q260.205 792.512 262.659 791.934 Q265.113 791.355 267.15 791.355 Q272.52 791.355 275.715 794.04 Q278.909 796.725 278.909 801.216 Q278.909 803.346 278.099 805.267 Q277.312 807.165 275.205 809.758 Q274.627 810.429 271.525 813.647 Q268.423 816.841 262.775 822.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 795.059 Q295.298 795.059 293.469 798.623 Q291.664 802.165 291.664 809.295 Q291.664 816.401 293.469 819.966 Q295.298 823.508 298.909 823.508 Q302.543 823.508 304.349 819.966 Q306.177 816.401 306.177 809.295 Q306.177 802.165 304.349 798.623 Q302.543 795.059 298.909 795.059 M298.909 791.355 Q304.719 791.355 307.775 795.961 Q310.853 800.545 310.853 809.295 Q310.853 818.022 307.775 822.628 Q304.719 827.211 298.909 827.211 Q293.099 827.211 290.02 822.628 Q286.964 818.022 286.964 809.295 Q286.964 800.545 290.02 795.961 Q293.099 791.355 298.909 791.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M272.914 637.38 Q276.27 638.098 278.145 640.366 Q280.043 642.635 280.043 645.968 Q280.043 651.084 276.525 653.885 Q273.006 656.686 266.525 656.686 Q264.349 656.686 262.034 656.246 Q259.742 655.829 257.289 654.973 L257.289 650.459 Q259.233 651.593 261.548 652.172 Q263.863 652.751 266.386 652.751 Q270.784 652.751 273.076 651.015 Q275.39 649.278 275.39 645.968 Q275.39 642.913 273.238 641.2 Q271.108 639.464 267.289 639.464 L263.261 639.464 L263.261 635.621 L267.474 635.621 Q270.923 635.621 272.752 634.255 Q274.58 632.866 274.58 630.274 Q274.58 627.612 272.682 626.2 Q270.807 624.765 267.289 624.765 Q265.367 624.765 263.168 625.181 Q260.969 625.598 258.33 626.478 L258.33 622.311 Q260.992 621.57 263.307 621.2 Q265.645 620.829 267.705 620.829 Q273.029 620.829 276.131 623.26 Q279.233 625.667 279.233 629.788 Q279.233 632.658 277.59 634.649 Q275.946 636.616 272.914 637.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 624.533 Q295.298 624.533 293.469 628.098 Q291.664 631.64 291.664 638.769 Q291.664 645.876 293.469 649.44 Q295.298 652.982 298.909 652.982 Q302.543 652.982 304.349 649.44 Q306.177 645.876 306.177 638.769 Q306.177 631.64 304.349 628.098 Q302.543 624.533 298.909 624.533 M298.909 620.829 Q304.719 620.829 307.775 625.436 Q310.853 630.019 310.853 638.769 Q310.853 647.496 307.775 652.102 Q304.719 656.686 298.909 656.686 Q293.099 656.686 290.02 652.102 Q286.964 647.496 286.964 638.769 Q286.964 630.019 290.02 625.436 Q293.099 620.829 298.909 620.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M271.594 455.003 L259.789 473.452 L271.594 473.452 L271.594 455.003 M270.367 450.929 L276.247 450.929 L276.247 473.452 L281.177 473.452 L281.177 477.341 L276.247 477.341 L276.247 485.489 L271.594 485.489 L271.594 477.341 L255.992 477.341 L255.992 472.827 L270.367 450.929 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 454.008 Q295.298 454.008 293.469 457.572 Q291.664 461.114 291.664 468.244 Q291.664 475.35 293.469 478.915 Q295.298 482.457 298.909 482.457 Q302.543 482.457 304.349 478.915 Q306.177 475.35 306.177 468.244 Q306.177 461.114 304.349 457.572 Q302.543 454.008 298.909 454.008 M298.909 450.304 Q304.719 450.304 307.775 454.91 Q310.853 459.494 310.853 468.244 Q310.853 476.971 307.775 481.577 Q304.719 486.16 298.909 486.16 Q293.099 486.16 290.02 481.577 Q286.964 476.971 286.964 468.244 Q286.964 459.494 290.02 454.91 Q293.099 450.304 298.909 450.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M258.793 280.403 L277.15 280.403 L277.15 284.339 L263.076 284.339 L263.076 292.811 Q264.094 292.464 265.113 292.302 Q266.131 292.116 267.15 292.116 Q272.937 292.116 276.316 295.288 Q279.696 298.459 279.696 303.876 Q279.696 309.454 276.224 312.556 Q272.752 315.635 266.432 315.635 Q264.256 315.635 261.988 315.264 Q259.742 314.894 257.335 314.153 L257.335 309.454 Q259.418 310.589 261.641 311.144 Q263.863 311.7 266.34 311.7 Q270.344 311.7 272.682 309.593 Q275.02 307.487 275.02 303.876 Q275.02 300.264 272.682 298.158 Q270.344 296.052 266.34 296.052 Q264.465 296.052 262.59 296.468 Q260.738 296.885 258.793 297.765 L258.793 280.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 283.482 Q295.298 283.482 293.469 287.047 Q291.664 290.589 291.664 297.718 Q291.664 304.825 293.469 308.389 Q295.298 311.931 298.909 311.931 Q302.543 311.931 304.349 308.389 Q306.177 304.825 306.177 297.718 Q306.177 290.589 304.349 287.047 Q302.543 283.482 298.909 283.482 M298.909 279.778 Q304.719 279.778 307.775 284.385 Q310.853 288.968 310.853 297.718 Q310.853 306.445 307.775 311.051 Q304.719 315.635 298.909 315.635 Q293.099 315.635 290.02 311.051 Q286.964 306.445 286.964 297.718 Q286.964 288.968 290.02 284.385 Q293.099 279.778 298.909 279.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip972)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1024.66 400.199,1040.93 400.786,928.345 401.372,825.043 401.958,728.296 402.545,752.971 403.131,666.721 403.718,591.805 404.304,521.361 404.891,457.37 405.477,571.873 406.063,508.903 406.65,453.24 407.236,401.591 407.823,356.23 408.409,314.498 408.995,340.201 409.582,359.035 410.168,322.625 410.755,289.576 411.341,260.404 411.927,235.559 412.514,255.759 413.1,236.28 413.687,219.895 414.273,241.359 414.86,292.234 415.446,278.218 416.032,321.968 416.619,334.426 417.205,345.764 417.792,333.408 418.378,324.869 418.964,378.715 419.551,408.627 420.137,402.29 420.724,414.728 421.31,426.765 421.896,424.883 422.483,438.358 423.069,438.015 423.656,438.182 424.242,451.815 424.829,464.64 425.415,468.209 426.001,483.039 426.588,517.404 427.174,523.177 427.761,528.328 428.347,551.204 428.933,557.984 429.52,587.126 430.106,599.968 430.693,619.517 431.279,625.048 431.865,631.482 432.452,638.496 433.038,657.886 433.625,676.211 434.211,688.395 434.798,694.296 435.384,710.78 435.97,717.44 436.557,729.527 437.143,736.169 437.73,743.413 438.316,755.461 438.902,767.378 439.489,774.663 440.075,785.872 440.662,805.013 441.248,811.8 441.835,829.783 442.421,839.954 443.007,857.343 443.594,873.281 444.18,879.083 444.767,891.088 445.353,896.245 445.939,908.068 446.526,922.674 447.112,933.901 447.699,941.291 448.285,946.396 448.871,959.836 449.458,964.709 450.044,972.138 450.631,982.193 451.217,989.481 451.804,996.738 452.39,1011.42 452.976,1015.69 453.563,1022.3 454.149,1031.24 454.736,1037.37 455.322,1043.92 455.908,1048.14 456.495,1053.87 457.081,1057.43 457.668,1067.55 458.254,1072.94 458.84,1076.06 459.427,1083.59 460.013,1088.71 460.6,1091.83 461.186,1102.86 461.773,1109.42 462.359,1113.94 462.945,1122.54 463.532,1124.3 464.118,1128.47 464.705,1132.44 465.291,1136.46 465.877,1142.1 466.464,1149.75 467.05,1153.15 467.637,1154.69 468.223,1160.12 468.809,1168.75 469.396,1173.36 469.982,1177.46 470.569,1178.25 471.155,1177.3 471.742,1181.78 472.328,1186.15 472.914,1188.5 473.501,1190.67 474.087,1196.27 474.674,1196.72 475.26,1197.43 475.846,1201.26 476.433,1203.06 477.019,1208.29 477.606,1205.16 478.192,1206.91 478.778,1206.91 479.365,1208.93 479.951,1207.42 480.538,1217.54 481.124,1217.6 481.711,1218.86 482.297,1221.79 482.883,1226.16 483.47,1230.32 484.056,1229.88 484.643,1229.75 485.229,1228.11 485.815,1230.7 486.402,1230.5 486.988,1230.35 487.575,1233.08 488.161,1232.5 488.748,1233.53 489.334,1235.9 489.92,1235.39 490.507,1233.43 491.093,1237.5 491.68,1236.99 492.266,1240.9 492.852,1244.87 493.439,1242.42 494.025,1241.64 494.612,1242.4 495.198,1241.9 495.784,1244.37 496.371,1243.68 496.957,1243.31 497.544,1242.77 498.13,1243.8 498.717,1243.02 499.303,1242.57 499.889,1243.35 500.476,1242.83 501.062,1242.43 501.649,1238.9 502.235,1240.31 502.821,1242.8 503.408,1243.98 503.994,1246.24 504.581,1247.29 505.167,1243.9 505.753,1244.7 506.34,1246.01 506.926,1242.58 507.513,1242.12 508.099,1240.17 508.686,1239.89 509.272,1237.94 509.858,1242.14 510.445,1241.83 511.031,1243.08 511.618,1242.61 512.204,1245.09 512.79,1241.69 513.377,1242.59 513.963,1245.01 514.55,1241.66 515.136,1244.23 515.722,1245.25 516.309,1246.64 516.895,1248.73 517.482,1244.07 518.068,1243.65 518.655,1241.75 519.241,1241.2 519.827,1239.23 520.414,1239.05 521,1238.01 521.587,1236.52 522.173,1236.39 522.759,1236.1 523.346,1234.78 523.932,1236.37 524.519,1236.4 525.105,1236.27 525.691,1237.81 526.278,1239.24 526.864,1239.04 527.451,1239.01 528.037,1243.19 528.624,1241.49 529.21,1238.04 529.796,1239.23 530.383,1240.72 530.969,1240.49 531.556,1240.58 532.142,1240.76 532.728,1244.88 533.315,1243.09 533.901,1242.73 534.488,1242.68 535.074,1245.55 535.661,1246.46 536.247,1247.41 536.833,1246.8 537.42,1244.75 538.006,1244.54 538.593,1243.81 539.179,1241.83 539.765,1241.64 540.352,1241.4 540.938,1241.42 541.525,1241.11 542.111,1240.92 542.697,1240.52 543.284,1237.52 543.87,1237.49 544.457,1237.21 545.043,1237.26 545.63,1237.25 546.216,1239.83 546.802,1236.65 547.389,1236.61 547.975,1236.48 548.562,1238.07 549.148,1237.87 549.734,1237.72 550.321,1239.02 550.907,1236.24 551.494,1237.63 552.08,1237.33 552.666,1234.22 553.253,1235.8 553.839,1235.66 554.426,1234.01 555.012,1235.4 555.599,1237.91 556.185,1239.48 556.771,1240.61 557.358,1241.64 557.944,1241.29 558.531,1240.88 559.117,1240.4 559.703,1237.33 560.29,1237.2 560.876,1242.43 561.463,1243.5 562.049,1243.37 562.635,1243.01 563.222,1243.72 563.808,1240.4 564.395,1240.3 564.981,1238.64 565.568,1238.47 566.154,1238.4 566.74,1239.51 567.327,1237.66 567.913,1239.13 568.5,1239.13 569.086,1241.6 569.672,1240.82 570.259,1239.32 570.845,1240.49 571.432,1241.48 572.018,1241.03 572.605,1239.15 573.191,1239.01 573.777,1240.08 574.364,1239.68 574.95,1240.71 575.537,1243.05 576.123,1243.71 576.709,1243.21 577.296,1242.86 577.882,1243.95 578.469,1243.43 579.055,1244 579.641,1246.28 580.228,1248.47 580.814,1248.94 581.401,1246.77 581.987,1248.89 582.574,1246.93 583.16,1246.28 583.746,1245.67 584.333,1246.12 584.919,1246.75 585.506,1248.78 586.092,1250.53 586.678,1248.48 587.265,1247.55 587.851,1246.53 588.438,1244.3 589.024,1244.9 589.61,1245.66 590.197,1247.73 590.783,1246.84 591.37,1247.39 591.956,1245.29 592.543,1244.68 593.129,1243.72 593.715,1243.18 594.302,1243.8 594.888,1241.6 595.475,1242.32 596.061,1241.44 596.647,1241.96 597.234,1241.12 597.82,1239.12 598.407,1240.04 598.993,1242.21 599.579,1241.8 600.166,1241.38 600.752,1239.26 601.339,1237.59 601.925,1237.25 602.512,1235.54 603.098,1236.83 603.684,1232.03 604.271,1230.6 604.857,1229.28 605.444,1230.96 606.03,1232.03 606.616,1233.28 607.203,1237.24 607.789,1237.13 608.376,1238.05 608.962,1234.7 609.548,1234.23 610.135,1232.48 610.721,1230.96 611.308,1233.51 611.894,1235.05 612.481,1234.93 613.067,1233.28 613.653,1234.33 614.24,1232.63 614.826,1235.05 615.413,1234.57 615.999,1233.93 616.585,1233.63 617.172,1233.61 617.758,1236.28 618.345,1234.78 618.931,1237.22 619.518,1233.79 620.104,1234.86 620.69,1237.14 621.277,1237.92 621.863,1237.29 622.45,1238.08 623.036,1241.54 623.622,1241.06 624.209,1244.54 624.795,1235.18 625.382,1236.34 625.968,1233.17 626.554,1233.97 627.141,1232.01 627.727,1228.94 628.314,1230.16 628.9,1232.95 629.487,1232.75 630.073,1232.35 630.659,1236.26 631.246,1237.3 631.832,1236.73 632.419,1234.6 633.005,1235.61 633.591,1234.93 634.178,1233.38 634.764,1231.48 635.351,1231.22 635.937,1233.81 636.523,1233.5 637.11,1236.18 637.696,1235.35 638.283,1233.69 638.869,1233.35 639.456,1237.18 640.042,1237.97 640.628,1238.59 641.215,1239.08 641.801,1238.48 642.388,1240.51 642.974,1238.62 643.56,1236.57 644.147,1238.82 644.733,1239.49 645.32,1241.68 645.906,1239.34 646.492,1236.06 647.079,1234.41 647.665,1236.54 648.252,1234.79 648.838,1234.46 649.425,1233.87 650.011,1233.37 650.597,1233.17 651.184,1232.75 651.77,1230.72 652.357,1231.7 652.943,1233.16 653.529,1231.26 654.116,1230.84 654.702,1230.62 655.289,1230.41 655.875,1230.44 656.462,1230.11 657.048,1230.17 657.634,1230.02 658.221,1231.34 658.807,1229.7 659.394,1230.8 659.98,1228.9 660.566,1230.27 661.153,1227.22 661.739,1226.88 662.326,1226.66 662.912,1226.89 663.498,1226.7 664.085,1227.83 664.671,1227.57 665.258,1229.01 665.844,1227.47 666.431,1230.01 667.017,1230.08 667.603,1229.62 668.19,1228.13 668.776,1227.55 669.363,1227.39 669.949,1224.54 670.535,1226.04 671.122,1227.36 671.708,1229.73 672.295,1228.34 672.881,1228.01 673.467,1227.42 674.054,1227.36 674.64,1228.37 675.227,1228.35 675.813,1226.88 676.4,1226.84 676.986,1226.98 677.572,1225.14 678.159,1226.56 678.745,1226.76 679.332,1226.58 679.918,1224.89 680.504,1226.27 681.091,1222.38 681.677,1221.08 682.264,1222.28 682.85,1223.45 683.436,1223.58 684.023,1223.74 684.609,1223.78 685.196,1226.53 685.782,1219.53 686.369,1217.14 686.955,1220.51 687.541,1222.16 688.128,1223.78 688.714,1222.54 689.301,1224.11 689.887,1224.54 690.473,1226.19 691.06,1225.95 691.646,1227.36 692.233,1228.72 692.819,1228.46 693.405,1227.09 693.992,1225.67 694.578,1225.64 695.165,1228.6 695.751,1229.84 696.338,1228.09 696.924,1229.4 697.51,1230.56 698.097,1227.58 698.683,1228.83 699.27,1231.62 699.856,1229.47 700.442,1225.18 701.029,1223.68 701.615,1224.87 702.202,1223.28 702.788,1224.85 703.375,1225.04 703.961,1224.87 704.547,1223.65 705.134,1223.56 705.72,1223.66 706.307,1223.79 706.893,1225.28 707.479,1223.89 708.066,1224.1 708.652,1224.1 709.239,1225.9 709.825,1225.84 710.411,1226.96 710.998,1222.5 711.584,1223.88 712.171,1223.83 712.757,1226.59 713.344,1225.31 713.93,1221.15 714.516,1222.88 715.103,1224.17 715.689,1225.67 716.276,1223.91 716.862,1223.99 717.448,1224.32 718.035,1224.11 718.621,1222.58 719.208,1221.17 719.794,1222.55 720.38,1221.26 720.967,1224.27 721.553,1224.16 722.14,1221.62 722.726,1224.56 723.313,1225.8 723.899,1224.78 724.485,1224.93 725.072,1226.11 725.658,1224.76 726.245,1224.68 726.831,1223.14 727.417,1224.3 728.004,1223.93 728.59,1226.56 729.177,1226.33 729.763,1224.75 730.349,1221.71 730.936,1218.74 731.522,1220.36 732.109,1217.54 732.695,1218.07 733.282,1218.44 733.868,1220.22 734.454,1220.18 735.041,1222.99 735.627,1224.13 736.214,1224.24 736.8,1225.57 737.386,1226.89 737.973,1226.46 738.559,1226.39 739.146,1226.1 739.732,1228.5 740.318,1225.54 740.905,1223.97 741.491,1224.17 742.078,1222.95 742.664,1224.08 743.251,1221.53 743.837,1220.18 744.423,1221.73 745.01,1221.47 745.596,1216.27 746.183,1216.72 746.769,1219.76 747.355,1219.07 747.942,1218.99 748.528,1221.92 749.115,1217.53 749.701,1216.7 750.288,1215.47 750.874,1217.23 751.46,1218.86 752.047,1218.85 752.633,1216.45 753.22,1215.45 753.806,1214.51 754.392,1214.53 754.979,1216.52 755.565,1215.37 756.152,1217.05 756.738,1220.4 757.324,1220.59 757.911,1217.79 758.497,1219.51 759.084,1221.04 759.67,1222.52 760.257,1221.13 760.843,1219.89 761.429,1222.01 762.016,1222.21 762.602,1222.48 763.189,1221.24 763.775,1218.56 764.361,1218.59 764.948,1218.94 765.534,1222.02 766.121,1223.21 766.707,1221.99 767.293,1220.63 767.88,1220.96 768.466,1221.21 769.053,1222.63 769.639,1219.98 770.226,1220.06 770.812,1220.13 771.398,1219.07 771.985,1222.39 772.571,1221.02 773.158,1221.22 773.744,1218.36 774.33,1220.04 774.917,1217.31 775.503,1219.13 776.09,1217.84 776.676,1216.59 777.262,1218.36 777.849,1218.22 778.435,1222.34 779.022,1222.1 779.608,1222.14 780.195,1222.02 780.781,1218.42 781.367,1221.09 781.954,1221.25 782.54,1220.02 783.127,1219.99 783.713,1220.19 784.299,1219.83 784.886,1221.14 785.472,1220.8 786.059,1220.92 786.645,1219.62 787.232,1222.7 787.818,1225.23 788.404,1223.62 788.991,1224.78 789.577,1223.19 790.164,1224.57 790.75,1225.75 791.336,1226.77 791.923,1226.7 792.509,1227.79 793.096,1226.23 793.682,1224.71 794.268,1223.33 794.855,1224.19 795.441,1223.89 796.028,1223.98 796.614,1223.88 797.201,1225.11 797.787,1223.31 798.373,1223.39 798.96,1222.07 799.546,1223.35 800.133,1223.44 800.719,1223.47 801.305,1223.21 801.892,1221.72 802.478,1221.8 803.065,1225.83 803.651,1225.31 804.237,1226.62 804.824,1227.51 805.41,1227.11 805.997,1224.99 806.583,1224.83 807.17,1224.47 807.756,1227.15 808.342,1226.72 808.929,1226.33 809.515,1227.43 810.102,1227.24 810.688,1226.74 811.274,1226.43 811.861,1226.43 812.447,1226.31 813.034,1221.93 813.62,1220.83 814.206,1220.78 814.793,1219.95 815.379,1218.81 815.966,1223.04 816.552,1222.87 817.139,1222.63 817.725,1223.99 818.311,1223.67 818.898,1220.73 819.484,1220.67 820.071,1220.54 820.657,1219.24 821.243,1219.29 821.83,1218.2 822.416,1215.56 823.003,1214.48 823.589,1216.32 824.175,1219.4 824.762,1222.5 825.348,1223.72 825.935,1220.68 826.521,1222.36 827.108,1223.67 827.694,1223.4 828.28,1224.51 828.867,1224.34 829.453,1221.55 830.04,1221.5 830.626,1219.84 831.212,1221.32 831.799,1222.68 832.385,1219.86 832.972,1218.53 833.558,1217.19 834.145,1217.56 834.731,1219.23 835.317,1217.94 835.904,1219.37 836.49,1218.13 837.077,1218.33 837.663,1217.09 838.249,1217.63 838.836,1220.72 839.422,1219.31 840.009,1220.78 840.595,1220.57 841.181,1222.06 841.768,1224.61 842.354,1227.41 842.941,1225.83 843.527,1225.63 844.114,1225.07 844.7,1224.97 845.286,1226.1 845.873,1223.27 846.459,1223.06 847.046,1224.28 847.632,1224.11 848.218,1226.79 848.805,1226.39 849.391,1224.71 849.978,1223.18 850.564,1221.52 851.15,1222.62 851.737,1222.47 852.323,1225.26 852.91,1225.01 853.496,1226.14 854.083,1225.88 854.669,1221.5 855.255,1223.23 855.842,1223.3 856.428,1226.07 857.015,1226.08 857.601,1224.38 858.187,1222.89 858.774,1222.68 859.36,1220.86 859.947,1221.09 860.533,1221.19 861.119,1218.23 861.706,1215.54 862.292,1215.77 862.879,1217.4 863.465,1217.91 864.052,1219.46 864.638,1219.67 865.224,1218.52 865.811,1221.29 866.397,1219.83 866.984,1222.57 867.57,1223.9 868.156,1220.75 868.743,1218.98 869.329,1217.55 869.916,1216.55 870.502,1216.94 871.089,1218.34 871.675,1218.28 872.261,1217.1 872.848,1221.03 873.434,1220.91 874.021,1221.03 874.607,1222.28 875.193,1224.9 875.78,1225.83 876.366,1226.93 876.953,1226.57 877.539,1226.79 878.125,1227.83 878.712,1228.72 879.298,1229.67 879.885,1229.03 880.471,1229.91 881.058,1228.05 881.644,1228.8 882.23,1231.23 882.817,1229.28 883.403,1228.74 883.99,1226.88 884.576,1226.32 885.162,1225.76 885.749,1223.95 886.335,1222.78 886.922,1222.87 887.508,1224.32 888.094,1223.86 888.681,1220.91 889.267,1219.58 889.854,1221.11 890.44,1219.68 891.027,1221.25 891.613,1222.89 892.199,1223.04 892.786,1222.82 893.372,1219.38 893.959,1219.36 894.545,1218.35 895.131,1219.75 895.718,1220.97 896.304,1220.89 896.891,1217.97 897.477,1215.04 898.063,1215.16 898.65,1215.36 899.236,1217.07 899.823,1219.91 900.409,1222.56 900.996,1225.25 901.582,1226.46 902.168,1227.36 902.755,1224.01 903.341,1223.62 903.928,1223.35 904.514,1221.99 905.1,1220.17 905.687,1217.24 906.273,1216.12 906.86,1217.78 907.446,1219.21 908.032,1218.03 908.619,1218.14 909.205,1220.97 909.792,1219.53 910.378,1223.78 910.965,1226.34 911.551,1225.99 912.137,1224.52 912.724,1225.57 913.31,1224.14 913.897,1222.53 914.483,1223.71 915.069,1227.54 915.656,1225.86 916.242,1223.03 916.829,1220.03 917.415,1219.87 918.002,1221.09 918.588,1221.04 919.174,1219.64 919.761,1218.59 920.347,1220.33 920.934,1216.24 921.52,1217.86 922.106,1217.96 922.693,1220.88 923.279,1220.75 923.866,1219.19 924.452,1219.3 925.038,1219.44 925.625,1219.36 926.211,1217.84 926.798,1219.31 927.384,1220.85 927.971,1222.09 928.557,1219.46 929.143,1221 929.73,1219.69 930.316,1218.26 930.903,1218.43 931.489,1219.83 932.075,1218.22 932.662,1221.38 933.248,1218.48 933.835,1217.21 934.421,1215.84 935.007,1213.33 935.594,1215.02 936.18,1215.09 936.767,1219.42 937.353,1215.1 937.94,1219.45 938.526,1220.64 939.112,1219.27 939.699,1219.25 940.285,1217.85 940.872,1216.7 941.458,1219.53 942.044,1218.19 942.631,1218.16 943.217,1219.68 943.804,1221.07 944.39,1221.22 944.976,1221.05 945.563,1222.45 946.149,1219.46 946.736,1218.41 947.322,1219.94 947.909,1219.99 948.495,1222.61 949.081,1223.92 949.668,1220.79 950.254,1219.14 950.841,1216.29 951.427,1219.27 952.013,1216.93 952.6,1217.23 953.186,1218.86 953.773,1219.11 954.359,1222.25 954.945,1220.66 955.532,1222.29 956.118,1223.44 956.705,1223.06 957.291,1224.15 957.878,1224.06 958.464,1224.05 959.05,1224.13 959.637,1225.06 960.223,1227.49 960.81,1228.22 961.396,1227.9 961.982,1228.73 962.569,1229.66 963.155,1227.55 963.742,1227.04 964.328,1225.19 964.915,1222.09 965.501,1223.17 966.087,1223.02 966.674,1221.63 967.26,1221.23 967.847,1223.81 968.433,1224.99 969.019,1224.64 969.606,1225.58 970.192,1225.04 970.779,1224.72 971.365,1224.62 971.951,1224.19 972.538,1225.09 973.124,1224.97 973.711,1221.95 974.297,1220.52 974.884,1220.32 975.47,1220.54 976.056,1221.93 976.643,1221.67 977.229,1221.81 977.816,1220.28 978.402,1222.81 978.988,1224.15 979.575,1225.47 980.161,1223.8 980.748,1222.11 981.334,1224.61 981.92,1225.72 982.507,1226.47 983.093,1227.46 983.68,1222.94 984.266,1221.43 984.853,1221.56 985.439,1221.59 986.025,1218.64 986.612,1217.23 987.198,1216.06 987.785,1214.76 988.371,1216.6 988.957,1215.67 989.544,1217.35 990.13,1215.97 990.717,1218.67 991.303,1218.67 991.889,1221.46 992.476,1219.93 993.062,1221.11 993.649,1222.69 994.235,1222.39 994.822,1220.75 995.408,1219.2 995.994,1218.08 996.581,1219.26 997.167,1219.19 997.754,1217.35 998.34,1218.81 998.926,1217.56 999.513,1220.16 1000.1,1217.33 1000.69,1220.12 1001.27,1220.45 1001.86,1217.54 1002.44,1217.68 1003.03,1218.98 1003.62,1217.85 1004.2,1217.78 1004.79,1216.67 1005.38,1214.07 1005.96,1215.48 1006.55,1217 1007.14,1215.68 1007.72,1217.11 1008.31,1217.01 1008.9,1212.9 1009.48,1214.65 1010.07,1215.37 1010.65,1214.07 1011.24,1215.63 1011.83,1215.46 1012.41,1215.74 1013,1214.23 1013.59,1216.31 1014.17,1218.21 1014.76,1219.72 1015.35,1220.93 1015.93,1218.18 1016.52,1219.62 1017.11,1217.1 1017.69,1215.94 1018.28,1216.22 1018.86,1218.05 1019.45,1218 1020.04,1219.71 1020.62,1216.87 1021.21,1217.12 1021.8,1215.71 1022.38,1214.31 1022.97,1214.62 1023.56,1213.73 1024.14,1215.43 1024.73,1215.68 1025.32,1216.98 1025.9,1219.85 1026.49,1221.3 1027.07,1220.96 1027.66,1222.5 1028.25,1223.59 1028.83,1223.37 1029.42,1224.73 1030.01,1224.47 1030.59,1223.04 1031.18,1222.65 1031.77,1219.75 1032.35,1222.72 1032.94,1221.23 1033.52,1221.14 1034.11,1217.01 1034.7,1221.56 1035.28,1221.65 1035.87,1225.88 1036.46,1225.38 1037.04,1224.85 1037.63,1223.52 1038.22,1223.35 1038.8,1224.29 1039.39,1224.24 1039.98,1224.15 1040.56,1225.17 1041.15,1223.42 1041.73,1223.2 1042.32,1223.25 1042.91,1221.54 1043.49,1222.45 1044.08,1220.74 1044.67,1220.67 1045.25,1220.85 1045.84,1223.5 1046.43,1223.29 1047.01,1223.06 1047.6,1222.62 1048.19,1223.79 1048.77,1222.22 1049.36,1221.92 1049.94,1219.94 1050.53,1222.57 1051.12,1220.84 1051.7,1222.2 1052.29,1220.75 1052.88,1221.72 1053.46,1221.34 1054.05,1222.34 1054.64,1223.32 1055.22,1220.28 1055.81,1220.09 1056.39,1219.95 1056.98,1221.5 1057.57,1219.96 1058.15,1219.73 1058.74,1216.63 1059.33,1218.21 1059.91,1215.21 1060.5,1215.73 1061.09,1217.2 1061.67,1218.65 1062.26,1219.8 1062.85,1219.62 1063.43,1218.17 1064.02,1216.94 1064.6,1219.62 1065.19,1219.68 1065.78,1222.46 1066.36,1220.96 1066.95,1219.63 1067.54,1220.9 1068.12,1220.96 1068.71,1219.31 1069.3,1218.02 1069.88,1218.06 1070.47,1217.92 1071.06,1218.16 1071.64,1216.43 1072.23,1217.85 1072.81,1216.45 1073.4,1215.4 1073.99,1215.57 1074.57,1215.4 1075.16,1214.16 1075.75,1213.09 1076.33,1209.21 1076.92,1209.74 1077.51,1211.74 1078.09,1212.34 1078.68,1215.5 1079.26,1215.91 1079.85,1214.82 1080.44,1215.33 1081.02,1215.46 1081.61,1215.93 1082.2,1217.56 1082.78,1216.03 1083.37,1214.89 1083.96,1215.49 1084.54,1217.01 1085.13,1215.57 1085.72,1217.05 1086.3,1218.65 1086.89,1218.94 1087.47,1221.73 1088.06,1224.46 1088.65,1225.55 1089.23,1226.86 1089.82,1227.97 1090.41,1229.14 1090.99,1225.67 1091.58,1223.63 1092.17,1224.79 1092.75,1223.22 1093.34,1224.5 1093.93,1226.92 1094.51,1223.7 1095.1,1226.13 1095.68,1223.18 1096.27,1222.79 1096.86,1222.43 1097.44,1222.63 1098.03,1221.23 1098.62,1221.4 1099.2,1220.01 1099.79,1221.08 1100.38,1219.6 1100.96,1220.85 1101.55,1220.8 1102.14,1220.67 1102.72,1221.87 1103.31,1221.94 1103.89,1217.92 1104.48,1216.76 1105.07,1216.61 1105.65,1215.29 1106.24,1218.02 1106.83,1216.7 1107.41,1216.7 1108,1215.24 1108.59,1215.71 1109.17,1217.36 1109.76,1220.15 1110.34,1217.21 1110.93,1216.24 1111.52,1219.16 1112.1,1217.95 1112.69,1220.42 1113.28,1218.99 1113.86,1218.85 1114.45,1220.57 1115.04,1219.18 1115.62,1216.44 1116.21,1215.24 1116.8,1215.55 1117.38,1214.6 1117.97,1214.56 1118.55,1213.57 1119.14,1212.65 1119.73,1211.49 1120.31,1209.26 1120.9,1214.26 1121.49,1213.36 1122.07,1209.55 1122.66,1213.01 1123.25,1216.02 1123.83,1215.03 1124.42,1214.89 1125.01,1215.04 1125.59,1213.84 1126.18,1215.68 1126.76,1220.1 1127.35,1220.05 1127.94,1219.84 1128.52,1221.29 1129.11,1221.46 1129.7,1221.41 1130.28,1222.71 1130.87,1226.67 1131.46,1226.44 1132.04,1229.05 1132.63,1227.05 1133.21,1225.06 1133.8,1224.73 1134.39,1224.81 1134.97,1225.72 1135.56,1223.83 1136.15,1222.34 1136.73,1221.02 1137.32,1222.39 1137.91,1216.9 1138.49,1217 1139.08,1218.87 1139.67,1220.34 1140.25,1221.63 1140.84,1219.02 1141.42,1215.02 1142.01,1214.99 1142.6,1216.72 1143.18,1216.9 1143.77,1218.63 1144.36,1218.7 1144.94,1220.1 1145.53,1221.35 1146.12,1225.29 1146.7,1224.75 1147.29,1221.75 1147.88,1218.72 1148.46,1219.93 1149.05,1221.21 1149.63,1221.22 1150.22,1222.53 1150.81,1219.52 1151.39,1219.37 1151.98,1220.68 1152.57,1221.95 1153.15,1220.44 1153.74,1220.19 1154.33,1221.82 1154.91,1221.99 1155.5,1221.91 1156.09,1220.74 1156.67,1222.15 1157.26,1223.84 1157.84,1222.23 1158.43,1223.67 1159.02,1224.95 1159.6,1227.2 1160.19,1225.58 1160.78,1228.28 1161.36,1229.41 1161.95,1231.62 1162.54,1230.59 1163.12,1228.53 1163.71,1228.03 1164.29,1227.44 1164.88,1228.47 1165.47,1228.02 1166.05,1226.26 1166.64,1226.01 1167.23,1225.58 1167.81,1226.64 1168.4,1226.23 1168.99,1224.89 1169.57,1221.57 1170.16,1221.42 1170.75,1219.99 1171.33,1218.56 1171.92,1216.9 1172.5,1215.42 1173.09,1215.54 1173.68,1214.17 1174.26,1215.88 1174.85,1218.78 1175.44,1219.1 1176.02,1217.69 1176.61,1218.99 1177.2,1216.38 1177.78,1216.37 1178.37,1216.74 1178.96,1215.37 1179.54,1217.47 1180.13,1216.18 1180.71,1216.25 1181.3,1213.74 1181.89,1213.81 1182.47,1212.7 1183.06,1211.61 1183.65,1209.27 1184.23,1210.08 1184.82,1211.95 1185.41,1215.08 1185.99,1215.01 1186.58,1215.1 1187.16,1215.46 1187.75,1215.29 1188.34,1214.03 1188.92,1214.52 1189.51,1217.24 1190.1,1214.57 1190.68,1215.08 1191.27,1217.92 1191.86,1216.89 1192.44,1215.52 1193.03,1217.49 1193.62,1216.27 1194.2,1214.97 1194.79,1218.18 1195.37,1215.44 1195.96,1217.1 1196.55,1214.4 1197.13,1216.11 1197.72,1215.94 1198.31,1217.38 1198.89,1217.23 1199.48,1217.52 1200.07,1217.42 1200.65,1214.54 1201.24,1217.92 1201.83,1218.09 1202.41,1220.85 1203,1220.9 1203.58,1222.29 1204.17,1222.04 1204.76,1221.74 1205.34,1223.16 1205.93,1222.32 1206.52,1224.79 1207.1,1224.68 1207.69,1225.86 1208.28,1224.04 1208.86,1223.87 1209.45,1225.17 1210.03,1224.9 1210.62,1228.39 1211.21,1229.36 1211.79,1230.19 1212.38,1227.95 1212.97,1224.67 1213.55,1227.28 1214.14,1227.04 1214.73,1226.78 1215.31,1224.99 1215.9,1224.33 1216.49,1224.14 1217.07,1220.88 1217.66,1221.13 1218.24,1216.84 1218.83,1215.59 1219.42,1214.19 1220,1213.06 1220.59,1214.42 1221.18,1212.2 1221.76,1215.29 1222.35,1215.42 1222.94,1214.42 1223.52,1213.45 1224.11,1215.32 1224.7,1214.35 1225.28,1214.41 1225.87,1214.75 1226.45,1213.72 1227.04,1211.05 1227.63,1211.4 1228.21,1210 1228.8,1207.71 1229.39,1208.08 1229.97,1207.3 1230.56,1207.71 1231.15,1207.38 1231.73,1208.08 1232.32,1208.8 1232.91,1209.11 1233.49,1211.35 1234.08,1211.77 1234.66,1212.12 1235.25,1214.13 1235.84,1214.37 1236.42,1214.5 1237.01,1217.3 1237.6,1218.53 1238.18,1217.13 1238.77,1218.83 1239.36,1220.35 1239.94,1223.34 1240.53,1224.72 1241.11,1220.15 1241.7,1220.18 1242.29,1218.69 1242.87,1219.89 1243.46,1219.75 1244.05,1216.84 1244.63,1218.3 1245.22,1218.29 1245.81,1219.66 1246.39,1219.6 1246.98,1219.75 1247.57,1217.17 1248.15,1216.02 1248.74,1213.13 1249.32,1216.55 1249.91,1216.83 1250.5,1215.56 1251.08,1215.77 1251.67,1217.15 1252.26,1215.8 1252.84,1216.03 1253.43,1216.04 1254.02,1217.33 1254.6,1217.26 1255.19,1217.25 1255.78,1218.76 1256.36,1217.53 1256.95,1218.91 1257.53,1219.16 1258.12,1220.37 1258.71,1223.01 1259.29,1224.13 1259.88,1225.38 1260.47,1225.18 1261.05,1224.74 1261.64,1225.91 1262.23,1222.73 1262.81,1221.03 1263.4,1225.08 1263.98,1223.44 1264.57,1222.97 1265.16,1221.46 1265.74,1218.69 1266.33,1221.43 1266.92,1223.97 1267.5,1225.52 1268.09,1223.77 1268.68,1224.56 1269.26,1220.06 1269.85,1224.18 1270.44,1220.95 1271.02,1222.11 1271.61,1221.82 1272.19,1220.32 1272.78,1221.75 1273.37,1217.27 1273.95,1216.12 1274.54,1216.37 1275.13,1216.37 1275.71,1213.7 1276.3,1212.59 1276.89,1212.91 1277.47,1215.94 1278.06,1217.46 1278.65,1216.3 1279.23,1216.2 1279.82,1214.77 1280.4,1212.48 1280.99,1214.23 1281.58,1214.35 1282.16,1216.02 1282.75,1216.06 1283.34,1214.63 1283.92,1216.39 1284.51,1216.69 1285.1,1215.64 1285.68,1217.53 1286.27,1219.19 1286.86,1220.61 1287.44,1220.6 1288.03,1217.53 1288.61,1214.94 1289.2,1213.67 1289.79,1215.33 1290.37,1212.85 1290.96,1211.83 1291.55,1209.26 1292.13,1209.82 1292.72,1211.58 1293.31,1212.31 1293.89,1214.04 1294.48,1214.19 1295.06,1214.45 1295.65,1211.95 1296.24,1214.95 1296.82,1213.96 1297.41,1214.44 1298,1213.38 1298.58,1213.6 1299.17,1215.22 1299.76,1216.95 1300.34,1215.84 1300.93,1217.43 1301.52,1218.83 1302.1,1220.17 1302.69,1220.31 1303.27,1221.42 1303.86,1216.77 1304.45,1216.94 1305.03,1219.76 1305.62,1221.31 1306.21,1222.29 1306.79,1226.38 1307.38,1225.75 1307.97,1226.88 1308.55,1227.84 1309.14,1228.82 1309.73,1226.71 1310.31,1224.82 1310.9,1225.04 1311.48,1223.22 1312.07,1221.77 1312.66,1224.34 1313.24,1224.15 1313.83,1226.57 1314.42,1227.52 1315,1226.81 1315.59,1225.03 1316.18,1223.19 1316.76,1220.05 1317.35,1217.07 1317.93,1217 1318.52,1217.11 1319.11,1215.58 1319.69,1215.83 1320.28,1215.8 1320.87,1217.6 1321.45,1216.3 1322.04,1217.62 1322.63,1220.32 1323.21,1220.49 1323.8,1221.83 1324.39,1221.88 1324.97,1222.8 1325.56,1223.84 1326.14,1224.92 1326.73,1226.12 1327.32,1226.94 1327.9,1227.95 1328.49,1227.31 1329.08,1226.56 1329.66,1224.8 1330.25,1224.46 1330.84,1228.22 1331.42,1229.12 1332.01,1228.38 1332.6,1226.75 1333.18,1226.28 1333.77,1225.9 1334.35,1228.24 1334.94,1226.27 1335.53,1224.53 1336.11,1225.24 1336.7,1225.05 1337.29,1223.19 1337.87,1222.83 1338.46,1219.88 1339.05,1217.06 1339.63,1219.61 1340.22,1219.59 1340.8,1219.67 1341.39,1219.76 1341.98,1218.25 1342.56,1216.69 1343.15,1216.85 1343.74,1216.9 1344.32,1218.38 1344.91,1218.35 1345.5,1216.94 1346.08,1212.62 1346.67,1212.75 1347.26,1214.21 1347.84,1214.53 1348.43,1214.56 1349.01,1216.17 1349.6,1216.35 1350.19,1216.16 1350.77,1217.61 1351.36,1214.86 1351.95,1211.07 1352.53,1211.33 1353.12,1214.64 1353.71,1214.79 1354.29,1213.49 1354.88,1215.49 1355.47,1219.81 1356.05,1219.74 1356.64,1224.02 1357.22,1226.41 1357.81,1227.48 1358.4,1225.6 1358.98,1226.39 1359.57,1229.88 1360.16,1230.6 1360.74,1231.4 1361.33,1229.54 1361.92,1227.63 1362.5,1231.07 1363.09,1231.86 1363.68,1231.03 1364.26,1234.58 1364.85,1232.64 1365.43,1232.02 1366.02,1227.4 1366.61,1226.71 1367.19,1225.23 1367.78,1223.52 1368.37,1219.2 1368.95,1223.21 1369.54,1221.58 1370.13,1221.32 1370.71,1221.08 1371.3,1222.11 1371.88,1219.54 1372.47,1217.78 1373.06,1217.91 1373.64,1218.01 1374.23,1216.73 1374.82,1214.11 1375.4,1214.39 1375.99,1214.44 1376.58,1215.93 1377.16,1218.75 1377.75,1217.32 1378.34,1217.04 1378.92,1212.77 1379.51,1212.04 1380.09,1213.7 1380.68,1213.83 1381.27,1213.97 1381.85,1213.11 1382.44,1213.45 1383.03,1212.24 1383.61,1209.96 1384.2,1207.81 1384.79,1208.63 1385.37,1212.01 1385.96,1214.1 1386.55,1214.26 1387.13,1213.17 1387.72,1212.19 1388.3,1212.79 1388.89,1207.55 1389.48,1206.59 1390.06,1205.84 1390.65,1205.15 1391.24,1207.54 1391.82,1211 1392.41,1214.18 1393,1212.89 1393.58,1217.47 1394.17,1220.37 1394.75,1220.49 1395.34,1220.79 1395.93,1217.87 1396.51,1216.71 1397.1,1215.53 1397.69,1214.71 1398.27,1216.72 1398.86,1218.41 1399.45,1217.3 1400.03,1217.41 1400.62,1217.81 1401.21,1220.83 1401.79,1219.55 1402.38,1222.16 1402.96,1223.53 1403.55,1224.82 1404.14,1225.79 1404.72,1223.87 1405.31,1220.83 1405.9,1222.05 1406.48,1223.18 1407.07,1224.17 1407.66,1223.82 1408.24,1223.79 1408.83,1222.03 1409.42,1223.34 1410,1220.18 1410.59,1218.83 1411.17,1217.46 1411.76,1217.63 1412.35,1216.47 1412.93,1216.57 1413.52,1218 1414.11,1218.19 1414.69,1221.17 1415.28,1223.58 1415.87,1226.09 1416.45,1223.05 1417.04,1221.48 1417.63,1220.31 1418.21,1221.53 1418.8,1224.11 1419.38,1223.63 1419.97,1226.21 1420.56,1222.99 1421.14,1221.44 1421.73,1221.38 1422.32,1221.21 1422.9,1218.43 1423.49,1218.66 1424.08,1217.14 1424.66,1221.14 1425.25,1222.49 1425.83,1220.82 1426.42,1223.39 1427.01,1223.18 1427.59,1221.84 1428.18,1221.81 1428.77,1221.65 1429.35,1221.42 1429.94,1219.93 1430.53,1219.72 1431.11,1221.11 1431.7,1221.07 1432.29,1220.75 1432.87,1219.12 1433.46,1221.73 1434.04,1220.51 1434.63,1215.68 1435.22,1214.59 1435.8,1213.48 1436.39,1214.89 1436.98,1216.61 1437.56,1217.96 1438.15,1217.75 1438.74,1214.95 1439.32,1215.33 1439.91,1215.66 1440.5,1213.14 1441.08,1213.17 1441.67,1213.29 1442.25,1209.32 1442.84,1208.43 1443.43,1208.91 1444.01,1209.46 1444.6,1210.05 1445.19,1209.48 1445.77,1211.67 1446.36,1212.05 1446.95,1210.74 1447.53,1208.57 1448.12,1209.22 1448.7,1206.93 1449.29,1210.15 1449.88,1214.78 1450.46,1214.95 1451.05,1215.19 1451.64,1214.26 1452.22,1217.3 1452.81,1218.52 1453.4,1220.18 1453.98,1221.55 1454.57,1221.67 1455.16,1221.54 1455.74,1221.45 1456.33,1218.1 1456.91,1218.03 1457.5,1215.13 1458.09,1215.43 1458.67,1213.97 1459.26,1215.57 1459.85,1218.57 1460.43,1218.42 1461.02,1218.49 1461.61,1218.63 1462.19,1217.17 1462.78,1218.64 1463.37,1220 1463.95,1218.89 1464.54,1218.95 1465.12,1220.38 1465.71,1217.73 1466.3,1218.05 1466.88,1219.43 1467.47,1219.32 1468.06,1217.84 1468.64,1216.37 1469.23,1216.45 1469.82,1216.83 1470.4,1219.51 1470.99,1219.46 1471.57,1220.87 1472.16,1223.57 1472.75,1223.49 1473.33,1220.44 1473.92,1217.77 1474.51,1216.24 1475.09,1216.47 1475.68,1216.92 1476.27,1215.37 1476.85,1216.74 1477.44,1214.07 1478.03,1214.16 1478.61,1214.32 1479.2,1214.61 1479.78,1217.44 1480.37,1217.35 1480.96,1220.13 1481.54,1221.57 1482.13,1224.44 1482.72,1226.97 1483.3,1226.22 1483.89,1228.53 1484.48,1229.09 1485.06,1226.89 1485.65,1226.37 1486.24,1224.66 1486.82,1225.6 1487.41,1226.6 1487.99,1223.48 1488.58,1224.55 1489.17,1223 1489.75,1221.47 1490.34,1221.48 1490.93,1222.93 1491.51,1222.81 1492.1,1221.32 1492.69,1217.08 1493.27,1218.49 1493.86,1215.89 1494.45,1211.77 1495.03,1209.32 1495.62,1208.4 1496.2,1207.49 1496.79,1212.18 1497.38,1211.25 1497.96,1213.26 1498.55,1214.89 1499.14,1215.15 1499.72,1214.14 1500.31,1215.78 1500.9,1221.11 1501.48,1224.95 1502.07,1224.56 1502.65,1224.17 1503.24,1225.19 1503.83,1222.37 1504.41,1222.39 1505,1218.01 1505.59,1216.79 1506.17,1215.74 1506.76,1218.32 1507.35,1219.54 1507.93,1218.34 1508.52,1218.93 1509.11,1218.73 1509.69,1218.96 1510.28,1218.78 1510.86,1218.89 1511.45,1217.41 1512.04,1217.43 1512.62,1214.58 1513.21,1210.67 1513.8,1208.34 1514.38,1210.32 1514.97,1212 1515.56,1215.17 1516.14,1214.21 1516.73,1214.64 1517.32,1216.26 1517.9,1216.6 1518.49,1218 1519.07,1219.18 1519.66,1220.56 1520.25,1217.85 1520.83,1216.98 1521.42,1219.86 1522.01,1222.13 1522.59,1226.36 1523.18,1224.78 1523.77,1224.6 1524.35,1226.03 1524.94,1222.66 1525.52,1224.1 1526.11,1225.32 1526.7,1223.69 1527.28,1224.62 1527.87,1225.59 1528.46,1226.58 1529.04,1224.49 1529.63,1221.2 1530.22,1221.09 1530.8,1222.42 1531.39,1223.78 1531.98,1223.77 1532.56,1223.55 1533.15,1222.85 1533.73,1222.73 1534.32,1224.01 1534.91,1228.05 1535.49,1229.14 1536.08,1229.94 1536.67,1228 1537.25,1224.83 1537.84,1224.46 1538.43,1225.6 1539.01,1224 1539.6,1224.87 1540.19,1225.87 1540.77,1222.88 1541.36,1223.73 1541.94,1222.01 1542.53,1220.4 1543.12,1220.08 1543.7,1219.03 1544.29,1217.59 1544.88,1220.51 1545.46,1219.13 1546.05,1216.61 1546.64,1216.97 1547.22,1217.1 1547.81,1216.92 1548.4,1219.73 1548.98,1219.78 1549.57,1219.9 1550.15,1225.42 1550.74,1223.72 1551.33,1222.45 1551.91,1223.63 1552.5,1219.15 1553.09,1219.23 1553.67,1217.73 1554.26,1213.82 1554.85,1212.76 1555.43,1214.45 1556.02,1215.02 1556.6,1212.22 1557.19,1213.81 1557.78,1211.11 1558.36,1210.39 1558.95,1210.58 1559.54,1211.03 1560.12,1211.32 1560.71,1211.87 1561.3,1210.93 1561.88,1211.45 1562.47,1211.86 1563.06,1213.81 1563.64,1211.15 1564.23,1211.5 1564.81,1214.7 1565.4,1214.61 1565.99,1215.95 1566.57,1216.23 1567.16,1216.17 1567.75,1216.42 1568.33,1216.35 1568.92,1216.71 1569.51,1214.25 1570.09,1215.67 1570.68,1221.42 1571.27,1222.86 1571.85,1215.47 1572.44,1215.69 1573.02,1215.72 1573.61,1217.24 1574.2,1216.1 1574.78,1215.09 1575.37,1215.14 1575.96,1213.72 1576.54,1215.54 1577.13,1220.02 1577.72,1221.29 1578.3,1221.31 1578.89,1219.84 1579.47,1216.86 1580.06,1219.75 1580.65,1219.63 1581.23,1218.34 1581.82,1219.7 1582.41,1221.13 1582.99,1220.97 1583.58,1219.52 1584.17,1219.52 1584.75,1219.65 1585.34,1219.37 1585.93,1220.7 1586.51,1220.76 1587.1,1220.72 1587.68,1220.47 1588.27,1221.88 1588.86,1221.88 1589.44,1220.27 1590.03,1220.43 1590.62,1220 1591.2,1217.24 1591.79,1217.29 1592.38,1214.64 1592.96,1212.04 1593.55,1210.92 1594.14,1211.07 1594.72,1209.96 1595.31,1209.05 1595.89,1210.92 1596.48,1208.52 1597.07,1208.95 1597.65,1209.32 1598.24,1210.28 1598.83,1212.27 1599.41,1210.97 1600,1210.05 1600.59,1209.09 1601.17,1213.73 1601.76,1212.61 1602.34,1211.53 1602.93,1211.86 1603.52,1210.49 1604.1,1213.57 1604.69,1214.02 1605.28,1214.48 1605.86,1219.09 1606.45,1220.15 1607.04,1221.46 1607.62,1219.89 1608.21,1218.9 1608.8,1220 1609.38,1215.47 1609.97,1215.69 1610.55,1210.33 1611.14,1206.32 1611.73,1205.54 1612.31,1207.52 1612.9,1209.7 1613.49,1211.71 1614.07,1212.07 1614.66,1213.56 1615.25,1213.71 1615.83,1218.1 1616.42,1219.61 1617.01,1222.45 1617.59,1226.38 1618.18,1228.53 1618.76,1230.94 1619.35,1231.74 1619.94,1233.53 1620.52,1232.99 1621.11,1235.44 1621.7,1237.43 1622.28,1236.4 1622.87,1236.64 1623.46,1237.2 1624.04,1235.06 1624.63,1234.09 1625.22,1234.66 1625.8,1233.82 1626.39,1234.16 1626.97,1227.73 1627.56,1228.61 1628.15,1229.44 1628.73,1231.65 1629.32,1232.3 1629.91,1231.74 1630.49,1232.23 1631.08,1230.42 1631.67,1227 1632.25,1227.92 1632.84,1224.64 1633.42,1223.13 1634.01,1218.58 1634.6,1214.44 1635.18,1217.61 1635.77,1217.8 1636.36,1217.88 1636.94,1218.3 1637.53,1222.32 1638.12,1220.69 1638.7,1224.5 1639.29,1221.2 1639.88,1222.43 1640.46,1219.6 1641.05,1219.6 1641.63,1216.78 1642.22,1216.53 1642.81,1217.89 1643.39,1216.56 1643.98,1213.58 1644.57,1212.4 1645.15,1212.82 1645.74,1213.12 1646.33,1214.93 1646.91,1212.23 1647.5,1209.94 1648.09,1208.98 1648.67,1206.63 1649.26,1208.81 1649.84,1207.82 1650.43,1205.64 1651.02,1209.34 1651.6,1209.56 1652.19,1211.42 1652.78,1208.94 1653.36,1210.81 1653.95,1210.05 1654.54,1207.5 1655.12,1209.56 1655.71,1210.14 1656.29,1212.03 1656.88,1214.01 1657.47,1218.46 1658.05,1221.27 1658.64,1219.9 1659.23,1221.32 1659.81,1222.45 1660.4,1223.6 1660.99,1222.01 1661.57,1223.13 1662.16,1222.86 1662.75,1222.71 1663.33,1222.54 1663.92,1222.53 1664.5,1223.74 1665.09,1223.62 1665.68,1220.76 1666.26,1223.45 1666.85,1224.83 1667.44,1224.57 1668.02,1222.99 1668.61,1222.67 1669.2,1221.18 1669.78,1221.07 1670.37,1222.49 1670.96,1222.16 1671.54,1221.92 1672.13,1220.43 1672.71,1220.32 1673.3,1219.16 1673.89,1219.08 1674.47,1217.78 1675.06,1219.23 1675.65,1217.49 1676.23,1217.55 1676.82,1214.73 1677.41,1216.47 1677.99,1217.88 1678.58,1216.42 1679.17,1218.13 1679.75,1218.41 1680.34,1218.31 1680.92,1218.61 1681.51,1219.96 1682.1,1215.65 1682.68,1214.48 1683.27,1213.17 1683.86,1213.62 1684.44,1213.95 1685.03,1215.57 1685.62,1217.12 1686.2,1217.2 1686.79,1218.5 1687.37,1216.2 1687.96,1216.56 1688.55,1218.38 1689.13,1218.25 1689.72,1217.17 1690.31,1218.56 1690.89,1214.63 1691.48,1216.34 1692.07,1220.78 1692.65,1221.87 1693.24,1221.74 1693.83,1223.11 1694.41,1222.71 1695,1218.82 1695.58,1217.51 1696.17,1217.66 1696.76,1223.22 1697.34,1220.17 1697.93,1217.23 1698.52,1220.07 1699.1,1218.62 1699.69,1217.75 1700.28,1217.44 1700.86,1219.12 1701.45,1216.24 1702.04,1213.63 1702.62,1213.68 1703.21,1216.54 1703.79,1219.18 1704.38,1221.7 1704.97,1221.41 1705.55,1222.52 1706.14,1222.4 1706.73,1220.72 1707.31,1222.01 1707.9,1221.9 1708.49,1224.38 1709.07,1223.96 1709.66,1222.44 1710.24,1221.99 1710.83,1223.02 1711.42,1219.91 1712,1220.06 1712.59,1218.5 1713.18,1218.37 1713.76,1216.84 1714.35,1216.69 1714.94,1216.65 1715.52,1219.63 1716.11,1219.81 1716.7,1221.15 1717.28,1220.76 1717.87,1222.05 1718.45,1221.73 1719.04,1220.64 1719.63,1217.89 1720.21,1217.99 1720.8,1220.52 1721.39,1217.84 1721.97,1215.37 1722.56,1216.96 1723.15,1215.49 1723.73,1218.3 1724.32,1219.52 1724.91,1216.53 1725.49,1217.95 1726.08,1222.17 1726.66,1221.85 1727.25,1218.82 1727.84,1218.89 1728.42,1217.37 1729.01,1218.97 1729.6,1220.83 1730.18,1216.54 1730.77,1216.85 1731.36,1215.44 1731.94,1215.36 1732.53,1214.33 1733.11,1211.65 1733.7,1213.22 1734.29,1215.24 1734.87,1215.04 1735.46,1214.89 1736.05,1215.08 1736.63,1219.59 1737.22,1221.03 1737.81,1219.59 1738.39,1219.58 1738.98,1220.84 1739.57,1221.97 1740.15,1223.1 1740.74,1222.98 1741.32,1220.1 1741.91,1219.93 1742.5,1221.08 1743.08,1221 1743.67,1220.75 1744.26,1219.17 1744.84,1219.38 1745.43,1220.7 1746.02,1220.62 1746.6,1221.64 1747.19,1220.07 1747.78,1220.38 1748.36,1217.63 1748.95,1217.43 1749.53,1217.36 1750.12,1220.67 1750.71,1220.74 1751.29,1224.63 1751.88,1220.12 1752.47,1219.94 1753.05,1219.65 1753.64,1216.84 1754.23,1212.95 1754.81,1210.49 1755.4,1211.14 1755.99,1210.24 1756.57,1207.81 1757.16,1208.51 1757.74,1208.86 1758.33,1208.06 1758.92,1210.01 1759.5,1209.11 1760.09,1210.92 1760.68,1210 1761.26,1210.43 1761.85,1210.75 1762.44,1213.7 1763.02,1212.6 1763.61,1215.88 1764.19,1214.6 1764.78,1216.38 1765.37,1215.42 1765.95,1214.15 1766.54,1215.83 1767.13,1217.52 1767.71,1220.67 1768.3,1221.81 1768.89,1224.27 1769.47,1224.25 1770.06,1222.46 1770.65,1222.15 1771.23,1218.11 1771.82,1218.55 1772.4,1217.42 1772.99,1213.2 1773.58,1217.48 1774.16,1217.89 1774.75,1216.73 1775.34,1219.8 1775.92,1219.25 1776.51,1220.71 1777.1,1220.94 1777.68,1219.57 1778.27,1219.42 1778.86,1217.85 1779.44,1220.84 1780.03,1222.03 1780.61,1222.23 1781.2,1223.62 1781.79,1221.91 1782.37,1220.05 1782.96,1220.15 1783.55,1224.18 1784.13,1224.11 1784.72,1222.38 1785.31,1223.45 1785.89,1224.6 1786.48,1225.76 1787.06,1223.97 1787.65,1219.48 1788.24,1217.86 1788.82,1217.78 1789.41,1217.8 1790,1219.48 1790.58,1220.74 1791.17,1219.31 1791.76,1220.53 1792.34,1223.21 1792.93,1221.68 1793.52,1222.99 1794.1,1222.71 1794.69,1222.66 1795.27,1223.91 1795.86,1222.31 1796.45,1217.99 1797.03,1218.08 1797.62,1215.15 1798.21,1215.41 1798.79,1215.77 1799.38,1214.4 1799.97,1211.8 1800.55,1212.23 1801.14,1211.31 1801.73,1211.72 1802.31,1212.06 1802.9,1218.17 1803.48,1218.71 1804.07,1215.97 1804.66,1217.81 1805.24,1215.37 1805.83,1216.78 1806.42,1215.67 1807,1215.81 1807.59,1215.86 1808.18,1214.42 1808.76,1214.85 1809.35,1213.87 1809.94,1213.96 1810.52,1215.39 1811.11,1213.98 1811.69,1213.92 1812.28,1212.78 1812.87,1211.65 1813.45,1216.13 1814.04,1215.1 1814.63,1215.14 1815.21,1218.23 1815.8,1216.95 1816.39,1217.03 1816.97,1220.19 1817.56,1218.67 1818.14,1217.39 1818.73,1215.58 1819.32,1216.08 1819.9,1215.38 1820.49,1214.25 1821.08,1213.18 1821.66,1214.93 1822.25,1217.85 1822.84,1218.07 1823.42,1219.53 1824.01,1219.46 1824.6,1216.98 1825.18,1217.19 1825.77,1218.81 1826.35,1218.5 1826.94,1220.33 1827.53,1218.91 1828.11,1218.89 1828.7,1217.39 1829.29,1217.45 1829.87,1216.21 1830.46,1219.25 1831.05,1220.58 1831.63,1223.38 1832.22,1221.8 1832.81,1220.14 1833.39,1224.13 1833.98,1220.94 1834.56,1220.97 1835.15,1223.52 1835.74,1221.99 1836.32,1223.23 1836.91,1221.53 1837.5,1222.75 1838.08,1222.43 1838.67,1221.35 1839.26,1220.05 1839.84,1218.39 1840.43,1218.26 1841.01,1222.39 1841.6,1220.74 1842.19,1220.76 1842.77,1222.23 1843.36,1223.54 1843.95,1220.41 1844.53,1218.92 1845.12,1219.29 1845.71,1219.39 1846.29,1219.28 1846.88,1220.92 1847.47,1220.67 1848.05,1221.95 1848.64,1220.62 1849.22,1220.43 1849.81,1221.88 1850.4,1221.6 1850.98,1220.03 1851.57,1222.62 1852.16,1222.38 1852.74,1221.12 1853.33,1219.51 1853.92,1219.69 1854.5,1221.05 1855.09,1220.65 1855.68,1220.52 1856.26,1222.8 1856.85,1224.08 1857.43,1226.64 1858.02,1228.11 1858.61,1228.87 1859.19,1224.1 1859.78,1223.81 1860.37,1223.8 1860.95,1220.53 1861.54,1217.44 1862.13,1219 1862.71,1220.46 1863.3,1218.94 1863.88,1218.84 1864.47,1220.39 1865.06,1220.27 1865.64,1224.34 1866.23,1226.78 1866.82,1224.91 1867.4,1223.3 1867.99,1221.49 1868.58,1221.4 1869.16,1221.19 1869.75,1221.05 1870.34,1221 1870.92,1215.43 1871.51,1213.98 1872.09,1216.96 1872.68,1218.54 1873.27,1218.29 1873.85,1219.83 1874.44,1219.8 1875.03,1217.11 1875.61,1217.41 1876.2,1217.73 1876.79,1217.8 1877.37,1219.28 1877.96,1220.58 1878.55,1220.4 1879.13,1221.87 1879.72,1221.9 1880.3,1224.61 1880.89,1227.18 1881.48,1226.7 1882.06,1226.3 1882.65,1228.67 1883.24,1227.89 1883.82,1224.51 1884.41,1222.92 1885,1222.54 1885.58,1225.06 1886.17,1223.6 1886.76,1223.14 1887.34,1223.04 1887.93,1225.13 1888.51,1225.01 1889.1,1220.35 1889.69,1220.35 1890.27,1220.24 1890.86,1224.18 1891.45,1225.43 1892.03,1224.75 1892.62,1223.1 1893.21,1225.49 1893.79,1223.73 1894.38,1221.85 1894.96,1223.18 1895.55,1222.87 1896.14,1221.18 1896.72,1218.02 1897.31,1217.8 1897.9,1219.3 1898.48,1219.31 1899.07,1218.87 1899.66,1218.83 1900.24,1219.02 1900.83,1216.34 1901.42,1219.13 1902,1216.17 1902.59,1217.57 1903.17,1214.75 1903.76,1213.58 1904.35,1213.85 1904.93,1217.05 1905.52,1218.59 1906.11,1217 1906.69,1219.77 1907.28,1219.77 1907.87,1219.95 1908.45,1219.89 1909.04,1221.09 1909.63,1218.33 1910.21,1219.68 1910.8,1220.99 1911.38,1219.47 1911.97,1221.05 1912.56,1219.76 1913.14,1217.04 1913.73,1215.87 1914.32,1217.64 1914.9,1219.49 1915.49,1220.81 1916.08,1221 1916.66,1222.41 1917.25,1220.91 1917.83,1220.83 1918.42,1219.19 1919.01,1217.82 1919.59,1219.08 1920.18,1219.42 1920.77,1220.58 1921.35,1224.52 1921.94,1225.69 1922.53,1228.02 1923.11,1224.87 1923.7,1224.37 1924.29,1223.88 1924.87,1220.56 1925.46,1219 1926.04,1218.96 1926.63,1216.03 1927.22,1214.68 1927.8,1211.06 1928.39,1207.05 1928.98,1206.17 1929.56,1206.69 1930.15,1207.11 1930.74,1207.48 1931.32,1205.21 1931.91,1205.81 1932.5,1206.49 1933.08,1207.24 1933.67,1207.82 1934.25,1206.96 1934.84,1207.41 1935.43,1206.65 1936.01,1207.42 1936.6,1206.36 1937.19,1207.3 1937.77,1208 1938.36,1208.56 1938.95,1210.21 1939.53,1211.97 1940.12,1214.97 1940.71,1217.91 1941.29,1216.4 1941.88,1215.37 1942.46,1216.88 1943.05,1218.29 1943.64,1219.71 1944.22,1219.58 1944.81,1220.95 1945.4,1220.91 1945.98,1223.33 1946.57,1224.75 1947.16,1224.34 1947.74,1222.91 1948.33,1219.99 1948.91,1219.94 1949.5,1219.8 1950.09,1218.77 1950.67,1217.26 1951.26,1218.44 1951.85,1218.53 1952.43,1218.8 1953.02,1217.53 1953.61,1217.58 1954.19,1220.31 1954.78,1220.51 1955.37,1219.36 1955.95,1219.52 1956.54,1218.16 1957.12,1220.95 1957.71,1220.92 1958.3,1223.57 1958.88,1224.65 1959.47,1224.41 1960.06,1221.32 1960.64,1222.81 1961.23,1220.22 1961.82,1221.38 1962.4,1221.73 1962.99,1221.42 1963.58,1221.15 1964.16,1222.04 1964.75,1221.97 1965.33,1223.33 1965.92,1221.62 1966.51,1222.92 1967.09,1221.43 1967.68,1219.6 1968.27,1220.92 1968.85,1222.54 1969.44,1223.97 1970.03,1225.28 1970.61,1223.49 1971.2,1218.89 1971.78,1221.48 1972.37,1220.18 1972.96,1222.67 1973.54,1223.58 1974.13,1223.04 1974.72,1219.86 1975.3,1221.35 1975.89,1219.67 1976.48,1218.32 1977.06,1219.76 1977.65,1217.02 1978.24,1217.27 1978.82,1219.87 1979.41,1219.66 1979.99,1219.48 1980.58,1218.03 1981.17,1215.52 1981.75,1214.4 1982.34,1215.72 1982.93,1215.94 1983.51,1218.87 1984.1,1217.76 1984.69,1217.67 1985.27,1220.33 1985.86,1221.52 1986.45,1221.64 1987.03,1221.33 1987.62,1221.23 1988.2,1220.95 1988.79,1223.56 1989.38,1225.7 1989.96,1225.33 1990.55,1223.56 1991.14,1221.68 1991.72,1220.37 1992.31,1218.93 1992.9,1217.22 1993.48,1217.5 1994.07,1216.09 1994.65,1217.27 1995.24,1218.56 1995.83,1219.82 1996.41,1219.7 1997,1219.08 1997.59,1220.35 1998.17,1222.77 1998.76,1222.76 1999.35,1225.12 1999.93,1223.47 2000.52,1221.79 2001.11,1223.23 2001.69,1222.94 2002.28,1221.57 2002.86,1218.79 2003.45,1216.1 2004.04,1213.38 2004.62,1212.11 2005.21,1212.65 2005.8,1215.9 2006.38,1216.18 2006.97,1216.42 2007.56,1216.7 2008.14,1215.4 2008.73,1213.15 2009.32,1213.29 2009.9,1213.79 2010.49,1215.5 2011.07,1218.56 2011.66,1214.42 2012.25,1214.56 2012.83,1213.44 2013.42,1215.34 2014.01,1214.12 2014.59,1217.57 2015.18,1216.13 2015.77,1216.41 2016.35,1218.02 2016.94,1222.49 2017.53,1222.21 2018.11,1222.18 2018.7,1220.86 2019.28,1219.1 2019.87,1220.4 2020.46,1218.85 2021.04,1218.85 2021.63,1218.8 2022.22,1220.34 2022.8,1218.94 2023.39,1220.18 2023.98,1222.76 2024.56,1225.43 2025.15,1225.01 2025.73,1224.81 2026.32,1225.77 2026.91,1222.43 2027.49,1223.62 2028.08,1220.43 2028.67,1224.25 2029.25,1223.71 2029.84,1224.56 2030.43,1223.2 2031.01,1224.23 2031.6,1225.47 2032.19,1227.94 2032.77,1227.37 2033.36,1224.14 2033.94,1223.84 2034.53,1222.11 2035.12,1218.96 2035.7,1220.41 2036.29,1217.31 2036.88,1215.94 2037.46,1220.04 2038.05,1218.59 2038.64,1219.87 2039.22,1221.49 2039.81,1220.41 2040.4,1221.74 2040.98,1221.97 2041.57,1222.03 2042.15,1221.57 2042.74,1222.46 2043.33,1221.95 2043.91,1220.51 2044.5,1217.86 2045.09,1217.79 2045.67,1219.25 2046.26,1222 2046.85,1219.13 2047.43,1217.69 2048.02,1220.65 2048.6,1218.92 2049.19,1220.28 2049.78,1216.04 2050.36,1213.15 2050.95,1216.45 2051.54,1216.7 2052.12,1215.6 2052.71,1215.88 2053.3,1211.95 2053.88,1213.55 2054.47,1211.19 2055.06,1213.09 2055.64,1213.43 2056.23,1213.69 2056.81,1214.02 2057.4,1214.4 2057.99,1214.58 2058.57,1217.64 2059.16,1217.84 2059.75,1217.58 2060.33,1219.31 2060.92,1219.08 2061.51,1217.66 2062.09,1219.24 2062.68,1222.16 2063.27,1221.94 2063.85,1220.5 2064.44,1222.93 2065.02,1222.57 2065.61,1223.65 2066.2,1223.77 2066.78,1219.64 2067.37,1223.73 2067.96,1223.33 2068.54,1221.99 2069.13,1221.66 2069.72,1224.4 2070.3,1222.59 2070.89,1223.45 2071.48,1223.41 2072.06,1220.14 2072.65,1218.78 2073.23,1216.08 2073.82,1216.09 2074.41,1217.47 2074.99,1218.9 2075.58,1217.73 2076.17,1216.81 2076.75,1215.65 2077.34,1213.24 2077.93,1213.44 2078.51,1211.04 2079.1,1212.71 2079.68,1212.95 2080.27,1213.47 2080.86,1212.45 2081.44,1212.49 2082.03,1212.58 2082.62,1212.96 2083.2,1213.29 2083.79,1216.42 2084.38,1218.07 2084.96,1218.08 2085.55,1221.98 2086.14,1222.04 2086.72,1224.99 2087.31,1230.07 2087.89,1232.09 2088.48,1227.3 2089.07,1225.31 2089.65,1226.12 2090.24,1223.23 2090.83,1222.91 2091.41,1221.49 2092,1216.14 2092.59,1216.18 2093.17,1216.38 2093.76,1215.45 2094.35,1216.91 2094.93,1218.65 2095.52,1220.31 2096.1,1221.47 2096.69,1217.01 2097.28,1219.87 2097.86,1219.59 2098.45,1219.25 2099.04,1218.99 2099.62,1219.16 2100.21,1216.34 2100.8,1216.55 2101.38,1214.95 2101.97,1213.84 2102.55,1215.66 2103.14,1215.78 2103.73,1216.02 2104.31,1217.61 2104.9,1219.18 2105.49,1219.21 2106.07,1220.58 2106.66,1220.6 2107.25,1220.46 2107.83,1223.11 2108.42,1224.22 2109.01,1222.53 2109.59,1220.8 2110.18,1220.62 2110.76,1222.34 2111.35,1222.41 2111.94,1221.93 2112.52,1219 2113.11,1219.15 2113.7,1212.55 2114.28,1212.91 2114.87,1214.59 2115.46,1216.05 2116.04,1217.79 2116.63,1219.3 2117.22,1217.88 2117.8,1217.77 2118.39,1222.02 2118.97,1223.39 2119.56,1221.6 2120.15,1220.27 2120.73,1219.83 2121.32,1221.03 2121.91,1218.41 2122.49,1221.38 2123.08,1221.43 2123.67,1222.83 2124.25,1222.89 2124.84,1224.28 2125.42,1224.03 2126.01,1226.52 2126.6,1228.56 2127.18,1226.82 2127.77,1222.17 2128.36,1221.91 2128.94,1220.18 2129.53,1214.64 2130.12,1214.93 2130.7,1213.69 2131.29,1215.37 2131.88,1216.52 2132.46,1212.33 2133.05,1214.2 2133.63,1214.4 2134.22,1214.59 2134.81,1213.35 2135.39,1213.77 2135.98,1216.9 2136.57,1217.34 2137.15,1221.58 2137.74,1224.3 2138.33,1222.67 2138.91,1224.04 2139.5,1221.29 2140.09,1222.44 2140.67,1220.8 2141.26,1220.96 2141.84,1220.72 2142.43,1222.01 2143.02,1224.62 2143.6,1221.35 2144.19,1221.41 2144.78,1224.19 2145.36,1223.82 2145.95,1222.09 2146.54,1222.02 2147.12,1220.53 2147.71,1220.22 2148.3,1217.42 2148.88,1220.25 2149.47,1220.21 2150.05,1220.2 2150.64,1219.94 2151.23,1218.67 2151.81,1218.85 2152.4,1220.12 2152.99,1222.82 2153.57,1222.54 2154.16,1222.51 2154.75,1223.63 2155.33,1223.48 2155.92,1223.32 2156.5,1224.38 2157.09,1225.19 2157.68,1224.92 2158.26,1224.3 \"/>\n<path clip-path=\"url(#clip972)\" d=\"M986.025 1219.41 L986.612 1219.41 L987.198 1219.41 L987.785 1219.41 L988.371 1219.41 L988.957 1219.41 L989.544 1219.41 L990.13 1219.41 L990.717 1219.41 L991.303 1219.41 L991.889 1219.41 L992.476 1219.41 L993.062 1219.41 L993.649 1219.41 L994.235 1219.41 L994.822 1219.41 L995.408 1219.41 L995.994 1219.41 L996.581 1219.41 L997.167 1219.41 L997.754 1219.41 L998.34 1219.41 L998.926 1219.41 L999.513 1219.41 L1000.1 1219.41 L1000.69 1219.41 L1001.27 1219.41 L1001.86 1219.41 L1002.44 1219.41 L1003.03 1219.41 L1003.62 1219.41 L1004.2 1219.41 L1004.79 1219.41 L1005.38 1219.41 L1005.96 1219.41 L1006.55 1219.41 L1007.14 1219.41 L1007.72 1219.41 L1008.31 1219.41 L1008.9 1219.41 L1009.48 1219.41 L1010.07 1219.41 L1010.65 1219.41 L1011.24 1219.41 L1011.83 1219.41 L1012.41 1219.41 L1013 1219.41 L1013.59 1219.41 L1014.17 1219.41 L1014.76 1219.41 L1015.35 1219.41 L1015.93 1219.41 L1016.52 1219.41 L1017.11 1219.41 L1017.69 1219.41 L1018.28 1219.41 L1018.86 1219.41 L1019.45 1219.41 L1020.04 1219.41 L1020.62 1219.41 L1021.21 1219.41 L1021.8 1219.41 L1022.38 1219.41 L1022.97 1219.41 L1023.56 1219.41 L1024.14 1219.41 L1024.73 1219.41 L1025.32 1219.41 L1025.9 1219.41 L1026.49 1219.41 L1027.07 1219.41 L1027.66 1219.41 L1028.25 1219.41 L1028.83 1219.41 L1029.42 1219.41 L1030.01 1219.41 L1030.59 1219.41 L1031.18 1219.41 L1031.77 1219.41 L1032.35 1219.41 L1032.94 1219.41 L1033.52 1219.41 L1034.11 1219.41 L1034.7 1219.41 L1035.28 1219.41 L1035.87 1219.41 L1036.46 1219.41 L1037.04 1219.41 L1037.63 1219.41 L1038.22 1219.41 L1038.8 1219.41 L1039.39 1219.41 L1039.98 1219.41 L1040.56 1219.41 L1041.15 1219.41 L1041.73 1219.41 L1042.32 1219.41 L1042.91 1219.41 L1043.49 1219.41 L1044.08 1219.41 L1044.67 1219.41 L1045.25 1219.41 L1045.84 1219.41 L1046.43 1219.41 L1047.01 1219.41 L1047.6 1219.41 L1048.19 1219.41 L1048.77 1219.41 L1049.36 1219.41 L1049.94 1219.41 L1050.53 1219.41 L1051.12 1219.41 L1051.7 1219.41 L1052.29 1219.41 L1052.88 1219.41 L1053.46 1219.41 L1054.05 1219.41 L1054.64 1219.41 L1055.22 1219.41 L1055.81 1219.41 L1056.39 1219.41 L1056.98 1219.41 L1057.57 1219.41 L1058.15 1219.41 L1058.74 1219.41 L1059.33 1219.41 L1059.91 1219.41 L1060.5 1219.41 L1061.09 1219.41 L1061.67 1219.41 L1062.26 1219.41 L1062.85 1219.41 L1063.43 1219.41 L1064.02 1219.41 L1064.6 1219.41 L1065.19 1219.41 L1065.78 1219.41 L1066.36 1219.41 L1066.95 1219.41 L1067.54 1219.41 L1068.12 1219.41 L1068.71 1219.41 L1069.3 1219.41 L1069.88 1219.41 L1070.47 1219.41 L1071.06 1219.41 L1071.64 1219.41 L1072.23 1219.41 L1072.81 1219.41 L1073.4 1219.41 L1073.99 1219.41 L1074.57 1219.41 L1075.16 1219.41 L1075.75 1219.41 L1076.33 1219.41 L1076.92 1219.41 L1077.51 1219.41 L1078.09 1219.41 L1078.68 1219.41 L1079.26 1219.41 L1079.85 1219.41 L1080.44 1219.41 L1081.02 1219.41 L1081.61 1219.41 L1082.2 1219.41 L1082.78 1219.41 L1083.37 1219.41 L1083.96 1219.41 L1084.54 1219.41 L1085.13 1219.41 L1085.72 1219.41 L1086.3 1219.41 L1086.89 1219.41 L1087.47 1219.41 L1088.06 1219.41 L1088.65 1219.41 L1089.23 1219.41 L1089.82 1219.41 L1090.41 1219.41 L1090.99 1219.41 L1091.58 1219.41 L1092.17 1219.41 L1092.75 1219.41 L1093.34 1219.41 L1093.93 1219.41 L1094.51 1219.41 L1095.1 1219.41 L1095.68 1219.41 L1096.27 1219.41 L1096.86 1219.41 L1097.44 1219.41 L1098.03 1219.41 L1098.62 1219.41 L1099.2 1219.41 L1099.79 1219.41 L1100.38 1219.41 L1100.96 1219.41 L1101.55 1219.41 L1102.14 1219.41 L1102.72 1219.41 L1103.31 1219.41 L1103.89 1219.41 L1104.48 1219.41 L1105.07 1219.41 L1105.65 1219.41 L1106.24 1219.41 L1106.83 1219.41 L1107.41 1219.41 L1108 1219.41 L1108.59 1219.41 L1109.17 1219.41 L1109.76 1219.41 L1110.34 1219.41 L1110.93 1219.41 L1111.52 1219.41 L1112.1 1219.41 L1112.69 1219.41 L1113.28 1219.41 L1113.86 1219.41 L1114.45 1219.41 L1115.04 1219.41 L1115.62 1219.41 L1116.21 1219.41 L1116.8 1219.41 L1117.38 1219.41 L1117.97 1219.41 L1118.55 1219.41 L1119.14 1219.41 L1119.73 1219.41 L1120.31 1219.41 L1120.9 1219.41 L1121.49 1219.41 L1122.07 1219.41 L1122.66 1219.41 L1123.25 1219.41 L1123.83 1219.41 L1124.42 1219.41 L1125.01 1219.41 L1125.59 1219.41 L1126.18 1219.41 L1126.76 1219.41 L1127.35 1219.41 L1127.94 1219.41 L1128.52 1219.41 L1129.11 1219.41 L1129.7 1219.41 L1130.28 1219.41 L1130.87 1219.41 L1131.46 1219.41 L1132.04 1219.41 L1132.63 1219.41 L1133.21 1219.41 L1133.8 1219.41 L1134.39 1219.41 L1134.97 1219.41 L1135.56 1219.41 L1136.15 1219.41 L1136.73 1219.41 L1137.32 1219.41 L1137.91 1219.41 L1138.49 1219.41 L1139.08 1219.41 L1139.67 1219.41 L1140.25 1219.41 L1140.84 1219.41 L1141.42 1219.41 L1142.01 1219.41 L1142.6 1219.41 L1143.18 1219.41 L1143.77 1219.41 L1144.36 1219.41 L1144.94 1219.41 L1145.53 1219.41 L1146.12 1219.41 L1146.7 1219.41 L1147.29 1219.41 L1147.88 1219.41 L1148.46 1219.41 L1149.05 1219.41 L1149.63 1219.41 L1150.22 1219.41 L1150.81 1219.41 L1151.39 1219.41 L1151.98 1219.41 L1152.57 1219.41 L1153.15 1219.41 L1153.74 1219.41 L1154.33 1219.41 L1154.91 1219.41 L1155.5 1219.41 L1156.09 1219.41 L1156.67 1219.41 L1157.26 1219.41 L1157.84 1219.41 L1158.43 1219.41 L1159.02 1219.41 L1159.6 1219.41 L1160.19 1219.41 L1160.78 1219.41 L1161.36 1219.41 L1161.95 1219.41 L1162.54 1219.41 L1163.12 1219.41 L1163.71 1219.41 L1164.29 1219.41 L1164.88 1219.41 L1165.47 1219.41 L1166.05 1219.41 L1166.64 1219.41 L1167.23 1219.41 L1167.81 1219.41 L1168.4 1219.41 L1168.99 1219.41 L1169.57 1219.41 L1170.16 1219.41 L1170.75 1219.41 L1171.33 1219.41 L1171.92 1219.41 L1172.5 1219.41 L1173.09 1219.41 L1173.68 1219.41 L1174.26 1219.41 L1174.85 1219.41 L1175.44 1219.41 L1176.02 1219.41 L1176.61 1219.41 L1177.2 1219.41 L1177.78 1219.41 L1178.37 1219.41 L1178.96 1219.41 L1179.54 1219.41 L1180.13 1219.41 L1180.71 1219.41 L1181.3 1219.41 L1181.89 1219.41 L1182.47 1219.41 L1183.06 1219.41 L1183.65 1219.41 L1184.23 1219.41 L1184.82 1219.41 L1185.41 1219.41 L1185.99 1219.41 L1186.58 1219.41 L1187.16 1219.41 L1187.75 1219.41 L1188.34 1219.41 L1188.92 1219.41 L1189.51 1219.41 L1190.1 1219.41 L1190.68 1219.41 L1191.27 1219.41 L1191.86 1219.41 L1192.44 1219.41 L1193.03 1219.41 L1193.62 1219.41 L1194.2 1219.41 L1194.79 1219.41 L1195.37 1219.41 L1195.96 1219.41 L1196.55 1219.41 L1197.13 1219.41 L1197.72 1219.41 L1198.31 1219.41 L1198.89 1219.41 L1199.48 1219.41 L1200.07 1219.41 L1200.65 1219.41 L1201.24 1219.41 L1201.83 1219.41 L1202.41 1219.41 L1203 1219.41 L1203.58 1219.41 L1204.17 1219.41 L1204.76 1219.41 L1205.34 1219.41 L1205.93 1219.41 L1206.52 1219.41 L1207.1 1219.41 L1207.69 1219.41 L1208.28 1219.41 L1208.86 1219.41 L1209.45 1219.41 L1210.03 1219.41 L1210.62 1219.41 L1211.21 1219.41 L1211.79 1219.41 L1212.38 1219.41 L1212.97 1219.41 L1213.55 1219.41 L1214.14 1219.41 L1214.73 1219.41 L1215.31 1219.41 L1215.9 1219.41 L1216.49 1219.41 L1217.07 1219.41 L1217.66 1219.41 L1218.24 1219.41 L1218.83 1219.41 L1219.42 1219.41 L1220 1219.41 L1220.59 1219.41 L1221.18 1219.41 L1221.76 1219.41 L1222.35 1219.41 L1222.94 1219.41 L1223.52 1219.41 L1224.11 1219.41 L1224.7 1219.41 L1225.28 1219.41 L1225.87 1219.41 L1226.45 1219.41 L1227.04 1219.41 L1227.63 1219.41 L1228.21 1219.41 L1228.8 1219.41 L1229.39 1219.41 L1229.97 1219.41 L1230.56 1219.41 L1231.15 1219.41 L1231.73 1219.41 L1232.32 1219.41 L1232.91 1219.41 L1233.49 1219.41 L1234.08 1219.41 L1234.66 1219.41 L1235.25 1219.41 L1235.84 1219.41 L1236.42 1219.41 L1237.01 1219.41 L1237.6 1219.41 L1238.18 1219.41 L1238.77 1219.41 L1239.36 1219.41 L1239.94 1219.41 L1240.53 1219.41 L1241.11 1219.41 L1241.7 1219.41 L1242.29 1219.41 L1242.87 1219.41 L1243.46 1219.41 L1244.05 1219.41 L1244.63 1219.41 L1245.22 1219.41 L1245.81 1219.41 L1246.39 1219.41 L1246.98 1219.41 L1247.57 1219.41 L1248.15 1219.41 L1248.74 1219.41 L1249.32 1219.41 L1249.91 1219.41 L1250.5 1219.41 L1251.08 1219.41 L1251.67 1219.41 L1252.26 1219.41 L1252.84 1219.41 L1253.43 1219.41 L1254.02 1219.41 L1254.6 1219.41 L1255.19 1219.41 L1255.78 1219.41 L1256.36 1219.41 L1256.95 1219.41 L1257.53 1219.41 L1258.12 1219.41 L1258.71 1219.41 L1259.29 1219.41 L1259.88 1219.41 L1260.47 1219.41 L1261.05 1219.41 L1261.64 1219.41 L1262.23 1219.41 L1262.81 1219.41 L1263.4 1219.41 L1263.98 1219.41 L1264.57 1219.41 L1265.16 1219.41 L1265.74 1219.41 L1266.33 1219.41 L1266.92 1219.41 L1267.5 1219.41 L1268.09 1219.41 L1268.68 1219.41 L1269.26 1219.41 L1269.85 1219.41 L1270.44 1219.41 L1271.02 1219.41 L1271.61 1219.41 L1272.19 1219.41 L1272.78 1219.41 L1273.37 1219.41 L1273.95 1219.41 L1274.54 1219.41 L1275.13 1219.41 L1275.71 1219.41 L1276.3 1219.41 L1276.89 1219.41 L1277.47 1219.41 L1278.06 1219.41 L1278.65 1219.41 L1279.23 1219.41 L1279.82 1219.41 L1280.4 1219.41 L1280.99 1219.41 L1281.58 1219.41 L1282.16 1219.41 L1282.75 1219.41 L1283.34 1219.41 L1283.92 1219.41 L1284.51 1219.41 L1285.1 1219.41 L1285.68 1219.41 L1286.27 1219.41 L1286.86 1219.41 L1287.44 1219.41 L1288.03 1219.41 L1288.61 1219.41 L1289.2 1219.41 L1289.79 1219.41 L1290.37 1219.41 L1290.96 1219.41 L1291.55 1219.41 L1292.13 1219.41 L1292.72 1219.41 L1293.31 1219.41 L1293.89 1219.41 L1294.48 1219.41 L1295.06 1219.41 L1295.65 1219.41 L1296.24 1219.41 L1296.82 1219.41 L1297.41 1219.41 L1298 1219.41 L1298.58 1219.41 L1299.17 1219.41 L1299.76 1219.41 L1300.34 1219.41 L1300.93 1219.41 L1301.52 1219.41 L1302.1 1219.41 L1302.69 1219.41 L1303.27 1219.41 L1303.86 1219.41 L1304.45 1219.41 L1305.03 1219.41 L1305.62 1219.41 L1306.21 1219.41 L1306.79 1219.41 L1307.38 1219.41 L1307.97 1219.41 L1308.55 1219.41 L1309.14 1219.41 L1309.73 1219.41 L1310.31 1219.41 L1310.9 1219.41 L1311.48 1219.41 L1312.07 1219.41 L1312.66 1219.41 L1313.24 1219.41 L1313.83 1219.41 L1314.42 1219.41 L1315 1219.41 L1315.59 1219.41 L1316.18 1219.41 L1316.76 1219.41 L1317.35 1219.41 L1317.93 1219.41 L1318.52 1219.41 L1319.11 1219.41 L1319.69 1219.41 L1320.28 1219.41 L1320.87 1219.41 L1321.45 1219.41 L1322.04 1219.41 L1322.63 1219.41 L1323.21 1219.41 L1323.8 1219.41 L1324.39 1219.41 L1324.97 1219.41 L1325.56 1219.41 L1326.14 1219.41 L1326.73 1219.41 L1327.32 1219.41 L1327.9 1219.41 L1328.49 1219.41 L1329.08 1219.41 L1329.66 1219.41 L1330.25 1219.41 L1330.84 1219.41 L1331.42 1219.41 L1332.01 1219.41 L1332.6 1219.41 L1333.18 1219.41 L1333.77 1219.41 L1334.35 1219.41 L1334.94 1219.41 L1335.53 1219.41 L1336.11 1219.41 L1336.7 1219.41 L1337.29 1219.41 L1337.87 1219.41 L1338.46 1219.41 L1339.05 1219.41 L1339.63 1219.41 L1340.22 1219.41 L1340.8 1219.41 L1341.39 1219.41 L1341.98 1219.41 L1342.56 1219.41 L1343.15 1219.41 L1343.74 1219.41 L1344.32 1219.41 L1344.91 1219.41 L1345.5 1219.41 L1346.08 1219.41 L1346.67 1219.41 L1347.26 1219.41 L1347.84 1219.41 L1348.43 1219.41 L1349.01 1219.41 L1349.6 1219.41 L1350.19 1219.41 L1350.77 1219.41 L1351.36 1219.41 L1351.95 1219.41 L1352.53 1219.41 L1353.12 1219.41 L1353.71 1219.41 L1354.29 1219.41 L1354.88 1219.41 L1355.47 1219.41 L1356.05 1219.41 L1356.64 1219.41 L1357.22 1219.41 L1357.81 1219.41 L1358.4 1219.41 L1358.98 1219.41 L1359.57 1219.41 L1360.16 1219.41 L1360.74 1219.41 L1361.33 1219.41 L1361.92 1219.41 L1362.5 1219.41 L1363.09 1219.41 L1363.68 1219.41 L1364.26 1219.41 L1364.85 1219.41 L1365.43 1219.41 L1366.02 1219.41 L1366.61 1219.41 L1367.19 1219.41 L1367.78 1219.41 L1368.37 1219.41 L1368.95 1219.41 L1369.54 1219.41 L1370.13 1219.41 L1370.71 1219.41 L1371.3 1219.41 L1371.88 1219.41 L1372.47 1219.41 L1373.06 1219.41 L1373.64 1219.41 L1374.23 1219.41 L1374.82 1219.41 L1375.4 1219.41 L1375.99 1219.41 L1376.58 1219.41 L1377.16 1219.41 L1377.75 1219.41 L1378.34 1219.41 L1378.92 1219.41 L1379.51 1219.41 L1380.09 1219.41 L1380.68 1219.41 L1381.27 1219.41 L1381.85 1219.41 L1382.44 1219.41 L1383.03 1219.41 L1383.61 1219.41 L1384.2 1219.41 L1384.79 1219.41 L1385.37 1219.41 L1385.96 1219.41 L1386.55 1219.41 L1387.13 1219.41 L1387.72 1219.41 L1388.3 1219.41 L1388.89 1219.41 L1389.48 1219.41 L1390.06 1219.41 L1390.65 1219.41 L1391.24 1219.41 L1391.82 1219.41 L1392.41 1219.41 L1393 1219.41 L1393.58 1219.41 L1394.17 1219.41 L1394.75 1219.41 L1395.34 1219.41 L1395.93 1219.41 L1396.51 1219.41 L1397.1 1219.41 L1397.69 1219.41 L1398.27 1219.41 L1398.86 1219.41 L1399.45 1219.41 L1400.03 1219.41 L1400.62 1219.41 L1401.21 1219.41 L1401.79 1219.41 L1402.38 1219.41 L1402.96 1219.41 L1403.55 1219.41 L1404.14 1219.41 L1404.72 1219.41 L1405.31 1219.41 L1405.9 1219.41 L1406.48 1219.41 L1407.07 1219.41 L1407.66 1219.41 L1408.24 1219.41 L1408.83 1219.41 L1409.42 1219.41 L1410 1219.41 L1410.59 1219.41 L1411.17 1219.41 L1411.76 1219.41 L1412.35 1219.41 L1412.93 1219.41 L1413.52 1219.41 L1414.11 1219.41 L1414.69 1219.41 L1415.28 1219.41 L1415.87 1219.41 L1416.45 1219.41 L1417.04 1219.41 L1417.63 1219.41 L1418.21 1219.41 L1418.8 1219.41 L1419.38 1219.41 L1419.97 1219.41 L1420.56 1219.41 L1421.14 1219.41 L1421.73 1219.41 L1422.32 1219.41 L1422.9 1219.41 L1423.49 1219.41 L1424.08 1219.41 L1424.66 1219.41 L1425.25 1219.41 L1425.83 1219.41 L1426.42 1219.41 L1427.01 1219.41 L1427.59 1219.41 L1428.18 1219.41 L1428.77 1219.41 L1429.35 1219.41 L1429.94 1219.41 L1430.53 1219.41 L1431.11 1219.41 L1431.7 1219.41 L1432.29 1219.41 L1432.87 1219.41 L1433.46 1219.41 L1434.04 1219.41 L1434.63 1219.41 L1435.22 1219.41 L1435.8 1219.41 L1436.39 1219.41 L1436.98 1219.41 L1437.56 1219.41 L1438.15 1219.41 L1438.74 1219.41 L1439.32 1219.41 L1439.91 1219.41 L1440.5 1219.41 L1441.08 1219.41 L1441.67 1219.41 L1442.25 1219.41 L1442.84 1219.41 L1443.43 1219.41 L1444.01 1219.41 L1444.6 1219.41 L1445.19 1219.41 L1445.77 1219.41 L1446.36 1219.41 L1446.95 1219.41 L1447.53 1219.41 L1448.12 1219.41 L1448.7 1219.41 L1449.29 1219.41 L1449.88 1219.41 L1450.46 1219.41 L1451.05 1219.41 L1451.64 1219.41 L1452.22 1219.41 L1452.81 1219.41 L1453.4 1219.41 L1453.98 1219.41 L1454.57 1219.41 L1455.16 1219.41 L1455.74 1219.41 L1456.33 1219.41 L1456.91 1219.41 L1457.5 1219.41 L1458.09 1219.41 L1458.67 1219.41 L1459.26 1219.41 L1459.85 1219.41 L1460.43 1219.41 L1461.02 1219.41 L1461.61 1219.41 L1462.19 1219.41 L1462.78 1219.41 L1463.37 1219.41 L1463.95 1219.41 L1464.54 1219.41 L1465.12 1219.41 L1465.71 1219.41 L1466.3 1219.41 L1466.88 1219.41 L1467.47 1219.41 L1468.06 1219.41 L1468.64 1219.41 L1469.23 1219.41 L1469.82 1219.41 L1470.4 1219.41 L1470.99 1219.41 L1471.57 1219.41 L1472.16 1219.41 L1472.75 1219.41 L1473.33 1219.41 L1473.92 1219.41 L1474.51 1219.41 L1475.09 1219.41 L1475.68 1219.41 L1476.27 1219.41 L1476.85 1219.41 L1477.44 1219.41 L1478.03 1219.41 L1478.61 1219.41 L1479.2 1219.41 L1479.78 1219.41 L1480.37 1219.41 L1480.96 1219.41 L1481.54 1219.41 L1482.13 1219.41 L1482.72 1219.41 L1483.3 1219.41 L1483.89 1219.41 L1484.48 1219.41 L1485.06 1219.41 L1485.65 1219.41 L1486.24 1219.41 L1486.82 1219.41 L1487.41 1219.41 L1487.99 1219.41 L1488.58 1219.41 L1489.17 1219.41 L1489.75 1219.41 L1490.34 1219.41 L1490.93 1219.41 L1491.51 1219.41 L1492.1 1219.41 L1492.69 1219.41 L1493.27 1219.41 L1493.86 1219.41 L1494.45 1219.41 L1495.03 1219.41 L1495.62 1219.41 L1496.2 1219.41 L1496.79 1219.41 L1497.38 1219.41 L1497.96 1219.41 L1498.55 1219.41 L1499.14 1219.41 L1499.72 1219.41 L1500.31 1219.41 L1500.9 1219.41 L1501.48 1219.41 L1502.07 1219.41 L1502.65 1219.41 L1503.24 1219.41 L1503.83 1219.41 L1504.41 1219.41 L1505 1219.41 L1505.59 1219.41 L1506.17 1219.41 L1506.76 1219.41 L1507.35 1219.41 L1507.93 1219.41 L1508.52 1219.41 L1509.11 1219.41 L1509.69 1219.41 L1510.28 1219.41 L1510.86 1219.41 L1511.45 1219.41 L1512.04 1219.41 L1512.62 1219.41 L1513.21 1219.41 L1513.8 1219.41 L1514.38 1219.41 L1514.97 1219.41 L1515.56 1219.41 L1516.14 1219.41 L1516.73 1219.41 L1517.32 1219.41 L1517.9 1219.41 L1518.49 1219.41 L1519.07 1219.41 L1519.66 1219.41 L1520.25 1219.41 L1520.83 1219.41 L1521.42 1219.41 L1522.01 1219.41 L1522.59 1219.41 L1523.18 1219.41 L1523.77 1219.41 L1524.35 1219.41 L1524.94 1219.41 L1525.52 1219.41 L1526.11 1219.41 L1526.7 1219.41 L1527.28 1219.41 L1527.87 1219.41 L1528.46 1219.41 L1529.04 1219.41 L1529.63 1219.41 L1530.22 1219.41 L1530.8 1219.41 L1531.39 1219.41 L1531.98 1219.41 L1532.56 1219.41 L1533.15 1219.41 L1533.73 1219.41 L1534.32 1219.41 L1534.91 1219.41 L1535.49 1219.41 L1536.08 1219.41 L1536.67 1219.41 L1537.25 1219.41 L1537.84 1219.41 L1538.43 1219.41 L1539.01 1219.41 L1539.6 1219.41 L1540.19 1219.41 L1540.77 1219.41 L1541.36 1219.41 L1541.94 1219.41 L1542.53 1219.41 L1543.12 1219.41 L1543.7 1219.41 L1544.29 1219.41 L1544.88 1219.41 L1545.46 1219.41 L1546.05 1219.41 L1546.64 1219.41 L1547.22 1219.41 L1547.81 1219.41 L1548.4 1219.41 L1548.98 1219.41 L1549.57 1219.41 L1550.15 1219.41 L1550.74 1219.41 L1551.33 1219.41 L1551.91 1219.41 L1552.5 1219.41 L1553.09 1219.41 L1553.67 1219.41 L1554.26 1219.41 L1554.85 1219.41 L1555.43 1219.41 L1556.02 1219.41 L1556.6 1219.41 L1557.19 1219.41 L1557.78 1219.41 L1558.36 1219.41 L1558.95 1219.41 L1559.54 1219.41 L1560.12 1219.41 L1560.71 1219.41 L1561.3 1219.41 L1561.88 1219.41 L1562.47 1219.41 L1563.06 1219.41 L1563.64 1219.41 L1564.23 1219.41 L1564.81 1219.41 L1565.4 1219.41 L1565.99 1219.41 L1566.57 1219.41 L1567.16 1219.41 L1567.75 1219.41 L1568.33 1219.41 L1568.92 1219.41 L1569.51 1219.41 L1570.09 1219.41 L1570.68 1219.41 L1571.27 1219.41 L1571.85 1219.41 L1572.44 1219.41 L1573.02 1219.41 L1573.61 1219.41 L1574.2 1219.41 L1574.78 1219.41 L1575.37 1219.41 L1575.96 1219.41 L1576.54 1219.41 L1577.13 1219.41 L1577.72 1219.41 L1578.3 1219.41 L1578.89 1219.41 L1579.47 1219.41 L1580.06 1219.41 L1580.65 1219.41 L1581.23 1219.41 L1581.82 1219.41 L1582.41 1219.41 L1582.99 1219.41 L1583.58 1219.41 L1584.17 1219.41 L1584.75 1219.41 L1585.34 1219.41 L1585.93 1219.41 L1586.51 1219.41 L1587.1 1219.41 L1587.68 1219.41 L1588.27 1219.41 L1588.86 1219.41 L1589.44 1219.41 L1590.03 1219.41 L1590.62 1219.41 L1591.2 1219.41 L1591.79 1219.41 L1592.38 1219.41 L1592.96 1219.41 L1593.55 1219.41 L1594.14 1219.41 L1594.72 1219.41 L1595.31 1219.41 L1595.89 1219.41 L1596.48 1219.41 L1597.07 1219.41 L1597.65 1219.41 L1598.24 1219.41 L1598.83 1219.41 L1599.41 1219.41 L1600 1219.41 L1600.59 1219.41 L1601.17 1219.41 L1601.76 1219.41 L1602.34 1219.41 L1602.93 1219.41 L1603.52 1219.41 L1604.1 1219.41 L1604.69 1219.41 L1605.28 1219.41 L1605.86 1219.41 L1606.45 1219.41 L1607.04 1219.41 L1607.62 1219.41 L1608.21 1219.41 L1608.8 1219.41 L1609.38 1219.41 L1609.97 1219.41 L1610.55 1219.41 L1611.14 1219.41 L1611.73 1219.41 L1612.31 1219.41 L1612.9 1219.41 L1613.49 1219.41 L1614.07 1219.41 L1614.66 1219.41 L1615.25 1219.41 L1615.83 1219.41 L1616.42 1219.41 L1617.01 1219.41 L1617.59 1219.41 L1618.18 1219.41 L1618.76 1219.41 L1619.35 1219.41 L1619.94 1219.41 L1620.52 1219.41 L1621.11 1219.41 L1621.7 1219.41 L1622.28 1219.41 L1622.87 1219.41 L1623.46 1219.41 L1624.04 1219.41 L1624.63 1219.41 L1625.22 1219.41 L1625.8 1219.41 L1626.39 1219.41 L1626.97 1219.41 L1627.56 1219.41 L1628.15 1219.41 L1628.73 1219.41 L1629.32 1219.41 L1629.91 1219.41 L1630.49 1219.41 L1631.08 1219.41 L1631.67 1219.41 L1632.25 1219.41 L1632.84 1219.41 L1633.42 1219.41 L1634.01 1219.41 L1634.6 1219.41 L1635.18 1219.41 L1635.77 1219.41 L1636.36 1219.41 L1636.94 1219.41 L1637.53 1219.41 L1638.12 1219.41 L1638.7 1219.41 L1639.29 1219.41 L1639.88 1219.41 L1640.46 1219.41 L1641.05 1219.41 L1641.63 1219.41 L1642.22 1219.41 L1642.81 1219.41 L1643.39 1219.41 L1643.98 1219.41 L1644.57 1219.41 L1645.15 1219.41 L1645.74 1219.41 L1646.33 1219.41 L1646.91 1219.41 L1647.5 1219.41 L1648.09 1219.41 L1648.67 1219.41 L1649.26 1219.41 L1649.84 1219.41 L1650.43 1219.41 L1651.02 1219.41 L1651.6 1219.41 L1652.19 1219.41 L1652.78 1219.41 L1653.36 1219.41 L1653.95 1219.41 L1654.54 1219.41 L1655.12 1219.41 L1655.71 1219.41 L1656.29 1219.41 L1656.88 1219.41 L1657.47 1219.41 L1658.05 1219.41 L1658.64 1219.41 L1659.23 1219.41 L1659.81 1219.41 L1660.4 1219.41 L1660.99 1219.41 L1661.57 1219.41 L1662.16 1219.41 L1662.75 1219.41 L1663.33 1219.41 L1663.92 1219.41 L1664.5 1219.41 L1665.09 1219.41 L1665.68 1219.41 L1666.26 1219.41 L1666.85 1219.41 L1667.44 1219.41 L1668.02 1219.41 L1668.61 1219.41 L1669.2 1219.41 L1669.78 1219.41 L1670.37 1219.41 L1670.96 1219.41 L1671.54 1219.41 L1672.13 1219.41 L1672.71 1219.41 L1673.3 1219.41 L1673.89 1219.41 L1674.47 1219.41 L1675.06 1219.41 L1675.65 1219.41 L1676.23 1219.41 L1676.82 1219.41 L1677.41 1219.41 L1677.99 1219.41 L1678.58 1219.41 L1679.17 1219.41 L1679.75 1219.41 L1680.34 1219.41 L1680.92 1219.41 L1681.51 1219.41 L1682.1 1219.41 L1682.68 1219.41 L1683.27 1219.41 L1683.86 1219.41 L1684.44 1219.41 L1685.03 1219.41 L1685.62 1219.41 L1686.2 1219.41 L1686.79 1219.41 L1687.37 1219.41 L1687.96 1219.41 L1688.55 1219.41 L1689.13 1219.41 L1689.72 1219.41 L1690.31 1219.41 L1690.89 1219.41 L1691.48 1219.41 L1692.07 1219.41 L1692.65 1219.41 L1693.24 1219.41 L1693.83 1219.41 L1694.41 1219.41 L1695 1219.41 L1695.58 1219.41 L1696.17 1219.41 L1696.76 1219.41 L1697.34 1219.41 L1697.93 1219.41 L1698.52 1219.41 L1699.1 1219.41 L1699.69 1219.41 L1700.28 1219.41 L1700.86 1219.41 L1701.45 1219.41 L1702.04 1219.41 L1702.62 1219.41 L1703.21 1219.41 L1703.79 1219.41 L1704.38 1219.41 L1704.97 1219.41 L1705.55 1219.41 L1706.14 1219.41 L1706.73 1219.41 L1707.31 1219.41 L1707.9 1219.41 L1708.49 1219.41 L1709.07 1219.41 L1709.66 1219.41 L1710.24 1219.41 L1710.83 1219.41 L1711.42 1219.41 L1712 1219.41 L1712.59 1219.41 L1713.18 1219.41 L1713.76 1219.41 L1714.35 1219.41 L1714.94 1219.41 L1715.52 1219.41 L1716.11 1219.41 L1716.7 1219.41 L1717.28 1219.41 L1717.87 1219.41 L1718.45 1219.41 L1719.04 1219.41 L1719.63 1219.41 L1720.21 1219.41 L1720.8 1219.41 L1721.39 1219.41 L1721.97 1219.41 L1722.56 1219.41 L1723.15 1219.41 L1723.73 1219.41 L1724.32 1219.41 L1724.91 1219.41 L1725.49 1219.41 L1726.08 1219.41 L1726.66 1219.41 L1727.25 1219.41 L1727.84 1219.41 L1728.42 1219.41 L1729.01 1219.41 L1729.6 1219.41 L1730.18 1219.41 L1730.77 1219.41 L1731.36 1219.41 L1731.94 1219.41 L1732.53 1219.41 L1733.11 1219.41 L1733.7 1219.41 L1734.29 1219.41 L1734.87 1219.41 L1735.46 1219.41 L1736.05 1219.41 L1736.63 1219.41 L1737.22 1219.41 L1737.81 1219.41 L1738.39 1219.41 L1738.98 1219.41 L1739.57 1219.41 L1740.15 1219.41 L1740.74 1219.41 L1741.32 1219.41 L1741.91 1219.41 L1742.5 1219.41 L1743.08 1219.41 L1743.67 1219.41 L1744.26 1219.41 L1744.84 1219.41 L1745.43 1219.41 L1746.02 1219.41 L1746.6 1219.41 L1747.19 1219.41 L1747.78 1219.41 L1748.36 1219.41 L1748.95 1219.41 L1749.53 1219.41 L1750.12 1219.41 L1750.71 1219.41 L1751.29 1219.41 L1751.88 1219.41 L1752.47 1219.41 L1753.05 1219.41 L1753.64 1219.41 L1754.23 1219.41 L1754.81 1219.41 L1755.4 1219.41 L1755.99 1219.41 L1756.57 1219.41 L1757.16 1219.41 L1757.74 1219.41 L1758.33 1219.41 L1758.92 1219.41 L1759.5 1219.41 L1760.09 1219.41 L1760.68 1219.41 L1761.26 1219.41 L1761.85 1219.41 L1762.44 1219.41 L1763.02 1219.41 L1763.61 1219.41 L1764.19 1219.41 L1764.78 1219.41 L1765.37 1219.41 L1765.95 1219.41 L1766.54 1219.41 L1767.13 1219.41 L1767.71 1219.41 L1768.3 1219.41 L1768.89 1219.41 L1769.47 1219.41 L1770.06 1219.41 L1770.65 1219.41 L1771.23 1219.41 L1771.82 1219.41 L1772.4 1219.41 L1772.99 1219.41 L1773.58 1219.41 L1774.16 1219.41 L1774.75 1219.41 L1775.34 1219.41 L1775.92 1219.41 L1776.51 1219.41 L1777.1 1219.41 L1777.68 1219.41 L1778.27 1219.41 L1778.86 1219.41 L1779.44 1219.41 L1780.03 1219.41 L1780.61 1219.41 L1781.2 1219.41 L1781.79 1219.41 L1782.37 1219.41 L1782.96 1219.41 L1783.55 1219.41 L1784.13 1219.41 L1784.72 1219.41 L1785.31 1219.41 L1785.89 1219.41 L1786.48 1219.41 L1787.06 1219.41 L1787.65 1219.41 L1788.24 1219.41 L1788.82 1219.41 L1789.41 1219.41 L1790 1219.41 L1790.58 1219.41 L1791.17 1219.41 L1791.76 1219.41 L1792.34 1219.41 L1792.93 1219.41 L1793.52 1219.41 L1794.1 1219.41 L1794.69 1219.41 L1795.27 1219.41 L1795.86 1219.41 L1796.45 1219.41 L1797.03 1219.41 L1797.62 1219.41 L1798.21 1219.41 L1798.79 1219.41 L1799.38 1219.41 L1799.97 1219.41 L1800.55 1219.41 L1801.14 1219.41 L1801.73 1219.41 L1802.31 1219.41 L1802.9 1219.41 L1803.48 1219.41 L1804.07 1219.41 L1804.66 1219.41 L1805.24 1219.41 L1805.83 1219.41 L1806.42 1219.41 L1807 1219.41 L1807.59 1219.41 L1808.18 1219.41 L1808.76 1219.41 L1809.35 1219.41 L1809.94 1219.41 L1810.52 1219.41 L1811.11 1219.41 L1811.69 1219.41 L1812.28 1219.41 L1812.87 1219.41 L1813.45 1219.41 L1814.04 1219.41 L1814.63 1219.41 L1815.21 1219.41 L1815.8 1219.41 L1816.39 1219.41 L1816.97 1219.41 L1817.56 1219.41 L1818.14 1219.41 L1818.73 1219.41 L1819.32 1219.41 L1819.9 1219.41 L1820.49 1219.41 L1821.08 1219.41 L1821.66 1219.41 L1822.25 1219.41 L1822.84 1219.41 L1823.42 1219.41 L1824.01 1219.41 L1824.6 1219.41 L1825.18 1219.41 L1825.77 1219.41 L1826.35 1219.41 L1826.94 1219.41 L1827.53 1219.41 L1828.11 1219.41 L1828.7 1219.41 L1829.29 1219.41 L1829.87 1219.41 L1830.46 1219.41 L1831.05 1219.41 L1831.63 1219.41 L1832.22 1219.41 L1832.81 1219.41 L1833.39 1219.41 L1833.98 1219.41 L1834.56 1219.41 L1835.15 1219.41 L1835.74 1219.41 L1836.32 1219.41 L1836.91 1219.41 L1837.5 1219.41 L1838.08 1219.41 L1838.67 1219.41 L1839.26 1219.41 L1839.84 1219.41 L1840.43 1219.41 L1841.01 1219.41 L1841.6 1219.41 L1842.19 1219.41 L1842.77 1219.41 L1843.36 1219.41 L1843.95 1219.41 L1844.53 1219.41 L1845.12 1219.41 L1845.71 1219.41 L1846.29 1219.41 L1846.88 1219.41 L1847.47 1219.41 L1848.05 1219.41 L1848.64 1219.41 L1849.22 1219.41 L1849.81 1219.41 L1850.4 1219.41 L1850.98 1219.41 L1851.57 1219.41 L1852.16 1219.41 L1852.74 1219.41 L1853.33 1219.41 L1853.92 1219.41 L1854.5 1219.41 L1855.09 1219.41 L1855.68 1219.41 L1856.26 1219.41 L1856.85 1219.41 L1857.43 1219.41 L1858.02 1219.41 L1858.61 1219.41 L1859.19 1219.41 L1859.78 1219.41 L1860.37 1219.41 L1860.95 1219.41 L1861.54 1219.41 L1862.13 1219.41 L1862.71 1219.41 L1863.3 1219.41 L1863.88 1219.41 L1864.47 1219.41 L1865.06 1219.41 L1865.64 1219.41 L1866.23 1219.41 L1866.82 1219.41 L1867.4 1219.41 L1867.99 1219.41 L1868.58 1219.41 L1869.16 1219.41 L1869.75 1219.41 L1870.34 1219.41 L1870.92 1219.41 L1871.51 1219.41 L1872.09 1219.41 L1872.68 1219.41 L1873.27 1219.41 L1873.85 1219.41 L1874.44 1219.41 L1875.03 1219.41 L1875.61 1219.41 L1876.2 1219.41 L1876.79 1219.41 L1877.37 1219.41 L1877.96 1219.41 L1878.55 1219.41 L1879.13 1219.41 L1879.72 1219.41 L1880.3 1219.41 L1880.89 1219.41 L1881.48 1219.41 L1882.06 1219.41 L1882.65 1219.41 L1883.24 1219.41 L1883.82 1219.41 L1884.41 1219.41 L1885 1219.41 L1885.58 1219.41 L1886.17 1219.41 L1886.76 1219.41 L1887.34 1219.41 L1887.93 1219.41 L1888.51 1219.41 L1889.1 1219.41 L1889.69 1219.41 L1890.27 1219.41 L1890.86 1219.41 L1891.45 1219.41 L1892.03 1219.41 L1892.62 1219.41 L1893.21 1219.41 L1893.79 1219.41 L1894.38 1219.41 L1894.96 1219.41 L1895.55 1219.41 L1896.14 1219.41 L1896.72 1219.41 L1897.31 1219.41 L1897.9 1219.41 L1898.48 1219.41 L1899.07 1219.41 L1899.66 1219.41 L1900.24 1219.41 L1900.83 1219.41 L1901.42 1219.41 L1902 1219.41 L1902.59 1219.41 L1903.17 1219.41 L1903.76 1219.41 L1904.35 1219.41 L1904.93 1219.41 L1905.52 1219.41 L1906.11 1219.41 L1906.69 1219.41 L1907.28 1219.41 L1907.87 1219.41 L1908.45 1219.41 L1909.04 1219.41 L1909.63 1219.41 L1910.21 1219.41 L1910.8 1219.41 L1911.38 1219.41 L1911.97 1219.41 L1912.56 1219.41 L1913.14 1219.41 L1913.73 1219.41 L1914.32 1219.41 L1914.9 1219.41 L1915.49 1219.41 L1916.08 1219.41 L1916.66 1219.41 L1917.25 1219.41 L1917.83 1219.41 L1918.42 1219.41 L1919.01 1219.41 L1919.59 1219.41 L1920.18 1219.41 L1920.77 1219.41 L1921.35 1219.41 L1921.94 1219.41 L1922.53 1219.41 L1923.11 1219.41 L1923.7 1219.41 L1924.29 1219.41 L1924.87 1219.41 L1925.46 1219.41 L1926.04 1219.41 L1926.63 1219.41 L1927.22 1219.41 L1927.8 1219.41 L1928.39 1219.41 L1928.98 1219.41 L1929.56 1219.41 L1930.15 1219.41 L1930.74 1219.41 L1931.32 1219.41 L1931.91 1219.41 L1932.5 1219.41 L1933.08 1219.41 L1933.67 1219.41 L1934.25 1219.41 L1934.84 1219.41 L1935.43 1219.41 L1936.01 1219.41 L1936.6 1219.41 L1937.19 1219.41 L1937.77 1219.41 L1938.36 1219.41 L1938.95 1219.41 L1939.53 1219.41 L1940.12 1219.41 L1940.71 1219.41 L1941.29 1219.41 L1941.88 1219.41 L1942.46 1219.41 L1943.05 1219.41 L1943.64 1219.41 L1944.22 1219.41 L1944.81 1219.41 L1945.4 1219.41 L1945.98 1219.41 L1946.57 1219.41 L1947.16 1219.41 L1947.74 1219.41 L1948.33 1219.41 L1948.91 1219.41 L1949.5 1219.41 L1950.09 1219.41 L1950.67 1219.41 L1951.26 1219.41 L1951.85 1219.41 L1952.43 1219.41 L1953.02 1219.41 L1953.61 1219.41 L1954.19 1219.41 L1954.78 1219.41 L1955.37 1219.41 L1955.95 1219.41 L1956.54 1219.41 L1957.12 1219.41 L1957.71 1219.41 L1958.3 1219.41 L1958.88 1219.41 L1959.47 1219.41 L1960.06 1219.41 L1960.64 1219.41 L1961.23 1219.41 L1961.82 1219.41 L1962.4 1219.41 L1962.99 1219.41 L1963.58 1219.41 L1964.16 1219.41 L1964.75 1219.41 L1965.33 1219.41 L1965.92 1219.41 L1966.51 1219.41 L1967.09 1219.41 L1967.68 1219.41 L1968.27 1219.41 L1968.85 1219.41 L1969.44 1219.41 L1970.03 1219.41 L1970.61 1219.41 L1971.2 1219.41 L1971.78 1219.41 L1972.37 1219.41 L1972.96 1219.41 L1973.54 1219.41 L1974.13 1219.41 L1974.72 1219.41 L1975.3 1219.41 L1975.89 1219.41 L1976.48 1219.41 L1977.06 1219.41 L1977.65 1219.41 L1978.24 1219.41 L1978.82 1219.41 L1979.41 1219.41 L1979.99 1219.41 L1980.58 1219.41 L1981.17 1219.41 L1981.75 1219.41 L1982.34 1219.41 L1982.93 1219.41 L1983.51 1219.41 L1984.1 1219.41 L1984.69 1219.41 L1985.27 1219.41 L1985.86 1219.41 L1986.45 1219.41 L1987.03 1219.41 L1987.62 1219.41 L1988.2 1219.41 L1988.79 1219.41 L1989.38 1219.41 L1989.96 1219.41 L1990.55 1219.41 L1991.14 1219.41 L1991.72 1219.41 L1992.31 1219.41 L1992.9 1219.41 L1993.48 1219.41 L1994.07 1219.41 L1994.65 1219.41 L1995.24 1219.41 L1995.83 1219.41 L1996.41 1219.41 L1997 1219.41 L1997.59 1219.41 L1998.17 1219.41 L1998.76 1219.41 L1999.35 1219.41 L1999.93 1219.41 L2000.52 1219.41 L2001.11 1219.41 L2001.69 1219.41 L2002.28 1219.41 L2002.86 1219.41 L2003.45 1219.41 L2004.04 1219.41 L2004.62 1219.41 L2005.21 1219.41 L2005.8 1219.41 L2006.38 1219.41 L2006.97 1219.41 L2007.56 1219.41 L2008.14 1219.41 L2008.73 1219.41 L2009.32 1219.41 L2009.9 1219.41 L2010.49 1219.41 L2011.07 1219.41 L2011.66 1219.41 L2012.25 1219.41 L2012.83 1219.41 L2013.42 1219.41 L2014.01 1219.41 L2014.59 1219.41 L2015.18 1219.41 L2015.77 1219.41 L2016.35 1219.41 L2016.94 1219.41 L2017.53 1219.41 L2018.11 1219.41 L2018.7 1219.41 L2019.28 1219.41 L2019.87 1219.41 L2020.46 1219.41 L2021.04 1219.41 L2021.63 1219.41 L2022.22 1219.41 L2022.8 1219.41 L2023.39 1219.41 L2023.98 1219.41 L2024.56 1219.41 L2025.15 1219.41 L2025.73 1219.41 L2026.32 1219.41 L2026.91 1219.41 L2027.49 1219.41 L2028.08 1219.41 L2028.67 1219.41 L2029.25 1219.41 L2029.84 1219.41 L2030.43 1219.41 L2031.01 1219.41 L2031.6 1219.41 L2032.19 1219.41 L2032.77 1219.41 L2033.36 1219.41 L2033.94 1219.41 L2034.53 1219.41 L2035.12 1219.41 L2035.7 1219.41 L2036.29 1219.41 L2036.88 1219.41 L2037.46 1219.41 L2038.05 1219.41 L2038.64 1219.41 L2039.22 1219.41 L2039.81 1219.41 L2040.4 1219.41 L2040.98 1219.41 L2041.57 1219.41 L2042.15 1219.41 L2042.74 1219.41 L2043.33 1219.41 L2043.91 1219.41 L2044.5 1219.41 L2045.09 1219.41 L2045.67 1219.41 L2046.26 1219.41 L2046.85 1219.41 L2047.43 1219.41 L2048.02 1219.41 L2048.6 1219.41 L2049.19 1219.41 L2049.78 1219.41 L2050.36 1219.41 L2050.95 1219.41 L2051.54 1219.41 L2052.12 1219.41 L2052.71 1219.41 L2053.3 1219.41 L2053.88 1219.41 L2054.47 1219.41 L2055.06 1219.41 L2055.64 1219.41 L2056.23 1219.41 L2056.81 1219.41 L2057.4 1219.41 L2057.99 1219.41 L2058.57 1219.41 L2059.16 1219.41 L2059.75 1219.41 L2060.33 1219.41 L2060.92 1219.41 L2061.51 1219.41 L2062.09 1219.41 L2062.68 1219.41 L2063.27 1219.41 L2063.85 1219.41 L2064.44 1219.41 L2065.02 1219.41 L2065.61 1219.41 L2066.2 1219.41 L2066.78 1219.41 L2067.37 1219.41 L2067.96 1219.41 L2068.54 1219.41 L2069.13 1219.41 L2069.72 1219.41 L2070.3 1219.41 L2070.89 1219.41 L2071.48 1219.41 L2072.06 1219.41 L2072.65 1219.41 L2073.23 1219.41 L2073.82 1219.41 L2074.41 1219.41 L2074.99 1219.41 L2075.58 1219.41 L2076.17 1219.41 L2076.75 1219.41 L2077.34 1219.41 L2077.93 1219.41 L2078.51 1219.41 L2079.1 1219.41 L2079.68 1219.41 L2080.27 1219.41 L2080.86 1219.41 L2081.44 1219.41 L2082.03 1219.41 L2082.62 1219.41 L2083.2 1219.41 L2083.79 1219.41 L2084.38 1219.41 L2084.96 1219.41 L2085.55 1219.41 L2086.14 1219.41 L2086.72 1219.41 L2087.31 1219.41 L2087.89 1219.41 L2088.48 1219.41 L2089.07 1219.41 L2089.65 1219.41 L2090.24 1219.41 L2090.83 1219.41 L2091.41 1219.41 L2092 1219.41 L2092.59 1219.41 L2093.17 1219.41 L2093.76 1219.41 L2094.35 1219.41 L2094.93 1219.41 L2095.52 1219.41 L2096.1 1219.41 L2096.69 1219.41 L2097.28 1219.41 L2097.86 1219.41 L2098.45 1219.41 L2099.04 1219.41 L2099.62 1219.41 L2100.21 1219.41 L2100.8 1219.41 L2101.38 1219.41 L2101.97 1219.41 L2102.55 1219.41 L2103.14 1219.41 L2103.73 1219.41 L2104.31 1219.41 L2104.9 1219.41 L2105.49 1219.41 L2106.07 1219.41 L2106.66 1219.41 L2107.25 1219.41 L2107.83 1219.41 L2108.42 1219.41 L2109.01 1219.41 L2109.59 1219.41 L2110.18 1219.41 L2110.76 1219.41 L2111.35 1219.41 L2111.94 1219.41 L2112.52 1219.41 L2113.11 1219.41 L2113.7 1219.41 L2114.28 1219.41 L2114.87 1219.41 L2115.46 1219.41 L2116.04 1219.41 L2116.63 1219.41 L2117.22 1219.41 L2117.8 1219.41 L2118.39 1219.41 L2118.97 1219.41 L2119.56 1219.41 L2120.15 1219.41 L2120.73 1219.41 L2121.32 1219.41 L2121.91 1219.41 L2122.49 1219.41 L2123.08 1219.41 L2123.67 1219.41 L2124.25 1219.41 L2124.84 1219.41 L2125.42 1219.41 L2126.01 1219.41 L2126.6 1219.41 L2127.18 1219.41 L2127.77 1219.41 L2128.36 1219.41 L2128.94 1219.41 L2129.53 1219.41 L2130.12 1219.41 L2130.7 1219.41 L2131.29 1219.41 L2131.88 1219.41 L2132.46 1219.41 L2133.05 1219.41 L2133.63 1219.41 L2134.22 1219.41 L2134.81 1219.41 L2135.39 1219.41 L2135.98 1219.41 L2136.57 1219.41 L2137.15 1219.41 L2137.74 1219.41 L2138.33 1219.41 L2138.91 1219.41 L2139.5 1219.41 L2140.09 1219.41 L2140.67 1219.41 L2141.26 1219.41 L2141.84 1219.41 L2142.43 1219.41 L2143.02 1219.41 L2143.6 1219.41 L2144.19 1219.41 L2144.78 1219.41 L2145.36 1219.41 L2145.95 1219.41 L2146.54 1219.41 L2147.12 1219.41 L2147.71 1219.41 L2148.3 1219.41 L2148.88 1219.41 L2149.47 1219.41 L2150.05 1219.41 L2150.64 1219.41 L2151.23 1219.41 L2151.81 1219.41 L2152.4 1219.41 L2152.99 1219.41 L2153.57 1219.41 L2154.16 1219.41 L2154.75 1219.41 L2155.33 1219.41 L2155.92 1219.41 L2156.5 1219.41 L2157.09 1219.41 L2157.68 1219.41 L2158.26 1219.41 L2158.26 1218.67 L2157.68 1218.67 L2157.09 1218.67 L2156.5 1218.67 L2155.92 1218.67 L2155.33 1218.67 L2154.75 1218.67 L2154.16 1218.67 L2153.57 1218.67 L2152.99 1218.67 L2152.4 1218.67 L2151.81 1218.67 L2151.23 1218.67 L2150.64 1218.67 L2150.05 1218.67 L2149.47 1218.67 L2148.88 1218.67 L2148.3 1218.67 L2147.71 1218.67 L2147.12 1218.67 L2146.54 1218.67 L2145.95 1218.67 L2145.36 1218.67 L2144.78 1218.67 L2144.19 1218.67 L2143.6 1218.67 L2143.02 1218.67 L2142.43 1218.67 L2141.84 1218.67 L2141.26 1218.67 L2140.67 1218.67 L2140.09 1218.67 L2139.5 1218.67 L2138.91 1218.67 L2138.33 1218.67 L2137.74 1218.67 L2137.15 1218.67 L2136.57 1218.67 L2135.98 1218.67 L2135.39 1218.67 L2134.81 1218.67 L2134.22 1218.67 L2133.63 1218.67 L2133.05 1218.67 L2132.46 1218.67 L2131.88 1218.67 L2131.29 1218.67 L2130.7 1218.67 L2130.12 1218.67 L2129.53 1218.67 L2128.94 1218.67 L2128.36 1218.67 L2127.77 1218.67 L2127.18 1218.67 L2126.6 1218.67 L2126.01 1218.67 L2125.42 1218.67 L2124.84 1218.67 L2124.25 1218.67 L2123.67 1218.67 L2123.08 1218.67 L2122.49 1218.67 L2121.91 1218.67 L2121.32 1218.67 L2120.73 1218.67 L2120.15 1218.67 L2119.56 1218.67 L2118.97 1218.67 L2118.39 1218.67 L2117.8 1218.67 L2117.22 1218.67 L2116.63 1218.67 L2116.04 1218.67 L2115.46 1218.67 L2114.87 1218.67 L2114.28 1218.67 L2113.7 1218.67 L2113.11 1218.67 L2112.52 1218.67 L2111.94 1218.67 L2111.35 1218.67 L2110.76 1218.67 L2110.18 1218.67 L2109.59 1218.67 L2109.01 1218.67 L2108.42 1218.67 L2107.83 1218.67 L2107.25 1218.67 L2106.66 1218.67 L2106.07 1218.67 L2105.49 1218.67 L2104.9 1218.67 L2104.31 1218.67 L2103.73 1218.67 L2103.14 1218.67 L2102.55 1218.67 L2101.97 1218.67 L2101.38 1218.67 L2100.8 1218.67 L2100.21 1218.67 L2099.62 1218.67 L2099.04 1218.67 L2098.45 1218.67 L2097.86 1218.67 L2097.28 1218.67 L2096.69 1218.67 L2096.1 1218.67 L2095.52 1218.67 L2094.93 1218.67 L2094.35 1218.67 L2093.76 1218.67 L2093.17 1218.67 L2092.59 1218.67 L2092 1218.67 L2091.41 1218.67 L2090.83 1218.67 L2090.24 1218.67 L2089.65 1218.67 L2089.07 1218.67 L2088.48 1218.67 L2087.89 1218.67 L2087.31 1218.67 L2086.72 1218.67 L2086.14 1218.67 L2085.55 1218.67 L2084.96 1218.67 L2084.38 1218.67 L2083.79 1218.67 L2083.2 1218.67 L2082.62 1218.67 L2082.03 1218.67 L2081.44 1218.67 L2080.86 1218.67 L2080.27 1218.67 L2079.68 1218.67 L2079.1 1218.67 L2078.51 1218.67 L2077.93 1218.67 L2077.34 1218.67 L2076.75 1218.67 L2076.17 1218.67 L2075.58 1218.67 L2074.99 1218.67 L2074.41 1218.67 L2073.82 1218.67 L2073.23 1218.67 L2072.65 1218.67 L2072.06 1218.67 L2071.48 1218.67 L2070.89 1218.67 L2070.3 1218.67 L2069.72 1218.67 L2069.13 1218.67 L2068.54 1218.67 L2067.96 1218.67 L2067.37 1218.67 L2066.78 1218.67 L2066.2 1218.67 L2065.61 1218.67 L2065.02 1218.67 L2064.44 1218.67 L2063.85 1218.67 L2063.27 1218.67 L2062.68 1218.67 L2062.09 1218.67 L2061.51 1218.67 L2060.92 1218.67 L2060.33 1218.67 L2059.75 1218.67 L2059.16 1218.67 L2058.57 1218.67 L2057.99 1218.67 L2057.4 1218.67 L2056.81 1218.67 L2056.23 1218.67 L2055.64 1218.67 L2055.06 1218.67 L2054.47 1218.67 L2053.88 1218.67 L2053.3 1218.67 L2052.71 1218.67 L2052.12 1218.67 L2051.54 1218.67 L2050.95 1218.67 L2050.36 1218.67 L2049.78 1218.67 L2049.19 1218.67 L2048.6 1218.67 L2048.02 1218.67 L2047.43 1218.67 L2046.85 1218.67 L2046.26 1218.67 L2045.67 1218.67 L2045.09 1218.67 L2044.5 1218.67 L2043.91 1218.67 L2043.33 1218.67 L2042.74 1218.67 L2042.15 1218.67 L2041.57 1218.67 L2040.98 1218.67 L2040.4 1218.67 L2039.81 1218.67 L2039.22 1218.67 L2038.64 1218.67 L2038.05 1218.67 L2037.46 1218.67 L2036.88 1218.67 L2036.29 1218.67 L2035.7 1218.67 L2035.12 1218.67 L2034.53 1218.67 L2033.94 1218.67 L2033.36 1218.67 L2032.77 1218.67 L2032.19 1218.67 L2031.6 1218.67 L2031.01 1218.67 L2030.43 1218.67 L2029.84 1218.67 L2029.25 1218.67 L2028.67 1218.67 L2028.08 1218.67 L2027.49 1218.67 L2026.91 1218.67 L2026.32 1218.67 L2025.73 1218.67 L2025.15 1218.67 L2024.56 1218.67 L2023.98 1218.67 L2023.39 1218.67 L2022.8 1218.67 L2022.22 1218.67 L2021.63 1218.67 L2021.04 1218.67 L2020.46 1218.67 L2019.87 1218.67 L2019.28 1218.67 L2018.7 1218.67 L2018.11 1218.67 L2017.53 1218.67 L2016.94 1218.67 L2016.35 1218.67 L2015.77 1218.67 L2015.18 1218.67 L2014.59 1218.67 L2014.01 1218.67 L2013.42 1218.67 L2012.83 1218.67 L2012.25 1218.67 L2011.66 1218.67 L2011.07 1218.67 L2010.49 1218.67 L2009.9 1218.67 L2009.32 1218.67 L2008.73 1218.67 L2008.14 1218.67 L2007.56 1218.67 L2006.97 1218.67 L2006.38 1218.67 L2005.8 1218.67 L2005.21 1218.67 L2004.62 1218.67 L2004.04 1218.67 L2003.45 1218.67 L2002.86 1218.67 L2002.28 1218.67 L2001.69 1218.67 L2001.11 1218.67 L2000.52 1218.67 L1999.93 1218.67 L1999.35 1218.67 L1998.76 1218.67 L1998.17 1218.67 L1997.59 1218.67 L1997 1218.67 L1996.41 1218.67 L1995.83 1218.67 L1995.24 1218.67 L1994.65 1218.67 L1994.07 1218.67 L1993.48 1218.67 L1992.9 1218.67 L1992.31 1218.67 L1991.72 1218.67 L1991.14 1218.67 L1990.55 1218.67 L1989.96 1218.67 L1989.38 1218.67 L1988.79 1218.67 L1988.2 1218.67 L1987.62 1218.67 L1987.03 1218.67 L1986.45 1218.67 L1985.86 1218.67 L1985.27 1218.67 L1984.69 1218.67 L1984.1 1218.67 L1983.51 1218.67 L1982.93 1218.67 L1982.34 1218.67 L1981.75 1218.67 L1981.17 1218.67 L1980.58 1218.67 L1979.99 1218.67 L1979.41 1218.67 L1978.82 1218.67 L1978.24 1218.67 L1977.65 1218.67 L1977.06 1218.67 L1976.48 1218.67 L1975.89 1218.67 L1975.3 1218.67 L1974.72 1218.67 L1974.13 1218.67 L1973.54 1218.67 L1972.96 1218.67 L1972.37 1218.67 L1971.78 1218.67 L1971.2 1218.67 L1970.61 1218.67 L1970.03 1218.67 L1969.44 1218.67 L1968.85 1218.67 L1968.27 1218.67 L1967.68 1218.67 L1967.09 1218.67 L1966.51 1218.67 L1965.92 1218.67 L1965.33 1218.67 L1964.75 1218.67 L1964.16 1218.67 L1963.58 1218.67 L1962.99 1218.67 L1962.4 1218.67 L1961.82 1218.67 L1961.23 1218.67 L1960.64 1218.67 L1960.06 1218.67 L1959.47 1218.67 L1958.88 1218.67 L1958.3 1218.67 L1957.71 1218.67 L1957.12 1218.67 L1956.54 1218.67 L1955.95 1218.67 L1955.37 1218.67 L1954.78 1218.67 L1954.19 1218.67 L1953.61 1218.67 L1953.02 1218.67 L1952.43 1218.67 L1951.85 1218.67 L1951.26 1218.67 L1950.67 1218.67 L1950.09 1218.67 L1949.5 1218.67 L1948.91 1218.67 L1948.33 1218.67 L1947.74 1218.67 L1947.16 1218.67 L1946.57 1218.67 L1945.98 1218.67 L1945.4 1218.67 L1944.81 1218.67 L1944.22 1218.67 L1943.64 1218.67 L1943.05 1218.67 L1942.46 1218.67 L1941.88 1218.67 L1941.29 1218.67 L1940.71 1218.67 L1940.12 1218.67 L1939.53 1218.67 L1938.95 1218.67 L1938.36 1218.67 L1937.77 1218.67 L1937.19 1218.67 L1936.6 1218.67 L1936.01 1218.67 L1935.43 1218.67 L1934.84 1218.67 L1934.25 1218.67 L1933.67 1218.67 L1933.08 1218.67 L1932.5 1218.67 L1931.91 1218.67 L1931.32 1218.67 L1930.74 1218.67 L1930.15 1218.67 L1929.56 1218.67 L1928.98 1218.67 L1928.39 1218.67 L1927.8 1218.67 L1927.22 1218.67 L1926.63 1218.67 L1926.04 1218.67 L1925.46 1218.67 L1924.87 1218.67 L1924.29 1218.67 L1923.7 1218.67 L1923.11 1218.67 L1922.53 1218.67 L1921.94 1218.67 L1921.35 1218.67 L1920.77 1218.67 L1920.18 1218.67 L1919.59 1218.67 L1919.01 1218.67 L1918.42 1218.67 L1917.83 1218.67 L1917.25 1218.67 L1916.66 1218.67 L1916.08 1218.67 L1915.49 1218.67 L1914.9 1218.67 L1914.32 1218.67 L1913.73 1218.67 L1913.14 1218.67 L1912.56 1218.67 L1911.97 1218.67 L1911.38 1218.67 L1910.8 1218.67 L1910.21 1218.67 L1909.63 1218.67 L1909.04 1218.67 L1908.45 1218.67 L1907.87 1218.67 L1907.28 1218.67 L1906.69 1218.67 L1906.11 1218.67 L1905.52 1218.67 L1904.93 1218.67 L1904.35 1218.67 L1903.76 1218.67 L1903.17 1218.67 L1902.59 1218.67 L1902 1218.67 L1901.42 1218.67 L1900.83 1218.67 L1900.24 1218.67 L1899.66 1218.67 L1899.07 1218.67 L1898.48 1218.67 L1897.9 1218.67 L1897.31 1218.67 L1896.72 1218.67 L1896.14 1218.67 L1895.55 1218.67 L1894.96 1218.67 L1894.38 1218.67 L1893.79 1218.67 L1893.21 1218.67 L1892.62 1218.67 L1892.03 1218.67 L1891.45 1218.67 L1890.86 1218.67 L1890.27 1218.67 L1889.69 1218.67 L1889.1 1218.67 L1888.51 1218.67 L1887.93 1218.67 L1887.34 1218.67 L1886.76 1218.67 L1886.17 1218.67 L1885.58 1218.67 L1885 1218.67 L1884.41 1218.67 L1883.82 1218.67 L1883.24 1218.67 L1882.65 1218.67 L1882.06 1218.67 L1881.48 1218.67 L1880.89 1218.67 L1880.3 1218.67 L1879.72 1218.67 L1879.13 1218.67 L1878.55 1218.67 L1877.96 1218.67 L1877.37 1218.67 L1876.79 1218.67 L1876.2 1218.67 L1875.61 1218.67 L1875.03 1218.67 L1874.44 1218.67 L1873.85 1218.67 L1873.27 1218.67 L1872.68 1218.67 L1872.09 1218.67 L1871.51 1218.67 L1870.92 1218.67 L1870.34 1218.67 L1869.75 1218.67 L1869.16 1218.67 L1868.58 1218.67 L1867.99 1218.67 L1867.4 1218.67 L1866.82 1218.67 L1866.23 1218.67 L1865.64 1218.67 L1865.06 1218.67 L1864.47 1218.67 L1863.88 1218.67 L1863.3 1218.67 L1862.71 1218.67 L1862.13 1218.67 L1861.54 1218.67 L1860.95 1218.67 L1860.37 1218.67 L1859.78 1218.67 L1859.19 1218.67 L1858.61 1218.67 L1858.02 1218.67 L1857.43 1218.67 L1856.85 1218.67 L1856.26 1218.67 L1855.68 1218.67 L1855.09 1218.67 L1854.5 1218.67 L1853.92 1218.67 L1853.33 1218.67 L1852.74 1218.67 L1852.16 1218.67 L1851.57 1218.67 L1850.98 1218.67 L1850.4 1218.67 L1849.81 1218.67 L1849.22 1218.67 L1848.64 1218.67 L1848.05 1218.67 L1847.47 1218.67 L1846.88 1218.67 L1846.29 1218.67 L1845.71 1218.67 L1845.12 1218.67 L1844.53 1218.67 L1843.95 1218.67 L1843.36 1218.67 L1842.77 1218.67 L1842.19 1218.67 L1841.6 1218.67 L1841.01 1218.67 L1840.43 1218.67 L1839.84 1218.67 L1839.26 1218.67 L1838.67 1218.67 L1838.08 1218.67 L1837.5 1218.67 L1836.91 1218.67 L1836.32 1218.67 L1835.74 1218.67 L1835.15 1218.67 L1834.56 1218.67 L1833.98 1218.67 L1833.39 1218.67 L1832.81 1218.67 L1832.22 1218.67 L1831.63 1218.67 L1831.05 1218.67 L1830.46 1218.67 L1829.87 1218.67 L1829.29 1218.67 L1828.7 1218.67 L1828.11 1218.67 L1827.53 1218.67 L1826.94 1218.67 L1826.35 1218.67 L1825.77 1218.67 L1825.18 1218.67 L1824.6 1218.67 L1824.01 1218.67 L1823.42 1218.67 L1822.84 1218.67 L1822.25 1218.67 L1821.66 1218.67 L1821.08 1218.67 L1820.49 1218.67 L1819.9 1218.67 L1819.32 1218.67 L1818.73 1218.67 L1818.14 1218.67 L1817.56 1218.67 L1816.97 1218.67 L1816.39 1218.67 L1815.8 1218.67 L1815.21 1218.67 L1814.63 1218.67 L1814.04 1218.67 L1813.45 1218.67 L1812.87 1218.67 L1812.28 1218.67 L1811.69 1218.67 L1811.11 1218.67 L1810.52 1218.67 L1809.94 1218.67 L1809.35 1218.67 L1808.76 1218.67 L1808.18 1218.67 L1807.59 1218.67 L1807 1218.67 L1806.42 1218.67 L1805.83 1218.67 L1805.24 1218.67 L1804.66 1218.67 L1804.07 1218.67 L1803.48 1218.67 L1802.9 1218.67 L1802.31 1218.67 L1801.73 1218.67 L1801.14 1218.67 L1800.55 1218.67 L1799.97 1218.67 L1799.38 1218.67 L1798.79 1218.67 L1798.21 1218.67 L1797.62 1218.67 L1797.03 1218.67 L1796.45 1218.67 L1795.86 1218.67 L1795.27 1218.67 L1794.69 1218.67 L1794.1 1218.67 L1793.52 1218.67 L1792.93 1218.67 L1792.34 1218.67 L1791.76 1218.67 L1791.17 1218.67 L1790.58 1218.67 L1790 1218.67 L1789.41 1218.67 L1788.82 1218.67 L1788.24 1218.67 L1787.65 1218.67 L1787.06 1218.67 L1786.48 1218.67 L1785.89 1218.67 L1785.31 1218.67 L1784.72 1218.67 L1784.13 1218.67 L1783.55 1218.67 L1782.96 1218.67 L1782.37 1218.67 L1781.79 1218.67 L1781.2 1218.67 L1780.61 1218.67 L1780.03 1218.67 L1779.44 1218.67 L1778.86 1218.67 L1778.27 1218.67 L1777.68 1218.67 L1777.1 1218.67 L1776.51 1218.67 L1775.92 1218.67 L1775.34 1218.67 L1774.75 1218.67 L1774.16 1218.67 L1773.58 1218.67 L1772.99 1218.67 L1772.4 1218.67 L1771.82 1218.67 L1771.23 1218.67 L1770.65 1218.67 L1770.06 1218.67 L1769.47 1218.67 L1768.89 1218.67 L1768.3 1218.67 L1767.71 1218.67 L1767.13 1218.67 L1766.54 1218.67 L1765.95 1218.67 L1765.37 1218.67 L1764.78 1218.67 L1764.19 1218.67 L1763.61 1218.67 L1763.02 1218.67 L1762.44 1218.67 L1761.85 1218.67 L1761.26 1218.67 L1760.68 1218.67 L1760.09 1218.67 L1759.5 1218.67 L1758.92 1218.67 L1758.33 1218.67 L1757.74 1218.67 L1757.16 1218.67 L1756.57 1218.67 L1755.99 1218.67 L1755.4 1218.67 L1754.81 1218.67 L1754.23 1218.67 L1753.64 1218.67 L1753.05 1218.67 L1752.47 1218.67 L1751.88 1218.67 L1751.29 1218.67 L1750.71 1218.67 L1750.12 1218.67 L1749.53 1218.67 L1748.95 1218.67 L1748.36 1218.67 L1747.78 1218.67 L1747.19 1218.67 L1746.6 1218.67 L1746.02 1218.67 L1745.43 1218.67 L1744.84 1218.67 L1744.26 1218.67 L1743.67 1218.67 L1743.08 1218.67 L1742.5 1218.67 L1741.91 1218.67 L1741.32 1218.67 L1740.74 1218.67 L1740.15 1218.67 L1739.57 1218.67 L1738.98 1218.67 L1738.39 1218.67 L1737.81 1218.67 L1737.22 1218.67 L1736.63 1218.67 L1736.05 1218.67 L1735.46 1218.67 L1734.87 1218.67 L1734.29 1218.67 L1733.7 1218.67 L1733.11 1218.67 L1732.53 1218.67 L1731.94 1218.67 L1731.36 1218.67 L1730.77 1218.67 L1730.18 1218.67 L1729.6 1218.67 L1729.01 1218.67 L1728.42 1218.67 L1727.84 1218.67 L1727.25 1218.67 L1726.66 1218.67 L1726.08 1218.67 L1725.49 1218.67 L1724.91 1218.67 L1724.32 1218.67 L1723.73 1218.67 L1723.15 1218.67 L1722.56 1218.67 L1721.97 1218.67 L1721.39 1218.67 L1720.8 1218.67 L1720.21 1218.67 L1719.63 1218.67 L1719.04 1218.67 L1718.45 1218.67 L1717.87 1218.67 L1717.28 1218.67 L1716.7 1218.67 L1716.11 1218.67 L1715.52 1218.67 L1714.94 1218.67 L1714.35 1218.67 L1713.76 1218.67 L1713.18 1218.67 L1712.59 1218.67 L1712 1218.67 L1711.42 1218.67 L1710.83 1218.67 L1710.24 1218.67 L1709.66 1218.67 L1709.07 1218.67 L1708.49 1218.67 L1707.9 1218.67 L1707.31 1218.67 L1706.73 1218.67 L1706.14 1218.67 L1705.55 1218.67 L1704.97 1218.67 L1704.38 1218.67 L1703.79 1218.67 L1703.21 1218.67 L1702.62 1218.67 L1702.04 1218.67 L1701.45 1218.67 L1700.86 1218.67 L1700.28 1218.67 L1699.69 1218.67 L1699.1 1218.67 L1698.52 1218.67 L1697.93 1218.67 L1697.34 1218.67 L1696.76 1218.67 L1696.17 1218.67 L1695.58 1218.67 L1695 1218.67 L1694.41 1218.67 L1693.83 1218.67 L1693.24 1218.67 L1692.65 1218.67 L1692.07 1218.67 L1691.48 1218.67 L1690.89 1218.67 L1690.31 1218.67 L1689.72 1218.67 L1689.13 1218.67 L1688.55 1218.67 L1687.96 1218.67 L1687.37 1218.67 L1686.79 1218.67 L1686.2 1218.67 L1685.62 1218.67 L1685.03 1218.67 L1684.44 1218.67 L1683.86 1218.67 L1683.27 1218.67 L1682.68 1218.67 L1682.1 1218.67 L1681.51 1218.67 L1680.92 1218.67 L1680.34 1218.67 L1679.75 1218.67 L1679.17 1218.67 L1678.58 1218.67 L1677.99 1218.67 L1677.41 1218.67 L1676.82 1218.67 L1676.23 1218.67 L1675.65 1218.67 L1675.06 1218.67 L1674.47 1218.67 L1673.89 1218.67 L1673.3 1218.67 L1672.71 1218.67 L1672.13 1218.67 L1671.54 1218.67 L1670.96 1218.67 L1670.37 1218.67 L1669.78 1218.67 L1669.2 1218.67 L1668.61 1218.67 L1668.02 1218.67 L1667.44 1218.67 L1666.85 1218.67 L1666.26 1218.67 L1665.68 1218.67 L1665.09 1218.67 L1664.5 1218.67 L1663.92 1218.67 L1663.33 1218.67 L1662.75 1218.67 L1662.16 1218.67 L1661.57 1218.67 L1660.99 1218.67 L1660.4 1218.67 L1659.81 1218.67 L1659.23 1218.67 L1658.64 1218.67 L1658.05 1218.67 L1657.47 1218.67 L1656.88 1218.67 L1656.29 1218.67 L1655.71 1218.67 L1655.12 1218.67 L1654.54 1218.67 L1653.95 1218.67 L1653.36 1218.67 L1652.78 1218.67 L1652.19 1218.67 L1651.6 1218.67 L1651.02 1218.67 L1650.43 1218.67 L1649.84 1218.67 L1649.26 1218.67 L1648.67 1218.67 L1648.09 1218.67 L1647.5 1218.67 L1646.91 1218.67 L1646.33 1218.67 L1645.74 1218.67 L1645.15 1218.67 L1644.57 1218.67 L1643.98 1218.67 L1643.39 1218.67 L1642.81 1218.67 L1642.22 1218.67 L1641.63 1218.67 L1641.05 1218.67 L1640.46 1218.67 L1639.88 1218.67 L1639.29 1218.67 L1638.7 1218.67 L1638.12 1218.67 L1637.53 1218.67 L1636.94 1218.67 L1636.36 1218.67 L1635.77 1218.67 L1635.18 1218.67 L1634.6 1218.67 L1634.01 1218.67 L1633.42 1218.67 L1632.84 1218.67 L1632.25 1218.67 L1631.67 1218.67 L1631.08 1218.67 L1630.49 1218.67 L1629.91 1218.67 L1629.32 1218.67 L1628.73 1218.67 L1628.15 1218.67 L1627.56 1218.67 L1626.97 1218.67 L1626.39 1218.67 L1625.8 1218.67 L1625.22 1218.67 L1624.63 1218.67 L1624.04 1218.67 L1623.46 1218.67 L1622.87 1218.67 L1622.28 1218.67 L1621.7 1218.67 L1621.11 1218.67 L1620.52 1218.67 L1619.94 1218.67 L1619.35 1218.67 L1618.76 1218.67 L1618.18 1218.67 L1617.59 1218.67 L1617.01 1218.67 L1616.42 1218.67 L1615.83 1218.67 L1615.25 1218.67 L1614.66 1218.67 L1614.07 1218.67 L1613.49 1218.67 L1612.9 1218.67 L1612.31 1218.67 L1611.73 1218.67 L1611.14 1218.67 L1610.55 1218.67 L1609.97 1218.67 L1609.38 1218.67 L1608.8 1218.67 L1608.21 1218.67 L1607.62 1218.67 L1607.04 1218.67 L1606.45 1218.67 L1605.86 1218.67 L1605.28 1218.67 L1604.69 1218.67 L1604.1 1218.67 L1603.52 1218.67 L1602.93 1218.67 L1602.34 1218.67 L1601.76 1218.67 L1601.17 1218.67 L1600.59 1218.67 L1600 1218.67 L1599.41 1218.67 L1598.83 1218.67 L1598.24 1218.67 L1597.65 1218.67 L1597.07 1218.67 L1596.48 1218.67 L1595.89 1218.67 L1595.31 1218.67 L1594.72 1218.67 L1594.14 1218.67 L1593.55 1218.67 L1592.96 1218.67 L1592.38 1218.67 L1591.79 1218.67 L1591.2 1218.67 L1590.62 1218.67 L1590.03 1218.67 L1589.44 1218.67 L1588.86 1218.67 L1588.27 1218.67 L1587.68 1218.67 L1587.1 1218.67 L1586.51 1218.67 L1585.93 1218.67 L1585.34 1218.67 L1584.75 1218.67 L1584.17 1218.67 L1583.58 1218.67 L1582.99 1218.67 L1582.41 1218.67 L1581.82 1218.67 L1581.23 1218.67 L1580.65 1218.67 L1580.06 1218.67 L1579.47 1218.67 L1578.89 1218.67 L1578.3 1218.67 L1577.72 1218.67 L1577.13 1218.67 L1576.54 1218.67 L1575.96 1218.67 L1575.37 1218.67 L1574.78 1218.67 L1574.2 1218.67 L1573.61 1218.67 L1573.02 1218.67 L1572.44 1218.67 L1571.85 1218.67 L1571.27 1218.67 L1570.68 1218.67 L1570.09 1218.67 L1569.51 1218.67 L1568.92 1218.67 L1568.33 1218.67 L1567.75 1218.67 L1567.16 1218.67 L1566.57 1218.67 L1565.99 1218.67 L1565.4 1218.67 L1564.81 1218.67 L1564.23 1218.67 L1563.64 1218.67 L1563.06 1218.67 L1562.47 1218.67 L1561.88 1218.67 L1561.3 1218.67 L1560.71 1218.67 L1560.12 1218.67 L1559.54 1218.67 L1558.95 1218.67 L1558.36 1218.67 L1557.78 1218.67 L1557.19 1218.67 L1556.6 1218.67 L1556.02 1218.67 L1555.43 1218.67 L1554.85 1218.67 L1554.26 1218.67 L1553.67 1218.67 L1553.09 1218.67 L1552.5 1218.67 L1551.91 1218.67 L1551.33 1218.67 L1550.74 1218.67 L1550.15 1218.67 L1549.57 1218.67 L1548.98 1218.67 L1548.4 1218.67 L1547.81 1218.67 L1547.22 1218.67 L1546.64 1218.67 L1546.05 1218.67 L1545.46 1218.67 L1544.88 1218.67 L1544.29 1218.67 L1543.7 1218.67 L1543.12 1218.67 L1542.53 1218.67 L1541.94 1218.67 L1541.36 1218.67 L1540.77 1218.67 L1540.19 1218.67 L1539.6 1218.67 L1539.01 1218.67 L1538.43 1218.67 L1537.84 1218.67 L1537.25 1218.67 L1536.67 1218.67 L1536.08 1218.67 L1535.49 1218.67 L1534.91 1218.67 L1534.32 1218.67 L1533.73 1218.67 L1533.15 1218.67 L1532.56 1218.67 L1531.98 1218.67 L1531.39 1218.67 L1530.8 1218.67 L1530.22 1218.67 L1529.63 1218.67 L1529.04 1218.67 L1528.46 1218.67 L1527.87 1218.67 L1527.28 1218.67 L1526.7 1218.67 L1526.11 1218.67 L1525.52 1218.67 L1524.94 1218.67 L1524.35 1218.67 L1523.77 1218.67 L1523.18 1218.67 L1522.59 1218.67 L1522.01 1218.67 L1521.42 1218.67 L1520.83 1218.67 L1520.25 1218.67 L1519.66 1218.67 L1519.07 1218.67 L1518.49 1218.67 L1517.9 1218.67 L1517.32 1218.67 L1516.73 1218.67 L1516.14 1218.67 L1515.56 1218.67 L1514.97 1218.67 L1514.38 1218.67 L1513.8 1218.67 L1513.21 1218.67 L1512.62 1218.67 L1512.04 1218.67 L1511.45 1218.67 L1510.86 1218.67 L1510.28 1218.67 L1509.69 1218.67 L1509.11 1218.67 L1508.52 1218.67 L1507.93 1218.67 L1507.35 1218.67 L1506.76 1218.67 L1506.17 1218.67 L1505.59 1218.67 L1505 1218.67 L1504.41 1218.67 L1503.83 1218.67 L1503.24 1218.67 L1502.65 1218.67 L1502.07 1218.67 L1501.48 1218.67 L1500.9 1218.67 L1500.31 1218.67 L1499.72 1218.67 L1499.14 1218.67 L1498.55 1218.67 L1497.96 1218.67 L1497.38 1218.67 L1496.79 1218.67 L1496.2 1218.67 L1495.62 1218.67 L1495.03 1218.67 L1494.45 1218.67 L1493.86 1218.67 L1493.27 1218.67 L1492.69 1218.67 L1492.1 1218.67 L1491.51 1218.67 L1490.93 1218.67 L1490.34 1218.67 L1489.75 1218.67 L1489.17 1218.67 L1488.58 1218.67 L1487.99 1218.67 L1487.41 1218.67 L1486.82 1218.67 L1486.24 1218.67 L1485.65 1218.67 L1485.06 1218.67 L1484.48 1218.67 L1483.89 1218.67 L1483.3 1218.67 L1482.72 1218.67 L1482.13 1218.67 L1481.54 1218.67 L1480.96 1218.67 L1480.37 1218.67 L1479.78 1218.67 L1479.2 1218.67 L1478.61 1218.67 L1478.03 1218.67 L1477.44 1218.67 L1476.85 1218.67 L1476.27 1218.67 L1475.68 1218.67 L1475.09 1218.67 L1474.51 1218.67 L1473.92 1218.67 L1473.33 1218.67 L1472.75 1218.67 L1472.16 1218.67 L1471.57 1218.67 L1470.99 1218.67 L1470.4 1218.67 L1469.82 1218.67 L1469.23 1218.67 L1468.64 1218.67 L1468.06 1218.67 L1467.47 1218.67 L1466.88 1218.67 L1466.3 1218.67 L1465.71 1218.67 L1465.12 1218.67 L1464.54 1218.67 L1463.95 1218.67 L1463.37 1218.67 L1462.78 1218.67 L1462.19 1218.67 L1461.61 1218.67 L1461.02 1218.67 L1460.43 1218.67 L1459.85 1218.67 L1459.26 1218.67 L1458.67 1218.67 L1458.09 1218.67 L1457.5 1218.67 L1456.91 1218.67 L1456.33 1218.67 L1455.74 1218.67 L1455.16 1218.67 L1454.57 1218.67 L1453.98 1218.67 L1453.4 1218.67 L1452.81 1218.67 L1452.22 1218.67 L1451.64 1218.67 L1451.05 1218.67 L1450.46 1218.67 L1449.88 1218.67 L1449.29 1218.67 L1448.7 1218.67 L1448.12 1218.67 L1447.53 1218.67 L1446.95 1218.67 L1446.36 1218.67 L1445.77 1218.67 L1445.19 1218.67 L1444.6 1218.67 L1444.01 1218.67 L1443.43 1218.67 L1442.84 1218.67 L1442.25 1218.67 L1441.67 1218.67 L1441.08 1218.67 L1440.5 1218.67 L1439.91 1218.67 L1439.32 1218.67 L1438.74 1218.67 L1438.15 1218.67 L1437.56 1218.67 L1436.98 1218.67 L1436.39 1218.67 L1435.8 1218.67 L1435.22 1218.67 L1434.63 1218.67 L1434.04 1218.67 L1433.46 1218.67 L1432.87 1218.67 L1432.29 1218.67 L1431.7 1218.67 L1431.11 1218.67 L1430.53 1218.67 L1429.94 1218.67 L1429.35 1218.67 L1428.77 1218.67 L1428.18 1218.67 L1427.59 1218.67 L1427.01 1218.67 L1426.42 1218.67 L1425.83 1218.67 L1425.25 1218.67 L1424.66 1218.67 L1424.08 1218.67 L1423.49 1218.67 L1422.9 1218.67 L1422.32 1218.67 L1421.73 1218.67 L1421.14 1218.67 L1420.56 1218.67 L1419.97 1218.67 L1419.38 1218.67 L1418.8 1218.67 L1418.21 1218.67 L1417.63 1218.67 L1417.04 1218.67 L1416.45 1218.67 L1415.87 1218.67 L1415.28 1218.67 L1414.69 1218.67 L1414.11 1218.67 L1413.52 1218.67 L1412.93 1218.67 L1412.35 1218.67 L1411.76 1218.67 L1411.17 1218.67 L1410.59 1218.67 L1410 1218.67 L1409.42 1218.67 L1408.83 1218.67 L1408.24 1218.67 L1407.66 1218.67 L1407.07 1218.67 L1406.48 1218.67 L1405.9 1218.67 L1405.31 1218.67 L1404.72 1218.67 L1404.14 1218.67 L1403.55 1218.67 L1402.96 1218.67 L1402.38 1218.67 L1401.79 1218.67 L1401.21 1218.67 L1400.62 1218.67 L1400.03 1218.67 L1399.45 1218.67 L1398.86 1218.67 L1398.27 1218.67 L1397.69 1218.67 L1397.1 1218.67 L1396.51 1218.67 L1395.93 1218.67 L1395.34 1218.67 L1394.75 1218.67 L1394.17 1218.67 L1393.58 1218.67 L1393 1218.67 L1392.41 1218.67 L1391.82 1218.67 L1391.24 1218.67 L1390.65 1218.67 L1390.06 1218.67 L1389.48 1218.67 L1388.89 1218.67 L1388.3 1218.67 L1387.72 1218.67 L1387.13 1218.67 L1386.55 1218.67 L1385.96 1218.67 L1385.37 1218.67 L1384.79 1218.67 L1384.2 1218.67 L1383.61 1218.67 L1383.03 1218.67 L1382.44 1218.67 L1381.85 1218.67 L1381.27 1218.67 L1380.68 1218.67 L1380.09 1218.67 L1379.51 1218.67 L1378.92 1218.67 L1378.34 1218.67 L1377.75 1218.67 L1377.16 1218.67 L1376.58 1218.67 L1375.99 1218.67 L1375.4 1218.67 L1374.82 1218.67 L1374.23 1218.67 L1373.64 1218.67 L1373.06 1218.67 L1372.47 1218.67 L1371.88 1218.67 L1371.3 1218.67 L1370.71 1218.67 L1370.13 1218.67 L1369.54 1218.67 L1368.95 1218.67 L1368.37 1218.67 L1367.78 1218.67 L1367.19 1218.67 L1366.61 1218.67 L1366.02 1218.67 L1365.43 1218.67 L1364.85 1218.67 L1364.26 1218.67 L1363.68 1218.67 L1363.09 1218.67 L1362.5 1218.67 L1361.92 1218.67 L1361.33 1218.67 L1360.74 1218.67 L1360.16 1218.67 L1359.57 1218.67 L1358.98 1218.67 L1358.4 1218.67 L1357.81 1218.67 L1357.22 1218.67 L1356.64 1218.67 L1356.05 1218.67 L1355.47 1218.67 L1354.88 1218.67 L1354.29 1218.67 L1353.71 1218.67 L1353.12 1218.67 L1352.53 1218.67 L1351.95 1218.67 L1351.36 1218.67 L1350.77 1218.67 L1350.19 1218.67 L1349.6 1218.67 L1349.01 1218.67 L1348.43 1218.67 L1347.84 1218.67 L1347.26 1218.67 L1346.67 1218.67 L1346.08 1218.67 L1345.5 1218.67 L1344.91 1218.67 L1344.32 1218.67 L1343.74 1218.67 L1343.15 1218.67 L1342.56 1218.67 L1341.98 1218.67 L1341.39 1218.67 L1340.8 1218.67 L1340.22 1218.67 L1339.63 1218.67 L1339.05 1218.67 L1338.46 1218.67 L1337.87 1218.67 L1337.29 1218.67 L1336.7 1218.67 L1336.11 1218.67 L1335.53 1218.67 L1334.94 1218.67 L1334.35 1218.67 L1333.77 1218.67 L1333.18 1218.67 L1332.6 1218.67 L1332.01 1218.67 L1331.42 1218.67 L1330.84 1218.67 L1330.25 1218.67 L1329.66 1218.67 L1329.08 1218.67 L1328.49 1218.67 L1327.9 1218.67 L1327.32 1218.67 L1326.73 1218.67 L1326.14 1218.67 L1325.56 1218.67 L1324.97 1218.67 L1324.39 1218.67 L1323.8 1218.67 L1323.21 1218.67 L1322.63 1218.67 L1322.04 1218.67 L1321.45 1218.67 L1320.87 1218.67 L1320.28 1218.67 L1319.69 1218.67 L1319.11 1218.67 L1318.52 1218.67 L1317.93 1218.67 L1317.35 1218.67 L1316.76 1218.67 L1316.18 1218.67 L1315.59 1218.67 L1315 1218.67 L1314.42 1218.67 L1313.83 1218.67 L1313.24 1218.67 L1312.66 1218.67 L1312.07 1218.67 L1311.48 1218.67 L1310.9 1218.67 L1310.31 1218.67 L1309.73 1218.67 L1309.14 1218.67 L1308.55 1218.67 L1307.97 1218.67 L1307.38 1218.67 L1306.79 1218.67 L1306.21 1218.67 L1305.62 1218.67 L1305.03 1218.67 L1304.45 1218.67 L1303.86 1218.67 L1303.27 1218.67 L1302.69 1218.67 L1302.1 1218.67 L1301.52 1218.67 L1300.93 1218.67 L1300.34 1218.67 L1299.76 1218.67 L1299.17 1218.67 L1298.58 1218.67 L1298 1218.67 L1297.41 1218.67 L1296.82 1218.67 L1296.24 1218.67 L1295.65 1218.67 L1295.06 1218.67 L1294.48 1218.67 L1293.89 1218.67 L1293.31 1218.67 L1292.72 1218.67 L1292.13 1218.67 L1291.55 1218.67 L1290.96 1218.67 L1290.37 1218.67 L1289.79 1218.67 L1289.2 1218.67 L1288.61 1218.67 L1288.03 1218.67 L1287.44 1218.67 L1286.86 1218.67 L1286.27 1218.67 L1285.68 1218.67 L1285.1 1218.67 L1284.51 1218.67 L1283.92 1218.67 L1283.34 1218.67 L1282.75 1218.67 L1282.16 1218.67 L1281.58 1218.67 L1280.99 1218.67 L1280.4 1218.67 L1279.82 1218.67 L1279.23 1218.67 L1278.65 1218.67 L1278.06 1218.67 L1277.47 1218.67 L1276.89 1218.67 L1276.3 1218.67 L1275.71 1218.67 L1275.13 1218.67 L1274.54 1218.67 L1273.95 1218.67 L1273.37 1218.67 L1272.78 1218.67 L1272.19 1218.67 L1271.61 1218.67 L1271.02 1218.67 L1270.44 1218.67 L1269.85 1218.67 L1269.26 1218.67 L1268.68 1218.67 L1268.09 1218.67 L1267.5 1218.67 L1266.92 1218.67 L1266.33 1218.67 L1265.74 1218.67 L1265.16 1218.67 L1264.57 1218.67 L1263.98 1218.67 L1263.4 1218.67 L1262.81 1218.67 L1262.23 1218.67 L1261.64 1218.67 L1261.05 1218.67 L1260.47 1218.67 L1259.88 1218.67 L1259.29 1218.67 L1258.71 1218.67 L1258.12 1218.67 L1257.53 1218.67 L1256.95 1218.67 L1256.36 1218.67 L1255.78 1218.67 L1255.19 1218.67 L1254.6 1218.67 L1254.02 1218.67 L1253.43 1218.67 L1252.84 1218.67 L1252.26 1218.67 L1251.67 1218.67 L1251.08 1218.67 L1250.5 1218.67 L1249.91 1218.67 L1249.32 1218.67 L1248.74 1218.67 L1248.15 1218.67 L1247.57 1218.67 L1246.98 1218.67 L1246.39 1218.67 L1245.81 1218.67 L1245.22 1218.67 L1244.63 1218.67 L1244.05 1218.67 L1243.46 1218.67 L1242.87 1218.67 L1242.29 1218.67 L1241.7 1218.67 L1241.11 1218.67 L1240.53 1218.67 L1239.94 1218.67 L1239.36 1218.67 L1238.77 1218.67 L1238.18 1218.67 L1237.6 1218.67 L1237.01 1218.67 L1236.42 1218.67 L1235.84 1218.67 L1235.25 1218.67 L1234.66 1218.67 L1234.08 1218.67 L1233.49 1218.67 L1232.91 1218.67 L1232.32 1218.67 L1231.73 1218.67 L1231.15 1218.67 L1230.56 1218.67 L1229.97 1218.67 L1229.39 1218.67 L1228.8 1218.67 L1228.21 1218.67 L1227.63 1218.67 L1227.04 1218.67 L1226.45 1218.67 L1225.87 1218.67 L1225.28 1218.67 L1224.7 1218.67 L1224.11 1218.67 L1223.52 1218.67 L1222.94 1218.67 L1222.35 1218.67 L1221.76 1218.67 L1221.18 1218.67 L1220.59 1218.67 L1220 1218.67 L1219.42 1218.67 L1218.83 1218.67 L1218.24 1218.67 L1217.66 1218.67 L1217.07 1218.67 L1216.49 1218.67 L1215.9 1218.67 L1215.31 1218.67 L1214.73 1218.67 L1214.14 1218.67 L1213.55 1218.67 L1212.97 1218.67 L1212.38 1218.67 L1211.79 1218.67 L1211.21 1218.67 L1210.62 1218.67 L1210.03 1218.67 L1209.45 1218.67 L1208.86 1218.67 L1208.28 1218.67 L1207.69 1218.67 L1207.1 1218.67 L1206.52 1218.67 L1205.93 1218.67 L1205.34 1218.67 L1204.76 1218.67 L1204.17 1218.67 L1203.58 1218.67 L1203 1218.67 L1202.41 1218.67 L1201.83 1218.67 L1201.24 1218.67 L1200.65 1218.67 L1200.07 1218.67 L1199.48 1218.67 L1198.89 1218.67 L1198.31 1218.67 L1197.72 1218.67 L1197.13 1218.67 L1196.55 1218.67 L1195.96 1218.67 L1195.37 1218.67 L1194.79 1218.67 L1194.2 1218.67 L1193.62 1218.67 L1193.03 1218.67 L1192.44 1218.67 L1191.86 1218.67 L1191.27 1218.67 L1190.68 1218.67 L1190.1 1218.67 L1189.51 1218.67 L1188.92 1218.67 L1188.34 1218.67 L1187.75 1218.67 L1187.16 1218.67 L1186.58 1218.67 L1185.99 1218.67 L1185.41 1218.67 L1184.82 1218.67 L1184.23 1218.67 L1183.65 1218.67 L1183.06 1218.67 L1182.47 1218.67 L1181.89 1218.67 L1181.3 1218.67 L1180.71 1218.67 L1180.13 1218.67 L1179.54 1218.67 L1178.96 1218.67 L1178.37 1218.67 L1177.78 1218.67 L1177.2 1218.67 L1176.61 1218.67 L1176.02 1218.67 L1175.44 1218.67 L1174.85 1218.67 L1174.26 1218.67 L1173.68 1218.67 L1173.09 1218.67 L1172.5 1218.67 L1171.92 1218.67 L1171.33 1218.67 L1170.75 1218.67 L1170.16 1218.67 L1169.57 1218.67 L1168.99 1218.67 L1168.4 1218.67 L1167.81 1218.67 L1167.23 1218.67 L1166.64 1218.67 L1166.05 1218.67 L1165.47 1218.67 L1164.88 1218.67 L1164.29 1218.67 L1163.71 1218.67 L1163.12 1218.67 L1162.54 1218.67 L1161.95 1218.67 L1161.36 1218.67 L1160.78 1218.67 L1160.19 1218.67 L1159.6 1218.67 L1159.02 1218.67 L1158.43 1218.67 L1157.84 1218.67 L1157.26 1218.67 L1156.67 1218.67 L1156.09 1218.67 L1155.5 1218.67 L1154.91 1218.67 L1154.33 1218.67 L1153.74 1218.67 L1153.15 1218.67 L1152.57 1218.67 L1151.98 1218.67 L1151.39 1218.67 L1150.81 1218.67 L1150.22 1218.67 L1149.63 1218.67 L1149.05 1218.67 L1148.46 1218.67 L1147.88 1218.67 L1147.29 1218.67 L1146.7 1218.67 L1146.12 1218.67 L1145.53 1218.67 L1144.94 1218.67 L1144.36 1218.67 L1143.77 1218.67 L1143.18 1218.67 L1142.6 1218.67 L1142.01 1218.67 L1141.42 1218.67 L1140.84 1218.67 L1140.25 1218.67 L1139.67 1218.67 L1139.08 1218.67 L1138.49 1218.67 L1137.91 1218.67 L1137.32 1218.67 L1136.73 1218.67 L1136.15 1218.67 L1135.56 1218.67 L1134.97 1218.67 L1134.39 1218.67 L1133.8 1218.67 L1133.21 1218.67 L1132.63 1218.67 L1132.04 1218.67 L1131.46 1218.67 L1130.87 1218.67 L1130.28 1218.67 L1129.7 1218.67 L1129.11 1218.67 L1128.52 1218.67 L1127.94 1218.67 L1127.35 1218.67 L1126.76 1218.67 L1126.18 1218.67 L1125.59 1218.67 L1125.01 1218.67 L1124.42 1218.67 L1123.83 1218.67 L1123.25 1218.67 L1122.66 1218.67 L1122.07 1218.67 L1121.49 1218.67 L1120.9 1218.67 L1120.31 1218.67 L1119.73 1218.67 L1119.14 1218.67 L1118.55 1218.67 L1117.97 1218.67 L1117.38 1218.67 L1116.8 1218.67 L1116.21 1218.67 L1115.62 1218.67 L1115.04 1218.67 L1114.45 1218.67 L1113.86 1218.67 L1113.28 1218.67 L1112.69 1218.67 L1112.1 1218.67 L1111.52 1218.67 L1110.93 1218.67 L1110.34 1218.67 L1109.76 1218.67 L1109.17 1218.67 L1108.59 1218.67 L1108 1218.67 L1107.41 1218.67 L1106.83 1218.67 L1106.24 1218.67 L1105.65 1218.67 L1105.07 1218.67 L1104.48 1218.67 L1103.89 1218.67 L1103.31 1218.67 L1102.72 1218.67 L1102.14 1218.67 L1101.55 1218.67 L1100.96 1218.67 L1100.38 1218.67 L1099.79 1218.67 L1099.2 1218.67 L1098.62 1218.67 L1098.03 1218.67 L1097.44 1218.67 L1096.86 1218.67 L1096.27 1218.67 L1095.68 1218.67 L1095.1 1218.67 L1094.51 1218.67 L1093.93 1218.67 L1093.34 1218.67 L1092.75 1218.67 L1092.17 1218.67 L1091.58 1218.67 L1090.99 1218.67 L1090.41 1218.67 L1089.82 1218.67 L1089.23 1218.67 L1088.65 1218.67 L1088.06 1218.67 L1087.47 1218.67 L1086.89 1218.67 L1086.3 1218.67 L1085.72 1218.67 L1085.13 1218.67 L1084.54 1218.67 L1083.96 1218.67 L1083.37 1218.67 L1082.78 1218.67 L1082.2 1218.67 L1081.61 1218.67 L1081.02 1218.67 L1080.44 1218.67 L1079.85 1218.67 L1079.26 1218.67 L1078.68 1218.67 L1078.09 1218.67 L1077.51 1218.67 L1076.92 1218.67 L1076.33 1218.67 L1075.75 1218.67 L1075.16 1218.67 L1074.57 1218.67 L1073.99 1218.67 L1073.4 1218.67 L1072.81 1218.67 L1072.23 1218.67 L1071.64 1218.67 L1071.06 1218.67 L1070.47 1218.67 L1069.88 1218.67 L1069.3 1218.67 L1068.71 1218.67 L1068.12 1218.67 L1067.54 1218.67 L1066.95 1218.67 L1066.36 1218.67 L1065.78 1218.67 L1065.19 1218.67 L1064.6 1218.67 L1064.02 1218.67 L1063.43 1218.67 L1062.85 1218.67 L1062.26 1218.67 L1061.67 1218.67 L1061.09 1218.67 L1060.5 1218.67 L1059.91 1218.67 L1059.33 1218.67 L1058.74 1218.67 L1058.15 1218.67 L1057.57 1218.67 L1056.98 1218.67 L1056.39 1218.67 L1055.81 1218.67 L1055.22 1218.67 L1054.64 1218.67 L1054.05 1218.67 L1053.46 1218.67 L1052.88 1218.67 L1052.29 1218.67 L1051.7 1218.67 L1051.12 1218.67 L1050.53 1218.67 L1049.94 1218.67 L1049.36 1218.67 L1048.77 1218.67 L1048.19 1218.67 L1047.6 1218.67 L1047.01 1218.67 L1046.43 1218.67 L1045.84 1218.67 L1045.25 1218.67 L1044.67 1218.67 L1044.08 1218.67 L1043.49 1218.67 L1042.91 1218.67 L1042.32 1218.67 L1041.73 1218.67 L1041.15 1218.67 L1040.56 1218.67 L1039.98 1218.67 L1039.39 1218.67 L1038.8 1218.67 L1038.22 1218.67 L1037.63 1218.67 L1037.04 1218.67 L1036.46 1218.67 L1035.87 1218.67 L1035.28 1218.67 L1034.7 1218.67 L1034.11 1218.67 L1033.52 1218.67 L1032.94 1218.67 L1032.35 1218.67 L1031.77 1218.67 L1031.18 1218.67 L1030.59 1218.67 L1030.01 1218.67 L1029.42 1218.67 L1028.83 1218.67 L1028.25 1218.67 L1027.66 1218.67 L1027.07 1218.67 L1026.49 1218.67 L1025.9 1218.67 L1025.32 1218.67 L1024.73 1218.67 L1024.14 1218.67 L1023.56 1218.67 L1022.97 1218.67 L1022.38 1218.67 L1021.8 1218.67 L1021.21 1218.67 L1020.62 1218.67 L1020.04 1218.67 L1019.45 1218.67 L1018.86 1218.67 L1018.28 1218.67 L1017.69 1218.67 L1017.11 1218.67 L1016.52 1218.67 L1015.93 1218.67 L1015.35 1218.67 L1014.76 1218.67 L1014.17 1218.67 L1013.59 1218.67 L1013 1218.67 L1012.41 1218.67 L1011.83 1218.67 L1011.24 1218.67 L1010.65 1218.67 L1010.07 1218.67 L1009.48 1218.67 L1008.9 1218.67 L1008.31 1218.67 L1007.72 1218.67 L1007.14 1218.67 L1006.55 1218.67 L1005.96 1218.67 L1005.38 1218.67 L1004.79 1218.67 L1004.2 1218.67 L1003.62 1218.67 L1003.03 1218.67 L1002.44 1218.67 L1001.86 1218.67 L1001.27 1218.67 L1000.69 1218.67 L1000.1 1218.67 L999.513 1218.67 L998.926 1218.67 L998.34 1218.67 L997.754 1218.67 L997.167 1218.67 L996.581 1218.67 L995.994 1218.67 L995.408 1218.67 L994.822 1218.67 L994.235 1218.67 L993.649 1218.67 L993.062 1218.67 L992.476 1218.67 L991.889 1218.67 L991.303 1218.67 L990.717 1218.67 L990.13 1218.67 L989.544 1218.67 L988.957 1218.67 L988.371 1218.67 L987.785 1218.67 L987.198 1218.67 L986.612 1218.67 L986.025 1218.67  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1219.04 986.612,1219.04 987.198,1219.04 987.785,1219.04 988.371,1219.04 988.957,1219.04 989.544,1219.04 990.13,1219.04 990.717,1219.04 991.303,1219.04 991.889,1219.04 992.476,1219.04 993.062,1219.04 993.649,1219.04 994.235,1219.04 994.822,1219.04 995.408,1219.04 995.994,1219.04 996.581,1219.04 997.167,1219.04 997.754,1219.04 998.34,1219.04 998.926,1219.04 999.513,1219.04 1000.1,1219.04 1000.69,1219.04 1001.27,1219.04 1001.86,1219.04 1002.44,1219.04 1003.03,1219.04 1003.62,1219.04 1004.2,1219.04 1004.79,1219.04 1005.38,1219.04 1005.96,1219.04 1006.55,1219.04 1007.14,1219.04 1007.72,1219.04 1008.31,1219.04 1008.9,1219.04 1009.48,1219.04 1010.07,1219.04 1010.65,1219.04 1011.24,1219.04 1011.83,1219.04 1012.41,1219.04 1013,1219.04 1013.59,1219.04 1014.17,1219.04 1014.76,1219.04 1015.35,1219.04 1015.93,1219.04 1016.52,1219.04 1017.11,1219.04 1017.69,1219.04 1018.28,1219.04 1018.86,1219.04 1019.45,1219.04 1020.04,1219.04 1020.62,1219.04 1021.21,1219.04 1021.8,1219.04 1022.38,1219.04 1022.97,1219.04 1023.56,1219.04 1024.14,1219.04 1024.73,1219.04 1025.32,1219.04 1025.9,1219.04 1026.49,1219.04 1027.07,1219.04 1027.66,1219.04 1028.25,1219.04 1028.83,1219.04 1029.42,1219.04 1030.01,1219.04 1030.59,1219.04 1031.18,1219.04 1031.77,1219.04 1032.35,1219.04 1032.94,1219.04 1033.52,1219.04 1034.11,1219.04 1034.7,1219.04 1035.28,1219.04 1035.87,1219.04 1036.46,1219.04 1037.04,1219.04 1037.63,1219.04 1038.22,1219.04 1038.8,1219.04 1039.39,1219.04 1039.98,1219.04 1040.56,1219.04 1041.15,1219.04 1041.73,1219.04 1042.32,1219.04 1042.91,1219.04 1043.49,1219.04 1044.08,1219.04 1044.67,1219.04 1045.25,1219.04 1045.84,1219.04 1046.43,1219.04 1047.01,1219.04 1047.6,1219.04 1048.19,1219.04 1048.77,1219.04 1049.36,1219.04 1049.94,1219.04 1050.53,1219.04 1051.12,1219.04 1051.7,1219.04 1052.29,1219.04 1052.88,1219.04 1053.46,1219.04 1054.05,1219.04 1054.64,1219.04 1055.22,1219.04 1055.81,1219.04 1056.39,1219.04 1056.98,1219.04 1057.57,1219.04 1058.15,1219.04 1058.74,1219.04 1059.33,1219.04 1059.91,1219.04 1060.5,1219.04 1061.09,1219.04 1061.67,1219.04 1062.26,1219.04 1062.85,1219.04 1063.43,1219.04 1064.02,1219.04 1064.6,1219.04 1065.19,1219.04 1065.78,1219.04 1066.36,1219.04 1066.95,1219.04 1067.54,1219.04 1068.12,1219.04 1068.71,1219.04 1069.3,1219.04 1069.88,1219.04 1070.47,1219.04 1071.06,1219.04 1071.64,1219.04 1072.23,1219.04 1072.81,1219.04 1073.4,1219.04 1073.99,1219.04 1074.57,1219.04 1075.16,1219.04 1075.75,1219.04 1076.33,1219.04 1076.92,1219.04 1077.51,1219.04 1078.09,1219.04 1078.68,1219.04 1079.26,1219.04 1079.85,1219.04 1080.44,1219.04 1081.02,1219.04 1081.61,1219.04 1082.2,1219.04 1082.78,1219.04 1083.37,1219.04 1083.96,1219.04 1084.54,1219.04 1085.13,1219.04 1085.72,1219.04 1086.3,1219.04 1086.89,1219.04 1087.47,1219.04 1088.06,1219.04 1088.65,1219.04 1089.23,1219.04 1089.82,1219.04 1090.41,1219.04 1090.99,1219.04 1091.58,1219.04 1092.17,1219.04 1092.75,1219.04 1093.34,1219.04 1093.93,1219.04 1094.51,1219.04 1095.1,1219.04 1095.68,1219.04 1096.27,1219.04 1096.86,1219.04 1097.44,1219.04 1098.03,1219.04 1098.62,1219.04 1099.2,1219.04 1099.79,1219.04 1100.38,1219.04 1100.96,1219.04 1101.55,1219.04 1102.14,1219.04 1102.72,1219.04 1103.31,1219.04 1103.89,1219.04 1104.48,1219.04 1105.07,1219.04 1105.65,1219.04 1106.24,1219.04 1106.83,1219.04 1107.41,1219.04 1108,1219.04 1108.59,1219.04 1109.17,1219.04 1109.76,1219.04 1110.34,1219.04 1110.93,1219.04 1111.52,1219.04 1112.1,1219.04 1112.69,1219.04 1113.28,1219.04 1113.86,1219.04 1114.45,1219.04 1115.04,1219.04 1115.62,1219.04 1116.21,1219.04 1116.8,1219.04 1117.38,1219.04 1117.97,1219.04 1118.55,1219.04 1119.14,1219.04 1119.73,1219.04 1120.31,1219.04 1120.9,1219.04 1121.49,1219.04 1122.07,1219.04 1122.66,1219.04 1123.25,1219.04 1123.83,1219.04 1124.42,1219.04 1125.01,1219.04 1125.59,1219.04 1126.18,1219.04 1126.76,1219.04 1127.35,1219.04 1127.94,1219.04 1128.52,1219.04 1129.11,1219.04 1129.7,1219.04 1130.28,1219.04 1130.87,1219.04 1131.46,1219.04 1132.04,1219.04 1132.63,1219.04 1133.21,1219.04 1133.8,1219.04 1134.39,1219.04 1134.97,1219.04 1135.56,1219.04 1136.15,1219.04 1136.73,1219.04 1137.32,1219.04 1137.91,1219.04 1138.49,1219.04 1139.08,1219.04 1139.67,1219.04 1140.25,1219.04 1140.84,1219.04 1141.42,1219.04 1142.01,1219.04 1142.6,1219.04 1143.18,1219.04 1143.77,1219.04 1144.36,1219.04 1144.94,1219.04 1145.53,1219.04 1146.12,1219.04 1146.7,1219.04 1147.29,1219.04 1147.88,1219.04 1148.46,1219.04 1149.05,1219.04 1149.63,1219.04 1150.22,1219.04 1150.81,1219.04 1151.39,1219.04 1151.98,1219.04 1152.57,1219.04 1153.15,1219.04 1153.74,1219.04 1154.33,1219.04 1154.91,1219.04 1155.5,1219.04 1156.09,1219.04 1156.67,1219.04 1157.26,1219.04 1157.84,1219.04 1158.43,1219.04 1159.02,1219.04 1159.6,1219.04 1160.19,1219.04 1160.78,1219.04 1161.36,1219.04 1161.95,1219.04 1162.54,1219.04 1163.12,1219.04 1163.71,1219.04 1164.29,1219.04 1164.88,1219.04 1165.47,1219.04 1166.05,1219.04 1166.64,1219.04 1167.23,1219.04 1167.81,1219.04 1168.4,1219.04 1168.99,1219.04 1169.57,1219.04 1170.16,1219.04 1170.75,1219.04 1171.33,1219.04 1171.92,1219.04 1172.5,1219.04 1173.09,1219.04 1173.68,1219.04 1174.26,1219.04 1174.85,1219.04 1175.44,1219.04 1176.02,1219.04 1176.61,1219.04 1177.2,1219.04 1177.78,1219.04 1178.37,1219.04 1178.96,1219.04 1179.54,1219.04 1180.13,1219.04 1180.71,1219.04 1181.3,1219.04 1181.89,1219.04 1182.47,1219.04 1183.06,1219.04 1183.65,1219.04 1184.23,1219.04 1184.82,1219.04 1185.41,1219.04 1185.99,1219.04 1186.58,1219.04 1187.16,1219.04 1187.75,1219.04 1188.34,1219.04 1188.92,1219.04 1189.51,1219.04 1190.1,1219.04 1190.68,1219.04 1191.27,1219.04 1191.86,1219.04 1192.44,1219.04 1193.03,1219.04 1193.62,1219.04 1194.2,1219.04 1194.79,1219.04 1195.37,1219.04 1195.96,1219.04 1196.55,1219.04 1197.13,1219.04 1197.72,1219.04 1198.31,1219.04 1198.89,1219.04 1199.48,1219.04 1200.07,1219.04 1200.65,1219.04 1201.24,1219.04 1201.83,1219.04 1202.41,1219.04 1203,1219.04 1203.58,1219.04 1204.17,1219.04 1204.76,1219.04 1205.34,1219.04 1205.93,1219.04 1206.52,1219.04 1207.1,1219.04 1207.69,1219.04 1208.28,1219.04 1208.86,1219.04 1209.45,1219.04 1210.03,1219.04 1210.62,1219.04 1211.21,1219.04 1211.79,1219.04 1212.38,1219.04 1212.97,1219.04 1213.55,1219.04 1214.14,1219.04 1214.73,1219.04 1215.31,1219.04 1215.9,1219.04 1216.49,1219.04 1217.07,1219.04 1217.66,1219.04 1218.24,1219.04 1218.83,1219.04 1219.42,1219.04 1220,1219.04 1220.59,1219.04 1221.18,1219.04 1221.76,1219.04 1222.35,1219.04 1222.94,1219.04 1223.52,1219.04 1224.11,1219.04 1224.7,1219.04 1225.28,1219.04 1225.87,1219.04 1226.45,1219.04 1227.04,1219.04 1227.63,1219.04 1228.21,1219.04 1228.8,1219.04 1229.39,1219.04 1229.97,1219.04 1230.56,1219.04 1231.15,1219.04 1231.73,1219.04 1232.32,1219.04 1232.91,1219.04 1233.49,1219.04 1234.08,1219.04 1234.66,1219.04 1235.25,1219.04 1235.84,1219.04 1236.42,1219.04 1237.01,1219.04 1237.6,1219.04 1238.18,1219.04 1238.77,1219.04 1239.36,1219.04 1239.94,1219.04 1240.53,1219.04 1241.11,1219.04 1241.7,1219.04 1242.29,1219.04 1242.87,1219.04 1243.46,1219.04 1244.05,1219.04 1244.63,1219.04 1245.22,1219.04 1245.81,1219.04 1246.39,1219.04 1246.98,1219.04 1247.57,1219.04 1248.15,1219.04 1248.74,1219.04 1249.32,1219.04 1249.91,1219.04 1250.5,1219.04 1251.08,1219.04 1251.67,1219.04 1252.26,1219.04 1252.84,1219.04 1253.43,1219.04 1254.02,1219.04 1254.6,1219.04 1255.19,1219.04 1255.78,1219.04 1256.36,1219.04 1256.95,1219.04 1257.53,1219.04 1258.12,1219.04 1258.71,1219.04 1259.29,1219.04 1259.88,1219.04 1260.47,1219.04 1261.05,1219.04 1261.64,1219.04 1262.23,1219.04 1262.81,1219.04 1263.4,1219.04 1263.98,1219.04 1264.57,1219.04 1265.16,1219.04 1265.74,1219.04 1266.33,1219.04 1266.92,1219.04 1267.5,1219.04 1268.09,1219.04 1268.68,1219.04 1269.26,1219.04 1269.85,1219.04 1270.44,1219.04 1271.02,1219.04 1271.61,1219.04 1272.19,1219.04 1272.78,1219.04 1273.37,1219.04 1273.95,1219.04 1274.54,1219.04 1275.13,1219.04 1275.71,1219.04 1276.3,1219.04 1276.89,1219.04 1277.47,1219.04 1278.06,1219.04 1278.65,1219.04 1279.23,1219.04 1279.82,1219.04 1280.4,1219.04 1280.99,1219.04 1281.58,1219.04 1282.16,1219.04 1282.75,1219.04 1283.34,1219.04 1283.92,1219.04 1284.51,1219.04 1285.1,1219.04 1285.68,1219.04 1286.27,1219.04 1286.86,1219.04 1287.44,1219.04 1288.03,1219.04 1288.61,1219.04 1289.2,1219.04 1289.79,1219.04 1290.37,1219.04 1290.96,1219.04 1291.55,1219.04 1292.13,1219.04 1292.72,1219.04 1293.31,1219.04 1293.89,1219.04 1294.48,1219.04 1295.06,1219.04 1295.65,1219.04 1296.24,1219.04 1296.82,1219.04 1297.41,1219.04 1298,1219.04 1298.58,1219.04 1299.17,1219.04 1299.76,1219.04 1300.34,1219.04 1300.93,1219.04 1301.52,1219.04 1302.1,1219.04 1302.69,1219.04 1303.27,1219.04 1303.86,1219.04 1304.45,1219.04 1305.03,1219.04 1305.62,1219.04 1306.21,1219.04 1306.79,1219.04 1307.38,1219.04 1307.97,1219.04 1308.55,1219.04 1309.14,1219.04 1309.73,1219.04 1310.31,1219.04 1310.9,1219.04 1311.48,1219.04 1312.07,1219.04 1312.66,1219.04 1313.24,1219.04 1313.83,1219.04 1314.42,1219.04 1315,1219.04 1315.59,1219.04 1316.18,1219.04 1316.76,1219.04 1317.35,1219.04 1317.93,1219.04 1318.52,1219.04 1319.11,1219.04 1319.69,1219.04 1320.28,1219.04 1320.87,1219.04 1321.45,1219.04 1322.04,1219.04 1322.63,1219.04 1323.21,1219.04 1323.8,1219.04 1324.39,1219.04 1324.97,1219.04 1325.56,1219.04 1326.14,1219.04 1326.73,1219.04 1327.32,1219.04 1327.9,1219.04 1328.49,1219.04 1329.08,1219.04 1329.66,1219.04 1330.25,1219.04 1330.84,1219.04 1331.42,1219.04 1332.01,1219.04 1332.6,1219.04 1333.18,1219.04 1333.77,1219.04 1334.35,1219.04 1334.94,1219.04 1335.53,1219.04 1336.11,1219.04 1336.7,1219.04 1337.29,1219.04 1337.87,1219.04 1338.46,1219.04 1339.05,1219.04 1339.63,1219.04 1340.22,1219.04 1340.8,1219.04 1341.39,1219.04 1341.98,1219.04 1342.56,1219.04 1343.15,1219.04 1343.74,1219.04 1344.32,1219.04 1344.91,1219.04 1345.5,1219.04 1346.08,1219.04 1346.67,1219.04 1347.26,1219.04 1347.84,1219.04 1348.43,1219.04 1349.01,1219.04 1349.6,1219.04 1350.19,1219.04 1350.77,1219.04 1351.36,1219.04 1351.95,1219.04 1352.53,1219.04 1353.12,1219.04 1353.71,1219.04 1354.29,1219.04 1354.88,1219.04 1355.47,1219.04 1356.05,1219.04 1356.64,1219.04 1357.22,1219.04 1357.81,1219.04 1358.4,1219.04 1358.98,1219.04 1359.57,1219.04 1360.16,1219.04 1360.74,1219.04 1361.33,1219.04 1361.92,1219.04 1362.5,1219.04 1363.09,1219.04 1363.68,1219.04 1364.26,1219.04 1364.85,1219.04 1365.43,1219.04 1366.02,1219.04 1366.61,1219.04 1367.19,1219.04 1367.78,1219.04 1368.37,1219.04 1368.95,1219.04 1369.54,1219.04 1370.13,1219.04 1370.71,1219.04 1371.3,1219.04 1371.88,1219.04 1372.47,1219.04 1373.06,1219.04 1373.64,1219.04 1374.23,1219.04 1374.82,1219.04 1375.4,1219.04 1375.99,1219.04 1376.58,1219.04 1377.16,1219.04 1377.75,1219.04 1378.34,1219.04 1378.92,1219.04 1379.51,1219.04 1380.09,1219.04 1380.68,1219.04 1381.27,1219.04 1381.85,1219.04 1382.44,1219.04 1383.03,1219.04 1383.61,1219.04 1384.2,1219.04 1384.79,1219.04 1385.37,1219.04 1385.96,1219.04 1386.55,1219.04 1387.13,1219.04 1387.72,1219.04 1388.3,1219.04 1388.89,1219.04 1389.48,1219.04 1390.06,1219.04 1390.65,1219.04 1391.24,1219.04 1391.82,1219.04 1392.41,1219.04 1393,1219.04 1393.58,1219.04 1394.17,1219.04 1394.75,1219.04 1395.34,1219.04 1395.93,1219.04 1396.51,1219.04 1397.1,1219.04 1397.69,1219.04 1398.27,1219.04 1398.86,1219.04 1399.45,1219.04 1400.03,1219.04 1400.62,1219.04 1401.21,1219.04 1401.79,1219.04 1402.38,1219.04 1402.96,1219.04 1403.55,1219.04 1404.14,1219.04 1404.72,1219.04 1405.31,1219.04 1405.9,1219.04 1406.48,1219.04 1407.07,1219.04 1407.66,1219.04 1408.24,1219.04 1408.83,1219.04 1409.42,1219.04 1410,1219.04 1410.59,1219.04 1411.17,1219.04 1411.76,1219.04 1412.35,1219.04 1412.93,1219.04 1413.52,1219.04 1414.11,1219.04 1414.69,1219.04 1415.28,1219.04 1415.87,1219.04 1416.45,1219.04 1417.04,1219.04 1417.63,1219.04 1418.21,1219.04 1418.8,1219.04 1419.38,1219.04 1419.97,1219.04 1420.56,1219.04 1421.14,1219.04 1421.73,1219.04 1422.32,1219.04 1422.9,1219.04 1423.49,1219.04 1424.08,1219.04 1424.66,1219.04 1425.25,1219.04 1425.83,1219.04 1426.42,1219.04 1427.01,1219.04 1427.59,1219.04 1428.18,1219.04 1428.77,1219.04 1429.35,1219.04 1429.94,1219.04 1430.53,1219.04 1431.11,1219.04 1431.7,1219.04 1432.29,1219.04 1432.87,1219.04 1433.46,1219.04 1434.04,1219.04 1434.63,1219.04 1435.22,1219.04 1435.8,1219.04 1436.39,1219.04 1436.98,1219.04 1437.56,1219.04 1438.15,1219.04 1438.74,1219.04 1439.32,1219.04 1439.91,1219.04 1440.5,1219.04 1441.08,1219.04 1441.67,1219.04 1442.25,1219.04 1442.84,1219.04 1443.43,1219.04 1444.01,1219.04 1444.6,1219.04 1445.19,1219.04 1445.77,1219.04 1446.36,1219.04 1446.95,1219.04 1447.53,1219.04 1448.12,1219.04 1448.7,1219.04 1449.29,1219.04 1449.88,1219.04 1450.46,1219.04 1451.05,1219.04 1451.64,1219.04 1452.22,1219.04 1452.81,1219.04 1453.4,1219.04 1453.98,1219.04 1454.57,1219.04 1455.16,1219.04 1455.74,1219.04 1456.33,1219.04 1456.91,1219.04 1457.5,1219.04 1458.09,1219.04 1458.67,1219.04 1459.26,1219.04 1459.85,1219.04 1460.43,1219.04 1461.02,1219.04 1461.61,1219.04 1462.19,1219.04 1462.78,1219.04 1463.37,1219.04 1463.95,1219.04 1464.54,1219.04 1465.12,1219.04 1465.71,1219.04 1466.3,1219.04 1466.88,1219.04 1467.47,1219.04 1468.06,1219.04 1468.64,1219.04 1469.23,1219.04 1469.82,1219.04 1470.4,1219.04 1470.99,1219.04 1471.57,1219.04 1472.16,1219.04 1472.75,1219.04 1473.33,1219.04 1473.92,1219.04 1474.51,1219.04 1475.09,1219.04 1475.68,1219.04 1476.27,1219.04 1476.85,1219.04 1477.44,1219.04 1478.03,1219.04 1478.61,1219.04 1479.2,1219.04 1479.78,1219.04 1480.37,1219.04 1480.96,1219.04 1481.54,1219.04 1482.13,1219.04 1482.72,1219.04 1483.3,1219.04 1483.89,1219.04 1484.48,1219.04 1485.06,1219.04 1485.65,1219.04 1486.24,1219.04 1486.82,1219.04 1487.41,1219.04 1487.99,1219.04 1488.58,1219.04 1489.17,1219.04 1489.75,1219.04 1490.34,1219.04 1490.93,1219.04 1491.51,1219.04 1492.1,1219.04 1492.69,1219.04 1493.27,1219.04 1493.86,1219.04 1494.45,1219.04 1495.03,1219.04 1495.62,1219.04 1496.2,1219.04 1496.79,1219.04 1497.38,1219.04 1497.96,1219.04 1498.55,1219.04 1499.14,1219.04 1499.72,1219.04 1500.31,1219.04 1500.9,1219.04 1501.48,1219.04 1502.07,1219.04 1502.65,1219.04 1503.24,1219.04 1503.83,1219.04 1504.41,1219.04 1505,1219.04 1505.59,1219.04 1506.17,1219.04 1506.76,1219.04 1507.35,1219.04 1507.93,1219.04 1508.52,1219.04 1509.11,1219.04 1509.69,1219.04 1510.28,1219.04 1510.86,1219.04 1511.45,1219.04 1512.04,1219.04 1512.62,1219.04 1513.21,1219.04 1513.8,1219.04 1514.38,1219.04 1514.97,1219.04 1515.56,1219.04 1516.14,1219.04 1516.73,1219.04 1517.32,1219.04 1517.9,1219.04 1518.49,1219.04 1519.07,1219.04 1519.66,1219.04 1520.25,1219.04 1520.83,1219.04 1521.42,1219.04 1522.01,1219.04 1522.59,1219.04 1523.18,1219.04 1523.77,1219.04 1524.35,1219.04 1524.94,1219.04 1525.52,1219.04 1526.11,1219.04 1526.7,1219.04 1527.28,1219.04 1527.87,1219.04 1528.46,1219.04 1529.04,1219.04 1529.63,1219.04 1530.22,1219.04 1530.8,1219.04 1531.39,1219.04 1531.98,1219.04 1532.56,1219.04 1533.15,1219.04 1533.73,1219.04 1534.32,1219.04 1534.91,1219.04 1535.49,1219.04 1536.08,1219.04 1536.67,1219.04 1537.25,1219.04 1537.84,1219.04 1538.43,1219.04 1539.01,1219.04 1539.6,1219.04 1540.19,1219.04 1540.77,1219.04 1541.36,1219.04 1541.94,1219.04 1542.53,1219.04 1543.12,1219.04 1543.7,1219.04 1544.29,1219.04 1544.88,1219.04 1545.46,1219.04 1546.05,1219.04 1546.64,1219.04 1547.22,1219.04 1547.81,1219.04 1548.4,1219.04 1548.98,1219.04 1549.57,1219.04 1550.15,1219.04 1550.74,1219.04 1551.33,1219.04 1551.91,1219.04 1552.5,1219.04 1553.09,1219.04 1553.67,1219.04 1554.26,1219.04 1554.85,1219.04 1555.43,1219.04 1556.02,1219.04 1556.6,1219.04 1557.19,1219.04 1557.78,1219.04 1558.36,1219.04 1558.95,1219.04 1559.54,1219.04 1560.12,1219.04 1560.71,1219.04 1561.3,1219.04 1561.88,1219.04 1562.47,1219.04 1563.06,1219.04 1563.64,1219.04 1564.23,1219.04 1564.81,1219.04 1565.4,1219.04 1565.99,1219.04 1566.57,1219.04 1567.16,1219.04 1567.75,1219.04 1568.33,1219.04 1568.92,1219.04 1569.51,1219.04 1570.09,1219.04 1570.68,1219.04 1571.27,1219.04 1571.85,1219.04 1572.44,1219.04 1573.02,1219.04 1573.61,1219.04 1574.2,1219.04 1574.78,1219.04 1575.37,1219.04 1575.96,1219.04 1576.54,1219.04 1577.13,1219.04 1577.72,1219.04 1578.3,1219.04 1578.89,1219.04 1579.47,1219.04 1580.06,1219.04 1580.65,1219.04 1581.23,1219.04 1581.82,1219.04 1582.41,1219.04 1582.99,1219.04 1583.58,1219.04 1584.17,1219.04 1584.75,1219.04 1585.34,1219.04 1585.93,1219.04 1586.51,1219.04 1587.1,1219.04 1587.68,1219.04 1588.27,1219.04 1588.86,1219.04 1589.44,1219.04 1590.03,1219.04 1590.62,1219.04 1591.2,1219.04 1591.79,1219.04 1592.38,1219.04 1592.96,1219.04 1593.55,1219.04 1594.14,1219.04 1594.72,1219.04 1595.31,1219.04 1595.89,1219.04 1596.48,1219.04 1597.07,1219.04 1597.65,1219.04 1598.24,1219.04 1598.83,1219.04 1599.41,1219.04 1600,1219.04 1600.59,1219.04 1601.17,1219.04 1601.76,1219.04 1602.34,1219.04 1602.93,1219.04 1603.52,1219.04 1604.1,1219.04 1604.69,1219.04 1605.28,1219.04 1605.86,1219.04 1606.45,1219.04 1607.04,1219.04 1607.62,1219.04 1608.21,1219.04 1608.8,1219.04 1609.38,1219.04 1609.97,1219.04 1610.55,1219.04 1611.14,1219.04 1611.73,1219.04 1612.31,1219.04 1612.9,1219.04 1613.49,1219.04 1614.07,1219.04 1614.66,1219.04 1615.25,1219.04 1615.83,1219.04 1616.42,1219.04 1617.01,1219.04 1617.59,1219.04 1618.18,1219.04 1618.76,1219.04 1619.35,1219.04 1619.94,1219.04 1620.52,1219.04 1621.11,1219.04 1621.7,1219.04 1622.28,1219.04 1622.87,1219.04 1623.46,1219.04 1624.04,1219.04 1624.63,1219.04 1625.22,1219.04 1625.8,1219.04 1626.39,1219.04 1626.97,1219.04 1627.56,1219.04 1628.15,1219.04 1628.73,1219.04 1629.32,1219.04 1629.91,1219.04 1630.49,1219.04 1631.08,1219.04 1631.67,1219.04 1632.25,1219.04 1632.84,1219.04 1633.42,1219.04 1634.01,1219.04 1634.6,1219.04 1635.18,1219.04 1635.77,1219.04 1636.36,1219.04 1636.94,1219.04 1637.53,1219.04 1638.12,1219.04 1638.7,1219.04 1639.29,1219.04 1639.88,1219.04 1640.46,1219.04 1641.05,1219.04 1641.63,1219.04 1642.22,1219.04 1642.81,1219.04 1643.39,1219.04 1643.98,1219.04 1644.57,1219.04 1645.15,1219.04 1645.74,1219.04 1646.33,1219.04 1646.91,1219.04 1647.5,1219.04 1648.09,1219.04 1648.67,1219.04 1649.26,1219.04 1649.84,1219.04 1650.43,1219.04 1651.02,1219.04 1651.6,1219.04 1652.19,1219.04 1652.78,1219.04 1653.36,1219.04 1653.95,1219.04 1654.54,1219.04 1655.12,1219.04 1655.71,1219.04 1656.29,1219.04 1656.88,1219.04 1657.47,1219.04 1658.05,1219.04 1658.64,1219.04 1659.23,1219.04 1659.81,1219.04 1660.4,1219.04 1660.99,1219.04 1661.57,1219.04 1662.16,1219.04 1662.75,1219.04 1663.33,1219.04 1663.92,1219.04 1664.5,1219.04 1665.09,1219.04 1665.68,1219.04 1666.26,1219.04 1666.85,1219.04 1667.44,1219.04 1668.02,1219.04 1668.61,1219.04 1669.2,1219.04 1669.78,1219.04 1670.37,1219.04 1670.96,1219.04 1671.54,1219.04 1672.13,1219.04 1672.71,1219.04 1673.3,1219.04 1673.89,1219.04 1674.47,1219.04 1675.06,1219.04 1675.65,1219.04 1676.23,1219.04 1676.82,1219.04 1677.41,1219.04 1677.99,1219.04 1678.58,1219.04 1679.17,1219.04 1679.75,1219.04 1680.34,1219.04 1680.92,1219.04 1681.51,1219.04 1682.1,1219.04 1682.68,1219.04 1683.27,1219.04 1683.86,1219.04 1684.44,1219.04 1685.03,1219.04 1685.62,1219.04 1686.2,1219.04 1686.79,1219.04 1687.37,1219.04 1687.96,1219.04 1688.55,1219.04 1689.13,1219.04 1689.72,1219.04 1690.31,1219.04 1690.89,1219.04 1691.48,1219.04 1692.07,1219.04 1692.65,1219.04 1693.24,1219.04 1693.83,1219.04 1694.41,1219.04 1695,1219.04 1695.58,1219.04 1696.17,1219.04 1696.76,1219.04 1697.34,1219.04 1697.93,1219.04 1698.52,1219.04 1699.1,1219.04 1699.69,1219.04 1700.28,1219.04 1700.86,1219.04 1701.45,1219.04 1702.04,1219.04 1702.62,1219.04 1703.21,1219.04 1703.79,1219.04 1704.38,1219.04 1704.97,1219.04 1705.55,1219.04 1706.14,1219.04 1706.73,1219.04 1707.31,1219.04 1707.9,1219.04 1708.49,1219.04 1709.07,1219.04 1709.66,1219.04 1710.24,1219.04 1710.83,1219.04 1711.42,1219.04 1712,1219.04 1712.59,1219.04 1713.18,1219.04 1713.76,1219.04 1714.35,1219.04 1714.94,1219.04 1715.52,1219.04 1716.11,1219.04 1716.7,1219.04 1717.28,1219.04 1717.87,1219.04 1718.45,1219.04 1719.04,1219.04 1719.63,1219.04 1720.21,1219.04 1720.8,1219.04 1721.39,1219.04 1721.97,1219.04 1722.56,1219.04 1723.15,1219.04 1723.73,1219.04 1724.32,1219.04 1724.91,1219.04 1725.49,1219.04 1726.08,1219.04 1726.66,1219.04 1727.25,1219.04 1727.84,1219.04 1728.42,1219.04 1729.01,1219.04 1729.6,1219.04 1730.18,1219.04 1730.77,1219.04 1731.36,1219.04 1731.94,1219.04 1732.53,1219.04 1733.11,1219.04 1733.7,1219.04 1734.29,1219.04 1734.87,1219.04 1735.46,1219.04 1736.05,1219.04 1736.63,1219.04 1737.22,1219.04 1737.81,1219.04 1738.39,1219.04 1738.98,1219.04 1739.57,1219.04 1740.15,1219.04 1740.74,1219.04 1741.32,1219.04 1741.91,1219.04 1742.5,1219.04 1743.08,1219.04 1743.67,1219.04 1744.26,1219.04 1744.84,1219.04 1745.43,1219.04 1746.02,1219.04 1746.6,1219.04 1747.19,1219.04 1747.78,1219.04 1748.36,1219.04 1748.95,1219.04 1749.53,1219.04 1750.12,1219.04 1750.71,1219.04 1751.29,1219.04 1751.88,1219.04 1752.47,1219.04 1753.05,1219.04 1753.64,1219.04 1754.23,1219.04 1754.81,1219.04 1755.4,1219.04 1755.99,1219.04 1756.57,1219.04 1757.16,1219.04 1757.74,1219.04 1758.33,1219.04 1758.92,1219.04 1759.5,1219.04 1760.09,1219.04 1760.68,1219.04 1761.26,1219.04 1761.85,1219.04 1762.44,1219.04 1763.02,1219.04 1763.61,1219.04 1764.19,1219.04 1764.78,1219.04 1765.37,1219.04 1765.95,1219.04 1766.54,1219.04 1767.13,1219.04 1767.71,1219.04 1768.3,1219.04 1768.89,1219.04 1769.47,1219.04 1770.06,1219.04 1770.65,1219.04 1771.23,1219.04 1771.82,1219.04 1772.4,1219.04 1772.99,1219.04 1773.58,1219.04 1774.16,1219.04 1774.75,1219.04 1775.34,1219.04 1775.92,1219.04 1776.51,1219.04 1777.1,1219.04 1777.68,1219.04 1778.27,1219.04 1778.86,1219.04 1779.44,1219.04 1780.03,1219.04 1780.61,1219.04 1781.2,1219.04 1781.79,1219.04 1782.37,1219.04 1782.96,1219.04 1783.55,1219.04 1784.13,1219.04 1784.72,1219.04 1785.31,1219.04 1785.89,1219.04 1786.48,1219.04 1787.06,1219.04 1787.65,1219.04 1788.24,1219.04 1788.82,1219.04 1789.41,1219.04 1790,1219.04 1790.58,1219.04 1791.17,1219.04 1791.76,1219.04 1792.34,1219.04 1792.93,1219.04 1793.52,1219.04 1794.1,1219.04 1794.69,1219.04 1795.27,1219.04 1795.86,1219.04 1796.45,1219.04 1797.03,1219.04 1797.62,1219.04 1798.21,1219.04 1798.79,1219.04 1799.38,1219.04 1799.97,1219.04 1800.55,1219.04 1801.14,1219.04 1801.73,1219.04 1802.31,1219.04 1802.9,1219.04 1803.48,1219.04 1804.07,1219.04 1804.66,1219.04 1805.24,1219.04 1805.83,1219.04 1806.42,1219.04 1807,1219.04 1807.59,1219.04 1808.18,1219.04 1808.76,1219.04 1809.35,1219.04 1809.94,1219.04 1810.52,1219.04 1811.11,1219.04 1811.69,1219.04 1812.28,1219.04 1812.87,1219.04 1813.45,1219.04 1814.04,1219.04 1814.63,1219.04 1815.21,1219.04 1815.8,1219.04 1816.39,1219.04 1816.97,1219.04 1817.56,1219.04 1818.14,1219.04 1818.73,1219.04 1819.32,1219.04 1819.9,1219.04 1820.49,1219.04 1821.08,1219.04 1821.66,1219.04 1822.25,1219.04 1822.84,1219.04 1823.42,1219.04 1824.01,1219.04 1824.6,1219.04 1825.18,1219.04 1825.77,1219.04 1826.35,1219.04 1826.94,1219.04 1827.53,1219.04 1828.11,1219.04 1828.7,1219.04 1829.29,1219.04 1829.87,1219.04 1830.46,1219.04 1831.05,1219.04 1831.63,1219.04 1832.22,1219.04 1832.81,1219.04 1833.39,1219.04 1833.98,1219.04 1834.56,1219.04 1835.15,1219.04 1835.74,1219.04 1836.32,1219.04 1836.91,1219.04 1837.5,1219.04 1838.08,1219.04 1838.67,1219.04 1839.26,1219.04 1839.84,1219.04 1840.43,1219.04 1841.01,1219.04 1841.6,1219.04 1842.19,1219.04 1842.77,1219.04 1843.36,1219.04 1843.95,1219.04 1844.53,1219.04 1845.12,1219.04 1845.71,1219.04 1846.29,1219.04 1846.88,1219.04 1847.47,1219.04 1848.05,1219.04 1848.64,1219.04 1849.22,1219.04 1849.81,1219.04 1850.4,1219.04 1850.98,1219.04 1851.57,1219.04 1852.16,1219.04 1852.74,1219.04 1853.33,1219.04 1853.92,1219.04 1854.5,1219.04 1855.09,1219.04 1855.68,1219.04 1856.26,1219.04 1856.85,1219.04 1857.43,1219.04 1858.02,1219.04 1858.61,1219.04 1859.19,1219.04 1859.78,1219.04 1860.37,1219.04 1860.95,1219.04 1861.54,1219.04 1862.13,1219.04 1862.71,1219.04 1863.3,1219.04 1863.88,1219.04 1864.47,1219.04 1865.06,1219.04 1865.64,1219.04 1866.23,1219.04 1866.82,1219.04 1867.4,1219.04 1867.99,1219.04 1868.58,1219.04 1869.16,1219.04 1869.75,1219.04 1870.34,1219.04 1870.92,1219.04 1871.51,1219.04 1872.09,1219.04 1872.68,1219.04 1873.27,1219.04 1873.85,1219.04 1874.44,1219.04 1875.03,1219.04 1875.61,1219.04 1876.2,1219.04 1876.79,1219.04 1877.37,1219.04 1877.96,1219.04 1878.55,1219.04 1879.13,1219.04 1879.72,1219.04 1880.3,1219.04 1880.89,1219.04 1881.48,1219.04 1882.06,1219.04 1882.65,1219.04 1883.24,1219.04 1883.82,1219.04 1884.41,1219.04 1885,1219.04 1885.58,1219.04 1886.17,1219.04 1886.76,1219.04 1887.34,1219.04 1887.93,1219.04 1888.51,1219.04 1889.1,1219.04 1889.69,1219.04 1890.27,1219.04 1890.86,1219.04 1891.45,1219.04 1892.03,1219.04 1892.62,1219.04 1893.21,1219.04 1893.79,1219.04 1894.38,1219.04 1894.96,1219.04 1895.55,1219.04 1896.14,1219.04 1896.72,1219.04 1897.31,1219.04 1897.9,1219.04 1898.48,1219.04 1899.07,1219.04 1899.66,1219.04 1900.24,1219.04 1900.83,1219.04 1901.42,1219.04 1902,1219.04 1902.59,1219.04 1903.17,1219.04 1903.76,1219.04 1904.35,1219.04 1904.93,1219.04 1905.52,1219.04 1906.11,1219.04 1906.69,1219.04 1907.28,1219.04 1907.87,1219.04 1908.45,1219.04 1909.04,1219.04 1909.63,1219.04 1910.21,1219.04 1910.8,1219.04 1911.38,1219.04 1911.97,1219.04 1912.56,1219.04 1913.14,1219.04 1913.73,1219.04 1914.32,1219.04 1914.9,1219.04 1915.49,1219.04 1916.08,1219.04 1916.66,1219.04 1917.25,1219.04 1917.83,1219.04 1918.42,1219.04 1919.01,1219.04 1919.59,1219.04 1920.18,1219.04 1920.77,1219.04 1921.35,1219.04 1921.94,1219.04 1922.53,1219.04 1923.11,1219.04 1923.7,1219.04 1924.29,1219.04 1924.87,1219.04 1925.46,1219.04 1926.04,1219.04 1926.63,1219.04 1927.22,1219.04 1927.8,1219.04 1928.39,1219.04 1928.98,1219.04 1929.56,1219.04 1930.15,1219.04 1930.74,1219.04 1931.32,1219.04 1931.91,1219.04 1932.5,1219.04 1933.08,1219.04 1933.67,1219.04 1934.25,1219.04 1934.84,1219.04 1935.43,1219.04 1936.01,1219.04 1936.6,1219.04 1937.19,1219.04 1937.77,1219.04 1938.36,1219.04 1938.95,1219.04 1939.53,1219.04 1940.12,1219.04 1940.71,1219.04 1941.29,1219.04 1941.88,1219.04 1942.46,1219.04 1943.05,1219.04 1943.64,1219.04 1944.22,1219.04 1944.81,1219.04 1945.4,1219.04 1945.98,1219.04 1946.57,1219.04 1947.16,1219.04 1947.74,1219.04 1948.33,1219.04 1948.91,1219.04 1949.5,1219.04 1950.09,1219.04 1950.67,1219.04 1951.26,1219.04 1951.85,1219.04 1952.43,1219.04 1953.02,1219.04 1953.61,1219.04 1954.19,1219.04 1954.78,1219.04 1955.37,1219.04 1955.95,1219.04 1956.54,1219.04 1957.12,1219.04 1957.71,1219.04 1958.3,1219.04 1958.88,1219.04 1959.47,1219.04 1960.06,1219.04 1960.64,1219.04 1961.23,1219.04 1961.82,1219.04 1962.4,1219.04 1962.99,1219.04 1963.58,1219.04 1964.16,1219.04 1964.75,1219.04 1965.33,1219.04 1965.92,1219.04 1966.51,1219.04 1967.09,1219.04 1967.68,1219.04 1968.27,1219.04 1968.85,1219.04 1969.44,1219.04 1970.03,1219.04 1970.61,1219.04 1971.2,1219.04 1971.78,1219.04 1972.37,1219.04 1972.96,1219.04 1973.54,1219.04 1974.13,1219.04 1974.72,1219.04 1975.3,1219.04 1975.89,1219.04 1976.48,1219.04 1977.06,1219.04 1977.65,1219.04 1978.24,1219.04 1978.82,1219.04 1979.41,1219.04 1979.99,1219.04 1980.58,1219.04 1981.17,1219.04 1981.75,1219.04 1982.34,1219.04 1982.93,1219.04 1983.51,1219.04 1984.1,1219.04 1984.69,1219.04 1985.27,1219.04 1985.86,1219.04 1986.45,1219.04 1987.03,1219.04 1987.62,1219.04 1988.2,1219.04 1988.79,1219.04 1989.38,1219.04 1989.96,1219.04 1990.55,1219.04 1991.14,1219.04 1991.72,1219.04 1992.31,1219.04 1992.9,1219.04 1993.48,1219.04 1994.07,1219.04 1994.65,1219.04 1995.24,1219.04 1995.83,1219.04 1996.41,1219.04 1997,1219.04 1997.59,1219.04 1998.17,1219.04 1998.76,1219.04 1999.35,1219.04 1999.93,1219.04 2000.52,1219.04 2001.11,1219.04 2001.69,1219.04 2002.28,1219.04 2002.86,1219.04 2003.45,1219.04 2004.04,1219.04 2004.62,1219.04 2005.21,1219.04 2005.8,1219.04 2006.38,1219.04 2006.97,1219.04 2007.56,1219.04 2008.14,1219.04 2008.73,1219.04 2009.32,1219.04 2009.9,1219.04 2010.49,1219.04 2011.07,1219.04 2011.66,1219.04 2012.25,1219.04 2012.83,1219.04 2013.42,1219.04 2014.01,1219.04 2014.59,1219.04 2015.18,1219.04 2015.77,1219.04 2016.35,1219.04 2016.94,1219.04 2017.53,1219.04 2018.11,1219.04 2018.7,1219.04 2019.28,1219.04 2019.87,1219.04 2020.46,1219.04 2021.04,1219.04 2021.63,1219.04 2022.22,1219.04 2022.8,1219.04 2023.39,1219.04 2023.98,1219.04 2024.56,1219.04 2025.15,1219.04 2025.73,1219.04 2026.32,1219.04 2026.91,1219.04 2027.49,1219.04 2028.08,1219.04 2028.67,1219.04 2029.25,1219.04 2029.84,1219.04 2030.43,1219.04 2031.01,1219.04 2031.6,1219.04 2032.19,1219.04 2032.77,1219.04 2033.36,1219.04 2033.94,1219.04 2034.53,1219.04 2035.12,1219.04 2035.7,1219.04 2036.29,1219.04 2036.88,1219.04 2037.46,1219.04 2038.05,1219.04 2038.64,1219.04 2039.22,1219.04 2039.81,1219.04 2040.4,1219.04 2040.98,1219.04 2041.57,1219.04 2042.15,1219.04 2042.74,1219.04 2043.33,1219.04 2043.91,1219.04 2044.5,1219.04 2045.09,1219.04 2045.67,1219.04 2046.26,1219.04 2046.85,1219.04 2047.43,1219.04 2048.02,1219.04 2048.6,1219.04 2049.19,1219.04 2049.78,1219.04 2050.36,1219.04 2050.95,1219.04 2051.54,1219.04 2052.12,1219.04 2052.71,1219.04 2053.3,1219.04 2053.88,1219.04 2054.47,1219.04 2055.06,1219.04 2055.64,1219.04 2056.23,1219.04 2056.81,1219.04 2057.4,1219.04 2057.99,1219.04 2058.57,1219.04 2059.16,1219.04 2059.75,1219.04 2060.33,1219.04 2060.92,1219.04 2061.51,1219.04 2062.09,1219.04 2062.68,1219.04 2063.27,1219.04 2063.85,1219.04 2064.44,1219.04 2065.02,1219.04 2065.61,1219.04 2066.2,1219.04 2066.78,1219.04 2067.37,1219.04 2067.96,1219.04 2068.54,1219.04 2069.13,1219.04 2069.72,1219.04 2070.3,1219.04 2070.89,1219.04 2071.48,1219.04 2072.06,1219.04 2072.65,1219.04 2073.23,1219.04 2073.82,1219.04 2074.41,1219.04 2074.99,1219.04 2075.58,1219.04 2076.17,1219.04 2076.75,1219.04 2077.34,1219.04 2077.93,1219.04 2078.51,1219.04 2079.1,1219.04 2079.68,1219.04 2080.27,1219.04 2080.86,1219.04 2081.44,1219.04 2082.03,1219.04 2082.62,1219.04 2083.2,1219.04 2083.79,1219.04 2084.38,1219.04 2084.96,1219.04 2085.55,1219.04 2086.14,1219.04 2086.72,1219.04 2087.31,1219.04 2087.89,1219.04 2088.48,1219.04 2089.07,1219.04 2089.65,1219.04 2090.24,1219.04 2090.83,1219.04 2091.41,1219.04 2092,1219.04 2092.59,1219.04 2093.17,1219.04 2093.76,1219.04 2094.35,1219.04 2094.93,1219.04 2095.52,1219.04 2096.1,1219.04 2096.69,1219.04 2097.28,1219.04 2097.86,1219.04 2098.45,1219.04 2099.04,1219.04 2099.62,1219.04 2100.21,1219.04 2100.8,1219.04 2101.38,1219.04 2101.97,1219.04 2102.55,1219.04 2103.14,1219.04 2103.73,1219.04 2104.31,1219.04 2104.9,1219.04 2105.49,1219.04 2106.07,1219.04 2106.66,1219.04 2107.25,1219.04 2107.83,1219.04 2108.42,1219.04 2109.01,1219.04 2109.59,1219.04 2110.18,1219.04 2110.76,1219.04 2111.35,1219.04 2111.94,1219.04 2112.52,1219.04 2113.11,1219.04 2113.7,1219.04 2114.28,1219.04 2114.87,1219.04 2115.46,1219.04 2116.04,1219.04 2116.63,1219.04 2117.22,1219.04 2117.8,1219.04 2118.39,1219.04 2118.97,1219.04 2119.56,1219.04 2120.15,1219.04 2120.73,1219.04 2121.32,1219.04 2121.91,1219.04 2122.49,1219.04 2123.08,1219.04 2123.67,1219.04 2124.25,1219.04 2124.84,1219.04 2125.42,1219.04 2126.01,1219.04 2126.6,1219.04 2127.18,1219.04 2127.77,1219.04 2128.36,1219.04 2128.94,1219.04 2129.53,1219.04 2130.12,1219.04 2130.7,1219.04 2131.29,1219.04 2131.88,1219.04 2132.46,1219.04 2133.05,1219.04 2133.63,1219.04 2134.22,1219.04 2134.81,1219.04 2135.39,1219.04 2135.98,1219.04 2136.57,1219.04 2137.15,1219.04 2137.74,1219.04 2138.33,1219.04 2138.91,1219.04 2139.5,1219.04 2140.09,1219.04 2140.67,1219.04 2141.26,1219.04 2141.84,1219.04 2142.43,1219.04 2143.02,1219.04 2143.6,1219.04 2144.19,1219.04 2144.78,1219.04 2145.36,1219.04 2145.95,1219.04 2146.54,1219.04 2147.12,1219.04 2147.71,1219.04 2148.3,1219.04 2148.88,1219.04 2149.47,1219.04 2150.05,1219.04 2150.64,1219.04 2151.23,1219.04 2151.81,1219.04 2152.4,1219.04 2152.99,1219.04 2153.57,1219.04 2154.16,1219.04 2154.75,1219.04 2155.33,1219.04 2155.92,1219.04 2156.5,1219.04 2157.09,1219.04 2157.68,1219.04 2158.26,1219.04 \"/>\n<path clip-path=\"url(#clip972)\" d=\"M986.025 1218.89 L986.612 1218.89 L987.198 1218.89 L987.785 1218.89 L988.371 1218.89 L988.957 1218.89 L989.544 1218.89 L990.13 1218.89 L990.717 1218.89 L991.303 1218.89 L991.889 1218.89 L992.476 1218.89 L993.062 1218.89 L993.649 1218.89 L994.235 1218.89 L994.822 1218.89 L995.408 1218.89 L995.994 1218.89 L996.581 1218.89 L997.167 1218.89 L997.754 1218.89 L998.34 1218.89 L998.926 1218.89 L999.513 1218.89 L1000.1 1218.89 L1000.69 1218.89 L1001.27 1218.89 L1001.86 1218.89 L1002.44 1218.89 L1003.03 1218.89 L1003.62 1218.89 L1004.2 1218.89 L1004.79 1218.89 L1005.38 1218.89 L1005.96 1218.89 L1006.55 1218.89 L1007.14 1218.89 L1007.72 1218.89 L1008.31 1218.89 L1008.9 1218.89 L1009.48 1218.89 L1010.07 1218.89 L1010.65 1218.89 L1011.24 1218.89 L1011.83 1218.89 L1012.41 1218.89 L1013 1218.89 L1013.59 1218.89 L1014.17 1218.89 L1014.76 1218.89 L1015.35 1218.89 L1015.93 1218.89 L1016.52 1218.89 L1017.11 1218.89 L1017.69 1218.89 L1018.28 1218.89 L1018.86 1218.89 L1019.45 1218.89 L1020.04 1218.89 L1020.62 1218.89 L1021.21 1218.89 L1021.8 1218.89 L1022.38 1218.89 L1022.97 1218.89 L1023.56 1218.89 L1024.14 1218.89 L1024.73 1218.89 L1025.32 1218.89 L1025.9 1218.89 L1026.49 1218.89 L1027.07 1218.89 L1027.66 1218.89 L1028.25 1218.89 L1028.83 1218.89 L1029.42 1218.89 L1030.01 1218.89 L1030.59 1218.89 L1031.18 1218.89 L1031.77 1218.89 L1032.35 1218.89 L1032.94 1218.89 L1033.52 1218.89 L1034.11 1218.89 L1034.7 1218.89 L1035.28 1218.89 L1035.87 1218.89 L1036.46 1218.89 L1037.04 1218.89 L1037.63 1218.89 L1038.22 1218.89 L1038.8 1218.89 L1039.39 1218.89 L1039.98 1218.89 L1040.56 1218.89 L1041.15 1218.89 L1041.73 1218.89 L1042.32 1218.89 L1042.91 1218.89 L1043.49 1218.89 L1044.08 1218.89 L1044.67 1218.89 L1045.25 1218.89 L1045.84 1218.89 L1046.43 1218.89 L1047.01 1218.89 L1047.6 1218.89 L1048.19 1218.89 L1048.77 1218.89 L1049.36 1218.89 L1049.94 1218.89 L1050.53 1218.89 L1051.12 1218.89 L1051.7 1218.89 L1052.29 1218.89 L1052.88 1218.89 L1053.46 1218.89 L1054.05 1218.89 L1054.64 1218.89 L1055.22 1218.89 L1055.81 1218.89 L1056.39 1218.89 L1056.98 1218.89 L1057.57 1218.89 L1058.15 1218.89 L1058.74 1218.89 L1059.33 1218.89 L1059.91 1218.89 L1060.5 1218.89 L1061.09 1218.89 L1061.67 1218.89 L1062.26 1218.89 L1062.85 1218.89 L1063.43 1218.89 L1064.02 1218.89 L1064.6 1218.89 L1065.19 1218.89 L1065.78 1218.89 L1066.36 1218.89 L1066.95 1218.89 L1067.54 1218.89 L1068.12 1218.89 L1068.71 1218.89 L1069.3 1218.89 L1069.88 1218.89 L1070.47 1218.89 L1071.06 1218.89 L1071.64 1218.89 L1072.23 1218.89 L1072.81 1218.89 L1073.4 1218.89 L1073.99 1218.89 L1074.57 1218.89 L1075.16 1218.89 L1075.75 1218.89 L1076.33 1218.89 L1076.92 1218.89 L1077.51 1218.89 L1078.09 1218.89 L1078.68 1218.89 L1079.26 1218.89 L1079.85 1218.89 L1080.44 1218.89 L1081.02 1218.89 L1081.61 1218.89 L1082.2 1218.89 L1082.78 1218.89 L1083.37 1218.89 L1083.96 1218.89 L1084.54 1218.89 L1085.13 1218.89 L1085.72 1218.89 L1086.3 1218.89 L1086.89 1218.89 L1087.47 1218.89 L1088.06 1218.89 L1088.65 1218.89 L1089.23 1218.89 L1089.82 1218.89 L1090.41 1218.89 L1090.99 1218.89 L1091.58 1218.89 L1092.17 1218.89 L1092.75 1218.89 L1093.34 1218.89 L1093.93 1218.89 L1094.51 1218.89 L1095.1 1218.89 L1095.68 1218.89 L1096.27 1218.89 L1096.86 1218.89 L1097.44 1218.89 L1098.03 1218.89 L1098.62 1218.89 L1099.2 1218.89 L1099.79 1218.89 L1100.38 1218.89 L1100.96 1218.89 L1101.55 1218.89 L1102.14 1218.89 L1102.72 1218.89 L1103.31 1218.89 L1103.89 1218.89 L1104.48 1218.89 L1105.07 1218.89 L1105.65 1218.89 L1106.24 1218.89 L1106.83 1218.89 L1107.41 1218.89 L1108 1218.89 L1108.59 1218.89 L1109.17 1218.89 L1109.76 1218.89 L1110.34 1218.89 L1110.93 1218.89 L1111.52 1218.89 L1112.1 1218.89 L1112.69 1218.89 L1113.28 1218.89 L1113.86 1218.89 L1114.45 1218.89 L1115.04 1218.89 L1115.62 1218.89 L1116.21 1218.89 L1116.8 1218.89 L1117.38 1218.89 L1117.97 1218.89 L1118.55 1218.89 L1119.14 1218.89 L1119.73 1218.89 L1120.31 1218.89 L1120.9 1218.89 L1121.49 1218.89 L1122.07 1218.89 L1122.66 1218.89 L1123.25 1218.89 L1123.83 1218.89 L1124.42 1218.89 L1125.01 1218.89 L1125.59 1218.89 L1126.18 1218.89 L1126.76 1218.89 L1127.35 1218.89 L1127.94 1218.89 L1128.52 1218.89 L1129.11 1218.89 L1129.7 1218.89 L1130.28 1218.89 L1130.87 1218.89 L1131.46 1218.89 L1132.04 1218.89 L1132.63 1218.89 L1133.21 1218.89 L1133.8 1218.89 L1134.39 1218.89 L1134.97 1218.89 L1135.56 1218.89 L1136.15 1218.89 L1136.73 1218.89 L1137.32 1218.89 L1137.91 1218.89 L1138.49 1218.89 L1139.08 1218.89 L1139.67 1218.89 L1140.25 1218.89 L1140.84 1218.89 L1141.42 1218.89 L1142.01 1218.89 L1142.6 1218.89 L1143.18 1218.89 L1143.77 1218.89 L1144.36 1218.89 L1144.94 1218.89 L1145.53 1218.89 L1146.12 1218.89 L1146.7 1218.89 L1147.29 1218.89 L1147.88 1218.89 L1148.46 1218.89 L1149.05 1218.89 L1149.63 1218.89 L1150.22 1218.89 L1150.81 1218.89 L1151.39 1218.89 L1151.98 1218.89 L1152.57 1218.89 L1153.15 1218.89 L1153.74 1218.89 L1154.33 1218.89 L1154.91 1218.89 L1155.5 1218.89 L1156.09 1218.89 L1156.67 1218.89 L1157.26 1218.89 L1157.84 1218.89 L1158.43 1218.89 L1159.02 1218.89 L1159.6 1218.89 L1160.19 1218.89 L1160.78 1218.89 L1161.36 1218.89 L1161.95 1218.89 L1162.54 1218.89 L1163.12 1218.89 L1163.71 1218.89 L1164.29 1218.89 L1164.88 1218.89 L1165.47 1218.89 L1166.05 1218.89 L1166.64 1218.89 L1167.23 1218.89 L1167.81 1218.89 L1168.4 1218.89 L1168.99 1218.89 L1169.57 1218.89 L1170.16 1218.89 L1170.75 1218.89 L1171.33 1218.89 L1171.92 1218.89 L1172.5 1218.89 L1173.09 1218.89 L1173.68 1218.89 L1174.26 1218.89 L1174.85 1218.89 L1175.44 1218.89 L1176.02 1218.89 L1176.61 1218.89 L1177.2 1218.89 L1177.78 1218.89 L1178.37 1218.89 L1178.96 1218.89 L1179.54 1218.89 L1180.13 1218.89 L1180.71 1218.89 L1181.3 1218.89 L1181.89 1218.89 L1182.47 1218.89 L1183.06 1218.89 L1183.65 1218.89 L1184.23 1218.89 L1184.82 1218.89 L1185.41 1218.89 L1185.99 1218.89 L1186.58 1218.89 L1187.16 1218.89 L1187.75 1218.89 L1188.34 1218.89 L1188.92 1218.89 L1189.51 1218.89 L1190.1 1218.89 L1190.68 1218.89 L1191.27 1218.89 L1191.86 1218.89 L1192.44 1218.89 L1193.03 1218.89 L1193.62 1218.89 L1194.2 1218.89 L1194.79 1218.89 L1195.37 1218.89 L1195.96 1218.89 L1196.55 1218.89 L1197.13 1218.89 L1197.72 1218.89 L1198.31 1218.89 L1198.89 1218.89 L1199.48 1218.89 L1200.07 1218.89 L1200.65 1218.89 L1201.24 1218.89 L1201.83 1218.89 L1202.41 1218.89 L1203 1218.89 L1203.58 1218.89 L1204.17 1218.89 L1204.76 1218.89 L1205.34 1218.89 L1205.93 1218.89 L1206.52 1218.89 L1207.1 1218.89 L1207.69 1218.89 L1208.28 1218.89 L1208.86 1218.89 L1209.45 1218.89 L1210.03 1218.89 L1210.62 1218.89 L1211.21 1218.89 L1211.79 1218.89 L1212.38 1218.89 L1212.97 1218.89 L1213.55 1218.89 L1214.14 1218.89 L1214.73 1218.89 L1215.31 1218.89 L1215.9 1218.89 L1216.49 1218.89 L1217.07 1218.89 L1217.66 1218.89 L1218.24 1218.89 L1218.83 1218.89 L1219.42 1218.89 L1220 1218.89 L1220.59 1218.89 L1221.18 1218.89 L1221.76 1218.89 L1222.35 1218.89 L1222.94 1218.89 L1223.52 1218.89 L1224.11 1218.89 L1224.7 1218.89 L1225.28 1218.89 L1225.87 1218.89 L1226.45 1218.89 L1227.04 1218.89 L1227.63 1218.89 L1228.21 1218.89 L1228.8 1218.89 L1229.39 1218.89 L1229.97 1218.89 L1230.56 1218.89 L1231.15 1218.89 L1231.73 1218.89 L1232.32 1218.89 L1232.91 1218.89 L1233.49 1218.89 L1234.08 1218.89 L1234.66 1218.89 L1235.25 1218.89 L1235.84 1218.89 L1236.42 1218.89 L1237.01 1218.89 L1237.6 1218.89 L1238.18 1218.89 L1238.77 1218.89 L1239.36 1218.89 L1239.94 1218.89 L1240.53 1218.89 L1241.11 1218.89 L1241.7 1218.89 L1242.29 1218.89 L1242.87 1218.89 L1243.46 1218.89 L1244.05 1218.89 L1244.63 1218.89 L1245.22 1218.89 L1245.81 1218.89 L1246.39 1218.89 L1246.98 1218.89 L1247.57 1218.89 L1248.15 1218.89 L1248.74 1218.89 L1249.32 1218.89 L1249.91 1218.89 L1250.5 1218.89 L1251.08 1218.89 L1251.67 1218.89 L1252.26 1218.89 L1252.84 1218.89 L1253.43 1218.89 L1254.02 1218.89 L1254.6 1218.89 L1255.19 1218.89 L1255.78 1218.89 L1256.36 1218.89 L1256.95 1218.89 L1257.53 1218.89 L1258.12 1218.89 L1258.71 1218.89 L1259.29 1218.89 L1259.88 1218.89 L1260.47 1218.89 L1261.05 1218.89 L1261.64 1218.89 L1262.23 1218.89 L1262.81 1218.89 L1263.4 1218.89 L1263.98 1218.89 L1264.57 1218.89 L1265.16 1218.89 L1265.74 1218.89 L1266.33 1218.89 L1266.92 1218.89 L1267.5 1218.89 L1268.09 1218.89 L1268.68 1218.89 L1269.26 1218.89 L1269.85 1218.89 L1270.44 1218.89 L1271.02 1218.89 L1271.61 1218.89 L1272.19 1218.89 L1272.78 1218.89 L1273.37 1218.89 L1273.95 1218.89 L1274.54 1218.89 L1275.13 1218.89 L1275.71 1218.89 L1276.3 1218.89 L1276.89 1218.89 L1277.47 1218.89 L1278.06 1218.89 L1278.65 1218.89 L1279.23 1218.89 L1279.82 1218.89 L1280.4 1218.89 L1280.99 1218.89 L1281.58 1218.89 L1282.16 1218.89 L1282.75 1218.89 L1283.34 1218.89 L1283.92 1218.89 L1284.51 1218.89 L1285.1 1218.89 L1285.68 1218.89 L1286.27 1218.89 L1286.86 1218.89 L1287.44 1218.89 L1288.03 1218.89 L1288.61 1218.89 L1289.2 1218.89 L1289.79 1218.89 L1290.37 1218.89 L1290.96 1218.89 L1291.55 1218.89 L1292.13 1218.89 L1292.72 1218.89 L1293.31 1218.89 L1293.89 1218.89 L1294.48 1218.89 L1295.06 1218.89 L1295.65 1218.89 L1296.24 1218.89 L1296.82 1218.89 L1297.41 1218.89 L1298 1218.89 L1298.58 1218.89 L1299.17 1218.89 L1299.76 1218.89 L1300.34 1218.89 L1300.93 1218.89 L1301.52 1218.89 L1302.1 1218.89 L1302.69 1218.89 L1303.27 1218.89 L1303.86 1218.89 L1304.45 1218.89 L1305.03 1218.89 L1305.62 1218.89 L1306.21 1218.89 L1306.79 1218.89 L1307.38 1218.89 L1307.97 1218.89 L1308.55 1218.89 L1309.14 1218.89 L1309.73 1218.89 L1310.31 1218.89 L1310.9 1218.89 L1311.48 1218.89 L1312.07 1218.89 L1312.66 1218.89 L1313.24 1218.89 L1313.83 1218.89 L1314.42 1218.89 L1315 1218.89 L1315.59 1218.89 L1316.18 1218.89 L1316.76 1218.89 L1317.35 1218.89 L1317.93 1218.89 L1318.52 1218.89 L1319.11 1218.89 L1319.69 1218.89 L1320.28 1218.89 L1320.87 1218.89 L1321.45 1218.89 L1322.04 1218.89 L1322.63 1218.89 L1323.21 1218.89 L1323.8 1218.89 L1324.39 1218.89 L1324.97 1218.89 L1325.56 1218.89 L1326.14 1218.89 L1326.73 1218.89 L1327.32 1218.89 L1327.9 1218.89 L1328.49 1218.89 L1329.08 1218.89 L1329.66 1218.89 L1330.25 1218.89 L1330.84 1218.89 L1331.42 1218.89 L1332.01 1218.89 L1332.6 1218.89 L1333.18 1218.89 L1333.77 1218.89 L1334.35 1218.89 L1334.94 1218.89 L1335.53 1218.89 L1336.11 1218.89 L1336.7 1218.89 L1337.29 1218.89 L1337.87 1218.89 L1338.46 1218.89 L1339.05 1218.89 L1339.63 1218.89 L1340.22 1218.89 L1340.8 1218.89 L1341.39 1218.89 L1341.98 1218.89 L1342.56 1218.89 L1343.15 1218.89 L1343.74 1218.89 L1344.32 1218.89 L1344.91 1218.89 L1345.5 1218.89 L1346.08 1218.89 L1346.67 1218.89 L1347.26 1218.89 L1347.84 1218.89 L1348.43 1218.89 L1349.01 1218.89 L1349.6 1218.89 L1350.19 1218.89 L1350.77 1218.89 L1351.36 1218.89 L1351.95 1218.89 L1352.53 1218.89 L1353.12 1218.89 L1353.71 1218.89 L1354.29 1218.89 L1354.88 1218.89 L1355.47 1218.89 L1356.05 1218.89 L1356.64 1218.89 L1357.22 1218.89 L1357.81 1218.89 L1358.4 1218.89 L1358.98 1218.89 L1359.57 1218.89 L1360.16 1218.89 L1360.74 1218.89 L1361.33 1218.89 L1361.92 1218.89 L1362.5 1218.89 L1363.09 1218.89 L1363.68 1218.89 L1364.26 1218.89 L1364.85 1218.89 L1365.43 1218.89 L1366.02 1218.89 L1366.61 1218.89 L1367.19 1218.89 L1367.78 1218.89 L1368.37 1218.89 L1368.95 1218.89 L1369.54 1218.89 L1370.13 1218.89 L1370.71 1218.89 L1371.3 1218.89 L1371.88 1218.89 L1372.47 1218.89 L1373.06 1218.89 L1373.64 1218.89 L1374.23 1218.89 L1374.82 1218.89 L1375.4 1218.89 L1375.99 1218.89 L1376.58 1218.89 L1377.16 1218.89 L1377.75 1218.89 L1378.34 1218.89 L1378.92 1218.89 L1379.51 1218.89 L1380.09 1218.89 L1380.68 1218.89 L1381.27 1218.89 L1381.85 1218.89 L1382.44 1218.89 L1383.03 1218.89 L1383.61 1218.89 L1384.2 1218.89 L1384.79 1218.89 L1385.37 1218.89 L1385.96 1218.89 L1386.55 1218.89 L1387.13 1218.89 L1387.72 1218.89 L1388.3 1218.89 L1388.89 1218.89 L1389.48 1218.89 L1390.06 1218.89 L1390.65 1218.89 L1391.24 1218.89 L1391.82 1218.89 L1392.41 1218.89 L1393 1218.89 L1393.58 1218.89 L1394.17 1218.89 L1394.75 1218.89 L1395.34 1218.89 L1395.93 1218.89 L1396.51 1218.89 L1397.1 1218.89 L1397.69 1218.89 L1398.27 1218.89 L1398.86 1218.89 L1399.45 1218.89 L1400.03 1218.89 L1400.62 1218.89 L1401.21 1218.89 L1401.79 1218.89 L1402.38 1218.89 L1402.96 1218.89 L1403.55 1218.89 L1404.14 1218.89 L1404.72 1218.89 L1405.31 1218.89 L1405.9 1218.89 L1406.48 1218.89 L1407.07 1218.89 L1407.66 1218.89 L1408.24 1218.89 L1408.83 1218.89 L1409.42 1218.89 L1410 1218.89 L1410.59 1218.89 L1411.17 1218.89 L1411.76 1218.89 L1412.35 1218.89 L1412.93 1218.89 L1413.52 1218.89 L1414.11 1218.89 L1414.69 1218.89 L1415.28 1218.89 L1415.87 1218.89 L1416.45 1218.89 L1417.04 1218.89 L1417.63 1218.89 L1418.21 1218.89 L1418.8 1218.89 L1419.38 1218.89 L1419.97 1218.89 L1420.56 1218.89 L1421.14 1218.89 L1421.73 1218.89 L1422.32 1218.89 L1422.9 1218.89 L1423.49 1218.89 L1424.08 1218.89 L1424.66 1218.89 L1425.25 1218.89 L1425.83 1218.89 L1426.42 1218.89 L1427.01 1218.89 L1427.59 1218.89 L1428.18 1218.89 L1428.77 1218.89 L1429.35 1218.89 L1429.94 1218.89 L1430.53 1218.89 L1431.11 1218.89 L1431.7 1218.89 L1432.29 1218.89 L1432.87 1218.89 L1433.46 1218.89 L1434.04 1218.89 L1434.63 1218.89 L1435.22 1218.89 L1435.8 1218.89 L1436.39 1218.89 L1436.98 1218.89 L1437.56 1218.89 L1438.15 1218.89 L1438.74 1218.89 L1439.32 1218.89 L1439.91 1218.89 L1440.5 1218.89 L1441.08 1218.89 L1441.67 1218.89 L1442.25 1218.89 L1442.84 1218.89 L1443.43 1218.89 L1444.01 1218.89 L1444.6 1218.89 L1445.19 1218.89 L1445.77 1218.89 L1446.36 1218.89 L1446.95 1218.89 L1447.53 1218.89 L1448.12 1218.89 L1448.7 1218.89 L1449.29 1218.89 L1449.88 1218.89 L1450.46 1218.89 L1451.05 1218.89 L1451.64 1218.89 L1452.22 1218.89 L1452.81 1218.89 L1453.4 1218.89 L1453.98 1218.89 L1454.57 1218.89 L1455.16 1218.89 L1455.74 1218.89 L1456.33 1218.89 L1456.91 1218.89 L1457.5 1218.89 L1458.09 1218.89 L1458.67 1218.89 L1459.26 1218.89 L1459.85 1218.89 L1460.43 1218.89 L1461.02 1218.89 L1461.61 1218.89 L1462.19 1218.89 L1462.78 1218.89 L1463.37 1218.89 L1463.95 1218.89 L1464.54 1218.89 L1465.12 1218.89 L1465.71 1218.89 L1466.3 1218.89 L1466.88 1218.89 L1467.47 1218.89 L1468.06 1218.89 L1468.64 1218.89 L1469.23 1218.89 L1469.82 1218.89 L1470.4 1218.89 L1470.99 1218.89 L1471.57 1218.89 L1472.16 1218.89 L1472.75 1218.89 L1473.33 1218.89 L1473.92 1218.89 L1474.51 1218.89 L1475.09 1218.89 L1475.68 1218.89 L1476.27 1218.89 L1476.85 1218.89 L1477.44 1218.89 L1478.03 1218.89 L1478.61 1218.89 L1479.2 1218.89 L1479.78 1218.89 L1480.37 1218.89 L1480.96 1218.89 L1481.54 1218.89 L1482.13 1218.89 L1482.72 1218.89 L1483.3 1218.89 L1483.89 1218.89 L1484.48 1218.89 L1485.06 1218.89 L1485.65 1218.89 L1486.24 1218.89 L1486.82 1218.89 L1487.41 1218.89 L1487.99 1218.89 L1488.58 1218.89 L1489.17 1218.89 L1489.75 1218.89 L1490.34 1218.89 L1490.93 1218.89 L1491.51 1218.89 L1492.1 1218.89 L1492.69 1218.89 L1493.27 1218.89 L1493.86 1218.89 L1494.45 1218.89 L1495.03 1218.89 L1495.62 1218.89 L1496.2 1218.89 L1496.79 1218.89 L1497.38 1218.89 L1497.96 1218.89 L1498.55 1218.89 L1499.14 1218.89 L1499.72 1218.89 L1500.31 1218.89 L1500.9 1218.89 L1501.48 1218.89 L1502.07 1218.89 L1502.65 1218.89 L1503.24 1218.89 L1503.83 1218.89 L1504.41 1218.89 L1505 1218.89 L1505.59 1218.89 L1506.17 1218.89 L1506.76 1218.89 L1507.35 1218.89 L1507.93 1218.89 L1508.52 1218.89 L1509.11 1218.89 L1509.69 1218.89 L1510.28 1218.89 L1510.86 1218.89 L1511.45 1218.89 L1512.04 1218.89 L1512.62 1218.89 L1513.21 1218.89 L1513.8 1218.89 L1514.38 1218.89 L1514.97 1218.89 L1515.56 1218.89 L1516.14 1218.89 L1516.73 1218.89 L1517.32 1218.89 L1517.9 1218.89 L1518.49 1218.89 L1519.07 1218.89 L1519.66 1218.89 L1520.25 1218.89 L1520.83 1218.89 L1521.42 1218.89 L1522.01 1218.89 L1522.59 1218.89 L1523.18 1218.89 L1523.77 1218.89 L1524.35 1218.89 L1524.94 1218.89 L1525.52 1218.89 L1526.11 1218.89 L1526.7 1218.89 L1527.28 1218.89 L1527.87 1218.89 L1528.46 1218.89 L1529.04 1218.89 L1529.63 1218.89 L1530.22 1218.89 L1530.8 1218.89 L1531.39 1218.89 L1531.98 1218.89 L1532.56 1218.89 L1533.15 1218.89 L1533.73 1218.89 L1534.32 1218.89 L1534.91 1218.89 L1535.49 1218.89 L1536.08 1218.89 L1536.67 1218.89 L1537.25 1218.89 L1537.84 1218.89 L1538.43 1218.89 L1539.01 1218.89 L1539.6 1218.89 L1540.19 1218.89 L1540.77 1218.89 L1541.36 1218.89 L1541.94 1218.89 L1542.53 1218.89 L1543.12 1218.89 L1543.7 1218.89 L1544.29 1218.89 L1544.88 1218.89 L1545.46 1218.89 L1546.05 1218.89 L1546.64 1218.89 L1547.22 1218.89 L1547.81 1218.89 L1548.4 1218.89 L1548.98 1218.89 L1549.57 1218.89 L1550.15 1218.89 L1550.74 1218.89 L1551.33 1218.89 L1551.91 1218.89 L1552.5 1218.89 L1553.09 1218.89 L1553.67 1218.89 L1554.26 1218.89 L1554.85 1218.89 L1555.43 1218.89 L1556.02 1218.89 L1556.6 1218.89 L1557.19 1218.89 L1557.78 1218.89 L1558.36 1218.89 L1558.95 1218.89 L1559.54 1218.89 L1560.12 1218.89 L1560.71 1218.89 L1561.3 1218.89 L1561.88 1218.89 L1562.47 1218.89 L1563.06 1218.89 L1563.64 1218.89 L1564.23 1218.89 L1564.81 1218.89 L1565.4 1218.89 L1565.99 1218.89 L1566.57 1218.89 L1567.16 1218.89 L1567.75 1218.89 L1568.33 1218.89 L1568.92 1218.89 L1569.51 1218.89 L1570.09 1218.89 L1570.68 1218.89 L1571.27 1218.89 L1571.85 1218.89 L1572.44 1218.89 L1573.02 1218.89 L1573.61 1218.89 L1574.2 1218.89 L1574.78 1218.89 L1575.37 1218.89 L1575.96 1218.89 L1576.54 1218.89 L1577.13 1218.89 L1577.72 1218.89 L1578.3 1218.89 L1578.89 1218.89 L1579.47 1218.89 L1580.06 1218.89 L1580.65 1218.89 L1581.23 1218.89 L1581.82 1218.89 L1582.41 1218.89 L1582.99 1218.89 L1583.58 1218.89 L1584.17 1218.89 L1584.75 1218.89 L1585.34 1218.89 L1585.93 1218.89 L1586.51 1218.89 L1587.1 1218.89 L1587.68 1218.89 L1588.27 1218.89 L1588.86 1218.89 L1589.44 1218.89 L1590.03 1218.89 L1590.62 1218.89 L1591.2 1218.89 L1591.79 1218.89 L1592.38 1218.89 L1592.96 1218.89 L1593.55 1218.89 L1594.14 1218.89 L1594.72 1218.89 L1595.31 1218.89 L1595.89 1218.89 L1596.48 1218.89 L1597.07 1218.89 L1597.65 1218.89 L1598.24 1218.89 L1598.83 1218.89 L1599.41 1218.89 L1600 1218.89 L1600.59 1218.89 L1601.17 1218.89 L1601.76 1218.89 L1602.34 1218.89 L1602.93 1218.89 L1603.52 1218.89 L1604.1 1218.89 L1604.69 1218.89 L1605.28 1218.89 L1605.86 1218.89 L1606.45 1218.89 L1607.04 1218.89 L1607.62 1218.89 L1608.21 1218.89 L1608.8 1218.89 L1609.38 1218.89 L1609.97 1218.89 L1610.55 1218.89 L1611.14 1218.89 L1611.73 1218.89 L1612.31 1218.89 L1612.9 1218.89 L1613.49 1218.89 L1614.07 1218.89 L1614.66 1218.89 L1615.25 1218.89 L1615.83 1218.89 L1616.42 1218.89 L1617.01 1218.89 L1617.59 1218.89 L1618.18 1218.89 L1618.76 1218.89 L1619.35 1218.89 L1619.94 1218.89 L1620.52 1218.89 L1621.11 1218.89 L1621.7 1218.89 L1622.28 1218.89 L1622.87 1218.89 L1623.46 1218.89 L1624.04 1218.89 L1624.63 1218.89 L1625.22 1218.89 L1625.8 1218.89 L1626.39 1218.89 L1626.97 1218.89 L1627.56 1218.89 L1628.15 1218.89 L1628.73 1218.89 L1629.32 1218.89 L1629.91 1218.89 L1630.49 1218.89 L1631.08 1218.89 L1631.67 1218.89 L1632.25 1218.89 L1632.84 1218.89 L1633.42 1218.89 L1634.01 1218.89 L1634.6 1218.89 L1635.18 1218.89 L1635.77 1218.89 L1636.36 1218.89 L1636.94 1218.89 L1637.53 1218.89 L1638.12 1218.89 L1638.7 1218.89 L1639.29 1218.89 L1639.88 1218.89 L1640.46 1218.89 L1641.05 1218.89 L1641.63 1218.89 L1642.22 1218.89 L1642.81 1218.89 L1643.39 1218.89 L1643.98 1218.89 L1644.57 1218.89 L1645.15 1218.89 L1645.74 1218.89 L1646.33 1218.89 L1646.91 1218.89 L1647.5 1218.89 L1648.09 1218.89 L1648.67 1218.89 L1649.26 1218.89 L1649.84 1218.89 L1650.43 1218.89 L1651.02 1218.89 L1651.6 1218.89 L1652.19 1218.89 L1652.78 1218.89 L1653.36 1218.89 L1653.95 1218.89 L1654.54 1218.89 L1655.12 1218.89 L1655.71 1218.89 L1656.29 1218.89 L1656.88 1218.89 L1657.47 1218.89 L1658.05 1218.89 L1658.64 1218.89 L1659.23 1218.89 L1659.81 1218.89 L1660.4 1218.89 L1660.99 1218.89 L1661.57 1218.89 L1662.16 1218.89 L1662.75 1218.89 L1663.33 1218.89 L1663.92 1218.89 L1664.5 1218.89 L1665.09 1218.89 L1665.68 1218.89 L1666.26 1218.89 L1666.85 1218.89 L1667.44 1218.89 L1668.02 1218.89 L1668.61 1218.89 L1669.2 1218.89 L1669.78 1218.89 L1670.37 1218.89 L1670.96 1218.89 L1671.54 1218.89 L1672.13 1218.89 L1672.71 1218.89 L1673.3 1218.89 L1673.89 1218.89 L1674.47 1218.89 L1675.06 1218.89 L1675.65 1218.89 L1676.23 1218.89 L1676.82 1218.89 L1677.41 1218.89 L1677.99 1218.89 L1678.58 1218.89 L1679.17 1218.89 L1679.75 1218.89 L1680.34 1218.89 L1680.92 1218.89 L1681.51 1218.89 L1682.1 1218.89 L1682.68 1218.89 L1683.27 1218.89 L1683.86 1218.89 L1684.44 1218.89 L1685.03 1218.89 L1685.62 1218.89 L1686.2 1218.89 L1686.79 1218.89 L1687.37 1218.89 L1687.96 1218.89 L1688.55 1218.89 L1689.13 1218.89 L1689.72 1218.89 L1690.31 1218.89 L1690.89 1218.89 L1691.48 1218.89 L1692.07 1218.89 L1692.65 1218.89 L1693.24 1218.89 L1693.83 1218.89 L1694.41 1218.89 L1695 1218.89 L1695.58 1218.89 L1696.17 1218.89 L1696.76 1218.89 L1697.34 1218.89 L1697.93 1218.89 L1698.52 1218.89 L1699.1 1218.89 L1699.69 1218.89 L1700.28 1218.89 L1700.86 1218.89 L1701.45 1218.89 L1702.04 1218.89 L1702.62 1218.89 L1703.21 1218.89 L1703.79 1218.89 L1704.38 1218.89 L1704.97 1218.89 L1705.55 1218.89 L1706.14 1218.89 L1706.73 1218.89 L1707.31 1218.89 L1707.9 1218.89 L1708.49 1218.89 L1709.07 1218.89 L1709.66 1218.89 L1710.24 1218.89 L1710.83 1218.89 L1711.42 1218.89 L1712 1218.89 L1712.59 1218.89 L1713.18 1218.89 L1713.76 1218.89 L1714.35 1218.89 L1714.94 1218.89 L1715.52 1218.89 L1716.11 1218.89 L1716.7 1218.89 L1717.28 1218.89 L1717.87 1218.89 L1718.45 1218.89 L1719.04 1218.89 L1719.63 1218.89 L1720.21 1218.89 L1720.8 1218.89 L1721.39 1218.89 L1721.97 1218.89 L1722.56 1218.89 L1723.15 1218.89 L1723.73 1218.89 L1724.32 1218.89 L1724.91 1218.89 L1725.49 1218.89 L1726.08 1218.89 L1726.66 1218.89 L1727.25 1218.89 L1727.84 1218.89 L1728.42 1218.89 L1729.01 1218.89 L1729.6 1218.89 L1730.18 1218.89 L1730.77 1218.89 L1731.36 1218.89 L1731.94 1218.89 L1732.53 1218.89 L1733.11 1218.89 L1733.7 1218.89 L1734.29 1218.89 L1734.87 1218.89 L1735.46 1218.89 L1736.05 1218.89 L1736.63 1218.89 L1737.22 1218.89 L1737.81 1218.89 L1738.39 1218.89 L1738.98 1218.89 L1739.57 1218.89 L1740.15 1218.89 L1740.74 1218.89 L1741.32 1218.89 L1741.91 1218.89 L1742.5 1218.89 L1743.08 1218.89 L1743.67 1218.89 L1744.26 1218.89 L1744.84 1218.89 L1745.43 1218.89 L1746.02 1218.89 L1746.6 1218.89 L1747.19 1218.89 L1747.78 1218.89 L1748.36 1218.89 L1748.95 1218.89 L1749.53 1218.89 L1750.12 1218.89 L1750.71 1218.89 L1751.29 1218.89 L1751.88 1218.89 L1752.47 1218.89 L1753.05 1218.89 L1753.64 1218.89 L1754.23 1218.89 L1754.81 1218.89 L1755.4 1218.89 L1755.99 1218.89 L1756.57 1218.89 L1757.16 1218.89 L1757.74 1218.89 L1758.33 1218.89 L1758.92 1218.89 L1759.5 1218.89 L1760.09 1218.89 L1760.68 1218.89 L1761.26 1218.89 L1761.85 1218.89 L1762.44 1218.89 L1763.02 1218.89 L1763.61 1218.89 L1764.19 1218.89 L1764.78 1218.89 L1765.37 1218.89 L1765.95 1218.89 L1766.54 1218.89 L1767.13 1218.89 L1767.71 1218.89 L1768.3 1218.89 L1768.89 1218.89 L1769.47 1218.89 L1770.06 1218.89 L1770.65 1218.89 L1771.23 1218.89 L1771.82 1218.89 L1772.4 1218.89 L1772.99 1218.89 L1773.58 1218.89 L1774.16 1218.89 L1774.75 1218.89 L1775.34 1218.89 L1775.92 1218.89 L1776.51 1218.89 L1777.1 1218.89 L1777.68 1218.89 L1778.27 1218.89 L1778.86 1218.89 L1779.44 1218.89 L1780.03 1218.89 L1780.61 1218.89 L1781.2 1218.89 L1781.79 1218.89 L1782.37 1218.89 L1782.96 1218.89 L1783.55 1218.89 L1784.13 1218.89 L1784.72 1218.89 L1785.31 1218.89 L1785.89 1218.89 L1786.48 1218.89 L1787.06 1218.89 L1787.65 1218.89 L1788.24 1218.89 L1788.82 1218.89 L1789.41 1218.89 L1790 1218.89 L1790.58 1218.89 L1791.17 1218.89 L1791.76 1218.89 L1792.34 1218.89 L1792.93 1218.89 L1793.52 1218.89 L1794.1 1218.89 L1794.69 1218.89 L1795.27 1218.89 L1795.86 1218.89 L1796.45 1218.89 L1797.03 1218.89 L1797.62 1218.89 L1798.21 1218.89 L1798.79 1218.89 L1799.38 1218.89 L1799.97 1218.89 L1800.55 1218.89 L1801.14 1218.89 L1801.73 1218.89 L1802.31 1218.89 L1802.9 1218.89 L1803.48 1218.89 L1804.07 1218.89 L1804.66 1218.89 L1805.24 1218.89 L1805.83 1218.89 L1806.42 1218.89 L1807 1218.89 L1807.59 1218.89 L1808.18 1218.89 L1808.76 1218.89 L1809.35 1218.89 L1809.94 1218.89 L1810.52 1218.89 L1811.11 1218.89 L1811.69 1218.89 L1812.28 1218.89 L1812.87 1218.89 L1813.45 1218.89 L1814.04 1218.89 L1814.63 1218.89 L1815.21 1218.89 L1815.8 1218.89 L1816.39 1218.89 L1816.97 1218.89 L1817.56 1218.89 L1818.14 1218.89 L1818.73 1218.89 L1819.32 1218.89 L1819.9 1218.89 L1820.49 1218.89 L1821.08 1218.89 L1821.66 1218.89 L1822.25 1218.89 L1822.84 1218.89 L1823.42 1218.89 L1824.01 1218.89 L1824.6 1218.89 L1825.18 1218.89 L1825.77 1218.89 L1826.35 1218.89 L1826.94 1218.89 L1827.53 1218.89 L1828.11 1218.89 L1828.7 1218.89 L1829.29 1218.89 L1829.87 1218.89 L1830.46 1218.89 L1831.05 1218.89 L1831.63 1218.89 L1832.22 1218.89 L1832.81 1218.89 L1833.39 1218.89 L1833.98 1218.89 L1834.56 1218.89 L1835.15 1218.89 L1835.74 1218.89 L1836.32 1218.89 L1836.91 1218.89 L1837.5 1218.89 L1838.08 1218.89 L1838.67 1218.89 L1839.26 1218.89 L1839.84 1218.89 L1840.43 1218.89 L1841.01 1218.89 L1841.6 1218.89 L1842.19 1218.89 L1842.77 1218.89 L1843.36 1218.89 L1843.95 1218.89 L1844.53 1218.89 L1845.12 1218.89 L1845.71 1218.89 L1846.29 1218.89 L1846.88 1218.89 L1847.47 1218.89 L1848.05 1218.89 L1848.64 1218.89 L1849.22 1218.89 L1849.81 1218.89 L1850.4 1218.89 L1850.98 1218.89 L1851.57 1218.89 L1852.16 1218.89 L1852.74 1218.89 L1853.33 1218.89 L1853.92 1218.89 L1854.5 1218.89 L1855.09 1218.89 L1855.68 1218.89 L1856.26 1218.89 L1856.85 1218.89 L1857.43 1218.89 L1858.02 1218.89 L1858.61 1218.89 L1859.19 1218.89 L1859.78 1218.89 L1860.37 1218.89 L1860.95 1218.89 L1861.54 1218.89 L1862.13 1218.89 L1862.71 1218.89 L1863.3 1218.89 L1863.88 1218.89 L1864.47 1218.89 L1865.06 1218.89 L1865.64 1218.89 L1866.23 1218.89 L1866.82 1218.89 L1867.4 1218.89 L1867.99 1218.89 L1868.58 1218.89 L1869.16 1218.89 L1869.75 1218.89 L1870.34 1218.89 L1870.92 1218.89 L1871.51 1218.89 L1872.09 1218.89 L1872.68 1218.89 L1873.27 1218.89 L1873.85 1218.89 L1874.44 1218.89 L1875.03 1218.89 L1875.61 1218.89 L1876.2 1218.89 L1876.79 1218.89 L1877.37 1218.89 L1877.96 1218.89 L1878.55 1218.89 L1879.13 1218.89 L1879.72 1218.89 L1880.3 1218.89 L1880.89 1218.89 L1881.48 1218.89 L1882.06 1218.89 L1882.65 1218.89 L1883.24 1218.89 L1883.82 1218.89 L1884.41 1218.89 L1885 1218.89 L1885.58 1218.89 L1886.17 1218.89 L1886.76 1218.89 L1887.34 1218.89 L1887.93 1218.89 L1888.51 1218.89 L1889.1 1218.89 L1889.69 1218.89 L1890.27 1218.89 L1890.86 1218.89 L1891.45 1218.89 L1892.03 1218.89 L1892.62 1218.89 L1893.21 1218.89 L1893.79 1218.89 L1894.38 1218.89 L1894.96 1218.89 L1895.55 1218.89 L1896.14 1218.89 L1896.72 1218.89 L1897.31 1218.89 L1897.9 1218.89 L1898.48 1218.89 L1899.07 1218.89 L1899.66 1218.89 L1900.24 1218.89 L1900.83 1218.89 L1901.42 1218.89 L1902 1218.89 L1902.59 1218.89 L1903.17 1218.89 L1903.76 1218.89 L1904.35 1218.89 L1904.93 1218.89 L1905.52 1218.89 L1906.11 1218.89 L1906.69 1218.89 L1907.28 1218.89 L1907.87 1218.89 L1908.45 1218.89 L1909.04 1218.89 L1909.63 1218.89 L1910.21 1218.89 L1910.8 1218.89 L1911.38 1218.89 L1911.97 1218.89 L1912.56 1218.89 L1913.14 1218.89 L1913.73 1218.89 L1914.32 1218.89 L1914.9 1218.89 L1915.49 1218.89 L1916.08 1218.89 L1916.66 1218.89 L1917.25 1218.89 L1917.83 1218.89 L1918.42 1218.89 L1919.01 1218.89 L1919.59 1218.89 L1920.18 1218.89 L1920.77 1218.89 L1921.35 1218.89 L1921.94 1218.89 L1922.53 1218.89 L1923.11 1218.89 L1923.7 1218.89 L1924.29 1218.89 L1924.87 1218.89 L1925.46 1218.89 L1926.04 1218.89 L1926.63 1218.89 L1927.22 1218.89 L1927.8 1218.89 L1928.39 1218.89 L1928.98 1218.89 L1929.56 1218.89 L1930.15 1218.89 L1930.74 1218.89 L1931.32 1218.89 L1931.91 1218.89 L1932.5 1218.89 L1933.08 1218.89 L1933.67 1218.89 L1934.25 1218.89 L1934.84 1218.89 L1935.43 1218.89 L1936.01 1218.89 L1936.6 1218.89 L1937.19 1218.89 L1937.77 1218.89 L1938.36 1218.89 L1938.95 1218.89 L1939.53 1218.89 L1940.12 1218.89 L1940.71 1218.89 L1941.29 1218.89 L1941.88 1218.89 L1942.46 1218.89 L1943.05 1218.89 L1943.64 1218.89 L1944.22 1218.89 L1944.81 1218.89 L1945.4 1218.89 L1945.98 1218.89 L1946.57 1218.89 L1947.16 1218.89 L1947.74 1218.89 L1948.33 1218.89 L1948.91 1218.89 L1949.5 1218.89 L1950.09 1218.89 L1950.67 1218.89 L1951.26 1218.89 L1951.85 1218.89 L1952.43 1218.89 L1953.02 1218.89 L1953.61 1218.89 L1954.19 1218.89 L1954.78 1218.89 L1955.37 1218.89 L1955.95 1218.89 L1956.54 1218.89 L1957.12 1218.89 L1957.71 1218.89 L1958.3 1218.89 L1958.88 1218.89 L1959.47 1218.89 L1960.06 1218.89 L1960.64 1218.89 L1961.23 1218.89 L1961.82 1218.89 L1962.4 1218.89 L1962.99 1218.89 L1963.58 1218.89 L1964.16 1218.89 L1964.75 1218.89 L1965.33 1218.89 L1965.92 1218.89 L1966.51 1218.89 L1967.09 1218.89 L1967.68 1218.89 L1968.27 1218.89 L1968.85 1218.89 L1969.44 1218.89 L1970.03 1218.89 L1970.61 1218.89 L1971.2 1218.89 L1971.78 1218.89 L1972.37 1218.89 L1972.96 1218.89 L1973.54 1218.89 L1974.13 1218.89 L1974.72 1218.89 L1975.3 1218.89 L1975.89 1218.89 L1976.48 1218.89 L1977.06 1218.89 L1977.65 1218.89 L1978.24 1218.89 L1978.82 1218.89 L1979.41 1218.89 L1979.99 1218.89 L1980.58 1218.89 L1981.17 1218.89 L1981.75 1218.89 L1982.34 1218.89 L1982.93 1218.89 L1983.51 1218.89 L1984.1 1218.89 L1984.69 1218.89 L1985.27 1218.89 L1985.86 1218.89 L1986.45 1218.89 L1987.03 1218.89 L1987.62 1218.89 L1988.2 1218.89 L1988.79 1218.89 L1989.38 1218.89 L1989.96 1218.89 L1990.55 1218.89 L1991.14 1218.89 L1991.72 1218.89 L1992.31 1218.89 L1992.9 1218.89 L1993.48 1218.89 L1994.07 1218.89 L1994.65 1218.89 L1995.24 1218.89 L1995.83 1218.89 L1996.41 1218.89 L1997 1218.89 L1997.59 1218.89 L1998.17 1218.89 L1998.76 1218.89 L1999.35 1218.89 L1999.93 1218.89 L2000.52 1218.89 L2001.11 1218.89 L2001.69 1218.89 L2002.28 1218.89 L2002.86 1218.89 L2003.45 1218.89 L2004.04 1218.89 L2004.62 1218.89 L2005.21 1218.89 L2005.8 1218.89 L2006.38 1218.89 L2006.97 1218.89 L2007.56 1218.89 L2008.14 1218.89 L2008.73 1218.89 L2009.32 1218.89 L2009.9 1218.89 L2010.49 1218.89 L2011.07 1218.89 L2011.66 1218.89 L2012.25 1218.89 L2012.83 1218.89 L2013.42 1218.89 L2014.01 1218.89 L2014.59 1218.89 L2015.18 1218.89 L2015.77 1218.89 L2016.35 1218.89 L2016.94 1218.89 L2017.53 1218.89 L2018.11 1218.89 L2018.7 1218.89 L2019.28 1218.89 L2019.87 1218.89 L2020.46 1218.89 L2021.04 1218.89 L2021.63 1218.89 L2022.22 1218.89 L2022.8 1218.89 L2023.39 1218.89 L2023.98 1218.89 L2024.56 1218.89 L2025.15 1218.89 L2025.73 1218.89 L2026.32 1218.89 L2026.91 1218.89 L2027.49 1218.89 L2028.08 1218.89 L2028.67 1218.89 L2029.25 1218.89 L2029.84 1218.89 L2030.43 1218.89 L2031.01 1218.89 L2031.6 1218.89 L2032.19 1218.89 L2032.77 1218.89 L2033.36 1218.89 L2033.94 1218.89 L2034.53 1218.89 L2035.12 1218.89 L2035.7 1218.89 L2036.29 1218.89 L2036.88 1218.89 L2037.46 1218.89 L2038.05 1218.89 L2038.64 1218.89 L2039.22 1218.89 L2039.81 1218.89 L2040.4 1218.89 L2040.98 1218.89 L2041.57 1218.89 L2042.15 1218.89 L2042.74 1218.89 L2043.33 1218.89 L2043.91 1218.89 L2044.5 1218.89 L2045.09 1218.89 L2045.67 1218.89 L2046.26 1218.89 L2046.85 1218.89 L2047.43 1218.89 L2048.02 1218.89 L2048.6 1218.89 L2049.19 1218.89 L2049.78 1218.89 L2050.36 1218.89 L2050.95 1218.89 L2051.54 1218.89 L2052.12 1218.89 L2052.71 1218.89 L2053.3 1218.89 L2053.88 1218.89 L2054.47 1218.89 L2055.06 1218.89 L2055.64 1218.89 L2056.23 1218.89 L2056.81 1218.89 L2057.4 1218.89 L2057.99 1218.89 L2058.57 1218.89 L2059.16 1218.89 L2059.75 1218.89 L2060.33 1218.89 L2060.92 1218.89 L2061.51 1218.89 L2062.09 1218.89 L2062.68 1218.89 L2063.27 1218.89 L2063.85 1218.89 L2064.44 1218.89 L2065.02 1218.89 L2065.61 1218.89 L2066.2 1218.89 L2066.78 1218.89 L2067.37 1218.89 L2067.96 1218.89 L2068.54 1218.89 L2069.13 1218.89 L2069.72 1218.89 L2070.3 1218.89 L2070.89 1218.89 L2071.48 1218.89 L2072.06 1218.89 L2072.65 1218.89 L2073.23 1218.89 L2073.82 1218.89 L2074.41 1218.89 L2074.99 1218.89 L2075.58 1218.89 L2076.17 1218.89 L2076.75 1218.89 L2077.34 1218.89 L2077.93 1218.89 L2078.51 1218.89 L2079.1 1218.89 L2079.68 1218.89 L2080.27 1218.89 L2080.86 1218.89 L2081.44 1218.89 L2082.03 1218.89 L2082.62 1218.89 L2083.2 1218.89 L2083.79 1218.89 L2084.38 1218.89 L2084.96 1218.89 L2085.55 1218.89 L2086.14 1218.89 L2086.72 1218.89 L2087.31 1218.89 L2087.89 1218.89 L2088.48 1218.89 L2089.07 1218.89 L2089.65 1218.89 L2090.24 1218.89 L2090.83 1218.89 L2091.41 1218.89 L2092 1218.89 L2092.59 1218.89 L2093.17 1218.89 L2093.76 1218.89 L2094.35 1218.89 L2094.93 1218.89 L2095.52 1218.89 L2096.1 1218.89 L2096.69 1218.89 L2097.28 1218.89 L2097.86 1218.89 L2098.45 1218.89 L2099.04 1218.89 L2099.62 1218.89 L2100.21 1218.89 L2100.8 1218.89 L2101.38 1218.89 L2101.97 1218.89 L2102.55 1218.89 L2103.14 1218.89 L2103.73 1218.89 L2104.31 1218.89 L2104.9 1218.89 L2105.49 1218.89 L2106.07 1218.89 L2106.66 1218.89 L2107.25 1218.89 L2107.83 1218.89 L2108.42 1218.89 L2109.01 1218.89 L2109.59 1218.89 L2110.18 1218.89 L2110.76 1218.89 L2111.35 1218.89 L2111.94 1218.89 L2112.52 1218.89 L2113.11 1218.89 L2113.7 1218.89 L2114.28 1218.89 L2114.87 1218.89 L2115.46 1218.89 L2116.04 1218.89 L2116.63 1218.89 L2117.22 1218.89 L2117.8 1218.89 L2118.39 1218.89 L2118.97 1218.89 L2119.56 1218.89 L2120.15 1218.89 L2120.73 1218.89 L2121.32 1218.89 L2121.91 1218.89 L2122.49 1218.89 L2123.08 1218.89 L2123.67 1218.89 L2124.25 1218.89 L2124.84 1218.89 L2125.42 1218.89 L2126.01 1218.89 L2126.6 1218.89 L2127.18 1218.89 L2127.77 1218.89 L2128.36 1218.89 L2128.94 1218.89 L2129.53 1218.89 L2130.12 1218.89 L2130.7 1218.89 L2131.29 1218.89 L2131.88 1218.89 L2132.46 1218.89 L2133.05 1218.89 L2133.63 1218.89 L2134.22 1218.89 L2134.81 1218.89 L2135.39 1218.89 L2135.98 1218.89 L2136.57 1218.89 L2137.15 1218.89 L2137.74 1218.89 L2138.33 1218.89 L2138.91 1218.89 L2139.5 1218.89 L2140.09 1218.89 L2140.67 1218.89 L2141.26 1218.89 L2141.84 1218.89 L2142.43 1218.89 L2143.02 1218.89 L2143.6 1218.89 L2144.19 1218.89 L2144.78 1218.89 L2145.36 1218.89 L2145.95 1218.89 L2146.54 1218.89 L2147.12 1218.89 L2147.71 1218.89 L2148.3 1218.89 L2148.88 1218.89 L2149.47 1218.89 L2150.05 1218.89 L2150.64 1218.89 L2151.23 1218.89 L2151.81 1218.89 L2152.4 1218.89 L2152.99 1218.89 L2153.57 1218.89 L2154.16 1218.89 L2154.75 1218.89 L2155.33 1218.89 L2155.92 1218.89 L2156.5 1218.89 L2157.09 1218.89 L2157.68 1218.89 L2158.26 1218.89 L2158.26 1218.73 L2157.68 1218.73 L2157.09 1218.73 L2156.5 1218.73 L2155.92 1218.73 L2155.33 1218.73 L2154.75 1218.73 L2154.16 1218.73 L2153.57 1218.73 L2152.99 1218.73 L2152.4 1218.73 L2151.81 1218.73 L2151.23 1218.73 L2150.64 1218.73 L2150.05 1218.73 L2149.47 1218.73 L2148.88 1218.73 L2148.3 1218.73 L2147.71 1218.73 L2147.12 1218.73 L2146.54 1218.73 L2145.95 1218.73 L2145.36 1218.73 L2144.78 1218.73 L2144.19 1218.73 L2143.6 1218.73 L2143.02 1218.73 L2142.43 1218.73 L2141.84 1218.73 L2141.26 1218.73 L2140.67 1218.73 L2140.09 1218.73 L2139.5 1218.73 L2138.91 1218.73 L2138.33 1218.73 L2137.74 1218.73 L2137.15 1218.73 L2136.57 1218.73 L2135.98 1218.73 L2135.39 1218.73 L2134.81 1218.73 L2134.22 1218.73 L2133.63 1218.73 L2133.05 1218.73 L2132.46 1218.73 L2131.88 1218.73 L2131.29 1218.73 L2130.7 1218.73 L2130.12 1218.73 L2129.53 1218.73 L2128.94 1218.73 L2128.36 1218.73 L2127.77 1218.73 L2127.18 1218.73 L2126.6 1218.73 L2126.01 1218.73 L2125.42 1218.73 L2124.84 1218.73 L2124.25 1218.73 L2123.67 1218.73 L2123.08 1218.73 L2122.49 1218.73 L2121.91 1218.73 L2121.32 1218.73 L2120.73 1218.73 L2120.15 1218.73 L2119.56 1218.73 L2118.97 1218.73 L2118.39 1218.73 L2117.8 1218.73 L2117.22 1218.73 L2116.63 1218.73 L2116.04 1218.73 L2115.46 1218.73 L2114.87 1218.73 L2114.28 1218.73 L2113.7 1218.73 L2113.11 1218.73 L2112.52 1218.73 L2111.94 1218.73 L2111.35 1218.73 L2110.76 1218.73 L2110.18 1218.73 L2109.59 1218.73 L2109.01 1218.73 L2108.42 1218.73 L2107.83 1218.73 L2107.25 1218.73 L2106.66 1218.73 L2106.07 1218.73 L2105.49 1218.73 L2104.9 1218.73 L2104.31 1218.73 L2103.73 1218.73 L2103.14 1218.73 L2102.55 1218.73 L2101.97 1218.73 L2101.38 1218.73 L2100.8 1218.73 L2100.21 1218.73 L2099.62 1218.73 L2099.04 1218.73 L2098.45 1218.73 L2097.86 1218.73 L2097.28 1218.73 L2096.69 1218.73 L2096.1 1218.73 L2095.52 1218.73 L2094.93 1218.73 L2094.35 1218.73 L2093.76 1218.73 L2093.17 1218.73 L2092.59 1218.73 L2092 1218.73 L2091.41 1218.73 L2090.83 1218.73 L2090.24 1218.73 L2089.65 1218.73 L2089.07 1218.73 L2088.48 1218.73 L2087.89 1218.73 L2087.31 1218.73 L2086.72 1218.73 L2086.14 1218.73 L2085.55 1218.73 L2084.96 1218.73 L2084.38 1218.73 L2083.79 1218.73 L2083.2 1218.73 L2082.62 1218.73 L2082.03 1218.73 L2081.44 1218.73 L2080.86 1218.73 L2080.27 1218.73 L2079.68 1218.73 L2079.1 1218.73 L2078.51 1218.73 L2077.93 1218.73 L2077.34 1218.73 L2076.75 1218.73 L2076.17 1218.73 L2075.58 1218.73 L2074.99 1218.73 L2074.41 1218.73 L2073.82 1218.73 L2073.23 1218.73 L2072.65 1218.73 L2072.06 1218.73 L2071.48 1218.73 L2070.89 1218.73 L2070.3 1218.73 L2069.72 1218.73 L2069.13 1218.73 L2068.54 1218.73 L2067.96 1218.73 L2067.37 1218.73 L2066.78 1218.73 L2066.2 1218.73 L2065.61 1218.73 L2065.02 1218.73 L2064.44 1218.73 L2063.85 1218.73 L2063.27 1218.73 L2062.68 1218.73 L2062.09 1218.73 L2061.51 1218.73 L2060.92 1218.73 L2060.33 1218.73 L2059.75 1218.73 L2059.16 1218.73 L2058.57 1218.73 L2057.99 1218.73 L2057.4 1218.73 L2056.81 1218.73 L2056.23 1218.73 L2055.64 1218.73 L2055.06 1218.73 L2054.47 1218.73 L2053.88 1218.73 L2053.3 1218.73 L2052.71 1218.73 L2052.12 1218.73 L2051.54 1218.73 L2050.95 1218.73 L2050.36 1218.73 L2049.78 1218.73 L2049.19 1218.73 L2048.6 1218.73 L2048.02 1218.73 L2047.43 1218.73 L2046.85 1218.73 L2046.26 1218.73 L2045.67 1218.73 L2045.09 1218.73 L2044.5 1218.73 L2043.91 1218.73 L2043.33 1218.73 L2042.74 1218.73 L2042.15 1218.73 L2041.57 1218.73 L2040.98 1218.73 L2040.4 1218.73 L2039.81 1218.73 L2039.22 1218.73 L2038.64 1218.73 L2038.05 1218.73 L2037.46 1218.73 L2036.88 1218.73 L2036.29 1218.73 L2035.7 1218.73 L2035.12 1218.73 L2034.53 1218.73 L2033.94 1218.73 L2033.36 1218.73 L2032.77 1218.73 L2032.19 1218.73 L2031.6 1218.73 L2031.01 1218.73 L2030.43 1218.73 L2029.84 1218.73 L2029.25 1218.73 L2028.67 1218.73 L2028.08 1218.73 L2027.49 1218.73 L2026.91 1218.73 L2026.32 1218.73 L2025.73 1218.73 L2025.15 1218.73 L2024.56 1218.73 L2023.98 1218.73 L2023.39 1218.73 L2022.8 1218.73 L2022.22 1218.73 L2021.63 1218.73 L2021.04 1218.73 L2020.46 1218.73 L2019.87 1218.73 L2019.28 1218.73 L2018.7 1218.73 L2018.11 1218.73 L2017.53 1218.73 L2016.94 1218.73 L2016.35 1218.73 L2015.77 1218.73 L2015.18 1218.73 L2014.59 1218.73 L2014.01 1218.73 L2013.42 1218.73 L2012.83 1218.73 L2012.25 1218.73 L2011.66 1218.73 L2011.07 1218.73 L2010.49 1218.73 L2009.9 1218.73 L2009.32 1218.73 L2008.73 1218.73 L2008.14 1218.73 L2007.56 1218.73 L2006.97 1218.73 L2006.38 1218.73 L2005.8 1218.73 L2005.21 1218.73 L2004.62 1218.73 L2004.04 1218.73 L2003.45 1218.73 L2002.86 1218.73 L2002.28 1218.73 L2001.69 1218.73 L2001.11 1218.73 L2000.52 1218.73 L1999.93 1218.73 L1999.35 1218.73 L1998.76 1218.73 L1998.17 1218.73 L1997.59 1218.73 L1997 1218.73 L1996.41 1218.73 L1995.83 1218.73 L1995.24 1218.73 L1994.65 1218.73 L1994.07 1218.73 L1993.48 1218.73 L1992.9 1218.73 L1992.31 1218.73 L1991.72 1218.73 L1991.14 1218.73 L1990.55 1218.73 L1989.96 1218.73 L1989.38 1218.73 L1988.79 1218.73 L1988.2 1218.73 L1987.62 1218.73 L1987.03 1218.73 L1986.45 1218.73 L1985.86 1218.73 L1985.27 1218.73 L1984.69 1218.73 L1984.1 1218.73 L1983.51 1218.73 L1982.93 1218.73 L1982.34 1218.73 L1981.75 1218.73 L1981.17 1218.73 L1980.58 1218.73 L1979.99 1218.73 L1979.41 1218.73 L1978.82 1218.73 L1978.24 1218.73 L1977.65 1218.73 L1977.06 1218.73 L1976.48 1218.73 L1975.89 1218.73 L1975.3 1218.73 L1974.72 1218.73 L1974.13 1218.73 L1973.54 1218.73 L1972.96 1218.73 L1972.37 1218.73 L1971.78 1218.73 L1971.2 1218.73 L1970.61 1218.73 L1970.03 1218.73 L1969.44 1218.73 L1968.85 1218.73 L1968.27 1218.73 L1967.68 1218.73 L1967.09 1218.73 L1966.51 1218.73 L1965.92 1218.73 L1965.33 1218.73 L1964.75 1218.73 L1964.16 1218.73 L1963.58 1218.73 L1962.99 1218.73 L1962.4 1218.73 L1961.82 1218.73 L1961.23 1218.73 L1960.64 1218.73 L1960.06 1218.73 L1959.47 1218.73 L1958.88 1218.73 L1958.3 1218.73 L1957.71 1218.73 L1957.12 1218.73 L1956.54 1218.73 L1955.95 1218.73 L1955.37 1218.73 L1954.78 1218.73 L1954.19 1218.73 L1953.61 1218.73 L1953.02 1218.73 L1952.43 1218.73 L1951.85 1218.73 L1951.26 1218.73 L1950.67 1218.73 L1950.09 1218.73 L1949.5 1218.73 L1948.91 1218.73 L1948.33 1218.73 L1947.74 1218.73 L1947.16 1218.73 L1946.57 1218.73 L1945.98 1218.73 L1945.4 1218.73 L1944.81 1218.73 L1944.22 1218.73 L1943.64 1218.73 L1943.05 1218.73 L1942.46 1218.73 L1941.88 1218.73 L1941.29 1218.73 L1940.71 1218.73 L1940.12 1218.73 L1939.53 1218.73 L1938.95 1218.73 L1938.36 1218.73 L1937.77 1218.73 L1937.19 1218.73 L1936.6 1218.73 L1936.01 1218.73 L1935.43 1218.73 L1934.84 1218.73 L1934.25 1218.73 L1933.67 1218.73 L1933.08 1218.73 L1932.5 1218.73 L1931.91 1218.73 L1931.32 1218.73 L1930.74 1218.73 L1930.15 1218.73 L1929.56 1218.73 L1928.98 1218.73 L1928.39 1218.73 L1927.8 1218.73 L1927.22 1218.73 L1926.63 1218.73 L1926.04 1218.73 L1925.46 1218.73 L1924.87 1218.73 L1924.29 1218.73 L1923.7 1218.73 L1923.11 1218.73 L1922.53 1218.73 L1921.94 1218.73 L1921.35 1218.73 L1920.77 1218.73 L1920.18 1218.73 L1919.59 1218.73 L1919.01 1218.73 L1918.42 1218.73 L1917.83 1218.73 L1917.25 1218.73 L1916.66 1218.73 L1916.08 1218.73 L1915.49 1218.73 L1914.9 1218.73 L1914.32 1218.73 L1913.73 1218.73 L1913.14 1218.73 L1912.56 1218.73 L1911.97 1218.73 L1911.38 1218.73 L1910.8 1218.73 L1910.21 1218.73 L1909.63 1218.73 L1909.04 1218.73 L1908.45 1218.73 L1907.87 1218.73 L1907.28 1218.73 L1906.69 1218.73 L1906.11 1218.73 L1905.52 1218.73 L1904.93 1218.73 L1904.35 1218.73 L1903.76 1218.73 L1903.17 1218.73 L1902.59 1218.73 L1902 1218.73 L1901.42 1218.73 L1900.83 1218.73 L1900.24 1218.73 L1899.66 1218.73 L1899.07 1218.73 L1898.48 1218.73 L1897.9 1218.73 L1897.31 1218.73 L1896.72 1218.73 L1896.14 1218.73 L1895.55 1218.73 L1894.96 1218.73 L1894.38 1218.73 L1893.79 1218.73 L1893.21 1218.73 L1892.62 1218.73 L1892.03 1218.73 L1891.45 1218.73 L1890.86 1218.73 L1890.27 1218.73 L1889.69 1218.73 L1889.1 1218.73 L1888.51 1218.73 L1887.93 1218.73 L1887.34 1218.73 L1886.76 1218.73 L1886.17 1218.73 L1885.58 1218.73 L1885 1218.73 L1884.41 1218.73 L1883.82 1218.73 L1883.24 1218.73 L1882.65 1218.73 L1882.06 1218.73 L1881.48 1218.73 L1880.89 1218.73 L1880.3 1218.73 L1879.72 1218.73 L1879.13 1218.73 L1878.55 1218.73 L1877.96 1218.73 L1877.37 1218.73 L1876.79 1218.73 L1876.2 1218.73 L1875.61 1218.73 L1875.03 1218.73 L1874.44 1218.73 L1873.85 1218.73 L1873.27 1218.73 L1872.68 1218.73 L1872.09 1218.73 L1871.51 1218.73 L1870.92 1218.73 L1870.34 1218.73 L1869.75 1218.73 L1869.16 1218.73 L1868.58 1218.73 L1867.99 1218.73 L1867.4 1218.73 L1866.82 1218.73 L1866.23 1218.73 L1865.64 1218.73 L1865.06 1218.73 L1864.47 1218.73 L1863.88 1218.73 L1863.3 1218.73 L1862.71 1218.73 L1862.13 1218.73 L1861.54 1218.73 L1860.95 1218.73 L1860.37 1218.73 L1859.78 1218.73 L1859.19 1218.73 L1858.61 1218.73 L1858.02 1218.73 L1857.43 1218.73 L1856.85 1218.73 L1856.26 1218.73 L1855.68 1218.73 L1855.09 1218.73 L1854.5 1218.73 L1853.92 1218.73 L1853.33 1218.73 L1852.74 1218.73 L1852.16 1218.73 L1851.57 1218.73 L1850.98 1218.73 L1850.4 1218.73 L1849.81 1218.73 L1849.22 1218.73 L1848.64 1218.73 L1848.05 1218.73 L1847.47 1218.73 L1846.88 1218.73 L1846.29 1218.73 L1845.71 1218.73 L1845.12 1218.73 L1844.53 1218.73 L1843.95 1218.73 L1843.36 1218.73 L1842.77 1218.73 L1842.19 1218.73 L1841.6 1218.73 L1841.01 1218.73 L1840.43 1218.73 L1839.84 1218.73 L1839.26 1218.73 L1838.67 1218.73 L1838.08 1218.73 L1837.5 1218.73 L1836.91 1218.73 L1836.32 1218.73 L1835.74 1218.73 L1835.15 1218.73 L1834.56 1218.73 L1833.98 1218.73 L1833.39 1218.73 L1832.81 1218.73 L1832.22 1218.73 L1831.63 1218.73 L1831.05 1218.73 L1830.46 1218.73 L1829.87 1218.73 L1829.29 1218.73 L1828.7 1218.73 L1828.11 1218.73 L1827.53 1218.73 L1826.94 1218.73 L1826.35 1218.73 L1825.77 1218.73 L1825.18 1218.73 L1824.6 1218.73 L1824.01 1218.73 L1823.42 1218.73 L1822.84 1218.73 L1822.25 1218.73 L1821.66 1218.73 L1821.08 1218.73 L1820.49 1218.73 L1819.9 1218.73 L1819.32 1218.73 L1818.73 1218.73 L1818.14 1218.73 L1817.56 1218.73 L1816.97 1218.73 L1816.39 1218.73 L1815.8 1218.73 L1815.21 1218.73 L1814.63 1218.73 L1814.04 1218.73 L1813.45 1218.73 L1812.87 1218.73 L1812.28 1218.73 L1811.69 1218.73 L1811.11 1218.73 L1810.52 1218.73 L1809.94 1218.73 L1809.35 1218.73 L1808.76 1218.73 L1808.18 1218.73 L1807.59 1218.73 L1807 1218.73 L1806.42 1218.73 L1805.83 1218.73 L1805.24 1218.73 L1804.66 1218.73 L1804.07 1218.73 L1803.48 1218.73 L1802.9 1218.73 L1802.31 1218.73 L1801.73 1218.73 L1801.14 1218.73 L1800.55 1218.73 L1799.97 1218.73 L1799.38 1218.73 L1798.79 1218.73 L1798.21 1218.73 L1797.62 1218.73 L1797.03 1218.73 L1796.45 1218.73 L1795.86 1218.73 L1795.27 1218.73 L1794.69 1218.73 L1794.1 1218.73 L1793.52 1218.73 L1792.93 1218.73 L1792.34 1218.73 L1791.76 1218.73 L1791.17 1218.73 L1790.58 1218.73 L1790 1218.73 L1789.41 1218.73 L1788.82 1218.73 L1788.24 1218.73 L1787.65 1218.73 L1787.06 1218.73 L1786.48 1218.73 L1785.89 1218.73 L1785.31 1218.73 L1784.72 1218.73 L1784.13 1218.73 L1783.55 1218.73 L1782.96 1218.73 L1782.37 1218.73 L1781.79 1218.73 L1781.2 1218.73 L1780.61 1218.73 L1780.03 1218.73 L1779.44 1218.73 L1778.86 1218.73 L1778.27 1218.73 L1777.68 1218.73 L1777.1 1218.73 L1776.51 1218.73 L1775.92 1218.73 L1775.34 1218.73 L1774.75 1218.73 L1774.16 1218.73 L1773.58 1218.73 L1772.99 1218.73 L1772.4 1218.73 L1771.82 1218.73 L1771.23 1218.73 L1770.65 1218.73 L1770.06 1218.73 L1769.47 1218.73 L1768.89 1218.73 L1768.3 1218.73 L1767.71 1218.73 L1767.13 1218.73 L1766.54 1218.73 L1765.95 1218.73 L1765.37 1218.73 L1764.78 1218.73 L1764.19 1218.73 L1763.61 1218.73 L1763.02 1218.73 L1762.44 1218.73 L1761.85 1218.73 L1761.26 1218.73 L1760.68 1218.73 L1760.09 1218.73 L1759.5 1218.73 L1758.92 1218.73 L1758.33 1218.73 L1757.74 1218.73 L1757.16 1218.73 L1756.57 1218.73 L1755.99 1218.73 L1755.4 1218.73 L1754.81 1218.73 L1754.23 1218.73 L1753.64 1218.73 L1753.05 1218.73 L1752.47 1218.73 L1751.88 1218.73 L1751.29 1218.73 L1750.71 1218.73 L1750.12 1218.73 L1749.53 1218.73 L1748.95 1218.73 L1748.36 1218.73 L1747.78 1218.73 L1747.19 1218.73 L1746.6 1218.73 L1746.02 1218.73 L1745.43 1218.73 L1744.84 1218.73 L1744.26 1218.73 L1743.67 1218.73 L1743.08 1218.73 L1742.5 1218.73 L1741.91 1218.73 L1741.32 1218.73 L1740.74 1218.73 L1740.15 1218.73 L1739.57 1218.73 L1738.98 1218.73 L1738.39 1218.73 L1737.81 1218.73 L1737.22 1218.73 L1736.63 1218.73 L1736.05 1218.73 L1735.46 1218.73 L1734.87 1218.73 L1734.29 1218.73 L1733.7 1218.73 L1733.11 1218.73 L1732.53 1218.73 L1731.94 1218.73 L1731.36 1218.73 L1730.77 1218.73 L1730.18 1218.73 L1729.6 1218.73 L1729.01 1218.73 L1728.42 1218.73 L1727.84 1218.73 L1727.25 1218.73 L1726.66 1218.73 L1726.08 1218.73 L1725.49 1218.73 L1724.91 1218.73 L1724.32 1218.73 L1723.73 1218.73 L1723.15 1218.73 L1722.56 1218.73 L1721.97 1218.73 L1721.39 1218.73 L1720.8 1218.73 L1720.21 1218.73 L1719.63 1218.73 L1719.04 1218.73 L1718.45 1218.73 L1717.87 1218.73 L1717.28 1218.73 L1716.7 1218.73 L1716.11 1218.73 L1715.52 1218.73 L1714.94 1218.73 L1714.35 1218.73 L1713.76 1218.73 L1713.18 1218.73 L1712.59 1218.73 L1712 1218.73 L1711.42 1218.73 L1710.83 1218.73 L1710.24 1218.73 L1709.66 1218.73 L1709.07 1218.73 L1708.49 1218.73 L1707.9 1218.73 L1707.31 1218.73 L1706.73 1218.73 L1706.14 1218.73 L1705.55 1218.73 L1704.97 1218.73 L1704.38 1218.73 L1703.79 1218.73 L1703.21 1218.73 L1702.62 1218.73 L1702.04 1218.73 L1701.45 1218.73 L1700.86 1218.73 L1700.28 1218.73 L1699.69 1218.73 L1699.1 1218.73 L1698.52 1218.73 L1697.93 1218.73 L1697.34 1218.73 L1696.76 1218.73 L1696.17 1218.73 L1695.58 1218.73 L1695 1218.73 L1694.41 1218.73 L1693.83 1218.73 L1693.24 1218.73 L1692.65 1218.73 L1692.07 1218.73 L1691.48 1218.73 L1690.89 1218.73 L1690.31 1218.73 L1689.72 1218.73 L1689.13 1218.73 L1688.55 1218.73 L1687.96 1218.73 L1687.37 1218.73 L1686.79 1218.73 L1686.2 1218.73 L1685.62 1218.73 L1685.03 1218.73 L1684.44 1218.73 L1683.86 1218.73 L1683.27 1218.73 L1682.68 1218.73 L1682.1 1218.73 L1681.51 1218.73 L1680.92 1218.73 L1680.34 1218.73 L1679.75 1218.73 L1679.17 1218.73 L1678.58 1218.73 L1677.99 1218.73 L1677.41 1218.73 L1676.82 1218.73 L1676.23 1218.73 L1675.65 1218.73 L1675.06 1218.73 L1674.47 1218.73 L1673.89 1218.73 L1673.3 1218.73 L1672.71 1218.73 L1672.13 1218.73 L1671.54 1218.73 L1670.96 1218.73 L1670.37 1218.73 L1669.78 1218.73 L1669.2 1218.73 L1668.61 1218.73 L1668.02 1218.73 L1667.44 1218.73 L1666.85 1218.73 L1666.26 1218.73 L1665.68 1218.73 L1665.09 1218.73 L1664.5 1218.73 L1663.92 1218.73 L1663.33 1218.73 L1662.75 1218.73 L1662.16 1218.73 L1661.57 1218.73 L1660.99 1218.73 L1660.4 1218.73 L1659.81 1218.73 L1659.23 1218.73 L1658.64 1218.73 L1658.05 1218.73 L1657.47 1218.73 L1656.88 1218.73 L1656.29 1218.73 L1655.71 1218.73 L1655.12 1218.73 L1654.54 1218.73 L1653.95 1218.73 L1653.36 1218.73 L1652.78 1218.73 L1652.19 1218.73 L1651.6 1218.73 L1651.02 1218.73 L1650.43 1218.73 L1649.84 1218.73 L1649.26 1218.73 L1648.67 1218.73 L1648.09 1218.73 L1647.5 1218.73 L1646.91 1218.73 L1646.33 1218.73 L1645.74 1218.73 L1645.15 1218.73 L1644.57 1218.73 L1643.98 1218.73 L1643.39 1218.73 L1642.81 1218.73 L1642.22 1218.73 L1641.63 1218.73 L1641.05 1218.73 L1640.46 1218.73 L1639.88 1218.73 L1639.29 1218.73 L1638.7 1218.73 L1638.12 1218.73 L1637.53 1218.73 L1636.94 1218.73 L1636.36 1218.73 L1635.77 1218.73 L1635.18 1218.73 L1634.6 1218.73 L1634.01 1218.73 L1633.42 1218.73 L1632.84 1218.73 L1632.25 1218.73 L1631.67 1218.73 L1631.08 1218.73 L1630.49 1218.73 L1629.91 1218.73 L1629.32 1218.73 L1628.73 1218.73 L1628.15 1218.73 L1627.56 1218.73 L1626.97 1218.73 L1626.39 1218.73 L1625.8 1218.73 L1625.22 1218.73 L1624.63 1218.73 L1624.04 1218.73 L1623.46 1218.73 L1622.87 1218.73 L1622.28 1218.73 L1621.7 1218.73 L1621.11 1218.73 L1620.52 1218.73 L1619.94 1218.73 L1619.35 1218.73 L1618.76 1218.73 L1618.18 1218.73 L1617.59 1218.73 L1617.01 1218.73 L1616.42 1218.73 L1615.83 1218.73 L1615.25 1218.73 L1614.66 1218.73 L1614.07 1218.73 L1613.49 1218.73 L1612.9 1218.73 L1612.31 1218.73 L1611.73 1218.73 L1611.14 1218.73 L1610.55 1218.73 L1609.97 1218.73 L1609.38 1218.73 L1608.8 1218.73 L1608.21 1218.73 L1607.62 1218.73 L1607.04 1218.73 L1606.45 1218.73 L1605.86 1218.73 L1605.28 1218.73 L1604.69 1218.73 L1604.1 1218.73 L1603.52 1218.73 L1602.93 1218.73 L1602.34 1218.73 L1601.76 1218.73 L1601.17 1218.73 L1600.59 1218.73 L1600 1218.73 L1599.41 1218.73 L1598.83 1218.73 L1598.24 1218.73 L1597.65 1218.73 L1597.07 1218.73 L1596.48 1218.73 L1595.89 1218.73 L1595.31 1218.73 L1594.72 1218.73 L1594.14 1218.73 L1593.55 1218.73 L1592.96 1218.73 L1592.38 1218.73 L1591.79 1218.73 L1591.2 1218.73 L1590.62 1218.73 L1590.03 1218.73 L1589.44 1218.73 L1588.86 1218.73 L1588.27 1218.73 L1587.68 1218.73 L1587.1 1218.73 L1586.51 1218.73 L1585.93 1218.73 L1585.34 1218.73 L1584.75 1218.73 L1584.17 1218.73 L1583.58 1218.73 L1582.99 1218.73 L1582.41 1218.73 L1581.82 1218.73 L1581.23 1218.73 L1580.65 1218.73 L1580.06 1218.73 L1579.47 1218.73 L1578.89 1218.73 L1578.3 1218.73 L1577.72 1218.73 L1577.13 1218.73 L1576.54 1218.73 L1575.96 1218.73 L1575.37 1218.73 L1574.78 1218.73 L1574.2 1218.73 L1573.61 1218.73 L1573.02 1218.73 L1572.44 1218.73 L1571.85 1218.73 L1571.27 1218.73 L1570.68 1218.73 L1570.09 1218.73 L1569.51 1218.73 L1568.92 1218.73 L1568.33 1218.73 L1567.75 1218.73 L1567.16 1218.73 L1566.57 1218.73 L1565.99 1218.73 L1565.4 1218.73 L1564.81 1218.73 L1564.23 1218.73 L1563.64 1218.73 L1563.06 1218.73 L1562.47 1218.73 L1561.88 1218.73 L1561.3 1218.73 L1560.71 1218.73 L1560.12 1218.73 L1559.54 1218.73 L1558.95 1218.73 L1558.36 1218.73 L1557.78 1218.73 L1557.19 1218.73 L1556.6 1218.73 L1556.02 1218.73 L1555.43 1218.73 L1554.85 1218.73 L1554.26 1218.73 L1553.67 1218.73 L1553.09 1218.73 L1552.5 1218.73 L1551.91 1218.73 L1551.33 1218.73 L1550.74 1218.73 L1550.15 1218.73 L1549.57 1218.73 L1548.98 1218.73 L1548.4 1218.73 L1547.81 1218.73 L1547.22 1218.73 L1546.64 1218.73 L1546.05 1218.73 L1545.46 1218.73 L1544.88 1218.73 L1544.29 1218.73 L1543.7 1218.73 L1543.12 1218.73 L1542.53 1218.73 L1541.94 1218.73 L1541.36 1218.73 L1540.77 1218.73 L1540.19 1218.73 L1539.6 1218.73 L1539.01 1218.73 L1538.43 1218.73 L1537.84 1218.73 L1537.25 1218.73 L1536.67 1218.73 L1536.08 1218.73 L1535.49 1218.73 L1534.91 1218.73 L1534.32 1218.73 L1533.73 1218.73 L1533.15 1218.73 L1532.56 1218.73 L1531.98 1218.73 L1531.39 1218.73 L1530.8 1218.73 L1530.22 1218.73 L1529.63 1218.73 L1529.04 1218.73 L1528.46 1218.73 L1527.87 1218.73 L1527.28 1218.73 L1526.7 1218.73 L1526.11 1218.73 L1525.52 1218.73 L1524.94 1218.73 L1524.35 1218.73 L1523.77 1218.73 L1523.18 1218.73 L1522.59 1218.73 L1522.01 1218.73 L1521.42 1218.73 L1520.83 1218.73 L1520.25 1218.73 L1519.66 1218.73 L1519.07 1218.73 L1518.49 1218.73 L1517.9 1218.73 L1517.32 1218.73 L1516.73 1218.73 L1516.14 1218.73 L1515.56 1218.73 L1514.97 1218.73 L1514.38 1218.73 L1513.8 1218.73 L1513.21 1218.73 L1512.62 1218.73 L1512.04 1218.73 L1511.45 1218.73 L1510.86 1218.73 L1510.28 1218.73 L1509.69 1218.73 L1509.11 1218.73 L1508.52 1218.73 L1507.93 1218.73 L1507.35 1218.73 L1506.76 1218.73 L1506.17 1218.73 L1505.59 1218.73 L1505 1218.73 L1504.41 1218.73 L1503.83 1218.73 L1503.24 1218.73 L1502.65 1218.73 L1502.07 1218.73 L1501.48 1218.73 L1500.9 1218.73 L1500.31 1218.73 L1499.72 1218.73 L1499.14 1218.73 L1498.55 1218.73 L1497.96 1218.73 L1497.38 1218.73 L1496.79 1218.73 L1496.2 1218.73 L1495.62 1218.73 L1495.03 1218.73 L1494.45 1218.73 L1493.86 1218.73 L1493.27 1218.73 L1492.69 1218.73 L1492.1 1218.73 L1491.51 1218.73 L1490.93 1218.73 L1490.34 1218.73 L1489.75 1218.73 L1489.17 1218.73 L1488.58 1218.73 L1487.99 1218.73 L1487.41 1218.73 L1486.82 1218.73 L1486.24 1218.73 L1485.65 1218.73 L1485.06 1218.73 L1484.48 1218.73 L1483.89 1218.73 L1483.3 1218.73 L1482.72 1218.73 L1482.13 1218.73 L1481.54 1218.73 L1480.96 1218.73 L1480.37 1218.73 L1479.78 1218.73 L1479.2 1218.73 L1478.61 1218.73 L1478.03 1218.73 L1477.44 1218.73 L1476.85 1218.73 L1476.27 1218.73 L1475.68 1218.73 L1475.09 1218.73 L1474.51 1218.73 L1473.92 1218.73 L1473.33 1218.73 L1472.75 1218.73 L1472.16 1218.73 L1471.57 1218.73 L1470.99 1218.73 L1470.4 1218.73 L1469.82 1218.73 L1469.23 1218.73 L1468.64 1218.73 L1468.06 1218.73 L1467.47 1218.73 L1466.88 1218.73 L1466.3 1218.73 L1465.71 1218.73 L1465.12 1218.73 L1464.54 1218.73 L1463.95 1218.73 L1463.37 1218.73 L1462.78 1218.73 L1462.19 1218.73 L1461.61 1218.73 L1461.02 1218.73 L1460.43 1218.73 L1459.85 1218.73 L1459.26 1218.73 L1458.67 1218.73 L1458.09 1218.73 L1457.5 1218.73 L1456.91 1218.73 L1456.33 1218.73 L1455.74 1218.73 L1455.16 1218.73 L1454.57 1218.73 L1453.98 1218.73 L1453.4 1218.73 L1452.81 1218.73 L1452.22 1218.73 L1451.64 1218.73 L1451.05 1218.73 L1450.46 1218.73 L1449.88 1218.73 L1449.29 1218.73 L1448.7 1218.73 L1448.12 1218.73 L1447.53 1218.73 L1446.95 1218.73 L1446.36 1218.73 L1445.77 1218.73 L1445.19 1218.73 L1444.6 1218.73 L1444.01 1218.73 L1443.43 1218.73 L1442.84 1218.73 L1442.25 1218.73 L1441.67 1218.73 L1441.08 1218.73 L1440.5 1218.73 L1439.91 1218.73 L1439.32 1218.73 L1438.74 1218.73 L1438.15 1218.73 L1437.56 1218.73 L1436.98 1218.73 L1436.39 1218.73 L1435.8 1218.73 L1435.22 1218.73 L1434.63 1218.73 L1434.04 1218.73 L1433.46 1218.73 L1432.87 1218.73 L1432.29 1218.73 L1431.7 1218.73 L1431.11 1218.73 L1430.53 1218.73 L1429.94 1218.73 L1429.35 1218.73 L1428.77 1218.73 L1428.18 1218.73 L1427.59 1218.73 L1427.01 1218.73 L1426.42 1218.73 L1425.83 1218.73 L1425.25 1218.73 L1424.66 1218.73 L1424.08 1218.73 L1423.49 1218.73 L1422.9 1218.73 L1422.32 1218.73 L1421.73 1218.73 L1421.14 1218.73 L1420.56 1218.73 L1419.97 1218.73 L1419.38 1218.73 L1418.8 1218.73 L1418.21 1218.73 L1417.63 1218.73 L1417.04 1218.73 L1416.45 1218.73 L1415.87 1218.73 L1415.28 1218.73 L1414.69 1218.73 L1414.11 1218.73 L1413.52 1218.73 L1412.93 1218.73 L1412.35 1218.73 L1411.76 1218.73 L1411.17 1218.73 L1410.59 1218.73 L1410 1218.73 L1409.42 1218.73 L1408.83 1218.73 L1408.24 1218.73 L1407.66 1218.73 L1407.07 1218.73 L1406.48 1218.73 L1405.9 1218.73 L1405.31 1218.73 L1404.72 1218.73 L1404.14 1218.73 L1403.55 1218.73 L1402.96 1218.73 L1402.38 1218.73 L1401.79 1218.73 L1401.21 1218.73 L1400.62 1218.73 L1400.03 1218.73 L1399.45 1218.73 L1398.86 1218.73 L1398.27 1218.73 L1397.69 1218.73 L1397.1 1218.73 L1396.51 1218.73 L1395.93 1218.73 L1395.34 1218.73 L1394.75 1218.73 L1394.17 1218.73 L1393.58 1218.73 L1393 1218.73 L1392.41 1218.73 L1391.82 1218.73 L1391.24 1218.73 L1390.65 1218.73 L1390.06 1218.73 L1389.48 1218.73 L1388.89 1218.73 L1388.3 1218.73 L1387.72 1218.73 L1387.13 1218.73 L1386.55 1218.73 L1385.96 1218.73 L1385.37 1218.73 L1384.79 1218.73 L1384.2 1218.73 L1383.61 1218.73 L1383.03 1218.73 L1382.44 1218.73 L1381.85 1218.73 L1381.27 1218.73 L1380.68 1218.73 L1380.09 1218.73 L1379.51 1218.73 L1378.92 1218.73 L1378.34 1218.73 L1377.75 1218.73 L1377.16 1218.73 L1376.58 1218.73 L1375.99 1218.73 L1375.4 1218.73 L1374.82 1218.73 L1374.23 1218.73 L1373.64 1218.73 L1373.06 1218.73 L1372.47 1218.73 L1371.88 1218.73 L1371.3 1218.73 L1370.71 1218.73 L1370.13 1218.73 L1369.54 1218.73 L1368.95 1218.73 L1368.37 1218.73 L1367.78 1218.73 L1367.19 1218.73 L1366.61 1218.73 L1366.02 1218.73 L1365.43 1218.73 L1364.85 1218.73 L1364.26 1218.73 L1363.68 1218.73 L1363.09 1218.73 L1362.5 1218.73 L1361.92 1218.73 L1361.33 1218.73 L1360.74 1218.73 L1360.16 1218.73 L1359.57 1218.73 L1358.98 1218.73 L1358.4 1218.73 L1357.81 1218.73 L1357.22 1218.73 L1356.64 1218.73 L1356.05 1218.73 L1355.47 1218.73 L1354.88 1218.73 L1354.29 1218.73 L1353.71 1218.73 L1353.12 1218.73 L1352.53 1218.73 L1351.95 1218.73 L1351.36 1218.73 L1350.77 1218.73 L1350.19 1218.73 L1349.6 1218.73 L1349.01 1218.73 L1348.43 1218.73 L1347.84 1218.73 L1347.26 1218.73 L1346.67 1218.73 L1346.08 1218.73 L1345.5 1218.73 L1344.91 1218.73 L1344.32 1218.73 L1343.74 1218.73 L1343.15 1218.73 L1342.56 1218.73 L1341.98 1218.73 L1341.39 1218.73 L1340.8 1218.73 L1340.22 1218.73 L1339.63 1218.73 L1339.05 1218.73 L1338.46 1218.73 L1337.87 1218.73 L1337.29 1218.73 L1336.7 1218.73 L1336.11 1218.73 L1335.53 1218.73 L1334.94 1218.73 L1334.35 1218.73 L1333.77 1218.73 L1333.18 1218.73 L1332.6 1218.73 L1332.01 1218.73 L1331.42 1218.73 L1330.84 1218.73 L1330.25 1218.73 L1329.66 1218.73 L1329.08 1218.73 L1328.49 1218.73 L1327.9 1218.73 L1327.32 1218.73 L1326.73 1218.73 L1326.14 1218.73 L1325.56 1218.73 L1324.97 1218.73 L1324.39 1218.73 L1323.8 1218.73 L1323.21 1218.73 L1322.63 1218.73 L1322.04 1218.73 L1321.45 1218.73 L1320.87 1218.73 L1320.28 1218.73 L1319.69 1218.73 L1319.11 1218.73 L1318.52 1218.73 L1317.93 1218.73 L1317.35 1218.73 L1316.76 1218.73 L1316.18 1218.73 L1315.59 1218.73 L1315 1218.73 L1314.42 1218.73 L1313.83 1218.73 L1313.24 1218.73 L1312.66 1218.73 L1312.07 1218.73 L1311.48 1218.73 L1310.9 1218.73 L1310.31 1218.73 L1309.73 1218.73 L1309.14 1218.73 L1308.55 1218.73 L1307.97 1218.73 L1307.38 1218.73 L1306.79 1218.73 L1306.21 1218.73 L1305.62 1218.73 L1305.03 1218.73 L1304.45 1218.73 L1303.86 1218.73 L1303.27 1218.73 L1302.69 1218.73 L1302.1 1218.73 L1301.52 1218.73 L1300.93 1218.73 L1300.34 1218.73 L1299.76 1218.73 L1299.17 1218.73 L1298.58 1218.73 L1298 1218.73 L1297.41 1218.73 L1296.82 1218.73 L1296.24 1218.73 L1295.65 1218.73 L1295.06 1218.73 L1294.48 1218.73 L1293.89 1218.73 L1293.31 1218.73 L1292.72 1218.73 L1292.13 1218.73 L1291.55 1218.73 L1290.96 1218.73 L1290.37 1218.73 L1289.79 1218.73 L1289.2 1218.73 L1288.61 1218.73 L1288.03 1218.73 L1287.44 1218.73 L1286.86 1218.73 L1286.27 1218.73 L1285.68 1218.73 L1285.1 1218.73 L1284.51 1218.73 L1283.92 1218.73 L1283.34 1218.73 L1282.75 1218.73 L1282.16 1218.73 L1281.58 1218.73 L1280.99 1218.73 L1280.4 1218.73 L1279.82 1218.73 L1279.23 1218.73 L1278.65 1218.73 L1278.06 1218.73 L1277.47 1218.73 L1276.89 1218.73 L1276.3 1218.73 L1275.71 1218.73 L1275.13 1218.73 L1274.54 1218.73 L1273.95 1218.73 L1273.37 1218.73 L1272.78 1218.73 L1272.19 1218.73 L1271.61 1218.73 L1271.02 1218.73 L1270.44 1218.73 L1269.85 1218.73 L1269.26 1218.73 L1268.68 1218.73 L1268.09 1218.73 L1267.5 1218.73 L1266.92 1218.73 L1266.33 1218.73 L1265.74 1218.73 L1265.16 1218.73 L1264.57 1218.73 L1263.98 1218.73 L1263.4 1218.73 L1262.81 1218.73 L1262.23 1218.73 L1261.64 1218.73 L1261.05 1218.73 L1260.47 1218.73 L1259.88 1218.73 L1259.29 1218.73 L1258.71 1218.73 L1258.12 1218.73 L1257.53 1218.73 L1256.95 1218.73 L1256.36 1218.73 L1255.78 1218.73 L1255.19 1218.73 L1254.6 1218.73 L1254.02 1218.73 L1253.43 1218.73 L1252.84 1218.73 L1252.26 1218.73 L1251.67 1218.73 L1251.08 1218.73 L1250.5 1218.73 L1249.91 1218.73 L1249.32 1218.73 L1248.74 1218.73 L1248.15 1218.73 L1247.57 1218.73 L1246.98 1218.73 L1246.39 1218.73 L1245.81 1218.73 L1245.22 1218.73 L1244.63 1218.73 L1244.05 1218.73 L1243.46 1218.73 L1242.87 1218.73 L1242.29 1218.73 L1241.7 1218.73 L1241.11 1218.73 L1240.53 1218.73 L1239.94 1218.73 L1239.36 1218.73 L1238.77 1218.73 L1238.18 1218.73 L1237.6 1218.73 L1237.01 1218.73 L1236.42 1218.73 L1235.84 1218.73 L1235.25 1218.73 L1234.66 1218.73 L1234.08 1218.73 L1233.49 1218.73 L1232.91 1218.73 L1232.32 1218.73 L1231.73 1218.73 L1231.15 1218.73 L1230.56 1218.73 L1229.97 1218.73 L1229.39 1218.73 L1228.8 1218.73 L1228.21 1218.73 L1227.63 1218.73 L1227.04 1218.73 L1226.45 1218.73 L1225.87 1218.73 L1225.28 1218.73 L1224.7 1218.73 L1224.11 1218.73 L1223.52 1218.73 L1222.94 1218.73 L1222.35 1218.73 L1221.76 1218.73 L1221.18 1218.73 L1220.59 1218.73 L1220 1218.73 L1219.42 1218.73 L1218.83 1218.73 L1218.24 1218.73 L1217.66 1218.73 L1217.07 1218.73 L1216.49 1218.73 L1215.9 1218.73 L1215.31 1218.73 L1214.73 1218.73 L1214.14 1218.73 L1213.55 1218.73 L1212.97 1218.73 L1212.38 1218.73 L1211.79 1218.73 L1211.21 1218.73 L1210.62 1218.73 L1210.03 1218.73 L1209.45 1218.73 L1208.86 1218.73 L1208.28 1218.73 L1207.69 1218.73 L1207.1 1218.73 L1206.52 1218.73 L1205.93 1218.73 L1205.34 1218.73 L1204.76 1218.73 L1204.17 1218.73 L1203.58 1218.73 L1203 1218.73 L1202.41 1218.73 L1201.83 1218.73 L1201.24 1218.73 L1200.65 1218.73 L1200.07 1218.73 L1199.48 1218.73 L1198.89 1218.73 L1198.31 1218.73 L1197.72 1218.73 L1197.13 1218.73 L1196.55 1218.73 L1195.96 1218.73 L1195.37 1218.73 L1194.79 1218.73 L1194.2 1218.73 L1193.62 1218.73 L1193.03 1218.73 L1192.44 1218.73 L1191.86 1218.73 L1191.27 1218.73 L1190.68 1218.73 L1190.1 1218.73 L1189.51 1218.73 L1188.92 1218.73 L1188.34 1218.73 L1187.75 1218.73 L1187.16 1218.73 L1186.58 1218.73 L1185.99 1218.73 L1185.41 1218.73 L1184.82 1218.73 L1184.23 1218.73 L1183.65 1218.73 L1183.06 1218.73 L1182.47 1218.73 L1181.89 1218.73 L1181.3 1218.73 L1180.71 1218.73 L1180.13 1218.73 L1179.54 1218.73 L1178.96 1218.73 L1178.37 1218.73 L1177.78 1218.73 L1177.2 1218.73 L1176.61 1218.73 L1176.02 1218.73 L1175.44 1218.73 L1174.85 1218.73 L1174.26 1218.73 L1173.68 1218.73 L1173.09 1218.73 L1172.5 1218.73 L1171.92 1218.73 L1171.33 1218.73 L1170.75 1218.73 L1170.16 1218.73 L1169.57 1218.73 L1168.99 1218.73 L1168.4 1218.73 L1167.81 1218.73 L1167.23 1218.73 L1166.64 1218.73 L1166.05 1218.73 L1165.47 1218.73 L1164.88 1218.73 L1164.29 1218.73 L1163.71 1218.73 L1163.12 1218.73 L1162.54 1218.73 L1161.95 1218.73 L1161.36 1218.73 L1160.78 1218.73 L1160.19 1218.73 L1159.6 1218.73 L1159.02 1218.73 L1158.43 1218.73 L1157.84 1218.73 L1157.26 1218.73 L1156.67 1218.73 L1156.09 1218.73 L1155.5 1218.73 L1154.91 1218.73 L1154.33 1218.73 L1153.74 1218.73 L1153.15 1218.73 L1152.57 1218.73 L1151.98 1218.73 L1151.39 1218.73 L1150.81 1218.73 L1150.22 1218.73 L1149.63 1218.73 L1149.05 1218.73 L1148.46 1218.73 L1147.88 1218.73 L1147.29 1218.73 L1146.7 1218.73 L1146.12 1218.73 L1145.53 1218.73 L1144.94 1218.73 L1144.36 1218.73 L1143.77 1218.73 L1143.18 1218.73 L1142.6 1218.73 L1142.01 1218.73 L1141.42 1218.73 L1140.84 1218.73 L1140.25 1218.73 L1139.67 1218.73 L1139.08 1218.73 L1138.49 1218.73 L1137.91 1218.73 L1137.32 1218.73 L1136.73 1218.73 L1136.15 1218.73 L1135.56 1218.73 L1134.97 1218.73 L1134.39 1218.73 L1133.8 1218.73 L1133.21 1218.73 L1132.63 1218.73 L1132.04 1218.73 L1131.46 1218.73 L1130.87 1218.73 L1130.28 1218.73 L1129.7 1218.73 L1129.11 1218.73 L1128.52 1218.73 L1127.94 1218.73 L1127.35 1218.73 L1126.76 1218.73 L1126.18 1218.73 L1125.59 1218.73 L1125.01 1218.73 L1124.42 1218.73 L1123.83 1218.73 L1123.25 1218.73 L1122.66 1218.73 L1122.07 1218.73 L1121.49 1218.73 L1120.9 1218.73 L1120.31 1218.73 L1119.73 1218.73 L1119.14 1218.73 L1118.55 1218.73 L1117.97 1218.73 L1117.38 1218.73 L1116.8 1218.73 L1116.21 1218.73 L1115.62 1218.73 L1115.04 1218.73 L1114.45 1218.73 L1113.86 1218.73 L1113.28 1218.73 L1112.69 1218.73 L1112.1 1218.73 L1111.52 1218.73 L1110.93 1218.73 L1110.34 1218.73 L1109.76 1218.73 L1109.17 1218.73 L1108.59 1218.73 L1108 1218.73 L1107.41 1218.73 L1106.83 1218.73 L1106.24 1218.73 L1105.65 1218.73 L1105.07 1218.73 L1104.48 1218.73 L1103.89 1218.73 L1103.31 1218.73 L1102.72 1218.73 L1102.14 1218.73 L1101.55 1218.73 L1100.96 1218.73 L1100.38 1218.73 L1099.79 1218.73 L1099.2 1218.73 L1098.62 1218.73 L1098.03 1218.73 L1097.44 1218.73 L1096.86 1218.73 L1096.27 1218.73 L1095.68 1218.73 L1095.1 1218.73 L1094.51 1218.73 L1093.93 1218.73 L1093.34 1218.73 L1092.75 1218.73 L1092.17 1218.73 L1091.58 1218.73 L1090.99 1218.73 L1090.41 1218.73 L1089.82 1218.73 L1089.23 1218.73 L1088.65 1218.73 L1088.06 1218.73 L1087.47 1218.73 L1086.89 1218.73 L1086.3 1218.73 L1085.72 1218.73 L1085.13 1218.73 L1084.54 1218.73 L1083.96 1218.73 L1083.37 1218.73 L1082.78 1218.73 L1082.2 1218.73 L1081.61 1218.73 L1081.02 1218.73 L1080.44 1218.73 L1079.85 1218.73 L1079.26 1218.73 L1078.68 1218.73 L1078.09 1218.73 L1077.51 1218.73 L1076.92 1218.73 L1076.33 1218.73 L1075.75 1218.73 L1075.16 1218.73 L1074.57 1218.73 L1073.99 1218.73 L1073.4 1218.73 L1072.81 1218.73 L1072.23 1218.73 L1071.64 1218.73 L1071.06 1218.73 L1070.47 1218.73 L1069.88 1218.73 L1069.3 1218.73 L1068.71 1218.73 L1068.12 1218.73 L1067.54 1218.73 L1066.95 1218.73 L1066.36 1218.73 L1065.78 1218.73 L1065.19 1218.73 L1064.6 1218.73 L1064.02 1218.73 L1063.43 1218.73 L1062.85 1218.73 L1062.26 1218.73 L1061.67 1218.73 L1061.09 1218.73 L1060.5 1218.73 L1059.91 1218.73 L1059.33 1218.73 L1058.74 1218.73 L1058.15 1218.73 L1057.57 1218.73 L1056.98 1218.73 L1056.39 1218.73 L1055.81 1218.73 L1055.22 1218.73 L1054.64 1218.73 L1054.05 1218.73 L1053.46 1218.73 L1052.88 1218.73 L1052.29 1218.73 L1051.7 1218.73 L1051.12 1218.73 L1050.53 1218.73 L1049.94 1218.73 L1049.36 1218.73 L1048.77 1218.73 L1048.19 1218.73 L1047.6 1218.73 L1047.01 1218.73 L1046.43 1218.73 L1045.84 1218.73 L1045.25 1218.73 L1044.67 1218.73 L1044.08 1218.73 L1043.49 1218.73 L1042.91 1218.73 L1042.32 1218.73 L1041.73 1218.73 L1041.15 1218.73 L1040.56 1218.73 L1039.98 1218.73 L1039.39 1218.73 L1038.8 1218.73 L1038.22 1218.73 L1037.63 1218.73 L1037.04 1218.73 L1036.46 1218.73 L1035.87 1218.73 L1035.28 1218.73 L1034.7 1218.73 L1034.11 1218.73 L1033.52 1218.73 L1032.94 1218.73 L1032.35 1218.73 L1031.77 1218.73 L1031.18 1218.73 L1030.59 1218.73 L1030.01 1218.73 L1029.42 1218.73 L1028.83 1218.73 L1028.25 1218.73 L1027.66 1218.73 L1027.07 1218.73 L1026.49 1218.73 L1025.9 1218.73 L1025.32 1218.73 L1024.73 1218.73 L1024.14 1218.73 L1023.56 1218.73 L1022.97 1218.73 L1022.38 1218.73 L1021.8 1218.73 L1021.21 1218.73 L1020.62 1218.73 L1020.04 1218.73 L1019.45 1218.73 L1018.86 1218.73 L1018.28 1218.73 L1017.69 1218.73 L1017.11 1218.73 L1016.52 1218.73 L1015.93 1218.73 L1015.35 1218.73 L1014.76 1218.73 L1014.17 1218.73 L1013.59 1218.73 L1013 1218.73 L1012.41 1218.73 L1011.83 1218.73 L1011.24 1218.73 L1010.65 1218.73 L1010.07 1218.73 L1009.48 1218.73 L1008.9 1218.73 L1008.31 1218.73 L1007.72 1218.73 L1007.14 1218.73 L1006.55 1218.73 L1005.96 1218.73 L1005.38 1218.73 L1004.79 1218.73 L1004.2 1218.73 L1003.62 1218.73 L1003.03 1218.73 L1002.44 1218.73 L1001.86 1218.73 L1001.27 1218.73 L1000.69 1218.73 L1000.1 1218.73 L999.513 1218.73 L998.926 1218.73 L998.34 1218.73 L997.754 1218.73 L997.167 1218.73 L996.581 1218.73 L995.994 1218.73 L995.408 1218.73 L994.822 1218.73 L994.235 1218.73 L993.649 1218.73 L993.062 1218.73 L992.476 1218.73 L991.889 1218.73 L991.303 1218.73 L990.717 1218.73 L990.13 1218.73 L989.544 1218.73 L988.957 1218.73 L988.371 1218.73 L987.785 1218.73 L987.198 1218.73 L986.612 1218.73 L986.025 1218.73  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.81 986.612,1218.81 987.198,1218.81 987.785,1218.81 988.371,1218.81 988.957,1218.81 989.544,1218.81 990.13,1218.81 990.717,1218.81 991.303,1218.81 991.889,1218.81 992.476,1218.81 993.062,1218.81 993.649,1218.81 994.235,1218.81 994.822,1218.81 995.408,1218.81 995.994,1218.81 996.581,1218.81 997.167,1218.81 997.754,1218.81 998.34,1218.81 998.926,1218.81 999.513,1218.81 1000.1,1218.81 1000.69,1218.81 1001.27,1218.81 1001.86,1218.81 1002.44,1218.81 1003.03,1218.81 1003.62,1218.81 1004.2,1218.81 1004.79,1218.81 1005.38,1218.81 1005.96,1218.81 1006.55,1218.81 1007.14,1218.81 1007.72,1218.81 1008.31,1218.81 1008.9,1218.81 1009.48,1218.81 1010.07,1218.81 1010.65,1218.81 1011.24,1218.81 1011.83,1218.81 1012.41,1218.81 1013,1218.81 1013.59,1218.81 1014.17,1218.81 1014.76,1218.81 1015.35,1218.81 1015.93,1218.81 1016.52,1218.81 1017.11,1218.81 1017.69,1218.81 1018.28,1218.81 1018.86,1218.81 1019.45,1218.81 1020.04,1218.81 1020.62,1218.81 1021.21,1218.81 1021.8,1218.81 1022.38,1218.81 1022.97,1218.81 1023.56,1218.81 1024.14,1218.81 1024.73,1218.81 1025.32,1218.81 1025.9,1218.81 1026.49,1218.81 1027.07,1218.81 1027.66,1218.81 1028.25,1218.81 1028.83,1218.81 1029.42,1218.81 1030.01,1218.81 1030.59,1218.81 1031.18,1218.81 1031.77,1218.81 1032.35,1218.81 1032.94,1218.81 1033.52,1218.81 1034.11,1218.81 1034.7,1218.81 1035.28,1218.81 1035.87,1218.81 1036.46,1218.81 1037.04,1218.81 1037.63,1218.81 1038.22,1218.81 1038.8,1218.81 1039.39,1218.81 1039.98,1218.81 1040.56,1218.81 1041.15,1218.81 1041.73,1218.81 1042.32,1218.81 1042.91,1218.81 1043.49,1218.81 1044.08,1218.81 1044.67,1218.81 1045.25,1218.81 1045.84,1218.81 1046.43,1218.81 1047.01,1218.81 1047.6,1218.81 1048.19,1218.81 1048.77,1218.81 1049.36,1218.81 1049.94,1218.81 1050.53,1218.81 1051.12,1218.81 1051.7,1218.81 1052.29,1218.81 1052.88,1218.81 1053.46,1218.81 1054.05,1218.81 1054.64,1218.81 1055.22,1218.81 1055.81,1218.81 1056.39,1218.81 1056.98,1218.81 1057.57,1218.81 1058.15,1218.81 1058.74,1218.81 1059.33,1218.81 1059.91,1218.81 1060.5,1218.81 1061.09,1218.81 1061.67,1218.81 1062.26,1218.81 1062.85,1218.81 1063.43,1218.81 1064.02,1218.81 1064.6,1218.81 1065.19,1218.81 1065.78,1218.81 1066.36,1218.81 1066.95,1218.81 1067.54,1218.81 1068.12,1218.81 1068.71,1218.81 1069.3,1218.81 1069.88,1218.81 1070.47,1218.81 1071.06,1218.81 1071.64,1218.81 1072.23,1218.81 1072.81,1218.81 1073.4,1218.81 1073.99,1218.81 1074.57,1218.81 1075.16,1218.81 1075.75,1218.81 1076.33,1218.81 1076.92,1218.81 1077.51,1218.81 1078.09,1218.81 1078.68,1218.81 1079.26,1218.81 1079.85,1218.81 1080.44,1218.81 1081.02,1218.81 1081.61,1218.81 1082.2,1218.81 1082.78,1218.81 1083.37,1218.81 1083.96,1218.81 1084.54,1218.81 1085.13,1218.81 1085.72,1218.81 1086.3,1218.81 1086.89,1218.81 1087.47,1218.81 1088.06,1218.81 1088.65,1218.81 1089.23,1218.81 1089.82,1218.81 1090.41,1218.81 1090.99,1218.81 1091.58,1218.81 1092.17,1218.81 1092.75,1218.81 1093.34,1218.81 1093.93,1218.81 1094.51,1218.81 1095.1,1218.81 1095.68,1218.81 1096.27,1218.81 1096.86,1218.81 1097.44,1218.81 1098.03,1218.81 1098.62,1218.81 1099.2,1218.81 1099.79,1218.81 1100.38,1218.81 1100.96,1218.81 1101.55,1218.81 1102.14,1218.81 1102.72,1218.81 1103.31,1218.81 1103.89,1218.81 1104.48,1218.81 1105.07,1218.81 1105.65,1218.81 1106.24,1218.81 1106.83,1218.81 1107.41,1218.81 1108,1218.81 1108.59,1218.81 1109.17,1218.81 1109.76,1218.81 1110.34,1218.81 1110.93,1218.81 1111.52,1218.81 1112.1,1218.81 1112.69,1218.81 1113.28,1218.81 1113.86,1218.81 1114.45,1218.81 1115.04,1218.81 1115.62,1218.81 1116.21,1218.81 1116.8,1218.81 1117.38,1218.81 1117.97,1218.81 1118.55,1218.81 1119.14,1218.81 1119.73,1218.81 1120.31,1218.81 1120.9,1218.81 1121.49,1218.81 1122.07,1218.81 1122.66,1218.81 1123.25,1218.81 1123.83,1218.81 1124.42,1218.81 1125.01,1218.81 1125.59,1218.81 1126.18,1218.81 1126.76,1218.81 1127.35,1218.81 1127.94,1218.81 1128.52,1218.81 1129.11,1218.81 1129.7,1218.81 1130.28,1218.81 1130.87,1218.81 1131.46,1218.81 1132.04,1218.81 1132.63,1218.81 1133.21,1218.81 1133.8,1218.81 1134.39,1218.81 1134.97,1218.81 1135.56,1218.81 1136.15,1218.81 1136.73,1218.81 1137.32,1218.81 1137.91,1218.81 1138.49,1218.81 1139.08,1218.81 1139.67,1218.81 1140.25,1218.81 1140.84,1218.81 1141.42,1218.81 1142.01,1218.81 1142.6,1218.81 1143.18,1218.81 1143.77,1218.81 1144.36,1218.81 1144.94,1218.81 1145.53,1218.81 1146.12,1218.81 1146.7,1218.81 1147.29,1218.81 1147.88,1218.81 1148.46,1218.81 1149.05,1218.81 1149.63,1218.81 1150.22,1218.81 1150.81,1218.81 1151.39,1218.81 1151.98,1218.81 1152.57,1218.81 1153.15,1218.81 1153.74,1218.81 1154.33,1218.81 1154.91,1218.81 1155.5,1218.81 1156.09,1218.81 1156.67,1218.81 1157.26,1218.81 1157.84,1218.81 1158.43,1218.81 1159.02,1218.81 1159.6,1218.81 1160.19,1218.81 1160.78,1218.81 1161.36,1218.81 1161.95,1218.81 1162.54,1218.81 1163.12,1218.81 1163.71,1218.81 1164.29,1218.81 1164.88,1218.81 1165.47,1218.81 1166.05,1218.81 1166.64,1218.81 1167.23,1218.81 1167.81,1218.81 1168.4,1218.81 1168.99,1218.81 1169.57,1218.81 1170.16,1218.81 1170.75,1218.81 1171.33,1218.81 1171.92,1218.81 1172.5,1218.81 1173.09,1218.81 1173.68,1218.81 1174.26,1218.81 1174.85,1218.81 1175.44,1218.81 1176.02,1218.81 1176.61,1218.81 1177.2,1218.81 1177.78,1218.81 1178.37,1218.81 1178.96,1218.81 1179.54,1218.81 1180.13,1218.81 1180.71,1218.81 1181.3,1218.81 1181.89,1218.81 1182.47,1218.81 1183.06,1218.81 1183.65,1218.81 1184.23,1218.81 1184.82,1218.81 1185.41,1218.81 1185.99,1218.81 1186.58,1218.81 1187.16,1218.81 1187.75,1218.81 1188.34,1218.81 1188.92,1218.81 1189.51,1218.81 1190.1,1218.81 1190.68,1218.81 1191.27,1218.81 1191.86,1218.81 1192.44,1218.81 1193.03,1218.81 1193.62,1218.81 1194.2,1218.81 1194.79,1218.81 1195.37,1218.81 1195.96,1218.81 1196.55,1218.81 1197.13,1218.81 1197.72,1218.81 1198.31,1218.81 1198.89,1218.81 1199.48,1218.81 1200.07,1218.81 1200.65,1218.81 1201.24,1218.81 1201.83,1218.81 1202.41,1218.81 1203,1218.81 1203.58,1218.81 1204.17,1218.81 1204.76,1218.81 1205.34,1218.81 1205.93,1218.81 1206.52,1218.81 1207.1,1218.81 1207.69,1218.81 1208.28,1218.81 1208.86,1218.81 1209.45,1218.81 1210.03,1218.81 1210.62,1218.81 1211.21,1218.81 1211.79,1218.81 1212.38,1218.81 1212.97,1218.81 1213.55,1218.81 1214.14,1218.81 1214.73,1218.81 1215.31,1218.81 1215.9,1218.81 1216.49,1218.81 1217.07,1218.81 1217.66,1218.81 1218.24,1218.81 1218.83,1218.81 1219.42,1218.81 1220,1218.81 1220.59,1218.81 1221.18,1218.81 1221.76,1218.81 1222.35,1218.81 1222.94,1218.81 1223.52,1218.81 1224.11,1218.81 1224.7,1218.81 1225.28,1218.81 1225.87,1218.81 1226.45,1218.81 1227.04,1218.81 1227.63,1218.81 1228.21,1218.81 1228.8,1218.81 1229.39,1218.81 1229.97,1218.81 1230.56,1218.81 1231.15,1218.81 1231.73,1218.81 1232.32,1218.81 1232.91,1218.81 1233.49,1218.81 1234.08,1218.81 1234.66,1218.81 1235.25,1218.81 1235.84,1218.81 1236.42,1218.81 1237.01,1218.81 1237.6,1218.81 1238.18,1218.81 1238.77,1218.81 1239.36,1218.81 1239.94,1218.81 1240.53,1218.81 1241.11,1218.81 1241.7,1218.81 1242.29,1218.81 1242.87,1218.81 1243.46,1218.81 1244.05,1218.81 1244.63,1218.81 1245.22,1218.81 1245.81,1218.81 1246.39,1218.81 1246.98,1218.81 1247.57,1218.81 1248.15,1218.81 1248.74,1218.81 1249.32,1218.81 1249.91,1218.81 1250.5,1218.81 1251.08,1218.81 1251.67,1218.81 1252.26,1218.81 1252.84,1218.81 1253.43,1218.81 1254.02,1218.81 1254.6,1218.81 1255.19,1218.81 1255.78,1218.81 1256.36,1218.81 1256.95,1218.81 1257.53,1218.81 1258.12,1218.81 1258.71,1218.81 1259.29,1218.81 1259.88,1218.81 1260.47,1218.81 1261.05,1218.81 1261.64,1218.81 1262.23,1218.81 1262.81,1218.81 1263.4,1218.81 1263.98,1218.81 1264.57,1218.81 1265.16,1218.81 1265.74,1218.81 1266.33,1218.81 1266.92,1218.81 1267.5,1218.81 1268.09,1218.81 1268.68,1218.81 1269.26,1218.81 1269.85,1218.81 1270.44,1218.81 1271.02,1218.81 1271.61,1218.81 1272.19,1218.81 1272.78,1218.81 1273.37,1218.81 1273.95,1218.81 1274.54,1218.81 1275.13,1218.81 1275.71,1218.81 1276.3,1218.81 1276.89,1218.81 1277.47,1218.81 1278.06,1218.81 1278.65,1218.81 1279.23,1218.81 1279.82,1218.81 1280.4,1218.81 1280.99,1218.81 1281.58,1218.81 1282.16,1218.81 1282.75,1218.81 1283.34,1218.81 1283.92,1218.81 1284.51,1218.81 1285.1,1218.81 1285.68,1218.81 1286.27,1218.81 1286.86,1218.81 1287.44,1218.81 1288.03,1218.81 1288.61,1218.81 1289.2,1218.81 1289.79,1218.81 1290.37,1218.81 1290.96,1218.81 1291.55,1218.81 1292.13,1218.81 1292.72,1218.81 1293.31,1218.81 1293.89,1218.81 1294.48,1218.81 1295.06,1218.81 1295.65,1218.81 1296.24,1218.81 1296.82,1218.81 1297.41,1218.81 1298,1218.81 1298.58,1218.81 1299.17,1218.81 1299.76,1218.81 1300.34,1218.81 1300.93,1218.81 1301.52,1218.81 1302.1,1218.81 1302.69,1218.81 1303.27,1218.81 1303.86,1218.81 1304.45,1218.81 1305.03,1218.81 1305.62,1218.81 1306.21,1218.81 1306.79,1218.81 1307.38,1218.81 1307.97,1218.81 1308.55,1218.81 1309.14,1218.81 1309.73,1218.81 1310.31,1218.81 1310.9,1218.81 1311.48,1218.81 1312.07,1218.81 1312.66,1218.81 1313.24,1218.81 1313.83,1218.81 1314.42,1218.81 1315,1218.81 1315.59,1218.81 1316.18,1218.81 1316.76,1218.81 1317.35,1218.81 1317.93,1218.81 1318.52,1218.81 1319.11,1218.81 1319.69,1218.81 1320.28,1218.81 1320.87,1218.81 1321.45,1218.81 1322.04,1218.81 1322.63,1218.81 1323.21,1218.81 1323.8,1218.81 1324.39,1218.81 1324.97,1218.81 1325.56,1218.81 1326.14,1218.81 1326.73,1218.81 1327.32,1218.81 1327.9,1218.81 1328.49,1218.81 1329.08,1218.81 1329.66,1218.81 1330.25,1218.81 1330.84,1218.81 1331.42,1218.81 1332.01,1218.81 1332.6,1218.81 1333.18,1218.81 1333.77,1218.81 1334.35,1218.81 1334.94,1218.81 1335.53,1218.81 1336.11,1218.81 1336.7,1218.81 1337.29,1218.81 1337.87,1218.81 1338.46,1218.81 1339.05,1218.81 1339.63,1218.81 1340.22,1218.81 1340.8,1218.81 1341.39,1218.81 1341.98,1218.81 1342.56,1218.81 1343.15,1218.81 1343.74,1218.81 1344.32,1218.81 1344.91,1218.81 1345.5,1218.81 1346.08,1218.81 1346.67,1218.81 1347.26,1218.81 1347.84,1218.81 1348.43,1218.81 1349.01,1218.81 1349.6,1218.81 1350.19,1218.81 1350.77,1218.81 1351.36,1218.81 1351.95,1218.81 1352.53,1218.81 1353.12,1218.81 1353.71,1218.81 1354.29,1218.81 1354.88,1218.81 1355.47,1218.81 1356.05,1218.81 1356.64,1218.81 1357.22,1218.81 1357.81,1218.81 1358.4,1218.81 1358.98,1218.81 1359.57,1218.81 1360.16,1218.81 1360.74,1218.81 1361.33,1218.81 1361.92,1218.81 1362.5,1218.81 1363.09,1218.81 1363.68,1218.81 1364.26,1218.81 1364.85,1218.81 1365.43,1218.81 1366.02,1218.81 1366.61,1218.81 1367.19,1218.81 1367.78,1218.81 1368.37,1218.81 1368.95,1218.81 1369.54,1218.81 1370.13,1218.81 1370.71,1218.81 1371.3,1218.81 1371.88,1218.81 1372.47,1218.81 1373.06,1218.81 1373.64,1218.81 1374.23,1218.81 1374.82,1218.81 1375.4,1218.81 1375.99,1218.81 1376.58,1218.81 1377.16,1218.81 1377.75,1218.81 1378.34,1218.81 1378.92,1218.81 1379.51,1218.81 1380.09,1218.81 1380.68,1218.81 1381.27,1218.81 1381.85,1218.81 1382.44,1218.81 1383.03,1218.81 1383.61,1218.81 1384.2,1218.81 1384.79,1218.81 1385.37,1218.81 1385.96,1218.81 1386.55,1218.81 1387.13,1218.81 1387.72,1218.81 1388.3,1218.81 1388.89,1218.81 1389.48,1218.81 1390.06,1218.81 1390.65,1218.81 1391.24,1218.81 1391.82,1218.81 1392.41,1218.81 1393,1218.81 1393.58,1218.81 1394.17,1218.81 1394.75,1218.81 1395.34,1218.81 1395.93,1218.81 1396.51,1218.81 1397.1,1218.81 1397.69,1218.81 1398.27,1218.81 1398.86,1218.81 1399.45,1218.81 1400.03,1218.81 1400.62,1218.81 1401.21,1218.81 1401.79,1218.81 1402.38,1218.81 1402.96,1218.81 1403.55,1218.81 1404.14,1218.81 1404.72,1218.81 1405.31,1218.81 1405.9,1218.81 1406.48,1218.81 1407.07,1218.81 1407.66,1218.81 1408.24,1218.81 1408.83,1218.81 1409.42,1218.81 1410,1218.81 1410.59,1218.81 1411.17,1218.81 1411.76,1218.81 1412.35,1218.81 1412.93,1218.81 1413.52,1218.81 1414.11,1218.81 1414.69,1218.81 1415.28,1218.81 1415.87,1218.81 1416.45,1218.81 1417.04,1218.81 1417.63,1218.81 1418.21,1218.81 1418.8,1218.81 1419.38,1218.81 1419.97,1218.81 1420.56,1218.81 1421.14,1218.81 1421.73,1218.81 1422.32,1218.81 1422.9,1218.81 1423.49,1218.81 1424.08,1218.81 1424.66,1218.81 1425.25,1218.81 1425.83,1218.81 1426.42,1218.81 1427.01,1218.81 1427.59,1218.81 1428.18,1218.81 1428.77,1218.81 1429.35,1218.81 1429.94,1218.81 1430.53,1218.81 1431.11,1218.81 1431.7,1218.81 1432.29,1218.81 1432.87,1218.81 1433.46,1218.81 1434.04,1218.81 1434.63,1218.81 1435.22,1218.81 1435.8,1218.81 1436.39,1218.81 1436.98,1218.81 1437.56,1218.81 1438.15,1218.81 1438.74,1218.81 1439.32,1218.81 1439.91,1218.81 1440.5,1218.81 1441.08,1218.81 1441.67,1218.81 1442.25,1218.81 1442.84,1218.81 1443.43,1218.81 1444.01,1218.81 1444.6,1218.81 1445.19,1218.81 1445.77,1218.81 1446.36,1218.81 1446.95,1218.81 1447.53,1218.81 1448.12,1218.81 1448.7,1218.81 1449.29,1218.81 1449.88,1218.81 1450.46,1218.81 1451.05,1218.81 1451.64,1218.81 1452.22,1218.81 1452.81,1218.81 1453.4,1218.81 1453.98,1218.81 1454.57,1218.81 1455.16,1218.81 1455.74,1218.81 1456.33,1218.81 1456.91,1218.81 1457.5,1218.81 1458.09,1218.81 1458.67,1218.81 1459.26,1218.81 1459.85,1218.81 1460.43,1218.81 1461.02,1218.81 1461.61,1218.81 1462.19,1218.81 1462.78,1218.81 1463.37,1218.81 1463.95,1218.81 1464.54,1218.81 1465.12,1218.81 1465.71,1218.81 1466.3,1218.81 1466.88,1218.81 1467.47,1218.81 1468.06,1218.81 1468.64,1218.81 1469.23,1218.81 1469.82,1218.81 1470.4,1218.81 1470.99,1218.81 1471.57,1218.81 1472.16,1218.81 1472.75,1218.81 1473.33,1218.81 1473.92,1218.81 1474.51,1218.81 1475.09,1218.81 1475.68,1218.81 1476.27,1218.81 1476.85,1218.81 1477.44,1218.81 1478.03,1218.81 1478.61,1218.81 1479.2,1218.81 1479.78,1218.81 1480.37,1218.81 1480.96,1218.81 1481.54,1218.81 1482.13,1218.81 1482.72,1218.81 1483.3,1218.81 1483.89,1218.81 1484.48,1218.81 1485.06,1218.81 1485.65,1218.81 1486.24,1218.81 1486.82,1218.81 1487.41,1218.81 1487.99,1218.81 1488.58,1218.81 1489.17,1218.81 1489.75,1218.81 1490.34,1218.81 1490.93,1218.81 1491.51,1218.81 1492.1,1218.81 1492.69,1218.81 1493.27,1218.81 1493.86,1218.81 1494.45,1218.81 1495.03,1218.81 1495.62,1218.81 1496.2,1218.81 1496.79,1218.81 1497.38,1218.81 1497.96,1218.81 1498.55,1218.81 1499.14,1218.81 1499.72,1218.81 1500.31,1218.81 1500.9,1218.81 1501.48,1218.81 1502.07,1218.81 1502.65,1218.81 1503.24,1218.81 1503.83,1218.81 1504.41,1218.81 1505,1218.81 1505.59,1218.81 1506.17,1218.81 1506.76,1218.81 1507.35,1218.81 1507.93,1218.81 1508.52,1218.81 1509.11,1218.81 1509.69,1218.81 1510.28,1218.81 1510.86,1218.81 1511.45,1218.81 1512.04,1218.81 1512.62,1218.81 1513.21,1218.81 1513.8,1218.81 1514.38,1218.81 1514.97,1218.81 1515.56,1218.81 1516.14,1218.81 1516.73,1218.81 1517.32,1218.81 1517.9,1218.81 1518.49,1218.81 1519.07,1218.81 1519.66,1218.81 1520.25,1218.81 1520.83,1218.81 1521.42,1218.81 1522.01,1218.81 1522.59,1218.81 1523.18,1218.81 1523.77,1218.81 1524.35,1218.81 1524.94,1218.81 1525.52,1218.81 1526.11,1218.81 1526.7,1218.81 1527.28,1218.81 1527.87,1218.81 1528.46,1218.81 1529.04,1218.81 1529.63,1218.81 1530.22,1218.81 1530.8,1218.81 1531.39,1218.81 1531.98,1218.81 1532.56,1218.81 1533.15,1218.81 1533.73,1218.81 1534.32,1218.81 1534.91,1218.81 1535.49,1218.81 1536.08,1218.81 1536.67,1218.81 1537.25,1218.81 1537.84,1218.81 1538.43,1218.81 1539.01,1218.81 1539.6,1218.81 1540.19,1218.81 1540.77,1218.81 1541.36,1218.81 1541.94,1218.81 1542.53,1218.81 1543.12,1218.81 1543.7,1218.81 1544.29,1218.81 1544.88,1218.81 1545.46,1218.81 1546.05,1218.81 1546.64,1218.81 1547.22,1218.81 1547.81,1218.81 1548.4,1218.81 1548.98,1218.81 1549.57,1218.81 1550.15,1218.81 1550.74,1218.81 1551.33,1218.81 1551.91,1218.81 1552.5,1218.81 1553.09,1218.81 1553.67,1218.81 1554.26,1218.81 1554.85,1218.81 1555.43,1218.81 1556.02,1218.81 1556.6,1218.81 1557.19,1218.81 1557.78,1218.81 1558.36,1218.81 1558.95,1218.81 1559.54,1218.81 1560.12,1218.81 1560.71,1218.81 1561.3,1218.81 1561.88,1218.81 1562.47,1218.81 1563.06,1218.81 1563.64,1218.81 1564.23,1218.81 1564.81,1218.81 1565.4,1218.81 1565.99,1218.81 1566.57,1218.81 1567.16,1218.81 1567.75,1218.81 1568.33,1218.81 1568.92,1218.81 1569.51,1218.81 1570.09,1218.81 1570.68,1218.81 1571.27,1218.81 1571.85,1218.81 1572.44,1218.81 1573.02,1218.81 1573.61,1218.81 1574.2,1218.81 1574.78,1218.81 1575.37,1218.81 1575.96,1218.81 1576.54,1218.81 1577.13,1218.81 1577.72,1218.81 1578.3,1218.81 1578.89,1218.81 1579.47,1218.81 1580.06,1218.81 1580.65,1218.81 1581.23,1218.81 1581.82,1218.81 1582.41,1218.81 1582.99,1218.81 1583.58,1218.81 1584.17,1218.81 1584.75,1218.81 1585.34,1218.81 1585.93,1218.81 1586.51,1218.81 1587.1,1218.81 1587.68,1218.81 1588.27,1218.81 1588.86,1218.81 1589.44,1218.81 1590.03,1218.81 1590.62,1218.81 1591.2,1218.81 1591.79,1218.81 1592.38,1218.81 1592.96,1218.81 1593.55,1218.81 1594.14,1218.81 1594.72,1218.81 1595.31,1218.81 1595.89,1218.81 1596.48,1218.81 1597.07,1218.81 1597.65,1218.81 1598.24,1218.81 1598.83,1218.81 1599.41,1218.81 1600,1218.81 1600.59,1218.81 1601.17,1218.81 1601.76,1218.81 1602.34,1218.81 1602.93,1218.81 1603.52,1218.81 1604.1,1218.81 1604.69,1218.81 1605.28,1218.81 1605.86,1218.81 1606.45,1218.81 1607.04,1218.81 1607.62,1218.81 1608.21,1218.81 1608.8,1218.81 1609.38,1218.81 1609.97,1218.81 1610.55,1218.81 1611.14,1218.81 1611.73,1218.81 1612.31,1218.81 1612.9,1218.81 1613.49,1218.81 1614.07,1218.81 1614.66,1218.81 1615.25,1218.81 1615.83,1218.81 1616.42,1218.81 1617.01,1218.81 1617.59,1218.81 1618.18,1218.81 1618.76,1218.81 1619.35,1218.81 1619.94,1218.81 1620.52,1218.81 1621.11,1218.81 1621.7,1218.81 1622.28,1218.81 1622.87,1218.81 1623.46,1218.81 1624.04,1218.81 1624.63,1218.81 1625.22,1218.81 1625.8,1218.81 1626.39,1218.81 1626.97,1218.81 1627.56,1218.81 1628.15,1218.81 1628.73,1218.81 1629.32,1218.81 1629.91,1218.81 1630.49,1218.81 1631.08,1218.81 1631.67,1218.81 1632.25,1218.81 1632.84,1218.81 1633.42,1218.81 1634.01,1218.81 1634.6,1218.81 1635.18,1218.81 1635.77,1218.81 1636.36,1218.81 1636.94,1218.81 1637.53,1218.81 1638.12,1218.81 1638.7,1218.81 1639.29,1218.81 1639.88,1218.81 1640.46,1218.81 1641.05,1218.81 1641.63,1218.81 1642.22,1218.81 1642.81,1218.81 1643.39,1218.81 1643.98,1218.81 1644.57,1218.81 1645.15,1218.81 1645.74,1218.81 1646.33,1218.81 1646.91,1218.81 1647.5,1218.81 1648.09,1218.81 1648.67,1218.81 1649.26,1218.81 1649.84,1218.81 1650.43,1218.81 1651.02,1218.81 1651.6,1218.81 1652.19,1218.81 1652.78,1218.81 1653.36,1218.81 1653.95,1218.81 1654.54,1218.81 1655.12,1218.81 1655.71,1218.81 1656.29,1218.81 1656.88,1218.81 1657.47,1218.81 1658.05,1218.81 1658.64,1218.81 1659.23,1218.81 1659.81,1218.81 1660.4,1218.81 1660.99,1218.81 1661.57,1218.81 1662.16,1218.81 1662.75,1218.81 1663.33,1218.81 1663.92,1218.81 1664.5,1218.81 1665.09,1218.81 1665.68,1218.81 1666.26,1218.81 1666.85,1218.81 1667.44,1218.81 1668.02,1218.81 1668.61,1218.81 1669.2,1218.81 1669.78,1218.81 1670.37,1218.81 1670.96,1218.81 1671.54,1218.81 1672.13,1218.81 1672.71,1218.81 1673.3,1218.81 1673.89,1218.81 1674.47,1218.81 1675.06,1218.81 1675.65,1218.81 1676.23,1218.81 1676.82,1218.81 1677.41,1218.81 1677.99,1218.81 1678.58,1218.81 1679.17,1218.81 1679.75,1218.81 1680.34,1218.81 1680.92,1218.81 1681.51,1218.81 1682.1,1218.81 1682.68,1218.81 1683.27,1218.81 1683.86,1218.81 1684.44,1218.81 1685.03,1218.81 1685.62,1218.81 1686.2,1218.81 1686.79,1218.81 1687.37,1218.81 1687.96,1218.81 1688.55,1218.81 1689.13,1218.81 1689.72,1218.81 1690.31,1218.81 1690.89,1218.81 1691.48,1218.81 1692.07,1218.81 1692.65,1218.81 1693.24,1218.81 1693.83,1218.81 1694.41,1218.81 1695,1218.81 1695.58,1218.81 1696.17,1218.81 1696.76,1218.81 1697.34,1218.81 1697.93,1218.81 1698.52,1218.81 1699.1,1218.81 1699.69,1218.81 1700.28,1218.81 1700.86,1218.81 1701.45,1218.81 1702.04,1218.81 1702.62,1218.81 1703.21,1218.81 1703.79,1218.81 1704.38,1218.81 1704.97,1218.81 1705.55,1218.81 1706.14,1218.81 1706.73,1218.81 1707.31,1218.81 1707.9,1218.81 1708.49,1218.81 1709.07,1218.81 1709.66,1218.81 1710.24,1218.81 1710.83,1218.81 1711.42,1218.81 1712,1218.81 1712.59,1218.81 1713.18,1218.81 1713.76,1218.81 1714.35,1218.81 1714.94,1218.81 1715.52,1218.81 1716.11,1218.81 1716.7,1218.81 1717.28,1218.81 1717.87,1218.81 1718.45,1218.81 1719.04,1218.81 1719.63,1218.81 1720.21,1218.81 1720.8,1218.81 1721.39,1218.81 1721.97,1218.81 1722.56,1218.81 1723.15,1218.81 1723.73,1218.81 1724.32,1218.81 1724.91,1218.81 1725.49,1218.81 1726.08,1218.81 1726.66,1218.81 1727.25,1218.81 1727.84,1218.81 1728.42,1218.81 1729.01,1218.81 1729.6,1218.81 1730.18,1218.81 1730.77,1218.81 1731.36,1218.81 1731.94,1218.81 1732.53,1218.81 1733.11,1218.81 1733.7,1218.81 1734.29,1218.81 1734.87,1218.81 1735.46,1218.81 1736.05,1218.81 1736.63,1218.81 1737.22,1218.81 1737.81,1218.81 1738.39,1218.81 1738.98,1218.81 1739.57,1218.81 1740.15,1218.81 1740.74,1218.81 1741.32,1218.81 1741.91,1218.81 1742.5,1218.81 1743.08,1218.81 1743.67,1218.81 1744.26,1218.81 1744.84,1218.81 1745.43,1218.81 1746.02,1218.81 1746.6,1218.81 1747.19,1218.81 1747.78,1218.81 1748.36,1218.81 1748.95,1218.81 1749.53,1218.81 1750.12,1218.81 1750.71,1218.81 1751.29,1218.81 1751.88,1218.81 1752.47,1218.81 1753.05,1218.81 1753.64,1218.81 1754.23,1218.81 1754.81,1218.81 1755.4,1218.81 1755.99,1218.81 1756.57,1218.81 1757.16,1218.81 1757.74,1218.81 1758.33,1218.81 1758.92,1218.81 1759.5,1218.81 1760.09,1218.81 1760.68,1218.81 1761.26,1218.81 1761.85,1218.81 1762.44,1218.81 1763.02,1218.81 1763.61,1218.81 1764.19,1218.81 1764.78,1218.81 1765.37,1218.81 1765.95,1218.81 1766.54,1218.81 1767.13,1218.81 1767.71,1218.81 1768.3,1218.81 1768.89,1218.81 1769.47,1218.81 1770.06,1218.81 1770.65,1218.81 1771.23,1218.81 1771.82,1218.81 1772.4,1218.81 1772.99,1218.81 1773.58,1218.81 1774.16,1218.81 1774.75,1218.81 1775.34,1218.81 1775.92,1218.81 1776.51,1218.81 1777.1,1218.81 1777.68,1218.81 1778.27,1218.81 1778.86,1218.81 1779.44,1218.81 1780.03,1218.81 1780.61,1218.81 1781.2,1218.81 1781.79,1218.81 1782.37,1218.81 1782.96,1218.81 1783.55,1218.81 1784.13,1218.81 1784.72,1218.81 1785.31,1218.81 1785.89,1218.81 1786.48,1218.81 1787.06,1218.81 1787.65,1218.81 1788.24,1218.81 1788.82,1218.81 1789.41,1218.81 1790,1218.81 1790.58,1218.81 1791.17,1218.81 1791.76,1218.81 1792.34,1218.81 1792.93,1218.81 1793.52,1218.81 1794.1,1218.81 1794.69,1218.81 1795.27,1218.81 1795.86,1218.81 1796.45,1218.81 1797.03,1218.81 1797.62,1218.81 1798.21,1218.81 1798.79,1218.81 1799.38,1218.81 1799.97,1218.81 1800.55,1218.81 1801.14,1218.81 1801.73,1218.81 1802.31,1218.81 1802.9,1218.81 1803.48,1218.81 1804.07,1218.81 1804.66,1218.81 1805.24,1218.81 1805.83,1218.81 1806.42,1218.81 1807,1218.81 1807.59,1218.81 1808.18,1218.81 1808.76,1218.81 1809.35,1218.81 1809.94,1218.81 1810.52,1218.81 1811.11,1218.81 1811.69,1218.81 1812.28,1218.81 1812.87,1218.81 1813.45,1218.81 1814.04,1218.81 1814.63,1218.81 1815.21,1218.81 1815.8,1218.81 1816.39,1218.81 1816.97,1218.81 1817.56,1218.81 1818.14,1218.81 1818.73,1218.81 1819.32,1218.81 1819.9,1218.81 1820.49,1218.81 1821.08,1218.81 1821.66,1218.81 1822.25,1218.81 1822.84,1218.81 1823.42,1218.81 1824.01,1218.81 1824.6,1218.81 1825.18,1218.81 1825.77,1218.81 1826.35,1218.81 1826.94,1218.81 1827.53,1218.81 1828.11,1218.81 1828.7,1218.81 1829.29,1218.81 1829.87,1218.81 1830.46,1218.81 1831.05,1218.81 1831.63,1218.81 1832.22,1218.81 1832.81,1218.81 1833.39,1218.81 1833.98,1218.81 1834.56,1218.81 1835.15,1218.81 1835.74,1218.81 1836.32,1218.81 1836.91,1218.81 1837.5,1218.81 1838.08,1218.81 1838.67,1218.81 1839.26,1218.81 1839.84,1218.81 1840.43,1218.81 1841.01,1218.81 1841.6,1218.81 1842.19,1218.81 1842.77,1218.81 1843.36,1218.81 1843.95,1218.81 1844.53,1218.81 1845.12,1218.81 1845.71,1218.81 1846.29,1218.81 1846.88,1218.81 1847.47,1218.81 1848.05,1218.81 1848.64,1218.81 1849.22,1218.81 1849.81,1218.81 1850.4,1218.81 1850.98,1218.81 1851.57,1218.81 1852.16,1218.81 1852.74,1218.81 1853.33,1218.81 1853.92,1218.81 1854.5,1218.81 1855.09,1218.81 1855.68,1218.81 1856.26,1218.81 1856.85,1218.81 1857.43,1218.81 1858.02,1218.81 1858.61,1218.81 1859.19,1218.81 1859.78,1218.81 1860.37,1218.81 1860.95,1218.81 1861.54,1218.81 1862.13,1218.81 1862.71,1218.81 1863.3,1218.81 1863.88,1218.81 1864.47,1218.81 1865.06,1218.81 1865.64,1218.81 1866.23,1218.81 1866.82,1218.81 1867.4,1218.81 1867.99,1218.81 1868.58,1218.81 1869.16,1218.81 1869.75,1218.81 1870.34,1218.81 1870.92,1218.81 1871.51,1218.81 1872.09,1218.81 1872.68,1218.81 1873.27,1218.81 1873.85,1218.81 1874.44,1218.81 1875.03,1218.81 1875.61,1218.81 1876.2,1218.81 1876.79,1218.81 1877.37,1218.81 1877.96,1218.81 1878.55,1218.81 1879.13,1218.81 1879.72,1218.81 1880.3,1218.81 1880.89,1218.81 1881.48,1218.81 1882.06,1218.81 1882.65,1218.81 1883.24,1218.81 1883.82,1218.81 1884.41,1218.81 1885,1218.81 1885.58,1218.81 1886.17,1218.81 1886.76,1218.81 1887.34,1218.81 1887.93,1218.81 1888.51,1218.81 1889.1,1218.81 1889.69,1218.81 1890.27,1218.81 1890.86,1218.81 1891.45,1218.81 1892.03,1218.81 1892.62,1218.81 1893.21,1218.81 1893.79,1218.81 1894.38,1218.81 1894.96,1218.81 1895.55,1218.81 1896.14,1218.81 1896.72,1218.81 1897.31,1218.81 1897.9,1218.81 1898.48,1218.81 1899.07,1218.81 1899.66,1218.81 1900.24,1218.81 1900.83,1218.81 1901.42,1218.81 1902,1218.81 1902.59,1218.81 1903.17,1218.81 1903.76,1218.81 1904.35,1218.81 1904.93,1218.81 1905.52,1218.81 1906.11,1218.81 1906.69,1218.81 1907.28,1218.81 1907.87,1218.81 1908.45,1218.81 1909.04,1218.81 1909.63,1218.81 1910.21,1218.81 1910.8,1218.81 1911.38,1218.81 1911.97,1218.81 1912.56,1218.81 1913.14,1218.81 1913.73,1218.81 1914.32,1218.81 1914.9,1218.81 1915.49,1218.81 1916.08,1218.81 1916.66,1218.81 1917.25,1218.81 1917.83,1218.81 1918.42,1218.81 1919.01,1218.81 1919.59,1218.81 1920.18,1218.81 1920.77,1218.81 1921.35,1218.81 1921.94,1218.81 1922.53,1218.81 1923.11,1218.81 1923.7,1218.81 1924.29,1218.81 1924.87,1218.81 1925.46,1218.81 1926.04,1218.81 1926.63,1218.81 1927.22,1218.81 1927.8,1218.81 1928.39,1218.81 1928.98,1218.81 1929.56,1218.81 1930.15,1218.81 1930.74,1218.81 1931.32,1218.81 1931.91,1218.81 1932.5,1218.81 1933.08,1218.81 1933.67,1218.81 1934.25,1218.81 1934.84,1218.81 1935.43,1218.81 1936.01,1218.81 1936.6,1218.81 1937.19,1218.81 1937.77,1218.81 1938.36,1218.81 1938.95,1218.81 1939.53,1218.81 1940.12,1218.81 1940.71,1218.81 1941.29,1218.81 1941.88,1218.81 1942.46,1218.81 1943.05,1218.81 1943.64,1218.81 1944.22,1218.81 1944.81,1218.81 1945.4,1218.81 1945.98,1218.81 1946.57,1218.81 1947.16,1218.81 1947.74,1218.81 1948.33,1218.81 1948.91,1218.81 1949.5,1218.81 1950.09,1218.81 1950.67,1218.81 1951.26,1218.81 1951.85,1218.81 1952.43,1218.81 1953.02,1218.81 1953.61,1218.81 1954.19,1218.81 1954.78,1218.81 1955.37,1218.81 1955.95,1218.81 1956.54,1218.81 1957.12,1218.81 1957.71,1218.81 1958.3,1218.81 1958.88,1218.81 1959.47,1218.81 1960.06,1218.81 1960.64,1218.81 1961.23,1218.81 1961.82,1218.81 1962.4,1218.81 1962.99,1218.81 1963.58,1218.81 1964.16,1218.81 1964.75,1218.81 1965.33,1218.81 1965.92,1218.81 1966.51,1218.81 1967.09,1218.81 1967.68,1218.81 1968.27,1218.81 1968.85,1218.81 1969.44,1218.81 1970.03,1218.81 1970.61,1218.81 1971.2,1218.81 1971.78,1218.81 1972.37,1218.81 1972.96,1218.81 1973.54,1218.81 1974.13,1218.81 1974.72,1218.81 1975.3,1218.81 1975.89,1218.81 1976.48,1218.81 1977.06,1218.81 1977.65,1218.81 1978.24,1218.81 1978.82,1218.81 1979.41,1218.81 1979.99,1218.81 1980.58,1218.81 1981.17,1218.81 1981.75,1218.81 1982.34,1218.81 1982.93,1218.81 1983.51,1218.81 1984.1,1218.81 1984.69,1218.81 1985.27,1218.81 1985.86,1218.81 1986.45,1218.81 1987.03,1218.81 1987.62,1218.81 1988.2,1218.81 1988.79,1218.81 1989.38,1218.81 1989.96,1218.81 1990.55,1218.81 1991.14,1218.81 1991.72,1218.81 1992.31,1218.81 1992.9,1218.81 1993.48,1218.81 1994.07,1218.81 1994.65,1218.81 1995.24,1218.81 1995.83,1218.81 1996.41,1218.81 1997,1218.81 1997.59,1218.81 1998.17,1218.81 1998.76,1218.81 1999.35,1218.81 1999.93,1218.81 2000.52,1218.81 2001.11,1218.81 2001.69,1218.81 2002.28,1218.81 2002.86,1218.81 2003.45,1218.81 2004.04,1218.81 2004.62,1218.81 2005.21,1218.81 2005.8,1218.81 2006.38,1218.81 2006.97,1218.81 2007.56,1218.81 2008.14,1218.81 2008.73,1218.81 2009.32,1218.81 2009.9,1218.81 2010.49,1218.81 2011.07,1218.81 2011.66,1218.81 2012.25,1218.81 2012.83,1218.81 2013.42,1218.81 2014.01,1218.81 2014.59,1218.81 2015.18,1218.81 2015.77,1218.81 2016.35,1218.81 2016.94,1218.81 2017.53,1218.81 2018.11,1218.81 2018.7,1218.81 2019.28,1218.81 2019.87,1218.81 2020.46,1218.81 2021.04,1218.81 2021.63,1218.81 2022.22,1218.81 2022.8,1218.81 2023.39,1218.81 2023.98,1218.81 2024.56,1218.81 2025.15,1218.81 2025.73,1218.81 2026.32,1218.81 2026.91,1218.81 2027.49,1218.81 2028.08,1218.81 2028.67,1218.81 2029.25,1218.81 2029.84,1218.81 2030.43,1218.81 2031.01,1218.81 2031.6,1218.81 2032.19,1218.81 2032.77,1218.81 2033.36,1218.81 2033.94,1218.81 2034.53,1218.81 2035.12,1218.81 2035.7,1218.81 2036.29,1218.81 2036.88,1218.81 2037.46,1218.81 2038.05,1218.81 2038.64,1218.81 2039.22,1218.81 2039.81,1218.81 2040.4,1218.81 2040.98,1218.81 2041.57,1218.81 2042.15,1218.81 2042.74,1218.81 2043.33,1218.81 2043.91,1218.81 2044.5,1218.81 2045.09,1218.81 2045.67,1218.81 2046.26,1218.81 2046.85,1218.81 2047.43,1218.81 2048.02,1218.81 2048.6,1218.81 2049.19,1218.81 2049.78,1218.81 2050.36,1218.81 2050.95,1218.81 2051.54,1218.81 2052.12,1218.81 2052.71,1218.81 2053.3,1218.81 2053.88,1218.81 2054.47,1218.81 2055.06,1218.81 2055.64,1218.81 2056.23,1218.81 2056.81,1218.81 2057.4,1218.81 2057.99,1218.81 2058.57,1218.81 2059.16,1218.81 2059.75,1218.81 2060.33,1218.81 2060.92,1218.81 2061.51,1218.81 2062.09,1218.81 2062.68,1218.81 2063.27,1218.81 2063.85,1218.81 2064.44,1218.81 2065.02,1218.81 2065.61,1218.81 2066.2,1218.81 2066.78,1218.81 2067.37,1218.81 2067.96,1218.81 2068.54,1218.81 2069.13,1218.81 2069.72,1218.81 2070.3,1218.81 2070.89,1218.81 2071.48,1218.81 2072.06,1218.81 2072.65,1218.81 2073.23,1218.81 2073.82,1218.81 2074.41,1218.81 2074.99,1218.81 2075.58,1218.81 2076.17,1218.81 2076.75,1218.81 2077.34,1218.81 2077.93,1218.81 2078.51,1218.81 2079.1,1218.81 2079.68,1218.81 2080.27,1218.81 2080.86,1218.81 2081.44,1218.81 2082.03,1218.81 2082.62,1218.81 2083.2,1218.81 2083.79,1218.81 2084.38,1218.81 2084.96,1218.81 2085.55,1218.81 2086.14,1218.81 2086.72,1218.81 2087.31,1218.81 2087.89,1218.81 2088.48,1218.81 2089.07,1218.81 2089.65,1218.81 2090.24,1218.81 2090.83,1218.81 2091.41,1218.81 2092,1218.81 2092.59,1218.81 2093.17,1218.81 2093.76,1218.81 2094.35,1218.81 2094.93,1218.81 2095.52,1218.81 2096.1,1218.81 2096.69,1218.81 2097.28,1218.81 2097.86,1218.81 2098.45,1218.81 2099.04,1218.81 2099.62,1218.81 2100.21,1218.81 2100.8,1218.81 2101.38,1218.81 2101.97,1218.81 2102.55,1218.81 2103.14,1218.81 2103.73,1218.81 2104.31,1218.81 2104.9,1218.81 2105.49,1218.81 2106.07,1218.81 2106.66,1218.81 2107.25,1218.81 2107.83,1218.81 2108.42,1218.81 2109.01,1218.81 2109.59,1218.81 2110.18,1218.81 2110.76,1218.81 2111.35,1218.81 2111.94,1218.81 2112.52,1218.81 2113.11,1218.81 2113.7,1218.81 2114.28,1218.81 2114.87,1218.81 2115.46,1218.81 2116.04,1218.81 2116.63,1218.81 2117.22,1218.81 2117.8,1218.81 2118.39,1218.81 2118.97,1218.81 2119.56,1218.81 2120.15,1218.81 2120.73,1218.81 2121.32,1218.81 2121.91,1218.81 2122.49,1218.81 2123.08,1218.81 2123.67,1218.81 2124.25,1218.81 2124.84,1218.81 2125.42,1218.81 2126.01,1218.81 2126.6,1218.81 2127.18,1218.81 2127.77,1218.81 2128.36,1218.81 2128.94,1218.81 2129.53,1218.81 2130.12,1218.81 2130.7,1218.81 2131.29,1218.81 2131.88,1218.81 2132.46,1218.81 2133.05,1218.81 2133.63,1218.81 2134.22,1218.81 2134.81,1218.81 2135.39,1218.81 2135.98,1218.81 2136.57,1218.81 2137.15,1218.81 2137.74,1218.81 2138.33,1218.81 2138.91,1218.81 2139.5,1218.81 2140.09,1218.81 2140.67,1218.81 2141.26,1218.81 2141.84,1218.81 2142.43,1218.81 2143.02,1218.81 2143.6,1218.81 2144.19,1218.81 2144.78,1218.81 2145.36,1218.81 2145.95,1218.81 2146.54,1218.81 2147.12,1218.81 2147.71,1218.81 2148.3,1218.81 2148.88,1218.81 2149.47,1218.81 2150.05,1218.81 2150.64,1218.81 2151.23,1218.81 2151.81,1218.81 2152.4,1218.81 2152.99,1218.81 2153.57,1218.81 2154.16,1218.81 2154.75,1218.81 2155.33,1218.81 2155.92,1218.81 2156.5,1218.81 2157.09,1218.81 2157.68,1218.81 2158.26,1218.81 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.64,1199.76 1397.91,899.083 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1237.28 985.439,1199.76 2158.26,1199.76 2158.26,1237.28 985.439,1237.28 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip973\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip973)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3902.72 163.232,-5029.64 163.792,-4742.23 164.351,-5746.88 164.91,-6619.52 165.469,-7440.05 166.029,-8185.44 166.588,-6851.68 167.147,-7585.17 167.706,-8233.54 168.266,-8835.16 168.825,-9363.53 169.384,-9849.63 169.943,-9550.24 170.503,-9330.86 171.062,-9754.97 171.621,-10139.9 172.18,-10479.7 172.74,-10769.1 173.299,-10533.8 173.858,-10760.7 174.417,-10951.6 174.977,-10701.6 175.536,-10109 176.095,-10272.2 176.655,-9762.62 177.214,-9617.51 177.773,-9485.45 178.332,-9629.36 178.892,-9728.83 179.451,-9101.63 180.01,-8753.21 180.569,-8827.02 181.129,-8682.14 181.688,-8541.93 182.247,-8563.85 182.806,-8406.89 183.366,-8410.89 183.925,-8408.94 184.484,-8250.14 185.043,-8100.75 185.603,-8059.18 186.162,-7886.43 186.721,-7486.15 187.28,-7418.91 187.84,-7358.9 188.399,-7092.44 188.958,-7013.46 189.517,-6674.02 190.077,-6524.43 190.636,-6296.72 191.195,-6232.29 191.754,-6157.35 192.314,-6075.64 192.873,-5849.79 193.432,-5636.34 193.991,-5494.41 194.551,-5425.68 195.11,-5233.67 195.669,-5156.1 196.228,-5015.3 196.788,-4937.94 197.347,-4853.55 197.906,-4713.22 198.465,-4574.41 199.025,-4489.55 199.584,-4358.98 200.143,-4136.03 200.702,-4056.98 201.262,-3847.5 201.821,-3729.03 202.38,-3526.48 202.939,-3340.83 203.499,-3273.24 204.058,-3133.41 204.617,-3073.34 205.176,-2935.62 205.736,-2765.5 206.295,-2634.72 206.854,-2548.64 207.413,-2489.17 207.973,-2332.62 208.532,-2275.86 209.091,-2189.32 209.65,-2072.2 210.21,-1987.32 210.769,-1902.78 211.328,-1731.76 211.887,-1681.97 212.447,-1605.09 213.006,-1500.93 213.565,-1429.51 214.124,-1353.23 214.684,-1304.05 215.243,-1237.34 215.802,-1195.8 216.361,-1077.96 216.921,-1015.14 217.48,-978.799 218.039,-891.127 218.598,-831.428 219.158,-795.1 219.717,-666.672 220.276,-590.239 220.835,-537.607 221.395,-437.446 221.954,-416.902 222.513,-368.311 223.072,-322.043 223.632,-275.237 224.191,-209.567 224.75,-120.461 225.309,-80.888 225.869,-62.8859 226.428,0.29503 226.987,100.813 227.546,154.543 228.106,202.245 228.665,211.531 229.224,200.39 229.783,252.661 230.343,303.572 230.902,330.874 231.461,356.227 232.02,421.419 232.58,426.629 233.139,434.915 233.698,479.516 234.257,500.517 234.817,561.471 235.376,524.983 235.935,545.376 236.494,545.288 237.054,568.916 237.613,551.264 238.172,669.125 238.731,669.915 239.291,684.521 239.85,718.633 240.409,769.572 240.968,818.029 241.528,812.946 242.087,811.333 242.646,792.289 243.205,822.42 243.765,820.177 244.324,818.324 244.883,850.218 245.442,843.411 246.002,855.398 246.561,883.078 247.12,877.065 247.679,854.27 248.239,901.639 248.798,895.724 249.357,941.228 249.916,987.506 250.476,959.004 251.035,949.879 251.594,958.7 252.153,952.929 252.713,981.696 253.272,973.607 253.831,969.285 254.39,963.072 254.95,975.057 255.509,965.926 256.068,960.763 256.627,969.784 257.187,963.69 257.746,959.089 258.305,918.017 258.864,934.335 259.424,963.372 259.983,977.191 260.542,1003.44 261.101,1015.67 261.661,976.19 262.22,985.577 262.779,1000.77 263.338,960.824 263.898,955.432 264.457,932.756 265.016,929.489 265.575,906.814 266.135,955.753 266.694,952.092 267.253,966.602 267.812,961.134 268.372,990.099 268.931,950.43 269.49,961.003 270.049,989.186 270.609,950.06 271.168,980.032 271.727,991.937 272.286,1008.14 272.846,1032.43 273.405,978.194 273.964,973.27 274.523,951.218 275.083,944.788 275.642,921.861 276.201,919.743 276.76,907.594 277.32,890.224 277.879,888.721 278.438,885.345 278.997,870.005 279.557,888.498 280.116,888.879 280.675,887.274 281.234,905.298 281.794,921.967 282.353,919.609 282.912,919.218 283.471,967.981 284.031,948.147 284.59,907.889 285.149,921.851 285.708,939.11 286.268,936.542 286.827,937.505 287.386,939.669 287.945,987.584 288.505,966.767 289.064,962.53 289.623,962.047 290.182,995.438 290.742,1005.98 291.301,1017.04 291.86,1009.97 292.419,986.141 292.979,983.632 293.538,975.113 294.097,952.047 294.656,949.876 295.216,947.052 295.775,947.317 296.334,943.667 296.893,941.544 297.453,936.834 298.012,901.939 298.571,901.542 299.13,898.323 299.69,898.829 300.249,898.733 300.808,928.807 301.368,891.796 301.927,891.344 302.486,889.77 303.045,908.268 303.605,905.924 304.164,904.18 304.723,919.37 305.282,886.99 305.842,903.171 306.401,899.729 306.96,863.415 307.519,881.834 308.079,880.187 308.638,861.052 309.197,877.183 309.756,906.421 310.316,924.766 310.875,937.921 311.434,949.838 311.993,945.754 312.553,941.041 313.112,935.47 313.671,899.674 314.23,898.129 314.79,959.107 315.349,971.588 315.908,970.028 316.467,965.866 317.027,974.053 317.586,935.483 318.145,934.224 318.704,914.946 319.264,912.938 319.823,912.105 320.382,925.036 320.941,903.466 321.501,920.608 322.06,920.634 322.619,949.415 323.178,940.333 323.738,922.85 324.297,936.47 324.856,948.006 325.415,942.822 325.975,920.894 326.534,919.287 327.093,931.691 327.652,927.071 328.212,939.106 328.771,966.361 329.33,974.014 329.889,968.132 330.449,964.039 331.008,976.804 331.567,970.744 332.126,977.321 332.686,1003.97 333.245,1029.49 333.804,1034.91 334.363,1009.64 334.923,1034.31 335.482,1011.47 336.041,1003.99 336.6,996.8 337.16,1002.09 337.719,1009.42 338.278,1033.05 338.837,1053.42 339.397,1029.54 339.956,1018.75 340.515,1006.86 341.074,980.843 341.634,987.816 342.193,996.698 342.752,1020.84 343.311,1010.43 343.871,1016.85 344.43,992.448 344.989,985.261 345.548,974.089 346.108,967.791 346.667,974.999 347.226,949.403 347.785,957.769 348.345,947.598 348.904,953.555 349.463,943.803 350.022,920.556 350.582,931.24 351.141,956.514 351.7,951.733 352.259,946.847 352.819,922.146 353.378,902.707 353.937,898.725 354.496,878.821 355.056,893.894 355.615,837.993 356.174,821.307 356.733,805.851 357.293,825.51 357.852,837.952 358.411,852.531 358.97,898.609 359.53,897.374 360.089,908.104 360.648,869.046 361.207,863.583 361.767,843.22 362.326,825.421 362.885,855.184 363.444,873.164 364.004,871.729 364.563,852.52 365.122,864.684 365.681,844.943 366.241,873.14 366.8,867.538 367.359,860.105 367.918,856.619 368.478,856.327 369.037,887.416 369.596,869.962 370.155,898.434 370.715,858.499 371.274,870.911 371.833,897.413 372.392,906.601 372.952,899.163 373.511,908.39 374.07,948.746 374.629,943.166 375.189,983.629 375.748,874.653 376.307,888.2 376.866,851.266 377.426,860.589 377.985,837.688 378.544,801.919 379.103,816.134 379.663,848.692 380.222,846.316 380.781,841.641 381.34,887.2 381.9,899.342 382.459,892.644 383.018,867.924 383.577,879.638 384.137,871.663 384.696,853.651 385.255,831.547 385.814,828.516 386.374,858.629 386.933,855.039 387.492,886.238 388.051,876.639 388.611,857.281 389.17,853.322 389.729,897.916 390.288,907.149 390.848,914.382 391.407,920.064 391.966,913.022 392.525,936.75 393.085,914.673 393.644,890.778 394.203,917.084 394.762,924.837 395.322,950.391 395.881,923.109 396.44,884.85 396.999,865.721 397.559,890.44 398.118,870.092 398.677,866.276 399.236,859.339 399.796,853.556 400.355,851.19 400.914,846.385 401.473,822.681 402.033,834.137 402.592,851.13 403.151,828.98 403.71,824.113 404.27,821.547 404.829,819.087 405.388,819.382 405.947,815.554 406.507,816.249 407.066,814.527 407.625,829.895 408.184,810.852 408.744,823.577 409.303,801.438 409.862,817.43 410.421,781.964 410.981,777.982 411.54,775.406 412.099,778.054 412.658,775.875 413.218,789.076 413.777,785.945 414.336,802.798 414.895,784.807 415.455,814.455 416.014,815.259 416.573,809.898 417.132,792.482 417.692,785.78 418.251,783.879 418.81,750.639 419.369,768.188 419.929,783.561 420.488,811.097 421.047,794.955 421.606,791.069 422.166,784.223 422.725,783.52 423.284,795.342 423.843,795.102 424.403,777.948 424.962,777.462 425.521,779.14 426.08,757.663 426.64,774.186 427.199,776.588 427.758,774.421 428.318,754.746 428.877,770.854 429.436,725.575 429.995,710.38 430.555,724.418 431.114,738.035 431.673,739.535 432.232,741.375 432.792,741.865 433.351,773.843 433.91,692.294 434.469,664.516 435.029,703.8 435.588,723.025 436.147,741.896 436.706,727.394 437.266,745.732 437.825,750.639 438.384,769.867 438.943,767.124 439.503,783.543 440.062,799.396 440.621,796.322 441.18,780.343 441.74,763.852 442.299,763.537 442.858,797.972 443.417,812.435 443.977,792.062 444.536,807.335 445.095,820.857 445.654,786.108 446.214,800.724 446.773,833.133 447.332,808.095 447.891,758.188 448.451,740.718 449.01,754.558 449.569,736.035 450.128,754.305 450.688,756.549 451.247,754.544 451.806,740.334 452.365,739.284 452.925,740.41 453.484,741.992 454.043,759.301 454.602,743.174 455.162,745.556 455.721,745.561 456.28,766.529 456.839,765.868 457.399,778.928 457.958,726.957 458.517,743.066 459.076,742.38 459.636,774.59 460.195,759.689 460.754,711.21 461.313,731.348 461.873,746.359 462.432,763.906 462.991,743.314 463.55,744.28 464.11,748.154 464.669,745.709 465.228,727.919 465.787,711.431 466.347,727.566 466.906,712.453 467.465,747.54 468.024,746.288 468.584,716.692 469.143,750.908 469.702,765.323 470.261,753.482 470.821,755.254 471.38,769.038 471.939,753.298 472.498,752.322 473.058,734.406 473.617,747.914 474.176,743.56 474.735,774.227 475.295,771.592 475.854,753.16 476.413,717.691 476.972,683.175 477.532,701.956 478.091,669.125 478.65,675.317 479.209,679.595 479.769,700.338 480.328,699.866 480.887,732.615 481.446,745.967 482.006,747.151 482.565,762.665 483.124,778.051 483.683,773.077 484.243,772.188 484.802,768.843 485.361,796.825 485.92,762.311 486.48,744.092 487.039,746.362 487.598,732.205 488.157,745.323 488.717,715.676 489.276,699.903 489.835,717.938 490.394,714.976 490.954,654.361 491.513,659.576 492.072,694.964 492.631,686.999 493.191,686.086 493.75,720.148 494.309,668.987 494.868,659.323 495.428,645.033 495.987,665.514 496.546,684.553 497.105,684.449 497.665,656.488 498.224,644.829 498.783,633.81 499.342,634.143 499.902,657.323 500.461,643.926 501.02,663.395 501.579,702.471 502.139,704.68 502.698,672.043 503.257,692.061 503.816,709.976 504.376,727.151 504.935,711.023 505.494,696.524 506.053,721.281 506.613,723.514 507.172,726.694 507.731,712.288 508.29,681.017 508.85,681.376 509.409,685.468 509.968,721.374 510.527,735.183 511.087,721.018 511.646,705.145 512.205,708.996 512.764,711.914 513.324,728.414 513.883,697.61 514.442,698.455 515.001,699.309 515.561,687 516.12,725.606 516.679,709.644 517.238,712.005 517.798,678.753 518.357,698.259 518.916,666.472 519.475,687.648 520.035,672.665 520.594,658.052 521.153,678.706 521.712,677.064 522.272,725.056 522.831,722.292 523.39,722.76 523.949,721.356 524.509,679.396 525.068,710.532 525.627,712.388 526.186,698.069 526.746,697.651 527.305,700.038 527.864,695.868 528.423,711.131 528.983,707.092 529.542,708.479 530.101,693.404 530.66,729.219 531.22,758.693 531.779,739.945 532.338,753.537 532.897,734.956 533.457,751.065 534.016,764.791 534.575,776.615 535.134,775.855 535.694,788.533 536.253,770.359 536.812,752.629 537.371,736.552 537.931,746.662 538.49,743.112 539.049,744.214 539.608,742.971 540.168,757.32 540.727,736.312 541.286,737.274 541.845,721.931 542.405,736.815 542.964,737.83 543.523,738.291 544.082,735.209 544.642,717.89 545.201,718.76 545.76,765.738 546.319,759.64 546.879,774.883 547.438,785.303 547.997,780.628 548.556,755.899 549.116,754.084 549.675,749.829 550.234,781.132 550.793,776.145 551.353,771.536 551.912,784.306 552.471,782.174 553.031,776.302 553.59,772.752 554.149,772.723 554.708,771.323 555.268,720.295 555.827,707.434 556.386,706.874 556.945,697.181 557.505,683.969 558.064,733.198 558.623,731.19 559.182,728.441 559.742,744.267 560.301,740.523 560.86,706.293 561.419,705.662 561.979,704.073 562.538,688.966 563.097,689.551 563.656,676.803 564.216,646.103 564.775,633.554 565.334,654.99 565.893,690.78 566.453,726.966 567.012,741.114 567.571,705.788 568.13,725.273 568.69,740.611 569.249,737.382 569.808,750.314 570.367,748.35 570.927,715.827 571.486,715.306 572.045,695.924 572.604,713.186 573.164,729.034 573.723,696.137 574.282,680.71 574.841,665.097 575.401,669.367 575.96,688.796 576.519,673.773 577.078,690.465 577.638,676.032 578.197,678.331 578.756,663.91 579.315,670.203 579.875,706.158 580.434,689.815 580.993,706.954 581.552,704.415 582.112,721.812 582.671,751.488 583.23,784.107 583.789,765.763 584.349,763.343 584.908,756.911 585.467,755.762 586.026,768.913 586.586,735.899 587.145,733.421 587.704,747.631 588.263,745.642 588.823,776.915 589.382,772.247 589.941,752.677 590.5,734.856 591.06,715.502 591.619,728.28 592.178,726.598 592.737,759.079 593.297,756.214 593.856,769.385 594.415,766.292 594.974,715.283 595.534,735.393 596.093,736.286 596.652,768.503 597.211,768.661 597.771,748.788 598.33,731.502 598.889,729.06 599.448,707.878 600.008,710.48 600.567,711.693 601.126,677.175 601.685,645.916 602.245,648.523 602.804,667.503 603.363,673.415 603.922,691.525 604.482,693.914 605.041,680.547 605.6,712.838 606.159,695.863 606.719,727.693 607.278,743.203 607.837,706.589 608.396,685.961 608.956,669.284 609.515,657.616 610.074,662.212 610.633,678.471 611.193,677.805 611.752,664.045 612.311,709.84 612.87,708.4 613.43,709.817 613.989,724.401 614.548,754.942 615.107,765.681 615.667,778.578 616.226,774.345 616.785,776.9 617.344,788.978 617.904,799.333 618.463,810.48 619.022,803.034 619.581,813.242 620.141,791.584 620.7,800.319 621.259,828.67 621.818,805.89 622.378,799.591 622.937,777.993 623.496,771.386 624.055,764.878 624.615,743.856 625.174,730.176 625.733,731.278 626.292,748.121 626.852,742.784 627.411,708.369 627.97,692.885 628.529,710.693 629.089,694.107 629.648,712.322 630.207,731.52 630.766,733.208 631.326,730.72 631.885,690.58 632.444,690.371 633.003,678.542 633.563,694.911 634.122,709.166 634.681,708.236 635.24,674.166 635.8,639.989 636.359,641.389 636.918,643.791 637.477,663.65 638.037,696.816 638.596,727.68 639.155,758.993 639.714,773.014 640.274,783.6 640.833,744.572 641.392,739.972 641.951,736.89 642.511,720.948 643.07,699.768 643.629,665.668 644.188,652.605 644.748,671.969 645.307,688.618 645.866,674.913 646.425,676.205 646.985,709.082 647.544,692.285 648.103,741.856 648.662,771.611 649.222,767.533 649.781,750.433 650.34,762.732 650.899,746.008 651.459,727.281 652.018,741.058 652.577,785.648 653.136,766.033 653.696,733.097 654.255,698.122 654.814,696.299 655.373,710.518 655.933,709.937 656.492,693.629 657.051,681.412 657.61,701.606 658.17,654.038 658.729,672.834 659.288,674.023 659.847,708.122 660.407,706.529 660.966,688.321 661.525,689.683 662.084,691.314 662.644,690.363 663.203,672.645 663.762,689.828 664.321,707.729 664.881,722.122 665.44,691.494 665.999,709.486 666.558,694.228 667.118,677.582 667.677,679.49 668.236,695.8 668.795,677.071 669.355,713.834 669.914,680.109 670.473,665.269 671.032,649.313 671.592,620.068 672.151,639.758 672.71,640.577 673.269,691.007 673.829,640.777 674.388,691.423 674.947,705.295 675.506,689.315 676.066,689.056 676.625,672.761 677.184,659.43 677.743,692.282 678.303,676.698 678.862,676.348 679.421,694.103 679.981,710.224 680.54,711.973 681.099,710.023 681.658,726.355 682.218,691.494 682.777,679.315 683.336,697.072 683.895,697.646 684.455,728.262 685.014,743.521 685.573,707.072 686.132,687.854 686.692,654.557 687.251,689.349 687.81,662.02 688.369,665.589 688.929,684.571 689.488,687.498 690.047,724.058 690.606,705.48 691.166,724.529 691.725,737.932 692.284,733.413 692.843,746.114 693.403,745.102 693.962,745.026 694.521,745.891 695.08,756.717 695.64,785.044 696.199,793.59 696.758,789.836 697.317,799.529 697.877,810.382 698.436,785.708 698.995,779.8 699.554,758.321 700.114,722.151 700.673,734.716 701.232,732.951 701.791,716.746 702.351,712.14 702.91,742.173 703.469,755.916 704.028,751.878 704.588,762.864 705.147,756.551 705.706,752.826 706.265,751.606 706.825,746.631 707.384,757.091 707.943,755.692 708.502,720.484 709.062,703.847 709.621,701.589 710.18,704.064 710.739,720.319 711.299,717.256 711.858,718.9 712.417,701.075 712.976,730.573 713.536,746.206 714.095,761.573 714.654,742.07 715.213,722.405 715.773,751.457 716.332,764.467 716.891,773.227 717.45,784.717 718.01,732.012 718.569,714.458 719.128,715.965 719.687,716.294 720.247,682.021 720.806,665.531 721.365,651.867 721.924,636.745 722.484,658.266 723.043,647.4 723.602,666.908 724.161,650.878 724.721,682.375 725.28,682.373 725.839,714.819 726.398,696.976 726.958,710.688 727.517,729.098 728.076,725.641 728.635,706.515 729.195,688.533 729.754,675.405 730.313,689.232 730.872,688.35 731.432,667 731.991,683.942 732.55,669.347 733.109,699.699 733.669,666.727 734.228,699.154 734.787,703.065 735.346,669.19 735.906,670.817 736.465,685.939 737.024,672.757 737.583,671.941 738.143,659.065 738.702,628.693 739.261,645.173 739.82,662.837 740.38,647.524 740.939,664.167 741.498,662.931 742.057,615.105 742.617,635.509 743.176,643.842 743.735,628.791 744.294,646.875 744.854,644.923 745.413,648.229 745.972,630.561 746.531,654.844 747.091,676.927 747.65,694.602 748.209,708.617 748.768,676.582 749.328,693.396 749.887,664.024 750.446,650.502 751.005,653.749 751.565,675.048 752.124,674.524 752.683,694.438 753.242,661.346 753.802,664.272 754.361,647.894 754.92,631.516 755.479,635.124 756.039,624.728 756.598,644.632 757.157,647.541 757.716,662.616 758.276,696.034 758.835,713.015 759.394,709.025 759.953,726.905 760.513,739.646 761.072,737.042 761.631,752.951 762.19,749.868 762.75,733.262 763.309,728.624 763.868,694.915 764.427,729.507 764.987,712.157 765.546,711.097 766.105,662.97 766.664,715.995 767.224,717.003 767.783,766.248 768.342,760.445 768.901,754.275 769.461,738.833 770.02,736.823 770.579,747.749 771.138,747.193 771.698,746.183 772.257,758.093 772.816,737.684 773.375,735.074 773.935,735.686 774.494,715.714 775.053,726.317 775.612,706.476 776.172,705.658 776.731,707.749 777.29,738.618 777.849,736.14 778.409,733.505 778.968,728.329 779.527,742.014 780.086,723.649 780.646,720.219 781.205,697.072 781.764,727.748 782.323,707.616 782.883,723.492 783.442,706.533 784.001,717.847 784.56,713.416 785.12,725.028 785.679,736.462 786.238,701.052 786.797,698.858 787.357,697.212 787.916,715.262 788.475,697.36 789.034,694.644 789.594,658.584 790.153,676.976 790.712,642.016 791.271,648.107 791.831,665.149 792.39,682.054 792.949,695.54 793.508,693.338 794.068,676.463 794.627,662.157 795.186,693.344 795.745,694.058 796.305,726.45 796.864,709.018 797.423,693.528 797.982,708.284 798.542,709.042 799.101,689.79 799.66,674.694 800.219,675.181 800.779,673.622 801.338,676.348 801.897,656.201 802.456,672.782 803.016,656.496 803.575,644.177 804.134,646.185 804.693,644.265 805.253,629.82 805.812,617.366 806.371,572.11 806.931,578.332 807.49,601.563 808.049,608.605 808.608,645.359 809.168,650.183 809.727,637.463 810.286,643.416 810.845,644.959 811.405,650.354 811.964,669.403 812.523,651.564 813.082,638.317 813.642,645.283 814.201,662.928 814.76,646.159 815.319,663.479 815.879,682.134 816.438,685.453 816.997,717.926 817.556,749.767 818.116,762.419 818.675,777.733 819.234,790.599 819.793,804.28 820.353,763.888 820.912,740.049 821.471,753.592 822.03,735.378 822.59,750.186 823.149,778.391 823.708,740.861 824.267,769.274 824.827,734.805 825.386,730.346 825.945,726.092 826.504,728.46 827.064,712.135 827.623,714.177 828.182,697.909 828.741,710.41 829.301,693.107 829.86,707.753 830.419,707.093 830.978,705.572 831.538,719.625 832.097,720.416 832.656,673.627 833.215,660.119 833.775,658.354 834.334,643 834.893,674.766 835.452,659.325 836.012,659.357 836.571,642.356 837.13,647.862 837.689,667.042 838.249,699.51 838.808,665.369 839.367,654.049 839.926,687.987 840.486,673.885 841.045,702.684 841.604,686.006 842.163,684.372 842.723,704.445 843.282,688.259 843.841,656.401 844.4,642.324 844.96,645.931 845.519,634.931 846.078,634.414 846.637,622.893 847.197,612.182 847.756,598.647 848.315,572.743 848.874,630.948 849.434,620.434 849.993,576.09 850.552,616.386 851.111,651.491 851.671,639.942 852.23,638.27 852.789,640.042 853.348,626.042 853.908,647.448 854.467,698.942 855.026,698.442 855.585,695.938 856.145,712.812 856.704,714.867 857.263,714.259 857.822,729.418 858.382,775.53 858.941,772.807 859.5,803.217 860.059,779.921 860.619,756.769 861.178,752.924 861.737,753.839 862.296,764.434 862.856,742.376 863.415,725.044 863.974,709.682 864.533,725.62 865.093,661.711 865.652,662.877 866.211,684.616 866.77,701.791 867.33,716.791 867.889,686.422 868.448,639.791 869.007,639.403 869.567,659.599 870.126,661.717 870.685,681.899 871.244,682.637 871.804,698.949 872.363,713.539 872.922,759.405 873.481,753.117 874.041,718.144 874.6,682.862 875.159,697.004 875.718,711.869 876.278,711.992 876.837,727.273 877.396,692.237 877.955,690.429 878.515,705.766 879.074,720.51 879.633,702.993 880.192,700.027 880.752,718.964 881.311,720.958 881.87,720.08 882.429,706.46 882.989,722.804 883.548,742.519 884.107,723.774 884.666,740.527 885.226,755.509 885.785,781.666 886.344,762.794 886.903,794.279 887.463,807.379 888.022,833.219 888.581,821.216 889.14,797.213 889.7,791.381 890.259,784.517 890.818,796.497 891.377,791.288 891.937,770.741 892.496,767.845 893.055,762.776 893.614,775.122 894.174,770.39 894.733,754.753 895.292,716.058 895.851,714.385 896.411,697.728 896.97,681.033 897.529,661.701 898.088,644.466 898.648,645.861 899.207,629.929 899.766,649.774 900.325,683.642 900.885,687.278 901.444,670.943 902.003,686.079 902.562,655.664 903.122,655.482 903.681,659.786 904.24,643.861 904.799,668.331 905.359,653.318 905.918,654.091 906.477,624.94 907.036,625.726 907.596,612.781 908.155,600.088 908.714,572.78 909.273,582.298 909.833,604.012 910.392,640.474 910.951,639.652 911.51,640.736 912.07,644.959 912.629,642.947 913.188,628.327 913.747,634.03 914.307,665.626 914.866,634.512 915.425,640.56 915.984,673.612 916.544,661.536 917.103,645.656 917.662,668.627 918.221,654.341 918.781,639.245 919.34,676.585 919.899,644.652 920.458,664.002 921.018,632.621 921.577,652.475 922.136,650.547 922.695,667.272 923.255,665.531 923.814,668.92 924.373,667.753 924.932,634.182 925.492,673.621 926.051,675.58 926.61,707.692 927.169,708.317 927.729,724.454 928.288,721.558 928.847,718.05 929.406,734.678 929.966,724.842 930.525,753.636 931.084,752.366 931.644,766.04 932.203,744.834 932.762,742.921 933.321,757.984 933.881,754.856 934.44,795.537 934.999,806.887 935.558,816.456 936.118,790.438 936.677,752.167 937.236,782.653 937.795,779.769 938.355,776.841 938.914,755.941 939.473,748.282 940.032,746.05 940.592,708.078 941.151,710.945 941.71,661.057 942.269,646.448 942.829,630.17 943.388,616.927 943.947,632.858 944.506,606.991 945.066,642.936 945.625,644.518 946.184,632.858 946.743,621.475 947.303,643.318 947.862,631.984 948.421,632.742 948.98,636.632 949.54,624.711 950.099,593.589 950.658,597.658 951.217,581.328 951.777,554.703 952.336,558.933 952.895,549.861 953.454,554.603 954.014,550.759 954.573,558.936 955.132,567.329 955.691,570.974 956.251,597.103 956.81,601.969 957.369,605.999 957.928,629.458 958.488,632.231 959.047,633.734 959.606,666.367 960.165,680.675 960.725,664.383 961.284,684.205 961.843,701.909 962.402,736.771 962.962,752.844 963.521,699.602 964.08,699.879 964.639,682.583 965.199,696.507 965.758,694.928 966.317,660.95 966.876,678.008 967.436,677.909 967.995,693.817 968.554,693.179 969.113,694.901 969.673,664.859 970.232,651.488 970.791,617.739 971.35,657.682 971.91,660.877 972.469,646.065 973.028,648.586 973.587,664.609 974.147,648.943 974.706,651.595 975.265,651.695 975.824,666.659 976.384,665.931 976.943,665.724 977.502,683.372 978.061,669.003 978.621,685.083 979.18,688.033 979.739,702.115 980.298,732.829 980.858,745.888 981.417,760.463 981.976,758.169 982.535,753.077 983.095,766.648 983.654,729.572 984.213,709.804 984.772,756.971 985.332,737.829 985.891,732.446 986.45,714.842 987.009,682.573 987.569,714.472 988.128,744.105 988.687,762.077 989.246,741.72 989.806,750.963 990.365,698.496 990.924,746.447 991.483,708.914 992.043,722.42 992.602,719.053 993.161,701.51 993.72,718.241 994.28,666.014 994.839,652.622 995.398,655.583 995.957,655.537 996.517,624.375 997.076,611.531 997.635,615.197 998.194,650.538 998.754,668.184 999.313,654.729 999.872,653.508 1000.43,636.893 1000.99,610.177 1001.55,630.593 1002.11,632.054 1002.67,651.463 1003.23,651.875 1003.79,635.272 1004.35,655.763 1004.91,659.311 1005.46,646.973 1006.02,668.99 1006.58,688.368 1007.14,704.946 1007.7,704.813 1008.26,669.083 1008.82,638.891 1009.38,624.096 1009.94,643.408 1010.5,614.539 1011.06,602.639 1011.62,572.662 1012.18,579.24 1012.73,599.729 1013.29,608.218 1013.85,628.384 1014.41,630.129 1014.97,633.204 1015.53,604.056 1016.09,638.962 1016.65,627.495 1017.21,633.028 1017.77,620.669 1018.33,623.247 1018.89,642.126 1019.45,662.302 1020.01,649.324 1020.56,667.912 1021.12,684.162 1021.68,699.783 1022.24,701.423 1022.8,714.401 1023.36,660.161 1023.92,662.166 1024.48,694.963 1025.04,713.12 1025.6,724.482 1026.16,772.073 1026.72,764.772 1027.28,777.993 1027.83,789.106 1028.39,800.592 1028.95,775.976 1029.51,753.949 1030.07,756.569 1030.63,735.337 1031.19,718.487 1031.75,748.399 1032.31,746.113 1032.87,774.365 1033.43,785.424 1033.99,777.188 1034.55,756.401 1035.1,734.961 1035.66,698.43 1036.22,663.677 1036.78,662.853 1037.34,664.137 1037.9,646.372 1038.46,649.232 1039.02,648.935 1039.58,669.874 1040.14,654.758 1040.7,670.096 1041.26,701.526 1041.82,703.517 1042.38,719.095 1042.93,719.659 1043.49,730.42 1044.05,742.58 1044.61,755.071 1045.17,769.087 1045.73,778.664 1046.29,790.416 1046.85,782.942 1047.41,774.196 1047.97,753.72 1048.53,749.818 1049.09,793.587 1049.65,804.058 1050.2,795.402 1050.76,776.433 1051.32,770.909 1051.88,766.523 1052.44,793.836 1053,770.814 1053.56,750.624 1054.12,758.86 1054.68,756.642 1055.24,735.014 1055.8,730.806 1056.36,696.428 1056.92,663.515 1057.48,693.258 1058.03,693.018 1058.59,693.975 1059.15,695.003 1059.71,677.47 1060.27,659.262 1060.83,661.139 1061.39,661.674 1061.95,678.95 1062.51,678.626 1063.07,662.136 1063.63,611.84 1064.19,613.383 1064.75,630.349 1065.3,634.146 1065.86,634.425 1066.42,653.223 1066.98,655.253 1067.54,653.06 1068.1,669.995 1068.66,637.885 1069.22,593.769 1069.78,596.876 1070.34,635.377 1070.9,637.153 1071.46,622.026 1072.02,645.317 1072.57,695.631 1073.13,694.779 1073.69,744.654 1074.25,772.471 1074.81,784.986 1075.37,763.038 1075.93,772.195 1076.49,812.866 1077.05,821.334 1077.61,830.609 1078.17,808.898 1078.73,786.653 1079.29,826.706 1079.85,836.011 1080.4,826.291 1080.96,867.61 1081.52,845.009 1082.08,837.871 1082.64,784.057 1083.2,775.982 1083.76,758.778 1084.32,738.817 1084.88,688.509 1085.44,735.241 1086,716.253 1086.56,713.245 1087.12,710.432 1087.67,722.44 1088.23,692.506 1088.79,672.013 1089.35,673.434 1089.91,674.598 1090.47,659.712 1091.03,629.183 1091.59,632.457 1092.15,633.094 1092.71,650.388 1093.27,683.225 1093.83,666.563 1094.39,663.387 1094.94,613.616 1095.5,605.144 1096.06,624.461 1096.62,625.912 1097.18,627.589 1097.74,617.504 1098.3,621.564 1098.86,607.47 1099.42,580.891 1099.98,555.847 1100.54,565.426 1101.1,604.744 1101.66,629.059 1102.22,630.998 1102.77,618.205 1103.33,606.818 1103.89,613.857 1104.45,552.814 1105.01,541.609 1105.57,532.846 1106.13,524.87 1106.69,552.727 1107.25,592.969 1107.81,630.022 1108.37,615.022 1108.93,668.314 1109.49,702.071 1110.04,703.565 1110.6,707.062 1111.16,672.989 1111.72,659.544 1112.28,645.746 1112.84,636.148 1113.4,659.579 1113.96,679.239 1114.52,666.355 1115.08,667.663 1115.64,672.297 1116.2,707.452 1116.76,692.517 1117.31,722.976 1117.87,738.968 1118.43,754.005 1118.99,765.281 1119.55,742.862 1120.11,707.461 1120.67,721.693 1121.23,734.813 1121.79,746.413 1122.35,742.367 1122.91,741.92 1123.47,721.451 1124.03,736.678 1124.59,699.875 1125.14,684.182 1125.7,668.241 1126.26,670.197 1126.82,656.679 1127.38,657.843 1127.94,674.461 1128.5,676.769 1129.06,711.49 1129.62,739.556 1130.18,768.792 1130.74,733.331 1131.3,715.091 1131.86,701.432 1132.41,715.6 1132.97,745.651 1133.53,740.049 1134.09,770.141 1134.65,732.635 1135.21,714.542 1135.77,713.841 1136.33,711.932 1136.89,679.558 1137.45,682.243 1138.01,664.526 1138.57,711.148 1139.13,726.84 1139.68,707.397 1140.24,737.33 1140.8,734.81 1141.36,719.213 1141.92,718.933 1142.48,716.995 1143.04,714.314 1143.6,697.016 1144.16,694.499 1144.72,710.701 1145.28,710.319 1145.84,706.57 1146.4,687.512 1146.96,717.947 1147.51,703.726 1148.07,647.474 1148.63,634.786 1149.19,621.842 1149.75,638.314 1150.31,658.34 1150.87,674.047 1151.43,671.553 1151.99,639.012 1152.55,643.379 1153.11,647.265 1153.67,617.86 1154.23,618.312 1154.78,619.646 1155.34,573.467 1155.9,563.035 1156.46,568.656 1157.02,575.029 1157.58,581.943 1158.14,575.232 1158.7,600.766 1159.26,605.253 1159.82,589.933 1160.38,564.625 1160.94,572.295 1161.5,545.561 1162.05,583.079 1162.61,637.005 1163.17,638.947 1163.73,641.787 1164.29,630.941 1164.85,666.337 1165.41,680.567 1165.97,699.944 1166.53,715.919 1167.09,717.211 1167.65,715.751 1168.21,714.72 1168.77,675.696 1169.33,674.817 1169.88,641.062 1170.44,644.599 1171,627.606 1171.56,646.237 1172.12,681.185 1172.68,679.414 1173.24,680.226 1173.8,681.808 1174.36,664.893 1174.92,681.922 1175.48,697.856 1176.04,684.938 1176.6,685.636 1177.15,702.233 1177.71,671.399 1178.27,675.063 1178.83,691.167 1179.39,689.84 1179.95,672.703 1180.51,655.484 1181.07,656.505 1181.63,660.835 1182.19,692.055 1182.75,691.559 1183.31,707.936 1183.87,739.453 1184.43,738.481 1184.98,702.983 1185.54,671.78 1186.1,653.979 1186.66,656.675 1187.22,661.889 1187.78,643.889 1188.34,659.814 1188.9,628.763 1189.46,629.761 1190.02,631.703 1190.58,635.036 1191.14,667.988 1191.7,666.972 1192.25,699.364 1192.81,716.084 1193.37,749.565 1193.93,779.058 1194.49,770.277 1195.05,797.162 1195.61,803.698 1196.17,778.013 1196.73,772.008 1197.29,752.06 1197.85,763.034 1198.41,774.677 1198.97,738.396 1199.52,750.812 1200.08,732.788 1200.64,714.947 1201.2,715.069 1201.76,731.963 1202.32,730.597 1202.88,713.176 1203.44,663.79 1204,680.181 1204.56,649.972 1205.12,601.97 1205.68,573.36 1206.24,562.747 1206.8,552.107 1207.35,606.75 1207.91,595.895 1208.47,619.311 1209.03,638.272 1209.59,641.339 1210.15,629.576 1210.71,648.683 1211.27,710.739 1211.83,755.49 1212.39,750.874 1212.95,746.349 1213.51,758.272 1214.07,725.386 1214.62,725.632 1215.18,674.61 1215.74,660.441 1216.3,648.244 1216.86,678.208 1217.42,692.506 1217.98,678.427 1218.54,685.339 1219.1,682.992 1219.66,685.743 1220.22,683.566 1220.78,684.924 1221.34,667.659 1221.89,667.922 1222.45,634.707 1223.01,589.133 1223.57,562.022 1224.13,585.051 1224.69,604.582 1225.25,641.584 1225.81,630.386 1226.37,635.362 1226.93,654.198 1227.49,658.163 1228.05,674.513 1228.61,688.237 1229.17,704.361 1229.72,672.751 1230.28,662.65 1230.84,696.219 1231.4,722.608 1231.96,771.888 1232.52,753.538 1233.08,751.398 1233.64,768.047 1234.2,728.763 1234.76,745.518 1235.32,759.758 1235.88,740.779 1236.44,751.648 1236.99,762.966 1237.55,774.442 1238.11,750.145 1238.67,711.846 1239.23,710.556 1239.79,726.058 1240.35,741.842 1240.91,741.76 1241.47,739.164 1242.03,731 1242.59,729.67 1243.15,744.565 1243.71,791.548 1244.26,804.304 1244.82,813.654 1245.38,790.973 1245.94,754.083 1246.5,749.737 1247.06,763.053 1247.62,744.446 1248.18,754.532 1248.74,766.199 1249.3,731.366 1249.86,741.231 1250.42,721.276 1250.98,702.511 1251.54,698.748 1252.09,686.523 1252.65,669.724 1253.21,703.739 1253.77,687.674 1254.33,658.341 1254.89,662.578 1255.45,664.072 1256.01,661.932 1256.57,694.701 1257.13,695.309 1257.69,696.706 1258.25,760.981 1258.81,741.19 1259.36,726.352 1259.92,740.08 1260.48,687.966 1261.04,688.808 1261.6,671.359 1262.16,625.886 1262.72,613.442 1263.28,633.195 1263.84,639.841 1264.4,607.236 1264.96,625.736 1265.52,594.235 1266.08,585.858 1266.63,588.143 1267.19,593.278 1267.75,596.696 1268.31,603.154 1268.87,592.197 1269.43,598.24 1269.99,602.979 1270.55,625.752 1271.11,594.771 1271.67,598.829 1272.23,636.048 1272.79,635.082 1273.35,650.651 1273.91,653.861 1274.46,653.177 1275.02,656.088 1275.58,655.317 1276.14,659.528 1276.7,630.798 1277.26,647.338 1277.82,714.358 1278.38,731.153 1278.94,644.996 1279.5,647.593 1280.06,647.981 1280.62,665.692 1281.18,652.332 1281.73,640.61 1282.29,641.198 1282.85,624.649 1283.41,645.87 1283.97,697.999 1284.53,712.811 1285.09,713.121 1285.65,695.904 1286.21,661.26 1286.77,694.907 1287.33,693.556 1287.89,678.491 1288.45,694.308 1289,710.943 1289.56,709.12 1290.12,692.178 1290.68,692.199 1291.24,693.794 1291.8,690.446 1292.36,705.974 1292.92,706.689 1293.48,706.209 1294.04,703.303 1294.6,719.696 1295.16,719.743 1295.72,700.988 1296.28,702.866 1296.83,697.801 1297.39,665.708 1297.95,666.224 1298.51,635.358 1299.07,605.085 1299.63,592.016 1300.19,593.788 1300.75,580.818 1301.31,570.281 1301.87,592.002 1302.43,564.145 1302.99,569.155 1303.55,573.418 1304.1,584.585 1304.66,607.779 1305.22,592.573 1305.78,581.934 1306.34,570.714 1306.9,624.783 1307.46,611.736 1308.02,599.202 1308.58,602.996 1309.14,587.039 1309.7,622.922 1310.26,628.112 1310.82,633.497 1311.38,687.169 1311.93,699.516 1312.49,714.877 1313.05,696.564 1313.61,685.013 1314.17,697.814 1314.73,645.006 1315.29,647.586 1315.85,585.142 1316.41,538.45 1316.97,529.414 1317.53,552.476 1318.09,577.885 1318.65,601.29 1319.2,605.484 1319.76,622.84 1320.32,624.552 1320.88,675.652 1321.44,693.227 1322,726.373 1322.56,772.184 1323.12,797.197 1323.68,825.274 1324.24,834.519 1324.8,855.403 1325.36,849.148 1325.92,877.609 1326.47,900.792 1327.03,888.885 1327.59,891.675 1328.15,898.177 1328.71,873.213 1329.27,861.911 1329.83,868.586 1330.39,858.81 1330.95,862.771 1331.51,787.911 1332.07,798.073 1332.63,807.793 1333.19,833.54 1333.75,841.045 1334.3,834.543 1334.86,840.267 1335.42,819.187 1335.98,779.362 1336.54,790.053 1337.1,751.9 1337.66,734.215 1338.22,681.233 1338.78,633.082 1339.34,670.013 1339.9,672.186 1340.46,673.156 1341.02,677.991 1341.57,724.802 1342.13,705.811 1342.69,750.232 1343.25,711.83 1343.81,726.109 1344.37,693.139 1344.93,693.188 1345.49,660.267 1346.05,657.411 1346.61,673.236 1347.17,657.707 1347.73,623.022 1348.29,609.317 1348.84,614.201 1349.4,617.689 1349.96,638.716 1350.52,607.329 1351.08,580.659 1351.64,569.471 1352.2,542.057 1352.76,567.508 1353.32,555.951 1353.88,530.564 1354.44,573.689 1355,576.234 1355.56,597.916 1356.12,568.929 1356.67,590.756 1357.23,581.89 1357.79,552.209 1358.35,576.186 1358.91,583.009 1359.47,604.955 1360.03,628.057 1360.59,679.852 1361.15,712.582 1361.71,696.703 1362.27,713.236 1362.83,726.31 1363.39,739.697 1363.94,721.219 1364.5,734.226 1365.06,731.185 1365.62,729.43 1366.18,727.391 1366.74,727.262 1367.3,741.327 1367.86,740.009 1368.42,706.701 1368.98,737.985 1369.54,754.037 1370.1,751.064 1370.66,732.654 1371.21,728.953 1371.77,711.563 1372.33,710.246 1372.89,726.87 1373.45,723.025 1374.01,720.129 1374.57,702.768 1375.13,701.541 1375.69,688.044 1376.25,687.085 1376.81,671.946 1377.37,688.884 1377.93,668.537 1378.49,669.287 1379.04,636.405 1379.6,656.739 1380.16,673.137 1380.72,656.105 1381.28,676.05 1381.84,679.25 1382.4,678.159 1382.96,681.595 1383.52,697.348 1384.08,647.146 1384.64,633.507 1385.2,618.237 1385.76,623.521 1386.31,627.326 1386.87,646.222 1387.43,664.311 1387.99,665.215 1388.55,680.299 1389.11,653.607 1389.67,657.778 1390.23,678.916 1390.79,677.395 1391.35,664.799 1391.91,681.019 1392.47,635.295 1393.03,655.168 1393.58,706.947 1394.14,719.64 1394.7,718.126 1395.26,734.074 1395.82,729.421 1396.38,684.06 1396.94,668.806 1397.5,670.587 1398.06,735.326 1398.62,699.828 1399.18,665.492 1399.74,698.687 1400.3,681.743 1400.86,671.585 1401.41,667.956 1401.97,687.591 1402.53,654.047 1403.09,623.576 1403.65,624.222 1404.21,657.542 1404.77,688.319 1405.33,717.572 1405.89,714.289 1406.45,727.15 1407.01,725.723 1407.57,706.25 1408.13,721.244 1408.68,719.909 1409.24,748.825 1409.8,743.968 1410.36,726.195 1410.92,720.944 1411.48,733.039 1412.04,696.801 1412.6,698.54 1413.16,680.399 1413.72,678.847 1414.28,661.019 1414.84,659.224 1415.4,658.735 1415.95,693.555 1416.51,695.579 1417.07,711.174 1417.63,706.675 1418.19,721.706 1418.75,717.926 1419.31,705.221 1419.87,673.214 1420.43,674.416 1420.99,703.829 1421.55,672.605 1422.11,643.867 1422.67,662.353 1423.23,645.237 1423.78,678.067 1424.34,692.17 1424.9,657.422 1425.46,673.901 1426.02,723.097 1426.58,719.334 1427.14,684.03 1427.7,684.923 1428.26,667.122 1428.82,685.804 1429.38,707.484 1429.94,657.556 1430.5,661.148 1431.05,644.658 1431.61,643.732 1432.17,631.735 1432.73,600.503 1433.29,618.881 1433.85,642.364 1434.41,640.046 1434.97,638.33 1435.53,640.501 1436.09,693.009 1436.65,709.777 1437.21,692.988 1437.77,692.888 1438.33,707.645 1438.88,720.725 1439.44,733.973 1440,732.533 1440.56,698.999 1441.12,697.039 1441.68,710.445 1442.24,709.457 1442.8,706.578 1443.36,688.155 1443.92,690.541 1444.48,706 1445.04,705.079 1445.6,716.886 1446.15,698.615 1446.71,702.243 1447.27,670.169 1447.83,667.932 1448.39,667.019 1448.95,705.579 1449.51,706.468 1450.07,751.791 1450.63,699.182 1451.19,697.098 1451.75,693.703 1452.31,661.033 1452.87,615.737 1453.42,587.085 1453.98,594.641 1454.54,584.11 1455.1,555.824 1455.66,563.944 1456.22,567.999 1456.78,558.719 1457.34,581.471 1457.9,570.922 1458.46,591.998 1459.02,581.274 1459.58,586.319 1460.14,590.117 1460.7,624.463 1461.25,611.667 1461.81,649.768 1462.37,634.867 1462.93,655.656 1463.49,644.504 1464.05,629.633 1464.61,649.267 1465.17,668.959 1465.73,705.646 1466.29,718.94 1466.85,747.538 1467.41,747.271 1467.97,726.432 1468.52,722.863 1469.08,675.756 1469.64,680.909 1470.2,667.804 1470.76,618.664 1471.32,668.424 1471.88,673.276 1472.44,659.722 1473,695.463 1473.56,689.087 1474.12,706.064 1474.68,708.731 1475.24,692.798 1475.79,691.006 1476.35,672.824 1476.91,707.632 1477.47,721.508 1478.03,723.732 1478.59,740.021 1479.15,720.058 1479.71,698.344 1480.27,699.569 1480.83,746.555 1481.39,745.644 1481.95,725.517 1482.51,737.97 1483.07,751.366 1483.62,764.931 1484.18,744.098 1484.74,691.747 1485.3,672.891 1485.86,671.97 1486.42,672.159 1486.98,691.81 1487.54,706.475 1488.1,689.783 1488.66,703.981 1489.22,735.234 1489.78,717.383 1490.34,732.615 1490.89,729.35 1491.45,728.789 1492.01,743.328 1492.57,724.765 1493.13,674.352 1493.69,675.415 1494.25,641.268 1494.81,644.352 1495.37,648.545 1495.93,632.581 1496.49,602.27 1497.05,607.353 1497.61,596.604 1498.16,601.394 1498.72,605.366 1499.28,676.553 1499.84,682.833 1500.4,650.922 1500.96,672.348 1501.52,643.928 1502.08,660.332 1502.64,647.404 1503.2,649.003 1503.76,649.59 1504.32,632.781 1504.88,637.843 1505.44,626.388 1505.99,627.503 1506.55,644.092 1507.11,627.719 1507.67,627.017 1508.23,613.661 1508.79,600.505 1509.35,652.706 1509.91,640.711 1510.47,641.229 1511.03,677.178 1511.59,662.253 1512.15,663.225 1512.71,700.079 1513.26,682.347 1513.82,667.395 1514.38,646.285 1514.94,652.104 1515.5,644.034 1516.06,630.885 1516.62,618.41 1517.18,638.72 1517.74,672.825 1518.3,675.391 1518.86,692.352 1519.42,691.512 1519.98,662.686 1520.53,665.104 1521.09,683.904 1521.65,680.366 1522.21,701.614 1522.77,685.099 1523.33,684.84 1523.89,667.389 1524.45,668.091 1525.01,653.625 1525.57,689.065 1526.13,704.578 1526.69,737.141 1527.25,718.766 1527.81,699.387 1528.36,745.917 1528.92,708.776 1529.48,709.101 1530.04,738.771 1530.6,720.945 1531.16,735.478 1531.72,715.618 1532.28,729.791 1532.84,726.091 1533.4,713.5 1533.96,698.435 1534.52,679.005 1535.08,677.56 1535.63,725.654 1536.19,706.453 1536.75,706.66 1537.31,723.789 1537.87,739.013 1538.43,702.624 1538.99,685.219 1539.55,689.548 1540.11,690.669 1540.67,689.459 1541.23,708.572 1541.79,705.671 1542.35,720.507 1542.9,705.062 1543.46,702.878 1544.02,719.676 1544.58,716.411 1545.14,698.208 1545.7,728.344 1546.26,725.499 1546.82,710.867 1547.38,692.104 1547.94,694.24 1548.5,710.094 1549.06,705.442 1549.62,703.84 1550.18,730.446 1550.73,745.286 1551.29,775.142 1551.85,792.314 1552.41,801.184 1552.97,745.61 1553.53,742.207 1554.09,742.106 1554.65,703.976 1555.21,667.96 1555.77,686.164 1556.33,703.195 1556.89,685.509 1557.45,684.35 1558,702.339 1558.56,700.95 1559.12,748.414 1559.68,776.737 1560.24,755.045 1560.8,736.266 1561.36,715.209 1561.92,714.169 1562.48,711.731 1563.04,710.09 1563.6,709.518 1564.16,644.608 1564.72,627.726 1565.28,662.357 1565.83,680.769 1566.39,677.908 1566.95,695.867 1567.51,695.467 1568.07,664.096 1568.63,667.589 1569.19,671.39 1569.75,672.173 1570.31,689.401 1570.87,704.565 1571.43,702.432 1571.99,719.618 1572.55,719.93 1573.1,751.507 1573.66,781.481 1574.22,775.884 1574.78,771.202 1575.34,798.769 1575.9,789.764 1576.46,750.302 1577.02,731.785 1577.58,727.394 1578.14,756.812 1578.7,739.738 1579.26,734.352 1579.82,733.172 1580.37,757.514 1580.93,756.187 1581.49,701.913 1582.05,701.878 1582.61,700.633 1583.17,746.484 1583.73,761.029 1584.29,753.117 1584.85,733.977 1585.41,761.818 1585.97,741.243 1586.53,719.406 1587.09,734.857 1587.65,731.205 1588.2,711.57 1588.76,674.758 1589.32,672.196 1589.88,689.662 1590.44,689.73 1591,684.687 1591.56,684.201 1592.12,686.395 1592.68,655.197 1593.24,687.696 1593.8,653.197 1594.36,669.496 1594.92,636.648 1595.47,622.989 1596.03,626.23 1596.59,663.461 1597.15,681.335 1597.71,662.852 1598.27,695.175 1598.83,695.131 1599.39,697.267 1599.95,696.497 1600.51,710.504 1601.07,678.343 1601.63,694.074 1602.19,709.359 1602.74,691.612 1603.3,710.059 1603.86,695.064 1604.42,663.299 1604.98,649.75 1605.54,670.294 1606.1,691.863 1606.66,707.278 1607.22,709.465 1607.78,725.857 1608.34,708.416 1608.9,707.449 1609.46,688.425 1610.02,672.426 1610.57,687.053 1611.13,691.072 1611.69,704.62 1612.25,750.436 1612.81,764.069 1613.37,791.23 1613.93,754.49 1614.49,748.683 1615.05,742.968 1615.61,704.282 1616.17,686.111 1616.73,685.666 1617.29,651.586 1617.84,635.865 1618.4,593.688 1618.96,546.987 1619.52,536.736 1620.08,542.719 1620.64,547.622 1621.2,552.018 1621.76,525.57 1622.32,532.544 1622.88,540.459 1623.44,549.202 1624,555.921 1624.56,545.979 1625.11,551.154 1625.67,542.359 1626.23,551.272 1626.79,538.902 1627.35,549.896 1627.91,558.025 1628.47,564.596 1629.03,583.736 1629.59,604.251 1630.15,639.18 1630.71,673.489 1631.27,655.899 1631.83,643.928 1632.39,661.458 1632.94,677.839 1633.5,694.458 1634.06,692.935 1634.62,708.893 1635.18,708.403 1635.74,736.599 1636.3,753.171 1636.86,748.343 1637.42,731.759 1637.98,697.683 1638.54,697.14 1639.1,695.493 1639.66,683.52 1640.21,665.877 1640.77,679.657 1641.33,680.674 1641.89,683.78 1642.45,669.027 1643.01,669.6 1643.57,701.418 1644.13,703.796 1644.69,690.375 1645.25,692.223 1645.81,676.371 1646.37,708.904 1646.93,708.477 1647.48,739.411 1648.04,751.949 1648.6,749.158 1649.16,713.178 1649.72,730.577 1650.28,700.401 1650.84,713.873 1651.4,717.947 1651.96,714.35 1652.52,711.232 1653.08,721.556 1653.64,720.706 1654.2,736.66 1654.76,716.721 1655.31,731.83 1655.87,714.466 1656.43,693.146 1656.99,708.5 1657.55,727.36 1658.11,744.003 1658.67,759.27 1659.23,738.429 1659.79,684.91 1660.35,715.011 1660.91,699.929 1661.47,728.881 1662.03,739.558 1662.58,733.19 1663.14,696.237 1663.7,713.522 1664.26,693.94 1664.82,678.275 1665.38,694.967 1665.94,663.094 1666.5,665.988 1667.06,696.296 1667.62,693.889 1668.18,691.75 1668.74,674.863 1669.3,645.638 1669.85,632.614 1670.41,647.978 1670.97,650.527 1671.53,684.709 1672.09,671.707 1672.65,670.656 1673.21,701.653 1673.77,715.55 1674.33,716.873 1674.89,713.324 1675.45,712.105 1676.01,708.898 1676.57,739.339 1677.13,764.162 1677.68,759.916 1678.24,739.271 1678.8,717.432 1679.36,702.101 1679.92,685.4 1680.48,665.485 1681.04,668.691 1681.6,652.224 1682.16,666.014 1682.72,681.083 1683.28,695.669 1683.84,694.341 1684.4,687.151 1684.95,701.887 1685.51,730.094 1686.07,729.925 1686.63,757.479 1687.19,738.224 1687.75,718.648 1688.31,735.406 1688.87,732.061 1689.43,716.139 1689.99,683.737 1690.55,652.419 1691.11,620.725 1691.67,605.908 1692.23,612.198 1692.78,649.999 1693.34,653.282 1693.9,656.137 1694.46,659.36 1695.02,644.266 1695.58,617.975 1696.14,619.604 1696.7,625.516 1697.26,645.363 1697.82,681.088 1698.38,632.792 1698.94,634.461 1699.5,621.407 1700.05,643.478 1700.61,629.307 1701.17,669.503 1701.73,652.785 1702.29,655.982 1702.85,674.697 1703.41,726.865 1703.97,723.538 1704.53,723.241 1705.09,707.878 1705.65,687.315 1706.21,702.416 1706.77,684.46 1707.32,684.422 1707.88,683.787 1708.44,701.759 1709,685.429 1709.56,699.961 1710.12,730.003 1710.68,761.031 1711.24,756.213 1711.8,753.828 1712.36,764.966 1712.92,726.086 1713.48,739.972 1714.04,702.83 1714.6,747.284 1715.15,741.028 1715.71,750.899 1716.27,735.08 1716.83,747.127 1717.39,761.517 1717.95,790.279 1718.51,783.656 1719.07,746.08 1719.63,742.576 1720.19,722.344 1720.75,685.739 1721.31,702.589 1721.87,666.527 1722.42,650.555 1722.98,698.289 1723.54,681.434 1724.1,696.247 1724.66,715.201 1725.22,702.591 1725.78,718.083 1726.34,720.815 1726.9,721.405 1727.46,716.093 1728.02,726.417 1728.58,720.528 1729.14,703.812 1729.69,672.938 1730.25,672.076 1730.81,689.061 1731.37,721.149 1731.93,687.647 1732.49,670.871 1733.05,705.366 1733.61,685.272 1734.17,701.129 1734.73,651.74 1735.29,618.063 1735.85,656.486 1736.41,659.368 1736.97,646.508 1737.52,649.815 1738.08,604.056 1738.64,622.675 1739.2,595.161 1739.76,617.318 1740.32,621.269 1740.88,624.289 1741.44,628.165 1742,632.619 1742.56,634.669 1743.12,670.352 1743.68,672.622 1744.24,669.635 1744.79,689.73 1745.35,687.074 1745.91,670.605 1746.47,688.967 1747.03,722.937 1747.59,720.465 1748.15,703.652 1748.71,731.894 1749.27,727.741 1749.83,740.378 1750.39,741.761 1750.95,693.625 1751.51,741.292 1752.06,736.637 1752.62,720.994 1753.18,717.205 1753.74,749.08 1754.3,727.926 1754.86,737.978 1755.42,737.592 1755.98,699.494 1756.54,683.606 1757.1,652.158 1757.66,652.252 1758.22,668.3 1758.78,684.981 1759.34,671.399 1759.89,660.61 1760.45,647.16 1761.01,619.102 1761.57,621.372 1762.13,593.496 1762.69,612.924 1763.25,615.713 1763.81,621.712 1764.37,609.827 1764.93,610.375 1765.49,611.342 1766.05,615.852 1766.61,619.687 1767.16,656.126 1767.72,675.33 1768.28,675.46 1768.84,720.865 1769.4,721.622 1769.96,755.984 1770.52,815.083 1771.08,838.689 1771.64,782.831 1772.2,759.679 1772.76,769.141 1773.32,735.394 1773.88,731.67 1774.43,715.195 1774.99,652.87 1775.55,653.354 1776.11,655.698 1776.67,644.765 1777.23,661.809 1777.79,682.037 1778.35,701.392 1778.91,714.966 1779.47,662.956 1780.03,696.326 1780.59,693.051 1781.15,689.064 1781.71,686.036 1782.26,687.978 1782.82,655.196 1783.38,657.586 1783.94,638.949 1784.5,626.059 1785.06,647.256 1785.62,648.632 1786.18,651.464 1786.74,669.95 1787.3,688.232 1787.86,688.609 1788.42,704.588 1788.98,704.825 1789.53,703.162 1790.09,734.076 1790.65,746.974 1791.21,727.264 1791.77,707.19 1792.33,705.011 1792.89,725.028 1793.45,725.842 1794.01,720.253 1794.57,686.128 1795.13,687.933 1795.69,611.039 1796.25,615.19 1796.8,634.843 1797.36,651.817 1797.92,672.07 1798.48,689.705 1799.04,673.098 1799.6,671.853 1800.16,721.388 1800.72,737.249 1801.28,716.48 1801.84,700.984 1802.4,695.817 1802.96,709.759 1803.52,679.316 1804.08,713.942 1804.63,714.421 1805.19,730.835 1805.75,731.462 1806.31,747.632 1806.87,744.749 1807.43,773.716 1807.99,797.482 1808.55,777.256 1809.11,723.1 1809.67,720.114 1810.23,699.94 1810.79,635.343 1811.35,638.704 1811.9,624.293 1812.46,643.87 1813.02,657.282 1813.58,608.52 1814.14,630.238 1814.7,632.549 1815.26,634.797 1815.82,620.316 1816.38,625.203 1816.94,661.707 1817.5,666.855 1818.06,716.19 1818.62,747.93 1819.18,728.866 1819.73,744.87 1820.29,712.797 1820.85,726.256 1821.41,707.111 1821.97,709.02 1822.53,706.208 1823.09,721.256 1823.65,751.592 1824.21,713.588 1824.77,714.21 1825.33,746.646 1825.89,742.34 1826.45,722.1 1827,721.393 1827.56,703.934 1828.12,700.32 1828.68,667.795 1829.24,700.688 1829.8,700.24 1830.36,700.113 1830.92,697.15 1831.48,682.297 1832.04,684.364 1832.6,699.266 1833.16,730.626 1833.72,727.365 1834.27,727.056 1834.83,740.131 1835.39,738.376 1835.95,736.521 1836.51,748.866 1837.07,758.272 1837.63,755.126 1838.19,747.951 \"/>\n<path clip-path=\"url(#clip973)\" d=\"M720.247 690.898 L720.806 690.898 L721.365 690.898 L721.924 690.898 L722.484 690.898 L723.043 690.898 L723.602 690.898 L724.161 690.898 L724.721 690.898 L725.28 690.898 L725.839 690.898 L726.398 690.898 L726.958 690.898 L727.517 690.898 L728.076 690.898 L728.635 690.898 L729.195 690.898 L729.754 690.898 L730.313 690.898 L730.872 690.898 L731.432 690.898 L731.991 690.898 L732.55 690.898 L733.109 690.898 L733.669 690.898 L734.228 690.898 L734.787 690.898 L735.346 690.898 L735.906 690.898 L736.465 690.898 L737.024 690.898 L737.583 690.898 L738.143 690.898 L738.702 690.898 L739.261 690.898 L739.82 690.898 L740.38 690.898 L740.939 690.898 L741.498 690.898 L742.057 690.898 L742.617 690.898 L743.176 690.898 L743.735 690.898 L744.294 690.898 L744.854 690.898 L745.413 690.898 L745.972 690.898 L746.531 690.898 L747.091 690.898 L747.65 690.898 L748.209 690.898 L748.768 690.898 L749.328 690.898 L749.887 690.898 L750.446 690.898 L751.005 690.898 L751.565 690.898 L752.124 690.898 L752.683 690.898 L753.242 690.898 L753.802 690.898 L754.361 690.898 L754.92 690.898 L755.479 690.898 L756.039 690.898 L756.598 690.898 L757.157 690.898 L757.716 690.898 L758.276 690.898 L758.835 690.898 L759.394 690.898 L759.953 690.898 L760.513 690.898 L761.072 690.898 L761.631 690.898 L762.19 690.898 L762.75 690.898 L763.309 690.898 L763.868 690.898 L764.427 690.898 L764.987 690.898 L765.546 690.898 L766.105 690.898 L766.664 690.898 L767.224 690.898 L767.783 690.898 L768.342 690.898 L768.901 690.898 L769.461 690.898 L770.02 690.898 L770.579 690.898 L771.138 690.898 L771.698 690.898 L772.257 690.898 L772.816 690.898 L773.375 690.898 L773.935 690.898 L774.494 690.898 L775.053 690.898 L775.612 690.898 L776.172 690.898 L776.731 690.898 L777.29 690.898 L777.849 690.898 L778.409 690.898 L778.968 690.898 L779.527 690.898 L780.086 690.898 L780.646 690.898 L781.205 690.898 L781.764 690.898 L782.323 690.898 L782.883 690.898 L783.442 690.898 L784.001 690.898 L784.56 690.898 L785.12 690.898 L785.679 690.898 L786.238 690.898 L786.797 690.898 L787.357 690.898 L787.916 690.898 L788.475 690.898 L789.034 690.898 L789.594 690.898 L790.153 690.898 L790.712 690.898 L791.271 690.898 L791.831 690.898 L792.39 690.898 L792.949 690.898 L793.508 690.898 L794.068 690.898 L794.627 690.898 L795.186 690.898 L795.745 690.898 L796.305 690.898 L796.864 690.898 L797.423 690.898 L797.982 690.898 L798.542 690.898 L799.101 690.898 L799.66 690.898 L800.219 690.898 L800.779 690.898 L801.338 690.898 L801.897 690.898 L802.456 690.898 L803.016 690.898 L803.575 690.898 L804.134 690.898 L804.693 690.898 L805.253 690.898 L805.812 690.898 L806.371 690.898 L806.931 690.898 L807.49 690.898 L808.049 690.898 L808.608 690.898 L809.168 690.898 L809.727 690.898 L810.286 690.898 L810.845 690.898 L811.405 690.898 L811.964 690.898 L812.523 690.898 L813.082 690.898 L813.642 690.898 L814.201 690.898 L814.76 690.898 L815.319 690.898 L815.879 690.898 L816.438 690.898 L816.997 690.898 L817.556 690.898 L818.116 690.898 L818.675 690.898 L819.234 690.898 L819.793 690.898 L820.353 690.898 L820.912 690.898 L821.471 690.898 L822.03 690.898 L822.59 690.898 L823.149 690.898 L823.708 690.898 L824.267 690.898 L824.827 690.898 L825.386 690.898 L825.945 690.898 L826.504 690.898 L827.064 690.898 L827.623 690.898 L828.182 690.898 L828.741 690.898 L829.301 690.898 L829.86 690.898 L830.419 690.898 L830.978 690.898 L831.538 690.898 L832.097 690.898 L832.656 690.898 L833.215 690.898 L833.775 690.898 L834.334 690.898 L834.893 690.898 L835.452 690.898 L836.012 690.898 L836.571 690.898 L837.13 690.898 L837.689 690.898 L838.249 690.898 L838.808 690.898 L839.367 690.898 L839.926 690.898 L840.486 690.898 L841.045 690.898 L841.604 690.898 L842.163 690.898 L842.723 690.898 L843.282 690.898 L843.841 690.898 L844.4 690.898 L844.96 690.898 L845.519 690.898 L846.078 690.898 L846.637 690.898 L847.197 690.898 L847.756 690.898 L848.315 690.898 L848.874 690.898 L849.434 690.898 L849.993 690.898 L850.552 690.898 L851.111 690.898 L851.671 690.898 L852.23 690.898 L852.789 690.898 L853.348 690.898 L853.908 690.898 L854.467 690.898 L855.026 690.898 L855.585 690.898 L856.145 690.898 L856.704 690.898 L857.263 690.898 L857.822 690.898 L858.382 690.898 L858.941 690.898 L859.5 690.898 L860.059 690.898 L860.619 690.898 L861.178 690.898 L861.737 690.898 L862.296 690.898 L862.856 690.898 L863.415 690.898 L863.974 690.898 L864.533 690.898 L865.093 690.898 L865.652 690.898 L866.211 690.898 L866.77 690.898 L867.33 690.898 L867.889 690.898 L868.448 690.898 L869.007 690.898 L869.567 690.898 L870.126 690.898 L870.685 690.898 L871.244 690.898 L871.804 690.898 L872.363 690.898 L872.922 690.898 L873.481 690.898 L874.041 690.898 L874.6 690.898 L875.159 690.898 L875.718 690.898 L876.278 690.898 L876.837 690.898 L877.396 690.898 L877.955 690.898 L878.515 690.898 L879.074 690.898 L879.633 690.898 L880.192 690.898 L880.752 690.898 L881.311 690.898 L881.87 690.898 L882.429 690.898 L882.989 690.898 L883.548 690.898 L884.107 690.898 L884.666 690.898 L885.226 690.898 L885.785 690.898 L886.344 690.898 L886.903 690.898 L887.463 690.898 L888.022 690.898 L888.581 690.898 L889.14 690.898 L889.7 690.898 L890.259 690.898 L890.818 690.898 L891.377 690.898 L891.937 690.898 L892.496 690.898 L893.055 690.898 L893.614 690.898 L894.174 690.898 L894.733 690.898 L895.292 690.898 L895.851 690.898 L896.411 690.898 L896.97 690.898 L897.529 690.898 L898.088 690.898 L898.648 690.898 L899.207 690.898 L899.766 690.898 L900.325 690.898 L900.885 690.898 L901.444 690.898 L902.003 690.898 L902.562 690.898 L903.122 690.898 L903.681 690.898 L904.24 690.898 L904.799 690.898 L905.359 690.898 L905.918 690.898 L906.477 690.898 L907.036 690.898 L907.596 690.898 L908.155 690.898 L908.714 690.898 L909.273 690.898 L909.833 690.898 L910.392 690.898 L910.951 690.898 L911.51 690.898 L912.07 690.898 L912.629 690.898 L913.188 690.898 L913.747 690.898 L914.307 690.898 L914.866 690.898 L915.425 690.898 L915.984 690.898 L916.544 690.898 L917.103 690.898 L917.662 690.898 L918.221 690.898 L918.781 690.898 L919.34 690.898 L919.899 690.898 L920.458 690.898 L921.018 690.898 L921.577 690.898 L922.136 690.898 L922.695 690.898 L923.255 690.898 L923.814 690.898 L924.373 690.898 L924.932 690.898 L925.492 690.898 L926.051 690.898 L926.61 690.898 L927.169 690.898 L927.729 690.898 L928.288 690.898 L928.847 690.898 L929.406 690.898 L929.966 690.898 L930.525 690.898 L931.084 690.898 L931.644 690.898 L932.203 690.898 L932.762 690.898 L933.321 690.898 L933.881 690.898 L934.44 690.898 L934.999 690.898 L935.558 690.898 L936.118 690.898 L936.677 690.898 L937.236 690.898 L937.795 690.898 L938.355 690.898 L938.914 690.898 L939.473 690.898 L940.032 690.898 L940.592 690.898 L941.151 690.898 L941.71 690.898 L942.269 690.898 L942.829 690.898 L943.388 690.898 L943.947 690.898 L944.506 690.898 L945.066 690.898 L945.625 690.898 L946.184 690.898 L946.743 690.898 L947.303 690.898 L947.862 690.898 L948.421 690.898 L948.98 690.898 L949.54 690.898 L950.099 690.898 L950.658 690.898 L951.217 690.898 L951.777 690.898 L952.336 690.898 L952.895 690.898 L953.454 690.898 L954.014 690.898 L954.573 690.898 L955.132 690.898 L955.691 690.898 L956.251 690.898 L956.81 690.898 L957.369 690.898 L957.928 690.898 L958.488 690.898 L959.047 690.898 L959.606 690.898 L960.165 690.898 L960.725 690.898 L961.284 690.898 L961.843 690.898 L962.402 690.898 L962.962 690.898 L963.521 690.898 L964.08 690.898 L964.639 690.898 L965.199 690.898 L965.758 690.898 L966.317 690.898 L966.876 690.898 L967.436 690.898 L967.995 690.898 L968.554 690.898 L969.113 690.898 L969.673 690.898 L970.232 690.898 L970.791 690.898 L971.35 690.898 L971.91 690.898 L972.469 690.898 L973.028 690.898 L973.587 690.898 L974.147 690.898 L974.706 690.898 L975.265 690.898 L975.824 690.898 L976.384 690.898 L976.943 690.898 L977.502 690.898 L978.061 690.898 L978.621 690.898 L979.18 690.898 L979.739 690.898 L980.298 690.898 L980.858 690.898 L981.417 690.898 L981.976 690.898 L982.535 690.898 L983.095 690.898 L983.654 690.898 L984.213 690.898 L984.772 690.898 L985.332 690.898 L985.891 690.898 L986.45 690.898 L987.009 690.898 L987.569 690.898 L988.128 690.898 L988.687 690.898 L989.246 690.898 L989.806 690.898 L990.365 690.898 L990.924 690.898 L991.483 690.898 L992.043 690.898 L992.602 690.898 L993.161 690.898 L993.72 690.898 L994.28 690.898 L994.839 690.898 L995.398 690.898 L995.957 690.898 L996.517 690.898 L997.076 690.898 L997.635 690.898 L998.194 690.898 L998.754 690.898 L999.313 690.898 L999.872 690.898 L1000.43 690.898 L1000.99 690.898 L1001.55 690.898 L1002.11 690.898 L1002.67 690.898 L1003.23 690.898 L1003.79 690.898 L1004.35 690.898 L1004.91 690.898 L1005.46 690.898 L1006.02 690.898 L1006.58 690.898 L1007.14 690.898 L1007.7 690.898 L1008.26 690.898 L1008.82 690.898 L1009.38 690.898 L1009.94 690.898 L1010.5 690.898 L1011.06 690.898 L1011.62 690.898 L1012.18 690.898 L1012.73 690.898 L1013.29 690.898 L1013.85 690.898 L1014.41 690.898 L1014.97 690.898 L1015.53 690.898 L1016.09 690.898 L1016.65 690.898 L1017.21 690.898 L1017.77 690.898 L1018.33 690.898 L1018.89 690.898 L1019.45 690.898 L1020.01 690.898 L1020.56 690.898 L1021.12 690.898 L1021.68 690.898 L1022.24 690.898 L1022.8 690.898 L1023.36 690.898 L1023.92 690.898 L1024.48 690.898 L1025.04 690.898 L1025.6 690.898 L1026.16 690.898 L1026.72 690.898 L1027.28 690.898 L1027.83 690.898 L1028.39 690.898 L1028.95 690.898 L1029.51 690.898 L1030.07 690.898 L1030.63 690.898 L1031.19 690.898 L1031.75 690.898 L1032.31 690.898 L1032.87 690.898 L1033.43 690.898 L1033.99 690.898 L1034.55 690.898 L1035.1 690.898 L1035.66 690.898 L1036.22 690.898 L1036.78 690.898 L1037.34 690.898 L1037.9 690.898 L1038.46 690.898 L1039.02 690.898 L1039.58 690.898 L1040.14 690.898 L1040.7 690.898 L1041.26 690.898 L1041.82 690.898 L1042.38 690.898 L1042.93 690.898 L1043.49 690.898 L1044.05 690.898 L1044.61 690.898 L1045.17 690.898 L1045.73 690.898 L1046.29 690.898 L1046.85 690.898 L1047.41 690.898 L1047.97 690.898 L1048.53 690.898 L1049.09 690.898 L1049.65 690.898 L1050.2 690.898 L1050.76 690.898 L1051.32 690.898 L1051.88 690.898 L1052.44 690.898 L1053 690.898 L1053.56 690.898 L1054.12 690.898 L1054.68 690.898 L1055.24 690.898 L1055.8 690.898 L1056.36 690.898 L1056.92 690.898 L1057.48 690.898 L1058.03 690.898 L1058.59 690.898 L1059.15 690.898 L1059.71 690.898 L1060.27 690.898 L1060.83 690.898 L1061.39 690.898 L1061.95 690.898 L1062.51 690.898 L1063.07 690.898 L1063.63 690.898 L1064.19 690.898 L1064.75 690.898 L1065.3 690.898 L1065.86 690.898 L1066.42 690.898 L1066.98 690.898 L1067.54 690.898 L1068.1 690.898 L1068.66 690.898 L1069.22 690.898 L1069.78 690.898 L1070.34 690.898 L1070.9 690.898 L1071.46 690.898 L1072.02 690.898 L1072.57 690.898 L1073.13 690.898 L1073.69 690.898 L1074.25 690.898 L1074.81 690.898 L1075.37 690.898 L1075.93 690.898 L1076.49 690.898 L1077.05 690.898 L1077.61 690.898 L1078.17 690.898 L1078.73 690.898 L1079.29 690.898 L1079.85 690.898 L1080.4 690.898 L1080.96 690.898 L1081.52 690.898 L1082.08 690.898 L1082.64 690.898 L1083.2 690.898 L1083.76 690.898 L1084.32 690.898 L1084.88 690.898 L1085.44 690.898 L1086 690.898 L1086.56 690.898 L1087.12 690.898 L1087.67 690.898 L1088.23 690.898 L1088.79 690.898 L1089.35 690.898 L1089.91 690.898 L1090.47 690.898 L1091.03 690.898 L1091.59 690.898 L1092.15 690.898 L1092.71 690.898 L1093.27 690.898 L1093.83 690.898 L1094.39 690.898 L1094.94 690.898 L1095.5 690.898 L1096.06 690.898 L1096.62 690.898 L1097.18 690.898 L1097.74 690.898 L1098.3 690.898 L1098.86 690.898 L1099.42 690.898 L1099.98 690.898 L1100.54 690.898 L1101.1 690.898 L1101.66 690.898 L1102.22 690.898 L1102.77 690.898 L1103.33 690.898 L1103.89 690.898 L1104.45 690.898 L1105.01 690.898 L1105.57 690.898 L1106.13 690.898 L1106.69 690.898 L1107.25 690.898 L1107.81 690.898 L1108.37 690.898 L1108.93 690.898 L1109.49 690.898 L1110.04 690.898 L1110.6 690.898 L1111.16 690.898 L1111.72 690.898 L1112.28 690.898 L1112.84 690.898 L1113.4 690.898 L1113.96 690.898 L1114.52 690.898 L1115.08 690.898 L1115.64 690.898 L1116.2 690.898 L1116.76 690.898 L1117.31 690.898 L1117.87 690.898 L1118.43 690.898 L1118.99 690.898 L1119.55 690.898 L1120.11 690.898 L1120.67 690.898 L1121.23 690.898 L1121.79 690.898 L1122.35 690.898 L1122.91 690.898 L1123.47 690.898 L1124.03 690.898 L1124.59 690.898 L1125.14 690.898 L1125.7 690.898 L1126.26 690.898 L1126.82 690.898 L1127.38 690.898 L1127.94 690.898 L1128.5 690.898 L1129.06 690.898 L1129.62 690.898 L1130.18 690.898 L1130.74 690.898 L1131.3 690.898 L1131.86 690.898 L1132.41 690.898 L1132.97 690.898 L1133.53 690.898 L1134.09 690.898 L1134.65 690.898 L1135.21 690.898 L1135.77 690.898 L1136.33 690.898 L1136.89 690.898 L1137.45 690.898 L1138.01 690.898 L1138.57 690.898 L1139.13 690.898 L1139.68 690.898 L1140.24 690.898 L1140.8 690.898 L1141.36 690.898 L1141.92 690.898 L1142.48 690.898 L1143.04 690.898 L1143.6 690.898 L1144.16 690.898 L1144.72 690.898 L1145.28 690.898 L1145.84 690.898 L1146.4 690.898 L1146.96 690.898 L1147.51 690.898 L1148.07 690.898 L1148.63 690.898 L1149.19 690.898 L1149.75 690.898 L1150.31 690.898 L1150.87 690.898 L1151.43 690.898 L1151.99 690.898 L1152.55 690.898 L1153.11 690.898 L1153.67 690.898 L1154.23 690.898 L1154.78 690.898 L1155.34 690.898 L1155.9 690.898 L1156.46 690.898 L1157.02 690.898 L1157.58 690.898 L1158.14 690.898 L1158.7 690.898 L1159.26 690.898 L1159.82 690.898 L1160.38 690.898 L1160.94 690.898 L1161.5 690.898 L1162.05 690.898 L1162.61 690.898 L1163.17 690.898 L1163.73 690.898 L1164.29 690.898 L1164.85 690.898 L1165.41 690.898 L1165.97 690.898 L1166.53 690.898 L1167.09 690.898 L1167.65 690.898 L1168.21 690.898 L1168.77 690.898 L1169.33 690.898 L1169.88 690.898 L1170.44 690.898 L1171 690.898 L1171.56 690.898 L1172.12 690.898 L1172.68 690.898 L1173.24 690.898 L1173.8 690.898 L1174.36 690.898 L1174.92 690.898 L1175.48 690.898 L1176.04 690.898 L1176.6 690.898 L1177.15 690.898 L1177.71 690.898 L1178.27 690.898 L1178.83 690.898 L1179.39 690.898 L1179.95 690.898 L1180.51 690.898 L1181.07 690.898 L1181.63 690.898 L1182.19 690.898 L1182.75 690.898 L1183.31 690.898 L1183.87 690.898 L1184.43 690.898 L1184.98 690.898 L1185.54 690.898 L1186.1 690.898 L1186.66 690.898 L1187.22 690.898 L1187.78 690.898 L1188.34 690.898 L1188.9 690.898 L1189.46 690.898 L1190.02 690.898 L1190.58 690.898 L1191.14 690.898 L1191.7 690.898 L1192.25 690.898 L1192.81 690.898 L1193.37 690.898 L1193.93 690.898 L1194.49 690.898 L1195.05 690.898 L1195.61 690.898 L1196.17 690.898 L1196.73 690.898 L1197.29 690.898 L1197.85 690.898 L1198.41 690.898 L1198.97 690.898 L1199.52 690.898 L1200.08 690.898 L1200.64 690.898 L1201.2 690.898 L1201.76 690.898 L1202.32 690.898 L1202.88 690.898 L1203.44 690.898 L1204 690.898 L1204.56 690.898 L1205.12 690.898 L1205.68 690.898 L1206.24 690.898 L1206.8 690.898 L1207.35 690.898 L1207.91 690.898 L1208.47 690.898 L1209.03 690.898 L1209.59 690.898 L1210.15 690.898 L1210.71 690.898 L1211.27 690.898 L1211.83 690.898 L1212.39 690.898 L1212.95 690.898 L1213.51 690.898 L1214.07 690.898 L1214.62 690.898 L1215.18 690.898 L1215.74 690.898 L1216.3 690.898 L1216.86 690.898 L1217.42 690.898 L1217.98 690.898 L1218.54 690.898 L1219.1 690.898 L1219.66 690.898 L1220.22 690.898 L1220.78 690.898 L1221.34 690.898 L1221.89 690.898 L1222.45 690.898 L1223.01 690.898 L1223.57 690.898 L1224.13 690.898 L1224.69 690.898 L1225.25 690.898 L1225.81 690.898 L1226.37 690.898 L1226.93 690.898 L1227.49 690.898 L1228.05 690.898 L1228.61 690.898 L1229.17 690.898 L1229.72 690.898 L1230.28 690.898 L1230.84 690.898 L1231.4 690.898 L1231.96 690.898 L1232.52 690.898 L1233.08 690.898 L1233.64 690.898 L1234.2 690.898 L1234.76 690.898 L1235.32 690.898 L1235.88 690.898 L1236.44 690.898 L1236.99 690.898 L1237.55 690.898 L1238.11 690.898 L1238.67 690.898 L1239.23 690.898 L1239.79 690.898 L1240.35 690.898 L1240.91 690.898 L1241.47 690.898 L1242.03 690.898 L1242.59 690.898 L1243.15 690.898 L1243.71 690.898 L1244.26 690.898 L1244.82 690.898 L1245.38 690.898 L1245.94 690.898 L1246.5 690.898 L1247.06 690.898 L1247.62 690.898 L1248.18 690.898 L1248.74 690.898 L1249.3 690.898 L1249.86 690.898 L1250.42 690.898 L1250.98 690.898 L1251.54 690.898 L1252.09 690.898 L1252.65 690.898 L1253.21 690.898 L1253.77 690.898 L1254.33 690.898 L1254.89 690.898 L1255.45 690.898 L1256.01 690.898 L1256.57 690.898 L1257.13 690.898 L1257.69 690.898 L1258.25 690.898 L1258.81 690.898 L1259.36 690.898 L1259.92 690.898 L1260.48 690.898 L1261.04 690.898 L1261.6 690.898 L1262.16 690.898 L1262.72 690.898 L1263.28 690.898 L1263.84 690.898 L1264.4 690.898 L1264.96 690.898 L1265.52 690.898 L1266.08 690.898 L1266.63 690.898 L1267.19 690.898 L1267.75 690.898 L1268.31 690.898 L1268.87 690.898 L1269.43 690.898 L1269.99 690.898 L1270.55 690.898 L1271.11 690.898 L1271.67 690.898 L1272.23 690.898 L1272.79 690.898 L1273.35 690.898 L1273.91 690.898 L1274.46 690.898 L1275.02 690.898 L1275.58 690.898 L1276.14 690.898 L1276.7 690.898 L1277.26 690.898 L1277.82 690.898 L1278.38 690.898 L1278.94 690.898 L1279.5 690.898 L1280.06 690.898 L1280.62 690.898 L1281.18 690.898 L1281.73 690.898 L1282.29 690.898 L1282.85 690.898 L1283.41 690.898 L1283.97 690.898 L1284.53 690.898 L1285.09 690.898 L1285.65 690.898 L1286.21 690.898 L1286.77 690.898 L1287.33 690.898 L1287.89 690.898 L1288.45 690.898 L1289 690.898 L1289.56 690.898 L1290.12 690.898 L1290.68 690.898 L1291.24 690.898 L1291.8 690.898 L1292.36 690.898 L1292.92 690.898 L1293.48 690.898 L1294.04 690.898 L1294.6 690.898 L1295.16 690.898 L1295.72 690.898 L1296.28 690.898 L1296.83 690.898 L1297.39 690.898 L1297.95 690.898 L1298.51 690.898 L1299.07 690.898 L1299.63 690.898 L1300.19 690.898 L1300.75 690.898 L1301.31 690.898 L1301.87 690.898 L1302.43 690.898 L1302.99 690.898 L1303.55 690.898 L1304.1 690.898 L1304.66 690.898 L1305.22 690.898 L1305.78 690.898 L1306.34 690.898 L1306.9 690.898 L1307.46 690.898 L1308.02 690.898 L1308.58 690.898 L1309.14 690.898 L1309.7 690.898 L1310.26 690.898 L1310.82 690.898 L1311.38 690.898 L1311.93 690.898 L1312.49 690.898 L1313.05 690.898 L1313.61 690.898 L1314.17 690.898 L1314.73 690.898 L1315.29 690.898 L1315.85 690.898 L1316.41 690.898 L1316.97 690.898 L1317.53 690.898 L1318.09 690.898 L1318.65 690.898 L1319.2 690.898 L1319.76 690.898 L1320.32 690.898 L1320.88 690.898 L1321.44 690.898 L1322 690.898 L1322.56 690.898 L1323.12 690.898 L1323.68 690.898 L1324.24 690.898 L1324.8 690.898 L1325.36 690.898 L1325.92 690.898 L1326.47 690.898 L1327.03 690.898 L1327.59 690.898 L1328.15 690.898 L1328.71 690.898 L1329.27 690.898 L1329.83 690.898 L1330.39 690.898 L1330.95 690.898 L1331.51 690.898 L1332.07 690.898 L1332.63 690.898 L1333.19 690.898 L1333.75 690.898 L1334.3 690.898 L1334.86 690.898 L1335.42 690.898 L1335.98 690.898 L1336.54 690.898 L1337.1 690.898 L1337.66 690.898 L1338.22 690.898 L1338.78 690.898 L1339.34 690.898 L1339.9 690.898 L1340.46 690.898 L1341.02 690.898 L1341.57 690.898 L1342.13 690.898 L1342.69 690.898 L1343.25 690.898 L1343.81 690.898 L1344.37 690.898 L1344.93 690.898 L1345.49 690.898 L1346.05 690.898 L1346.61 690.898 L1347.17 690.898 L1347.73 690.898 L1348.29 690.898 L1348.84 690.898 L1349.4 690.898 L1349.96 690.898 L1350.52 690.898 L1351.08 690.898 L1351.64 690.898 L1352.2 690.898 L1352.76 690.898 L1353.32 690.898 L1353.88 690.898 L1354.44 690.898 L1355 690.898 L1355.56 690.898 L1356.12 690.898 L1356.67 690.898 L1357.23 690.898 L1357.79 690.898 L1358.35 690.898 L1358.91 690.898 L1359.47 690.898 L1360.03 690.898 L1360.59 690.898 L1361.15 690.898 L1361.71 690.898 L1362.27 690.898 L1362.83 690.898 L1363.39 690.898 L1363.94 690.898 L1364.5 690.898 L1365.06 690.898 L1365.62 690.898 L1366.18 690.898 L1366.74 690.898 L1367.3 690.898 L1367.86 690.898 L1368.42 690.898 L1368.98 690.898 L1369.54 690.898 L1370.1 690.898 L1370.66 690.898 L1371.21 690.898 L1371.77 690.898 L1372.33 690.898 L1372.89 690.898 L1373.45 690.898 L1374.01 690.898 L1374.57 690.898 L1375.13 690.898 L1375.69 690.898 L1376.25 690.898 L1376.81 690.898 L1377.37 690.898 L1377.93 690.898 L1378.49 690.898 L1379.04 690.898 L1379.6 690.898 L1380.16 690.898 L1380.72 690.898 L1381.28 690.898 L1381.84 690.898 L1382.4 690.898 L1382.96 690.898 L1383.52 690.898 L1384.08 690.898 L1384.64 690.898 L1385.2 690.898 L1385.76 690.898 L1386.31 690.898 L1386.87 690.898 L1387.43 690.898 L1387.99 690.898 L1388.55 690.898 L1389.11 690.898 L1389.67 690.898 L1390.23 690.898 L1390.79 690.898 L1391.35 690.898 L1391.91 690.898 L1392.47 690.898 L1393.03 690.898 L1393.58 690.898 L1394.14 690.898 L1394.7 690.898 L1395.26 690.898 L1395.82 690.898 L1396.38 690.898 L1396.94 690.898 L1397.5 690.898 L1398.06 690.898 L1398.62 690.898 L1399.18 690.898 L1399.74 690.898 L1400.3 690.898 L1400.86 690.898 L1401.41 690.898 L1401.97 690.898 L1402.53 690.898 L1403.09 690.898 L1403.65 690.898 L1404.21 690.898 L1404.77 690.898 L1405.33 690.898 L1405.89 690.898 L1406.45 690.898 L1407.01 690.898 L1407.57 690.898 L1408.13 690.898 L1408.68 690.898 L1409.24 690.898 L1409.8 690.898 L1410.36 690.898 L1410.92 690.898 L1411.48 690.898 L1412.04 690.898 L1412.6 690.898 L1413.16 690.898 L1413.72 690.898 L1414.28 690.898 L1414.84 690.898 L1415.4 690.898 L1415.95 690.898 L1416.51 690.898 L1417.07 690.898 L1417.63 690.898 L1418.19 690.898 L1418.75 690.898 L1419.31 690.898 L1419.87 690.898 L1420.43 690.898 L1420.99 690.898 L1421.55 690.898 L1422.11 690.898 L1422.67 690.898 L1423.23 690.898 L1423.78 690.898 L1424.34 690.898 L1424.9 690.898 L1425.46 690.898 L1426.02 690.898 L1426.58 690.898 L1427.14 690.898 L1427.7 690.898 L1428.26 690.898 L1428.82 690.898 L1429.38 690.898 L1429.94 690.898 L1430.5 690.898 L1431.05 690.898 L1431.61 690.898 L1432.17 690.898 L1432.73 690.898 L1433.29 690.898 L1433.85 690.898 L1434.41 690.898 L1434.97 690.898 L1435.53 690.898 L1436.09 690.898 L1436.65 690.898 L1437.21 690.898 L1437.77 690.898 L1438.33 690.898 L1438.88 690.898 L1439.44 690.898 L1440 690.898 L1440.56 690.898 L1441.12 690.898 L1441.68 690.898 L1442.24 690.898 L1442.8 690.898 L1443.36 690.898 L1443.92 690.898 L1444.48 690.898 L1445.04 690.898 L1445.6 690.898 L1446.15 690.898 L1446.71 690.898 L1447.27 690.898 L1447.83 690.898 L1448.39 690.898 L1448.95 690.898 L1449.51 690.898 L1450.07 690.898 L1450.63 690.898 L1451.19 690.898 L1451.75 690.898 L1452.31 690.898 L1452.87 690.898 L1453.42 690.898 L1453.98 690.898 L1454.54 690.898 L1455.1 690.898 L1455.66 690.898 L1456.22 690.898 L1456.78 690.898 L1457.34 690.898 L1457.9 690.898 L1458.46 690.898 L1459.02 690.898 L1459.58 690.898 L1460.14 690.898 L1460.7 690.898 L1461.25 690.898 L1461.81 690.898 L1462.37 690.898 L1462.93 690.898 L1463.49 690.898 L1464.05 690.898 L1464.61 690.898 L1465.17 690.898 L1465.73 690.898 L1466.29 690.898 L1466.85 690.898 L1467.41 690.898 L1467.97 690.898 L1468.52 690.898 L1469.08 690.898 L1469.64 690.898 L1470.2 690.898 L1470.76 690.898 L1471.32 690.898 L1471.88 690.898 L1472.44 690.898 L1473 690.898 L1473.56 690.898 L1474.12 690.898 L1474.68 690.898 L1475.24 690.898 L1475.79 690.898 L1476.35 690.898 L1476.91 690.898 L1477.47 690.898 L1478.03 690.898 L1478.59 690.898 L1479.15 690.898 L1479.71 690.898 L1480.27 690.898 L1480.83 690.898 L1481.39 690.898 L1481.95 690.898 L1482.51 690.898 L1483.07 690.898 L1483.62 690.898 L1484.18 690.898 L1484.74 690.898 L1485.3 690.898 L1485.86 690.898 L1486.42 690.898 L1486.98 690.898 L1487.54 690.898 L1488.1 690.898 L1488.66 690.898 L1489.22 690.898 L1489.78 690.898 L1490.34 690.898 L1490.89 690.898 L1491.45 690.898 L1492.01 690.898 L1492.57 690.898 L1493.13 690.898 L1493.69 690.898 L1494.25 690.898 L1494.81 690.898 L1495.37 690.898 L1495.93 690.898 L1496.49 690.898 L1497.05 690.898 L1497.61 690.898 L1498.16 690.898 L1498.72 690.898 L1499.28 690.898 L1499.84 690.898 L1500.4 690.898 L1500.96 690.898 L1501.52 690.898 L1502.08 690.898 L1502.64 690.898 L1503.2 690.898 L1503.76 690.898 L1504.32 690.898 L1504.88 690.898 L1505.44 690.898 L1505.99 690.898 L1506.55 690.898 L1507.11 690.898 L1507.67 690.898 L1508.23 690.898 L1508.79 690.898 L1509.35 690.898 L1509.91 690.898 L1510.47 690.898 L1511.03 690.898 L1511.59 690.898 L1512.15 690.898 L1512.71 690.898 L1513.26 690.898 L1513.82 690.898 L1514.38 690.898 L1514.94 690.898 L1515.5 690.898 L1516.06 690.898 L1516.62 690.898 L1517.18 690.898 L1517.74 690.898 L1518.3 690.898 L1518.86 690.898 L1519.42 690.898 L1519.98 690.898 L1520.53 690.898 L1521.09 690.898 L1521.65 690.898 L1522.21 690.898 L1522.77 690.898 L1523.33 690.898 L1523.89 690.898 L1524.45 690.898 L1525.01 690.898 L1525.57 690.898 L1526.13 690.898 L1526.69 690.898 L1527.25 690.898 L1527.81 690.898 L1528.36 690.898 L1528.92 690.898 L1529.48 690.898 L1530.04 690.898 L1530.6 690.898 L1531.16 690.898 L1531.72 690.898 L1532.28 690.898 L1532.84 690.898 L1533.4 690.898 L1533.96 690.898 L1534.52 690.898 L1535.08 690.898 L1535.63 690.898 L1536.19 690.898 L1536.75 690.898 L1537.31 690.898 L1537.87 690.898 L1538.43 690.898 L1538.99 690.898 L1539.55 690.898 L1540.11 690.898 L1540.67 690.898 L1541.23 690.898 L1541.79 690.898 L1542.35 690.898 L1542.9 690.898 L1543.46 690.898 L1544.02 690.898 L1544.58 690.898 L1545.14 690.898 L1545.7 690.898 L1546.26 690.898 L1546.82 690.898 L1547.38 690.898 L1547.94 690.898 L1548.5 690.898 L1549.06 690.898 L1549.62 690.898 L1550.18 690.898 L1550.73 690.898 L1551.29 690.898 L1551.85 690.898 L1552.41 690.898 L1552.97 690.898 L1553.53 690.898 L1554.09 690.898 L1554.65 690.898 L1555.21 690.898 L1555.77 690.898 L1556.33 690.898 L1556.89 690.898 L1557.45 690.898 L1558 690.898 L1558.56 690.898 L1559.12 690.898 L1559.68 690.898 L1560.24 690.898 L1560.8 690.898 L1561.36 690.898 L1561.92 690.898 L1562.48 690.898 L1563.04 690.898 L1563.6 690.898 L1564.16 690.898 L1564.72 690.898 L1565.28 690.898 L1565.83 690.898 L1566.39 690.898 L1566.95 690.898 L1567.51 690.898 L1568.07 690.898 L1568.63 690.898 L1569.19 690.898 L1569.75 690.898 L1570.31 690.898 L1570.87 690.898 L1571.43 690.898 L1571.99 690.898 L1572.55 690.898 L1573.1 690.898 L1573.66 690.898 L1574.22 690.898 L1574.78 690.898 L1575.34 690.898 L1575.9 690.898 L1576.46 690.898 L1577.02 690.898 L1577.58 690.898 L1578.14 690.898 L1578.7 690.898 L1579.26 690.898 L1579.82 690.898 L1580.37 690.898 L1580.93 690.898 L1581.49 690.898 L1582.05 690.898 L1582.61 690.898 L1583.17 690.898 L1583.73 690.898 L1584.29 690.898 L1584.85 690.898 L1585.41 690.898 L1585.97 690.898 L1586.53 690.898 L1587.09 690.898 L1587.65 690.898 L1588.2 690.898 L1588.76 690.898 L1589.32 690.898 L1589.88 690.898 L1590.44 690.898 L1591 690.898 L1591.56 690.898 L1592.12 690.898 L1592.68 690.898 L1593.24 690.898 L1593.8 690.898 L1594.36 690.898 L1594.92 690.898 L1595.47 690.898 L1596.03 690.898 L1596.59 690.898 L1597.15 690.898 L1597.71 690.898 L1598.27 690.898 L1598.83 690.898 L1599.39 690.898 L1599.95 690.898 L1600.51 690.898 L1601.07 690.898 L1601.63 690.898 L1602.19 690.898 L1602.74 690.898 L1603.3 690.898 L1603.86 690.898 L1604.42 690.898 L1604.98 690.898 L1605.54 690.898 L1606.1 690.898 L1606.66 690.898 L1607.22 690.898 L1607.78 690.898 L1608.34 690.898 L1608.9 690.898 L1609.46 690.898 L1610.02 690.898 L1610.57 690.898 L1611.13 690.898 L1611.69 690.898 L1612.25 690.898 L1612.81 690.898 L1613.37 690.898 L1613.93 690.898 L1614.49 690.898 L1615.05 690.898 L1615.61 690.898 L1616.17 690.898 L1616.73 690.898 L1617.29 690.898 L1617.84 690.898 L1618.4 690.898 L1618.96 690.898 L1619.52 690.898 L1620.08 690.898 L1620.64 690.898 L1621.2 690.898 L1621.76 690.898 L1622.32 690.898 L1622.88 690.898 L1623.44 690.898 L1624 690.898 L1624.56 690.898 L1625.11 690.898 L1625.67 690.898 L1626.23 690.898 L1626.79 690.898 L1627.35 690.898 L1627.91 690.898 L1628.47 690.898 L1629.03 690.898 L1629.59 690.898 L1630.15 690.898 L1630.71 690.898 L1631.27 690.898 L1631.83 690.898 L1632.39 690.898 L1632.94 690.898 L1633.5 690.898 L1634.06 690.898 L1634.62 690.898 L1635.18 690.898 L1635.74 690.898 L1636.3 690.898 L1636.86 690.898 L1637.42 690.898 L1637.98 690.898 L1638.54 690.898 L1639.1 690.898 L1639.66 690.898 L1640.21 690.898 L1640.77 690.898 L1641.33 690.898 L1641.89 690.898 L1642.45 690.898 L1643.01 690.898 L1643.57 690.898 L1644.13 690.898 L1644.69 690.898 L1645.25 690.898 L1645.81 690.898 L1646.37 690.898 L1646.93 690.898 L1647.48 690.898 L1648.04 690.898 L1648.6 690.898 L1649.16 690.898 L1649.72 690.898 L1650.28 690.898 L1650.84 690.898 L1651.4 690.898 L1651.96 690.898 L1652.52 690.898 L1653.08 690.898 L1653.64 690.898 L1654.2 690.898 L1654.76 690.898 L1655.31 690.898 L1655.87 690.898 L1656.43 690.898 L1656.99 690.898 L1657.55 690.898 L1658.11 690.898 L1658.67 690.898 L1659.23 690.898 L1659.79 690.898 L1660.35 690.898 L1660.91 690.898 L1661.47 690.898 L1662.03 690.898 L1662.58 690.898 L1663.14 690.898 L1663.7 690.898 L1664.26 690.898 L1664.82 690.898 L1665.38 690.898 L1665.94 690.898 L1666.5 690.898 L1667.06 690.898 L1667.62 690.898 L1668.18 690.898 L1668.74 690.898 L1669.3 690.898 L1669.85 690.898 L1670.41 690.898 L1670.97 690.898 L1671.53 690.898 L1672.09 690.898 L1672.65 690.898 L1673.21 690.898 L1673.77 690.898 L1674.33 690.898 L1674.89 690.898 L1675.45 690.898 L1676.01 690.898 L1676.57 690.898 L1677.13 690.898 L1677.68 690.898 L1678.24 690.898 L1678.8 690.898 L1679.36 690.898 L1679.92 690.898 L1680.48 690.898 L1681.04 690.898 L1681.6 690.898 L1682.16 690.898 L1682.72 690.898 L1683.28 690.898 L1683.84 690.898 L1684.4 690.898 L1684.95 690.898 L1685.51 690.898 L1686.07 690.898 L1686.63 690.898 L1687.19 690.898 L1687.75 690.898 L1688.31 690.898 L1688.87 690.898 L1689.43 690.898 L1689.99 690.898 L1690.55 690.898 L1691.11 690.898 L1691.67 690.898 L1692.23 690.898 L1692.78 690.898 L1693.34 690.898 L1693.9 690.898 L1694.46 690.898 L1695.02 690.898 L1695.58 690.898 L1696.14 690.898 L1696.7 690.898 L1697.26 690.898 L1697.82 690.898 L1698.38 690.898 L1698.94 690.898 L1699.5 690.898 L1700.05 690.898 L1700.61 690.898 L1701.17 690.898 L1701.73 690.898 L1702.29 690.898 L1702.85 690.898 L1703.41 690.898 L1703.97 690.898 L1704.53 690.898 L1705.09 690.898 L1705.65 690.898 L1706.21 690.898 L1706.77 690.898 L1707.32 690.898 L1707.88 690.898 L1708.44 690.898 L1709 690.898 L1709.56 690.898 L1710.12 690.898 L1710.68 690.898 L1711.24 690.898 L1711.8 690.898 L1712.36 690.898 L1712.92 690.898 L1713.48 690.898 L1714.04 690.898 L1714.6 690.898 L1715.15 690.898 L1715.71 690.898 L1716.27 690.898 L1716.83 690.898 L1717.39 690.898 L1717.95 690.898 L1718.51 690.898 L1719.07 690.898 L1719.63 690.898 L1720.19 690.898 L1720.75 690.898 L1721.31 690.898 L1721.87 690.898 L1722.42 690.898 L1722.98 690.898 L1723.54 690.898 L1724.1 690.898 L1724.66 690.898 L1725.22 690.898 L1725.78 690.898 L1726.34 690.898 L1726.9 690.898 L1727.46 690.898 L1728.02 690.898 L1728.58 690.898 L1729.14 690.898 L1729.69 690.898 L1730.25 690.898 L1730.81 690.898 L1731.37 690.898 L1731.93 690.898 L1732.49 690.898 L1733.05 690.898 L1733.61 690.898 L1734.17 690.898 L1734.73 690.898 L1735.29 690.898 L1735.85 690.898 L1736.41 690.898 L1736.97 690.898 L1737.52 690.898 L1738.08 690.898 L1738.64 690.898 L1739.2 690.898 L1739.76 690.898 L1740.32 690.898 L1740.88 690.898 L1741.44 690.898 L1742 690.898 L1742.56 690.898 L1743.12 690.898 L1743.68 690.898 L1744.24 690.898 L1744.79 690.898 L1745.35 690.898 L1745.91 690.898 L1746.47 690.898 L1747.03 690.898 L1747.59 690.898 L1748.15 690.898 L1748.71 690.898 L1749.27 690.898 L1749.83 690.898 L1750.39 690.898 L1750.95 690.898 L1751.51 690.898 L1752.06 690.898 L1752.62 690.898 L1753.18 690.898 L1753.74 690.898 L1754.3 690.898 L1754.86 690.898 L1755.42 690.898 L1755.98 690.898 L1756.54 690.898 L1757.1 690.898 L1757.66 690.898 L1758.22 690.898 L1758.78 690.898 L1759.34 690.898 L1759.89 690.898 L1760.45 690.898 L1761.01 690.898 L1761.57 690.898 L1762.13 690.898 L1762.69 690.898 L1763.25 690.898 L1763.81 690.898 L1764.37 690.898 L1764.93 690.898 L1765.49 690.898 L1766.05 690.898 L1766.61 690.898 L1767.16 690.898 L1767.72 690.898 L1768.28 690.898 L1768.84 690.898 L1769.4 690.898 L1769.96 690.898 L1770.52 690.898 L1771.08 690.898 L1771.64 690.898 L1772.2 690.898 L1772.76 690.898 L1773.32 690.898 L1773.88 690.898 L1774.43 690.898 L1774.99 690.898 L1775.55 690.898 L1776.11 690.898 L1776.67 690.898 L1777.23 690.898 L1777.79 690.898 L1778.35 690.898 L1778.91 690.898 L1779.47 690.898 L1780.03 690.898 L1780.59 690.898 L1781.15 690.898 L1781.71 690.898 L1782.26 690.898 L1782.82 690.898 L1783.38 690.898 L1783.94 690.898 L1784.5 690.898 L1785.06 690.898 L1785.62 690.898 L1786.18 690.898 L1786.74 690.898 L1787.3 690.898 L1787.86 690.898 L1788.42 690.898 L1788.98 690.898 L1789.53 690.898 L1790.09 690.898 L1790.65 690.898 L1791.21 690.898 L1791.77 690.898 L1792.33 690.898 L1792.89 690.898 L1793.45 690.898 L1794.01 690.898 L1794.57 690.898 L1795.13 690.898 L1795.69 690.898 L1796.25 690.898 L1796.8 690.898 L1797.36 690.898 L1797.92 690.898 L1798.48 690.898 L1799.04 690.898 L1799.6 690.898 L1800.16 690.898 L1800.72 690.898 L1801.28 690.898 L1801.84 690.898 L1802.4 690.898 L1802.96 690.898 L1803.52 690.898 L1804.08 690.898 L1804.63 690.898 L1805.19 690.898 L1805.75 690.898 L1806.31 690.898 L1806.87 690.898 L1807.43 690.898 L1807.99 690.898 L1808.55 690.898 L1809.11 690.898 L1809.67 690.898 L1810.23 690.898 L1810.79 690.898 L1811.35 690.898 L1811.9 690.898 L1812.46 690.898 L1813.02 690.898 L1813.58 690.898 L1814.14 690.898 L1814.7 690.898 L1815.26 690.898 L1815.82 690.898 L1816.38 690.898 L1816.94 690.898 L1817.5 690.898 L1818.06 690.898 L1818.62 690.898 L1819.18 690.898 L1819.73 690.898 L1820.29 690.898 L1820.85 690.898 L1821.41 690.898 L1821.97 690.898 L1822.53 690.898 L1823.09 690.898 L1823.65 690.898 L1824.21 690.898 L1824.77 690.898 L1825.33 690.898 L1825.89 690.898 L1826.45 690.898 L1827 690.898 L1827.56 690.898 L1828.12 690.898 L1828.68 690.898 L1829.24 690.898 L1829.8 690.898 L1830.36 690.898 L1830.92 690.898 L1831.48 690.898 L1832.04 690.898 L1832.6 690.898 L1833.16 690.898 L1833.72 690.898 L1834.27 690.898 L1834.83 690.898 L1835.39 690.898 L1835.95 690.898 L1836.51 690.898 L1837.07 690.898 L1837.63 690.898 L1838.19 690.898 L1838.19 682.367 L1837.63 682.367 L1837.07 682.367 L1836.51 682.367 L1835.95 682.367 L1835.39 682.367 L1834.83 682.367 L1834.27 682.367 L1833.72 682.367 L1833.16 682.367 L1832.6 682.367 L1832.04 682.367 L1831.48 682.367 L1830.92 682.367 L1830.36 682.367 L1829.8 682.367 L1829.24 682.367 L1828.68 682.367 L1828.12 682.367 L1827.56 682.367 L1827 682.367 L1826.45 682.367 L1825.89 682.367 L1825.33 682.367 L1824.77 682.367 L1824.21 682.367 L1823.65 682.367 L1823.09 682.367 L1822.53 682.367 L1821.97 682.367 L1821.41 682.367 L1820.85 682.367 L1820.29 682.367 L1819.73 682.367 L1819.18 682.367 L1818.62 682.367 L1818.06 682.367 L1817.5 682.367 L1816.94 682.367 L1816.38 682.367 L1815.82 682.367 L1815.26 682.367 L1814.7 682.367 L1814.14 682.367 L1813.58 682.367 L1813.02 682.367 L1812.46 682.367 L1811.9 682.367 L1811.35 682.367 L1810.79 682.367 L1810.23 682.367 L1809.67 682.367 L1809.11 682.367 L1808.55 682.367 L1807.99 682.367 L1807.43 682.367 L1806.87 682.367 L1806.31 682.367 L1805.75 682.367 L1805.19 682.367 L1804.63 682.367 L1804.08 682.367 L1803.52 682.367 L1802.96 682.367 L1802.4 682.367 L1801.84 682.367 L1801.28 682.367 L1800.72 682.367 L1800.16 682.367 L1799.6 682.367 L1799.04 682.367 L1798.48 682.367 L1797.92 682.367 L1797.36 682.367 L1796.8 682.367 L1796.25 682.367 L1795.69 682.367 L1795.13 682.367 L1794.57 682.367 L1794.01 682.367 L1793.45 682.367 L1792.89 682.367 L1792.33 682.367 L1791.77 682.367 L1791.21 682.367 L1790.65 682.367 L1790.09 682.367 L1789.53 682.367 L1788.98 682.367 L1788.42 682.367 L1787.86 682.367 L1787.3 682.367 L1786.74 682.367 L1786.18 682.367 L1785.62 682.367 L1785.06 682.367 L1784.5 682.367 L1783.94 682.367 L1783.38 682.367 L1782.82 682.367 L1782.26 682.367 L1781.71 682.367 L1781.15 682.367 L1780.59 682.367 L1780.03 682.367 L1779.47 682.367 L1778.91 682.367 L1778.35 682.367 L1777.79 682.367 L1777.23 682.367 L1776.67 682.367 L1776.11 682.367 L1775.55 682.367 L1774.99 682.367 L1774.43 682.367 L1773.88 682.367 L1773.32 682.367 L1772.76 682.367 L1772.2 682.367 L1771.64 682.367 L1771.08 682.367 L1770.52 682.367 L1769.96 682.367 L1769.4 682.367 L1768.84 682.367 L1768.28 682.367 L1767.72 682.367 L1767.16 682.367 L1766.61 682.367 L1766.05 682.367 L1765.49 682.367 L1764.93 682.367 L1764.37 682.367 L1763.81 682.367 L1763.25 682.367 L1762.69 682.367 L1762.13 682.367 L1761.57 682.367 L1761.01 682.367 L1760.45 682.367 L1759.89 682.367 L1759.34 682.367 L1758.78 682.367 L1758.22 682.367 L1757.66 682.367 L1757.1 682.367 L1756.54 682.367 L1755.98 682.367 L1755.42 682.367 L1754.86 682.367 L1754.3 682.367 L1753.74 682.367 L1753.18 682.367 L1752.62 682.367 L1752.06 682.367 L1751.51 682.367 L1750.95 682.367 L1750.39 682.367 L1749.83 682.367 L1749.27 682.367 L1748.71 682.367 L1748.15 682.367 L1747.59 682.367 L1747.03 682.367 L1746.47 682.367 L1745.91 682.367 L1745.35 682.367 L1744.79 682.367 L1744.24 682.367 L1743.68 682.367 L1743.12 682.367 L1742.56 682.367 L1742 682.367 L1741.44 682.367 L1740.88 682.367 L1740.32 682.367 L1739.76 682.367 L1739.2 682.367 L1738.64 682.367 L1738.08 682.367 L1737.52 682.367 L1736.97 682.367 L1736.41 682.367 L1735.85 682.367 L1735.29 682.367 L1734.73 682.367 L1734.17 682.367 L1733.61 682.367 L1733.05 682.367 L1732.49 682.367 L1731.93 682.367 L1731.37 682.367 L1730.81 682.367 L1730.25 682.367 L1729.69 682.367 L1729.14 682.367 L1728.58 682.367 L1728.02 682.367 L1727.46 682.367 L1726.9 682.367 L1726.34 682.367 L1725.78 682.367 L1725.22 682.367 L1724.66 682.367 L1724.1 682.367 L1723.54 682.367 L1722.98 682.367 L1722.42 682.367 L1721.87 682.367 L1721.31 682.367 L1720.75 682.367 L1720.19 682.367 L1719.63 682.367 L1719.07 682.367 L1718.51 682.367 L1717.95 682.367 L1717.39 682.367 L1716.83 682.367 L1716.27 682.367 L1715.71 682.367 L1715.15 682.367 L1714.6 682.367 L1714.04 682.367 L1713.48 682.367 L1712.92 682.367 L1712.36 682.367 L1711.8 682.367 L1711.24 682.367 L1710.68 682.367 L1710.12 682.367 L1709.56 682.367 L1709 682.367 L1708.44 682.367 L1707.88 682.367 L1707.32 682.367 L1706.77 682.367 L1706.21 682.367 L1705.65 682.367 L1705.09 682.367 L1704.53 682.367 L1703.97 682.367 L1703.41 682.367 L1702.85 682.367 L1702.29 682.367 L1701.73 682.367 L1701.17 682.367 L1700.61 682.367 L1700.05 682.367 L1699.5 682.367 L1698.94 682.367 L1698.38 682.367 L1697.82 682.367 L1697.26 682.367 L1696.7 682.367 L1696.14 682.367 L1695.58 682.367 L1695.02 682.367 L1694.46 682.367 L1693.9 682.367 L1693.34 682.367 L1692.78 682.367 L1692.23 682.367 L1691.67 682.367 L1691.11 682.367 L1690.55 682.367 L1689.99 682.367 L1689.43 682.367 L1688.87 682.367 L1688.31 682.367 L1687.75 682.367 L1687.19 682.367 L1686.63 682.367 L1686.07 682.367 L1685.51 682.367 L1684.95 682.367 L1684.4 682.367 L1683.84 682.367 L1683.28 682.367 L1682.72 682.367 L1682.16 682.367 L1681.6 682.367 L1681.04 682.367 L1680.48 682.367 L1679.92 682.367 L1679.36 682.367 L1678.8 682.367 L1678.24 682.367 L1677.68 682.367 L1677.13 682.367 L1676.57 682.367 L1676.01 682.367 L1675.45 682.367 L1674.89 682.367 L1674.33 682.367 L1673.77 682.367 L1673.21 682.367 L1672.65 682.367 L1672.09 682.367 L1671.53 682.367 L1670.97 682.367 L1670.41 682.367 L1669.85 682.367 L1669.3 682.367 L1668.74 682.367 L1668.18 682.367 L1667.62 682.367 L1667.06 682.367 L1666.5 682.367 L1665.94 682.367 L1665.38 682.367 L1664.82 682.367 L1664.26 682.367 L1663.7 682.367 L1663.14 682.367 L1662.58 682.367 L1662.03 682.367 L1661.47 682.367 L1660.91 682.367 L1660.35 682.367 L1659.79 682.367 L1659.23 682.367 L1658.67 682.367 L1658.11 682.367 L1657.55 682.367 L1656.99 682.367 L1656.43 682.367 L1655.87 682.367 L1655.31 682.367 L1654.76 682.367 L1654.2 682.367 L1653.64 682.367 L1653.08 682.367 L1652.52 682.367 L1651.96 682.367 L1651.4 682.367 L1650.84 682.367 L1650.28 682.367 L1649.72 682.367 L1649.16 682.367 L1648.6 682.367 L1648.04 682.367 L1647.48 682.367 L1646.93 682.367 L1646.37 682.367 L1645.81 682.367 L1645.25 682.367 L1644.69 682.367 L1644.13 682.367 L1643.57 682.367 L1643.01 682.367 L1642.45 682.367 L1641.89 682.367 L1641.33 682.367 L1640.77 682.367 L1640.21 682.367 L1639.66 682.367 L1639.1 682.367 L1638.54 682.367 L1637.98 682.367 L1637.42 682.367 L1636.86 682.367 L1636.3 682.367 L1635.74 682.367 L1635.18 682.367 L1634.62 682.367 L1634.06 682.367 L1633.5 682.367 L1632.94 682.367 L1632.39 682.367 L1631.83 682.367 L1631.27 682.367 L1630.71 682.367 L1630.15 682.367 L1629.59 682.367 L1629.03 682.367 L1628.47 682.367 L1627.91 682.367 L1627.35 682.367 L1626.79 682.367 L1626.23 682.367 L1625.67 682.367 L1625.11 682.367 L1624.56 682.367 L1624 682.367 L1623.44 682.367 L1622.88 682.367 L1622.32 682.367 L1621.76 682.367 L1621.2 682.367 L1620.64 682.367 L1620.08 682.367 L1619.52 682.367 L1618.96 682.367 L1618.4 682.367 L1617.84 682.367 L1617.29 682.367 L1616.73 682.367 L1616.17 682.367 L1615.61 682.367 L1615.05 682.367 L1614.49 682.367 L1613.93 682.367 L1613.37 682.367 L1612.81 682.367 L1612.25 682.367 L1611.69 682.367 L1611.13 682.367 L1610.57 682.367 L1610.02 682.367 L1609.46 682.367 L1608.9 682.367 L1608.34 682.367 L1607.78 682.367 L1607.22 682.367 L1606.66 682.367 L1606.1 682.367 L1605.54 682.367 L1604.98 682.367 L1604.42 682.367 L1603.86 682.367 L1603.3 682.367 L1602.74 682.367 L1602.19 682.367 L1601.63 682.367 L1601.07 682.367 L1600.51 682.367 L1599.95 682.367 L1599.39 682.367 L1598.83 682.367 L1598.27 682.367 L1597.71 682.367 L1597.15 682.367 L1596.59 682.367 L1596.03 682.367 L1595.47 682.367 L1594.92 682.367 L1594.36 682.367 L1593.8 682.367 L1593.24 682.367 L1592.68 682.367 L1592.12 682.367 L1591.56 682.367 L1591 682.367 L1590.44 682.367 L1589.88 682.367 L1589.32 682.367 L1588.76 682.367 L1588.2 682.367 L1587.65 682.367 L1587.09 682.367 L1586.53 682.367 L1585.97 682.367 L1585.41 682.367 L1584.85 682.367 L1584.29 682.367 L1583.73 682.367 L1583.17 682.367 L1582.61 682.367 L1582.05 682.367 L1581.49 682.367 L1580.93 682.367 L1580.37 682.367 L1579.82 682.367 L1579.26 682.367 L1578.7 682.367 L1578.14 682.367 L1577.58 682.367 L1577.02 682.367 L1576.46 682.367 L1575.9 682.367 L1575.34 682.367 L1574.78 682.367 L1574.22 682.367 L1573.66 682.367 L1573.1 682.367 L1572.55 682.367 L1571.99 682.367 L1571.43 682.367 L1570.87 682.367 L1570.31 682.367 L1569.75 682.367 L1569.19 682.367 L1568.63 682.367 L1568.07 682.367 L1567.51 682.367 L1566.95 682.367 L1566.39 682.367 L1565.83 682.367 L1565.28 682.367 L1564.72 682.367 L1564.16 682.367 L1563.6 682.367 L1563.04 682.367 L1562.48 682.367 L1561.92 682.367 L1561.36 682.367 L1560.8 682.367 L1560.24 682.367 L1559.68 682.367 L1559.12 682.367 L1558.56 682.367 L1558 682.367 L1557.45 682.367 L1556.89 682.367 L1556.33 682.367 L1555.77 682.367 L1555.21 682.367 L1554.65 682.367 L1554.09 682.367 L1553.53 682.367 L1552.97 682.367 L1552.41 682.367 L1551.85 682.367 L1551.29 682.367 L1550.73 682.367 L1550.18 682.367 L1549.62 682.367 L1549.06 682.367 L1548.5 682.367 L1547.94 682.367 L1547.38 682.367 L1546.82 682.367 L1546.26 682.367 L1545.7 682.367 L1545.14 682.367 L1544.58 682.367 L1544.02 682.367 L1543.46 682.367 L1542.9 682.367 L1542.35 682.367 L1541.79 682.367 L1541.23 682.367 L1540.67 682.367 L1540.11 682.367 L1539.55 682.367 L1538.99 682.367 L1538.43 682.367 L1537.87 682.367 L1537.31 682.367 L1536.75 682.367 L1536.19 682.367 L1535.63 682.367 L1535.08 682.367 L1534.52 682.367 L1533.96 682.367 L1533.4 682.367 L1532.84 682.367 L1532.28 682.367 L1531.72 682.367 L1531.16 682.367 L1530.6 682.367 L1530.04 682.367 L1529.48 682.367 L1528.92 682.367 L1528.36 682.367 L1527.81 682.367 L1527.25 682.367 L1526.69 682.367 L1526.13 682.367 L1525.57 682.367 L1525.01 682.367 L1524.45 682.367 L1523.89 682.367 L1523.33 682.367 L1522.77 682.367 L1522.21 682.367 L1521.65 682.367 L1521.09 682.367 L1520.53 682.367 L1519.98 682.367 L1519.42 682.367 L1518.86 682.367 L1518.3 682.367 L1517.74 682.367 L1517.18 682.367 L1516.62 682.367 L1516.06 682.367 L1515.5 682.367 L1514.94 682.367 L1514.38 682.367 L1513.82 682.367 L1513.26 682.367 L1512.71 682.367 L1512.15 682.367 L1511.59 682.367 L1511.03 682.367 L1510.47 682.367 L1509.91 682.367 L1509.35 682.367 L1508.79 682.367 L1508.23 682.367 L1507.67 682.367 L1507.11 682.367 L1506.55 682.367 L1505.99 682.367 L1505.44 682.367 L1504.88 682.367 L1504.32 682.367 L1503.76 682.367 L1503.2 682.367 L1502.64 682.367 L1502.08 682.367 L1501.52 682.367 L1500.96 682.367 L1500.4 682.367 L1499.84 682.367 L1499.28 682.367 L1498.72 682.367 L1498.16 682.367 L1497.61 682.367 L1497.05 682.367 L1496.49 682.367 L1495.93 682.367 L1495.37 682.367 L1494.81 682.367 L1494.25 682.367 L1493.69 682.367 L1493.13 682.367 L1492.57 682.367 L1492.01 682.367 L1491.45 682.367 L1490.89 682.367 L1490.34 682.367 L1489.78 682.367 L1489.22 682.367 L1488.66 682.367 L1488.1 682.367 L1487.54 682.367 L1486.98 682.367 L1486.42 682.367 L1485.86 682.367 L1485.3 682.367 L1484.74 682.367 L1484.18 682.367 L1483.62 682.367 L1483.07 682.367 L1482.51 682.367 L1481.95 682.367 L1481.39 682.367 L1480.83 682.367 L1480.27 682.367 L1479.71 682.367 L1479.15 682.367 L1478.59 682.367 L1478.03 682.367 L1477.47 682.367 L1476.91 682.367 L1476.35 682.367 L1475.79 682.367 L1475.24 682.367 L1474.68 682.367 L1474.12 682.367 L1473.56 682.367 L1473 682.367 L1472.44 682.367 L1471.88 682.367 L1471.32 682.367 L1470.76 682.367 L1470.2 682.367 L1469.64 682.367 L1469.08 682.367 L1468.52 682.367 L1467.97 682.367 L1467.41 682.367 L1466.85 682.367 L1466.29 682.367 L1465.73 682.367 L1465.17 682.367 L1464.61 682.367 L1464.05 682.367 L1463.49 682.367 L1462.93 682.367 L1462.37 682.367 L1461.81 682.367 L1461.25 682.367 L1460.7 682.367 L1460.14 682.367 L1459.58 682.367 L1459.02 682.367 L1458.46 682.367 L1457.9 682.367 L1457.34 682.367 L1456.78 682.367 L1456.22 682.367 L1455.66 682.367 L1455.1 682.367 L1454.54 682.367 L1453.98 682.367 L1453.42 682.367 L1452.87 682.367 L1452.31 682.367 L1451.75 682.367 L1451.19 682.367 L1450.63 682.367 L1450.07 682.367 L1449.51 682.367 L1448.95 682.367 L1448.39 682.367 L1447.83 682.367 L1447.27 682.367 L1446.71 682.367 L1446.15 682.367 L1445.6 682.367 L1445.04 682.367 L1444.48 682.367 L1443.92 682.367 L1443.36 682.367 L1442.8 682.367 L1442.24 682.367 L1441.68 682.367 L1441.12 682.367 L1440.56 682.367 L1440 682.367 L1439.44 682.367 L1438.88 682.367 L1438.33 682.367 L1437.77 682.367 L1437.21 682.367 L1436.65 682.367 L1436.09 682.367 L1435.53 682.367 L1434.97 682.367 L1434.41 682.367 L1433.85 682.367 L1433.29 682.367 L1432.73 682.367 L1432.17 682.367 L1431.61 682.367 L1431.05 682.367 L1430.5 682.367 L1429.94 682.367 L1429.38 682.367 L1428.82 682.367 L1428.26 682.367 L1427.7 682.367 L1427.14 682.367 L1426.58 682.367 L1426.02 682.367 L1425.46 682.367 L1424.9 682.367 L1424.34 682.367 L1423.78 682.367 L1423.23 682.367 L1422.67 682.367 L1422.11 682.367 L1421.55 682.367 L1420.99 682.367 L1420.43 682.367 L1419.87 682.367 L1419.31 682.367 L1418.75 682.367 L1418.19 682.367 L1417.63 682.367 L1417.07 682.367 L1416.51 682.367 L1415.95 682.367 L1415.4 682.367 L1414.84 682.367 L1414.28 682.367 L1413.72 682.367 L1413.16 682.367 L1412.6 682.367 L1412.04 682.367 L1411.48 682.367 L1410.92 682.367 L1410.36 682.367 L1409.8 682.367 L1409.24 682.367 L1408.68 682.367 L1408.13 682.367 L1407.57 682.367 L1407.01 682.367 L1406.45 682.367 L1405.89 682.367 L1405.33 682.367 L1404.77 682.367 L1404.21 682.367 L1403.65 682.367 L1403.09 682.367 L1402.53 682.367 L1401.97 682.367 L1401.41 682.367 L1400.86 682.367 L1400.3 682.367 L1399.74 682.367 L1399.18 682.367 L1398.62 682.367 L1398.06 682.367 L1397.5 682.367 L1396.94 682.367 L1396.38 682.367 L1395.82 682.367 L1395.26 682.367 L1394.7 682.367 L1394.14 682.367 L1393.58 682.367 L1393.03 682.367 L1392.47 682.367 L1391.91 682.367 L1391.35 682.367 L1390.79 682.367 L1390.23 682.367 L1389.67 682.367 L1389.11 682.367 L1388.55 682.367 L1387.99 682.367 L1387.43 682.367 L1386.87 682.367 L1386.31 682.367 L1385.76 682.367 L1385.2 682.367 L1384.64 682.367 L1384.08 682.367 L1383.52 682.367 L1382.96 682.367 L1382.4 682.367 L1381.84 682.367 L1381.28 682.367 L1380.72 682.367 L1380.16 682.367 L1379.6 682.367 L1379.04 682.367 L1378.49 682.367 L1377.93 682.367 L1377.37 682.367 L1376.81 682.367 L1376.25 682.367 L1375.69 682.367 L1375.13 682.367 L1374.57 682.367 L1374.01 682.367 L1373.45 682.367 L1372.89 682.367 L1372.33 682.367 L1371.77 682.367 L1371.21 682.367 L1370.66 682.367 L1370.1 682.367 L1369.54 682.367 L1368.98 682.367 L1368.42 682.367 L1367.86 682.367 L1367.3 682.367 L1366.74 682.367 L1366.18 682.367 L1365.62 682.367 L1365.06 682.367 L1364.5 682.367 L1363.94 682.367 L1363.39 682.367 L1362.83 682.367 L1362.27 682.367 L1361.71 682.367 L1361.15 682.367 L1360.59 682.367 L1360.03 682.367 L1359.47 682.367 L1358.91 682.367 L1358.35 682.367 L1357.79 682.367 L1357.23 682.367 L1356.67 682.367 L1356.12 682.367 L1355.56 682.367 L1355 682.367 L1354.44 682.367 L1353.88 682.367 L1353.32 682.367 L1352.76 682.367 L1352.2 682.367 L1351.64 682.367 L1351.08 682.367 L1350.52 682.367 L1349.96 682.367 L1349.4 682.367 L1348.84 682.367 L1348.29 682.367 L1347.73 682.367 L1347.17 682.367 L1346.61 682.367 L1346.05 682.367 L1345.49 682.367 L1344.93 682.367 L1344.37 682.367 L1343.81 682.367 L1343.25 682.367 L1342.69 682.367 L1342.13 682.367 L1341.57 682.367 L1341.02 682.367 L1340.46 682.367 L1339.9 682.367 L1339.34 682.367 L1338.78 682.367 L1338.22 682.367 L1337.66 682.367 L1337.1 682.367 L1336.54 682.367 L1335.98 682.367 L1335.42 682.367 L1334.86 682.367 L1334.3 682.367 L1333.75 682.367 L1333.19 682.367 L1332.63 682.367 L1332.07 682.367 L1331.51 682.367 L1330.95 682.367 L1330.39 682.367 L1329.83 682.367 L1329.27 682.367 L1328.71 682.367 L1328.15 682.367 L1327.59 682.367 L1327.03 682.367 L1326.47 682.367 L1325.92 682.367 L1325.36 682.367 L1324.8 682.367 L1324.24 682.367 L1323.68 682.367 L1323.12 682.367 L1322.56 682.367 L1322 682.367 L1321.44 682.367 L1320.88 682.367 L1320.32 682.367 L1319.76 682.367 L1319.2 682.367 L1318.65 682.367 L1318.09 682.367 L1317.53 682.367 L1316.97 682.367 L1316.41 682.367 L1315.85 682.367 L1315.29 682.367 L1314.73 682.367 L1314.17 682.367 L1313.61 682.367 L1313.05 682.367 L1312.49 682.367 L1311.93 682.367 L1311.38 682.367 L1310.82 682.367 L1310.26 682.367 L1309.7 682.367 L1309.14 682.367 L1308.58 682.367 L1308.02 682.367 L1307.46 682.367 L1306.9 682.367 L1306.34 682.367 L1305.78 682.367 L1305.22 682.367 L1304.66 682.367 L1304.1 682.367 L1303.55 682.367 L1302.99 682.367 L1302.43 682.367 L1301.87 682.367 L1301.31 682.367 L1300.75 682.367 L1300.19 682.367 L1299.63 682.367 L1299.07 682.367 L1298.51 682.367 L1297.95 682.367 L1297.39 682.367 L1296.83 682.367 L1296.28 682.367 L1295.72 682.367 L1295.16 682.367 L1294.6 682.367 L1294.04 682.367 L1293.48 682.367 L1292.92 682.367 L1292.36 682.367 L1291.8 682.367 L1291.24 682.367 L1290.68 682.367 L1290.12 682.367 L1289.56 682.367 L1289 682.367 L1288.45 682.367 L1287.89 682.367 L1287.33 682.367 L1286.77 682.367 L1286.21 682.367 L1285.65 682.367 L1285.09 682.367 L1284.53 682.367 L1283.97 682.367 L1283.41 682.367 L1282.85 682.367 L1282.29 682.367 L1281.73 682.367 L1281.18 682.367 L1280.62 682.367 L1280.06 682.367 L1279.5 682.367 L1278.94 682.367 L1278.38 682.367 L1277.82 682.367 L1277.26 682.367 L1276.7 682.367 L1276.14 682.367 L1275.58 682.367 L1275.02 682.367 L1274.46 682.367 L1273.91 682.367 L1273.35 682.367 L1272.79 682.367 L1272.23 682.367 L1271.67 682.367 L1271.11 682.367 L1270.55 682.367 L1269.99 682.367 L1269.43 682.367 L1268.87 682.367 L1268.31 682.367 L1267.75 682.367 L1267.19 682.367 L1266.63 682.367 L1266.08 682.367 L1265.52 682.367 L1264.96 682.367 L1264.4 682.367 L1263.84 682.367 L1263.28 682.367 L1262.72 682.367 L1262.16 682.367 L1261.6 682.367 L1261.04 682.367 L1260.48 682.367 L1259.92 682.367 L1259.36 682.367 L1258.81 682.367 L1258.25 682.367 L1257.69 682.367 L1257.13 682.367 L1256.57 682.367 L1256.01 682.367 L1255.45 682.367 L1254.89 682.367 L1254.33 682.367 L1253.77 682.367 L1253.21 682.367 L1252.65 682.367 L1252.09 682.367 L1251.54 682.367 L1250.98 682.367 L1250.42 682.367 L1249.86 682.367 L1249.3 682.367 L1248.74 682.367 L1248.18 682.367 L1247.62 682.367 L1247.06 682.367 L1246.5 682.367 L1245.94 682.367 L1245.38 682.367 L1244.82 682.367 L1244.26 682.367 L1243.71 682.367 L1243.15 682.367 L1242.59 682.367 L1242.03 682.367 L1241.47 682.367 L1240.91 682.367 L1240.35 682.367 L1239.79 682.367 L1239.23 682.367 L1238.67 682.367 L1238.11 682.367 L1237.55 682.367 L1236.99 682.367 L1236.44 682.367 L1235.88 682.367 L1235.32 682.367 L1234.76 682.367 L1234.2 682.367 L1233.64 682.367 L1233.08 682.367 L1232.52 682.367 L1231.96 682.367 L1231.4 682.367 L1230.84 682.367 L1230.28 682.367 L1229.72 682.367 L1229.17 682.367 L1228.61 682.367 L1228.05 682.367 L1227.49 682.367 L1226.93 682.367 L1226.37 682.367 L1225.81 682.367 L1225.25 682.367 L1224.69 682.367 L1224.13 682.367 L1223.57 682.367 L1223.01 682.367 L1222.45 682.367 L1221.89 682.367 L1221.34 682.367 L1220.78 682.367 L1220.22 682.367 L1219.66 682.367 L1219.1 682.367 L1218.54 682.367 L1217.98 682.367 L1217.42 682.367 L1216.86 682.367 L1216.3 682.367 L1215.74 682.367 L1215.18 682.367 L1214.62 682.367 L1214.07 682.367 L1213.51 682.367 L1212.95 682.367 L1212.39 682.367 L1211.83 682.367 L1211.27 682.367 L1210.71 682.367 L1210.15 682.367 L1209.59 682.367 L1209.03 682.367 L1208.47 682.367 L1207.91 682.367 L1207.35 682.367 L1206.8 682.367 L1206.24 682.367 L1205.68 682.367 L1205.12 682.367 L1204.56 682.367 L1204 682.367 L1203.44 682.367 L1202.88 682.367 L1202.32 682.367 L1201.76 682.367 L1201.2 682.367 L1200.64 682.367 L1200.08 682.367 L1199.52 682.367 L1198.97 682.367 L1198.41 682.367 L1197.85 682.367 L1197.29 682.367 L1196.73 682.367 L1196.17 682.367 L1195.61 682.367 L1195.05 682.367 L1194.49 682.367 L1193.93 682.367 L1193.37 682.367 L1192.81 682.367 L1192.25 682.367 L1191.7 682.367 L1191.14 682.367 L1190.58 682.367 L1190.02 682.367 L1189.46 682.367 L1188.9 682.367 L1188.34 682.367 L1187.78 682.367 L1187.22 682.367 L1186.66 682.367 L1186.1 682.367 L1185.54 682.367 L1184.98 682.367 L1184.43 682.367 L1183.87 682.367 L1183.31 682.367 L1182.75 682.367 L1182.19 682.367 L1181.63 682.367 L1181.07 682.367 L1180.51 682.367 L1179.95 682.367 L1179.39 682.367 L1178.83 682.367 L1178.27 682.367 L1177.71 682.367 L1177.15 682.367 L1176.6 682.367 L1176.04 682.367 L1175.48 682.367 L1174.92 682.367 L1174.36 682.367 L1173.8 682.367 L1173.24 682.367 L1172.68 682.367 L1172.12 682.367 L1171.56 682.367 L1171 682.367 L1170.44 682.367 L1169.88 682.367 L1169.33 682.367 L1168.77 682.367 L1168.21 682.367 L1167.65 682.367 L1167.09 682.367 L1166.53 682.367 L1165.97 682.367 L1165.41 682.367 L1164.85 682.367 L1164.29 682.367 L1163.73 682.367 L1163.17 682.367 L1162.61 682.367 L1162.05 682.367 L1161.5 682.367 L1160.94 682.367 L1160.38 682.367 L1159.82 682.367 L1159.26 682.367 L1158.7 682.367 L1158.14 682.367 L1157.58 682.367 L1157.02 682.367 L1156.46 682.367 L1155.9 682.367 L1155.34 682.367 L1154.78 682.367 L1154.23 682.367 L1153.67 682.367 L1153.11 682.367 L1152.55 682.367 L1151.99 682.367 L1151.43 682.367 L1150.87 682.367 L1150.31 682.367 L1149.75 682.367 L1149.19 682.367 L1148.63 682.367 L1148.07 682.367 L1147.51 682.367 L1146.96 682.367 L1146.4 682.367 L1145.84 682.367 L1145.28 682.367 L1144.72 682.367 L1144.16 682.367 L1143.6 682.367 L1143.04 682.367 L1142.48 682.367 L1141.92 682.367 L1141.36 682.367 L1140.8 682.367 L1140.24 682.367 L1139.68 682.367 L1139.13 682.367 L1138.57 682.367 L1138.01 682.367 L1137.45 682.367 L1136.89 682.367 L1136.33 682.367 L1135.77 682.367 L1135.21 682.367 L1134.65 682.367 L1134.09 682.367 L1133.53 682.367 L1132.97 682.367 L1132.41 682.367 L1131.86 682.367 L1131.3 682.367 L1130.74 682.367 L1130.18 682.367 L1129.62 682.367 L1129.06 682.367 L1128.5 682.367 L1127.94 682.367 L1127.38 682.367 L1126.82 682.367 L1126.26 682.367 L1125.7 682.367 L1125.14 682.367 L1124.59 682.367 L1124.03 682.367 L1123.47 682.367 L1122.91 682.367 L1122.35 682.367 L1121.79 682.367 L1121.23 682.367 L1120.67 682.367 L1120.11 682.367 L1119.55 682.367 L1118.99 682.367 L1118.43 682.367 L1117.87 682.367 L1117.31 682.367 L1116.76 682.367 L1116.2 682.367 L1115.64 682.367 L1115.08 682.367 L1114.52 682.367 L1113.96 682.367 L1113.4 682.367 L1112.84 682.367 L1112.28 682.367 L1111.72 682.367 L1111.16 682.367 L1110.6 682.367 L1110.04 682.367 L1109.49 682.367 L1108.93 682.367 L1108.37 682.367 L1107.81 682.367 L1107.25 682.367 L1106.69 682.367 L1106.13 682.367 L1105.57 682.367 L1105.01 682.367 L1104.45 682.367 L1103.89 682.367 L1103.33 682.367 L1102.77 682.367 L1102.22 682.367 L1101.66 682.367 L1101.1 682.367 L1100.54 682.367 L1099.98 682.367 L1099.42 682.367 L1098.86 682.367 L1098.3 682.367 L1097.74 682.367 L1097.18 682.367 L1096.62 682.367 L1096.06 682.367 L1095.5 682.367 L1094.94 682.367 L1094.39 682.367 L1093.83 682.367 L1093.27 682.367 L1092.71 682.367 L1092.15 682.367 L1091.59 682.367 L1091.03 682.367 L1090.47 682.367 L1089.91 682.367 L1089.35 682.367 L1088.79 682.367 L1088.23 682.367 L1087.67 682.367 L1087.12 682.367 L1086.56 682.367 L1086 682.367 L1085.44 682.367 L1084.88 682.367 L1084.32 682.367 L1083.76 682.367 L1083.2 682.367 L1082.64 682.367 L1082.08 682.367 L1081.52 682.367 L1080.96 682.367 L1080.4 682.367 L1079.85 682.367 L1079.29 682.367 L1078.73 682.367 L1078.17 682.367 L1077.61 682.367 L1077.05 682.367 L1076.49 682.367 L1075.93 682.367 L1075.37 682.367 L1074.81 682.367 L1074.25 682.367 L1073.69 682.367 L1073.13 682.367 L1072.57 682.367 L1072.02 682.367 L1071.46 682.367 L1070.9 682.367 L1070.34 682.367 L1069.78 682.367 L1069.22 682.367 L1068.66 682.367 L1068.1 682.367 L1067.54 682.367 L1066.98 682.367 L1066.42 682.367 L1065.86 682.367 L1065.3 682.367 L1064.75 682.367 L1064.19 682.367 L1063.63 682.367 L1063.07 682.367 L1062.51 682.367 L1061.95 682.367 L1061.39 682.367 L1060.83 682.367 L1060.27 682.367 L1059.71 682.367 L1059.15 682.367 L1058.59 682.367 L1058.03 682.367 L1057.48 682.367 L1056.92 682.367 L1056.36 682.367 L1055.8 682.367 L1055.24 682.367 L1054.68 682.367 L1054.12 682.367 L1053.56 682.367 L1053 682.367 L1052.44 682.367 L1051.88 682.367 L1051.32 682.367 L1050.76 682.367 L1050.2 682.367 L1049.65 682.367 L1049.09 682.367 L1048.53 682.367 L1047.97 682.367 L1047.41 682.367 L1046.85 682.367 L1046.29 682.367 L1045.73 682.367 L1045.17 682.367 L1044.61 682.367 L1044.05 682.367 L1043.49 682.367 L1042.93 682.367 L1042.38 682.367 L1041.82 682.367 L1041.26 682.367 L1040.7 682.367 L1040.14 682.367 L1039.58 682.367 L1039.02 682.367 L1038.46 682.367 L1037.9 682.367 L1037.34 682.367 L1036.78 682.367 L1036.22 682.367 L1035.66 682.367 L1035.1 682.367 L1034.55 682.367 L1033.99 682.367 L1033.43 682.367 L1032.87 682.367 L1032.31 682.367 L1031.75 682.367 L1031.19 682.367 L1030.63 682.367 L1030.07 682.367 L1029.51 682.367 L1028.95 682.367 L1028.39 682.367 L1027.83 682.367 L1027.28 682.367 L1026.72 682.367 L1026.16 682.367 L1025.6 682.367 L1025.04 682.367 L1024.48 682.367 L1023.92 682.367 L1023.36 682.367 L1022.8 682.367 L1022.24 682.367 L1021.68 682.367 L1021.12 682.367 L1020.56 682.367 L1020.01 682.367 L1019.45 682.367 L1018.89 682.367 L1018.33 682.367 L1017.77 682.367 L1017.21 682.367 L1016.65 682.367 L1016.09 682.367 L1015.53 682.367 L1014.97 682.367 L1014.41 682.367 L1013.85 682.367 L1013.29 682.367 L1012.73 682.367 L1012.18 682.367 L1011.62 682.367 L1011.06 682.367 L1010.5 682.367 L1009.94 682.367 L1009.38 682.367 L1008.82 682.367 L1008.26 682.367 L1007.7 682.367 L1007.14 682.367 L1006.58 682.367 L1006.02 682.367 L1005.46 682.367 L1004.91 682.367 L1004.35 682.367 L1003.79 682.367 L1003.23 682.367 L1002.67 682.367 L1002.11 682.367 L1001.55 682.367 L1000.99 682.367 L1000.43 682.367 L999.872 682.367 L999.313 682.367 L998.754 682.367 L998.194 682.367 L997.635 682.367 L997.076 682.367 L996.517 682.367 L995.957 682.367 L995.398 682.367 L994.839 682.367 L994.28 682.367 L993.72 682.367 L993.161 682.367 L992.602 682.367 L992.043 682.367 L991.483 682.367 L990.924 682.367 L990.365 682.367 L989.806 682.367 L989.246 682.367 L988.687 682.367 L988.128 682.367 L987.569 682.367 L987.009 682.367 L986.45 682.367 L985.891 682.367 L985.332 682.367 L984.772 682.367 L984.213 682.367 L983.654 682.367 L983.095 682.367 L982.535 682.367 L981.976 682.367 L981.417 682.367 L980.858 682.367 L980.298 682.367 L979.739 682.367 L979.18 682.367 L978.621 682.367 L978.061 682.367 L977.502 682.367 L976.943 682.367 L976.384 682.367 L975.824 682.367 L975.265 682.367 L974.706 682.367 L974.147 682.367 L973.587 682.367 L973.028 682.367 L972.469 682.367 L971.91 682.367 L971.35 682.367 L970.791 682.367 L970.232 682.367 L969.673 682.367 L969.113 682.367 L968.554 682.367 L967.995 682.367 L967.436 682.367 L966.876 682.367 L966.317 682.367 L965.758 682.367 L965.199 682.367 L964.639 682.367 L964.08 682.367 L963.521 682.367 L962.962 682.367 L962.402 682.367 L961.843 682.367 L961.284 682.367 L960.725 682.367 L960.165 682.367 L959.606 682.367 L959.047 682.367 L958.488 682.367 L957.928 682.367 L957.369 682.367 L956.81 682.367 L956.251 682.367 L955.691 682.367 L955.132 682.367 L954.573 682.367 L954.014 682.367 L953.454 682.367 L952.895 682.367 L952.336 682.367 L951.777 682.367 L951.217 682.367 L950.658 682.367 L950.099 682.367 L949.54 682.367 L948.98 682.367 L948.421 682.367 L947.862 682.367 L947.303 682.367 L946.743 682.367 L946.184 682.367 L945.625 682.367 L945.066 682.367 L944.506 682.367 L943.947 682.367 L943.388 682.367 L942.829 682.367 L942.269 682.367 L941.71 682.367 L941.151 682.367 L940.592 682.367 L940.032 682.367 L939.473 682.367 L938.914 682.367 L938.355 682.367 L937.795 682.367 L937.236 682.367 L936.677 682.367 L936.118 682.367 L935.558 682.367 L934.999 682.367 L934.44 682.367 L933.881 682.367 L933.321 682.367 L932.762 682.367 L932.203 682.367 L931.644 682.367 L931.084 682.367 L930.525 682.367 L929.966 682.367 L929.406 682.367 L928.847 682.367 L928.288 682.367 L927.729 682.367 L927.169 682.367 L926.61 682.367 L926.051 682.367 L925.492 682.367 L924.932 682.367 L924.373 682.367 L923.814 682.367 L923.255 682.367 L922.695 682.367 L922.136 682.367 L921.577 682.367 L921.018 682.367 L920.458 682.367 L919.899 682.367 L919.34 682.367 L918.781 682.367 L918.221 682.367 L917.662 682.367 L917.103 682.367 L916.544 682.367 L915.984 682.367 L915.425 682.367 L914.866 682.367 L914.307 682.367 L913.747 682.367 L913.188 682.367 L912.629 682.367 L912.07 682.367 L911.51 682.367 L910.951 682.367 L910.392 682.367 L909.833 682.367 L909.273 682.367 L908.714 682.367 L908.155 682.367 L907.596 682.367 L907.036 682.367 L906.477 682.367 L905.918 682.367 L905.359 682.367 L904.799 682.367 L904.24 682.367 L903.681 682.367 L903.122 682.367 L902.562 682.367 L902.003 682.367 L901.444 682.367 L900.885 682.367 L900.325 682.367 L899.766 682.367 L899.207 682.367 L898.648 682.367 L898.088 682.367 L897.529 682.367 L896.97 682.367 L896.411 682.367 L895.851 682.367 L895.292 682.367 L894.733 682.367 L894.174 682.367 L893.614 682.367 L893.055 682.367 L892.496 682.367 L891.937 682.367 L891.377 682.367 L890.818 682.367 L890.259 682.367 L889.7 682.367 L889.14 682.367 L888.581 682.367 L888.022 682.367 L887.463 682.367 L886.903 682.367 L886.344 682.367 L885.785 682.367 L885.226 682.367 L884.666 682.367 L884.107 682.367 L883.548 682.367 L882.989 682.367 L882.429 682.367 L881.87 682.367 L881.311 682.367 L880.752 682.367 L880.192 682.367 L879.633 682.367 L879.074 682.367 L878.515 682.367 L877.955 682.367 L877.396 682.367 L876.837 682.367 L876.278 682.367 L875.718 682.367 L875.159 682.367 L874.6 682.367 L874.041 682.367 L873.481 682.367 L872.922 682.367 L872.363 682.367 L871.804 682.367 L871.244 682.367 L870.685 682.367 L870.126 682.367 L869.567 682.367 L869.007 682.367 L868.448 682.367 L867.889 682.367 L867.33 682.367 L866.77 682.367 L866.211 682.367 L865.652 682.367 L865.093 682.367 L864.533 682.367 L863.974 682.367 L863.415 682.367 L862.856 682.367 L862.296 682.367 L861.737 682.367 L861.178 682.367 L860.619 682.367 L860.059 682.367 L859.5 682.367 L858.941 682.367 L858.382 682.367 L857.822 682.367 L857.263 682.367 L856.704 682.367 L856.145 682.367 L855.585 682.367 L855.026 682.367 L854.467 682.367 L853.908 682.367 L853.348 682.367 L852.789 682.367 L852.23 682.367 L851.671 682.367 L851.111 682.367 L850.552 682.367 L849.993 682.367 L849.434 682.367 L848.874 682.367 L848.315 682.367 L847.756 682.367 L847.197 682.367 L846.637 682.367 L846.078 682.367 L845.519 682.367 L844.96 682.367 L844.4 682.367 L843.841 682.367 L843.282 682.367 L842.723 682.367 L842.163 682.367 L841.604 682.367 L841.045 682.367 L840.486 682.367 L839.926 682.367 L839.367 682.367 L838.808 682.367 L838.249 682.367 L837.689 682.367 L837.13 682.367 L836.571 682.367 L836.012 682.367 L835.452 682.367 L834.893 682.367 L834.334 682.367 L833.775 682.367 L833.215 682.367 L832.656 682.367 L832.097 682.367 L831.538 682.367 L830.978 682.367 L830.419 682.367 L829.86 682.367 L829.301 682.367 L828.741 682.367 L828.182 682.367 L827.623 682.367 L827.064 682.367 L826.504 682.367 L825.945 682.367 L825.386 682.367 L824.827 682.367 L824.267 682.367 L823.708 682.367 L823.149 682.367 L822.59 682.367 L822.03 682.367 L821.471 682.367 L820.912 682.367 L820.353 682.367 L819.793 682.367 L819.234 682.367 L818.675 682.367 L818.116 682.367 L817.556 682.367 L816.997 682.367 L816.438 682.367 L815.879 682.367 L815.319 682.367 L814.76 682.367 L814.201 682.367 L813.642 682.367 L813.082 682.367 L812.523 682.367 L811.964 682.367 L811.405 682.367 L810.845 682.367 L810.286 682.367 L809.727 682.367 L809.168 682.367 L808.608 682.367 L808.049 682.367 L807.49 682.367 L806.931 682.367 L806.371 682.367 L805.812 682.367 L805.253 682.367 L804.693 682.367 L804.134 682.367 L803.575 682.367 L803.016 682.367 L802.456 682.367 L801.897 682.367 L801.338 682.367 L800.779 682.367 L800.219 682.367 L799.66 682.367 L799.101 682.367 L798.542 682.367 L797.982 682.367 L797.423 682.367 L796.864 682.367 L796.305 682.367 L795.745 682.367 L795.186 682.367 L794.627 682.367 L794.068 682.367 L793.508 682.367 L792.949 682.367 L792.39 682.367 L791.831 682.367 L791.271 682.367 L790.712 682.367 L790.153 682.367 L789.594 682.367 L789.034 682.367 L788.475 682.367 L787.916 682.367 L787.357 682.367 L786.797 682.367 L786.238 682.367 L785.679 682.367 L785.12 682.367 L784.56 682.367 L784.001 682.367 L783.442 682.367 L782.883 682.367 L782.323 682.367 L781.764 682.367 L781.205 682.367 L780.646 682.367 L780.086 682.367 L779.527 682.367 L778.968 682.367 L778.409 682.367 L777.849 682.367 L777.29 682.367 L776.731 682.367 L776.172 682.367 L775.612 682.367 L775.053 682.367 L774.494 682.367 L773.935 682.367 L773.375 682.367 L772.816 682.367 L772.257 682.367 L771.698 682.367 L771.138 682.367 L770.579 682.367 L770.02 682.367 L769.461 682.367 L768.901 682.367 L768.342 682.367 L767.783 682.367 L767.224 682.367 L766.664 682.367 L766.105 682.367 L765.546 682.367 L764.987 682.367 L764.427 682.367 L763.868 682.367 L763.309 682.367 L762.75 682.367 L762.19 682.367 L761.631 682.367 L761.072 682.367 L760.513 682.367 L759.953 682.367 L759.394 682.367 L758.835 682.367 L758.276 682.367 L757.716 682.367 L757.157 682.367 L756.598 682.367 L756.039 682.367 L755.479 682.367 L754.92 682.367 L754.361 682.367 L753.802 682.367 L753.242 682.367 L752.683 682.367 L752.124 682.367 L751.565 682.367 L751.005 682.367 L750.446 682.367 L749.887 682.367 L749.328 682.367 L748.768 682.367 L748.209 682.367 L747.65 682.367 L747.091 682.367 L746.531 682.367 L745.972 682.367 L745.413 682.367 L744.854 682.367 L744.294 682.367 L743.735 682.367 L743.176 682.367 L742.617 682.367 L742.057 682.367 L741.498 682.367 L740.939 682.367 L740.38 682.367 L739.82 682.367 L739.261 682.367 L738.702 682.367 L738.143 682.367 L737.583 682.367 L737.024 682.367 L736.465 682.367 L735.906 682.367 L735.346 682.367 L734.787 682.367 L734.228 682.367 L733.669 682.367 L733.109 682.367 L732.55 682.367 L731.991 682.367 L731.432 682.367 L730.872 682.367 L730.313 682.367 L729.754 682.367 L729.195 682.367 L728.635 682.367 L728.076 682.367 L727.517 682.367 L726.958 682.367 L726.398 682.367 L725.839 682.367 L725.28 682.367 L724.721 682.367 L724.161 682.367 L723.602 682.367 L723.043 682.367 L722.484 682.367 L721.924 682.367 L721.365 682.367 L720.806 682.367 L720.247 682.367  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.632 720.806,686.632 721.365,686.632 721.924,686.632 722.484,686.632 723.043,686.632 723.602,686.632 724.161,686.632 724.721,686.632 725.28,686.632 725.839,686.632 726.398,686.632 726.958,686.632 727.517,686.632 728.076,686.632 728.635,686.632 729.195,686.632 729.754,686.632 730.313,686.632 730.872,686.632 731.432,686.632 731.991,686.632 732.55,686.632 733.109,686.632 733.669,686.632 734.228,686.632 734.787,686.632 735.346,686.632 735.906,686.632 736.465,686.632 737.024,686.632 737.583,686.632 738.143,686.632 738.702,686.632 739.261,686.632 739.82,686.632 740.38,686.632 740.939,686.632 741.498,686.632 742.057,686.632 742.617,686.632 743.176,686.632 743.735,686.632 744.294,686.632 744.854,686.632 745.413,686.632 745.972,686.632 746.531,686.632 747.091,686.632 747.65,686.632 748.209,686.632 748.768,686.632 749.328,686.632 749.887,686.632 750.446,686.632 751.005,686.632 751.565,686.632 752.124,686.632 752.683,686.632 753.242,686.632 753.802,686.632 754.361,686.632 754.92,686.632 755.479,686.632 756.039,686.632 756.598,686.632 757.157,686.632 757.716,686.632 758.276,686.632 758.835,686.632 759.394,686.632 759.953,686.632 760.513,686.632 761.072,686.632 761.631,686.632 762.19,686.632 762.75,686.632 763.309,686.632 763.868,686.632 764.427,686.632 764.987,686.632 765.546,686.632 766.105,686.632 766.664,686.632 767.224,686.632 767.783,686.632 768.342,686.632 768.901,686.632 769.461,686.632 770.02,686.632 770.579,686.632 771.138,686.632 771.698,686.632 772.257,686.632 772.816,686.632 773.375,686.632 773.935,686.632 774.494,686.632 775.053,686.632 775.612,686.632 776.172,686.632 776.731,686.632 777.29,686.632 777.849,686.632 778.409,686.632 778.968,686.632 779.527,686.632 780.086,686.632 780.646,686.632 781.205,686.632 781.764,686.632 782.323,686.632 782.883,686.632 783.442,686.632 784.001,686.632 784.56,686.632 785.12,686.632 785.679,686.632 786.238,686.632 786.797,686.632 787.357,686.632 787.916,686.632 788.475,686.632 789.034,686.632 789.594,686.632 790.153,686.632 790.712,686.632 791.271,686.632 791.831,686.632 792.39,686.632 792.949,686.632 793.508,686.632 794.068,686.632 794.627,686.632 795.186,686.632 795.745,686.632 796.305,686.632 796.864,686.632 797.423,686.632 797.982,686.632 798.542,686.632 799.101,686.632 799.66,686.632 800.219,686.632 800.779,686.632 801.338,686.632 801.897,686.632 802.456,686.632 803.016,686.632 803.575,686.632 804.134,686.632 804.693,686.632 805.253,686.632 805.812,686.632 806.371,686.632 806.931,686.632 807.49,686.632 808.049,686.632 808.608,686.632 809.168,686.632 809.727,686.632 810.286,686.632 810.845,686.632 811.405,686.632 811.964,686.632 812.523,686.632 813.082,686.632 813.642,686.632 814.201,686.632 814.76,686.632 815.319,686.632 815.879,686.632 816.438,686.632 816.997,686.632 817.556,686.632 818.116,686.632 818.675,686.632 819.234,686.632 819.793,686.632 820.353,686.632 820.912,686.632 821.471,686.632 822.03,686.632 822.59,686.632 823.149,686.632 823.708,686.632 824.267,686.632 824.827,686.632 825.386,686.632 825.945,686.632 826.504,686.632 827.064,686.632 827.623,686.632 828.182,686.632 828.741,686.632 829.301,686.632 829.86,686.632 830.419,686.632 830.978,686.632 831.538,686.632 832.097,686.632 832.656,686.632 833.215,686.632 833.775,686.632 834.334,686.632 834.893,686.632 835.452,686.632 836.012,686.632 836.571,686.632 837.13,686.632 837.689,686.632 838.249,686.632 838.808,686.632 839.367,686.632 839.926,686.632 840.486,686.632 841.045,686.632 841.604,686.632 842.163,686.632 842.723,686.632 843.282,686.632 843.841,686.632 844.4,686.632 844.96,686.632 845.519,686.632 846.078,686.632 846.637,686.632 847.197,686.632 847.756,686.632 848.315,686.632 848.874,686.632 849.434,686.632 849.993,686.632 850.552,686.632 851.111,686.632 851.671,686.632 852.23,686.632 852.789,686.632 853.348,686.632 853.908,686.632 854.467,686.632 855.026,686.632 855.585,686.632 856.145,686.632 856.704,686.632 857.263,686.632 857.822,686.632 858.382,686.632 858.941,686.632 859.5,686.632 860.059,686.632 860.619,686.632 861.178,686.632 861.737,686.632 862.296,686.632 862.856,686.632 863.415,686.632 863.974,686.632 864.533,686.632 865.093,686.632 865.652,686.632 866.211,686.632 866.77,686.632 867.33,686.632 867.889,686.632 868.448,686.632 869.007,686.632 869.567,686.632 870.126,686.632 870.685,686.632 871.244,686.632 871.804,686.632 872.363,686.632 872.922,686.632 873.481,686.632 874.041,686.632 874.6,686.632 875.159,686.632 875.718,686.632 876.278,686.632 876.837,686.632 877.396,686.632 877.955,686.632 878.515,686.632 879.074,686.632 879.633,686.632 880.192,686.632 880.752,686.632 881.311,686.632 881.87,686.632 882.429,686.632 882.989,686.632 883.548,686.632 884.107,686.632 884.666,686.632 885.226,686.632 885.785,686.632 886.344,686.632 886.903,686.632 887.463,686.632 888.022,686.632 888.581,686.632 889.14,686.632 889.7,686.632 890.259,686.632 890.818,686.632 891.377,686.632 891.937,686.632 892.496,686.632 893.055,686.632 893.614,686.632 894.174,686.632 894.733,686.632 895.292,686.632 895.851,686.632 896.411,686.632 896.97,686.632 897.529,686.632 898.088,686.632 898.648,686.632 899.207,686.632 899.766,686.632 900.325,686.632 900.885,686.632 901.444,686.632 902.003,686.632 902.562,686.632 903.122,686.632 903.681,686.632 904.24,686.632 904.799,686.632 905.359,686.632 905.918,686.632 906.477,686.632 907.036,686.632 907.596,686.632 908.155,686.632 908.714,686.632 909.273,686.632 909.833,686.632 910.392,686.632 910.951,686.632 911.51,686.632 912.07,686.632 912.629,686.632 913.188,686.632 913.747,686.632 914.307,686.632 914.866,686.632 915.425,686.632 915.984,686.632 916.544,686.632 917.103,686.632 917.662,686.632 918.221,686.632 918.781,686.632 919.34,686.632 919.899,686.632 920.458,686.632 921.018,686.632 921.577,686.632 922.136,686.632 922.695,686.632 923.255,686.632 923.814,686.632 924.373,686.632 924.932,686.632 925.492,686.632 926.051,686.632 926.61,686.632 927.169,686.632 927.729,686.632 928.288,686.632 928.847,686.632 929.406,686.632 929.966,686.632 930.525,686.632 931.084,686.632 931.644,686.632 932.203,686.632 932.762,686.632 933.321,686.632 933.881,686.632 934.44,686.632 934.999,686.632 935.558,686.632 936.118,686.632 936.677,686.632 937.236,686.632 937.795,686.632 938.355,686.632 938.914,686.632 939.473,686.632 940.032,686.632 940.592,686.632 941.151,686.632 941.71,686.632 942.269,686.632 942.829,686.632 943.388,686.632 943.947,686.632 944.506,686.632 945.066,686.632 945.625,686.632 946.184,686.632 946.743,686.632 947.303,686.632 947.862,686.632 948.421,686.632 948.98,686.632 949.54,686.632 950.099,686.632 950.658,686.632 951.217,686.632 951.777,686.632 952.336,686.632 952.895,686.632 953.454,686.632 954.014,686.632 954.573,686.632 955.132,686.632 955.691,686.632 956.251,686.632 956.81,686.632 957.369,686.632 957.928,686.632 958.488,686.632 959.047,686.632 959.606,686.632 960.165,686.632 960.725,686.632 961.284,686.632 961.843,686.632 962.402,686.632 962.962,686.632 963.521,686.632 964.08,686.632 964.639,686.632 965.199,686.632 965.758,686.632 966.317,686.632 966.876,686.632 967.436,686.632 967.995,686.632 968.554,686.632 969.113,686.632 969.673,686.632 970.232,686.632 970.791,686.632 971.35,686.632 971.91,686.632 972.469,686.632 973.028,686.632 973.587,686.632 974.147,686.632 974.706,686.632 975.265,686.632 975.824,686.632 976.384,686.632 976.943,686.632 977.502,686.632 978.061,686.632 978.621,686.632 979.18,686.632 979.739,686.632 980.298,686.632 980.858,686.632 981.417,686.632 981.976,686.632 982.535,686.632 983.095,686.632 983.654,686.632 984.213,686.632 984.772,686.632 985.332,686.632 985.891,686.632 986.45,686.632 987.009,686.632 987.569,686.632 988.128,686.632 988.687,686.632 989.246,686.632 989.806,686.632 990.365,686.632 990.924,686.632 991.483,686.632 992.043,686.632 992.602,686.632 993.161,686.632 993.72,686.632 994.28,686.632 994.839,686.632 995.398,686.632 995.957,686.632 996.517,686.632 997.076,686.632 997.635,686.632 998.194,686.632 998.754,686.632 999.313,686.632 999.872,686.632 1000.43,686.632 1000.99,686.632 1001.55,686.632 1002.11,686.632 1002.67,686.632 1003.23,686.632 1003.79,686.632 1004.35,686.632 1004.91,686.632 1005.46,686.632 1006.02,686.632 1006.58,686.632 1007.14,686.632 1007.7,686.632 1008.26,686.632 1008.82,686.632 1009.38,686.632 1009.94,686.632 1010.5,686.632 1011.06,686.632 1011.62,686.632 1012.18,686.632 1012.73,686.632 1013.29,686.632 1013.85,686.632 1014.41,686.632 1014.97,686.632 1015.53,686.632 1016.09,686.632 1016.65,686.632 1017.21,686.632 1017.77,686.632 1018.33,686.632 1018.89,686.632 1019.45,686.632 1020.01,686.632 1020.56,686.632 1021.12,686.632 1021.68,686.632 1022.24,686.632 1022.8,686.632 1023.36,686.632 1023.92,686.632 1024.48,686.632 1025.04,686.632 1025.6,686.632 1026.16,686.632 1026.72,686.632 1027.28,686.632 1027.83,686.632 1028.39,686.632 1028.95,686.632 1029.51,686.632 1030.07,686.632 1030.63,686.632 1031.19,686.632 1031.75,686.632 1032.31,686.632 1032.87,686.632 1033.43,686.632 1033.99,686.632 1034.55,686.632 1035.1,686.632 1035.66,686.632 1036.22,686.632 1036.78,686.632 1037.34,686.632 1037.9,686.632 1038.46,686.632 1039.02,686.632 1039.58,686.632 1040.14,686.632 1040.7,686.632 1041.26,686.632 1041.82,686.632 1042.38,686.632 1042.93,686.632 1043.49,686.632 1044.05,686.632 1044.61,686.632 1045.17,686.632 1045.73,686.632 1046.29,686.632 1046.85,686.632 1047.41,686.632 1047.97,686.632 1048.53,686.632 1049.09,686.632 1049.65,686.632 1050.2,686.632 1050.76,686.632 1051.32,686.632 1051.88,686.632 1052.44,686.632 1053,686.632 1053.56,686.632 1054.12,686.632 1054.68,686.632 1055.24,686.632 1055.8,686.632 1056.36,686.632 1056.92,686.632 1057.48,686.632 1058.03,686.632 1058.59,686.632 1059.15,686.632 1059.71,686.632 1060.27,686.632 1060.83,686.632 1061.39,686.632 1061.95,686.632 1062.51,686.632 1063.07,686.632 1063.63,686.632 1064.19,686.632 1064.75,686.632 1065.3,686.632 1065.86,686.632 1066.42,686.632 1066.98,686.632 1067.54,686.632 1068.1,686.632 1068.66,686.632 1069.22,686.632 1069.78,686.632 1070.34,686.632 1070.9,686.632 1071.46,686.632 1072.02,686.632 1072.57,686.632 1073.13,686.632 1073.69,686.632 1074.25,686.632 1074.81,686.632 1075.37,686.632 1075.93,686.632 1076.49,686.632 1077.05,686.632 1077.61,686.632 1078.17,686.632 1078.73,686.632 1079.29,686.632 1079.85,686.632 1080.4,686.632 1080.96,686.632 1081.52,686.632 1082.08,686.632 1082.64,686.632 1083.2,686.632 1083.76,686.632 1084.32,686.632 1084.88,686.632 1085.44,686.632 1086,686.632 1086.56,686.632 1087.12,686.632 1087.67,686.632 1088.23,686.632 1088.79,686.632 1089.35,686.632 1089.91,686.632 1090.47,686.632 1091.03,686.632 1091.59,686.632 1092.15,686.632 1092.71,686.632 1093.27,686.632 1093.83,686.632 1094.39,686.632 1094.94,686.632 1095.5,686.632 1096.06,686.632 1096.62,686.632 1097.18,686.632 1097.74,686.632 1098.3,686.632 1098.86,686.632 1099.42,686.632 1099.98,686.632 1100.54,686.632 1101.1,686.632 1101.66,686.632 1102.22,686.632 1102.77,686.632 1103.33,686.632 1103.89,686.632 1104.45,686.632 1105.01,686.632 1105.57,686.632 1106.13,686.632 1106.69,686.632 1107.25,686.632 1107.81,686.632 1108.37,686.632 1108.93,686.632 1109.49,686.632 1110.04,686.632 1110.6,686.632 1111.16,686.632 1111.72,686.632 1112.28,686.632 1112.84,686.632 1113.4,686.632 1113.96,686.632 1114.52,686.632 1115.08,686.632 1115.64,686.632 1116.2,686.632 1116.76,686.632 1117.31,686.632 1117.87,686.632 1118.43,686.632 1118.99,686.632 1119.55,686.632 1120.11,686.632 1120.67,686.632 1121.23,686.632 1121.79,686.632 1122.35,686.632 1122.91,686.632 1123.47,686.632 1124.03,686.632 1124.59,686.632 1125.14,686.632 1125.7,686.632 1126.26,686.632 1126.82,686.632 1127.38,686.632 1127.94,686.632 1128.5,686.632 1129.06,686.632 1129.62,686.632 1130.18,686.632 1130.74,686.632 1131.3,686.632 1131.86,686.632 1132.41,686.632 1132.97,686.632 1133.53,686.632 1134.09,686.632 1134.65,686.632 1135.21,686.632 1135.77,686.632 1136.33,686.632 1136.89,686.632 1137.45,686.632 1138.01,686.632 1138.57,686.632 1139.13,686.632 1139.68,686.632 1140.24,686.632 1140.8,686.632 1141.36,686.632 1141.92,686.632 1142.48,686.632 1143.04,686.632 1143.6,686.632 1144.16,686.632 1144.72,686.632 1145.28,686.632 1145.84,686.632 1146.4,686.632 1146.96,686.632 1147.51,686.632 1148.07,686.632 1148.63,686.632 1149.19,686.632 1149.75,686.632 1150.31,686.632 1150.87,686.632 1151.43,686.632 1151.99,686.632 1152.55,686.632 1153.11,686.632 1153.67,686.632 1154.23,686.632 1154.78,686.632 1155.34,686.632 1155.9,686.632 1156.46,686.632 1157.02,686.632 1157.58,686.632 1158.14,686.632 1158.7,686.632 1159.26,686.632 1159.82,686.632 1160.38,686.632 1160.94,686.632 1161.5,686.632 1162.05,686.632 1162.61,686.632 1163.17,686.632 1163.73,686.632 1164.29,686.632 1164.85,686.632 1165.41,686.632 1165.97,686.632 1166.53,686.632 1167.09,686.632 1167.65,686.632 1168.21,686.632 1168.77,686.632 1169.33,686.632 1169.88,686.632 1170.44,686.632 1171,686.632 1171.56,686.632 1172.12,686.632 1172.68,686.632 1173.24,686.632 1173.8,686.632 1174.36,686.632 1174.92,686.632 1175.48,686.632 1176.04,686.632 1176.6,686.632 1177.15,686.632 1177.71,686.632 1178.27,686.632 1178.83,686.632 1179.39,686.632 1179.95,686.632 1180.51,686.632 1181.07,686.632 1181.63,686.632 1182.19,686.632 1182.75,686.632 1183.31,686.632 1183.87,686.632 1184.43,686.632 1184.98,686.632 1185.54,686.632 1186.1,686.632 1186.66,686.632 1187.22,686.632 1187.78,686.632 1188.34,686.632 1188.9,686.632 1189.46,686.632 1190.02,686.632 1190.58,686.632 1191.14,686.632 1191.7,686.632 1192.25,686.632 1192.81,686.632 1193.37,686.632 1193.93,686.632 1194.49,686.632 1195.05,686.632 1195.61,686.632 1196.17,686.632 1196.73,686.632 1197.29,686.632 1197.85,686.632 1198.41,686.632 1198.97,686.632 1199.52,686.632 1200.08,686.632 1200.64,686.632 1201.2,686.632 1201.76,686.632 1202.32,686.632 1202.88,686.632 1203.44,686.632 1204,686.632 1204.56,686.632 1205.12,686.632 1205.68,686.632 1206.24,686.632 1206.8,686.632 1207.35,686.632 1207.91,686.632 1208.47,686.632 1209.03,686.632 1209.59,686.632 1210.15,686.632 1210.71,686.632 1211.27,686.632 1211.83,686.632 1212.39,686.632 1212.95,686.632 1213.51,686.632 1214.07,686.632 1214.62,686.632 1215.18,686.632 1215.74,686.632 1216.3,686.632 1216.86,686.632 1217.42,686.632 1217.98,686.632 1218.54,686.632 1219.1,686.632 1219.66,686.632 1220.22,686.632 1220.78,686.632 1221.34,686.632 1221.89,686.632 1222.45,686.632 1223.01,686.632 1223.57,686.632 1224.13,686.632 1224.69,686.632 1225.25,686.632 1225.81,686.632 1226.37,686.632 1226.93,686.632 1227.49,686.632 1228.05,686.632 1228.61,686.632 1229.17,686.632 1229.72,686.632 1230.28,686.632 1230.84,686.632 1231.4,686.632 1231.96,686.632 1232.52,686.632 1233.08,686.632 1233.64,686.632 1234.2,686.632 1234.76,686.632 1235.32,686.632 1235.88,686.632 1236.44,686.632 1236.99,686.632 1237.55,686.632 1238.11,686.632 1238.67,686.632 1239.23,686.632 1239.79,686.632 1240.35,686.632 1240.91,686.632 1241.47,686.632 1242.03,686.632 1242.59,686.632 1243.15,686.632 1243.71,686.632 1244.26,686.632 1244.82,686.632 1245.38,686.632 1245.94,686.632 1246.5,686.632 1247.06,686.632 1247.62,686.632 1248.18,686.632 1248.74,686.632 1249.3,686.632 1249.86,686.632 1250.42,686.632 1250.98,686.632 1251.54,686.632 1252.09,686.632 1252.65,686.632 1253.21,686.632 1253.77,686.632 1254.33,686.632 1254.89,686.632 1255.45,686.632 1256.01,686.632 1256.57,686.632 1257.13,686.632 1257.69,686.632 1258.25,686.632 1258.81,686.632 1259.36,686.632 1259.92,686.632 1260.48,686.632 1261.04,686.632 1261.6,686.632 1262.16,686.632 1262.72,686.632 1263.28,686.632 1263.84,686.632 1264.4,686.632 1264.96,686.632 1265.52,686.632 1266.08,686.632 1266.63,686.632 1267.19,686.632 1267.75,686.632 1268.31,686.632 1268.87,686.632 1269.43,686.632 1269.99,686.632 1270.55,686.632 1271.11,686.632 1271.67,686.632 1272.23,686.632 1272.79,686.632 1273.35,686.632 1273.91,686.632 1274.46,686.632 1275.02,686.632 1275.58,686.632 1276.14,686.632 1276.7,686.632 1277.26,686.632 1277.82,686.632 1278.38,686.632 1278.94,686.632 1279.5,686.632 1280.06,686.632 1280.62,686.632 1281.18,686.632 1281.73,686.632 1282.29,686.632 1282.85,686.632 1283.41,686.632 1283.97,686.632 1284.53,686.632 1285.09,686.632 1285.65,686.632 1286.21,686.632 1286.77,686.632 1287.33,686.632 1287.89,686.632 1288.45,686.632 1289,686.632 1289.56,686.632 1290.12,686.632 1290.68,686.632 1291.24,686.632 1291.8,686.632 1292.36,686.632 1292.92,686.632 1293.48,686.632 1294.04,686.632 1294.6,686.632 1295.16,686.632 1295.72,686.632 1296.28,686.632 1296.83,686.632 1297.39,686.632 1297.95,686.632 1298.51,686.632 1299.07,686.632 1299.63,686.632 1300.19,686.632 1300.75,686.632 1301.31,686.632 1301.87,686.632 1302.43,686.632 1302.99,686.632 1303.55,686.632 1304.1,686.632 1304.66,686.632 1305.22,686.632 1305.78,686.632 1306.34,686.632 1306.9,686.632 1307.46,686.632 1308.02,686.632 1308.58,686.632 1309.14,686.632 1309.7,686.632 1310.26,686.632 1310.82,686.632 1311.38,686.632 1311.93,686.632 1312.49,686.632 1313.05,686.632 1313.61,686.632 1314.17,686.632 1314.73,686.632 1315.29,686.632 1315.85,686.632 1316.41,686.632 1316.97,686.632 1317.53,686.632 1318.09,686.632 1318.65,686.632 1319.2,686.632 1319.76,686.632 1320.32,686.632 1320.88,686.632 1321.44,686.632 1322,686.632 1322.56,686.632 1323.12,686.632 1323.68,686.632 1324.24,686.632 1324.8,686.632 1325.36,686.632 1325.92,686.632 1326.47,686.632 1327.03,686.632 1327.59,686.632 1328.15,686.632 1328.71,686.632 1329.27,686.632 1329.83,686.632 1330.39,686.632 1330.95,686.632 1331.51,686.632 1332.07,686.632 1332.63,686.632 1333.19,686.632 1333.75,686.632 1334.3,686.632 1334.86,686.632 1335.42,686.632 1335.98,686.632 1336.54,686.632 1337.1,686.632 1337.66,686.632 1338.22,686.632 1338.78,686.632 1339.34,686.632 1339.9,686.632 1340.46,686.632 1341.02,686.632 1341.57,686.632 1342.13,686.632 1342.69,686.632 1343.25,686.632 1343.81,686.632 1344.37,686.632 1344.93,686.632 1345.49,686.632 1346.05,686.632 1346.61,686.632 1347.17,686.632 1347.73,686.632 1348.29,686.632 1348.84,686.632 1349.4,686.632 1349.96,686.632 1350.52,686.632 1351.08,686.632 1351.64,686.632 1352.2,686.632 1352.76,686.632 1353.32,686.632 1353.88,686.632 1354.44,686.632 1355,686.632 1355.56,686.632 1356.12,686.632 1356.67,686.632 1357.23,686.632 1357.79,686.632 1358.35,686.632 1358.91,686.632 1359.47,686.632 1360.03,686.632 1360.59,686.632 1361.15,686.632 1361.71,686.632 1362.27,686.632 1362.83,686.632 1363.39,686.632 1363.94,686.632 1364.5,686.632 1365.06,686.632 1365.62,686.632 1366.18,686.632 1366.74,686.632 1367.3,686.632 1367.86,686.632 1368.42,686.632 1368.98,686.632 1369.54,686.632 1370.1,686.632 1370.66,686.632 1371.21,686.632 1371.77,686.632 1372.33,686.632 1372.89,686.632 1373.45,686.632 1374.01,686.632 1374.57,686.632 1375.13,686.632 1375.69,686.632 1376.25,686.632 1376.81,686.632 1377.37,686.632 1377.93,686.632 1378.49,686.632 1379.04,686.632 1379.6,686.632 1380.16,686.632 1380.72,686.632 1381.28,686.632 1381.84,686.632 1382.4,686.632 1382.96,686.632 1383.52,686.632 1384.08,686.632 1384.64,686.632 1385.2,686.632 1385.76,686.632 1386.31,686.632 1386.87,686.632 1387.43,686.632 1387.99,686.632 1388.55,686.632 1389.11,686.632 1389.67,686.632 1390.23,686.632 1390.79,686.632 1391.35,686.632 1391.91,686.632 1392.47,686.632 1393.03,686.632 1393.58,686.632 1394.14,686.632 1394.7,686.632 1395.26,686.632 1395.82,686.632 1396.38,686.632 1396.94,686.632 1397.5,686.632 1398.06,686.632 1398.62,686.632 1399.18,686.632 1399.74,686.632 1400.3,686.632 1400.86,686.632 1401.41,686.632 1401.97,686.632 1402.53,686.632 1403.09,686.632 1403.65,686.632 1404.21,686.632 1404.77,686.632 1405.33,686.632 1405.89,686.632 1406.45,686.632 1407.01,686.632 1407.57,686.632 1408.13,686.632 1408.68,686.632 1409.24,686.632 1409.8,686.632 1410.36,686.632 1410.92,686.632 1411.48,686.632 1412.04,686.632 1412.6,686.632 1413.16,686.632 1413.72,686.632 1414.28,686.632 1414.84,686.632 1415.4,686.632 1415.95,686.632 1416.51,686.632 1417.07,686.632 1417.63,686.632 1418.19,686.632 1418.75,686.632 1419.31,686.632 1419.87,686.632 1420.43,686.632 1420.99,686.632 1421.55,686.632 1422.11,686.632 1422.67,686.632 1423.23,686.632 1423.78,686.632 1424.34,686.632 1424.9,686.632 1425.46,686.632 1426.02,686.632 1426.58,686.632 1427.14,686.632 1427.7,686.632 1428.26,686.632 1428.82,686.632 1429.38,686.632 1429.94,686.632 1430.5,686.632 1431.05,686.632 1431.61,686.632 1432.17,686.632 1432.73,686.632 1433.29,686.632 1433.85,686.632 1434.41,686.632 1434.97,686.632 1435.53,686.632 1436.09,686.632 1436.65,686.632 1437.21,686.632 1437.77,686.632 1438.33,686.632 1438.88,686.632 1439.44,686.632 1440,686.632 1440.56,686.632 1441.12,686.632 1441.68,686.632 1442.24,686.632 1442.8,686.632 1443.36,686.632 1443.92,686.632 1444.48,686.632 1445.04,686.632 1445.6,686.632 1446.15,686.632 1446.71,686.632 1447.27,686.632 1447.83,686.632 1448.39,686.632 1448.95,686.632 1449.51,686.632 1450.07,686.632 1450.63,686.632 1451.19,686.632 1451.75,686.632 1452.31,686.632 1452.87,686.632 1453.42,686.632 1453.98,686.632 1454.54,686.632 1455.1,686.632 1455.66,686.632 1456.22,686.632 1456.78,686.632 1457.34,686.632 1457.9,686.632 1458.46,686.632 1459.02,686.632 1459.58,686.632 1460.14,686.632 1460.7,686.632 1461.25,686.632 1461.81,686.632 1462.37,686.632 1462.93,686.632 1463.49,686.632 1464.05,686.632 1464.61,686.632 1465.17,686.632 1465.73,686.632 1466.29,686.632 1466.85,686.632 1467.41,686.632 1467.97,686.632 1468.52,686.632 1469.08,686.632 1469.64,686.632 1470.2,686.632 1470.76,686.632 1471.32,686.632 1471.88,686.632 1472.44,686.632 1473,686.632 1473.56,686.632 1474.12,686.632 1474.68,686.632 1475.24,686.632 1475.79,686.632 1476.35,686.632 1476.91,686.632 1477.47,686.632 1478.03,686.632 1478.59,686.632 1479.15,686.632 1479.71,686.632 1480.27,686.632 1480.83,686.632 1481.39,686.632 1481.95,686.632 1482.51,686.632 1483.07,686.632 1483.62,686.632 1484.18,686.632 1484.74,686.632 1485.3,686.632 1485.86,686.632 1486.42,686.632 1486.98,686.632 1487.54,686.632 1488.1,686.632 1488.66,686.632 1489.22,686.632 1489.78,686.632 1490.34,686.632 1490.89,686.632 1491.45,686.632 1492.01,686.632 1492.57,686.632 1493.13,686.632 1493.69,686.632 1494.25,686.632 1494.81,686.632 1495.37,686.632 1495.93,686.632 1496.49,686.632 1497.05,686.632 1497.61,686.632 1498.16,686.632 1498.72,686.632 1499.28,686.632 1499.84,686.632 1500.4,686.632 1500.96,686.632 1501.52,686.632 1502.08,686.632 1502.64,686.632 1503.2,686.632 1503.76,686.632 1504.32,686.632 1504.88,686.632 1505.44,686.632 1505.99,686.632 1506.55,686.632 1507.11,686.632 1507.67,686.632 1508.23,686.632 1508.79,686.632 1509.35,686.632 1509.91,686.632 1510.47,686.632 1511.03,686.632 1511.59,686.632 1512.15,686.632 1512.71,686.632 1513.26,686.632 1513.82,686.632 1514.38,686.632 1514.94,686.632 1515.5,686.632 1516.06,686.632 1516.62,686.632 1517.18,686.632 1517.74,686.632 1518.3,686.632 1518.86,686.632 1519.42,686.632 1519.98,686.632 1520.53,686.632 1521.09,686.632 1521.65,686.632 1522.21,686.632 1522.77,686.632 1523.33,686.632 1523.89,686.632 1524.45,686.632 1525.01,686.632 1525.57,686.632 1526.13,686.632 1526.69,686.632 1527.25,686.632 1527.81,686.632 1528.36,686.632 1528.92,686.632 1529.48,686.632 1530.04,686.632 1530.6,686.632 1531.16,686.632 1531.72,686.632 1532.28,686.632 1532.84,686.632 1533.4,686.632 1533.96,686.632 1534.52,686.632 1535.08,686.632 1535.63,686.632 1536.19,686.632 1536.75,686.632 1537.31,686.632 1537.87,686.632 1538.43,686.632 1538.99,686.632 1539.55,686.632 1540.11,686.632 1540.67,686.632 1541.23,686.632 1541.79,686.632 1542.35,686.632 1542.9,686.632 1543.46,686.632 1544.02,686.632 1544.58,686.632 1545.14,686.632 1545.7,686.632 1546.26,686.632 1546.82,686.632 1547.38,686.632 1547.94,686.632 1548.5,686.632 1549.06,686.632 1549.62,686.632 1550.18,686.632 1550.73,686.632 1551.29,686.632 1551.85,686.632 1552.41,686.632 1552.97,686.632 1553.53,686.632 1554.09,686.632 1554.65,686.632 1555.21,686.632 1555.77,686.632 1556.33,686.632 1556.89,686.632 1557.45,686.632 1558,686.632 1558.56,686.632 1559.12,686.632 1559.68,686.632 1560.24,686.632 1560.8,686.632 1561.36,686.632 1561.92,686.632 1562.48,686.632 1563.04,686.632 1563.6,686.632 1564.16,686.632 1564.72,686.632 1565.28,686.632 1565.83,686.632 1566.39,686.632 1566.95,686.632 1567.51,686.632 1568.07,686.632 1568.63,686.632 1569.19,686.632 1569.75,686.632 1570.31,686.632 1570.87,686.632 1571.43,686.632 1571.99,686.632 1572.55,686.632 1573.1,686.632 1573.66,686.632 1574.22,686.632 1574.78,686.632 1575.34,686.632 1575.9,686.632 1576.46,686.632 1577.02,686.632 1577.58,686.632 1578.14,686.632 1578.7,686.632 1579.26,686.632 1579.82,686.632 1580.37,686.632 1580.93,686.632 1581.49,686.632 1582.05,686.632 1582.61,686.632 1583.17,686.632 1583.73,686.632 1584.29,686.632 1584.85,686.632 1585.41,686.632 1585.97,686.632 1586.53,686.632 1587.09,686.632 1587.65,686.632 1588.2,686.632 1588.76,686.632 1589.32,686.632 1589.88,686.632 1590.44,686.632 1591,686.632 1591.56,686.632 1592.12,686.632 1592.68,686.632 1593.24,686.632 1593.8,686.632 1594.36,686.632 1594.92,686.632 1595.47,686.632 1596.03,686.632 1596.59,686.632 1597.15,686.632 1597.71,686.632 1598.27,686.632 1598.83,686.632 1599.39,686.632 1599.95,686.632 1600.51,686.632 1601.07,686.632 1601.63,686.632 1602.19,686.632 1602.74,686.632 1603.3,686.632 1603.86,686.632 1604.42,686.632 1604.98,686.632 1605.54,686.632 1606.1,686.632 1606.66,686.632 1607.22,686.632 1607.78,686.632 1608.34,686.632 1608.9,686.632 1609.46,686.632 1610.02,686.632 1610.57,686.632 1611.13,686.632 1611.69,686.632 1612.25,686.632 1612.81,686.632 1613.37,686.632 1613.93,686.632 1614.49,686.632 1615.05,686.632 1615.61,686.632 1616.17,686.632 1616.73,686.632 1617.29,686.632 1617.84,686.632 1618.4,686.632 1618.96,686.632 1619.52,686.632 1620.08,686.632 1620.64,686.632 1621.2,686.632 1621.76,686.632 1622.32,686.632 1622.88,686.632 1623.44,686.632 1624,686.632 1624.56,686.632 1625.11,686.632 1625.67,686.632 1626.23,686.632 1626.79,686.632 1627.35,686.632 1627.91,686.632 1628.47,686.632 1629.03,686.632 1629.59,686.632 1630.15,686.632 1630.71,686.632 1631.27,686.632 1631.83,686.632 1632.39,686.632 1632.94,686.632 1633.5,686.632 1634.06,686.632 1634.62,686.632 1635.18,686.632 1635.74,686.632 1636.3,686.632 1636.86,686.632 1637.42,686.632 1637.98,686.632 1638.54,686.632 1639.1,686.632 1639.66,686.632 1640.21,686.632 1640.77,686.632 1641.33,686.632 1641.89,686.632 1642.45,686.632 1643.01,686.632 1643.57,686.632 1644.13,686.632 1644.69,686.632 1645.25,686.632 1645.81,686.632 1646.37,686.632 1646.93,686.632 1647.48,686.632 1648.04,686.632 1648.6,686.632 1649.16,686.632 1649.72,686.632 1650.28,686.632 1650.84,686.632 1651.4,686.632 1651.96,686.632 1652.52,686.632 1653.08,686.632 1653.64,686.632 1654.2,686.632 1654.76,686.632 1655.31,686.632 1655.87,686.632 1656.43,686.632 1656.99,686.632 1657.55,686.632 1658.11,686.632 1658.67,686.632 1659.23,686.632 1659.79,686.632 1660.35,686.632 1660.91,686.632 1661.47,686.632 1662.03,686.632 1662.58,686.632 1663.14,686.632 1663.7,686.632 1664.26,686.632 1664.82,686.632 1665.38,686.632 1665.94,686.632 1666.5,686.632 1667.06,686.632 1667.62,686.632 1668.18,686.632 1668.74,686.632 1669.3,686.632 1669.85,686.632 1670.41,686.632 1670.97,686.632 1671.53,686.632 1672.09,686.632 1672.65,686.632 1673.21,686.632 1673.77,686.632 1674.33,686.632 1674.89,686.632 1675.45,686.632 1676.01,686.632 1676.57,686.632 1677.13,686.632 1677.68,686.632 1678.24,686.632 1678.8,686.632 1679.36,686.632 1679.92,686.632 1680.48,686.632 1681.04,686.632 1681.6,686.632 1682.16,686.632 1682.72,686.632 1683.28,686.632 1683.84,686.632 1684.4,686.632 1684.95,686.632 1685.51,686.632 1686.07,686.632 1686.63,686.632 1687.19,686.632 1687.75,686.632 1688.31,686.632 1688.87,686.632 1689.43,686.632 1689.99,686.632 1690.55,686.632 1691.11,686.632 1691.67,686.632 1692.23,686.632 1692.78,686.632 1693.34,686.632 1693.9,686.632 1694.46,686.632 1695.02,686.632 1695.58,686.632 1696.14,686.632 1696.7,686.632 1697.26,686.632 1697.82,686.632 1698.38,686.632 1698.94,686.632 1699.5,686.632 1700.05,686.632 1700.61,686.632 1701.17,686.632 1701.73,686.632 1702.29,686.632 1702.85,686.632 1703.41,686.632 1703.97,686.632 1704.53,686.632 1705.09,686.632 1705.65,686.632 1706.21,686.632 1706.77,686.632 1707.32,686.632 1707.88,686.632 1708.44,686.632 1709,686.632 1709.56,686.632 1710.12,686.632 1710.68,686.632 1711.24,686.632 1711.8,686.632 1712.36,686.632 1712.92,686.632 1713.48,686.632 1714.04,686.632 1714.6,686.632 1715.15,686.632 1715.71,686.632 1716.27,686.632 1716.83,686.632 1717.39,686.632 1717.95,686.632 1718.51,686.632 1719.07,686.632 1719.63,686.632 1720.19,686.632 1720.75,686.632 1721.31,686.632 1721.87,686.632 1722.42,686.632 1722.98,686.632 1723.54,686.632 1724.1,686.632 1724.66,686.632 1725.22,686.632 1725.78,686.632 1726.34,686.632 1726.9,686.632 1727.46,686.632 1728.02,686.632 1728.58,686.632 1729.14,686.632 1729.69,686.632 1730.25,686.632 1730.81,686.632 1731.37,686.632 1731.93,686.632 1732.49,686.632 1733.05,686.632 1733.61,686.632 1734.17,686.632 1734.73,686.632 1735.29,686.632 1735.85,686.632 1736.41,686.632 1736.97,686.632 1737.52,686.632 1738.08,686.632 1738.64,686.632 1739.2,686.632 1739.76,686.632 1740.32,686.632 1740.88,686.632 1741.44,686.632 1742,686.632 1742.56,686.632 1743.12,686.632 1743.68,686.632 1744.24,686.632 1744.79,686.632 1745.35,686.632 1745.91,686.632 1746.47,686.632 1747.03,686.632 1747.59,686.632 1748.15,686.632 1748.71,686.632 1749.27,686.632 1749.83,686.632 1750.39,686.632 1750.95,686.632 1751.51,686.632 1752.06,686.632 1752.62,686.632 1753.18,686.632 1753.74,686.632 1754.3,686.632 1754.86,686.632 1755.42,686.632 1755.98,686.632 1756.54,686.632 1757.1,686.632 1757.66,686.632 1758.22,686.632 1758.78,686.632 1759.34,686.632 1759.89,686.632 1760.45,686.632 1761.01,686.632 1761.57,686.632 1762.13,686.632 1762.69,686.632 1763.25,686.632 1763.81,686.632 1764.37,686.632 1764.93,686.632 1765.49,686.632 1766.05,686.632 1766.61,686.632 1767.16,686.632 1767.72,686.632 1768.28,686.632 1768.84,686.632 1769.4,686.632 1769.96,686.632 1770.52,686.632 1771.08,686.632 1771.64,686.632 1772.2,686.632 1772.76,686.632 1773.32,686.632 1773.88,686.632 1774.43,686.632 1774.99,686.632 1775.55,686.632 1776.11,686.632 1776.67,686.632 1777.23,686.632 1777.79,686.632 1778.35,686.632 1778.91,686.632 1779.47,686.632 1780.03,686.632 1780.59,686.632 1781.15,686.632 1781.71,686.632 1782.26,686.632 1782.82,686.632 1783.38,686.632 1783.94,686.632 1784.5,686.632 1785.06,686.632 1785.62,686.632 1786.18,686.632 1786.74,686.632 1787.3,686.632 1787.86,686.632 1788.42,686.632 1788.98,686.632 1789.53,686.632 1790.09,686.632 1790.65,686.632 1791.21,686.632 1791.77,686.632 1792.33,686.632 1792.89,686.632 1793.45,686.632 1794.01,686.632 1794.57,686.632 1795.13,686.632 1795.69,686.632 1796.25,686.632 1796.8,686.632 1797.36,686.632 1797.92,686.632 1798.48,686.632 1799.04,686.632 1799.6,686.632 1800.16,686.632 1800.72,686.632 1801.28,686.632 1801.84,686.632 1802.4,686.632 1802.96,686.632 1803.52,686.632 1804.08,686.632 1804.63,686.632 1805.19,686.632 1805.75,686.632 1806.31,686.632 1806.87,686.632 1807.43,686.632 1807.99,686.632 1808.55,686.632 1809.11,686.632 1809.67,686.632 1810.23,686.632 1810.79,686.632 1811.35,686.632 1811.9,686.632 1812.46,686.632 1813.02,686.632 1813.58,686.632 1814.14,686.632 1814.7,686.632 1815.26,686.632 1815.82,686.632 1816.38,686.632 1816.94,686.632 1817.5,686.632 1818.06,686.632 1818.62,686.632 1819.18,686.632 1819.73,686.632 1820.29,686.632 1820.85,686.632 1821.41,686.632 1821.97,686.632 1822.53,686.632 1823.09,686.632 1823.65,686.632 1824.21,686.632 1824.77,686.632 1825.33,686.632 1825.89,686.632 1826.45,686.632 1827,686.632 1827.56,686.632 1828.12,686.632 1828.68,686.632 1829.24,686.632 1829.8,686.632 1830.36,686.632 1830.92,686.632 1831.48,686.632 1832.04,686.632 1832.6,686.632 1833.16,686.632 1833.72,686.632 1834.27,686.632 1834.83,686.632 1835.39,686.632 1835.95,686.632 1836.51,686.632 1837.07,686.632 1837.63,686.632 1838.19,686.632 \"/>\n<path clip-path=\"url(#clip973)\" d=\"M720.247 684.872 L720.806 684.872 L721.365 684.872 L721.924 684.872 L722.484 684.872 L723.043 684.872 L723.602 684.872 L724.161 684.872 L724.721 684.872 L725.28 684.872 L725.839 684.872 L726.398 684.872 L726.958 684.872 L727.517 684.872 L728.076 684.872 L728.635 684.872 L729.195 684.872 L729.754 684.872 L730.313 684.872 L730.872 684.872 L731.432 684.872 L731.991 684.872 L732.55 684.872 L733.109 684.872 L733.669 684.872 L734.228 684.872 L734.787 684.872 L735.346 684.872 L735.906 684.872 L736.465 684.872 L737.024 684.872 L737.583 684.872 L738.143 684.872 L738.702 684.872 L739.261 684.872 L739.82 684.872 L740.38 684.872 L740.939 684.872 L741.498 684.872 L742.057 684.872 L742.617 684.872 L743.176 684.872 L743.735 684.872 L744.294 684.872 L744.854 684.872 L745.413 684.872 L745.972 684.872 L746.531 684.872 L747.091 684.872 L747.65 684.872 L748.209 684.872 L748.768 684.872 L749.328 684.872 L749.887 684.872 L750.446 684.872 L751.005 684.872 L751.565 684.872 L752.124 684.872 L752.683 684.872 L753.242 684.872 L753.802 684.872 L754.361 684.872 L754.92 684.872 L755.479 684.872 L756.039 684.872 L756.598 684.872 L757.157 684.872 L757.716 684.872 L758.276 684.872 L758.835 684.872 L759.394 684.872 L759.953 684.872 L760.513 684.872 L761.072 684.872 L761.631 684.872 L762.19 684.872 L762.75 684.872 L763.309 684.872 L763.868 684.872 L764.427 684.872 L764.987 684.872 L765.546 684.872 L766.105 684.872 L766.664 684.872 L767.224 684.872 L767.783 684.872 L768.342 684.872 L768.901 684.872 L769.461 684.872 L770.02 684.872 L770.579 684.872 L771.138 684.872 L771.698 684.872 L772.257 684.872 L772.816 684.872 L773.375 684.872 L773.935 684.872 L774.494 684.872 L775.053 684.872 L775.612 684.872 L776.172 684.872 L776.731 684.872 L777.29 684.872 L777.849 684.872 L778.409 684.872 L778.968 684.872 L779.527 684.872 L780.086 684.872 L780.646 684.872 L781.205 684.872 L781.764 684.872 L782.323 684.872 L782.883 684.872 L783.442 684.872 L784.001 684.872 L784.56 684.872 L785.12 684.872 L785.679 684.872 L786.238 684.872 L786.797 684.872 L787.357 684.872 L787.916 684.872 L788.475 684.872 L789.034 684.872 L789.594 684.872 L790.153 684.872 L790.712 684.872 L791.271 684.872 L791.831 684.872 L792.39 684.872 L792.949 684.872 L793.508 684.872 L794.068 684.872 L794.627 684.872 L795.186 684.872 L795.745 684.872 L796.305 684.872 L796.864 684.872 L797.423 684.872 L797.982 684.872 L798.542 684.872 L799.101 684.872 L799.66 684.872 L800.219 684.872 L800.779 684.872 L801.338 684.872 L801.897 684.872 L802.456 684.872 L803.016 684.872 L803.575 684.872 L804.134 684.872 L804.693 684.872 L805.253 684.872 L805.812 684.872 L806.371 684.872 L806.931 684.872 L807.49 684.872 L808.049 684.872 L808.608 684.872 L809.168 684.872 L809.727 684.872 L810.286 684.872 L810.845 684.872 L811.405 684.872 L811.964 684.872 L812.523 684.872 L813.082 684.872 L813.642 684.872 L814.201 684.872 L814.76 684.872 L815.319 684.872 L815.879 684.872 L816.438 684.872 L816.997 684.872 L817.556 684.872 L818.116 684.872 L818.675 684.872 L819.234 684.872 L819.793 684.872 L820.353 684.872 L820.912 684.872 L821.471 684.872 L822.03 684.872 L822.59 684.872 L823.149 684.872 L823.708 684.872 L824.267 684.872 L824.827 684.872 L825.386 684.872 L825.945 684.872 L826.504 684.872 L827.064 684.872 L827.623 684.872 L828.182 684.872 L828.741 684.872 L829.301 684.872 L829.86 684.872 L830.419 684.872 L830.978 684.872 L831.538 684.872 L832.097 684.872 L832.656 684.872 L833.215 684.872 L833.775 684.872 L834.334 684.872 L834.893 684.872 L835.452 684.872 L836.012 684.872 L836.571 684.872 L837.13 684.872 L837.689 684.872 L838.249 684.872 L838.808 684.872 L839.367 684.872 L839.926 684.872 L840.486 684.872 L841.045 684.872 L841.604 684.872 L842.163 684.872 L842.723 684.872 L843.282 684.872 L843.841 684.872 L844.4 684.872 L844.96 684.872 L845.519 684.872 L846.078 684.872 L846.637 684.872 L847.197 684.872 L847.756 684.872 L848.315 684.872 L848.874 684.872 L849.434 684.872 L849.993 684.872 L850.552 684.872 L851.111 684.872 L851.671 684.872 L852.23 684.872 L852.789 684.872 L853.348 684.872 L853.908 684.872 L854.467 684.872 L855.026 684.872 L855.585 684.872 L856.145 684.872 L856.704 684.872 L857.263 684.872 L857.822 684.872 L858.382 684.872 L858.941 684.872 L859.5 684.872 L860.059 684.872 L860.619 684.872 L861.178 684.872 L861.737 684.872 L862.296 684.872 L862.856 684.872 L863.415 684.872 L863.974 684.872 L864.533 684.872 L865.093 684.872 L865.652 684.872 L866.211 684.872 L866.77 684.872 L867.33 684.872 L867.889 684.872 L868.448 684.872 L869.007 684.872 L869.567 684.872 L870.126 684.872 L870.685 684.872 L871.244 684.872 L871.804 684.872 L872.363 684.872 L872.922 684.872 L873.481 684.872 L874.041 684.872 L874.6 684.872 L875.159 684.872 L875.718 684.872 L876.278 684.872 L876.837 684.872 L877.396 684.872 L877.955 684.872 L878.515 684.872 L879.074 684.872 L879.633 684.872 L880.192 684.872 L880.752 684.872 L881.311 684.872 L881.87 684.872 L882.429 684.872 L882.989 684.872 L883.548 684.872 L884.107 684.872 L884.666 684.872 L885.226 684.872 L885.785 684.872 L886.344 684.872 L886.903 684.872 L887.463 684.872 L888.022 684.872 L888.581 684.872 L889.14 684.872 L889.7 684.872 L890.259 684.872 L890.818 684.872 L891.377 684.872 L891.937 684.872 L892.496 684.872 L893.055 684.872 L893.614 684.872 L894.174 684.872 L894.733 684.872 L895.292 684.872 L895.851 684.872 L896.411 684.872 L896.97 684.872 L897.529 684.872 L898.088 684.872 L898.648 684.872 L899.207 684.872 L899.766 684.872 L900.325 684.872 L900.885 684.872 L901.444 684.872 L902.003 684.872 L902.562 684.872 L903.122 684.872 L903.681 684.872 L904.24 684.872 L904.799 684.872 L905.359 684.872 L905.918 684.872 L906.477 684.872 L907.036 684.872 L907.596 684.872 L908.155 684.872 L908.714 684.872 L909.273 684.872 L909.833 684.872 L910.392 684.872 L910.951 684.872 L911.51 684.872 L912.07 684.872 L912.629 684.872 L913.188 684.872 L913.747 684.872 L914.307 684.872 L914.866 684.872 L915.425 684.872 L915.984 684.872 L916.544 684.872 L917.103 684.872 L917.662 684.872 L918.221 684.872 L918.781 684.872 L919.34 684.872 L919.899 684.872 L920.458 684.872 L921.018 684.872 L921.577 684.872 L922.136 684.872 L922.695 684.872 L923.255 684.872 L923.814 684.872 L924.373 684.872 L924.932 684.872 L925.492 684.872 L926.051 684.872 L926.61 684.872 L927.169 684.872 L927.729 684.872 L928.288 684.872 L928.847 684.872 L929.406 684.872 L929.966 684.872 L930.525 684.872 L931.084 684.872 L931.644 684.872 L932.203 684.872 L932.762 684.872 L933.321 684.872 L933.881 684.872 L934.44 684.872 L934.999 684.872 L935.558 684.872 L936.118 684.872 L936.677 684.872 L937.236 684.872 L937.795 684.872 L938.355 684.872 L938.914 684.872 L939.473 684.872 L940.032 684.872 L940.592 684.872 L941.151 684.872 L941.71 684.872 L942.269 684.872 L942.829 684.872 L943.388 684.872 L943.947 684.872 L944.506 684.872 L945.066 684.872 L945.625 684.872 L946.184 684.872 L946.743 684.872 L947.303 684.872 L947.862 684.872 L948.421 684.872 L948.98 684.872 L949.54 684.872 L950.099 684.872 L950.658 684.872 L951.217 684.872 L951.777 684.872 L952.336 684.872 L952.895 684.872 L953.454 684.872 L954.014 684.872 L954.573 684.872 L955.132 684.872 L955.691 684.872 L956.251 684.872 L956.81 684.872 L957.369 684.872 L957.928 684.872 L958.488 684.872 L959.047 684.872 L959.606 684.872 L960.165 684.872 L960.725 684.872 L961.284 684.872 L961.843 684.872 L962.402 684.872 L962.962 684.872 L963.521 684.872 L964.08 684.872 L964.639 684.872 L965.199 684.872 L965.758 684.872 L966.317 684.872 L966.876 684.872 L967.436 684.872 L967.995 684.872 L968.554 684.872 L969.113 684.872 L969.673 684.872 L970.232 684.872 L970.791 684.872 L971.35 684.872 L971.91 684.872 L972.469 684.872 L973.028 684.872 L973.587 684.872 L974.147 684.872 L974.706 684.872 L975.265 684.872 L975.824 684.872 L976.384 684.872 L976.943 684.872 L977.502 684.872 L978.061 684.872 L978.621 684.872 L979.18 684.872 L979.739 684.872 L980.298 684.872 L980.858 684.872 L981.417 684.872 L981.976 684.872 L982.535 684.872 L983.095 684.872 L983.654 684.872 L984.213 684.872 L984.772 684.872 L985.332 684.872 L985.891 684.872 L986.45 684.872 L987.009 684.872 L987.569 684.872 L988.128 684.872 L988.687 684.872 L989.246 684.872 L989.806 684.872 L990.365 684.872 L990.924 684.872 L991.483 684.872 L992.043 684.872 L992.602 684.872 L993.161 684.872 L993.72 684.872 L994.28 684.872 L994.839 684.872 L995.398 684.872 L995.957 684.872 L996.517 684.872 L997.076 684.872 L997.635 684.872 L998.194 684.872 L998.754 684.872 L999.313 684.872 L999.872 684.872 L1000.43 684.872 L1000.99 684.872 L1001.55 684.872 L1002.11 684.872 L1002.67 684.872 L1003.23 684.872 L1003.79 684.872 L1004.35 684.872 L1004.91 684.872 L1005.46 684.872 L1006.02 684.872 L1006.58 684.872 L1007.14 684.872 L1007.7 684.872 L1008.26 684.872 L1008.82 684.872 L1009.38 684.872 L1009.94 684.872 L1010.5 684.872 L1011.06 684.872 L1011.62 684.872 L1012.18 684.872 L1012.73 684.872 L1013.29 684.872 L1013.85 684.872 L1014.41 684.872 L1014.97 684.872 L1015.53 684.872 L1016.09 684.872 L1016.65 684.872 L1017.21 684.872 L1017.77 684.872 L1018.33 684.872 L1018.89 684.872 L1019.45 684.872 L1020.01 684.872 L1020.56 684.872 L1021.12 684.872 L1021.68 684.872 L1022.24 684.872 L1022.8 684.872 L1023.36 684.872 L1023.92 684.872 L1024.48 684.872 L1025.04 684.872 L1025.6 684.872 L1026.16 684.872 L1026.72 684.872 L1027.28 684.872 L1027.83 684.872 L1028.39 684.872 L1028.95 684.872 L1029.51 684.872 L1030.07 684.872 L1030.63 684.872 L1031.19 684.872 L1031.75 684.872 L1032.31 684.872 L1032.87 684.872 L1033.43 684.872 L1033.99 684.872 L1034.55 684.872 L1035.1 684.872 L1035.66 684.872 L1036.22 684.872 L1036.78 684.872 L1037.34 684.872 L1037.9 684.872 L1038.46 684.872 L1039.02 684.872 L1039.58 684.872 L1040.14 684.872 L1040.7 684.872 L1041.26 684.872 L1041.82 684.872 L1042.38 684.872 L1042.93 684.872 L1043.49 684.872 L1044.05 684.872 L1044.61 684.872 L1045.17 684.872 L1045.73 684.872 L1046.29 684.872 L1046.85 684.872 L1047.41 684.872 L1047.97 684.872 L1048.53 684.872 L1049.09 684.872 L1049.65 684.872 L1050.2 684.872 L1050.76 684.872 L1051.32 684.872 L1051.88 684.872 L1052.44 684.872 L1053 684.872 L1053.56 684.872 L1054.12 684.872 L1054.68 684.872 L1055.24 684.872 L1055.8 684.872 L1056.36 684.872 L1056.92 684.872 L1057.48 684.872 L1058.03 684.872 L1058.59 684.872 L1059.15 684.872 L1059.71 684.872 L1060.27 684.872 L1060.83 684.872 L1061.39 684.872 L1061.95 684.872 L1062.51 684.872 L1063.07 684.872 L1063.63 684.872 L1064.19 684.872 L1064.75 684.872 L1065.3 684.872 L1065.86 684.872 L1066.42 684.872 L1066.98 684.872 L1067.54 684.872 L1068.1 684.872 L1068.66 684.872 L1069.22 684.872 L1069.78 684.872 L1070.34 684.872 L1070.9 684.872 L1071.46 684.872 L1072.02 684.872 L1072.57 684.872 L1073.13 684.872 L1073.69 684.872 L1074.25 684.872 L1074.81 684.872 L1075.37 684.872 L1075.93 684.872 L1076.49 684.872 L1077.05 684.872 L1077.61 684.872 L1078.17 684.872 L1078.73 684.872 L1079.29 684.872 L1079.85 684.872 L1080.4 684.872 L1080.96 684.872 L1081.52 684.872 L1082.08 684.872 L1082.64 684.872 L1083.2 684.872 L1083.76 684.872 L1084.32 684.872 L1084.88 684.872 L1085.44 684.872 L1086 684.872 L1086.56 684.872 L1087.12 684.872 L1087.67 684.872 L1088.23 684.872 L1088.79 684.872 L1089.35 684.872 L1089.91 684.872 L1090.47 684.872 L1091.03 684.872 L1091.59 684.872 L1092.15 684.872 L1092.71 684.872 L1093.27 684.872 L1093.83 684.872 L1094.39 684.872 L1094.94 684.872 L1095.5 684.872 L1096.06 684.872 L1096.62 684.872 L1097.18 684.872 L1097.74 684.872 L1098.3 684.872 L1098.86 684.872 L1099.42 684.872 L1099.98 684.872 L1100.54 684.872 L1101.1 684.872 L1101.66 684.872 L1102.22 684.872 L1102.77 684.872 L1103.33 684.872 L1103.89 684.872 L1104.45 684.872 L1105.01 684.872 L1105.57 684.872 L1106.13 684.872 L1106.69 684.872 L1107.25 684.872 L1107.81 684.872 L1108.37 684.872 L1108.93 684.872 L1109.49 684.872 L1110.04 684.872 L1110.6 684.872 L1111.16 684.872 L1111.72 684.872 L1112.28 684.872 L1112.84 684.872 L1113.4 684.872 L1113.96 684.872 L1114.52 684.872 L1115.08 684.872 L1115.64 684.872 L1116.2 684.872 L1116.76 684.872 L1117.31 684.872 L1117.87 684.872 L1118.43 684.872 L1118.99 684.872 L1119.55 684.872 L1120.11 684.872 L1120.67 684.872 L1121.23 684.872 L1121.79 684.872 L1122.35 684.872 L1122.91 684.872 L1123.47 684.872 L1124.03 684.872 L1124.59 684.872 L1125.14 684.872 L1125.7 684.872 L1126.26 684.872 L1126.82 684.872 L1127.38 684.872 L1127.94 684.872 L1128.5 684.872 L1129.06 684.872 L1129.62 684.872 L1130.18 684.872 L1130.74 684.872 L1131.3 684.872 L1131.86 684.872 L1132.41 684.872 L1132.97 684.872 L1133.53 684.872 L1134.09 684.872 L1134.65 684.872 L1135.21 684.872 L1135.77 684.872 L1136.33 684.872 L1136.89 684.872 L1137.45 684.872 L1138.01 684.872 L1138.57 684.872 L1139.13 684.872 L1139.68 684.872 L1140.24 684.872 L1140.8 684.872 L1141.36 684.872 L1141.92 684.872 L1142.48 684.872 L1143.04 684.872 L1143.6 684.872 L1144.16 684.872 L1144.72 684.872 L1145.28 684.872 L1145.84 684.872 L1146.4 684.872 L1146.96 684.872 L1147.51 684.872 L1148.07 684.872 L1148.63 684.872 L1149.19 684.872 L1149.75 684.872 L1150.31 684.872 L1150.87 684.872 L1151.43 684.872 L1151.99 684.872 L1152.55 684.872 L1153.11 684.872 L1153.67 684.872 L1154.23 684.872 L1154.78 684.872 L1155.34 684.872 L1155.9 684.872 L1156.46 684.872 L1157.02 684.872 L1157.58 684.872 L1158.14 684.872 L1158.7 684.872 L1159.26 684.872 L1159.82 684.872 L1160.38 684.872 L1160.94 684.872 L1161.5 684.872 L1162.05 684.872 L1162.61 684.872 L1163.17 684.872 L1163.73 684.872 L1164.29 684.872 L1164.85 684.872 L1165.41 684.872 L1165.97 684.872 L1166.53 684.872 L1167.09 684.872 L1167.65 684.872 L1168.21 684.872 L1168.77 684.872 L1169.33 684.872 L1169.88 684.872 L1170.44 684.872 L1171 684.872 L1171.56 684.872 L1172.12 684.872 L1172.68 684.872 L1173.24 684.872 L1173.8 684.872 L1174.36 684.872 L1174.92 684.872 L1175.48 684.872 L1176.04 684.872 L1176.6 684.872 L1177.15 684.872 L1177.71 684.872 L1178.27 684.872 L1178.83 684.872 L1179.39 684.872 L1179.95 684.872 L1180.51 684.872 L1181.07 684.872 L1181.63 684.872 L1182.19 684.872 L1182.75 684.872 L1183.31 684.872 L1183.87 684.872 L1184.43 684.872 L1184.98 684.872 L1185.54 684.872 L1186.1 684.872 L1186.66 684.872 L1187.22 684.872 L1187.78 684.872 L1188.34 684.872 L1188.9 684.872 L1189.46 684.872 L1190.02 684.872 L1190.58 684.872 L1191.14 684.872 L1191.7 684.872 L1192.25 684.872 L1192.81 684.872 L1193.37 684.872 L1193.93 684.872 L1194.49 684.872 L1195.05 684.872 L1195.61 684.872 L1196.17 684.872 L1196.73 684.872 L1197.29 684.872 L1197.85 684.872 L1198.41 684.872 L1198.97 684.872 L1199.52 684.872 L1200.08 684.872 L1200.64 684.872 L1201.2 684.872 L1201.76 684.872 L1202.32 684.872 L1202.88 684.872 L1203.44 684.872 L1204 684.872 L1204.56 684.872 L1205.12 684.872 L1205.68 684.872 L1206.24 684.872 L1206.8 684.872 L1207.35 684.872 L1207.91 684.872 L1208.47 684.872 L1209.03 684.872 L1209.59 684.872 L1210.15 684.872 L1210.71 684.872 L1211.27 684.872 L1211.83 684.872 L1212.39 684.872 L1212.95 684.872 L1213.51 684.872 L1214.07 684.872 L1214.62 684.872 L1215.18 684.872 L1215.74 684.872 L1216.3 684.872 L1216.86 684.872 L1217.42 684.872 L1217.98 684.872 L1218.54 684.872 L1219.1 684.872 L1219.66 684.872 L1220.22 684.872 L1220.78 684.872 L1221.34 684.872 L1221.89 684.872 L1222.45 684.872 L1223.01 684.872 L1223.57 684.872 L1224.13 684.872 L1224.69 684.872 L1225.25 684.872 L1225.81 684.872 L1226.37 684.872 L1226.93 684.872 L1227.49 684.872 L1228.05 684.872 L1228.61 684.872 L1229.17 684.872 L1229.72 684.872 L1230.28 684.872 L1230.84 684.872 L1231.4 684.872 L1231.96 684.872 L1232.52 684.872 L1233.08 684.872 L1233.64 684.872 L1234.2 684.872 L1234.76 684.872 L1235.32 684.872 L1235.88 684.872 L1236.44 684.872 L1236.99 684.872 L1237.55 684.872 L1238.11 684.872 L1238.67 684.872 L1239.23 684.872 L1239.79 684.872 L1240.35 684.872 L1240.91 684.872 L1241.47 684.872 L1242.03 684.872 L1242.59 684.872 L1243.15 684.872 L1243.71 684.872 L1244.26 684.872 L1244.82 684.872 L1245.38 684.872 L1245.94 684.872 L1246.5 684.872 L1247.06 684.872 L1247.62 684.872 L1248.18 684.872 L1248.74 684.872 L1249.3 684.872 L1249.86 684.872 L1250.42 684.872 L1250.98 684.872 L1251.54 684.872 L1252.09 684.872 L1252.65 684.872 L1253.21 684.872 L1253.77 684.872 L1254.33 684.872 L1254.89 684.872 L1255.45 684.872 L1256.01 684.872 L1256.57 684.872 L1257.13 684.872 L1257.69 684.872 L1258.25 684.872 L1258.81 684.872 L1259.36 684.872 L1259.92 684.872 L1260.48 684.872 L1261.04 684.872 L1261.6 684.872 L1262.16 684.872 L1262.72 684.872 L1263.28 684.872 L1263.84 684.872 L1264.4 684.872 L1264.96 684.872 L1265.52 684.872 L1266.08 684.872 L1266.63 684.872 L1267.19 684.872 L1267.75 684.872 L1268.31 684.872 L1268.87 684.872 L1269.43 684.872 L1269.99 684.872 L1270.55 684.872 L1271.11 684.872 L1271.67 684.872 L1272.23 684.872 L1272.79 684.872 L1273.35 684.872 L1273.91 684.872 L1274.46 684.872 L1275.02 684.872 L1275.58 684.872 L1276.14 684.872 L1276.7 684.872 L1277.26 684.872 L1277.82 684.872 L1278.38 684.872 L1278.94 684.872 L1279.5 684.872 L1280.06 684.872 L1280.62 684.872 L1281.18 684.872 L1281.73 684.872 L1282.29 684.872 L1282.85 684.872 L1283.41 684.872 L1283.97 684.872 L1284.53 684.872 L1285.09 684.872 L1285.65 684.872 L1286.21 684.872 L1286.77 684.872 L1287.33 684.872 L1287.89 684.872 L1288.45 684.872 L1289 684.872 L1289.56 684.872 L1290.12 684.872 L1290.68 684.872 L1291.24 684.872 L1291.8 684.872 L1292.36 684.872 L1292.92 684.872 L1293.48 684.872 L1294.04 684.872 L1294.6 684.872 L1295.16 684.872 L1295.72 684.872 L1296.28 684.872 L1296.83 684.872 L1297.39 684.872 L1297.95 684.872 L1298.51 684.872 L1299.07 684.872 L1299.63 684.872 L1300.19 684.872 L1300.75 684.872 L1301.31 684.872 L1301.87 684.872 L1302.43 684.872 L1302.99 684.872 L1303.55 684.872 L1304.1 684.872 L1304.66 684.872 L1305.22 684.872 L1305.78 684.872 L1306.34 684.872 L1306.9 684.872 L1307.46 684.872 L1308.02 684.872 L1308.58 684.872 L1309.14 684.872 L1309.7 684.872 L1310.26 684.872 L1310.82 684.872 L1311.38 684.872 L1311.93 684.872 L1312.49 684.872 L1313.05 684.872 L1313.61 684.872 L1314.17 684.872 L1314.73 684.872 L1315.29 684.872 L1315.85 684.872 L1316.41 684.872 L1316.97 684.872 L1317.53 684.872 L1318.09 684.872 L1318.65 684.872 L1319.2 684.872 L1319.76 684.872 L1320.32 684.872 L1320.88 684.872 L1321.44 684.872 L1322 684.872 L1322.56 684.872 L1323.12 684.872 L1323.68 684.872 L1324.24 684.872 L1324.8 684.872 L1325.36 684.872 L1325.92 684.872 L1326.47 684.872 L1327.03 684.872 L1327.59 684.872 L1328.15 684.872 L1328.71 684.872 L1329.27 684.872 L1329.83 684.872 L1330.39 684.872 L1330.95 684.872 L1331.51 684.872 L1332.07 684.872 L1332.63 684.872 L1333.19 684.872 L1333.75 684.872 L1334.3 684.872 L1334.86 684.872 L1335.42 684.872 L1335.98 684.872 L1336.54 684.872 L1337.1 684.872 L1337.66 684.872 L1338.22 684.872 L1338.78 684.872 L1339.34 684.872 L1339.9 684.872 L1340.46 684.872 L1341.02 684.872 L1341.57 684.872 L1342.13 684.872 L1342.69 684.872 L1343.25 684.872 L1343.81 684.872 L1344.37 684.872 L1344.93 684.872 L1345.49 684.872 L1346.05 684.872 L1346.61 684.872 L1347.17 684.872 L1347.73 684.872 L1348.29 684.872 L1348.84 684.872 L1349.4 684.872 L1349.96 684.872 L1350.52 684.872 L1351.08 684.872 L1351.64 684.872 L1352.2 684.872 L1352.76 684.872 L1353.32 684.872 L1353.88 684.872 L1354.44 684.872 L1355 684.872 L1355.56 684.872 L1356.12 684.872 L1356.67 684.872 L1357.23 684.872 L1357.79 684.872 L1358.35 684.872 L1358.91 684.872 L1359.47 684.872 L1360.03 684.872 L1360.59 684.872 L1361.15 684.872 L1361.71 684.872 L1362.27 684.872 L1362.83 684.872 L1363.39 684.872 L1363.94 684.872 L1364.5 684.872 L1365.06 684.872 L1365.62 684.872 L1366.18 684.872 L1366.74 684.872 L1367.3 684.872 L1367.86 684.872 L1368.42 684.872 L1368.98 684.872 L1369.54 684.872 L1370.1 684.872 L1370.66 684.872 L1371.21 684.872 L1371.77 684.872 L1372.33 684.872 L1372.89 684.872 L1373.45 684.872 L1374.01 684.872 L1374.57 684.872 L1375.13 684.872 L1375.69 684.872 L1376.25 684.872 L1376.81 684.872 L1377.37 684.872 L1377.93 684.872 L1378.49 684.872 L1379.04 684.872 L1379.6 684.872 L1380.16 684.872 L1380.72 684.872 L1381.28 684.872 L1381.84 684.872 L1382.4 684.872 L1382.96 684.872 L1383.52 684.872 L1384.08 684.872 L1384.64 684.872 L1385.2 684.872 L1385.76 684.872 L1386.31 684.872 L1386.87 684.872 L1387.43 684.872 L1387.99 684.872 L1388.55 684.872 L1389.11 684.872 L1389.67 684.872 L1390.23 684.872 L1390.79 684.872 L1391.35 684.872 L1391.91 684.872 L1392.47 684.872 L1393.03 684.872 L1393.58 684.872 L1394.14 684.872 L1394.7 684.872 L1395.26 684.872 L1395.82 684.872 L1396.38 684.872 L1396.94 684.872 L1397.5 684.872 L1398.06 684.872 L1398.62 684.872 L1399.18 684.872 L1399.74 684.872 L1400.3 684.872 L1400.86 684.872 L1401.41 684.872 L1401.97 684.872 L1402.53 684.872 L1403.09 684.872 L1403.65 684.872 L1404.21 684.872 L1404.77 684.872 L1405.33 684.872 L1405.89 684.872 L1406.45 684.872 L1407.01 684.872 L1407.57 684.872 L1408.13 684.872 L1408.68 684.872 L1409.24 684.872 L1409.8 684.872 L1410.36 684.872 L1410.92 684.872 L1411.48 684.872 L1412.04 684.872 L1412.6 684.872 L1413.16 684.872 L1413.72 684.872 L1414.28 684.872 L1414.84 684.872 L1415.4 684.872 L1415.95 684.872 L1416.51 684.872 L1417.07 684.872 L1417.63 684.872 L1418.19 684.872 L1418.75 684.872 L1419.31 684.872 L1419.87 684.872 L1420.43 684.872 L1420.99 684.872 L1421.55 684.872 L1422.11 684.872 L1422.67 684.872 L1423.23 684.872 L1423.78 684.872 L1424.34 684.872 L1424.9 684.872 L1425.46 684.872 L1426.02 684.872 L1426.58 684.872 L1427.14 684.872 L1427.7 684.872 L1428.26 684.872 L1428.82 684.872 L1429.38 684.872 L1429.94 684.872 L1430.5 684.872 L1431.05 684.872 L1431.61 684.872 L1432.17 684.872 L1432.73 684.872 L1433.29 684.872 L1433.85 684.872 L1434.41 684.872 L1434.97 684.872 L1435.53 684.872 L1436.09 684.872 L1436.65 684.872 L1437.21 684.872 L1437.77 684.872 L1438.33 684.872 L1438.88 684.872 L1439.44 684.872 L1440 684.872 L1440.56 684.872 L1441.12 684.872 L1441.68 684.872 L1442.24 684.872 L1442.8 684.872 L1443.36 684.872 L1443.92 684.872 L1444.48 684.872 L1445.04 684.872 L1445.6 684.872 L1446.15 684.872 L1446.71 684.872 L1447.27 684.872 L1447.83 684.872 L1448.39 684.872 L1448.95 684.872 L1449.51 684.872 L1450.07 684.872 L1450.63 684.872 L1451.19 684.872 L1451.75 684.872 L1452.31 684.872 L1452.87 684.872 L1453.42 684.872 L1453.98 684.872 L1454.54 684.872 L1455.1 684.872 L1455.66 684.872 L1456.22 684.872 L1456.78 684.872 L1457.34 684.872 L1457.9 684.872 L1458.46 684.872 L1459.02 684.872 L1459.58 684.872 L1460.14 684.872 L1460.7 684.872 L1461.25 684.872 L1461.81 684.872 L1462.37 684.872 L1462.93 684.872 L1463.49 684.872 L1464.05 684.872 L1464.61 684.872 L1465.17 684.872 L1465.73 684.872 L1466.29 684.872 L1466.85 684.872 L1467.41 684.872 L1467.97 684.872 L1468.52 684.872 L1469.08 684.872 L1469.64 684.872 L1470.2 684.872 L1470.76 684.872 L1471.32 684.872 L1471.88 684.872 L1472.44 684.872 L1473 684.872 L1473.56 684.872 L1474.12 684.872 L1474.68 684.872 L1475.24 684.872 L1475.79 684.872 L1476.35 684.872 L1476.91 684.872 L1477.47 684.872 L1478.03 684.872 L1478.59 684.872 L1479.15 684.872 L1479.71 684.872 L1480.27 684.872 L1480.83 684.872 L1481.39 684.872 L1481.95 684.872 L1482.51 684.872 L1483.07 684.872 L1483.62 684.872 L1484.18 684.872 L1484.74 684.872 L1485.3 684.872 L1485.86 684.872 L1486.42 684.872 L1486.98 684.872 L1487.54 684.872 L1488.1 684.872 L1488.66 684.872 L1489.22 684.872 L1489.78 684.872 L1490.34 684.872 L1490.89 684.872 L1491.45 684.872 L1492.01 684.872 L1492.57 684.872 L1493.13 684.872 L1493.69 684.872 L1494.25 684.872 L1494.81 684.872 L1495.37 684.872 L1495.93 684.872 L1496.49 684.872 L1497.05 684.872 L1497.61 684.872 L1498.16 684.872 L1498.72 684.872 L1499.28 684.872 L1499.84 684.872 L1500.4 684.872 L1500.96 684.872 L1501.52 684.872 L1502.08 684.872 L1502.64 684.872 L1503.2 684.872 L1503.76 684.872 L1504.32 684.872 L1504.88 684.872 L1505.44 684.872 L1505.99 684.872 L1506.55 684.872 L1507.11 684.872 L1507.67 684.872 L1508.23 684.872 L1508.79 684.872 L1509.35 684.872 L1509.91 684.872 L1510.47 684.872 L1511.03 684.872 L1511.59 684.872 L1512.15 684.872 L1512.71 684.872 L1513.26 684.872 L1513.82 684.872 L1514.38 684.872 L1514.94 684.872 L1515.5 684.872 L1516.06 684.872 L1516.62 684.872 L1517.18 684.872 L1517.74 684.872 L1518.3 684.872 L1518.86 684.872 L1519.42 684.872 L1519.98 684.872 L1520.53 684.872 L1521.09 684.872 L1521.65 684.872 L1522.21 684.872 L1522.77 684.872 L1523.33 684.872 L1523.89 684.872 L1524.45 684.872 L1525.01 684.872 L1525.57 684.872 L1526.13 684.872 L1526.69 684.872 L1527.25 684.872 L1527.81 684.872 L1528.36 684.872 L1528.92 684.872 L1529.48 684.872 L1530.04 684.872 L1530.6 684.872 L1531.16 684.872 L1531.72 684.872 L1532.28 684.872 L1532.84 684.872 L1533.4 684.872 L1533.96 684.872 L1534.52 684.872 L1535.08 684.872 L1535.63 684.872 L1536.19 684.872 L1536.75 684.872 L1537.31 684.872 L1537.87 684.872 L1538.43 684.872 L1538.99 684.872 L1539.55 684.872 L1540.11 684.872 L1540.67 684.872 L1541.23 684.872 L1541.79 684.872 L1542.35 684.872 L1542.9 684.872 L1543.46 684.872 L1544.02 684.872 L1544.58 684.872 L1545.14 684.872 L1545.7 684.872 L1546.26 684.872 L1546.82 684.872 L1547.38 684.872 L1547.94 684.872 L1548.5 684.872 L1549.06 684.872 L1549.62 684.872 L1550.18 684.872 L1550.73 684.872 L1551.29 684.872 L1551.85 684.872 L1552.41 684.872 L1552.97 684.872 L1553.53 684.872 L1554.09 684.872 L1554.65 684.872 L1555.21 684.872 L1555.77 684.872 L1556.33 684.872 L1556.89 684.872 L1557.45 684.872 L1558 684.872 L1558.56 684.872 L1559.12 684.872 L1559.68 684.872 L1560.24 684.872 L1560.8 684.872 L1561.36 684.872 L1561.92 684.872 L1562.48 684.872 L1563.04 684.872 L1563.6 684.872 L1564.16 684.872 L1564.72 684.872 L1565.28 684.872 L1565.83 684.872 L1566.39 684.872 L1566.95 684.872 L1567.51 684.872 L1568.07 684.872 L1568.63 684.872 L1569.19 684.872 L1569.75 684.872 L1570.31 684.872 L1570.87 684.872 L1571.43 684.872 L1571.99 684.872 L1572.55 684.872 L1573.1 684.872 L1573.66 684.872 L1574.22 684.872 L1574.78 684.872 L1575.34 684.872 L1575.9 684.872 L1576.46 684.872 L1577.02 684.872 L1577.58 684.872 L1578.14 684.872 L1578.7 684.872 L1579.26 684.872 L1579.82 684.872 L1580.37 684.872 L1580.93 684.872 L1581.49 684.872 L1582.05 684.872 L1582.61 684.872 L1583.17 684.872 L1583.73 684.872 L1584.29 684.872 L1584.85 684.872 L1585.41 684.872 L1585.97 684.872 L1586.53 684.872 L1587.09 684.872 L1587.65 684.872 L1588.2 684.872 L1588.76 684.872 L1589.32 684.872 L1589.88 684.872 L1590.44 684.872 L1591 684.872 L1591.56 684.872 L1592.12 684.872 L1592.68 684.872 L1593.24 684.872 L1593.8 684.872 L1594.36 684.872 L1594.92 684.872 L1595.47 684.872 L1596.03 684.872 L1596.59 684.872 L1597.15 684.872 L1597.71 684.872 L1598.27 684.872 L1598.83 684.872 L1599.39 684.872 L1599.95 684.872 L1600.51 684.872 L1601.07 684.872 L1601.63 684.872 L1602.19 684.872 L1602.74 684.872 L1603.3 684.872 L1603.86 684.872 L1604.42 684.872 L1604.98 684.872 L1605.54 684.872 L1606.1 684.872 L1606.66 684.872 L1607.22 684.872 L1607.78 684.872 L1608.34 684.872 L1608.9 684.872 L1609.46 684.872 L1610.02 684.872 L1610.57 684.872 L1611.13 684.872 L1611.69 684.872 L1612.25 684.872 L1612.81 684.872 L1613.37 684.872 L1613.93 684.872 L1614.49 684.872 L1615.05 684.872 L1615.61 684.872 L1616.17 684.872 L1616.73 684.872 L1617.29 684.872 L1617.84 684.872 L1618.4 684.872 L1618.96 684.872 L1619.52 684.872 L1620.08 684.872 L1620.64 684.872 L1621.2 684.872 L1621.76 684.872 L1622.32 684.872 L1622.88 684.872 L1623.44 684.872 L1624 684.872 L1624.56 684.872 L1625.11 684.872 L1625.67 684.872 L1626.23 684.872 L1626.79 684.872 L1627.35 684.872 L1627.91 684.872 L1628.47 684.872 L1629.03 684.872 L1629.59 684.872 L1630.15 684.872 L1630.71 684.872 L1631.27 684.872 L1631.83 684.872 L1632.39 684.872 L1632.94 684.872 L1633.5 684.872 L1634.06 684.872 L1634.62 684.872 L1635.18 684.872 L1635.74 684.872 L1636.3 684.872 L1636.86 684.872 L1637.42 684.872 L1637.98 684.872 L1638.54 684.872 L1639.1 684.872 L1639.66 684.872 L1640.21 684.872 L1640.77 684.872 L1641.33 684.872 L1641.89 684.872 L1642.45 684.872 L1643.01 684.872 L1643.57 684.872 L1644.13 684.872 L1644.69 684.872 L1645.25 684.872 L1645.81 684.872 L1646.37 684.872 L1646.93 684.872 L1647.48 684.872 L1648.04 684.872 L1648.6 684.872 L1649.16 684.872 L1649.72 684.872 L1650.28 684.872 L1650.84 684.872 L1651.4 684.872 L1651.96 684.872 L1652.52 684.872 L1653.08 684.872 L1653.64 684.872 L1654.2 684.872 L1654.76 684.872 L1655.31 684.872 L1655.87 684.872 L1656.43 684.872 L1656.99 684.872 L1657.55 684.872 L1658.11 684.872 L1658.67 684.872 L1659.23 684.872 L1659.79 684.872 L1660.35 684.872 L1660.91 684.872 L1661.47 684.872 L1662.03 684.872 L1662.58 684.872 L1663.14 684.872 L1663.7 684.872 L1664.26 684.872 L1664.82 684.872 L1665.38 684.872 L1665.94 684.872 L1666.5 684.872 L1667.06 684.872 L1667.62 684.872 L1668.18 684.872 L1668.74 684.872 L1669.3 684.872 L1669.85 684.872 L1670.41 684.872 L1670.97 684.872 L1671.53 684.872 L1672.09 684.872 L1672.65 684.872 L1673.21 684.872 L1673.77 684.872 L1674.33 684.872 L1674.89 684.872 L1675.45 684.872 L1676.01 684.872 L1676.57 684.872 L1677.13 684.872 L1677.68 684.872 L1678.24 684.872 L1678.8 684.872 L1679.36 684.872 L1679.92 684.872 L1680.48 684.872 L1681.04 684.872 L1681.6 684.872 L1682.16 684.872 L1682.72 684.872 L1683.28 684.872 L1683.84 684.872 L1684.4 684.872 L1684.95 684.872 L1685.51 684.872 L1686.07 684.872 L1686.63 684.872 L1687.19 684.872 L1687.75 684.872 L1688.31 684.872 L1688.87 684.872 L1689.43 684.872 L1689.99 684.872 L1690.55 684.872 L1691.11 684.872 L1691.67 684.872 L1692.23 684.872 L1692.78 684.872 L1693.34 684.872 L1693.9 684.872 L1694.46 684.872 L1695.02 684.872 L1695.58 684.872 L1696.14 684.872 L1696.7 684.872 L1697.26 684.872 L1697.82 684.872 L1698.38 684.872 L1698.94 684.872 L1699.5 684.872 L1700.05 684.872 L1700.61 684.872 L1701.17 684.872 L1701.73 684.872 L1702.29 684.872 L1702.85 684.872 L1703.41 684.872 L1703.97 684.872 L1704.53 684.872 L1705.09 684.872 L1705.65 684.872 L1706.21 684.872 L1706.77 684.872 L1707.32 684.872 L1707.88 684.872 L1708.44 684.872 L1709 684.872 L1709.56 684.872 L1710.12 684.872 L1710.68 684.872 L1711.24 684.872 L1711.8 684.872 L1712.36 684.872 L1712.92 684.872 L1713.48 684.872 L1714.04 684.872 L1714.6 684.872 L1715.15 684.872 L1715.71 684.872 L1716.27 684.872 L1716.83 684.872 L1717.39 684.872 L1717.95 684.872 L1718.51 684.872 L1719.07 684.872 L1719.63 684.872 L1720.19 684.872 L1720.75 684.872 L1721.31 684.872 L1721.87 684.872 L1722.42 684.872 L1722.98 684.872 L1723.54 684.872 L1724.1 684.872 L1724.66 684.872 L1725.22 684.872 L1725.78 684.872 L1726.34 684.872 L1726.9 684.872 L1727.46 684.872 L1728.02 684.872 L1728.58 684.872 L1729.14 684.872 L1729.69 684.872 L1730.25 684.872 L1730.81 684.872 L1731.37 684.872 L1731.93 684.872 L1732.49 684.872 L1733.05 684.872 L1733.61 684.872 L1734.17 684.872 L1734.73 684.872 L1735.29 684.872 L1735.85 684.872 L1736.41 684.872 L1736.97 684.872 L1737.52 684.872 L1738.08 684.872 L1738.64 684.872 L1739.2 684.872 L1739.76 684.872 L1740.32 684.872 L1740.88 684.872 L1741.44 684.872 L1742 684.872 L1742.56 684.872 L1743.12 684.872 L1743.68 684.872 L1744.24 684.872 L1744.79 684.872 L1745.35 684.872 L1745.91 684.872 L1746.47 684.872 L1747.03 684.872 L1747.59 684.872 L1748.15 684.872 L1748.71 684.872 L1749.27 684.872 L1749.83 684.872 L1750.39 684.872 L1750.95 684.872 L1751.51 684.872 L1752.06 684.872 L1752.62 684.872 L1753.18 684.872 L1753.74 684.872 L1754.3 684.872 L1754.86 684.872 L1755.42 684.872 L1755.98 684.872 L1756.54 684.872 L1757.1 684.872 L1757.66 684.872 L1758.22 684.872 L1758.78 684.872 L1759.34 684.872 L1759.89 684.872 L1760.45 684.872 L1761.01 684.872 L1761.57 684.872 L1762.13 684.872 L1762.69 684.872 L1763.25 684.872 L1763.81 684.872 L1764.37 684.872 L1764.93 684.872 L1765.49 684.872 L1766.05 684.872 L1766.61 684.872 L1767.16 684.872 L1767.72 684.872 L1768.28 684.872 L1768.84 684.872 L1769.4 684.872 L1769.96 684.872 L1770.52 684.872 L1771.08 684.872 L1771.64 684.872 L1772.2 684.872 L1772.76 684.872 L1773.32 684.872 L1773.88 684.872 L1774.43 684.872 L1774.99 684.872 L1775.55 684.872 L1776.11 684.872 L1776.67 684.872 L1777.23 684.872 L1777.79 684.872 L1778.35 684.872 L1778.91 684.872 L1779.47 684.872 L1780.03 684.872 L1780.59 684.872 L1781.15 684.872 L1781.71 684.872 L1782.26 684.872 L1782.82 684.872 L1783.38 684.872 L1783.94 684.872 L1784.5 684.872 L1785.06 684.872 L1785.62 684.872 L1786.18 684.872 L1786.74 684.872 L1787.3 684.872 L1787.86 684.872 L1788.42 684.872 L1788.98 684.872 L1789.53 684.872 L1790.09 684.872 L1790.65 684.872 L1791.21 684.872 L1791.77 684.872 L1792.33 684.872 L1792.89 684.872 L1793.45 684.872 L1794.01 684.872 L1794.57 684.872 L1795.13 684.872 L1795.69 684.872 L1796.25 684.872 L1796.8 684.872 L1797.36 684.872 L1797.92 684.872 L1798.48 684.872 L1799.04 684.872 L1799.6 684.872 L1800.16 684.872 L1800.72 684.872 L1801.28 684.872 L1801.84 684.872 L1802.4 684.872 L1802.96 684.872 L1803.52 684.872 L1804.08 684.872 L1804.63 684.872 L1805.19 684.872 L1805.75 684.872 L1806.31 684.872 L1806.87 684.872 L1807.43 684.872 L1807.99 684.872 L1808.55 684.872 L1809.11 684.872 L1809.67 684.872 L1810.23 684.872 L1810.79 684.872 L1811.35 684.872 L1811.9 684.872 L1812.46 684.872 L1813.02 684.872 L1813.58 684.872 L1814.14 684.872 L1814.7 684.872 L1815.26 684.872 L1815.82 684.872 L1816.38 684.872 L1816.94 684.872 L1817.5 684.872 L1818.06 684.872 L1818.62 684.872 L1819.18 684.872 L1819.73 684.872 L1820.29 684.872 L1820.85 684.872 L1821.41 684.872 L1821.97 684.872 L1822.53 684.872 L1823.09 684.872 L1823.65 684.872 L1824.21 684.872 L1824.77 684.872 L1825.33 684.872 L1825.89 684.872 L1826.45 684.872 L1827 684.872 L1827.56 684.872 L1828.12 684.872 L1828.68 684.872 L1829.24 684.872 L1829.8 684.872 L1830.36 684.872 L1830.92 684.872 L1831.48 684.872 L1832.04 684.872 L1832.6 684.872 L1833.16 684.872 L1833.72 684.872 L1834.27 684.872 L1834.83 684.872 L1835.39 684.872 L1835.95 684.872 L1836.51 684.872 L1837.07 684.872 L1837.63 684.872 L1838.19 684.872 L1838.19 683.013 L1837.63 683.013 L1837.07 683.013 L1836.51 683.013 L1835.95 683.013 L1835.39 683.013 L1834.83 683.013 L1834.27 683.013 L1833.72 683.013 L1833.16 683.013 L1832.6 683.013 L1832.04 683.013 L1831.48 683.013 L1830.92 683.013 L1830.36 683.013 L1829.8 683.013 L1829.24 683.013 L1828.68 683.013 L1828.12 683.013 L1827.56 683.013 L1827 683.013 L1826.45 683.013 L1825.89 683.013 L1825.33 683.013 L1824.77 683.013 L1824.21 683.013 L1823.65 683.013 L1823.09 683.013 L1822.53 683.013 L1821.97 683.013 L1821.41 683.013 L1820.85 683.013 L1820.29 683.013 L1819.73 683.013 L1819.18 683.013 L1818.62 683.013 L1818.06 683.013 L1817.5 683.013 L1816.94 683.013 L1816.38 683.013 L1815.82 683.013 L1815.26 683.013 L1814.7 683.013 L1814.14 683.013 L1813.58 683.013 L1813.02 683.013 L1812.46 683.013 L1811.9 683.013 L1811.35 683.013 L1810.79 683.013 L1810.23 683.013 L1809.67 683.013 L1809.11 683.013 L1808.55 683.013 L1807.99 683.013 L1807.43 683.013 L1806.87 683.013 L1806.31 683.013 L1805.75 683.013 L1805.19 683.013 L1804.63 683.013 L1804.08 683.013 L1803.52 683.013 L1802.96 683.013 L1802.4 683.013 L1801.84 683.013 L1801.28 683.013 L1800.72 683.013 L1800.16 683.013 L1799.6 683.013 L1799.04 683.013 L1798.48 683.013 L1797.92 683.013 L1797.36 683.013 L1796.8 683.013 L1796.25 683.013 L1795.69 683.013 L1795.13 683.013 L1794.57 683.013 L1794.01 683.013 L1793.45 683.013 L1792.89 683.013 L1792.33 683.013 L1791.77 683.013 L1791.21 683.013 L1790.65 683.013 L1790.09 683.013 L1789.53 683.013 L1788.98 683.013 L1788.42 683.013 L1787.86 683.013 L1787.3 683.013 L1786.74 683.013 L1786.18 683.013 L1785.62 683.013 L1785.06 683.013 L1784.5 683.013 L1783.94 683.013 L1783.38 683.013 L1782.82 683.013 L1782.26 683.013 L1781.71 683.013 L1781.15 683.013 L1780.59 683.013 L1780.03 683.013 L1779.47 683.013 L1778.91 683.013 L1778.35 683.013 L1777.79 683.013 L1777.23 683.013 L1776.67 683.013 L1776.11 683.013 L1775.55 683.013 L1774.99 683.013 L1774.43 683.013 L1773.88 683.013 L1773.32 683.013 L1772.76 683.013 L1772.2 683.013 L1771.64 683.013 L1771.08 683.013 L1770.52 683.013 L1769.96 683.013 L1769.4 683.013 L1768.84 683.013 L1768.28 683.013 L1767.72 683.013 L1767.16 683.013 L1766.61 683.013 L1766.05 683.013 L1765.49 683.013 L1764.93 683.013 L1764.37 683.013 L1763.81 683.013 L1763.25 683.013 L1762.69 683.013 L1762.13 683.013 L1761.57 683.013 L1761.01 683.013 L1760.45 683.013 L1759.89 683.013 L1759.34 683.013 L1758.78 683.013 L1758.22 683.013 L1757.66 683.013 L1757.1 683.013 L1756.54 683.013 L1755.98 683.013 L1755.42 683.013 L1754.86 683.013 L1754.3 683.013 L1753.74 683.013 L1753.18 683.013 L1752.62 683.013 L1752.06 683.013 L1751.51 683.013 L1750.95 683.013 L1750.39 683.013 L1749.83 683.013 L1749.27 683.013 L1748.71 683.013 L1748.15 683.013 L1747.59 683.013 L1747.03 683.013 L1746.47 683.013 L1745.91 683.013 L1745.35 683.013 L1744.79 683.013 L1744.24 683.013 L1743.68 683.013 L1743.12 683.013 L1742.56 683.013 L1742 683.013 L1741.44 683.013 L1740.88 683.013 L1740.32 683.013 L1739.76 683.013 L1739.2 683.013 L1738.64 683.013 L1738.08 683.013 L1737.52 683.013 L1736.97 683.013 L1736.41 683.013 L1735.85 683.013 L1735.29 683.013 L1734.73 683.013 L1734.17 683.013 L1733.61 683.013 L1733.05 683.013 L1732.49 683.013 L1731.93 683.013 L1731.37 683.013 L1730.81 683.013 L1730.25 683.013 L1729.69 683.013 L1729.14 683.013 L1728.58 683.013 L1728.02 683.013 L1727.46 683.013 L1726.9 683.013 L1726.34 683.013 L1725.78 683.013 L1725.22 683.013 L1724.66 683.013 L1724.1 683.013 L1723.54 683.013 L1722.98 683.013 L1722.42 683.013 L1721.87 683.013 L1721.31 683.013 L1720.75 683.013 L1720.19 683.013 L1719.63 683.013 L1719.07 683.013 L1718.51 683.013 L1717.95 683.013 L1717.39 683.013 L1716.83 683.013 L1716.27 683.013 L1715.71 683.013 L1715.15 683.013 L1714.6 683.013 L1714.04 683.013 L1713.48 683.013 L1712.92 683.013 L1712.36 683.013 L1711.8 683.013 L1711.24 683.013 L1710.68 683.013 L1710.12 683.013 L1709.56 683.013 L1709 683.013 L1708.44 683.013 L1707.88 683.013 L1707.32 683.013 L1706.77 683.013 L1706.21 683.013 L1705.65 683.013 L1705.09 683.013 L1704.53 683.013 L1703.97 683.013 L1703.41 683.013 L1702.85 683.013 L1702.29 683.013 L1701.73 683.013 L1701.17 683.013 L1700.61 683.013 L1700.05 683.013 L1699.5 683.013 L1698.94 683.013 L1698.38 683.013 L1697.82 683.013 L1697.26 683.013 L1696.7 683.013 L1696.14 683.013 L1695.58 683.013 L1695.02 683.013 L1694.46 683.013 L1693.9 683.013 L1693.34 683.013 L1692.78 683.013 L1692.23 683.013 L1691.67 683.013 L1691.11 683.013 L1690.55 683.013 L1689.99 683.013 L1689.43 683.013 L1688.87 683.013 L1688.31 683.013 L1687.75 683.013 L1687.19 683.013 L1686.63 683.013 L1686.07 683.013 L1685.51 683.013 L1684.95 683.013 L1684.4 683.013 L1683.84 683.013 L1683.28 683.013 L1682.72 683.013 L1682.16 683.013 L1681.6 683.013 L1681.04 683.013 L1680.48 683.013 L1679.92 683.013 L1679.36 683.013 L1678.8 683.013 L1678.24 683.013 L1677.68 683.013 L1677.13 683.013 L1676.57 683.013 L1676.01 683.013 L1675.45 683.013 L1674.89 683.013 L1674.33 683.013 L1673.77 683.013 L1673.21 683.013 L1672.65 683.013 L1672.09 683.013 L1671.53 683.013 L1670.97 683.013 L1670.41 683.013 L1669.85 683.013 L1669.3 683.013 L1668.74 683.013 L1668.18 683.013 L1667.62 683.013 L1667.06 683.013 L1666.5 683.013 L1665.94 683.013 L1665.38 683.013 L1664.82 683.013 L1664.26 683.013 L1663.7 683.013 L1663.14 683.013 L1662.58 683.013 L1662.03 683.013 L1661.47 683.013 L1660.91 683.013 L1660.35 683.013 L1659.79 683.013 L1659.23 683.013 L1658.67 683.013 L1658.11 683.013 L1657.55 683.013 L1656.99 683.013 L1656.43 683.013 L1655.87 683.013 L1655.31 683.013 L1654.76 683.013 L1654.2 683.013 L1653.64 683.013 L1653.08 683.013 L1652.52 683.013 L1651.96 683.013 L1651.4 683.013 L1650.84 683.013 L1650.28 683.013 L1649.72 683.013 L1649.16 683.013 L1648.6 683.013 L1648.04 683.013 L1647.48 683.013 L1646.93 683.013 L1646.37 683.013 L1645.81 683.013 L1645.25 683.013 L1644.69 683.013 L1644.13 683.013 L1643.57 683.013 L1643.01 683.013 L1642.45 683.013 L1641.89 683.013 L1641.33 683.013 L1640.77 683.013 L1640.21 683.013 L1639.66 683.013 L1639.1 683.013 L1638.54 683.013 L1637.98 683.013 L1637.42 683.013 L1636.86 683.013 L1636.3 683.013 L1635.74 683.013 L1635.18 683.013 L1634.62 683.013 L1634.06 683.013 L1633.5 683.013 L1632.94 683.013 L1632.39 683.013 L1631.83 683.013 L1631.27 683.013 L1630.71 683.013 L1630.15 683.013 L1629.59 683.013 L1629.03 683.013 L1628.47 683.013 L1627.91 683.013 L1627.35 683.013 L1626.79 683.013 L1626.23 683.013 L1625.67 683.013 L1625.11 683.013 L1624.56 683.013 L1624 683.013 L1623.44 683.013 L1622.88 683.013 L1622.32 683.013 L1621.76 683.013 L1621.2 683.013 L1620.64 683.013 L1620.08 683.013 L1619.52 683.013 L1618.96 683.013 L1618.4 683.013 L1617.84 683.013 L1617.29 683.013 L1616.73 683.013 L1616.17 683.013 L1615.61 683.013 L1615.05 683.013 L1614.49 683.013 L1613.93 683.013 L1613.37 683.013 L1612.81 683.013 L1612.25 683.013 L1611.69 683.013 L1611.13 683.013 L1610.57 683.013 L1610.02 683.013 L1609.46 683.013 L1608.9 683.013 L1608.34 683.013 L1607.78 683.013 L1607.22 683.013 L1606.66 683.013 L1606.1 683.013 L1605.54 683.013 L1604.98 683.013 L1604.42 683.013 L1603.86 683.013 L1603.3 683.013 L1602.74 683.013 L1602.19 683.013 L1601.63 683.013 L1601.07 683.013 L1600.51 683.013 L1599.95 683.013 L1599.39 683.013 L1598.83 683.013 L1598.27 683.013 L1597.71 683.013 L1597.15 683.013 L1596.59 683.013 L1596.03 683.013 L1595.47 683.013 L1594.92 683.013 L1594.36 683.013 L1593.8 683.013 L1593.24 683.013 L1592.68 683.013 L1592.12 683.013 L1591.56 683.013 L1591 683.013 L1590.44 683.013 L1589.88 683.013 L1589.32 683.013 L1588.76 683.013 L1588.2 683.013 L1587.65 683.013 L1587.09 683.013 L1586.53 683.013 L1585.97 683.013 L1585.41 683.013 L1584.85 683.013 L1584.29 683.013 L1583.73 683.013 L1583.17 683.013 L1582.61 683.013 L1582.05 683.013 L1581.49 683.013 L1580.93 683.013 L1580.37 683.013 L1579.82 683.013 L1579.26 683.013 L1578.7 683.013 L1578.14 683.013 L1577.58 683.013 L1577.02 683.013 L1576.46 683.013 L1575.9 683.013 L1575.34 683.013 L1574.78 683.013 L1574.22 683.013 L1573.66 683.013 L1573.1 683.013 L1572.55 683.013 L1571.99 683.013 L1571.43 683.013 L1570.87 683.013 L1570.31 683.013 L1569.75 683.013 L1569.19 683.013 L1568.63 683.013 L1568.07 683.013 L1567.51 683.013 L1566.95 683.013 L1566.39 683.013 L1565.83 683.013 L1565.28 683.013 L1564.72 683.013 L1564.16 683.013 L1563.6 683.013 L1563.04 683.013 L1562.48 683.013 L1561.92 683.013 L1561.36 683.013 L1560.8 683.013 L1560.24 683.013 L1559.68 683.013 L1559.12 683.013 L1558.56 683.013 L1558 683.013 L1557.45 683.013 L1556.89 683.013 L1556.33 683.013 L1555.77 683.013 L1555.21 683.013 L1554.65 683.013 L1554.09 683.013 L1553.53 683.013 L1552.97 683.013 L1552.41 683.013 L1551.85 683.013 L1551.29 683.013 L1550.73 683.013 L1550.18 683.013 L1549.62 683.013 L1549.06 683.013 L1548.5 683.013 L1547.94 683.013 L1547.38 683.013 L1546.82 683.013 L1546.26 683.013 L1545.7 683.013 L1545.14 683.013 L1544.58 683.013 L1544.02 683.013 L1543.46 683.013 L1542.9 683.013 L1542.35 683.013 L1541.79 683.013 L1541.23 683.013 L1540.67 683.013 L1540.11 683.013 L1539.55 683.013 L1538.99 683.013 L1538.43 683.013 L1537.87 683.013 L1537.31 683.013 L1536.75 683.013 L1536.19 683.013 L1535.63 683.013 L1535.08 683.013 L1534.52 683.013 L1533.96 683.013 L1533.4 683.013 L1532.84 683.013 L1532.28 683.013 L1531.72 683.013 L1531.16 683.013 L1530.6 683.013 L1530.04 683.013 L1529.48 683.013 L1528.92 683.013 L1528.36 683.013 L1527.81 683.013 L1527.25 683.013 L1526.69 683.013 L1526.13 683.013 L1525.57 683.013 L1525.01 683.013 L1524.45 683.013 L1523.89 683.013 L1523.33 683.013 L1522.77 683.013 L1522.21 683.013 L1521.65 683.013 L1521.09 683.013 L1520.53 683.013 L1519.98 683.013 L1519.42 683.013 L1518.86 683.013 L1518.3 683.013 L1517.74 683.013 L1517.18 683.013 L1516.62 683.013 L1516.06 683.013 L1515.5 683.013 L1514.94 683.013 L1514.38 683.013 L1513.82 683.013 L1513.26 683.013 L1512.71 683.013 L1512.15 683.013 L1511.59 683.013 L1511.03 683.013 L1510.47 683.013 L1509.91 683.013 L1509.35 683.013 L1508.79 683.013 L1508.23 683.013 L1507.67 683.013 L1507.11 683.013 L1506.55 683.013 L1505.99 683.013 L1505.44 683.013 L1504.88 683.013 L1504.32 683.013 L1503.76 683.013 L1503.2 683.013 L1502.64 683.013 L1502.08 683.013 L1501.52 683.013 L1500.96 683.013 L1500.4 683.013 L1499.84 683.013 L1499.28 683.013 L1498.72 683.013 L1498.16 683.013 L1497.61 683.013 L1497.05 683.013 L1496.49 683.013 L1495.93 683.013 L1495.37 683.013 L1494.81 683.013 L1494.25 683.013 L1493.69 683.013 L1493.13 683.013 L1492.57 683.013 L1492.01 683.013 L1491.45 683.013 L1490.89 683.013 L1490.34 683.013 L1489.78 683.013 L1489.22 683.013 L1488.66 683.013 L1488.1 683.013 L1487.54 683.013 L1486.98 683.013 L1486.42 683.013 L1485.86 683.013 L1485.3 683.013 L1484.74 683.013 L1484.18 683.013 L1483.62 683.013 L1483.07 683.013 L1482.51 683.013 L1481.95 683.013 L1481.39 683.013 L1480.83 683.013 L1480.27 683.013 L1479.71 683.013 L1479.15 683.013 L1478.59 683.013 L1478.03 683.013 L1477.47 683.013 L1476.91 683.013 L1476.35 683.013 L1475.79 683.013 L1475.24 683.013 L1474.68 683.013 L1474.12 683.013 L1473.56 683.013 L1473 683.013 L1472.44 683.013 L1471.88 683.013 L1471.32 683.013 L1470.76 683.013 L1470.2 683.013 L1469.64 683.013 L1469.08 683.013 L1468.52 683.013 L1467.97 683.013 L1467.41 683.013 L1466.85 683.013 L1466.29 683.013 L1465.73 683.013 L1465.17 683.013 L1464.61 683.013 L1464.05 683.013 L1463.49 683.013 L1462.93 683.013 L1462.37 683.013 L1461.81 683.013 L1461.25 683.013 L1460.7 683.013 L1460.14 683.013 L1459.58 683.013 L1459.02 683.013 L1458.46 683.013 L1457.9 683.013 L1457.34 683.013 L1456.78 683.013 L1456.22 683.013 L1455.66 683.013 L1455.1 683.013 L1454.54 683.013 L1453.98 683.013 L1453.42 683.013 L1452.87 683.013 L1452.31 683.013 L1451.75 683.013 L1451.19 683.013 L1450.63 683.013 L1450.07 683.013 L1449.51 683.013 L1448.95 683.013 L1448.39 683.013 L1447.83 683.013 L1447.27 683.013 L1446.71 683.013 L1446.15 683.013 L1445.6 683.013 L1445.04 683.013 L1444.48 683.013 L1443.92 683.013 L1443.36 683.013 L1442.8 683.013 L1442.24 683.013 L1441.68 683.013 L1441.12 683.013 L1440.56 683.013 L1440 683.013 L1439.44 683.013 L1438.88 683.013 L1438.33 683.013 L1437.77 683.013 L1437.21 683.013 L1436.65 683.013 L1436.09 683.013 L1435.53 683.013 L1434.97 683.013 L1434.41 683.013 L1433.85 683.013 L1433.29 683.013 L1432.73 683.013 L1432.17 683.013 L1431.61 683.013 L1431.05 683.013 L1430.5 683.013 L1429.94 683.013 L1429.38 683.013 L1428.82 683.013 L1428.26 683.013 L1427.7 683.013 L1427.14 683.013 L1426.58 683.013 L1426.02 683.013 L1425.46 683.013 L1424.9 683.013 L1424.34 683.013 L1423.78 683.013 L1423.23 683.013 L1422.67 683.013 L1422.11 683.013 L1421.55 683.013 L1420.99 683.013 L1420.43 683.013 L1419.87 683.013 L1419.31 683.013 L1418.75 683.013 L1418.19 683.013 L1417.63 683.013 L1417.07 683.013 L1416.51 683.013 L1415.95 683.013 L1415.4 683.013 L1414.84 683.013 L1414.28 683.013 L1413.72 683.013 L1413.16 683.013 L1412.6 683.013 L1412.04 683.013 L1411.48 683.013 L1410.92 683.013 L1410.36 683.013 L1409.8 683.013 L1409.24 683.013 L1408.68 683.013 L1408.13 683.013 L1407.57 683.013 L1407.01 683.013 L1406.45 683.013 L1405.89 683.013 L1405.33 683.013 L1404.77 683.013 L1404.21 683.013 L1403.65 683.013 L1403.09 683.013 L1402.53 683.013 L1401.97 683.013 L1401.41 683.013 L1400.86 683.013 L1400.3 683.013 L1399.74 683.013 L1399.18 683.013 L1398.62 683.013 L1398.06 683.013 L1397.5 683.013 L1396.94 683.013 L1396.38 683.013 L1395.82 683.013 L1395.26 683.013 L1394.7 683.013 L1394.14 683.013 L1393.58 683.013 L1393.03 683.013 L1392.47 683.013 L1391.91 683.013 L1391.35 683.013 L1390.79 683.013 L1390.23 683.013 L1389.67 683.013 L1389.11 683.013 L1388.55 683.013 L1387.99 683.013 L1387.43 683.013 L1386.87 683.013 L1386.31 683.013 L1385.76 683.013 L1385.2 683.013 L1384.64 683.013 L1384.08 683.013 L1383.52 683.013 L1382.96 683.013 L1382.4 683.013 L1381.84 683.013 L1381.28 683.013 L1380.72 683.013 L1380.16 683.013 L1379.6 683.013 L1379.04 683.013 L1378.49 683.013 L1377.93 683.013 L1377.37 683.013 L1376.81 683.013 L1376.25 683.013 L1375.69 683.013 L1375.13 683.013 L1374.57 683.013 L1374.01 683.013 L1373.45 683.013 L1372.89 683.013 L1372.33 683.013 L1371.77 683.013 L1371.21 683.013 L1370.66 683.013 L1370.1 683.013 L1369.54 683.013 L1368.98 683.013 L1368.42 683.013 L1367.86 683.013 L1367.3 683.013 L1366.74 683.013 L1366.18 683.013 L1365.62 683.013 L1365.06 683.013 L1364.5 683.013 L1363.94 683.013 L1363.39 683.013 L1362.83 683.013 L1362.27 683.013 L1361.71 683.013 L1361.15 683.013 L1360.59 683.013 L1360.03 683.013 L1359.47 683.013 L1358.91 683.013 L1358.35 683.013 L1357.79 683.013 L1357.23 683.013 L1356.67 683.013 L1356.12 683.013 L1355.56 683.013 L1355 683.013 L1354.44 683.013 L1353.88 683.013 L1353.32 683.013 L1352.76 683.013 L1352.2 683.013 L1351.64 683.013 L1351.08 683.013 L1350.52 683.013 L1349.96 683.013 L1349.4 683.013 L1348.84 683.013 L1348.29 683.013 L1347.73 683.013 L1347.17 683.013 L1346.61 683.013 L1346.05 683.013 L1345.49 683.013 L1344.93 683.013 L1344.37 683.013 L1343.81 683.013 L1343.25 683.013 L1342.69 683.013 L1342.13 683.013 L1341.57 683.013 L1341.02 683.013 L1340.46 683.013 L1339.9 683.013 L1339.34 683.013 L1338.78 683.013 L1338.22 683.013 L1337.66 683.013 L1337.1 683.013 L1336.54 683.013 L1335.98 683.013 L1335.42 683.013 L1334.86 683.013 L1334.3 683.013 L1333.75 683.013 L1333.19 683.013 L1332.63 683.013 L1332.07 683.013 L1331.51 683.013 L1330.95 683.013 L1330.39 683.013 L1329.83 683.013 L1329.27 683.013 L1328.71 683.013 L1328.15 683.013 L1327.59 683.013 L1327.03 683.013 L1326.47 683.013 L1325.92 683.013 L1325.36 683.013 L1324.8 683.013 L1324.24 683.013 L1323.68 683.013 L1323.12 683.013 L1322.56 683.013 L1322 683.013 L1321.44 683.013 L1320.88 683.013 L1320.32 683.013 L1319.76 683.013 L1319.2 683.013 L1318.65 683.013 L1318.09 683.013 L1317.53 683.013 L1316.97 683.013 L1316.41 683.013 L1315.85 683.013 L1315.29 683.013 L1314.73 683.013 L1314.17 683.013 L1313.61 683.013 L1313.05 683.013 L1312.49 683.013 L1311.93 683.013 L1311.38 683.013 L1310.82 683.013 L1310.26 683.013 L1309.7 683.013 L1309.14 683.013 L1308.58 683.013 L1308.02 683.013 L1307.46 683.013 L1306.9 683.013 L1306.34 683.013 L1305.78 683.013 L1305.22 683.013 L1304.66 683.013 L1304.1 683.013 L1303.55 683.013 L1302.99 683.013 L1302.43 683.013 L1301.87 683.013 L1301.31 683.013 L1300.75 683.013 L1300.19 683.013 L1299.63 683.013 L1299.07 683.013 L1298.51 683.013 L1297.95 683.013 L1297.39 683.013 L1296.83 683.013 L1296.28 683.013 L1295.72 683.013 L1295.16 683.013 L1294.6 683.013 L1294.04 683.013 L1293.48 683.013 L1292.92 683.013 L1292.36 683.013 L1291.8 683.013 L1291.24 683.013 L1290.68 683.013 L1290.12 683.013 L1289.56 683.013 L1289 683.013 L1288.45 683.013 L1287.89 683.013 L1287.33 683.013 L1286.77 683.013 L1286.21 683.013 L1285.65 683.013 L1285.09 683.013 L1284.53 683.013 L1283.97 683.013 L1283.41 683.013 L1282.85 683.013 L1282.29 683.013 L1281.73 683.013 L1281.18 683.013 L1280.62 683.013 L1280.06 683.013 L1279.5 683.013 L1278.94 683.013 L1278.38 683.013 L1277.82 683.013 L1277.26 683.013 L1276.7 683.013 L1276.14 683.013 L1275.58 683.013 L1275.02 683.013 L1274.46 683.013 L1273.91 683.013 L1273.35 683.013 L1272.79 683.013 L1272.23 683.013 L1271.67 683.013 L1271.11 683.013 L1270.55 683.013 L1269.99 683.013 L1269.43 683.013 L1268.87 683.013 L1268.31 683.013 L1267.75 683.013 L1267.19 683.013 L1266.63 683.013 L1266.08 683.013 L1265.52 683.013 L1264.96 683.013 L1264.4 683.013 L1263.84 683.013 L1263.28 683.013 L1262.72 683.013 L1262.16 683.013 L1261.6 683.013 L1261.04 683.013 L1260.48 683.013 L1259.92 683.013 L1259.36 683.013 L1258.81 683.013 L1258.25 683.013 L1257.69 683.013 L1257.13 683.013 L1256.57 683.013 L1256.01 683.013 L1255.45 683.013 L1254.89 683.013 L1254.33 683.013 L1253.77 683.013 L1253.21 683.013 L1252.65 683.013 L1252.09 683.013 L1251.54 683.013 L1250.98 683.013 L1250.42 683.013 L1249.86 683.013 L1249.3 683.013 L1248.74 683.013 L1248.18 683.013 L1247.62 683.013 L1247.06 683.013 L1246.5 683.013 L1245.94 683.013 L1245.38 683.013 L1244.82 683.013 L1244.26 683.013 L1243.71 683.013 L1243.15 683.013 L1242.59 683.013 L1242.03 683.013 L1241.47 683.013 L1240.91 683.013 L1240.35 683.013 L1239.79 683.013 L1239.23 683.013 L1238.67 683.013 L1238.11 683.013 L1237.55 683.013 L1236.99 683.013 L1236.44 683.013 L1235.88 683.013 L1235.32 683.013 L1234.76 683.013 L1234.2 683.013 L1233.64 683.013 L1233.08 683.013 L1232.52 683.013 L1231.96 683.013 L1231.4 683.013 L1230.84 683.013 L1230.28 683.013 L1229.72 683.013 L1229.17 683.013 L1228.61 683.013 L1228.05 683.013 L1227.49 683.013 L1226.93 683.013 L1226.37 683.013 L1225.81 683.013 L1225.25 683.013 L1224.69 683.013 L1224.13 683.013 L1223.57 683.013 L1223.01 683.013 L1222.45 683.013 L1221.89 683.013 L1221.34 683.013 L1220.78 683.013 L1220.22 683.013 L1219.66 683.013 L1219.1 683.013 L1218.54 683.013 L1217.98 683.013 L1217.42 683.013 L1216.86 683.013 L1216.3 683.013 L1215.74 683.013 L1215.18 683.013 L1214.62 683.013 L1214.07 683.013 L1213.51 683.013 L1212.95 683.013 L1212.39 683.013 L1211.83 683.013 L1211.27 683.013 L1210.71 683.013 L1210.15 683.013 L1209.59 683.013 L1209.03 683.013 L1208.47 683.013 L1207.91 683.013 L1207.35 683.013 L1206.8 683.013 L1206.24 683.013 L1205.68 683.013 L1205.12 683.013 L1204.56 683.013 L1204 683.013 L1203.44 683.013 L1202.88 683.013 L1202.32 683.013 L1201.76 683.013 L1201.2 683.013 L1200.64 683.013 L1200.08 683.013 L1199.52 683.013 L1198.97 683.013 L1198.41 683.013 L1197.85 683.013 L1197.29 683.013 L1196.73 683.013 L1196.17 683.013 L1195.61 683.013 L1195.05 683.013 L1194.49 683.013 L1193.93 683.013 L1193.37 683.013 L1192.81 683.013 L1192.25 683.013 L1191.7 683.013 L1191.14 683.013 L1190.58 683.013 L1190.02 683.013 L1189.46 683.013 L1188.9 683.013 L1188.34 683.013 L1187.78 683.013 L1187.22 683.013 L1186.66 683.013 L1186.1 683.013 L1185.54 683.013 L1184.98 683.013 L1184.43 683.013 L1183.87 683.013 L1183.31 683.013 L1182.75 683.013 L1182.19 683.013 L1181.63 683.013 L1181.07 683.013 L1180.51 683.013 L1179.95 683.013 L1179.39 683.013 L1178.83 683.013 L1178.27 683.013 L1177.71 683.013 L1177.15 683.013 L1176.6 683.013 L1176.04 683.013 L1175.48 683.013 L1174.92 683.013 L1174.36 683.013 L1173.8 683.013 L1173.24 683.013 L1172.68 683.013 L1172.12 683.013 L1171.56 683.013 L1171 683.013 L1170.44 683.013 L1169.88 683.013 L1169.33 683.013 L1168.77 683.013 L1168.21 683.013 L1167.65 683.013 L1167.09 683.013 L1166.53 683.013 L1165.97 683.013 L1165.41 683.013 L1164.85 683.013 L1164.29 683.013 L1163.73 683.013 L1163.17 683.013 L1162.61 683.013 L1162.05 683.013 L1161.5 683.013 L1160.94 683.013 L1160.38 683.013 L1159.82 683.013 L1159.26 683.013 L1158.7 683.013 L1158.14 683.013 L1157.58 683.013 L1157.02 683.013 L1156.46 683.013 L1155.9 683.013 L1155.34 683.013 L1154.78 683.013 L1154.23 683.013 L1153.67 683.013 L1153.11 683.013 L1152.55 683.013 L1151.99 683.013 L1151.43 683.013 L1150.87 683.013 L1150.31 683.013 L1149.75 683.013 L1149.19 683.013 L1148.63 683.013 L1148.07 683.013 L1147.51 683.013 L1146.96 683.013 L1146.4 683.013 L1145.84 683.013 L1145.28 683.013 L1144.72 683.013 L1144.16 683.013 L1143.6 683.013 L1143.04 683.013 L1142.48 683.013 L1141.92 683.013 L1141.36 683.013 L1140.8 683.013 L1140.24 683.013 L1139.68 683.013 L1139.13 683.013 L1138.57 683.013 L1138.01 683.013 L1137.45 683.013 L1136.89 683.013 L1136.33 683.013 L1135.77 683.013 L1135.21 683.013 L1134.65 683.013 L1134.09 683.013 L1133.53 683.013 L1132.97 683.013 L1132.41 683.013 L1131.86 683.013 L1131.3 683.013 L1130.74 683.013 L1130.18 683.013 L1129.62 683.013 L1129.06 683.013 L1128.5 683.013 L1127.94 683.013 L1127.38 683.013 L1126.82 683.013 L1126.26 683.013 L1125.7 683.013 L1125.14 683.013 L1124.59 683.013 L1124.03 683.013 L1123.47 683.013 L1122.91 683.013 L1122.35 683.013 L1121.79 683.013 L1121.23 683.013 L1120.67 683.013 L1120.11 683.013 L1119.55 683.013 L1118.99 683.013 L1118.43 683.013 L1117.87 683.013 L1117.31 683.013 L1116.76 683.013 L1116.2 683.013 L1115.64 683.013 L1115.08 683.013 L1114.52 683.013 L1113.96 683.013 L1113.4 683.013 L1112.84 683.013 L1112.28 683.013 L1111.72 683.013 L1111.16 683.013 L1110.6 683.013 L1110.04 683.013 L1109.49 683.013 L1108.93 683.013 L1108.37 683.013 L1107.81 683.013 L1107.25 683.013 L1106.69 683.013 L1106.13 683.013 L1105.57 683.013 L1105.01 683.013 L1104.45 683.013 L1103.89 683.013 L1103.33 683.013 L1102.77 683.013 L1102.22 683.013 L1101.66 683.013 L1101.1 683.013 L1100.54 683.013 L1099.98 683.013 L1099.42 683.013 L1098.86 683.013 L1098.3 683.013 L1097.74 683.013 L1097.18 683.013 L1096.62 683.013 L1096.06 683.013 L1095.5 683.013 L1094.94 683.013 L1094.39 683.013 L1093.83 683.013 L1093.27 683.013 L1092.71 683.013 L1092.15 683.013 L1091.59 683.013 L1091.03 683.013 L1090.47 683.013 L1089.91 683.013 L1089.35 683.013 L1088.79 683.013 L1088.23 683.013 L1087.67 683.013 L1087.12 683.013 L1086.56 683.013 L1086 683.013 L1085.44 683.013 L1084.88 683.013 L1084.32 683.013 L1083.76 683.013 L1083.2 683.013 L1082.64 683.013 L1082.08 683.013 L1081.52 683.013 L1080.96 683.013 L1080.4 683.013 L1079.85 683.013 L1079.29 683.013 L1078.73 683.013 L1078.17 683.013 L1077.61 683.013 L1077.05 683.013 L1076.49 683.013 L1075.93 683.013 L1075.37 683.013 L1074.81 683.013 L1074.25 683.013 L1073.69 683.013 L1073.13 683.013 L1072.57 683.013 L1072.02 683.013 L1071.46 683.013 L1070.9 683.013 L1070.34 683.013 L1069.78 683.013 L1069.22 683.013 L1068.66 683.013 L1068.1 683.013 L1067.54 683.013 L1066.98 683.013 L1066.42 683.013 L1065.86 683.013 L1065.3 683.013 L1064.75 683.013 L1064.19 683.013 L1063.63 683.013 L1063.07 683.013 L1062.51 683.013 L1061.95 683.013 L1061.39 683.013 L1060.83 683.013 L1060.27 683.013 L1059.71 683.013 L1059.15 683.013 L1058.59 683.013 L1058.03 683.013 L1057.48 683.013 L1056.92 683.013 L1056.36 683.013 L1055.8 683.013 L1055.24 683.013 L1054.68 683.013 L1054.12 683.013 L1053.56 683.013 L1053 683.013 L1052.44 683.013 L1051.88 683.013 L1051.32 683.013 L1050.76 683.013 L1050.2 683.013 L1049.65 683.013 L1049.09 683.013 L1048.53 683.013 L1047.97 683.013 L1047.41 683.013 L1046.85 683.013 L1046.29 683.013 L1045.73 683.013 L1045.17 683.013 L1044.61 683.013 L1044.05 683.013 L1043.49 683.013 L1042.93 683.013 L1042.38 683.013 L1041.82 683.013 L1041.26 683.013 L1040.7 683.013 L1040.14 683.013 L1039.58 683.013 L1039.02 683.013 L1038.46 683.013 L1037.9 683.013 L1037.34 683.013 L1036.78 683.013 L1036.22 683.013 L1035.66 683.013 L1035.1 683.013 L1034.55 683.013 L1033.99 683.013 L1033.43 683.013 L1032.87 683.013 L1032.31 683.013 L1031.75 683.013 L1031.19 683.013 L1030.63 683.013 L1030.07 683.013 L1029.51 683.013 L1028.95 683.013 L1028.39 683.013 L1027.83 683.013 L1027.28 683.013 L1026.72 683.013 L1026.16 683.013 L1025.6 683.013 L1025.04 683.013 L1024.48 683.013 L1023.92 683.013 L1023.36 683.013 L1022.8 683.013 L1022.24 683.013 L1021.68 683.013 L1021.12 683.013 L1020.56 683.013 L1020.01 683.013 L1019.45 683.013 L1018.89 683.013 L1018.33 683.013 L1017.77 683.013 L1017.21 683.013 L1016.65 683.013 L1016.09 683.013 L1015.53 683.013 L1014.97 683.013 L1014.41 683.013 L1013.85 683.013 L1013.29 683.013 L1012.73 683.013 L1012.18 683.013 L1011.62 683.013 L1011.06 683.013 L1010.5 683.013 L1009.94 683.013 L1009.38 683.013 L1008.82 683.013 L1008.26 683.013 L1007.7 683.013 L1007.14 683.013 L1006.58 683.013 L1006.02 683.013 L1005.46 683.013 L1004.91 683.013 L1004.35 683.013 L1003.79 683.013 L1003.23 683.013 L1002.67 683.013 L1002.11 683.013 L1001.55 683.013 L1000.99 683.013 L1000.43 683.013 L999.872 683.013 L999.313 683.013 L998.754 683.013 L998.194 683.013 L997.635 683.013 L997.076 683.013 L996.517 683.013 L995.957 683.013 L995.398 683.013 L994.839 683.013 L994.28 683.013 L993.72 683.013 L993.161 683.013 L992.602 683.013 L992.043 683.013 L991.483 683.013 L990.924 683.013 L990.365 683.013 L989.806 683.013 L989.246 683.013 L988.687 683.013 L988.128 683.013 L987.569 683.013 L987.009 683.013 L986.45 683.013 L985.891 683.013 L985.332 683.013 L984.772 683.013 L984.213 683.013 L983.654 683.013 L983.095 683.013 L982.535 683.013 L981.976 683.013 L981.417 683.013 L980.858 683.013 L980.298 683.013 L979.739 683.013 L979.18 683.013 L978.621 683.013 L978.061 683.013 L977.502 683.013 L976.943 683.013 L976.384 683.013 L975.824 683.013 L975.265 683.013 L974.706 683.013 L974.147 683.013 L973.587 683.013 L973.028 683.013 L972.469 683.013 L971.91 683.013 L971.35 683.013 L970.791 683.013 L970.232 683.013 L969.673 683.013 L969.113 683.013 L968.554 683.013 L967.995 683.013 L967.436 683.013 L966.876 683.013 L966.317 683.013 L965.758 683.013 L965.199 683.013 L964.639 683.013 L964.08 683.013 L963.521 683.013 L962.962 683.013 L962.402 683.013 L961.843 683.013 L961.284 683.013 L960.725 683.013 L960.165 683.013 L959.606 683.013 L959.047 683.013 L958.488 683.013 L957.928 683.013 L957.369 683.013 L956.81 683.013 L956.251 683.013 L955.691 683.013 L955.132 683.013 L954.573 683.013 L954.014 683.013 L953.454 683.013 L952.895 683.013 L952.336 683.013 L951.777 683.013 L951.217 683.013 L950.658 683.013 L950.099 683.013 L949.54 683.013 L948.98 683.013 L948.421 683.013 L947.862 683.013 L947.303 683.013 L946.743 683.013 L946.184 683.013 L945.625 683.013 L945.066 683.013 L944.506 683.013 L943.947 683.013 L943.388 683.013 L942.829 683.013 L942.269 683.013 L941.71 683.013 L941.151 683.013 L940.592 683.013 L940.032 683.013 L939.473 683.013 L938.914 683.013 L938.355 683.013 L937.795 683.013 L937.236 683.013 L936.677 683.013 L936.118 683.013 L935.558 683.013 L934.999 683.013 L934.44 683.013 L933.881 683.013 L933.321 683.013 L932.762 683.013 L932.203 683.013 L931.644 683.013 L931.084 683.013 L930.525 683.013 L929.966 683.013 L929.406 683.013 L928.847 683.013 L928.288 683.013 L927.729 683.013 L927.169 683.013 L926.61 683.013 L926.051 683.013 L925.492 683.013 L924.932 683.013 L924.373 683.013 L923.814 683.013 L923.255 683.013 L922.695 683.013 L922.136 683.013 L921.577 683.013 L921.018 683.013 L920.458 683.013 L919.899 683.013 L919.34 683.013 L918.781 683.013 L918.221 683.013 L917.662 683.013 L917.103 683.013 L916.544 683.013 L915.984 683.013 L915.425 683.013 L914.866 683.013 L914.307 683.013 L913.747 683.013 L913.188 683.013 L912.629 683.013 L912.07 683.013 L911.51 683.013 L910.951 683.013 L910.392 683.013 L909.833 683.013 L909.273 683.013 L908.714 683.013 L908.155 683.013 L907.596 683.013 L907.036 683.013 L906.477 683.013 L905.918 683.013 L905.359 683.013 L904.799 683.013 L904.24 683.013 L903.681 683.013 L903.122 683.013 L902.562 683.013 L902.003 683.013 L901.444 683.013 L900.885 683.013 L900.325 683.013 L899.766 683.013 L899.207 683.013 L898.648 683.013 L898.088 683.013 L897.529 683.013 L896.97 683.013 L896.411 683.013 L895.851 683.013 L895.292 683.013 L894.733 683.013 L894.174 683.013 L893.614 683.013 L893.055 683.013 L892.496 683.013 L891.937 683.013 L891.377 683.013 L890.818 683.013 L890.259 683.013 L889.7 683.013 L889.14 683.013 L888.581 683.013 L888.022 683.013 L887.463 683.013 L886.903 683.013 L886.344 683.013 L885.785 683.013 L885.226 683.013 L884.666 683.013 L884.107 683.013 L883.548 683.013 L882.989 683.013 L882.429 683.013 L881.87 683.013 L881.311 683.013 L880.752 683.013 L880.192 683.013 L879.633 683.013 L879.074 683.013 L878.515 683.013 L877.955 683.013 L877.396 683.013 L876.837 683.013 L876.278 683.013 L875.718 683.013 L875.159 683.013 L874.6 683.013 L874.041 683.013 L873.481 683.013 L872.922 683.013 L872.363 683.013 L871.804 683.013 L871.244 683.013 L870.685 683.013 L870.126 683.013 L869.567 683.013 L869.007 683.013 L868.448 683.013 L867.889 683.013 L867.33 683.013 L866.77 683.013 L866.211 683.013 L865.652 683.013 L865.093 683.013 L864.533 683.013 L863.974 683.013 L863.415 683.013 L862.856 683.013 L862.296 683.013 L861.737 683.013 L861.178 683.013 L860.619 683.013 L860.059 683.013 L859.5 683.013 L858.941 683.013 L858.382 683.013 L857.822 683.013 L857.263 683.013 L856.704 683.013 L856.145 683.013 L855.585 683.013 L855.026 683.013 L854.467 683.013 L853.908 683.013 L853.348 683.013 L852.789 683.013 L852.23 683.013 L851.671 683.013 L851.111 683.013 L850.552 683.013 L849.993 683.013 L849.434 683.013 L848.874 683.013 L848.315 683.013 L847.756 683.013 L847.197 683.013 L846.637 683.013 L846.078 683.013 L845.519 683.013 L844.96 683.013 L844.4 683.013 L843.841 683.013 L843.282 683.013 L842.723 683.013 L842.163 683.013 L841.604 683.013 L841.045 683.013 L840.486 683.013 L839.926 683.013 L839.367 683.013 L838.808 683.013 L838.249 683.013 L837.689 683.013 L837.13 683.013 L836.571 683.013 L836.012 683.013 L835.452 683.013 L834.893 683.013 L834.334 683.013 L833.775 683.013 L833.215 683.013 L832.656 683.013 L832.097 683.013 L831.538 683.013 L830.978 683.013 L830.419 683.013 L829.86 683.013 L829.301 683.013 L828.741 683.013 L828.182 683.013 L827.623 683.013 L827.064 683.013 L826.504 683.013 L825.945 683.013 L825.386 683.013 L824.827 683.013 L824.267 683.013 L823.708 683.013 L823.149 683.013 L822.59 683.013 L822.03 683.013 L821.471 683.013 L820.912 683.013 L820.353 683.013 L819.793 683.013 L819.234 683.013 L818.675 683.013 L818.116 683.013 L817.556 683.013 L816.997 683.013 L816.438 683.013 L815.879 683.013 L815.319 683.013 L814.76 683.013 L814.201 683.013 L813.642 683.013 L813.082 683.013 L812.523 683.013 L811.964 683.013 L811.405 683.013 L810.845 683.013 L810.286 683.013 L809.727 683.013 L809.168 683.013 L808.608 683.013 L808.049 683.013 L807.49 683.013 L806.931 683.013 L806.371 683.013 L805.812 683.013 L805.253 683.013 L804.693 683.013 L804.134 683.013 L803.575 683.013 L803.016 683.013 L802.456 683.013 L801.897 683.013 L801.338 683.013 L800.779 683.013 L800.219 683.013 L799.66 683.013 L799.101 683.013 L798.542 683.013 L797.982 683.013 L797.423 683.013 L796.864 683.013 L796.305 683.013 L795.745 683.013 L795.186 683.013 L794.627 683.013 L794.068 683.013 L793.508 683.013 L792.949 683.013 L792.39 683.013 L791.831 683.013 L791.271 683.013 L790.712 683.013 L790.153 683.013 L789.594 683.013 L789.034 683.013 L788.475 683.013 L787.916 683.013 L787.357 683.013 L786.797 683.013 L786.238 683.013 L785.679 683.013 L785.12 683.013 L784.56 683.013 L784.001 683.013 L783.442 683.013 L782.883 683.013 L782.323 683.013 L781.764 683.013 L781.205 683.013 L780.646 683.013 L780.086 683.013 L779.527 683.013 L778.968 683.013 L778.409 683.013 L777.849 683.013 L777.29 683.013 L776.731 683.013 L776.172 683.013 L775.612 683.013 L775.053 683.013 L774.494 683.013 L773.935 683.013 L773.375 683.013 L772.816 683.013 L772.257 683.013 L771.698 683.013 L771.138 683.013 L770.579 683.013 L770.02 683.013 L769.461 683.013 L768.901 683.013 L768.342 683.013 L767.783 683.013 L767.224 683.013 L766.664 683.013 L766.105 683.013 L765.546 683.013 L764.987 683.013 L764.427 683.013 L763.868 683.013 L763.309 683.013 L762.75 683.013 L762.19 683.013 L761.631 683.013 L761.072 683.013 L760.513 683.013 L759.953 683.013 L759.394 683.013 L758.835 683.013 L758.276 683.013 L757.716 683.013 L757.157 683.013 L756.598 683.013 L756.039 683.013 L755.479 683.013 L754.92 683.013 L754.361 683.013 L753.802 683.013 L753.242 683.013 L752.683 683.013 L752.124 683.013 L751.565 683.013 L751.005 683.013 L750.446 683.013 L749.887 683.013 L749.328 683.013 L748.768 683.013 L748.209 683.013 L747.65 683.013 L747.091 683.013 L746.531 683.013 L745.972 683.013 L745.413 683.013 L744.854 683.013 L744.294 683.013 L743.735 683.013 L743.176 683.013 L742.617 683.013 L742.057 683.013 L741.498 683.013 L740.939 683.013 L740.38 683.013 L739.82 683.013 L739.261 683.013 L738.702 683.013 L738.143 683.013 L737.583 683.013 L737.024 683.013 L736.465 683.013 L735.906 683.013 L735.346 683.013 L734.787 683.013 L734.228 683.013 L733.669 683.013 L733.109 683.013 L732.55 683.013 L731.991 683.013 L731.432 683.013 L730.872 683.013 L730.313 683.013 L729.754 683.013 L729.195 683.013 L728.635 683.013 L728.076 683.013 L727.517 683.013 L726.958 683.013 L726.398 683.013 L725.839 683.013 L725.28 683.013 L724.721 683.013 L724.161 683.013 L723.602 683.013 L723.043 683.013 L722.484 683.013 L721.924 683.013 L721.365 683.013 L720.806 683.013 L720.247 683.013  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.935 720.806,683.935 721.365,683.935 721.924,683.935 722.484,683.935 723.043,683.935 723.602,683.935 724.161,683.935 724.721,683.935 725.28,683.935 725.839,683.935 726.398,683.935 726.958,683.935 727.517,683.935 728.076,683.935 728.635,683.935 729.195,683.935 729.754,683.935 730.313,683.935 730.872,683.935 731.432,683.935 731.991,683.935 732.55,683.935 733.109,683.935 733.669,683.935 734.228,683.935 734.787,683.935 735.346,683.935 735.906,683.935 736.465,683.935 737.024,683.935 737.583,683.935 738.143,683.935 738.702,683.935 739.261,683.935 739.82,683.935 740.38,683.935 740.939,683.935 741.498,683.935 742.057,683.935 742.617,683.935 743.176,683.935 743.735,683.935 744.294,683.935 744.854,683.935 745.413,683.935 745.972,683.935 746.531,683.935 747.091,683.935 747.65,683.935 748.209,683.935 748.768,683.935 749.328,683.935 749.887,683.935 750.446,683.935 751.005,683.935 751.565,683.935 752.124,683.935 752.683,683.935 753.242,683.935 753.802,683.935 754.361,683.935 754.92,683.935 755.479,683.935 756.039,683.935 756.598,683.935 757.157,683.935 757.716,683.935 758.276,683.935 758.835,683.935 759.394,683.935 759.953,683.935 760.513,683.935 761.072,683.935 761.631,683.935 762.19,683.935 762.75,683.935 763.309,683.935 763.868,683.935 764.427,683.935 764.987,683.935 765.546,683.935 766.105,683.935 766.664,683.935 767.224,683.935 767.783,683.935 768.342,683.935 768.901,683.935 769.461,683.935 770.02,683.935 770.579,683.935 771.138,683.935 771.698,683.935 772.257,683.935 772.816,683.935 773.375,683.935 773.935,683.935 774.494,683.935 775.053,683.935 775.612,683.935 776.172,683.935 776.731,683.935 777.29,683.935 777.849,683.935 778.409,683.935 778.968,683.935 779.527,683.935 780.086,683.935 780.646,683.935 781.205,683.935 781.764,683.935 782.323,683.935 782.883,683.935 783.442,683.935 784.001,683.935 784.56,683.935 785.12,683.935 785.679,683.935 786.238,683.935 786.797,683.935 787.357,683.935 787.916,683.935 788.475,683.935 789.034,683.935 789.594,683.935 790.153,683.935 790.712,683.935 791.271,683.935 791.831,683.935 792.39,683.935 792.949,683.935 793.508,683.935 794.068,683.935 794.627,683.935 795.186,683.935 795.745,683.935 796.305,683.935 796.864,683.935 797.423,683.935 797.982,683.935 798.542,683.935 799.101,683.935 799.66,683.935 800.219,683.935 800.779,683.935 801.338,683.935 801.897,683.935 802.456,683.935 803.016,683.935 803.575,683.935 804.134,683.935 804.693,683.935 805.253,683.935 805.812,683.935 806.371,683.935 806.931,683.935 807.49,683.935 808.049,683.935 808.608,683.935 809.168,683.935 809.727,683.935 810.286,683.935 810.845,683.935 811.405,683.935 811.964,683.935 812.523,683.935 813.082,683.935 813.642,683.935 814.201,683.935 814.76,683.935 815.319,683.935 815.879,683.935 816.438,683.935 816.997,683.935 817.556,683.935 818.116,683.935 818.675,683.935 819.234,683.935 819.793,683.935 820.353,683.935 820.912,683.935 821.471,683.935 822.03,683.935 822.59,683.935 823.149,683.935 823.708,683.935 824.267,683.935 824.827,683.935 825.386,683.935 825.945,683.935 826.504,683.935 827.064,683.935 827.623,683.935 828.182,683.935 828.741,683.935 829.301,683.935 829.86,683.935 830.419,683.935 830.978,683.935 831.538,683.935 832.097,683.935 832.656,683.935 833.215,683.935 833.775,683.935 834.334,683.935 834.893,683.935 835.452,683.935 836.012,683.935 836.571,683.935 837.13,683.935 837.689,683.935 838.249,683.935 838.808,683.935 839.367,683.935 839.926,683.935 840.486,683.935 841.045,683.935 841.604,683.935 842.163,683.935 842.723,683.935 843.282,683.935 843.841,683.935 844.4,683.935 844.96,683.935 845.519,683.935 846.078,683.935 846.637,683.935 847.197,683.935 847.756,683.935 848.315,683.935 848.874,683.935 849.434,683.935 849.993,683.935 850.552,683.935 851.111,683.935 851.671,683.935 852.23,683.935 852.789,683.935 853.348,683.935 853.908,683.935 854.467,683.935 855.026,683.935 855.585,683.935 856.145,683.935 856.704,683.935 857.263,683.935 857.822,683.935 858.382,683.935 858.941,683.935 859.5,683.935 860.059,683.935 860.619,683.935 861.178,683.935 861.737,683.935 862.296,683.935 862.856,683.935 863.415,683.935 863.974,683.935 864.533,683.935 865.093,683.935 865.652,683.935 866.211,683.935 866.77,683.935 867.33,683.935 867.889,683.935 868.448,683.935 869.007,683.935 869.567,683.935 870.126,683.935 870.685,683.935 871.244,683.935 871.804,683.935 872.363,683.935 872.922,683.935 873.481,683.935 874.041,683.935 874.6,683.935 875.159,683.935 875.718,683.935 876.278,683.935 876.837,683.935 877.396,683.935 877.955,683.935 878.515,683.935 879.074,683.935 879.633,683.935 880.192,683.935 880.752,683.935 881.311,683.935 881.87,683.935 882.429,683.935 882.989,683.935 883.548,683.935 884.107,683.935 884.666,683.935 885.226,683.935 885.785,683.935 886.344,683.935 886.903,683.935 887.463,683.935 888.022,683.935 888.581,683.935 889.14,683.935 889.7,683.935 890.259,683.935 890.818,683.935 891.377,683.935 891.937,683.935 892.496,683.935 893.055,683.935 893.614,683.935 894.174,683.935 894.733,683.935 895.292,683.935 895.851,683.935 896.411,683.935 896.97,683.935 897.529,683.935 898.088,683.935 898.648,683.935 899.207,683.935 899.766,683.935 900.325,683.935 900.885,683.935 901.444,683.935 902.003,683.935 902.562,683.935 903.122,683.935 903.681,683.935 904.24,683.935 904.799,683.935 905.359,683.935 905.918,683.935 906.477,683.935 907.036,683.935 907.596,683.935 908.155,683.935 908.714,683.935 909.273,683.935 909.833,683.935 910.392,683.935 910.951,683.935 911.51,683.935 912.07,683.935 912.629,683.935 913.188,683.935 913.747,683.935 914.307,683.935 914.866,683.935 915.425,683.935 915.984,683.935 916.544,683.935 917.103,683.935 917.662,683.935 918.221,683.935 918.781,683.935 919.34,683.935 919.899,683.935 920.458,683.935 921.018,683.935 921.577,683.935 922.136,683.935 922.695,683.935 923.255,683.935 923.814,683.935 924.373,683.935 924.932,683.935 925.492,683.935 926.051,683.935 926.61,683.935 927.169,683.935 927.729,683.935 928.288,683.935 928.847,683.935 929.406,683.935 929.966,683.935 930.525,683.935 931.084,683.935 931.644,683.935 932.203,683.935 932.762,683.935 933.321,683.935 933.881,683.935 934.44,683.935 934.999,683.935 935.558,683.935 936.118,683.935 936.677,683.935 937.236,683.935 937.795,683.935 938.355,683.935 938.914,683.935 939.473,683.935 940.032,683.935 940.592,683.935 941.151,683.935 941.71,683.935 942.269,683.935 942.829,683.935 943.388,683.935 943.947,683.935 944.506,683.935 945.066,683.935 945.625,683.935 946.184,683.935 946.743,683.935 947.303,683.935 947.862,683.935 948.421,683.935 948.98,683.935 949.54,683.935 950.099,683.935 950.658,683.935 951.217,683.935 951.777,683.935 952.336,683.935 952.895,683.935 953.454,683.935 954.014,683.935 954.573,683.935 955.132,683.935 955.691,683.935 956.251,683.935 956.81,683.935 957.369,683.935 957.928,683.935 958.488,683.935 959.047,683.935 959.606,683.935 960.165,683.935 960.725,683.935 961.284,683.935 961.843,683.935 962.402,683.935 962.962,683.935 963.521,683.935 964.08,683.935 964.639,683.935 965.199,683.935 965.758,683.935 966.317,683.935 966.876,683.935 967.436,683.935 967.995,683.935 968.554,683.935 969.113,683.935 969.673,683.935 970.232,683.935 970.791,683.935 971.35,683.935 971.91,683.935 972.469,683.935 973.028,683.935 973.587,683.935 974.147,683.935 974.706,683.935 975.265,683.935 975.824,683.935 976.384,683.935 976.943,683.935 977.502,683.935 978.061,683.935 978.621,683.935 979.18,683.935 979.739,683.935 980.298,683.935 980.858,683.935 981.417,683.935 981.976,683.935 982.535,683.935 983.095,683.935 983.654,683.935 984.213,683.935 984.772,683.935 985.332,683.935 985.891,683.935 986.45,683.935 987.009,683.935 987.569,683.935 988.128,683.935 988.687,683.935 989.246,683.935 989.806,683.935 990.365,683.935 990.924,683.935 991.483,683.935 992.043,683.935 992.602,683.935 993.161,683.935 993.72,683.935 994.28,683.935 994.839,683.935 995.398,683.935 995.957,683.935 996.517,683.935 997.076,683.935 997.635,683.935 998.194,683.935 998.754,683.935 999.313,683.935 999.872,683.935 1000.43,683.935 1000.99,683.935 1001.55,683.935 1002.11,683.935 1002.67,683.935 1003.23,683.935 1003.79,683.935 1004.35,683.935 1004.91,683.935 1005.46,683.935 1006.02,683.935 1006.58,683.935 1007.14,683.935 1007.7,683.935 1008.26,683.935 1008.82,683.935 1009.38,683.935 1009.94,683.935 1010.5,683.935 1011.06,683.935 1011.62,683.935 1012.18,683.935 1012.73,683.935 1013.29,683.935 1013.85,683.935 1014.41,683.935 1014.97,683.935 1015.53,683.935 1016.09,683.935 1016.65,683.935 1017.21,683.935 1017.77,683.935 1018.33,683.935 1018.89,683.935 1019.45,683.935 1020.01,683.935 1020.56,683.935 1021.12,683.935 1021.68,683.935 1022.24,683.935 1022.8,683.935 1023.36,683.935 1023.92,683.935 1024.48,683.935 1025.04,683.935 1025.6,683.935 1026.16,683.935 1026.72,683.935 1027.28,683.935 1027.83,683.935 1028.39,683.935 1028.95,683.935 1029.51,683.935 1030.07,683.935 1030.63,683.935 1031.19,683.935 1031.75,683.935 1032.31,683.935 1032.87,683.935 1033.43,683.935 1033.99,683.935 1034.55,683.935 1035.1,683.935 1035.66,683.935 1036.22,683.935 1036.78,683.935 1037.34,683.935 1037.9,683.935 1038.46,683.935 1039.02,683.935 1039.58,683.935 1040.14,683.935 1040.7,683.935 1041.26,683.935 1041.82,683.935 1042.38,683.935 1042.93,683.935 1043.49,683.935 1044.05,683.935 1044.61,683.935 1045.17,683.935 1045.73,683.935 1046.29,683.935 1046.85,683.935 1047.41,683.935 1047.97,683.935 1048.53,683.935 1049.09,683.935 1049.65,683.935 1050.2,683.935 1050.76,683.935 1051.32,683.935 1051.88,683.935 1052.44,683.935 1053,683.935 1053.56,683.935 1054.12,683.935 1054.68,683.935 1055.24,683.935 1055.8,683.935 1056.36,683.935 1056.92,683.935 1057.48,683.935 1058.03,683.935 1058.59,683.935 1059.15,683.935 1059.71,683.935 1060.27,683.935 1060.83,683.935 1061.39,683.935 1061.95,683.935 1062.51,683.935 1063.07,683.935 1063.63,683.935 1064.19,683.935 1064.75,683.935 1065.3,683.935 1065.86,683.935 1066.42,683.935 1066.98,683.935 1067.54,683.935 1068.1,683.935 1068.66,683.935 1069.22,683.935 1069.78,683.935 1070.34,683.935 1070.9,683.935 1071.46,683.935 1072.02,683.935 1072.57,683.935 1073.13,683.935 1073.69,683.935 1074.25,683.935 1074.81,683.935 1075.37,683.935 1075.93,683.935 1076.49,683.935 1077.05,683.935 1077.61,683.935 1078.17,683.935 1078.73,683.935 1079.29,683.935 1079.85,683.935 1080.4,683.935 1080.96,683.935 1081.52,683.935 1082.08,683.935 1082.64,683.935 1083.2,683.935 1083.76,683.935 1084.32,683.935 1084.88,683.935 1085.44,683.935 1086,683.935 1086.56,683.935 1087.12,683.935 1087.67,683.935 1088.23,683.935 1088.79,683.935 1089.35,683.935 1089.91,683.935 1090.47,683.935 1091.03,683.935 1091.59,683.935 1092.15,683.935 1092.71,683.935 1093.27,683.935 1093.83,683.935 1094.39,683.935 1094.94,683.935 1095.5,683.935 1096.06,683.935 1096.62,683.935 1097.18,683.935 1097.74,683.935 1098.3,683.935 1098.86,683.935 1099.42,683.935 1099.98,683.935 1100.54,683.935 1101.1,683.935 1101.66,683.935 1102.22,683.935 1102.77,683.935 1103.33,683.935 1103.89,683.935 1104.45,683.935 1105.01,683.935 1105.57,683.935 1106.13,683.935 1106.69,683.935 1107.25,683.935 1107.81,683.935 1108.37,683.935 1108.93,683.935 1109.49,683.935 1110.04,683.935 1110.6,683.935 1111.16,683.935 1111.72,683.935 1112.28,683.935 1112.84,683.935 1113.4,683.935 1113.96,683.935 1114.52,683.935 1115.08,683.935 1115.64,683.935 1116.2,683.935 1116.76,683.935 1117.31,683.935 1117.87,683.935 1118.43,683.935 1118.99,683.935 1119.55,683.935 1120.11,683.935 1120.67,683.935 1121.23,683.935 1121.79,683.935 1122.35,683.935 1122.91,683.935 1123.47,683.935 1124.03,683.935 1124.59,683.935 1125.14,683.935 1125.7,683.935 1126.26,683.935 1126.82,683.935 1127.38,683.935 1127.94,683.935 1128.5,683.935 1129.06,683.935 1129.62,683.935 1130.18,683.935 1130.74,683.935 1131.3,683.935 1131.86,683.935 1132.41,683.935 1132.97,683.935 1133.53,683.935 1134.09,683.935 1134.65,683.935 1135.21,683.935 1135.77,683.935 1136.33,683.935 1136.89,683.935 1137.45,683.935 1138.01,683.935 1138.57,683.935 1139.13,683.935 1139.68,683.935 1140.24,683.935 1140.8,683.935 1141.36,683.935 1141.92,683.935 1142.48,683.935 1143.04,683.935 1143.6,683.935 1144.16,683.935 1144.72,683.935 1145.28,683.935 1145.84,683.935 1146.4,683.935 1146.96,683.935 1147.51,683.935 1148.07,683.935 1148.63,683.935 1149.19,683.935 1149.75,683.935 1150.31,683.935 1150.87,683.935 1151.43,683.935 1151.99,683.935 1152.55,683.935 1153.11,683.935 1153.67,683.935 1154.23,683.935 1154.78,683.935 1155.34,683.935 1155.9,683.935 1156.46,683.935 1157.02,683.935 1157.58,683.935 1158.14,683.935 1158.7,683.935 1159.26,683.935 1159.82,683.935 1160.38,683.935 1160.94,683.935 1161.5,683.935 1162.05,683.935 1162.61,683.935 1163.17,683.935 1163.73,683.935 1164.29,683.935 1164.85,683.935 1165.41,683.935 1165.97,683.935 1166.53,683.935 1167.09,683.935 1167.65,683.935 1168.21,683.935 1168.77,683.935 1169.33,683.935 1169.88,683.935 1170.44,683.935 1171,683.935 1171.56,683.935 1172.12,683.935 1172.68,683.935 1173.24,683.935 1173.8,683.935 1174.36,683.935 1174.92,683.935 1175.48,683.935 1176.04,683.935 1176.6,683.935 1177.15,683.935 1177.71,683.935 1178.27,683.935 1178.83,683.935 1179.39,683.935 1179.95,683.935 1180.51,683.935 1181.07,683.935 1181.63,683.935 1182.19,683.935 1182.75,683.935 1183.31,683.935 1183.87,683.935 1184.43,683.935 1184.98,683.935 1185.54,683.935 1186.1,683.935 1186.66,683.935 1187.22,683.935 1187.78,683.935 1188.34,683.935 1188.9,683.935 1189.46,683.935 1190.02,683.935 1190.58,683.935 1191.14,683.935 1191.7,683.935 1192.25,683.935 1192.81,683.935 1193.37,683.935 1193.93,683.935 1194.49,683.935 1195.05,683.935 1195.61,683.935 1196.17,683.935 1196.73,683.935 1197.29,683.935 1197.85,683.935 1198.41,683.935 1198.97,683.935 1199.52,683.935 1200.08,683.935 1200.64,683.935 1201.2,683.935 1201.76,683.935 1202.32,683.935 1202.88,683.935 1203.44,683.935 1204,683.935 1204.56,683.935 1205.12,683.935 1205.68,683.935 1206.24,683.935 1206.8,683.935 1207.35,683.935 1207.91,683.935 1208.47,683.935 1209.03,683.935 1209.59,683.935 1210.15,683.935 1210.71,683.935 1211.27,683.935 1211.83,683.935 1212.39,683.935 1212.95,683.935 1213.51,683.935 1214.07,683.935 1214.62,683.935 1215.18,683.935 1215.74,683.935 1216.3,683.935 1216.86,683.935 1217.42,683.935 1217.98,683.935 1218.54,683.935 1219.1,683.935 1219.66,683.935 1220.22,683.935 1220.78,683.935 1221.34,683.935 1221.89,683.935 1222.45,683.935 1223.01,683.935 1223.57,683.935 1224.13,683.935 1224.69,683.935 1225.25,683.935 1225.81,683.935 1226.37,683.935 1226.93,683.935 1227.49,683.935 1228.05,683.935 1228.61,683.935 1229.17,683.935 1229.72,683.935 1230.28,683.935 1230.84,683.935 1231.4,683.935 1231.96,683.935 1232.52,683.935 1233.08,683.935 1233.64,683.935 1234.2,683.935 1234.76,683.935 1235.32,683.935 1235.88,683.935 1236.44,683.935 1236.99,683.935 1237.55,683.935 1238.11,683.935 1238.67,683.935 1239.23,683.935 1239.79,683.935 1240.35,683.935 1240.91,683.935 1241.47,683.935 1242.03,683.935 1242.59,683.935 1243.15,683.935 1243.71,683.935 1244.26,683.935 1244.82,683.935 1245.38,683.935 1245.94,683.935 1246.5,683.935 1247.06,683.935 1247.62,683.935 1248.18,683.935 1248.74,683.935 1249.3,683.935 1249.86,683.935 1250.42,683.935 1250.98,683.935 1251.54,683.935 1252.09,683.935 1252.65,683.935 1253.21,683.935 1253.77,683.935 1254.33,683.935 1254.89,683.935 1255.45,683.935 1256.01,683.935 1256.57,683.935 1257.13,683.935 1257.69,683.935 1258.25,683.935 1258.81,683.935 1259.36,683.935 1259.92,683.935 1260.48,683.935 1261.04,683.935 1261.6,683.935 1262.16,683.935 1262.72,683.935 1263.28,683.935 1263.84,683.935 1264.4,683.935 1264.96,683.935 1265.52,683.935 1266.08,683.935 1266.63,683.935 1267.19,683.935 1267.75,683.935 1268.31,683.935 1268.87,683.935 1269.43,683.935 1269.99,683.935 1270.55,683.935 1271.11,683.935 1271.67,683.935 1272.23,683.935 1272.79,683.935 1273.35,683.935 1273.91,683.935 1274.46,683.935 1275.02,683.935 1275.58,683.935 1276.14,683.935 1276.7,683.935 1277.26,683.935 1277.82,683.935 1278.38,683.935 1278.94,683.935 1279.5,683.935 1280.06,683.935 1280.62,683.935 1281.18,683.935 1281.73,683.935 1282.29,683.935 1282.85,683.935 1283.41,683.935 1283.97,683.935 1284.53,683.935 1285.09,683.935 1285.65,683.935 1286.21,683.935 1286.77,683.935 1287.33,683.935 1287.89,683.935 1288.45,683.935 1289,683.935 1289.56,683.935 1290.12,683.935 1290.68,683.935 1291.24,683.935 1291.8,683.935 1292.36,683.935 1292.92,683.935 1293.48,683.935 1294.04,683.935 1294.6,683.935 1295.16,683.935 1295.72,683.935 1296.28,683.935 1296.83,683.935 1297.39,683.935 1297.95,683.935 1298.51,683.935 1299.07,683.935 1299.63,683.935 1300.19,683.935 1300.75,683.935 1301.31,683.935 1301.87,683.935 1302.43,683.935 1302.99,683.935 1303.55,683.935 1304.1,683.935 1304.66,683.935 1305.22,683.935 1305.78,683.935 1306.34,683.935 1306.9,683.935 1307.46,683.935 1308.02,683.935 1308.58,683.935 1309.14,683.935 1309.7,683.935 1310.26,683.935 1310.82,683.935 1311.38,683.935 1311.93,683.935 1312.49,683.935 1313.05,683.935 1313.61,683.935 1314.17,683.935 1314.73,683.935 1315.29,683.935 1315.85,683.935 1316.41,683.935 1316.97,683.935 1317.53,683.935 1318.09,683.935 1318.65,683.935 1319.2,683.935 1319.76,683.935 1320.32,683.935 1320.88,683.935 1321.44,683.935 1322,683.935 1322.56,683.935 1323.12,683.935 1323.68,683.935 1324.24,683.935 1324.8,683.935 1325.36,683.935 1325.92,683.935 1326.47,683.935 1327.03,683.935 1327.59,683.935 1328.15,683.935 1328.71,683.935 1329.27,683.935 1329.83,683.935 1330.39,683.935 1330.95,683.935 1331.51,683.935 1332.07,683.935 1332.63,683.935 1333.19,683.935 1333.75,683.935 1334.3,683.935 1334.86,683.935 1335.42,683.935 1335.98,683.935 1336.54,683.935 1337.1,683.935 1337.66,683.935 1338.22,683.935 1338.78,683.935 1339.34,683.935 1339.9,683.935 1340.46,683.935 1341.02,683.935 1341.57,683.935 1342.13,683.935 1342.69,683.935 1343.25,683.935 1343.81,683.935 1344.37,683.935 1344.93,683.935 1345.49,683.935 1346.05,683.935 1346.61,683.935 1347.17,683.935 1347.73,683.935 1348.29,683.935 1348.84,683.935 1349.4,683.935 1349.96,683.935 1350.52,683.935 1351.08,683.935 1351.64,683.935 1352.2,683.935 1352.76,683.935 1353.32,683.935 1353.88,683.935 1354.44,683.935 1355,683.935 1355.56,683.935 1356.12,683.935 1356.67,683.935 1357.23,683.935 1357.79,683.935 1358.35,683.935 1358.91,683.935 1359.47,683.935 1360.03,683.935 1360.59,683.935 1361.15,683.935 1361.71,683.935 1362.27,683.935 1362.83,683.935 1363.39,683.935 1363.94,683.935 1364.5,683.935 1365.06,683.935 1365.62,683.935 1366.18,683.935 1366.74,683.935 1367.3,683.935 1367.86,683.935 1368.42,683.935 1368.98,683.935 1369.54,683.935 1370.1,683.935 1370.66,683.935 1371.21,683.935 1371.77,683.935 1372.33,683.935 1372.89,683.935 1373.45,683.935 1374.01,683.935 1374.57,683.935 1375.13,683.935 1375.69,683.935 1376.25,683.935 1376.81,683.935 1377.37,683.935 1377.93,683.935 1378.49,683.935 1379.04,683.935 1379.6,683.935 1380.16,683.935 1380.72,683.935 1381.28,683.935 1381.84,683.935 1382.4,683.935 1382.96,683.935 1383.52,683.935 1384.08,683.935 1384.64,683.935 1385.2,683.935 1385.76,683.935 1386.31,683.935 1386.87,683.935 1387.43,683.935 1387.99,683.935 1388.55,683.935 1389.11,683.935 1389.67,683.935 1390.23,683.935 1390.79,683.935 1391.35,683.935 1391.91,683.935 1392.47,683.935 1393.03,683.935 1393.58,683.935 1394.14,683.935 1394.7,683.935 1395.26,683.935 1395.82,683.935 1396.38,683.935 1396.94,683.935 1397.5,683.935 1398.06,683.935 1398.62,683.935 1399.18,683.935 1399.74,683.935 1400.3,683.935 1400.86,683.935 1401.41,683.935 1401.97,683.935 1402.53,683.935 1403.09,683.935 1403.65,683.935 1404.21,683.935 1404.77,683.935 1405.33,683.935 1405.89,683.935 1406.45,683.935 1407.01,683.935 1407.57,683.935 1408.13,683.935 1408.68,683.935 1409.24,683.935 1409.8,683.935 1410.36,683.935 1410.92,683.935 1411.48,683.935 1412.04,683.935 1412.6,683.935 1413.16,683.935 1413.72,683.935 1414.28,683.935 1414.84,683.935 1415.4,683.935 1415.95,683.935 1416.51,683.935 1417.07,683.935 1417.63,683.935 1418.19,683.935 1418.75,683.935 1419.31,683.935 1419.87,683.935 1420.43,683.935 1420.99,683.935 1421.55,683.935 1422.11,683.935 1422.67,683.935 1423.23,683.935 1423.78,683.935 1424.34,683.935 1424.9,683.935 1425.46,683.935 1426.02,683.935 1426.58,683.935 1427.14,683.935 1427.7,683.935 1428.26,683.935 1428.82,683.935 1429.38,683.935 1429.94,683.935 1430.5,683.935 1431.05,683.935 1431.61,683.935 1432.17,683.935 1432.73,683.935 1433.29,683.935 1433.85,683.935 1434.41,683.935 1434.97,683.935 1435.53,683.935 1436.09,683.935 1436.65,683.935 1437.21,683.935 1437.77,683.935 1438.33,683.935 1438.88,683.935 1439.44,683.935 1440,683.935 1440.56,683.935 1441.12,683.935 1441.68,683.935 1442.24,683.935 1442.8,683.935 1443.36,683.935 1443.92,683.935 1444.48,683.935 1445.04,683.935 1445.6,683.935 1446.15,683.935 1446.71,683.935 1447.27,683.935 1447.83,683.935 1448.39,683.935 1448.95,683.935 1449.51,683.935 1450.07,683.935 1450.63,683.935 1451.19,683.935 1451.75,683.935 1452.31,683.935 1452.87,683.935 1453.42,683.935 1453.98,683.935 1454.54,683.935 1455.1,683.935 1455.66,683.935 1456.22,683.935 1456.78,683.935 1457.34,683.935 1457.9,683.935 1458.46,683.935 1459.02,683.935 1459.58,683.935 1460.14,683.935 1460.7,683.935 1461.25,683.935 1461.81,683.935 1462.37,683.935 1462.93,683.935 1463.49,683.935 1464.05,683.935 1464.61,683.935 1465.17,683.935 1465.73,683.935 1466.29,683.935 1466.85,683.935 1467.41,683.935 1467.97,683.935 1468.52,683.935 1469.08,683.935 1469.64,683.935 1470.2,683.935 1470.76,683.935 1471.32,683.935 1471.88,683.935 1472.44,683.935 1473,683.935 1473.56,683.935 1474.12,683.935 1474.68,683.935 1475.24,683.935 1475.79,683.935 1476.35,683.935 1476.91,683.935 1477.47,683.935 1478.03,683.935 1478.59,683.935 1479.15,683.935 1479.71,683.935 1480.27,683.935 1480.83,683.935 1481.39,683.935 1481.95,683.935 1482.51,683.935 1483.07,683.935 1483.62,683.935 1484.18,683.935 1484.74,683.935 1485.3,683.935 1485.86,683.935 1486.42,683.935 1486.98,683.935 1487.54,683.935 1488.1,683.935 1488.66,683.935 1489.22,683.935 1489.78,683.935 1490.34,683.935 1490.89,683.935 1491.45,683.935 1492.01,683.935 1492.57,683.935 1493.13,683.935 1493.69,683.935 1494.25,683.935 1494.81,683.935 1495.37,683.935 1495.93,683.935 1496.49,683.935 1497.05,683.935 1497.61,683.935 1498.16,683.935 1498.72,683.935 1499.28,683.935 1499.84,683.935 1500.4,683.935 1500.96,683.935 1501.52,683.935 1502.08,683.935 1502.64,683.935 1503.2,683.935 1503.76,683.935 1504.32,683.935 1504.88,683.935 1505.44,683.935 1505.99,683.935 1506.55,683.935 1507.11,683.935 1507.67,683.935 1508.23,683.935 1508.79,683.935 1509.35,683.935 1509.91,683.935 1510.47,683.935 1511.03,683.935 1511.59,683.935 1512.15,683.935 1512.71,683.935 1513.26,683.935 1513.82,683.935 1514.38,683.935 1514.94,683.935 1515.5,683.935 1516.06,683.935 1516.62,683.935 1517.18,683.935 1517.74,683.935 1518.3,683.935 1518.86,683.935 1519.42,683.935 1519.98,683.935 1520.53,683.935 1521.09,683.935 1521.65,683.935 1522.21,683.935 1522.77,683.935 1523.33,683.935 1523.89,683.935 1524.45,683.935 1525.01,683.935 1525.57,683.935 1526.13,683.935 1526.69,683.935 1527.25,683.935 1527.81,683.935 1528.36,683.935 1528.92,683.935 1529.48,683.935 1530.04,683.935 1530.6,683.935 1531.16,683.935 1531.72,683.935 1532.28,683.935 1532.84,683.935 1533.4,683.935 1533.96,683.935 1534.52,683.935 1535.08,683.935 1535.63,683.935 1536.19,683.935 1536.75,683.935 1537.31,683.935 1537.87,683.935 1538.43,683.935 1538.99,683.935 1539.55,683.935 1540.11,683.935 1540.67,683.935 1541.23,683.935 1541.79,683.935 1542.35,683.935 1542.9,683.935 1543.46,683.935 1544.02,683.935 1544.58,683.935 1545.14,683.935 1545.7,683.935 1546.26,683.935 1546.82,683.935 1547.38,683.935 1547.94,683.935 1548.5,683.935 1549.06,683.935 1549.62,683.935 1550.18,683.935 1550.73,683.935 1551.29,683.935 1551.85,683.935 1552.41,683.935 1552.97,683.935 1553.53,683.935 1554.09,683.935 1554.65,683.935 1555.21,683.935 1555.77,683.935 1556.33,683.935 1556.89,683.935 1557.45,683.935 1558,683.935 1558.56,683.935 1559.12,683.935 1559.68,683.935 1560.24,683.935 1560.8,683.935 1561.36,683.935 1561.92,683.935 1562.48,683.935 1563.04,683.935 1563.6,683.935 1564.16,683.935 1564.72,683.935 1565.28,683.935 1565.83,683.935 1566.39,683.935 1566.95,683.935 1567.51,683.935 1568.07,683.935 1568.63,683.935 1569.19,683.935 1569.75,683.935 1570.31,683.935 1570.87,683.935 1571.43,683.935 1571.99,683.935 1572.55,683.935 1573.1,683.935 1573.66,683.935 1574.22,683.935 1574.78,683.935 1575.34,683.935 1575.9,683.935 1576.46,683.935 1577.02,683.935 1577.58,683.935 1578.14,683.935 1578.7,683.935 1579.26,683.935 1579.82,683.935 1580.37,683.935 1580.93,683.935 1581.49,683.935 1582.05,683.935 1582.61,683.935 1583.17,683.935 1583.73,683.935 1584.29,683.935 1584.85,683.935 1585.41,683.935 1585.97,683.935 1586.53,683.935 1587.09,683.935 1587.65,683.935 1588.2,683.935 1588.76,683.935 1589.32,683.935 1589.88,683.935 1590.44,683.935 1591,683.935 1591.56,683.935 1592.12,683.935 1592.68,683.935 1593.24,683.935 1593.8,683.935 1594.36,683.935 1594.92,683.935 1595.47,683.935 1596.03,683.935 1596.59,683.935 1597.15,683.935 1597.71,683.935 1598.27,683.935 1598.83,683.935 1599.39,683.935 1599.95,683.935 1600.51,683.935 1601.07,683.935 1601.63,683.935 1602.19,683.935 1602.74,683.935 1603.3,683.935 1603.86,683.935 1604.42,683.935 1604.98,683.935 1605.54,683.935 1606.1,683.935 1606.66,683.935 1607.22,683.935 1607.78,683.935 1608.34,683.935 1608.9,683.935 1609.46,683.935 1610.02,683.935 1610.57,683.935 1611.13,683.935 1611.69,683.935 1612.25,683.935 1612.81,683.935 1613.37,683.935 1613.93,683.935 1614.49,683.935 1615.05,683.935 1615.61,683.935 1616.17,683.935 1616.73,683.935 1617.29,683.935 1617.84,683.935 1618.4,683.935 1618.96,683.935 1619.52,683.935 1620.08,683.935 1620.64,683.935 1621.2,683.935 1621.76,683.935 1622.32,683.935 1622.88,683.935 1623.44,683.935 1624,683.935 1624.56,683.935 1625.11,683.935 1625.67,683.935 1626.23,683.935 1626.79,683.935 1627.35,683.935 1627.91,683.935 1628.47,683.935 1629.03,683.935 1629.59,683.935 1630.15,683.935 1630.71,683.935 1631.27,683.935 1631.83,683.935 1632.39,683.935 1632.94,683.935 1633.5,683.935 1634.06,683.935 1634.62,683.935 1635.18,683.935 1635.74,683.935 1636.3,683.935 1636.86,683.935 1637.42,683.935 1637.98,683.935 1638.54,683.935 1639.1,683.935 1639.66,683.935 1640.21,683.935 1640.77,683.935 1641.33,683.935 1641.89,683.935 1642.45,683.935 1643.01,683.935 1643.57,683.935 1644.13,683.935 1644.69,683.935 1645.25,683.935 1645.81,683.935 1646.37,683.935 1646.93,683.935 1647.48,683.935 1648.04,683.935 1648.6,683.935 1649.16,683.935 1649.72,683.935 1650.28,683.935 1650.84,683.935 1651.4,683.935 1651.96,683.935 1652.52,683.935 1653.08,683.935 1653.64,683.935 1654.2,683.935 1654.76,683.935 1655.31,683.935 1655.87,683.935 1656.43,683.935 1656.99,683.935 1657.55,683.935 1658.11,683.935 1658.67,683.935 1659.23,683.935 1659.79,683.935 1660.35,683.935 1660.91,683.935 1661.47,683.935 1662.03,683.935 1662.58,683.935 1663.14,683.935 1663.7,683.935 1664.26,683.935 1664.82,683.935 1665.38,683.935 1665.94,683.935 1666.5,683.935 1667.06,683.935 1667.62,683.935 1668.18,683.935 1668.74,683.935 1669.3,683.935 1669.85,683.935 1670.41,683.935 1670.97,683.935 1671.53,683.935 1672.09,683.935 1672.65,683.935 1673.21,683.935 1673.77,683.935 1674.33,683.935 1674.89,683.935 1675.45,683.935 1676.01,683.935 1676.57,683.935 1677.13,683.935 1677.68,683.935 1678.24,683.935 1678.8,683.935 1679.36,683.935 1679.92,683.935 1680.48,683.935 1681.04,683.935 1681.6,683.935 1682.16,683.935 1682.72,683.935 1683.28,683.935 1683.84,683.935 1684.4,683.935 1684.95,683.935 1685.51,683.935 1686.07,683.935 1686.63,683.935 1687.19,683.935 1687.75,683.935 1688.31,683.935 1688.87,683.935 1689.43,683.935 1689.99,683.935 1690.55,683.935 1691.11,683.935 1691.67,683.935 1692.23,683.935 1692.78,683.935 1693.34,683.935 1693.9,683.935 1694.46,683.935 1695.02,683.935 1695.58,683.935 1696.14,683.935 1696.7,683.935 1697.26,683.935 1697.82,683.935 1698.38,683.935 1698.94,683.935 1699.5,683.935 1700.05,683.935 1700.61,683.935 1701.17,683.935 1701.73,683.935 1702.29,683.935 1702.85,683.935 1703.41,683.935 1703.97,683.935 1704.53,683.935 1705.09,683.935 1705.65,683.935 1706.21,683.935 1706.77,683.935 1707.32,683.935 1707.88,683.935 1708.44,683.935 1709,683.935 1709.56,683.935 1710.12,683.935 1710.68,683.935 1711.24,683.935 1711.8,683.935 1712.36,683.935 1712.92,683.935 1713.48,683.935 1714.04,683.935 1714.6,683.935 1715.15,683.935 1715.71,683.935 1716.27,683.935 1716.83,683.935 1717.39,683.935 1717.95,683.935 1718.51,683.935 1719.07,683.935 1719.63,683.935 1720.19,683.935 1720.75,683.935 1721.31,683.935 1721.87,683.935 1722.42,683.935 1722.98,683.935 1723.54,683.935 1724.1,683.935 1724.66,683.935 1725.22,683.935 1725.78,683.935 1726.34,683.935 1726.9,683.935 1727.46,683.935 1728.02,683.935 1728.58,683.935 1729.14,683.935 1729.69,683.935 1730.25,683.935 1730.81,683.935 1731.37,683.935 1731.93,683.935 1732.49,683.935 1733.05,683.935 1733.61,683.935 1734.17,683.935 1734.73,683.935 1735.29,683.935 1735.85,683.935 1736.41,683.935 1736.97,683.935 1737.52,683.935 1738.08,683.935 1738.64,683.935 1739.2,683.935 1739.76,683.935 1740.32,683.935 1740.88,683.935 1741.44,683.935 1742,683.935 1742.56,683.935 1743.12,683.935 1743.68,683.935 1744.24,683.935 1744.79,683.935 1745.35,683.935 1745.91,683.935 1746.47,683.935 1747.03,683.935 1747.59,683.935 1748.15,683.935 1748.71,683.935 1749.27,683.935 1749.83,683.935 1750.39,683.935 1750.95,683.935 1751.51,683.935 1752.06,683.935 1752.62,683.935 1753.18,683.935 1753.74,683.935 1754.3,683.935 1754.86,683.935 1755.42,683.935 1755.98,683.935 1756.54,683.935 1757.1,683.935 1757.66,683.935 1758.22,683.935 1758.78,683.935 1759.34,683.935 1759.89,683.935 1760.45,683.935 1761.01,683.935 1761.57,683.935 1762.13,683.935 1762.69,683.935 1763.25,683.935 1763.81,683.935 1764.37,683.935 1764.93,683.935 1765.49,683.935 1766.05,683.935 1766.61,683.935 1767.16,683.935 1767.72,683.935 1768.28,683.935 1768.84,683.935 1769.4,683.935 1769.96,683.935 1770.52,683.935 1771.08,683.935 1771.64,683.935 1772.2,683.935 1772.76,683.935 1773.32,683.935 1773.88,683.935 1774.43,683.935 1774.99,683.935 1775.55,683.935 1776.11,683.935 1776.67,683.935 1777.23,683.935 1777.79,683.935 1778.35,683.935 1778.91,683.935 1779.47,683.935 1780.03,683.935 1780.59,683.935 1781.15,683.935 1781.71,683.935 1782.26,683.935 1782.82,683.935 1783.38,683.935 1783.94,683.935 1784.5,683.935 1785.06,683.935 1785.62,683.935 1786.18,683.935 1786.74,683.935 1787.3,683.935 1787.86,683.935 1788.42,683.935 1788.98,683.935 1789.53,683.935 1790.09,683.935 1790.65,683.935 1791.21,683.935 1791.77,683.935 1792.33,683.935 1792.89,683.935 1793.45,683.935 1794.01,683.935 1794.57,683.935 1795.13,683.935 1795.69,683.935 1796.25,683.935 1796.8,683.935 1797.36,683.935 1797.92,683.935 1798.48,683.935 1799.04,683.935 1799.6,683.935 1800.16,683.935 1800.72,683.935 1801.28,683.935 1801.84,683.935 1802.4,683.935 1802.96,683.935 1803.52,683.935 1804.08,683.935 1804.63,683.935 1805.19,683.935 1805.75,683.935 1806.31,683.935 1806.87,683.935 1807.43,683.935 1807.99,683.935 1808.55,683.935 1809.11,683.935 1809.67,683.935 1810.23,683.935 1810.79,683.935 1811.35,683.935 1811.9,683.935 1812.46,683.935 1813.02,683.935 1813.58,683.935 1814.14,683.935 1814.7,683.935 1815.26,683.935 1815.82,683.935 1816.38,683.935 1816.94,683.935 1817.5,683.935 1818.06,683.935 1818.62,683.935 1819.18,683.935 1819.73,683.935 1820.29,683.935 1820.85,683.935 1821.41,683.935 1821.97,683.935 1822.53,683.935 1823.09,683.935 1823.65,683.935 1824.21,683.935 1824.77,683.935 1825.33,683.935 1825.89,683.935 1826.45,683.935 1827,683.935 1827.56,683.935 1828.12,683.935 1828.68,683.935 1829.24,683.935 1829.8,683.935 1830.36,683.935 1830.92,683.935 1831.48,683.935 1832.04,683.935 1832.6,683.935 1833.16,683.935 1833.72,683.935 1834.27,683.935 1834.83,683.935 1835.39,683.935 1835.95,683.935 1836.51,683.935 1837.07,683.935 1837.63,683.935 1838.19,683.935 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030428575010147 ± 0.021472115594075074\nProjected Energy: -4.016846298308983 ± (0.004721743090983388, 0.004639871560496722)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.491107</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5719e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4107e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.1411e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.522e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.725e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.506e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133743\n -0.7590191922770817\n  0.13584182219621788\n  0.15789998694608443\n  0.8767114411781289\n  1.530592997097325\n  1.5835732611867464\n  3.072870330325866\n  3.12567265395184\n  4.862107221562174\n  6.2606948503805935\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
